record_number,buggy_code,fixed_code,code_similarity
162001,"@Override public ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}","@Override protected ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}",0.934131736526946
162002,"@Override public ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}","@Override protected ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}",0.934131736526946
162003,"@Override public Long toNonNullValue(Instant value){
  return new Long(value.getMillis());
}","@Override public Long toNonNullValue(Instant value){
  return Long.valueOf(value.getMillis());
}",0.9361702127659576
162004,"@Override public Long toNonNullValue(LocalTime value){
  return new Long(value.getMillisOfDay() * 1000000L);
}","@Override public Long toNonNullValue(LocalTime value){
  return Long.valueOf(value.getMillisOfDay() * 1000000L);
}",0.9464285714285714
162005,"@Override public Long toNonNullValue(TimeOfDay value){
  return new Long((value.toLocalTime().getMillisOfDay()) * 1000000L);
}","@Override public Long toNonNullValue(TimeOfDay value){
  return Long.valueOf((value.toLocalTime().getMillisOfDay()) * 1000000L);
}",0.953125
162006,"@Override public ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}","@Override protected ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}",0.934131736526946
162007,"@Override public ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}","@Override protected ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}",0.934131736526946
162008,"@Override public ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}","@Override protected ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}",0.934131736526946
162009,"@Override public ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}","@Override protected ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}",0.934131736526946
162010,"@Override public ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}","@Override protected ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}",0.934131736526946
162011,"@Override public ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}","@Override protected ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}",0.934131736526946
162012,"@Override public ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}","@Override protected ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}",0.934131736526946
162013,"@Override public ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}","@Override protected ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}",0.934131736526946
162014,"@Override public ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}","@Override protected ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}",0.934131736526946
162015,"@Override public ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}","@Override protected ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}",0.934131736526946
162016,"@Override public Long toNonNullValue(LocalTime value){
  return new Long(value.toNanoOfDay());
}","@Override public Long toNonNullValue(LocalTime value){
  return Long.valueOf(value.toNanoOfDay());
}",0.9387755102040816
162017,"public int[] sqlTypes(){
  return sqlTypes;
}","public int[] sqlTypes(){
  return Arrays.copyOf(sqlTypes,sqlTypes.length);
}",0.743801652892562
162018,"public abstract ColumnMapper<?,?>[] getColumnMappers();","protected abstract ColumnMapper<?,?>[] getColumnMappers();",0.9026548672566372
162019,"public final int[] sqlTypes(){
  return sqlTypes;
}","public final int[] sqlTypes(){
  return Arrays.copyOf(sqlTypes,sqlTypes.length);
}",0.7669172932330827
162020,"/** 
 * <p> Converts the selected item from the drop down list into a sequence of character that can be used in the edit box. </p>
 * @param selectedItem the item selected by the user for completion
 * @return a sequence of characters representing the selected suggestion
 */
protected CharSequence convertSelectionToString(Object selectedItem){
  return mFilter.convertResultToString(selectedItem);
}","/** 
 * <p> Converts the selected item from the drop down list into a sequence of character that can be used in the edit box. </p>
 * @param selectedItem the item selected by the user for completion
 * @return a sequence of characters representing the selected suggestion
 */
protected CharSequence convertSelectionToString(Object selectedItem){
  if (mFilter == null) {
    return selectedItem == null ? ""String_Node_Str"" : selectedItem.toString();
  }
  return mFilter.convertResultToString(selectedItem);
}",0.8087912087912088
162021,"void setCombinedAdapter(ListAdapter adapter){
  if (mObserver == null) {
    mObserver=new PopupDataSetObserver();
  }
 else   if (mCombinedAdapter != null) {
    mCombinedAdapter.unregisterDataSetObserver(mObserver);
  }
  mCombinedAdapter=adapter;
  if (mCombinedAdapter != null) {
    adapter.registerDataSetObserver(mObserver);
  }
  if (mDropDownList != null) {
    mDropDownList.setAdapter(mCombinedAdapter);
  }
}","void setCombinedAdapter(ListAdapter adapter){
  if (adapter == null) {
    if (mObserver != null && mCombinedAdapter != null) {
      mCombinedAdapter.unregisterDataSetObserver(mObserver);
    }
    mCombinedAdapter=null;
    mFilter=null;
    return;
  }
  if (mObserver == null) {
    mObserver=new PopupDataSetObserver();
  }
 else   if (mCombinedAdapter != null) {
    mCombinedAdapter.unregisterDataSetObserver(mObserver);
  }
  mCombinedAdapter=adapter;
  if (mCombinedAdapter != null) {
    adapter.registerDataSetObserver(mObserver);
  }
  if (mDropDownList != null) {
    mDropDownList.setAdapter(mCombinedAdapter);
  }
}",0.7866666666666666
162022,"void doAfterTextChanged(){
  if (mBlockCompletion)   return;
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + mOpenBefore + ""String_Node_Str""+ isPopupShowing());
  if (mOpenBefore && !isPopupShowing()) {
    return;
  }
  if (mFilter != null) {
    performFiltering(getText(),mLastKeyCode);
  }
}","void doAfterTextChanged(){
  if (mBlockCompletion)   return;
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + mOpenBefore + ""String_Node_Str""+ isPopupShowing());
  if (mOpenBefore && !isPopupShowing()) {
    return;
  }
  performFiltering(getText(),mLastKeyCode);
}",0.9439421338155516
162023,"/** 
 * <p> Starts filtering the content of the drop down list. The filtering pattern is the content of the edit box. Subclasses should override this method to filter with a different pattern, for instance a substring of <code>text</code>. </p>
 * @param text the filtering pattern
 * @param keyCode the last character inserted in the edit box; beware that this will be null when text is being added through a soft input method.
 */
protected void performFiltering(CharSequence text,int keyCode){
  if (text == null) {
    updateDropDownForFilter(0,true);
  }
 else {
    mFilter.filter(text,new Filter.FilterListener(){
      @Override public void onFilterComplete(      int count){
        updateDropDownForFilter(count,false);
      }
    }
);
  }
}","/** 
 * <p> Starts filtering the content of the drop down list. The filtering pattern is the content of the edit box. Subclasses should override this method to filter with a different pattern, for instance a substring of <code>text</code>. </p>
 * @param text the filtering pattern
 * @param keyCode the last character inserted in the edit box; beware that this will be null when text is being added through a soft input method.
 */
protected void performFiltering(CharSequence text,int keyCode){
  if (text == null) {
    updateDropDownForFilter(0,true);
  }
 else {
    if (mFilter != null) {
      mFilter.filter(text,new Filter.FilterListener(){
        @Override public void onFilterComplete(        int count){
          updateDropDownForFilter(count,false);
        }
      }
);
    }
  }
}",0.9709489993544222
162024,"private <T extends ListAdapter & Filterable>void setHistoryAdapter(T adapter){
  mHistoryAdapter=adapter;
  if (adapter != null) {
    mHistoryFilter=adapter.getFilter();
  }
}","private <T extends ListAdapter & Filterable>void setHistoryAdapter(T adapter){
  mHistoryAdapter=adapter;
  if (adapter != null) {
    mHistoryFilter=adapter.getFilter();
  }
  rebuildCombinedAdapter();
}",0.9263157894736842
162025,"@Override protected void performFiltering(final CharSequence text,final int keyCode){
  if (mFirstFiltering) {
    rebuildAdapter();
    mFirstFiltering=false;
  }
  if (text == null) {
    HistoryEditText.super.performFiltering(text,keyCode);
  }
 else   if (mHistoryFilter != null) {
    mHistoryFilter.filter(text,new FilterListener(){
      @Override public void onFilterComplete(      int count){
        HistoryEditText.super.performFiltering(text,keyCode);
      }
    }
);
  }
}","@Override protected void performFiltering(final CharSequence text,final int keyCode){
  if (mFirstFiltering) {
    rebuildHistoryAdapter();
    mFirstFiltering=false;
  }
  if (text == null) {
    HistoryEditText.super.performFiltering(text,keyCode);
  }
 else   if (mHistoryFilter != null) {
    mHistoryFilter.filter(text,new FilterListener(){
      @Override public void onFilterComplete(      int count){
        HistoryEditText.super.performFiltering(text,keyCode);
      }
    }
);
  }
}",0.992849846782431
162026,"@Override public void onEditorAction(int actionCode){
  super.onEditorAction(actionCode);
  if (actionCode == getImeOptions()) {
    addCurrentTextToHistory();
    rebuildAdapter();
  }
}","@Override public void onEditorAction(int actionCode){
  super.onEditorAction(actionCode);
  if (actionCode == getImeOptions()) {
    addCurrentTextToHistory();
    rebuildHistoryAdapter();
  }
}",0.9816272965879264
162027,"public void clearHistory(){
  boolean wasShowing=isPopupShowing();
  SQLiteDatabase db=HistoryDb.getWritable(getContext());
  HistoryDb.clear(db);
  db.close();
  rebuildAdapter();
  if (wasShowing) {
    showDropDown();
  }
}","public void clearHistory(){
  boolean wasShowing=isPopupShowing();
  SQLiteDatabase db=HistoryDb.getWritable(getContext());
  HistoryDb.clear(db);
  db.close();
  rebuildHistoryAdapter();
  if (wasShowing) {
    showDropDown();
  }
}",0.9847494553376906
162028,"@Override protected ListAdapter getCombinedAdapter(ListAdapter userAdapter){
  if (mHistoryAdapter == null) {
    if (enoughToFilter()) {
      return userAdapter;
    }
 else {
      return null;
    }
  }
 else {
    if (enoughToFilter()) {
      MergeAdapter mergeAdapter=new MergeAdapter();
      mergeAdapter.addAdapter(mHistoryAdapter);
      mergeAdapter.addAdapter(userAdapter);
      return mergeAdapter;
    }
 else {
      return mHistoryAdapter;
    }
  }
}","@Override protected ListAdapter getCombinedAdapter(ListAdapter userAdapter){
  if (mHistoryAdapter == null) {
    if (enoughToFilter()) {
      return userAdapter;
    }
 else {
      return null;
    }
  }
 else {
    if (enoughToFilter() && userAdapter != null) {
      MergeAdapter mergeAdapter=new MergeAdapter();
      mergeAdapter.addAdapter(mHistoryAdapter);
      mergeAdapter.addAdapter(userAdapter);
      return mergeAdapter;
    }
 else {
      return mHistoryAdapter;
    }
  }
}",0.9760665972944848
162029,"private void onPost(){
  JSONObject obj=new JSONObject();
  if (m_title != null)   m_title.clearComposingText();
  if (m_content != null)   m_content.clearComposingText();
  m_progress=ProgressDialog.show(this,getString(R.string.posting_title),getString(R.string.status_submitting_post));
  m_progress.setIndeterminate(true);
  try {
switch (m_type) {
case TYPE_IMAGE:
      if (!isImageLink()) {
        PostImageTask t=new PostImageTask();
        t.execute(m_imageUri);
        return;
      }
    obj.put(""String_Node_Str"",""String_Node_Str"");
case TYPE_NOTE:
  obj.put(""String_Node_Str"",""String_Node_Str"");
break;
case TYPE_COMMENT:
obj.put(""String_Node_Str"",""String_Node_Str"");
break;
case TYPE_VIDEO:
obj.put(""String_Node_Str"",""String_Node_Str"");
if (m_videoLink != null) obj.put(""String_Node_Str"",m_videoLink);
if (m_embedCode != null) obj.put(""String_Node_Str"",m_embedCode);
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
if (m_imageUri != null) {
JSONObject image=new JSONObject();
image.put(""String_Node_Str"",m_imageUri);
obj.put(""String_Node_Str"",image);
}
postPhase2(obj);
}
 catch (Exception ex) {
Log.e(TAG,""String_Node_Str"",ex);
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}","private void onPost(){
  if (m_type == TYPE_NOTE && m_content.getText().length() == 0) {
    new AlertDialog.Builder(this).setTitle(R.string.title_error_dialog).setMessage(R.string.error_no_message_specified).show();
    return;
  }
  if (m_postTo.length() == 0 && m_postCc.length() == 0 && !m_implicitAudience) {
    new AlertDialog.Builder(this).setTitle(R.string.title_error_dialog).setMessage(R.string.error_no_recipients).show();
    return;
  }
  JSONObject obj=new JSONObject();
  if (m_title != null)   m_title.clearComposingText();
  if (m_content != null)   m_content.clearComposingText();
  m_progress=ProgressDialog.show(this,getString(R.string.posting_title),getString(R.string.status_submitting_post));
  m_progress.setIndeterminate(true);
  try {
switch (m_type) {
case TYPE_IMAGE:
      if (!isImageLink()) {
        PostImageTask t=new PostImageTask();
        t.execute(m_imageUri);
        return;
      }
    obj.put(""String_Node_Str"",""String_Node_Str"");
case TYPE_NOTE:
  obj.put(""String_Node_Str"",""String_Node_Str"");
break;
case TYPE_COMMENT:
obj.put(""String_Node_Str"",""String_Node_Str"");
break;
case TYPE_VIDEO:
obj.put(""String_Node_Str"",""String_Node_Str"");
if (m_videoLink != null) obj.put(""String_Node_Str"",m_videoLink);
if (m_embedCode != null) obj.put(""String_Node_Str"",m_embedCode);
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
if (m_imageUri != null) {
JSONObject image=new JSONObject();
image.put(""String_Node_Str"",m_imageUri);
obj.put(""String_Node_Str"",image);
}
postPhase2(obj);
}
 catch (Exception ex) {
Log.e(TAG,""String_Node_Str"",ex);
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}",0.8520055325034578
162030,"public void getNearbyPlaces(AddressListener l){
synchronized (this) {
    while (m_looper == null) {
      try {
        this.wait();
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  if (m_listeners.size() == 0) {
    m_locationManager.requestSingleUpdate(m_criteria,this,m_looper);
  }
  m_listeners.add(l);
}","public void getNearbyPlaces(AddressListener l){
synchronized (this) {
    while (m_looper == null) {
      try {
        this.wait();
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  if (m_listeners.size() == 0) {
    try {
      m_locationManager.requestSingleUpdate(m_criteria,this,m_looper);
    }
 catch (    RuntimeException e) {
      Toast.makeText(m_context,""String_Node_Str"",15);
      SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(m_context);
      prefs.edit().putString(Constants.PREF_MY_LOCATION,""String_Node_Str"").apply();
      m_mainHandler.post(m_dispatchLocationUpdates);
      return;
    }
  }
  m_listeners.add(l);
}",0.6033630069238378
162031,"@Override protected JSONObject doInBackground(Void... arg0){
  Uri uri=getIntent().getData();
  String proxyUrl=getIntent().getStringExtra(""String_Node_Str"");
  try {
    return m_cache.getObject(uri.toString(),proxyUrl);
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"",e);
    Toast.makeText(ObjectActivity.this,""String_Node_Str"" + e.getMessage(),Toast.LENGTH_LONG).show();
    return null;
  }
}","@Override protected JSONObject doInBackground(Void... arg0){
  Uri uri=getIntent().getData();
  String proxyUrl=getIntent().getStringExtra(""String_Node_Str"");
  try {
    return m_cache.getObject(uri.toString(),proxyUrl);
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"",e);
    return null;
  }
}",0.8595271210013908
162032,"protected void onPostExecute(final JSONObject obj){
  onGotObject(obj);
}","protected void onPostExecute(final JSONObject obj){
  if (obj != null) {
    onGotObject(obj);
  }
 else {
    Toast.makeText(ObjectActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT);
    finishActivity(RESULT_CANCELED);
  }
}",0.4866666666666667
162033,"private void onPost(){
  try {
    JSONObject obj=new JSONObject();
    String generator=Utils.readAll(getResources().openRawResource(R.raw.generator));
    if (m_inReplyTo == null) {
      obj.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      obj.put(""String_Node_Str"",""String_Node_Str"");
      obj.put(""String_Node_Str"",m_inReplyTo);
    }
    obj.put(""String_Node_Str"",Html.toHtml(m_content.getEditableText()));
    JSONObject act=new JSONObject();
    act.put(""String_Node_Str"",new JSONObject(generator));
    act.put(""String_Node_Str"",""String_Node_Str"");
    act.put(""String_Node_Str"",obj);
    PostTask t=new PostTask();
    t.execute(act.toString());
  }
 catch (  Exception ex) {
    Toast.makeText(this,""String_Node_Str"" + ex.getLocalizedMessage(),Toast.LENGTH_SHORT).show();
  }
}","private void onPost(){
  try {
    JSONObject obj=new JSONObject();
    String generator=Utils.readAll(getResources().openRawResource(R.raw.generator));
    if (m_inReplyTo == null) {
      obj.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      obj.put(""String_Node_Str"",""String_Node_Str"");
      obj.put(""String_Node_Str"",m_inReplyTo);
    }
    obj.put(""String_Node_Str"",Html.toHtml((Spanned)m_content.getText()));
    JSONObject act=new JSONObject();
    act.put(""String_Node_Str"",new JSONObject(generator));
    act.put(""String_Node_Str"",""String_Node_Str"");
    act.put(""String_Node_Str"",obj);
    PostTask t=new PostTask();
    t.execute(act.toString());
  }
 catch (  Exception ex) {
    Toast.makeText(this,""String_Node_Str"" + ex.getLocalizedMessage(),Toast.LENGTH_SHORT).show();
  }
}",0.9894080996884737
162034,"public Player(LevelHandler level,int x,int y,InputHandler input,String userName,int shirtCol,int faceCol){
  super(level,""String_Node_Str"",x,y,speed,collisionBoders);
  this.input=input;
  this.userName=userName;
  this.faceCol=faceCol;
  this.shirtCol=shirtCol;
  this.colour=Colours.get(-1,111,shirtCol,faceCol);
  fireRate=Small.FIRE_RATE;
  nameOffset=(userName.length() / 2) * fontCharSize - ((userName.length() & 1) == 0 ? fontCharSize / 2 : 0);
}","public Player(LevelHandler level,int x,int y,InputHandler input,String userName,int shirtCol,int faceCol){
  super(level,""String_Node_Str"",x,y,speed,collisionBoders);
  this.input=input;
  this.userName=userName;
  this.faceCol=faceCol;
  this.shirtCol=shirtCol;
  this.colour=Colours.get(-1,111,shirtCol,faceCol);
  fireRate=Small.FIRE_RATE;
}",0.863237139272271
162035,"public String getSanitisedUsername(){
  if (this.getUsername() == null || this.userName.isEmpty()) {
    setUsername(guestPlayerName);
    return guestPlayerName;
  }
 else   return this.getUsername();
}","public String getSanitisedUsername(){
  if (this.getUsername() == null || this.userName.isEmpty()) {
    setUsername(guestPlayerName);
    int offsetUnit=((userName.length() & 1) == 0 ? fontCharSize / 2 : 0);
    nameOffset=(userName.length() / 2) * fontCharSize - offsetUnit;
    return guestPlayerName;
  }
 else   return this.getUsername();
}",0.7408759124087592
162036,"public String getSanitisedUsername(){
  if (this.getUsername() == null || this.userName.isEmpty()) {
    setUsername(guestPlayerName);
    int offsetUnit=((userName.length() & 1) == 0 ? fontCharSize / 2 : 0);
    nameOffset=(userName.length() / 2) * fontCharSize - offsetUnit;
    return guestPlayerName;
  }
 else   return this.getUsername();
}","public String getSanitisedUsername(){
  if (this.getUsername() == null || this.userName.isEmpty()) {
    setUsername(guestPlayerName);
    int offsetUnit=((userName.length() & 1) == 0 ? fontCharSize / 2 : 0);
    nameOffset=(userName.length() / 2) * fontCharSize - offsetUnit;
    return guestPlayerName;
  }
 else   if (nameOffset == 0) {
    int offsetUnit=((userName.length() & 1) == 0 ? fontCharSize / 2 : 0);
    nameOffset=(userName.length() / 2) * fontCharSize - offsetUnit;
  }
  return this.getUsername();
}",0.7386759581881533
162037,"private void toggleKey(int keyCode,boolean isPressed){
  if (!isIgnoreInput()) {
    if (keyCode == KeyEvent.VK_Z && isAzertyCountry || keyCode == KeyEvent.VK_W && !isAzertyCountry || keyCode == KeyEvent.VK_UP) {
      up.toggle(isPressed);
    }
    if (keyCode == KeyEvent.VK_Q && isAzertyCountry || keyCode == KeyEvent.VK_A && !isAzertyCountry || keyCode == KeyEvent.VK_LEFT) {
      left.toggle(isPressed);
    }
    if (keyCode == KeyEvent.VK_S || keyCode == KeyEvent.VK_DOWN) {
      down.toggle(isPressed);
    }
    if (keyCode == KeyEvent.VK_D || keyCode == KeyEvent.VK_RIGHT) {
      right.toggle(isPressed);
    }
  }
  if (isIgnoreInput()) {
    up.toggle(false);
    down.toggle(false);
    left.toggle(false);
    right.toggle(false);
  }
  if (keyCode == KeyEvent.VK_M) {
    this.setPlayMusic(true);
  }
  if (keyCode == KeyEvent.VK_W && isAzertyCountry || keyCode == KeyEvent.VK_Z && !isAzertyCountry) {
    if (Game.getMap() == 2) {
      Game.setChangeLevel(true);
      if (Game.isNpc())       Game.setNpc(false);
    }
  }
  if (keyCode == KeyEvent.VK_N) {
    if (Game.getPlayer().isMoving()) {
      setIgnoreInput(true);
      int n=popup.Warn(""String_Node_Str"");
      if (n == 0) {
        setIgnoreInput(false);
      }
      return;
    }
    if (!Game.isNpc()) {
      Game.setNpc(true);
      Game.npcSpawn();
      print.print(""String_Node_Str"",PrintTypes.GAME);
    }
  }
  if (keyCode == KeyEvent.VK_K) {
    if (Game.isNpc()) {
      Game.setNpc(false);
      Game.npcKill();
      print.print(""String_Node_Str"",PrintTypes.GAME);
    }
  }
  if (keyCode == KeyEvent.VK_A && isAzertyCountry || keyCode == KeyEvent.VK_Q && !isAzertyCountry)   this.quitGame();
  if (keyCode == KeyEvent.VK_BACK_QUOTE) {
    if (!Game.isClosing() && !Game.isDevMode()) {
      Game.setDevMode(true);
      new Thread(new SleepThread());
    }
  }
}","private void toggleKey(int keyCode,boolean isPressed){
  if (!isIgnoreInput()) {
    if (keyCode == KeyEvent.VK_Z && isAzertyCountry || keyCode == KeyEvent.VK_W && !isAzertyCountry || keyCode == KeyEvent.VK_UP) {
      up.toggle(isPressed);
    }
    if (keyCode == KeyEvent.VK_Q && isAzertyCountry || keyCode == KeyEvent.VK_A && !isAzertyCountry || keyCode == KeyEvent.VK_LEFT) {
      left.toggle(isPressed);
    }
    if (keyCode == KeyEvent.VK_S || keyCode == KeyEvent.VK_DOWN) {
      down.toggle(isPressed);
    }
    if (keyCode == KeyEvent.VK_D || keyCode == KeyEvent.VK_RIGHT) {
      right.toggle(isPressed);
    }
  }
  if (isIgnoreInput()) {
    up.toggle(false);
    down.toggle(false);
    left.toggle(false);
    right.toggle(false);
  }
  if (keyCode == KeyEvent.VK_M) {
    this.setPlayMusic(true);
  }
  if (keyCode == KeyEvent.VK_W && isAzertyCountry || keyCode == KeyEvent.VK_Z && !isAzertyCountry) {
    if (Game.getMap() == 2) {
      if (Game.isNpc()) {
        Game.setNpc(false);
      }
      Game.setChangeLevel(true);
    }
  }
  if (keyCode == KeyEvent.VK_N) {
    if (Game.getPlayer().isMoving()) {
      setIgnoreInput(true);
      int n=popup.Warn(""String_Node_Str"");
      if (n == 0) {
        setIgnoreInput(false);
      }
      return;
    }
    if (!Game.isNpc()) {
      Game.setNpc(true);
      Game.npcSpawn();
      print.print(""String_Node_Str"",PrintTypes.GAME);
    }
  }
  if (keyCode == KeyEvent.VK_K) {
    if (Game.isNpc()) {
      Game.setNpc(false);
      Game.npcKill();
      print.print(""String_Node_Str"",PrintTypes.GAME);
    }
  }
  if (keyCode == KeyEvent.VK_A && isAzertyCountry || keyCode == KeyEvent.VK_Q && !isAzertyCountry)   this.quitGame();
  if (keyCode == KeyEvent.VK_BACK_QUOTE) {
    if (!Game.isClosing() && !Game.isDevMode()) {
      Game.setDevMode(true);
      new Thread(new SleepThread());
    }
  }
}",0.9700214132762311
162038,"public void render(){
  BufferStrategy bs=getBufferStrategy();
  if (bs == null) {
    createBufferStrategy(3);
    return;
  }
  int xOffset=(int)getPlayer().getX() - (screen.getWidth() / 2);
  int yOffset=(int)getPlayer().getY() - (screen.getHeight() / 2);
  getLevel().renderTiles(screen,xOffset,yOffset);
  getLevel().renderEntities(screen);
  getLevel().renderProjectileEntities(screen);
  for (int y=0; y < screen.getHeight(); y++) {
    for (int x=0; x < screen.getWidth(); x++) {
      int colourCode=screen.getPixels()[x + y * screen.getWidth()];
      if (colourCode < 255) {
        pixels[x + y * WIDTH]=colours[colourCode];
      }
    }
  }
  if (noAudioDevice == false) {
    if (input.isPlayMusic() == true && notActive == true) {
      int musicOption=JOptionPane.showConfirmDialog(this,""String_Node_Str"",""String_Node_Str"",2,2);
      if (musicOption == 0) {
        musicThread.start();
        notActive=false;
      }
 else {
        print.print(""String_Node_Str"",PrintTypes.GAME);
        input.setPlayMusic(false);
      }
    }
  }
  if (isChangeLevel() == true && getTickCount() % 60 == 0) {
    Game.setChangeLevel(true);
    setChangeLevel(false);
  }
  if (changeLevel == true) {
    print.print(""String_Node_Str"",PrintTypes.GAME);
    if (getMap() == 1) {
      setMap(""String_Node_Str"");
      getLevel().removeEntity(getDummy());
      setNpc(false);
      getLevel().removeEntity(getVendor());
      setMap(2);
    }
 else     if (getMap() == 2) {
      setMap(""String_Node_Str"");
      getLevel().removeEntity(getDummy());
      setNpc(false);
      getLevel().addEntity(getVendor());
      setMap(1);
    }
    changeLevel=false;
  }
  Graphics g=bs.getDrawGraphics();
  g.drawRect(0,0,getWidth(),getHeight());
  g.drawImage(image,0,0,getWidth(),getHeight() - 30,null);
  status(g,isDevMode(),isClosing());
  g.drawImage(image2,0,getHeight() - 30,getWidth(),getHeight(),null);
  g.setColor(Color.WHITE);
  g.setFont(font.getSegoe());
  g.drawString(""String_Node_Str"" + WordUtils.capitalizeFully(player.getSantizedUsername()),3,getHeight() - 17);
  g.setColor(Color.ORANGE);
  if (context.getLocale().getCountry().equals(""String_Node_Str"") || context.getLocale().getCountry().equals(""String_Node_Str"")) {
    g.drawString(""String_Node_Str"",(getWidth() / 2) - (""String_Node_Str"".length() * 3),getHeight() - 17);
  }
 else {
    g.drawString(""String_Node_Str"",(getWidth() / 2) - (""String_Node_Str"".length() * 3),getHeight() - 17);
  }
  g.setColor(Color.YELLOW);
  g.drawString(time.getTime(),(getWidth() - 58),(getHeight() - 3));
  g.setColor(Color.WHITE);
  if (noAudioDevice == true) {
    g.setColor(Color.RED);
    g.drawString(""String_Node_Str"",3,getHeight() - 3);
    trigger++;
    if (trigger == 25) {
      JOptionPane.showMessageDialog(this,""String_Node_Str"",""String_Node_Str"",0);
    }
  }
 else   if (notActive == true) {
    g.setColor(Color.RED);
    g.drawString(""String_Node_Str"",3,getHeight() - 3);
  }
 else {
    g.setColor(Color.GREEN);
    g.drawString(""String_Node_Str"",3,getHeight() - 3);
    g.setColor(Color.WHITE);
    setNowPlaying(WordUtils.capitalize(music.getSongName()[music.getSongNumber()].substring(7,(music.getSongName()[music.getSongNumber()].length() - 4))));
    if (getNowPlaying().startsWith(""String_Node_Str"")) {
      g.drawString(nowPlaying,getWidth() - (nowPlaying.length() * 9) + 12,getHeight() - 17);
    }
 else {
      g.drawString(nowPlaying,getWidth() - (nowPlaying.length() * 9) + 8,getHeight() - 17);
    }
  }
  g.dispose();
  bs.show();
}","public void render(){
  BufferStrategy bs=getBufferStrategy();
  if (bs == null) {
    createBufferStrategy(3);
    return;
  }
  int xOffset=(int)getPlayer().getX() - (screen.getWidth() / 2);
  int yOffset=(int)getPlayer().getY() - (screen.getHeight() / 2);
  getLevel().renderTiles(screen,xOffset,yOffset);
  getLevel().renderEntities(screen);
  getLevel().renderProjectileEntities(screen);
  for (int y=0; y < screen.getHeight(); y++) {
    for (int x=0; x < screen.getWidth(); x++) {
      int colourCode=screen.getPixels()[x + y * screen.getWidth()];
      if (colourCode < 255) {
        pixels[x + y * WIDTH]=colours[colourCode];
      }
    }
  }
  if (noAudioDevice == false) {
    if (input.isPlayMusic() == true && notActive == true) {
      int musicOption=JOptionPane.showConfirmDialog(this,""String_Node_Str"",""String_Node_Str"",2,2);
      if (musicOption == 0) {
        musicThread.start();
        notActive=false;
      }
 else {
        print.print(""String_Node_Str"",PrintTypes.GAME);
        input.setPlayMusic(false);
      }
    }
  }
  if (isChangeLevel() == true && getTickCount() % 60 == 0) {
    Game.setChangeLevel(true);
    setChangeLevel(false);
  }
  if (changeLevel == true) {
    print.print(""String_Node_Str"",PrintTypes.GAME);
    if (getMap() == 1) {
      setMap(""String_Node_Str"");
      if (getDummy() != null) {
        getLevel().removeEntity(getDummy());
        setNpc(false);
      }
      getLevel().removeEntity(getVendor());
      setMap(2);
    }
 else     if (getMap() == 2) {
      setMap(""String_Node_Str"");
      getLevel().removeEntity(getDummy());
      setNpc(false);
      getLevel().addEntity(getVendor());
      setMap(1);
    }
    changeLevel=false;
  }
  Graphics g=bs.getDrawGraphics();
  g.drawRect(0,0,getWidth(),getHeight());
  g.drawImage(image,0,0,getWidth(),getHeight() - 30,null);
  status(g,isDevMode(),isClosing());
  g.drawImage(image2,0,getHeight() - 30,getWidth(),getHeight(),null);
  g.setColor(Color.WHITE);
  g.setFont(font.getSegoe());
  g.drawString(""String_Node_Str"" + WordUtils.capitalizeFully(player.getSantizedUsername()),3,getHeight() - 17);
  g.setColor(Color.ORANGE);
  if (context.getLocale().getCountry().equals(""String_Node_Str"") || context.getLocale().getCountry().equals(""String_Node_Str"")) {
    g.drawString(""String_Node_Str"",(getWidth() / 2) - (""String_Node_Str"".length() * 3),getHeight() - 17);
  }
 else {
    g.drawString(""String_Node_Str"",(getWidth() / 2) - (""String_Node_Str"".length() * 3),getHeight() - 17);
  }
  g.setColor(Color.YELLOW);
  g.drawString(time.getTime(),(getWidth() - 58),(getHeight() - 3));
  g.setColor(Color.WHITE);
  if (noAudioDevice == true) {
    g.setColor(Color.RED);
    g.drawString(""String_Node_Str"",3,getHeight() - 3);
    trigger++;
    if (trigger == 25) {
      JOptionPane.showMessageDialog(this,""String_Node_Str"",""String_Node_Str"",0);
    }
  }
 else   if (notActive == true) {
    g.setColor(Color.RED);
    g.drawString(""String_Node_Str"",3,getHeight() - 3);
  }
 else {
    g.setColor(Color.GREEN);
    g.drawString(""String_Node_Str"",3,getHeight() - 3);
    g.setColor(Color.WHITE);
    setNowPlaying(WordUtils.capitalize(music.getSongName()[music.getSongNumber()].substring(7,(music.getSongName()[music.getSongNumber()].length() - 4))));
    if (getNowPlaying().startsWith(""String_Node_Str"")) {
      g.drawString(nowPlaying,getWidth() - (nowPlaying.length() * 9) + 12,getHeight() - 17);
    }
 else {
      g.drawString(nowPlaying,getWidth() - (nowPlaying.length() * 9) + 8,getHeight() - 17);
    }
  }
  g.dispose();
  bs.show();
}",0.9864598025387872
162039,"public void render(){
  BufferStrategy bs=getBufferStrategy();
  if (bs == null) {
    createBufferStrategy(3);
    return;
  }
  int xOffset=(int)getPlayer().getX() - (screen.getWidth() / 2);
  int yOffset=(int)getPlayer().getY() - (screen.getHeight() / 2);
  getLevel().renderTiles(screen,xOffset,yOffset);
  getLevel().renderEntities(screen);
  getLevel().renderProjectileEntities(screen);
  for (int y=0; y < screen.getHeight(); y++) {
    for (int x=0; x < screen.getWidth(); x++) {
      int colourCode=screen.getPixels()[x + y * screen.getWidth()];
      if (colourCode < 255) {
        pixels[x + y * WIDTH]=colours[colourCode];
      }
    }
  }
  if (noAudioDevice == false) {
    if (input.isPlayMusic() == true && notActive == true) {
      int musicOption=JOptionPane.showConfirmDialog(this,""String_Node_Str"",""String_Node_Str"",2,2);
      if (musicOption == 0) {
        musicThread.start();
        notActive=false;
      }
 else {
        print.print(""String_Node_Str"",PrintTypes.GAME);
        input.setPlayMusic(false);
      }
    }
  }
  if (isChangeLevel() == true && getTickCount() % 60 == 0) {
    Game.setChangeLevel(true);
    setChangeLevel(false);
  }
  if (changeLevel == true) {
    print.print(""String_Node_Str"",PrintTypes.GAME);
    if (getMap() == 1) {
      setMap(""String_Node_Str"");
      getLevel().removeEntity(getDummy());
      setNpc(false);
      getLevel().removeEntity(getVendor());
      setMap(2);
    }
 else     if (getMap() == 2) {
      setMap(""String_Node_Str"");
      getLevel().removeEntity(getDummy());
      setNpc(false);
      getLevel().addEntity(getVendor());
      setMap(1);
    }
    changeLevel=false;
  }
  Graphics g=bs.getDrawGraphics();
  g.drawRect(0,0,getWidth(),getHeight());
  g.drawImage(image,0,0,getWidth(),getHeight() - 30,null);
  status(g,isDevMode(),isClosing());
  g.drawImage(image2,0,getHeight() - 30,getWidth(),getHeight(),null);
  g.setColor(Color.WHITE);
  g.setFont(font.getSegoe());
  g.drawString(""String_Node_Str"" + WordUtils.capitalizeFully(player.getSantizedUsername()),3,getHeight() - 17);
  g.setColor(Color.ORANGE);
  if (context.getLocale().getCountry().equals(""String_Node_Str"") || context.getLocale().getCountry().equals(""String_Node_Str"")) {
    g.drawString(""String_Node_Str"",(getWidth() / 2) - (""String_Node_Str"".length() * 3),getHeight() - 17);
  }
 else {
    g.drawString(""String_Node_Str"",(getWidth() / 2) - (""String_Node_Str"".length() * 3),getHeight() - 17);
  }
  g.setColor(Color.YELLOW);
  g.drawString(time.getTime(),(getWidth() - 58),(getHeight() - 3));
  g.setColor(Color.WHITE);
  if (noAudioDevice == true) {
    g.setColor(Color.RED);
    g.drawString(""String_Node_Str"",3,getHeight() - 3);
    trigger++;
    if (trigger == 25) {
      JOptionPane.showMessageDialog(this,""String_Node_Str"",""String_Node_Str"",0);
    }
  }
 else   if (notActive == true) {
    g.setColor(Color.RED);
    g.drawString(""String_Node_Str"",3,getHeight() - 3);
  }
 else {
    g.setColor(Color.GREEN);
    g.drawString(""String_Node_Str"",3,getHeight() - 3);
    g.setColor(Color.WHITE);
    setNowPlaying(WordUtils.capitalize(music.getSongName()[music.getSongNumber()].substring(7,(music.getSongName()[music.getSongNumber()].length() - 4))));
    if (getNowPlaying().startsWith(""String_Node_Str"")) {
      g.drawString(nowPlaying,getWidth() - (nowPlaying.length() * 9) + 12,getHeight() - 17);
    }
 else {
      g.drawString(nowPlaying,getWidth() - (nowPlaying.length() * 9) + 8,getHeight() - 17);
    }
  }
  g.dispose();
  bs.show();
}","public void render(){
  BufferStrategy bs=getBufferStrategy();
  if (bs == null) {
    createBufferStrategy(3);
    return;
  }
  int xOffset=(int)getPlayer().getX() - (screen.getWidth() / 2);
  int yOffset=(int)getPlayer().getY() - (screen.getHeight() / 2);
  getLevel().renderTiles(screen,xOffset,yOffset);
  getLevel().renderEntities(screen);
  getLevel().renderProjectileEntities(screen);
  for (int y=0; y < screen.getHeight(); y++) {
    for (int x=0; x < screen.getWidth(); x++) {
      int colourCode=screen.getPixels()[x + y * screen.getWidth()];
      if (colourCode < 255) {
        pixels[x + y * WIDTH]=colours[colourCode];
      }
    }
  }
  if (noAudioDevice == false) {
    if (input.isPlayMusic() == true && notActive == true) {
      int musicOption=JOptionPane.showConfirmDialog(this,""String_Node_Str"",""String_Node_Str"",2,2);
      if (musicOption == 0) {
        musicThread.start();
        notActive=false;
      }
 else {
        print.print(""String_Node_Str"",PrintTypes.GAME);
        input.setPlayMusic(false);
      }
    }
  }
  if (isChangeLevel() == true && getTickCount() % 60 == 0) {
    Game.setChangeLevel(true);
    setChangeLevel(false);
  }
  if (changeLevel == true) {
    print.print(""String_Node_Str"",PrintTypes.GAME);
    if (getMap() == 1) {
      setMap(""String_Node_Str"");
      if (getDummy() != null) {
        getLevel().removeEntity(getDummy());
        setNpc(false);
      }
      getLevel().removeEntity(getVendor());
      setMap(2);
    }
 else     if (getMap() == 2) {
      setMap(""String_Node_Str"");
      if (getDummy() != null) {
        getLevel().removeEntity(getDummy());
        setNpc(false);
      }
      getLevel().addEntity(getVendor());
      setMap(1);
    }
    changeLevel=false;
  }
  Graphics g=bs.getDrawGraphics();
  g.drawRect(0,0,getWidth(),getHeight());
  g.drawImage(image,0,0,getWidth(),getHeight() - 30,null);
  status(g,isDevMode(),isClosing());
  g.drawImage(image2,0,getHeight() - 30,getWidth(),getHeight(),null);
  g.setColor(Color.WHITE);
  g.setFont(font.getSegoe());
  g.drawString(""String_Node_Str"" + WordUtils.capitalizeFully(player.getSantizedUsername()),3,getHeight() - 17);
  g.setColor(Color.ORANGE);
  if (context.getLocale().getCountry().equals(""String_Node_Str"") || context.getLocale().getCountry().equals(""String_Node_Str"")) {
    g.drawString(""String_Node_Str"",(getWidth() / 2) - (""String_Node_Str"".length() * 3),getHeight() - 17);
  }
 else {
    g.drawString(""String_Node_Str"",(getWidth() / 2) - (""String_Node_Str"".length() * 3),getHeight() - 17);
  }
  g.setColor(Color.YELLOW);
  g.drawString(time.getTime(),(getWidth() - 58),(getHeight() - 3));
  g.setColor(Color.WHITE);
  if (noAudioDevice == true) {
    g.setColor(Color.RED);
    g.drawString(""String_Node_Str"",3,getHeight() - 3);
    trigger++;
    if (trigger == 25) {
      JOptionPane.showMessageDialog(this,""String_Node_Str"",""String_Node_Str"",0);
    }
  }
 else   if (notActive == true) {
    g.setColor(Color.RED);
    g.drawString(""String_Node_Str"",3,getHeight() - 3);
  }
 else {
    g.setColor(Color.GREEN);
    g.drawString(""String_Node_Str"",3,getHeight() - 3);
    g.setColor(Color.WHITE);
    setNowPlaying(WordUtils.capitalize(music.getSongName()[music.getSongNumber()].substring(7,(music.getSongName()[music.getSongNumber()].length() - 4))));
    if (getNowPlaying().startsWith(""String_Node_Str"")) {
      g.drawString(nowPlaying,getWidth() - (nowPlaying.length() * 9) + 12,getHeight() - 17);
    }
 else {
      g.drawString(nowPlaying,getWidth() - (nowPlaying.length() * 9) + 8,getHeight() - 17);
    }
  }
  g.dispose();
  bs.show();
}",0.9394449116904964
162040,"public void toggleKey(int keyCode,boolean isPressed){
  if (untoggle == false) {
    if (keyCode == KeyEvent.VK_W || keyCode == KeyEvent.VK_UP) {
      getUp().toggle(isPressed);
    }
    if (keyCode == KeyEvent.VK_S || keyCode == KeyEvent.VK_DOWN) {
      getDown().toggle(isPressed);
    }
    if (keyCode == KeyEvent.VK_A || keyCode == KeyEvent.VK_LEFT) {
      getLeft().toggle(isPressed);
    }
    if (keyCode == KeyEvent.VK_D || keyCode == KeyEvent.VK_RIGHT) {
      getRight().toggle(isPressed);
    }
  }
 else {
    getUp().toggle(false);
    getDown().toggle(false);
    getLeft().toggle(false);
    getRight().toggle(false);
  }
  if (keyCode == KeyEvent.VK_M) {
    this.setPlayMusic(true);
  }
  if (keyCode == KeyEvent.VK_Z) {
    if (Game.getMap() == 2) {
      Game.setChangeLevel(true);
      Game.getLevel().removeEntity(Game.getDummy());
      Game.setNpc(false);
    }
  }
  if (keyCode == KeyEvent.VK_N) {
    if (Game.isNpc() == false) {
      Game.setNpc(true);
      Game.npcSpawn();
      print.print(""String_Node_Str"",PrintTypes.GAME);
    }
  }
  if (keyCode == KeyEvent.VK_K) {
    if (Game.isNpc() == true) {
      Game.setNpc(false);
      Game.npcKill();
      print.print(""String_Node_Str"",PrintTypes.GAME);
    }
  }
  if (keyCode == KeyEvent.VK_Q) {
    Game.setClosing(true);
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    Game.getLevel().removeEntity(Game.getPlayer().getSantizedUsername());
    Game.setRunning(false);
    Game.getFrame().dispose();
    System.exit(1);
  }
  if (keyCode == KeyEvent.VK_BACK_QUOTE) {
    if (Game.isClosing() == false && Game.isDevMode() == false) {
      Game.setDevMode(true);
      new Thread(new SleepThread());
    }
  }
}","public void toggleKey(int keyCode,boolean isPressed){
  if (isIgnoreInput() == false) {
    if (keyCode == KeyEvent.VK_W || keyCode == KeyEvent.VK_UP) {
      getUp().toggle(isPressed);
    }
    if (keyCode == KeyEvent.VK_S || keyCode == KeyEvent.VK_DOWN) {
      getDown().toggle(isPressed);
    }
    if (keyCode == KeyEvent.VK_A || keyCode == KeyEvent.VK_LEFT) {
      getLeft().toggle(isPressed);
    }
    if (keyCode == KeyEvent.VK_D || keyCode == KeyEvent.VK_RIGHT) {
      getRight().toggle(isPressed);
    }
  }
  if (isIgnoreInput() == true) {
    getUp().toggle(false);
    getDown().toggle(false);
    getLeft().toggle(false);
    getRight().toggle(false);
  }
  if (keyCode == KeyEvent.VK_M) {
    this.setPlayMusic(true);
  }
  if (keyCode == KeyEvent.VK_Z) {
    if (Game.getMap() == 2) {
      Game.setChangeLevel(true);
      Game.getLevel().removeEntity(Game.getDummy());
      Game.setNpc(false);
    }
  }
  if (keyCode == KeyEvent.VK_N) {
    if (Game.getPlayer().isMoving()) {
      setIgnoreInput(true);
      int n=popup.Warn(""String_Node_Str"");
      if (n == 0) {
        setIgnoreInput(false);
      }
      return;
    }
    if (Game.isNpc() == false) {
      Game.setNpc(true);
      Game.npcSpawn();
      print.print(""String_Node_Str"",PrintTypes.GAME);
    }
  }
  if (keyCode == KeyEvent.VK_K) {
    if (Game.isNpc() == true) {
      Game.setNpc(false);
      Game.npcKill();
      print.print(""String_Node_Str"",PrintTypes.GAME);
    }
  }
  if (keyCode == KeyEvent.VK_Q) {
    Game.setClosing(true);
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    Game.getLevel().removeEntity(Game.getPlayer().getSantizedUsername());
    Game.setRunning(false);
    Game.getFrame().dispose();
    System.exit(1);
  }
  if (keyCode == KeyEvent.VK_BACK_QUOTE) {
    if (Game.isClosing() == false && Game.isDevMode() == false) {
      Game.setDevMode(true);
      new Thread(new SleepThread());
    }
  }
}",0.9353551476456504
162041,"public void untoggle(boolean toggle){
  this.untoggle=toggle;
}","public void untoggle(boolean toggle){
  this.ignoreInput=toggle;
}",0.8837209302325582
162042,"public void tick(){
  double xa=0;
  double ya=0;
  if (input != null) {
    if (input.getUp().isPressed()) {
      ya-=speed;
    }
    if (input.getDown().isPressed()) {
      ya+=speed;
    }
    if (input.getLeft().isPressed()) {
      xa-=speed;
    }
    if (input.getRight().isPressed()) {
      xa+=speed;
    }
  }
  if (xa != 0 || ya != 0) {
    move(xa,ya);
    isMoving=true;
    Packet02Move packet=new Packet02Move(this.getUsername(),(int)this.getX(),(int)this.getY(),this.numSteps,this.isMoving,this.movingDir);
    Game.getGame();
    packet.writeData(Game.getSocketClient());
  }
 else {
    isMoving=false;
  }
  setSwim(new Swim(level,(int)getX(),(int)getY()));
  swimType=getSwim().swimming(isSwimming,isMagma,isMuddy);
  isSwimming=swimType[0];
  isMagma=swimType[1];
  isMuddy=swimType[2];
  if (level.getTile((int)this.getX() >> 3,(int)this.getY() >> 3).getId() == 11) {
    changeLevels=true;
  }
  tickCount++;
}","public void tick(){
  double xa=0;
  double ya=0;
  if (input != null) {
    if (input.getUp().isPressed() && input.isIgnoreInput() == false) {
      ya-=speed;
    }
    if (input.getDown().isPressed() && input.isIgnoreInput() == false) {
      ya+=speed;
    }
    if (input.getLeft().isPressed() && input.isIgnoreInput() == false) {
      xa-=speed;
    }
    if (input.getRight().isPressed() && input.isIgnoreInput() == false) {
      xa+=speed;
    }
  }
  if (xa != 0 || ya != 0) {
    move(xa,ya);
    isMoving=true;
    Packet02Move packet=new Packet02Move(this.getUsername(),(int)this.getX(),(int)this.getY(),this.numSteps,this.isMoving,this.movingDir);
    Game.getGame();
    packet.writeData(Game.getSocketClient());
  }
 else {
    isMoving=false;
  }
  setSwim(new Swim(level,(int)getX(),(int)getY()));
  swimType=getSwim().swimming(isSwimming,isMagma,isMuddy);
  isSwimming=swimType[0];
  isMagma=swimType[1];
  isMuddy=swimType[2];
  if (level.getTile((int)this.getX() >> 3,(int)this.getY() >> 3).getId() == 11) {
    changeLevels=true;
  }
  tickCount++;
}",0.9323383084577116
162043,"public static void play(){
  try {
    JSplash splash=new JSplash(Game.class.getResource(""String_Node_Str""),true,true,false,Game.getGameVersion(),null,Color.RED,Color.ORANGE);
    splash.toFront();
    splash.requestFocus();
    splash.splashOn();
    splash.setProgress(10,""String_Node_Str"");
    Thread.sleep(250);
    splash.setProgress(25,""String_Node_Str"");
    Thread.sleep(125);
    splash.setProgress(35,""String_Node_Str"");
    Thread.sleep(125);
    splash.setProgress(40,""String_Node_Str"");
    Thread.sleep(250);
    splash.setProgress(50,""String_Node_Str"");
    Thread.sleep(125);
    splash.setProgress(60,""String_Node_Str"");
    Thread.sleep(500);
    splash.setProgress(80,""String_Node_Str"");
    Thread.sleep(125);
    splash.setProgress(90,""String_Node_Str"");
    Thread.sleep(250);
    splash.setProgress(92,""String_Node_Str"");
    Thread.sleep(125);
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    String multiMsg=""String_Node_Str"";
    JOptionPane.showMessageDialog(Game.getGame(),multiMsg,""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
    Game.setJdata_Host(1);
    if (Game.getJdata_Host() != 1) {
      Game.setJdata_IP(JOptionPane.showInputDialog(Game.getGame(),""String_Node_Str""));
    }
    Thread.sleep(125);
    splash.setProgress(94,""String_Node_Str"");
    Thread.sleep(125);
    splash.setProgress(95,""String_Node_Str"");
    Game.setJdata_UserName(JOptionPane.showInputDialog(Game.getGame(),""String_Node_Str""));
    Thread.sleep(250);
    splash.setProgress(96,""String_Node_Str"");
    Object[] options={""String_Node_Str"",""String_Node_Str""};
    int n=JOptionPane.showOptionDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
    if (n == 0) {
      Game.setAternateColsR(true);
    }
 else {
      Game.setAternateColsR(false);
    }
    Thread.sleep(250);
    Object[] options1={""String_Node_Str"",""String_Node_Str""};
    int n1=JOptionPane.showOptionDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,options1,options1[0]);
    if (n1 == 0) {
      Game.setAternateColsS(true);
    }
 else {
      Game.setAternateColsS(false);
    }
    splash.setProgress(97,""String_Node_Str"" + Game.getJdata_UserName());
    Thread.sleep(250);
    splash.splashOff();
    frame=new DedicatedJFrame(WIDTH,HEIGHT,SCALE,NAME);
    frame.getFrame();
    frame.getFrame().setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void play(){
  try {
    JSplash splash=new JSplash(Game.class.getResource(""String_Node_Str""),true,true,false,Game.getGameVersion(),null,Color.RED,Color.ORANGE);
    splash.toFront();
    splash.requestFocus();
    splash.splashOn();
    splash.setProgress(10,""String_Node_Str"");
    Thread.sleep(250);
    splash.setProgress(25,""String_Node_Str"");
    Thread.sleep(125);
    splash.setProgress(35,""String_Node_Str"");
    Thread.sleep(125);
    splash.setProgress(40,""String_Node_Str"");
    Thread.sleep(250);
    splash.setProgress(50,""String_Node_Str"");
    Thread.sleep(125);
    splash.setProgress(60,""String_Node_Str"");
    Thread.sleep(500);
    splash.setProgress(80,""String_Node_Str"");
    Thread.sleep(125);
    splash.setProgress(90,""String_Node_Str"");
    Thread.sleep(250);
    splash.setProgress(92,""String_Node_Str"");
    Thread.sleep(125);
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    String multiMsg=""String_Node_Str"";
    JOptionPane.showMessageDialog(Game.getGame(),multiMsg,""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
    Game.setJdata_Host(1);
    if (Game.getJdata_Host() != 1) {
      Game.setJdata_IP(JOptionPane.showInputDialog(Game.getGame(),""String_Node_Str""));
    }
    Thread.sleep(125);
    splash.setProgress(94,""String_Node_Str"");
    String s=JOptionPane.showInputDialog(Game.getGame(),""String_Node_Str"");
    if (s != null) {
      Game.setJdata_UserName(s);
    }
    Thread.sleep(125);
    splash.setProgress(96,""String_Node_Str"");
    Object[] options={""String_Node_Str"",""String_Node_Str""};
    int n=JOptionPane.showOptionDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
    if (n == 0) {
      Game.setAternateColsR(true);
    }
 else {
      Game.setAternateColsR(false);
    }
    Thread.sleep(250);
    Object[] options1={""String_Node_Str"",""String_Node_Str""};
    int n1=JOptionPane.showOptionDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,options1,options1[0]);
    if (n1 == 0) {
      Game.setAternateColsS(true);
    }
 else {
      Game.setAternateColsS(false);
    }
    splash.setProgress(97,""String_Node_Str"" + Game.getJdata_UserName());
    Thread.sleep(250);
    splash.splashOff();
    frame=new DedicatedJFrame(WIDTH,HEIGHT,SCALE,NAME);
    frame.getFrame();
    frame.getFrame().setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9418695993715632
162044,"public boolean hasCollided(double xa,double ya){
  int xMin=0;
  int xMax=7;
  int yMin=3;
  int yMax=7;
  for (int x=xMin; x < xMax; x++) {
    if (isSolid((int)xa,(int)ya,x,yMin)) {
      return true;
    }
  }
  for (int x=xMin; x < xMax; x++) {
    if (isSolid((int)xa,(int)ya,x,yMax)) {
      return true;
    }
  }
  for (int y=yMin; y < yMax; y++) {
    if (isSolid((int)xa,(int)ya,xMin,y)) {
      return true;
    }
  }
  for (int y=yMin; y < yMax; y++) {
    if (isSolid((int)xa,(int)ya,xMax,y)) {
      return true;
    }
  }
  return false;
}","public boolean hasCollided(double xa,double ya){
  int xMin=-2;
  int xMax=8;
  int yMin=0;
  int yMax=7;
  for (int x=xMin; x < xMax; x++) {
    if (isSolid((int)xa,(int)ya,x,yMin)) {
      return true;
    }
  }
  for (int x=xMin; x < xMax; x++) {
    if (isSolid((int)xa,(int)ya,x,yMax)) {
      return true;
    }
  }
  for (int y=yMin; y < yMax; y++) {
    if (isSolid((int)xa,(int)ya,xMin,y)) {
      return true;
    }
  }
  for (int y=yMin; y < yMax; y++) {
    if (isSolid((int)xa,(int)ya,xMax,y)) {
      return true;
    }
  }
  return false;
}",0.9486023444544636
162045,"protected void aStarMovementAI(int x,int y,int px,int py,double xa,double ya,double speed,Mob mob,List<Node> path,int time){
  xa=0;
  ya=0;
  Vector2i start=new Vector2i(x >> 3,y >> 3);
  Vector2i goal=new Vector2i(px >> 3,py >> 3);
  path=level.findPath(start,goal);
  if (path != null) {
    if (path.size() > 0) {
      Vector2i vector=path.get(path.size() - 1).tile;
      if (x < vector.getX() << 3)       xa++;
      if (x > vector.getX() << 3)       xa--;
      if (y < vector.getY() << 3)       ya++;
      if (y > vector.getY() << 3)       ya--;
    }
  }
  moveMob(xa,ya,mob);
}","protected void aStarMovementAI(int x,int y,int px,int py,double xa,double ya,double speed,Mob mob,List<Node> path,int time){
  xa=0;
  ya=0;
  Vector2i start=new Vector2i(x >> 3,y >> 3);
  Vector2i goal=new Vector2i(px >> 3,py >> 3);
  path=level.findPath(start,goal);
  if (path != null) {
    if (path.size() > 0) {
      Vector2i vector=path.get(path.size() - 1).tile;
      if (x < vector.getX() << 3)       xa=+speed;
      if (x > vector.getX() << 3)       xa=-speed;
      if (y < vector.getY() << 3)       ya=+speed;
      if (y > vector.getY() << 3)       ya=-speed;
      moveMob(xa,ya,mob);
    }
  }
}",0.757071547420965
162046,"public void tick(){
  List<Player> players=level.getPlayers(this,10);
  if (players.size() > 0) {
    followMovementAI(getX(),getY(),Game.getPlayer().getX(),Game.getPlayer().getY(),xa,ya,this);
  }
  setSwim(new Swim(level,getX(),getY()));
  swimType=getSwim().swimming(isSwimming,isMagma,isMuddy);
  isSwimming=swimType[0];
  isMagma=swimType[1];
  isMuddy=swimType[2];
  tickCount++;
}","public void tick(){
  List<Player> players=level.getPlayers(this,10);
  if (players.size() > 0) {
    followMovementAI(getX(),getY(),Game.getPlayer().getX(),Game.getPlayer().getY(),xa,ya,this);
  }
 else {
    isMoving=false;
  }
  setSwim(new Swim(level,getX(),getY()));
  swimType=getSwim().swimming(isSwimming,isMagma,isMuddy);
  isSwimming=swimType[0];
  isMagma=swimType[1];
  isMuddy=swimType[2];
  tickCount++;
}",0.9602977667493796
162047,"public void render(Screen screen){
  int xTile=8;
  int yTile=28;
  int walkingSpeed=4;
  int flipTop=(numSteps >> walkingSpeed) & 1;
  int flipBottom=(numSteps >> walkingSpeed) & 1;
  if (movingDir == 1) {
    xTile+=2;
    if (!isMoving || swim.isActive(swimType)) {
      yTile-=2;
    }
  }
 else   if (movingDir == 0 && !isMoving || movingDir == 0 && swim.isActive(swimType)) {
    yTile-=2;
  }
 else   if (movingDir > 1) {
    xTile+=4 + ((numSteps >> walkingSpeed) & 1) * 2;
    flipTop=(movingDir - 1) % 2;
  }
  int modifier=8 * scale;
  int xOffset=getX() - modifier / 2;
  int yOffset=getY() - modifier / 2 - 4;
  if (isSwimming || isMagma || isMuddy) {
    swimColour=getSwim().waveCols(isSwimming,isMagma,isMuddy);
    int waterColour=0;
    yOffset+=4;
    colour=Colours.get(-1,111,-1,faceCol);
    if (tickCount % 60 < 15) {
      waterColour=Colours.get(-1,-1,swimColour[0],-1);
    }
 else     if (15 <= tickCount % 60 && tickCount % 60 < 30) {
      yOffset--;
      waterColour=Colours.get(-1,swimColour[1],swimColour[2],-1);
    }
 else     if (30 <= tickCount % 60 && tickCount % 60 < 45) {
      waterColour=Colours.get(-1,swimColour[2],-1,swimColour[1]);
    }
 else {
      yOffset--;
      waterColour=Colours.get(-1,-1,swimColour[1],swimColour[2]);
    }
    screen.render(xOffset,yOffset + 3,31 + 31 * 32,waterColour,0x00,1);
    screen.render(xOffset + 8,yOffset + 3,31 + 31 * 32,waterColour,0x01,1);
  }
  screen.render((xOffset + (modifier * flipTop)),yOffset,(xTile + yTile * 32),colour,flipTop,scale);
  screen.render((xOffset + modifier - (modifier * flipTop)),yOffset,((xTile + 1) + yTile * 32),colour,flipTop,scale);
  if (!isSwimming && !isMagma && !isMuddy) {
    screen.render((xOffset + (modifier * flipBottom)),(yOffset + modifier),(xTile + (yTile + 1) * 32),colour,flipBottom,scale);
    screen.render((xOffset + modifier - (modifier * flipBottom)),(yOffset + modifier),((xTile + 1) + (yTile + 1) * 32),colour,flipBottom,scale);
    colour=Colours.get(-1,111,shirtCol,faceCol);
  }
}","public void render(Screen screen){
  int xTile=8;
  int yTile=28;
  int walkingSpeed=4;
  int flipTop=(numSteps >> walkingSpeed) & 1;
  int flipBottom=(numSteps >> walkingSpeed) & 1;
  if (movingDir == 1) {
    xTile+=2;
    if (!isMoving || swim.isActive(swimType)) {
      yTile-=2;
    }
  }
 else   if (movingDir == 0 && !isMoving || movingDir == 0 && swim.isActive(swimType)) {
    yTile-=2;
  }
 else   if (movingDir > 1) {
    xTile+=4 + ((numSteps >> walkingSpeed) & 1) * 2;
    flipTop=(movingDir - 1) % 2;
    if (!isMoving) {
      xTile=4;
    }
  }
  int modifier=8 * scale;
  int xOffset=getX() - modifier / 2;
  int yOffset=getY() - modifier / 2 - 4;
  if (isSwimming || isMagma || isMuddy) {
    swimColour=getSwim().waveCols(isSwimming,isMagma,isMuddy);
    int waterColour=0;
    yOffset+=4;
    colour=Colours.get(-1,111,-1,faceCol);
    if (tickCount % 60 < 15) {
      waterColour=Colours.get(-1,-1,swimColour[0],-1);
    }
 else     if (15 <= tickCount % 60 && tickCount % 60 < 30) {
      yOffset--;
      waterColour=Colours.get(-1,swimColour[1],swimColour[2],-1);
    }
 else     if (30 <= tickCount % 60 && tickCount % 60 < 45) {
      waterColour=Colours.get(-1,swimColour[2],-1,swimColour[1]);
    }
 else {
      yOffset--;
      waterColour=Colours.get(-1,-1,swimColour[1],swimColour[2]);
    }
    screen.render(xOffset,yOffset + 3,31 + 31 * 32,waterColour,0x00,1);
    screen.render(xOffset + 8,yOffset + 3,31 + 31 * 32,waterColour,0x01,1);
  }
  screen.render((xOffset + (modifier * flipTop)),yOffset,(xTile + yTile * 32),colour,flipTop,scale);
  screen.render((xOffset + modifier - (modifier * flipTop)),yOffset,((xTile + 1) + yTile * 32),colour,flipTop,scale);
  if (!isSwimming && !isMagma && !isMuddy) {
    screen.render((xOffset + (modifier * flipBottom)),(yOffset + modifier),(xTile + (yTile + 1) * 32),colour,flipBottom,scale);
    screen.render((xOffset + modifier - (modifier * flipBottom)),(yOffset + modifier),((xTile + 1) + (yTile + 1) * 32),colour,flipBottom,scale);
    colour=Colours.get(-1,111,shirtCol,faceCol);
  }
}",0.9897410845139228
162048,"public void move(int xa,int ya){
  if (xa != 0 && ya != 0) {
    move(xa,0);
    move(0,ya);
    numSteps--;
    return;
  }
  numSteps++;
  if (!hasCollided(xa,ya)) {
    if (ya < 0) {
      movingDir=0;
    }
    if (ya > 0) {
      movingDir=1;
    }
    if (xa < 0) {
      movingDir=2;
    }
    if (xa > 0) {
      movingDir=3;
    }
    setX(getX() + xa * (int)speed);
    setY(getY() + ya * (int)speed);
  }
}","public void move(int xa,int ya){
  if (xa != 0 && ya != 0) {
    move(xa,0);
    move(0,ya);
    numSteps--;
    return;
  }
  numSteps++;
  if (ya < 0) {
    movingDir=0;
  }
  if (ya > 0) {
    movingDir=1;
  }
  if (xa < 0) {
    movingDir=2;
  }
  if (xa > 0) {
    movingDir=3;
  }
  if (!hasCollided(xa,ya)) {
    setX(getX() + xa * (int)speed);
    setY(getY() + ya * (int)speed);
  }
}",0.6049382716049383
162049,"public abstract boolean hasCollided(int xa,int ya);","public boolean hasCollided(int xa,int ya){
  int xMin=0;
  int xMax=7;
  int yMin=3;
  int yMax=7;
  for (int x=xMin; x < xMax; x++) {
    if (isSolid(xa,ya,x,yMin)) {
      return true;
    }
  }
  for (int x=xMin; x < xMax; x++) {
    if (isSolid(xa,ya,x,yMax)) {
      return true;
    }
  }
  for (int y=yMin; y < yMax; y++) {
    if (isSolid(xa,ya,xMin,y)) {
      return true;
    }
  }
  for (int y=yMin; y < yMax; y++) {
    if (isSolid(xa,ya,xMax,y)) {
      return true;
    }
  }
  return false;
}",0.146690518783542
162050,"public void render(Screen screen){
  int xTile=8;
  int yTile=28;
  int walkingSpeed=4;
  int flipTop=(numSteps >> walkingSpeed) & 1;
  int flipBottom=(numSteps >> walkingSpeed) & 1;
  if (movingDir == 1) {
    xTile+=2;
  }
 else   if (movingDir > 1) {
    xTile+=4 + ((numSteps >> walkingSpeed) & 1) * 2;
    flipTop=(movingDir - 1) % 2;
  }
  int modifier=8 * scale;
  int xOffset=getX() - modifier / 2;
  int yOffset=getY() - modifier / 2 - 4;
  if (isSwimming) {
    int waterColour=0;
    yOffset+=4;
    colour=Colours.get(-1,111,-1,faceCol);
    if (tickCount % 60 < 15) {
      waterColour=Colours.get(-1,-1,255,-1);
    }
 else     if (15 <= tickCount % 60 && tickCount % 60 < 30) {
      yOffset--;
      waterColour=Colours.get(-1,225,115,-1);
    }
 else     if (30 <= tickCount % 60 && tickCount % 60 < 45) {
      waterColour=Colours.get(-1,115,-1,225);
    }
 else {
      yOffset--;
      waterColour=Colours.get(-1,-1,225,115);
    }
    screen.render(xOffset,yOffset + 3,31 + 31 * 32,waterColour,0x00,1);
    screen.render(xOffset + 8,yOffset + 3,31 + 31 * 32,waterColour,0x01,1);
  }
  if (isMagma) {
    int waterColour=0;
    yOffset+=4;
    colour=Colours.get(-1,111,-1,faceCol);
    if (tickCount % 60 < 15) {
      waterColour=Colours.get(-1,-1,541,-1);
    }
 else     if (15 <= tickCount % 60 && tickCount % 60 < 30) {
      yOffset--;
      waterColour=Colours.get(-1,521,510,-1);
    }
 else     if (30 <= tickCount % 60 && tickCount % 60 < 45) {
      waterColour=Colours.get(-1,510,-1,521);
    }
 else {
      yOffset--;
      waterColour=Colours.get(-1,-1,521,510);
    }
    screen.render(xOffset,yOffset + 3,31 + 31 * 32,waterColour,0x00,1);
    screen.render(xOffset + 8,yOffset + 3,31 + 31 * 32,waterColour,0x01,1);
  }
  if (isMuddy) {
    int waterColour=0;
    yOffset+=4;
    colour=Colours.get(-1,111,-1,310);
    if (tickCount % 60 < 15) {
      waterColour=Colours.get(-1,-1,422,-1);
    }
 else     if (15 <= tickCount % 60 && tickCount % 60 < 30) {
      yOffset--;
      waterColour=Colours.get(-1,410,321,-1);
    }
 else     if (30 <= tickCount % 60 && tickCount % 60 < 45) {
      waterColour=Colours.get(-1,321,-1,410);
    }
 else {
      yOffset--;
      waterColour=Colours.get(-1,-1,410,321);
    }
    screen.render(xOffset,yOffset + 3,31 + 31 * 32,waterColour,0x00,1);
    screen.render(xOffset + 8,yOffset + 3,31 + 31 * 32,waterColour,0x01,1);
  }
  screen.render((xOffset + (modifier * flipTop)),yOffset,(xTile + yTile * 32),colour,flipTop,scale);
  screen.render((xOffset + modifier - (modifier * flipTop)),yOffset,((xTile + 1) + yTile * 32),colour,flipTop,scale);
  if (!isSwimming && !isMagma && !isMuddy) {
    screen.render((xOffset + (modifier * flipBottom)),(yOffset + modifier),(xTile + (yTile + 1) * 32),colour,flipBottom,scale);
    screen.render((xOffset + modifier - (modifier * flipBottom)),(yOffset + modifier),((xTile + 1) + (yTile + 1) * 32),colour,flipBottom,scale);
    colour=Colours.get(-1,111,shirtCol,faceCol);
  }
}","public void render(Screen screen){
  int xTile=8;
  int yTile=28;
  int walkingSpeed=4;
  int flipTop=(numSteps >> walkingSpeed) & 1;
  int flipBottom=(numSteps >> walkingSpeed) & 1;
  if (movingDir == 1) {
    xTile+=2;
  }
 else   if (movingDir > 1) {
    xTile+=4 + ((numSteps >> walkingSpeed) & 1) * 2;
    flipTop=(movingDir - 1) % 2;
  }
  int modifier=8 * scale;
  int xOffset=getX() - modifier / 2;
  int yOffset=getY() - modifier / 2 - 4;
  if (isSwimming) {
    int waterColour=0;
    yOffset+=4;
    colour=Colours.get(-1,111,-1,faceCol);
    if (tickCount % 60 < 15) {
      waterColour=Colours.get(-1,-1,255,-1);
    }
 else     if (15 <= tickCount % 60 && tickCount % 60 < 30) {
      yOffset--;
      waterColour=Colours.get(-1,225,115,-1);
    }
 else     if (30 <= tickCount % 60 && tickCount % 60 < 45) {
      waterColour=Colours.get(-1,115,-1,225);
    }
 else {
      yOffset--;
      waterColour=Colours.get(-1,-1,225,115);
    }
    screen.render(xOffset,yOffset + 3,31 + 31 * 32,waterColour,0x00,1);
    screen.render(xOffset + 8,yOffset + 3,31 + 31 * 32,waterColour,0x01,1);
  }
  if (isMagma) {
    int waterColour=0;
    yOffset+=4;
    colour=Colours.get(-1,111,-1,faceCol);
    if (tickCount % 60 < 15) {
      waterColour=Colours.get(-1,-1,541,-1);
    }
 else     if (15 <= tickCount % 60 && tickCount % 60 < 30) {
      yOffset--;
      waterColour=Colours.get(-1,521,510,-1);
    }
 else     if (30 <= tickCount % 60 && tickCount % 60 < 45) {
      waterColour=Colours.get(-1,510,-1,521);
    }
 else {
      yOffset--;
      waterColour=Colours.get(-1,-1,521,510);
    }
    screen.render(xOffset,yOffset + 3,31 + 31 * 32,waterColour,0x00,1);
    screen.render(xOffset + 8,yOffset + 3,31 + 31 * 32,waterColour,0x01,1);
  }
  if (isMuddy) {
    int waterColour=0;
    yOffset+=4;
    colour=Colours.get(-1,111,-1,faceCol);
    if (tickCount % 60 < 15) {
      waterColour=Colours.get(-1,-1,422,-1);
    }
 else     if (15 <= tickCount % 60 && tickCount % 60 < 30) {
      yOffset--;
      waterColour=Colours.get(-1,410,321,-1);
    }
 else     if (30 <= tickCount % 60 && tickCount % 60 < 45) {
      waterColour=Colours.get(-1,321,-1,410);
    }
 else {
      yOffset--;
      waterColour=Colours.get(-1,-1,410,321);
    }
    screen.render(xOffset,yOffset + 3,31 + 31 * 32,waterColour,0x00,1);
    screen.render(xOffset + 8,yOffset + 3,31 + 31 * 32,waterColour,0x01,1);
  }
  screen.render((xOffset + (modifier * flipTop)),yOffset,(xTile + yTile * 32),colour,flipTop,scale);
  screen.render((xOffset + modifier - (modifier * flipTop)),yOffset,((xTile + 1) + yTile * 32),colour,flipTop,scale);
  if (!isSwimming && !isMagma && !isMuddy) {
    screen.render((xOffset + (modifier * flipBottom)),(yOffset + modifier),(xTile + (yTile + 1) * 32),colour,flipBottom,scale);
    screen.render((xOffset + modifier - (modifier * flipBottom)),(yOffset + modifier),((xTile + 1) + (yTile + 1) * 32),colour,flipBottom,scale);
    colour=Colours.get(-1,111,shirtCol,faceCol);
  }
}",0.9983327775925308
162051,"private void handleLogin(Packet00Login packet,InetAddress address,int port){
  System.out.println(""String_Node_Str"" + address.getHostAddress() + ""String_Node_Str""+ port+ ""String_Node_Str""+ packet.getUsername()+ ""String_Node_Str"");
  PlayerMP player=new PlayerMP(game.level,packet.getX(),packet.getY(),packet.getUsername(),address,port);
  game.level.addEntity(player);
}","private void handleLogin(Packet00Login packet,InetAddress address,int port){
  System.out.println(""String_Node_Str"" + address.getHostAddress() + ""String_Node_Str""+ port+ ""String_Node_Str""+ packet.getUsername()+ ""String_Node_Str"");
  PlayerMP player=new PlayerMP(game.getLevel(),packet.getX(),packet.getY(),packet.getUsername(),address,port);
  game.getLevel().addEntity(player);
}",0.9813333333333332
162052,"private void handleMove(Packet02Move packet){
}","private void handleMove(Packet02Move packet){
  this.game.getLevel().movePlayer(packet.getUsername(),packet.getX(),packet.getY());
}",0.5251396648044693
162053,"@Override public byte[] getData(){
  return (""String_Node_Str"" + this.username + ""String_Node_Str""+ this.x+ ""String_Node_Str""+ this.y).getBytes();
}","@Override public byte[] getData(){
  return (""String_Node_Str"" + this.username + ""String_Node_Str""+ getX()+ ""String_Node_Str""+ getY()).getBytes();
}",0.9324324324324323
162054,"@Override public byte[] getData(){
  return (""String_Node_Str"" + this.username + ""String_Node_Str""+ this.x+ ""String_Node_Str""+ this.y).getBytes();
}","@Override public byte[] getData(){
  return (""String_Node_Str"" + this.username + ""String_Node_Str""+ getX()+ ""String_Node_Str""+ getY()).getBytes();
}",0.9324324324324323
162055,"@Override public final void onSensorChanged(SensorEvent event){
  int type=event.sensor.getType();
  if (type == Sensor.TYPE_PROXIMITY) {
    float lux=event.values[0];
    long tsCurrent=System.currentTimeMillis();
    if (lux != currentSensorValue) {
      currentSensorValue=lux;
      if (tsCurrent - tsLastChange < 2000) {
        swipeCount+=1;
      }
 else {
        swipeCount=1;
        tsLastChange=tsCurrent;
      }
    }
    CV.logv(""String_Node_Str"",swipeCount);
    CV.logv(""String_Node_Str"",lux);
    if (isActiveAdmin()) {
      if (handler.hasMessages(CALLBACK_EXISTS)) {
        CV.logv(""String_Node_Str"");
        resetHandler();
        return;
      }
      if (lux == 0f) {
        if (mPowerManager.isScreenOn()) {
          if (CV.getPrefDisableInLandscape(this) && isOrientationLandscape()) {
            return;
          }
 else {
            long timeout=(long)CV.getPrefTimeoutLock(this);
            if (timeout == 0)             turnOff();
 else             if (timeout == 2) {
              if (swipeCount >= 4) {
                resetSwipeCount();
                turnOff();
              }
            }
 else             if (timeout == 10) {
              return;
            }
 else             handler.postDelayed(runnableTurnOff,timeout);
          }
        }
      }
 else {
        if (!mPowerManager.isScreenOn()) {
          long timeout=(long)CV.getPrefTimeoutUnlock(this);
          if (timeout == 0)           turnOn();
 else           if (timeout == 2) {
            if (swipeCount >= 4) {
              resetSwipeCount();
              turnOn();
            }
          }
 else           if (timeout == 10) {
            return;
          }
 else           handler.postDelayed(runnableTurnOn,timeout);
        }
      }
    }
  }
}","@Override public final void onSensorChanged(SensorEvent event){
  int type=event.sensor.getType();
  if (type == Sensor.TYPE_PROXIMITY) {
    float lux=event.values[0];
    long tsCurrent=System.currentTimeMillis();
    if (lux != currentSensorValue) {
      currentSensorValue=lux;
      if (tsCurrent - tsLastChange < 2000) {
        swipeCount+=1;
      }
 else {
        swipeCount=1;
        tsLastChange=tsCurrent;
      }
    }
    CV.logv(""String_Node_Str"",swipeCount);
    CV.logv(""String_Node_Str"",lux);
    if (isActiveAdmin()) {
      if (handler.hasMessages(CALLBACK_EXISTS)) {
        CV.logv(""String_Node_Str"");
        resetHandler();
        return;
      }
      if (2 == CV.getPrefTimeoutLock(this)) {
        if (mPowerManager.isScreenOn() && swipeCount >= 4) {
          resetSwipeCount();
          turnOff();
          return;
        }
      }
      if (2 == CV.getPrefTimeoutUnlock(this)) {
        if (!mPowerManager.isScreenOn() && swipeCount >= 4) {
          resetSwipeCount();
          turnOn();
          return;
        }
      }
      if (lux == 0f) {
        if (mPowerManager.isScreenOn()) {
          if (CV.getPrefDisableInLandscape(this) && isOrientationLandscape()) {
            return;
          }
 else {
            long timeout=(long)CV.getPrefTimeoutLock(this);
            if (timeout == 0)             turnOff();
 else             if (timeout == 10 || timeout == 2) {
              return;
            }
 else             handler.postDelayed(runnableTurnOff,timeout);
          }
        }
      }
 else {
        if (!mPowerManager.isScreenOn()) {
          long timeout=(long)CV.getPrefTimeoutUnlock(this);
          if (timeout == 0)           turnOn();
 else           if (timeout == 10 || timeout == 2) {
            return;
          }
 else           handler.postDelayed(runnableTurnOn,timeout);
        }
      }
    }
  }
}",0.7205681507784758
162056,"public void onReceive(Context context,Intent intent){
  CV.logv(""String_Node_Str"");
  if (CV.getPrefAutoOnoff(context)) {
    CV.logv(""String_Node_Str"");
    Intent i=new Intent(CV.SERVICE_INTENT_ACTION);
    i.putExtra(CV.SERVICEACTION,CV.SERVICEACTION_TOGGLE);
    i.putExtra(CV.SERVICETYPE,CV.SERVICETYPE_SETTING);
    context.startService(i);
  }
 else   if (CV.getPrefChargingOn(context) && CV.isPlugged(context)) {
    Intent i=new Intent(CV.SERVICE_INTENT_ACTION);
    i.putExtra(CV.SERVICEACTION,CV.SERVICEACTION_TURNON);
    i.putExtra(CV.SERVICETYPE,CV.SERVICETYPE_CHARGING);
    context.startService(i);
  }
}","public void onReceive(Context context,Intent intent){
  CV.logv(""String_Node_Str"");
  if (CV.getPrefAutoOnoff(context)) {
    CV.logv(""String_Node_Str"");
    Intent i=new Intent(CV.SERVICE_INTENT_ACTION);
    i.putExtra(CV.SERVICEACTION,CV.SERVICEACTION_TOGGLE);
    i.putExtra(CV.SERVICETYPE,CV.SERVICETYPE_SETTING);
    context.startService(i);
    if (CV.getPrefSleeping(context)) {
      Intent j=new Intent(CV.SERVICE_INTENT_ACTION);
      j.putExtra(CV.SERVICEACTION,CV.SERVICEACTION_SET_SCHEDULE);
      context.startService(j);
    }
  }
 else   if (CV.getPrefChargingOn(context) && CV.isPlugged(context)) {
    Intent i=new Intent(CV.SERVICE_INTENT_ACTION);
    i.putExtra(CV.SERVICEACTION,CV.SERVICEACTION_TURNON);
    i.putExtra(CV.SERVICETYPE,CV.SERVICETYPE_CHARGING);
    context.startService(i);
  }
}",0.8641114982578397
162057,"private void setSchedule(){
  cancelSchedule();
  int hour=TimePreference.getHour(CV.getPrefSleepStart(this));
  int minute=TimePreference.getMinute(CV.getPrefSleepStart(this));
  Calendar calendar=Calendar.getInstance();
  calendar.set(Calendar.HOUR_OF_DAY,hour);
  calendar.set(Calendar.MINUTE,minute);
  calendar.set(Calendar.SECOND,0);
  Intent intent=new Intent(this,SensorMonitorService.class);
  intent.setData(Uri.parse(""String_Node_Str""));
  intent.putExtra(CV.SERVICEACTION,CV.SERVICEACTION_MODE_SLEEP);
  intent.putExtra(CV.SLEEP_MODE_START,true);
  PendingIntent pi=PendingIntent.getService(this,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);
  getAlarmManager().setRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,pi);
  hour=TimePreference.getHour(CV.getPrefSleepStop(this));
  minute=TimePreference.getMinute(CV.getPrefSleepStop(this));
  calendar.set(Calendar.HOUR_OF_DAY,hour);
  calendar.set(Calendar.MINUTE,minute);
  intent=new Intent(this,SensorMonitorService.class);
  intent.setData(Uri.parse(""String_Node_Str""));
  intent.putExtra(CV.SERVICEACTION,CV.SERVICEACTION_MODE_SLEEP);
  intent.putExtra(CV.SLEEP_MODE_START,false);
  pi=PendingIntent.getService(this,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);
  getAlarmManager().setRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,pi);
}","private void setSchedule(){
  Intent i=new Intent(CV.SERVICE_INTENT_ACTION);
  i.putExtra(CV.SERVICEACTION,CV.SERVICEACTION_SET_SCHEDULE);
  startService(i);
}",0.1650422352176738
162058,"private void cancelSchedule(){
  Intent intent=new Intent(this,SensorMonitorService.class);
  intent.setData(Uri.parse(""String_Node_Str""));
  PendingIntent pi=PendingIntent.getService(this,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);
  getAlarmManager().cancel(pi);
  intent.setData(Uri.parse(""String_Node_Str""));
  pi=PendingIntent.getService(this,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);
  getAlarmManager().cancel(pi);
}","private void cancelSchedule(){
  Intent i=new Intent(CV.SERVICE_INTENT_ACTION);
  i.putExtra(CV.SERVICEACTION,CV.SERVICEACTION_CANCEL_SCHEDULE);
  startService(i);
}",0.304054054054054
162059,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  CV.logi(""String_Node_Str"");
  if (intent == null) {
    CV.logi(""String_Node_Str"");
    if (CV.getPrefAutoOnoff(this)) {
      if (CV.getPrefSleeping(this) && CV.isInSleepTime(this))       return START_NOT_STICKY;
      registerSensor();
    }
 else     if (CV.getPrefChargingOn(this) && CV.isPlugged(this)) {
      registerSensor();
    }
    return START_STICKY;
  }
  int action=intent.getIntExtra(CV.SERVICEACTION,-1);
switch (action) {
case CV.SERVICEACTION_SHOW_NOTIFICATION:
{
      if (CV.getPrefShowNotification(this))       showNotification();
 else       hideNotification();
      return START_NOT_STICKY;
    }
case CV.SERVICEACTION_SCREENOFF:
{
    CV.logi(""String_Node_Str"");
    if (!isActiveAdmin()) {
      Intent i=new Intent(this,MainActivity.class);
      i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      i.putExtra(CV.CLOSE_AFTER,true);
      this.startActivity(i);
    }
 else {
      deviceManager.lockNow();
    }
    return START_NOT_STICKY;
  }
case CV.SERVICEACTION_TOGGLE:
{
  CV.logi(""String_Node_Str"");
  String servicetype=intent.getStringExtra(CV.SERVICETYPE);
  if (servicetype != null && !servicetype.equals(CV.SERVICETYPE_SETTING)) {
    if (CV.isPlugged(this) && CV.getPrefChargingOn(this)) {
      SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
      Editor editor=sp.edit();
      editor.putBoolean(CV.PREF_CHARGING_ON,false);
      editor.commit();
    }
 else {
      togglePreference();
    }
  }
  updateWidgetCharging(false);
  updateNotification();
  if (CV.getPrefAutoOnoff(this) == false) {
    unregisterSensor();
  }
 else {
    if (CV.getPrefSleeping(this) && CV.isInSleepTime(this))     return START_NOT_STICKY;
    registerSensor();
  }
  break;
}
case CV.SERVICEACTION_TURNON:
{
CV.logi(""String_Node_Str"");
if (!isRegistered()) {
  registerSensor();
  updateWidgetCharging(CV.isPlugged(this));
  updateNotification();
}
break;
}
case CV.SERVICEACTION_TURNOFF:
{
CV.logi(""String_Node_Str"");
if (isRegistered()) unregisterSensor();
if (!CV.getPrefAutoOnoff(this)) {
updateWidgetCharging(false);
updateNotification();
}
return START_NOT_STICKY;
}
case CV.SERVICEACTION_UPDATE_DISABLE_IN_LANDSCAPE:
{
if (mIsRegistered) {
if (CV.getPrefDisableInLandscape(this) == true) registerOrientationChange();
 else unregisterOrientationChange();
}
break;
}
case CV.SERVICEACTION_MODE_SLEEP:
{
if (CV.getPrefAutoOnoff(this) == false) return START_STICKY;
CV.logv(""String_Node_Str"");
boolean bSleepModeStart=intent.getBooleanExtra(CV.SLEEP_MODE_START,false);
CV.logv(""String_Node_Str"",bSleepModeStart);
if (bSleepModeStart) {
CV.logi(""String_Node_Str"");
unregisterSensor();
}
 else {
CV.logi(""String_Node_Str"");
registerSensor();
}
break;
}
case CV.SERVICEACTION_PARTIALLOCK_TOGGLE:
{
if (CV.getPrefNoPartialLock(this) && partialLock.isHeld()) {
partialLock.release();
}
 else if (!CV.getPrefNoPartialLock(this) && isRegistered()) {
partialLock.acquire();
}
break;
}
default :
CV.logi(""String_Node_Str"");
}
return START_STICKY;
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  CV.logi(""String_Node_Str"");
  if (intent == null) {
    CV.logi(""String_Node_Str"");
    if (CV.getPrefAutoOnoff(this)) {
      if (CV.getPrefSleeping(this) && CV.isInSleepTime(this))       return START_NOT_STICKY;
      registerSensor();
    }
 else     if (CV.getPrefChargingOn(this) && CV.isPlugged(this)) {
      registerSensor();
    }
    return START_STICKY;
  }
  int action=intent.getIntExtra(CV.SERVICEACTION,-1);
switch (action) {
case CV.SERVICEACTION_SHOW_NOTIFICATION:
{
      if (CV.getPrefShowNotification(this))       showNotification();
 else       hideNotification();
      return START_NOT_STICKY;
    }
case CV.SERVICEACTION_SCREENOFF:
{
    CV.logi(""String_Node_Str"");
    if (!isActiveAdmin()) {
      Intent i=new Intent(this,MainActivity.class);
      i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      i.putExtra(CV.CLOSE_AFTER,true);
      this.startActivity(i);
    }
 else {
      deviceManager.lockNow();
    }
    return START_NOT_STICKY;
  }
case CV.SERVICEACTION_TOGGLE:
{
  CV.logi(""String_Node_Str"");
  String servicetype=intent.getStringExtra(CV.SERVICETYPE);
  if (servicetype != null && !servicetype.equals(CV.SERVICETYPE_SETTING)) {
    if (CV.isPlugged(this) && CV.getPrefChargingOn(this)) {
      SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
      Editor editor=sp.edit();
      editor.putBoolean(CV.PREF_CHARGING_ON,false);
      editor.commit();
    }
 else {
      togglePreference();
    }
  }
  updateWidgetCharging(false);
  updateNotification();
  if (CV.getPrefAutoOnoff(this) == false) {
    unregisterSensor();
  }
 else {
    if (CV.getPrefSleeping(this) && CV.isInSleepTime(this))     return START_NOT_STICKY;
    registerSensor();
  }
  break;
}
case CV.SERVICEACTION_TURNON:
{
CV.logi(""String_Node_Str"");
if (!isRegistered()) {
  registerSensor();
  updateWidgetCharging(CV.isPlugged(this));
  updateNotification();
}
break;
}
case CV.SERVICEACTION_TURNOFF:
{
CV.logi(""String_Node_Str"");
if (isRegistered()) unregisterSensor();
if (!CV.getPrefAutoOnoff(this)) {
updateWidgetCharging(false);
updateNotification();
}
return START_NOT_STICKY;
}
case CV.SERVICEACTION_UPDATE_DISABLE_IN_LANDSCAPE:
{
if (mIsRegistered) {
if (CV.getPrefDisableInLandscape(this) == true) registerOrientationChange();
 else unregisterOrientationChange();
}
break;
}
case CV.SERVICEACTION_MODE_SLEEP:
{
if (CV.getPrefAutoOnoff(this) == false) return START_STICKY;
CV.logv(""String_Node_Str"");
boolean bSleepModeStart=intent.getBooleanExtra(CV.SLEEP_MODE_START,false);
CV.logv(""String_Node_Str"",bSleepModeStart);
if (bSleepModeStart) {
CV.logi(""String_Node_Str"");
unregisterSensor();
}
 else {
CV.logi(""String_Node_Str"");
registerSensor();
}
break;
}
case CV.SERVICEACTION_PARTIALLOCK_TOGGLE:
{
if (CV.getPrefNoPartialLock(this) && partialLock.isHeld()) {
partialLock.release();
}
 else if (!CV.getPrefNoPartialLock(this) && isRegistered()) {
partialLock.acquire();
}
break;
}
case CV.SERVICEACTION_SET_SCHEDULE:
{
setSchedule();
break;
}
case CV.SERVICEACTION_CANCEL_SCHEDULE:
{
cancelSchedule();
break;
}
default :
CV.logi(""String_Node_Str"");
}
return START_STICKY;
}",0.979253112033195
162060,"@SuppressLint(""String_Node_Str"") @Override public final void onSensorChanged(SensorEvent event){
  int type=event.sensor.getType();
  if (type == Sensor.TYPE_PROXIMITY) {
    float lux=event.values[0];
    CV.logv(""String_Node_Str"",lux);
    if (isActiveAdmin()) {
      if (handler.hasMessages(CALLBACK_EXISTS)) {
        CV.logv(""String_Node_Str"");
        resetHandler();
        return;
      }
      if (lux == 0f) {
        if (mPowerManager.isScreenOn()) {
          if (CV.getPrefDisableInLandscape(this) && isOrientationLandscape()) {
            return;
          }
 else {
            long timeout=(long)CV.getPrefTimeoutLock(this);
            if (timeout == 0)             TurnOff();
 else             handler.postDelayed(runnableTurnOff,timeout);
          }
        }
      }
 else {
        if (!mPowerManager.isScreenOn()) {
          long timeout=(long)CV.getPrefTimeoutUnlock(this);
          if (timeout == 0)           TurnOn();
 else           handler.postDelayed(runnableTurnOn,timeout);
        }
      }
    }
  }
 else   if (type == Sensor.TYPE_LIGHT) {
    float lux=event.values[0];
    CV.logv(""String_Node_Str"",lux);
  }
}","@SuppressLint(""String_Node_Str"") @Override public final void onSensorChanged(SensorEvent event){
  int type=event.sensor.getType();
  if (type == Sensor.TYPE_PROXIMITY) {
    float lux=event.values[0];
    CV.logv(""String_Node_Str"",lux);
    if (isActiveAdmin()) {
      if (handler.hasMessages(CALLBACK_EXISTS)) {
        CV.logv(""String_Node_Str"");
        resetHandler();
        return;
      }
      if (lux == 0f) {
        if (mPowerManager.isScreenOn()) {
          if (CV.getPrefDisableInLandscape(this) && isOrientationLandscape()) {
            return;
          }
 else {
            long timeout=(long)CV.getPrefTimeoutLock(this);
            if (timeout == 0)             turnOff();
 else             handler.postDelayed(runnableTurnOff,timeout);
          }
        }
      }
 else {
        if (!mPowerManager.isScreenOn()) {
          long timeout=(long)CV.getPrefTimeoutUnlock(this);
          if (timeout == 0)           turnOn();
 else           handler.postDelayed(runnableTurnOn,timeout);
        }
      }
    }
  }
 else   if (type == Sensor.TYPE_LIGHT) {
    float lux=event.values[0];
    CV.logv(""String_Node_Str"",lux);
  }
}",0.9982638888888888
162061,"public void run(){
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  screenLock.release();
}","@Override public void run(){
  CV.logi(""String_Node_Str"");
  turnOn();
  resetHandler();
}",0.4170212765957446
162062,"private void updatePrefState(){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  CheckBoxPreference cbpLandscape=(CheckBoxPreference)findPreference(CV.PREF_DISABLE_IN_LANDSCAPE);
  SwitchPreference spCharging=(SwitchPreference)findPreference(CV.PREF_CHARGING_ON);
  SwitchPreference spAuto=(SwitchPreference)findPreference(CV.PREF_AUTO_ON);
  if (sp.getBoolean(CV.PREF_AUTO_ON,false)) {
    spCharging.setEnabled(false);
    cbpLandscape.setEnabled(true);
  }
 else {
    spCharging.setEnabled(true);
  }
  if (sp.getBoolean(CV.PREF_CHARGING_ON,false)) {
    spAuto.setEnabled(false);
    cbpLandscape.setEnabled(true);
  }
 else {
    spAuto.setEnabled(true);
  }
  if (sp.getBoolean(CV.PREF_AUTO_ON,false) == false && sp.getBoolean(CV.PREF_CHARGING_ON,false) == false) {
    cbpLandscape.setEnabled(false);
  }
}","private void updatePrefState(){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  SwitchPreference spCharging=(SwitchPreference)findPreference(CV.PREF_CHARGING_ON);
  SwitchPreference spAuto=(SwitchPreference)findPreference(CV.PREF_AUTO_ON);
  if (sp.getBoolean(CV.PREF_AUTO_ON,false)) {
    spAuto.setEnabled(false);
    spCharging.setEnabled(false);
  }
 else {
    spCharging.setEnabled(true);
  }
  if (sp.getBoolean(CV.PREF_CHARGING_ON,false)) {
    spCharging.setEnabled(true);
    spAuto.setEnabled(false);
  }
 else {
    spAuto.setEnabled(true);
  }
}",0.6890286512928022
162063,"private void togglePreference(){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  boolean IsAutoOn=sp.getBoolean(CV.PREF_AUTO_ON,false);
  Editor editor=sp.edit();
  editor.putBoolean(CV.PREF_AUTO_ON,!IsAutoOn);
  editor.commit();
}","private void togglePreference(){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  boolean IsAutoOn=sp.getBoolean(CV.PREF_AUTO_ON,false);
  Editor editor=sp.edit();
  editor.putBoolean(CV.PREF_AUTO_ON,!IsAutoOn);
  if (!IsAutoOn)   editor.putBoolean(CV.PREF_CHARGING_ON,false);
  editor.commit();
}",0.889267461669506
162064,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  CV.logi(""String_Node_Str"");
  if (intent == null) {
    CV.logi(""String_Node_Str"");
    if (CV.getPrefAutoOnoff(this) == false) {
      unregisterSensor();
    }
 else {
      registerSensor();
    }
    return START_STICKY;
  }
  int action=intent.getIntExtra(CV.SERVICEACTION,-1);
switch (action) {
case CV.SERVICEACTION_TOGGLE:
{
      CV.logi(""String_Node_Str"");
      if (!intent.getStringExtra(CV.SERVICETYPE).equals(CV.SERVICETYPE_SETTING)) {
        togglePreference();
      }
      updateWidgetCharging(false);
      if (CV.getPrefAutoOnoff(this) == false) {
        unregisterSensor();
      }
 else {
        registerSensor();
      }
      break;
    }
case CV.SERVICEACTION_TURNON:
{
    CV.logi(""String_Node_Str"");
    if (!isRegistered()) {
      registerSensor();
      updateWidgetCharging(CV.isPlugged(this));
    }
    break;
  }
case CV.SERVICEACTION_TURNOFF:
{
  CV.logi(""String_Node_Str"");
  if (isRegistered())   unregisterSensor();
  if (!CV.getPrefAutoOnoff(this))   updateWidgetCharging(false);
  break;
}
case CV.SERVICEACTION_UPDATE_DISABLE_IN_LANDSCAPE:
{
if (mIsRegistered) {
  if (CV.getPrefDisableInLandscape(this) == true)   registerOrientationChange();
 else   unregisterOrientationChange();
}
break;
}
default :
CV.logi(""String_Node_Str"");
}
return START_STICKY;
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  CV.logi(""String_Node_Str"");
  if (intent == null) {
    CV.logi(""String_Node_Str"");
    if (CV.getPrefAutoOnoff(this) == false) {
      unregisterSensor();
    }
 else {
      registerSensor();
    }
    return START_STICKY;
  }
  int action=intent.getIntExtra(CV.SERVICEACTION,-1);
switch (action) {
case CV.SERVICEACTION_TOGGLE:
{
      CV.logi(""String_Node_Str"");
      if (!intent.getStringExtra(CV.SERVICETYPE).equals(CV.SERVICETYPE_SETTING)) {
        if (CV.isPlugged(this) && CV.getPrefChargingOn(this)) {
          SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
          Editor editor=sp.edit();
          editor.putBoolean(CV.PREF_CHARGING_ON,false);
          editor.commit();
        }
 else {
          togglePreference();
        }
      }
      updateWidgetCharging(false);
      if (CV.getPrefAutoOnoff(this) == false) {
        unregisterSensor();
      }
 else {
        registerSensor();
      }
      break;
    }
case CV.SERVICEACTION_TURNON:
{
    CV.logi(""String_Node_Str"");
    if (!isRegistered()) {
      registerSensor();
      updateWidgetCharging(CV.isPlugged(this));
    }
    break;
  }
case CV.SERVICEACTION_TURNOFF:
{
  CV.logi(""String_Node_Str"");
  if (isRegistered())   unregisterSensor();
  if (!CV.getPrefAutoOnoff(this))   updateWidgetCharging(false);
  break;
}
case CV.SERVICEACTION_UPDATE_DISABLE_IN_LANDSCAPE:
{
if (mIsRegistered) {
  if (CV.getPrefDisableInLandscape(this) == true)   registerOrientationChange();
 else   unregisterOrientationChange();
}
break;
}
default :
CV.logi(""String_Node_Str"");
}
return START_STICKY;
}",0.8969816272965879
162065,"public static boolean isPlugged(Context context){
  Intent intentBat=context.registerReceiver(null,new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
  return (intentBat.getIntExtra(BatteryManager.EXTRA_PLUGGED,-1) > 0);
}","public static boolean isPlugged(Context context){
  Intent intentBat=context.getApplicationContext().registerReceiver(null,new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
  return (intentBat.getIntExtra(BatteryManager.EXTRA_PLUGGED,-1) > 0);
}",0.9484978540772532
162066,"public void load(final Listener listener,final SnapshotService.Callback callback){
  SnapshotService snapshotService=new SnapshotService(rpc);
  snapshotService.load(id,demuxer.getAccessToken(),sessionId,true,new SnapshotService.Callback(){
    @Override public void onSuccess(    JsonValue snapshot,    String sid,    int revision){
      bridge=listener;
      callback.onSuccess(snapshot,sessionId,revision);
      demuxer.register(id,bridge,(ReceiveOpChannelImpl<?>)receiveChannel);
      channel.connect(revision,sessionId);
      PollChannel.get().connect();
    }
  }
);
}","public void load(final Listener listener,final SnapshotService.Callback callback){
  SnapshotService snapshotService=new SnapshotService(rpc);
  snapshotService.load(id,demuxer.getAccessToken(),sessionId,true,new SnapshotService.Callback(){
    @Override public void onSuccess(    JsonValue snapshot,    String sid,    int revision){
      bridge=listener;
      demuxer.register(id,bridge,(ReceiveOpChannelImpl<?>)receiveChannel);
      callback.onSuccess(snapshot,sessionId,revision);
      channel.connect(revision,sessionId);
      PollChannel.get().connect();
    }
  }
);
}",0.8652849740932642
162067,"@Override public void onSuccess(JsonValue snapshot,String sid,int revision){
  bridge=listener;
  callback.onSuccess(snapshot,sessionId,revision);
  demuxer.register(id,bridge,(ReceiveOpChannelImpl<?>)receiveChannel);
  channel.connect(revision,sessionId);
  PollChannel.get().connect();
}","@Override public void onSuccess(JsonValue snapshot,String sid,int revision){
  bridge=listener;
  demuxer.register(id,bridge,(ReceiveOpChannelImpl<?>)receiveChannel);
  callback.onSuccess(snapshot,sessionId,revision);
  channel.connect(revision,sessionId);
  PollChannel.get().connect();
}",0.7439446366782007
162068,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_customize_colors,container,false);
  Bundle args=getArguments();
  if (args != null && args.containsKey(""String_Node_Str"")) {
    atw=(ArrivalTimeWidget)args.getSerializable(""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  setHasOptionsMenu(true);
  getActivity().setTitle(R.string.app_name);
  picker=(ColorPicker)rootView.findViewById(R.id.picker);
  opacityBar=(OpacityBar)rootView.findViewById(R.id.opacitybar);
  svBar=(SVBar)rootView.findViewById(R.id.svbar);
  setBackgroundColorButton=(Button)rootView.findViewById(R.id.bChangeBackgroundColor);
  setTextColorButton=(Button)rootView.findViewById(R.id.bChangeTextColor);
  currentBackgroundColor=(LinearLayout)rootView.findViewById(R.id.llCurrentBackgroundColor);
  currentTextColor=(LinearLayout)rootView.findViewById(R.id.llCurrentTextColor);
  currentBackgroundColor.setBackgroundColor(atw.getBackgroundColor());
  currentTextColor.setBackgroundColor(atw.getTextColor());
  picker.setOldCenterColor(atw.getBackgroundColor());
  picker.setNewCenterColor(atw.getBackgroundColor());
  picker.addSVBar(svBar);
  picker.addOpacityBar(opacityBar);
  picker.setOnColorChangedListener(this);
  setBackgroundColorButton.setOnClickListener(v -> {
    picker.setOldCenterColor(picker.getColor());
    currentBackgroundColor.setBackgroundColor(picker.getColor());
    atw.setBackgroundColor(picker.getColor());
  }
);
  setTextColorButton.setOnClickListener(v -> {
    picker.setOldCenterColor(picker.getColor());
    currentTextColor.setBackgroundColor(picker.getColor());
    atw.setTextColor(picker.getColor());
  }
);
  currentBackgroundColor.setOnClickListener(v -> {
    ColorDrawable d=(ColorDrawable)currentBackgroundColor.getBackground();
    picker.setColor(d.getColor());
  }
);
  currentTextColor.setOnClickListener(v -> {
    ColorDrawable d=(ColorDrawable)currentTextColor.getBackground();
    picker.setColor(d.getColor());
  }
);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_customize_colors,container,false);
  Bundle args=getArguments();
  if (args != null && args.containsKey(""String_Node_Str"")) {
    atw=(ArrivalTimeWidget)args.getSerializable(""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  setHasOptionsMenu(true);
  getActivity().setTitle(R.string.app_name);
  picker=(ColorPicker)rootView.findViewById(R.id.picker);
  opacityBar=(OpacityBar)rootView.findViewById(R.id.opacitybar);
  svBar=(SVBar)rootView.findViewById(R.id.svbar);
  setBackgroundColorButton=(Button)rootView.findViewById(R.id.bChangeBackgroundColor);
  setTextColorButton=(Button)rootView.findViewById(R.id.bChangeTextColor);
  currentBackgroundColor=(LinearLayout)rootView.findViewById(R.id.llCurrentBackgroundColor);
  currentTextColor=(LinearLayout)rootView.findViewById(R.id.llCurrentTextColor);
  currentBackgroundColor.setBackgroundColor(atw.getBackgroundColor());
  currentTextColor.setBackgroundColor(atw.getTextColor());
  picker.setColor(atw.getBackgroundColor());
  picker.setOldCenterColor(atw.getBackgroundColor());
  picker.addSVBar(svBar);
  picker.addOpacityBar(opacityBar);
  picker.setOnColorChangedListener(this);
  setBackgroundColorButton.setOnClickListener(v -> {
    picker.setOldCenterColor(picker.getColor());
    currentBackgroundColor.setBackgroundColor(picker.getColor());
    atw.setBackgroundColor(picker.getColor());
  }
);
  setTextColorButton.setOnClickListener(v -> {
    picker.setOldCenterColor(picker.getColor());
    currentTextColor.setBackgroundColor(picker.getColor());
    atw.setTextColor(picker.getColor());
  }
);
  currentBackgroundColor.setOnClickListener(v -> {
    ColorDrawable d=(ColorDrawable)currentBackgroundColor.getBackground();
    picker.setColor(d.getColor());
  }
);
  currentTextColor.setOnClickListener(v -> {
    ColorDrawable d=(ColorDrawable)currentTextColor.getBackground();
    picker.setColor(d.getColor());
  }
);
  return rootView;
}",0.976568047337278
162069,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_add_agency,container,false);
  setHasOptionsMenu(true);
  getActivity().setTitle(""String_Node_Str"");
  agencyListView=(ListView)rootView.findViewById(R.id.lvAgencyList);
  progressBar=(ProgressBar)getActivity().findViewById(R.id.pbLoading);
  agencyListView.setVisibility(View.INVISIBLE);
  progressBar.setVisibility(View.VISIBLE);
  TransLocClient client=ServiceGenerator.createService(TransLocClient.class,Utils.BASE_URL,TRANSLOC_API_KEY,null,AGENCY);
  client.agencies().observeOn(AndroidSchedulers.mainThread()).subscribe(this::populateAgencyListView,e -> {
    handleServiceErrors(getActivity(),AGENCY,e,progressBar);
  }
);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_add_agency,container,false);
  setHasOptionsMenu(true);
  getActivity().setTitle(""String_Node_Str"");
  agencyListView=(ListView)rootView.findViewById(R.id.lvAgencyList);
  progressBar=(ProgressBar)getActivity().findViewById(R.id.pbLoading);
  agencyListView.setVisibility(View.INVISIBLE);
  progressBar.setVisibility(View.VISIBLE);
  TransLocClient client=ServiceGenerator.createService(TransLocClient.class,Utils.BASE_URL,TRANSLOC_API_KEY,null,AGENCY);
  agenciesSub=client.agencies().observeOn(AndroidSchedulers.mainThread()).subscribe(this::populateAgencyListView,e -> {
    handleServiceErrors(getActivity(),AGENCY,e,progressBar);
  }
);
  return rootView;
}",0.9926289926289926
162070,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_add_route,container,false);
  Bundle args=getArguments();
  if (args != null && args.containsKey(""String_Node_Str"")) {
    atw=(ArrivalTimeWidget)args.getSerializable(""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  setHasOptionsMenu(true);
  getActivity().setTitle(""String_Node_Str"");
  routeListView=(ListView)rootView.findViewById(R.id.lvRouteList);
  progressBar=(ProgressBar)getActivity().findViewById(R.id.pbLoading);
  progressBar.setVisibility(View.VISIBLE);
  TransLocClient client=ServiceGenerator.createService(TransLocClient.class,Utils.BASE_URL,TRANSLOC_API_KEY,atw.getAgencyID(),ROUTE);
  client.routes(atw.getAgencyID()).observeOn(AndroidSchedulers.mainThread()).subscribe(this::populateRoutesListView,e -> handleServiceErrors(getActivity(),ROUTE,e,progressBar));
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_add_route,container,false);
  Bundle args=getArguments();
  if (args != null && args.containsKey(""String_Node_Str"")) {
    atw=(ArrivalTimeWidget)args.getSerializable(""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  setHasOptionsMenu(true);
  getActivity().setTitle(""String_Node_Str"");
  routeListView=(ListView)rootView.findViewById(R.id.lvRouteList);
  progressBar=(ProgressBar)getActivity().findViewById(R.id.pbLoading);
  progressBar.setVisibility(View.VISIBLE);
  TransLocClient client=ServiceGenerator.createService(TransLocClient.class,Utils.BASE_URL,TRANSLOC_API_KEY,atw.getAgencyID(),ROUTE);
  routesSub=client.routes(atw.getAgencyID()).observeOn(AndroidSchedulers.mainThread()).subscribe(this::populateRoutesListView,e -> handleServiceErrors(getActivity(),ROUTE,e,progressBar));
  return rootView;
}",0.9950347567030784
162071,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_add_stop,container,false);
  Bundle args=getArguments();
  if (args != null && args.containsKey(""String_Node_Str"")) {
    atw=(ArrivalTimeWidget)args.getSerializable(""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  setHasOptionsMenu(true);
  getActivity().setTitle(""String_Node_Str"");
  stopListView=(ListView)rootView.findViewById(R.id.lvStopList);
  progressBar=(ProgressBar)getActivity().findViewById(R.id.pbLoading);
  progressBar.setVisibility(View.VISIBLE);
  TransLocClient client=ServiceGenerator.createService(TransLocClient.class,Utils.BASE_URL,TRANSLOC_API_KEY,atw.getAgencyID(),STOP);
  client.stops(atw.getAgencyID()).observeOn(AndroidSchedulers.mainThread()).subscribe(this::populateStopsListView,e -> handleServiceErrors(getActivity(),STOP,e,progressBar));
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_add_stop,container,false);
  Bundle args=getArguments();
  if (args != null && args.containsKey(""String_Node_Str"")) {
    atw=(ArrivalTimeWidget)args.getSerializable(""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  setHasOptionsMenu(true);
  getActivity().setTitle(""String_Node_Str"");
  stopListView=(ListView)rootView.findViewById(R.id.lvStopList);
  progressBar=(ProgressBar)getActivity().findViewById(R.id.pbLoading);
  progressBar.setVisibility(View.VISIBLE);
  TransLocClient client=ServiceGenerator.createService(TransLocClient.class,Utils.BASE_URL,TRANSLOC_API_KEY,atw.getAgencyID(),STOP);
  stopsSub=client.stops(atw.getAgencyID()).observeOn(AndroidSchedulers.mainThread()).subscribe(this::populateStopsListView,e -> handleServiceErrors(getActivity(),STOP,e,progressBar));
  return rootView;
}",0.9954977488744372
162072,"@Override public void onFragmentInteraction(String id){
  Toast.makeText(getApplicationContext(),id,Toast.LENGTH_LONG).show();
}","@Override public void onFragmentInteraction(ArrivalTimeWidget atw){
  Log.d(TAG,""String_Node_Str"");
  TransLocClient client=ServiceGenerator.createService(TransLocClient.class,Utils.BASE_URL,getString(R.string.mashape_key),atw.getAgencyID(),ARRIVAL);
  client.arrivalEstimates(atw.getAgencyID(),atw.getRouteID(),atw.getStopID()).observeOn(AndroidSchedulers.mainThread()).subscribe(this::createWidget,e -> Log.e(TAG,""String_Node_Str"",e));
}",0.2116402116402116
162073,"@Override public void onFragmentInteraction(String id){
  Toast.makeText(getApplicationContext(),""String_Node_Str"" + id,Toast.LENGTH_LONG).show();
}","@Override public void onFragmentInteraction(ArrivalTimeWidget widget){
  Toast.makeText(getApplicationContext(),""String_Node_Str"" + widget.toString(),Toast.LENGTH_LONG).show();
}",0.8773006134969326
162074,"@Override public void onListItemClick(ListView l,View v,int position,long id){
  super.onListItemClick(l,v,position,id);
  if (null != mListener) {
    ArrivalTimeWidget widget=(ArrivalTimeWidget)l.getItemAtPosition(position);
    if (widget == null)     throw new IllegalStateException();
 else {
      Log.d(TAG,widget.toString());
      mListener.onFragmentInteraction(widget.getArrivalTimesUrl());
    }
  }
}","@Override public void onListItemClick(ListView l,View v,int position,long id){
  super.onListItemClick(l,v,position,id);
  if (null != mListener) {
    ArrivalTimeWidget widget=(ArrivalTimeWidget)l.getItemAtPosition(position);
    if (widget == null)     throw new IllegalStateException();
 else {
      Log.d(TAG,widget.toString());
      mListener.onFragmentInteraction(widget);
    }
  }
}",0.9739130434782608
162075,public void onFragmentInteraction(String id);,public void onFragmentInteraction(ArrivalTimeWidget widget);,0.7619047619047619
162076,"public T read(JsonReader in) throws IOException {
  JsonElement jsonElement=elementAdapter.read(in);
  if (jsonElement.isJsonObject()) {
    JsonObject jsonObject=jsonElement.getAsJsonObject();
    if (jsonObject.has(""String_Node_Str"") && (jsonObject.get(""String_Node_Str"").isJsonArray()) || jsonObject.get(""String_Node_Str"").isJsonArray()) {
switch (dataType) {
case AGENCY:
        Log.d(TAG,""String_Node_Str"");
      jsonElement=jsonObject.get(""String_Node_Str"");
    break;
case ROUTE:
  Log.d(TAG,""String_Node_Str"");
jsonElement=jsonObject.getAsJsonObject(""String_Node_Str"").getAsJsonArray(agencyId);
break;
case STOP:
Log.d(TAG,""String_Node_Str"");
jsonElement=jsonObject.get(""String_Node_Str"");
break;
case ARRIVAL:
Log.d(TAG,""String_Node_Str"");
jsonElement=jsonObject.getAsJsonArray(""String_Node_Str"").getAsJsonObject().getAsJsonArray(""String_Node_Str"");
break;
}
}
}
return delegate.fromJsonTree(jsonElement);
}","public T read(JsonReader in) throws IOException {
  JsonElement jsonElement=elementAdapter.read(in);
  if (jsonElement.isJsonObject()) {
    JsonObject jsonObject=jsonElement.getAsJsonObject();
    if (jsonObject.has(""String_Node_Str"") && (jsonObject.get(""String_Node_Str"").isJsonArray()) || jsonObject.get(""String_Node_Str"").isJsonArray()) {
switch (dataType) {
case AGENCY:
        Log.d(TAG,""String_Node_Str"");
      jsonElement=jsonObject.get(""String_Node_Str"");
    break;
case ROUTE:
  Log.d(TAG,""String_Node_Str"");
jsonElement=jsonObject.getAsJsonObject(""String_Node_Str"").getAsJsonArray(agencyId);
break;
case STOP:
Log.d(TAG,""String_Node_Str"");
jsonElement=jsonObject.get(""String_Node_Str"");
break;
case ARRIVAL:
Log.d(TAG,""String_Node_Str"");
jsonElement=jsonObject.getAsJsonArray(""String_Node_Str"").get(0).getAsJsonObject().getAsJsonArray(""String_Node_Str"");
break;
}
}
 else {
Log.e(TAG,""String_Node_Str"");
}
}
return delegate.fromJsonTree(jsonElement);
}",0.9750663129973476
162077,"public <T>TypeAdapter<T> create(Gson gson,final TypeToken<T> type){
  final TypeAdapter<T> delegate=gson.getDelegateAdapter(this,type);
  final TypeAdapter<JsonElement> elementAdapter=gson.getAdapter(JsonElement.class);
  return new TypeAdapter<T>(){
    public void write(    JsonWriter out,    T value) throws IOException {
      delegate.write(out,value);
    }
    public T read(    JsonReader in) throws IOException {
      JsonElement jsonElement=elementAdapter.read(in);
      if (jsonElement.isJsonObject()) {
        JsonObject jsonObject=jsonElement.getAsJsonObject();
        if (jsonObject.has(""String_Node_Str"") && (jsonObject.get(""String_Node_Str"").isJsonArray()) || jsonObject.get(""String_Node_Str"").isJsonArray()) {
switch (dataType) {
case AGENCY:
            Log.d(TAG,""String_Node_Str"");
          jsonElement=jsonObject.get(""String_Node_Str"");
        break;
case ROUTE:
      Log.d(TAG,""String_Node_Str"");
    jsonElement=jsonObject.getAsJsonObject(""String_Node_Str"").getAsJsonArray(agencyId);
  break;
case STOP:
Log.d(TAG,""String_Node_Str"");
jsonElement=jsonObject.get(""String_Node_Str"");
break;
case ARRIVAL:
Log.d(TAG,""String_Node_Str"");
jsonElement=jsonObject.getAsJsonArray(""String_Node_Str"").getAsJsonObject().getAsJsonArray(""String_Node_Str"");
break;
}
}
}
return delegate.fromJsonTree(jsonElement);
}
}
.nullSafe();
}","public <T>TypeAdapter<T> create(Gson gson,final TypeToken<T> type){
  final TypeAdapter<T> delegate=gson.getDelegateAdapter(this,type);
  final TypeAdapter<JsonElement> elementAdapter=gson.getAdapter(JsonElement.class);
  return new TypeAdapter<T>(){
    public void write(    JsonWriter out,    T value) throws IOException {
      delegate.write(out,value);
    }
    public T read(    JsonReader in) throws IOException {
      JsonElement jsonElement=elementAdapter.read(in);
      if (jsonElement.isJsonObject()) {
        JsonObject jsonObject=jsonElement.getAsJsonObject();
        if (jsonObject.has(""String_Node_Str"") && (jsonObject.get(""String_Node_Str"").isJsonArray()) || jsonObject.get(""String_Node_Str"").isJsonArray()) {
switch (dataType) {
case AGENCY:
            Log.d(TAG,""String_Node_Str"");
          jsonElement=jsonObject.get(""String_Node_Str"");
        break;
case ROUTE:
      Log.d(TAG,""String_Node_Str"");
    jsonElement=jsonObject.getAsJsonObject(""String_Node_Str"").getAsJsonArray(agencyId);
  break;
case STOP:
Log.d(TAG,""String_Node_Str"");
jsonElement=jsonObject.get(""String_Node_Str"");
break;
case ARRIVAL:
Log.d(TAG,""String_Node_Str"");
jsonElement=jsonObject.getAsJsonArray(""String_Node_Str"").get(0).getAsJsonObject().getAsJsonArray(""String_Node_Str"");
break;
}
}
 else {
Log.e(TAG,""String_Node_Str"");
}
}
return delegate.fromJsonTree(jsonElement);
}
}
.nullSafe();
}",0.9828529733673842
162078,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.v(TAG,""String_Node_Str"");
  setContentView(R.layout.activity_configuration);
  sSelectAgency=(Button)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Button)findViewById(R.id.sSelectRoute);
  sSelectStop=(Button)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  progressBar=(ProgressBar)findViewById(R.id.progressBar);
  rlPreview=(RelativeLayout)findViewById(R.id.rlPreview);
  tvMinsPreview=(TextView)findViewById(R.id.tvMins_preview);
  tvRemainingTimePreview=(TextView)findViewById(R.id.tvRemainingTime_preview);
  tvRoutePreview=(TextView)findViewById(R.id.tvRoute_preview);
  tvStopPreview=(TextView)findViewById(R.id.tvStop_preview);
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  setResult(RESULT_CANCELED);
  DateTime currentTime=new DateTime(System.currentTimeMillis());
  Log.v(TAG,""String_Node_Str"" + currentTime.getDayOfWeek());
  Log.v(TAG,""String_Node_Str"" + currentTime.getHourOfDay());
  if (currentTime.getDayOfWeek() > 5 || currentTime.getHourOfDay() > 18 || currentTime.getHourOfDay() < 6) {
    Log.v(TAG,""String_Node_Str"");
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
  new PopulateAgenciesTask().execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset(0);
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  OnClickListener setPreviewClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(WidgetConfigurationActivity.this,CustomizeWidgetActivity.class);
      intent.putExtra(""String_Node_Str"",mAppWidgetId);
      startActivity(intent);
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
  rlPreview.setOnClickListener(setPreviewClickedListener);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.v(TAG,""String_Node_Str"");
  setContentView(R.layout.activity_configuration);
  sSelectAgency=(Button)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Button)findViewById(R.id.sSelectRoute);
  sSelectStop=(Button)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  progressBar=(ProgressBar)findViewById(R.id.progressBar);
  rlPreview=(RelativeLayout)findViewById(R.id.rlPreview);
  tvMinsPreview=(TextView)findViewById(R.id.tvMins_preview);
  tvRemainingTimePreview=(TextView)findViewById(R.id.tvRemainingTime_preview);
  tvRoutePreview=(TextView)findViewById(R.id.tvRoute_preview);
  tvStopPreview=(TextView)findViewById(R.id.tvStop_preview);
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  setResult(RESULT_CANCELED);
  DateTime currentTime=new DateTime(System.currentTimeMillis());
  if (currentTime.getDayOfWeek() > 5 || currentTime.getHourOfDay() > 18 || currentTime.getHourOfDay() < 6) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
  new PopulateAgenciesTask().execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset(0);
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  OnClickListener setPreviewClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(WidgetConfigurationActivity.this,CustomizeWidgetActivity.class);
      intent.putExtra(""String_Node_Str"",mAppWidgetId);
      startActivity(intent);
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
  rlPreview.setOnClickListener(setPreviewClickedListener);
}",0.9661332340900632
162079,"@Override public void onClick(DialogInterface dialog,int pos){
  currentStopId=currentRouteStopList.get(pos).stopId;
  stopName=currentRouteStopList.get(pos).name;
  sSelectStop.setText(stopName);
  bMakeWidget.setEnabled(true);
  Log.v(""String_Node_Str"",""String_Node_Str"");
  dialog.dismiss();
}","@Override public void onClick(DialogInterface dialog,int pos){
  currentStopId=currentRouteStopList.get(pos).stopId;
  stopName=currentRouteStopList.get(pos).name;
  sSelectStop.setText(stopName);
  bMakeWidget.setEnabled(true);
  dialog.dismiss();
}",0.9157509157509156
162080,"@Override protected void onPause(){
  super.onPause();
  if (dialog != null)   dialog.dismiss();
  dialog=null;
}","@Override protected void onPause(){
  super.onPause();
}",0.6627218934911243
162081,"@Override protected void onResume(){
  super.onResume();
  int textColor=settings.getInt(""String_Node_Str"",-1);
  int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
  editor.putInt(""String_Node_Str"" + mAppWidgetId,textColor).commit();
  editor.putInt(""String_Node_Str"" + mAppWidgetId,backgroundColor).commit();
  Log.v(TAG,Integer.toString(settings.getInt(""String_Node_Str"" + mAppWidgetId,-2)));
  Log.v(TAG,Integer.toString(settings.getInt(""String_Node_Str"" + mAppWidgetId,-2)));
  rlPreview.setBackgroundColor(backgroundColor);
  tvStopPreview.setTextColor(textColor);
  tvRoutePreview.setTextColor(textColor);
  tvRemainingTimePreview.setTextColor(textColor);
  tvMinsPreview.setTextColor(textColor);
}","@Override protected void onResume(){
  super.onResume();
  int textColor=settings.getInt(""String_Node_Str"",-1);
  int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
  editor.putInt(""String_Node_Str"" + mAppWidgetId,textColor).commit();
  editor.putInt(""String_Node_Str"" + mAppWidgetId,backgroundColor).commit();
  rlPreview.setBackgroundColor(backgroundColor);
  tvStopPreview.setTextColor(textColor);
  tvRoutePreview.setTextColor(textColor);
  tvRemainingTimePreview.setTextColor(textColor);
  tvMinsPreview.setTextColor(textColor);
}",0.8663522012578616
162082,"private void doErrorMiscHandling(){
  bMakeWidget.setEnabled(false);
  if (dialog != null) {
    dialog.dismiss();
    dialog=null;
  }
}","private void doErrorMiscHandling(){
  bMakeWidget.setEnabled(false);
}",0.6763285024154589
162083,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.v(TAG,""String_Node_Str"");
  setContentView(R.layout.activity_configuration);
  sSelectAgency=(Button)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Button)findViewById(R.id.sSelectRoute);
  sSelectStop=(Button)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  rlPreview=(RelativeLayout)findViewById(R.id.rlPreview);
  tvMinsPreview=(TextView)findViewById(R.id.tvMins_preview);
  tvRemainingTimePreview=(TextView)findViewById(R.id.tvRemainingTime_preview);
  tvRoutePreview=(TextView)findViewById(R.id.tvRoute_preview);
  tvStopPreview=(TextView)findViewById(R.id.tvStop_preview);
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  setResult(RESULT_CANCELED);
  DateTime currentTime=new DateTime(System.currentTimeMillis());
  Log.v(TAG,""String_Node_Str"" + currentTime.getDayOfWeek());
  Log.v(TAG,""String_Node_Str"" + currentTime.getHourOfDay());
  if (currentTime.getDayOfWeek() > 5 || currentTime.getHourOfDay() > 18 || currentTime.getHourOfDay() < 6) {
    Log.v(TAG,""String_Node_Str"");
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
  new PopulateAgenciesTask().execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset();
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  OnClickListener setPreviewClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(WidgetConfigurationActivity.this,CustomizeWidgetActivity.class);
      intent.putExtra(""String_Node_Str"",mAppWidgetId);
      startActivity(intent);
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
  rlPreview.setOnClickListener(setPreviewClickedListener);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.v(TAG,""String_Node_Str"");
  setContentView(R.layout.activity_configuration);
  sSelectAgency=(Button)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Button)findViewById(R.id.sSelectRoute);
  sSelectStop=(Button)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  rlPreview=(RelativeLayout)findViewById(R.id.rlPreview);
  tvMinsPreview=(TextView)findViewById(R.id.tvMins_preview);
  tvRemainingTimePreview=(TextView)findViewById(R.id.tvRemainingTime_preview);
  tvRoutePreview=(TextView)findViewById(R.id.tvRoute_preview);
  tvStopPreview=(TextView)findViewById(R.id.tvStop_preview);
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  setResult(RESULT_CANCELED);
  DateTime currentTime=new DateTime(System.currentTimeMillis());
  Log.v(TAG,""String_Node_Str"" + currentTime.getDayOfWeek());
  Log.v(TAG,""String_Node_Str"" + currentTime.getHourOfDay());
  if (currentTime.getDayOfWeek() > 5 || currentTime.getHourOfDay() > 18 || currentTime.getHourOfDay() < 6) {
    Log.v(TAG,""String_Node_Str"");
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
  new PopulateAgenciesTask().execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset(0);
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  OnClickListener setPreviewClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(WidgetConfigurationActivity.this,CustomizeWidgetActivity.class);
      intent.putExtra(""String_Node_Str"",mAppWidgetId);
      startActivity(intent);
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
  rlPreview.setOnClickListener(setPreviewClickedListener);
}",0.9998151912770282
162084,"private void doReset(){
  new PopulateAgenciesTask().execute();
}","private void doReset(int type){
  if (type <= 2) {
    sSelectStop.setText(R.string.select_stop);
    currentStopId=-1;
    stopName=null;
    sSelectStop.setEnabled(false);
  }
  if (type <= 1) {
    sSelectRoute.setText(R.string.select_route);
    currentRouteId=-1;
    routeShortName=null;
    routeLongName=null;
    sSelectRoute.setEnabled(false);
  }
  if (type == 0) {
    sSelectAgency.setText(R.string.select_agency);
    currentAgencyId=-1;
    bMakeWidget.setEnabled(false);
    new PopulateAgenciesTask().execute();
  }
}",0.2170283806343906
162085,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.v(TAG,""String_Node_Str"");
  setContentView(R.layout.activity_configuration);
  sSelectAgency=(Button)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Button)findViewById(R.id.sSelectRoute);
  sSelectStop=(Button)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  progressBar=(ProgressBar)findViewById(R.id.progressBar);
  rlPreview=(RelativeLayout)findViewById(R.id.rlPreview);
  tvMinsPreview=(TextView)findViewById(R.id.tvMins_preview);
  tvRemainingTimePreview=(TextView)findViewById(R.id.tvRemainingTime_preview);
  tvRoutePreview=(TextView)findViewById(R.id.tvRoute_preview);
  tvStopPreview=(TextView)findViewById(R.id.tvStop_preview);
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  setResult(RESULT_CANCELED);
  DateTime currentTime=new DateTime(System.currentTimeMillis());
  Log.v(TAG,""String_Node_Str"" + currentTime.getDayOfWeek());
  Log.v(TAG,""String_Node_Str"" + currentTime.getHourOfDay());
  if (currentTime.getDayOfWeek() > 5 || currentTime.getHourOfDay() > 18 || currentTime.getHourOfDay() < 6) {
    Log.v(TAG,""String_Node_Str"");
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
  new PopulateAgenciesTask().execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset(0);
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  OnClickListener setPreviewClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(WidgetConfigurationActivity.this,CustomizeWidgetActivity.class);
      intent.putExtra(""String_Node_Str"",mAppWidgetId);
      startActivity(intent);
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
  rlPreview.setOnClickListener(setPreviewClickedListener);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.v(TAG,""String_Node_Str"");
  setContentView(R.layout.activity_configuration);
  sSelectAgency=(Button)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Button)findViewById(R.id.sSelectRoute);
  sSelectStop=(Button)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  progressBar=(ProgressBar)findViewById(R.id.progressBar);
  rlPreview=(RelativeLayout)findViewById(R.id.rlPreview);
  tvMinsPreview=(TextView)findViewById(R.id.tvMins_preview);
  tvRemainingTimePreview=(TextView)findViewById(R.id.tvRemainingTime_preview);
  tvRoutePreview=(TextView)findViewById(R.id.tvRoute_preview);
  tvStopPreview=(TextView)findViewById(R.id.tvStop_preview);
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  setResult(RESULT_CANCELED);
  DateTime currentTime=new DateTime(System.currentTimeMillis());
  if (currentTime.getDayOfWeek() > 5 || currentTime.getHourOfDay() > 18 || currentTime.getHourOfDay() < 6) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
  new PopulateAgenciesTask().execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset(0);
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  OnClickListener setPreviewClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(WidgetConfigurationActivity.this,CustomizeWidgetActivity.class);
      intent.putExtra(""String_Node_Str"",mAppWidgetId);
      startActivity(intent);
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
  rlPreview.setOnClickListener(setPreviewClickedListener);
}",0.9661332340900632
162086,"@Override public void onClick(DialogInterface dialog,int pos){
  currentStopId=currentRouteStopList.get(pos).stopId;
  stopName=currentRouteStopList.get(pos).name;
  sSelectStop.setText(stopName);
  bMakeWidget.setEnabled(true);
  Log.v(""String_Node_Str"",""String_Node_Str"");
  dialog.dismiss();
}","@Override public void onClick(DialogInterface dialog,int pos){
  currentStopId=currentRouteStopList.get(pos).stopId;
  stopName=currentRouteStopList.get(pos).name;
  sSelectStop.setText(stopName);
  bMakeWidget.setEnabled(true);
  dialog.dismiss();
}",0.9157509157509156
162087,"@Override protected void onPause(){
  super.onPause();
  if (dialog != null)   dialog.dismiss();
  dialog=null;
}","@Override protected void onPause(){
  super.onPause();
}",0.6627218934911243
162088,"@Override protected void onResume(){
  super.onResume();
  int textColor=settings.getInt(""String_Node_Str"",-1);
  int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
  editor.putInt(""String_Node_Str"" + mAppWidgetId,textColor).commit();
  editor.putInt(""String_Node_Str"" + mAppWidgetId,backgroundColor).commit();
  Log.v(TAG,Integer.toString(settings.getInt(""String_Node_Str"" + mAppWidgetId,-2)));
  Log.v(TAG,Integer.toString(settings.getInt(""String_Node_Str"" + mAppWidgetId,-2)));
  rlPreview.setBackgroundColor(backgroundColor);
  tvStopPreview.setTextColor(textColor);
  tvRoutePreview.setTextColor(textColor);
  tvRemainingTimePreview.setTextColor(textColor);
  tvMinsPreview.setTextColor(textColor);
}","@Override protected void onResume(){
  super.onResume();
  int textColor=settings.getInt(""String_Node_Str"",-1);
  int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
  editor.putInt(""String_Node_Str"" + mAppWidgetId,textColor).commit();
  editor.putInt(""String_Node_Str"" + mAppWidgetId,backgroundColor).commit();
  rlPreview.setBackgroundColor(backgroundColor);
  tvStopPreview.setTextColor(textColor);
  tvRoutePreview.setTextColor(textColor);
  tvRemainingTimePreview.setTextColor(textColor);
  tvMinsPreview.setTextColor(textColor);
}",0.8663522012578616
162089,"private void doErrorMiscHandling(){
  bMakeWidget.setEnabled(false);
  if (dialog != null) {
    dialog.dismiss();
    dialog=null;
  }
}","private void doErrorMiscHandling(){
  bMakeWidget.setEnabled(false);
}",0.6763285024154589
162090,"@Override public void onClick(DialogInterface dialog,int pos){
  currentStopId=currentRouteStopList.get(pos).stopId;
  stopName=currentRouteStopList.get(pos).name;
  sSelectStop.setText(stopName);
  bMakeWidget.setEnabled(true);
  dialog.dismiss();
}","@Override public void onClick(DialogInterface dialog,int pos){
  currentStopId=currentRouteStopList.get(pos).stopId;
  stopName=currentRouteStopList.get(pos).name;
  sSelectStop.setText(stopName);
  bMakeWidget.setEnabled(true);
  Log.v(""String_Node_Str"",""String_Node_Str"");
  dialog.dismiss();
}",0.9157509157509156
162091,"private void doReset(int type){
  if (type <= 2) {
    sSelectStop.setText(R.string.select_stop);
    currentStopId=-1;
    stopName=null;
    sSelectStop.setEnabled(false);
  }
  if (type <= 1) {
    sSelectRoute.setText(R.string.select_route);
    currentRouteId=-1;
    routeShortName=null;
    routeLongName=null;
    sSelectRoute.setEnabled(false);
  }
  if (type == 0) {
    sSelectAgency.setText(R.string.select_agency);
    currentAgencyId=-1;
    bMakeWidget.setEnabled(false);
    new PopulateAgenciesTask().execute();
  }
}","private void doReset(int type){
  if (type <= 2) {
    sSelectStop.setText(R.string.select_stop);
    currentStopId=-1;
    stopName=null;
    sSelectStop.setEnabled(false);
    bMakeWidget.setEnabled(false);
  }
  if (type <= 1) {
    sSelectRoute.setText(R.string.select_route);
    currentRouteId=-1;
    routeShortName=null;
    routeLongName=null;
    sSelectRoute.setEnabled(false);
    bMakeWidget.setEnabled(false);
  }
  if (type == 0) {
    sSelectAgency.setText(R.string.select_agency);
    currentAgencyId=-1;
    bMakeWidget.setEnabled(false);
    new PopulateAgenciesTask().execute();
  }
}",0.938488576449912
162092,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.v(TAG,""String_Node_Str"");
  setContentView(R.layout.activity_configuration);
  sSelectAgency=(Button)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Button)findViewById(R.id.sSelectRoute);
  sSelectStop=(Button)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  rlPreview=(RelativeLayout)findViewById(R.id.rlPreview);
  tvMinsPreview=(TextView)findViewById(R.id.tvMins_preview);
  tvRemainingTimePreview=(TextView)findViewById(R.id.tvRemainingTime_preview);
  tvRoutePreview=(TextView)findViewById(R.id.tvRoute_preview);
  tvStopPreview=(TextView)findViewById(R.id.tvStop_preview);
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  setResult(RESULT_CANCELED);
  DateTime currentTime=new DateTime(System.currentTimeMillis());
  Log.v(TAG,""String_Node_Str"" + currentTime.getDayOfWeek());
  Log.v(TAG,""String_Node_Str"" + currentTime.getHourOfDay());
  if (currentTime.getDayOfWeek() > 5 || currentTime.getHourOfDay() > 18 || currentTime.getHourOfDay() < 6) {
    Log.v(TAG,""String_Node_Str"");
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
  new PopulateAgenciesTask().execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset();
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  OnClickListener setPreviewClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(WidgetConfigurationActivity.this,CustomizeWidgetActivity.class);
      intent.putExtra(""String_Node_Str"",mAppWidgetId);
      startActivity(intent);
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
  rlPreview.setOnClickListener(setPreviewClickedListener);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.v(TAG,""String_Node_Str"");
  setContentView(R.layout.activity_configuration);
  sSelectAgency=(Button)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Button)findViewById(R.id.sSelectRoute);
  sSelectStop=(Button)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  rlPreview=(RelativeLayout)findViewById(R.id.rlPreview);
  tvMinsPreview=(TextView)findViewById(R.id.tvMins_preview);
  tvRemainingTimePreview=(TextView)findViewById(R.id.tvRemainingTime_preview);
  tvRoutePreview=(TextView)findViewById(R.id.tvRoute_preview);
  tvStopPreview=(TextView)findViewById(R.id.tvStop_preview);
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  setResult(RESULT_CANCELED);
  DateTime currentTime=new DateTime(System.currentTimeMillis());
  Log.v(TAG,""String_Node_Str"" + currentTime.getDayOfWeek());
  Log.v(TAG,""String_Node_Str"" + currentTime.getHourOfDay());
  if (currentTime.getDayOfWeek() > 5 || currentTime.getHourOfDay() > 18 || currentTime.getHourOfDay() < 6) {
    Log.v(TAG,""String_Node_Str"");
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
  new PopulateAgenciesTask().execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset(0);
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  OnClickListener setPreviewClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(WidgetConfigurationActivity.this,CustomizeWidgetActivity.class);
      intent.putExtra(""String_Node_Str"",mAppWidgetId);
      startActivity(intent);
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
  rlPreview.setOnClickListener(setPreviewClickedListener);
}",0.9998151912770282
162093,"private void doReset(){
  new PopulateAgenciesTask().execute();
}","private void doReset(int type){
  if (type <= 2) {
    sSelectStop.setText(R.string.select_stop);
    currentStopId=-1;
    stopName=null;
    sSelectStop.setEnabled(false);
  }
  if (type <= 1) {
    sSelectRoute.setText(R.string.select_route);
    currentRouteId=-1;
    routeShortName=null;
    routeLongName=null;
    sSelectRoute.setEnabled(false);
  }
  if (type == 0) {
    sSelectAgency.setText(R.string.select_agency);
    currentAgencyId=-1;
    bMakeWidget.setEnabled(false);
    new PopulateAgenciesTask().execute();
  }
}",0.2170283806343906
162094,"@Override public void onClick(DialogInterface dialog,int pos){
  currentStopId=currentRouteStopList.get(pos).stopId;
  stopName=currentRouteStopList.get(pos).name;
  sSelectStop.setText(stopName);
  bMakeWidget.setEnabled(true);
  dialog.dismiss();
}","@Override public void onClick(DialogInterface dialog,int pos){
  currentStopId=currentRouteStopList.get(pos).stopId;
  stopName=currentRouteStopList.get(pos).name;
  sSelectStop.setText(stopName);
  bMakeWidget.setEnabled(true);
  Log.v(""String_Node_Str"",""String_Node_Str"");
  dialog.dismiss();
}",0.9157509157509156
162095,"private void doReset(int type){
  if (type <= 2) {
    sSelectStop.setText(R.string.select_stop);
    currentStopId=-1;
    stopName=null;
    sSelectStop.setEnabled(false);
  }
  if (type <= 1) {
    sSelectRoute.setText(R.string.select_route);
    currentRouteId=-1;
    routeShortName=null;
    routeLongName=null;
    sSelectRoute.setEnabled(false);
  }
  if (type == 0) {
    sSelectAgency.setText(R.string.select_agency);
    currentAgencyId=-1;
    bMakeWidget.setEnabled(false);
    new PopulateAgenciesTask().execute();
  }
}","private void doReset(int type){
  if (type <= 2) {
    sSelectStop.setText(R.string.select_stop);
    currentStopId=-1;
    stopName=null;
    sSelectStop.setEnabled(false);
    bMakeWidget.setEnabled(false);
  }
  if (type <= 1) {
    sSelectRoute.setText(R.string.select_route);
    currentRouteId=-1;
    routeShortName=null;
    routeLongName=null;
    sSelectRoute.setEnabled(false);
    bMakeWidget.setEnabled(false);
  }
  if (type == 0) {
    sSelectAgency.setText(R.string.select_agency);
    currentAgencyId=-1;
    bMakeWidget.setEnabled(false);
    new PopulateAgenciesTask().execute();
  }
}",0.938488576449912
162096,"@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null || arrivalEstimatesList.data.isEmpty()) {
    Log.e(TAG,""String_Node_Str"");
    newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (!onReboot)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(TAG,""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    if (minutes < 1) {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
 else     if (minutes == 1) {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
 else {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"" + minutes + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
  }
  String routeName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  String stopName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  newView.setTextViewText(R.id.tvRoute,routeName);
  newView.setTextViewText(R.id.tvStop,stopName);
  Intent clickIntent=new Intent(context,TransLocWidgetProvider.class);
  clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,widgetId);
  PendingIntent pendingIntent=PendingIntent.getBroadcast(context,widgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  newView.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
  int textColor=prefs.getInt(""String_Node_Str"" + widgetId,-1);
  int backgroundColor=prefs.getInt(""String_Node_Str"" + widgetId,-1);
  newView.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
  newView.setTextColor(R.id.tvRemainingTime,textColor);
  newView.setTextColor(R.id.tvMins,textColor);
  newView.setTextColor(R.id.tvRoute,textColor);
  newView.setTextColor(R.id.tvStop,textColor);
  Log.v(TAG,""String_Node_Str"" + widgetId);
  appWidgetManager.updateAppWidget(widgetId,newView);
}","@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null || arrivalEstimatesList.data.isEmpty()) {
    newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (!onReboot)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    if (minutes < 1) {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
 else     if (minutes == 1) {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
 else {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"" + minutes + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
  }
  String routeName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  String stopName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  newView.setTextViewText(R.id.tvRoute,routeName);
  newView.setTextViewText(R.id.tvStop,stopName);
  Intent clickIntent=new Intent(context,TransLocWidgetProvider.class);
  clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,widgetId);
  PendingIntent pendingIntent=PendingIntent.getBroadcast(context,widgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  newView.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
  int textColor=prefs.getInt(""String_Node_Str"" + widgetId,-1);
  int backgroundColor=prefs.getInt(""String_Node_Str"" + widgetId,-1);
  newView.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
  newView.setTextColor(R.id.tvRemainingTime,textColor);
  newView.setTextColor(R.id.tvMins,textColor);
  newView.setTextColor(R.id.tvRoute,textColor);
  newView.setTextColor(R.id.tvStop,textColor);
  Log.v(TAG,""String_Node_Str"" + widgetId);
  appWidgetManager.updateAppWidget(widgetId,newView);
}",0.9737237237237236
162097,"@Override public void onReceive(Context context,Intent intent){
  Log.v(TAG,""String_Node_Str"" + intent.getAction());
  newView=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  appWidgetManager=AppWidgetManager.getInstance(context);
  if (intent.getAction() == null) {
    Log.v(TAG,""String_Node_Str"");
    Bundle extras=intent.getExtras();
    if (extras != null) {
      int receivedWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
      new getJsonResponse(context,receivedWidgetId,false).execute();
    }
  }
 else   if (intent.getAction().equals(""String_Node_Str"")) {
    ComponentName thisAppWidget=new ComponentName(context.getPackageName(),TransLocWidgetProvider.class.getName());
    int[] appWidgetIds=appWidgetManager.getAppWidgetIds(thisAppWidget);
    for (int i=0; i < appWidgetIds.length; i++) {
      Log.v(TAG,""String_Node_Str"" + appWidgetIds[i]);
      new getJsonResponse(context,appWidgetIds[i],true).execute();
    }
  }
 else {
    Log.v(TAG,""String_Node_Str"");
  }
}","@Override public void onReceive(Context context,Intent intent){
  Log.v(TAG,""String_Node_Str"" + intent.getAction());
  newView=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  appWidgetManager=AppWidgetManager.getInstance(context);
  if (intent.getAction() == null) {
    Log.v(TAG,""String_Node_Str"");
    Bundle extras=intent.getExtras();
    if (extras != null) {
      int receivedWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
      new getJsonResponse(context,receivedWidgetId,false).execute();
    }
  }
 else   if (intent.getAction().equals(""String_Node_Str"") || intent.getAction().equals(""String_Node_Str"")) {
    ComponentName thisAppWidget=new ComponentName(context.getPackageName(),TransLocWidgetProvider.class.getName());
    int[] appWidgetIds=appWidgetManager.getAppWidgetIds(thisAppWidget);
    for (int i=0; i < appWidgetIds.length; i++) {
      new getJsonResponse(context,appWidgetIds[i],true).execute();
    }
  }
 else {
    Log.v(TAG,""String_Node_Str"");
  }
}",0.8700189753320683
162098,"@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null || arrivalEstimatesList.data.isEmpty()) {
    Log.e(TAG,""String_Node_Str"");
    newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (!onReboot)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(TAG,""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    if (minutes < 1) {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
 else     if (minutes == 1) {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
 else {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"" + minutes + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
  }
  String routeName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  String stopName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  newView.setTextViewText(R.id.tvRoute,routeName);
  newView.setTextViewText(R.id.tvStop,stopName);
  Intent clickIntent=new Intent(context,TransLocWidgetProvider.class);
  clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,widgetId);
  PendingIntent pendingIntent=PendingIntent.getBroadcast(context,widgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  newView.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
  int textColor=prefs.getInt(""String_Node_Str"" + widgetId,-1);
  int backgroundColor=prefs.getInt(""String_Node_Str"" + widgetId,-1);
  newView.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
  newView.setTextColor(R.id.tvRemainingTime,textColor);
  newView.setTextColor(R.id.tvMins,textColor);
  newView.setTextColor(R.id.tvRoute,textColor);
  newView.setTextColor(R.id.tvStop,textColor);
  Log.v(TAG,""String_Node_Str"" + widgetId);
  appWidgetManager.updateAppWidget(widgetId,newView);
}","@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null || arrivalEstimatesList.data.isEmpty()) {
    newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (!onReboot)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    if (minutes < 1) {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
 else     if (minutes == 1) {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
 else {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"" + minutes + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
  }
  String routeName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  String stopName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  newView.setTextViewText(R.id.tvRoute,routeName);
  newView.setTextViewText(R.id.tvStop,stopName);
  Intent clickIntent=new Intent(context,TransLocWidgetProvider.class);
  clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,widgetId);
  PendingIntent pendingIntent=PendingIntent.getBroadcast(context,widgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  newView.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
  int textColor=prefs.getInt(""String_Node_Str"" + widgetId,-1);
  int backgroundColor=prefs.getInt(""String_Node_Str"" + widgetId,-1);
  newView.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
  newView.setTextColor(R.id.tvRemainingTime,textColor);
  newView.setTextColor(R.id.tvMins,textColor);
  newView.setTextColor(R.id.tvRoute,textColor);
  newView.setTextColor(R.id.tvStop,textColor);
  Log.v(TAG,""String_Node_Str"" + widgetId);
  appWidgetManager.updateAppWidget(widgetId,newView);
}",0.9737237237237236
162099,"@Override public void onReceive(Context context,Intent intent){
  Log.v(TAG,""String_Node_Str"" + intent.getAction());
  newView=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  appWidgetManager=AppWidgetManager.getInstance(context);
  if (intent.getAction() == null) {
    Log.v(TAG,""String_Node_Str"");
    Bundle extras=intent.getExtras();
    if (extras != null) {
      int receivedWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
      new getJsonResponse(context,receivedWidgetId,false).execute();
    }
  }
 else   if (intent.getAction().equals(""String_Node_Str"")) {
    ComponentName thisAppWidget=new ComponentName(context.getPackageName(),TransLocWidgetProvider.class.getName());
    int[] appWidgetIds=appWidgetManager.getAppWidgetIds(thisAppWidget);
    for (int i=0; i < appWidgetIds.length; i++) {
      Log.v(TAG,""String_Node_Str"" + appWidgetIds[i]);
      new getJsonResponse(context,appWidgetIds[i],true).execute();
    }
  }
 else {
    Log.v(TAG,""String_Node_Str"");
  }
}","@Override public void onReceive(Context context,Intent intent){
  Log.v(TAG,""String_Node_Str"" + intent.getAction());
  newView=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  appWidgetManager=AppWidgetManager.getInstance(context);
  if (intent.getAction() == null) {
    Log.v(TAG,""String_Node_Str"");
    Bundle extras=intent.getExtras();
    if (extras != null) {
      int receivedWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
      new getJsonResponse(context,receivedWidgetId,false).execute();
    }
  }
 else   if (intent.getAction().equals(""String_Node_Str"") || intent.getAction().equals(""String_Node_Str"")) {
    ComponentName thisAppWidget=new ComponentName(context.getPackageName(),TransLocWidgetProvider.class.getName());
    int[] appWidgetIds=appWidgetManager.getAppWidgetIds(thisAppWidget);
    for (int i=0; i < appWidgetIds.length; i++) {
      new getJsonResponse(context,appWidgetIds[i],true).execute();
    }
  }
 else {
    Log.v(TAG,""String_Node_Str"");
  }
}",0.8700189753320683
162100,"@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.error_no_data));
  }
 else   if (arrivalEstimatesList.data.isEmpty()) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(TAG,""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    if (routeShortName.length() < 5) {
      String widgetRouteName=routeShortName + ""String_Node_Str"" + routeLongName;
      editor.putString(""String_Node_Str"" + mAppWidgetId,widgetRouteName).commit();
      views.setTextViewText(R.id.tvRoute,widgetRouteName);
    }
 else {
      editor.putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    editor.putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
    int textColor=settings.getInt(""String_Node_Str"",-1);
    views.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
    views.setTextColor(R.id.tvRemainingTime,textColor);
    views.setTextColor(R.id.tvMins,textColor);
    views.setTextColor(R.id.tvRoute,textColor);
    views.setTextColor(R.id.tvStop,textColor);
    Intent clickIntent=new Intent(getBaseContext(),TransLocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(TAG,""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    editor.putBoolean(""String_Node_Str"",true);
    finish();
  }
  makeWidgetDialog.dismiss();
  Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
}","@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.error_no_data));
  }
 else   if (arrivalEstimatesList.data.isEmpty()) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(TAG,""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    if (routeShortName.length() < 5 && routeShortName.length() > 0) {
      String widgetRouteName=routeShortName + ""String_Node_Str"" + routeLongName;
      editor.putString(""String_Node_Str"" + mAppWidgetId,widgetRouteName).commit();
      views.setTextViewText(R.id.tvRoute,widgetRouteName);
    }
 else {
      editor.putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    editor.putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
    int textColor=settings.getInt(""String_Node_Str"",-1);
    views.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
    views.setTextColor(R.id.tvRemainingTime,textColor);
    views.setTextColor(R.id.tvMins,textColor);
    views.setTextColor(R.id.tvRoute,textColor);
    views.setTextColor(R.id.tvStop,textColor);
    Intent clickIntent=new Intent(getBaseContext(),TransLocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(TAG,""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    editor.putBoolean(""String_Node_Str"",true);
    finish();
  }
  makeWidgetDialog.dismiss();
  Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
}",0.9950168783153832
162101,"@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.error_no_data));
  }
 else   if (arrivalEstimatesList.data.isEmpty()) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(TAG,""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    if (routeShortName.length() < 5) {
      String widgetRouteName=routeShortName + ""String_Node_Str"" + routeLongName;
      editor.putString(""String_Node_Str"" + mAppWidgetId,widgetRouteName).commit();
      views.setTextViewText(R.id.tvRoute,widgetRouteName);
    }
 else {
      editor.putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    editor.putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
    int textColor=settings.getInt(""String_Node_Str"",-1);
    views.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
    views.setTextColor(R.id.tvRemainingTime,textColor);
    views.setTextColor(R.id.tvMins,textColor);
    views.setTextColor(R.id.tvRoute,textColor);
    views.setTextColor(R.id.tvStop,textColor);
    Intent clickIntent=new Intent(getBaseContext(),TransLocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(TAG,""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    editor.putBoolean(""String_Node_Str"",true);
    finish();
  }
  makeWidgetDialog.dismiss();
  Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
}","@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.error_no_data));
  }
 else   if (arrivalEstimatesList.data.isEmpty()) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(TAG,""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    if (routeShortName.length() < 5 && routeShortName.length() > 0) {
      String widgetRouteName=routeShortName + ""String_Node_Str"" + routeLongName;
      editor.putString(""String_Node_Str"" + mAppWidgetId,widgetRouteName).commit();
      views.setTextViewText(R.id.tvRoute,widgetRouteName);
    }
 else {
      editor.putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    editor.putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
    int textColor=settings.getInt(""String_Node_Str"",-1);
    views.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
    views.setTextColor(R.id.tvRemainingTime,textColor);
    views.setTextColor(R.id.tvMins,textColor);
    views.setTextColor(R.id.tvRoute,textColor);
    views.setTextColor(R.id.tvStop,textColor);
    Intent clickIntent=new Intent(getBaseContext(),TransLocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(TAG,""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    editor.putBoolean(""String_Node_Str"",true);
    finish();
  }
  makeWidgetDialog.dismiss();
  Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
}",0.9950168783153832
162102,"@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.error_no_data));
  }
 else   if (arrivalEstimatesList.data.isEmpty()) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(TAG,""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    if (routeShortName.length() < 5) {
      String widgetRouteName=routeShortName + ""String_Node_Str"" + routeLongName;
      editor.putString(""String_Node_Str"" + mAppWidgetId,widgetRouteName).commit();
      views.setTextViewText(R.id.tvRoute,widgetRouteName);
    }
 else {
      editor.putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    editor.putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
    int textColor=settings.getInt(""String_Node_Str"",-1);
    views.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
    views.setTextColor(R.id.tvRemainingTime,textColor);
    views.setTextColor(R.id.tvMins,textColor);
    views.setTextColor(R.id.tvRoute,textColor);
    views.setTextColor(R.id.tvStop,textColor);
    Intent clickIntent=new Intent(getBaseContext(),TransLocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(TAG,""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    editor.putBoolean(""String_Node_Str"",true);
    finish();
  }
  makeWidgetDialog.dismiss();
  Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
}","@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.error_no_data));
  }
 else   if (arrivalEstimatesList.data.isEmpty()) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(TAG,""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    if (routeShortName.length() < 5 && routeShortName.length() > 0) {
      String widgetRouteName=routeShortName + ""String_Node_Str"" + routeLongName;
      editor.putString(""String_Node_Str"" + mAppWidgetId,widgetRouteName).commit();
      views.setTextViewText(R.id.tvRoute,widgetRouteName);
    }
 else {
      editor.putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    editor.putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
    int textColor=settings.getInt(""String_Node_Str"",-1);
    views.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
    views.setTextColor(R.id.tvRemainingTime,textColor);
    views.setTextColor(R.id.tvMins,textColor);
    views.setTextColor(R.id.tvRoute,textColor);
    views.setTextColor(R.id.tvStop,textColor);
    Intent clickIntent=new Intent(getBaseContext(),TransLocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(TAG,""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    editor.putBoolean(""String_Node_Str"",true);
    finish();
  }
  makeWidgetDialog.dismiss();
  Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
}",0.9950168783153832
162103,"@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.error_no_data));
  }
 else   if (arrivalEstimatesList.data.isEmpty()) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(TAG,""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    if (routeShortName.length() < 5) {
      String widgetRouteName=routeShortName + ""String_Node_Str"" + routeLongName;
      editor.putString(""String_Node_Str"" + mAppWidgetId,widgetRouteName).commit();
      views.setTextViewText(R.id.tvRoute,widgetRouteName);
    }
 else {
      editor.putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    editor.putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
    int textColor=settings.getInt(""String_Node_Str"",-1);
    views.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
    views.setTextColor(R.id.tvRemainingTime,textColor);
    views.setTextColor(R.id.tvMins,textColor);
    views.setTextColor(R.id.tvRoute,textColor);
    views.setTextColor(R.id.tvStop,textColor);
    Intent clickIntent=new Intent(getBaseContext(),TransLocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(TAG,""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    editor.putBoolean(""String_Node_Str"",true);
    finish();
  }
  makeWidgetDialog.dismiss();
  Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
}","@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.error_no_data));
  }
 else   if (arrivalEstimatesList.data.isEmpty()) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(TAG,""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    if (routeShortName.length() < 5 && routeShortName.length() > 0) {
      String widgetRouteName=routeShortName + ""String_Node_Str"" + routeLongName;
      editor.putString(""String_Node_Str"" + mAppWidgetId,widgetRouteName).commit();
      views.setTextViewText(R.id.tvRoute,widgetRouteName);
    }
 else {
      editor.putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    editor.putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
    int textColor=settings.getInt(""String_Node_Str"",-1);
    views.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
    views.setTextColor(R.id.tvRemainingTime,textColor);
    views.setTextColor(R.id.tvMins,textColor);
    views.setTextColor(R.id.tvRoute,textColor);
    views.setTextColor(R.id.tvStop,textColor);
    Intent clickIntent=new Intent(getBaseContext(),TransLocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(TAG,""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    editor.putBoolean(""String_Node_Str"",true);
    finish();
  }
  makeWidgetDialog.dismiss();
  Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
}",0.9950168783153832
162104,"@Override protected void onPostExecute(String result){
  String response=result;
  try {
    JSONObject jObject=new JSONObject(response);
    currentTimeUTC=jObject.getString(""String_Node_Str"");
    JSONArray jArrayData=jObject.getJSONArray(""String_Node_Str"");
    JSONObject jObjectArrayData=jArrayData.getJSONObject(0);
    JSONArray jArrayArrivals=jObjectArrayData.getJSONArray(""String_Node_Str"");
    JSONObject jObjectArrayArrivals=jArrayArrivals.getJSONObject(0);
    arrivalTimeUTC=jObjectArrayArrivals.getString(""String_Node_Str"");
    errorCode=0;
  }
 catch (  JSONException e) {
    e.printStackTrace();
    errorCode=1;
    Log.e(""String_Node_Str"",""String_Node_Str"");
  }
  if (errorCode == 0) {
    int minutes=getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    if (minutes < 1)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
 else     if (minutes == 1)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
 else     Toast.makeText(context,""String_Node_Str"" + minutes + ""String_Node_Str"",Toast.LENGTH_LONG).show();
    newView.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
  }
 else   if (errorCode == 1) {
    newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
  Log.v(""String_Node_Str"",""String_Node_Str"" + widgetId);
  appWidgetManager.updateAppWidget(widgetId,newView);
}","@Override protected void onPostExecute(String result){
  String response=result;
  try {
    JSONObject jObject=new JSONObject(response);
    currentTimeUTC=jObject.getString(""String_Node_Str"");
    JSONArray jArrayData=jObject.getJSONArray(""String_Node_Str"");
    JSONObject jObjectArrayData=jArrayData.getJSONObject(0);
    JSONArray jArrayArrivals=jObjectArrayData.getJSONArray(""String_Node_Str"");
    JSONObject jObjectArrayArrivals=jArrayArrivals.getJSONObject(0);
    arrivalTimeUTC=jObjectArrayArrivals.getString(""String_Node_Str"");
    errorCode=0;
  }
 catch (  JSONException e) {
    e.printStackTrace();
    errorCode=1;
    Log.e(""String_Node_Str"",""String_Node_Str"");
  }
  if (errorCode == 0) {
    Log.v(""String_Node_Str"",""String_Node_Str"");
    int minutes=getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    if (minutes < 1)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
 else     if (minutes == 1)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
 else     Toast.makeText(context,""String_Node_Str"" + minutes + ""String_Node_Str"",Toast.LENGTH_LONG).show();
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
    String routeName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
    String stopName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
    Log.v(""String_Node_Str"",routeName);
    Log.v(""String_Node_Str"",stopName);
    newView.setTextViewText(R.id.tvRoute,routeName);
    newView.setTextViewText(R.id.tvStop,stopName);
    if (minutes < 1)     newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
 else     newView.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 2)     newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
  }
 else   if (errorCode == 1) {
    Log.v(""String_Node_Str"",""String_Node_Str"");
    newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
  Log.v(""String_Node_Str"",""String_Node_Str"" + widgetId);
  appWidgetManager.updateAppWidget(widgetId,newView);
}",0.8439897698209718
162105,"@Override public void onReceive(Context context,Intent intent){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  if (intent.getAction() == null) {
    Bundle extras=intent.getExtras();
    if (extras != null) {
      Log.v(""String_Node_Str"",""String_Node_Str"");
      appWidgetManager=AppWidgetManager.getInstance(context);
      widgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
      Log.v(""String_Node_Str"",""String_Node_Str"" + widgetId);
      getJsonResponse task=new getJsonResponse(context);
      task.execute();
    }
  }
 else {
    super.onReceive(context,intent);
  }
}","@Override public void onReceive(Context context,Intent intent){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  if (intent.getAction() == null) {
    Bundle extras=intent.getExtras();
    Log.v(""String_Node_Str"",""String_Node_Str"");
    appWidgetManager=AppWidgetManager.getInstance(context);
    widgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
    Log.v(""String_Node_Str"",""String_Node_Str"" + widgetId);
    Log.v(""String_Node_Str"",""String_Node_Str"");
    getJsonResponse task=new getJsonResponse(context);
    task.execute();
  }
 else {
    super.onReceive(context,intent);
  }
}",0.7186009538950715
162106,"@Override protected void onPostExecute(Void result){
  super.onPostExecute(result);
  if (errorCode == 0) {
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    Log.v(""String_Node_Str"",routeShortNameArray.get(routePosition));
    Log.v(""String_Node_Str"",stopNameArray.get(stopPosition));
    if (routeShortNameArray.get(routePosition).equals(""String_Node_Str"")) {
      views.setTextViewText(R.id.tvRoute,routeLongNameArray.get(routePosition));
    }
 else {
      views.setTextViewText(R.id.tvRoute,routeShortNameArray.get(routePosition));
    }
    views.setTextViewText(R.id.tvStop,stopNameArray.get(stopPosition));
    Intent clickIntent=new Intent(getBaseContext(),TranslocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    dialog.dismiss();
    finish();
  }
 else   if (errorCode == 1) {
    dialog.dismiss();
    showAlertDialog(""String_Node_Str"",""String_Node_Str"");
  }
}","@Override protected void onPostExecute(Void result){
  super.onPostExecute(result);
  if (errorCode == 0) {
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    Log.v(""String_Node_Str"",routeShortNameArray.get(routePosition));
    Log.v(""String_Node_Str"",stopNameArray.get(stopPosition));
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(WidgetConfigurationActivity.this);
    if (routeShortNameArray.get(routePosition).equals(""String_Node_Str"")) {
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeLongNameArray.get(routePosition));
      views.setTextViewText(R.id.tvRoute,routeLongNameArray.get(routePosition));
    }
 else {
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeShortNameArray.get(routePosition));
      views.setTextViewText(R.id.tvRoute,routeShortNameArray.get(routePosition));
    }
    prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,stopNameArray.get(stopPosition));
    views.setTextViewText(R.id.tvStop,stopNameArray.get(stopPosition));
    prefs.edit().commit();
    Intent clickIntent=new Intent(getBaseContext(),TranslocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    dialog.dismiss();
    finish();
  }
 else   if (errorCode == 1) {
    dialog.dismiss();
    showAlertDialog(""String_Node_Str"",""String_Node_Str"");
  }
}",0.885665941503505
162107,"@Override protected void onPostExecute(String result){
  String response=result;
  try {
    JSONObject jObject=new JSONObject(response);
    currentTimeUTC=jObject.getString(""String_Node_Str"");
    JSONArray jArrayData=jObject.getJSONArray(""String_Node_Str"");
    JSONObject jObjectArrayData=jArrayData.getJSONObject(0);
    JSONArray jArrayArrivals=jObjectArrayData.getJSONArray(""String_Node_Str"");
    JSONObject jObjectArrayArrivals=jArrayArrivals.getJSONObject(0);
    arrivalTimeUTC=jObjectArrayArrivals.getString(""String_Node_Str"");
    errorCode=0;
  }
 catch (  JSONException e) {
    e.printStackTrace();
    errorCode=1;
    Log.e(""String_Node_Str"",""String_Node_Str"");
  }
  if (errorCode == 0) {
    int minutes=getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    if (minutes < 1)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
 else     if (minutes == 1)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
 else     Toast.makeText(context,""String_Node_Str"" + minutes + ""String_Node_Str"",Toast.LENGTH_LONG).show();
    newView.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
  }
 else   if (errorCode == 1) {
    newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
  Log.v(""String_Node_Str"",""String_Node_Str"" + widgetId);
  appWidgetManager.updateAppWidget(widgetId,newView);
}","@Override protected void onPostExecute(String result){
  String response=result;
  try {
    JSONObject jObject=new JSONObject(response);
    currentTimeUTC=jObject.getString(""String_Node_Str"");
    JSONArray jArrayData=jObject.getJSONArray(""String_Node_Str"");
    JSONObject jObjectArrayData=jArrayData.getJSONObject(0);
    JSONArray jArrayArrivals=jObjectArrayData.getJSONArray(""String_Node_Str"");
    JSONObject jObjectArrayArrivals=jArrayArrivals.getJSONObject(0);
    arrivalTimeUTC=jObjectArrayArrivals.getString(""String_Node_Str"");
    errorCode=0;
  }
 catch (  JSONException e) {
    e.printStackTrace();
    errorCode=1;
    Log.e(""String_Node_Str"",""String_Node_Str"");
  }
  if (errorCode == 0) {
    Log.v(""String_Node_Str"",""String_Node_Str"");
    int minutes=getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    if (minutes < 1)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
 else     if (minutes == 1)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
 else     Toast.makeText(context,""String_Node_Str"" + minutes + ""String_Node_Str"",Toast.LENGTH_LONG).show();
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
    String routeName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
    String stopName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
    Log.v(""String_Node_Str"",routeName);
    Log.v(""String_Node_Str"",stopName);
    newView.setTextViewText(R.id.tvRoute,routeName);
    newView.setTextViewText(R.id.tvStop,stopName);
    if (minutes < 1)     newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
 else     newView.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 2)     newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
  }
 else   if (errorCode == 1) {
    Log.v(""String_Node_Str"",""String_Node_Str"");
    newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
  Log.v(""String_Node_Str"",""String_Node_Str"" + widgetId);
  appWidgetManager.updateAppWidget(widgetId,newView);
}",0.8439897698209718
162108,"@Override public void onReceive(Context context,Intent intent){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  if (intent.getAction() == null) {
    Bundle extras=intent.getExtras();
    if (extras != null) {
      Log.v(""String_Node_Str"",""String_Node_Str"");
      appWidgetManager=AppWidgetManager.getInstance(context);
      widgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
      Log.v(""String_Node_Str"",""String_Node_Str"" + widgetId);
      getJsonResponse task=new getJsonResponse(context);
      task.execute();
    }
  }
 else {
    super.onReceive(context,intent);
  }
}","@Override public void onReceive(Context context,Intent intent){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  if (intent.getAction() == null) {
    Bundle extras=intent.getExtras();
    Log.v(""String_Node_Str"",""String_Node_Str"");
    appWidgetManager=AppWidgetManager.getInstance(context);
    widgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
    Log.v(""String_Node_Str"",""String_Node_Str"" + widgetId);
    Log.v(""String_Node_Str"",""String_Node_Str"");
    getJsonResponse task=new getJsonResponse(context);
    task.execute();
  }
 else {
    super.onReceive(context,intent);
  }
}",0.7186009538950715
162109,"@Override protected void onPostExecute(Void result){
  super.onPostExecute(result);
  if (errorCode == 0) {
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    Log.v(""String_Node_Str"",routeShortNameArray.get(routePosition));
    Log.v(""String_Node_Str"",stopNameArray.get(stopPosition));
    if (routeShortNameArray.get(routePosition).equals(""String_Node_Str"")) {
      views.setTextViewText(R.id.tvRoute,routeLongNameArray.get(routePosition));
    }
 else {
      views.setTextViewText(R.id.tvRoute,routeShortNameArray.get(routePosition));
    }
    views.setTextViewText(R.id.tvStop,stopNameArray.get(stopPosition));
    Intent clickIntent=new Intent(getBaseContext(),TranslocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    dialog.dismiss();
    finish();
  }
 else   if (errorCode == 1) {
    dialog.dismiss();
    showAlertDialog(""String_Node_Str"",""String_Node_Str"");
  }
}","@Override protected void onPostExecute(Void result){
  super.onPostExecute(result);
  if (errorCode == 0) {
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    Log.v(""String_Node_Str"",routeShortNameArray.get(routePosition));
    Log.v(""String_Node_Str"",stopNameArray.get(stopPosition));
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(WidgetConfigurationActivity.this);
    if (routeShortNameArray.get(routePosition).equals(""String_Node_Str"")) {
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeLongNameArray.get(routePosition));
      views.setTextViewText(R.id.tvRoute,routeLongNameArray.get(routePosition));
    }
 else {
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeShortNameArray.get(routePosition));
      views.setTextViewText(R.id.tvRoute,routeShortNameArray.get(routePosition));
    }
    prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,stopNameArray.get(stopPosition));
    views.setTextViewText(R.id.tvStop,stopNameArray.get(stopPosition));
    prefs.edit().commit();
    Intent clickIntent=new Intent(getBaseContext(),TranslocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    dialog.dismiss();
    finish();
  }
 else   if (errorCode == 1) {
    dialog.dismiss();
    showAlertDialog(""String_Node_Str"",""String_Node_Str"");
  }
}",0.885665941503505
162110,"@Override protected void onPreExecute(){
}","@Override protected void onPreExecute(){
  Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}",0.5419354838709678
162111,"@Override protected TransLocArrivalEstimates doInBackground(Void... voids){
  newView=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  String url=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  if (url.equals(""String_Node_Str""))   Log.e(""String_Node_Str"",""String_Node_Str"");
  Log.v(""String_Node_Str"",url);
  try {
    return new ObjectMapper().readValue(Utils.getJsonResponse(url),TransLocArrivalEstimates.class);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
}","@Override protected TransLocArrivalEstimates doInBackground(Void... voids){
  newView=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  String url=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  if (url.equals(""String_Node_Str""))   Log.e(""String_Node_Str"",""String_Node_Str"");
  Log.v(""String_Node_Str"",url);
  try {
    return new ObjectMapper().readValue(Utils.getJsonResponse(url),TransLocArrivalEstimates.class);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}",0.9459876543209876
162112,"@Override public void onUpdate(Context context,AppWidgetManager appWidgetManager,int[] appWidgetIds){
  Log.v(""String_Node_Str"",""String_Node_Str"");
}","@Override public void onUpdate(Context context,AppWidgetManager appWidgetManager,int[] appWidgetIds){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  Log.v(""String_Node_Str"",""String_Node_Str"");
  if (widgetId != -1) {
    getJsonResponse task=new getJsonResponse(context);
    task.execute();
  }
 else {
  }
}",0.6492374727668845
162113,"protected static String getJsonResponse(String url){
  String response=""String_Node_Str"";
  Log.v(""String_Node_Str"",url);
  DefaultHttpClient client=new DefaultHttpClient();
  HttpGet httpGet=new HttpGet(url);
  try {
    HttpResponse execute=client.execute(httpGet);
    int statusCode=execute.getStatusLine().getStatusCode();
    if (statusCode != HttpStatus.SC_OK) {
      Log.e(""String_Node_Str"",""String_Node_Str"");
      throw new Exception();
    }
 else {
      InputStream content=execute.getEntity().getContent();
      BufferedReader buffer=new BufferedReader(new InputStreamReader(content));
      String s=""String_Node_Str"";
      while ((s=buffer.readLine()) != null) {
        response+=s;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return response;
}","protected static String getJsonResponse(String url) throws Exception {
  String response=""String_Node_Str"";
  Log.v(""String_Node_Str"",url);
  DefaultHttpClient client=new DefaultHttpClient();
  HttpGet httpGet=new HttpGet(url);
  try {
    HttpResponse execute=client.execute(httpGet);
    int statusCode=execute.getStatusLine().getStatusCode();
    if (statusCode != HttpStatus.SC_OK) {
      Log.e(""String_Node_Str"",""String_Node_Str"");
      throw new Exception();
    }
 else {
      InputStream content=execute.getEntity().getContent();
      BufferedReader buffer=new BufferedReader(new InputStreamReader(content));
      String s=""String_Node_Str"";
      while ((s=buffer.readLine()) != null) {
        response+=s;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (response == ""String_Node_Str"") {
    throw new Exception();
  }
 else {
    return response;
  }
}",0.9197166469893744
162114,"protected TransLocArrivalEstimates doInBackground(Void... voids){
  String url=""String_Node_Str"" + currentAgencyId + ""String_Node_Str""+ currentRouteId+ ""String_Node_Str""+ currentStopId;
  editor.putString(""String_Node_Str"" + mAppWidgetId,url).commit();
  Log.v(""String_Node_Str"",""String_Node_Str"" + url);
  try {
    return new ObjectMapper().readValue(Utils.getJsonResponse(url),TransLocArrivalEstimates.class);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
}","protected TransLocArrivalEstimates doInBackground(Void... voids){
  String url=""String_Node_Str"" + currentAgencyId + ""String_Node_Str""+ currentRouteId+ ""String_Node_Str""+ currentStopId;
  editor.putString(""String_Node_Str"" + mAppWidgetId,url).commit();
  Log.v(""String_Node_Str"",""String_Node_Str"" + url);
  try {
    return new ObjectMapper().readValue(Utils.getJsonResponse(url),TransLocArrivalEstimates.class);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}",0.9979591836734694
162115,"@Override protected void onPreExecute(){
}","@Override protected void onPreExecute(){
  Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}",0.5419354838709678
162116,"@Override protected TransLocArrivalEstimates doInBackground(Void... voids){
  newView=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  String url=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  if (url.equals(""String_Node_Str""))   Log.e(""String_Node_Str"",""String_Node_Str"");
  Log.v(""String_Node_Str"",url);
  try {
    return new ObjectMapper().readValue(Utils.getJsonResponse(url),TransLocArrivalEstimates.class);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
}","@Override protected TransLocArrivalEstimates doInBackground(Void... voids){
  newView=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  String url=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  if (url.equals(""String_Node_Str""))   Log.e(""String_Node_Str"",""String_Node_Str"");
  Log.v(""String_Node_Str"",url);
  try {
    return new ObjectMapper().readValue(Utils.getJsonResponse(url),TransLocArrivalEstimates.class);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}",0.9459876543209876
162117,"@Override public void onUpdate(Context context,AppWidgetManager appWidgetManager,int[] appWidgetIds){
  Log.v(""String_Node_Str"",""String_Node_Str"");
}","@Override public void onUpdate(Context context,AppWidgetManager appWidgetManager,int[] appWidgetIds){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  Log.v(""String_Node_Str"",""String_Node_Str"");
  if (widgetId != -1) {
    getJsonResponse task=new getJsonResponse(context);
    task.execute();
  }
 else {
  }
}",0.6492374727668845
162118,"protected static String getJsonResponse(String url){
  String response=""String_Node_Str"";
  Log.v(""String_Node_Str"",url);
  DefaultHttpClient client=new DefaultHttpClient();
  HttpGet httpGet=new HttpGet(url);
  try {
    HttpResponse execute=client.execute(httpGet);
    int statusCode=execute.getStatusLine().getStatusCode();
    if (statusCode != HttpStatus.SC_OK) {
      Log.e(""String_Node_Str"",""String_Node_Str"");
      throw new Exception();
    }
 else {
      InputStream content=execute.getEntity().getContent();
      BufferedReader buffer=new BufferedReader(new InputStreamReader(content));
      String s=""String_Node_Str"";
      while ((s=buffer.readLine()) != null) {
        response+=s;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return response;
}","protected static String getJsonResponse(String url) throws Exception {
  String response=""String_Node_Str"";
  Log.v(""String_Node_Str"",url);
  DefaultHttpClient client=new DefaultHttpClient();
  HttpGet httpGet=new HttpGet(url);
  try {
    HttpResponse execute=client.execute(httpGet);
    int statusCode=execute.getStatusLine().getStatusCode();
    if (statusCode != HttpStatus.SC_OK) {
      Log.e(""String_Node_Str"",""String_Node_Str"");
      throw new Exception();
    }
 else {
      InputStream content=execute.getEntity().getContent();
      BufferedReader buffer=new BufferedReader(new InputStreamReader(content));
      String s=""String_Node_Str"";
      while ((s=buffer.readLine()) != null) {
        response+=s;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (response == ""String_Node_Str"") {
    throw new Exception();
  }
 else {
    return response;
  }
}",0.9197166469893744
162119,"protected TransLocArrivalEstimates doInBackground(Void... voids){
  String url=""String_Node_Str"" + currentAgencyId + ""String_Node_Str""+ currentRouteId+ ""String_Node_Str""+ currentStopId;
  editor.putString(""String_Node_Str"" + mAppWidgetId,url).commit();
  Log.v(""String_Node_Str"",""String_Node_Str"" + url);
  try {
    return new ObjectMapper().readValue(Utils.getJsonResponse(url),TransLocArrivalEstimates.class);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
}","protected TransLocArrivalEstimates doInBackground(Void... voids){
  String url=""String_Node_Str"" + currentAgencyId + ""String_Node_Str""+ currentRouteId+ ""String_Node_Str""+ currentStopId;
  editor.putString(""String_Node_Str"" + mAppWidgetId,url).commit();
  Log.v(""String_Node_Str"",""String_Node_Str"" + url);
  try {
    return new ObjectMapper().readValue(Utils.getJsonResponse(url),TransLocArrivalEstimates.class);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}",0.9979591836734694
162120,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.configuration_activity);
  sSelectAgency=(Spinner)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Spinner)findViewById(R.id.sSelectRoute);
  sSelectStop=(Spinner)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  Log.v(""String_Node_Str"",""String_Node_Str"");
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  PopulateAgenciesTask task=new PopulateAgenciesTask();
  task.execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset();
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(getBaseContext(),""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.configuration_activity);
  sSelectAgency=(Spinner)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Spinner)findViewById(R.id.sSelectRoute);
  sSelectStop=(Spinner)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  Log.v(""String_Node_Str"",""String_Node_Str"");
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  PopulateAgenciesTask task=new PopulateAgenciesTask();
  task.execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset();
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
}",0.9849718221665624
162121,"@Override public void onClick(View view){
  Utils.showAlertDialog(getBaseContext(),""String_Node_Str"",getString(R.string.help_dialog));
}","@Override public void onClick(View view){
  Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
}",0.8888888888888888
162122,"@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  Log.v(""String_Node_Str"",""String_Node_Str"" + arrivalEstimatesList.data.size());
  if (arrivalEstimatesList.data.isEmpty() || arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(""String_Node_Str"",""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    Log.v(""String_Node_Str"",routeShortName);
    Log.v(""String_Node_Str"",stopName);
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(WidgetConfigurationActivity.this);
    if (routeShortName.equals(""String_Node_Str"")) {
      Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeLongName).commit();
      views.setTextViewText(R.id.tvRoute,routeLongName);
    }
 else {
      Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    Intent clickIntent=new Intent(getBaseContext(),TranslocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    dialog.dismiss();
    finish();
  }
}","@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  Log.v(""String_Node_Str"",""String_Node_Str"" + arrivalEstimatesList.data.size());
  if (arrivalEstimatesList.data.isEmpty() || arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
    dialog.dismiss();
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(""String_Node_Str"",""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    Log.v(""String_Node_Str"",routeShortName);
    Log.v(""String_Node_Str"",stopName);
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(WidgetConfigurationActivity.this);
    if (routeShortName.equals(""String_Node_Str"")) {
      Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeLongName).commit();
      views.setTextViewText(R.id.tvRoute,routeLongName);
    }
 else {
      Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    Intent clickIntent=new Intent(getBaseContext(),TranslocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    dialog.dismiss();
    finish();
  }
}",0.9960923623445824
162123,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.configuration_activity);
  sSelectAgency=(Spinner)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Spinner)findViewById(R.id.sSelectRoute);
  sSelectStop=(Spinner)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  Log.v(""String_Node_Str"",""String_Node_Str"");
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  PopulateAgenciesTask task=new PopulateAgenciesTask();
  task.execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset();
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(getBaseContext(),""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.configuration_activity);
  sSelectAgency=(Spinner)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Spinner)findViewById(R.id.sSelectRoute);
  sSelectStop=(Spinner)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  Log.v(""String_Node_Str"",""String_Node_Str"");
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  PopulateAgenciesTask task=new PopulateAgenciesTask();
  task.execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset();
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
}",0.9849718221665624
162124,"@Override public void onClick(View view){
  Utils.showAlertDialog(getBaseContext(),""String_Node_Str"",getString(R.string.help_dialog));
}","@Override public void onClick(View view){
  Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
}",0.8888888888888888
162125,"@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  Log.v(""String_Node_Str"",""String_Node_Str"" + arrivalEstimatesList.data.size());
  if (arrivalEstimatesList.data.isEmpty() || arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(""String_Node_Str"",""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    Log.v(""String_Node_Str"",routeShortName);
    Log.v(""String_Node_Str"",stopName);
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(WidgetConfigurationActivity.this);
    if (routeShortName.equals(""String_Node_Str"")) {
      Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeLongName).commit();
      views.setTextViewText(R.id.tvRoute,routeLongName);
    }
 else {
      Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    Intent clickIntent=new Intent(getBaseContext(),TranslocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    dialog.dismiss();
    finish();
  }
}","@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  Log.v(""String_Node_Str"",""String_Node_Str"" + arrivalEstimatesList.data.size());
  if (arrivalEstimatesList.data.isEmpty() || arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
    dialog.dismiss();
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(""String_Node_Str"",""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    Log.v(""String_Node_Str"",routeShortName);
    Log.v(""String_Node_Str"",stopName);
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(WidgetConfigurationActivity.this);
    if (routeShortName.equals(""String_Node_Str"")) {
      Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeLongName).commit();
      views.setTextViewText(R.id.tvRoute,routeLongName);
    }
 else {
      Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    Intent clickIntent=new Intent(getBaseContext(),TranslocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    dialog.dismiss();
    finish();
  }
}",0.9960923623445824
162126,"public void onItemSelected(AdapterView<?> parent,View view,int pos,long id){
  sSelectRoute.setEnabled(true);
  PopulateStopsTask task=new PopulateStopsTask();
  task.execute();
}","public void onItemSelected(AdapterView<?> parent,View view,int pos,long id){
  sSelectStop.setEnabled(true);
  PopulateStopsTask task=new PopulateStopsTask();
  task.execute();
}",0.9803921568627452
162127,"@Override protected void onPreExecute(){
  int position=sSelectRoute.getSelectedItemPosition();
  routeId=routeIdArray.get(position);
  Log.v(""String_Node_Str"",""String_Node_Str"" + routeId);
  routeLongNameArray.clear();
  routeIdArray.clear();
  routeShortNameArray.clear();
  stopIdArray.clear();
  stopNameArray.clear();
  stopShortNameArray.clear();
}","@Override protected void onPreExecute(){
  for (int i=0; i < routeIdArray.size(); i++) {
    Log.v(""String_Node_Str"",routeLongNameArray.get(i));
    Log.v(""String_Node_Str"",routeIdArray.get(i));
  }
  int position=sSelectRoute.getSelectedItemPosition();
  routeId=routeIdArray.get(position);
  Log.v(""String_Node_Str"",""String_Node_Str"" + routeId);
  stopIdArray.clear();
  stopNameArray.clear();
  stopShortNameArray.clear();
}",0.586427656850192
162128,"@Override protected void onPostExecute(Void result){
  super.onPostExecute(result);
  ArrayAdapter<String> stopArrayAdapter=new ArrayAdapter<String>(getBaseContext(),android.R.layout.simple_list_item_1,stopNameArray);
  sSelectRoute.setAdapter(stopArrayAdapter);
}","@Override protected void onPostExecute(Void result){
  super.onPostExecute(result);
  ArrayAdapter<String> stopArrayAdapter=new ArrayAdapter<String>(getBaseContext(),android.R.layout.simple_list_item_1,stopNameArray);
  sSelectStop.setAdapter(stopArrayAdapter);
}",0.98292220113852
162129,"public void onItemSelected(AdapterView<?> parent,View view,int pos,long id){
  sSelectRoute.setEnabled(true);
  PopulateStopsTask task=new PopulateStopsTask();
  task.execute();
}","public void onItemSelected(AdapterView<?> parent,View view,int pos,long id){
  sSelectStop.setEnabled(true);
  PopulateStopsTask task=new PopulateStopsTask();
  task.execute();
}",0.9803921568627452
162130,"@Override protected void onPreExecute(){
  int position=sSelectRoute.getSelectedItemPosition();
  routeId=routeIdArray.get(position);
  Log.v(""String_Node_Str"",""String_Node_Str"" + routeId);
  routeLongNameArray.clear();
  routeIdArray.clear();
  routeShortNameArray.clear();
  stopIdArray.clear();
  stopNameArray.clear();
  stopShortNameArray.clear();
}","@Override protected void onPreExecute(){
  for (int i=0; i < routeIdArray.size(); i++) {
    Log.v(""String_Node_Str"",routeLongNameArray.get(i));
    Log.v(""String_Node_Str"",routeIdArray.get(i));
  }
  int position=sSelectRoute.getSelectedItemPosition();
  routeId=routeIdArray.get(position);
  Log.v(""String_Node_Str"",""String_Node_Str"" + routeId);
  stopIdArray.clear();
  stopNameArray.clear();
  stopShortNameArray.clear();
}",0.586427656850192
162131,"@Override protected void onPostExecute(Void result){
  super.onPostExecute(result);
  ArrayAdapter<String> stopArrayAdapter=new ArrayAdapter<String>(getBaseContext(),android.R.layout.simple_list_item_1,stopNameArray);
  sSelectRoute.setAdapter(stopArrayAdapter);
}","@Override protected void onPostExecute(Void result){
  super.onPostExecute(result);
  ArrayAdapter<String> stopArrayAdapter=new ArrayAdapter<String>(getBaseContext(),android.R.layout.simple_list_item_1,stopNameArray);
  sSelectStop.setAdapter(stopArrayAdapter);
}",0.98292220113852
162132,"static public RequestAndResponse streamRequestAndResponse(RequestMethod method,Session session,String target,String params[],long range,String md5,boolean needSign,int socketTimeoutOverrideMs) throws VDiskException {
  String curlHeader=""String_Node_Str"";
  if (Logger.DEBUG_MODE) {
    if (session.getWeiboAccessToken() != null) {
      String token=Signature.getWeiboHeader(session.getAppKeyPair(),(WeiboAccessToken)session.getWeiboAccessToken());
      token=token.replace(""String_Node_Str"",""String_Node_Str"");
      curlHeader=""String_Node_Str"" + token;
    }
 else     if (session.getAccessToken() != null) {
      curlHeader=""String_Node_Str"" + session.getAccessToken().mAccessToken;
    }
  }
  HttpUriRequest req=null;
  if (method == RequestMethod.GET) {
    req=new HttpGet(target);
    if (range > 0 && md5 != null) {
      req.setHeader(""String_Node_Str"",""String_Node_Str"" + range + ""String_Node_Str"");
      req.setHeader(""String_Node_Str"",""String_Node_Str"" + md5 + ""String_Node_Str"");
    }
    if (Logger.DEBUG_MODE) {
      Log.i(TAG,""String_Node_Str"" + curlHeader + ""String_Node_Str""+ target+ ""String_Node_Str"");
      Logger.writeHeader(session.getContext());
      Logger.writeToFile(""String_Node_Str"" + curlHeader + ""String_Node_Str""+ target+ ""String_Node_Str"");
    }
  }
 else {
    HttpPost post=new HttpPost(target);
    if (params != null && params.length >= 2) {
      if (params.length % 2 != 0) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      ArrayList<NameValuePair> nvps=new ArrayList<NameValuePair>();
      StringBuilder postParams=new StringBuilder();
      for (int i=0; i < params.length; i+=2) {
        if (params[i + 1] != null) {
          nvps.add(new BasicNameValuePair(params[i],params[i + 1]));
          postParams.append(params[i]).append(""String_Node_Str"").append(params[i + 1]).append(""String_Node_Str"");
        }
      }
      if (Logger.DEBUG_MODE) {
        Log.i(TAG,""String_Node_Str"" + postParams.toString());
        Log.i(TAG,""String_Node_Str"" + curlHeader + ""String_Node_Str""+ postParams.toString()+ ""String_Node_Str""+ target+ ""String_Node_Str"");
        Logger.writeHeader(session.getContext());
        Logger.writeToFile(""String_Node_Str"" + curlHeader + ""String_Node_Str""+ postParams.toString()+ ""String_Node_Str""+ target+ ""String_Node_Str"");
      }
      try {
        post.setEntity(new UrlEncodedFormEntity(nvps,HTTP.UTF_8));
      }
 catch (      UnsupportedEncodingException e) {
        throw new VDiskException(e);
      }
    }
    req=post;
  }
  if (needSign) {
    session.sign(req);
  }
  Log.i(TAG,""String_Node_Str"" + target);
  HttpResponse resp=null;
  if (socketTimeoutOverrideMs >= 0) {
    resp=execute(session,req,socketTimeoutOverrideMs);
  }
 else {
    resp=execute(session,req);
  }
  return new RequestAndResponse(req,resp);
}","static public RequestAndResponse streamRequestAndResponse(RequestMethod method,Session session,String target,String params[],long range,String md5,boolean needSign,int socketTimeoutOverrideMs) throws VDiskException {
  return streamRequestAndResponse(method,session,target,params,range,md5,needSign,socketTimeoutOverrideMs,false);
}",0.1632524424834541
162133,"/** 
 * Creates a URL for a request to the VDisk API.
 * @param host the VDisk host (i.e., api server, content server, or web server).
 * @param apiVersion the API version to use. You should almost always use {@code VDiskAPI.VERSION} for this.
 * @param target the target path, staring with a '/'.
 * @param params any URL params in an array, with the even numbered elements the parameter names and odd numbered elements the values, e.g. <code>new String[] {""path"", ""/Public"", ""locale"", ""en""}</code>.
 * @return a full URL for making a request.
 */
public static String buildURL(String host,int apiVersion,String target,String[] params){
  if (!target.startsWith(""String_Node_Str"")) {
    target=""String_Node_Str"" + target;
  }
  try {
    target=URLEncoder.encode(""String_Node_Str"" + apiVersion + target,""String_Node_Str"");
    target=target.replace(""String_Node_Str"",""String_Node_Str"");
    if (params != null && params.length > 0) {
      target+=""String_Node_Str"" + urlencode(params);
    }
    target=target.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException uce) {
    return null;
  }
  if (!AbstractSession.NEED_HTTPS_UPLOAD) {
    return ""String_Node_Str"" + host + target;
  }
  return ""String_Node_Str"" + host + ""String_Node_Str""+ target;
}","/** 
 * Creates a URL for a request to the VDisk API.
 * @param host the VDisk host (i.e., api server, content server, or web server).
 * @param apiVersion the API version to use. You should almost always use {@code VDiskAPI.VERSION} for this.
 * @param target the target path, staring with a '/'.
 * @param params any URL params in an array, with the even numbered elements the parameter names and odd numbered elements the values, e.g. <code>new String[] {""path"", ""/Public"", ""locale"", ""en""}</code>.
 * @return a full URL for making a request.
 */
public static String buildURL(String host,int apiVersion,String target,String[] params){
  if (!target.startsWith(""String_Node_Str"")) {
    target=""String_Node_Str"" + target;
  }
  try {
    if (apiVersion >= 1) {
      target=URLEncoder.encode(""String_Node_Str"" + apiVersion + target,""String_Node_Str"");
    }
 else {
      target=URLEncoder.encode(target,""String_Node_Str"");
    }
    target=target.replace(""String_Node_Str"",""String_Node_Str"");
    if (params != null && params.length > 0) {
      target+=""String_Node_Str"" + urlencode(params);
    }
    target=target.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException uce) {
    return null;
  }
  if (!AbstractSession.NEED_HTTPS_UPLOAD) {
    return ""String_Node_Str"" + host + target;
  }
  return ""String_Node_Str"" + host + ""String_Node_Str""+ target;
}",0.9614136314460872
162134,"/** 
 * Downloads a file from VDisk. Returns a   {@link VDiskInputStream} via whichthe file contents can be read from the network. You must close the stream when you're done with it to release all resources. You can also cancel the download by closing the returned {@link VDiskInputStream} at any time.
 * @param path the VDisk path to the file.
 * @param rev the revision (from the file's metadata) of the file to download, or null to get the latest version.
 * @return a {@link VDiskInputStream} from which to read the file contents.The contents are retrieved from the network and not stored locally.
 * @throws VDiskUnlinkedException if you have not set an access token pair on the session, or if the user has revoked access.
 * @throws VDiskServerException if the server responds with an error code. See the constants in  {@link VDiskServerException} for the meaning of each errorcode. The most common error codes you can expect from this call are 404 (path not found) and 400 (bad rev).
 * @throws VDiskIOException if any network-related error occurs.
 * @throws VDiskException for any other unknown errors. This is also a superclass of all other VDisk exceptions, so you may want to only catch this exception which signals that some kind of error occurred.
 */
public VDiskInputStream getFileStream(String path,String rev,File targetFile) throws VDiskException {
  VDiskFileInfo fileInfo=getVDiskFileInfo(path,rev);
  if (fileInfo != null) {
    Entry metadata=fileInfo.metadata;
    String location=fileInfo.downloadURL;
    Log.d(TAG,""String_Node_Str"" + location);
    String filename=targetFile.getName().replace(DOWNLOAD_TEMP_FILE_SUFFIX,""String_Node_Str"");
    File file=new File(targetFile.getParent(),filename);
    if (file.exists() && file.length() == metadata.bytes) {
      targetFile.delete();
      throw new VDiskDownloadFileExistException();
    }
    RequestAndResponse rp=RESTUtility.streamRequestAndResponse(RequestMethod.GET,session,location,null,getRange(targetFile),metadata.md5,false,-1);
    return new VDiskInputStream(rp.request,rp.response,metadata,location);
  }
  return null;
}","/** 
 * Downloads a file from VDisk. Returns a   {@link VDiskInputStream} via whichthe file contents can be read from the network. You must close the stream when you're done with it to release all resources. You can also cancel the download by closing the returned {@link VDiskInputStream} at any time.
 * @param path the VDisk path to the file.
 * @param rev the revision (from the file's metadata) of the file to download, or null to get the latest version.
 * @return a {@link VDiskInputStream} from which to read the file contents.The contents are retrieved from the network and not stored locally.
 * @throws VDiskUnlinkedException if you have not set an access token pair on the session, or if the user has revoked access.
 * @throws VDiskServerException if the server responds with an error code. See the constants in  {@link VDiskServerException} for the meaning of each errorcode. The most common error codes you can expect from this call are 404 (path not found) and 400 (bad rev).
 * @throws VDiskIOException if any network-related error occurs.
 * @throws VDiskException for any other unknown errors. This is also a superclass of all other VDisk exceptions, so you may want to only catch this exception which signals that some kind of error occurred.
 */
public VDiskInputStream getFileStream(String path,String rev,File targetFile) throws VDiskException {
  VDiskFileInfo fileInfo=getVDiskFileInfo(path,rev);
  if (fileInfo != null) {
    Entry metadata=fileInfo.metadata;
    String location=fileInfo.downloadURL;
    Log.d(TAG,""String_Node_Str"" + location);
    String filename=targetFile.getName().replace(DOWNLOAD_TEMP_FILE_SUFFIX,""String_Node_Str"");
    File file=new File(targetFile.getParent(),filename);
    if (file.exists() && file.length() == metadata.bytes) {
      targetFile.delete();
      throw new VDiskDownloadFileExistException();
    }
    RequestAndResponse rp=RESTUtility.streamRequestAndResponse(RequestMethod.GET,session,location,null,getRange(targetFile),metadata.md5,false,-1,true);
    return new VDiskInputStream(rp.request,rp.response,metadata,location);
  }
  return null;
}",0.9988176873965476
162135,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_customize_colors,container,false);
  Bundle args=getArguments();
  if (args != null && args.containsKey(""String_Node_Str"")) {
    atw=(ArrivalTimeWidget)args.getSerializable(""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  setHasOptionsMenu(true);
  getActivity().setTitle(R.string.app_name);
  picker=(ColorPicker)rootView.findViewById(R.id.picker);
  opacityBar=(OpacityBar)rootView.findViewById(R.id.opacitybar);
  svBar=(SVBar)rootView.findViewById(R.id.svbar);
  setBackgroundColorButton=(Button)rootView.findViewById(R.id.bChangeBackgroundColor);
  setTextColorButton=(Button)rootView.findViewById(R.id.bChangeTextColor);
  currentBackgroundColor=(LinearLayout)rootView.findViewById(R.id.llCurrentBackgroundColor);
  currentTextColor=(LinearLayout)rootView.findViewById(R.id.llCurrentTextColor);
  currentBackgroundColor.setBackgroundColor(atw.getBackgroundColor());
  currentTextColor.setBackgroundColor(atw.getTextColor());
  picker.setOldCenterColor(atw.getBackgroundColor());
  picker.setNewCenterColor(atw.getBackgroundColor());
  picker.addSVBar(svBar);
  picker.addOpacityBar(opacityBar);
  picker.setOnColorChangedListener(this);
  setBackgroundColorButton.setOnClickListener(v -> {
    picker.setOldCenterColor(picker.getColor());
    currentBackgroundColor.setBackgroundColor(picker.getColor());
    atw.setBackgroundColor(picker.getColor());
  }
);
  setTextColorButton.setOnClickListener(v -> {
    picker.setOldCenterColor(picker.getColor());
    currentTextColor.setBackgroundColor(picker.getColor());
    atw.setTextColor(picker.getColor());
  }
);
  currentBackgroundColor.setOnClickListener(v -> {
    ColorDrawable d=(ColorDrawable)currentBackgroundColor.getBackground();
    picker.setColor(d.getColor());
  }
);
  currentTextColor.setOnClickListener(v -> {
    ColorDrawable d=(ColorDrawable)currentTextColor.getBackground();
    picker.setColor(d.getColor());
  }
);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_customize_colors,container,false);
  Bundle args=getArguments();
  if (args != null && args.containsKey(""String_Node_Str"")) {
    atw=(ArrivalTimeWidget)args.getSerializable(""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  setHasOptionsMenu(true);
  getActivity().setTitle(R.string.app_name);
  picker=(ColorPicker)rootView.findViewById(R.id.picker);
  opacityBar=(OpacityBar)rootView.findViewById(R.id.opacitybar);
  svBar=(SVBar)rootView.findViewById(R.id.svbar);
  setBackgroundColorButton=(Button)rootView.findViewById(R.id.bChangeBackgroundColor);
  setTextColorButton=(Button)rootView.findViewById(R.id.bChangeTextColor);
  currentBackgroundColor=(LinearLayout)rootView.findViewById(R.id.llCurrentBackgroundColor);
  currentTextColor=(LinearLayout)rootView.findViewById(R.id.llCurrentTextColor);
  currentBackgroundColor.setBackgroundColor(atw.getBackgroundColor());
  currentTextColor.setBackgroundColor(atw.getTextColor());
  picker.setColor(atw.getBackgroundColor());
  picker.setOldCenterColor(atw.getBackgroundColor());
  picker.addSVBar(svBar);
  picker.addOpacityBar(opacityBar);
  picker.setOnColorChangedListener(this);
  setBackgroundColorButton.setOnClickListener(v -> {
    picker.setOldCenterColor(picker.getColor());
    currentBackgroundColor.setBackgroundColor(picker.getColor());
    atw.setBackgroundColor(picker.getColor());
  }
);
  setTextColorButton.setOnClickListener(v -> {
    picker.setOldCenterColor(picker.getColor());
    currentTextColor.setBackgroundColor(picker.getColor());
    atw.setTextColor(picker.getColor());
  }
);
  currentBackgroundColor.setOnClickListener(v -> {
    ColorDrawable d=(ColorDrawable)currentBackgroundColor.getBackground();
    picker.setColor(d.getColor());
  }
);
  currentTextColor.setOnClickListener(v -> {
    ColorDrawable d=(ColorDrawable)currentTextColor.getBackground();
    picker.setColor(d.getColor());
  }
);
  return rootView;
}",0.976568047337278
162136,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_add_agency,container,false);
  setHasOptionsMenu(true);
  getActivity().setTitle(""String_Node_Str"");
  agencyListView=(ListView)rootView.findViewById(R.id.lvAgencyList);
  progressBar=(ProgressBar)getActivity().findViewById(R.id.pbLoading);
  agencyListView.setVisibility(View.INVISIBLE);
  progressBar.setVisibility(View.VISIBLE);
  TransLocClient client=ServiceGenerator.createService(TransLocClient.class,Utils.BASE_URL,TRANSLOC_API_KEY,null,AGENCY);
  client.agencies().observeOn(AndroidSchedulers.mainThread()).subscribe(this::populateAgencyListView,e -> {
    handleServiceErrors(getActivity(),AGENCY,e,progressBar);
  }
);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_add_agency,container,false);
  setHasOptionsMenu(true);
  getActivity().setTitle(""String_Node_Str"");
  agencyListView=(ListView)rootView.findViewById(R.id.lvAgencyList);
  progressBar=(ProgressBar)getActivity().findViewById(R.id.pbLoading);
  agencyListView.setVisibility(View.INVISIBLE);
  progressBar.setVisibility(View.VISIBLE);
  TransLocClient client=ServiceGenerator.createService(TransLocClient.class,Utils.BASE_URL,TRANSLOC_API_KEY,null,AGENCY);
  agenciesSub=client.agencies().observeOn(AndroidSchedulers.mainThread()).subscribe(this::populateAgencyListView,e -> {
    handleServiceErrors(getActivity(),AGENCY,e,progressBar);
  }
);
  return rootView;
}",0.9926289926289926
162137,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_add_route,container,false);
  Bundle args=getArguments();
  if (args != null && args.containsKey(""String_Node_Str"")) {
    atw=(ArrivalTimeWidget)args.getSerializable(""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  setHasOptionsMenu(true);
  getActivity().setTitle(""String_Node_Str"");
  routeListView=(ListView)rootView.findViewById(R.id.lvRouteList);
  progressBar=(ProgressBar)getActivity().findViewById(R.id.pbLoading);
  progressBar.setVisibility(View.VISIBLE);
  TransLocClient client=ServiceGenerator.createService(TransLocClient.class,Utils.BASE_URL,TRANSLOC_API_KEY,atw.getAgencyID(),ROUTE);
  client.routes(atw.getAgencyID()).observeOn(AndroidSchedulers.mainThread()).subscribe(this::populateRoutesListView,e -> handleServiceErrors(getActivity(),ROUTE,e,progressBar));
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_add_route,container,false);
  Bundle args=getArguments();
  if (args != null && args.containsKey(""String_Node_Str"")) {
    atw=(ArrivalTimeWidget)args.getSerializable(""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  setHasOptionsMenu(true);
  getActivity().setTitle(""String_Node_Str"");
  routeListView=(ListView)rootView.findViewById(R.id.lvRouteList);
  progressBar=(ProgressBar)getActivity().findViewById(R.id.pbLoading);
  progressBar.setVisibility(View.VISIBLE);
  TransLocClient client=ServiceGenerator.createService(TransLocClient.class,Utils.BASE_URL,TRANSLOC_API_KEY,atw.getAgencyID(),ROUTE);
  routesSub=client.routes(atw.getAgencyID()).observeOn(AndroidSchedulers.mainThread()).subscribe(this::populateRoutesListView,e -> handleServiceErrors(getActivity(),ROUTE,e,progressBar));
  return rootView;
}",0.9950347567030784
162138,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_add_stop,container,false);
  Bundle args=getArguments();
  if (args != null && args.containsKey(""String_Node_Str"")) {
    atw=(ArrivalTimeWidget)args.getSerializable(""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  setHasOptionsMenu(true);
  getActivity().setTitle(""String_Node_Str"");
  stopListView=(ListView)rootView.findViewById(R.id.lvStopList);
  progressBar=(ProgressBar)getActivity().findViewById(R.id.pbLoading);
  progressBar.setVisibility(View.VISIBLE);
  TransLocClient client=ServiceGenerator.createService(TransLocClient.class,Utils.BASE_URL,TRANSLOC_API_KEY,atw.getAgencyID(),STOP);
  client.stops(atw.getAgencyID()).observeOn(AndroidSchedulers.mainThread()).subscribe(this::populateStopsListView,e -> handleServiceErrors(getActivity(),STOP,e,progressBar));
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_add_stop,container,false);
  Bundle args=getArguments();
  if (args != null && args.containsKey(""String_Node_Str"")) {
    atw=(ArrivalTimeWidget)args.getSerializable(""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  setHasOptionsMenu(true);
  getActivity().setTitle(""String_Node_Str"");
  stopListView=(ListView)rootView.findViewById(R.id.lvStopList);
  progressBar=(ProgressBar)getActivity().findViewById(R.id.pbLoading);
  progressBar.setVisibility(View.VISIBLE);
  TransLocClient client=ServiceGenerator.createService(TransLocClient.class,Utils.BASE_URL,TRANSLOC_API_KEY,atw.getAgencyID(),STOP);
  stopsSub=client.stops(atw.getAgencyID()).observeOn(AndroidSchedulers.mainThread()).subscribe(this::populateStopsListView,e -> handleServiceErrors(getActivity(),STOP,e,progressBar));
  return rootView;
}",0.9954977488744372
162139,"@Override public void onFragmentInteraction(String id){
  Toast.makeText(getApplicationContext(),id,Toast.LENGTH_LONG).show();
}","@Override public void onFragmentInteraction(ArrivalTimeWidget atw){
  Log.d(TAG,""String_Node_Str"");
  TransLocClient client=ServiceGenerator.createService(TransLocClient.class,Utils.BASE_URL,getString(R.string.mashape_key),atw.getAgencyID(),ARRIVAL);
  client.arrivalEstimates(atw.getAgencyID(),atw.getRouteID(),atw.getStopID()).observeOn(AndroidSchedulers.mainThread()).subscribe(this::createWidget,e -> Log.e(TAG,""String_Node_Str"",e));
}",0.2116402116402116
162140,"@Override public void onFragmentInteraction(String id){
  Toast.makeText(getApplicationContext(),""String_Node_Str"" + id,Toast.LENGTH_LONG).show();
}","@Override public void onFragmentInteraction(ArrivalTimeWidget widget){
  Toast.makeText(getApplicationContext(),""String_Node_Str"" + widget.toString(),Toast.LENGTH_LONG).show();
}",0.8773006134969326
162141,"@Override public void onListItemClick(ListView l,View v,int position,long id){
  super.onListItemClick(l,v,position,id);
  if (null != mListener) {
    ArrivalTimeWidget widget=(ArrivalTimeWidget)l.getItemAtPosition(position);
    if (widget == null)     throw new IllegalStateException();
 else {
      Log.d(TAG,widget.toString());
      mListener.onFragmentInteraction(widget.getArrivalTimesUrl());
    }
  }
}","@Override public void onListItemClick(ListView l,View v,int position,long id){
  super.onListItemClick(l,v,position,id);
  if (null != mListener) {
    ArrivalTimeWidget widget=(ArrivalTimeWidget)l.getItemAtPosition(position);
    if (widget == null)     throw new IllegalStateException();
 else {
      Log.d(TAG,widget.toString());
      mListener.onFragmentInteraction(widget);
    }
  }
}",0.9739130434782608
162142,public void onFragmentInteraction(String id);,public void onFragmentInteraction(ArrivalTimeWidget widget);,0.7619047619047619
162143,"public T read(JsonReader in) throws IOException {
  JsonElement jsonElement=elementAdapter.read(in);
  if (jsonElement.isJsonObject()) {
    JsonObject jsonObject=jsonElement.getAsJsonObject();
    if (jsonObject.has(""String_Node_Str"") && (jsonObject.get(""String_Node_Str"").isJsonArray()) || jsonObject.get(""String_Node_Str"").isJsonArray()) {
switch (dataType) {
case AGENCY:
        Log.d(TAG,""String_Node_Str"");
      jsonElement=jsonObject.get(""String_Node_Str"");
    break;
case ROUTE:
  Log.d(TAG,""String_Node_Str"");
jsonElement=jsonObject.getAsJsonObject(""String_Node_Str"").getAsJsonArray(agencyId);
break;
case STOP:
Log.d(TAG,""String_Node_Str"");
jsonElement=jsonObject.get(""String_Node_Str"");
break;
case ARRIVAL:
Log.d(TAG,""String_Node_Str"");
jsonElement=jsonObject.getAsJsonArray(""String_Node_Str"").getAsJsonObject().getAsJsonArray(""String_Node_Str"");
break;
}
}
}
return delegate.fromJsonTree(jsonElement);
}","public T read(JsonReader in) throws IOException {
  JsonElement jsonElement=elementAdapter.read(in);
  if (jsonElement.isJsonObject()) {
    JsonObject jsonObject=jsonElement.getAsJsonObject();
    if (jsonObject.has(""String_Node_Str"") && (jsonObject.get(""String_Node_Str"").isJsonArray()) || jsonObject.get(""String_Node_Str"").isJsonArray()) {
switch (dataType) {
case AGENCY:
        Log.d(TAG,""String_Node_Str"");
      jsonElement=jsonObject.get(""String_Node_Str"");
    break;
case ROUTE:
  Log.d(TAG,""String_Node_Str"");
jsonElement=jsonObject.getAsJsonObject(""String_Node_Str"").getAsJsonArray(agencyId);
break;
case STOP:
Log.d(TAG,""String_Node_Str"");
jsonElement=jsonObject.get(""String_Node_Str"");
break;
case ARRIVAL:
Log.d(TAG,""String_Node_Str"");
jsonElement=jsonObject.getAsJsonArray(""String_Node_Str"").get(0).getAsJsonObject().getAsJsonArray(""String_Node_Str"");
break;
}
}
 else {
Log.e(TAG,""String_Node_Str"");
}
}
return delegate.fromJsonTree(jsonElement);
}",0.9750663129973476
162144,"public <T>TypeAdapter<T> create(Gson gson,final TypeToken<T> type){
  final TypeAdapter<T> delegate=gson.getDelegateAdapter(this,type);
  final TypeAdapter<JsonElement> elementAdapter=gson.getAdapter(JsonElement.class);
  return new TypeAdapter<T>(){
    public void write(    JsonWriter out,    T value) throws IOException {
      delegate.write(out,value);
    }
    public T read(    JsonReader in) throws IOException {
      JsonElement jsonElement=elementAdapter.read(in);
      if (jsonElement.isJsonObject()) {
        JsonObject jsonObject=jsonElement.getAsJsonObject();
        if (jsonObject.has(""String_Node_Str"") && (jsonObject.get(""String_Node_Str"").isJsonArray()) || jsonObject.get(""String_Node_Str"").isJsonArray()) {
switch (dataType) {
case AGENCY:
            Log.d(TAG,""String_Node_Str"");
          jsonElement=jsonObject.get(""String_Node_Str"");
        break;
case ROUTE:
      Log.d(TAG,""String_Node_Str"");
    jsonElement=jsonObject.getAsJsonObject(""String_Node_Str"").getAsJsonArray(agencyId);
  break;
case STOP:
Log.d(TAG,""String_Node_Str"");
jsonElement=jsonObject.get(""String_Node_Str"");
break;
case ARRIVAL:
Log.d(TAG,""String_Node_Str"");
jsonElement=jsonObject.getAsJsonArray(""String_Node_Str"").getAsJsonObject().getAsJsonArray(""String_Node_Str"");
break;
}
}
}
return delegate.fromJsonTree(jsonElement);
}
}
.nullSafe();
}","public <T>TypeAdapter<T> create(Gson gson,final TypeToken<T> type){
  final TypeAdapter<T> delegate=gson.getDelegateAdapter(this,type);
  final TypeAdapter<JsonElement> elementAdapter=gson.getAdapter(JsonElement.class);
  return new TypeAdapter<T>(){
    public void write(    JsonWriter out,    T value) throws IOException {
      delegate.write(out,value);
    }
    public T read(    JsonReader in) throws IOException {
      JsonElement jsonElement=elementAdapter.read(in);
      if (jsonElement.isJsonObject()) {
        JsonObject jsonObject=jsonElement.getAsJsonObject();
        if (jsonObject.has(""String_Node_Str"") && (jsonObject.get(""String_Node_Str"").isJsonArray()) || jsonObject.get(""String_Node_Str"").isJsonArray()) {
switch (dataType) {
case AGENCY:
            Log.d(TAG,""String_Node_Str"");
          jsonElement=jsonObject.get(""String_Node_Str"");
        break;
case ROUTE:
      Log.d(TAG,""String_Node_Str"");
    jsonElement=jsonObject.getAsJsonObject(""String_Node_Str"").getAsJsonArray(agencyId);
  break;
case STOP:
Log.d(TAG,""String_Node_Str"");
jsonElement=jsonObject.get(""String_Node_Str"");
break;
case ARRIVAL:
Log.d(TAG,""String_Node_Str"");
jsonElement=jsonObject.getAsJsonArray(""String_Node_Str"").get(0).getAsJsonObject().getAsJsonArray(""String_Node_Str"");
break;
}
}
 else {
Log.e(TAG,""String_Node_Str"");
}
}
return delegate.fromJsonTree(jsonElement);
}
}
.nullSafe();
}",0.9828529733673842
162145,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.v(TAG,""String_Node_Str"");
  setContentView(R.layout.activity_configuration);
  sSelectAgency=(Button)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Button)findViewById(R.id.sSelectRoute);
  sSelectStop=(Button)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  progressBar=(ProgressBar)findViewById(R.id.progressBar);
  rlPreview=(RelativeLayout)findViewById(R.id.rlPreview);
  tvMinsPreview=(TextView)findViewById(R.id.tvMins_preview);
  tvRemainingTimePreview=(TextView)findViewById(R.id.tvRemainingTime_preview);
  tvRoutePreview=(TextView)findViewById(R.id.tvRoute_preview);
  tvStopPreview=(TextView)findViewById(R.id.tvStop_preview);
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  setResult(RESULT_CANCELED);
  DateTime currentTime=new DateTime(System.currentTimeMillis());
  Log.v(TAG,""String_Node_Str"" + currentTime.getDayOfWeek());
  Log.v(TAG,""String_Node_Str"" + currentTime.getHourOfDay());
  if (currentTime.getDayOfWeek() > 5 || currentTime.getHourOfDay() > 18 || currentTime.getHourOfDay() < 6) {
    Log.v(TAG,""String_Node_Str"");
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
  new PopulateAgenciesTask().execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset(0);
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  OnClickListener setPreviewClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(WidgetConfigurationActivity.this,CustomizeWidgetActivity.class);
      intent.putExtra(""String_Node_Str"",mAppWidgetId);
      startActivity(intent);
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
  rlPreview.setOnClickListener(setPreviewClickedListener);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.v(TAG,""String_Node_Str"");
  setContentView(R.layout.activity_configuration);
  sSelectAgency=(Button)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Button)findViewById(R.id.sSelectRoute);
  sSelectStop=(Button)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  progressBar=(ProgressBar)findViewById(R.id.progressBar);
  rlPreview=(RelativeLayout)findViewById(R.id.rlPreview);
  tvMinsPreview=(TextView)findViewById(R.id.tvMins_preview);
  tvRemainingTimePreview=(TextView)findViewById(R.id.tvRemainingTime_preview);
  tvRoutePreview=(TextView)findViewById(R.id.tvRoute_preview);
  tvStopPreview=(TextView)findViewById(R.id.tvStop_preview);
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  setResult(RESULT_CANCELED);
  DateTime currentTime=new DateTime(System.currentTimeMillis());
  if (currentTime.getDayOfWeek() > 5 || currentTime.getHourOfDay() > 18 || currentTime.getHourOfDay() < 6) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
  new PopulateAgenciesTask().execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset(0);
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  OnClickListener setPreviewClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(WidgetConfigurationActivity.this,CustomizeWidgetActivity.class);
      intent.putExtra(""String_Node_Str"",mAppWidgetId);
      startActivity(intent);
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
  rlPreview.setOnClickListener(setPreviewClickedListener);
}",0.9661332340900632
162146,"@Override public void onClick(DialogInterface dialog,int pos){
  currentStopId=currentRouteStopList.get(pos).stopId;
  stopName=currentRouteStopList.get(pos).name;
  sSelectStop.setText(stopName);
  bMakeWidget.setEnabled(true);
  Log.v(""String_Node_Str"",""String_Node_Str"");
  dialog.dismiss();
}","@Override public void onClick(DialogInterface dialog,int pos){
  currentStopId=currentRouteStopList.get(pos).stopId;
  stopName=currentRouteStopList.get(pos).name;
  sSelectStop.setText(stopName);
  bMakeWidget.setEnabled(true);
  dialog.dismiss();
}",0.9157509157509156
162147,"@Override protected void onPause(){
  super.onPause();
  if (dialog != null)   dialog.dismiss();
  dialog=null;
}","@Override protected void onPause(){
  super.onPause();
}",0.6627218934911243
162148,"@Override protected void onResume(){
  super.onResume();
  int textColor=settings.getInt(""String_Node_Str"",-1);
  int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
  editor.putInt(""String_Node_Str"" + mAppWidgetId,textColor).commit();
  editor.putInt(""String_Node_Str"" + mAppWidgetId,backgroundColor).commit();
  Log.v(TAG,Integer.toString(settings.getInt(""String_Node_Str"" + mAppWidgetId,-2)));
  Log.v(TAG,Integer.toString(settings.getInt(""String_Node_Str"" + mAppWidgetId,-2)));
  rlPreview.setBackgroundColor(backgroundColor);
  tvStopPreview.setTextColor(textColor);
  tvRoutePreview.setTextColor(textColor);
  tvRemainingTimePreview.setTextColor(textColor);
  tvMinsPreview.setTextColor(textColor);
}","@Override protected void onResume(){
  super.onResume();
  int textColor=settings.getInt(""String_Node_Str"",-1);
  int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
  editor.putInt(""String_Node_Str"" + mAppWidgetId,textColor).commit();
  editor.putInt(""String_Node_Str"" + mAppWidgetId,backgroundColor).commit();
  rlPreview.setBackgroundColor(backgroundColor);
  tvStopPreview.setTextColor(textColor);
  tvRoutePreview.setTextColor(textColor);
  tvRemainingTimePreview.setTextColor(textColor);
  tvMinsPreview.setTextColor(textColor);
}",0.8663522012578616
162149,"private void doErrorMiscHandling(){
  bMakeWidget.setEnabled(false);
  if (dialog != null) {
    dialog.dismiss();
    dialog=null;
  }
}","private void doErrorMiscHandling(){
  bMakeWidget.setEnabled(false);
}",0.6763285024154589
162150,"@Override public void onClick(DialogInterface dialog,int pos){
  currentStopId=currentRouteStopList.get(pos).stopId;
  stopName=currentRouteStopList.get(pos).name;
  sSelectStop.setText(stopName);
  bMakeWidget.setEnabled(true);
  dialog.dismiss();
}","@Override public void onClick(DialogInterface dialog,int pos){
  currentStopId=currentRouteStopList.get(pos).stopId;
  stopName=currentRouteStopList.get(pos).name;
  sSelectStop.setText(stopName);
  bMakeWidget.setEnabled(true);
  Log.v(""String_Node_Str"",""String_Node_Str"");
  dialog.dismiss();
}",0.9157509157509156
162151,"private void doReset(int type){
  if (type <= 2) {
    sSelectStop.setText(R.string.select_stop);
    currentStopId=-1;
    stopName=null;
    sSelectStop.setEnabled(false);
  }
  if (type <= 1) {
    sSelectRoute.setText(R.string.select_route);
    currentRouteId=-1;
    routeShortName=null;
    routeLongName=null;
    sSelectRoute.setEnabled(false);
  }
  if (type == 0) {
    sSelectAgency.setText(R.string.select_agency);
    currentAgencyId=-1;
    bMakeWidget.setEnabled(false);
    new PopulateAgenciesTask().execute();
  }
}","private void doReset(int type){
  if (type <= 2) {
    sSelectStop.setText(R.string.select_stop);
    currentStopId=-1;
    stopName=null;
    sSelectStop.setEnabled(false);
    bMakeWidget.setEnabled(false);
  }
  if (type <= 1) {
    sSelectRoute.setText(R.string.select_route);
    currentRouteId=-1;
    routeShortName=null;
    routeLongName=null;
    sSelectRoute.setEnabled(false);
    bMakeWidget.setEnabled(false);
  }
  if (type == 0) {
    sSelectAgency.setText(R.string.select_agency);
    currentAgencyId=-1;
    bMakeWidget.setEnabled(false);
    new PopulateAgenciesTask().execute();
  }
}",0.938488576449912
162152,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.v(TAG,""String_Node_Str"");
  setContentView(R.layout.activity_configuration);
  sSelectAgency=(Button)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Button)findViewById(R.id.sSelectRoute);
  sSelectStop=(Button)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  rlPreview=(RelativeLayout)findViewById(R.id.rlPreview);
  tvMinsPreview=(TextView)findViewById(R.id.tvMins_preview);
  tvRemainingTimePreview=(TextView)findViewById(R.id.tvRemainingTime_preview);
  tvRoutePreview=(TextView)findViewById(R.id.tvRoute_preview);
  tvStopPreview=(TextView)findViewById(R.id.tvStop_preview);
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  setResult(RESULT_CANCELED);
  DateTime currentTime=new DateTime(System.currentTimeMillis());
  Log.v(TAG,""String_Node_Str"" + currentTime.getDayOfWeek());
  Log.v(TAG,""String_Node_Str"" + currentTime.getHourOfDay());
  if (currentTime.getDayOfWeek() > 5 || currentTime.getHourOfDay() > 18 || currentTime.getHourOfDay() < 6) {
    Log.v(TAG,""String_Node_Str"");
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
  new PopulateAgenciesTask().execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset();
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  OnClickListener setPreviewClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(WidgetConfigurationActivity.this,CustomizeWidgetActivity.class);
      intent.putExtra(""String_Node_Str"",mAppWidgetId);
      startActivity(intent);
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
  rlPreview.setOnClickListener(setPreviewClickedListener);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.v(TAG,""String_Node_Str"");
  setContentView(R.layout.activity_configuration);
  sSelectAgency=(Button)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Button)findViewById(R.id.sSelectRoute);
  sSelectStop=(Button)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  rlPreview=(RelativeLayout)findViewById(R.id.rlPreview);
  tvMinsPreview=(TextView)findViewById(R.id.tvMins_preview);
  tvRemainingTimePreview=(TextView)findViewById(R.id.tvRemainingTime_preview);
  tvRoutePreview=(TextView)findViewById(R.id.tvRoute_preview);
  tvStopPreview=(TextView)findViewById(R.id.tvStop_preview);
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  setResult(RESULT_CANCELED);
  DateTime currentTime=new DateTime(System.currentTimeMillis());
  Log.v(TAG,""String_Node_Str"" + currentTime.getDayOfWeek());
  Log.v(TAG,""String_Node_Str"" + currentTime.getHourOfDay());
  if (currentTime.getDayOfWeek() > 5 || currentTime.getHourOfDay() > 18 || currentTime.getHourOfDay() < 6) {
    Log.v(TAG,""String_Node_Str"");
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
  new PopulateAgenciesTask().execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset(0);
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  OnClickListener setPreviewClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(WidgetConfigurationActivity.this,CustomizeWidgetActivity.class);
      intent.putExtra(""String_Node_Str"",mAppWidgetId);
      startActivity(intent);
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
  rlPreview.setOnClickListener(setPreviewClickedListener);
}",0.9998151912770282
162153,"private void doReset(){
  new PopulateAgenciesTask().execute();
}","private void doReset(int type){
  if (type <= 2) {
    sSelectStop.setText(R.string.select_stop);
    currentStopId=-1;
    stopName=null;
    sSelectStop.setEnabled(false);
  }
  if (type <= 1) {
    sSelectRoute.setText(R.string.select_route);
    currentRouteId=-1;
    routeShortName=null;
    routeLongName=null;
    sSelectRoute.setEnabled(false);
  }
  if (type == 0) {
    sSelectAgency.setText(R.string.select_agency);
    currentAgencyId=-1;
    bMakeWidget.setEnabled(false);
    new PopulateAgenciesTask().execute();
  }
}",0.2170283806343906
162154,"@Override public void onClick(DialogInterface dialog,int pos){
  currentStopId=currentRouteStopList.get(pos).stopId;
  stopName=currentRouteStopList.get(pos).name;
  sSelectStop.setText(stopName);
  bMakeWidget.setEnabled(true);
  dialog.dismiss();
}","@Override public void onClick(DialogInterface dialog,int pos){
  currentStopId=currentRouteStopList.get(pos).stopId;
  stopName=currentRouteStopList.get(pos).name;
  sSelectStop.setText(stopName);
  bMakeWidget.setEnabled(true);
  Log.v(""String_Node_Str"",""String_Node_Str"");
  dialog.dismiss();
}",0.9157509157509156
162155,"private void doReset(int type){
  if (type <= 2) {
    sSelectStop.setText(R.string.select_stop);
    currentStopId=-1;
    stopName=null;
    sSelectStop.setEnabled(false);
  }
  if (type <= 1) {
    sSelectRoute.setText(R.string.select_route);
    currentRouteId=-1;
    routeShortName=null;
    routeLongName=null;
    sSelectRoute.setEnabled(false);
  }
  if (type == 0) {
    sSelectAgency.setText(R.string.select_agency);
    currentAgencyId=-1;
    bMakeWidget.setEnabled(false);
    new PopulateAgenciesTask().execute();
  }
}","private void doReset(int type){
  if (type <= 2) {
    sSelectStop.setText(R.string.select_stop);
    currentStopId=-1;
    stopName=null;
    sSelectStop.setEnabled(false);
    bMakeWidget.setEnabled(false);
  }
  if (type <= 1) {
    sSelectRoute.setText(R.string.select_route);
    currentRouteId=-1;
    routeShortName=null;
    routeLongName=null;
    sSelectRoute.setEnabled(false);
    bMakeWidget.setEnabled(false);
  }
  if (type == 0) {
    sSelectAgency.setText(R.string.select_agency);
    currentAgencyId=-1;
    bMakeWidget.setEnabled(false);
    new PopulateAgenciesTask().execute();
  }
}",0.938488576449912
162156,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.v(TAG,""String_Node_Str"");
  setContentView(R.layout.activity_configuration);
  sSelectAgency=(Button)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Button)findViewById(R.id.sSelectRoute);
  sSelectStop=(Button)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  progressBar=(ProgressBar)findViewById(R.id.progressBar);
  rlPreview=(RelativeLayout)findViewById(R.id.rlPreview);
  tvMinsPreview=(TextView)findViewById(R.id.tvMins_preview);
  tvRemainingTimePreview=(TextView)findViewById(R.id.tvRemainingTime_preview);
  tvRoutePreview=(TextView)findViewById(R.id.tvRoute_preview);
  tvStopPreview=(TextView)findViewById(R.id.tvStop_preview);
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  setResult(RESULT_CANCELED);
  DateTime currentTime=new DateTime(System.currentTimeMillis());
  Log.v(TAG,""String_Node_Str"" + currentTime.getDayOfWeek());
  Log.v(TAG,""String_Node_Str"" + currentTime.getHourOfDay());
  if (currentTime.getDayOfWeek() > 5 || currentTime.getHourOfDay() > 18 || currentTime.getHourOfDay() < 6) {
    Log.v(TAG,""String_Node_Str"");
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
  new PopulateAgenciesTask().execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset(0);
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  OnClickListener setPreviewClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(WidgetConfigurationActivity.this,CustomizeWidgetActivity.class);
      intent.putExtra(""String_Node_Str"",mAppWidgetId);
      startActivity(intent);
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
  rlPreview.setOnClickListener(setPreviewClickedListener);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.v(TAG,""String_Node_Str"");
  setContentView(R.layout.activity_configuration);
  sSelectAgency=(Button)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Button)findViewById(R.id.sSelectRoute);
  sSelectStop=(Button)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  progressBar=(ProgressBar)findViewById(R.id.progressBar);
  rlPreview=(RelativeLayout)findViewById(R.id.rlPreview);
  tvMinsPreview=(TextView)findViewById(R.id.tvMins_preview);
  tvRemainingTimePreview=(TextView)findViewById(R.id.tvRemainingTime_preview);
  tvRoutePreview=(TextView)findViewById(R.id.tvRoute_preview);
  tvStopPreview=(TextView)findViewById(R.id.tvStop_preview);
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  setResult(RESULT_CANCELED);
  DateTime currentTime=new DateTime(System.currentTimeMillis());
  if (currentTime.getDayOfWeek() > 5 || currentTime.getHourOfDay() > 18 || currentTime.getHourOfDay() < 6) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
  new PopulateAgenciesTask().execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset(0);
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  OnClickListener setPreviewClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(WidgetConfigurationActivity.this,CustomizeWidgetActivity.class);
      intent.putExtra(""String_Node_Str"",mAppWidgetId);
      startActivity(intent);
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
  rlPreview.setOnClickListener(setPreviewClickedListener);
}",0.9661332340900632
162157,"@Override public void onClick(DialogInterface dialog,int pos){
  currentStopId=currentRouteStopList.get(pos).stopId;
  stopName=currentRouteStopList.get(pos).name;
  sSelectStop.setText(stopName);
  bMakeWidget.setEnabled(true);
  Log.v(""String_Node_Str"",""String_Node_Str"");
  dialog.dismiss();
}","@Override public void onClick(DialogInterface dialog,int pos){
  currentStopId=currentRouteStopList.get(pos).stopId;
  stopName=currentRouteStopList.get(pos).name;
  sSelectStop.setText(stopName);
  bMakeWidget.setEnabled(true);
  dialog.dismiss();
}",0.9157509157509156
162158,"@Override protected void onPause(){
  super.onPause();
  if (dialog != null)   dialog.dismiss();
  dialog=null;
}","@Override protected void onPause(){
  super.onPause();
}",0.6627218934911243
162159,"@Override protected void onResume(){
  super.onResume();
  int textColor=settings.getInt(""String_Node_Str"",-1);
  int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
  editor.putInt(""String_Node_Str"" + mAppWidgetId,textColor).commit();
  editor.putInt(""String_Node_Str"" + mAppWidgetId,backgroundColor).commit();
  Log.v(TAG,Integer.toString(settings.getInt(""String_Node_Str"" + mAppWidgetId,-2)));
  Log.v(TAG,Integer.toString(settings.getInt(""String_Node_Str"" + mAppWidgetId,-2)));
  rlPreview.setBackgroundColor(backgroundColor);
  tvStopPreview.setTextColor(textColor);
  tvRoutePreview.setTextColor(textColor);
  tvRemainingTimePreview.setTextColor(textColor);
  tvMinsPreview.setTextColor(textColor);
}","@Override protected void onResume(){
  super.onResume();
  int textColor=settings.getInt(""String_Node_Str"",-1);
  int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
  editor.putInt(""String_Node_Str"" + mAppWidgetId,textColor).commit();
  editor.putInt(""String_Node_Str"" + mAppWidgetId,backgroundColor).commit();
  rlPreview.setBackgroundColor(backgroundColor);
  tvStopPreview.setTextColor(textColor);
  tvRoutePreview.setTextColor(textColor);
  tvRemainingTimePreview.setTextColor(textColor);
  tvMinsPreview.setTextColor(textColor);
}",0.8663522012578616
162160,"private void doErrorMiscHandling(){
  bMakeWidget.setEnabled(false);
  if (dialog != null) {
    dialog.dismiss();
    dialog=null;
  }
}","private void doErrorMiscHandling(){
  bMakeWidget.setEnabled(false);
}",0.6763285024154589
162161,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.v(TAG,""String_Node_Str"");
  setContentView(R.layout.activity_configuration);
  sSelectAgency=(Button)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Button)findViewById(R.id.sSelectRoute);
  sSelectStop=(Button)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  rlPreview=(RelativeLayout)findViewById(R.id.rlPreview);
  tvMinsPreview=(TextView)findViewById(R.id.tvMins_preview);
  tvRemainingTimePreview=(TextView)findViewById(R.id.tvRemainingTime_preview);
  tvRoutePreview=(TextView)findViewById(R.id.tvRoute_preview);
  tvStopPreview=(TextView)findViewById(R.id.tvStop_preview);
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  setResult(RESULT_CANCELED);
  DateTime currentTime=new DateTime(System.currentTimeMillis());
  Log.v(TAG,""String_Node_Str"" + currentTime.getDayOfWeek());
  Log.v(TAG,""String_Node_Str"" + currentTime.getHourOfDay());
  if (currentTime.getDayOfWeek() > 5 || currentTime.getHourOfDay() > 18 || currentTime.getHourOfDay() < 6) {
    Log.v(TAG,""String_Node_Str"");
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
  new PopulateAgenciesTask().execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset();
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  OnClickListener setPreviewClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(WidgetConfigurationActivity.this,CustomizeWidgetActivity.class);
      intent.putExtra(""String_Node_Str"",mAppWidgetId);
      startActivity(intent);
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
  rlPreview.setOnClickListener(setPreviewClickedListener);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.v(TAG,""String_Node_Str"");
  setContentView(R.layout.activity_configuration);
  sSelectAgency=(Button)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Button)findViewById(R.id.sSelectRoute);
  sSelectStop=(Button)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  rlPreview=(RelativeLayout)findViewById(R.id.rlPreview);
  tvMinsPreview=(TextView)findViewById(R.id.tvMins_preview);
  tvRemainingTimePreview=(TextView)findViewById(R.id.tvRemainingTime_preview);
  tvRoutePreview=(TextView)findViewById(R.id.tvRoute_preview);
  tvStopPreview=(TextView)findViewById(R.id.tvStop_preview);
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  setResult(RESULT_CANCELED);
  DateTime currentTime=new DateTime(System.currentTimeMillis());
  Log.v(TAG,""String_Node_Str"" + currentTime.getDayOfWeek());
  Log.v(TAG,""String_Node_Str"" + currentTime.getHourOfDay());
  if (currentTime.getDayOfWeek() > 5 || currentTime.getHourOfDay() > 18 || currentTime.getHourOfDay() < 6) {
    Log.v(TAG,""String_Node_Str"");
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
  new PopulateAgenciesTask().execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset(0);
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  OnClickListener setPreviewClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(WidgetConfigurationActivity.this,CustomizeWidgetActivity.class);
      intent.putExtra(""String_Node_Str"",mAppWidgetId);
      startActivity(intent);
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
  rlPreview.setOnClickListener(setPreviewClickedListener);
}",0.9998151912770282
162162,"private void doReset(){
  new PopulateAgenciesTask().execute();
}","private void doReset(int type){
  if (type <= 2) {
    sSelectStop.setText(R.string.select_stop);
    currentStopId=-1;
    stopName=null;
    sSelectStop.setEnabled(false);
  }
  if (type <= 1) {
    sSelectRoute.setText(R.string.select_route);
    currentRouteId=-1;
    routeShortName=null;
    routeLongName=null;
    sSelectRoute.setEnabled(false);
  }
  if (type == 0) {
    sSelectAgency.setText(R.string.select_agency);
    currentAgencyId=-1;
    bMakeWidget.setEnabled(false);
    new PopulateAgenciesTask().execute();
  }
}",0.2170283806343906
162163,"@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null || arrivalEstimatesList.data.isEmpty()) {
    Log.e(TAG,""String_Node_Str"");
    newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (!onReboot)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(TAG,""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    if (minutes < 1) {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
 else     if (minutes == 1) {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
 else {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"" + minutes + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
  }
  String routeName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  String stopName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  newView.setTextViewText(R.id.tvRoute,routeName);
  newView.setTextViewText(R.id.tvStop,stopName);
  Intent clickIntent=new Intent(context,TransLocWidgetProvider.class);
  clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,widgetId);
  PendingIntent pendingIntent=PendingIntent.getBroadcast(context,widgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  newView.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
  int textColor=prefs.getInt(""String_Node_Str"" + widgetId,-1);
  int backgroundColor=prefs.getInt(""String_Node_Str"" + widgetId,-1);
  newView.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
  newView.setTextColor(R.id.tvRemainingTime,textColor);
  newView.setTextColor(R.id.tvMins,textColor);
  newView.setTextColor(R.id.tvRoute,textColor);
  newView.setTextColor(R.id.tvStop,textColor);
  Log.v(TAG,""String_Node_Str"" + widgetId);
  appWidgetManager.updateAppWidget(widgetId,newView);
}","@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null || arrivalEstimatesList.data.isEmpty()) {
    newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (!onReboot)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    if (minutes < 1) {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
 else     if (minutes == 1) {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
 else {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"" + minutes + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
  }
  String routeName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  String stopName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  newView.setTextViewText(R.id.tvRoute,routeName);
  newView.setTextViewText(R.id.tvStop,stopName);
  Intent clickIntent=new Intent(context,TransLocWidgetProvider.class);
  clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,widgetId);
  PendingIntent pendingIntent=PendingIntent.getBroadcast(context,widgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  newView.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
  int textColor=prefs.getInt(""String_Node_Str"" + widgetId,-1);
  int backgroundColor=prefs.getInt(""String_Node_Str"" + widgetId,-1);
  newView.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
  newView.setTextColor(R.id.tvRemainingTime,textColor);
  newView.setTextColor(R.id.tvMins,textColor);
  newView.setTextColor(R.id.tvRoute,textColor);
  newView.setTextColor(R.id.tvStop,textColor);
  Log.v(TAG,""String_Node_Str"" + widgetId);
  appWidgetManager.updateAppWidget(widgetId,newView);
}",0.9737237237237236
162164,"@Override public void onReceive(Context context,Intent intent){
  Log.v(TAG,""String_Node_Str"" + intent.getAction());
  newView=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  appWidgetManager=AppWidgetManager.getInstance(context);
  if (intent.getAction() == null) {
    Log.v(TAG,""String_Node_Str"");
    Bundle extras=intent.getExtras();
    if (extras != null) {
      int receivedWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
      new getJsonResponse(context,receivedWidgetId,false).execute();
    }
  }
 else   if (intent.getAction().equals(""String_Node_Str"")) {
    ComponentName thisAppWidget=new ComponentName(context.getPackageName(),TransLocWidgetProvider.class.getName());
    int[] appWidgetIds=appWidgetManager.getAppWidgetIds(thisAppWidget);
    for (int i=0; i < appWidgetIds.length; i++) {
      Log.v(TAG,""String_Node_Str"" + appWidgetIds[i]);
      new getJsonResponse(context,appWidgetIds[i],true).execute();
    }
  }
 else {
    Log.v(TAG,""String_Node_Str"");
  }
}","@Override public void onReceive(Context context,Intent intent){
  Log.v(TAG,""String_Node_Str"" + intent.getAction());
  newView=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  appWidgetManager=AppWidgetManager.getInstance(context);
  if (intent.getAction() == null) {
    Log.v(TAG,""String_Node_Str"");
    Bundle extras=intent.getExtras();
    if (extras != null) {
      int receivedWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
      new getJsonResponse(context,receivedWidgetId,false).execute();
    }
  }
 else   if (intent.getAction().equals(""String_Node_Str"") || intent.getAction().equals(""String_Node_Str"")) {
    ComponentName thisAppWidget=new ComponentName(context.getPackageName(),TransLocWidgetProvider.class.getName());
    int[] appWidgetIds=appWidgetManager.getAppWidgetIds(thisAppWidget);
    for (int i=0; i < appWidgetIds.length; i++) {
      new getJsonResponse(context,appWidgetIds[i],true).execute();
    }
  }
 else {
    Log.v(TAG,""String_Node_Str"");
  }
}",0.8700189753320683
162165,"@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null || arrivalEstimatesList.data.isEmpty()) {
    Log.e(TAG,""String_Node_Str"");
    newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (!onReboot)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(TAG,""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    if (minutes < 1) {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
 else     if (minutes == 1) {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
 else {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"" + minutes + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
  }
  String routeName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  String stopName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  newView.setTextViewText(R.id.tvRoute,routeName);
  newView.setTextViewText(R.id.tvStop,stopName);
  Intent clickIntent=new Intent(context,TransLocWidgetProvider.class);
  clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,widgetId);
  PendingIntent pendingIntent=PendingIntent.getBroadcast(context,widgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  newView.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
  int textColor=prefs.getInt(""String_Node_Str"" + widgetId,-1);
  int backgroundColor=prefs.getInt(""String_Node_Str"" + widgetId,-1);
  newView.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
  newView.setTextColor(R.id.tvRemainingTime,textColor);
  newView.setTextColor(R.id.tvMins,textColor);
  newView.setTextColor(R.id.tvRoute,textColor);
  newView.setTextColor(R.id.tvStop,textColor);
  Log.v(TAG,""String_Node_Str"" + widgetId);
  appWidgetManager.updateAppWidget(widgetId,newView);
}","@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null || arrivalEstimatesList.data.isEmpty()) {
    newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (!onReboot)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    if (minutes < 1) {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
 else     if (minutes == 1) {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
 else {
      if (!onReboot)       Toast.makeText(context,""String_Node_Str"" + minutes + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
      newView.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
      newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
    }
  }
  String routeName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  String stopName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  newView.setTextViewText(R.id.tvRoute,routeName);
  newView.setTextViewText(R.id.tvStop,stopName);
  Intent clickIntent=new Intent(context,TransLocWidgetProvider.class);
  clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,widgetId);
  PendingIntent pendingIntent=PendingIntent.getBroadcast(context,widgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  newView.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
  int textColor=prefs.getInt(""String_Node_Str"" + widgetId,-1);
  int backgroundColor=prefs.getInt(""String_Node_Str"" + widgetId,-1);
  newView.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
  newView.setTextColor(R.id.tvRemainingTime,textColor);
  newView.setTextColor(R.id.tvMins,textColor);
  newView.setTextColor(R.id.tvRoute,textColor);
  newView.setTextColor(R.id.tvStop,textColor);
  Log.v(TAG,""String_Node_Str"" + widgetId);
  appWidgetManager.updateAppWidget(widgetId,newView);
}",0.9737237237237236
162166,"@Override public void onReceive(Context context,Intent intent){
  Log.v(TAG,""String_Node_Str"" + intent.getAction());
  newView=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  appWidgetManager=AppWidgetManager.getInstance(context);
  if (intent.getAction() == null) {
    Log.v(TAG,""String_Node_Str"");
    Bundle extras=intent.getExtras();
    if (extras != null) {
      int receivedWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
      new getJsonResponse(context,receivedWidgetId,false).execute();
    }
  }
 else   if (intent.getAction().equals(""String_Node_Str"")) {
    ComponentName thisAppWidget=new ComponentName(context.getPackageName(),TransLocWidgetProvider.class.getName());
    int[] appWidgetIds=appWidgetManager.getAppWidgetIds(thisAppWidget);
    for (int i=0; i < appWidgetIds.length; i++) {
      Log.v(TAG,""String_Node_Str"" + appWidgetIds[i]);
      new getJsonResponse(context,appWidgetIds[i],true).execute();
    }
  }
 else {
    Log.v(TAG,""String_Node_Str"");
  }
}","@Override public void onReceive(Context context,Intent intent){
  Log.v(TAG,""String_Node_Str"" + intent.getAction());
  newView=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  appWidgetManager=AppWidgetManager.getInstance(context);
  if (intent.getAction() == null) {
    Log.v(TAG,""String_Node_Str"");
    Bundle extras=intent.getExtras();
    if (extras != null) {
      int receivedWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
      new getJsonResponse(context,receivedWidgetId,false).execute();
    }
  }
 else   if (intent.getAction().equals(""String_Node_Str"") || intent.getAction().equals(""String_Node_Str"")) {
    ComponentName thisAppWidget=new ComponentName(context.getPackageName(),TransLocWidgetProvider.class.getName());
    int[] appWidgetIds=appWidgetManager.getAppWidgetIds(thisAppWidget);
    for (int i=0; i < appWidgetIds.length; i++) {
      new getJsonResponse(context,appWidgetIds[i],true).execute();
    }
  }
 else {
    Log.v(TAG,""String_Node_Str"");
  }
}",0.8700189753320683
162167,"@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.error_no_data));
  }
 else   if (arrivalEstimatesList.data.isEmpty()) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(TAG,""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    if (routeShortName.length() < 5) {
      String widgetRouteName=routeShortName + ""String_Node_Str"" + routeLongName;
      editor.putString(""String_Node_Str"" + mAppWidgetId,widgetRouteName).commit();
      views.setTextViewText(R.id.tvRoute,widgetRouteName);
    }
 else {
      editor.putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    editor.putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
    int textColor=settings.getInt(""String_Node_Str"",-1);
    views.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
    views.setTextColor(R.id.tvRemainingTime,textColor);
    views.setTextColor(R.id.tvMins,textColor);
    views.setTextColor(R.id.tvRoute,textColor);
    views.setTextColor(R.id.tvStop,textColor);
    Intent clickIntent=new Intent(getBaseContext(),TransLocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(TAG,""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    editor.putBoolean(""String_Node_Str"",true);
    finish();
  }
  makeWidgetDialog.dismiss();
  Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
}","@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.error_no_data));
  }
 else   if (arrivalEstimatesList.data.isEmpty()) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(TAG,""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    if (routeShortName.length() < 5 && routeShortName.length() > 0) {
      String widgetRouteName=routeShortName + ""String_Node_Str"" + routeLongName;
      editor.putString(""String_Node_Str"" + mAppWidgetId,widgetRouteName).commit();
      views.setTextViewText(R.id.tvRoute,widgetRouteName);
    }
 else {
      editor.putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    editor.putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
    int textColor=settings.getInt(""String_Node_Str"",-1);
    views.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
    views.setTextColor(R.id.tvRemainingTime,textColor);
    views.setTextColor(R.id.tvMins,textColor);
    views.setTextColor(R.id.tvRoute,textColor);
    views.setTextColor(R.id.tvStop,textColor);
    Intent clickIntent=new Intent(getBaseContext(),TransLocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(TAG,""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    editor.putBoolean(""String_Node_Str"",true);
    finish();
  }
  makeWidgetDialog.dismiss();
  Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
}",0.9950168783153832
162168,"@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.error_no_data));
  }
 else   if (arrivalEstimatesList.data.isEmpty()) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(TAG,""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    if (routeShortName.length() < 5) {
      String widgetRouteName=routeShortName + ""String_Node_Str"" + routeLongName;
      editor.putString(""String_Node_Str"" + mAppWidgetId,widgetRouteName).commit();
      views.setTextViewText(R.id.tvRoute,widgetRouteName);
    }
 else {
      editor.putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    editor.putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
    int textColor=settings.getInt(""String_Node_Str"",-1);
    views.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
    views.setTextColor(R.id.tvRemainingTime,textColor);
    views.setTextColor(R.id.tvMins,textColor);
    views.setTextColor(R.id.tvRoute,textColor);
    views.setTextColor(R.id.tvStop,textColor);
    Intent clickIntent=new Intent(getBaseContext(),TransLocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(TAG,""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    editor.putBoolean(""String_Node_Str"",true);
    finish();
  }
  makeWidgetDialog.dismiss();
  Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
}","@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.error_no_data));
  }
 else   if (arrivalEstimatesList.data.isEmpty()) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(TAG,""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    if (routeShortName.length() < 5 && routeShortName.length() > 0) {
      String widgetRouteName=routeShortName + ""String_Node_Str"" + routeLongName;
      editor.putString(""String_Node_Str"" + mAppWidgetId,widgetRouteName).commit();
      views.setTextViewText(R.id.tvRoute,widgetRouteName);
    }
 else {
      editor.putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    editor.putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
    int textColor=settings.getInt(""String_Node_Str"",-1);
    views.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
    views.setTextColor(R.id.tvRemainingTime,textColor);
    views.setTextColor(R.id.tvMins,textColor);
    views.setTextColor(R.id.tvRoute,textColor);
    views.setTextColor(R.id.tvStop,textColor);
    Intent clickIntent=new Intent(getBaseContext(),TransLocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(TAG,""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    editor.putBoolean(""String_Node_Str"",true);
    finish();
  }
  makeWidgetDialog.dismiss();
  Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
}",0.9950168783153832
162169,"@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.error_no_data));
  }
 else   if (arrivalEstimatesList.data.isEmpty()) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(TAG,""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    if (routeShortName.length() < 5) {
      String widgetRouteName=routeShortName + ""String_Node_Str"" + routeLongName;
      editor.putString(""String_Node_Str"" + mAppWidgetId,widgetRouteName).commit();
      views.setTextViewText(R.id.tvRoute,widgetRouteName);
    }
 else {
      editor.putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    editor.putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
    int textColor=settings.getInt(""String_Node_Str"",-1);
    views.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
    views.setTextColor(R.id.tvRemainingTime,textColor);
    views.setTextColor(R.id.tvMins,textColor);
    views.setTextColor(R.id.tvRoute,textColor);
    views.setTextColor(R.id.tvStop,textColor);
    Intent clickIntent=new Intent(getBaseContext(),TransLocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(TAG,""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    editor.putBoolean(""String_Node_Str"",true);
    finish();
  }
  makeWidgetDialog.dismiss();
  Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
}","@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.error_no_data));
  }
 else   if (arrivalEstimatesList.data.isEmpty()) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(TAG,""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    if (routeShortName.length() < 5 && routeShortName.length() > 0) {
      String widgetRouteName=routeShortName + ""String_Node_Str"" + routeLongName;
      editor.putString(""String_Node_Str"" + mAppWidgetId,widgetRouteName).commit();
      views.setTextViewText(R.id.tvRoute,widgetRouteName);
    }
 else {
      editor.putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    editor.putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
    int textColor=settings.getInt(""String_Node_Str"",-1);
    views.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
    views.setTextColor(R.id.tvRemainingTime,textColor);
    views.setTextColor(R.id.tvMins,textColor);
    views.setTextColor(R.id.tvRoute,textColor);
    views.setTextColor(R.id.tvStop,textColor);
    Intent clickIntent=new Intent(getBaseContext(),TransLocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(TAG,""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    editor.putBoolean(""String_Node_Str"",true);
    finish();
  }
  makeWidgetDialog.dismiss();
  Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
}",0.9950168783153832
162170,"@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.error_no_data));
  }
 else   if (arrivalEstimatesList.data.isEmpty()) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(TAG,""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    if (routeShortName.length() < 5) {
      String widgetRouteName=routeShortName + ""String_Node_Str"" + routeLongName;
      editor.putString(""String_Node_Str"" + mAppWidgetId,widgetRouteName).commit();
      views.setTextViewText(R.id.tvRoute,widgetRouteName);
    }
 else {
      editor.putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    editor.putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
    int textColor=settings.getInt(""String_Node_Str"",-1);
    views.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
    views.setTextColor(R.id.tvRemainingTime,textColor);
    views.setTextColor(R.id.tvMins,textColor);
    views.setTextColor(R.id.tvRoute,textColor);
    views.setTextColor(R.id.tvStop,textColor);
    Intent clickIntent=new Intent(getBaseContext(),TransLocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(TAG,""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    editor.putBoolean(""String_Node_Str"",true);
    finish();
  }
  makeWidgetDialog.dismiss();
  Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
}","@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  if (arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.error_no_data));
  }
 else   if (arrivalEstimatesList.data.isEmpty()) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(TAG,""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    if (routeShortName.length() < 5 && routeShortName.length() > 0) {
      String widgetRouteName=routeShortName + ""String_Node_Str"" + routeLongName;
      editor.putString(""String_Node_Str"" + mAppWidgetId,widgetRouteName).commit();
      views.setTextViewText(R.id.tvRoute,widgetRouteName);
    }
 else {
      editor.putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    editor.putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    int backgroundColor=settings.getInt(""String_Node_Str"",1996554497);
    int textColor=settings.getInt(""String_Node_Str"",-1);
    views.setInt(R.id.rlWidgetLayout,""String_Node_Str"",backgroundColor);
    views.setTextColor(R.id.tvRemainingTime,textColor);
    views.setTextColor(R.id.tvMins,textColor);
    views.setTextColor(R.id.tvRoute,textColor);
    views.setTextColor(R.id.tvStop,textColor);
    Intent clickIntent=new Intent(getBaseContext(),TransLocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(TAG,""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    editor.putBoolean(""String_Node_Str"",true);
    finish();
  }
  makeWidgetDialog.dismiss();
  Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
}",0.9950168783153832
162171,"@Override protected void onPostExecute(String result){
  String response=result;
  try {
    JSONObject jObject=new JSONObject(response);
    currentTimeUTC=jObject.getString(""String_Node_Str"");
    JSONArray jArrayData=jObject.getJSONArray(""String_Node_Str"");
    JSONObject jObjectArrayData=jArrayData.getJSONObject(0);
    JSONArray jArrayArrivals=jObjectArrayData.getJSONArray(""String_Node_Str"");
    JSONObject jObjectArrayArrivals=jArrayArrivals.getJSONObject(0);
    arrivalTimeUTC=jObjectArrayArrivals.getString(""String_Node_Str"");
    errorCode=0;
  }
 catch (  JSONException e) {
    e.printStackTrace();
    errorCode=1;
    Log.e(""String_Node_Str"",""String_Node_Str"");
  }
  if (errorCode == 0) {
    int minutes=getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    if (minutes < 1)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
 else     if (minutes == 1)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
 else     Toast.makeText(context,""String_Node_Str"" + minutes + ""String_Node_Str"",Toast.LENGTH_LONG).show();
    newView.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
  }
 else   if (errorCode == 1) {
    newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
  Log.v(""String_Node_Str"",""String_Node_Str"" + widgetId);
  appWidgetManager.updateAppWidget(widgetId,newView);
}","@Override protected void onPostExecute(String result){
  String response=result;
  try {
    JSONObject jObject=new JSONObject(response);
    currentTimeUTC=jObject.getString(""String_Node_Str"");
    JSONArray jArrayData=jObject.getJSONArray(""String_Node_Str"");
    JSONObject jObjectArrayData=jArrayData.getJSONObject(0);
    JSONArray jArrayArrivals=jObjectArrayData.getJSONArray(""String_Node_Str"");
    JSONObject jObjectArrayArrivals=jArrayArrivals.getJSONObject(0);
    arrivalTimeUTC=jObjectArrayArrivals.getString(""String_Node_Str"");
    errorCode=0;
  }
 catch (  JSONException e) {
    e.printStackTrace();
    errorCode=1;
    Log.e(""String_Node_Str"",""String_Node_Str"");
  }
  if (errorCode == 0) {
    Log.v(""String_Node_Str"",""String_Node_Str"");
    int minutes=getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    if (minutes < 1)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
 else     if (minutes == 1)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
 else     Toast.makeText(context,""String_Node_Str"" + minutes + ""String_Node_Str"",Toast.LENGTH_LONG).show();
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
    String routeName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
    String stopName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
    Log.v(""String_Node_Str"",routeName);
    Log.v(""String_Node_Str"",stopName);
    newView.setTextViewText(R.id.tvRoute,routeName);
    newView.setTextViewText(R.id.tvStop,stopName);
    if (minutes < 1)     newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
 else     newView.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 2)     newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
  }
 else   if (errorCode == 1) {
    Log.v(""String_Node_Str"",""String_Node_Str"");
    newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
  Log.v(""String_Node_Str"",""String_Node_Str"" + widgetId);
  appWidgetManager.updateAppWidget(widgetId,newView);
}",0.8439897698209718
162172,"@Override public void onReceive(Context context,Intent intent){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  if (intent.getAction() == null) {
    Bundle extras=intent.getExtras();
    if (extras != null) {
      Log.v(""String_Node_Str"",""String_Node_Str"");
      appWidgetManager=AppWidgetManager.getInstance(context);
      widgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
      Log.v(""String_Node_Str"",""String_Node_Str"" + widgetId);
      getJsonResponse task=new getJsonResponse(context);
      task.execute();
    }
  }
 else {
    super.onReceive(context,intent);
  }
}","@Override public void onReceive(Context context,Intent intent){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  if (intent.getAction() == null) {
    Bundle extras=intent.getExtras();
    Log.v(""String_Node_Str"",""String_Node_Str"");
    appWidgetManager=AppWidgetManager.getInstance(context);
    widgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
    Log.v(""String_Node_Str"",""String_Node_Str"" + widgetId);
    Log.v(""String_Node_Str"",""String_Node_Str"");
    getJsonResponse task=new getJsonResponse(context);
    task.execute();
  }
 else {
    super.onReceive(context,intent);
  }
}",0.7186009538950715
162173,"@Override protected void onPostExecute(Void result){
  super.onPostExecute(result);
  if (errorCode == 0) {
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    Log.v(""String_Node_Str"",routeShortNameArray.get(routePosition));
    Log.v(""String_Node_Str"",stopNameArray.get(stopPosition));
    if (routeShortNameArray.get(routePosition).equals(""String_Node_Str"")) {
      views.setTextViewText(R.id.tvRoute,routeLongNameArray.get(routePosition));
    }
 else {
      views.setTextViewText(R.id.tvRoute,routeShortNameArray.get(routePosition));
    }
    views.setTextViewText(R.id.tvStop,stopNameArray.get(stopPosition));
    Intent clickIntent=new Intent(getBaseContext(),TranslocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    dialog.dismiss();
    finish();
  }
 else   if (errorCode == 1) {
    dialog.dismiss();
    showAlertDialog(""String_Node_Str"",""String_Node_Str"");
  }
}","@Override protected void onPostExecute(Void result){
  super.onPostExecute(result);
  if (errorCode == 0) {
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    Log.v(""String_Node_Str"",routeShortNameArray.get(routePosition));
    Log.v(""String_Node_Str"",stopNameArray.get(stopPosition));
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(WidgetConfigurationActivity.this);
    if (routeShortNameArray.get(routePosition).equals(""String_Node_Str"")) {
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeLongNameArray.get(routePosition));
      views.setTextViewText(R.id.tvRoute,routeLongNameArray.get(routePosition));
    }
 else {
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeShortNameArray.get(routePosition));
      views.setTextViewText(R.id.tvRoute,routeShortNameArray.get(routePosition));
    }
    prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,stopNameArray.get(stopPosition));
    views.setTextViewText(R.id.tvStop,stopNameArray.get(stopPosition));
    prefs.edit().commit();
    Intent clickIntent=new Intent(getBaseContext(),TranslocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    dialog.dismiss();
    finish();
  }
 else   if (errorCode == 1) {
    dialog.dismiss();
    showAlertDialog(""String_Node_Str"",""String_Node_Str"");
  }
}",0.885665941503505
162174,"@Override protected void onPreExecute(){
}","@Override protected void onPreExecute(){
  Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}",0.5419354838709678
162175,"@Override protected TransLocArrivalEstimates doInBackground(Void... voids){
  newView=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  String url=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  if (url.equals(""String_Node_Str""))   Log.e(""String_Node_Str"",""String_Node_Str"");
  Log.v(""String_Node_Str"",url);
  try {
    return new ObjectMapper().readValue(Utils.getJsonResponse(url),TransLocArrivalEstimates.class);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
}","@Override protected TransLocArrivalEstimates doInBackground(Void... voids){
  newView=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  String url=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  if (url.equals(""String_Node_Str""))   Log.e(""String_Node_Str"",""String_Node_Str"");
  Log.v(""String_Node_Str"",url);
  try {
    return new ObjectMapper().readValue(Utils.getJsonResponse(url),TransLocArrivalEstimates.class);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}",0.9459876543209876
162176,"@Override public void onUpdate(Context context,AppWidgetManager appWidgetManager,int[] appWidgetIds){
  Log.v(""String_Node_Str"",""String_Node_Str"");
}","@Override public void onUpdate(Context context,AppWidgetManager appWidgetManager,int[] appWidgetIds){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  Log.v(""String_Node_Str"",""String_Node_Str"");
  if (widgetId != -1) {
    getJsonResponse task=new getJsonResponse(context);
    task.execute();
  }
 else {
  }
}",0.6492374727668845
162177,"protected static String getJsonResponse(String url){
  String response=""String_Node_Str"";
  Log.v(""String_Node_Str"",url);
  DefaultHttpClient client=new DefaultHttpClient();
  HttpGet httpGet=new HttpGet(url);
  try {
    HttpResponse execute=client.execute(httpGet);
    int statusCode=execute.getStatusLine().getStatusCode();
    if (statusCode != HttpStatus.SC_OK) {
      Log.e(""String_Node_Str"",""String_Node_Str"");
      throw new Exception();
    }
 else {
      InputStream content=execute.getEntity().getContent();
      BufferedReader buffer=new BufferedReader(new InputStreamReader(content));
      String s=""String_Node_Str"";
      while ((s=buffer.readLine()) != null) {
        response+=s;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return response;
}","protected static String getJsonResponse(String url) throws Exception {
  String response=""String_Node_Str"";
  Log.v(""String_Node_Str"",url);
  DefaultHttpClient client=new DefaultHttpClient();
  HttpGet httpGet=new HttpGet(url);
  try {
    HttpResponse execute=client.execute(httpGet);
    int statusCode=execute.getStatusLine().getStatusCode();
    if (statusCode != HttpStatus.SC_OK) {
      Log.e(""String_Node_Str"",""String_Node_Str"");
      throw new Exception();
    }
 else {
      InputStream content=execute.getEntity().getContent();
      BufferedReader buffer=new BufferedReader(new InputStreamReader(content));
      String s=""String_Node_Str"";
      while ((s=buffer.readLine()) != null) {
        response+=s;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (response == ""String_Node_Str"") {
    throw new Exception();
  }
 else {
    return response;
  }
}",0.9197166469893744
162178,"protected TransLocArrivalEstimates doInBackground(Void... voids){
  String url=""String_Node_Str"" + currentAgencyId + ""String_Node_Str""+ currentRouteId+ ""String_Node_Str""+ currentStopId;
  editor.putString(""String_Node_Str"" + mAppWidgetId,url).commit();
  Log.v(""String_Node_Str"",""String_Node_Str"" + url);
  try {
    return new ObjectMapper().readValue(Utils.getJsonResponse(url),TransLocArrivalEstimates.class);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
}","protected TransLocArrivalEstimates doInBackground(Void... voids){
  String url=""String_Node_Str"" + currentAgencyId + ""String_Node_Str""+ currentRouteId+ ""String_Node_Str""+ currentStopId;
  editor.putString(""String_Node_Str"" + mAppWidgetId,url).commit();
  Log.v(""String_Node_Str"",""String_Node_Str"" + url);
  try {
    return new ObjectMapper().readValue(Utils.getJsonResponse(url),TransLocArrivalEstimates.class);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}",0.9979591836734694
162179,"@Override protected void onPreExecute(){
}","@Override protected void onPreExecute(){
  Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}",0.5419354838709678
162180,"@Override protected TransLocArrivalEstimates doInBackground(Void... voids){
  newView=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  String url=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  if (url.equals(""String_Node_Str""))   Log.e(""String_Node_Str"",""String_Node_Str"");
  Log.v(""String_Node_Str"",url);
  try {
    return new ObjectMapper().readValue(Utils.getJsonResponse(url),TransLocArrivalEstimates.class);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
}","@Override protected TransLocArrivalEstimates doInBackground(Void... voids){
  newView=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  String url=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
  if (url.equals(""String_Node_Str""))   Log.e(""String_Node_Str"",""String_Node_Str"");
  Log.v(""String_Node_Str"",url);
  try {
    return new ObjectMapper().readValue(Utils.getJsonResponse(url),TransLocArrivalEstimates.class);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}",0.9459876543209876
162181,"@Override public void onUpdate(Context context,AppWidgetManager appWidgetManager,int[] appWidgetIds){
  Log.v(""String_Node_Str"",""String_Node_Str"");
}","@Override public void onUpdate(Context context,AppWidgetManager appWidgetManager,int[] appWidgetIds){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  Log.v(""String_Node_Str"",""String_Node_Str"");
  if (widgetId != -1) {
    getJsonResponse task=new getJsonResponse(context);
    task.execute();
  }
 else {
  }
}",0.6492374727668845
162182,"protected static String getJsonResponse(String url){
  String response=""String_Node_Str"";
  Log.v(""String_Node_Str"",url);
  DefaultHttpClient client=new DefaultHttpClient();
  HttpGet httpGet=new HttpGet(url);
  try {
    HttpResponse execute=client.execute(httpGet);
    int statusCode=execute.getStatusLine().getStatusCode();
    if (statusCode != HttpStatus.SC_OK) {
      Log.e(""String_Node_Str"",""String_Node_Str"");
      throw new Exception();
    }
 else {
      InputStream content=execute.getEntity().getContent();
      BufferedReader buffer=new BufferedReader(new InputStreamReader(content));
      String s=""String_Node_Str"";
      while ((s=buffer.readLine()) != null) {
        response+=s;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return response;
}","protected static String getJsonResponse(String url) throws Exception {
  String response=""String_Node_Str"";
  Log.v(""String_Node_Str"",url);
  DefaultHttpClient client=new DefaultHttpClient();
  HttpGet httpGet=new HttpGet(url);
  try {
    HttpResponse execute=client.execute(httpGet);
    int statusCode=execute.getStatusLine().getStatusCode();
    if (statusCode != HttpStatus.SC_OK) {
      Log.e(""String_Node_Str"",""String_Node_Str"");
      throw new Exception();
    }
 else {
      InputStream content=execute.getEntity().getContent();
      BufferedReader buffer=new BufferedReader(new InputStreamReader(content));
      String s=""String_Node_Str"";
      while ((s=buffer.readLine()) != null) {
        response+=s;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (response == ""String_Node_Str"") {
    throw new Exception();
  }
 else {
    return response;
  }
}",0.9197166469893744
162183,"protected TransLocArrivalEstimates doInBackground(Void... voids){
  String url=""String_Node_Str"" + currentAgencyId + ""String_Node_Str""+ currentRouteId+ ""String_Node_Str""+ currentStopId;
  editor.putString(""String_Node_Str"" + mAppWidgetId,url).commit();
  Log.v(""String_Node_Str"",""String_Node_Str"" + url);
  try {
    return new ObjectMapper().readValue(Utils.getJsonResponse(url),TransLocArrivalEstimates.class);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
}","protected TransLocArrivalEstimates doInBackground(Void... voids){
  String url=""String_Node_Str"" + currentAgencyId + ""String_Node_Str""+ currentRouteId+ ""String_Node_Str""+ currentStopId;
  editor.putString(""String_Node_Str"" + mAppWidgetId,url).commit();
  Log.v(""String_Node_Str"",""String_Node_Str"" + url);
  try {
    return new ObjectMapper().readValue(Utils.getJsonResponse(url),TransLocArrivalEstimates.class);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}",0.9979591836734694
162184,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.configuration_activity);
  sSelectAgency=(Spinner)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Spinner)findViewById(R.id.sSelectRoute);
  sSelectStop=(Spinner)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  Log.v(""String_Node_Str"",""String_Node_Str"");
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  PopulateAgenciesTask task=new PopulateAgenciesTask();
  task.execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset();
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(getBaseContext(),""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.configuration_activity);
  sSelectAgency=(Spinner)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Spinner)findViewById(R.id.sSelectRoute);
  sSelectStop=(Spinner)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  Log.v(""String_Node_Str"",""String_Node_Str"");
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  PopulateAgenciesTask task=new PopulateAgenciesTask();
  task.execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset();
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
}",0.9849718221665624
162185,"@Override public void onClick(View view){
  Utils.showAlertDialog(getBaseContext(),""String_Node_Str"",getString(R.string.help_dialog));
}","@Override public void onClick(View view){
  Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
}",0.8888888888888888
162186,"@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  Log.v(""String_Node_Str"",""String_Node_Str"" + arrivalEstimatesList.data.size());
  if (arrivalEstimatesList.data.isEmpty() || arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(""String_Node_Str"",""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    Log.v(""String_Node_Str"",routeShortName);
    Log.v(""String_Node_Str"",stopName);
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(WidgetConfigurationActivity.this);
    if (routeShortName.equals(""String_Node_Str"")) {
      Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeLongName).commit();
      views.setTextViewText(R.id.tvRoute,routeLongName);
    }
 else {
      Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    Intent clickIntent=new Intent(getBaseContext(),TranslocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    dialog.dismiss();
    finish();
  }
}","@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  Log.v(""String_Node_Str"",""String_Node_Str"" + arrivalEstimatesList.data.size());
  if (arrivalEstimatesList.data.isEmpty() || arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
    dialog.dismiss();
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(""String_Node_Str"",""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    Log.v(""String_Node_Str"",routeShortName);
    Log.v(""String_Node_Str"",stopName);
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(WidgetConfigurationActivity.this);
    if (routeShortName.equals(""String_Node_Str"")) {
      Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeLongName).commit();
      views.setTextViewText(R.id.tvRoute,routeLongName);
    }
 else {
      Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    Intent clickIntent=new Intent(getBaseContext(),TranslocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    dialog.dismiss();
    finish();
  }
}",0.9960923623445824
162187,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.configuration_activity);
  sSelectAgency=(Spinner)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Spinner)findViewById(R.id.sSelectRoute);
  sSelectStop=(Spinner)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  Log.v(""String_Node_Str"",""String_Node_Str"");
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  PopulateAgenciesTask task=new PopulateAgenciesTask();
  task.execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset();
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(getBaseContext(),""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.configuration_activity);
  sSelectAgency=(Spinner)findViewById(R.id.sSelectAgency);
  sSelectRoute=(Spinner)findViewById(R.id.sSelectRoute);
  sSelectStop=(Spinner)findViewById(R.id.sSelectStop);
  bReset=(Button)findViewById(R.id.bReset);
  bMakeWidget=(Button)findViewById(R.id.bMakeWidget);
  tvHelpMessage=(TextView)findViewById(R.id.tvHelp);
  Log.v(""String_Node_Str"",""String_Node_Str"");
  settings=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  editor=settings.edit();
  PopulateAgenciesTask task=new PopulateAgenciesTask();
  task.execute();
  OnClickListener setResetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doReset();
    }
  }
;
  OnClickListener setMakeWidgetClickedListener=new OnClickListener(){
    @Override public void onClick(    View v){
      doMakeWidget();
    }
  }
;
  OnClickListener setHelpClickedListener=new OnClickListener(){
    @Override public void onClick(    View view){
      Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
    }
  }
;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  if (extras != null) {
    mAppWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
  }
  bReset.setOnClickListener(setResetClickedListener);
  bMakeWidget.setOnClickListener(setMakeWidgetClickedListener);
  tvHelpMessage.setOnClickListener(setHelpClickedListener);
}",0.9849718221665624
162188,"@Override public void onClick(View view){
  Utils.showAlertDialog(getBaseContext(),""String_Node_Str"",getString(R.string.help_dialog));
}","@Override public void onClick(View view){
  Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",getString(R.string.help_dialog));
}",0.8888888888888888
162189,"@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  Log.v(""String_Node_Str"",""String_Node_Str"" + arrivalEstimatesList.data.size());
  if (arrivalEstimatesList.data.isEmpty() || arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(""String_Node_Str"",""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    Log.v(""String_Node_Str"",routeShortName);
    Log.v(""String_Node_Str"",stopName);
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(WidgetConfigurationActivity.this);
    if (routeShortName.equals(""String_Node_Str"")) {
      Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeLongName).commit();
      views.setTextViewText(R.id.tvRoute,routeLongName);
    }
 else {
      Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    Intent clickIntent=new Intent(getBaseContext(),TranslocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    dialog.dismiss();
    finish();
  }
}","@Override protected void onPostExecute(TransLocArrivalEstimates arrivalEstimatesList){
  Date currentTimeUTC;
  Date arrivalTimeUTC;
  Log.v(""String_Node_Str"",""String_Node_Str"" + arrivalEstimatesList.data.size());
  if (arrivalEstimatesList.data.isEmpty() || arrivalEstimatesList == null) {
    Utils.showAlertDialog(WidgetConfigurationActivity.this,""String_Node_Str"",""String_Node_Str"");
    dialog.dismiss();
  }
 else {
    TransLocArrivalEstimate arrivalEstimate=arrivalEstimatesList.data.get(0);
    TransLocArrival arrival=arrivalEstimate.arrivals.get(0);
    currentTimeUTC=arrivalEstimatesList.generatedOn;
    arrivalTimeUTC=arrival.arrivalAt;
    Log.v(""String_Node_Str"",""String_Node_Str"" + currentTimeUTC + ""String_Node_Str""+ ""String_Node_Str""+ arrivalTimeUTC);
    minutes=Utils.getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    Log.v(""String_Node_Str"",routeShortName);
    Log.v(""String_Node_Str"",stopName);
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(WidgetConfigurationActivity.this);
    if (routeShortName.equals(""String_Node_Str"")) {
      Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeLongName).commit();
      views.setTextViewText(R.id.tvRoute,routeLongName);
    }
 else {
      Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeShortName).commit();
      views.setTextViewText(R.id.tvRoute,routeShortName);
    }
    prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,stopName).commit();
    views.setTextViewText(R.id.tvStop,stopName);
    Intent clickIntent=new Intent(getBaseContext(),TranslocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    dialog.dismiss();
    finish();
  }
}",0.9960923623445824
162190,"@Override protected void onPostExecute(String result){
  String response=result;
  try {
    JSONObject jObject=new JSONObject(response);
    currentTimeUTC=jObject.getString(""String_Node_Str"");
    JSONArray jArrayData=jObject.getJSONArray(""String_Node_Str"");
    JSONObject jObjectArrayData=jArrayData.getJSONObject(0);
    JSONArray jArrayArrivals=jObjectArrayData.getJSONArray(""String_Node_Str"");
    JSONObject jObjectArrayArrivals=jArrayArrivals.getJSONObject(0);
    arrivalTimeUTC=jObjectArrayArrivals.getString(""String_Node_Str"");
    errorCode=0;
  }
 catch (  JSONException e) {
    e.printStackTrace();
    errorCode=1;
    Log.e(""String_Node_Str"",""String_Node_Str"");
  }
  if (errorCode == 0) {
    int minutes=getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    if (minutes < 1)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
 else     if (minutes == 1)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
 else     Toast.makeText(context,""String_Node_Str"" + minutes + ""String_Node_Str"",Toast.LENGTH_LONG).show();
    newView.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
  }
 else   if (errorCode == 1) {
    newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
  Log.v(""String_Node_Str"",""String_Node_Str"" + widgetId);
  appWidgetManager.updateAppWidget(widgetId,newView);
}","@Override protected void onPostExecute(String result){
  String response=result;
  try {
    JSONObject jObject=new JSONObject(response);
    currentTimeUTC=jObject.getString(""String_Node_Str"");
    JSONArray jArrayData=jObject.getJSONArray(""String_Node_Str"");
    JSONObject jObjectArrayData=jArrayData.getJSONObject(0);
    JSONArray jArrayArrivals=jObjectArrayData.getJSONArray(""String_Node_Str"");
    JSONObject jObjectArrayArrivals=jArrayArrivals.getJSONObject(0);
    arrivalTimeUTC=jObjectArrayArrivals.getString(""String_Node_Str"");
    errorCode=0;
  }
 catch (  JSONException e) {
    e.printStackTrace();
    errorCode=1;
    Log.e(""String_Node_Str"",""String_Node_Str"");
  }
  if (errorCode == 0) {
    Log.v(""String_Node_Str"",""String_Node_Str"");
    int minutes=getMinutesBetweenTimes(currentTimeUTC,arrivalTimeUTC);
    if (minutes < 1)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
 else     if (minutes == 1)     Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
 else     Toast.makeText(context,""String_Node_Str"" + minutes + ""String_Node_Str"",Toast.LENGTH_LONG).show();
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
    String routeName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
    String stopName=prefs.getString(""String_Node_Str"" + widgetId,""String_Node_Str"");
    Log.v(""String_Node_Str"",routeName);
    Log.v(""String_Node_Str"",stopName);
    newView.setTextViewText(R.id.tvRoute,routeName);
    newView.setTextViewText(R.id.tvStop,stopName);
    if (minutes < 1)     newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
 else     newView.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 2)     newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     newView.setTextViewText(R.id.tvMins,""String_Node_Str"");
  }
 else   if (errorCode == 1) {
    Log.v(""String_Node_Str"",""String_Node_Str"");
    newView.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
  Log.v(""String_Node_Str"",""String_Node_Str"" + widgetId);
  appWidgetManager.updateAppWidget(widgetId,newView);
}",0.8439897698209718
162191,"@Override public void onReceive(Context context,Intent intent){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  if (intent.getAction() == null) {
    Bundle extras=intent.getExtras();
    if (extras != null) {
      Log.v(""String_Node_Str"",""String_Node_Str"");
      appWidgetManager=AppWidgetManager.getInstance(context);
      widgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
      Log.v(""String_Node_Str"",""String_Node_Str"" + widgetId);
      getJsonResponse task=new getJsonResponse(context);
      task.execute();
    }
  }
 else {
    super.onReceive(context,intent);
  }
}","@Override public void onReceive(Context context,Intent intent){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  if (intent.getAction() == null) {
    Bundle extras=intent.getExtras();
    Log.v(""String_Node_Str"",""String_Node_Str"");
    appWidgetManager=AppWidgetManager.getInstance(context);
    widgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);
    Log.v(""String_Node_Str"",""String_Node_Str"" + widgetId);
    Log.v(""String_Node_Str"",""String_Node_Str"");
    getJsonResponse task=new getJsonResponse(context);
    task.execute();
  }
 else {
    super.onReceive(context,intent);
  }
}",0.7186009538950715
162192,"@Override protected void onPostExecute(Void result){
  super.onPostExecute(result);
  if (errorCode == 0) {
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    Log.v(""String_Node_Str"",routeShortNameArray.get(routePosition));
    Log.v(""String_Node_Str"",stopNameArray.get(stopPosition));
    if (routeShortNameArray.get(routePosition).equals(""String_Node_Str"")) {
      views.setTextViewText(R.id.tvRoute,routeLongNameArray.get(routePosition));
    }
 else {
      views.setTextViewText(R.id.tvRoute,routeShortNameArray.get(routePosition));
    }
    views.setTextViewText(R.id.tvStop,stopNameArray.get(stopPosition));
    Intent clickIntent=new Intent(getBaseContext(),TranslocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    dialog.dismiss();
    finish();
  }
 else   if (errorCode == 1) {
    dialog.dismiss();
    showAlertDialog(""String_Node_Str"",""String_Node_Str"");
  }
}","@Override protected void onPostExecute(Void result){
  super.onPostExecute(result);
  if (errorCode == 0) {
    AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(getBaseContext());
    RemoteViews views=new RemoteViews(getBaseContext().getPackageName(),R.layout.widget_layout);
    views.setTextViewText(R.id.tvRemainingTime,Integer.toString(minutes));
    if (minutes < 1)     views.setTextViewText(R.id.tvRemainingTime,""String_Node_Str"");
    if (minutes < 2)     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
 else     views.setTextViewText(R.id.tvMins,""String_Node_Str"");
    Log.v(""String_Node_Str"",routeShortNameArray.get(routePosition));
    Log.v(""String_Node_Str"",stopNameArray.get(stopPosition));
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(WidgetConfigurationActivity.this);
    if (routeShortNameArray.get(routePosition).equals(""String_Node_Str"")) {
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeLongNameArray.get(routePosition));
      views.setTextViewText(R.id.tvRoute,routeLongNameArray.get(routePosition));
    }
 else {
      prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,routeShortNameArray.get(routePosition));
      views.setTextViewText(R.id.tvRoute,routeShortNameArray.get(routePosition));
    }
    prefs.edit().putString(""String_Node_Str"" + mAppWidgetId,stopNameArray.get(stopPosition));
    views.setTextViewText(R.id.tvStop,stopNameArray.get(stopPosition));
    prefs.edit().commit();
    Intent clickIntent=new Intent(getBaseContext(),TranslocWidgetProvider.class);
    clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    PendingIntent pendingIntent=PendingIntent.getBroadcast(getBaseContext(),mAppWidgetId,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.rlWidgetLayout,pendingIntent);
    appWidgetManager.updateAppWidget(mAppWidgetId,views);
    Log.v(""String_Node_Str"",""String_Node_Str"" + mAppWidgetId);
    Intent resultValue=new Intent();
    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,mAppWidgetId);
    setResult(RESULT_OK,resultValue);
    dialog.dismiss();
    finish();
  }
 else   if (errorCode == 1) {
    dialog.dismiss();
    showAlertDialog(""String_Node_Str"",""String_Node_Str"");
  }
}",0.885665941503505
162193,"public void onItemSelected(AdapterView<?> parent,View view,int pos,long id){
  sSelectRoute.setEnabled(true);
  PopulateStopsTask task=new PopulateStopsTask();
  task.execute();
}","public void onItemSelected(AdapterView<?> parent,View view,int pos,long id){
  sSelectStop.setEnabled(true);
  PopulateStopsTask task=new PopulateStopsTask();
  task.execute();
}",0.9803921568627452
162194,"@Override protected void onPreExecute(){
  int position=sSelectRoute.getSelectedItemPosition();
  routeId=routeIdArray.get(position);
  Log.v(""String_Node_Str"",""String_Node_Str"" + routeId);
  routeLongNameArray.clear();
  routeIdArray.clear();
  routeShortNameArray.clear();
  stopIdArray.clear();
  stopNameArray.clear();
  stopShortNameArray.clear();
}","@Override protected void onPreExecute(){
  for (int i=0; i < routeIdArray.size(); i++) {
    Log.v(""String_Node_Str"",routeLongNameArray.get(i));
    Log.v(""String_Node_Str"",routeIdArray.get(i));
  }
  int position=sSelectRoute.getSelectedItemPosition();
  routeId=routeIdArray.get(position);
  Log.v(""String_Node_Str"",""String_Node_Str"" + routeId);
  stopIdArray.clear();
  stopNameArray.clear();
  stopShortNameArray.clear();
}",0.586427656850192
162195,"@Override protected void onPostExecute(Void result){
  super.onPostExecute(result);
  ArrayAdapter<String> stopArrayAdapter=new ArrayAdapter<String>(getBaseContext(),android.R.layout.simple_list_item_1,stopNameArray);
  sSelectRoute.setAdapter(stopArrayAdapter);
}","@Override protected void onPostExecute(Void result){
  super.onPostExecute(result);
  ArrayAdapter<String> stopArrayAdapter=new ArrayAdapter<String>(getBaseContext(),android.R.layout.simple_list_item_1,stopNameArray);
  sSelectStop.setAdapter(stopArrayAdapter);
}",0.98292220113852
162196,"public void onItemSelected(AdapterView<?> parent,View view,int pos,long id){
  sSelectRoute.setEnabled(true);
  PopulateStopsTask task=new PopulateStopsTask();
  task.execute();
}","public void onItemSelected(AdapterView<?> parent,View view,int pos,long id){
  sSelectStop.setEnabled(true);
  PopulateStopsTask task=new PopulateStopsTask();
  task.execute();
}",0.9803921568627452
162197,"@Override protected void onPreExecute(){
  int position=sSelectRoute.getSelectedItemPosition();
  routeId=routeIdArray.get(position);
  Log.v(""String_Node_Str"",""String_Node_Str"" + routeId);
  routeLongNameArray.clear();
  routeIdArray.clear();
  routeShortNameArray.clear();
  stopIdArray.clear();
  stopNameArray.clear();
  stopShortNameArray.clear();
}","@Override protected void onPreExecute(){
  for (int i=0; i < routeIdArray.size(); i++) {
    Log.v(""String_Node_Str"",routeLongNameArray.get(i));
    Log.v(""String_Node_Str"",routeIdArray.get(i));
  }
  int position=sSelectRoute.getSelectedItemPosition();
  routeId=routeIdArray.get(position);
  Log.v(""String_Node_Str"",""String_Node_Str"" + routeId);
  stopIdArray.clear();
  stopNameArray.clear();
  stopShortNameArray.clear();
}",0.586427656850192
162198,"@Override protected void onPostExecute(Void result){
  super.onPostExecute(result);
  ArrayAdapter<String> stopArrayAdapter=new ArrayAdapter<String>(getBaseContext(),android.R.layout.simple_list_item_1,stopNameArray);
  sSelectRoute.setAdapter(stopArrayAdapter);
}","@Override protected void onPostExecute(Void result){
  super.onPostExecute(result);
  ArrayAdapter<String> stopArrayAdapter=new ArrayAdapter<String>(getBaseContext(),android.R.layout.simple_list_item_1,stopNameArray);
  sSelectStop.setAdapter(stopArrayAdapter);
}",0.98292220113852
162199,"static public RequestAndResponse streamRequestAndResponse(RequestMethod method,Session session,String target,String params[],long range,String md5,boolean needSign,int socketTimeoutOverrideMs) throws VDiskException {
  String curlHeader=""String_Node_Str"";
  if (Logger.DEBUG_MODE) {
    if (session.getWeiboAccessToken() != null) {
      String token=Signature.getWeiboHeader(session.getAppKeyPair(),(WeiboAccessToken)session.getWeiboAccessToken());
      token=token.replace(""String_Node_Str"",""String_Node_Str"");
      curlHeader=""String_Node_Str"" + token;
    }
 else     if (session.getAccessToken() != null) {
      curlHeader=""String_Node_Str"" + session.getAccessToken().mAccessToken;
    }
  }
  HttpUriRequest req=null;
  if (method == RequestMethod.GET) {
    req=new HttpGet(target);
    if (range > 0 && md5 != null) {
      req.setHeader(""String_Node_Str"",""String_Node_Str"" + range + ""String_Node_Str"");
      req.setHeader(""String_Node_Str"",""String_Node_Str"" + md5 + ""String_Node_Str"");
    }
    if (Logger.DEBUG_MODE) {
      Log.i(TAG,""String_Node_Str"" + curlHeader + ""String_Node_Str""+ target+ ""String_Node_Str"");
      Logger.writeHeader(session.getContext());
      Logger.writeToFile(""String_Node_Str"" + curlHeader + ""String_Node_Str""+ target+ ""String_Node_Str"");
    }
  }
 else {
    HttpPost post=new HttpPost(target);
    if (params != null && params.length >= 2) {
      if (params.length % 2 != 0) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      ArrayList<NameValuePair> nvps=new ArrayList<NameValuePair>();
      StringBuilder postParams=new StringBuilder();
      for (int i=0; i < params.length; i+=2) {
        if (params[i + 1] != null) {
          nvps.add(new BasicNameValuePair(params[i],params[i + 1]));
          postParams.append(params[i]).append(""String_Node_Str"").append(params[i + 1]).append(""String_Node_Str"");
        }
      }
      if (Logger.DEBUG_MODE) {
        Log.i(TAG,""String_Node_Str"" + postParams.toString());
        Log.i(TAG,""String_Node_Str"" + curlHeader + ""String_Node_Str""+ postParams.toString()+ ""String_Node_Str""+ target+ ""String_Node_Str"");
        Logger.writeHeader(session.getContext());
        Logger.writeToFile(""String_Node_Str"" + curlHeader + ""String_Node_Str""+ postParams.toString()+ ""String_Node_Str""+ target+ ""String_Node_Str"");
      }
      try {
        post.setEntity(new UrlEncodedFormEntity(nvps,HTTP.UTF_8));
      }
 catch (      UnsupportedEncodingException e) {
        throw new VDiskException(e);
      }
    }
    req=post;
  }
  if (needSign) {
    session.sign(req);
  }
  Log.i(TAG,""String_Node_Str"" + target);
  HttpResponse resp=null;
  if (socketTimeoutOverrideMs >= 0) {
    resp=execute(session,req,socketTimeoutOverrideMs);
  }
 else {
    resp=execute(session,req);
  }
  return new RequestAndResponse(req,resp);
}","static public RequestAndResponse streamRequestAndResponse(RequestMethod method,Session session,String target,String params[],long range,String md5,boolean needSign,int socketTimeoutOverrideMs) throws VDiskException {
  return streamRequestAndResponse(method,session,target,params,range,md5,needSign,socketTimeoutOverrideMs,false);
}",0.1632524424834541
162200,"/** 
 * Creates a URL for a request to the VDisk API.
 * @param host the VDisk host (i.e., api server, content server, or web server).
 * @param apiVersion the API version to use. You should almost always use {@code VDiskAPI.VERSION} for this.
 * @param target the target path, staring with a '/'.
 * @param params any URL params in an array, with the even numbered elements the parameter names and odd numbered elements the values, e.g. <code>new String[] {""path"", ""/Public"", ""locale"", ""en""}</code>.
 * @return a full URL for making a request.
 */
public static String buildURL(String host,int apiVersion,String target,String[] params){
  if (!target.startsWith(""String_Node_Str"")) {
    target=""String_Node_Str"" + target;
  }
  try {
    target=URLEncoder.encode(""String_Node_Str"" + apiVersion + target,""String_Node_Str"");
    target=target.replace(""String_Node_Str"",""String_Node_Str"");
    if (params != null && params.length > 0) {
      target+=""String_Node_Str"" + urlencode(params);
    }
    target=target.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException uce) {
    return null;
  }
  if (!AbstractSession.NEED_HTTPS_UPLOAD) {
    return ""String_Node_Str"" + host + target;
  }
  return ""String_Node_Str"" + host + ""String_Node_Str""+ target;
}","/** 
 * Creates a URL for a request to the VDisk API.
 * @param host the VDisk host (i.e., api server, content server, or web server).
 * @param apiVersion the API version to use. You should almost always use {@code VDiskAPI.VERSION} for this.
 * @param target the target path, staring with a '/'.
 * @param params any URL params in an array, with the even numbered elements the parameter names and odd numbered elements the values, e.g. <code>new String[] {""path"", ""/Public"", ""locale"", ""en""}</code>.
 * @return a full URL for making a request.
 */
public static String buildURL(String host,int apiVersion,String target,String[] params){
  if (!target.startsWith(""String_Node_Str"")) {
    target=""String_Node_Str"" + target;
  }
  try {
    if (apiVersion >= 1) {
      target=URLEncoder.encode(""String_Node_Str"" + apiVersion + target,""String_Node_Str"");
    }
 else {
      target=URLEncoder.encode(target,""String_Node_Str"");
    }
    target=target.replace(""String_Node_Str"",""String_Node_Str"");
    if (params != null && params.length > 0) {
      target+=""String_Node_Str"" + urlencode(params);
    }
    target=target.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException uce) {
    return null;
  }
  if (!AbstractSession.NEED_HTTPS_UPLOAD) {
    return ""String_Node_Str"" + host + target;
  }
  return ""String_Node_Str"" + host + ""String_Node_Str""+ target;
}",0.9614136314460872
162201,"/** 
 * Downloads a file from VDisk. Returns a   {@link VDiskInputStream} via whichthe file contents can be read from the network. You must close the stream when you're done with it to release all resources. You can also cancel the download by closing the returned {@link VDiskInputStream} at any time.
 * @param path the VDisk path to the file.
 * @param rev the revision (from the file's metadata) of the file to download, or null to get the latest version.
 * @return a {@link VDiskInputStream} from which to read the file contents.The contents are retrieved from the network and not stored locally.
 * @throws VDiskUnlinkedException if you have not set an access token pair on the session, or if the user has revoked access.
 * @throws VDiskServerException if the server responds with an error code. See the constants in  {@link VDiskServerException} for the meaning of each errorcode. The most common error codes you can expect from this call are 404 (path not found) and 400 (bad rev).
 * @throws VDiskIOException if any network-related error occurs.
 * @throws VDiskException for any other unknown errors. This is also a superclass of all other VDisk exceptions, so you may want to only catch this exception which signals that some kind of error occurred.
 */
public VDiskInputStream getFileStream(String path,String rev,File targetFile) throws VDiskException {
  VDiskFileInfo fileInfo=getVDiskFileInfo(path,rev);
  if (fileInfo != null) {
    Entry metadata=fileInfo.metadata;
    String location=fileInfo.downloadURL;
    Log.d(TAG,""String_Node_Str"" + location);
    String filename=targetFile.getName().replace(DOWNLOAD_TEMP_FILE_SUFFIX,""String_Node_Str"");
    File file=new File(targetFile.getParent(),filename);
    if (file.exists() && file.length() == metadata.bytes) {
      targetFile.delete();
      throw new VDiskDownloadFileExistException();
    }
    RequestAndResponse rp=RESTUtility.streamRequestAndResponse(RequestMethod.GET,session,location,null,getRange(targetFile),metadata.md5,false,-1);
    return new VDiskInputStream(rp.request,rp.response,metadata,location);
  }
  return null;
}","/** 
 * Downloads a file from VDisk. Returns a   {@link VDiskInputStream} via whichthe file contents can be read from the network. You must close the stream when you're done with it to release all resources. You can also cancel the download by closing the returned {@link VDiskInputStream} at any time.
 * @param path the VDisk path to the file.
 * @param rev the revision (from the file's metadata) of the file to download, or null to get the latest version.
 * @return a {@link VDiskInputStream} from which to read the file contents.The contents are retrieved from the network and not stored locally.
 * @throws VDiskUnlinkedException if you have not set an access token pair on the session, or if the user has revoked access.
 * @throws VDiskServerException if the server responds with an error code. See the constants in  {@link VDiskServerException} for the meaning of each errorcode. The most common error codes you can expect from this call are 404 (path not found) and 400 (bad rev).
 * @throws VDiskIOException if any network-related error occurs.
 * @throws VDiskException for any other unknown errors. This is also a superclass of all other VDisk exceptions, so you may want to only catch this exception which signals that some kind of error occurred.
 */
public VDiskInputStream getFileStream(String path,String rev,File targetFile) throws VDiskException {
  VDiskFileInfo fileInfo=getVDiskFileInfo(path,rev);
  if (fileInfo != null) {
    Entry metadata=fileInfo.metadata;
    String location=fileInfo.downloadURL;
    Log.d(TAG,""String_Node_Str"" + location);
    String filename=targetFile.getName().replace(DOWNLOAD_TEMP_FILE_SUFFIX,""String_Node_Str"");
    File file=new File(targetFile.getParent(),filename);
    if (file.exists() && file.length() == metadata.bytes) {
      targetFile.delete();
      throw new VDiskDownloadFileExistException();
    }
    RequestAndResponse rp=RESTUtility.streamRequestAndResponse(RequestMethod.GET,session,location,null,getRange(targetFile),metadata.md5,false,-1,true);
    return new VDiskInputStream(rp.request,rp.response,metadata,location);
  }
  return null;
}",0.9988176873965476
162202,"/** 
 */
@Override public void initialize(String rootResourcePath) throws IOException {
  try {
    List<String> discoveredResources=ResourceScanner.getInstance().getResources(rootResourcePath,Pattern.compile(""String_Node_Str""),getClass().getClassLoader());
    if (discoveredResources.isEmpty()) {
      throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + rootResourcePath + ""String_Node_Str"");
    }
    Collections.sort(discoveredResources,COMPARATOR);
    resources=new ArrayList<String>();
    for (    String resource : discoveredResources) {
      System.out.println(""String_Node_Str"" + resource + ""String_Node_Str"");
      if (resource.endsWith(""String_Node_Str"")) {
        resource=resource.substring(resource.indexOf(rootResourcePath));
      }
      resources.add(resource);
    }
  }
 catch (  URISyntaxException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + rootResourcePath + ""String_Node_Str"",e);
  }
}","/** 
 */
@Override public void initialize(String rootResourcePath) throws IOException {
  try {
    List<String> discoveredResources=ResourceScanner.getInstance().getResources(rootResourcePath,Pattern.compile(""String_Node_Str""),getClass().getClassLoader());
    if (discoveredResources.isEmpty()) {
      throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + rootResourcePath + ""String_Node_Str"");
    }
    Collections.sort(discoveredResources,COMPARATOR);
    resources=new ArrayList<String>();
    for (    String resource : discoveredResources) {
      System.out.println(""String_Node_Str"" + resource + ""String_Node_Str"");
      if (resource.endsWith(""String_Node_Str"")) {
        resource=resource.substring(resource.indexOf(rootResourcePath));
        if (resource.contains(""String_Node_Str"")) {
          continue;
        }
      }
      resources.add(resource);
    }
  }
 catch (  URISyntaxException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + rootResourcePath + ""String_Node_Str"",e);
  }
}",0.9598039215686276
162203,"/** 
 * Performs the actual mutation and then updates the recorded schema version
 */
@Override public final void mutate(Context context) throws MutagenException {
  performMutation(context);
  int version=getResultingState().getID();
  try {
    MutationBatch batch=getKeyspace().prepareMutationBatch();
    batch.withRow(CassandraSubject.VERSION_CF,CassandraSubject.ROW_KEY).putColumn(CassandraSubject.VERSION_COLUMN,version);
    batch.execute();
  }
 catch (  ConnectionException e) {
    throw new MutagenException(""String_Node_Str"" + ""String_Node_Str"" + version + ""String_Node_Str"",e);
  }
}","/** 
 * Performs the actual mutation and then updates the recorded schema version
 */
@Override public final void mutate(Context context) throws MutagenException {
  performMutation(context);
  int version=getResultingState().getID();
  String change=getChangeSummary();
  if (change == null) {
    change=""String_Node_Str"";
  }
  String changeHash=md5String(change);
  try {
    MutationBatch batch=getKeyspace().prepareMutationBatch();
    batch.withRow(CassandraSubject.VERSION_CF,CassandraSubject.ROW_KEY).putColumn(CassandraSubject.VERSION_COLUMN,version);
    batch.withRow(CassandraSubject.VERSION_CF,String.format(""String_Node_Str"",version)).putColumn(""String_Node_Str"",change).putColumn(""String_Node_Str"",changeHash);
    batch.execute();
  }
 catch (  ConnectionException e) {
    throw new MutagenException(""String_Node_Str"" + ""String_Node_Str"" + version + ""String_Node_Str"",e);
  }
}",0.8002680965147453
162204,"/** 
 */
private void loadCQLStatements(String resourceName){
  String source;
  try {
    source=loadResource(resourceName);
  }
 catch (  IOException e) {
    throw new MutagenException(""String_Node_Str"" + resourceName + ""String_Node_Str"",e);
  }
  if (source == null) {
    return;
  }
  String[] lines=source.split(""String_Node_Str"");
  StringBuilder statement=new StringBuilder();
  for (int i=0; i < lines.length; i++) {
    int index;
    String line=lines[i];
    String trimmedLine=line.trim();
    if (trimmedLine.startsWith(""String_Node_Str"") || trimmedLine.startsWith(""String_Node_Str"")) {
    }
 else     if ((index=line.indexOf(""String_Node_Str"")) != -1) {
      statement.append(line.substring(0,index + 1));
      statements.add(statement.toString());
      if (line.length() > index + 1) {
        statement=new StringBuilder(line.substring(index + 1));
      }
 else {
        statement=new StringBuilder();
      }
    }
 else {
      statement.append(""String_Node_Str"").append(line);
    }
  }
}","/** 
 */
private void loadCQLStatements(String resourceName){
  try {
    source=loadResource(resourceName);
  }
 catch (  IOException e) {
    throw new MutagenException(""String_Node_Str"" + resourceName + ""String_Node_Str"",e);
  }
  if (source == null) {
    return;
  }
  String[] lines=source.split(""String_Node_Str"");
  StringBuilder statement=new StringBuilder();
  for (int i=0; i < lines.length; i++) {
    int index;
    String line=lines[i];
    String trimmedLine=line.trim();
    if (trimmedLine.startsWith(""String_Node_Str"") || trimmedLine.startsWith(""String_Node_Str"")) {
    }
 else     if ((index=line.indexOf(""String_Node_Str"")) != -1) {
      statement.append(""String_Node_Str"").append(line.substring(0,index + 1));
      statements.add(statement.toString());
      if (line.length() > index + 1) {
        statement=new StringBuilder(line.substring(index + 1));
      }
 else {
        statement=new StringBuilder();
      }
    }
 else {
      statement.append(""String_Node_Str"").append(line);
    }
  }
}",0.978911230995586
162205,"/** 
 */
@Override public Plan.Result<Integer> mutate(Keyspace keyspace){
  CassandraCoordinator coordinator=new CassandraCoordinator(keyspace);
  CassandraSubject subject=new CassandraSubject(keyspace);
  List<Mutation<Integer>> mutations=new ArrayList<Mutation<Integer>>();
  Planner<Integer> planner=new CassandraPlanner(keyspace,getResources());
  Plan<Integer> plan=planner.getPlan(subject,coordinator);
  Plan.Result<Integer> result=plan.execute();
  return result;
}","/** 
 */
@Override public Plan.Result<Integer> mutate(Keyspace keyspace){
synchronized (System.class) {
    CassandraCoordinator coordinator=new CassandraCoordinator(keyspace);
    CassandraSubject subject=new CassandraSubject(keyspace);
    Planner<Integer> planner=new CassandraPlanner(keyspace,getResources());
    Plan<Integer> plan=planner.getPlan(subject,coordinator);
    Plan.Result<Integer> result=plan.execute();
    return result;
  }
}",0.5565217391304348
162206,"@Override public int compare(String path1,String path2){
  int index1=path1.lastIndexOf(""String_Node_Str"");
  int index2=path2.lastIndexOf(""String_Node_Str"");
  String file1=path1.substring(index1 + 1);
  String file2=path2.substring(index2 + 1);
  index1=file1.lastIndexOf(""String_Node_Str"");
  index2=file2.lastIndexOf(""String_Node_Str"");
  file1=file1.substring(0,index1);
  file2=file2.substring(0,index2);
  return file1.compareTo(file2);
}","@Override public int compare(String path1,String path2){
  final String origPath1=path1;
  final String origPath2=path2;
  try {
    int index1=path1.lastIndexOf(""String_Node_Str"");
    int index2=path2.lastIndexOf(""String_Node_Str"");
    String file1;
    if (index1 != -1) {
      file1=path1.substring(index1 + 1);
    }
 else {
      file1=path1;
    }
    String file2;
    if (index2 != -1) {
      file2=path2.substring(index2 + 1);
    }
 else {
      file2=path2;
    }
    index1=file1.lastIndexOf(""String_Node_Str"");
    index2=file2.lastIndexOf(""String_Node_Str"");
    if (index1 > 1) {
      file1=file1.substring(0,index1);
    }
    if (index2 > 1) {
      file2=file2.substring(0,index2);
    }
    return file1.compareTo(file2);
  }
 catch (  StringIndexOutOfBoundsException e) {
    throw new StringIndexOutOfBoundsException(e.getMessage() + ""String_Node_Str"" + origPath1+ ""String_Node_Str""+ origPath2+ ""String_Node_Str"");
  }
}",0.6225736879942487
162207,"/** 
 */
@Override public void initialize(String rootResourcePath) throws IOException {
  try {
    List<String> discoveredResources=ResourceScanner.getInstance().getResources(rootResourcePath,Pattern.compile(""String_Node_Str""),getClass().getClassLoader());
    Collections.sort(discoveredResources,COMPARATOR);
    resources=new ArrayList<String>();
    for (    String resource : discoveredResources) {
      System.out.println(""String_Node_Str"" + resource + ""String_Node_Str"");
      if (resource.endsWith(""String_Node_Str"")) {
        resource=resource.substring(resource.indexOf(rootResourcePath));
      }
      resources.add(resource);
    }
  }
 catch (  URISyntaxException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + rootResourcePath + ""String_Node_Str"",e);
  }
}","/** 
 */
@Override public void initialize(String rootResourcePath) throws IOException {
  try {
    List<String> discoveredResources=ResourceScanner.getInstance().getResources(rootResourcePath,Pattern.compile(""String_Node_Str""),getClass().getClassLoader());
    if (discoveredResources.isEmpty()) {
      throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + rootResourcePath + ""String_Node_Str"");
    }
    Collections.sort(discoveredResources,COMPARATOR);
    resources=new ArrayList<String>();
    for (    String resource : discoveredResources) {
      System.out.println(""String_Node_Str"" + resource + ""String_Node_Str"");
      if (resource.endsWith(""String_Node_Str"")) {
        resource=resource.substring(resource.indexOf(rootResourcePath));
      }
      resources.add(resource);
    }
  }
 catch (  URISyntaxException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + rootResourcePath + ""String_Node_Str"",e);
  }
}",0.9067560022333891
162208,"@OnClick(R.id.btn_start_simple_polling) public void onStartSimplePollingClicked(){
  _setupLogger();
  _log(String.format(""String_Node_Str"",_counter));
  _subscriptions.add(Observable.create(new Observable.OnSubscribe<String>(){
    @Override public void call(    final Subscriber<? super String> subscriber){
      Subscription subscription=_worker.schedulePeriodically(new Action0(){
        @Override public void call(){
          subscriber.onNext(_doNetworkCallAndGetStringResult());
        }
      }
,INITIAL_DELAY,POLLING_INTERVAL,TimeUnit.MILLISECONDS);
      subscriber.add(subscription);
    }
  }
).take(10).subscribe(new Action1<String>(){
    @Override public void call(    String s){
      _log(String.format(""String_Node_Str"",s));
    }
  }
));
}","@OnClick(R.id.btn_start_simple_polling) public void onStartSimplePollingClicked(){
  _setupLogger();
  _subscriptions.add(Observable.interval(INITIAL_DELAY,POLLING_INTERVAL,TimeUnit.MILLISECONDS).map(new Func1<Long,String>(){
    @Override public String call(    Long heartBeat){
      return _doNetworkCallAndGetStringResult();
    }
  }
).take(5).doOnSubscribe(new Action0(){
    @Override public void call(){
      _log(String.format(""String_Node_Str"",_counter));
    }
  }
).subscribe(new Action1<String>(){
    @Override public void call(    String s){
      _log(String.format(""String_Node_Str"",s));
    }
  }
));
}",0.3774403470715835
162209,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  Timber.plant(new Timber.DebugTree());
  if (savedInstanceState == null) {
    getSupportFragmentManager().beginTransaction().addToBackStack(this.toString()).replace(R.id.activity_main,new MainFragment(),this.toString()).commit();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (savedInstanceState == null) {
    getSupportFragmentManager().beginTransaction().replace(android.R.id.content,new MainFragment(),this.toString()).commit();
  }
}",0.6780185758513931
162210,"@OnClick(R.id.btn_demo_debounce) public void demoThrottling(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(this.toString()).replace(R.id.activity_main,new DebounceSearchEmitterFragment(),this.toString()).commit();
}","@OnClick(R.id.btn_demo_debounce) public void demoThrottling(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(DebounceSearchEmitterFragment.class.toString()).replace(android.R.id.content,new DebounceSearchEmitterFragment(),DebounceSearchEmitterFragment.class.toString()).commit();
}",0.701067615658363
162211,"public void demoTimeout(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(this.toString()).replace(R.id.activity_main,new TimeoutDemoFragment(),this.toString()).commit();
}","public void demoTimeout(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(TimeoutDemoFragment.class.toString()).replace(android.R.id.content,new TimeoutDemoFragment(),TimeoutDemoFragment.class.toString()).commit();
}",0.72
162212,"@OnClick(R.id.btn_demo_timing) public void demoTimerIntervalDelays(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(this.toString()).replace(R.id.activity_main,new TimingDemoFragment(),this.toString()).commit();
}","@OnClick(R.id.btn_demo_timing) public void demoTimerIntervalDelays(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(TimingDemoFragment.class.toString()).replace(android.R.id.content,new TimingDemoFragment(),TimingDemoFragment.class.toString()).commit();
}",0.7669172932330827
162213,"@OnClick(R.id.btn_demo_schedulers) public void demoConcurrencyWithSchedulers(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(this.toString()).replace(R.id.activity_main,new ConcurrencyWithSchedulersDemoFragment(),this.toString()).commit();
}","@OnClick(R.id.btn_demo_schedulers) public void demoConcurrencyWithSchedulers(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(ConcurrencyWithSchedulersDemoFragment.class.getName()).replace(android.R.id.content,new ConcurrencyWithSchedulersDemoFragment(),ConcurrencyWithSchedulersDemoFragment.class.getName()).commit();
}",0.7507987220447284
162214,"@OnClick(R.id.btn_demo_double_binding_textview) public void demoDoubleBindingWithPublishSubject(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(this.toString()).replace(R.id.activity_main,new DoubleBindingTextViewFragment(),this.toString()).commit();
}","@OnClick(R.id.btn_demo_double_binding_textview) public void demoDoubleBindingWithPublishSubject(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(DoubleBindingTextViewFragment.class.toString()).replace(android.R.id.content,new DoubleBindingTextViewFragment(),DoubleBindingTextViewFragment.class.toString()).commit();
}",0.8391167192429022
162215,"@OnClick(R.id.btn_demo_buffer) public void demoBuffer(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(this.toString()).replace(R.id.activity_main,new BufferDemoFragment(),this.toString()).commit();
}","@OnClick(R.id.btn_demo_buffer) public void demoBuffer(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(BufferDemoFragment.class.toString()).replace(android.R.id.content,new BufferDemoFragment(),BufferDemoFragment.class.toString()).commit();
}",0.7549407114624506
162216,"@OnClick(R.id.btn_demo_rxbus) public void demoRxBus(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(this.toString()).replace(R.id.activity_main,new RxBusDemoFragment(),this.toString()).commit();
}","@OnClick(R.id.btn_demo_rxbus) public void demoRxBus(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(RxBusDemoFragment.class.toString()).replace(android.R.id.content,new RxBusDemoFragment(),RxBusDemoFragment.class.toString()).commit();
}",0.7349397590361446
162217,"@OnClick(R.id.btn_demo_retrofit) public void demoRetrofitCalls(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(this.toString()).replace(R.id.activity_main,new RetrofitFragment(),this.toString()).commit();
}","@OnClick(R.id.btn_demo_retrofit) public void demoRetrofitCalls(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(RetrofitFragment.class.toString()).replace(android.R.id.content,new RetrofitFragment(),RetrofitFragment.class.toString()).commit();
}",0.748062015503876
162218,"@OnClick(R.id.btn_demo_pseudo_cache) public void pseudoCacheDemo(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(this.toString()).replace(R.id.activity_main,new PseudoCacheMergeFragment(),this.toString()).commit();
}","@OnClick(R.id.btn_demo_pseudo_cache) public void pseudoCacheDemo(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(PseudoCacheMergeFragment.class.toString()).replace(android.R.id.content,new PseudoCacheMergeFragment(),PseudoCacheMergeFragment.class.toString()).commit();
}",0.8333333333333334
162219,"@OnClick(R.id.btn_demo_exponential_backoff) public void demoExponentialBackoff(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(this.toString()).replace(R.id.activity_main,new ExponentialBackoffFragment(),this.toString()).commit();
}","@OnClick(R.id.btn_demo_exponential_backoff) public void demoExponentialBackoff(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(ExponentialBackoffFragment.class.toString()).replace(android.R.id.content,new ExponentialBackoffFragment(),ExponentialBackoffFragment.class.toString()).commit();
}",0.8367346938775511
162220,"@OnClick(R.id.btn_demo_form_validation_combinel) public void formValidation(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(this.toString()).replace(R.id.activity_main,new FormValidationCombineLatestFragment(),this.toString()).commit();
}","@OnClick(R.id.btn_demo_form_validation_combinel) public void formValidation(){
  getActivity().getSupportFragmentManager().beginTransaction().addToBackStack(FormValidationCombineLatestFragment.class.toString()).replace(android.R.id.content,new FormValidationCombineLatestFragment(),FormValidationCombineLatestFragment.class.toString()).commit();
}",0.8155339805825242
162221,"@Override public void onCreate(){
  super.onCreate();
  _instance=(MyApp)getApplicationContext();
  _refWatcher=LeakCanary.install(this);
}","@Override public void onCreate(){
  super.onCreate();
  _instance=(MyApp)getApplicationContext();
  _refWatcher=LeakCanary.install(this);
  Timber.plant(new Timber.DebugTree());
}",0.8742138364779874
162222,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  Timber.plant(new Timber.DebugTree());
  getSupportFragmentManager().beginTransaction().addToBackStack(this.toString()).replace(R.id.activity_main,new MainFragment(),this.toString()).commit();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  Timber.plant(new Timber.DebugTree());
  if (savedInstanceState == null) {
    getSupportFragmentManager().beginTransaction().addToBackStack(this.toString()).replace(R.id.activity_main,new MainFragment(),this.toString()).commit();
  }
}",0.9413407821229052
162223,"private boolean canInteractWithFragments(){
  tvShowFragment=(TvShowFragment)getFragmentManager().findFragmentById(R.id.f_tv_show);
  tvShowDraggableFragment=(TvShowDraggableFragment)getFragmentManager().findFragmentById(R.id.f_tv_show_draggable);
  ;
  return tvShowDraggableFragment != null || tvShowFragment != null;
}","private boolean canInteractWithFragments(){
  tvShowFragment=(TvShowFragment)getFragmentManager().findFragmentById(R.id.f_tv_show);
  tvShowDraggableFragment=(TvShowDraggableFragment)getFragmentManager().findFragmentById(R.id.f_tv_show_draggable);
  return tvShowDraggableFragment != null || tvShowFragment != null;
}",0.9937304075235108
162224,"@Override public void removeAll(Collection<TvShow> tvShows){
  this.tvShows.addAll(tvShows);
}","@Override public void removeAll(Collection<TvShow> tvShows){
  this.tvShows.removeAll(tvShows);
}",0.9528795811518324
162225,"public int search(int input[],int search){
  int low=0;
  int high=input.length - 1;
  int mid=0;
  while (low <= high) {
    mid=(low + high) / 2;
    if (input[mid] == search) {
      return mid;
    }
 else     if (input[mid] < search) {
      low=mid + 1;
    }
 else {
      high=mid - 1;
    }
  }
  return -1;
}","public int search(final int input[],int search){
  int low=0;
  int high=input.length - 1;
  int mid;
  while (low <= high) {
    mid=low + ((high - low) / 2);
    if (input[mid] == search) {
      return mid;
    }
 else     if (input[mid] < search) {
      low=mid + 1;
    }
 else {
      high=mid - 1;
    }
  }
  return -1;
}",0.9598765432098766
162226,"public static void main(String args[]){
  BinarySearch bs=new BinarySearch();
  int arr1[]={1,2,4,5,7,8};
  System.out.println(bs.search(arr1,-1));
  System.out.println(bs.search(arr1,1));
  System.out.println(bs.search(arr1,8));
  System.out.println(bs.search(arr1,2));
}","public static void main(String args[]){
  BinarySearch bSearch=new BinarySearch();
  final int arr1[]={1,2,4,5,7,8};
  System.out.println(bSearch.search(arr1,-1));
  System.out.println(bSearch.search(arr1,1));
  System.out.println(bSearch.search(arr1,8));
  System.out.println(bSearch.search(arr1,2));
}",0.7895652173913044
162227,"public static void main(String args[]){
  int[] input={4,3,13,2,9,7};
  MaximumGap mg=new MaximumGap();
  System.out.println(mg.maxGap(input));
}","public static void main(String args[]){
  int[] input={4,3,13,2,9,7};
  MaximumGap mg=new MaximumGap();
  System.out.println(mg.maximumGap(input));
}",0.9863945578231292
162228,"public void build(){
  root=SuffixNode.createNode(1,new End(0));
  root.index=-1;
  active=new Active(root);
  this.end=new End(-1);
  for (int i=0; i < input.length; i++) {
    startPhase(i);
  }
  setIndexUsingDfs(root,0,input.length);
}","public void build(){
  root=SuffixNode.createNode(1,new End(0));
  root.index=-1;
  active=new Active(root);
  this.end=new End(-1);
  for (int i=0; i < input.length; i++) {
    startPhase(i);
  }
  if (remainingSuffixCount != 0) {
    System.out.print(""String_Node_Str"");
  }
  setIndexUsingDfs(root,0,input.length);
}",0.8566308243727598
162229,"private char nextChar(int i) throws EndOfPathException {
  SuffixNode node=selectNode();
  if (diff(node) >= active.activeLength) {
    return input[active.activeNode.child[input[active.activeEdge]].start + active.activeLength];
  }
  if (diff(node) + 1 == active.activeLength) {
    if (node.child[input[i]] != null) {
      return input[i];
    }
  }
 else {
    active.activeNode=node;
    active.activeLength=active.activeLength - diff(node) - 1;
    active.activeEdge=active.activeEdge + diff(node) + 1;
    return input[active.activeNode.child[input[active.activeEdge]].start + active.activeLength];
  }
  throw new EndOfPathException();
}","private char nextChar(int i) throws EndOfPathException {
  SuffixNode node=selectNode();
  if (diff(node) >= active.activeLength) {
    return input[active.activeNode.child[input[active.activeEdge]].start + active.activeLength];
  }
  if (diff(node) + 1 == active.activeLength) {
    if (node.child[input[i]] != null) {
      return input[i];
    }
  }
 else {
    active.activeNode=node;
    active.activeLength=active.activeLength - diff(node) - 1;
    active.activeEdge=active.activeEdge + diff(node) + 1;
    return nextChar(i);
  }
  throw new EndOfPathException();
}",0.9219391947411668
162230,"private void startPhase(int i){
  SuffixNode lastCreatedInternalNode=null;
  end.end++;
  remainingSuffixCount++;
  while (remainingSuffixCount > 0) {
    if (active.activeLength == 0) {
      if (selectNode(i) != null) {
        active.activeEdge=selectNode(i).start;
        active.activeLength++;
        break;
      }
 else {
        root.child[input[i]]=SuffixNode.createNode(i,end);
        remainingSuffixCount--;
      }
    }
 else {
      try {
        char ch=nextChar(i);
        if (ch == input[i]) {
          if (lastCreatedInternalNode != null) {
            lastCreatedInternalNode.suffixLink=selectNode();
          }
          walkDown(i);
          break;
        }
 else {
          SuffixNode node=selectNode();
          int oldStart=node.start;
          node.start=node.start + active.activeLength;
          SuffixNode newInternalNode=SuffixNode.createNode(oldStart,new End(oldStart + active.activeLength - 1));
          SuffixNode newLeafNode=SuffixNode.createNode(i,this.end);
          newInternalNode.child[input[newInternalNode.start + active.activeLength]]=node;
          newInternalNode.child[input[i]]=newLeafNode;
          newInternalNode.index=-1;
          active.activeNode.child[input[newInternalNode.start]]=newInternalNode;
          if (lastCreatedInternalNode != null) {
            lastCreatedInternalNode.suffixLink=newInternalNode;
          }
          lastCreatedInternalNode=newInternalNode;
          newInternalNode.suffixLink=root;
          if (active.activeNode != root) {
            active.activeNode=active.activeNode.suffixLink;
          }
 else {
            active.activeEdge=active.activeEdge + 1;
            active.activeLength--;
          }
          remainingSuffixCount--;
        }
      }
 catch (      EndOfPathException e) {
        SuffixNode node=selectNode();
        node.child[input[i]]=SuffixNode.createNode(i,end);
        if (active.activeNode != root) {
          active.activeNode=active.activeNode.suffixLink;
        }
 else {
          active.activeEdge=active.activeEdge + 1;
          active.activeLength--;
        }
        remainingSuffixCount--;
      }
    }
  }
}","private void startPhase(int i){
  SuffixNode lastCreatedInternalNode=null;
  end.end++;
  remainingSuffixCount++;
  while (remainingSuffixCount > 0) {
    if (active.activeLength == 0) {
      if (selectNode(i) != null) {
        active.activeEdge=selectNode(i).start;
        active.activeLength++;
        break;
      }
 else {
        root.child[input[i]]=SuffixNode.createNode(i,end);
        remainingSuffixCount--;
      }
    }
 else {
      try {
        char ch=nextChar(i);
        if (ch == input[i]) {
          if (lastCreatedInternalNode != null) {
            lastCreatedInternalNode.suffixLink=selectNode();
          }
          walkDown(i);
          break;
        }
 else {
          SuffixNode node=selectNode();
          int oldStart=node.start;
          node.start=node.start + active.activeLength;
          SuffixNode newInternalNode=SuffixNode.createNode(oldStart,new End(oldStart + active.activeLength - 1));
          SuffixNode newLeafNode=SuffixNode.createNode(i,this.end);
          newInternalNode.child[input[newInternalNode.start + active.activeLength]]=node;
          newInternalNode.child[input[i]]=newLeafNode;
          newInternalNode.index=-1;
          active.activeNode.child[input[newInternalNode.start]]=newInternalNode;
          if (lastCreatedInternalNode != null) {
            lastCreatedInternalNode.suffixLink=newInternalNode;
          }
          lastCreatedInternalNode=newInternalNode;
          newInternalNode.suffixLink=root;
          if (active.activeNode != root) {
            active.activeNode=active.activeNode.suffixLink;
          }
 else {
            active.activeEdge=active.activeEdge + 1;
            active.activeLength--;
          }
          remainingSuffixCount--;
        }
      }
 catch (      EndOfPathException e) {
        SuffixNode node=selectNode();
        node.child[input[i]]=SuffixNode.createNode(i,end);
        if (lastCreatedInternalNode != null) {
          lastCreatedInternalNode.suffixLink=node;
        }
        lastCreatedInternalNode=node;
        if (active.activeNode != root) {
          active.activeNode=active.activeNode.suffixLink;
        }
 else {
          active.activeEdge=active.activeEdge + 1;
          active.activeLength--;
        }
        remainingSuffixCount--;
      }
    }
  }
}",0.96730855351545
162231,"public boolean partition(int arr[]){
  int sum=0;
  for (int i=0; i < arr.length; i++) {
    sum+=arr[i];
  }
  if (sum % 2 != 0) {
    return false;
  }
  sum=sum / 2;
  boolean[][] T=new boolean[arr.length + 1][sum + 1];
  for (int i=0; i <= arr.length; i++) {
    T[i][0]=true;
  }
  for (int i=1; i <= arr.length; i++) {
    for (int j=1; j <= sum; j++) {
      if (j - arr[i - 1] >= 0) {
        T[i][j]=T[i - 1][j - arr[i - 1]] || T[i - 1][j];
      }
    }
  }
  return T[arr.length][sum];
}","public boolean partition(int arr[]){
  int sum=0;
  for (int i=0; i < arr.length; i++) {
    sum+=arr[i];
  }
  if (sum % 2 != 0) {
    return false;
  }
  sum=sum / 2;
  boolean[][] T=new boolean[arr.length + 1][sum + 1];
  for (int i=0; i <= arr.length; i++) {
    T[i][0]=true;
  }
  for (int i=1; i <= arr.length; i++) {
    for (int j=1; j <= sum; j++) {
      if (j - arr[i - 1] >= 0) {
        T[i][j]=T[i - 1][j - arr[i - 1]] || T[i - 1][j];
      }
 else {
        T[i][j]=T[i - 1][j];
      }
    }
  }
  return T[arr.length][sum];
}",0.956772334293948
162232,"public static void main(String args[]){
  SubsetSum ss=new SubsetSum();
  int arr[]={1,3,5,5,2,1,1,6};
  boolean r=ss.partition(arr);
  System.out.print(r);
}","public static void main(String args[]){
  SubsetSum ss=new SubsetSum();
  int arr[]={1,3,5,5,2,1,1,6};
  System.out.println(ss.partition(arr));
  int arr1[]={2,3,7,8};
  System.out.print(ss.subsetSum(arr1,11));
}",0.7135135135135136
162233,"private KadaneResult kadane(int arr[]){
  int max=0;
  int maxStart=-1;
  int maxEnd=-1;
  int currentStart=0;
  int maxSoFar=0;
  for (int i=0; i < arr.length; i++) {
    maxSoFar+=arr[i];
    if (maxSoFar < 0) {
      maxSoFar=0;
      currentStart=i + 1;
    }
    if (max < maxSoFar) {
      maxStart=currentStart;
      maxEnd=i;
      max=maxSoFar;
    }
  }
  return new KadaneResult(maxSoFar,maxStart,maxEnd);
}","private KadaneResult kadane(int arr[]){
  int max=0;
  int maxStart=-1;
  int maxEnd=-1;
  int currentStart=0;
  int maxSoFar=0;
  for (int i=0; i < arr.length; i++) {
    maxSoFar+=arr[i];
    if (maxSoFar < 0) {
      maxSoFar=0;
      currentStart=i + 1;
    }
    if (max < maxSoFar) {
      maxStart=currentStart;
      maxEnd=i;
      max=maxSoFar;
    }
  }
  return new KadaneResult(max,maxStart,maxEnd);
}",0.9939975990396158
162234,"private int rangeMinimumQueryLazy(int segmentTree[],int lazy[],int qlow,int qhigh,int low,int high,int pos){
  if (qlow > high || qhigh < low) {
    return Integer.MAX_VALUE;
  }
  if (lazy[pos] != 0) {
    segmentTree[pos]+=lazy[pos];
    if (low != high) {
      segmentTree[2 * pos + 1]+=lazy[pos];
      segmentTree[2 * pos + 2]+=lazy[pos];
    }
    lazy[pos]=0;
  }
  if (qlow <= low && qhigh >= high) {
    return segmentTree[pos];
  }
  int mid=(low + high) / 2;
  return Math.min(rangeMinimumQuery(segmentTree,low,mid,qlow,qhigh,2 * pos + 1),rangeMinimumQuery(segmentTree,mid + 1,high,qlow,qhigh,2 * pos + 2));
}","private int rangeMinimumQueryLazy(int segmentTree[],int lazy[],int qlow,int qhigh,int low,int high,int pos){
  if (low > high) {
    return Integer.MAX_VALUE;
  }
  if (lazy[pos] != 0) {
    segmentTree[pos]+=lazy[pos];
    if (low != high) {
      lazy[2 * pos + 1]+=lazy[pos];
      lazy[2 * pos + 2]+=lazy[pos];
    }
    lazy[pos]=0;
  }
  if (qlow > high || qhigh < low) {
    return Integer.MAX_VALUE;
  }
  if (qlow <= low && qhigh >= high) {
    return segmentTree[pos];
  }
  int mid=(low + high) / 2;
  return Math.min(rangeMinimumQueryLazy(segmentTree,lazy,qlow,qhigh,low,mid,2 * pos + 1),rangeMinimumQueryLazy(segmentTree,lazy,qlow,qhigh,mid + 1,high,2 * pos + 2));
}",0.8630769230769231
162235,"/** 
 * Creates a new segment tree based off input array.
 */
public int[] createSegmentTree(int input[]){
  NextPowerOf2 np2=new NextPowerOf2();
  int nextPowOfTwo=np2.nextPowerOf2(input.length);
  int segmentTree[]=new int[nextPowOfTwo * 2 - 1];
  for (int i=0; i < segmentTree.length; i++) {
    segmentTree[i]=Integer.MAX_VALUE;
  }
  constructMinSegmentTreeTree(segmentTree,input,0,input.length - 1,0);
  return segmentTree;
}","/** 
 * Creates a new segment tree based off input array.
 */
public int[] createSegmentTree(int input[]){
  NextPowerOf2 np2=new NextPowerOf2();
  int nextPowOfTwo=np2.nextPowerOf2(input.length);
  int segmentTree[]=new int[nextPowOfTwo * 2 - 1];
  for (int i=0; i < segmentTree.length; i++) {
    segmentTree[i]=Integer.MAX_VALUE;
  }
  constructMinSegmentTree(segmentTree,input,0,input.length - 1,0);
  return segmentTree;
}",0.9953379953379954
162236,"/** 
 * Segment tree for given example -1 0                -1 0       2         1         -1 0    3   4   2     1   6    max   max 
 */
public static void main(String args[]){
}","public static void main(String args[]){
}",0.3761467889908257
162237,"private void updateSegmentTreeRangeLazy(int segmentTree[],int lazy[],int startRange,int endRange,int delta,int low,int high,int pos){
  if (low > high || startRange > high || endRange < low) {
    return;
  }
  if (lazy[pos] != 0) {
    if (low != high) {
      segmentTree[2 * pos + 1]+=lazy[pos];
      segmentTree[2 * pos + 2]+=lazy[pos];
    }
    lazy[pos]=0;
  }
  if (startRange <= low && endRange >= high) {
    segmentTree[pos]+=delta;
    if (low != high) {
      lazy[2 * pos + 1]+=delta;
      lazy[2 * pos + 2]+=delta;
    }
    return;
  }
  int mid=(low + high) / 2;
  updateSegmentTreeRangeLazy(segmentTree,lazy,startRange,endRange,delta,low,mid,2 * pos + 1);
  updateSegmentTreeRangeLazy(segmentTree,lazy,startRange,endRange,delta,mid + 1,high,2 * pos + 1);
  segmentTree[pos]=Math.min(segmentTree[2 * pos + 1],segmentTree[2 * pos + 2]);
}","private void updateSegmentTreeRangeLazy(int segmentTree[],int lazy[],int startRange,int endRange,int delta,int low,int high,int pos){
  if (low > high) {
    return;
  }
  if (lazy[pos] != 0) {
    segmentTree[pos]+=lazy[pos];
    if (low != high) {
      lazy[2 * pos + 1]+=lazy[pos];
      lazy[2 * pos + 2]+=lazy[pos];
    }
    lazy[pos]=0;
  }
  if (startRange > high || endRange < low) {
    return;
  }
  if (startRange <= low && endRange >= high) {
    segmentTree[pos]+=delta;
    if (low != high) {
      lazy[2 * pos + 1]+=delta;
      lazy[2 * pos + 2]+=delta;
    }
    return;
  }
  int mid=(low + high) / 2;
  updateSegmentTreeRangeLazy(segmentTree,lazy,startRange,endRange,delta,low,mid,2 * pos + 1);
  updateSegmentTreeRangeLazy(segmentTree,lazy,startRange,endRange,delta,mid + 1,high,2 * pos + 2);
  segmentTree[pos]=Math.min(segmentTree[2 * pos + 1],segmentTree[2 * pos + 2]);
}",0.7062179121505989
162238,"private void combinationUtil(int arr[],int k,int start,int sum,int total,int pos,List<Integer> result){
}","private void combinationUtil(int arr[],int k,int start,int sum,int total,int pos,List<Integer> result){
  if (pos == k) {
    if (Math.abs(sum - total / 2) < minFoundSoFar) {
      minFoundSoFar=Math.abs(sum - total / 2);
      System.out.println(result);
    }
    return;
  }
  for (int i=start; i < arr.length; i++) {
    sum+=arr[i];
    result.add(arr[i]);
    combinationUtil(arr,k,i + 1,sum,total,pos + 1,result);
    result.remove(result.size() - 1);
    sum-=arr[i];
  }
}",0.3583617747440273
162239,"public Deque<Interval> mergeInterval(Interval[] intervals){
  Deque<Interval> stack=new LinkedList<Interval>();
  stack.offerFirst(intervals[0]);
  for (int i=1; i < intervals.length; i++) {
    Interval curr=stack.peekFirst();
    if (curr.end <= intervals[i].start) {
      stack.offerFirst(intervals[i]);
    }
 else     if (curr.end > intervals[i].start) {
      Interval newInterval=mergeOverlap(curr,intervals[i]);
      if (newInterval != null) {
        stack.offerFirst(newInterval);
      }
    }
  }
  return stack;
}","public Deque<Interval> mergeInterval(Interval[] intervals){
  Deque<Interval> stack=new LinkedList<Interval>();
  stack.offerFirst(intervals[0]);
  for (int i=1; i < intervals.length; i++) {
    Interval curr=stack.peekFirst();
    if (curr.end < intervals[i].start) {
      stack.offerFirst(intervals[i]);
    }
 else     if (curr.end >= intervals[i].start) {
      Interval newInterval=mergeOverlap(curr,intervals[i]);
      if (newInterval != null) {
        stack.offerFirst(newInterval);
      }
    }
  }
  return stack;
}",0.8276515151515151
162240,"public static void main(String args[]){
  Interval intervals[]=new Interval[6];
  intervals[0]=new Interval(0,2,3);
  intervals[1]=new Interval(2,6,5);
  intervals[2]=new Interval(4,8,8);
  intervals[3]=new Interval(5,9,10);
  intervals[4]=new Interval(6,10,9);
  intervals[5]=new Interval(7,11,8);
  HorizonMapping hm=new HorizonMapping();
  Deque<Interval> ll=hm.mergeInterval(intervals);
  Iterator<Interval> itr=ll.iterator();
  while (itr.hasNext()) {
    System.out.println(itr.next());
  }
}","public static void main(String args[]){
  Interval intervals[]=new Interval[6];
  intervals[0]=new Interval(0,2,3);
  intervals[1]=new Interval(2,6,3);
  intervals[2]=new Interval(4,8,8);
  intervals[3]=new Interval(5,9,10);
  intervals[4]=new Interval(6,10,9);
  intervals[5]=new Interval(7,11,8);
  HorizonMapping hm=new HorizonMapping();
  Deque<Interval> ll=hm.mergeInterval(intervals);
  Iterator<Interval> itr=ll.iterator();
  while (itr.hasNext()) {
    System.out.println(itr.next());
  }
}",0.997991967871486
162241,"public int allTimeProfit(int arr[]){
  int profit=0;
  int localMin=arr[0];
  for (int i=1; i < arr.length; i++) {
    if (arr[i - 1] < arr[i]) {
      continue;
    }
    profit+=arr[i - 1] - localMin;
    localMin=arr[i];
  }
  return profit;
}","public int allTimeProfit(int arr[]){
  int profit=0;
  int localMin=arr[0];
  for (int i=1; i < arr.length; i++) {
    if (arr[i - 1] >= arr[i]) {
      localMin=arr[i];
    }
 else {
      profit+=arr[i] - localMin;
      localMin=arr[i];
    }
  }
  return profit;
}",0.5914396887159533
162242,"public static void main(String args[]){
  int arr[]={7,10,15,5,11,2,7,9,3};
  BuySellStockProfit bss=new BuySellStockProfit();
  System.out.println(bss.oneProfit(arr));
  System.out.print(bss.allTimeProfit(arr));
}","public static void main(String args[]){
  int arr[]={7,10,15,5,11,2,7,9,3};
  int arr1[]={6,4,1,3,5,7,3,1,3,4};
  BuySellStockProfit bss=new BuySellStockProfit();
  System.out.println(bss.oneProfit(arr));
  System.out.print(bss.allTimeProfit(arr1));
}",0.9204301075268816
162243,"private Node findRightSibling(Node root){
  if (root == null) {
    return null;
  }
  if (root.left != null) {
    return root.left;
  }
 else   if (root.right != null) {
    return root.right;
  }
  return findRightSibling(root.right);
}","private Node findRightSibling(Node root){
  if (root == null) {
    return null;
  }
  if (root.left != null) {
    return root.left;
  }
 else   if (root.right != null) {
    return root.right;
  }
  return findRightSibling(root.next);
}",0.9643605870020964
162244,"@Override protected Mono<Void> doNotify(InstanceEvent event,Instance instance){
  HttpHeaders headers=new HttpHeaders();
  headers.setContentType(MediaType.APPLICATION_JSON);
  String auth=Base64Utils.encodeToString(String.format(""String_Node_Str"",token,username).getBytes());
  headers.add(HttpHeaders.AUTHORIZATION,String.format(""String_Node_Str"",auth));
  return Mono.fromRunnable(() -> restTemplate.exchange(createUrl(),HttpMethod.POST,new HttpEntity<>(createMessage(event,instance),headers),Void.class));
}","@Override protected Mono<Void> doNotify(InstanceEvent event,Instance instance){
  HttpHeaders headers=new HttpHeaders();
  headers.setContentType(MediaType.APPLICATION_JSON);
  String auth=Base64Utils.encodeToString(String.format(""String_Node_Str"",token,username).getBytes(StandardCharsets.UTF_8));
  headers.add(HttpHeaders.AUTHORIZATION,String.format(""String_Node_Str"",auth));
  return Mono.fromRunnable(() -> restTemplate.exchange(createUrl(),HttpMethod.POST,new HttpEntity<>(createMessage(event,instance),headers),Void.class));
}",0.978927203065134
162245,"public Map<String,NotificationFilter> getNotificationFilters(){
synchronized (filters) {
    return Collections.unmodifiableMap(new HashMap<>(filters));
  }
}","public Map<String,NotificationFilter> getNotificationFilters(){
  return Collections.unmodifiableMap(new HashMap<>(filters));
}",0.8912280701754386
162246,"private HttpEntity<?> expectedMessage(String message){
  HttpHeaders httpHeaders=new HttpHeaders();
  httpHeaders.setContentType(MediaType.APPLICATION_JSON);
  String auth=Base64Utils.encodeToString(String.format(""String_Node_Str"",token,user).getBytes());
  httpHeaders.add(HttpHeaders.AUTHORIZATION,String.format(""String_Node_Str"",auth));
  Map<String,Object> messageJson=new HashMap<>();
  messageJson.put(""String_Node_Str"",message);
  return new HttpEntity<>(messageJson,httpHeaders);
}","private HttpEntity<?> expectedMessage(String message){
  HttpHeaders httpHeaders=new HttpHeaders();
  httpHeaders.setContentType(MediaType.APPLICATION_JSON);
  String auth=Base64Utils.encodeToString(String.format(""String_Node_Str"",token,user).getBytes(StandardCharsets.UTF_8));
  httpHeaders.add(HttpHeaders.AUTHORIZATION,String.format(""String_Node_Str"",auth));
  Map<String,Object> messageJson=new HashMap<>();
  messageJson.put(""String_Node_Str"",message);
  return new HttpEntity<>(messageJson,httpHeaders);
}",0.978
162247,"@Override protected void doNotify(ClientApplicationEvent event) throws Exception {
  Message message;
  if (event instanceof ClientApplicationRegisteredEvent) {
    message=getRegisteredMessage(event.getApplication());
  }
 else   if (event instanceof ClientApplicationDeregisteredEvent) {
    message=getDeregisteredMessage(event.getApplication());
  }
 else   if (event instanceof ClientApplicationStatusChangedEvent) {
    ClientApplicationStatusChangedEvent statusChangedEvent=(ClientApplicationStatusChangedEvent)event;
    message=getStatusChangedMessage(statusChangedEvent.getApplication(),statusChangedEvent.getFrom(),statusChangedEvent.getTo());
  }
 else {
    return;
  }
  this.restTemplate.postForObject(webhookUrl,message,Void.class);
}","@Override protected void doNotify(ClientApplicationEvent event) throws Exception {
  Message message;
  if (event instanceof ClientApplicationRegisteredEvent) {
    message=getRegisteredMessage(event.getApplication());
  }
 else   if (event instanceof ClientApplicationDeregisteredEvent) {
    message=getDeregisteredMessage(event.getApplication());
  }
 else   if (event instanceof ClientApplicationStatusChangedEvent) {
    ClientApplicationStatusChangedEvent statusChangedEvent=(ClientApplicationStatusChangedEvent)event;
    message=getStatusChangedMessage(statusChangedEvent.getApplication(),statusChangedEvent.getFrom(),statusChangedEvent.getTo());
  }
 else {
    return;
  }
  this.restTemplate.postForEntity(webhookUrl,message,Void.class);
}",0.992
162248,"@Test public void test_onClientApplicationDeRegisteredEvent_resolve() throws Exception {
  ClientApplicationDeregisteredEvent event=new ClientApplicationDeregisteredEvent(application);
  notifier.doNotify(event);
  verify(mockRestTemplate).postForObject(eq(URI.create(""String_Node_Str"")),any(Message.class),eq(Void.class));
}","@Test public void test_onClientApplicationDeRegisteredEvent_resolve() throws Exception {
  ClientApplicationDeregisteredEvent event=new ClientApplicationDeregisteredEvent(application);
  notifier.doNotify(event);
  verify(mockRestTemplate).postForEntity(eq(URI.create(""String_Node_Str"")),any(Message.class),eq(Void.class));
}",0.9815384615384616
162249,"@Test public void test_onApplicationStatusChangedEvent_resolve() throws Exception {
  ClientApplicationStatusChangedEvent event=new ClientApplicationStatusChangedEvent(application,StatusInfo.ofDown(),StatusInfo.ofUp());
  notifier.doNotify(event);
  verify(mockRestTemplate).postForObject(eq(URI.create(""String_Node_Str"")),any(Message.class),eq(Void.class));
}","@Test public void test_onApplicationStatusChangedEvent_resolve() throws Exception {
  ClientApplicationStatusChangedEvent event=new ClientApplicationStatusChangedEvent(application,StatusInfo.ofDown(),StatusInfo.ofUp());
  notifier.doNotify(event);
  verify(mockRestTemplate).postForEntity(eq(URI.create(""String_Node_Str"")),any(Message.class),eq(Void.class));
}",0.9833333333333332
162250,"@Test public void test_onApplicationRegisteredEvent_resolve() throws Exception {
  ClientApplicationRegisteredEvent event=new ClientApplicationRegisteredEvent(application);
  notifier.doNotify(event);
  verify(mockRestTemplate).postForObject(eq(URI.create(""String_Node_Str"")),any(Message.class),eq(Void.class));
}","@Test public void test_onApplicationRegisteredEvent_resolve() throws Exception {
  ClientApplicationRegisteredEvent event=new ClientApplicationRegisteredEvent(application);
  notifier.doNotify(event);
  verify(mockRestTemplate).postForEntity(eq(URI.create(""String_Node_Str"")),any(Message.class),eq(Void.class));
}",0.9808306709265175
162251,"@Test(expected=IllegalArgumentException.class) public void test_name_expected() throws JsonProcessingException, IOException {
  String json=new JSONObject().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").toString();
  objectMapper.readValue(json,Application.class);
}","@Test(expected=IllegalArgumentException.class) public void test_name_expected() throws Exception {
  String json=new JSONObject().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").toString();
  objectMapper.readValue(json,Application.class);
}",0.9635627530364372
162252,"@Test public void test_1_2_json_format() throws JsonProcessingException, IOException {
  String json=new JSONObject().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").toString();
  Application value=objectMapper.readValue(json,Application.class);
  assertThat(value.getName(),is(""String_Node_Str""));
  assertThat(value.getManagementUrl(),is(""String_Node_Str""));
  assertThat(value.getHealthUrl(),is(""String_Node_Str""));
  assertThat(value.getServiceUrl(),nullValue());
}","@Test public void test_1_2_json_format() throws Exception {
  String json=new JSONObject().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").toString();
  Application value=objectMapper.readValue(json,Application.class);
  assertThat(value.getName(),is(""String_Node_Str""));
  assertThat(value.getManagementUrl(),is(""String_Node_Str""));
  assertThat(value.getHealthUrl(),is(""String_Node_Str""));
  assertThat(value.getServiceUrl(),nullValue());
}",0.9724208375893768
162253,"@Test public void test_1_4_json_format() throws JsonProcessingException, IOException {
  String json=new JSONObject().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",new JSONObject().put(""String_Node_Str"",""String_Node_Str"")).toString();
  Application value=objectMapper.readValue(json,Application.class);
  assertThat(value.getName(),is(""String_Node_Str""));
  assertThat(value.getManagementUrl(),is(""String_Node_Str""));
  assertThat(value.getHealthUrl(),is(""String_Node_Str""));
  assertThat(value.getServiceUrl(),is(""String_Node_Str""));
}","@Test public void test_1_4_json_format() throws Exception {
  String json=new JSONObject().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",new JSONObject().put(""String_Node_Str"",""String_Node_Str"")).toString();
  Application value=objectMapper.readValue(json,Application.class);
  assertThat(value.getName(),is(""String_Node_Str""));
  assertThat(value.getManagementUrl(),is(""String_Node_Str""));
  assertThat(value.getHealthUrl(),is(""String_Node_Str""));
  assertThat(value.getServiceUrl(),is(""String_Node_Str""));
}",0.979622641509434
162254,"@Test(expected=IllegalArgumentException.class) public void test_healthUrl_expected() throws JsonProcessingException, IOException {
  String json=new JSONObject().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").toString();
  objectMapper.readValue(json,Application.class);
}","@Test(expected=IllegalArgumentException.class) public void test_healthUrl_expected() throws Exception {
  String json=new JSONObject().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").toString();
  objectMapper.readValue(json,Application.class);
}",0.9640479360852195
162255,"@Test public void test_onlyHealthUrl() throws JsonProcessingException, IOException {
  String json=new JSONObject().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").toString();
  Application value=objectMapper.readValue(json,Application.class);
  assertThat(value.getName(),is(""String_Node_Str""));
  assertThat(value.getHealthUrl(),is(""String_Node_Str""));
  assertThat(value.getManagementUrl(),nullValue());
  assertThat(value.getServiceUrl(),nullValue());
}","@Test public void test_onlyHealthUrl() throws Exception {
  String json=new JSONObject().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").toString();
  Application value=objectMapper.readValue(json,Application.class);
  assertThat(value.getName(),is(""String_Node_Str""));
  assertThat(value.getHealthUrl(),is(""String_Node_Str""));
  assertThat(value.getManagementUrl(),nullValue());
  assertThat(value.getServiceUrl(),nullValue());
}",0.9717277486910996
162256,"@Test public void test_1_5_json_format() throws JsonProcessingException, IOException {
  String json=new JSONObject().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",new JSONObject().put(""String_Node_Str"",""String_Node_Str"")).toString();
  Application value=objectMapper.readValue(json,Application.class);
  assertThat(value.getName(),is(""String_Node_Str""));
  assertThat(value.getManagementUrl(),is(""String_Node_Str""));
  assertThat(value.getHealthUrl(),is(""String_Node_Str""));
  assertThat(value.getServiceUrl(),is(""String_Node_Str""));
  assertThat(value.getMetadata(),is(Collections.singletonMap(""String_Node_Str"",""String_Node_Str"")));
}","@Test public void test_1_5_json_format() throws Exception {
  String json=new JSONObject().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",new JSONObject().put(""String_Node_Str"",""String_Node_Str"")).toString();
  Application value=objectMapper.readValue(json,Application.class);
  assertThat(value.getName(),is(""String_Node_Str""));
  assertThat(value.getManagementUrl(),is(""String_Node_Str""));
  assertThat(value.getHealthUrl(),is(""String_Node_Str""));
  assertThat(value.getServiceUrl(),is(""String_Node_Str""));
  assertThat(value.getMetadata(),is(Collections.singletonMap(""String_Node_Str"",""String_Node_Str"")));
}",0.9823182711198428
162257,"/** 
 * Task that registers the application at the spring-boot-admin application.
 */
@Bean @ConditionalOnMissingBean public ApplicationRegistrator registrator(){
  builder.messageConverters(new MappingJackson2HttpMessageConverter());
  if (admin.getUsername() != null) {
    builder.basicAuthorization(admin.getUsername(),admin.getPassword());
  }
  return new ApplicationRegistrator(builder.build(),admin,client);
}","/** 
 * Task that registers the application at the spring-boot-admin application.
 */
@Bean @ConditionalOnMissingBean public ApplicationRegistrator registrator(){
  builder=builder.messageConverters(new MappingJackson2HttpMessageConverter());
  if (admin.getUsername() != null) {
    builder=builder.basicAuthorization(admin.getUsername(),admin.getPassword());
  }
  return new ApplicationRegistrator(builder.build(),admin,client);
}",0.9811764705882352
162258,"public void setCc(String[] cc){
  this.cc=cc;
}","public void setCc(String[] cc){
  this.cc=Arrays.copyOf(cc,cc.length);
}",0.7899159663865546
162259,"public void setTo(String[] to){
  this.to=to;
}","public void setTo(String[] to){
  this.to=Arrays.copyOf(to,to.length);
}",0.7899159663865546
162260,"@SuppressWarnings(""String_Node_Str"") @SuppressLint(""String_Node_Str"") private void setBackgroundCompat(Drawable drawable){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
    setBackground(drawable);
  }
 else {
    setBackgroundDrawable(drawable);
  }
}","@SuppressWarnings(""String_Node_Str"") @SuppressLint(""String_Node_Str"") private void setBackgroundCompat(Drawable drawable){
  if (Build.VERSION.SDK_INT >= 16) {
    setBackground(drawable);
  }
 else {
    setBackgroundDrawable(drawable);
  }
}",0.9377431906614786
162261,"@Override public void onItemClick(AdapterView<?> arg0,View view,int index,long id){
  int playbackRouteId=Common.PLAY_ALL_SONGS;
switch (mFragmentId) {
case Common.ARTISTS_FLIPPED_SONGS_FRAGMENT:
case Common.ALBUM_ARTISTS_FLIPPED_SONGS_FRAGMENT:
case Common.GENRES_FLIPPED_FRAGMENT:
    playbackRouteId=Common.PLAY_ALL_BY_ALBUM;
  break;
}
mApp.getPlaybackKickstarter().initPlayback(mContext,mQuerySelection,playbackRouteId,index,true,false);
}","@Override public void onItemClick(AdapterView<?> arg0,View view,int index,long id){
  int playbackRouteId=Common.PLAY_ALL_SONGS;
switch (mFragmentId) {
case Common.ARTISTS_FLIPPED_SONGS_FRAGMENT:
case Common.ALBUM_ARTISTS_FLIPPED_SONGS_FRAGMENT:
case Common.GENRES_FLIPPED_FRAGMENT:
case Common.ALBUMS_FLIPPED_FRAGMENT:
    playbackRouteId=Common.PLAY_ALL_BY_ALBUM;
  break;
}
mApp.getPlaybackKickstarter().initPlayback(mContext,mQuerySelection,playbackRouteId,index,true,false);
}",0.96
162262,"/** 
 * Returns a selection cursor of all songs in the database.  This method can also be used to search all songs if a  valid selection parameter is passed.
 */
public Cursor getAllSongsSearchable(String selection){
  String selectQuery=""String_Node_Str"" + MUSIC_LIBRARY_TABLE + ""String_Node_Str""+ BLACKLIST_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ selection+ ""String_Node_Str""+ SONG_TITLE+ ""String_Node_Str"";
  return getDatabase().rawQuery(selectQuery,null);
}","/** 
 * Returns a selection cursor of all songs in the database.  This method can also be used to search all songs if a  valid selection parameter is passed.
 */
public Cursor getAllSongsSearchable(String selection){
  String selectQuery=""String_Node_Str"" + MUSIC_LIBRARY_TABLE + ""String_Node_Str""+ BLACKLIST_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ selection;
  return getDatabase().rawQuery(selectQuery,null);
}",0.9435665914221218
162263,"/** 
 * Returns a selection cursor of all songs in the  specified library. The library should be specified in the  selection parameter.
 */
public Cursor getAllSongsInLibrarySearchable(String selection){
  String selectQuery=""String_Node_Str"" + MUSIC_LIBRARY_TABLE + ""String_Node_Str""+ LIBRARY_NAME+ ""String_Node_Str""+ MUSIC_LIBRARY_TABLE+ ""String_Node_Str""+ _ID+ ""String_Node_Str""+ LIBRARY_NAME+ ""String_Node_Str""+ SONG_ID+ ""String_Node_Str""+ MUSIC_LIBRARY_TABLE+ ""String_Node_Str""+ BLACKLIST_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ selection+ ""String_Node_Str""+ MUSIC_LIBRARY_TABLE+ ""String_Node_Str""+ SONG_TITLE+ ""String_Node_Str"";
  return getDatabase().rawQuery(selectQuery,null);
}","/** 
 * Returns a selection cursor of all songs in the  specified library. The library should be specified in the  selection parameter.
 */
public Cursor getAllSongsInLibrarySearchable(String selection){
  String selectQuery=""String_Node_Str"" + MUSIC_LIBRARY_TABLE + ""String_Node_Str""+ LIBRARY_NAME+ ""String_Node_Str""+ MUSIC_LIBRARY_TABLE+ ""String_Node_Str""+ _ID+ ""String_Node_Str""+ LIBRARY_NAME+ ""String_Node_Str""+ SONG_ID+ ""String_Node_Str""+ MUSIC_LIBRARY_TABLE+ ""String_Node_Str""+ BLACKLIST_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ selection;
  return getDatabase().rawQuery(selectQuery,null);
}",0.934402332361516
162264,"/** 
 * Helper method for getPlaybackCursor(). Returns the correct cursor retrieval method for the specified playback/fragment route.
 */
private Cursor getPlaybackCursorHelper(String querySelection,int fragmentId){
switch (fragmentId) {
case Common.PLAY_ALL_BY_ARTIST:
case Common.PLAY_ALL_BY_ALBUM_ARTIST:
case Common.PLAY_ALL_BY_ALBUM:
case Common.PLAY_ALL_SONGS:
case Common.PLAY_ALL_IN_GENRE:
    return getAllSongsSearchable(querySelection);
case Common.PLAY_ALL_IN_PLAYLIST:
case Common.PLAY_ALL_IN_FOLDER:
default :
  return null;
}
}","/** 
 * Helper method for getPlaybackCursor(). Returns the correct cursor retrieval method for the specified playback/fragment route.
 */
private Cursor getPlaybackCursorHelper(String querySelection,int fragmentId){
switch (fragmentId) {
case Common.PLAY_ALL_BY_ARTIST:
case Common.PLAY_ALL_BY_ALBUM_ARTIST:
case Common.PLAY_ALL_BY_ALBUM:
case Common.PLAY_ALL_IN_GENRE:
case Common.PLAY_ALL_IN_FOLDER:
    querySelection+=""String_Node_Str"" + SONG_TRACK_NUMBER + ""String_Node_Str"";
  break;
case Common.PLAY_ALL_SONGS:
querySelection+=""String_Node_Str"" + SONG_TITLE + ""String_Node_Str"";
break;
case Common.PLAY_ALL_IN_PLAYLIST:
}
return getAllSongsSearchable(querySelection);
}",0.6715927750410509
162265,"/** 
 * Helper method for getPlaybackCursor(). Returns the correct cursor retrieval method for the specified playback/fragment route in the specified library.
 */
private Cursor getPlaybackCursorInLibraryHelper(String querySelection,int fragmentId){
switch (fragmentId) {
case Common.PLAY_ALL_BY_ARTIST:
case Common.PLAY_ALL_BY_ALBUM_ARTIST:
case Common.PLAY_ALL_BY_ALBUM:
case Common.PLAY_ALL_SONGS:
case Common.PLAY_ALL_IN_GENRE:
    return getAllSongsInLibrarySearchable(querySelection);
case Common.PLAY_ALL_IN_PLAYLIST:
case Common.PLAY_ALL_IN_FOLDER:
default :
  return null;
}
}","/** 
 * Helper method for getPlaybackCursor(). Returns the correct cursor retrieval method for the specified playback/fragment route in the specified library.
 */
private Cursor getPlaybackCursorInLibraryHelper(String querySelection,int fragmentId){
switch (fragmentId) {
case Common.PLAY_ALL_BY_ARTIST:
case Common.PLAY_ALL_BY_ALBUM_ARTIST:
case Common.PLAY_ALL_BY_ALBUM:
case Common.PLAY_ALL_IN_GENRE:
case Common.PLAY_ALL_IN_FOLDER:
    querySelection+=""String_Node_Str"" + MUSIC_LIBRARY_TABLE + ""String_Node_Str""+ SONG_TRACK_NUMBER+ ""String_Node_Str"";
  break;
case Common.PLAY_ALL_SONGS:
querySelection+=""String_Node_Str"" + MUSIC_LIBRARY_TABLE + ""String_Node_Str""+ SONG_TITLE+ ""String_Node_Str"";
break;
case Common.PLAY_ALL_IN_PLAYLIST:
}
return getAllSongsInLibrarySearchable(querySelection);
}",0.6647398843930635
162266,"/** 
 * Helper method for getFragmentCursor(). Returns the correct  cursor retrieval method for the specified fragment.
 */
private Cursor getFragmentCursorHelper(String querySelection,int fragmentId){
switch (fragmentId) {
case Common.ARTISTS_FRAGMENT:
    return getAllUniqueArtists(querySelection);
case Common.ALBUM_ARTISTS_FRAGMENT:
  return getAllUniqueAlbumArtists(querySelection);
case Common.ALBUMS_FRAGMENT:
return getAllUniqueAlbums(querySelection);
case Common.SONGS_FRAGMENT:
return getAllSongsSearchable(querySelection);
case Common.PLAYLISTS_FRAGMENT:
case Common.GENRES_FRAGMENT:
return getAllUniqueGenres(querySelection);
case Common.FOLDERS_FRAGMENT:
case Common.ARTISTS_FLIPPED_FRAGMENT:
return getAllUniqueAlbumsByArtist(querySelection);
case Common.ARTISTS_FLIPPED_SONGS_FRAGMENT:
return getAllSongsInAlbumByArtist(querySelection);
case Common.ALBUM_ARTISTS_FLIPPED_FRAGMENT:
return getAllUniqueAlbumsByAlbumArtist(querySelection);
case Common.ALBUM_ARTISTS_FLIPPED_SONGS_FRAGMENT:
return getAllSongsInAlbumByAlbumArtist(querySelection);
case Common.ALBUMS_FLIPPED_FRAGMENT:
return getAllSongsInAlbumByArtist(querySelection);
case Common.GENRES_FLIPPED_FRAGMENT:
return getAllUniqueAlbumsInGenre(querySelection);
case Common.GENRES_FLIPPED_SONGS_FRAGMENT:
return getAllSongsInAlbumInGenre(querySelection);
default :
return null;
}
}","/** 
 * Helper method for getFragmentCursor(). Returns the correct  cursor retrieval method for the specified fragment.
 */
private Cursor getFragmentCursorHelper(String querySelection,int fragmentId){
switch (fragmentId) {
case Common.ARTISTS_FRAGMENT:
    return getAllUniqueArtists(querySelection);
case Common.ALBUM_ARTISTS_FRAGMENT:
  return getAllUniqueAlbumArtists(querySelection);
case Common.ALBUMS_FRAGMENT:
return getAllUniqueAlbums(querySelection);
case Common.SONGS_FRAGMENT:
querySelection+=""String_Node_Str"" + SONG_TITLE + ""String_Node_Str"";
return getAllSongsSearchable(querySelection);
case Common.PLAYLISTS_FRAGMENT:
case Common.GENRES_FRAGMENT:
return getAllUniqueGenres(querySelection);
case Common.FOLDERS_FRAGMENT:
case Common.ARTISTS_FLIPPED_FRAGMENT:
return getAllUniqueAlbumsByArtist(querySelection);
case Common.ARTISTS_FLIPPED_SONGS_FRAGMENT:
return getAllSongsInAlbumByArtist(querySelection);
case Common.ALBUM_ARTISTS_FLIPPED_FRAGMENT:
return getAllUniqueAlbumsByAlbumArtist(querySelection);
case Common.ALBUM_ARTISTS_FLIPPED_SONGS_FRAGMENT:
return getAllSongsInAlbumByAlbumArtist(querySelection);
case Common.ALBUMS_FLIPPED_FRAGMENT:
return getAllSongsInAlbumByArtist(querySelection);
case Common.GENRES_FLIPPED_FRAGMENT:
return getAllUniqueAlbumsInGenre(querySelection);
case Common.GENRES_FLIPPED_SONGS_FRAGMENT:
return getAllSongsInAlbumInGenre(querySelection);
default :
return null;
}
}",0.9754866618601298
162267,"/** 
 * Helper method for getFragmentCursor(). Returns the correct  cursor retrieval method for the specified fragment in the  specified library.
 */
private Cursor getFragmentCursorInLibraryHelper(String querySelection,int fragmentId){
switch (fragmentId) {
case Common.ARTISTS_FRAGMENT:
    return getAllUniqueArtistsInLibrary(querySelection);
case Common.ALBUM_ARTISTS_FRAGMENT:
  return getAllUniqueAlbumArtistsInLibrary(querySelection);
case Common.ALBUMS_FRAGMENT:
return getAllUniqueAlbumsInLibrary(querySelection);
case Common.SONGS_FRAGMENT:
return getAllSongsInLibrarySearchable(querySelection);
case Common.PLAYLISTS_FRAGMENT:
case Common.GENRES_FRAGMENT:
return getAllUniqueGenresInLibrary(querySelection);
case Common.FOLDERS_FRAGMENT:
case Common.ARTISTS_FLIPPED_FRAGMENT:
return getAllUniqueAlbumsByArtistInLibrary(querySelection);
case Common.ARTISTS_FLIPPED_SONGS_FRAGMENT:
return getAllSongsInAlbumByArtistInLibrary(querySelection);
case Common.ALBUM_ARTISTS_FLIPPED_FRAGMENT:
return getAllUniqueAlbumsByAlbumArtistInLibrary(querySelection);
case Common.ALBUM_ARTISTS_FLIPPED_SONGS_FRAGMENT:
return getAllSongsInAlbumByAlbumArtistInLibrary(querySelection);
case Common.ALBUMS_FLIPPED_FRAGMENT:
return getAllSongsInAlbumByArtistInLibrary(querySelection);
case Common.GENRES_FLIPPED_FRAGMENT:
return getAllUniqueAlbumsInGenreInLibrary(querySelection);
case Common.GENRES_FLIPPED_SONGS_FRAGMENT:
return getAllSongsByInAlbumInGenreInLibrary(querySelection);
default :
return null;
}
}","/** 
 * Helper method for getFragmentCursor(). Returns the correct  cursor retrieval method for the specified fragment in the  specified library.
 */
private Cursor getFragmentCursorInLibraryHelper(String querySelection,int fragmentId){
switch (fragmentId) {
case Common.ARTISTS_FRAGMENT:
    return getAllUniqueArtistsInLibrary(querySelection);
case Common.ALBUM_ARTISTS_FRAGMENT:
  return getAllUniqueAlbumArtistsInLibrary(querySelection);
case Common.ALBUMS_FRAGMENT:
return getAllUniqueAlbumsInLibrary(querySelection);
case Common.SONGS_FRAGMENT:
querySelection+=""String_Node_Str"" + SONG_TITLE + ""String_Node_Str"";
return getAllSongsInLibrarySearchable(querySelection);
case Common.PLAYLISTS_FRAGMENT:
case Common.GENRES_FRAGMENT:
return getAllUniqueGenresInLibrary(querySelection);
case Common.FOLDERS_FRAGMENT:
case Common.ARTISTS_FLIPPED_FRAGMENT:
return getAllUniqueAlbumsByArtistInLibrary(querySelection);
case Common.ARTISTS_FLIPPED_SONGS_FRAGMENT:
return getAllSongsInAlbumByArtistInLibrary(querySelection);
case Common.ALBUM_ARTISTS_FLIPPED_FRAGMENT:
return getAllUniqueAlbumsByAlbumArtistInLibrary(querySelection);
case Common.ALBUM_ARTISTS_FLIPPED_SONGS_FRAGMENT:
return getAllSongsInAlbumByAlbumArtistInLibrary(querySelection);
case Common.ALBUMS_FLIPPED_FRAGMENT:
return getAllSongsInAlbumByArtistInLibrary(querySelection);
case Common.GENRES_FLIPPED_FRAGMENT:
return getAllUniqueAlbumsInGenreInLibrary(querySelection);
case Common.GENRES_FLIPPED_SONGS_FRAGMENT:
return getAllSongsByInAlbumInGenreInLibrary(querySelection);
default :
return null;
}
}",0.9778067885117492
162268,"@Override protected Void doInBackground(String... params){
  int which=Integer.parseInt(params[0]);
  final Cursor cursor=mApp.getDBAccessHelper().getAllUniqueGenres(""String_Node_Str"");
  cursor.moveToPosition(which);
  String selectedGenre=cursor.getString(cursor.getColumnIndex(DBAccessHelper.SONG_GENRE));
  cursor.close();
  final Cursor songsCursor=mApp.getDBAccessHelper().getAllSongsInGenre(selectedGenre);
  if (songsCursor != null && songsCursor.getCount() > 0) {
    for (int j=0; j < songsCursor.getCount(); j++) {
      songsCursor.moveToPosition(j);
      String songId=songsCursor.getString(songsCursor.getColumnIndex(DBAccessHelper.SONG_ID));
      saveSettingsToDB(songId);
    }
  }
  songsCursor.close();
  return null;
}","@Override protected Void doInBackground(String... params){
  int which=Integer.parseInt(params[0]);
  final Cursor cursor=mApp.getDBAccessHelper().getAllUniqueGenres(""String_Node_Str"");
  cursor.moveToPosition(which);
  String selectedGenre=cursor.getString(cursor.getColumnIndex(DBAccessHelper.SONG_GENRE));
  cursor.close();
  String genreQuery=""String_Node_Str"" + DBAccessHelper.SONG_GENRE + ""String_Node_Str""+ ""String_Node_Str""+ selectedGenre+ ""String_Node_Str"";
  final Cursor songsCursor=mApp.getDBAccessHelper().getAllSongsInGenre(genreQuery);
  if (songsCursor != null && songsCursor.getCount() > 0) {
    for (int j=0; j < songsCursor.getCount(); j++) {
      songsCursor.moveToPosition(j);
      String songId=songsCursor.getString(songsCursor.getColumnIndex(DBAccessHelper.SONG_ID));
      saveSettingsToDB(songId);
    }
  }
  songsCursor.close();
  return null;
}",0.8990712074303405
162269,"private CloseableHttpResponse forward(CloseableHttpClient httpclient,String verb,String uri,HttpServletRequest request,MultiValueMap<String,String> headers,MultiValueMap<String,String> params,InputStream requestEntity) throws Exception {
  Map<String,Object> info=this.helper.debug(verb,uri,headers,params,requestEntity);
  URL host=RequestContext.getCurrentContext().getRouteHost();
  HttpHost httpHost=getHttpHost(host);
  uri=StringUtils.cleanPath((host.getPath() + uri).replaceAll(""String_Node_Str"",""String_Node_Str""));
  int contentLength=request.getContentLength();
  ContentType contentType=null;
  if (request.getContentType() != null) {
    contentType=ContentType.parse(request.getContentType());
  }
  InputStreamEntity entity=new InputStreamEntity(requestEntity,contentLength,contentType);
  HttpRequest httpRequest=buildHttpRequest(verb,uri,entity,headers,params,request);
  try {
    log.debug(httpHost.getHostName() + ""String_Node_Str"" + httpHost.getPort()+ ""String_Node_Str""+ httpHost.getSchemeName());
    CloseableHttpResponse zuulResponse=forwardRequest(httpclient,httpHost,httpRequest);
    this.helper.appendDebug(info,zuulResponse.getStatusLine().getStatusCode(),revertHeaders(zuulResponse.getAllHeaders()));
    return zuulResponse;
  }
  finally {
  }
}","private CloseableHttpResponse forward(CloseableHttpClient httpclient,String verb,String uri,HttpServletRequest request,MultiValueMap<String,String> headers,MultiValueMap<String,String> params,InputStream requestEntity) throws Exception {
  Map<String,Object> info=this.helper.debug(verb,uri,headers,params,requestEntity);
  URL host=RequestContext.getCurrentContext().getRouteHost();
  HttpHost httpHost=getHttpHost(host);
  uri=StringUtils.cleanPath((host.getPath() + uri).replaceAll(""String_Node_Str"",""String_Node_Str""));
  long contentLength=getContentLength(request);
  ContentType contentType=null;
  if (request.getContentType() != null) {
    contentType=ContentType.parse(request.getContentType());
  }
  InputStreamEntity entity=new InputStreamEntity(requestEntity,contentLength,contentType);
  HttpRequest httpRequest=buildHttpRequest(verb,uri,entity,headers,params,request);
  try {
    log.debug(httpHost.getHostName() + ""String_Node_Str"" + httpHost.getPort()+ ""String_Node_Str""+ httpHost.getSchemeName());
    CloseableHttpResponse zuulResponse=forwardRequest(httpclient,httpHost,httpRequest);
    this.helper.appendDebug(info,zuulResponse.getStatusLine().getStatusCode(),revertHeaders(zuulResponse.getAllHeaders()));
    return zuulResponse;
  }
  finally {
  }
}",0.9913860610806576
162270,"@Override public Object run(){
  RequestContext context=RequestContext.getCurrentContext();
  HttpServletRequest request=context.getRequest();
  MultiValueMap<String,String> headers=this.helper.buildZuulRequestHeaders(request);
  MultiValueMap<String,String> params=this.helper.buildZuulRequestQueryParams(request);
  String verb=getVerb(request);
  InputStream requestEntity=getRequestBody(request);
  if (request.getContentLength() < 0) {
    context.setChunkedRequestBody();
  }
  String uri=this.helper.buildZuulRequestURI(request);
  this.helper.addIgnoredHeaders();
  try {
    CloseableHttpResponse response=forward(this.httpClient,verb,uri,request,headers,params,requestEntity);
    setResponse(response);
  }
 catch (  Exception ex) {
    throw new ZuulRuntimeException(ex);
  }
  return null;
}","@Override public Object run(){
  RequestContext context=RequestContext.getCurrentContext();
  HttpServletRequest request=context.getRequest();
  MultiValueMap<String,String> headers=this.helper.buildZuulRequestHeaders(request);
  MultiValueMap<String,String> params=this.helper.buildZuulRequestQueryParams(request);
  String verb=getVerb(request);
  InputStream requestEntity=getRequestBody(request);
  if (getContentLength(request) < 0) {
    context.setChunkedRequestBody();
  }
  String uri=this.helper.buildZuulRequestURI(request);
  this.helper.addIgnoredHeaders();
  try {
    CloseableHttpResponse response=forward(this.httpClient,verb,uri,request,headers,params,requestEntity);
    setResponse(response);
  }
 catch (  Exception ex) {
    throw new ZuulRuntimeException(ex);
  }
  return null;
}",0.9906658369632856
162271,"public SimpleHostRoutingFilter(ProxyRequestHelper helper,ZuulProperties properties,CloseableHttpClient httpClient){
  this.helper=helper;
  this.hostProperties=properties.getHost();
  this.sslHostnameValidationEnabled=properties.isSslHostnameValidationEnabled();
  this.forceOriginalQueryStringEncoding=properties.isForceOriginalQueryStringEncoding();
  this.httpClient=httpClient;
  this.customHttpClient=true;
}","public SimpleHostRoutingFilter(ProxyRequestHelper helper,ZuulProperties properties,CloseableHttpClient httpClient){
  this.helper=helper;
  this.hostProperties=properties.getHost();
  this.sslHostnameValidationEnabled=properties.isSslHostnameValidationEnabled();
  this.forceOriginalQueryStringEncoding=properties.isForceOriginalQueryStringEncoding();
  this.httpClient=httpClient;
  this.customHttpClient=true;
  checkServletVersion();
}",0.9706227967097532
162272,"@GetMapping(produces=MediaType.TEXT_EVENT_STREAM_VALUE) public Flux<Map<String,Object>> stream(){
  return this.flux;
}","@GetMapping(produces=MediaType.TEXT_EVENT_STREAM_VALUE) public Flux<String> stream(){
  return this.flux;
}",0.9469026548672568
162273,"public TurbineController(PublishSubject<Map<String,Object>> hystrixSubject){
  Observable<Map<String,Object>> stream=StreamAggregator.aggregateGroupedStreams(hystrixSubject.groupBy(data -> InstanceKey.create((String)data.get(""String_Node_Str"")))).doOnUnsubscribe(() -> log.info(""String_Node_Str"")).doOnSubscribe(() -> log.info(""String_Node_Str"")).flatMap(o -> o);
  Flux<Map<String,Object>> ping=Flux.interval(Duration.ofSeconds(5),Duration.ofSeconds(10)).map(l -> Collections.singletonMap(""String_Node_Str"",(Object)""String_Node_Str"")).share();
  flux=Flux.merge(RxReactiveStreams.toPublisher(stream),ping).share();
}","public TurbineController(PublishSubject<Map<String,Object>> hystrixSubject){
  Observable<Map<String,Object>> stream=StreamAggregator.aggregateGroupedStreams(hystrixSubject.groupBy(data -> InstanceKey.create((String)data.get(""String_Node_Str"")))).doOnUnsubscribe(() -> log.info(""String_Node_Str"")).doOnSubscribe(() -> log.info(""String_Node_Str"")).flatMap(o -> o);
  Flux<Map<String,Object>> ping=Flux.interval(Duration.ofSeconds(5),Duration.ofSeconds(10)).map(l -> Collections.singletonMap(""String_Node_Str"",(Object)""String_Node_Str"")).share();
  flux=Flux.merge(RxReactiveStreams.toPublisher(stream),ping).share().map(map -> JsonUtility.mapToJson(map));
}",0.969363707776905
162274,"@Test @Ignore public void hystrixStreamWorks(){
  String url=""String_Node_Str"" + port;
  WebTestClient testClient=WebTestClient.bindToServer().baseUrl(url).build();
  testClient.get().uri(""String_Node_Str"").exchange().expectStatus().isOk();
  WebClient client=WebClient.create(url);
  Flux<String> result=client.get().uri(BASE_PATH + ""String_Node_Str"").accept(MediaType.TEXT_EVENT_STREAM).exchange().flatMapMany(res -> res.bodyToFlux(Map.class)).take(5).filter(map -> ""String_Node_Str"".equals(map.get(""String_Node_Str""))).map(map -> (String)map.get(""String_Node_Str""));
  StepVerifier.create(result).expectNext(""String_Node_Str"").thenCancel().verify();
}","@Test public void hystrixStreamWorks(){
  String url=""String_Node_Str"" + port;
  WebTestClient testClient=WebTestClient.bindToServer().baseUrl(url).build();
  testClient.get().uri(""String_Node_Str"").exchange().expectStatus().isOk();
  WebClient client=WebClient.create(url);
  Flux<String> result=client.get().uri(BASE_PATH + ""String_Node_Str"").accept(MediaType.TEXT_EVENT_STREAM).exchange().flatMapMany(res -> res.bodyToFlux(Map.class)).take(5).filter(map -> ""String_Node_Str"".equals(map.get(""String_Node_Str""))).map(map -> (String)map.get(""String_Node_Str""));
  StepVerifier.create(result).expectNext(""String_Node_Str"").thenCancel().verify();
}",0.9938461538461538
162275,"@ReadOperation public Map<String,Object> invoke(){
  Map<String,Object> map=new LinkedHashMap<String,Object>();
  AbstractConfiguration config=ConfigurationManager.getConfigInstance();
  if (config instanceof ConcurrentCompositeConfiguration) {
    ConcurrentCompositeConfiguration composite=(ConcurrentCompositeConfiguration)config;
    for (    Configuration item : composite.getConfigurations()) {
      append(map,item);
    }
  }
 else {
    append(map,config);
  }
  return map;
}","@ReadOperation public Map<String,Object> invoke(){
  Map<String,Object> map=new LinkedHashMap<>();
  AbstractConfiguration config=ConfigurationManager.getConfigInstance();
  if (config instanceof ConcurrentCompositeConfiguration) {
    ConcurrentCompositeConfiguration composite=(ConcurrentCompositeConfiguration)config;
    for (    Configuration item : composite.getConfigurations()) {
      append(map,item);
    }
  }
 else {
    append(map,config);
  }
  return map;
}",0.986444212721585
162276,"HttpRequest toHttpRequest(){
  return new HttpRequest(){
    @Override public HttpMethod getMethod(){
      return HttpMethod.resolve(RibbonRequest.this.toRequest().method());
    }
    @Override public String getMethodValue(){
      return getMethod().name();
    }
    @Override public URI getURI(){
      return RibbonRequest.this.getUri();
    }
    @Override public HttpHeaders getHeaders(){
      Map<String,List<String>> headers=new HashMap<String,List<String>>();
      Map<String,Collection<String>> feignHeaders=RibbonRequest.this.toRequest().headers();
      for (      String key : feignHeaders.keySet()) {
        headers.put(key,new ArrayList<String>(feignHeaders.get(key)));
      }
      HttpHeaders httpHeaders=new HttpHeaders();
      httpHeaders.putAll(headers);
      return httpHeaders;
    }
  }
;
}","HttpRequest toHttpRequest(){
  return new HttpRequest(){
    @Override public HttpMethod getMethod(){
      return HttpMethod.resolve(RibbonRequest.this.toRequest().method());
    }
    @Override public String getMethodValue(){
      return getMethod().name();
    }
    @Override public URI getURI(){
      return RibbonRequest.this.getUri();
    }
    @Override public HttpHeaders getHeaders(){
      Map<String,List<String>> headers=new HashMap<>();
      Map<String,Collection<String>> feignHeaders=RibbonRequest.this.toRequest().headers();
      for (      String key : feignHeaders.keySet()) {
        headers.put(key,new ArrayList<String>(feignHeaders.get(key)));
      }
      HttpHeaders httpHeaders=new HttpHeaders();
      httpHeaders.putAll(headers);
      return httpHeaders;
    }
  }
;
}",0.6087492298213185
162277,"FeignRetryPolicyServiceInstance(String serviceId,HttpRequest request){
  this.serviceId=serviceId;
  this.request=request;
  this.metadata=new HashMap<String,String>();
}","FeignRetryPolicyServiceInstance(String serviceId,HttpRequest request){
  this.serviceId=serviceId;
  this.request=request;
  this.metadata=new HashMap<>();
}",0.9602446483180428
162278,"@Override protected void doHealthCheck(Builder builder) throws Exception {
  List<String> openCircuitBreakers=new ArrayList<String>();
  for (  HystrixCommandMetrics metrics : HystrixCommandMetrics.getInstances()) {
    HystrixCircuitBreaker circuitBreaker=HystrixCircuitBreaker.Factory.getInstance(metrics.getCommandKey());
    if (circuitBreaker != null && circuitBreaker.isOpen()) {
      openCircuitBreakers.add(metrics.getCommandGroup().name() + ""String_Node_Str"" + metrics.getCommandKey().name());
    }
  }
  if (!openCircuitBreakers.isEmpty()) {
    builder.status(CIRCUIT_OPEN).withDetail(""String_Node_Str"",openCircuitBreakers);
  }
 else {
    builder.up();
  }
}","@Override protected void doHealthCheck(Builder builder) throws Exception {
  List<String> openCircuitBreakers=new ArrayList<>();
  for (  HystrixCommandMetrics metrics : HystrixCommandMetrics.getInstances()) {
    HystrixCircuitBreaker circuitBreaker=HystrixCircuitBreaker.Factory.getInstance(metrics.getCommandKey());
    if (circuitBreaker != null && circuitBreaker.isOpen()) {
      openCircuitBreakers.add(metrics.getCommandGroup().name() + ""String_Node_Str"" + metrics.getCommandKey().name());
    }
  }
  if (!openCircuitBreakers.isEmpty()) {
    builder.status(CIRCUIT_OPEN).withDetail(""String_Node_Str"",openCircuitBreakers);
  }
 else {
    builder.up();
  }
}",0.9955223880597016
162279,"@Override public void setAdditionalFilters(Collection<ClientFilter> additionalFilters){
  additionalFilters=new LinkedHashSet<ClientFilter>(additionalFilters);
  this.additionalFilters=additionalFilters;
  super.setAdditionalFilters(additionalFilters);
}","@Override public void setAdditionalFilters(Collection<ClientFilter> additionalFilters){
  additionalFilters=new LinkedHashSet<>(additionalFilters);
  this.additionalFilters=additionalFilters;
  super.setAdditionalFilters(additionalFilters);
}",0.9758064516129032
162280,"/** 
 * Construct a Jersey   {@link javax.ws.rs.core.Application} with all the resourcesrequired by the Eureka server.
 */
@Bean public javax.ws.rs.core.Application jerseyApplication(Environment environment,ResourceLoader resourceLoader){
  ClassPathScanningCandidateComponentProvider provider=new ClassPathScanningCandidateComponentProvider(false,environment);
  provider.addIncludeFilter(new AnnotationTypeFilter(Path.class));
  provider.addIncludeFilter(new AnnotationTypeFilter(Provider.class));
  Set<Class<?>> classes=new HashSet<Class<?>>();
  for (  String basePackage : EUREKA_PACKAGES) {
    Set<BeanDefinition> beans=provider.findCandidateComponents(basePackage);
    for (    BeanDefinition bd : beans) {
      Class<?> cls=ClassUtils.resolveClassName(bd.getBeanClassName(),resourceLoader.getClassLoader());
      classes.add(cls);
    }
  }
  Map<String,Object> propsAndFeatures=new HashMap<String,Object>();
  propsAndFeatures.put(ServletContainer.PROPERTY_WEB_PAGE_CONTENT_REGEX,EurekaConstants.DEFAULT_PREFIX + ""String_Node_Str"");
  DefaultResourceConfig rc=new DefaultResourceConfig(classes);
  rc.setPropertiesAndFeatures(propsAndFeatures);
  return rc;
}","/** 
 * Construct a Jersey   {@link javax.ws.rs.core.Application} with all the resourcesrequired by the Eureka server.
 */
@Bean public javax.ws.rs.core.Application jerseyApplication(Environment environment,ResourceLoader resourceLoader){
  ClassPathScanningCandidateComponentProvider provider=new ClassPathScanningCandidateComponentProvider(false,environment);
  provider.addIncludeFilter(new AnnotationTypeFilter(Path.class));
  provider.addIncludeFilter(new AnnotationTypeFilter(Provider.class));
  Set<Class<?>> classes=new HashSet<>();
  for (  String basePackage : EUREKA_PACKAGES) {
    Set<BeanDefinition> beans=provider.findCandidateComponents(basePackage);
    for (    BeanDefinition bd : beans) {
      Class<?> cls=ClassUtils.resolveClassName(bd.getBeanClassName(),resourceLoader.getClassLoader());
      classes.add(cls);
    }
  }
  Map<String,Object> propsAndFeatures=new HashMap<>();
  propsAndFeatures.put(ServletContainer.PROPERTY_WEB_PAGE_CONTENT_REGEX,EurekaConstants.DEFAULT_PREFIX + ""String_Node_Str"");
  DefaultResourceConfig rc=new DefaultResourceConfig(classes);
  rc.setPropertiesAndFeatures(propsAndFeatures);
  return rc;
}",0.990967741935484
162281,"@Test public void contextLoads() throws Exception {
  this.application.hello();
  assertThat(this.registration).isNotNull();
  assertThat(this.registration.getServiceId()).isEqualTo(""String_Node_Str"");
  this.task.gatherMetrics();
  Message<?> message=this.collector.forChannel(output).take();
  JsonNode tree=mapper.readTree((String)message.getPayload());
  assertThat(tree.hasNonNull(""String_Node_Str""));
  assertThat(tree.hasNonNull(""String_Node_Str""));
  assertThat(tree.hasNonNull(""String_Node_Str""));
  assertThat(tree.findValue(""String_Node_Str"").asText().equals(""String_Node_Str""));
}","@Test public void contextLoads() throws Exception {
  this.application.hello();
  assertThat(this.registration).isNotNull();
  assertThat(this.registration.getServiceId()).isEqualTo(""String_Node_Str"");
  this.task.gatherMetrics();
  Message<?> message=this.collector.forChannel(output).take();
  JsonNode tree=mapper.readTree((String)message.getPayload());
  assertThat(tree.hasNonNull(""String_Node_Str"")).isTrue();
  assertThat(tree.hasNonNull(""String_Node_Str"")).isTrue();
  assertThat(tree.hasNonNull(""String_Node_Str"")).isTrue();
  assertThat(tree.findValue(""String_Node_Str"").asText()).isEqualTo(""String_Node_Str"");
}",0.7759472817133443
162282,"@Override public List<Server> getFilteredListOfServers(List<Server> servers){
  List<Server> output=super.getFilteredListOfServers(servers);
  if (this.zone != null && output.size() == servers.size()) {
    List<Server> local=new ArrayList<Server>();
    for (    Server server : output) {
      if (this.zone.equalsIgnoreCase(server.getZone())) {
        local.add(server);
      }
    }
    if (!local.isEmpty()) {
      return local;
    }
  }
  return output;
}","@Override public List<Server> getFilteredListOfServers(List<Server> servers){
  List<Server> output=super.getFilteredListOfServers(servers);
  if (this.zone != null && output.size() == servers.size()) {
    List<Server> local=new ArrayList<>();
    for (    Server server : output) {
      if (this.zone.equalsIgnoreCase(server.getZone())) {
        local.add(server);
      }
    }
    if (!local.isEmpty()) {
      return local;
    }
  }
  return output;
}",0.9935064935064936
162283,"RibbonRetryPolicyServiceInstance(String serviceId,HttpRequest request){
  this.serviceId=serviceId;
  this.request=request;
  this.metadata=new HashMap<String,String>();
}","RibbonRetryPolicyServiceInstance(String serviceId,HttpRequest request){
  this.serviceId=serviceId;
  this.request=request;
  this.metadata=new HashMap<>();
}",0.96048632218845
162284,"@Override public void onApplicationEvent(ApplicationEnvironmentPreparedEvent event){
  Integer serverPort=event.getEnvironment().getProperty(""String_Node_Str"",Integer.class);
  Integer managementPort=event.getEnvironment().getProperty(""String_Node_Str"",Integer.class);
  Integer turbinePort=event.getEnvironment().getProperty(""String_Node_Str"",Integer.class);
  if (serverPort == null && managementPort == null) {
    return;
  }
  if (serverPort != Integer.valueOf(-1)) {
    Map<String,Object> ports=new HashMap<String,Object>();
    if (turbinePort == null) {
      ports.put(""String_Node_Str"",-1);
      if (serverPort != null) {
        ports.put(""String_Node_Str"",serverPort);
      }
    }
 else     if (managementPort != null && managementPort != -1 && serverPort == null) {
      ports.put(""String_Node_Str"",managementPort);
    }
    event.getEnvironment().getPropertySources().addFirst(new MapPropertySource(""String_Node_Str"",ports));
  }
}","@Override public void onApplicationEvent(ApplicationEnvironmentPreparedEvent event){
  Integer serverPort=event.getEnvironment().getProperty(""String_Node_Str"",Integer.class);
  Integer managementPort=event.getEnvironment().getProperty(""String_Node_Str"",Integer.class);
  Integer turbinePort=event.getEnvironment().getProperty(""String_Node_Str"",Integer.class);
  if (serverPort == null && managementPort == null) {
    return;
  }
  if (serverPort != Integer.valueOf(-1)) {
    Map<String,Object> ports=new HashMap<>();
    if (turbinePort == null) {
      ports.put(""String_Node_Str"",-1);
      if (serverPort != null) {
        ports.put(""String_Node_Str"",serverPort);
      }
    }
 else     if (managementPort != null && managementPort != -1 && serverPort == null) {
      ports.put(""String_Node_Str"",managementPort);
    }
    event.getEnvironment().getPropertySources().addFirst(new MapPropertySource(""String_Node_Str"",ports));
  }
}",0.9931180518793012
162285,"/** 
 * Compute a map of path pattern to route. The default is just a static map from the  {@link ZuulProperties}, but subclasses can add dynamic calculations.
 */
protected Map<String,ZuulRoute> locateRoutes(){
  LinkedHashMap<String,ZuulRoute> routesMap=new LinkedHashMap<String,ZuulRoute>();
  for (  ZuulRoute route : this.properties.getRoutes().values()) {
    routesMap.put(route.getPath(),route);
  }
  return routesMap;
}","/** 
 * Compute a map of path pattern to route. The default is just a static map from the  {@link ZuulProperties}, but subclasses can add dynamic calculations.
 */
protected Map<String,ZuulRoute> locateRoutes(){
  LinkedHashMap<String,ZuulRoute> routesMap=new LinkedHashMap<>();
  for (  ZuulRoute route : this.properties.getRoutes().values()) {
    routesMap.put(route.getPath(),route);
  }
  return routesMap;
}",0.6745843230403801
162286,"public void appendDebug(Map<String,Object> info,int status,MultiValueMap<String,String> headers){
  if (this.traces != null) {
    @SuppressWarnings(""String_Node_Str"") Map<String,Object> trace=(Map<String,Object>)info.get(""String_Node_Str"");
    Map<String,Object> output=new LinkedHashMap<String,Object>();
    trace.put(""String_Node_Str"",output);
    debugHeaders(headers,output);
    output.put(""String_Node_Str"",""String_Node_Str"" + status);
  }
}","public void appendDebug(Map<String,Object> info,int status,MultiValueMap<String,String> headers){
  if (this.traces != null) {
    @SuppressWarnings(""String_Node_Str"") Map<String,Object> trace=(Map<String,Object>)info.get(""String_Node_Str"");
    Map<String,Object> output=new LinkedHashMap<>();
    trace.put(""String_Node_Str"",output);
    debugHeaders(headers,output);
    output.put(""String_Node_Str"",""String_Node_Str"" + status);
  }
}",0.9853438556933484
162287,"@Override protected LinkedHashMap<String,ZuulRoute> locateRoutes(){
  LinkedHashMap<String,ZuulRoute> routesMap=new LinkedHashMap<String,ZuulRoute>();
  routesMap.putAll(super.locateRoutes());
  if (this.discovery != null) {
    Map<String,ZuulRoute> staticServices=new LinkedHashMap<String,ZuulRoute>();
    for (    ZuulRoute route : routesMap.values()) {
      String serviceId=route.getServiceId();
      if (serviceId == null) {
        serviceId=route.getId();
      }
      if (serviceId != null) {
        staticServices.put(serviceId,route);
      }
    }
    List<String> services=this.discovery.getServices();
    String[] ignored=this.properties.getIgnoredServices().toArray(new String[0]);
    for (    String serviceId : services) {
      String key=""String_Node_Str"" + mapRouteToService(serviceId) + ""String_Node_Str"";
      if (staticServices.containsKey(serviceId) && staticServices.get(serviceId).getUrl() == null) {
        ZuulRoute staticRoute=staticServices.get(serviceId);
        if (!StringUtils.hasText(staticRoute.getLocation())) {
          staticRoute.setLocation(serviceId);
        }
      }
      if (!PatternMatchUtils.simpleMatch(ignored,serviceId) && !routesMap.containsKey(key)) {
        routesMap.put(key,new ZuulRoute(key,serviceId));
      }
    }
  }
  if (routesMap.get(DEFAULT_ROUTE) != null) {
    ZuulRoute defaultRoute=routesMap.get(DEFAULT_ROUTE);
    routesMap.remove(DEFAULT_ROUTE);
    routesMap.put(DEFAULT_ROUTE,defaultRoute);
  }
  LinkedHashMap<String,ZuulRoute> values=new LinkedHashMap<>();
  for (  Entry<String,ZuulRoute> entry : routesMap.entrySet()) {
    String path=entry.getKey();
    if (!path.startsWith(""String_Node_Str"")) {
      path=""String_Node_Str"" + path;
    }
    if (StringUtils.hasText(this.properties.getPrefix())) {
      path=this.properties.getPrefix() + path;
      if (!path.startsWith(""String_Node_Str"")) {
        path=""String_Node_Str"" + path;
      }
    }
    values.put(path,entry.getValue());
  }
  return values;
}","@Override protected LinkedHashMap<String,ZuulRoute> locateRoutes(){
  LinkedHashMap<String,ZuulRoute> routesMap=new LinkedHashMap<>();
  routesMap.putAll(super.locateRoutes());
  if (this.discovery != null) {
    Map<String,ZuulRoute> staticServices=new LinkedHashMap<>();
    for (    ZuulRoute route : routesMap.values()) {
      String serviceId=route.getServiceId();
      if (serviceId == null) {
        serviceId=route.getId();
      }
      if (serviceId != null) {
        staticServices.put(serviceId,route);
      }
    }
    List<String> services=this.discovery.getServices();
    String[] ignored=this.properties.getIgnoredServices().toArray(new String[0]);
    for (    String serviceId : services) {
      String key=""String_Node_Str"" + mapRouteToService(serviceId) + ""String_Node_Str"";
      if (staticServices.containsKey(serviceId) && staticServices.get(serviceId).getUrl() == null) {
        ZuulRoute staticRoute=staticServices.get(serviceId);
        if (!StringUtils.hasText(staticRoute.getLocation())) {
          staticRoute.setLocation(serviceId);
        }
      }
      if (!PatternMatchUtils.simpleMatch(ignored,serviceId) && !routesMap.containsKey(key)) {
        routesMap.put(key,new ZuulRoute(key,serviceId));
      }
    }
  }
  if (routesMap.get(DEFAULT_ROUTE) != null) {
    ZuulRoute defaultRoute=routesMap.get(DEFAULT_ROUTE);
    routesMap.remove(DEFAULT_ROUTE);
    routesMap.put(DEFAULT_ROUTE,defaultRoute);
  }
  LinkedHashMap<String,ZuulRoute> values=new LinkedHashMap<>();
  for (  Entry<String,ZuulRoute> entry : routesMap.entrySet()) {
    String path=entry.getKey();
    if (!path.startsWith(""String_Node_Str"")) {
      path=""String_Node_Str"" + path;
    }
    if (StringUtils.hasText(this.properties.getPrefix())) {
      path=this.properties.getPrefix() + path;
      if (!path.startsWith(""String_Node_Str"")) {
        path=""String_Node_Str"" + path;
      }
    }
    values.put(path,entry.getValue());
  }
  return values;
}",0.9330985915492958
162288,"private MultiValueMap<String,String> revertHeaders(Header[] headers){
  MultiValueMap<String,String> map=new LinkedMultiValueMap<String,String>();
  for (  Header header : headers) {
    String name=header.getName();
    if (!map.containsKey(name)) {
      map.put(name,new ArrayList<String>());
    }
    map.get(name).add(header.getValue());
  }
  return map;
}","private MultiValueMap<String,String> revertHeaders(Header[] headers){
  MultiValueMap<String,String> map=new LinkedMultiValueMap<>();
  for (  Header header : headers) {
    String name=header.getName();
    if (!map.containsKey(name)) {
      map.put(name,new ArrayList<String>());
    }
    map.get(name).add(header.getValue());
  }
  return map;
}",0.9817671809256662
162289,"@Bean public ApacheHttpClientFactory apacheHttpClientFactory(){
  return new MyApacheHttpClientFactory();
}","@Bean public ApacheHttpClientFactory apacheHttpClientFactory(HttpClientBuilder builder){
  return new MyApacheHttpClientFactory(builder);
}",0.8699186991869918
162290,"@Bean public OkHttpClientFactory clientFactory(){
  return new MyOkHttpClientFactory();
}","@Bean public OkHttpClientFactory clientFactory(OkHttpClient.Builder builder){
  return new MyOkHttpClientFactory(builder);
}",0.8356807511737089
162291,"@Bean public ApacheHttpClientFactory customHttpClientFactory(){
  return new CustomApacheHttpClientFactory();
}","@Bean public ApacheHttpClientFactory customHttpClientFactory(HttpClientBuilder builder){
  return new CustomApacheHttpClientFactory(builder);
}",0.8740157480314961
162292,"@Bean ApacheHttpClientFactory clientFactory(){
  return new DefaultApacheHttpClientFactory();
}","@Bean ApacheHttpClientFactory clientFactory(){
  return new DefaultApacheHttpClientFactory(HttpClientBuilder.create());
}",0.8796296296296297
162293,"@Bean public ApacheHttpClientFactory apacheHttpClientFactory(){
  return new MyApacheHttpClientFactory();
}","@Bean public ApacheHttpClientFactory apacheHttpClientFactory(HttpClientBuilder builder){
  return new MyApacheHttpClientFactory(builder);
}",0.8699186991869918
162294,"@Test public void updatedWhenRegionChanged(){
  changeProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  this.context.publishEvent(new EnvironmentChangeEvent(Collections.singleton(REGION)));
  assertTrue(""String_Node_Str"",serviceUrlMatches(""String_Node_Str""));
  changeProperty(""String_Node_Str"");
  this.context.publishEvent(new EnvironmentChangeEvent(Collections.singleton(REGION)));
  assertTrue(""String_Node_Str"",serviceUrlMatches(""String_Node_Str""));
}","@Test @Ignore public void updatedWhenRegionChanged(){
  changeProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  this.context.publishEvent(new EnvironmentChangeEvent(Collections.singleton(REGION)));
  assertTrue(""String_Node_Str"",serviceUrlMatches(""String_Node_Str""));
  changeProperty(""String_Node_Str"");
  this.context.publishEvent(new EnvironmentChangeEvent(Collections.singleton(REGION)));
  assertTrue(""String_Node_Str"",serviceUrlMatches(""String_Node_Str""));
}",0.992467043314501
162295,"private void changeProperty(final String... pairs){
  EnvironmentTestUtils.addEnvironment(this.context,pairs);
}","private void changeProperty(final String... pairs){
  TestPropertyValues.of(pairs).applyTo(this.context);
}",0.7579908675799086
162296,"@Test public void updatedWhenAvailabilityZoneChanged(){
  changeProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  this.context.publishEvent(new EnvironmentChangeEvent(Collections.singleton(""String_Node_Str"")));
  assertTrue(this.peerEurekaNodes.getPeerEurekaNodes().get(0).getServiceUrl().equals(""String_Node_Str""));
  changeProperty(""String_Node_Str"");
  this.context.publishEvent(new EnvironmentChangeEvent(Collections.singleton(""String_Node_Str"")));
  assertTrue(""String_Node_Str"",serviceUrlMatches(""String_Node_Str""));
}","@Test @Ignore public void updatedWhenAvailabilityZoneChanged(){
  changeProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  this.context.publishEvent(new EnvironmentChangeEvent(Collections.singleton(""String_Node_Str"")));
  assertTrue(this.peerEurekaNodes.getPeerEurekaNodes().get(0).getServiceUrl().equals(""String_Node_Str""));
  changeProperty(""String_Node_Str"");
  this.context.publishEvent(new EnvironmentChangeEvent(Collections.singleton(""String_Node_Str"")));
  assertTrue(""String_Node_Str"",serviceUrlMatches(""String_Node_Str""));
}",0.9931153184165232
162297,"@Bean protected ArchaiusEndpoint archaiusEndpoint(){
  return new ArchaiusEndpoint();
}","@Bean @ConditionalOnEnabledEndpoint protected ArchaiusEndpoint archaiusEndpoint(){
  return new ArchaiusEndpoint();
}",0.8529411764705882
162298,"@Override public Map<String,Object> invoke(){
  Map<String,Object> map=new LinkedHashMap<String,Object>();
  AbstractConfiguration config=ConfigurationManager.getConfigInstance();
  if (config instanceof ConcurrentCompositeConfiguration) {
    ConcurrentCompositeConfiguration composite=(ConcurrentCompositeConfiguration)config;
    for (    Configuration item : composite.getConfigurations()) {
      append(map,item);
    }
  }
 else {
    append(map,config);
  }
  return map;
}","@ReadOperation public Map<String,Object> invoke(){
  Map<String,Object> map=new LinkedHashMap<String,Object>();
  AbstractConfiguration config=ConfigurationManager.getConfigInstance();
  if (config instanceof ConcurrentCompositeConfiguration) {
    ConcurrentCompositeConfiguration composite=(ConcurrentCompositeConfiguration)config;
    for (    Configuration item : composite.getConfigurations()) {
      append(map,item);
    }
  }
 else {
    append(map,config);
  }
  return map;
}",0.9803516028955532
162299,"@ManagedAttribute public Map<String,String> invoke(){
  Map<String,String> map=new LinkedHashMap<>();
  for (  Route route : this.routes.getRoutes()) {
    map.put(route.getFullPath(),route.getLocation());
  }
  return map;
}","@ReadOperation public Map<String,String> invoke(){
  Map<String,String> map=new LinkedHashMap<>();
  for (  Route route : this.routes.getRoutes()) {
    map.put(route.getFullPath(),route.getLocation());
  }
  return map;
}",0.9395973154362416
162300,"@Autowired public RoutesEndpoint(RouteLocator routes){
  super(ID,true);
  this.routes=routes;
}","public RoutesEndpoint(RouteLocator routes){
  this.routes=routes;
}",0.8220858895705522
162301,"@Bean public RoutesEndpoint zuulEndpoint(RouteLocator routeLocator){
  return new RoutesEndpoint(routeLocator);
}","@Bean @ConditionalOnEnabledEndpoint public RoutesEndpoint zuulEndpoint(RouteLocator routeLocator){
  return new RoutesEndpoint(routeLocator);
}",0.8828125
162302,"@Test public void pathStartsWithSlash(){
  HystrixStreamEndpoint endpoint=new HystrixStreamEndpoint();
  assertEquals(""String_Node_Str"",endpoint.getPath());
}","@Test public void pathStartsWithSlash(){
  HystrixStreamEndpoint endpoint=new HystrixStreamEndpoint();
}",0.7938931297709924
162303,"private synchronized void buildContentData(){
  try {
    MultiValueMap<String,Object> builder=RequestContentDataExtractor.extract(this.request);
    FormHttpOutputMessage data=new FormHttpOutputMessage();
    this.contentType=MediaType.valueOf(this.request.getContentType());
    data.getHeaders().setContentType(this.contentType);
    FormBodyWrapperFilter.this.formHttpMessageConverter.write(builder,this.contentType,data);
    this.contentType=data.getHeaders().getContentType();
    this.contentData=data.getInput();
    this.contentLength=this.contentData.length;
  }
 catch (  Exception e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
}","private synchronized void buildContentData(){
  if (this.contentData != null) {
    return;
  }
  try {
    MultiValueMap<String,Object> builder=RequestContentDataExtractor.extract(this.request);
    FormHttpOutputMessage data=new FormHttpOutputMessage();
    this.contentType=MediaType.valueOf(this.request.getContentType());
    data.getHeaders().setContentType(this.contentType);
    FormBodyWrapperFilter.this.formHttpMessageConverter.write(builder,this.contentType,data);
    this.contentType=data.getHeaders().getContentType();
    byte[] input=data.getInput();
    this.contentLength=input.length;
    this.contentData=input;
  }
 catch (  Exception e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
}",0.8637346791636625
162304,"public RibbonLoadBalancedRetryPolicy(String serviceId,RibbonLoadBalancerContext context,ServiceInstanceChooser loadBalanceChooser,IClientConfig clientConfig){
  this.serviceId=serviceId;
  this.lbContext=context;
  this.loadBalanceChooser=loadBalanceChooser;
  String retryableStatusCodesProp=clientConfig.getPropertyAsString(RETRYABLE_STATUS_CODES,""String_Node_Str"");
  String[] retryableStatusCodesArray=retryableStatusCodesProp.split(""String_Node_Str"");
  for (  String code : retryableStatusCodesArray) {
    if (!StringUtils.isEmpty(code)) {
      try {
        retryableStatusCodes.add(Integer.valueOf(code));
      }
 catch (      NumberFormatException e) {
      }
    }
  }
}","public RibbonLoadBalancedRetryPolicy(String serviceId,RibbonLoadBalancerContext context,ServiceInstanceChooser loadBalanceChooser,IClientConfig clientConfig){
  this.serviceId=serviceId;
  this.lbContext=context;
  this.loadBalanceChooser=loadBalanceChooser;
  String retryableStatusCodesProp=clientConfig.getPropertyAsString(RETRYABLE_STATUS_CODES,""String_Node_Str"");
  String[] retryableStatusCodesArray=retryableStatusCodesProp.split(""String_Node_Str"");
  for (  String code : retryableStatusCodesArray) {
    if (!StringUtils.isEmpty(code)) {
      try {
        retryableStatusCodes.add(Integer.valueOf(code.trim()));
      }
 catch (      NumberFormatException e) {
      }
    }
  }
}",0.9949090909090909
162305,"HttpRequest toHttpRequest(){
  return new HttpRequest(){
    @Override public HttpMethod getMethod(){
      return HttpMethod.resolve(RibbonRequest.this.toRequest().method());
    }
    @Override public URI getURI(){
      return RibbonRequest.this.getUri();
    }
    @Override public HttpHeaders getHeaders(){
      Map<String,List<String>> headers=new HashMap<String,List<String>>();
      Map<String,Collection<String>> feignHeaders=RibbonRequest.this.toRequest().headers();
      for (      String key : feignHeaders.keySet()) {
        headers.put(key,new ArrayList<String>(feignHeaders.get(key)));
      }
      HttpHeaders httpHeaders=new HttpHeaders();
      httpHeaders.putAll(headers);
      return httpHeaders;
    }
  }
;
}","HttpRequest toHttpRequest(){
  return new HttpRequest(){
    @Override public HttpMethod getMethod(){
      return HttpMethod.resolve(RibbonRequest.this.toRequest().method());
    }
    @Override public String getMethodValue(){
      return getMethod().name();
    }
    @Override public URI getURI(){
      return RibbonRequest.this.getUri();
    }
    @Override public HttpHeaders getHeaders(){
      Map<String,List<String>> headers=new HashMap<String,List<String>>();
      Map<String,Collection<String>> feignHeaders=RibbonRequest.this.toRequest().headers();
      for (      String key : feignHeaders.keySet()) {
        headers.put(key,new ArrayList<String>(feignHeaders.get(key)));
      }
      HttpHeaders httpHeaders=new HttpHeaders();
      httpHeaders.putAll(headers);
      return httpHeaders;
    }
  }
;
}",0.9004495825305073
162306,"@Override public void encode(Object requestBody,Type bodyType,RequestTemplate request) throws EncodeException {
  if (requestBody != null) {
    Class<?> requestType=requestBody.getClass();
    Collection<String> contentTypes=request.headers().get(""String_Node_Str"");
    MediaType requestContentType=null;
    if (contentTypes != null && !contentTypes.isEmpty()) {
      String type=contentTypes.iterator().next();
      requestContentType=MediaType.valueOf(type);
    }
    for (    HttpMessageConverter<?> messageConverter : this.messageConverters.getObject().getConverters()) {
      if (messageConverter.canWrite(requestType,requestContentType)) {
        if (log.isDebugEnabled()) {
          if (requestContentType != null) {
            log.debug(""String_Node_Str"" + requestBody + ""String_Node_Str""+ requestContentType+ ""String_Node_Str""+ messageConverter+ ""String_Node_Str"");
          }
 else {
            log.debug(""String_Node_Str"" + requestBody + ""String_Node_Str""+ messageConverter+ ""String_Node_Str"");
          }
        }
        FeignOutputMessage outputMessage=new FeignOutputMessage(request);
        try {
          @SuppressWarnings(""String_Node_Str"") HttpMessageConverter<Object> copy=(HttpMessageConverter<Object>)messageConverter;
          copy.write(requestBody,requestContentType,outputMessage);
        }
 catch (        IOException ex) {
          throw new EncodeException(""String_Node_Str"",ex);
        }
        request.headers(null);
        request.headers(getHeaders(outputMessage.getHeaders()));
        request.body(outputMessage.getOutputStream().toByteArray(),Charset.forName(""String_Node_Str""));
        return;
      }
    }
    String message=""String_Node_Str"" + ""String_Node_Str"" + requestType.getName() + ""String_Node_Str"";
    if (requestContentType != null) {
      message+=""String_Node_Str"" + requestContentType + ""String_Node_Str"";
    }
    throw new EncodeException(message);
  }
}","@Override public void encode(Object requestBody,Type bodyType,RequestTemplate request) throws EncodeException {
  if (requestBody != null) {
    Class<?> requestType=requestBody.getClass();
    Collection<String> contentTypes=request.headers().get(""String_Node_Str"");
    MediaType requestContentType=null;
    if (contentTypes != null && !contentTypes.isEmpty()) {
      String type=contentTypes.iterator().next();
      requestContentType=MediaType.valueOf(type);
    }
    for (    HttpMessageConverter<?> messageConverter : this.messageConverters.getObject().getConverters()) {
      if (messageConverter.canWrite(requestType,requestContentType)) {
        if (log.isDebugEnabled()) {
          if (requestContentType != null) {
            log.debug(""String_Node_Str"" + requestBody + ""String_Node_Str""+ requestContentType+ ""String_Node_Str""+ messageConverter+ ""String_Node_Str"");
          }
 else {
            log.debug(""String_Node_Str"" + requestBody + ""String_Node_Str""+ messageConverter+ ""String_Node_Str"");
          }
        }
        FeignOutputMessage outputMessage=new FeignOutputMessage(request);
        try {
          @SuppressWarnings(""String_Node_Str"") HttpMessageConverter<Object> copy=(HttpMessageConverter<Object>)messageConverter;
          copy.write(requestBody,requestContentType,outputMessage);
        }
 catch (        IOException ex) {
          throw new EncodeException(""String_Node_Str"",ex);
        }
        request.headers(null);
        request.headers(getHeaders(outputMessage.getHeaders()));
        if (messageConverter instanceof ByteArrayHttpMessageConverter) {
          request.body(outputMessage.getOutputStream().toByteArray(),null);
        }
 else {
          request.body(outputMessage.getOutputStream().toByteArray(),Charset.forName(""String_Node_Str""));
        }
        return;
      }
    }
    String message=""String_Node_Str"" + ""String_Node_Str"" + requestType.getName() + ""String_Node_Str"";
    if (requestContentType != null) {
      message+=""String_Node_Str"" + requestContentType + ""String_Node_Str"";
    }
    throw new EncodeException(message);
  }
}",0.9557697059550284
162307,"@Override public boolean canWrite(Class<?> clazz,MediaType mediaType){
  return true;
}","@Override public boolean canWrite(Class<?> clazz,MediaType mediaType){
  if (clazz == String.class) {
    return true;
  }
  return false;
}",0.7665198237885462
162308,"@Test public void testCustomHttpMessageConverter(){
  SpringEncoder encoder=this.context.getInstance(""String_Node_Str"",SpringEncoder.class);
  assertThat(encoder,is(notNullValue()));
  RequestTemplate request=new RequestTemplate();
  encoder.encode(""String_Node_Str"",MyType.class,request);
  Collection<String> contentTypeHeader=request.headers().get(""String_Node_Str"");
  assertThat(""String_Node_Str"",contentTypeHeader,is(notNullValue()));
  assertThat(""String_Node_Str"",contentTypeHeader.isEmpty(),is(false));
  String header=contentTypeHeader.iterator().next();
  assertThat(""String_Node_Str"",header,is(""String_Node_Str""));
}","@Test public void testCustomHttpMessageConverter(){
  SpringEncoder encoder=this.context.getInstance(""String_Node_Str"",SpringEncoder.class);
  assertThat(encoder,is(notNullValue()));
  RequestTemplate request=new RequestTemplate();
  encoder.encode(""String_Node_Str"",MyType.class,request);
  Collection<String> contentTypeHeader=request.headers().get(""String_Node_Str"");
  assertThat(""String_Node_Str"",contentTypeHeader,is(notNullValue()));
  assertThat(""String_Node_Str"",contentTypeHeader.isEmpty(),is(false));
  String header=contentTypeHeader.iterator().next();
  assertThat(""String_Node_Str"",header,is(""String_Node_Str""));
  assertThat(""String_Node_Str"",request.charset(),is(notNullValue()));
  assertThat(""String_Node_Str"",request.charset(),is(Charset.forName(""String_Node_Str"")));
}",0.8870056497175142
162309,"public String getQueryString(MultiValueMap<String,String> params){
  if (params.isEmpty()) {
    return ""String_Node_Str"";
  }
  StringBuilder query=new StringBuilder();
  Map<String,Object> singles=new HashMap<>();
  for (  String param : params.keySet()) {
    int i=0;
    for (    String value : params.get(param)) {
      query.append(""String_Node_Str"");
      query.append(param);
      if (!""String_Node_Str"".equals(value)) {
        singles.put(param + i,value);
        query.append(""String_Node_Str"");
        query.append(param + i);
        query.append(""String_Node_Str"");
      }
      i++;
    }
  }
  UriTemplate template=new UriTemplate(""String_Node_Str"" + query.toString().substring(1));
  return template.expand(singles).toString();
}","/** 
 * Get url encoded query string. Pay special attention to single parameters with no values and parameter names with colon (:) from use of UriTemplate.
 * @param params Un-encoded request parameters
 * @return
 */
public String getQueryString(MultiValueMap<String,String> params){
  if (params.isEmpty()) {
    return ""String_Node_Str"";
  }
  StringBuilder query=new StringBuilder();
  Map<String,Object> singles=new HashMap<>();
  for (  String param : params.keySet()) {
    int i=0;
    for (    String value : params.get(param)) {
      query.append(""String_Node_Str"");
      query.append(param);
      if (!""String_Node_Str"".equals(value)) {
        String key=param;
        if (key.contains(""String_Node_Str"")) {
          key=(key.replaceAll(""String_Node_Str"",""String_Node_Str""));
        }
        if (key.contains(""String_Node_Str"")) {
          key=key.replaceAll(""String_Node_Str"",""String_Node_Str"");
        }
        key=key + i;
        singles.put(key,value);
        query.append(""String_Node_Str"");
        query.append(key);
        query.append(""String_Node_Str"");
      }
      i++;
    }
  }
  UriTemplate template=new UriTemplate(""String_Node_Str"" + query.toString().substring(1));
  return template.expand(singles).toString();
}",0.7237431557989049
162310,"@Override public Object run(){
  RequestContext ctx=RequestContext.getCurrentContext();
  HttpServletRequest request=ctx.getRequest();
  FormBodyRequestWrapper wrapper=null;
  if (request instanceof HttpServletRequestWrapper) {
    HttpServletRequest wrapped=(HttpServletRequest)ReflectionUtils.getField(this.requestField,request);
    wrapper=new FormBodyRequestWrapper(wrapped);
    ReflectionUtils.setField(this.requestField,request,wrapper);
  }
 else {
    wrapper=new FormBodyRequestWrapper(request);
    ctx.setRequest(wrapper);
  }
  if (wrapper != null) {
    ctx.getZuulRequestHeaders().put(""String_Node_Str"",wrapper.getContentType());
  }
  return null;
}","@Override public Object run(){
  RequestContext ctx=RequestContext.getCurrentContext();
  HttpServletRequest request=ctx.getRequest();
  FormBodyRequestWrapper wrapper=null;
  if (request instanceof HttpServletRequestWrapper) {
    HttpServletRequest wrapped=(HttpServletRequest)ReflectionUtils.getField(this.requestField,request);
    wrapper=new FormBodyRequestWrapper(wrapped);
    ReflectionUtils.setField(this.requestField,request,wrapper);
    if (request instanceof ServletRequestWrapper) {
      ReflectionUtils.setField(this.servletRequestField,request,wrapper);
    }
  }
 else {
    wrapper=new FormBodyRequestWrapper(request);
    ctx.setRequest(wrapper);
  }
  if (wrapper != null) {
    ctx.getZuulRequestHeaders().put(""String_Node_Str"",wrapper.getContentType());
  }
  return null;
}",0.9098360655737704
162311,"public FormBodyWrapperFilter(){
  this.requestField=ReflectionUtils.findField(HttpServletRequestWrapper.class,""String_Node_Str"",HttpServletRequest.class);
  Assert.notNull(this.requestField,""String_Node_Str"");
  this.requestField.setAccessible(true);
}","public FormBodyWrapperFilter(){
  this.requestField=ReflectionUtils.findField(HttpServletRequestWrapper.class,""String_Node_Str"",HttpServletRequest.class);
  this.servletRequestField=ReflectionUtils.findField(ServletRequestWrapper.class,""String_Node_Str"",ServletRequest.class);
  Assert.notNull(this.requestField,""String_Node_Str"");
  Assert.notNull(this.servletRequestField,""String_Node_Str"");
  this.requestField.setAccessible(true);
  this.servletRequestField.setAccessible(true);
}",0.6277173913043478
162312,"@Override protected ClientHttpResponse run() throws Exception {
  final RequestContext context=RequestContext.getCurrentContext();
  String contentLengthHeader=context.getRequest().getHeader(""String_Node_Str"");
  if (StringUtils.hasText(contentLengthHeader)) {
    this.context.setContentLength(new Long(contentLengthHeader));
  }
  RQ request=createRequest();
  RS response=this.client.executeWithLoadBalancer(request);
  context.set(""String_Node_Str"",response);
  if (this.isResponseTimedOut()) {
    if (response != null) {
      response.close();
    }
  }
  return new RibbonHttpResponse(response);
}","@Override protected ClientHttpResponse run() throws Exception {
  final RequestContext context=RequestContext.getCurrentContext();
  long contentLength=context.getRequest().getContentLengthLong();
  if (contentLength != -1) {
    this.context.setContentLength(contentLength);
  }
  RQ request=createRequest();
  RS response=this.client.executeWithLoadBalancer(request);
  context.set(""String_Node_Str"",response);
  if (this.isResponseTimedOut()) {
    if (response != null) {
      response.close();
    }
  }
  return new RibbonHttpResponse(response);
}",0.8386540120793787
162313,"@Override public URI reconstructURIWithServer(Server server,URI original){
  String scheme=original.getScheme();
  if (!""String_Node_Str"".equals(scheme) && this.serverIntrospector.isSecure(server)) {
    original=UriComponentsBuilder.fromUri(original).scheme(""String_Node_Str"").build().toUri();
  }
  return super.reconstructURIWithServer(server,original);
}","@Override public URI reconstructURIWithServer(Server server,URI original){
  String scheme=original.getScheme();
  if (!""String_Node_Str"".equals(scheme) && this.serverIntrospector.isSecure(server)) {
    original=UriComponentsBuilder.fromUri(original).scheme(""String_Node_Str"").build(true).toUri();
  }
  return super.reconstructURIWithServer(server,original);
}",0.9944444444444444
162314,"@Test public void restClientInitCalledOnce(){
  CountingConfig config=new CountingConfig();
  config.setProperty(CommonClientConfigKey.ConnectTimeout,""String_Node_Str"");
  config.setProperty(CommonClientConfigKey.ReadTimeout,""String_Node_Str"");
  config.setProperty(CommonClientConfigKey.MaxHttpConnectionsPerHost,""String_Node_Str"");
  config.setClientName(""String_Node_Str"");
  new TestRestClient(config);
  assertThat(config.count,is(equalTo(1)));
}","@Test public void restClientInitCalledOnce(){
  new TestRestClient(config);
  assertThat(config.count,is(equalTo(1)));
}",0.4203152364273205
162315,"private synchronized void buildContentData(){
  try {
    MultiValueMap<String,Object> builder=new LinkedMultiValueMap<String,Object>();
    Set<String> queryParams=findQueryParams();
    for (    Entry<String,String[]> entry : this.request.getParameterMap().entrySet()) {
      if (!queryParams.contains(entry.getKey())) {
        for (        String value : entry.getValue()) {
          builder.add(entry.getKey(),value);
        }
      }
    }
    if (this.request instanceof MultipartRequest) {
      MultipartRequest multi=(MultipartRequest)this.request;
      for (      Entry<String,List<MultipartFile>> parts : multi.getMultiFileMap().entrySet()) {
        for (        Part file : this.request.getParts()) {
          HttpHeaders headers=new HttpHeaders();
          headers.setContentDispositionFormData(file.getName(),file.getSubmittedFileName());
          if (file.getContentType() != null) {
            headers.setContentType(MediaType.valueOf(file.getContentType()));
          }
          HttpEntity<Resource> entity=new HttpEntity<Resource>(new InputStreamResource(file.getInputStream()),headers);
          builder.add(parts.getKey(),entity);
        }
      }
    }
    FormHttpOutputMessage data=new FormHttpOutputMessage();
    this.contentType=MediaType.valueOf(this.request.getContentType());
    data.getHeaders().setContentType(this.contentType);
    this.converter.write(builder,this.contentType,data);
    this.contentType=data.getHeaders().getContentType();
    this.contentData=data.getInput();
    this.contentLength=this.contentData.length;
  }
 catch (  Exception e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
}","private synchronized void buildContentData(){
  try {
    MultiValueMap<String,Object> builder=new LinkedMultiValueMap<String,Object>();
    Set<String> queryParams=findQueryParams();
    for (    Entry<String,String[]> entry : this.request.getParameterMap().entrySet()) {
      if (!queryParams.contains(entry.getKey())) {
        for (        String value : entry.getValue()) {
          builder.add(entry.getKey(),value);
        }
      }
    }
    if (this.request instanceof MultipartRequest) {
      MultipartRequest multi=(MultipartRequest)this.request;
      for (      Entry<String,List<MultipartFile>> parts : multi.getMultiFileMap().entrySet()) {
        for (        MultipartFile file : parts.getValue()) {
          HttpHeaders headers=new HttpHeaders();
          headers.setContentDispositionFormData(file.getName(),file.getOriginalFilename());
          if (file.getContentType() != null) {
            headers.setContentType(MediaType.valueOf(file.getContentType()));
          }
          HttpEntity<Resource> entity=new HttpEntity<Resource>(new InputStreamResource(file.getInputStream()),headers);
          builder.add(parts.getKey(),entity);
        }
      }
    }
    FormHttpOutputMessage data=new FormHttpOutputMessage();
    this.contentType=MediaType.valueOf(this.request.getContentType());
    data.getHeaders().setContentType(this.contentType);
    this.converter.write(builder,this.contentType,data);
    this.contentType=data.getHeaders().getContentType();
    this.contentData=data.getInput();
    this.contentLength=this.contentData.length;
  }
 catch (  Exception e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
}",0.9787106446776612
162316,"public void registerFeignClients(AnnotationMetadata metadata,BeanDefinitionRegistry registry){
  ClassPathScanningCandidateComponentProvider scanner=getScanner();
  scanner.setResourceLoader(this.resourceLoader);
  Set<String> basePackages;
  Map<String,Object> attrs=metadata.getAnnotationAttributes(EnableFeignClients.class.getName());
  AnnotationTypeFilter annotationTypeFilter=new AnnotationTypeFilter(FeignClient.class);
  final Class<?>[] clients=attrs == null ? null : (Class<?>[])attrs.get(""String_Node_Str"");
  if (clients == null || clients.length == 0) {
    scanner.addIncludeFilter(annotationTypeFilter);
    basePackages=getBasePackages(metadata);
  }
 else {
    final Set<String> clientClasses=new HashSet<>();
    basePackages=new HashSet<>();
    for (    Class<?> clazz : clients) {
      basePackages.add(ClassUtils.getPackageName(clazz));
      clientClasses.add(clazz.getCanonicalName());
    }
    AbstractClassTestingTypeFilter filter=new AbstractClassTestingTypeFilter(){
      @Override protected boolean match(      ClassMetadata metadata){
        String cleaned=metadata.getClassName().replaceAll(""String_Node_Str"",""String_Node_Str"");
        return clientClasses.contains(cleaned);
      }
    }
;
    scanner.addIncludeFilter(new AllTypeFilter(Arrays.asList(filter,annotationTypeFilter)));
  }
  for (  String basePackage : basePackages) {
    Set<BeanDefinition> candidateComponents=scanner.findCandidateComponents(basePackage);
    for (    BeanDefinition candidateComponent : candidateComponents) {
      if (candidateComponent instanceof AnnotatedBeanDefinition) {
        AnnotatedBeanDefinition beanDefinition=(AnnotatedBeanDefinition)candidateComponent;
        AnnotationMetadata annotationMetadata=beanDefinition.getMetadata();
        Assert.isTrue(annotationMetadata.isInterface(),""String_Node_Str"");
        Map<String,Object> attributes=annotationMetadata.getAnnotationAttributes(FeignClient.class.getCanonicalName());
        attributes=AnnotationAttributes.fromMap(attributes);
        String name=getClientName(attributes);
        registerClientConfiguration(registry,name,attributes.get(""String_Node_Str""));
        registerFeignClient(registry,annotationMetadata,attributes);
      }
    }
  }
}","public void registerFeignClients(AnnotationMetadata metadata,BeanDefinitionRegistry registry){
  ClassPathScanningCandidateComponentProvider scanner=getScanner();
  scanner.setResourceLoader(this.resourceLoader);
  Set<String> basePackages;
  Map<String,Object> attrs=metadata.getAnnotationAttributes(EnableFeignClients.class.getName());
  AnnotationTypeFilter annotationTypeFilter=new AnnotationTypeFilter(FeignClient.class);
  final Class<?>[] clients=attrs == null ? null : (Class<?>[])attrs.get(""String_Node_Str"");
  if (clients == null || clients.length == 0) {
    scanner.addIncludeFilter(annotationTypeFilter);
    basePackages=getBasePackages(metadata);
  }
 else {
    final Set<String> clientClasses=new HashSet<>();
    basePackages=new HashSet<>();
    for (    Class<?> clazz : clients) {
      basePackages.add(ClassUtils.getPackageName(clazz));
      clientClasses.add(clazz.getCanonicalName());
    }
    AbstractClassTestingTypeFilter filter=new AbstractClassTestingTypeFilter(){
      @Override protected boolean match(      ClassMetadata metadata){
        String cleaned=metadata.getClassName().replaceAll(""String_Node_Str"",""String_Node_Str"");
        return clientClasses.contains(cleaned);
      }
    }
;
    scanner.addIncludeFilter(new AllTypeFilter(Arrays.asList(filter,annotationTypeFilter)));
  }
  for (  String basePackage : basePackages) {
    Set<BeanDefinition> candidateComponents=scanner.findCandidateComponents(basePackage);
    for (    BeanDefinition candidateComponent : candidateComponents) {
      if (candidateComponent instanceof AnnotatedBeanDefinition) {
        AnnotatedBeanDefinition beanDefinition=(AnnotatedBeanDefinition)candidateComponent;
        AnnotationMetadata annotationMetadata=beanDefinition.getMetadata();
        Assert.isTrue(annotationMetadata.isInterface(),""String_Node_Str"");
        Map<String,Object> attributes=annotationMetadata.getAnnotationAttributes(FeignClient.class.getCanonicalName());
        String name=getClientName(attributes);
        registerClientConfiguration(registry,name,attributes.get(""String_Node_Str""));
        registerFeignClient(registry,annotationMetadata,attributes);
      }
    }
  }
}",0.9140148950575492
162317,"private void validate(Map<String,Object> attributes){
  if (StringUtils.hasText((String)attributes.get(""String_Node_Str""))) {
    Assert.isTrue(!StringUtils.hasText((String)attributes.get(""String_Node_Str"")),""String_Node_Str"");
  }
}","private void validate(Map<String,Object> attributes){
  AnnotationAttributes annotation=AnnotationAttributes.fromMap(attributes);
  annotation.getAliasedString(""String_Node_Str"",FeignClient.class,null);
}",0.2974828375286041
162318,"@Override public void start(){
  if (this.gauges == null) {
    return;
  }
  MetricsAsJsonPollerListener listener=new MetricsAsJsonPollerListener(){
    @Override public void handleJsonMetric(    String json){
      try {
        @SuppressWarnings(""String_Node_Str"") Map<String,Object> map=HystrixMetricsPollerConfiguration.this.mapper.readValue(json,Map.class);
        if (map != null && map.containsKey(""String_Node_Str"")) {
          addMetrics(map,""String_Node_Str"");
        }
      }
 catch (      IOException ex) {
      }
    }
  }
;
  this.poller=new HystrixMetricsPoller(listener,2000);
  this.poller.start();
  logger.info(""String_Node_Str"");
}","@Override public void start(){
  if (this.gauges == null) {
    return;
  }
  MetricsAsJsonPollerListener listener=new MetricsAsJsonPollerListener(){
    @Override public void handleJsonMetric(    String json){
      try {
        @SuppressWarnings(""String_Node_Str"") Map<String,Object> map=HystrixMetricsPollerConfiguration.this.mapper.readValue(json,Map.class);
        if (map != null && map.containsKey(""String_Node_Str"")) {
          addMetrics(map,""String_Node_Str"");
        }
      }
 catch (      IOException ex) {
      }
    }
  }
;
  this.poller=new HystrixMetricsPoller(listener,metricsProperties.getPollingIntervalMs());
  this.poller.start();
  logger.info(""String_Node_Str"");
}",0.9674074074074074
162319,"@Override public Object getObject() throws Exception {
  FeignContext context=applicationContext.getBean(FeignContext.class);
  Feign.Builder builder=feign(context);
  if (!StringUtils.hasText(this.url)) {
    String url;
    if (!this.name.startsWith(""String_Node_Str"")) {
      url=""String_Node_Str"" + this.name;
    }
 else {
      url=this.name;
    }
    return loadBalance(builder,context,new HardCodedTarget<>(this.type,this.name,url));
  }
  if (StringUtils.hasText(this.url) && !this.url.startsWith(""String_Node_Str"")) {
    this.url=""String_Node_Str"" + this.url;
  }
  return targeter.target(this,builder,context,new HardCodedTarget<>(this.type,this.name,this.url));
}","@Override public Object getObject() throws Exception {
  FeignContext context=applicationContext.getBean(FeignContext.class);
  Feign.Builder builder=feign(context);
  if (!StringUtils.hasText(this.url)) {
    String url;
    if (!this.name.startsWith(""String_Node_Str"")) {
      url=""String_Node_Str"" + this.name;
    }
 else {
      url=this.name;
    }
    url+=cleanPath();
    return loadBalance(builder,context,new HardCodedTarget<>(this.type,this.name,url));
  }
  if (StringUtils.hasText(this.url) && !this.url.startsWith(""String_Node_Str"")) {
    this.url=""String_Node_Str"" + this.url;
  }
  String url=this.url + cleanPath();
  return targeter.target(this,builder,context,new HardCodedTarget<>(this.type,this.name,url));
}",0.9546099290780142
162320,"private void registerFeignClient(BeanDefinitionRegistry registry,AnnotationMetadata annotationMetadata,Map<String,Object> attributes){
  String className=annotationMetadata.getClassName();
  BeanDefinitionBuilder definition=BeanDefinitionBuilder.genericBeanDefinition(FeignClientFactoryBean.class);
  validate(attributes);
  definition.addPropertyValue(""String_Node_Str"",getUrl(attributes));
  String name=getName(attributes);
  definition.addPropertyValue(""String_Node_Str"",name);
  definition.addPropertyValue(""String_Node_Str"",className);
  definition.addPropertyValue(""String_Node_Str"",attributes.get(""String_Node_Str""));
  definition.addPropertyValue(""String_Node_Str"",attributes.get(""String_Node_Str""));
  definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);
  String alias=name + ""String_Node_Str"";
  AbstractBeanDefinition beanDefinition=definition.getBeanDefinition();
  beanDefinition.setPrimary(true);
  BeanDefinitionHolder holder=new BeanDefinitionHolder(beanDefinition,className,new String[]{alias});
  BeanDefinitionReaderUtils.registerBeanDefinition(holder,registry);
}","private void registerFeignClient(BeanDefinitionRegistry registry,AnnotationMetadata annotationMetadata,Map<String,Object> attributes){
  String className=annotationMetadata.getClassName();
  BeanDefinitionBuilder definition=BeanDefinitionBuilder.genericBeanDefinition(FeignClientFactoryBean.class);
  validate(attributes);
  definition.addPropertyValue(""String_Node_Str"",getUrl(attributes));
  definition.addPropertyValue(""String_Node_Str"",getPath(attributes));
  String name=getName(attributes);
  definition.addPropertyValue(""String_Node_Str"",name);
  definition.addPropertyValue(""String_Node_Str"",className);
  definition.addPropertyValue(""String_Node_Str"",attributes.get(""String_Node_Str""));
  definition.addPropertyValue(""String_Node_Str"",attributes.get(""String_Node_Str""));
  definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);
  String alias=name + ""String_Node_Str"";
  AbstractBeanDefinition beanDefinition=definition.getBeanDefinition();
  beanDefinition.setPrimary(true);
  BeanDefinitionHolder holder=new BeanDefinitionHolder(beanDefinition,className,new String[]{alias});
  BeanDefinitionReaderUtils.registerBeanDefinition(holder,registry);
}",0.9691901408450704
162321,"@Bean public RibbonClientHttpRequestFactory ribbonClientHttpRequestFactory(){
  return new RibbonClientHttpRequestFactory(this.springClientFactory,this.loadBalancerClient);
}","@Bean public RibbonClientHttpRequestFactory ribbonClientHttpRequestFactory(){
  return new RibbonClientHttpRequestFactory(this.springClientFactory);
}",0.925925925925926
162322,"@Override @SuppressWarnings(""String_Node_Str"") public ClientHttpRequest createRequest(URI originalUri,HttpMethod httpMethod) throws IOException {
  String serviceId=originalUri.getHost();
  if (serviceId == null) {
    throw new IOException(""String_Node_Str"" + originalUri.toASCIIString() + ""String_Node_Str"");
  }
  ServiceInstance instance=this.loadBalancer.choose(serviceId);
  if (instance == null) {
    throw new IllegalStateException(""String_Node_Str"" + serviceId);
  }
  URI uri=this.loadBalancer.reconstructURI(instance,originalUri);
  IClientConfig clientConfig=this.clientFactory.getClientConfig(instance.getServiceId());
  RestClient client=this.clientFactory.getClient(instance.getServiceId(),RestClient.class);
  HttpRequest.Verb verb=HttpRequest.Verb.valueOf(httpMethod.name());
  RibbonLoadBalancerContext context=this.clientFactory.getLoadBalancerContext(serviceId);
  Server server=null;
  if (instance instanceof RibbonServer) {
    server=((RibbonServer)instance).getServer();
  }
  RibbonStatsRecorder statsRecorder=new RibbonStatsRecorder(context,server);
  return new RibbonHttpRequest(uri,verb,client,clientConfig,statsRecorder);
}","@Override @SuppressWarnings(""String_Node_Str"") public ClientHttpRequest createRequest(URI originalUri,HttpMethod httpMethod) throws IOException {
  String serviceId=originalUri.getHost();
  if (serviceId == null) {
    throw new IOException(""String_Node_Str"" + originalUri.toASCIIString() + ""String_Node_Str"");
  }
  IClientConfig clientConfig=this.clientFactory.getClientConfig(serviceId);
  RestClient client=this.clientFactory.getClient(serviceId,RestClient.class);
  HttpRequest.Verb verb=HttpRequest.Verb.valueOf(httpMethod.name());
  return new RibbonHttpRequest(originalUri,verb,client,clientConfig);
}",0.5748299319727891
162323,"public RibbonClientHttpRequestFactory(SpringClientFactory clientFactory,LoadBalancerClient loadBalancer){
  this.clientFactory=clientFactory;
  this.loadBalancer=loadBalancer;
}","public RibbonClientHttpRequestFactory(SpringClientFactory clientFactory){
  this.clientFactory=clientFactory;
}",0.7708333333333334
162324,"@Override protected ClientHttpResponse executeInternal(HttpHeaders headers) throws IOException {
  try {
    addHeaders(headers);
    if (outputStream != null) {
      outputStream.close();
      builder.entity(outputStream.toByteArray());
    }
    HttpRequest request=builder.build();
    HttpResponse response=client.execute(request,config);
    statsRecorder.recordStats(response);
    return new RibbonHttpResponse(response);
  }
 catch (  Exception e) {
    statsRecorder.recordStats(e);
    throw new IOException(e);
  }
}","@Override protected ClientHttpResponse executeInternal(HttpHeaders headers) throws IOException {
  try {
    addHeaders(headers);
    if (outputStream != null) {
      outputStream.close();
      builder.entity(outputStream.toByteArray());
    }
    HttpRequest request=builder.build();
    HttpResponse response=client.executeWithLoadBalancer(request,config);
    return new RibbonHttpResponse(response);
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}",0.908908908908909
162325,"private void addHeaders(HttpHeaders headers){
  for (  String name : headers.keySet()) {
    if (!isDynamic(name)) {
      List<String> values=headers.get(name);
      for (      String value : values) {
        builder.header(name,value);
      }
    }
  }
}","private void addHeaders(HttpHeaders headers){
  for (  String name : headers.keySet()) {
    if (isDynamic(name) && outputStream != null) {
      continue;
    }
    if (name.equals(""String_Node_Str"") && outputStream == null) {
      continue;
    }
    List<String> values=headers.get(name);
    for (    String value : values) {
      builder.header(name,value);
    }
  }
}",0.7275590551181103
162326,"public RibbonHttpRequest(URI uri,HttpRequest.Verb verb,RestClient client,IClientConfig config,RibbonStatsRecorder statsRecorder){
  this.uri=uri;
  this.verb=verb;
  this.client=client;
  this.config=config;
  this.statsRecorder=statsRecorder;
  this.builder=HttpRequest.newBuilder().uri(uri).verb(verb);
}","public RibbonHttpRequest(URI uri,HttpRequest.Verb verb,RestClient client,IClientConfig config){
  this.uri=uri;
  this.verb=verb;
  this.client=client;
  this.config=config;
  this.builder=HttpRequest.newBuilder().uri(uri).verb(verb);
}",0.8708487084870848
162327,"private AtomicLong getCounterStorage(Id id){
  final AtomicLong newCounter=new AtomicLong(0);
  final AtomicLong existingCounter=counters.putIfAbsent(id,newCounter);
  return existingCounter == null ? newCounter : existingCounter;
}","private AtomicLong getCounterStorage(Id id){
  final AtomicLong newCounter=new AtomicLong(0);
  final AtomicLong existingCounter=counters.putIfAbsent(id,newCounter);
  return existingCounter == null ? registry.gauge(id,newCounter) : existingCounter;
}",0.9192546583850932
162328,"@Override public void submit(String name,double dValue){
  long value=((Double)dValue).longValue();
  if (name.startsWith(""String_Node_Str"")) {
    registry.distributionSummary(stripMetricName(name)).record(value);
  }
 else   if (name.startsWith(""String_Node_Str"")) {
    registry.timer(stripMetricName(name)).record(value,TimeUnit.MILLISECONDS);
  }
 else {
    final Id id=registry.createId(name);
    final AtomicDouble gauge=getGaugeStorage(id);
    gauge.set(dValue);
    registry.register(new NumericGauge(id,gauge));
  }
}","@Override public void submit(String name,double dValue){
  if (name.startsWith(""String_Node_Str"")) {
    registry.distributionSummary(stripMetricName(name)).record((long)dValue);
  }
 else   if (name.startsWith(""String_Node_Str"")) {
    long value=(long)(dValue * 1e6);
    registry.timer(stripMetricName(name)).record(value,TimeUnit.NANOSECONDS);
  }
 else {
    final Id id=registry.createId(name);
    final AtomicDouble gauge=getGaugeStorage(id);
    gauge.set(dValue);
  }
}",0.7433102081268583
162329,"private AtomicDouble getGaugeStorage(Id id){
  final AtomicDouble newGauge=new AtomicDouble(0);
  final AtomicDouble existingGauge=gauges.putIfAbsent(id,newGauge);
  return existingGauge == null ? newGauge : existingGauge;
}","private AtomicDouble getGaugeStorage(Id id){
  final AtomicDouble newGauge=new AtomicDouble(0);
  final AtomicDouble existingGauge=gauges.putIfAbsent(id,newGauge);
  return existingGauge == null ? registry.gauge(id,newGauge) : existingGauge;
}",0.925053533190578
162330,"private void incrementInternal(String name,long value){
  if (name.startsWith(""String_Node_Str"")) {
  }
 else   if (name.startsWith(""String_Node_Str"")) {
    registry.counter(stripMetricName(name)).increment(value);
  }
 else {
    final Id id=registry.createId(name);
    final AtomicLong gauge=getCounterStorage(id);
    gauge.addAndGet(value);
    registry.register(new NumericGauge(id,gauge));
  }
}","private void incrementInternal(String name,long value){
  if (name.startsWith(""String_Node_Str"")) {
  }
 else   if (name.startsWith(""String_Node_Str"")) {
    registry.counter(stripMetricName(name)).increment(value);
  }
 else {
    final Id id=registry.createId(name);
    final AtomicLong gauge=getCounterStorage(id);
    gauge.addAndGet(value);
  }
}",0.932450331125828
162331,"@Override protected Object lookupHandler(String urlPath,HttpServletRequest request) throws Exception {
  if (this.errorController != null && urlPath.equals(this.errorController.getErrorPath())) {
    return null;
  }
  String[] ignored=this.routeLocator.getIgnoredPaths().toArray(new String[0]);
  if (PatternMatchUtils.simpleMatch(ignored,urlPath)) {
    return null;
  }
  return super.lookupHandler(urlPath,request);
}","@Override protected Object lookupHandler(String urlPath,HttpServletRequest request) throws Exception {
  if (this.errorController != null && urlPath.equals(this.errorController.getErrorPath())) {
    return null;
  }
  String[] ignored=this.routeLocator.getIgnoredPaths().toArray(new String[0]);
  if (PatternMatchUtils.simpleMatch(ignored,urlPath)) {
    return null;
  }
  RequestContext ctx=RequestContext.getCurrentContext();
  if (ctx.containsKey(""String_Node_Str"")) {
    return null;
  }
  return super.lookupHandler(urlPath,request);
}",0.8734439834024896
162332,"@Before public void init(){
  this.mapping=new ZuulHandlerMapping(this.locator,new ZuulController());
  this.mapping.setErrorController(this.errors);
  Mockito.when(this.errors.getErrorPath()).thenReturn(""String_Node_Str"");
}","@Before public void init(){
  RequestContext.getCurrentContext().clear();
  this.mapping=new ZuulHandlerMapping(this.locator,new ZuulController());
  this.mapping.setErrorController(this.errors);
  Mockito.when(this.errors.getErrorPath()).thenReturn(""String_Node_Str"");
}",0.907258064516129
162333,"private void debugRequestEntity(Map<String,Object> info,InputStream inputStream) throws IOException {
  String entity=IOUtils.toString(inputStream);
  if (StringUtils.hasText(entity)) {
    info.put(""String_Node_Str"",entity);
  }
}","private void debugRequestEntity(Map<String,Object> info,InputStream inputStream) throws IOException {
  if (RequestContext.getCurrentContext().isChunkedRequestBody()) {
    info.put(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  String entity=IOUtils.toString(inputStream);
  if (StringUtils.hasText(entity)) {
    info.put(""String_Node_Str"",entity.length() <= 4096 ? entity : entity.substring(0,4096) + ""String_Node_Str"");
  }
}",0.6905829596412556
162334,"@Override public int getContentLength(){
  if (this.contentData == null) {
    buildContentData();
  }
  return this.contentLength;
}","@Override public int getContentLength(){
  if (super.getContentLength() <= 0) {
    return super.getContentLength();
  }
  if (this.contentData == null) {
    buildContentData();
  }
  return this.contentLength;
}",0.7687861271676301
162335,"@Override public ServletInputStream getInputStream() throws IOException {
  if (RequestContext.getCurrentContext().isChunkedRequestBody()) {
    return this.request.getInputStream();
  }
 else {
    if (this.contentData == null) {
      buildContentData();
    }
    return new ServletInputStreamWrapper(this.contentData);
  }
}","@Override public ServletInputStream getInputStream() throws IOException {
  if (this.contentData == null) {
    buildContentData();
  }
  return new ServletInputStreamWrapper(this.contentData);
}",0.745697896749522
162336,"public static void main(String[] args){
  SpringApplication.run(FormZuulProxyApplication.class,args);
}","public static void main(String[] args){
  new SpringApplicationBuilder(FormZuulProxyApplication.class).properties(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").run(args);
}",0.704225352112676
162337,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String file(@RequestParam(required=false) MultipartFile file) throws IOException {
  return ""String_Node_Str"" + (file == null ? ""String_Node_Str"" : new String(file.getBytes()));
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String file(@RequestParam(required=false) MultipartFile file) throws IOException {
  byte[] bytes=new byte[0];
  if (file != null) {
    if (file.getSize() > 1024) {
      bytes=new byte[1024];
      InputStream inputStream=file.getInputStream();
      inputStream.read(bytes);
      byte[] buffer=new byte[1024 * 1024 * 10];
      while (inputStream.read(buffer) >= 0) {
        log.info(""String_Node_Str"");
      }
    }
 else {
      bytes=file.getBytes();
    }
  }
  return ""String_Node_Str"" + new String(bytes);
}",0.4988179669030733
162338,"protected LinkedHashMap<String,ZuulRoute> locateRoutes(){
  LinkedHashMap<String,ZuulRoute> routesMap=new LinkedHashMap<String,ZuulRoute>();
  addConfiguredRoutes(routesMap);
  routesMap.putAll(this.staticRoutes);
  if (this.discovery != null) {
    Map<String,ZuulRoute> staticServices=new LinkedHashMap<String,ZuulRoute>();
    for (    ZuulRoute route : routesMap.values()) {
      String serviceId=route.getServiceId();
      if (serviceId == null) {
        serviceId=route.getId();
      }
      if (serviceId != null) {
        staticServices.put(serviceId,route);
      }
    }
    List<String> services=this.discovery.getServices();
    String[] ignored=this.properties.getIgnoredServices().toArray(new String[0]);
    for (    String serviceId : services) {
      String key=""String_Node_Str"" + serviceId + ""String_Node_Str"";
      if (staticServices.containsKey(serviceId) && staticServices.get(serviceId).getUrl() == null) {
        ZuulRoute staticRoute=staticServices.get(serviceId);
        staticRoute.updateRoute(key,serviceId);
      }
      if (!PatternMatchUtils.simpleMatch(ignored,serviceId) && !routesMap.containsKey(key)) {
        routesMap.put(key,new ZuulRoute(key,serviceId));
      }
    }
  }
  if (routesMap.get(DEFAULT_ROUTE) != null) {
    ZuulRoute defaultRoute=routesMap.get(DEFAULT_ROUTE);
    routesMap.remove(DEFAULT_ROUTE);
    routesMap.put(DEFAULT_ROUTE,defaultRoute);
  }
  LinkedHashMap<String,ZuulRoute> values=new LinkedHashMap<>();
  for (  Entry<String,ZuulRoute> entry : routesMap.entrySet()) {
    String path=entry.getKey();
    if (!path.startsWith(""String_Node_Str"")) {
      path=""String_Node_Str"" + path;
    }
    if (StringUtils.hasText(this.properties.getPrefix())) {
      path=this.properties.getPrefix() + path;
      if (!path.startsWith(""String_Node_Str"")) {
        path=""String_Node_Str"" + path;
      }
    }
    values.put(path,entry.getValue());
  }
  return values;
}","protected LinkedHashMap<String,ZuulRoute> locateRoutes(){
  LinkedHashMap<String,ZuulRoute> routesMap=new LinkedHashMap<String,ZuulRoute>();
  addConfiguredRoutes(routesMap);
  routesMap.putAll(this.staticRoutes);
  if (this.discovery != null) {
    Map<String,ZuulRoute> staticServices=new LinkedHashMap<String,ZuulRoute>();
    for (    ZuulRoute route : routesMap.values()) {
      String serviceId=route.getServiceId();
      if (serviceId == null) {
        serviceId=route.getId();
      }
      if (serviceId != null) {
        staticServices.put(serviceId,route);
      }
    }
    List<String> services=this.discovery.getServices();
    String[] ignored=this.properties.getIgnoredServices().toArray(new String[0]);
    for (    String serviceId : services) {
      String key=""String_Node_Str"" + serviceId + ""String_Node_Str"";
      if (staticServices.containsKey(serviceId) && staticServices.get(serviceId).getUrl() == null) {
        ZuulRoute staticRoute=staticServices.get(serviceId);
        if (!StringUtils.hasText(staticRoute.getLocation())) {
          staticRoute.setLocation(serviceId);
        }
      }
      if (!PatternMatchUtils.simpleMatch(ignored,serviceId) && !routesMap.containsKey(key)) {
        routesMap.put(key,new ZuulRoute(key,serviceId));
      }
    }
  }
  if (routesMap.get(DEFAULT_ROUTE) != null) {
    ZuulRoute defaultRoute=routesMap.get(DEFAULT_ROUTE);
    routesMap.remove(DEFAULT_ROUTE);
    routesMap.put(DEFAULT_ROUTE,defaultRoute);
  }
  LinkedHashMap<String,ZuulRoute> values=new LinkedHashMap<>();
  for (  Entry<String,ZuulRoute> entry : routesMap.entrySet()) {
    String path=entry.getKey();
    if (!path.startsWith(""String_Node_Str"")) {
      path=""String_Node_Str"" + path;
    }
    if (StringUtils.hasText(this.properties.getPrefix())) {
      path=this.properties.getPrefix() + path;
      if (!path.startsWith(""String_Node_Str"")) {
        path=""String_Node_Str"" + path;
      }
    }
    values.put(path,entry.getValue());
  }
  return values;
}",0.9677746764780512
162339,"public ZuulRoute(String path,String location){
  updateRoute(path,location);
}","public ZuulRoute(String path,String location){
  this.id=extractId(path);
  this.path=path;
  setLocation(location);
}",0.7040816326530612
162340,"@Override public Object run(){
  try {
    RequestContext ctx=RequestContext.getCurrentContext();
    int statusCode=(Integer)ctx.get(""String_Node_Str"");
    if (ctx.containsKey(""String_Node_Str"")) {
      Object e=ctx.get(""String_Node_Str"");
      log.warn(""String_Node_Str"",Throwable.class.cast(e));
      ctx.getRequest().setAttribute(""String_Node_Str"",e);
    }
    ctx.getRequest().setAttribute(""String_Node_Str"",statusCode);
    RequestDispatcher dispatcher=ctx.getRequest().getRequestDispatcher(errorPath);
    if (dispatcher != null) {
      dispatcher.forward(ctx.getRequest(),ctx.getResponse());
    }
  }
 catch (  Exception e) {
    Throwables.propagate(e);
  }
  return null;
}","@Override public Object run(){
  try {
    RequestContext ctx=RequestContext.getCurrentContext();
    int statusCode=(Integer)ctx.get(""String_Node_Str"");
    if (ctx.containsKey(""String_Node_Str"")) {
      Object e=ctx.get(""String_Node_Str"");
      log.warn(""String_Node_Str"",Throwable.class.cast(e));
      ctx.getRequest().setAttribute(""String_Node_Str"",e);
    }
    ctx.getRequest().setAttribute(""String_Node_Str"",statusCode);
    RequestDispatcher dispatcher=ctx.getRequest().getRequestDispatcher(errorPath);
    if (dispatcher != null) {
      ctx.set(SEND_ERROR_FILTER_RAN,true);
      dispatcher.forward(ctx.getRequest(),ctx.getResponse());
    }
  }
 catch (  Exception e) {
    Throwables.propagate(e);
  }
  return null;
}",0.9697821503865074
162341,"@Override public boolean shouldFilter(){
  RequestContext ctx=RequestContext.getCurrentContext();
  return ctx.containsKey(""String_Node_Str"");
}","@Override public boolean shouldFilter(){
  RequestContext ctx=RequestContext.getCurrentContext();
  return ctx.containsKey(""String_Node_Str"") && !ctx.getBoolean(SEND_ERROR_FILTER_RAN,false);
}",0.8571428571428571
162342,"@Bean public FilterInitializer zuulFilterInitializer(){
  return new FilterInitializer(filters);
}","@Bean public ZuulFilterInitializer zuulFilterInitializer(){
  return new ZuulFilterInitializer(filters);
}",0.9607843137254902
162343,"protected LinkedHashMap<String,ZuulRoute> locateRoutes(){
  LinkedHashMap<String,ZuulRoute> routesMap=new LinkedHashMap<>();
  addConfiguredRoutes(routesMap);
  routesMap.putAll(staticRoutes);
  List<String> services=discovery.getServices();
  for (  String serviceId : services) {
    String key=""String_Node_Str"" + serviceId + ""String_Node_Str"";
    if (!properties.getIgnoredServices().contains(serviceId) && !routesMap.containsKey(key)) {
      routesMap.put(key,new ZuulRoute(key,serviceId));
    }
  }
  if (routesMap.get(DEFAULT_ROUTE) != null) {
    String defaultServiceId=routesMap.get(DEFAULT_ROUTE).getServiceId();
    routesMap.remove(DEFAULT_ROUTE);
    routesMap.put(DEFAULT_ROUTE,new ZuulRoute(defaultServiceId));
  }
  LinkedHashMap<String,ZuulRoute> values=new LinkedHashMap<>();
  for (  Entry<String,ZuulRoute> entry : routesMap.entrySet()) {
    String path=entry.getKey();
    if (!path.startsWith(""String_Node_Str"")) {
      path=""String_Node_Str"" + path;
    }
    if (StringUtils.hasText(properties.getPrefix())) {
      path=properties.getPrefix() + path;
      if (!path.startsWith(""String_Node_Str"")) {
        path=""String_Node_Str"" + path;
      }
    }
    values.put(path,entry.getValue());
  }
  return values;
}","protected LinkedHashMap<String,ZuulRoute> locateRoutes(){
  LinkedHashMap<String,ZuulRoute> routesMap=new LinkedHashMap<>();
  addConfiguredRoutes(routesMap);
  routesMap.putAll(staticRoutes);
  List<String> services=discovery.getServices();
  for (  String serviceId : services) {
    String key=""String_Node_Str"" + serviceId + ""String_Node_Str"";
    if (!properties.getIgnoredServices().contains(serviceId) && !routesMap.containsKey(key)) {
      routesMap.put(key,new ZuulRoute(key,serviceId));
    }
  }
  if (routesMap.get(DEFAULT_ROUTE) != null) {
    ZuulRoute defaultRoute=routesMap.get(DEFAULT_ROUTE);
    routesMap.remove(DEFAULT_ROUTE);
    routesMap.put(DEFAULT_ROUTE,new ZuulRoute(defaultRoute.getPath(),defaultRoute.getLocation()));
  }
  LinkedHashMap<String,ZuulRoute> values=new LinkedHashMap<>();
  for (  Entry<String,ZuulRoute> entry : routesMap.entrySet()) {
    String path=entry.getKey();
    if (!path.startsWith(""String_Node_Str"")) {
      path=""String_Node_Str"" + path;
    }
    if (StringUtils.hasText(properties.getPrefix())) {
      path=properties.getPrefix() + path;
      if (!path.startsWith(""String_Node_Str"")) {
        path=""String_Node_Str"" + path;
      }
    }
    values.put(path,entry.getValue());
  }
  return values;
}",0.9621061029118468
162344,"private MultivaluedMap<String,String> buildZuulRequestHeaders(HttpServletRequest request){
  RequestContext context=RequestContext.getCurrentContext();
  MultivaluedMap<String,String> headers=new MultivaluedMapImpl();
  Enumeration<?> headerNames=request.getHeaderNames();
  if (headerNames != null) {
    while (headerNames.hasMoreElements()) {
      String name=(String)headerNames.nextElement();
      String value=request.getHeader(name);
      if (!name.toLowerCase().contains(""String_Node_Str""))       headers.putSingle(name,value);
    }
  }
  Map<String,String> zuulRequestHeaders=context.getZuulRequestHeaders();
  for (  String header : zuulRequestHeaders.keySet()) {
    headers.putSingle(header,zuulRequestHeaders.get(header));
  }
  headers.putSingle(""String_Node_Str"",""String_Node_Str"");
  if (headers.containsKey(""String_Node_Str""))   headers.remove(""String_Node_Str"");
  return headers;
}","private MultivaluedMap<String,String> buildZuulRequestHeaders(HttpServletRequest request){
  RequestContext context=RequestContext.getCurrentContext();
  MultivaluedMap<String,String> headers=new MultivaluedMapImpl();
  Enumeration<?> headerNames=request.getHeaderNames();
  if (headerNames != null) {
    while (headerNames.hasMoreElements()) {
      String name=(String)headerNames.nextElement();
      String value=request.getHeader(name);
      if (!name.toLowerCase().contains(""String_Node_Str""))       headers.putSingle(name,value);
    }
  }
  Map<String,String> zuulRequestHeaders=context.getZuulRequestHeaders();
  for (  String header : zuulRequestHeaders.keySet()) {
    headers.putSingle(header,zuulRequestHeaders.get(header));
  }
  headers.putSingle(""String_Node_Str"",""String_Node_Str"");
  if (headers.containsKey(""String_Node_Str""))   headers.remove(""String_Node_Str"");
  if (headers.containsKey(""String_Node_Str""))   headers.remove(""String_Node_Str"");
  return headers;
}",0.9561078794288737
162345,"public void init(View parent,MaterialMenu actionBarIcon){
  SeekBar duration=(SeekBar)parent.findViewById(R.id.item_animation_duration);
  duration.setMax(4600);
  duration.setProgress(2600);
  duration.setOnSeekBarChangeListener(this);
  materialMenuView=(MaterialMenuView)parent.findViewById(R.id.material_menu_button);
  materialMenuView.setOnClickListener(this);
  materialIcon=actionBarIcon;
  parent.findViewById(R.id.switch_item_arrow).setOnClickListener(this);
  parent.findViewById(R.id.switch_item_menu).setOnClickListener(this);
  parent.findViewById(R.id.switch_item_x).setOnClickListener(this);
  parent.findViewById(R.id.switch_item_check).setOnClickListener(this);
  parent.findViewById(R.id.animate_item_arrow).setOnClickListener(this);
  parent.findViewById(R.id.animate_item_menu).setOnClickListener(this);
  parent.findViewById(R.id.animate_item_x).setOnClickListener(this);
  parent.findViewById(R.id.animate_item_check).setOnClickListener(this);
  drawerLayout=((DrawerLayout)parent.findViewById(R.id.drawer_layout));
  drawerLayout.setDrawerListener(new DrawerLayout.SimpleDrawerListener(){
    private boolean direction=false;
    @Override public void onDrawerSlide(    View drawerView,    float slideOffset){
      materialIcon.setTransformationOffset(AnimationState.BURGER_ARROW,direction ? 2 - slideOffset : slideOffset);
    }
    @Override public void onDrawerOpened(    android.view.View drawerView){
      direction=true;
    }
    @Override public void onDrawerClosed(    android.view.View drawerView){
      direction=false;
    }
  }
);
  drawerLayout.postDelayed(new Runnable(){
    @Override public void run(){
      drawerLayout.openDrawer(Gravity.LEFT);
    }
  }
,1500);
}","public void init(View parent,MaterialMenu actionBarIcon){
  SeekBar duration=(SeekBar)parent.findViewById(R.id.item_animation_duration);
  duration.setMax(4600);
  duration.setProgress(2600);
  duration.setOnSeekBarChangeListener(this);
  materialMenuView=(MaterialMenuView)parent.findViewById(R.id.material_menu_button);
  materialMenuView.setOnClickListener(this);
  materialIcon=actionBarIcon;
  parent.findViewById(R.id.switch_item_arrow).setOnClickListener(this);
  parent.findViewById(R.id.switch_item_menu).setOnClickListener(this);
  parent.findViewById(R.id.switch_item_x).setOnClickListener(this);
  parent.findViewById(R.id.switch_item_check).setOnClickListener(this);
  parent.findViewById(R.id.animate_item_arrow).setOnClickListener(this);
  parent.findViewById(R.id.animate_item_menu).setOnClickListener(this);
  parent.findViewById(R.id.animate_item_x).setOnClickListener(this);
  parent.findViewById(R.id.animate_item_check).setOnClickListener(this);
  drawerLayout=((DrawerLayout)parent.findViewById(R.id.drawer_layout));
  drawerLayout.setDrawerListener(new DrawerLayout.SimpleDrawerListener(){
    @Override public void onDrawerSlide(    View drawerView,    float slideOffset){
      materialIcon.setTransformationOffset(MaterialMenuDrawable.AnimationState.BURGER_ARROW,direction ? 2 - slideOffset : slideOffset);
    }
    @Override public void onDrawerOpened(    android.view.View drawerView){
      direction=true;
    }
    @Override public void onDrawerClosed(    android.view.View drawerView){
      direction=false;
    }
  }
);
  drawerLayout.postDelayed(new Runnable(){
    @Override public void run(){
      drawerLayout.openDrawer(Gravity.LEFT);
    }
  }
,1500);
}",0.913681738109219
162346,"@Override public void onDrawerSlide(View drawerView,float slideOffset){
  materialIcon.setTransformationOffset(AnimationState.BURGER_ARROW,direction ? 2 - slideOffset : slideOffset);
}","@Override public void onDrawerSlide(View drawerView,float slideOffset){
  materialIcon.setTransformationOffset(MaterialMenuDrawable.AnimationState.BURGER_ARROW,direction ? 2 - slideOffset : slideOffset);
}",0.9460154241645244
162347,"@Override public void run(){
  item.width=item.view.getMeasuredWidth();
  item.height=item.view.getMeasuredHeight();
  item.view.setAlpha(1);
  ((ViewGroup)getActivityContentView()).removeView(item.view);
}","@Override public void run(){
  if (item.view.getMeasuredWidth() == 0 && tries < MAX_TRIES) {
    item.view.post(this);
    return;
  }
  item.width=item.view.getMeasuredWidth();
  item.height=item.view.getMeasuredHeight();
  item.view.setAlpha(1);
  ((ViewGroup)getActivityContentView()).removeView(item.view);
}",0.7953667953667953
162348,"/** 
 * Constructor that takes the parameters collected using   {@link FloatingActionMenu.Builder}
 * @param mainActionView
 * @param startAngle
 * @param endAngle
 * @param radius
 * @param subActionItems
 * @param animationHandler
 * @param animated
 */
public FloatingActionMenu(View mainActionView,int startAngle,int endAngle,int radius,ArrayList<Item> subActionItems,MenuAnimationHandler animationHandler,boolean animated){
  this.mainActionView=mainActionView;
  this.startAngle=startAngle;
  this.endAngle=endAngle;
  this.radius=radius;
  this.subActionItems=subActionItems;
  this.animationHandler=animationHandler;
  this.animated=animated;
  this.open=false;
  this.mainActionView.setClickable(true);
  this.mainActionView.setOnClickListener(new ActionViewClickListener());
  if (animationHandler != null) {
    animationHandler.setMenu(this);
  }
  for (  final Item item : subActionItems) {
    if (item.width == 0 || item.height == 0) {
      ((ViewGroup)getActivityContentView()).addView(item.view);
      item.view.setAlpha(0);
      item.view.post(new Runnable(){
        @Override public void run(){
          item.width=item.view.getMeasuredWidth();
          item.height=item.view.getMeasuredHeight();
          item.view.setAlpha(1);
          ((ViewGroup)getActivityContentView()).removeView(item.view);
        }
      }
);
    }
  }
}","/** 
 * Constructor that takes the parameters collected using   {@link FloatingActionMenu.Builder}
 * @param mainActionView
 * @param startAngle
 * @param endAngle
 * @param radius
 * @param subActionItems
 * @param animationHandler
 * @param animated
 */
public FloatingActionMenu(View mainActionView,int startAngle,int endAngle,int radius,ArrayList<Item> subActionItems,MenuAnimationHandler animationHandler,boolean animated){
  this.mainActionView=mainActionView;
  this.startAngle=startAngle;
  this.endAngle=endAngle;
  this.radius=radius;
  this.subActionItems=subActionItems;
  this.animationHandler=animationHandler;
  this.animated=animated;
  this.open=false;
  this.mainActionView.setClickable(true);
  this.mainActionView.setOnClickListener(new ActionViewClickListener());
  if (animationHandler != null) {
    animationHandler.setMenu(this);
  }
  for (  final Item item : subActionItems) {
    if (item.width == 0 || item.height == 0) {
      ((ViewGroup)getActivityContentView()).addView(item.view);
      item.view.setAlpha(0);
      item.view.post(new ItemViewQueueListener(item));
    }
  }
}",0.8784440842787682
162349,"public static NiftyDialogBuilder getInstance(Context context){
  int ort=context.getResources().getConfiguration().orientation;
  if (mOrientation != ort) {
    mOrientation=ort;
    instance=null;
  }
  if (instance == null && !((Activity)context).isFinishing()) {
synchronized (NiftyDialogBuilder.class) {
      if (instance == null) {
        instance=new NiftyDialogBuilder(context,R.style.dialog_untran);
      }
    }
  }
  return instance;
}","public static NiftyDialogBuilder getInstance(Context context){
  int ort=context.getResources().getConfiguration().orientation;
  if (mOrientation != ort) {
    mOrientation=ort;
    instance=null;
  }
  if (instance == null || ((Activity)context).isFinishing()) {
synchronized (NiftyDialogBuilder.class) {
      if (instance == null) {
        instance=new NiftyDialogBuilder(context,R.style.dialog_untran);
      }
    }
  }
  return instance;
}",0.9921787709497206
162350,"@Override public void show(){
  if (mTitle.getText().equals(""String_Node_Str""))   mDialogView.findViewById(R.id.topPanel).setVisibility(View.GONE);
  super.show();
}","@Override public void show(){
  super.show();
}",0.4433962264150943
162351,"public static NiftyDialogBuilder getInstance(Context context){
  int ort=context.getResources().getConfiguration().orientation;
  if (mOrientation != ort) {
    mOrientation=ort;
    instance=null;
  }
  if (instance == null) {
synchronized (NiftyDialogBuilder.class) {
      if (instance == null) {
        instance=new NiftyDialogBuilder(context,R.style.dialog_untran);
      }
    }
  }
  return instance;
}","public static NiftyDialogBuilder getInstance(Context context){
  int ort=context.getResources().getConfiguration().orientation;
  if (mOrientation != ort) {
    mOrientation=ort;
    instance=null;
  }
  if (instance == null && !((Activity)context).isFinishing()) {
synchronized (NiftyDialogBuilder.class) {
      if (instance == null) {
        instance=new NiftyDialogBuilder(context,R.style.dialog_untran);
      }
    }
  }
  return instance;
}",0.9557109557109555
162352,"public static NiftyDialogBuilder getInstance(Context context){
  int ort=context.getResources().getConfiguration().orientation;
  if (mOrientation != ort) {
    mOrientation=ort;
    instance=null;
  }
  if (instance == null || ((Activity)context).isFinishing()) {
synchronized (NiftyDialogBuilder.class) {
      if (instance == null) {
        instance=new NiftyDialogBuilder(context,R.style.dialog_untran);
      }
    }
  }
  return instance;
}","public static NiftyDialogBuilder getInstance(Context context){
  instance=new NiftyDialogBuilder(context,R.style.dialog_untran);
  return instance;
}",0.5
162353,"private void init(AttributeSet attrs,int defStyleAttr,int defStyleRes){
  if (attrs == null)   return;
  final Context context=getContext();
  final Resources resource=getResources();
  final float density=resource.getDisplayMetrics().density;
  final TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.FloatActionButton,defStyleAttr,defStyleRes);
  ColorStateList bgColor=a.getColorStateList(R.styleable.FloatActionButton_gBackgroundColor);
  int touchColor=a.getColor(R.styleable.FloatActionButton_gTouchColor,Ui.TOUCH_PRESS_COLOR);
  boolean enabled=a.getBoolean(R.styleable.FloatActionButton_android_enabled,true);
  int shadowColor=a.getInt(R.styleable.FloatActionButton_shadowColor,0xFF000000);
  float shadowDx=a.getDimension(R.styleable.FloatActionButton_shadowDx,density * Ui.X_OFFSET);
  float shadowDy=a.getDimension(R.styleable.FloatActionButton_shadowDy,density * Ui.Y_OFFSET);
  float shadowR=a.getDimension(R.styleable.FloatActionButton_shadowRadius,(density * Ui.SHADOW_RADIUS));
  int shadowAlpha=a.getInt(R.styleable.FloatActionButton_shadowAlpha,0x20);
  float touchDurationRate=a.getFloat(R.styleable.ImageView_gTouchDurationRate,1.0f);
  int interceptEvent=a.getInt(R.styleable.FloatActionButton_gInterceptEvent,0x0001);
  a.recycle();
  setEnabled(enabled);
  if (bgColor == null) {
    bgColor=UiCompat.getColorStateList(resource,R.color.g_default_float_action_bg);
  }
  final float maxShadowOffset=Math.max(shadowDx,shadowDy);
  mShadowRadius=(int)(shadowR + 0.5);
  mShadowRadius+=maxShadowOffset;
  ShapeDrawable background=new ShapeDrawable(new OvalShadowShape(mShadowRadius,Ui.changeColorAlpha(shadowColor,0x70)));
  Paint paint=background.getPaint();
  if (!isInEditMode()) {
    paint.setShadowLayer(mShadowRadius - maxShadowOffset,shadowDx,shadowDy,Ui.changeColorAlpha(shadowColor,shadowAlpha));
  }
  UiCompat.setBackground(this,background);
  setBackgroundColor(bgColor);
  mTouchDrawable=new TouchEffectDrawable(new FloatEffect(),ColorStateList.valueOf(touchColor));
  mTouchDrawable.setCallback(this);
  mTouchDrawable.setInterceptEvent(interceptEvent);
  mTouchDrawable.setEnterDuration(touchDurationRate);
  mTouchDrawable.setExitDuration(touchDurationRate);
  setLayerType(LAYER_TYPE_SOFTWARE,paint);
  final int padding=mShadowRadius;
  setPadding(Math.max(padding,getPaddingLeft()),Math.max(padding,getPaddingTop()),Math.max(padding,getPaddingRight()),Math.max(padding,getPaddingBottom()));
}","private void init(AttributeSet attrs,int defStyleAttr,int defStyleRes){
  if (attrs == null)   return;
  final Context context=getContext();
  final Resources resource=getResources();
  final float density=resource.getDisplayMetrics().density;
  final TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.FloatActionButton,defStyleAttr,defStyleRes);
  ColorStateList bgColor=a.getColorStateList(R.styleable.FloatActionButton_gBackgroundColor);
  int touchColor=a.getColor(R.styleable.FloatActionButton_gTouchColor,Ui.TOUCH_PRESS_COLOR);
  boolean enabled=a.getBoolean(R.styleable.FloatActionButton_android_enabled,true);
  int shadowColor=a.getInt(R.styleable.FloatActionButton_shadowColor,0xFF000000);
  float shadowDx=a.getDimension(R.styleable.FloatActionButton_shadowDx,density * Ui.X_OFFSET);
  float shadowDy=a.getDimension(R.styleable.FloatActionButton_shadowDy,density * Ui.Y_OFFSET);
  float shadowR=a.getDimension(R.styleable.FloatActionButton_shadowRadius,(density * Ui.SHADOW_RADIUS));
  int shadowAlpha=a.getInt(R.styleable.FloatActionButton_shadowAlpha,0x20);
  float touchDurationRate=a.getFloat(R.styleable.FloatActionButton_gTouchDurationRate,1.0f);
  int interceptEvent=a.getInt(R.styleable.FloatActionButton_gInterceptEvent,0x0001);
  a.recycle();
  setEnabled(enabled);
  if (bgColor == null) {
    bgColor=UiCompat.getColorStateList(resource,R.color.g_default_float_action_bg);
  }
  final float maxShadowOffset=Math.max(shadowDx,shadowDy);
  mShadowRadius=(int)(shadowR + 0.5);
  mShadowRadius+=maxShadowOffset;
  ShapeDrawable background=new ShapeDrawable(new OvalShadowShape(mShadowRadius,Ui.changeColorAlpha(shadowColor,0x70)));
  Paint paint=background.getPaint();
  if (!isInEditMode()) {
    paint.setShadowLayer(mShadowRadius - maxShadowOffset,shadowDx,shadowDy,Ui.changeColorAlpha(shadowColor,shadowAlpha));
  }
  UiCompat.setBackground(this,background);
  setBackgroundColor(bgColor);
  mTouchDrawable=new TouchEffectDrawable(new FloatEffect(),ColorStateList.valueOf(touchColor));
  mTouchDrawable.setCallback(this);
  mTouchDrawable.setInterceptEvent(interceptEvent);
  mTouchDrawable.setEnterDuration(touchDurationRate);
  mTouchDrawable.setExitDuration(touchDurationRate);
  setLayerType(LAYER_TYPE_SOFTWARE,paint);
  final int padding=mShadowRadius;
  setPadding(Math.max(padding,getPaddingLeft()),Math.max(padding,getPaddingTop()),Math.max(padding,getPaddingRight()),Math.max(padding,getPaddingBottom()));
}",0.99468954248366
162354,"/** 
 * Run to doing something
 */
@Override public void run(){
  if (!mDone) {
synchronized (this) {
      if (!mDone) {
        call();
        mDone=true;
        try {
          this.notifyAll();
        }
 catch (        Exception ignored) {
        }
      }
    }
  }
}","/** 
 * Run to doing something
 */
@Override public void run(){
  if (!mDone) {
synchronized (this) {
      if (!mDone) {
        mResult=call();
        mDone=true;
        try {
          this.notifyAll();
        }
 catch (        Exception ignored) {
        }
      }
    }
  }
}",0.9857142857142858
162355,"/** 
 * Sets the minimum value for this AbsSeekBar if the supplied argument is bigger than the Current MAX value, the MAX value will be set to MIN+1 <p> Also if the current progress is out of the new range, it will be set to MIN </p>
 * @param min Progress min value
 * @see #setMax(int)
 * @see #setProgress(int)
 */
public void setMin(int min){
  mMin=min;
  if (mMin > mMax) {
    setMax(mMin + 1);
  }
  updateKeyboardRange();
  mSeekBarDrawable.setNumSegments(mMax - mMin);
  if (mValue < mMin || mValue > mMax) {
    setProgress(mMin);
  }
}","/** 
 * Sets the minimum value for this AbsSeekBar if the supplied argument is bigger than the Current MAX value, the MAX value will be set to MIN+1 <p> Also if the current progress is out of the new range, it will be set to MIN </p>
 * @param min Progress min value
 * @see #setMax(int)
 * @see #setProgress(int)
 */
public void setMin(int min){
  mMin=min;
  if (mMin > mMax) {
    setMax(mMin + 1);
  }
  updateKeyboardRange();
  mSeekBarDrawable.setNumSegments(mMax - mMin);
  if (mValue < mMin || mValue > mMax) {
    setProgress(mMin);
  }
 else {
    updateThumbPosForScale(-1);
  }
}",0.961335676625659
162356,"/** 
 * Sets the maximum value for this AbsSeekBar if the supplied argument is smaller than the Current MIN value, the MIN value will be set to MAX-1 <p/> <p> Also if the current progress is out of the new range, it will be set to MIN </p>
 * @param max Progress max value
 * @see #setMin(int)
 * @see #setProgress(int)
 */
public void setMax(int max){
  mMax=max;
  if (mMax < mMin) {
    setMin(mMax - 1);
  }
  updateKeyboardRange();
  mSeekBarDrawable.setNumSegments(mMax - mMin);
  if (mValue < mMin || mValue > mMax) {
    setProgress(mMin);
  }
}","/** 
 * Sets the maximum value for this AbsSeekBar if the supplied argument is smaller than the Current MIN value, the MIN value will be set to MAX-1 <p/> <p> Also if the current progress is out of the new range, it will be set to MIN </p>
 * @param max Progress max value
 * @see #setMin(int)
 * @see #setProgress(int)
 */
public void setMax(int max){
  mMax=max;
  if (mMax < mMin) {
    setMin(mMax - 1);
  }
  updateKeyboardRange();
  mSeekBarDrawable.setNumSegments(mMax - mMin);
  if (mValue < mMin || mValue > mMax) {
    setProgress(mMin);
  }
 else {
    updateThumbPosForScale(-1);
  }
}",0.9617391304347828
162357,"private void draw(Canvas canvas,Paint paint,int thumbColor,int colorLeft,int colorRight,float halfLeft,float halfRight){
  Rect bounds=getBounds();
  int thumbX=mPoint.x;
  int thumbY=mPoint.y;
  int startLeft=bounds.left + mTouchRadius;
  int startRight=bounds.right - mTouchRadius;
  if (halfLeft > 0) {
    paint.setColor(colorLeft);
    canvas.drawRect(startLeft,thumbY - halfLeft,thumbX,thumbY + halfLeft,paint);
  }
  if (halfRight > 0) {
    paint.setColor(colorRight);
    canvas.drawRect(thumbX,thumbY - halfRight,startRight,thumbY + halfRight,paint);
  }
  if (mTickRadius > halfRight) {
    for (int i=0; i <= mNumSegments; i++) {
      float x=startRight - i * mTickDistance;
      if (x <= thumbX)       break;
      canvas.drawCircle(x,thumbY,mTickRadius,paint);
    }
  }
  if (mThumbRadius > halfLeft) {
    paint.setColor(colorLeft);
    for (int i=0; i <= mNumSegments; i++) {
      float x=i * mTickDistance + startLeft;
      if (x > thumbX)       break;
      canvas.drawCircle(x,thumbY,mTickRadius,paint);
    }
  }
  if (!isOpen && mThumbRadius > 0) {
    paint.setColor(thumbColor);
    canvas.drawCircle(thumbX,thumbY,mThumbRadius,paint);
  }
}","private void draw(Canvas canvas,Paint paint,int thumbColor,int colorLeft,int colorRight,float halfLeft,float halfRight){
  Rect bounds=getBounds();
  int thumbX=mPoint.x;
  int thumbY=mPoint.y;
  int startLeft=bounds.left + mTouchRadius;
  int startRight=bounds.right - mTouchRadius;
  if (halfLeft > 0) {
    paint.setColor(colorLeft);
    canvas.drawRect(startLeft,thumbY - halfLeft,thumbX,thumbY + halfLeft,paint);
  }
  if (halfRight > 0) {
    paint.setColor(colorRight);
    canvas.drawRect(thumbX,thumbY - halfRight,startRight,thumbY + halfRight,paint);
  }
  if (mTickRadius > halfRight) {
    for (int i=0; i <= mNumSegments; i++) {
      float x=startRight - i * mTickDistance;
      if (x <= thumbX)       break;
      canvas.drawCircle(x,thumbY,mTickRadius,paint);
    }
  }
  if (mTickRadius > halfLeft) {
    paint.setColor(colorLeft);
    for (int i=0; i <= mNumSegments; i++) {
      float x=i * mTickDistance + startLeft;
      if (x > thumbX)       break;
      canvas.drawCircle(x,thumbY,mTickRadius,paint);
    }
  }
  if (!isOpen && mThumbRadius > 0) {
    paint.setColor(thumbColor);
    canvas.drawCircle(thumbX,thumbY,mThumbRadius,paint);
  }
}",0.9970047068891742
162358,"public void setNumSegments(int numSegments){
  this.mNumSegments=numSegments;
}","public void setNumSegments(int numSegments){
  this.mNumSegments=numSegments;
  this.mTickDistance=(float)this.mContentWidth / (float)numSegments;
}",0.6960352422907489
162359,"private void init(AttributeSet attrs,int defStyleAttr,int defStyleRes){
  if (attrs == null)   return;
  final Context context=getContext();
  final Resources resources=getResources();
  final TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.Button,defStyleAttr,defStyleRes);
  String fontFile=a.getString(R.styleable.Button_gFont);
  int touchEffect=a.getInt(R.styleable.Button_gTouchEffect,TOUCH_EFFECT_NONE);
  int touchColor=a.getColor(R.styleable.Button_gTouchColor,Ui.TOUCH_PRESS_COLOR);
  int touchRadius=a.getDimensionPixelOffset(R.styleable.Button_gTouchCornerRadius,resources.getDimensionPixelOffset(R.dimen.g_button_touch_corners_radius));
  int touchRadiusTL=a.getDimensionPixelOffset(R.styleable.Button_gTouchCornerRadiusTL,touchRadius);
  int touchRadiusTR=a.getDimensionPixelOffset(R.styleable.Button_gTouchCornerRadiusTR,touchRadius);
  int touchRadiusBL=a.getDimensionPixelOffset(R.styleable.Button_gTouchCornerRadiusBL,touchRadius);
  int touchRadiusBR=a.getDimensionPixelOffset(R.styleable.Button_gTouchCornerRadiusBR,touchRadius);
  float[] radius=new float[]{touchRadiusTL,touchRadiusTL,touchRadiusTR,touchRadiusTR,touchRadiusBR,touchRadiusBR,touchRadiusBL,touchRadiusBL};
  ClipFilletFactory touchFactory=new ClipFilletFactory(radius);
  float touchDurationRate=a.getFloat(R.styleable.Button_gTouchDurationRate,1.0f);
  a.recycle();
  if (attrs.getAttributeValue(Ui.androidStyleNameSpace,""String_Node_Str"") == null || getBackground() == null) {
    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
      Drawable drawable=getResources().getDrawable(R.drawable.g_button_background);
      setBackgroundDrawable(drawable);
    }
 else     setBackgroundResource(R.drawable.g_button_background);
  }
  setTouchEffect(touchEffect);
  setTouchColor(touchColor);
  setTouchDuration(touchDurationRate);
  if (!this.isInEditMode()) {
    setTouchClipFactory(touchFactory);
    if (fontFile != null && fontFile.length() > 0) {
      Typeface typeface=Ui.getFont(getContext(),fontFile);
      if (typeface != null)       setTypeface(typeface);
    }
  }
}","private void init(AttributeSet attrs,int defStyleAttr,int defStyleRes){
  if (attrs == null)   return;
  final Context context=getContext();
  final Resources resources=getResources();
  final TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.Button,defStyleAttr,defStyleRes);
  String fontFile=a.getString(R.styleable.Button_gFont);
  int touchEffect=a.getInt(R.styleable.Button_gTouchEffect,TOUCH_EFFECT_NONE);
  int touchColor=a.getColor(R.styleable.Button_gTouchColor,Ui.TOUCH_PRESS_COLOR);
  int touchRadius=a.getDimensionPixelOffset(R.styleable.Button_gTouchCornerRadius,resources.getDimensionPixelOffset(R.dimen.g_button_touch_corners_radius));
  int touchRadiusTL=a.getDimensionPixelOffset(R.styleable.Button_gTouchCornerRadiusTL,touchRadius);
  int touchRadiusTR=a.getDimensionPixelOffset(R.styleable.Button_gTouchCornerRadiusTR,touchRadius);
  int touchRadiusBL=a.getDimensionPixelOffset(R.styleable.Button_gTouchCornerRadiusBL,touchRadius);
  int touchRadiusBR=a.getDimensionPixelOffset(R.styleable.Button_gTouchCornerRadiusBR,touchRadius);
  float[] radius=new float[]{touchRadiusTL,touchRadiusTL,touchRadiusTR,touchRadiusTR,touchRadiusBR,touchRadiusBR,touchRadiusBL,touchRadiusBL};
  ClipFilletFactory touchFactory=new ClipFilletFactory(radius);
  float touchDurationRate=a.getFloat(R.styleable.Button_gTouchDurationRate,1.0f);
  a.recycle();
  if (attrs.getAttributeValue(Ui.androidStyleNameSpace,""String_Node_Str"") == null || getBackground() == null) {
    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
      Drawable drawable=getResources().getDrawable(R.drawable.g_button_background);
      setBackgroundDrawable(drawable);
    }
 else     setBackgroundResource(R.drawable.g_button_background);
  }
  setTouchEffect(touchEffect);
  setTouchColor(touchColor);
  setTouchDuration(touchDurationRate);
  if (!this.isInEditMode()) {
    setTouchClipFactory(touchFactory);
    if (fontFile != null && fontFile.length() > 0) {
      Typeface typeface=Ui.getFont(getContext(),fontFile);
      if (typeface != null)       setTypeface(typeface);
    }
  }
  if (getLayerType() != View.LAYER_TYPE_SOFTWARE)   setLayerType(View.LAYER_TYPE_SOFTWARE,null);
}",0.9773417425835084
162360,"@Override protected void refresh(long startTime,long curTime,long timeLong){
  final float angle=ANGLE_ADD;
  mStartAngle+=angle;
  if (mStartAngle > 360) {
    mStartAngle-=360;
  }
  mSweepAngle+=mAngleIncrement;
  if (mSweepAngle > MAX_ANGLE_SWEEP) {
    mAngleIncrement=-mAngleIncrement;
  }
 else   if (mSweepAngle < 0) {
    mAngleIncrement=-mAngleIncrement;
    mSweepAngle=0;
    getNextForegroundColor();
  }
}","@Override protected void refresh(long startTime,long curTime,long timeLong){
  final float angle=ANGLE_ADD;
  mStartAngle+=angle;
  if (mStartAngle > 360) {
    mStartAngle-=360;
  }
  if (mSweepAngle > MAX_ANGLE_SWEEP) {
    mAngleIncrement=-mAngleIncrement;
  }
 else   if (mSweepAngle < MIN_ANGLE_SWEEP) {
    mSweepAngle=MIN_ANGLE_SWEEP;
    return;
  }
 else   if (mSweepAngle == MIN_ANGLE_SWEEP) {
    mAngleIncrement=-mAngleIncrement;
    getNextForegroundColor();
  }
  mSweepAngle+=mAngleIncrement;
}",0.790948275862069
162361,"private void saveOrRecoveryRun(int visibility){
  if (visibility == VISIBLE) {
    if (mNeedRun) {
      start();
    }
  }
 else {
    if (mDrawable.isRunning()) {
      mNeedRun=true;
      mDrawable.stop();
    }
  }
}","private void saveOrRecoveryRun(int visibility){
  if (mDrawable == null) {
    return;
  }
  if (visibility == VISIBLE) {
    if (mNeedRun) {
      start();
    }
  }
 else {
    if (mDrawable.isRunning()) {
      mNeedRun=true;
      mDrawable.stop();
    }
  }
}",0.911340206185567
162362,"@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  if (mAutoRun && mDrawable.getProgress() == 0)   mDrawable.start();
}","@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  if (mAutoRun && mDrawable.getProgress() == 0) {
    if (getVisibility() == VISIBLE)     mDrawable.start();
 else     mNeedRun=true;
  }
}",0.8099173553719008
162363,"/** 
 * Dispose unbindService stopService
 */
public static void dispose(){
synchronized (Command.class) {
    if (EXECUTORSERVICE != null) {
      try {
        EXECUTORSERVICE.shutdownNow();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      EXECUTORSERVICE=null;
    }
    if (IS_BIND) {
      Context context=GeniusKit.getApplication();
      if (context != null) {
        try {
          context.unbindService(I_CONN);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
      I_COMMAND=null;
      IS_BIND=false;
    }
  }
}","/** 
 * Dispose unbindService stopService
 */
public static void dispose(){
synchronized (Command.class) {
    if (EXECUTORSERVICE != null) {
      try {
        EXECUTORSERVICE.shutdownNow();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      EXECUTORSERVICE=null;
    }
    if (IS_BIND) {
      Context context=Kit.getApplication();
      if (context != null) {
        try {
          context.unbindService(I_CONN);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
      I_COMMAND=null;
      IS_BIND=false;
    }
  }
}",0.9949579831932772
162364,"/** 
 * Start bind Service
 */
private static void bindService(){
synchronized (Command.class) {
    if (!IS_BIND) {
      Context context=GeniusKit.getApplication();
      if (context == null) {
        throw new NullPointerException(""String_Node_Str"");
      }
 else {
        context.bindService(new Intent(context,CommandService.class),I_CONN,Context.BIND_AUTO_CREATE);
        IS_BIND=true;
      }
    }
  }
}","/** 
 * Start bind Service
 */
private static void bindService(){
synchronized (Command.class) {
    if (!IS_BIND) {
      Context context=Kit.getApplication();
      if (context == null) {
        throw new NullPointerException(""String_Node_Str"");
      }
 else {
        context.bindService(new Intent(context,CommandService.class),I_CONN,Context.BIND_AUTO_CREATE);
        IS_BIND=true;
      }
    }
  }
}",0.9927184466019418
162365,"/** 
 * Set whether to open the log storage; open the log will be stored in the software directory
 * @param isOpen    Open
 * @param fileCount File Count,Default 10 Size
 * @param fileSize  One File Size,Default 2Mb
 */
public static void setSaveLog(boolean isOpen,int fileCount,float fileSize){
  if (GeniusKit.getApplication() == null)   throw new NullPointerException(""String_Node_Str"");
  if (isOpen) {
    if (Writer == null)     Writer=new LogWriter(fileCount,fileSize,LogWriter.getDefaultLogPath());
  }
 else   if (Writer != null) {
    Writer.unRegisterBroadCast();
    Writer.done();
    Writer=null;
  }
}","/** 
 * Set whether to open the log storage; open the log will be stored in the software directory
 * @param isOpen    Open
 * @param fileCount File Count,Default 10 Size
 * @param fileSize  One File Size,Default 2Mb
 */
public static void setSaveLog(boolean isOpen,int fileCount,float fileSize){
  if (Kit.getApplication() == null)   throw new NullPointerException(""String_Node_Str"");
  if (isOpen) {
    if (Writer == null)     Writer=new LogWriter(fileCount,fileSize,LogWriter.getDefaultLogPath());
  }
 else   if (Writer != null) {
    Writer.unRegisterBroadCast();
    Writer.done();
    Writer=null;
  }
}",0.995114006514658
162366,"/** 
 * get log file path
 */
protected static String getDefaultLogPath(){
  return GeniusKit.getApplication().getApplicationContext().getFilesDir().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
}","/** 
 * get log file path
 */
protected static String getDefaultLogPath(){
  return Kit.getApplication().getApplicationContext().getFilesDir().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
}",0.9873949579831932
162367,"/** 
 * unRegister Usb BroadCast
 */
protected void unRegisterBroadCast(){
  if (mUsbBroadCastReceiver != null) {
    GeniusKit.getApplication().unregisterReceiver(mUsbBroadCastReceiver);
    mUsbBroadCastReceiver=null;
  }
}","/** 
 * unRegister Usb BroadCast
 */
protected void unRegisterBroadCast(){
  if (mUsbBroadCastReceiver != null) {
    Kit.getApplication().unregisterReceiver(mUsbBroadCastReceiver);
    mUsbBroadCastReceiver=null;
  }
}",0.9864864864864864
162368,"/** 
 * register Usb BroadCast
 */
protected void registerBroadCast(String path){
  if (path != null && path.length() > 0)   mExternalStoragePath=path;
  unRegisterBroadCast();
  IntentFilter iFilter=new IntentFilter();
  iFilter.addAction(Intent.ACTION_MEDIA_MOUNTED);
  iFilter.addDataScheme(""String_Node_Str"");
  iFilter.setPriority(1000);
  mUsbBroadCastReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String action=intent.getAction();
      if (action.equals(Intent.ACTION_MEDIA_MOUNTED)) {
        copyLogFile(mExternalStoragePath);
      }
    }
  }
;
  GeniusKit.getApplication().registerReceiver(mUsbBroadCastReceiver,iFilter);
}","/** 
 * register Usb BroadCast
 */
protected void registerBroadCast(String path){
  if (path != null && path.length() > 0)   mExternalStoragePath=path;
  unRegisterBroadCast();
  IntentFilter iFilter=new IntentFilter();
  iFilter.addAction(Intent.ACTION_MEDIA_MOUNTED);
  iFilter.addDataScheme(""String_Node_Str"");
  iFilter.setPriority(1000);
  mUsbBroadCastReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String action=intent.getAction();
      if (action.equals(Intent.ACTION_MEDIA_MOUNTED)) {
        copyLogFile(mExternalStoragePath);
      }
    }
  }
;
  Kit.getApplication().registerReceiver(mUsbBroadCastReceiver,iFilter);
}",0.9957325746799432
162369,"/** 
 * Run in main thread
 * @param msg call messages
 */
@Override public void handleMessage(Message msg){
  if (msg.what == ASYNC) {
    boolean rescheduled=false;
    try {
      long started=SystemClock.uptimeMillis();
      while (true) {
        Runnable runnable=mAsyncPool.poll();
        if (runnable == null) {
synchronized (mAsyncPool) {
            runnable=mAsyncPool.poll();
            if (runnable == null) {
              isAsyncActive=false;
              return;
            }
          }
        }
        runnable.run();
        long timeInMethod=SystemClock.uptimeMillis() - started;
        if (timeInMethod >= mMaxMillisInsideHandleMessage) {
          if (!sendMessage(obtainMessage(ASYNC))) {
            throw new GeniusException(""String_Node_Str"");
          }
          rescheduled=true;
          return;
        }
      }
    }
  finally {
      isAsyncActive=rescheduled;
    }
  }
 else   if (msg.what == SYNC) {
    boolean rescheduled=false;
    try {
      long started=SystemClock.uptimeMillis();
      while (true) {
        UiKitSyncPost post=mSyncPool.poll();
        if (post == null) {
synchronized (mSyncPool) {
            post=mSyncPool.poll();
            if (post == null) {
              isSyncActive=false;
              return;
            }
          }
        }
        post.run();
        long timeInMethod=SystemClock.uptimeMillis() - started;
        if (timeInMethod >= mMaxMillisInsideHandleMessage) {
          if (!sendMessage(obtainMessage(SYNC))) {
            throw new GeniusException(""String_Node_Str"");
          }
          rescheduled=true;
          return;
        }
      }
    }
  finally {
      isSyncActive=rescheduled;
    }
  }
 else   super.handleMessage(msg);
}","/** 
 * Run in main thread
 * @param msg call messages
 */
@Override public void handleMessage(Message msg){
  if (msg.what == ASYNC) {
    boolean rescheduled=false;
    try {
      long started=SystemClock.uptimeMillis();
      while (true) {
        Runnable runnable=poolAsyncPost();
        if (runnable == null) {
synchronized (mAsyncPool) {
            runnable=poolAsyncPost();
            if (runnable == null) {
              isAsyncActive=false;
              return;
            }
          }
        }
        runnable.run();
        long timeInMethod=SystemClock.uptimeMillis() - started;
        if (timeInMethod >= mMaxMillisInsideHandleMessage) {
          if (!sendMessage(obtainMessage(ASYNC))) {
            throw new GeniusException(""String_Node_Str"");
          }
          rescheduled=true;
          return;
        }
      }
    }
  finally {
      isAsyncActive=rescheduled;
    }
  }
 else   if (msg.what == SYNC) {
    boolean rescheduled=false;
    try {
      long started=SystemClock.uptimeMillis();
      while (true) {
        UiKitSyncPost post=poolSyncPost();
        if (post == null) {
synchronized (mSyncPool) {
            post=poolSyncPost();
            if (post == null) {
              isSyncActive=false;
              return;
            }
          }
        }
        post.run();
        long timeInMethod=SystemClock.uptimeMillis() - started;
        if (timeInMethod >= mMaxMillisInsideHandleMessage) {
          if (!sendMessage(obtainMessage(SYNC))) {
            throw new GeniusException(""String_Node_Str"");
          }
          rescheduled=true;
          return;
        }
      }
    }
  finally {
      isSyncActive=rescheduled;
    }
  }
 else   super.handleMessage(msg);
}",0.8957373271889401
162370,"@Override public boolean setState(int[] stateSet){
  int[] oldState=getState();
  boolean oldPressed=false;
  for (  int i : oldState) {
    if (i == android.R.attr.state_pressed) {
      oldPressed=true;
    }
  }
  boolean status=super.setState(stateSet);
  boolean focused=false;
  boolean pressed=false;
  for (  int i : stateSet) {
    if (i == android.R.attr.state_focused) {
      focused=true;
    }
 else     if (i == android.R.attr.state_pressed) {
      pressed=true;
    }
  }
  if (pressed) {
    animateToPressed();
  }
 else   if (oldPressed) {
    animateToNormal();
  }
 else   if (focused) {
    mCurrentScale=1f;
    invalidateSelf();
  }
 else {
    mCurrentScale=0;
    invalidateSelf();
  }
  return status;
}","@Override public boolean setState(int[] stateSet){
  if (stateSet == null)   return false;
  int[] oldState=getState();
  boolean oldPressed=false;
  for (  int i : oldState) {
    if (i == android.R.attr.state_pressed) {
      oldPressed=true;
    }
  }
  boolean status=super.setState(stateSet);
  boolean focused=false;
  boolean pressed=false;
  for (  int i : stateSet) {
    if (i == android.R.attr.state_focused) {
      focused=true;
    }
 else     if (i == android.R.attr.state_pressed) {
      pressed=true;
    }
  }
  if (pressed) {
    animateToPressed();
  }
 else   if (oldPressed) {
    animateToNormal();
  }
 else   if (focused) {
    mCurrentScale=1f;
    invalidateSelf();
  }
 else {
    mCurrentScale=0;
    invalidateSelf();
  }
  return status;
}",0.9733688415446072
162371,"@Override public boolean setState(int[] stateSet){
  boolean status=super.setState(stateSet);
  boolean oldChecked=mChecked;
  boolean oldEnabled=mEnabled;
  mChecked=false;
  mEnabled=true;
  for (  int i : stateSet) {
    if (i == android.R.attr.state_checked) {
      mChecked=true;
    }
 else     if (i == -android.R.attr.state_enabled) {
      mEnabled=false;
    }
  }
  if (status || oldChecked != mChecked || oldEnabled != mEnabled) {
    onStateChange(getColor(),oldChecked,mChecked);
    invalidateSelf();
  }
  return status;
}","@Override public boolean setState(int[] stateSet){
  if (stateSet == null)   return false;
  boolean status=super.setState(stateSet);
  boolean oldChecked=mChecked;
  boolean oldEnabled=mEnabled;
  mChecked=false;
  mEnabled=true;
  for (  int i : stateSet) {
    if (i == android.R.attr.state_checked) {
      mChecked=true;
    }
 else     if (i == -android.R.attr.state_enabled) {
      mEnabled=false;
    }
  }
  if (status || oldChecked != mChecked || oldEnabled != mEnabled) {
    onStateChange(getColor(),oldChecked,mChecked);
    invalidateSelf();
  }
  return status;
}",0.964221824686941
162372,"@Override public boolean setState(int[] stateSet){
  boolean changed=super.setState(stateSet);
  changed=updateTintColor(stateSet) || changed;
  return changed;
}","@Override public boolean setState(int[] stateSet){
  if (stateSet == null)   return false;
  boolean changed=super.setState(stateSet);
  changed=updateTintColor(stateSet) || changed;
  return changed;
}",0.8901098901098901
162373,"private void init(AttributeSet attrs,int defStyleAttr,int defStyleRes){
  if (attrs == null)   return;
  final Context context=getContext();
  final Resources resource=getResources();
  final float density=resource.getDisplayMetrics().density;
  int baseSize=(int)(density * 2);
  final TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.CheckBox,defStyleAttr,defStyleRes);
  int borderSize=a.getDimensionPixelOffset(R.styleable.CheckBox_gBorderSize,baseSize);
  int intervalSize=a.getDimensionPixelOffset(R.styleable.CheckBox_gIntervalSize,baseSize);
  int markSize=a.getDimensionPixelOffset(R.styleable.CheckBox_gMarkSize,-1);
  ColorStateList color=a.getColorStateList(R.styleable.CheckBox_gMarkColor);
  String fontFile=a.getString(R.styleable.CheckBox_gFont);
  a.recycle();
  if (color == null)   color=resource.getColorStateList(R.color.g_default_check_box);
  boolean isCustom=true;
  if (markSize < 0) {
    markSize=(int)(density * 22);
    isCustom=false;
  }
  mMarkDrawable=new CircleCheckDrawable(color);
  mMarkDrawable.setBorderSize(borderSize);
  mMarkDrawable.setIntervalSize(intervalSize);
  mMarkDrawable.setMarkSize(markSize,isCustom);
  setButtonDrawable(mMarkDrawable);
  refreshDrawableState();
  if (!this.isInEditMode()) {
    if (fontFile != null && fontFile.length() > 0) {
      Typeface typeface=Ui.getFont(getContext(),fontFile);
      if (typeface != null)       setTypeface(typeface);
    }
  }
}","private void init(AttributeSet attrs,int defStyleAttr,int defStyleRes){
  if (attrs == null)   return;
  final Context context=getContext();
  final Resources resource=getResources();
  final float density=resource.getDisplayMetrics().density;
  int baseSize=(int)(density * 2);
  final TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.CheckBox,defStyleAttr,defStyleRes);
  int borderSize=a.getDimensionPixelOffset(R.styleable.CheckBox_gBorderSize,baseSize);
  int intervalSize=a.getDimensionPixelOffset(R.styleable.CheckBox_gIntervalSize,baseSize);
  int markSize=a.getDimensionPixelOffset(R.styleable.CheckBox_gMarkSize,-1);
  ColorStateList color=a.getColorStateList(R.styleable.CheckBox_gMarkColor);
  String fontFile=a.getString(R.styleable.CheckBox_gFont);
  a.recycle();
  if (color == null)   color=resource.getColorStateList(R.color.g_default_check_box);
  boolean isCustom=true;
  if (markSize < 0) {
    markSize=(int)(density * 22);
    isCustom=false;
  }
  mMarkDrawable=new CircleCheckDrawable(color);
  mMarkDrawable.setBorderSize(borderSize);
  mMarkDrawable.setIntervalSize(intervalSize);
  mMarkDrawable.setMarkSize(markSize,isCustom);
  setButtonDrawable(mMarkDrawable);
  if (!this.isInEditMode()) {
    if (fontFile != null && fontFile.length() > 0) {
      Typeface typeface=Ui.getFont(getContext(),fontFile);
      if (typeface != null)       setTypeface(typeface);
    }
  }
}",0.9908899789768746
162374,"private void initHintTitleText(){
  if (isShowTitle()) {
    mCurTitleProperty=new TitleProperty();
    if (mTitlePaint == null) {
      mTitlePaint=new TextPaint();
      mTitlePaint.setFlags(Paint.ANTI_ALIAS_FLAG);
      mTitlePaint.setTextAlign(Paint.Align.LEFT);
      mTitlePaint.setTypeface(getTypeface());
    }
    if (mTextWatcher == null) {
      mTextWatcher=new TextWatcher(){
        @Override public void beforeTextChanged(        CharSequence s,        int start,        int count,        int after){
        }
        @Override public void onTextChanged(        CharSequence s,        int start,        int before,        int count){
        }
        @Override public void afterTextChanged(        Editable s){
          if (isShowTitle()) {
            boolean have=s != null && s.length() > 0;
            if (have != isHaveText) {
              isHaveText=have;
              animateShowTitle(isHaveText);
            }
          }
        }
      }
;
      addTextChangedListener(mTextWatcher);
    }
    Editable editable=getText();
    animateShowTitle(editable != null && editable.length() > 0);
  }
 else {
    if (mTextWatcher != null) {
      removeTextChangedListener(mTextWatcher);
      mTextWatcher=null;
    }
    mTitlePaint=null;
    mCurTitleProperty=null;
    mAnimator=null;
  }
}","private void initHintTitleText(){
  if (isShowTitle()) {
    mCurTitleProperty=new TitleProperty();
    if (mTitlePaint == null) {
      mTitlePaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);
      mTitlePaint.density=getResources().getDisplayMetrics().density;
      mTitlePaint.setTextAlign(Paint.Align.LEFT);
      mTitlePaint.setTypeface(getTypeface());
    }
    if (mTextWatcher == null) {
      mTextWatcher=new TextWatcher(){
        @Override public void beforeTextChanged(        CharSequence s,        int start,        int count,        int after){
        }
        @Override public void onTextChanged(        CharSequence s,        int start,        int before,        int count){
        }
        @Override public void afterTextChanged(        Editable s){
          if (isShowTitle()) {
            boolean have=s != null && s.length() > 0;
            if (have != isHaveText) {
              isHaveText=have;
              animateShowTitle(isHaveText);
            }
          }
        }
      }
;
      addTextChangedListener(mTextWatcher);
    }
    Editable editable=getText();
    animateShowTitle(editable != null && editable.length() > 0);
  }
 else {
    if (mTextWatcher != null) {
      removeTextChangedListener(mTextWatcher);
      mTextWatcher=null;
    }
    mTitlePaint=null;
    mCurTitleProperty=null;
    mAnimator=null;
  }
}",0.962602842183994
162375,"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (isShowTitle() && mTitlePaint != null && mCurTitleProperty != null && mCurTitleProperty.mAlpha != 0) {
    CharSequence buf=getHint();
    if (buf != null) {
      mTitlePaint.setTextSize(mCurTitleProperty.mTextSize);
      int color=getCurrentHintTextColor();
      int alpha=Ui.modulateAlpha(Color.alpha(color),mCurTitleProperty.mAlpha);
      if (color != 0 && alpha != 0) {
        mTitlePaint.setColor(color);
        mTitlePaint.setAlpha(alpha);
        canvas.drawText(buf,0,buf.length(),mCurTitleProperty.mLeft,mCurTitleProperty.mTop + mCurTitleProperty.mTextSize,mTitlePaint);
      }
    }
  }
}","@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (isShowTitle() && mTitlePaint != null && mCurTitleProperty != null && mCurTitleProperty.mAlpha != 0) {
    CharSequence buf=getHint();
    if (buf != null) {
      int color=getCurrentHintTextColor();
      int alpha=Ui.modulateAlpha(Color.alpha(color),mCurTitleProperty.mAlpha);
      if (color != 0 && alpha != 0) {
        mTitlePaint.setTextSize(mCurTitleProperty.mTextSize);
        mTitlePaint.setColor(color);
        mTitlePaint.setAlpha(alpha);
        final int scrollX=getScrollX();
        final int scrollY=getScrollY();
        if ((scrollX | scrollY) == 0) {
          canvas.drawText(buf,0,buf.length(),mCurTitleProperty.mLeft,mCurTitleProperty.mTop + mCurTitleProperty.mTextSize,mTitlePaint);
        }
 else {
          canvas.translate(scrollX,scrollY);
          canvas.drawText(buf,0,buf.length(),mCurTitleProperty.mLeft,mCurTitleProperty.mTop + mCurTitleProperty.mTextSize,mTitlePaint);
          canvas.translate(-scrollX,-scrollY);
        }
      }
    }
  }
}",0.713302752293578
162376,"public void animateToNormal(){
  unscheduleSelf(mUpdater);
  if (mCurrentScale > INACTIVE_SCALE) {
    mReverse=true;
    mRunning=true;
    mAnimationInitialValue=mCurrentScale;
    float durationFactor=1f - ((mAnimationInitialValue - ACTIVE_SCALE) / (INACTIVE_SCALE - ACTIVE_SCALE));
    mDuration=(int)(ANIMATION_DURATION * durationFactor);
    mStartTime=SystemClock.uptimeMillis();
    scheduleSelf(mUpdater,mStartTime + FRAME_DURATION);
  }
}","public void animateToNormal(){
  unscheduleSelf(mUpdater);
  if (mCurrentScale > 0) {
    mReverse=true;
    mRunning=true;
    mAnimationInitialValue=mCurrentScale;
    float durationFactor=mAnimationInitialValue;
    mDuration=(int)(Ui.ANIMATION_DURATION * durationFactor);
    mStartTime=SystemClock.uptimeMillis();
    scheduleSelf(mUpdater,mStartTime + Ui.FRAME_DURATION);
  }
}",0.5944645006016848
162377,"@Override public boolean setState(int[] stateSet){
  int[] oldState=getState();
  boolean oldPressed=false;
  for (  int i : oldState) {
    if (i == android.R.attr.state_pressed) {
      oldPressed=true;
    }
  }
  boolean status=super.setState(stateSet);
  boolean focused=false;
  boolean pressed=false;
  for (  int i : stateSet) {
    if (i == android.R.attr.state_focused) {
      focused=true;
    }
 else     if (i == android.R.attr.state_pressed) {
      pressed=true;
    }
  }
  if (pressed) {
    animateToPressed();
  }
 else   if (oldPressed) {
    animateToNormal();
  }
 else   if (focused) {
    mCurrentScale=ACTIVE_SCALE;
    invalidateSelf();
  }
 else {
    mCurrentScale=INACTIVE_SCALE;
    invalidateSelf();
  }
  return status;
}","@Override public boolean setState(int[] stateSet){
  int[] oldState=getState();
  boolean oldPressed=false;
  for (  int i : oldState) {
    if (i == android.R.attr.state_pressed) {
      oldPressed=true;
    }
  }
  boolean status=super.setState(stateSet);
  boolean focused=false;
  boolean pressed=false;
  for (  int i : stateSet) {
    if (i == android.R.attr.state_focused) {
      focused=true;
    }
 else     if (i == android.R.attr.state_pressed) {
      pressed=true;
    }
  }
  if (pressed) {
    animateToPressed();
  }
 else   if (oldPressed) {
    animateToNormal();
  }
 else   if (focused) {
    mCurrentScale=1f;
    invalidateSelf();
  }
 else {
    mCurrentScale=0;
    invalidateSelf();
  }
  return status;
}",0.9804713804713804
162378,"public void animateToPressed(){
  unscheduleSelf(mUpdater);
  if (mCurrentScale < ACTIVE_SCALE) {
    mReverse=false;
    mRunning=true;
    mAnimationInitialValue=mCurrentScale;
    float durationFactor=1f - ((mAnimationInitialValue - INACTIVE_SCALE) / (ACTIVE_SCALE - INACTIVE_SCALE));
    mDuration=(int)(ANIMATION_DURATION * durationFactor);
    mStartTime=SystemClock.uptimeMillis();
    scheduleSelf(mUpdater,mStartTime + FRAME_DURATION);
  }
}","public void animateToPressed(){
  unscheduleSelf(mUpdater);
  if (mCurrentScale < 1f) {
    mReverse=false;
    mRunning=true;
    mAnimationInitialValue=mCurrentScale;
    float durationFactor=1f - mAnimationInitialValue;
    mDuration=(int)(Ui.ANIMATION_DURATION * durationFactor);
    mStartTime=SystemClock.uptimeMillis();
    scheduleSelf(mUpdater,mStartTime + Ui.FRAME_DURATION);
  }
}",0.5897740784780023
162379,"@Override public void run(){
  long currentTime=SystemClock.uptimeMillis();
  long diff=currentTime - mStartTime;
  if (diff < mDuration) {
    float interpolation=mInterpolator.getInterpolation((float)diff / (float)mDuration);
    scheduleSelf(mUpdater,currentTime + FRAME_DURATION);
    updateAnimation(interpolation);
  }
 else {
    unscheduleSelf(mUpdater);
    mRunning=false;
    updateAnimation(1f);
  }
}","@Override public void run(){
  long currentTime=SystemClock.uptimeMillis();
  long diff=currentTime - mStartTime;
  if (diff < mDuration) {
    float interpolation=mInterpolator.getInterpolation((float)diff / (float)mDuration);
    scheduleSelf(mUpdater,currentTime + Ui.FRAME_DURATION);
    updateAnimation(interpolation);
  }
 else {
    unscheduleSelf(mUpdater);
    mRunning=false;
    updateAnimation(1f);
  }
}",0.9963811821471652
162380,"@Override public void draw(Canvas canvas,Paint paint){
  final float scale=mCurrentScale;
  if (scale > INACTIVE_SCALE) {
    final Rect bounds=getBounds();
    float radius=(Math.min(bounds.width(),bounds.height()) / 2.0f);
    float radiusAnimated=radius * scale;
    if (radius > 0) {
      int preAlpha=setPaintAlpha(paint);
      if (paint.getAlpha() > 0) {
        canvas.drawCircle(bounds.centerX(),bounds.centerY(),radius,paint);
      }
      if (radiusAnimated > 0) {
        if (preAlpha < 255) {
          preAlpha=getRippleAlpha(preAlpha,paint.getAlpha());
        }
        if (preAlpha > 0) {
          paint.setAlpha(preAlpha);
          canvas.drawCircle(bounds.centerX(),bounds.centerY(),radiusAnimated,paint);
        }
      }
    }
  }
}","@Override public void draw(Canvas canvas,Paint paint){
  final float scale=mCurrentScale;
  if (scale > 0) {
    if (scale != 1f && mBackgroundAlpha > 0) {
      paint.setAlpha(mBackgroundAlpha);
      canvas.drawCircle(mCenterX,mCenterY,mBackgroundRadius,paint);
    }
    if (mRippleAlpha > 0) {
      paint.setAlpha(mRippleAlpha);
      canvas.drawCircle(mCenterX,mCenterY,mBackgroundRadius * scale,paint);
    }
  }
}",0.2171331636980492
162381,"private void updateAnimation(float factor){
  float initial=mAnimationInitialValue;
  float destination=mReverse ? INACTIVE_SCALE : ACTIVE_SCALE;
  mCurrentScale=initial + (destination - initial) * factor;
  invalidateSelf();
}","private void updateAnimation(float factor){
  float initial=mAnimationInitialValue;
  float destination=mReverse ? 0 : 1f;
  mCurrentScale=initial + (destination - initial) * factor;
  invalidateSelf();
}",0.9327146171693736
162382,"public void animateToNormal(){
  mReverse=true;
  unscheduleSelf(mUpdater);
  if (mCurrentScale > 0) {
    mRunning=true;
    mAnimationInitialValue=mCurrentScale;
    float durationFactor=1f - mCurrentScale;
    mDuration=ANIMATION_DURATION - (int)(ANIMATION_DURATION * durationFactor);
    mStartTime=SystemClock.uptimeMillis();
    scheduleSelf(mUpdater,mStartTime + FRAME_DURATION);
  }
 else {
    notifyFinishedToListener();
  }
}","public void animateToNormal(){
  mReverse=true;
  unscheduleSelf(mUpdater);
  if (mCurrentScale > 0) {
    mRunning=true;
    mAnimationInitialValue=mCurrentScale;
    float durationFactor=1f - mCurrentScale;
    mDuration=Ui.ANIMATION_DURATION - (int)(Ui.ANIMATION_DURATION * durationFactor);
    mStartTime=SystemClock.uptimeMillis();
    scheduleSelf(mUpdater,mStartTime + Ui.FRAME_DURATION);
  }
 else {
    notifyFinishedToListener();
  }
}",0.9897843359818388
162383,"public void animateToPressed(){
  unscheduleSelf(mUpdater);
  mReverse=false;
  if (mCurrentScale < 1) {
    mRunning=true;
    mAnimationInitialValue=mCurrentScale;
    float durationFactor=1f - mCurrentScale;
    mDuration=(int)(ANIMATION_DURATION * durationFactor);
    mStartTime=SystemClock.uptimeMillis();
    scheduleSelf(mUpdater,mStartTime + FRAME_DURATION);
  }
 else {
    notifyFinishedToListener();
  }
}","public void animateToPressed(){
  unscheduleSelf(mUpdater);
  mReverse=false;
  if (mCurrentScale < 1) {
    mRunning=true;
    mAnimationInitialValue=mCurrentScale;
    float durationFactor=1f - mCurrentScale;
    mDuration=(int)(Ui.ANIMATION_DURATION * durationFactor);
    mStartTime=SystemClock.uptimeMillis();
    scheduleSelf(mUpdater,mStartTime + Ui.FRAME_DURATION);
  }
 else {
    notifyFinishedToListener();
  }
}",0.9928571428571428
162384,"@Override public void run(){
  long currentTime=SystemClock.uptimeMillis();
  long diff=currentTime - mStartTime;
  if (diff < mDuration) {
    float interpolation=mInterpolator.getInterpolation((float)diff / (float)mDuration);
    scheduleSelf(mUpdater,currentTime + FRAME_DURATION);
    updateAnimation(interpolation);
  }
 else {
    unscheduleSelf(mUpdater);
    mRunning=false;
    updateAnimation(1f);
    notifyFinishedToListener();
  }
}","@Override public void run(){
  long currentTime=SystemClock.uptimeMillis();
  long diff=currentTime - mStartTime;
  if (diff < mDuration) {
    float interpolation=mInterpolator.getInterpolation((float)diff / (float)mDuration);
    scheduleSelf(mUpdater,currentTime + Ui.FRAME_DURATION);
    updateAnimation(interpolation);
  }
 else {
    unscheduleSelf(mUpdater);
    mRunning=false;
    updateAnimation(1f);
    notifyFinishedToListener();
  }
}",0.9966405375139976
162385,"@Override public void draw(Canvas canvas,Paint paint){
  if (!mPath.isEmpty()) {
    int color=blendColors(mStartColor,mEndColor,mCurrentScale);
    paint.setColor(color);
    canvas.drawPath(mPath,paint);
  }
}","@Override public void draw(Canvas canvas,Paint paint){
  if (!mPath.isEmpty()) {
    paint.setColor(mCurColor);
    canvas.drawPath(mPath,paint);
  }
}",0.8066298342541437
162386,public void onOpeningComplete();,void onOpeningComplete();,0.8771929824561403
162387,public void onClosingComplete();,void onClosingComplete();,0.8771929824561403
162388,"private void updateAnimation(float factor){
  float initial=mAnimationInitialValue;
  float destination=mReverse ? 0f : 1f;
  mCurrentScale=initial + (destination - initial) * factor;
  computePath(getBounds());
  invalidateSelf();
}","private void updateAnimation(float factor){
  float initial=mAnimationInitialValue;
  float destination=mReverse ? 0f : 1f;
  mCurrentScale=initial + (destination - initial) * factor;
  mCurColor=blendColors(mStartColor,mEndColor,mCurrentScale);
  computePath(getBounds());
  invalidateSelf();
}",0.8825757575757576
162389,"private void draw(Canvas canvas,Paint paint,int thumbColor,int thumbAlpha,int colorLeft,int colorRight,int alphaLeft,int alphaRight,float halfLeft,float halfRight){
  Rect bounds=getBounds();
  int thumbX=mPoint.x;
  int thumbY=mPoint.y;
  int startLeft=bounds.left + mTouchRadius;
  int startRight=bounds.right - mTouchRadius;
  if (halfLeft > 0) {
    paint.setColor(colorLeft);
    paint.setAlpha(alphaLeft);
    canvas.drawRect(startLeft,thumbY - halfLeft,thumbX,thumbY + halfLeft,paint);
  }
  if (halfRight > 0) {
    paint.setColor(colorRight);
    paint.setAlpha(alphaRight);
    canvas.drawRect(thumbX,thumbY - halfRight,startRight,thumbY + halfRight,paint);
  }
  if (mTickRadius > halfRight) {
    for (int i=0; i <= mNumSegments; i++) {
      float x=startRight - i * mTickDistance;
      if (x <= thumbX)       break;
      canvas.drawCircle(x,thumbY,mTickRadius,paint);
    }
  }
  if (mThumbRadius > halfLeft) {
    paint.setColor(colorLeft);
    paint.setAlpha(alphaLeft);
    for (int i=0; i <= mNumSegments; i++) {
      float x=i * mTickDistance + startLeft;
      if (x > thumbX)       break;
      canvas.drawCircle(x,thumbY,mTickRadius,paint);
    }
  }
  if (!isOpen && mThumbRadius > 0) {
    paint.setColor(thumbColor);
    paint.setAlpha(thumbAlpha);
    canvas.drawCircle(thumbX,thumbY,mThumbRadius,paint);
  }
}","private void draw(Canvas canvas,Paint paint,int thumbColor,int colorLeft,int colorRight,float halfLeft,float halfRight){
  Rect bounds=getBounds();
  int thumbX=mPoint.x;
  int thumbY=mPoint.y;
  int startLeft=bounds.left + mTouchRadius;
  int startRight=bounds.right - mTouchRadius;
  if (halfLeft > 0) {
    paint.setColor(colorLeft);
    canvas.drawRect(startLeft,thumbY - halfLeft,thumbX,thumbY + halfLeft,paint);
  }
  if (halfRight > 0) {
    paint.setColor(colorRight);
    canvas.drawRect(thumbX,thumbY - halfRight,startRight,thumbY + halfRight,paint);
  }
  if (mTickRadius > halfRight) {
    for (int i=0; i <= mNumSegments; i++) {
      float x=startRight - i * mTickDistance;
      if (x <= thumbX)       break;
      canvas.drawCircle(x,thumbY,mTickRadius,paint);
    }
  }
  if (mThumbRadius > halfLeft) {
    paint.setColor(colorLeft);
    for (int i=0; i <= mNumSegments; i++) {
      float x=i * mTickDistance + startLeft;
      if (x > thumbX)       break;
      canvas.drawCircle(x,thumbY,mTickRadius,paint);
    }
  }
  if (!isOpen && mThumbRadius > 0) {
    paint.setColor(thumbColor);
    canvas.drawCircle(thumbX,thumbY,mThumbRadius,paint);
  }
}",0.8500797448165869
162390,"@Override public void draw(Canvas canvas,Paint paint){
  int preAlpha=setPaintAlpha(paint,mAlpha);
  if (paint.getAlpha() > 0) {
    canvas.drawColor(paint.getColor());
  }
  if (mRadius > 0) {
    if (preAlpha < 255) {
      preAlpha=getCircleAlpha(preAlpha,paint.getAlpha());
      paint.setAlpha(preAlpha);
    }
    if (mCircleAlpha != 255)     setPaintAlpha(paint,mCircleAlpha);
    canvas.drawCircle(mPaintX,mPaintY,mRadius,paint);
  }
}","@Override public void draw(Canvas canvas,Paint paint){
  int preAlpha=setPaintAlpha(paint,mAlpha);
  if (paint.getAlpha() > 0) {
    canvas.drawColor(paint.getColor());
  }
  if (mRadius > 0) {
    if (preAlpha < 255) {
      preAlpha=getCircleAlpha(preAlpha,paint.getAlpha());
    }
    paint.setAlpha(preAlpha);
    setPaintAlpha(paint,mCircleAlpha);
    if (paint.getAlpha() > 0) {
      canvas.drawCircle(mPaintX,mPaintY,mRadius,paint);
    }
  }
}",0.7284916201117319
162391,"@Override public void draw(Canvas canvas,Paint paint){
  Rect bounds=getBounds();
  int size=Math.min(bounds.width(),bounds.height());
  float scale=mCurrentScale;
  int rippleColor=mRippleColor;
  int bgColor=mRippleBgColor;
  float radius=(size / 2);
  float radiusAnimated=radius * scale;
  if (scale > INACTIVE_SCALE) {
    if (bgColor != 0) {
      paint.setColor(bgColor);
      paint.setAlpha(decreasedAlpha(Color.alpha(bgColor)));
      canvas.drawCircle(bounds.centerX(),bounds.centerY(),radius,paint);
    }
    if (rippleColor != 0) {
      paint.setColor(rippleColor);
      paint.setAlpha(GeniusUi.modulateAlpha(paint.getAlpha(),Color.alpha(rippleColor)));
      canvas.drawCircle(bounds.centerX(),bounds.centerY(),radiusAnimated,paint);
    }
  }
}","@Override public void draw(Canvas canvas,Paint paint){
  Rect bounds=getBounds();
  int size=Math.min(bounds.width(),bounds.height());
  float scale=mCurrentScale;
  int rippleColor=mRippleColor;
  int bgColor=mRippleBgColor;
  float radius=(size / 2);
  float radiusAnimated=radius * scale;
  if (scale > INACTIVE_SCALE) {
    if (bgColor != 0) {
    }
    if (rippleColor != 0) {
      canvas.drawCircle(bounds.centerX(),bounds.centerY(),radiusAnimated,paint);
    }
  }
}",0.6035598705501618
162392,"@Override protected synchronized void onDraw(Canvas canvas){
  super.onDraw(canvas);
  mSeekBarDrawable.draw(canvas);
  mRipple.draw(canvas);
}","@Override protected synchronized void onDraw(Canvas canvas){
  super.onDraw(canvas);
  mSeekBarDrawable.draw(canvas);
  if (isEnabled())   mRipple.draw(canvas);
}",0.9377049180327868
162393,"@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1) public BalloonMarker(Context context,AttributeSet attrs,int defStyleAttr,String maxValue){
  super(context,attrs,defStyleAttr);
  DisplayMetrics displayMetrics=context.getResources().getDisplayMetrics();
  int padding=(int)(PADDING_DP * displayMetrics.density) * 2;
  mNumber=new TextView(context);
  mNumber.setPadding(padding,0,padding,0);
  mNumber.setGravity(Gravity.CENTER);
  mNumber.setText(maxValue);
  mNumber.setMaxLines(1);
  mNumber.setSingleLine(true);
  GeniusCompat.setTextDirection(mNumber,TEXT_DIRECTION_LOCALE);
  mNumber.setVisibility(View.INVISIBLE);
  setPadding(padding,padding,padding,padding);
  resetSizes(maxValue);
  mSeparation=(int)(SEPARATION_DP * displayMetrics.density);
  mBalloonMarkerDrawable=new BalloonMarkerDrawable(ColorStateList.valueOf(Color.TRANSPARENT),0);
  mBalloonMarkerDrawable.setCallback(this);
  mBalloonMarkerDrawable.setMarkerListener(this);
  mBalloonMarkerDrawable.setExternalOffset(padding);
  GeniusCompat.setOutlineProvider(this,mBalloonMarkerDrawable);
  if (attrs != null) {
    TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.BalloonMarker,defStyleAttr,R.style.BalloonMarkerStyle);
    int textAppearanceId=a.getResourceId(R.styleable.BalloonMarker_gMarkerTextAppearance,R.style.BalloonMarkerTextAppearanceStyle);
    setTextAppearance(textAppearanceId);
    ColorStateList color=a.getColorStateList(R.styleable.BalloonMarker_gMarkerBackgroundColor);
    setBackgroundColor(color);
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
      float elevation=a.getDimension(R.styleable.BalloonMarker_gMarkerElevation,ELEVATION_DP * displayMetrics.density);
      ViewCompat.setElevation(this,elevation);
    }
    a.recycle();
  }
}","@TargetApi(Build.VERSION_CODES.LOLLIPOP) public BalloonMarker(Context context,AttributeSet attrs,int defStyleAttr,int defStyleRes){
  super(context,attrs,defStyleAttr,defStyleRes);
  init(context,attrs,defStyleAttr,defStyleRes,""String_Node_Str"");
}",0.0546991546494281
162394,"public boolean isPerformClick(){
  if (!isPerformClick) {
    isPerformClick=true;
    return false;
  }
 else {
    return !isRunning;
  }
}","public boolean isPerformClick(){
  if (!isPerformClick) {
    isPerformClick=true;
    return false;
  }
 else {
    if (isRunning)     return false;
 else {
      isPerformClick=false;
      return true;
    }
  }
}",0.7058823529411765
162395,"public void onTouch(MotionEvent event){
switch (event.getActionMasked()) {
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
{
      isTouchReleased=true;
      onTouchReleased(event.getX(),event.getY());
    }
  break;
case MotionEvent.ACTION_DOWN:
{
  isTouchReleased=false;
  onTouchDown(event.getX(),event.getY());
}
break;
case MotionEvent.ACTION_MOVE:
onTouchMove(event.getX(),event.getY());
break;
}
}","public boolean onTouch(MotionEvent event){
switch (event.getActionMasked()) {
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
{
      isTouchReleased=true;
      onTouchReleased(event.getX(),event.getY());
    }
  break;
case MotionEvent.ACTION_DOWN:
{
  isTouchReleased=false;
  onTouchDown(event.getX(),event.getY());
}
break;
case MotionEvent.ACTION_MOVE:
onTouchMove(event.getX(),event.getY());
break;
default :
return false;
}
return true;
}",0.9452054794520548
162396,"@Override public boolean onTouchEvent(MotionEvent event){
  boolean bFlag=super.onTouchEvent(event);
  final TouchEffectDrawable d=mTouchDrawable;
  if (d != null && isEnabled()) {
    d.onTouch(event);
    return true;
  }
  return bFlag;
}","@Override public boolean onTouchEvent(MotionEvent event){
  final TouchEffectDrawable d=mTouchDrawable;
  if (d != null && isEnabled()) {
    d.onTouch(event);
    super.onTouchEvent(event);
    return true;
  }
  return super.onTouchEvent(event);
}",0.7877551020408163
162397,"@Override public void perform(){
  Runnable runnable=new Runnable(){
    @Override public void run(){
      performClick();
    }
  }
;
  if (!this.post(runnable)) {
    this.performClick();
  }
}","@Override public void perform(){
  Runnable runnable=new Runnable(){
    @Override public void run(){
      performClick();
    }
  }
;
  if (!this.post(runnable)) {
    performClick();
  }
}",0.9870801033591732
162398,"@Override public boolean onTouchEvent(MotionEvent event){
  boolean bFlag=super.onTouchEvent(event);
  final TouchEffectDrawable d=mTouchDrawable;
  if (d != null && isEnabled()) {
    d.onTouch(event);
    return true;
  }
  return bFlag;
}","@Override public boolean onTouchEvent(MotionEvent event){
  final TouchEffectDrawable d=mTouchDrawable;
  if (d != null && isEnabled()) {
    d.onTouch(event);
    super.onTouchEvent(event);
    return true;
  }
  return super.onTouchEvent(event);
}",0.7877551020408163
162399,"@Override public void perform(){
  Runnable runnable=new Runnable(){
    @Override public void run(){
      performClick();
    }
  }
;
  if (!this.post(runnable)) {
    this.performClick();
  }
}","@Override public void perform(){
  Runnable runnable=new Runnable(){
    @Override public void run(){
      performClick();
    }
  }
;
  if (!this.post(runnable)) {
    performClick();
  }
}",0.9870801033591732
162400,"@Override public char[] reqPassword(Resource<?> resource){
  return keyPassphrase.toCharArray();
}","@Override public char[] reqPassword(Resource<?> resource){
  return textfield.getText().toString().toCharArray();
}",0.8169014084507042
162401,"@Override protected void onProgressUpdate(Void... values){
  super.onProgressUpdate(values);
}","@Override protected void onProgressUpdate(IOException... values){
  super.onProgressUpdate(values);
  if (values.length < 1)   return;
  IOException result=values[0];
  MaterialDialog.Builder builder=new MaterialDialog.Builder(AppConfig.getInstance().getActivityContext());
  View dialogLayout=View.inflate(AppConfig.getInstance().getActivityContext(),R.layout.dialog_singleedittext,null);
  WarnableTextInputLayout wilTextfield=dialogLayout.findViewById(R.id.singleedittext_warnabletextinputlayout);
  EditText textfield=dialogLayout.findViewById(R.id.singleedittext_input);
  textfield.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
  builder.customView(dialogLayout,false).autoDismiss(false).title(R.string.ssh_key_prompt_passphrase).positiveText(R.string.ok).onPositive(((dialog,which) -> {
    this.passwordFinder=new PasswordFinder(){
      @Override public char[] reqPassword(      Resource<?> resource){
        return textfield.getText().toString().toCharArray();
      }
      @Override public boolean shouldRetry(      Resource<?> resource){
        return false;
      }
    }
;
    this.paused=false;
    dialog.dismiss();
  }
)).negativeText(R.string.cancel).onNegative(((dialog,which) -> {
    dialog.dismiss();
    toastOnParseError(result);
    cancel(true);
  }
));
  MaterialDialog dialog=builder.show();
  new WarnableTextInputValidator(AppConfig.getInstance().getActivityContext(),textfield,wilTextfield,dialog.getActionButton(DialogAction.POSITIVE),(text) -> {
    if (text.length() < 1) {
      return new WarnableTextInputValidator.ReturnState(WarnableTextInputValidator.ReturnState.STATE_ERROR,R.string.field_empty);
    }
    return new WarnableTextInputValidator.ReturnState();
  }
);
  if (errorMessage != null) {
    wilTextfield.setError(errorMessage);
    textfield.selectAll();
  }
}",0.0524691358024691
162402,"@Override protected AsyncTaskResult<KeyPair> doInBackground(Void... voids){
  AsyncTaskResult<KeyPair> retval=null;
  for (  Provider provider : Security.getProviders())   Log.d(TAG,""String_Node_Str"" + provider.getName());
  try {
    for (    PemToKeyPairConverter converter : converters) {
      KeyPair keyPair=converter.convert(new String(pemFile));
      if (keyPair != null) {
        retval=new AsyncTaskResult<KeyPair>(keyPair);
        break;
      }
    }
    if (retval == null)     throw new IOException(""String_Node_Str"");
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    retval=new AsyncTaskResult<KeyPair>(e);
  }
  return retval;
}","@Override protected KeyPair doInBackground(Void... voids){
  while (true) {
    if (isCancelled())     return null;
    if (paused)     continue;
    for (    PemToKeyPairConverter converter : converters) {
      KeyPair keyPair=converter.convert(new String(pemFile));
      if (keyPair != null) {
        paused=false;
        return keyPair;
      }
    }
    if (this.passwordFinder != null) {
      this.errorMessage=AppConfig.getInstance().getString(R.string.ssh_key_invalid_passphrase);
    }
    paused=true;
    publishProgress(new IOException(""String_Node_Str""));
  }
}",0.4105854049719326
162403,"public PemToKeyPairTask(@NonNull byte[] pemContent,AsyncTaskResult.Callback<AsyncTaskResult<KeyPair>> callback,String keyPassphrase,MaterialDialog dialog,String errorMessage){
  this.pemFile=pemContent;
  this.callback=callback;
  this.dialog=dialog;
  this.errorMessage=errorMessage;
  if (keyPassphrase == null)   passwordFinder=null;
 else   passwordFinder=new PasswordFinder(){
    @Override public char[] reqPassword(    Resource<?> resource){
      return keyPassphrase.toCharArray();
    }
    @Override public boolean shouldRetry(    Resource<?> resource){
      return false;
    }
  }
;
}","private PemToKeyPairTask(@NonNull byte[] pemContent,AsyncTaskResult.Callback<KeyPair> callback){
  this.pemFile=pemContent;
  this.callback=callback;
}",0.3898531375166889
162404,"@Override protected void onPostExecute(AsyncTaskResult<KeyPair> result){
  if (result.exception != null) {
    if (dialog == null) {
      MaterialDialog.Builder builder=new MaterialDialog.Builder(AppConfig.getInstance().getActivityContext());
      View dialogLayout=View.inflate(AppConfig.getInstance().getActivityContext(),R.layout.dialog_singleedittext,null);
      WarnableTextInputLayout wilTextfield=dialogLayout.findViewById(R.id.singleedittext_warnabletextinputlayout);
      EditText textfield=dialogLayout.findViewById(R.id.singleedittext_input);
      textfield.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
      builder.customView(dialogLayout,false).autoDismiss(false).title(R.string.ssh_key_prompt_passphrase).positiveText(R.string.ok).onPositive(((dialog,which) -> {
        new PemToKeyPairTask(pemFile,callback,textfield.getText().toString(),dialog,AppConfig.getInstance().getString(R.string.ssh_key_invalid_passphrase)).execute();
      }
)).negativeText(R.string.cancel).onNegative(((dialog,which) -> {
        dialog.dismiss();
        toastOnParseError(result);
      }
));
      MaterialDialog dialog=builder.show();
      new WarnableTextInputValidator(AppConfig.getInstance().getActivityContext(),textfield,wilTextfield,dialog.getActionButton(DialogAction.POSITIVE),(text) -> {
        if (text.length() < 1) {
          return new WarnableTextInputValidator.ReturnState(WarnableTextInputValidator.ReturnState.STATE_ERROR,R.string.field_empty);
        }
        return new WarnableTextInputValidator.ReturnState();
      }
);
    }
 else {
      if (errorMessage != null) {
        WarnableTextInputLayout wilTextfield=(WarnableTextInputLayout)dialog.findViewById(R.id.singleedittext_warnabletextinputlayout);
        EditText textfield=(EditText)dialog.findViewById(R.id.singleedittext_input);
        wilTextfield.setError(errorMessage);
        textfield.selectAll();
      }
    }
  }
 else {
    if (dialog != null)     dialog.dismiss();
  }
  if (callback != null) {
    callback.onResult(result);
  }
}","@Override protected void onPostExecute(KeyPair result){
  if (callback != null) {
    callback.onResult(result);
  }
}",0.1077625570776255
162405,"private void toastOnParseError(AsyncTaskResult<KeyPair> result){
  Toast.makeText(AppConfig.getInstance().getActivityContext(),AppConfig.getInstance().getResources().getString(R.string.ssh_pem_key_parse_error,result.exception.getLocalizedMessage()),Toast.LENGTH_LONG).show();
}","private void toastOnParseError(IOException result){
  Toast.makeText(AppConfig.getInstance().getActivityContext(),AppConfig.getInstance().getResources().getString(R.string.ssh_pem_key_parse_error,result.getLocalizedMessage()),Toast.LENGTH_LONG).show();
}",0.3578154425612053
162406,"@Override public KeyType getType() throws IOException {
  return KeyType.fromKey(getPublic());
}","@Override public KeyType getType(){
  return KeyType.fromKey(getPublic());
}",0.8837209302325582
162407,"@Override protected AsyncTaskResult<SSHClient> doInBackground(Void... voids){
  final SSHClient sshClient=new SSHClient(new CustomSshJConfig());
  sshClient.addHostKeyVerifier(hostKey);
  sshClient.setConnectTimeout(SSH_CONNECT_TIMEOUT);
  try {
    sshClient.connect(hostname,port);
    if (password != null && !""String_Node_Str"".equals(password)) {
      sshClient.authPassword(username,password);
      return new AsyncTaskResult<SSHClient>(sshClient);
    }
 else {
      sshClient.authPublickey(username,new KeyProvider(){
        @Override public PrivateKey getPrivate(){
          return privateKey.getPrivate();
        }
        @Override public PublicKey getPublic(){
          return privateKey.getPublic();
        }
        @Override public KeyType getType() throws IOException {
          return KeyType.fromKey(getPublic());
        }
      }
);
      return new AsyncTaskResult<SSHClient>(sshClient);
    }
  }
 catch (  UserAuthException e) {
    e.printStackTrace();
    return new AsyncTaskResult<SSHClient>(e);
  }
catch (  TransportException e) {
    e.printStackTrace();
    return new AsyncTaskResult<SSHClient>(e);
  }
catch (  IOException e) {
    e.printStackTrace();
    return new AsyncTaskResult<SSHClient>(e);
  }
}","@Override protected AsyncTaskResult<SSHClient> doInBackground(Void... voids){
  final SSHClient sshClient=new SSHClient(new CustomSshJConfig());
  sshClient.addHostKeyVerifier(hostKey);
  sshClient.setConnectTimeout(SSH_CONNECT_TIMEOUT);
  try {
    sshClient.connect(hostname,port);
    if (password != null && !""String_Node_Str"".equals(password)) {
      sshClient.authPassword(username,password);
      return new AsyncTaskResult<SSHClient>(sshClient);
    }
 else {
      sshClient.authPublickey(username,new KeyProvider(){
        @Override public PrivateKey getPrivate(){
          return privateKey.getPrivate();
        }
        @Override public PublicKey getPublic(){
          return privateKey.getPublic();
        }
        @Override public KeyType getType(){
          return KeyType.fromKey(getPublic());
        }
      }
);
      return new AsyncTaskResult<SSHClient>(sshClient);
    }
  }
 catch (  UserAuthException e) {
    e.printStackTrace();
    return new AsyncTaskResult<SSHClient>(e);
  }
catch (  TransportException e) {
    e.printStackTrace();
    return new AsyncTaskResult<SSHClient>(e);
  }
catch (  IOException e) {
    e.printStackTrace();
    return new AsyncTaskResult<SSHClient>(e);
  }
}",0.6785425101214575
162408,"@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  context=getActivity();
  final boolean edit=getArguments().getBoolean(""String_Node_Str"",false);
  final View v2=getActivity().getLayoutInflater().inflate(R.layout.sftp_dialog,null);
  final EditText connectionET=v2.findViewById(R.id.connectionET);
  final EditText addressET=v2.findViewById(R.id.ipET);
  final EditText portET=v2.findViewById(R.id.portET);
  final EditText usernameET=v2.findViewById(R.id.usernameET);
  final EditText passwordET=v2.findViewById(R.id.passwordET);
  final Button selectPemBTN=v2.findViewById(R.id.selectPemBTN);
  if (!edit) {
    connectionET.setText(R.string.scp_con);
    portET.setText(Integer.toString(SshConnectionPool.SSH_DEFAULT_PORT));
  }
 else {
    connectionET.setText(getArguments().getString(""String_Node_Str""));
    addressET.setText(getArguments().getString(""String_Node_Str""));
    portET.setText(getArguments().getString(""String_Node_Str""));
    usernameET.setText(getArguments().getString(""String_Node_Str""));
    if (getArguments().getBoolean(""String_Node_Str"")) {
      passwordET.setHint(R.string.password_unchanged);
    }
 else {
      selectedParsedKeyPairName=getArguments().getString(""String_Node_Str"");
      selectPemBTN.setText(selectedParsedKeyPairName);
    }
  }
  portET.setOnFocusChangeListener((v,hasFocus) -> {
    if (hasFocus)     portET.selectAll();
  }
);
  int accentColor=((ThemedActivity)getActivity()).getAccent();
  selectPemBTN.setOnClickListener(v -> {
    Intent intent=new Intent().setType(""String_Node_Str"").setAction(Intent.ACTION_GET_CONTENT);
    startActivityForResult(intent,SELECT_PEM_INTENT);
  }
);
  final MaterialDialog.Builder dialogBuilder=new MaterialDialog.Builder(context);
  dialogBuilder.title((R.string.scp_con));
  dialogBuilder.autoDismiss(false);
  dialogBuilder.customView(v2,true);
  dialogBuilder.theme(utilsProvider.getAppTheme().getMaterialDialogTheme());
  dialogBuilder.negativeText(R.string.cancel);
  dialogBuilder.positiveText(edit ? R.string.update : R.string.create);
  dialogBuilder.positiveColor(accentColor);
  dialogBuilder.negativeColor(accentColor);
  dialogBuilder.neutralColor(accentColor);
  dialogBuilder.onPositive((dialog,which) -> {
    final String connectionName=connectionET.getText().toString();
    final String hostname=addressET.getText().toString();
    final int port=Integer.parseInt(portET.getText().toString());
    final String username=usernameET.getText().toString();
    final String password=passwordET.getText() != null ? passwordET.getText().toString() : null;
    String sshHostKey=utilsHandler.getSshHostKey(deriveSftpPathFrom(hostname,port,username,password,selectedParsedKeyPair));
    if (sshHostKey != null) {
      authenticateAndSaveSetup(connectionName,hostname,port,sshHostKey,username,password,selectedParsedKeyPairName,selectedParsedKeyPair,edit);
    }
 else {
      new GetSshHostFingerprintTask(hostname,port,taskResult -> {
        PublicKey hostKey=taskResult.result;
        if (hostKey != null) {
          final String hostKeyFingerprint=SecurityUtils.getFingerprint(hostKey);
          StringBuilder sb=new StringBuilder(hostname);
          if (port != SshConnectionPool.SSH_DEFAULT_PORT && port > 0)           sb.append(':').append(port);
          final String hostAndPort=sb.toString();
          new AlertDialog.Builder(context).setTitle(R.string.ssh_host_key_verification_prompt_title).setMessage(getString(R.string.ssh_host_key_verification_prompt,hostAndPort,hostKey.getAlgorithm(),hostKeyFingerprint)).setCancelable(true).setPositiveButton(R.string.yes,(dialog1,which1) -> {
            dialog1.dismiss();
            if (authenticateAndSaveSetup(connectionName,hostname,port,hostKeyFingerprint,username,password,selectedParsedKeyPairName,selectedParsedKeyPair,edit)) {
              dialog1.dismiss();
              Log.d(TAG,""String_Node_Str"");
              dismiss();
            }
          }
).setNegativeButton(R.string.no,(dialog1,which1) -> dialog1.dismiss()).show();
        }
      }
).execute();
    }
  }
).onNegative((dialog,which) -> dialog.dismiss());
  if (edit) {
    Log.d(TAG,""String_Node_Str"" + edit);
    dialogBuilder.negativeText(R.string.delete).onNegative((dialog,which) -> {
      final String connectionName=connectionET.getText().toString();
      final String hostname=addressET.getText().toString();
      final int port=Integer.parseInt(portET.getText().toString());
      final String username=usernameET.getText().toString();
      final String path=deriveSftpPathFrom(hostname,port,username,getArguments().getString(""String_Node_Str"",null),selectedParsedKeyPair);
      int i=DataUtils.getInstance().containsServer(new String[]{connectionName,path});
      if (i != -1) {
        DataUtils.getInstance().removeServer(i);
        AppConfig.runInBackground(() -> {
          utilsHandler.removeFromDatabase(new OperationData(UtilsHandler.Operation.SFTP,path,connectionName,null,null,null));
        }
);
        ((MainActivity)getActivity()).getDrawer().refreshDrawer();
      }
      dialog.dismiss();
    }
).neutralText(R.string.cancel).onNeutral((dialog,which) -> dialog.dismiss());
  }
  MaterialDialog dialog=dialogBuilder.build();
  final View okBTN=dialog.getActionButton(DialogAction.POSITIVE);
  if (!edit)   okBTN.setEnabled(false);
  TextWatcher validator=new SimpleTextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      int port=portET.getText().toString().length() > 0 ? Integer.parseInt(portET.getText().toString()) : -1;
      okBTN.setEnabled((connectionET.getText().length() > 0 && addressET.getText().length() > 0 && port > 0 && port < 65536 && usernameET.getText().length() > 0 && (passwordET.getText().length() > 0 || selectedParsedKeyPair != null)));
    }
  }
;
  addressET.addTextChangedListener(validator);
  portET.addTextChangedListener(validator);
  usernameET.addTextChangedListener(validator);
  passwordET.addTextChangedListener(validator);
  return dialog;
}","@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  context=getActivity();
  final boolean edit=getArguments().getBoolean(""String_Node_Str"",false);
  final View v2=getActivity().getLayoutInflater().inflate(R.layout.sftp_dialog,null);
  final EditText connectionET=v2.findViewById(R.id.connectionET);
  final EditText addressET=v2.findViewById(R.id.ipET);
  final EditText portET=v2.findViewById(R.id.portET);
  final EditText usernameET=v2.findViewById(R.id.usernameET);
  final EditText passwordET=v2.findViewById(R.id.passwordET);
  final Button selectPemBTN=v2.findViewById(R.id.selectPemBTN);
  if (!edit) {
    connectionET.setText(R.string.scp_con);
    portET.setText(Integer.toString(SshConnectionPool.SSH_DEFAULT_PORT));
  }
 else {
    connectionET.setText(getArguments().getString(""String_Node_Str""));
    addressET.setText(getArguments().getString(""String_Node_Str""));
    portET.setText(getArguments().getString(""String_Node_Str""));
    usernameET.setText(getArguments().getString(""String_Node_Str""));
    if (getArguments().getBoolean(""String_Node_Str"")) {
      passwordET.setHint(R.string.password_unchanged);
    }
 else {
      selectedParsedKeyPairName=getArguments().getString(""String_Node_Str"");
      selectPemBTN.setText(selectedParsedKeyPairName);
    }
  }
  portET.setOnFocusChangeListener((v,hasFocus) -> {
    if (hasFocus)     portET.selectAll();
  }
);
  int accentColor=((ThemedActivity)getActivity()).getAccent();
  selectPemBTN.setOnClickListener(v -> {
    Intent intent=new Intent().setType(""String_Node_Str"").setAction(Intent.ACTION_GET_CONTENT);
    startActivityForResult(intent,SELECT_PEM_INTENT);
  }
);
  final MaterialDialog.Builder dialogBuilder=new MaterialDialog.Builder(context);
  dialogBuilder.title((R.string.scp_con));
  dialogBuilder.autoDismiss(false);
  dialogBuilder.customView(v2,true);
  dialogBuilder.theme(utilsProvider.getAppTheme().getMaterialDialogTheme());
  dialogBuilder.negativeText(R.string.cancel);
  dialogBuilder.positiveText(edit ? R.string.update : R.string.create);
  dialogBuilder.positiveColor(accentColor);
  dialogBuilder.negativeColor(accentColor);
  dialogBuilder.neutralColor(accentColor);
  dialogBuilder.onPositive((dialog,which) -> {
    final String connectionName=connectionET.getText().toString();
    final String hostname=addressET.getText().toString();
    final int port=Integer.parseInt(portET.getText().toString());
    final String username=usernameET.getText().toString();
    final String password=passwordET.getText() != null ? passwordET.getText().toString() : null;
    String sshHostKey=utilsHandler.getSshHostKey(deriveSftpPathFrom(hostname,port,username,password,selectedParsedKeyPair));
    if (sshHostKey != null) {
      authenticateAndSaveSetup(connectionName,hostname,port,sshHostKey,username,password,selectedParsedKeyPairName,selectedParsedKeyPair,edit);
    }
 else {
      new GetSshHostFingerprintTask(hostname,port,taskResult -> {
        PublicKey hostKey=taskResult.result;
        if (hostKey != null) {
          final String hostKeyFingerprint=SecurityUtils.getFingerprint(hostKey);
          StringBuilder sb=new StringBuilder(hostname);
          if (port != SshConnectionPool.SSH_DEFAULT_PORT && port > 0)           sb.append(':').append(port);
          final String hostAndPort=sb.toString();
          new AlertDialog.Builder(context).setTitle(R.string.ssh_host_key_verification_prompt_title).setMessage(getString(R.string.ssh_host_key_verification_prompt,hostAndPort,hostKey.getAlgorithm(),hostKeyFingerprint)).setCancelable(true).setPositiveButton(R.string.yes,(dialog1,which1) -> {
            dialog1.dismiss();
            if (authenticateAndSaveSetup(connectionName,hostname,port,hostKeyFingerprint,username,password,selectedParsedKeyPairName,selectedParsedKeyPair,edit)) {
              dialog1.dismiss();
              Log.d(TAG,""String_Node_Str"");
              dismiss();
            }
          }
).setNegativeButton(R.string.no,(dialog1,which1) -> dialog1.dismiss()).show();
        }
      }
).execute();
    }
  }
).onNegative((dialog,which) -> dialog.dismiss());
  if (edit) {
    dialogBuilder.negativeText(R.string.delete).onNegative((dialog,which) -> {
      final String connectionName=connectionET.getText().toString();
      final String hostname=addressET.getText().toString();
      final int port=Integer.parseInt(portET.getText().toString());
      final String username=usernameET.getText().toString();
      final String path=deriveSftpPathFrom(hostname,port,username,getArguments().getString(""String_Node_Str"",null),selectedParsedKeyPair);
      int i=DataUtils.getInstance().containsServer(new String[]{connectionName,path});
      if (i != -1) {
        DataUtils.getInstance().removeServer(i);
        AppConfig.runInBackground(() -> {
          utilsHandler.removeFromDatabase(new OperationData(UtilsHandler.Operation.SFTP,path,connectionName,null,null,null));
        }
);
        ((MainActivity)getActivity()).getDrawer().refreshDrawer();
      }
      dialog.dismiss();
    }
).neutralText(R.string.cancel).onNeutral((dialog,which) -> dialog.dismiss());
  }
  MaterialDialog dialog=dialogBuilder.build();
  final View okBTN=dialog.getActionButton(DialogAction.POSITIVE);
  if (!edit)   okBTN.setEnabled(false);
  TextWatcher validator=new SimpleTextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      int port=portET.getText().toString().length() > 0 ? Integer.parseInt(portET.getText().toString()) : -1;
      okBTN.setEnabled((connectionET.getText().length() > 0 && addressET.getText().length() > 0 && port > 0 && port < 65536 && usernameET.getText().length() > 0 && (passwordET.getText().length() > 0 || selectedParsedKeyPair != null)));
    }
  }
;
  addressET.addTextChangedListener(validator);
  portET.addTextChangedListener(validator);
  usernameET.addTextChangedListener(validator);
  passwordET.addTextChangedListener(validator);
  return dialog;
}",0.9965704726056044
162409,"/** 
 * Set the PEM key for authentication when the Intent to browse file returned.
 */
@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (SELECT_PEM_INTENT == requestCode && Activity.RESULT_OK == resultCode) {
    selectedPem=data.getData();
    Log.d(TAG,""String_Node_Str"" + selectedPem.toString() + ""String_Node_Str""+ selectedPem.getLastPathSegment());
    try {
      InputStream selectedKeyContent=context.getContentResolver().openInputStream(selectedPem);
      new PemToKeyPairTask(selectedKeyContent,result -> {
        if (result.result != null) {
          selectedParsedKeyPair=result.result;
          selectedParsedKeyPairName=selectedPem.getLastPathSegment().substring(selectedPem.getLastPathSegment().indexOf('/') + 1);
          MDButton okBTN=((MaterialDialog)getDialog()).getActionButton(DialogAction.POSITIVE);
          okBTN.setEnabled(okBTN.isEnabled() || true);
          Button selectPemBTN=getDialog().findViewById(R.id.selectPemBTN);
          selectPemBTN.setText(selectedParsedKeyPairName);
        }
      }
).execute();
    }
 catch (    FileNotFoundException e) {
      Log.e(TAG,""String_Node_Str"",e);
    }
catch (    IOException shouldNotHappen) {
    }
  }
}","/** 
 * Set the PEM key for authentication when the Intent to browse file returned.
 */
@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (SELECT_PEM_INTENT == requestCode && Activity.RESULT_OK == resultCode) {
    selectedPem=data.getData();
    try {
      InputStream selectedKeyContent=context.getContentResolver().openInputStream(selectedPem);
      new PemToKeyPairTask(selectedKeyContent,result -> {
        if (result.result != null) {
          selectedParsedKeyPair=result.result;
          selectedParsedKeyPairName=selectedPem.getLastPathSegment().substring(selectedPem.getLastPathSegment().indexOf('/') + 1);
          MDButton okBTN=((MaterialDialog)getDialog()).getActionButton(DialogAction.POSITIVE);
          okBTN.setEnabled(okBTN.isEnabled() || true);
          Button selectPemBTN=getDialog().findViewById(R.id.selectPemBTN);
          selectPemBTN.setText(selectedParsedKeyPairName);
        }
      }
).execute();
    }
 catch (    FileNotFoundException e) {
      Log.e(TAG,""String_Node_Str"",e);
    }
catch (    IOException shouldNotHappen) {
    }
  }
}",0.3481089873932493
162410,"public String parseSftpPath(String a){
  if (a.contains(""String_Node_Str""))   return ""String_Node_Str"" + a.substring(a.indexOf(""String_Node_Str"") + 1,a.length());
 else   return a;
}","public String parseSftpPath(String a){
  if (a.contains(""String_Node_Str""))   return ""String_Node_Str"" + a.substring(a.lastIndexOf(""String_Node_Str"") + 1,a.length());
 else   return a;
}",0.9836956521739132
162411,"/** 
 * Method handles encryption of plain text on various APIs
 */
public static String encryptPassword(Context context,String plainText) throws GeneralSecurityException, IOException {
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
    return CryptUtil.aesEncryptPassword(plainText);
  }
 else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
    return CryptUtil.rsaEncryptPassword(context,plainText);
  }
 else   return plainText;
}","/** 
 * Method handles encryption of plain text on various APIs
 */
public static String encryptPassword(Context context,String plainText) throws GeneralSecurityException, IOException {
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
    return aesEncryptPassword(plainText);
  }
 else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
    return rsaEncryptPassword(context,plainText);
  }
 else   return plainText;
}",0.9779735682819384
162412,"/** 
 * Method handles decryption of cipher text on various APIs
 */
public static String decryptPassword(Context context,String cipherText) throws GeneralSecurityException, IOException {
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
    return CryptUtil.aesDecryptPassword(cipherText);
  }
 else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
    return CryptUtil.rsaDecryptPassword(context,cipherText);
  }
 else   return cipherText;
}","/** 
 * Method handles decryption of cipher text on various APIs
 */
public static String decryptPassword(Context context,String cipherText) throws GeneralSecurityException, IOException {
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
    return aesDecryptPassword(cipherText);
  }
 else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
    return rsaDecryptPassword(context,cipherText);
  }
 else   return cipherText;
}",0.9782135076252724
162413,"/** 
 * Helper method to list children of this file
 */
public void forEachChildrenFile(Context context,boolean isRoot,OnFileFound onFileFound){
switch (mode) {
case SFTP:
    try {
      SshClientUtils.execute(new SFtpClientTemplate(path){
        @Override public Void execute(        SFTPClient client){
          try {
            for (            RemoteResourceInfo info : client.ls(SshClientUtils.extractRemotePathFrom(path))) {
              HybridFileParcelable f=new HybridFileParcelable(String.format(""String_Node_Str"",path,info.getName()));
              f.setName(info.getName());
              f.setMode(OpenMode.SFTP);
              f.setDirectory(info.isDirectory());
              f.setDate(info.getAttributes().getMtime() * 1000);
              f.setSize(f.isDirectory() ? 0 : info.getAttributes().getSize());
              f.setPermission(Integer.toString(FilePermission.toMask(info.getAttributes().getPermissions()),8));
              onFileFound.onFileFound(f);
            }
          }
 catch (          IOException e) {
            Log.w(""String_Node_Str"",""String_Node_Str"",e);
          }
          return null;
        }
      }
);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  break;
case SMB:
try {
  SmbFile smbFile=new SmbFile(path);
  for (  SmbFile smbFile1 : smbFile.listFiles()) {
    HybridFileParcelable baseFile=new HybridFileParcelable(smbFile1.getPath());
    baseFile.setName(smbFile1.getName());
    baseFile.setMode(OpenMode.SMB);
    baseFile.setDirectory(smbFile1.isDirectory());
    baseFile.setDate(smbFile1.lastModified());
    baseFile.setSize(baseFile.isDirectory() ? 0 : smbFile1.length());
    onFileFound.onFileFound(baseFile);
  }
}
 catch (MalformedURLException|SmbException e) {
  e.printStackTrace();
}
break;
case OTG:
OTGUtil.getDocumentFiles(path,context,onFileFound);
break;
case DROPBOX:
case BOX:
case GDRIVE:
case ONEDRIVE:
try {
CloudUtil.getCloudFiles(path,dataUtils.getAccount(mode),mode,onFileFound);
}
 catch (CloudPluginException e) {
e.printStackTrace();
}
break;
default :
RootHelper.getFiles(path,isRoot,true,null,onFileFound);
}
}","/** 
 * Helper method to list children of this file
 */
public void forEachChildrenFile(Context context,boolean isRoot,OnFileFound onFileFound){
switch (mode) {
case SFTP:
    try {
      SshClientUtils.execute(new SFtpClientTemplate(path){
        @Override public Void execute(        SFTPClient client){
          try {
            for (            RemoteResourceInfo info : client.ls(SshClientUtils.extractRemotePathFrom(path))) {
              boolean isDirectory=info.isDirectory();
              if (info.getAttributes().getType().equals(FileMode.Type.SYMLINK)) {
                FileAttributes symlinkAttrs=client.stat(info.getPath());
                isDirectory=symlinkAttrs.getType().equals(FileMode.Type.DIRECTORY);
              }
              HybridFileParcelable f=new HybridFileParcelable(String.format(""String_Node_Str"",path,info.getName()));
              f.setName(info.getName());
              f.setMode(OpenMode.SFTP);
              f.setDirectory(isDirectory);
              f.setDate(info.getAttributes().getMtime() * 1000);
              f.setSize(isDirectory ? 0 : info.getAttributes().getSize());
              f.setPermission(Integer.toString(FilePermission.toMask(info.getAttributes().getPermissions()),8));
              onFileFound.onFileFound(f);
            }
          }
 catch (          IOException e) {
            Log.w(""String_Node_Str"",""String_Node_Str"",e);
          }
          return null;
        }
      }
);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  break;
case SMB:
try {
  SmbFile smbFile=new SmbFile(path);
  for (  SmbFile smbFile1 : smbFile.listFiles()) {
    HybridFileParcelable baseFile=new HybridFileParcelable(smbFile1.getPath());
    baseFile.setName(smbFile1.getName());
    baseFile.setMode(OpenMode.SMB);
    baseFile.setDirectory(smbFile1.isDirectory());
    baseFile.setDate(smbFile1.lastModified());
    baseFile.setSize(baseFile.isDirectory() ? 0 : smbFile1.length());
    onFileFound.onFileFound(baseFile);
  }
}
 catch (MalformedURLException|SmbException e) {
  e.printStackTrace();
}
break;
case OTG:
OTGUtil.getDocumentFiles(path,context,onFileFound);
break;
case DROPBOX:
case BOX:
case GDRIVE:
case ONEDRIVE:
try {
CloudUtil.getCloudFiles(path,dataUtils.getAccount(mode),mode,onFileFound);
}
 catch (CloudPluginException e) {
e.printStackTrace();
}
break;
default :
RootHelper.getFiles(path,isRoot,true,null,onFileFound);
}
}",0.9296084469863616
162414,"/** 
 * Updates the status spans
 */
private void updateSpans(){
  String ftpAddress=getFTPAddressString();
  if (ftpAddress == null) {
    ftpAddress=""String_Node_Str"";
    Toast.makeText(getContext(),getResources().getString(R.string.local_inet_addr_error),Toast.LENGTH_SHORT).show();
  }
  String statusHead=getResources().getString(R.string.ftp_status_title) + ""String_Node_Str"";
  spannedStatusConnected=Html.fromHtml(statusHead + ""String_Node_Str"" + ""String_Node_Str""+ accentColor+ ""String_Node_Str""+ getResources().getString(R.string.ftp_status_running)+ ""String_Node_Str""+ ""String_Node_Str""+ ftpAddress+ ""String_Node_Str"");
  spannedStatusNoConnection=Html.fromHtml(statusHead + ""String_Node_Str"" + ""String_Node_Str""+ Utils.getColor(getContext(),android.R.color.holo_red_light)+ ""String_Node_Str""+ getResources().getString(R.string.ftp_status_no_connection)+ ""String_Node_Str"");
  spannedStatusNotRunning=Html.fromHtml(statusHead + ""String_Node_Str"" + getResources().getString(R.string.ftp_status_not_running)+ ""String_Node_Str"");
  spannedStatusSecure=Html.fromHtml(statusHead + ""String_Node_Str"" + ""String_Node_Str""+ Utils.getColor(getContext(),android.R.color.holo_green_light)+ ""String_Node_Str""+ getResources().getString(R.string.ftp_status_secure_connection)+ ""String_Node_Str""+ ""String_Node_Str""+ ftpAddress+ ""String_Node_Str"");
}","/** 
 * Updates the status spans
 */
private void updateSpans(){
  String ftpAddress=getFTPAddressString();
  if (ftpAddress == null) {
    ftpAddress=""String_Node_Str"";
    Toast.makeText(getContext(),getResources().getString(R.string.local_inet_addr_error),Toast.LENGTH_SHORT).show();
  }
  String statusHead=getResources().getString(R.string.ftp_status_title) + ""String_Node_Str"";
  spannedStatusConnected=Html.fromHtml(statusHead + ""String_Node_Str"" + ""String_Node_Str""+ accentColor+ ""String_Node_Str""+ getResources().getString(R.string.ftp_status_running)+ ""String_Node_Str"");
  spannedStatusUrl=Html.fromHtml(""String_Node_Str"" + ftpAddress);
  spannedStatusNoConnection=Html.fromHtml(statusHead + ""String_Node_Str"" + ""String_Node_Str""+ Utils.getColor(getContext(),android.R.color.holo_red_light)+ ""String_Node_Str""+ getResources().getString(R.string.ftp_status_no_connection)+ ""String_Node_Str"");
  spannedStatusNotRunning=Html.fromHtml(statusHead + ""String_Node_Str"" + getResources().getString(R.string.ftp_status_not_running)+ ""String_Node_Str"");
  spannedStatusSecure=Html.fromHtml(statusHead + ""String_Node_Str"" + ""String_Node_Str""+ Utils.getColor(getContext(),android.R.color.holo_green_light)+ ""String_Node_Str""+ getResources().getString(R.string.ftp_status_secure_connection)+ ""String_Node_Str"");
  spannedStatusUrl=Html.fromHtml(""String_Node_Str"" + ftpAddress);
}",0.9324026451138868
162415,"@Override public void onReceive(Context context,Intent intent){
  updateSpans();
switch (intent.getAction()) {
case FtpService.ACTION_STARTED:
    if (getSecurePreference()) {
      statusText.setText(spannedStatusSecure);
    }
 else {
      statusText.setText(spannedStatusConnected);
    }
  ftpBtn.setText(getResources().getString(R.string.stop_ftp).toUpperCase());
break;
case FtpService.ACTION_FAILEDTOSTART:
statusText.setText(spannedStatusNotRunning);
Toast.makeText(getContext(),getResources().getString(R.string.unknown_error),Toast.LENGTH_LONG).show();
ftpBtn.setText(getResources().getString(R.string.start_ftp).toUpperCase());
break;
case FtpService.ACTION_STOPPED:
statusText.setText(spannedStatusNotRunning);
ftpBtn.setText(getResources().getString(R.string.start_ftp).toUpperCase());
break;
}
}","@Override public void onReceive(Context context,Intent intent){
  updateSpans();
switch (intent.getAction()) {
case FtpService.ACTION_STARTED:
    if (getSecurePreference()) {
      statusText.setText(spannedStatusSecure);
    }
 else {
      statusText.setText(spannedStatusConnected);
    }
  url.setText(spannedStatusUrl);
ftpBtn.setText(getResources().getString(R.string.stop_ftp).toUpperCase());
break;
case FtpService.ACTION_FAILEDTOSTART:
statusText.setText(spannedStatusNotRunning);
Toast.makeText(getContext(),getResources().getString(R.string.unknown_error),Toast.LENGTH_LONG).show();
ftpBtn.setText(getResources().getString(R.string.start_ftp).toUpperCase());
url.setText(""String_Node_Str"");
break;
case FtpService.ACTION_STOPPED:
statusText.setText(spannedStatusNotRunning);
url.setText(""String_Node_Str"");
ftpBtn.setText(getResources().getString(R.string.start_ftp).toUpperCase());
break;
}
}",0.9446064139941692
162416,"/** 
 * Update UI widgets after change in shared preferences
 */
private void updateStatus(){
  if (!FtpService.isRunning()) {
    if (!FtpService.isConnectedToWifi(getContext()) && !FtpService.isConnectedToLocalNetwork(getContext()) && !FtpService.isEnabledWifiHotspot(getContext())) {
      statusText.setText(spannedStatusNoConnection);
      ftpBtn.setEnabled(false);
    }
 else {
      statusText.setText(spannedStatusNotRunning);
      ftpBtn.setEnabled(true);
    }
    ftpBtn.setText(getResources().getString(R.string.start_ftp).toUpperCase());
  }
 else {
    statusText.setText(spannedStatusConnected);
    ftpBtn.setEnabled(true);
    ftpBtn.setText(getResources().getString(R.string.stop_ftp).toUpperCase());
  }
  final String passwordDecrypted=getPasswordFromPreferences();
  final CharSequence passwordBulleted=new OneCharacterCharSequence('\u25CF',passwordDecrypted.length());
  username.setText(getResources().getString(R.string.username) + ""String_Node_Str"" + getUsernameFromPreferences());
  password.setText(getResources().getString(R.string.password) + ""String_Node_Str"" + passwordBulleted);
  ftpPasswordVisibleButton.setImageDrawable(getResources().getDrawable(R.drawable.ic_eye_grey600_24dp));
  if (passwordDecrypted.equals(""String_Node_Str"")) {
    ftpPasswordVisibleButton.setVisibility(View.GONE);
  }
 else {
    ftpPasswordVisibleButton.setVisibility(View.VISIBLE);
  }
  ftpPasswordVisibleButton.setOnClickListener(v -> {
    if (password.getText().toString().contains(""String_Node_Str"")) {
      password.setText(getResources().getString(R.string.password) + ""String_Node_Str"" + passwordDecrypted);
      ftpPasswordVisibleButton.setImageDrawable(getResources().getDrawable(R.drawable.ic_eye_off_grey600_24dp));
    }
 else {
      password.setText(getResources().getString(R.string.password) + ""String_Node_Str"" + passwordBulleted);
      ftpPasswordVisibleButton.setImageDrawable(getResources().getDrawable(R.drawable.ic_eye_grey600_24dp));
    }
  }
);
  port.setText(getResources().getString(R.string.ftp_port) + ""String_Node_Str"" + getDefaultPortFromPreferences());
  sharedPath.setText(getResources().getString(R.string.ftp_path) + ""String_Node_Str"" + getDefaultPathFromPreferences());
}","/** 
 * Update UI widgets after change in shared preferences
 */
private void updateStatus(){
  if (!FtpService.isRunning()) {
    if (!FtpService.isConnectedToWifi(getContext()) && !FtpService.isConnectedToLocalNetwork(getContext()) && !FtpService.isEnabledWifiHotspot(getContext())) {
      statusText.setText(spannedStatusNoConnection);
      ftpBtn.setEnabled(false);
    }
 else {
      statusText.setText(spannedStatusNotRunning);
      ftpBtn.setEnabled(true);
    }
    url.setText(""String_Node_Str"");
    ftpBtn.setText(getResources().getString(R.string.start_ftp).toUpperCase());
  }
 else {
    url.setText(spannedStatusUrl);
    statusText.setText(spannedStatusConnected);
    ftpBtn.setEnabled(true);
    ftpBtn.setText(getResources().getString(R.string.stop_ftp).toUpperCase());
  }
  final String passwordDecrypted=getPasswordFromPreferences();
  final CharSequence passwordBulleted=new OneCharacterCharSequence('\u25CF',passwordDecrypted.length());
  username.setText(getResources().getString(R.string.username) + ""String_Node_Str"" + getUsernameFromPreferences());
  password.setText(getResources().getString(R.string.password) + ""String_Node_Str"" + passwordBulleted);
  ftpPasswordVisibleButton.setImageDrawable(getResources().getDrawable(R.drawable.ic_eye_grey600_24dp));
  if (passwordDecrypted.equals(""String_Node_Str"")) {
    ftpPasswordVisibleButton.setVisibility(View.GONE);
  }
 else {
    ftpPasswordVisibleButton.setVisibility(View.VISIBLE);
  }
  ftpPasswordVisibleButton.setOnClickListener(v -> {
    if (password.getText().toString().contains(""String_Node_Str"")) {
      password.setText(getResources().getString(R.string.password) + ""String_Node_Str"" + passwordDecrypted);
      ftpPasswordVisibleButton.setImageDrawable(getResources().getDrawable(R.drawable.ic_eye_off_grey600_24dp));
    }
 else {
      password.setText(getResources().getString(R.string.password) + ""String_Node_Str"" + passwordBulleted);
      ftpPasswordVisibleButton.setImageDrawable(getResources().getDrawable(R.drawable.ic_eye_grey600_24dp));
    }
  }
);
  port.setText(getResources().getString(R.string.ftp_port) + ""String_Node_Str"" + getDefaultPortFromPreferences());
  sharedPath.setText(getResources().getString(R.string.ftp_path) + ""String_Node_Str"" + getDefaultPathFromPreferences());
}",0.9843024541233696
162417,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_ftp,container,false);
  statusText=rootView.findViewById(R.id.text_view_ftp_status);
  username=rootView.findViewById(R.id.text_view_ftp_username);
  password=rootView.findViewById(R.id.text_view_ftp_password);
  port=rootView.findViewById(R.id.text_view_ftp_port);
  sharedPath=rootView.findViewById(R.id.text_view_ftp_path);
  ftpBtn=rootView.findViewById(R.id.startStopButton);
  View startDividerView=rootView.findViewById(R.id.divider_ftp_start);
  View statusDividerView=rootView.findViewById(R.id.divider_ftp_status);
  ftpPasswordVisibleButton=rootView.findViewById(R.id.ftp_password_visible);
  updateSpans();
  updateStatus();
switch (mainActivity.getAppTheme().getSimpleTheme()) {
case LIGHT:
    startDividerView.setBackgroundColor(Utils.getColor(getContext(),R.color.divider));
  statusDividerView.setBackgroundColor(Utils.getColor(getContext(),R.color.divider));
break;
case DARK:
case BLACK:
startDividerView.setBackgroundColor(Utils.getColor(getContext(),R.color.divider_dark_card));
statusDividerView.setBackgroundColor(Utils.getColor(getContext(),R.color.divider_dark_card));
break;
}
ftpBtn.setOnClickListener(v -> {
if (!FtpService.isRunning()) {
if (FtpService.isConnectedToWifi(getContext()) || FtpService.isConnectedToLocalNetwork(getContext()) || FtpService.isEnabledWifiHotspot(getContext())) startServer();
 else {
statusText.setText(spannedStatusNoConnection);
}
}
 else {
stopServer();
}
}
);
return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_ftp,container,false);
  statusText=rootView.findViewById(R.id.text_view_ftp_status);
  url=rootView.findViewById(R.id.text_view_ftp_url);
  username=rootView.findViewById(R.id.text_view_ftp_username);
  password=rootView.findViewById(R.id.text_view_ftp_password);
  port=rootView.findViewById(R.id.text_view_ftp_port);
  sharedPath=rootView.findViewById(R.id.text_view_ftp_path);
  ftpBtn=rootView.findViewById(R.id.startStopButton);
  View startDividerView=rootView.findViewById(R.id.divider_ftp_start);
  View statusDividerView=rootView.findViewById(R.id.divider_ftp_status);
  ftpPasswordVisibleButton=rootView.findViewById(R.id.ftp_password_visible);
  updateSpans();
  updateStatus();
switch (mainActivity.getAppTheme().getSimpleTheme()) {
case LIGHT:
    startDividerView.setBackgroundColor(Utils.getColor(getContext(),R.color.divider));
  statusDividerView.setBackgroundColor(Utils.getColor(getContext(),R.color.divider));
break;
case DARK:
case BLACK:
startDividerView.setBackgroundColor(Utils.getColor(getContext(),R.color.divider_dark_card));
statusDividerView.setBackgroundColor(Utils.getColor(getContext(),R.color.divider_dark_card));
break;
}
ftpBtn.setOnClickListener(v -> {
if (!FtpService.isRunning()) {
if (FtpService.isConnectedToWifi(getContext()) || FtpService.isConnectedToLocalNetwork(getContext()) || FtpService.isEnabledWifiHotspot(getContext())) startServer();
 else {
statusText.setText(spannedStatusNoConnection);
}
}
 else {
stopServer();
}
}
);
return rootView;
}",0.9836772405297196
162418,"@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  context=getActivity();
  final boolean edit=getArguments().getBoolean(""String_Node_Str"",false);
  final View v2=getActivity().getLayoutInflater().inflate(R.layout.sftp_dialog,null);
  final EditText connectionET=v2.findViewById(R.id.connectionET);
  final EditText addressET=v2.findViewById(R.id.ipET);
  final EditText portET=v2.findViewById(R.id.portET);
  final EditText usernameET=v2.findViewById(R.id.usernameET);
  final EditText passwordET=v2.findViewById(R.id.passwordET);
  final Button selectPemBTN=v2.findViewById(R.id.selectPemBTN);
  if (!edit) {
    connectionET.setText(R.string.scp_con);
    portET.setText(Integer.toString(SshConnectionPool.SSH_DEFAULT_PORT));
  }
 else {
    connectionET.setText(getArguments().getString(""String_Node_Str""));
    addressET.setText(getArguments().getString(""String_Node_Str""));
    portET.setText(getArguments().getString(""String_Node_Str""));
    usernameET.setText(getArguments().getString(""String_Node_Str""));
    if (getArguments().getBoolean(""String_Node_Str"")) {
      passwordET.setHint(R.string.password_unchanged);
    }
 else {
      selectedParsedKeyPairName=getArguments().getString(""String_Node_Str"");
      selectPemBTN.setText(selectedParsedKeyPairName);
    }
  }
  portET.setOnFocusChangeListener((v,hasFocus) -> {
    if (hasFocus)     portET.selectAll();
  }
);
  int accentColor=((ThemedActivity)getActivity()).getAccent();
  selectPemBTN.setOnClickListener(v -> {
    Intent intent=new Intent().setType(""String_Node_Str"").setAction(Intent.ACTION_GET_CONTENT);
    startActivityForResult(intent,SELECT_PEM_INTENT);
  }
);
  final MaterialDialog.Builder dialogBuilder=new MaterialDialog.Builder(context);
  dialogBuilder.title((R.string.scp_con));
  dialogBuilder.autoDismiss(false);
  dialogBuilder.customView(v2,true);
  dialogBuilder.theme(utilsProvider.getAppTheme().getMaterialDialogTheme());
  dialogBuilder.negativeText(R.string.cancel);
  dialogBuilder.positiveText(edit ? R.string.update : R.string.create);
  dialogBuilder.positiveColor(accentColor);
  dialogBuilder.negativeColor(accentColor);
  dialogBuilder.neutralColor(accentColor);
  dialogBuilder.onPositive((dialog,which) -> {
    final String connectionName=connectionET.getText().toString();
    final String hostname=addressET.getText().toString();
    final int port=Integer.parseInt(portET.getText().toString());
    final String username=usernameET.getText().toString();
    final String password=passwordET.getText() != null ? passwordET.getText().toString() : null;
    String sshHostKey=utilsHandler.getSshHostKey(deriveSftpPathFrom(hostname,port,username,password,selectedParsedKeyPair));
    if (sshHostKey != null) {
      authenticateAndSaveSetup(connectionName,hostname,port,sshHostKey,username,password,selectedParsedKeyPairName,selectedParsedKeyPair,edit);
    }
 else {
      new GetSshHostFingerprintTask(hostname,port,taskResult -> {
        PublicKey hostKey=taskResult.result;
        if (hostKey != null) {
          final String hostKeyFingerprint=SecurityUtils.getFingerprint(hostKey);
          StringBuilder sb=new StringBuilder(hostname);
          if (port != SshConnectionPool.SSH_DEFAULT_PORT && port > 0)           sb.append(':').append(port);
          final String hostAndPort=sb.toString();
          new AlertDialog.Builder(context).setTitle(R.string.ssh_host_key_verification_prompt_title).setMessage(getString(R.string.ssh_host_key_verification_prompt,hostAndPort,hostKey.getAlgorithm(),hostKeyFingerprint)).setCancelable(true).setPositiveButton(R.string.yes,(dialog1,which1) -> {
            dialog1.dismiss();
            if (authenticateAndSaveSetup(connectionName,hostname,port,hostKeyFingerprint,username,password,selectedParsedKeyPairName,selectedParsedKeyPair,edit)) {
              dialog1.dismiss();
              Log.d(TAG,""String_Node_Str"");
              dismiss();
            }
          }
).setNegativeButton(R.string.no,(dialog1,which1) -> dialog1.dismiss()).show();
        }
      }
).execute();
    }
  }
).onNegative((dialog,which) -> dialog.dismiss());
  if (edit) {
    Log.d(TAG,""String_Node_Str"" + edit);
    dialogBuilder.negativeText(R.string.delete).onNegative((dialog,which) -> {
      final String connectionName=connectionET.getText().toString();
      final String hostname=addressET.getText().toString();
      final int port=Integer.parseInt(portET.getText().toString());
      final String username=usernameET.getText().toString();
      final String path=deriveSftpPathFrom(hostname,port,username,getArguments().getString(""String_Node_Str"",null),selectedParsedKeyPair);
      int i=DataUtils.getInstance().containsServer(new String[]{connectionName,path});
      if (i != -1) {
        DataUtils.getInstance().removeServer(i);
        AppConfig.runInBackground(() -> {
          utilsHandler.removeFromDatabase(new OperationData(UtilsHandler.Operation.SFTP,connectionName,path,null,null,null));
        }
);
        ((MainActivity)getActivity()).getDrawer().refreshDrawer();
      }
      dialog.dismiss();
    }
).neutralText(R.string.cancel).onNeutral((dialog,which) -> dialog.dismiss());
  }
  MaterialDialog dialog=dialogBuilder.build();
  final View okBTN=dialog.getActionButton(DialogAction.POSITIVE);
  if (!edit)   okBTN.setEnabled(false);
  TextWatcher validator=new SimpleTextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      int port=portET.getText().toString().length() > 0 ? Integer.parseInt(portET.getText().toString()) : -1;
      okBTN.setEnabled((connectionET.getText().length() > 0 && addressET.getText().length() > 0 && port > 0 && port < 65536 && usernameET.getText().length() > 0 && (passwordET.getText().length() > 0 || selectedParsedKeyPair != null)));
    }
  }
;
  addressET.addTextChangedListener(validator);
  portET.addTextChangedListener(validator);
  usernameET.addTextChangedListener(validator);
  passwordET.addTextChangedListener(validator);
  return dialog;
}","@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  context=getActivity();
  final boolean edit=getArguments().getBoolean(""String_Node_Str"",false);
  final View v2=getActivity().getLayoutInflater().inflate(R.layout.sftp_dialog,null);
  final EditText connectionET=v2.findViewById(R.id.connectionET);
  final EditText addressET=v2.findViewById(R.id.ipET);
  final EditText portET=v2.findViewById(R.id.portET);
  final EditText usernameET=v2.findViewById(R.id.usernameET);
  final EditText passwordET=v2.findViewById(R.id.passwordET);
  final Button selectPemBTN=v2.findViewById(R.id.selectPemBTN);
  if (!edit) {
    connectionET.setText(R.string.scp_con);
    portET.setText(Integer.toString(SshConnectionPool.SSH_DEFAULT_PORT));
  }
 else {
    connectionET.setText(getArguments().getString(""String_Node_Str""));
    addressET.setText(getArguments().getString(""String_Node_Str""));
    portET.setText(getArguments().getString(""String_Node_Str""));
    usernameET.setText(getArguments().getString(""String_Node_Str""));
    if (getArguments().getBoolean(""String_Node_Str"")) {
      passwordET.setHint(R.string.password_unchanged);
    }
 else {
      selectedParsedKeyPairName=getArguments().getString(""String_Node_Str"");
      selectPemBTN.setText(selectedParsedKeyPairName);
    }
  }
  portET.setOnFocusChangeListener((v,hasFocus) -> {
    if (hasFocus)     portET.selectAll();
  }
);
  int accentColor=((ThemedActivity)getActivity()).getAccent();
  selectPemBTN.setOnClickListener(v -> {
    Intent intent=new Intent().setType(""String_Node_Str"").setAction(Intent.ACTION_GET_CONTENT);
    startActivityForResult(intent,SELECT_PEM_INTENT);
  }
);
  final MaterialDialog.Builder dialogBuilder=new MaterialDialog.Builder(context);
  dialogBuilder.title((R.string.scp_con));
  dialogBuilder.autoDismiss(false);
  dialogBuilder.customView(v2,true);
  dialogBuilder.theme(utilsProvider.getAppTheme().getMaterialDialogTheme());
  dialogBuilder.negativeText(R.string.cancel);
  dialogBuilder.positiveText(edit ? R.string.update : R.string.create);
  dialogBuilder.positiveColor(accentColor);
  dialogBuilder.negativeColor(accentColor);
  dialogBuilder.neutralColor(accentColor);
  dialogBuilder.onPositive((dialog,which) -> {
    final String connectionName=connectionET.getText().toString();
    final String hostname=addressET.getText().toString();
    final int port=Integer.parseInt(portET.getText().toString());
    final String username=usernameET.getText().toString();
    final String password=passwordET.getText() != null ? passwordET.getText().toString() : null;
    String sshHostKey=utilsHandler.getSshHostKey(deriveSftpPathFrom(hostname,port,username,password,selectedParsedKeyPair));
    if (sshHostKey != null) {
      authenticateAndSaveSetup(connectionName,hostname,port,sshHostKey,username,password,selectedParsedKeyPairName,selectedParsedKeyPair,edit);
    }
 else {
      new GetSshHostFingerprintTask(hostname,port,taskResult -> {
        PublicKey hostKey=taskResult.result;
        if (hostKey != null) {
          final String hostKeyFingerprint=SecurityUtils.getFingerprint(hostKey);
          StringBuilder sb=new StringBuilder(hostname);
          if (port != SshConnectionPool.SSH_DEFAULT_PORT && port > 0)           sb.append(':').append(port);
          final String hostAndPort=sb.toString();
          new AlertDialog.Builder(context).setTitle(R.string.ssh_host_key_verification_prompt_title).setMessage(getString(R.string.ssh_host_key_verification_prompt,hostAndPort,hostKey.getAlgorithm(),hostKeyFingerprint)).setCancelable(true).setPositiveButton(R.string.yes,(dialog1,which1) -> {
            dialog1.dismiss();
            if (authenticateAndSaveSetup(connectionName,hostname,port,hostKeyFingerprint,username,password,selectedParsedKeyPairName,selectedParsedKeyPair,edit)) {
              dialog1.dismiss();
              Log.d(TAG,""String_Node_Str"");
              dismiss();
            }
          }
).setNegativeButton(R.string.no,(dialog1,which1) -> dialog1.dismiss()).show();
        }
      }
).execute();
    }
  }
).onNegative((dialog,which) -> dialog.dismiss());
  if (edit) {
    Log.d(TAG,""String_Node_Str"" + edit);
    dialogBuilder.negativeText(R.string.delete).onNegative((dialog,which) -> {
      final String connectionName=connectionET.getText().toString();
      final String hostname=addressET.getText().toString();
      final int port=Integer.parseInt(portET.getText().toString());
      final String username=usernameET.getText().toString();
      final String path=deriveSftpPathFrom(hostname,port,username,getArguments().getString(""String_Node_Str"",null),selectedParsedKeyPair);
      int i=DataUtils.getInstance().containsServer(new String[]{connectionName,path});
      if (i != -1) {
        DataUtils.getInstance().removeServer(i);
        AppConfig.runInBackground(() -> {
          utilsHandler.removeFromDatabase(new OperationData(UtilsHandler.Operation.SFTP,path,connectionName,null,null,null));
        }
);
        ((MainActivity)getActivity()).getDrawer().refreshDrawer();
      }
      dialog.dismiss();
    }
).neutralText(R.string.cancel).onNeutral((dialog,which) -> dialog.dismiss());
  }
  MaterialDialog dialog=dialogBuilder.build();
  final View okBTN=dialog.getActionButton(DialogAction.POSITIVE);
  if (!edit)   okBTN.setEnabled(false);
  TextWatcher validator=new SimpleTextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      int port=portET.getText().toString().length() > 0 ? Integer.parseInt(portET.getText().toString()) : -1;
      okBTN.setEnabled((connectionET.getText().length() > 0 && addressET.getText().length() > 0 && port > 0 && port < 65536 && usernameET.getText().length() > 0 && (passwordET.getText().length() > 0 || selectedParsedKeyPair != null)));
    }
  }
;
  addressET.addTextChangedListener(validator);
  portET.addTextChangedListener(validator);
  usernameET.addTextChangedListener(validator);
  passwordET.addTextChangedListener(validator);
  return dialog;
}",0.9991663887962654
162419,"/** 
 * Determines whether cloud provider is installed or not
 */
public static final boolean isCloudProviderAvailable(Context context){
  PackageManager pm=context.getPackageManager();
  try {
    pm.getPackageInfo(CloudContract.APP_PACKAGE_NAME,PackageManager.GET_ACTIVITIES);
    return true;
  }
 catch (  PackageManager.NameNotFoundException e) {
    e.printStackTrace();
    return false;
  }
}","/** 
 * Determines whether cloud provider is installed or not
 */
public static final boolean isCloudProviderAvailable(Context context){
  PackageManager pm=context.getPackageManager();
  try {
    pm.getPackageInfo(CloudContract.APP_PACKAGE_NAME,PackageManager.GET_ACTIVITIES);
    return true;
  }
 catch (  PackageManager.NameNotFoundException e) {
    return false;
  }
}",0.9367741935483872
162420,"public static boolean isEnabledWifiHotspot(Context context){
  boolean enabled=false;
  Log.d(TAG,""String_Node_Str"");
  WifiManager wm=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);
  try {
    Method method=wm.getClass().getDeclaredMethod(""String_Node_Str"");
    enabled=(Boolean)method.invoke(wm);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return enabled;
}","public static boolean isEnabledWifiHotspot(Context context){
  boolean enabled=false;
  Log.d(TAG,""String_Node_Str"");
  WifiManager wm=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);
  try {
    Method method=wm.getClass().getDeclaredMethod(""String_Node_Str"");
    enabled=(method != null) ? (Boolean)method.invoke(wm) : false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    enabled=false;
  }
  return enabled;
}",0.9444444444444444
162421,"public static InetAddress getLocalInetAddress(Context context){
  if (!isConnectedToLocalNetwork(context) && !isEnabledWifiHotspot(context)) {
    Log.e(TAG,""String_Node_Str"");
    return null;
  }
  if (isConnectedToWifi(context)) {
    WifiManager wm=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);
    int ipAddress=wm.getConnectionInfo().getIpAddress();
    if (ipAddress == 0)     return null;
    return intToInet(ipAddress);
  }
  try {
    Enumeration<NetworkInterface> netinterfaces=NetworkInterface.getNetworkInterfaces();
    while (netinterfaces.hasMoreElements()) {
      NetworkInterface netinterface=netinterfaces.nextElement();
      Enumeration<InetAddress> addresses=netinterface.getInetAddresses();
      while (addresses.hasMoreElements()) {
        InetAddress address=addresses.nextElement();
        if (isEnabledWifiHotspot(context) && WIFI_AP_ADDRESS.equals(address.getHostAddress()))         return address;
        if (!address.isLoopbackAddress() && !address.isLinkLocalAddress())         return address;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","public static InetAddress getLocalInetAddress(Context context){
  if (!isConnectedToLocalNetwork(context) && !isEnabledWifiHotspot(context)) {
    Log.e(TAG,""String_Node_Str"");
    return null;
  }
  if (isConnectedToWifi(context)) {
    WifiManager wm=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);
    int ipAddress=wm.getConnectionInfo().getIpAddress();
    if (ipAddress == 0)     return null;
    return intToInet(ipAddress);
  }
  try {
    Enumeration<NetworkInterface> netinterfaces=NetworkInterface.getNetworkInterfaces();
    while (netinterfaces.hasMoreElements()) {
      NetworkInterface netinterface=netinterfaces.nextElement();
      Enumeration<InetAddress> addresses=netinterface.getInetAddresses();
      while (addresses.hasMoreElements()) {
        InetAddress address=addresses.nextElement();
        if (WIFI_AP_ADDRESS.equals(address.getHostAddress()) && isEnabledWifiHotspot(context))         return address;
        if (!address.isLoopbackAddress() && !address.isLinkLocalAddress() && !isEnabledWifiHotspot(context))         return address;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}",0.9565595134665508
162422,"/** 
 * Publish the results of the progress to notification and   {@link DatapointParcelable}and eventually to   {@link ProcessViewerFragment}
 * @param fileName       file name of current file being copied
 * @param sourceFiles    total number of files selected by user for copy
 * @param sourceProgress files been copied out of them
 * @param totalSize      total size of selected items to copy
 * @param writtenSize    bytes successfully copied
 * @param speed          number of bytes being copied per sec
 * @param isComplete     whether operation completed or ongoing (not supported at the moment)
 * @param move           if the files are to be movedIn case of encryption, this is true for decrypting operation
 */
public final void publishResults(String fileName,int sourceFiles,int sourceProgress,long totalSize,long writtenSize,long speed,boolean isComplete,boolean move){
  if (!getProgressHandler().getCancelled()) {
    context=getApplicationContext();
    setPercentProgress(((float)writtenSize / totalSize) * 100);
    if (!isNotificationTitleSet) {
      int titleResource;
switch (getNotificationId()) {
case NotificationConstants.COPY_ID:
        titleResource=move ? R.string.moving : R.string.copying;
      break;
case NotificationConstants.ENCRYPT_ID:
    titleResource=move ? R.string.crypt_decrypting : R.string.crypt_encrypting;
  break;
case NotificationConstants.EXTRACT_ID:
titleResource=R.string.extracting;
break;
case NotificationConstants.ZIP_ID:
titleResource=R.string.compressing;
break;
case NotificationConstants.DECRYPT_ID:
titleResource=R.string.crypt_decrypting;
break;
default :
titleResource=R.string.processing;
break;
}
getNotificationBuilder().setSubText(context.getResources().getString(titleResource));
isNotificationTitleSet=true;
}
if (ServiceWatcherUtil.state != ServiceWatcherUtil.ServiceWatcherInteractionInterface.STATE_HALTED) {
String written=Formatter.formatFileSize(context,writtenSize) + ""String_Node_Str"" + Formatter.formatFileSize(context,totalSize);
getNotificationCustomViewBig().setTextViewText(R.id.notification_service_textView_filename_big,fileName);
getNotificationCustomViewSmall().setTextViewText(R.id.notification_service_textView_filename_small,fileName);
getNotificationCustomViewBig().setTextViewText(R.id.notification_service_textView_written_big,written);
getNotificationCustomViewSmall().setTextViewText(R.id.notification_service_textView_written_small,written);
getNotificationCustomViewBig().setTextViewText(R.id.notification_service_textView_transferRate_big,Formatter.formatFileSize(context,speed) + ""String_Node_Str"");
String remainingTime=Utils.formatTimer(Math.round((totalSize - writtenSize) / speed));
getNotificationCustomViewBig().setTextViewText(R.id.notification_service_textView_timeRemaining_big,remainingTime);
getNotificationBuilder().setProgress(100,Math.round(getPercentProgress()),false);
getNotificationBuilder().setOngoing(true);
getNotificationManager().notify(getNotificationId(),getNotificationBuilder().build());
}
if (writtenSize == totalSize || totalSize == 0) {
if (move && getNotificationId() == NotificationConstants.COPY_ID) {
getNotificationBuilder().setProgress(0,0,true);
getNotificationCustomViewBig().setTextViewText(R.id.notification_service_textView_filename_big,context.getResources().getString(R.string.processing));
getNotificationCustomViewSmall().setTextViewText(R.id.notification_service_textView_filename_small,context.getResources().getString(R.string.processing));
getNotificationCustomViewBig().setTextViewText(R.id.notification_service_textView_timeRemaining_big,getString(R.string.unknown));
getNotificationCustomViewBig().setTextViewText(R.id.notification_service_textView_transferRate_big,getString(R.string.unknown));
getNotificationBuilder().setOngoing(false);
getNotificationBuilder().setAutoCancel(true);
getNotificationManager().notify(getNotificationId(),getNotificationBuilder().build());
}
 else {
publishCompletedResult(getNotificationId());
}
}
DatapointParcelable intent=new DatapointParcelable(fileName,sourceFiles,sourceProgress,totalSize,writtenSize,speed,move,isComplete);
addDatapoint(intent);
}
 else publishCompletedResult(getNotificationId());
}","/** 
 * Publish the results of the progress to notification and   {@link DatapointParcelable}and eventually to   {@link ProcessViewerFragment}
 * @param fileName       file name of current file being copied
 * @param sourceFiles    total number of files selected by user for copy
 * @param sourceProgress files been copied out of them
 * @param totalSize      total size of selected items to copy
 * @param writtenSize    bytes successfully copied
 * @param speed          number of bytes being copied per sec
 * @param isComplete     whether operation completed or ongoing (not supported at the moment)
 * @param move           if the files are to be movedIn case of encryption, this is true for decrypting operation
 */
public final void publishResults(String fileName,int sourceFiles,int sourceProgress,long totalSize,long writtenSize,long speed,boolean isComplete,boolean move){
  if (!getProgressHandler().getCancelled()) {
    context=getApplicationContext();
    setPercentProgress(((float)writtenSize / totalSize) * 100);
    if (!isNotificationTitleSet) {
      int titleResource;
switch (getNotificationId()) {
case NotificationConstants.COPY_ID:
        titleResource=move ? R.string.moving : R.string.copying;
      break;
case NotificationConstants.ENCRYPT_ID:
    titleResource=move ? R.string.crypt_decrypting : R.string.crypt_encrypting;
  break;
case NotificationConstants.EXTRACT_ID:
titleResource=R.string.extracting;
break;
case NotificationConstants.ZIP_ID:
titleResource=R.string.compressing;
break;
case NotificationConstants.DECRYPT_ID:
titleResource=R.string.crypt_decrypting;
break;
default :
titleResource=R.string.processing;
break;
}
getNotificationBuilder().setSubText(context.getResources().getString(titleResource));
isNotificationTitleSet=true;
}
if (ServiceWatcherUtil.state != ServiceWatcherUtil.ServiceWatcherInteractionInterface.STATE_HALTED) {
String written=Formatter.formatFileSize(context,writtenSize) + ""String_Node_Str"" + Formatter.formatFileSize(context,totalSize);
getNotificationCustomViewBig().setTextViewText(R.id.notification_service_textView_filename_big,fileName);
getNotificationCustomViewSmall().setTextViewText(R.id.notification_service_textView_filename_small,fileName);
getNotificationCustomViewBig().setTextViewText(R.id.notification_service_textView_written_big,written);
getNotificationCustomViewSmall().setTextViewText(R.id.notification_service_textView_written_small,written);
getNotificationCustomViewBig().setTextViewText(R.id.notification_service_textView_transferRate_big,Formatter.formatFileSize(context,speed) + ""String_Node_Str"");
String remainingTime;
if (speed != 0) {
remainingTime=Utils.formatTimer(Math.round((totalSize - writtenSize) / speed));
}
 else {
remainingTime=getResources().getString(R.string.unknown);
}
getNotificationCustomViewBig().setTextViewText(R.id.notification_service_textView_timeRemaining_big,remainingTime);
getNotificationBuilder().setProgress(100,Math.round(getPercentProgress()),false);
getNotificationBuilder().setOngoing(true);
getNotificationManager().notify(getNotificationId(),getNotificationBuilder().build());
}
if (writtenSize == totalSize || totalSize == 0) {
if (move && getNotificationId() == NotificationConstants.COPY_ID) {
getNotificationBuilder().setProgress(0,0,true);
getNotificationCustomViewBig().setTextViewText(R.id.notification_service_textView_filename_big,context.getResources().getString(R.string.processing));
getNotificationCustomViewSmall().setTextViewText(R.id.notification_service_textView_filename_small,context.getResources().getString(R.string.processing));
getNotificationCustomViewBig().setTextViewText(R.id.notification_service_textView_timeRemaining_big,getString(R.string.unknown));
getNotificationCustomViewBig().setTextViewText(R.id.notification_service_textView_transferRate_big,getString(R.string.unknown));
getNotificationBuilder().setOngoing(false);
getNotificationBuilder().setAutoCancel(true);
getNotificationManager().notify(getNotificationId(),getNotificationBuilder().build());
}
 else {
publishCompletedResult(getNotificationId());
}
}
DatapointParcelable intent=new DatapointParcelable(fileName,sourceFiles,sourceProgress,totalSize,writtenSize,speed,move,isComplete);
addDatapoint(intent);
}
 else publishCompletedResult(getNotificationId());
}",0.987863791681395
162423,"protected void onActivityResult(int requestCode,int responseCode,Intent intent){
  if (requestCode == Drawer.image_selector_request_code) {
    drawer.onActivityResult(requestCode,responseCode,intent);
  }
 else   if (requestCode == 3) {
    Uri treeUri;
    if (responseCode == Activity.RESULT_OK) {
      treeUri=intent.getData();
      if (treeUri != null)       getPrefs().edit().putString(PreferencesConstants.PREFERENCE_URI,treeUri.toString()).commit();
    }
 else {
      return;
    }
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
      getContentResolver().takePersistableUriPermission(treeUri,Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
    }
switch (operation) {
case DataUtils.DELETE:
      new DeleteTask(null,mainActivity).execute((oparrayList));
    break;
case DataUtils.COPY:
  if (oparrayList != null && oparrayList.size() != 0) {
    oparrayListList=new ArrayList<>();
    oparrayListList.add(oparrayList);
    oparrayList=null;
    oppatheList=new ArrayList<>();
    oppatheList.add(oppathe);
    oppathe=""String_Node_Str"";
  }
for (int i=0; i < oparrayListList.size(); i++) {
  ArrayList<HybridFileParcelable> sourceList=oparrayListList.get(i);
  Intent intent1=new Intent(con,CopyService.class);
  intent1.putExtra(CopyService.TAG_COPY_SOURCES,sourceList);
  intent1.putExtra(CopyService.TAG_COPY_TARGET,oppatheList.get(i));
  ServiceWatcherUtil.runService(this,intent1);
}
break;
case DataUtils.MOVE:
if (oparrayList != null && oparrayList.size() != 0) {
oparrayListList=new ArrayList<>();
oparrayListList.add(oparrayList);
oparrayList=null;
oppatheList=new ArrayList<>();
oppatheList.add(oppathe);
oppathe=""String_Node_Str"";
}
new MoveFiles(oparrayListList,getCurrentMainFragment(),getCurrentMainFragment().getActivity(),OpenMode.FILE).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,oppatheList);
break;
case DataUtils.NEW_FOLDER:
mainActivityHelper.mkDir(RootHelper.generateBaseFile(new File(oppathe),true),getCurrentMainFragment());
break;
case DataUtils.RENAME:
MainFragment ma=getCurrentMainFragment();
mainActivityHelper.rename(ma.openMode,(oppathe),(oppathe1),mainActivity,isRootExplorer());
ma.updateList();
break;
case DataUtils.NEW_FILE:
mainActivityHelper.mkFile(new HybridFile(OpenMode.FILE,oppathe),getCurrentMainFragment());
break;
case DataUtils.EXTRACT:
mainActivityHelper.extractFile(new File(oppathe));
break;
case DataUtils.COMPRESS:
mainActivityHelper.compressFiles(new File(oppathe),oparrayList);
}
operation=-1;
}
 else if (requestCode == REQUEST_CODE_SAF) {
if (responseCode == Activity.RESULT_OK && intent.getData() != null) {
Uri usbOtgRoot=Uri.parse(intent.getData().toString());
SingletonUsbOtg.getInstance().setUsbOtgRoot(usbOtgRoot);
drawer.closeIfNotLocked();
if (drawer.isLocked()) drawer.onDrawerClosed();
}
 else {
Toast.makeText(this,R.string.error,Toast.LENGTH_SHORT).show();
drawer.resetPendingPath();
}
}
}","protected void onActivityResult(int requestCode,int responseCode,Intent intent){
  if (requestCode == Drawer.image_selector_request_code) {
    drawer.onActivityResult(requestCode,responseCode,intent);
  }
 else   if (requestCode == 3) {
    Uri treeUri;
    if (responseCode == Activity.RESULT_OK) {
      treeUri=intent.getData();
      if (treeUri != null)       getPrefs().edit().putString(PreferencesConstants.PREFERENCE_URI,treeUri.toString()).commit();
    }
 else {
      return;
    }
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
      getContentResolver().takePersistableUriPermission(treeUri,Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
    }
switch (operation) {
case DataUtils.DELETE:
      new DeleteTask(null,mainActivity).execute((oparrayList));
    break;
case DataUtils.COPY:
  if (oparrayList != null && oparrayList.size() != 0) {
    oparrayListList=new ArrayList<>();
    oparrayListList.add(oparrayList);
    oparrayList=null;
    oppatheList=new ArrayList<>();
    oppatheList.add(oppathe);
    oppathe=""String_Node_Str"";
  }
for (int i=0; i < oparrayListList.size(); i++) {
  ArrayList<HybridFileParcelable> sourceList=oparrayListList.get(i);
  Intent intent1=new Intent(con,CopyService.class);
  intent1.putExtra(CopyService.TAG_COPY_SOURCES,sourceList);
  intent1.putExtra(CopyService.TAG_COPY_TARGET,oppatheList.get(i));
  ServiceWatcherUtil.runService(this,intent1);
}
break;
case DataUtils.MOVE:
if (oparrayList != null && oparrayList.size() != 0) {
oparrayListList=new ArrayList<>();
oparrayListList.add(oparrayList);
oparrayList=null;
oppatheList=new ArrayList<>();
oppatheList.add(oppathe);
oppathe=""String_Node_Str"";
}
new MoveFiles(oparrayListList,getCurrentMainFragment(),getCurrentMainFragment().getActivity(),OpenMode.FILE).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,oppatheList);
break;
case DataUtils.NEW_FOLDER:
mainActivityHelper.mkDir(RootHelper.generateBaseFile(new File(oppathe),true),getCurrentMainFragment());
break;
case DataUtils.RENAME:
MainFragment ma=getCurrentMainFragment();
mainActivityHelper.rename(ma.openMode,(oppathe),(oppathe1),mainActivity,isRootExplorer());
ma.updateList();
break;
case DataUtils.NEW_FILE:
mainActivityHelper.mkFile(new HybridFile(OpenMode.FILE,oppathe),getCurrentMainFragment());
break;
case DataUtils.EXTRACT:
mainActivityHelper.extractFile(new File(oppathe));
break;
case DataUtils.COMPRESS:
mainActivityHelper.compressFiles(new File(oppathe),oparrayList);
break;
case DataUtils.SAVE_FILE:
FileUtil.writeUriToStorage(this,urisToBeSaved,getContentResolver(),getCurrentMainFragment().getCurrentPath());
urisToBeSaved=null;
finish();
break;
}
operation=-1;
}
 else if (requestCode == REQUEST_CODE_SAF) {
if (responseCode == Activity.RESULT_OK && intent.getData() != null) {
Uri usbOtgRoot=Uri.parse(intent.getData().toString());
SingletonUsbOtg.getInstance().setUsbOtgRoot(usbOtgRoot);
drawer.closeIfNotLocked();
if (drawer.isLocked()) drawer.onDrawerClosed();
}
 else {
Toast.makeText(this,R.string.error,Toast.LENGTH_SHORT).show();
drawer.resetPendingPath();
}
}
}",0.969968475194956
162424,"/** 
 * Initializes the floating action button to act as to save data from an external intent
 */
private void initFabToSave(final ArrayList<Uri> uris){
  floatingActionButton.removeButton(findViewById(R.id.menu_new_folder));
  floatingActionButton.removeButton(findViewById(R.id.menu_new_file));
  floatingActionButton.removeButton(findViewById(R.id.menu_new_cloud));
  floatingActionButton.setMenuButtonIcon(R.drawable.ic_file_download_white_24dp);
  floatingActionButton.getMenuButton().setOnClickListener(v -> {
    FileUtil.writeUriToStorage(MainActivity.this,uris,getContentResolver(),getCurrentMainFragment().getCurrentPath());
    Toast.makeText(MainActivity.this,getResources().getString(R.string.saving),Toast.LENGTH_LONG).show();
    finish();
  }
);
  floatingActionButton.setVisibility(View.VISIBLE);
  floatingActionButton.getMenuButton().show();
}","/** 
 * Initializes the floating action button to act as to save data from an external intent
 */
private void initFabToSave(final ArrayList<Uri> uris){
  floatingActionButton.removeButton(findViewById(R.id.menu_new_folder));
  floatingActionButton.removeButton(findViewById(R.id.menu_new_file));
  floatingActionButton.removeButton(findViewById(R.id.menu_new_cloud));
  floatingActionButton.setMenuButtonIcon(R.drawable.ic_file_download_white_24dp);
  floatingActionButton.getMenuButton().setOnClickListener(v -> {
    if (uris != null && uris.size() > 0) {
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        File folder=new File(getCurrentMainFragment().getCurrentPath());
        int result=mainActivityHelper.checkFolder(folder,MainActivity.this);
        if (result == MainActivityHelper.WRITABLE_OR_ON_SDCARD) {
          FileUtil.writeUriToStorage(MainActivity.this,uris,getContentResolver(),getCurrentMainFragment().getCurrentPath());
          finish();
        }
 else {
          operation=DataUtils.SAVE_FILE;
          urisToBeSaved=uris;
          mainActivityHelper.checkFolder(folder,MainActivity.this);
        }
      }
 else {
        FileUtil.writeUriToStorage(MainActivity.this,uris,getContentResolver(),getCurrentMainFragment().getCurrentPath());
        Toast.makeText(MainActivity.this,getResources().getString(R.string.saving),Toast.LENGTH_LONG).show();
        finish();
      }
    }
  }
);
  floatingActionButton.setVisibility(View.VISIBLE);
  floatingActionButton.getMenuButton().show();
}",0.7171381031613977
162425,"@Override public <E>E doInBackground(){
  for (  Uri uri : uris) {
    BufferedInputStream bufferedInputStream=null;
    try {
      bufferedInputStream=new BufferedInputStream(contentResolver.openInputStream(uri));
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
    BufferedOutputStream bufferedOutputStream=null;
    try {
      DocumentFile documentFile=DocumentFile.fromSingleUri(mainActivity,uri);
      String finalFilePath=currentPath + ""String_Node_Str"" + documentFile.getName();
      DataUtils dataUtils=DataUtils.getInstance();
      HybridFile hFile=new HybridFile(OpenMode.UNKNOWN,currentPath);
      hFile.generateMode(mainActivity);
switch (hFile.getMode()) {
case FILE:
case ROOT:
        File targetFile=new File(finalFilePath);
      if (!FileUtil.isWritable(targetFile)) {
        AppConfig.toast(mainActivity,mainActivity.getString(R.string.not_allowed));
        return null;
      }
    if (DocumentFile.fromFile(targetFile).exists()) {
      AppConfig.toast(mainActivity,mainActivity.getString(R.string.cannot_overwrite));
      return null;
    }
  bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(targetFile));
break;
case SMB:
SmbFile targetSmbFile=new SmbFile(finalFilePath);
if (targetSmbFile.exists()) {
AppConfig.toast(mainActivity,mainActivity.getString(R.string.cannot_overwrite));
return null;
}
 else {
OutputStream outputStream=targetSmbFile.getOutputStream();
bufferedOutputStream=new BufferedOutputStream(outputStream);
}
break;
case SFTP:
AppConfig.toast(mainActivity,mainActivity.getString(R.string.not_allowed));
return null;
case DROPBOX:
CloudStorage cloudStorageDropbox=dataUtils.getAccount(OpenMode.DROPBOX);
cloudStorageDropbox.upload(CloudUtil.stripPath(OpenMode.DROPBOX,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case BOX:
CloudStorage cloudStorageBox=dataUtils.getAccount(OpenMode.BOX);
cloudStorageBox.upload(CloudUtil.stripPath(OpenMode.BOX,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case ONEDRIVE:
CloudStorage cloudStorageOneDrive=dataUtils.getAccount(OpenMode.ONEDRIVE);
cloudStorageOneDrive.upload(CloudUtil.stripPath(OpenMode.ONEDRIVE,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case GDRIVE:
CloudStorage cloudStorageGDrive=dataUtils.getAccount(OpenMode.GDRIVE);
cloudStorageGDrive.upload(CloudUtil.stripPath(OpenMode.GDRIVE,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case OTG:
DocumentFile documentTargetFile=OTGUtil.getDocumentFile(finalFilePath,mainActivity,true);
if (documentTargetFile.exists()) {
AppConfig.toast(mainActivity,mainActivity.getString(R.string.cannot_overwrite));
return null;
}
bufferedOutputStream=new BufferedOutputStream(contentResolver.openOutputStream(documentTargetFile.getUri()),GenericCopyUtil.DEFAULT_BUFFER_SIZE);
break;
default :
return null;
}
int count=0;
byte[] buffer=new byte[GenericCopyUtil.DEFAULT_BUFFER_SIZE];
while (count != -1) {
count=bufferedInputStream.read(buffer);
if (count != -1) {
bufferedOutputStream.write(buffer,0,count);
}
}
bufferedOutputStream.flush();
}
 catch (FileNotFoundException e) {
e.printStackTrace();
}
catch (MalformedURLException e) {
e.printStackTrace();
}
catch (IOException e) {
e.printStackTrace();
}
 finally {
try {
if (bufferedInputStream != null) {
bufferedInputStream.close();
}
if (bufferedOutputStream != null) {
bufferedOutputStream.close();
}
}
 catch (IOException e) {
e.printStackTrace();
}
}
}
return null;
}","@Override public List<String> doInBackground(){
  List<String> retval=new ArrayList<>();
  for (  Uri uri : uris) {
    BufferedInputStream bufferedInputStream=null;
    try {
      bufferedInputStream=new BufferedInputStream(contentResolver.openInputStream(uri));
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
    BufferedOutputStream bufferedOutputStream=null;
    try {
      DocumentFile documentFile=DocumentFile.fromSingleUri(mainActivity,uri);
      String filename=documentFile.getName();
      if (filename == null) {
        filename=uri.getLastPathSegment();
        if (filename.contains(""String_Node_Str""))         filename=filename.substring(filename.lastIndexOf('/') + 1);
      }
      String finalFilePath=currentPath + ""String_Node_Str"" + filename;
      DataUtils dataUtils=DataUtils.getInstance();
      HybridFile hFile=new HybridFile(OpenMode.UNKNOWN,currentPath);
      hFile.generateMode(mainActivity);
switch (hFile.getMode()) {
case FILE:
case ROOT:
        File targetFile=new File(finalFilePath);
      if (!FileUtil.isWritableNormalOrSaf(targetFile.getParentFile(),mainActivity.getApplicationContext())) {
        AppConfig.toast(mainActivity,mainActivity.getResources().getString(R.string.not_allowed));
        return null;
      }
    DocumentFile targetDocumentFile=getDocumentFile(targetFile,false,mainActivity.getApplicationContext());
  if (targetDocumentFile == null)   targetDocumentFile=DocumentFile.fromFile(targetFile);
if (targetDocumentFile.exists() && targetDocumentFile.length() > 0) {
  AppConfig.toast(mainActivity,mainActivity.getString(R.string.cannot_overwrite));
  return null;
}
bufferedOutputStream=new BufferedOutputStream(contentResolver.openOutputStream(targetDocumentFile.getUri()));
retval.add(targetFile.getPath());
break;
case SMB:
SmbFile targetSmbFile=new SmbFile(finalFilePath);
if (targetSmbFile.exists()) {
AppConfig.toast(mainActivity,mainActivity.getString(R.string.cannot_overwrite));
return null;
}
 else {
OutputStream outputStream=targetSmbFile.getOutputStream();
bufferedOutputStream=new BufferedOutputStream(outputStream);
retval.add(mainActivity.mainActivityHelper.parseSmbPath(targetSmbFile.getPath()));
}
break;
case SFTP:
AppConfig.toast(mainActivity,mainActivity.getString(R.string.not_allowed));
return null;
case DROPBOX:
CloudStorage cloudStorageDropbox=dataUtils.getAccount(OpenMode.DROPBOX);
String path=CloudUtil.stripPath(OpenMode.DROPBOX,finalFilePath);
cloudStorageDropbox.upload(path,bufferedInputStream,documentFile.length(),true);
retval.add(path);
break;
case BOX:
CloudStorage cloudStorageBox=dataUtils.getAccount(OpenMode.BOX);
path=CloudUtil.stripPath(OpenMode.BOX,finalFilePath);
cloudStorageBox.upload(path,bufferedInputStream,documentFile.length(),true);
retval.add(path);
break;
case ONEDRIVE:
CloudStorage cloudStorageOneDrive=dataUtils.getAccount(OpenMode.ONEDRIVE);
path=CloudUtil.stripPath(OpenMode.ONEDRIVE,finalFilePath);
cloudStorageOneDrive.upload(path,bufferedInputStream,documentFile.length(),true);
retval.add(path);
break;
case GDRIVE:
CloudStorage cloudStorageGDrive=dataUtils.getAccount(OpenMode.GDRIVE);
path=CloudUtil.stripPath(OpenMode.GDRIVE,finalFilePath);
cloudStorageGDrive.upload(path,bufferedInputStream,documentFile.length(),true);
retval.add(path);
break;
case OTG:
DocumentFile documentTargetFile=OTGUtil.getDocumentFile(finalFilePath,mainActivity,true);
if (documentTargetFile.exists()) {
AppConfig.toast(mainActivity,mainActivity.getString(R.string.cannot_overwrite));
return null;
}
bufferedOutputStream=new BufferedOutputStream(contentResolver.openOutputStream(documentTargetFile.getUri()),GenericCopyUtil.DEFAULT_BUFFER_SIZE);
retval.add(documentTargetFile.getUri().getPath());
break;
default :
return null;
}
int count=0;
byte[] buffer=new byte[GenericCopyUtil.DEFAULT_BUFFER_SIZE];
while (count != -1) {
count=bufferedInputStream.read(buffer);
if (count != -1) {
bufferedOutputStream.write(buffer,0,count);
}
}
bufferedOutputStream.flush();
}
 catch (FileNotFoundException e) {
e.printStackTrace();
}
catch (MalformedURLException e) {
e.printStackTrace();
}
catch (IOException e) {
e.printStackTrace();
}
 finally {
try {
if (bufferedInputStream != null) {
bufferedInputStream.close();
}
if (bufferedOutputStream != null) {
bufferedOutputStream.close();
}
}
 catch (IOException e) {
e.printStackTrace();
}
}
}
return (retval.size() > 0) ? retval : null;
}",0.8203381276810497
162426,"@Override public Void onPostExecute(Object result){
  return null;
}","@Override public Void onPostExecute(Object result){
  if (result != null) {
    List<String> paths=(List<String>)result;
    if (paths.size() == 1) {
      Toast.makeText(mainActivity,mainActivity.getString(R.string.saved_single_file,paths.get(0)),Toast.LENGTH_LONG).show();
    }
 else {
      Toast.makeText(mainActivity,mainActivity.getString(R.string.saved_multi_files,paths.size()),Toast.LENGTH_LONG).show();
    }
  }
  return null;
}",0.2244094488188976
162427,"/** 
 * Get a DocumentFile corresponding to the given file (for writing on ExtSdCard on Android 5). If the file is not existing, it is created.
 * @param file        The file.
 * @param isDirectory flag indicating if the file should be a directory.
 * @return The DocumentFile
 */
public static DocumentFile getDocumentFile(final File file,final boolean isDirectory,Context context){
  String baseFolder=getExtSdCardFolder(file,context);
  boolean originalDirectory=false;
  if (baseFolder == null) {
    return null;
  }
  String relativePath=null;
  try {
    String fullPath=file.getCanonicalPath();
    if (!baseFolder.equals(fullPath))     relativePath=fullPath.substring(baseFolder.length() + 1);
 else     originalDirectory=true;
  }
 catch (  IOException e) {
    return null;
  }
catch (  Exception f) {
    originalDirectory=true;
  }
  String as=PreferenceManager.getDefaultSharedPreferences(context).getString(PreferencesConstants.PREFERENCE_URI,null);
  Uri treeUri=null;
  if (as != null)   treeUri=Uri.parse(as);
  if (treeUri == null) {
    return null;
  }
  DocumentFile document=DocumentFile.fromTreeUri(context,treeUri);
  if (originalDirectory)   return document;
  String[] parts=relativePath.split(""String_Node_Str"");
  for (int i=0; i < parts.length; i++) {
    DocumentFile nextDocument=document.findFile(parts[i]);
    if (nextDocument == null) {
      if ((i < parts.length - 1) || isDirectory) {
        nextDocument=document.createDirectory(parts[i]);
      }
 else {
        nextDocument=document.createFile(""String_Node_Str"",parts[i]);
      }
    }
    document=nextDocument;
  }
  return document;
}","/** 
 * Get a DocumentFile corresponding to the given file (for writing on ExtSdCard on Android 5). If the file is not existing, it is created.
 * @param file        The file.
 * @param isDirectory flag indicating if the file should be a directory.
 * @return The DocumentFile
 */
public static DocumentFile getDocumentFile(final File file,final boolean isDirectory,Context context){
  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT)   return DocumentFile.fromFile(file);
  String baseFolder=getExtSdCardFolder(file,context);
  boolean originalDirectory=false;
  if (baseFolder == null) {
    return null;
  }
  String relativePath=null;
  try {
    String fullPath=file.getCanonicalPath();
    if (!baseFolder.equals(fullPath))     relativePath=fullPath.substring(baseFolder.length() + 1);
 else     originalDirectory=true;
  }
 catch (  IOException e) {
    return null;
  }
catch (  Exception f) {
    originalDirectory=true;
  }
  String as=PreferenceManager.getDefaultSharedPreferences(context).getString(PreferencesConstants.PREFERENCE_URI,null);
  Uri treeUri=null;
  if (as != null)   treeUri=Uri.parse(as);
  if (treeUri == null) {
    return null;
  }
  DocumentFile document=DocumentFile.fromTreeUri(context,treeUri);
  if (originalDirectory)   return document;
  String[] parts=relativePath.split(""String_Node_Str"");
  for (int i=0; i < parts.length; i++) {
    DocumentFile nextDocument=document.findFile(parts[i]);
    if (nextDocument == null) {
      if ((i < parts.length - 1) || isDirectory) {
        nextDocument=document.createDirectory(parts[i]);
      }
 else {
        nextDocument=document.createFile(""String_Node_Str"",parts[i]);
      }
    }
    document=nextDocument;
  }
  return document;
}",0.9711395418030347
162428,"/** 
 * Writes uri stream from external application to the specified path
 */
public static final void writeUriToStorage(@NonNull final MainActivity mainActivity,@NonNull final ArrayList<Uri> uris,@NonNull final ContentResolver contentResolver,@NonNull final String currentPath){
  AppConfig.runInBackground(new AppConfig.CustomAsyncCallbacks(){
    @Override public <E>E doInBackground(){
      for (      Uri uri : uris) {
        BufferedInputStream bufferedInputStream=null;
        try {
          bufferedInputStream=new BufferedInputStream(contentResolver.openInputStream(uri));
        }
 catch (        FileNotFoundException e) {
          e.printStackTrace();
        }
        BufferedOutputStream bufferedOutputStream=null;
        try {
          DocumentFile documentFile=DocumentFile.fromSingleUri(mainActivity,uri);
          String finalFilePath=currentPath + ""String_Node_Str"" + documentFile.getName();
          DataUtils dataUtils=DataUtils.getInstance();
          HybridFile hFile=new HybridFile(OpenMode.UNKNOWN,currentPath);
          hFile.generateMode(mainActivity);
switch (hFile.getMode()) {
case FILE:
case ROOT:
            File targetFile=new File(finalFilePath);
          if (!FileUtil.isWritable(targetFile)) {
            AppConfig.toast(mainActivity,mainActivity.getString(R.string.not_allowed));
            return null;
          }
        if (DocumentFile.fromFile(targetFile).exists()) {
          AppConfig.toast(mainActivity,mainActivity.getString(R.string.cannot_overwrite));
          return null;
        }
      bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(targetFile));
    break;
case SMB:
  SmbFile targetSmbFile=new SmbFile(finalFilePath);
if (targetSmbFile.exists()) {
  AppConfig.toast(mainActivity,mainActivity.getString(R.string.cannot_overwrite));
  return null;
}
 else {
  OutputStream outputStream=targetSmbFile.getOutputStream();
  bufferedOutputStream=new BufferedOutputStream(outputStream);
}
break;
case SFTP:
AppConfig.toast(mainActivity,mainActivity.getString(R.string.not_allowed));
return null;
case DROPBOX:
CloudStorage cloudStorageDropbox=dataUtils.getAccount(OpenMode.DROPBOX);
cloudStorageDropbox.upload(CloudUtil.stripPath(OpenMode.DROPBOX,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case BOX:
CloudStorage cloudStorageBox=dataUtils.getAccount(OpenMode.BOX);
cloudStorageBox.upload(CloudUtil.stripPath(OpenMode.BOX,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case ONEDRIVE:
CloudStorage cloudStorageOneDrive=dataUtils.getAccount(OpenMode.ONEDRIVE);
cloudStorageOneDrive.upload(CloudUtil.stripPath(OpenMode.ONEDRIVE,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case GDRIVE:
CloudStorage cloudStorageGDrive=dataUtils.getAccount(OpenMode.GDRIVE);
cloudStorageGDrive.upload(CloudUtil.stripPath(OpenMode.GDRIVE,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case OTG:
DocumentFile documentTargetFile=OTGUtil.getDocumentFile(finalFilePath,mainActivity,true);
if (documentTargetFile.exists()) {
AppConfig.toast(mainActivity,mainActivity.getString(R.string.cannot_overwrite));
return null;
}
bufferedOutputStream=new BufferedOutputStream(contentResolver.openOutputStream(documentTargetFile.getUri()),GenericCopyUtil.DEFAULT_BUFFER_SIZE);
break;
default :
return null;
}
int count=0;
byte[] buffer=new byte[GenericCopyUtil.DEFAULT_BUFFER_SIZE];
while (count != -1) {
count=bufferedInputStream.read(buffer);
if (count != -1) {
bufferedOutputStream.write(buffer,0,count);
}
}
bufferedOutputStream.flush();
}
 catch (FileNotFoundException e) {
e.printStackTrace();
}
catch (MalformedURLException e) {
e.printStackTrace();
}
catch (IOException e) {
e.printStackTrace();
}
 finally {
try {
if (bufferedInputStream != null) {
bufferedInputStream.close();
}
if (bufferedOutputStream != null) {
bufferedOutputStream.close();
}
}
 catch (IOException e) {
e.printStackTrace();
}
}
}
return null;
}
@Override public Void onPostExecute(Object result){
return null;
}
@Override public Void onPreExecute(){
return null;
}
@Override public Void publishResult(Object... result){
return null;
}
@Override public <T>T[] params(){
return null;
}
}
);
}","/** 
 * Writes uri stream from external application to the specified path
 */
public static final void writeUriToStorage(@NonNull final MainActivity mainActivity,@NonNull final ArrayList<Uri> uris,@NonNull final ContentResolver contentResolver,@NonNull final String currentPath){
  AppConfig.runInBackground(new AppConfig.CustomAsyncCallbacks(){
    @Override public List<String> doInBackground(){
      List<String> retval=new ArrayList<>();
      for (      Uri uri : uris) {
        BufferedInputStream bufferedInputStream=null;
        try {
          bufferedInputStream=new BufferedInputStream(contentResolver.openInputStream(uri));
        }
 catch (        FileNotFoundException e) {
          e.printStackTrace();
        }
        BufferedOutputStream bufferedOutputStream=null;
        try {
          DocumentFile documentFile=DocumentFile.fromSingleUri(mainActivity,uri);
          String filename=documentFile.getName();
          if (filename == null) {
            filename=uri.getLastPathSegment();
            if (filename.contains(""String_Node_Str""))             filename=filename.substring(filename.lastIndexOf('/') + 1);
          }
          String finalFilePath=currentPath + ""String_Node_Str"" + filename;
          DataUtils dataUtils=DataUtils.getInstance();
          HybridFile hFile=new HybridFile(OpenMode.UNKNOWN,currentPath);
          hFile.generateMode(mainActivity);
switch (hFile.getMode()) {
case FILE:
case ROOT:
            File targetFile=new File(finalFilePath);
          if (!FileUtil.isWritableNormalOrSaf(targetFile.getParentFile(),mainActivity.getApplicationContext())) {
            AppConfig.toast(mainActivity,mainActivity.getResources().getString(R.string.not_allowed));
            return null;
          }
        DocumentFile targetDocumentFile=getDocumentFile(targetFile,false,mainActivity.getApplicationContext());
      if (targetDocumentFile == null)       targetDocumentFile=DocumentFile.fromFile(targetFile);
    if (targetDocumentFile.exists() && targetDocumentFile.length() > 0) {
      AppConfig.toast(mainActivity,mainActivity.getString(R.string.cannot_overwrite));
      return null;
    }
  bufferedOutputStream=new BufferedOutputStream(contentResolver.openOutputStream(targetDocumentFile.getUri()));
retval.add(targetFile.getPath());
break;
case SMB:
SmbFile targetSmbFile=new SmbFile(finalFilePath);
if (targetSmbFile.exists()) {
AppConfig.toast(mainActivity,mainActivity.getString(R.string.cannot_overwrite));
return null;
}
 else {
OutputStream outputStream=targetSmbFile.getOutputStream();
bufferedOutputStream=new BufferedOutputStream(outputStream);
retval.add(mainActivity.mainActivityHelper.parseSmbPath(targetSmbFile.getPath()));
}
break;
case SFTP:
AppConfig.toast(mainActivity,mainActivity.getString(R.string.not_allowed));
return null;
case DROPBOX:
CloudStorage cloudStorageDropbox=dataUtils.getAccount(OpenMode.DROPBOX);
String path=CloudUtil.stripPath(OpenMode.DROPBOX,finalFilePath);
cloudStorageDropbox.upload(path,bufferedInputStream,documentFile.length(),true);
retval.add(path);
break;
case BOX:
CloudStorage cloudStorageBox=dataUtils.getAccount(OpenMode.BOX);
path=CloudUtil.stripPath(OpenMode.BOX,finalFilePath);
cloudStorageBox.upload(path,bufferedInputStream,documentFile.length(),true);
retval.add(path);
break;
case ONEDRIVE:
CloudStorage cloudStorageOneDrive=dataUtils.getAccount(OpenMode.ONEDRIVE);
path=CloudUtil.stripPath(OpenMode.ONEDRIVE,finalFilePath);
cloudStorageOneDrive.upload(path,bufferedInputStream,documentFile.length(),true);
retval.add(path);
break;
case GDRIVE:
CloudStorage cloudStorageGDrive=dataUtils.getAccount(OpenMode.GDRIVE);
path=CloudUtil.stripPath(OpenMode.GDRIVE,finalFilePath);
cloudStorageGDrive.upload(path,bufferedInputStream,documentFile.length(),true);
retval.add(path);
break;
case OTG:
DocumentFile documentTargetFile=OTGUtil.getDocumentFile(finalFilePath,mainActivity,true);
if (documentTargetFile.exists()) {
AppConfig.toast(mainActivity,mainActivity.getString(R.string.cannot_overwrite));
return null;
}
bufferedOutputStream=new BufferedOutputStream(contentResolver.openOutputStream(documentTargetFile.getUri()),GenericCopyUtil.DEFAULT_BUFFER_SIZE);
retval.add(documentTargetFile.getUri().getPath());
break;
default :
return null;
}
int count=0;
byte[] buffer=new byte[GenericCopyUtil.DEFAULT_BUFFER_SIZE];
while (count != -1) {
count=bufferedInputStream.read(buffer);
if (count != -1) {
bufferedOutputStream.write(buffer,0,count);
}
}
bufferedOutputStream.flush();
}
 catch (FileNotFoundException e) {
e.printStackTrace();
}
catch (MalformedURLException e) {
e.printStackTrace();
}
catch (IOException e) {
e.printStackTrace();
}
 finally {
try {
if (bufferedInputStream != null) {
bufferedInputStream.close();
}
if (bufferedOutputStream != null) {
bufferedOutputStream.close();
}
}
 catch (IOException e) {
e.printStackTrace();
}
}
}
return (retval.size() > 0) ? retval : null;
}
@Override public Void onPostExecute(Object result){
if (result != null) {
List<String> paths=(List<String>)result;
if (paths.size() == 1) {
Toast.makeText(mainActivity,mainActivity.getString(R.string.saved_single_file,paths.get(0)),Toast.LENGTH_LONG).show();
}
 else {
Toast.makeText(mainActivity,mainActivity.getString(R.string.saved_multi_files,paths.size()),Toast.LENGTH_LONG).show();
}
}
return null;
}
@Override public Void onPreExecute(){
return null;
}
@Override public Void publishResult(Object... result){
return null;
}
@Override public <T>T[] params(){
return null;
}
}
);
}",0.811895451739041
162429,"public void guideDialogForLEXA(String path){
  final MaterialDialog.Builder x=new MaterialDialog.Builder(mainActivity);
  x.theme(mainActivity.getAppTheme().getMaterialDialogTheme());
  x.title(R.string.needsaccess);
  LayoutInflater layoutInflater=(LayoutInflater)mainActivity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View view=layoutInflater.inflate(R.layout.lexadrawer,null);
  x.customView(view,true);
  TextView textView=view.findViewById(R.id.description);
  textView.setText(mainActivity.getString(R.string.needsaccesssummary) + path + mainActivity.getString(R.string.needsaccesssummary1));
  ((ImageView)view.findViewById(R.id.icon)).setImageResource(R.drawable.sd_operate_step);
  x.positiveText(R.string.open);
  x.negativeText(R.string.cancel);
  x.positiveColor(accentColor);
  x.negativeColor(accentColor);
  x.callback(new MaterialDialog.ButtonCallback(){
    @Override public void onPositive(    MaterialDialog materialDialog){
      triggerStorageAccessFramework();
    }
    @Override public void onNegative(    MaterialDialog materialDialog){
      Toast.makeText(mainActivity,R.string.error,Toast.LENGTH_SHORT).show();
    }
  }
);
  final MaterialDialog y=x.build();
  y.show();
}","public void guideDialogForLEXA(String path){
  final MaterialDialog.Builder x=new MaterialDialog.Builder(mainActivity);
  x.theme(mainActivity.getAppTheme().getMaterialDialogTheme());
  x.title(R.string.needsaccess);
  LayoutInflater layoutInflater=(LayoutInflater)mainActivity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View view=layoutInflater.inflate(R.layout.lexadrawer,null);
  x.customView(view,true);
  TextView textView=view.findViewById(R.id.description);
  textView.setText(mainActivity.getString(R.string.needsaccesssummary) + path + mainActivity.getString(R.string.needsaccesssummary1));
  ((ImageView)view.findViewById(R.id.icon)).setImageResource(R.drawable.sd_operate_step);
  x.positiveText(R.string.open).negativeText(R.string.cancel).positiveColor(accentColor).negativeColor(accentColor).onPositive((dialog,which) -> triggerStorageAccessFramework()).onNegative((dialog,which) -> Toast.makeText(mainActivity,R.string.error,Toast.LENGTH_SHORT).show());
  final MaterialDialog y=x.build();
  y.show();
}",0.7758928571428572
162430,"@Override protected Pair<OpenMode,ArrayList<LayoutElementParcelable>> doInBackground(Void... p){
  HybridFile hFile=null;
  if (openmode == OpenMode.UNKNOWN) {
    hFile=new HybridFile(OpenMode.UNKNOWN,path);
    hFile.generateMode(ma.getActivity());
    openmode=hFile.getMode();
    if (hFile.isSmb()) {
      ma.smbPath=path;
    }
 else     if (android.util.Patterns.EMAIL_ADDRESS.matcher(path).matches()) {
      openmode=OpenMode.ROOT;
    }
  }
  if (isCancelled())   return null;
  ma.folder_count=0;
  ma.file_count=0;
  final ArrayList<LayoutElementParcelable> list;
switch (openmode) {
case SMB:
    if (hFile == null) {
      hFile=new HybridFile(OpenMode.SMB,path);
    }
  try {
    SmbFile[] smbFile=hFile.getSmbFile(5000).listFiles();
    list=ma.addToSmb(smbFile,path);
    openmode=OpenMode.SMB;
  }
 catch (  SmbAuthException e) {
    if (!e.getMessage().toLowerCase().contains(""String_Node_Str"")) {
      ma.reauthenticateSmb();
    }
    return null;
  }
catch (  SmbException|NullPointerException e) {
    e.printStackTrace();
    return null;
  }
break;
case SFTP:
HybridFile sftpHFile=new HybridFile(OpenMode.SFTP,path);
list=new ArrayList<LayoutElementParcelable>();
sftpHFile.forEachChildrenFile(c,false,file -> {
LayoutElementParcelable elem=createListParcelables(file);
if (elem != null) list.add(elem);
}
);
break;
case CUSTOM:
switch (Integer.parseInt(path)) {
case 0:
list=listImages();
break;
case 1:
list=listVideos();
break;
case 2:
list=listaudio();
break;
case 3:
list=listDocs();
break;
case 4:
list=listApks();
break;
case 5:
list=listRecent();
break;
case 6:
list=listRecentFiles();
break;
default :
throw new IllegalStateException();
}
break;
case OTG:
list=new ArrayList<>();
listOtg(path,file -> {
LayoutElementParcelable elem=createListParcelables(file);
if (elem != null) list.add(elem);
}
);
openmode=OpenMode.OTG;
break;
case DROPBOX:
case BOX:
case GDRIVE:
case ONEDRIVE:
CloudStorage cloudStorage=dataUtils.getAccount(openmode);
list=new ArrayList<>();
try {
listCloud(path,cloudStorage,openmode,file -> {
LayoutElementParcelable elem=createListParcelables(file);
if (elem != null) list.add(elem);
}
);
}
 catch (CloudPluginException e) {
e.printStackTrace();
AppConfig.toast(c,c.getResources().getString(R.string.failed_no_connection));
return new Pair<>(openmode,list);
}
break;
default :
list=new ArrayList<>();
RootHelper.getFiles(path,ma.getMainActivity().isRootExplorer(),showHiddenFiles,mode -> openmode=mode,file -> {
LayoutElementParcelable elem=createListParcelables(file);
if (elem != null) list.add(elem);
}
);
break;
}
if (list != null && !(openmode == OpenMode.CUSTOM && ((path).equals(""String_Node_Str"") || (path).equals(""String_Node_Str"")))) {
Collections.sort(list,new FileListSorter(ma.dsort,ma.sortby,ma.asc));
}
return new Pair<>(openmode,list);
}","@Override protected Pair<OpenMode,ArrayList<LayoutElementParcelable>> doInBackground(Void... p){
  HybridFile hFile=null;
  if (openmode == OpenMode.UNKNOWN) {
    hFile=new HybridFile(OpenMode.UNKNOWN,path);
    hFile.generateMode(ma.getActivity());
    openmode=hFile.getMode();
    if (hFile.isSmb()) {
      ma.smbPath=path;
    }
 else     if (android.util.Patterns.EMAIL_ADDRESS.matcher(path).matches()) {
      openmode=OpenMode.ROOT;
    }
  }
  if (isCancelled())   return null;
  ma.folder_count=0;
  ma.file_count=0;
  final ArrayList<LayoutElementParcelable> list;
switch (openmode) {
case SMB:
    if (hFile == null) {
      hFile=new HybridFile(OpenMode.SMB,path);
    }
  try {
    SmbFile[] smbFile=hFile.getSmbFile(5000).listFiles();
    list=ma.addToSmb(smbFile,path,showHiddenFiles);
    openmode=OpenMode.SMB;
  }
 catch (  SmbAuthException e) {
    if (!e.getMessage().toLowerCase().contains(""String_Node_Str"")) {
      ma.reauthenticateSmb();
    }
    return null;
  }
catch (  SmbException|NullPointerException e) {
    e.printStackTrace();
    return null;
  }
break;
case SFTP:
HybridFile sftpHFile=new HybridFile(OpenMode.SFTP,path);
list=new ArrayList<LayoutElementParcelable>();
sftpHFile.forEachChildrenFile(c,false,file -> {
LayoutElementParcelable elem=createListParcelables(file);
if (elem != null) list.add(elem);
}
);
break;
case CUSTOM:
switch (Integer.parseInt(path)) {
case 0:
list=listImages();
break;
case 1:
list=listVideos();
break;
case 2:
list=listaudio();
break;
case 3:
list=listDocs();
break;
case 4:
list=listApks();
break;
case 5:
list=listRecent();
break;
case 6:
list=listRecentFiles();
break;
default :
throw new IllegalStateException();
}
break;
case OTG:
list=new ArrayList<>();
listOtg(path,file -> {
LayoutElementParcelable elem=createListParcelables(file);
if (elem != null) list.add(elem);
}
);
openmode=OpenMode.OTG;
break;
case DROPBOX:
case BOX:
case GDRIVE:
case ONEDRIVE:
CloudStorage cloudStorage=dataUtils.getAccount(openmode);
list=new ArrayList<>();
try {
listCloud(path,cloudStorage,openmode,file -> {
LayoutElementParcelable elem=createListParcelables(file);
if (elem != null) list.add(elem);
}
);
}
 catch (CloudPluginException e) {
e.printStackTrace();
AppConfig.toast(c,c.getResources().getString(R.string.failed_no_connection));
return new Pair<>(openmode,list);
}
break;
default :
list=new ArrayList<>();
RootHelper.getFiles(path,ma.getMainActivity().isRootExplorer(),showHiddenFiles,mode -> openmode=mode,file -> {
LayoutElementParcelable elem=createListParcelables(file);
if (elem != null) list.add(elem);
}
);
break;
}
if (list != null && !(openmode == OpenMode.CUSTOM && ((path).equals(""String_Node_Str"") || (path).equals(""String_Node_Str"")))) {
Collections.sort(list,new FileListSorter(ma.dsort,ma.sortby,ma.asc));
}
return new Pair<>(openmode,list);
}",0.9971661353170386
162431,"public ArrayList<LayoutElementParcelable> addToSmb(SmbFile[] mFile,String path) throws SmbException {
  ArrayList<LayoutElementParcelable> a=new ArrayList<>();
  if (searchHelper.size() > 500)   searchHelper.clear();
  for (  SmbFile aMFile : mFile) {
    if (dataUtils.isFileHidden(aMFile.getPath()))     continue;
    String name=aMFile.getName();
    name=(aMFile.isDirectory() && name.endsWith(""String_Node_Str"")) ? name.substring(0,name.length() - 1) : name;
    if (path.equals(smbPath)) {
      if (name.endsWith(""String_Node_Str""))       continue;
    }
    if (aMFile.isDirectory()) {
      folder_count++;
      LayoutElementParcelable layoutElement=new LayoutElementParcelable(name,aMFile.getPath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,false,aMFile.lastModified() + ""String_Node_Str"",true,getBoolean(PREFERENCE_SHOW_THUMB));
      layoutElement.setMode(OpenMode.SMB);
      searchHelper.add(layoutElement.generateBaseFile());
      a.add(layoutElement);
    }
 else {
      file_count++;
      try {
        LayoutElementParcelable layoutElement=new LayoutElementParcelable(name,aMFile.getPath(),""String_Node_Str"",""String_Node_Str"",Formatter.formatFileSize(getContext(),aMFile.length()),aMFile.length(),false,aMFile.lastModified() + ""String_Node_Str"",false,getBoolean(PREFERENCE_SHOW_THUMB));
        layoutElement.setMode(OpenMode.SMB);
        searchHelper.add(layoutElement.generateBaseFile());
        a.add(layoutElement);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  return a;
}","public ArrayList<LayoutElementParcelable> addToSmb(SmbFile[] mFile,String path,boolean showHiddenFiles) throws SmbException {
  ArrayList<LayoutElementParcelable> smbFileList=new ArrayList<>();
  if (searchHelper.size() > 500)   searchHelper.clear();
  for (  SmbFile aMFile : mFile) {
    if ((dataUtils.isFileHidden(aMFile.getPath()) || aMFile.isHidden()) && !showHiddenFiles) {
      continue;
    }
    String name=aMFile.getName();
    name=(aMFile.isDirectory() && name.endsWith(""String_Node_Str"")) ? name.substring(0,name.length() - 1) : name;
    if (path.equals(smbPath)) {
      if (name.endsWith(""String_Node_Str""))       continue;
    }
    if (aMFile.isDirectory()) {
      folder_count++;
      LayoutElementParcelable layoutElement=new LayoutElementParcelable(name,aMFile.getPath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,false,aMFile.lastModified() + ""String_Node_Str"",true,getBoolean(PREFERENCE_SHOW_THUMB));
      layoutElement.setMode(OpenMode.SMB);
      searchHelper.add(layoutElement.generateBaseFile());
      smbFileList.add(layoutElement);
    }
 else {
      file_count++;
      LayoutElementParcelable layoutElement=new LayoutElementParcelable(name,aMFile.getPath(),""String_Node_Str"",""String_Node_Str"",Formatter.formatFileSize(getContext(),aMFile.length()),aMFile.length(),false,aMFile.lastModified() + ""String_Node_Str"",false,getBoolean(PREFERENCE_SHOW_THUMB));
      layoutElement.setMode(OpenMode.SMB);
      searchHelper.add(layoutElement.generateBaseFile());
      smbFileList.add(layoutElement);
    }
  }
  return smbFileList;
}",0.9013724864347272
162432,"protected Boolean doInBackground(ArrayList<HybridFileParcelable>... p1){
  files=p1[0];
  boolean wasDeleted=true;
  if (files.size() == 0)   return true;
  if (files.get(0).isOtgFile()) {
    for (    HybridFileParcelable file : files) {
      DocumentFile documentFile=OTGUtil.getDocumentFile(file.getPath(),cd,false);
      wasDeleted=documentFile.delete();
    }
  }
 else   if (files.get(0).isDropBoxFile()) {
    CloudStorage cloudStorageDropbox=dataUtils.getAccount(OpenMode.DROPBOX);
    for (    HybridFileParcelable baseFile : files) {
      try {
        cloudStorageDropbox.delete(CloudUtil.stripPath(OpenMode.DROPBOX,baseFile.getPath()));
      }
 catch (      Exception e) {
        e.printStackTrace();
        wasDeleted=false;
        break;
      }
    }
  }
 else   if (files.get(0).isBoxFile()) {
    CloudStorage cloudStorageBox=dataUtils.getAccount(OpenMode.BOX);
    for (    HybridFileParcelable baseFile : files) {
      try {
        cloudStorageBox.delete(CloudUtil.stripPath(OpenMode.BOX,baseFile.getPath()));
      }
 catch (      Exception e) {
        e.printStackTrace();
        wasDeleted=false;
        break;
      }
    }
  }
 else   if (files.get(0).isGoogleDriveFile()) {
    CloudStorage cloudStorageGdrive=dataUtils.getAccount(OpenMode.GDRIVE);
    for (    HybridFileParcelable baseFile : files) {
      try {
        cloudStorageGdrive.delete(CloudUtil.stripPath(OpenMode.GDRIVE,baseFile.getPath()));
      }
 catch (      Exception e) {
        e.printStackTrace();
        wasDeleted=false;
        break;
      }
    }
  }
 else   if (files.get(0).isOneDriveFile()) {
    CloudStorage cloudStorageOnedrive=dataUtils.getAccount(OpenMode.ONEDRIVE);
    for (    HybridFileParcelable baseFile : files) {
      try {
        cloudStorageOnedrive.delete(CloudUtil.stripPath(OpenMode.ONEDRIVE,baseFile.getPath()));
      }
 catch (      Exception e) {
        e.printStackTrace();
        wasDeleted=false;
        break;
      }
    }
  }
 else {
    for (    HybridFileParcelable file : files) {
      try {
        if (file.delete(cd,rootMode)) {
          wasDeleted=true;
        }
 else {
          wasDeleted=false;
          break;
        }
      }
 catch (      ShellNotRunningException e) {
        e.printStackTrace();
        wasDeleted=false;
        break;
      }
    }
  }
  if (!files.get(0).isSmb()) {
    try {
      for (      HybridFileParcelable f : files) {
        delete(cd,f.getPath());
      }
    }
 catch (    Exception e) {
      for (      HybridFileParcelable f : files) {
        FileUtils.scanFile(f.getPath(),cd);
      }
    }
  }
  for (  HybridFileParcelable file : files) {
    if (file.getName().endsWith(CryptUtil.CRYPT_EXTENSION)) {
      CryptHandler handler=new CryptHandler(cd);
      handler.clear(file.getPath());
    }
  }
  return wasDeleted;
}","protected Boolean doInBackground(ArrayList<HybridFileParcelable>... p1){
  files=p1[0];
  boolean wasDeleted=true;
  if (files.size() == 0)   return true;
  if (files.get(0).isOtgFile()) {
    for (    HybridFileParcelable file : files) {
      DocumentFile documentFile=OTGUtil.getDocumentFile(file.getPath(),cd,false);
      wasDeleted=documentFile.delete();
    }
  }
 else   if (files.get(0).isDropBoxFile()) {
    CloudStorage cloudStorageDropbox=dataUtils.getAccount(OpenMode.DROPBOX);
    for (    HybridFileParcelable baseFile : files) {
      try {
        cloudStorageDropbox.delete(CloudUtil.stripPath(OpenMode.DROPBOX,baseFile.getPath()));
      }
 catch (      Exception e) {
        e.printStackTrace();
        wasDeleted=false;
        break;
      }
    }
  }
 else   if (files.get(0).isBoxFile()) {
    CloudStorage cloudStorageBox=dataUtils.getAccount(OpenMode.BOX);
    for (    HybridFileParcelable baseFile : files) {
      try {
        cloudStorageBox.delete(CloudUtil.stripPath(OpenMode.BOX,baseFile.getPath()));
      }
 catch (      Exception e) {
        e.printStackTrace();
        wasDeleted=false;
        break;
      }
    }
  }
 else   if (files.get(0).isGoogleDriveFile()) {
    CloudStorage cloudStorageGdrive=dataUtils.getAccount(OpenMode.GDRIVE);
    for (    HybridFileParcelable baseFile : files) {
      try {
        cloudStorageGdrive.delete(CloudUtil.stripPath(OpenMode.GDRIVE,baseFile.getPath()));
      }
 catch (      Exception e) {
        e.printStackTrace();
        wasDeleted=false;
        break;
      }
    }
  }
 else   if (files.get(0).isOneDriveFile()) {
    CloudStorage cloudStorageOnedrive=dataUtils.getAccount(OpenMode.ONEDRIVE);
    for (    HybridFileParcelable baseFile : files) {
      try {
        cloudStorageOnedrive.delete(CloudUtil.stripPath(OpenMode.ONEDRIVE,baseFile.getPath()));
      }
 catch (      Exception e) {
        e.printStackTrace();
        wasDeleted=false;
        break;
      }
    }
  }
 else {
    for (    HybridFileParcelable file : files) {
      try {
        if (file.delete(cd,rootMode)) {
          wasDeleted=true;
        }
 else {
          wasDeleted=false;
          break;
        }
      }
 catch (      ShellNotRunningException e) {
        e.printStackTrace();
        wasDeleted=false;
        break;
      }
    }
  }
  if (!files.get(0).isSmb()) {
    try {
      for (      HybridFileParcelable f : files) {
        delete(cd,f.getPath());
      }
    }
 catch (    Exception e) {
      for (      HybridFileParcelable f : files) {
        FileUtils.scanFile(f.getFile(),cd);
      }
    }
  }
  for (  HybridFileParcelable file : files) {
    if (file.getName().endsWith(CryptUtil.CRYPT_EXTENSION)) {
      CryptHandler handler=new CryptHandler(cd);
      handler.clear(file.getPath());
    }
  }
  return wasDeleted;
}",0.9985885673959068
162433,"@Override public void onPostExecute(Boolean movedCorrectly){
  if (movedCorrectly) {
    if (mainFrag != null && mainFrag.getCurrentPath().equals(paths.get(0))) {
      Intent intent=new Intent(MainActivity.KEY_INTENT_LOAD_LIST);
      intent.putExtra(MainActivity.KEY_INTENT_LOAD_LIST_FILE,paths.get(0));
      context.sendBroadcast(intent);
    }
    for (int i=0; i < paths.size(); i++) {
      for (      HybridFileParcelable f : files.get(i)) {
        FileUtils.scanFile(f.getPath(),context);
        FileUtils.scanFile(paths.get(i) + ""String_Node_Str"" + f.getName(),context);
      }
    }
    AppConfig.runInBackground(() -> {
      for (int i=0; i < paths.size(); i++) {
        for (        HybridFileParcelable file : files.get(i)) {
          if (file.getName().endsWith(CryptUtil.CRYPT_EXTENSION)) {
            try {
              CryptHandler cryptHandler=new CryptHandler(context);
              EncryptedEntry oldEntry=cryptHandler.findEntry(file.getPath());
              EncryptedEntry newEntry=new EncryptedEntry();
              newEntry.setId(oldEntry.getId());
              newEntry.setPassword(oldEntry.getPassword());
              newEntry.setPath(paths.get(i) + ""String_Node_Str"" + file.getName());
              cryptHandler.updateEntry(oldEntry,newEntry);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
        }
      }
    }
);
  }
 else {
    for (int i=0; i < paths.size(); i++) {
      Intent intent=new Intent(context,CopyService.class);
      intent.putExtra(CopyService.TAG_COPY_SOURCES,files.get(i));
      intent.putExtra(CopyService.TAG_COPY_TARGET,paths.get(i));
      intent.putExtra(CopyService.TAG_COPY_MOVE,true);
      intent.putExtra(CopyService.TAG_COPY_OPEN_MODE,mode.ordinal());
      ServiceWatcherUtil.runService(context,intent);
    }
  }
}","@Override public void onPostExecute(Boolean movedCorrectly){
  if (movedCorrectly) {
    if (mainFrag != null && mainFrag.getCurrentPath().equals(paths.get(0))) {
      Intent intent=new Intent(MainActivity.KEY_INTENT_LOAD_LIST);
      intent.putExtra(MainActivity.KEY_INTENT_LOAD_LIST_FILE,paths.get(0));
      context.sendBroadcast(intent);
    }
    for (int i=0; i < paths.size(); i++) {
      for (      HybridFileParcelable f : files.get(i)) {
        FileUtils.scanFile(f.getFile(),context);
        FileUtils.scanFile(new File(paths.get(i) + ""String_Node_Str"" + f.getName()),context);
      }
    }
    AppConfig.runInBackground(() -> {
      for (int i=0; i < paths.size(); i++) {
        for (        HybridFileParcelable file : files.get(i)) {
          if (file.getName().endsWith(CryptUtil.CRYPT_EXTENSION)) {
            try {
              CryptHandler cryptHandler=new CryptHandler(context);
              EncryptedEntry oldEntry=cryptHandler.findEntry(file.getPath());
              EncryptedEntry newEntry=new EncryptedEntry();
              newEntry.setId(oldEntry.getId());
              newEntry.setPassword(oldEntry.getPassword());
              newEntry.setPath(paths.get(i) + ""String_Node_Str"" + file.getName());
              cryptHandler.updateEntry(oldEntry,newEntry);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
        }
      }
    }
);
  }
 else {
    for (int i=0; i < paths.size(); i++) {
      Intent intent=new Intent(context,CopyService.class);
      intent.putExtra(CopyService.TAG_COPY_SOURCES,files.get(i));
      intent.putExtra(CopyService.TAG_COPY_TARGET,paths.get(i));
      intent.putExtra(CopyService.TAG_COPY_MOVE,true);
      intent.putExtra(CopyService.TAG_COPY_OPEN_MODE,mode.ordinal());
      ServiceWatcherUtil.runService(context,intent);
    }
  }
}",0.9951664876476908
162434,"void copyRoot(HybridFileParcelable sourceFile,HybridFile targetFile,boolean move){
  try {
    if (!move)     RootUtils.copy(sourceFile.getPath(),targetFile.getPath());
 else     if (move)     RootUtils.move(sourceFile.getPath(),targetFile.getPath());
    ServiceWatcherUtil.position+=sourceFile.getSize();
  }
 catch (  ShellNotRunningException e) {
    failedFOps.add(sourceFile);
    e.printStackTrace();
  }
  FileUtils.scanFile(targetFile.getPath(),c);
}","void copyRoot(HybridFileParcelable sourceFile,HybridFile targetFile,boolean move){
  try {
    if (!move)     RootUtils.copy(sourceFile.getPath(),targetFile.getPath());
 else     if (move)     RootUtils.move(sourceFile.getPath(),targetFile.getPath());
    ServiceWatcherUtil.position+=sourceFile.getSize();
  }
 catch (  ShellNotRunningException e) {
    failedFOps.add(sourceFile);
    e.printStackTrace();
  }
  FileUtils.scanFile(targetFile.getFile(),c);
}",0.9912854030501088
162435,"public void hide(String path){
  dataUtils.addHiddenFile(path);
  if (new File(path).isDirectory()) {
    File f1=new File(path + ""String_Node_Str"" + ""String_Node_Str"");
    if (!f1.exists()) {
      try {
        getMainActivity().mainActivityHelper.mkFile(new HybridFile(OpenMode.FILE,f1.getPath()),this);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    FileUtils.scanFile(path,getActivity());
  }
}","public void hide(String path){
  dataUtils.addHiddenFile(path);
  File file=new File(path);
  if (file.isDirectory()) {
    File f1=new File(path + ""String_Node_Str"" + ""String_Node_Str"");
    if (!f1.exists()) {
      try {
        getMainActivity().mainActivityHelper.mkFile(new HybridFile(OpenMode.FILE,f1.getPath()),this);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    FileUtils.scanFile(file,getActivity());
  }
}",0.9618834080717488
162436,"/** 
 * Starts a media scanner to let file system know changes done to files
 */
public static void scanFile(final Context context,final MediaScannerConnection mediaScannerConnection,final String[] paths){
  Log.d(""String_Node_Str"",paths[0]);
  AppConfig.runInBackground(() -> {
    mediaScannerConnection.connect();
    MediaScannerConnection.scanFile(context,paths,null,null);
  }
);
}","/** 
 * Triggers   {@link Intent#ACTION_MEDIA_SCANNER_SCAN_FILE} intent to refresh the media store.
 * @param uri File's {@link Uri}
 * @param c {@link Context}
 */
public static void scanFile(@NonNull Uri uri,@NonNull Context c){
  Intent mediaScanIntent=new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,uri);
  c.sendBroadcast(mediaScanIntent);
}",0.1986394557823129
162437,"/** 
 * Starts copy of file Supports :   {@link File},   {@link jcifs.smb.SmbFile},   {@link DocumentFile},   {@link CloudStorage}
 * @param lowOnMemory defines whether system is running low on memory, in which case we'll switch tousing streams instead of channel which maps the who buffer in memory. TODO: Use buffers even on low memory but don't map the whole file to memory but parts of it, and transfer each part instead.
 */
private void startCopy(boolean lowOnMemory) throws IOException {
  FileInputStream inputStream=null;
  FileOutputStream outputStream=null;
  FileChannel inChannel=null;
  FileChannel outChannel=null;
  BufferedInputStream bufferedInputStream=null;
  BufferedOutputStream bufferedOutputStream=null;
  try {
    if (mSourceFile.isOtgFile()) {
      ContentResolver contentResolver=mContext.getContentResolver();
      DocumentFile documentSourceFile=OTGUtil.getDocumentFile(mSourceFile.getPath(),mContext,false);
      bufferedInputStream=new BufferedInputStream(contentResolver.openInputStream(documentSourceFile.getUri()),DEFAULT_BUFFER_SIZE);
    }
 else     if (mSourceFile.isSmb()) {
      bufferedInputStream=new BufferedInputStream(mSourceFile.getInputStream(),DEFAULT_BUFFER_SIZE);
    }
 else     if (mSourceFile.isSftp()) {
      bufferedInputStream=new BufferedInputStream(mSourceFile.getInputStream(mContext),DEFAULT_BUFFER_SIZE);
    }
 else     if (mSourceFile.isDropBoxFile()) {
      CloudStorage cloudStorageDropbox=dataUtils.getAccount(OpenMode.DROPBOX);
      bufferedInputStream=new BufferedInputStream(cloudStorageDropbox.download(CloudUtil.stripPath(OpenMode.DROPBOX,mSourceFile.getPath())));
    }
 else     if (mSourceFile.isBoxFile()) {
      CloudStorage cloudStorageBox=dataUtils.getAccount(OpenMode.BOX);
      bufferedInputStream=new BufferedInputStream(cloudStorageBox.download(CloudUtil.stripPath(OpenMode.BOX,mSourceFile.getPath())));
    }
 else     if (mSourceFile.isGoogleDriveFile()) {
      CloudStorage cloudStorageGdrive=dataUtils.getAccount(OpenMode.GDRIVE);
      bufferedInputStream=new BufferedInputStream(cloudStorageGdrive.download(CloudUtil.stripPath(OpenMode.GDRIVE,mSourceFile.getPath())));
    }
 else     if (mSourceFile.isOneDriveFile()) {
      CloudStorage cloudStorageOnedrive=dataUtils.getAccount(OpenMode.ONEDRIVE);
      bufferedInputStream=new BufferedInputStream(cloudStorageOnedrive.download(CloudUtil.stripPath(OpenMode.ONEDRIVE,mSourceFile.getPath())));
    }
 else {
      File file=new File(mSourceFile.getPath());
      if (FileUtil.isReadable(file)) {
        if (mTargetFile.isOneDriveFile() || mTargetFile.isDropBoxFile() || mTargetFile.isGoogleDriveFile()|| mTargetFile.isBoxFile()|| lowOnMemory) {
          bufferedInputStream=new BufferedInputStream(new FileInputStream(file));
        }
 else {
          inChannel=new RandomAccessFile(file,""String_Node_Str"").getChannel();
        }
      }
 else {
        ContentResolver contentResolver=mContext.getContentResolver();
        DocumentFile documentSourceFile=FileUtil.getDocumentFile(file,mSourceFile.isDirectory(),mContext);
        bufferedInputStream=new BufferedInputStream(contentResolver.openInputStream(documentSourceFile.getUri()),DEFAULT_BUFFER_SIZE);
      }
    }
    if (mTargetFile.isOtgFile()) {
      ContentResolver contentResolver=mContext.getContentResolver();
      DocumentFile documentTargetFile=OTGUtil.getDocumentFile(mTargetFile.getPath(),mContext,true);
      bufferedOutputStream=new BufferedOutputStream(contentResolver.openOutputStream(documentTargetFile.getUri()),DEFAULT_BUFFER_SIZE);
    }
 else     if (mTargetFile.isSftp()) {
      bufferedOutputStream=new BufferedOutputStream(mTargetFile.getOutputStream(mContext),DEFAULT_BUFFER_SIZE);
    }
 else     if (mTargetFile.isSmb()) {
      bufferedOutputStream=new BufferedOutputStream(mTargetFile.getOutputStream(mContext),DEFAULT_BUFFER_SIZE);
    }
 else     if (mTargetFile.isDropBoxFile()) {
      CloudStorage cloudStorageDropbox=dataUtils.getAccount(OpenMode.DROPBOX);
      if (mSourceFile.isDropBoxFile()) {
        cloudStorageDropbox.copy(CloudUtil.stripPath(OpenMode.DROPBOX,mSourceFile.getPath()),CloudUtil.stripPath(OpenMode.DROPBOX,mTargetFile.getPath()));
        return;
      }
 else {
        cloudStorageDropbox.upload(CloudUtil.stripPath(OpenMode.DROPBOX,mTargetFile.getPath()),bufferedInputStream,mSourceFile.getSize(),true);
        return;
      }
    }
 else     if (mTargetFile.isBoxFile()) {
      CloudStorage cloudStorageBox=dataUtils.getAccount(OpenMode.BOX);
      if (mSourceFile.isBoxFile()) {
        cloudStorageBox.copy(CloudUtil.stripPath(OpenMode.BOX,mSourceFile.getPath()),CloudUtil.stripPath(OpenMode.BOX,mTargetFile.getPath()));
        return;
      }
 else {
        cloudStorageBox.upload(CloudUtil.stripPath(OpenMode.BOX,mTargetFile.getPath()),bufferedInputStream,mSourceFile.getSize(),true);
        bufferedInputStream.close();
        return;
      }
    }
 else     if (mTargetFile.isGoogleDriveFile()) {
      CloudStorage cloudStorageGdrive=dataUtils.getAccount(OpenMode.GDRIVE);
      if (mSourceFile.isGoogleDriveFile()) {
        cloudStorageGdrive.copy(CloudUtil.stripPath(OpenMode.GDRIVE,mSourceFile.getPath()),CloudUtil.stripPath(OpenMode.GDRIVE,mTargetFile.getPath()));
        return;
      }
 else {
        cloudStorageGdrive.upload(CloudUtil.stripPath(OpenMode.GDRIVE,mTargetFile.getPath()),bufferedInputStream,mSourceFile.getSize(),true);
        bufferedInputStream.close();
        return;
      }
    }
 else     if (mTargetFile.isOneDriveFile()) {
      CloudStorage cloudStorageOnedrive=dataUtils.getAccount(OpenMode.ONEDRIVE);
      if (mSourceFile.isOneDriveFile()) {
        cloudStorageOnedrive.copy(CloudUtil.stripPath(OpenMode.ONEDRIVE,mSourceFile.getPath()),CloudUtil.stripPath(OpenMode.ONEDRIVE,mTargetFile.getPath()));
        return;
      }
 else {
        cloudStorageOnedrive.upload(CloudUtil.stripPath(OpenMode.ONEDRIVE,mTargetFile.getPath()),bufferedInputStream,mSourceFile.getSize(),true);
        bufferedInputStream.close();
        return;
      }
    }
 else {
      File file=new File(mTargetFile.getPath());
      if (FileUtil.isWritable(file)) {
        if (lowOnMemory) {
          bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(file));
        }
 else {
          outChannel=new RandomAccessFile(file,""String_Node_Str"").getChannel();
        }
      }
 else {
        ContentResolver contentResolver=mContext.getContentResolver();
        DocumentFile documentTargetFile=FileUtil.getDocumentFile(file,mTargetFile.isDirectory(),mContext);
        bufferedOutputStream=new BufferedOutputStream(contentResolver.openOutputStream(documentTargetFile.getUri()),DEFAULT_BUFFER_SIZE);
      }
    }
    if (bufferedInputStream != null) {
      if (bufferedOutputStream != null)       copyFile(bufferedInputStream,bufferedOutputStream);
 else       if (outChannel != null) {
        copyFile(bufferedInputStream,outChannel);
      }
    }
 else     if (inChannel != null) {
      if (bufferedOutputStream != null)       copyFile(inChannel,bufferedOutputStream);
 else       if (outChannel != null)       copyFile(inChannel,outChannel);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    Log.d(getClass().getSimpleName(),""String_Node_Str"");
    throw new IOException();
  }
catch (  OutOfMemoryError e) {
    e.printStackTrace();
    AppConfig.toast(mContext,mContext.getString(R.string.copy_low_memory));
    startCopy(true);
  }
 finally {
    try {
      if (inChannel != null)       inChannel.close();
      if (outChannel != null)       outChannel.close();
      if (inputStream != null)       inputStream.close();
      if (outputStream != null)       outputStream.close();
      if (bufferedInputStream != null)       bufferedInputStream.close();
      if (bufferedOutputStream != null)       bufferedOutputStream.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * Starts copy of file Supports :   {@link File},   {@link jcifs.smb.SmbFile},   {@link DocumentFile},   {@link CloudStorage}
 * @param lowOnMemory defines whether system is running low on memory, in which case we'll switch tousing streams instead of channel which maps the who buffer in memory. TODO: Use buffers even on low memory but don't map the whole file to memory but parts of it, and transfer each part instead.
 */
private void startCopy(boolean lowOnMemory) throws IOException {
  FileInputStream inputStream=null;
  FileOutputStream outputStream=null;
  FileChannel inChannel=null;
  FileChannel outChannel=null;
  BufferedInputStream bufferedInputStream=null;
  BufferedOutputStream bufferedOutputStream=null;
  try {
    if (mSourceFile.isOtgFile()) {
      ContentResolver contentResolver=mContext.getContentResolver();
      DocumentFile documentSourceFile=OTGUtil.getDocumentFile(mSourceFile.getPath(),mContext,false);
      bufferedInputStream=new BufferedInputStream(contentResolver.openInputStream(documentSourceFile.getUri()),DEFAULT_BUFFER_SIZE);
    }
 else     if (mSourceFile.isSmb()) {
      bufferedInputStream=new BufferedInputStream(mSourceFile.getInputStream(),DEFAULT_BUFFER_SIZE);
    }
 else     if (mSourceFile.isSftp()) {
      bufferedInputStream=new BufferedInputStream(mSourceFile.getInputStream(mContext),DEFAULT_BUFFER_SIZE);
    }
 else     if (mSourceFile.isDropBoxFile()) {
      CloudStorage cloudStorageDropbox=dataUtils.getAccount(OpenMode.DROPBOX);
      bufferedInputStream=new BufferedInputStream(cloudStorageDropbox.download(CloudUtil.stripPath(OpenMode.DROPBOX,mSourceFile.getPath())));
    }
 else     if (mSourceFile.isBoxFile()) {
      CloudStorage cloudStorageBox=dataUtils.getAccount(OpenMode.BOX);
      bufferedInputStream=new BufferedInputStream(cloudStorageBox.download(CloudUtil.stripPath(OpenMode.BOX,mSourceFile.getPath())));
    }
 else     if (mSourceFile.isGoogleDriveFile()) {
      CloudStorage cloudStorageGdrive=dataUtils.getAccount(OpenMode.GDRIVE);
      bufferedInputStream=new BufferedInputStream(cloudStorageGdrive.download(CloudUtil.stripPath(OpenMode.GDRIVE,mSourceFile.getPath())));
    }
 else     if (mSourceFile.isOneDriveFile()) {
      CloudStorage cloudStorageOnedrive=dataUtils.getAccount(OpenMode.ONEDRIVE);
      bufferedInputStream=new BufferedInputStream(cloudStorageOnedrive.download(CloudUtil.stripPath(OpenMode.ONEDRIVE,mSourceFile.getPath())));
    }
 else {
      File file=new File(mSourceFile.getPath());
      if (FileUtil.isReadable(file)) {
        if (mTargetFile.isOneDriveFile() || mTargetFile.isDropBoxFile() || mTargetFile.isGoogleDriveFile()|| mTargetFile.isBoxFile()|| lowOnMemory) {
          bufferedInputStream=new BufferedInputStream(new FileInputStream(file));
        }
 else {
          inChannel=new RandomAccessFile(file,""String_Node_Str"").getChannel();
        }
      }
 else {
        ContentResolver contentResolver=mContext.getContentResolver();
        DocumentFile documentSourceFile=FileUtil.getDocumentFile(file,mSourceFile.isDirectory(),mContext);
        bufferedInputStream=new BufferedInputStream(contentResolver.openInputStream(documentSourceFile.getUri()),DEFAULT_BUFFER_SIZE);
      }
    }
    if (mTargetFile.isOtgFile()) {
      ContentResolver contentResolver=mContext.getContentResolver();
      DocumentFile documentTargetFile=OTGUtil.getDocumentFile(mTargetFile.getPath(),mContext,true);
      bufferedOutputStream=new BufferedOutputStream(contentResolver.openOutputStream(documentTargetFile.getUri()),DEFAULT_BUFFER_SIZE);
    }
 else     if (mTargetFile.isSftp()) {
      bufferedOutputStream=new BufferedOutputStream(mTargetFile.getOutputStream(mContext),DEFAULT_BUFFER_SIZE);
    }
 else     if (mTargetFile.isSmb()) {
      bufferedOutputStream=new BufferedOutputStream(mTargetFile.getOutputStream(mContext),DEFAULT_BUFFER_SIZE);
    }
 else     if (mTargetFile.isDropBoxFile()) {
      CloudStorage cloudStorageDropbox=dataUtils.getAccount(OpenMode.DROPBOX);
      if (mSourceFile.isDropBoxFile()) {
        cloudStorageDropbox.copy(CloudUtil.stripPath(OpenMode.DROPBOX,mSourceFile.getPath()),CloudUtil.stripPath(OpenMode.DROPBOX,mTargetFile.getPath()));
        return;
      }
 else {
        cloudStorageDropbox.upload(CloudUtil.stripPath(OpenMode.DROPBOX,mTargetFile.getPath()),bufferedInputStream,mSourceFile.getSize(),true);
        return;
      }
    }
 else     if (mTargetFile.isBoxFile()) {
      CloudStorage cloudStorageBox=dataUtils.getAccount(OpenMode.BOX);
      if (mSourceFile.isBoxFile()) {
        cloudStorageBox.copy(CloudUtil.stripPath(OpenMode.BOX,mSourceFile.getPath()),CloudUtil.stripPath(OpenMode.BOX,mTargetFile.getPath()));
        return;
      }
 else {
        cloudStorageBox.upload(CloudUtil.stripPath(OpenMode.BOX,mTargetFile.getPath()),bufferedInputStream,mSourceFile.getSize(),true);
        bufferedInputStream.close();
        return;
      }
    }
 else     if (mTargetFile.isGoogleDriveFile()) {
      CloudStorage cloudStorageGdrive=dataUtils.getAccount(OpenMode.GDRIVE);
      if (mSourceFile.isGoogleDriveFile()) {
        cloudStorageGdrive.copy(CloudUtil.stripPath(OpenMode.GDRIVE,mSourceFile.getPath()),CloudUtil.stripPath(OpenMode.GDRIVE,mTargetFile.getPath()));
        return;
      }
 else {
        cloudStorageGdrive.upload(CloudUtil.stripPath(OpenMode.GDRIVE,mTargetFile.getPath()),bufferedInputStream,mSourceFile.getSize(),true);
        bufferedInputStream.close();
        return;
      }
    }
 else     if (mTargetFile.isOneDriveFile()) {
      CloudStorage cloudStorageOnedrive=dataUtils.getAccount(OpenMode.ONEDRIVE);
      if (mSourceFile.isOneDriveFile()) {
        cloudStorageOnedrive.copy(CloudUtil.stripPath(OpenMode.ONEDRIVE,mSourceFile.getPath()),CloudUtil.stripPath(OpenMode.ONEDRIVE,mTargetFile.getPath()));
        return;
      }
 else {
        cloudStorageOnedrive.upload(CloudUtil.stripPath(OpenMode.ONEDRIVE,mTargetFile.getPath()),bufferedInputStream,mSourceFile.getSize(),true);
        bufferedInputStream.close();
        return;
      }
    }
 else {
      File file=new File(mTargetFile.getPath());
      if (FileUtil.isWritable(file)) {
        if (lowOnMemory) {
          bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(file));
        }
 else {
          outChannel=new RandomAccessFile(file,""String_Node_Str"").getChannel();
        }
      }
 else {
        ContentResolver contentResolver=mContext.getContentResolver();
        DocumentFile documentTargetFile=FileUtil.getDocumentFile(file,mTargetFile.isDirectory(),mContext);
        bufferedOutputStream=new BufferedOutputStream(contentResolver.openOutputStream(documentTargetFile.getUri()),DEFAULT_BUFFER_SIZE);
      }
    }
    if (bufferedInputStream != null) {
      if (bufferedOutputStream != null)       copyFile(bufferedInputStream,bufferedOutputStream);
 else       if (outChannel != null) {
        copyFile(bufferedInputStream,outChannel);
      }
    }
 else     if (inChannel != null) {
      if (bufferedOutputStream != null)       copyFile(inChannel,bufferedOutputStream);
 else       if (outChannel != null)       copyFile(inChannel,outChannel);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    Log.d(getClass().getSimpleName(),""String_Node_Str"");
    throw new IOException();
  }
catch (  OutOfMemoryError e) {
    e.printStackTrace();
    AppConfig.toast(mContext,mContext.getString(R.string.copy_low_memory));
    startCopy(true);
  }
 finally {
    try {
      if (inChannel != null)       inChannel.close();
      if (outChannel != null)       outChannel.close();
      if (inputStream != null)       inputStream.close();
      if (outputStream != null)       outputStream.close();
      if (bufferedInputStream != null)       bufferedInputStream.close();
      if (bufferedOutputStream != null)       bufferedOutputStream.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if ((mTargetFile.isLocal() || mTargetFile.isOtgFile()) && mTargetFile.exists(mContext)) {
      DocumentFile documentFile=FileUtil.getDocumentFile(mTargetFile.getFile(),false,mContext);
      if (documentFile == null)       documentFile=DocumentFile.fromFile(mTargetFile.getFile());
      FileUtils.scanFile(documentFile.getUri(),mContext);
    }
  }
}",0.9784093006089684
162438,"public static MaterialDialog showNameDialog(final MainActivity m,String hint,String prefill,String title,String positiveButtonText,String neutralButtonText,String negativeButtonText,MaterialDialog.SingleButtonCallback positiveButtonAction,WarnableTextInputValidator.OnTextValidate validator){
  int accentColor=m.getAccent();
  MaterialDialog.Builder builder=new MaterialDialog.Builder(m);
  View dialogView=m.getLayoutInflater().inflate(R.layout.dialog_singleedittext,null);
  EditText textfield=dialogView.findViewById(R.id.singleedittext_input);
  textfield.setHint(hint);
  textfield.setText(prefill);
  WarnableTextInputLayout tilTextfield=dialogView.findViewById(R.id.singleedittext_warnabletextinputlayout);
  builder.customView(dialogView,false).widgetColor(accentColor).theme(m.getAppTheme().getMaterialDialogTheme()).title(title).positiveText(positiveButtonText).onPositive(positiveButtonAction);
  if (neutralButtonText != null) {
    builder.neutralText(neutralButtonText);
  }
  if (negativeButtonText != null) {
    builder.negativeText(negativeButtonText);
    builder.negativeColor(accentColor);
  }
  MaterialDialog dialog=builder.show();
  new WarnableTextInputValidator(builder.getContext(),textfield,tilTextfield,dialog.getActionButton(DialogAction.POSITIVE),validator);
  return dialog;
}","public static MaterialDialog showNameDialog(final MainActivity m,String hint,String prefill,String title,String positiveButtonText,String neutralButtonText,String negativeButtonText,MaterialDialog.SingleButtonCallback positiveButtonAction,WarnableTextInputValidator.OnTextValidate validator){
  int accentColor=m.getAccent();
  MaterialDialog.Builder builder=new MaterialDialog.Builder(m);
  View dialogView=m.getLayoutInflater().inflate(R.layout.dialog_singleedittext,null);
  EditText textfield=dialogView.findViewById(R.id.singleedittext_input);
  textfield.setHint(hint);
  textfield.setText(prefill);
  WarnableTextInputLayout tilTextfield=dialogView.findViewById(R.id.singleedittext_warnabletextinputlayout);
  builder.customView(dialogView,false).widgetColor(accentColor).theme(m.getAppTheme().getMaterialDialogTheme()).title(title).positiveText(positiveButtonText).onPositive(positiveButtonAction);
  if (neutralButtonText != null) {
    builder.neutralText(neutralButtonText);
  }
  if (negativeButtonText != null) {
    builder.negativeText(negativeButtonText);
    builder.negativeColor(accentColor);
  }
  MaterialDialog dialog=builder.show();
  WarnableTextInputValidator textInputValidator=new WarnableTextInputValidator(builder.getContext(),textfield,tilTextfield,dialog.getActionButton(DialogAction.POSITIVE),validator);
  if (!TextUtils.isEmpty(prefill))   textInputValidator.afterTextChanged(textfield.getText());
  return dialog;
}",0.9394708227618702
162439,"/** 
 * Prompt a dialog to user to input file name
 * @param path     current path at which file to create
 * @param ma       {@link MainFragment} current fragment
 */
void mkfile(final OpenMode openMode,final String path,final MainFragment ma){
  mk(R.string.newfile,""String_Node_Str"",(dialog,which) -> {
    EditText textfield=dialog.getCustomView().findViewById(R.id.singleedittext_input);
    mkFile(new HybridFile(openMode,path + ""String_Node_Str"" + textfield.getText().toString()),ma);
    dialog.dismiss();
  }
,(text) -> {
    boolean isValidFilename=FileUtil.isValidFilename(text);
    if (isValidFilename && text.length() > 0 && !text.toLowerCase().endsWith(""String_Node_Str"")) {
      return new WarnableTextInputValidator.ReturnState(WarnableTextInputValidator.ReturnState.STATE_WARNING,R.string.create_file_suggest_txt_extension);
    }
 else {
      if (!isValidFilename) {
        return new WarnableTextInputValidator.ReturnState(WarnableTextInputValidator.ReturnState.STATE_ERROR,R.string.invalid_name);
      }
 else       if (text.length() < 1) {
        return new WarnableTextInputValidator.ReturnState(WarnableTextInputValidator.ReturnState.STATE_ERROR,R.string.field_empty);
      }
    }
    return new WarnableTextInputValidator.ReturnState();
  }
);
}","/** 
 * Prompt a dialog to user to input file name
 * @param path     current path at which file to create
 * @param ma       {@link MainFragment} current fragment
 */
void mkfile(final OpenMode openMode,final String path,final MainFragment ma){
  mk(R.string.newfile,NEW_FILE_TXT_EXTENSION,(dialog,which) -> {
    EditText textfield=dialog.getCustomView().findViewById(R.id.singleedittext_input);
    mkFile(new HybridFile(openMode,path + ""String_Node_Str"" + textfield.getText().toString()),ma);
    dialog.dismiss();
  }
,(text) -> {
    boolean isValidFilename=FileUtil.isValidFilename(text);
    if (isValidFilename && text.length() > 0) {
      SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(mainActivity);
      if (text.startsWith(""String_Node_Str"") && !prefs.getBoolean(PreferencesConstants.PREFERENCE_SHOW_HIDDENFILES,false)) {
        return new WarnableTextInputValidator.ReturnState(WarnableTextInputValidator.ReturnState.STATE_WARNING,R.string.create_hidden_file_warn);
      }
 else       if (!text.toLowerCase().endsWith(NEW_FILE_TXT_EXTENSION)) {
        return new WarnableTextInputValidator.ReturnState(WarnableTextInputValidator.ReturnState.STATE_WARNING,R.string.create_file_suggest_txt_extension);
      }
    }
 else {
      if (!isValidFilename) {
        return new WarnableTextInputValidator.ReturnState(WarnableTextInputValidator.ReturnState.STATE_ERROR,R.string.invalid_name);
      }
 else       if (text.length() < 1) {
        return new WarnableTextInputValidator.ReturnState(WarnableTextInputValidator.ReturnState.STATE_ERROR,R.string.field_empty);
      }
    }
    return new WarnableTextInputValidator.ReturnState();
  }
);
}",0.8054054054054054
162440,"public static void mkfile(@NonNull final HybridFile file,final Context context,final boolean rootMode,@NonNull final ErrorCallBack errorCallBack){
  new AsyncTask<Void,Void,Void>(){
    private DataUtils dataUtils=DataUtils.getInstance();
    @Override protected Void doInBackground(    Void... params){
      if (!Operations.isFileNameValid(file.getName(context))) {
        errorCallBack.invalidName(file);
        return null;
      }
      if (file.exists()) {
        errorCallBack.exists(file);
        return null;
      }
      if (file.isSftp()) {
        OutputStream out=file.getOutputStream(context);
        try {
          out.close();
          errorCallBack.done(file,true);
          return null;
        }
 catch (        IOException e) {
          errorCallBack.done(file,false);
          return null;
        }
      }
      if (file.isSmb()) {
        try {
          file.getSmbFile(2000).createNewFile();
        }
 catch (        SmbException e) {
          e.printStackTrace();
          errorCallBack.done(file,false);
          return null;
        }
        errorCallBack.done(file,file.exists());
        return null;
      }
 else       if (file.isDropBoxFile()) {
        CloudStorage cloudStorageDropbox=dataUtils.getAccount(OpenMode.DROPBOX);
        try {
          byte[] tempBytes=new byte[0];
          ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(tempBytes);
          cloudStorageDropbox.upload(CloudUtil.stripPath(OpenMode.DROPBOX,file.getPath()),byteArrayInputStream,0l,true);
          errorCallBack.done(file,true);
        }
 catch (        Exception e) {
          e.printStackTrace();
          errorCallBack.done(file,false);
        }
      }
 else       if (file.isBoxFile()) {
        CloudStorage cloudStorageBox=dataUtils.getAccount(OpenMode.BOX);
        try {
          byte[] tempBytes=new byte[0];
          ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(tempBytes);
          cloudStorageBox.upload(CloudUtil.stripPath(OpenMode.BOX,file.getPath()),byteArrayInputStream,0l,true);
          errorCallBack.done(file,true);
        }
 catch (        Exception e) {
          e.printStackTrace();
          errorCallBack.done(file,false);
        }
      }
 else       if (file.isOneDriveFile()) {
        CloudStorage cloudStorageOneDrive=dataUtils.getAccount(OpenMode.ONEDRIVE);
        try {
          byte[] tempBytes=new byte[0];
          ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(tempBytes);
          cloudStorageOneDrive.upload(CloudUtil.stripPath(OpenMode.ONEDRIVE,file.getPath()),byteArrayInputStream,0l,true);
          errorCallBack.done(file,true);
        }
 catch (        Exception e) {
          e.printStackTrace();
          errorCallBack.done(file,false);
        }
      }
 else       if (file.isGoogleDriveFile()) {
        CloudStorage cloudStorageGdrive=dataUtils.getAccount(OpenMode.GDRIVE);
        try {
          byte[] tempBytes=new byte[0];
          ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(tempBytes);
          cloudStorageGdrive.upload(CloudUtil.stripPath(OpenMode.GDRIVE,file.getPath()),byteArrayInputStream,0l,true);
          errorCallBack.done(file,true);
        }
 catch (        Exception e) {
          e.printStackTrace();
          errorCallBack.done(file,false);
        }
      }
 else       if (file.isOtgFile()) {
        DocumentFile fileToCreate=OTGUtil.getDocumentFile(file.getPath(),context,false);
        if (fileToCreate != null)         errorCallBack.exists(file);
        DocumentFile parentDirectory=OTGUtil.getDocumentFile(file.getParent(),context,false);
        if (parentDirectory.isDirectory()) {
          parentDirectory.createFile(file.getName(context).substring(file.getName().lastIndexOf(""String_Node_Str"")),file.getName(context));
          errorCallBack.done(file,true);
        }
 else         errorCallBack.done(file,false);
        return null;
      }
 else {
        if (file.isLocal() || file.isRoot()) {
          int mode=checkFolder(new File(file.getParent()),context);
          if (mode == 2) {
            errorCallBack.launchSAF(file);
            return null;
          }
          if (mode == 1 || mode == 0)           FileUtil.mkfile(file.getFile(),context);
          if (!file.exists() && rootMode) {
            file.setMode(OpenMode.ROOT);
            if (file.exists())             errorCallBack.exists(file);
            try {
              RootUtils.mkFile(file.getPath());
            }
 catch (            ShellNotRunningException e) {
              e.printStackTrace();
            }
            errorCallBack.done(file,file.exists());
            return null;
          }
          errorCallBack.done(file,file.exists());
          return null;
        }
        errorCallBack.done(file,file.exists());
      }
      return null;
    }
  }
.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}","public static void mkfile(@NonNull final HybridFile file,final Context context,final boolean rootMode,@NonNull final ErrorCallBack errorCallBack){
  new AsyncTask<Void,Void,Void>(){
    private DataUtils dataUtils=DataUtils.getInstance();
    @Override protected Void doInBackground(    Void... params){
      if (!Operations.isFileNameValid(file.getName(context))) {
        errorCallBack.invalidName(file);
        return null;
      }
      if (file.exists()) {
        errorCallBack.exists(file);
        return null;
      }
      if (file.isSftp()) {
        OutputStream out=file.getOutputStream(context);
        if (out == null) {
          errorCallBack.done(file,false);
          return null;
        }
        try {
          out.close();
          errorCallBack.done(file,true);
          return null;
        }
 catch (        IOException e) {
          errorCallBack.done(file,false);
          return null;
        }
      }
      if (file.isSmb()) {
        try {
          file.getSmbFile(2000).createNewFile();
        }
 catch (        SmbException e) {
          e.printStackTrace();
          errorCallBack.done(file,false);
          return null;
        }
        errorCallBack.done(file,file.exists());
        return null;
      }
 else       if (file.isDropBoxFile()) {
        CloudStorage cloudStorageDropbox=dataUtils.getAccount(OpenMode.DROPBOX);
        try {
          byte[] tempBytes=new byte[0];
          ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(tempBytes);
          cloudStorageDropbox.upload(CloudUtil.stripPath(OpenMode.DROPBOX,file.getPath()),byteArrayInputStream,0l,true);
          errorCallBack.done(file,true);
        }
 catch (        Exception e) {
          e.printStackTrace();
          errorCallBack.done(file,false);
        }
      }
 else       if (file.isBoxFile()) {
        CloudStorage cloudStorageBox=dataUtils.getAccount(OpenMode.BOX);
        try {
          byte[] tempBytes=new byte[0];
          ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(tempBytes);
          cloudStorageBox.upload(CloudUtil.stripPath(OpenMode.BOX,file.getPath()),byteArrayInputStream,0l,true);
          errorCallBack.done(file,true);
        }
 catch (        Exception e) {
          e.printStackTrace();
          errorCallBack.done(file,false);
        }
      }
 else       if (file.isOneDriveFile()) {
        CloudStorage cloudStorageOneDrive=dataUtils.getAccount(OpenMode.ONEDRIVE);
        try {
          byte[] tempBytes=new byte[0];
          ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(tempBytes);
          cloudStorageOneDrive.upload(CloudUtil.stripPath(OpenMode.ONEDRIVE,file.getPath()),byteArrayInputStream,0l,true);
          errorCallBack.done(file,true);
        }
 catch (        Exception e) {
          e.printStackTrace();
          errorCallBack.done(file,false);
        }
      }
 else       if (file.isGoogleDriveFile()) {
        CloudStorage cloudStorageGdrive=dataUtils.getAccount(OpenMode.GDRIVE);
        try {
          byte[] tempBytes=new byte[0];
          ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(tempBytes);
          cloudStorageGdrive.upload(CloudUtil.stripPath(OpenMode.GDRIVE,file.getPath()),byteArrayInputStream,0l,true);
          errorCallBack.done(file,true);
        }
 catch (        Exception e) {
          e.printStackTrace();
          errorCallBack.done(file,false);
        }
      }
 else       if (file.isOtgFile()) {
        DocumentFile fileToCreate=OTGUtil.getDocumentFile(file.getPath(),context,false);
        if (fileToCreate != null)         errorCallBack.exists(file);
        DocumentFile parentDirectory=OTGUtil.getDocumentFile(file.getParent(),context,false);
        if (parentDirectory.isDirectory()) {
          parentDirectory.createFile(file.getName(context).substring(file.getName().lastIndexOf(""String_Node_Str"")),file.getName(context));
          errorCallBack.done(file,true);
        }
 else         errorCallBack.done(file,false);
        return null;
      }
 else {
        if (file.isLocal() || file.isRoot()) {
          int mode=checkFolder(new File(file.getParent()),context);
          if (mode == 2) {
            errorCallBack.launchSAF(file);
            return null;
          }
          if (mode == 1 || mode == 0)           FileUtil.mkfile(file.getFile(),context);
          if (!file.exists() && rootMode) {
            file.setMode(OpenMode.ROOT);
            if (file.exists())             errorCallBack.exists(file);
            try {
              RootUtils.mkFile(file.getPath());
            }
 catch (            ShellNotRunningException e) {
              e.printStackTrace();
            }
            errorCallBack.done(file,file.exists());
            return null;
          }
          errorCallBack.done(file,file.exists());
          return null;
        }
        errorCallBack.done(file,file.exists());
      }
      return null;
    }
  }
.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}",0.989775461106656
162441,"@Override public void onCreate(){
  super.onCreate();
  AppCompatDelegate.setCompatVectorFromResourcesEnabled(true);
  mInstance=this;
  utilsProvider=new UtilitiesProvider(this);
  mUtilsHandler=new UtilsHandler(this);
  sBackgroundHandlerThread.start();
  sBackgroundHandler=new Handler(sBackgroundHandlerThread.getLooper());
  StrictMode.VmPolicy.Builder builder=new StrictMode.VmPolicy.Builder();
  StrictMode.setVmPolicy(builder.build());
}","@Override public void onCreate(){
  super.onCreate();
  AppCompatDelegate.setCompatVectorFromResourcesEnabled(true);
  sBackgroundHandlerThread=new HandlerThread(""String_Node_Str"");
  mInstance=this;
  utilsProvider=new UtilitiesProvider(this);
  mUtilsHandler=new UtilsHandler(this);
  sBackgroundHandlerThread.start();
  sBackgroundHandler=new Handler(sBackgroundHandlerThread.getLooper());
  StrictMode.VmPolicy.Builder builder=new StrictMode.VmPolicy.Builder();
  StrictMode.setVmPolicy(builder.build());
}",0.9319371727748692
162442,"/** 
 * Initializes the floating action button to act as to save data from an external intent
 */
private void initFabToSave(final ArrayList<Uri> uris){
  floatingActionButton.removeButton(findViewById(R.id.menu_new_folder));
  floatingActionButton.removeButton(findViewById(R.id.menu_new_file));
  floatingActionButton.removeButton(findViewById(R.id.menu_new_cloud));
  floatingActionButton.setMenuButtonIcon(R.drawable.ic_file_download_white_24dp);
  floatingActionButton.getMenuButton().setOnClickListener(v -> {
    FileUtil.writeUriToStorage(MainActivity.this,uris,getContentResolver(),getCurrentMainFragment().getCurrentPath());
    Toast.makeText(MainActivity.this,getResources().getString(R.string.saving),Toast.LENGTH_LONG).show();
    finish();
  }
);
}","/** 
 * Initializes the floating action button to act as to save data from an external intent
 */
private void initFabToSave(final ArrayList<Uri> uris){
  floatingActionButton.removeButton(findViewById(R.id.menu_new_folder));
  floatingActionButton.removeButton(findViewById(R.id.menu_new_file));
  floatingActionButton.removeButton(findViewById(R.id.menu_new_cloud));
  floatingActionButton.setMenuButtonIcon(R.drawable.ic_file_download_white_24dp);
  floatingActionButton.getMenuButton().setOnClickListener(v -> {
    FileUtil.writeUriToStorage(MainActivity.this,uris,getContentResolver(),getCurrentMainFragment().getCurrentPath());
    Toast.makeText(MainActivity.this,getResources().getString(R.string.saving),Toast.LENGTH_LONG).show();
    finish();
  }
);
  floatingActionButton.setVisibility(View.VISIBLE);
  floatingActionButton.getMenuButton().show();
}",0.939076923076923
162443,"@Override public <E>E doInBackground(){
  for (  Uri uri : uris) {
    BufferedInputStream bufferedInputStream=null;
    try {
      bufferedInputStream=new BufferedInputStream(contentResolver.openInputStream(uri));
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
    BufferedOutputStream bufferedOutputStream=null;
    try {
      DocumentFile documentFile=DocumentFile.fromSingleUri(mainActivity,uri);
      String finalFilePath=currentPath + ""String_Node_Str"" + documentFile.getName();
      DataUtils dataUtils=DataUtils.getInstance();
      HybridFile hFile=new HybridFile(OpenMode.UNKNOWN,currentPath);
      hFile.generateMode(mainActivity);
switch (hFile.getMode()) {
case FILE:
case ROOT:
        if (!FileUtil.isWritable(new File(finalFilePath))) {
          AppConfig.toast(mainActivity,mainActivity.getResources().getString(R.string.not_allowed));
          return null;
        }
      bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(finalFilePath));
    break;
case SMB:
  OutputStream outputStream=new SmbFile(finalFilePath).getOutputStream();
bufferedOutputStream=new BufferedOutputStream(outputStream);
break;
case DROPBOX:
CloudStorage cloudStorageDropbox=dataUtils.getAccount(OpenMode.DROPBOX);
cloudStorageDropbox.upload(CloudUtil.stripPath(OpenMode.DROPBOX,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case BOX:
CloudStorage cloudStorageBox=dataUtils.getAccount(OpenMode.BOX);
cloudStorageBox.upload(CloudUtil.stripPath(OpenMode.BOX,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case ONEDRIVE:
CloudStorage cloudStorageOneDrive=dataUtils.getAccount(OpenMode.ONEDRIVE);
cloudStorageOneDrive.upload(CloudUtil.stripPath(OpenMode.ONEDRIVE,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case GDRIVE:
CloudStorage cloudStorageGDrive=dataUtils.getAccount(OpenMode.GDRIVE);
cloudStorageGDrive.upload(CloudUtil.stripPath(OpenMode.GDRIVE,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case OTG:
DocumentFile documentTargetFile=OTGUtil.getDocumentFile(finalFilePath,mainActivity,true);
bufferedOutputStream=new BufferedOutputStream(contentResolver.openOutputStream(documentTargetFile.getUri()),GenericCopyUtil.DEFAULT_BUFFER_SIZE);
break;
default :
return null;
}
int count=0;
byte[] buffer=new byte[GenericCopyUtil.DEFAULT_BUFFER_SIZE];
while (count != -1) {
count=bufferedInputStream.read(buffer);
if (count != -1) {
bufferedOutputStream.write(buffer,0,count);
}
}
bufferedOutputStream.flush();
}
 catch (FileNotFoundException e) {
e.printStackTrace();
}
catch (MalformedURLException e) {
e.printStackTrace();
}
catch (IOException e) {
e.printStackTrace();
}
 finally {
try {
if (bufferedInputStream != null) {
bufferedInputStream.close();
}
if (bufferedOutputStream != null) {
bufferedOutputStream.close();
}
}
 catch (IOException e) {
e.printStackTrace();
}
}
}
return null;
}","@Override public <E>E doInBackground(){
  for (  Uri uri : uris) {
    BufferedInputStream bufferedInputStream=null;
    try {
      bufferedInputStream=new BufferedInputStream(contentResolver.openInputStream(uri));
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
    BufferedOutputStream bufferedOutputStream=null;
    try {
      DocumentFile documentFile=DocumentFile.fromSingleUri(mainActivity,uri);
      String finalFilePath=currentPath + ""String_Node_Str"" + documentFile.getName();
      DataUtils dataUtils=DataUtils.getInstance();
      HybridFile hFile=new HybridFile(OpenMode.UNKNOWN,currentPath);
      hFile.generateMode(mainActivity);
switch (hFile.getMode()) {
case FILE:
case ROOT:
        File targetFile=new File(finalFilePath);
      if (!FileUtil.isWritable(targetFile)) {
        AppConfig.toast(mainActivity,mainActivity.getString(R.string.not_allowed));
        return null;
      }
    if (DocumentFile.fromFile(targetFile).exists()) {
      AppConfig.toast(mainActivity,mainActivity.getString(R.string.cannot_overwrite));
      return null;
    }
  bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(targetFile));
break;
case SMB:
SmbFile targetSmbFile=new SmbFile(finalFilePath);
if (targetSmbFile.exists()) {
AppConfig.toast(mainActivity,mainActivity.getString(R.string.cannot_overwrite));
return null;
}
 else {
OutputStream outputStream=targetSmbFile.getOutputStream();
bufferedOutputStream=new BufferedOutputStream(outputStream);
}
break;
case SFTP:
AppConfig.toast(mainActivity,mainActivity.getString(R.string.not_allowed));
return null;
case DROPBOX:
CloudStorage cloudStorageDropbox=dataUtils.getAccount(OpenMode.DROPBOX);
cloudStorageDropbox.upload(CloudUtil.stripPath(OpenMode.DROPBOX,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case BOX:
CloudStorage cloudStorageBox=dataUtils.getAccount(OpenMode.BOX);
cloudStorageBox.upload(CloudUtil.stripPath(OpenMode.BOX,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case ONEDRIVE:
CloudStorage cloudStorageOneDrive=dataUtils.getAccount(OpenMode.ONEDRIVE);
cloudStorageOneDrive.upload(CloudUtil.stripPath(OpenMode.ONEDRIVE,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case GDRIVE:
CloudStorage cloudStorageGDrive=dataUtils.getAccount(OpenMode.GDRIVE);
cloudStorageGDrive.upload(CloudUtil.stripPath(OpenMode.GDRIVE,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case OTG:
DocumentFile documentTargetFile=OTGUtil.getDocumentFile(finalFilePath,mainActivity,true);
if (documentTargetFile.exists()) {
AppConfig.toast(mainActivity,mainActivity.getString(R.string.cannot_overwrite));
return null;
}
bufferedOutputStream=new BufferedOutputStream(contentResolver.openOutputStream(documentTargetFile.getUri()),GenericCopyUtil.DEFAULT_BUFFER_SIZE);
break;
default :
return null;
}
int count=0;
byte[] buffer=new byte[GenericCopyUtil.DEFAULT_BUFFER_SIZE];
while (count != -1) {
count=bufferedInputStream.read(buffer);
if (count != -1) {
bufferedOutputStream.write(buffer,0,count);
}
}
bufferedOutputStream.flush();
}
 catch (FileNotFoundException e) {
e.printStackTrace();
}
catch (MalformedURLException e) {
e.printStackTrace();
}
catch (IOException e) {
e.printStackTrace();
}
 finally {
try {
if (bufferedInputStream != null) {
bufferedInputStream.close();
}
if (bufferedOutputStream != null) {
bufferedOutputStream.close();
}
}
 catch (IOException e) {
e.printStackTrace();
}
}
}
return null;
}",0.8641017685386286
162444,"/** 
 * Writes uri stream from external application to the specified path
 * @param uris
 * @param contentResolver
 * @param currentPath
 */
public static final void writeUriToStorage(final MainActivity mainActivity,final ArrayList<Uri> uris,final ContentResolver contentResolver,final String currentPath){
  AppConfig.runInBackground(new AppConfig.CustomAsyncCallbacks(){
    @Override public <E>E doInBackground(){
      for (      Uri uri : uris) {
        BufferedInputStream bufferedInputStream=null;
        try {
          bufferedInputStream=new BufferedInputStream(contentResolver.openInputStream(uri));
        }
 catch (        FileNotFoundException e) {
          e.printStackTrace();
        }
        BufferedOutputStream bufferedOutputStream=null;
        try {
          DocumentFile documentFile=DocumentFile.fromSingleUri(mainActivity,uri);
          String finalFilePath=currentPath + ""String_Node_Str"" + documentFile.getName();
          DataUtils dataUtils=DataUtils.getInstance();
          HybridFile hFile=new HybridFile(OpenMode.UNKNOWN,currentPath);
          hFile.generateMode(mainActivity);
switch (hFile.getMode()) {
case FILE:
case ROOT:
            if (!FileUtil.isWritable(new File(finalFilePath))) {
              AppConfig.toast(mainActivity,mainActivity.getResources().getString(R.string.not_allowed));
              return null;
            }
          bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(finalFilePath));
        break;
case SMB:
      OutputStream outputStream=new SmbFile(finalFilePath).getOutputStream();
    bufferedOutputStream=new BufferedOutputStream(outputStream);
  break;
case DROPBOX:
CloudStorage cloudStorageDropbox=dataUtils.getAccount(OpenMode.DROPBOX);
cloudStorageDropbox.upload(CloudUtil.stripPath(OpenMode.DROPBOX,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case BOX:
CloudStorage cloudStorageBox=dataUtils.getAccount(OpenMode.BOX);
cloudStorageBox.upload(CloudUtil.stripPath(OpenMode.BOX,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case ONEDRIVE:
CloudStorage cloudStorageOneDrive=dataUtils.getAccount(OpenMode.ONEDRIVE);
cloudStorageOneDrive.upload(CloudUtil.stripPath(OpenMode.ONEDRIVE,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case GDRIVE:
CloudStorage cloudStorageGDrive=dataUtils.getAccount(OpenMode.GDRIVE);
cloudStorageGDrive.upload(CloudUtil.stripPath(OpenMode.GDRIVE,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case OTG:
DocumentFile documentTargetFile=OTGUtil.getDocumentFile(finalFilePath,mainActivity,true);
bufferedOutputStream=new BufferedOutputStream(contentResolver.openOutputStream(documentTargetFile.getUri()),GenericCopyUtil.DEFAULT_BUFFER_SIZE);
break;
default :
return null;
}
int count=0;
byte[] buffer=new byte[GenericCopyUtil.DEFAULT_BUFFER_SIZE];
while (count != -1) {
count=bufferedInputStream.read(buffer);
if (count != -1) {
bufferedOutputStream.write(buffer,0,count);
}
}
bufferedOutputStream.flush();
}
 catch (FileNotFoundException e) {
e.printStackTrace();
}
catch (MalformedURLException e) {
e.printStackTrace();
}
catch (IOException e) {
e.printStackTrace();
}
 finally {
try {
if (bufferedInputStream != null) {
bufferedInputStream.close();
}
if (bufferedOutputStream != null) {
bufferedOutputStream.close();
}
}
 catch (IOException e) {
e.printStackTrace();
}
}
}
return null;
}
@Override public Void onPostExecute(Object result){
return null;
}
@Override public Void onPreExecute(){
return null;
}
@Override public Void publishResult(Object... result){
return null;
}
@Override public <T>T[] params(){
return null;
}
}
);
}","/** 
 * Writes uri stream from external application to the specified path
 * @param uris
 * @param contentResolver
 * @param currentPath
 */
public static final void writeUriToStorage(@NonNull final MainActivity mainActivity,@NonNull final ArrayList<Uri> uris,@NonNull final ContentResolver contentResolver,@NonNull final String currentPath){
  AppConfig.runInBackground(new AppConfig.CustomAsyncCallbacks(){
    @Override public <E>E doInBackground(){
      for (      Uri uri : uris) {
        BufferedInputStream bufferedInputStream=null;
        try {
          bufferedInputStream=new BufferedInputStream(contentResolver.openInputStream(uri));
        }
 catch (        FileNotFoundException e) {
          e.printStackTrace();
        }
        BufferedOutputStream bufferedOutputStream=null;
        try {
          DocumentFile documentFile=DocumentFile.fromSingleUri(mainActivity,uri);
          String finalFilePath=currentPath + ""String_Node_Str"" + documentFile.getName();
          DataUtils dataUtils=DataUtils.getInstance();
          HybridFile hFile=new HybridFile(OpenMode.UNKNOWN,currentPath);
          hFile.generateMode(mainActivity);
switch (hFile.getMode()) {
case FILE:
case ROOT:
            File targetFile=new File(finalFilePath);
          if (!FileUtil.isWritable(targetFile)) {
            AppConfig.toast(mainActivity,mainActivity.getString(R.string.not_allowed));
            return null;
          }
        if (DocumentFile.fromFile(targetFile).exists()) {
          AppConfig.toast(mainActivity,mainActivity.getString(R.string.cannot_overwrite));
          return null;
        }
      bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(targetFile));
    break;
case SMB:
  SmbFile targetSmbFile=new SmbFile(finalFilePath);
if (targetSmbFile.exists()) {
  AppConfig.toast(mainActivity,mainActivity.getString(R.string.cannot_overwrite));
  return null;
}
 else {
  OutputStream outputStream=targetSmbFile.getOutputStream();
  bufferedOutputStream=new BufferedOutputStream(outputStream);
}
break;
case SFTP:
AppConfig.toast(mainActivity,mainActivity.getString(R.string.not_allowed));
return null;
case DROPBOX:
CloudStorage cloudStorageDropbox=dataUtils.getAccount(OpenMode.DROPBOX);
cloudStorageDropbox.upload(CloudUtil.stripPath(OpenMode.DROPBOX,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case BOX:
CloudStorage cloudStorageBox=dataUtils.getAccount(OpenMode.BOX);
cloudStorageBox.upload(CloudUtil.stripPath(OpenMode.BOX,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case ONEDRIVE:
CloudStorage cloudStorageOneDrive=dataUtils.getAccount(OpenMode.ONEDRIVE);
cloudStorageOneDrive.upload(CloudUtil.stripPath(OpenMode.ONEDRIVE,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case GDRIVE:
CloudStorage cloudStorageGDrive=dataUtils.getAccount(OpenMode.GDRIVE);
cloudStorageGDrive.upload(CloudUtil.stripPath(OpenMode.GDRIVE,finalFilePath),bufferedInputStream,documentFile.length(),true);
break;
case OTG:
DocumentFile documentTargetFile=OTGUtil.getDocumentFile(finalFilePath,mainActivity,true);
if (documentTargetFile.exists()) {
AppConfig.toast(mainActivity,mainActivity.getString(R.string.cannot_overwrite));
return null;
}
bufferedOutputStream=new BufferedOutputStream(contentResolver.openOutputStream(documentTargetFile.getUri()),GenericCopyUtil.DEFAULT_BUFFER_SIZE);
break;
default :
return null;
}
int count=0;
byte[] buffer=new byte[GenericCopyUtil.DEFAULT_BUFFER_SIZE];
while (count != -1) {
count=bufferedInputStream.read(buffer);
if (count != -1) {
bufferedOutputStream.write(buffer,0,count);
}
}
bufferedOutputStream.flush();
}
 catch (FileNotFoundException e) {
e.printStackTrace();
}
catch (MalformedURLException e) {
e.printStackTrace();
}
catch (IOException e) {
e.printStackTrace();
}
 finally {
try {
if (bufferedInputStream != null) {
bufferedInputStream.close();
}
if (bufferedOutputStream != null) {
bufferedOutputStream.close();
}
}
 catch (IOException e) {
e.printStackTrace();
}
}
}
return null;
}
@Override public Void onPostExecute(Object result){
return null;
}
@Override public Void onPreExecute(){
return null;
}
@Override public Void publishResult(Object... result){
return null;
}
@Override public <T>T[] params(){
return null;
}
}
);
}",0.8796576032225579
162445,"private ArrayList<LayoutElementParcelable> listVideos(){
  ArrayList<LayoutElementParcelable> songs=new ArrayList<>();
  final String[] projection={MediaStore.Images.Media.DATA};
  final Cursor cursor=c.getContentResolver().query(MediaStore.Video.Media.EXTERNAL_CONTENT_URI,projection,null,null,null);
  if (cursor.getCount() > 0 && cursor.moveToFirst()) {
    do {
      String path=cursor.getString(cursor.getColumnIndex(MediaStore.Files.FileColumns.DATA));
      HybridFileParcelable strings=RootHelper.generateBaseFile(new File(path),showHiddenFiles);
      if (strings != null) {
        LayoutElementParcelable parcelable=createListParcelables(strings);
        if (parcelable != null)         songs.add(parcelable);
      }
    }
 while (cursor.moveToNext());
  }
  cursor.close();
  return songs;
}","private ArrayList<LayoutElementParcelable> listVideos(){
  ArrayList<LayoutElementParcelable> videos=new ArrayList<>();
  final String[] projection={MediaStore.Images.Media.DATA};
  final Cursor cursor=c.getContentResolver().query(MediaStore.Video.Media.EXTERNAL_CONTENT_URI,projection,null,null,null);
  if (cursor == null)   return videos;
 else   if (cursor.getCount() > 0 && cursor.moveToFirst()) {
    do {
      String path=cursor.getString(cursor.getColumnIndex(MediaStore.Files.FileColumns.DATA));
      HybridFileParcelable strings=RootHelper.generateBaseFile(new File(path),showHiddenFiles);
      if (strings != null) {
        LayoutElementParcelable parcelable=createListParcelables(strings);
        if (parcelable != null)         videos.add(parcelable);
      }
    }
 while (cursor.moveToNext());
  }
  cursor.close();
  return videos;
}",0.9566265060240964
162446,"private ArrayList<LayoutElementParcelable> listRecentFiles(){
  ArrayList<LayoutElementParcelable> songs=new ArrayList<>();
  final String[] projection={MediaStore.Files.FileColumns.DATA,MediaStore.Files.FileColumns.DATE_MODIFIED};
  Calendar c=Calendar.getInstance();
  c.set(Calendar.DAY_OF_YEAR,c.get(Calendar.DAY_OF_YEAR) - 2);
  Date d=c.getTime();
  Cursor cursor=this.c.getContentResolver().query(MediaStore.Files.getContentUri(""String_Node_Str""),projection,null,null,null);
  if (cursor == null)   return songs;
  if (cursor.getCount() > 0 && cursor.moveToFirst()) {
    do {
      String path=cursor.getString(cursor.getColumnIndex(MediaStore.Files.FileColumns.DATA));
      File f=new File(path);
      if (d.compareTo(new Date(f.lastModified())) != 1 && !f.isDirectory()) {
        HybridFileParcelable strings=RootHelper.generateBaseFile(new File(path),showHiddenFiles);
        if (strings != null) {
          LayoutElementParcelable parcelable=createListParcelables(strings);
          if (parcelable != null)           songs.add(parcelable);
        }
      }
    }
 while (cursor.moveToNext());
  }
  cursor.close();
  Collections.sort(songs,(lhs,rhs) -> -1 * Long.valueOf(lhs.date).compareTo(rhs.date));
  if (songs.size() > 20)   for (int i=songs.size() - 1; i > 20; i--) {
    songs.remove(i);
  }
  return songs;
}","private ArrayList<LayoutElementParcelable> listRecentFiles(){
  ArrayList<LayoutElementParcelable> recentFiles=new ArrayList<>();
  final String[] projection={MediaStore.Files.FileColumns.DATA,MediaStore.Files.FileColumns.DATE_MODIFIED};
  Calendar c=Calendar.getInstance();
  c.set(Calendar.DAY_OF_YEAR,c.get(Calendar.DAY_OF_YEAR) - 2);
  Date d=c.getTime();
  Cursor cursor=this.c.getContentResolver().query(MediaStore.Files.getContentUri(""String_Node_Str""),projection,null,null,null);
  if (cursor == null)   return recentFiles;
  if (cursor.getCount() > 0 && cursor.moveToFirst()) {
    do {
      String path=cursor.getString(cursor.getColumnIndex(MediaStore.Files.FileColumns.DATA));
      File f=new File(path);
      if (d.compareTo(new Date(f.lastModified())) != 1 && !f.isDirectory()) {
        HybridFileParcelable strings=RootHelper.generateBaseFile(new File(path),showHiddenFiles);
        if (strings != null) {
          LayoutElementParcelable parcelable=createListParcelables(strings);
          if (parcelable != null)           recentFiles.add(parcelable);
        }
      }
    }
 while (cursor.moveToNext());
  }
  cursor.close();
  Collections.sort(recentFiles,(lhs,rhs) -> -1 * Long.valueOf(lhs.date).compareTo(rhs.date));
  if (recentFiles.size() > 20)   for (int i=recentFiles.size() - 1; i > 20; i--) {
    recentFiles.remove(i);
  }
  return recentFiles;
}",0.9587932303164092
162447,"private ArrayList<LayoutElementParcelable> listImages(){
  ArrayList<LayoutElementParcelable> songs=new ArrayList<>();
  final String[] projection={MediaStore.Images.Media.DATA};
  final Cursor cursor=c.getContentResolver().query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,projection,null,null,null);
  if (cursor.getCount() > 0 && cursor.moveToFirst()) {
    do {
      String path=cursor.getString(cursor.getColumnIndex(MediaStore.Files.FileColumns.DATA));
      HybridFileParcelable strings=RootHelper.generateBaseFile(new File(path),showHiddenFiles);
      if (strings != null) {
        LayoutElementParcelable parcelable=createListParcelables(strings);
        if (parcelable != null)         songs.add(parcelable);
      }
    }
 while (cursor.moveToNext());
  }
  cursor.close();
  return songs;
}","private ArrayList<LayoutElementParcelable> listImages(){
  ArrayList<LayoutElementParcelable> images=new ArrayList<>();
  final String[] projection={MediaStore.Images.Media.DATA};
  final Cursor cursor=c.getContentResolver().query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,projection,null,null,null);
  if (cursor == null)   return images;
 else   if (cursor.getCount() > 0 && cursor.moveToFirst()) {
    do {
      String path=cursor.getString(cursor.getColumnIndex(MediaStore.Files.FileColumns.DATA));
      HybridFileParcelable strings=RootHelper.generateBaseFile(new File(path),showHiddenFiles);
      if (strings != null) {
        LayoutElementParcelable parcelable=createListParcelables(strings);
        if (parcelable != null)         images.add(parcelable);
      }
    }
 while (cursor.moveToNext());
  }
  cursor.close();
  return images;
}",0.9566787003610108
162448,"private ArrayList<LayoutElementParcelable> listDocs(){
  ArrayList<LayoutElementParcelable> songs=new ArrayList<>();
  final String[] projection={MediaStore.Files.FileColumns.DATA};
  Cursor cursor=c.getContentResolver().query(MediaStore.Files.getContentUri(""String_Node_Str""),projection,null,null,null);
  String[] types=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  if (cursor.getCount() > 0 && cursor.moveToFirst()) {
    do {
      String path=cursor.getString(cursor.getColumnIndex(MediaStore.Files.FileColumns.DATA));
      if (path != null && Arrays.asList(types).contains(path)) {
        HybridFileParcelable strings=RootHelper.generateBaseFile(new File(path),showHiddenFiles);
        if (strings != null) {
          LayoutElementParcelable parcelable=createListParcelables(strings);
          if (parcelable != null)           songs.add(parcelable);
        }
      }
    }
 while (cursor.moveToNext());
  }
  cursor.close();
  Collections.sort(songs,(lhs,rhs) -> -1 * Long.valueOf(lhs.date).compareTo(rhs.date));
  if (songs.size() > 20)   for (int i=songs.size() - 1; i > 20; i--) {
    songs.remove(i);
  }
  return songs;
}","private ArrayList<LayoutElementParcelable> listDocs(){
  ArrayList<LayoutElementParcelable> docs=new ArrayList<>();
  final String[] projection={MediaStore.Files.FileColumns.DATA};
  Cursor cursor=c.getContentResolver().query(MediaStore.Files.getContentUri(""String_Node_Str""),projection,null,null,null);
  String[] types=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  if (cursor == null)   return docs;
 else   if (cursor.getCount() > 0 && cursor.moveToFirst()) {
    do {
      String path=cursor.getString(cursor.getColumnIndex(MediaStore.Files.FileColumns.DATA));
      if (path != null && Arrays.asList(types).contains(path)) {
        HybridFileParcelable strings=RootHelper.generateBaseFile(new File(path),showHiddenFiles);
        if (strings != null) {
          LayoutElementParcelable parcelable=createListParcelables(strings);
          if (parcelable != null)           docs.add(parcelable);
        }
      }
    }
 while (cursor.moveToNext());
  }
  cursor.close();
  Collections.sort(docs,(lhs,rhs) -> -1 * Long.valueOf(lhs.date).compareTo(rhs.date));
  if (docs.size() > 20)   for (int i=docs.size() - 1; i > 20; i--) {
    docs.remove(i);
  }
  return docs;
}",0.9701686121919584
162449,"private ArrayList<LayoutElementParcelable> listApks(){
  ArrayList<LayoutElementParcelable> songs=new ArrayList<>();
  final String[] projection={MediaStore.Files.FileColumns.DATA};
  Cursor cursor=c.getContentResolver().query(MediaStore.Files.getContentUri(""String_Node_Str""),projection,null,null,null);
  if (cursor.getCount() > 0 && cursor.moveToFirst()) {
    do {
      String path=cursor.getString(cursor.getColumnIndex(MediaStore.Files.FileColumns.DATA));
      if (path != null && path.endsWith(""String_Node_Str"")) {
        HybridFileParcelable strings=RootHelper.generateBaseFile(new File(path),showHiddenFiles);
        if (strings != null) {
          LayoutElementParcelable parcelable=createListParcelables(strings);
          if (parcelable != null)           songs.add(parcelable);
        }
      }
    }
 while (cursor.moveToNext());
  }
  cursor.close();
  return songs;
}","private ArrayList<LayoutElementParcelable> listApks(){
  ArrayList<LayoutElementParcelable> apks=new ArrayList<>();
  final String[] projection={MediaStore.Files.FileColumns.DATA};
  Cursor cursor=c.getContentResolver().query(MediaStore.Files.getContentUri(""String_Node_Str""),projection,null,null,null);
  if (cursor == null)   return apks;
 else   if (cursor.getCount() > 0 && cursor.moveToFirst()) {
    do {
      String path=cursor.getString(cursor.getColumnIndex(MediaStore.Files.FileColumns.DATA));
      if (path != null && path.endsWith(""String_Node_Str"")) {
        HybridFileParcelable strings=RootHelper.generateBaseFile(new File(path),showHiddenFiles);
        if (strings != null) {
          LayoutElementParcelable parcelable=createListParcelables(strings);
          if (parcelable != null)           apks.add(parcelable);
        }
      }
    }
 while (cursor.moveToNext());
  }
  cursor.close();
  return apks;
}",0.964873765093304
162450,"private ArrayList<LayoutElementParcelable> listaudio(){
  String selection=MediaStore.Audio.Media.IS_MUSIC + ""String_Node_Str"";
  String[] projection={MediaStore.Audio.Media.DATA};
  Cursor cursor=c.getContentResolver().query(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,projection,selection,null,null);
  ArrayList<LayoutElementParcelable> songs=new ArrayList<>();
  if (cursor.getCount() > 0 && cursor.moveToFirst()) {
    do {
      String path=cursor.getString(cursor.getColumnIndex(MediaStore.Files.FileColumns.DATA));
      HybridFileParcelable strings=RootHelper.generateBaseFile(new File(path),showHiddenFiles);
      if (strings != null) {
        LayoutElementParcelable parcelable=createListParcelables(strings);
        if (parcelable != null)         songs.add(parcelable);
      }
    }
 while (cursor.moveToNext());
  }
  cursor.close();
  return songs;
}","private ArrayList<LayoutElementParcelable> listaudio(){
  String selection=MediaStore.Audio.Media.IS_MUSIC + ""String_Node_Str"";
  String[] projection={MediaStore.Audio.Media.DATA};
  Cursor cursor=c.getContentResolver().query(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,projection,selection,null,null);
  ArrayList<LayoutElementParcelable> songs=new ArrayList<>();
  if (cursor == null)   return songs;
 else   if (cursor.getCount() > 0 && cursor.moveToFirst()) {
    do {
      String path=cursor.getString(cursor.getColumnIndex(MediaStore.Files.FileColumns.DATA));
      HybridFileParcelable strings=RootHelper.generateBaseFile(new File(path),showHiddenFiles);
      if (strings != null) {
        LayoutElementParcelable parcelable=createListParcelables(strings);
        if (parcelable != null)         songs.add(parcelable);
      }
    }
 while (cursor.moveToNext());
  }
  cursor.close();
  return songs;
}",0.9753086419753086
162451,"public String getOriginalPath(boolean savePaths,SharedPreferences sharedPreferences){
  if (savePaths && FileUtils.isPathAccesible(path,sharedPreferences)) {
    return path;
  }
 else {
    return home;
  }
}","public String getOriginalPath(boolean savePaths,SharedPreferences sharedPreferences){
  if (savePaths && FileUtils.isPathAccessible(path,sharedPreferences)) {
    return path;
  }
 else {
    return home;
  }
}",0.9976133651551312
162452,"private void loadEditDialog(final PathSwitchPreference p){
  int fab_skin=activity.getColorPreference().getColor(ColorUsage.ACCENT);
  LayoutInflater li=LayoutInflater.from(activity);
  final View v=li.inflate(R.layout.dialog_twoedittexts,null);
  ((TextInputLayout)v.findViewById(R.id.text_input1)).setHint(getString(R.string.name));
  ((TextInputLayout)v.findViewById(R.id.text_input2)).setHint(getString(R.string.directory));
  final EditText editText1=((EditText)v.findViewById(R.id.text1)), editText2=((EditText)v.findViewById(R.id.text2));
  editText1.setText(p.getTitle());
  editText2.setText(p.getSummary());
  final MaterialDialog dialog=new MaterialDialog.Builder(getActivity()).title(R.string.edit_shortcut).theme(activity.getAppTheme().getMaterialDialogTheme()).positiveColor(fab_skin).positiveText(getString(R.string.edit).toUpperCase()).negativeColor(fab_skin).negativeText(android.R.string.cancel).customView(v,false).build();
  dialog.getActionButton(DialogAction.POSITIVE).setEnabled(FileUtils.isPathAccesible(editText2.getText().toString(),sharedPrefs));
  disableButtonIfTitleEmpty(editText1,dialog);
  disableButtonIfNotPath(editText2,dialog);
  dialog.getActionButton(DialogAction.POSITIVE).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      final String oldName=p.getTitle().toString();
      final String oldPath=p.getSummary().toString();
      dataUtils.removeBook(position.get(p));
      position.remove(p);
      getPreferenceScreen().removePreference(p);
      p.setTitle(editText1.getText());
      p.setSummary(editText2.getText());
      position.put(p,position.size());
      getPreferenceScreen().addPreference(p);
      String[] values=new String[]{editText1.getText().toString(),editText2.getText().toString()};
      dataUtils.addBook(values);
      AppConfig.runInBackground(new Runnable(){
        @Override public void run(){
          utilsHandler.renameBookmark(oldName,oldPath,editText1.getText().toString(),editText2.getText().toString());
        }
      }
);
      dialog.dismiss();
    }
  }
);
  dialog.show();
}","private void loadEditDialog(final PathSwitchPreference p){
  int fab_skin=activity.getColorPreference().getColor(ColorUsage.ACCENT);
  LayoutInflater li=LayoutInflater.from(activity);
  final View v=li.inflate(R.layout.dialog_twoedittexts,null);
  ((TextInputLayout)v.findViewById(R.id.text_input1)).setHint(getString(R.string.name));
  ((TextInputLayout)v.findViewById(R.id.text_input2)).setHint(getString(R.string.directory));
  final EditText editText1=((EditText)v.findViewById(R.id.text1)), editText2=((EditText)v.findViewById(R.id.text2));
  editText1.setText(p.getTitle());
  editText2.setText(p.getSummary());
  final MaterialDialog dialog=new MaterialDialog.Builder(getActivity()).title(R.string.edit_shortcut).theme(activity.getAppTheme().getMaterialDialogTheme()).positiveColor(fab_skin).positiveText(getString(R.string.edit).toUpperCase()).negativeColor(fab_skin).negativeText(android.R.string.cancel).customView(v,false).build();
  dialog.getActionButton(DialogAction.POSITIVE).setEnabled(FileUtils.isPathAccessible(editText2.getText().toString(),sharedPrefs));
  disableButtonIfTitleEmpty(editText1,dialog);
  disableButtonIfNotPath(editText2,dialog);
  dialog.getActionButton(DialogAction.POSITIVE).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      final String oldName=p.getTitle().toString();
      final String oldPath=p.getSummary().toString();
      dataUtils.removeBook(position.get(p));
      position.remove(p);
      getPreferenceScreen().removePreference(p);
      p.setTitle(editText1.getText());
      p.setSummary(editText2.getText());
      position.put(p,position.size());
      getPreferenceScreen().addPreference(p);
      String[] values=new String[]{editText1.getText().toString(),editText2.getText().toString()};
      dataUtils.addBook(values);
      AppConfig.runInBackground(new Runnable(){
        @Override public void run(){
          utilsHandler.renameBookmark(oldName,oldPath,editText1.getText().toString(),editText2.getText().toString());
        }
      }
);
      dialog.dismiss();
    }
  }
);
  dialog.show();
}",0.9997633136094676
162453,"private void disableButtonIfNotPath(EditText path,final MaterialDialog dialog){
  path.addTextChangedListener(new SimpleTextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      dialog.getActionButton(DialogAction.POSITIVE).setEnabled(FileUtils.isPathAccesible(s.toString(),sharedPrefs));
    }
  }
);
}","private void disableButtonIfNotPath(EditText path,final MaterialDialog dialog){
  path.addTextChangedListener(new SimpleTextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      dialog.getActionButton(DialogAction.POSITIVE).setEnabled(FileUtils.isPathAccessible(s.toString(),sharedPrefs));
    }
  }
);
}",0.998468606431853
162454,"public static void showChangePathsDialog(final MainActivity mainActivity,final SharedPreferences prefs){
  final MaterialDialog.Builder a=new MaterialDialog.Builder(mainActivity);
  a.input(null,mainActivity.getCurrentMainFragment().getCurrentPath(),false,(dialog,charSequence) -> {
    boolean isAccessible=FileUtils.isPathAccesible(charSequence.toString(),prefs);
    dialog.getActionButton(DialogAction.POSITIVE).setEnabled(isAccessible);
  }
);
  a.alwaysCallInputCallback();
  int accentColor=mainActivity.getColorPreference().getColor(ColorUsage.ACCENT);
  a.widgetColor(accentColor);
  a.theme(mainActivity.getAppTheme().getMaterialDialogTheme());
  a.title(R.string.enterpath);
  a.positiveText(R.string.go);
  a.positiveColor(accentColor);
  a.negativeText(R.string.cancel);
  a.negativeColor(accentColor);
  a.onPositive((dialog,which) -> {
    mainActivity.getCurrentMainFragment().loadlist(dialog.getInputEditText().getText().toString(),false,OpenMode.UNKNOWN);
  }
);
  a.show();
}","public static void showChangePathsDialog(final MainActivity mainActivity,final SharedPreferences prefs){
  final MaterialDialog.Builder a=new MaterialDialog.Builder(mainActivity);
  a.input(null,mainActivity.getCurrentMainFragment().getCurrentPath(),false,(dialog,charSequence) -> {
    boolean isAccessible=FileUtils.isPathAccessible(charSequence.toString(),prefs);
    dialog.getActionButton(DialogAction.POSITIVE).setEnabled(isAccessible);
  }
);
  a.alwaysCallInputCallback();
  int accentColor=mainActivity.getColorPreference().getColor(ColorUsage.ACCENT);
  a.widgetColor(accentColor);
  a.theme(mainActivity.getAppTheme().getMaterialDialogTheme());
  a.title(R.string.enterpath);
  a.positiveText(R.string.go);
  a.positiveColor(accentColor);
  a.negativeText(R.string.cancel);
  a.negativeColor(accentColor);
  a.onPositive((dialog,which) -> {
    mainActivity.getCurrentMainFragment().loadlist(dialog.getInputEditText().getText().toString(),false,OpenMode.UNKNOWN);
  }
);
  a.show();
}",0.9994972347913524
162455,"public void refreshDrawer(){
  Menu menu=navView.getMenu();
  menu.clear();
  actionViewStateManager.deselectCurrentActionView();
  int order=0;
  ArrayList<String> storageDirectories=mainActivity.getStorageDirectories();
  storage_count=0;
  for (  String file : storageDirectories) {
    File f=new File(file);
    String name;
    @DrawableRes int icon1=R.drawable.ic_sd_storage_white_24dp;
    if (""String_Node_Str"".equals(file) || ""String_Node_Str"".equals(file)) {
      name=resources.getString(R.string.storage);
    }
 else     if (""String_Node_Str"".equals(file)) {
      name=resources.getString(R.string.extstorage);
    }
 else     if (""String_Node_Str"".equals(file)) {
      name=resources.getString(R.string.rootdirectory);
      icon1=R.drawable.ic_drawer_root_white;
    }
 else     if (file.contains(OTGUtil.PREFIX_OTG)) {
      name=""String_Node_Str"";
      icon1=R.drawable.ic_usb_white_24dp;
    }
 else     name=f.getName();
    if (!f.isDirectory() || f.canExecute()) {
      addNewItem(menu,STORAGES_GROUP,order++,name,new MenuMetadata(file),icon1,R.drawable.ic_show_chart_black_24dp);
      if (storage_count == 0)       firstPath=file;
 else       if (storage_count == 1)       secondPath=file;
      storage_count++;
    }
  }
  dataUtils.setStorages(storageDirectories);
  if (dataUtils.getServers().size() > 0) {
    Collections.sort(dataUtils.getServers(),new BookSorter());
synchronized (dataUtils.getServers()) {
      for (      String[] file : dataUtils.getServers()) {
        addNewItem(menu,SERVERS_GROUP,order++,file[0],new MenuMetadata(file[1]),R.drawable.ic_settings_remote_white_24dp,R.drawable.ic_edit_24dp);
      }
    }
  }
  ArrayList<String[]> accountAuthenticationList=new ArrayList<>();
  if (CloudSheetFragment.isCloudProviderAvailable(mainActivity)) {
    for (    CloudStorage cloudStorage : dataUtils.getAccounts()) {
      if (cloudStorage instanceof Dropbox) {
        addNewItem(menu,CLOUDS_GROUP,order++,CloudHandler.CLOUD_NAME_DROPBOX,new MenuMetadata(CloudHandler.CLOUD_PREFIX_DROPBOX + ""String_Node_Str""),R.drawable.ic_dropbox_white_24dp,R.drawable.ic_edit_24dp);
        accountAuthenticationList.add(new String[]{CloudHandler.CLOUD_NAME_DROPBOX,CloudHandler.CLOUD_PREFIX_DROPBOX + ""String_Node_Str""});
      }
 else       if (cloudStorage instanceof Box) {
        addNewItem(menu,CLOUDS_GROUP,order++,CloudHandler.CLOUD_NAME_BOX,new MenuMetadata(CloudHandler.CLOUD_PREFIX_BOX + ""String_Node_Str""),R.drawable.ic_box_white_24dp,R.drawable.ic_edit_24dp);
        accountAuthenticationList.add(new String[]{CloudHandler.CLOUD_NAME_BOX,CloudHandler.CLOUD_PREFIX_BOX + ""String_Node_Str""});
      }
 else       if (cloudStorage instanceof OneDrive) {
        addNewItem(menu,CLOUDS_GROUP,order++,CloudHandler.CLOUD_NAME_ONE_DRIVE,new MenuMetadata(CloudHandler.CLOUD_PREFIX_ONE_DRIVE + ""String_Node_Str""),R.drawable.ic_onedrive_white_24dp,R.drawable.ic_edit_24dp);
        accountAuthenticationList.add(new String[]{CloudHandler.CLOUD_NAME_ONE_DRIVE,CloudHandler.CLOUD_PREFIX_ONE_DRIVE + ""String_Node_Str""});
      }
 else       if (cloudStorage instanceof GoogleDrive) {
        addNewItem(menu,CLOUDS_GROUP,order++,CloudHandler.CLOUD_NAME_GOOGLE_DRIVE,new MenuMetadata(CloudHandler.CLOUD_PREFIX_GOOGLE_DRIVE + ""String_Node_Str""),R.drawable.ic_google_drive_white_24dp,R.drawable.ic_edit_24dp);
        accountAuthenticationList.add(new String[]{CloudHandler.CLOUD_NAME_GOOGLE_DRIVE,CloudHandler.CLOUD_PREFIX_GOOGLE_DRIVE + ""String_Node_Str""});
      }
    }
    Collections.sort(accountAuthenticationList,new BookSorter());
  }
  if (mainActivity.getBoolean(PREFERENCE_SHOW_SIDEBAR_FOLDERS)) {
    if (dataUtils.getBooks().size() > 0) {
      Collections.sort(dataUtils.getBooks(),new BookSorter());
synchronized (dataUtils.getBooks()) {
        for (        String[] file : dataUtils.getBooks()) {
          addNewItem(menu,FOLDERS_GROUP,order++,file[0],new MenuMetadata(file[1]),R.drawable.ic_folder_white_24dp,R.drawable.ic_edit_24dp);
        }
      }
    }
  }
  Boolean[] quickAccessPref=TinyDB.getBooleanArray(mainActivity.getPrefs(),QuickAccessPref.KEY,QuickAccessPref.DEFAULT);
  if (mainActivity.getBoolean(PREFERENCE_SHOW_SIDEBAR_QUICKACCESSES)) {
    if (quickAccessPref[0]) {
      addNewItem(menu,QUICKACCESSES_GROUP,order++,R.string.quick,new MenuMetadata(""String_Node_Str""),R.drawable.ic_star_white_24dp,null);
    }
    if (quickAccessPref[1]) {
      addNewItem(menu,QUICKACCESSES_GROUP,order++,R.string.recent,new MenuMetadata(""String_Node_Str""),R.drawable.ic_history_white_24dp,null);
    }
    if (quickAccessPref[2]) {
      addNewItem(menu,QUICKACCESSES_GROUP,order++,R.string.images,new MenuMetadata(""String_Node_Str""),R.drawable.ic_photo_library_white_24dp,null);
    }
    if (quickAccessPref[3]) {
      addNewItem(menu,QUICKACCESSES_GROUP,order++,R.string.videos,new MenuMetadata(""String_Node_Str""),R.drawable.ic_video_library_white_24dp,null);
    }
    if (quickAccessPref[4]) {
      addNewItem(menu,QUICKACCESSES_GROUP,order++,R.string.audio,new MenuMetadata(""String_Node_Str""),R.drawable.ic_library_music_white_24dp,null);
    }
    if (quickAccessPref[5]) {
      addNewItem(menu,QUICKACCESSES_GROUP,order++,R.string.documents,new MenuMetadata(""String_Node_Str""),R.drawable.ic_library_books_white_24dp,null);
    }
    if (quickAccessPref[6]) {
      addNewItem(menu,QUICKACCESSES_GROUP,order++,R.string.apks,new MenuMetadata(""String_Node_Str""),R.drawable.ic_apk_library_white_24dp,null);
    }
  }
  addNewItem(menu,LASTGROUP,order++,R.string.ftp,new MenuMetadata(() -> {
    FragmentTransaction transaction2=mainActivity.getSupportFragmentManager().beginTransaction();
    transaction2.replace(R.id.content_frame,new FTPServerFragment());
    mainActivity.getAppbar().getAppbarLayout().animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
    pending_fragmentTransaction=transaction2;
    if (!isDrawerLocked)     close();
 else     onDrawerClosed();
  }
),R.drawable.ic_ftp_white_24dp,null);
  addNewItem(menu,LASTGROUP,order++,R.string.apps,new MenuMetadata(() -> {
    FragmentTransaction transaction2=mainActivity.getSupportFragmentManager().beginTransaction();
    transaction2.replace(R.id.content_frame,new AppsListFragment());
    mainActivity.getAppbar().getAppbarLayout().animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
    pending_fragmentTransaction=transaction2;
    if (!isDrawerLocked)     close();
 else     onDrawerClosed();
  }
),R.drawable.ic_android_white_24dp,null);
  addNewItem(menu,LASTGROUP,order++,R.string.setting,new MenuMetadata(() -> {
    Intent in=new Intent(mainActivity,PreferencesActivity.class);
    mainActivity.startActivity(in);
    mainActivity.finish();
  }
),R.drawable.ic_settings_white_24dp,null);
  for (int i=0; i < navView.getMenu().size(); i++) {
    navView.getMenu().getItem(i).setEnabled(true);
  }
  for (  int group : GROUPS) {
    menu.setGroupCheckable(group,true,true);
  }
  MenuItem item=navView.getSelected();
  if (item != null) {
    item.setChecked(true);
    actionViewStateManager.selectActionView(item);
    isSomethingSelected=true;
  }
}","public void refreshDrawer(){
  Menu menu=navView.getMenu();
  menu.clear();
  actionViewStateManager.deselectCurrentActionView();
  int order=0;
  ArrayList<String> storageDirectories=mainActivity.getStorageDirectories();
  storage_count=0;
  for (  String file : storageDirectories) {
    File f=new File(file);
    String name;
    @DrawableRes int icon1=R.drawable.ic_sd_storage_white_24dp;
    if (""String_Node_Str"".equals(file) || ""String_Node_Str"".equals(file) || ""String_Node_Str"".equals(file)) {
      name=resources.getString(R.string.storage);
    }
 else     if (""String_Node_Str"".equals(file)) {
      name=resources.getString(R.string.extstorage);
    }
 else     if (""String_Node_Str"".equals(file)) {
      name=resources.getString(R.string.rootdirectory);
      icon1=R.drawable.ic_drawer_root_white;
    }
 else     if (file.contains(OTGUtil.PREFIX_OTG)) {
      name=""String_Node_Str"";
      icon1=R.drawable.ic_usb_white_24dp;
    }
 else     name=f.getName();
    if (f.isDirectory() || f.canExecute()) {
      addNewItem(menu,STORAGES_GROUP,order++,name,new MenuMetadata(file),icon1,R.drawable.ic_show_chart_black_24dp);
      if (storage_count == 0)       firstPath=file;
 else       if (storage_count == 1)       secondPath=file;
      storage_count++;
    }
  }
  dataUtils.setStorages(storageDirectories);
  if (dataUtils.getServers().size() > 0) {
    Collections.sort(dataUtils.getServers(),new BookSorter());
synchronized (dataUtils.getServers()) {
      for (      String[] file : dataUtils.getServers()) {
        addNewItem(menu,SERVERS_GROUP,order++,file[0],new MenuMetadata(file[1]),R.drawable.ic_settings_remote_white_24dp,R.drawable.ic_edit_24dp);
      }
    }
  }
  ArrayList<String[]> accountAuthenticationList=new ArrayList<>();
  if (CloudSheetFragment.isCloudProviderAvailable(mainActivity)) {
    for (    CloudStorage cloudStorage : dataUtils.getAccounts()) {
      if (cloudStorage instanceof Dropbox) {
        addNewItem(menu,CLOUDS_GROUP,order++,CloudHandler.CLOUD_NAME_DROPBOX,new MenuMetadata(CloudHandler.CLOUD_PREFIX_DROPBOX + ""String_Node_Str""),R.drawable.ic_dropbox_white_24dp,R.drawable.ic_edit_24dp);
        accountAuthenticationList.add(new String[]{CloudHandler.CLOUD_NAME_DROPBOX,CloudHandler.CLOUD_PREFIX_DROPBOX + ""String_Node_Str""});
      }
 else       if (cloudStorage instanceof Box) {
        addNewItem(menu,CLOUDS_GROUP,order++,CloudHandler.CLOUD_NAME_BOX,new MenuMetadata(CloudHandler.CLOUD_PREFIX_BOX + ""String_Node_Str""),R.drawable.ic_box_white_24dp,R.drawable.ic_edit_24dp);
        accountAuthenticationList.add(new String[]{CloudHandler.CLOUD_NAME_BOX,CloudHandler.CLOUD_PREFIX_BOX + ""String_Node_Str""});
      }
 else       if (cloudStorage instanceof OneDrive) {
        addNewItem(menu,CLOUDS_GROUP,order++,CloudHandler.CLOUD_NAME_ONE_DRIVE,new MenuMetadata(CloudHandler.CLOUD_PREFIX_ONE_DRIVE + ""String_Node_Str""),R.drawable.ic_onedrive_white_24dp,R.drawable.ic_edit_24dp);
        accountAuthenticationList.add(new String[]{CloudHandler.CLOUD_NAME_ONE_DRIVE,CloudHandler.CLOUD_PREFIX_ONE_DRIVE + ""String_Node_Str""});
      }
 else       if (cloudStorage instanceof GoogleDrive) {
        addNewItem(menu,CLOUDS_GROUP,order++,CloudHandler.CLOUD_NAME_GOOGLE_DRIVE,new MenuMetadata(CloudHandler.CLOUD_PREFIX_GOOGLE_DRIVE + ""String_Node_Str""),R.drawable.ic_google_drive_white_24dp,R.drawable.ic_edit_24dp);
        accountAuthenticationList.add(new String[]{CloudHandler.CLOUD_NAME_GOOGLE_DRIVE,CloudHandler.CLOUD_PREFIX_GOOGLE_DRIVE + ""String_Node_Str""});
      }
    }
    Collections.sort(accountAuthenticationList,new BookSorter());
  }
  if (mainActivity.getBoolean(PREFERENCE_SHOW_SIDEBAR_FOLDERS)) {
    if (dataUtils.getBooks().size() > 0) {
      Collections.sort(dataUtils.getBooks(),new BookSorter());
synchronized (dataUtils.getBooks()) {
        for (        String[] file : dataUtils.getBooks()) {
          addNewItem(menu,FOLDERS_GROUP,order++,file[0],new MenuMetadata(file[1]),R.drawable.ic_folder_white_24dp,R.drawable.ic_edit_24dp);
        }
      }
    }
  }
  Boolean[] quickAccessPref=TinyDB.getBooleanArray(mainActivity.getPrefs(),QuickAccessPref.KEY,QuickAccessPref.DEFAULT);
  if (mainActivity.getBoolean(PREFERENCE_SHOW_SIDEBAR_QUICKACCESSES)) {
    if (quickAccessPref[0]) {
      addNewItem(menu,QUICKACCESSES_GROUP,order++,R.string.quick,new MenuMetadata(""String_Node_Str""),R.drawable.ic_star_white_24dp,null);
    }
    if (quickAccessPref[1]) {
      addNewItem(menu,QUICKACCESSES_GROUP,order++,R.string.recent,new MenuMetadata(""String_Node_Str""),R.drawable.ic_history_white_24dp,null);
    }
    if (quickAccessPref[2]) {
      addNewItem(menu,QUICKACCESSES_GROUP,order++,R.string.images,new MenuMetadata(""String_Node_Str""),R.drawable.ic_photo_library_white_24dp,null);
    }
    if (quickAccessPref[3]) {
      addNewItem(menu,QUICKACCESSES_GROUP,order++,R.string.videos,new MenuMetadata(""String_Node_Str""),R.drawable.ic_video_library_white_24dp,null);
    }
    if (quickAccessPref[4]) {
      addNewItem(menu,QUICKACCESSES_GROUP,order++,R.string.audio,new MenuMetadata(""String_Node_Str""),R.drawable.ic_library_music_white_24dp,null);
    }
    if (quickAccessPref[5]) {
      addNewItem(menu,QUICKACCESSES_GROUP,order++,R.string.documents,new MenuMetadata(""String_Node_Str""),R.drawable.ic_library_books_white_24dp,null);
    }
    if (quickAccessPref[6]) {
      addNewItem(menu,QUICKACCESSES_GROUP,order++,R.string.apks,new MenuMetadata(""String_Node_Str""),R.drawable.ic_apk_library_white_24dp,null);
    }
  }
  addNewItem(menu,LASTGROUP,order++,R.string.ftp,new MenuMetadata(() -> {
    FragmentTransaction transaction2=mainActivity.getSupportFragmentManager().beginTransaction();
    transaction2.replace(R.id.content_frame,new FTPServerFragment());
    mainActivity.getAppbar().getAppbarLayout().animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
    pending_fragmentTransaction=transaction2;
    if (!isDrawerLocked)     close();
 else     onDrawerClosed();
  }
),R.drawable.ic_ftp_white_24dp,null);
  addNewItem(menu,LASTGROUP,order++,R.string.apps,new MenuMetadata(() -> {
    FragmentTransaction transaction2=mainActivity.getSupportFragmentManager().beginTransaction();
    transaction2.replace(R.id.content_frame,new AppsListFragment());
    mainActivity.getAppbar().getAppbarLayout().animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
    pending_fragmentTransaction=transaction2;
    if (!isDrawerLocked)     close();
 else     onDrawerClosed();
  }
),R.drawable.ic_android_white_24dp,null);
  addNewItem(menu,LASTGROUP,order++,R.string.setting,new MenuMetadata(() -> {
    Intent in=new Intent(mainActivity,PreferencesActivity.class);
    mainActivity.startActivity(in);
    mainActivity.finish();
  }
),R.drawable.ic_settings_white_24dp,null);
  for (int i=0; i < navView.getMenu().size(); i++) {
    navView.getMenu().getItem(i).setEnabled(true);
  }
  for (  int group : GROUPS) {
    menu.setGroupCheckable(group,true,true);
  }
  MenuItem item=navView.getSelected();
  if (item != null) {
    item.setChecked(true);
    actionViewStateManager.selectActionView(item);
    isSomethingSelected=true;
  }
}",0.9975608056310544
162456,"public void run(){
  try {
    s.setStreamSrc(smbFile,si);
    activity.runOnUiThread(() -> {
      try {
        Uri uri=Uri.parse(Streamer.URL + Uri.fromFile(new File(Uri.parse(smbFile.getPath()).getPath())).getEncodedPath());
        Intent i=new Intent(Intent.ACTION_VIEW);
        i.setDataAndType(uri,MimeTypes.getMimeType(smbFile.getPath(),smbFile.isDirectory()));
        PackageManager packageManager=activity.getPackageManager();
        List<ResolveInfo> resInfos=packageManager.queryIntentActivities(i,0);
        if (resInfos != null && resInfos.size() > 0)         activity.startActivity(i);
 else         Toast.makeText(activity,activity.getResources().getString(R.string.smb_launch_error),Toast.LENGTH_SHORT).show();
      }
 catch (      ActivityNotFoundException|SmbException e) {
        e.printStackTrace();
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void run(){
  try {
    s.setStreamSrc(new SmbFile(baseFile.getPath()),baseFile.getSize());
    activity.runOnUiThread(() -> {
      try {
        Uri uri=Uri.parse(Streamer.URL + Uri.fromFile(new File(Uri.parse(baseFile.getPath()).getPath())).getEncodedPath());
        Intent i=new Intent(Intent.ACTION_VIEW);
        i.setDataAndType(uri,MimeTypes.getMimeType(baseFile.getPath(),baseFile.isDirectory()));
        PackageManager packageManager=activity.getPackageManager();
        List<ResolveInfo> resInfos=packageManager.queryIntentActivities(i,0);
        if (resInfos != null && resInfos.size() > 0)         activity.startActivity(i);
 else         Toast.makeText(activity,activity.getResources().getString(R.string.smb_launch_error),Toast.LENGTH_SHORT).show();
      }
 catch (      ActivityNotFoundException e) {
        e.printStackTrace();
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8890097932535365
162457,"/** 
 * method called when list item is clicked in the adapter
 * @param isBackButton is it the back button aka '..'
 * @param position the position
 * @param e the list item
 * @param imageView the check {@link RoundedImageView} that is to be animated
 */
public void onListItemClicked(boolean isBackButton,int position,LayoutElementParcelable e,ImageView imageView){
  if (results) {
    FragmentManager fragmentManager=getActivity().getSupportFragmentManager();
    SearchWorkerFragment fragment=(SearchWorkerFragment)fragmentManager.findFragmentByTag(MainActivity.TAG_ASYNC_HELPER);
    if (fragment != null) {
      if (fragment.mSearchAsyncTask.getStatus() == AsyncTask.Status.RUNNING) {
        fragment.mSearchAsyncTask.cancel(true);
      }
      getActivity().getSupportFragmentManager().beginTransaction().remove(fragment).commit();
    }
    mRetainSearchTask=true;
    results=false;
  }
 else {
    mRetainSearchTask=false;
    MainActivityHelper.SEARCH_TEXT=null;
  }
  if (selection) {
    if (isBackButton) {
      selection=false;
      if (mActionMode != null)       mActionMode.finish();
      mActionMode=null;
    }
 else {
      adapter.toggleChecked(position,imageView);
    }
  }
 else {
    if (isBackButton) {
      goBackItemClick();
    }
 else {
      if (getMainActivity().getAppbar().getSearchView().isEnabled()) {
        getMainActivity().getAppbar().getSearchView().hideSearchView();
      }
      String path=!e.hasSymlink() ? e.desc : e.symlink;
      if (e.isDirectory) {
        computeScroll();
        loadlist(path,false,openMode);
      }
 else       if (e.desc.endsWith(CryptUtil.CRYPT_EXTENSION)) {
        isEncryptOpen=true;
        encryptBaseFile=new HybridFileParcelable(getActivity().getExternalCacheDir().getPath() + ""String_Node_Str"" + e.generateBaseFile().getName().replace(CryptUtil.CRYPT_EXTENSION,""String_Node_Str""));
        encryptBaseFiles.add(encryptBaseFile);
        EncryptDecryptUtils.decryptFile(getContext(),getMainActivity(),ma,openMode,e.generateBaseFile(),getActivity().getExternalCacheDir().getPath(),utilsProvider,true);
      }
 else {
        if (getMainActivity().mReturnIntent) {
          returnIntentResults(e.generateBaseFile());
        }
 else {
switch (e.getMode()) {
case SMB:
            try {
              SmbFile smbFile=new SmbFile(e.desc);
              launchSMB(smbFile,e.longSize,getMainActivity());
            }
 catch (            MalformedURLException ex) {
              ex.printStackTrace();
            }
          break;
case SFTP:
        Toast.makeText(getContext(),getResources().getString(R.string.please_wait),Toast.LENGTH_LONG).show();
      SshClientUtils.launchSftp(e.generateBaseFile(),getMainActivity());
    break;
case OTG:
  FileUtils.openFile(OTGUtil.getDocumentFile(e.desc,getContext(),false),(MainActivity)getActivity(),sharedPref);
break;
case DROPBOX:
case BOX:
case GDRIVE:
case ONEDRIVE:
Toast.makeText(getContext(),getResources().getString(R.string.please_wait),Toast.LENGTH_LONG).show();
CloudUtil.launchCloud(e.generateBaseFile(),openMode,getMainActivity());
break;
default :
FileUtils.openFile(new File(e.desc),(MainActivity)getActivity(),sharedPref);
break;
}
dataUtils.addHistoryFile(e.desc);
}
}
}
}
}","/** 
 * method called when list item is clicked in the adapter
 * @param isBackButton is it the back button aka '..'
 * @param position the position
 * @param e the list item
 * @param imageView the check {@link RoundedImageView} that is to be animated
 */
public void onListItemClicked(boolean isBackButton,int position,LayoutElementParcelable e,ImageView imageView){
  if (results) {
    FragmentManager fragmentManager=getActivity().getSupportFragmentManager();
    SearchWorkerFragment fragment=(SearchWorkerFragment)fragmentManager.findFragmentByTag(MainActivity.TAG_ASYNC_HELPER);
    if (fragment != null) {
      if (fragment.mSearchAsyncTask.getStatus() == AsyncTask.Status.RUNNING) {
        fragment.mSearchAsyncTask.cancel(true);
      }
      getActivity().getSupportFragmentManager().beginTransaction().remove(fragment).commit();
    }
    mRetainSearchTask=true;
    results=false;
  }
 else {
    mRetainSearchTask=false;
    MainActivityHelper.SEARCH_TEXT=null;
  }
  if (selection) {
    if (isBackButton) {
      selection=false;
      if (mActionMode != null)       mActionMode.finish();
      mActionMode=null;
    }
 else {
      adapter.toggleChecked(position,imageView);
    }
  }
 else {
    if (isBackButton) {
      goBackItemClick();
    }
 else {
      if (getMainActivity().getAppbar().getSearchView().isEnabled()) {
        getMainActivity().getAppbar().getSearchView().hideSearchView();
      }
      String path=!e.hasSymlink() ? e.desc : e.symlink;
      if (e.isDirectory) {
        computeScroll();
        loadlist(path,false,openMode);
      }
 else       if (e.desc.endsWith(CryptUtil.CRYPT_EXTENSION)) {
        isEncryptOpen=true;
        encryptBaseFile=new HybridFileParcelable(getActivity().getExternalCacheDir().getPath() + ""String_Node_Str"" + e.generateBaseFile().getName().replace(CryptUtil.CRYPT_EXTENSION,""String_Node_Str""));
        encryptBaseFiles.add(encryptBaseFile);
        EncryptDecryptUtils.decryptFile(getContext(),getMainActivity(),ma,openMode,e.generateBaseFile(),getActivity().getExternalCacheDir().getPath(),utilsProvider,true);
      }
 else {
        if (getMainActivity().mReturnIntent) {
          returnIntentResults(e.generateBaseFile());
        }
 else {
switch (e.getMode()) {
case SMB:
            launchSMB(e.generateBaseFile(),getMainActivity());
          break;
case SFTP:
        Toast.makeText(getContext(),getResources().getString(R.string.please_wait),Toast.LENGTH_LONG).show();
      SshClientUtils.launchSftp(e.generateBaseFile(),getMainActivity());
    break;
case OTG:
  FileUtils.openFile(OTGUtil.getDocumentFile(e.desc,getContext(),false),(MainActivity)getActivity(),sharedPref);
break;
case DROPBOX:
case BOX:
case GDRIVE:
case ONEDRIVE:
Toast.makeText(getContext(),getResources().getString(R.string.please_wait),Toast.LENGTH_LONG).show();
CloudUtil.launchCloud(e.generateBaseFile(),openMode,getMainActivity());
break;
default :
FileUtils.openFile(new File(e.desc),(MainActivity)getActivity(),sharedPref);
break;
}
dataUtils.addHistoryFile(e.desc);
}
}
}
}
}",0.9660557768924304
162458,"public static void launchSMB(final SmbFile smbFile,final long si,final Activity activity){
  final Streamer s=Streamer.getInstance();
  new Thread(){
    public void run(){
      try {
        s.setStreamSrc(smbFile,si);
        activity.runOnUiThread(() -> {
          try {
            Uri uri=Uri.parse(Streamer.URL + Uri.fromFile(new File(Uri.parse(smbFile.getPath()).getPath())).getEncodedPath());
            Intent i=new Intent(Intent.ACTION_VIEW);
            i.setDataAndType(uri,MimeTypes.getMimeType(smbFile.getPath(),smbFile.isDirectory()));
            PackageManager packageManager=activity.getPackageManager();
            List<ResolveInfo> resInfos=packageManager.queryIntentActivities(i,0);
            if (resInfos != null && resInfos.size() > 0)             activity.startActivity(i);
 else             Toast.makeText(activity,activity.getResources().getString(R.string.smb_launch_error),Toast.LENGTH_SHORT).show();
          }
 catch (          ActivityNotFoundException|SmbException e) {
            e.printStackTrace();
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
.start();
}","public static void launchSMB(final HybridFileParcelable baseFile,final Activity activity){
  final Streamer s=Streamer.getInstance();
  new Thread(){
    public void run(){
      try {
        s.setStreamSrc(new SmbFile(baseFile.getPath()),baseFile.getSize());
        activity.runOnUiThread(() -> {
          try {
            Uri uri=Uri.parse(Streamer.URL + Uri.fromFile(new File(Uri.parse(baseFile.getPath()).getPath())).getEncodedPath());
            Intent i=new Intent(Intent.ACTION_VIEW);
            i.setDataAndType(uri,MimeTypes.getMimeType(baseFile.getPath(),baseFile.isDirectory()));
            PackageManager packageManager=activity.getPackageManager();
            List<ResolveInfo> resInfos=packageManager.queryIntentActivities(i,0);
            if (resInfos != null && resInfos.size() > 0)             activity.startActivity(i);
 else             Toast.makeText(activity,activity.getResources().getString(R.string.smb_launch_error),Toast.LENGTH_SHORT).show();
          }
 catch (          ActivityNotFoundException e) {
            e.printStackTrace();
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
.start();
}",0.7468139337298216
162459,"/** 
 * Starts a HTTP server to given port.<p> Throws an IOException if the socket is already in use
 */
public StreamServer(int port,File wwwroot) throws IOException {
  myTcpPort=port;
  this.myRootDir=wwwroot;
  myServerSocket=new ServerSocket(myTcpPort);
  myThread=new Thread(() -> {
    try {
      while (true) {
        Socket accept=myServerSocket.accept();
        new HTTPSession(accept);
      }
    }
 catch (    IOException ioe) {
    }
  }
);
  myThread.setDaemon(true);
  myThread.start();
}","/** 
 * Starts a HTTP server to given port.<p> Throws an IOException if the socket is already in use
 */
public StreamServer(int port,File wwwroot) throws IOException {
  myTcpPort=port;
  this.myRootDir=wwwroot;
  myServerSocket=tryBind(myTcpPort);
  myThread=new Thread(() -> {
    try {
      while (true) {
        Socket accept=myServerSocket.accept();
        new HTTPSession(accept);
      }
    }
 catch (    IOException ioe) {
    }
  }
);
  myThread.setDaemon(true);
  myThread.start();
}",0.9771144278606964
162460,"public CloudStreamServer(File wwwroot) throws IOException {
  this.myRootDir=wwwroot;
  myServerSocket=new ServerSocket(myTcpPort);
  myThread=new Thread(() -> {
    try {
      while (true) {
        Socket accept=myServerSocket.accept();
        new HTTPSession(accept);
      }
    }
 catch (    IOException ioe) {
    }
  }
);
  myThread.setDaemon(true);
  myThread.start();
}","public CloudStreamServer(File wwwroot) throws IOException {
  this.myRootDir=wwwroot;
  myServerSocket=tryBind(myTcpPort);
  myThread=new Thread(() -> {
    try {
      while (true) {
        Socket accept=myServerSocket.accept();
        new HTTPSession(accept);
      }
    }
 catch (    IOException ioe) {
    }
  }
);
  myThread.setDaemon(true);
  myThread.start();
}",0.9693741677762984
162461,"private void showPopup(View v,final AppDataParcelable rowItem){
  v.setOnClickListener(view -> {
    PopupMenu popupMenu=new PopupMenu(app.getActivity(),view);
    popupMenu.setOnMenuItemClickListener(item -> {
      int colorAccent=themedActivity.getColorPreference().getColor(ColorUsage.ACCENT);
switch (item.getItemId()) {
case R.id.open:
        Intent i1=app.getActivity().getPackageManager().getLaunchIntentForPackage(rowItem.packageName);
      if (i1 != null)       app.startActivity(i1);
 else       Toast.makeText(app.getActivity(),app.getResources().getString(R.string.not_allowed),Toast.LENGTH_LONG).show();
    return true;
case R.id.share:
  ArrayList<File> arrayList2=new ArrayList<File>();
arrayList2.add(new File(rowItem.path));
themedActivity.getColorPreference();
FileUtils.shareFiles(arrayList2,app.getActivity(),utilsProvider.getAppTheme(),colorAccent);
return true;
case R.id.unins:
final HybridFileParcelable f1=new HybridFileParcelable(rowItem.path);
f1.setMode(OpenMode.ROOT);
if ((Integer.valueOf(rowItem.data.substring(0,rowItem.data.indexOf(""String_Node_Str""))) & ApplicationInfo.FLAG_SYSTEM) != 0) {
if (app.Sp.getBoolean(PreferencesConstants.PREFERENCE_ROOTMODE,false)) {
MaterialDialog.Builder builder1=new MaterialDialog.Builder(app.getActivity());
builder1.theme(utilsProvider.getAppTheme().getMaterialDialogTheme()).content(app.getResources().getString(R.string.unin_system_apk)).title(app.getResources().getString(R.string.warning)).negativeColor(colorAccent).positiveColor(colorAccent).negativeText(app.getResources().getString(R.string.no)).positiveText(app.getResources().getString(R.string.yes)).callback(new MaterialDialog.ButtonCallback(){
@Override public void onNegative(MaterialDialog materialDialog){
materialDialog.cancel();
}
@Override public void onPositive(MaterialDialog materialDialog){
ArrayList<HybridFileParcelable> files=new ArrayList<>();
if (Build.VERSION.SDK_INT >= 21) {
String parent=f1.getParent();
if (!parent.equals(""String_Node_Str"") && !parent.equals(""String_Node_Str"")) {
HybridFileParcelable baseFile=new HybridFileParcelable(f1.getParent());
baseFile.setMode(OpenMode.ROOT);
files.add(baseFile);
}
 else files.add(f1);
}
 else {
files.add(f1);
}
new DeleteTask(app.getActivity().getContentResolver(),app.getActivity()).execute((files));
}
}
).build().show();
}
 else {
Toast.makeText(app.getActivity(),app.getResources().getString(R.string.enablerootmde),Toast.LENGTH_SHORT).show();
}
}
 else {
app.unin(rowItem.packageName);
}
return true;
case R.id.play:
Intent intent1=new Intent(Intent.ACTION_VIEW);
intent1.setData(Uri.parse(""String_Node_Str"" + rowItem.packageName));
app.startActivity(intent1);
return true;
case R.id.properties:
app.startActivity(new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS,Uri.parse(""String_Node_Str"" + rowItem.packageName)));
return true;
case R.id.backup:
Toast.makeText(app.getActivity(),app.getResources().getString(R.string.copyingapk) + Environment.getExternalStorageDirectory().getPath() + ""String_Node_Str"",Toast.LENGTH_LONG).show();
File f=new File(rowItem.path);
ArrayList<HybridFileParcelable> ab=new ArrayList<>();
File dst=new File(Environment.getExternalStorageDirectory().getPath() + ""String_Node_Str"");
if (!dst.exists() || !dst.isDirectory()) dst.mkdirs();
Intent intent=new Intent(app.getActivity(),CopyService.class);
HybridFileParcelable baseFile=RootHelper.generateBaseFile(f,true);
baseFile.setName(rowItem.label + ""String_Node_Str"" + rowItem.packageName.substring(rowItem.packageName.indexOf(""String_Node_Str"") + 1)+ ""String_Node_Str"");
ab.add(baseFile);
intent.putParcelableArrayListExtra(CopyService.TAG_COPY_SOURCES,ab);
intent.putExtra(CopyService.TAG_COPY_TARGET,dst.getPath());
intent.putExtra(CopyService.TAG_COPY_OPEN_MODE,0);
ServiceWatcherUtil.runService(app.getActivity(),intent);
return true;
}
return false;
}
);
popupMenu.inflate(R.menu.app_options);
popupMenu.show();
}
);
}","private void showPopup(View v,final AppDataParcelable rowItem){
  v.setOnClickListener(view -> {
    PopupMenu popupMenu=new PopupMenu(app.getActivity(),view);
    popupMenu.setOnMenuItemClickListener(item -> {
      int colorAccent=themedActivity.getColorPreference().getColor(ColorUsage.ACCENT);
switch (item.getItemId()) {
case R.id.open:
        Intent i1=app.getActivity().getPackageManager().getLaunchIntentForPackage(rowItem.packageName);
      if (i1 != null)       app.startActivity(i1);
 else       Toast.makeText(app.getActivity(),app.getResources().getString(R.string.not_allowed),Toast.LENGTH_LONG).show();
    return true;
case R.id.share:
  ArrayList<File> arrayList2=new ArrayList<File>();
arrayList2.add(new File(rowItem.path));
themedActivity.getColorPreference();
FileUtils.shareFiles(arrayList2,app.getActivity(),utilsProvider.getAppTheme(),colorAccent);
return true;
case R.id.unins:
final HybridFileParcelable f1=new HybridFileParcelable(rowItem.path);
f1.setMode(OpenMode.ROOT);
if ((Integer.valueOf(rowItem.data.substring(0,rowItem.data.indexOf(""String_Node_Str""))) & ApplicationInfo.FLAG_SYSTEM) != 0) {
if (app.Sp.getBoolean(PreferencesConstants.PREFERENCE_ROOTMODE,false)) {
MaterialDialog.Builder builder1=new MaterialDialog.Builder(app.getActivity());
builder1.theme(utilsProvider.getAppTheme().getMaterialDialogTheme()).content(app.getResources().getString(R.string.unin_system_apk)).title(app.getResources().getString(R.string.warning)).negativeColor(colorAccent).positiveColor(colorAccent).negativeText(app.getResources().getString(R.string.no)).positiveText(app.getResources().getString(R.string.yes)).onNegative(((dialog,which) -> dialog.cancel())).onPositive(((dialog,which) -> {
ArrayList<HybridFileParcelable> files=new ArrayList<>();
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
String parent=f1.getParent(context);
if (!parent.equals(""String_Node_Str"") && !parent.equals(""String_Node_Str"")) {
HybridFileParcelable baseFile=new HybridFileParcelable(f1.getParent(context));
baseFile.setMode(OpenMode.ROOT);
files.add(baseFile);
}
 else files.add(f1);
}
 else {
files.add(f1);
}
new DeleteTask(app.getActivity().getContentResolver(),app.getActivity()).execute((files));
}
)).build().show();
}
 else {
Toast.makeText(app.getActivity(),app.getResources().getString(R.string.enablerootmde),Toast.LENGTH_SHORT).show();
}
}
 else {
app.unin(rowItem.packageName);
}
return true;
case R.id.play:
Intent intent1=new Intent(Intent.ACTION_VIEW);
try {
intent1.setData(Uri.parse(String.format(""String_Node_Str"",rowItem.packageName)));
app.startActivity(intent1);
}
 catch (ActivityNotFoundException ifPlayStoreNotInstalled) {
intent1.setData(Uri.parse(String.format(""String_Node_Str"",rowItem.packageName)));
app.startActivity(intent1);
}
return true;
case R.id.properties:
app.startActivity(new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS,Uri.parse(String.format(""String_Node_Str"",rowItem.packageName))));
return true;
case R.id.backup:
Toast.makeText(app.getActivity(),app.getResources().getString(R.string.copyingapk) + Environment.getExternalStorageDirectory().getPath() + ""String_Node_Str"",Toast.LENGTH_LONG).show();
File f=new File(rowItem.path);
ArrayList<HybridFileParcelable> ab=new ArrayList<>();
File dst=new File(Environment.getExternalStorageDirectory().getPath() + ""String_Node_Str"");
if (!dst.exists() || !dst.isDirectory()) dst.mkdirs();
Intent intent=new Intent(app.getActivity(),CopyService.class);
HybridFileParcelable baseFile=RootHelper.generateBaseFile(f,true);
baseFile.setName(rowItem.label + ""String_Node_Str"" + rowItem.packageName.substring(rowItem.packageName.indexOf(""String_Node_Str"") + 1)+ ""String_Node_Str"");
ab.add(baseFile);
intent.putParcelableArrayListExtra(CopyService.TAG_COPY_SOURCES,ab);
intent.putExtra(CopyService.TAG_COPY_TARGET,dst.getPath());
intent.putExtra(CopyService.TAG_COPY_OPEN_MODE,0);
ServiceWatcherUtil.runService(app.getActivity(),intent);
return true;
}
return false;
}
);
popupMenu.inflate(R.menu.app_options);
popupMenu.show();
}
);
}",0.9373044675259667
162462,"/** 
 * Initiates loading of file/uri by getting an input stream associated with it on a worker thread
 */
private void load(){
  mInput.setHint(R.string.loading);
  new ReadFileTask(getContentResolver(),mFile,getExternalCacheDir(),isRootExplorer(),(data) -> {
switch (data.error) {
case ReadFileTask.NORMAL:
      cacheFile=data.cachedFile;
    mOriginal=data.fileContents;
  try {
    mInput.setText(data.fileContents);
    if (data.fileContents.isEmpty()) {
      mInput.setHint(R.string.file_empty);
    }
 else {
      mInput.setHint(null);
    }
  }
 catch (  OutOfMemoryError e) {
    mInput.setHint(R.string.error);
  }
break;
case ReadFileTask.EXCEPTION_STREAM_NOT_FOUND:
mInput.setHint(R.string.error_file_not_found);
break;
case ReadFileTask.EXCEPTION_IO:
mInput.setHint(R.string.error_io);
break;
}
}
).execute();
}","/** 
 * Initiates loading of file/uri by getting an input stream associated with it on a worker thread
 */
private void load(){
  Snackbar.make(scrollView,R.string.loading,Snackbar.LENGTH_SHORT).show();
  new ReadFileTask(getContentResolver(),mFile,getExternalCacheDir(),isRootExplorer(),(data) -> {
switch (data.error) {
case ReadFileTask.NORMAL:
      cacheFile=data.cachedFile;
    mOriginal=data.fileContents;
  try {
    mInput.setText(data.fileContents);
    if (data.fileContents.isEmpty()) {
      mInput.setHint(R.string.file_empty);
    }
 else {
      mInput.setHint(null);
    }
  }
 catch (  OutOfMemoryError e) {
    Toast.makeText(getApplicationContext(),R.string.error,Toast.LENGTH_SHORT).show();
    finish();
  }
break;
case ReadFileTask.EXCEPTION_STREAM_NOT_FOUND:
Toast.makeText(getApplicationContext(),R.string.error_file_not_found,Toast.LENGTH_SHORT).show();
finish();
break;
case ReadFileTask.EXCEPTION_IO:
Toast.makeText(getApplicationContext(),R.string.error_io,Toast.LENGTH_SHORT).show();
finish();
break;
}
}
).execute();
}",0.7160362280234417
162463,"public ArrayList<String[]> getSmbList(){
  SQLiteDatabase sqLiteDatabase=getReadableDatabase();
  Cursor cursor=sqLiteDatabase.query(getTableForOperation(Operation.SMB),null,null,null,null,null,null);
  cursor.moveToFirst();
  ArrayList<String[]> row=new ArrayList<>();
  try {
    while (cursor.moveToNext()) {
      try {
        row.add(new String[]{cursor.getString(cursor.getColumnIndex(COLUMN_NAME)),SmbUtil.getSmbDecryptedPath(context,cursor.getString(cursor.getColumnIndex(COLUMN_PATH)))});
      }
 catch (      GeneralSecurityException|IOException e) {
        e.printStackTrace();
        Toast.makeText(context,context.getResources().getString(R.string.failed_smb_decrypt_path),Toast.LENGTH_LONG).show();
        removeSmbPath(cursor.getString(cursor.getColumnIndex(COLUMN_NAME)),""String_Node_Str"");
        continue;
      }
    }
  }
  finally {
    cursor.close();
  }
  return row;
}","public ArrayList<String[]> getSmbList(){
  SQLiteDatabase sqLiteDatabase=getReadableDatabase();
  Cursor cursor=sqLiteDatabase.query(getTableForOperation(Operation.SMB),null,null,null,null,null,null);
  boolean hasNext=cursor.moveToFirst();
  ArrayList<String[]> row=new ArrayList<>();
  while (hasNext) {
    try {
      row.add(new String[]{cursor.getString(cursor.getColumnIndex(COLUMN_NAME)),SmbUtil.getSmbDecryptedPath(context,cursor.getString(cursor.getColumnIndex(COLUMN_PATH)))});
    }
 catch (    GeneralSecurityException|IOException e) {
      e.printStackTrace();
      Toast.makeText(context,context.getResources().getString(R.string.failed_smb_decrypt_path),Toast.LENGTH_LONG).show();
      removeSmbPath(cursor.getString(cursor.getColumnIndex(COLUMN_NAME)),""String_Node_Str"");
      continue;
    }
    hasNext=cursor.moveToNext();
  }
  cursor.close();
  return row;
}",0.8861469433538979
162464,"public DbViewerTask(Cursor schemaCursor,Cursor contentCursor,WebView webView,DbViewerFragment dbViewerFragment){
  this.schemaCursor=schemaCursor;
  this.contentCursor=contentCursor;
  this.webView=webView;
  this.dbViewerFragment=dbViewerFragment;
  stringBuilder=new StringBuilder();
}","public DbViewerTask(Cursor schemaCursor,Cursor contentCursor,WebView webView,DbViewerFragment dbViewerFragment){
  this.schemaCursor=schemaCursor;
  this.contentCursor=contentCursor;
  this.webView=webView;
  this.dbViewerFragment=dbViewerFragment;
  stringBuilder=new StringBuilder();
  webView.getSettings().setDefaultTextEncodingName(""String_Node_Str"");
}",0.889922480620155
162465,"@Override protected void onPostExecute(Void aVoid){
  super.onPostExecute(aVoid);
  dbViewerFragment.loadingText.setVisibility(View.GONE);
  stringBuilder.append(""String_Node_Str"");
  for (  String s : schemaList) {
    stringBuilder.append(""String_Node_Str"").append(s).append(""String_Node_Str"");
  }
  stringBuilder.append(""String_Node_Str"");
  for (  String[] strings : contentList) {
    stringBuilder.append(""String_Node_Str"");
    for (int i=0; i < strings.length; i++) {
      stringBuilder.append(""String_Node_Str"").append(strings[i]).append(""String_Node_Str"");
    }
    stringBuilder.append(""String_Node_Str"");
  }
  stringBuilder.append(""String_Node_Str"");
  webView.loadData(stringBuilder.toString(),""String_Node_Str"",null);
  webView.setVisibility(View.VISIBLE);
}","@Override protected void onPostExecute(Void aVoid){
  super.onPostExecute(aVoid);
  dbViewerFragment.loadingText.setVisibility(View.GONE);
  stringBuilder.append(""String_Node_Str"");
  for (  String s : schemaList) {
    stringBuilder.append(""String_Node_Str"").append(s).append(""String_Node_Str"");
  }
  stringBuilder.append(""String_Node_Str"");
  for (  String[] strings : contentList) {
    stringBuilder.append(""String_Node_Str"");
    for (int i=0; i < strings.length; i++) {
      stringBuilder.append(""String_Node_Str"").append(strings[i]).append(""String_Node_Str"");
    }
    stringBuilder.append(""String_Node_Str"");
  }
  stringBuilder.append(""String_Node_Str"");
  webView.loadData(stringBuilder.toString(),""String_Node_Str"",""String_Node_Str"");
  webView.setVisibility(View.VISIBLE);
}",0.9865814696485624
162466,"public EncryptedEntry findEntry(String path) throws GeneralSecurityException, IOException {
  String query=""String_Node_Str"" + TABLE_ENCRYPTED + ""String_Node_Str""+ COLUMN_ENCRYPTED_PATH+ ""String_Node_Str""+ path+ ""String_Node_Str"";
  SQLiteDatabase sqLiteDatabase=getReadableDatabase();
  Cursor cursor=sqLiteDatabase.rawQuery(query,null);
  EncryptedEntry encryptedEntry=new EncryptedEntry();
  if (cursor.moveToFirst()) {
    cursor.moveToFirst();
    encryptedEntry.setId((cursor.getInt(0)));
    encryptedEntry.setPath(cursor.getString(1));
    encryptedEntry.setPassword(CryptUtil.decryptPassword(context,cursor.getString(2)));
    cursor.close();
  }
 else {
    encryptedEntry=null;
  }
  return encryptedEntry;
}","public EncryptedEntry findEntry(String path) throws GeneralSecurityException, IOException {
  String query=""String_Node_Str"" + TABLE_ENCRYPTED + ""String_Node_Str""+ COLUMN_ENCRYPTED_PATH+ ""String_Node_Str""+ path+ ""String_Node_Str"";
  SQLiteDatabase sqLiteDatabase=getReadableDatabase();
  Cursor cursor=sqLiteDatabase.rawQuery(query,null);
  EncryptedEntry encryptedEntry=new EncryptedEntry();
  if (cursor.moveToFirst()) {
    encryptedEntry.setId((cursor.getInt(0)));
    encryptedEntry.setPath(cursor.getString(1));
    encryptedEntry.setPassword(CryptUtil.decryptPassword(context,cursor.getString(2)));
    cursor.close();
  }
 else {
    encryptedEntry=null;
  }
  return encryptedEntry;
}",0.9815864022662888
162467,"public List<EncryptedEntry> getAllEntries() throws GeneralSecurityException, IOException {
  List<EncryptedEntry> entryList=new ArrayList<EncryptedEntry>();
  String query=""String_Node_Str"" + TABLE_ENCRYPTED;
  SQLiteDatabase sqLiteDatabase=getReadableDatabase();
  Cursor cursor=null;
  try {
    cursor=sqLiteDatabase.rawQuery(query,null);
    if (cursor.getCount() > 0 && cursor.moveToFirst()) {
      do {
        EncryptedEntry encryptedEntry=new EncryptedEntry();
        encryptedEntry.setId((cursor.getInt(0)));
        encryptedEntry.setPath(cursor.getString(1));
        encryptedEntry.setPassword(CryptUtil.decryptPassword(context,cursor.getString(2)));
        entryList.add(encryptedEntry);
      }
 while (cursor.moveToNext());
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  return entryList;
}","public List<EncryptedEntry> getAllEntries() throws GeneralSecurityException, IOException {
  List<EncryptedEntry> entryList=new ArrayList<EncryptedEntry>();
  String query=""String_Node_Str"" + TABLE_ENCRYPTED;
  SQLiteDatabase sqLiteDatabase=getReadableDatabase();
  Cursor cursor=null;
  try {
    cursor=sqLiteDatabase.rawQuery(query,null);
    boolean hasNext=cursor.moveToFirst();
    while (hasNext) {
      EncryptedEntry encryptedEntry=new EncryptedEntry();
      encryptedEntry.setId((cursor.getInt(0)));
      encryptedEntry.setPath(cursor.getString(1));
      encryptedEntry.setPassword(CryptUtil.decryptPassword(context,cursor.getString(2)));
      entryList.add(encryptedEntry);
      hasNext=cursor.moveToNext();
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  return entryList;
}",0.5943678849610545
162468,"public List<Tab> getAllTabs(){
  List<Tab> tabList=new ArrayList<>();
  SQLiteDatabase sqLiteDatabase=getReadableDatabase();
  Cursor cursor=sqLiteDatabase.query(TABLE_TAB,null,null,null,null,null,null);
  try {
    if (cursor.moveToFirst() && cursor.getCount() > 0) {
      while (cursor.moveToNext()) {
        Tab tab=new Tab(cursor.getInt(0),cursor.getString(1),cursor.getString(2));
        tabList.add(tab);
      }
    }
  }
  finally {
    cursor.close();
  }
  return tabList;
}","public List<Tab> getAllTabs(){
  List<Tab> tabList=new ArrayList<>();
  SQLiteDatabase sqLiteDatabase=getReadableDatabase();
  Cursor cursor=sqLiteDatabase.query(TABLE_TAB,null,null,null,null,null,null);
  boolean hasNext=cursor.moveToFirst();
  while (hasNext) {
    Tab tab=new Tab(cursor.getInt(0),cursor.getString(1),cursor.getString(2));
    tabList.add(tab);
    hasNext=cursor.moveToNext();
  }
  cursor.close();
  return tabList;
}",0.7667386609071274
162469,"public ConcurrentRadixTree<VoidValue> getHiddenFilesConcurrentRadixTree(){
  ConcurrentRadixTree<VoidValue> paths=new ConcurrentRadixTree<>(new DefaultCharArrayNodeFactory());
  Cursor cursor=getReadableDatabase().query(getTableForOperation(Operation.HIDDEN),null,null,null,null,null,null);
  cursor.moveToFirst();
  while (cursor.moveToNext()) {
    paths.put(cursor.getString(cursor.getColumnIndex(COLUMN_PATH)),VoidValue.SINGLETON);
  }
  cursor.close();
  return paths;
}","public ConcurrentRadixTree<VoidValue> getHiddenFilesConcurrentRadixTree(){
  ConcurrentRadixTree<VoidValue> paths=new ConcurrentRadixTree<>(new DefaultCharArrayNodeFactory());
  Cursor cursor=getReadableDatabase().query(getTableForOperation(Operation.HIDDEN),null,null,null,null,null,null);
  boolean hasNext=cursor.moveToFirst();
  while (hasNext) {
    paths.put(cursor.getString(cursor.getColumnIndex(COLUMN_PATH)),VoidValue.SINGLETON);
    hasNext=cursor.moveToNext();
  }
  cursor.close();
  return paths;
}",0.9240121580547112
162470,"private ArrayList<String> getPath(Operation operation){
  SQLiteDatabase sqLiteDatabase=getReadableDatabase();
  Cursor cursor=sqLiteDatabase.query(getTableForOperation(operation),null,null,null,null,null,null);
  ArrayList<String> paths=new ArrayList<>();
switch (operation) {
case LIST:
case GRID:
    cursor.moveToFirst();
  try {
    while (cursor.moveToNext()) {
      paths.add(cursor.getString(cursor.getColumnIndex(COLUMN_PATH)));
    }
  }
  finally {
    cursor.close();
  }
return paths;
default :
return null;
}
}","private ArrayList<String> getPath(Operation operation){
  SQLiteDatabase sqLiteDatabase=getReadableDatabase();
  Cursor cursor=sqLiteDatabase.query(getTableForOperation(operation),null,null,null,null,null,null);
  ArrayList<String> paths=new ArrayList<>();
switch (operation) {
case LIST:
case GRID:
    boolean hasNext=cursor.moveToFirst();
  while (hasNext) {
    paths.add(cursor.getString(cursor.getColumnIndex(COLUMN_PATH)));
    hasNext=cursor.moveToNext();
  }
cursor.close();
return paths;
default :
return null;
}
}",0.7797902764537655
162471,"public LinkedList<String> getHistoryLinkedList(){
  SQLiteDatabase sqLiteDatabase=getReadableDatabase();
  Cursor cursor=sqLiteDatabase.query(getTableForOperation(Operation.HISTORY),null,null,null,null,null,null);
  LinkedList<String> paths=new LinkedList<>();
  cursor.moveToFirst();
  try {
    while (cursor.moveToNext()) {
      paths.push(cursor.getString(cursor.getColumnIndex(COLUMN_PATH)));
    }
  }
  finally {
    cursor.close();
  }
  return paths;
}","public LinkedList<String> getHistoryLinkedList(){
  SQLiteDatabase sqLiteDatabase=getReadableDatabase();
  Cursor cursor=sqLiteDatabase.query(getTableForOperation(Operation.HISTORY),null,null,null,null,null,null);
  LinkedList<String> paths=new LinkedList<>();
  boolean hasNext=cursor.moveToFirst();
  while (hasNext) {
    paths.push(cursor.getString(cursor.getColumnIndex(COLUMN_PATH)));
    hasNext=cursor.moveToNext();
  }
  cursor.close();
  return paths;
}",0.7978378378378378
162472,"public ArrayList<String[]> getBookmarksList(){
  SQLiteDatabase sqLiteDatabase=getReadableDatabase();
  Cursor cursor=sqLiteDatabase.query(getTableForOperation(Operation.BOOKMARKS),null,null,null,null,null,null);
  cursor.moveToFirst();
  ArrayList<String[]> row=new ArrayList<>();
  try {
    while (cursor.moveToNext()) {
      row.add(new String[]{cursor.getString(cursor.getColumnIndex(COLUMN_NAME)),cursor.getString(cursor.getColumnIndex(COLUMN_PATH))});
    }
  }
  finally {
    cursor.close();
  }
  return row;
}","public ArrayList<String[]> getBookmarksList(){
  SQLiteDatabase sqLiteDatabase=getReadableDatabase();
  Cursor cursor=sqLiteDatabase.query(getTableForOperation(Operation.BOOKMARKS),null,null,null,null,null,null);
  boolean hasNext=cursor.moveToFirst();
  ArrayList<String[]> row=new ArrayList<>();
  while (hasNext) {
    row.add(new String[]{cursor.getString(cursor.getColumnIndex(COLUMN_NAME)),cursor.getString(cursor.getColumnIndex(COLUMN_PATH))});
    hasNext=cursor.moveToNext();
  }
  cursor.close();
  return row;
}",0.8475551294343241
162473,"protected Boolean doInBackground(ArrayList<HybridFileParcelable>... p1){
  files=p1[0];
  boolean b=true;
  if (files.size() == 0)   return true;
  if (files.get(0).isOtgFile()) {
    for (    HybridFileParcelable a : files) {
      DocumentFile documentFile=OTGUtil.getDocumentFile(a.getPath(),cd,false);
      b=documentFile.delete();
    }
  }
 else   if (files.get(0).isDropBoxFile()) {
    CloudStorage cloudStorageDropbox=dataUtils.getAccount(OpenMode.DROPBOX);
    for (    HybridFileParcelable baseFile : files) {
      try {
        cloudStorageDropbox.delete(CloudUtil.stripPath(OpenMode.DROPBOX,baseFile.getPath()));
      }
 catch (      Exception e) {
        e.printStackTrace();
        b=false;
        break;
      }
    }
  }
 else   if (files.get(0).isBoxFile()) {
    CloudStorage cloudStorageBox=dataUtils.getAccount(OpenMode.BOX);
    for (    HybridFileParcelable baseFile : files) {
      try {
        cloudStorageBox.delete(CloudUtil.stripPath(OpenMode.BOX,baseFile.getPath()));
      }
 catch (      Exception e) {
        e.printStackTrace();
        b=false;
        break;
      }
    }
  }
 else   if (files.get(0).isGoogleDriveFile()) {
    CloudStorage cloudStorageGdrive=dataUtils.getAccount(OpenMode.GDRIVE);
    for (    HybridFileParcelable baseFile : files) {
      try {
        cloudStorageGdrive.delete(CloudUtil.stripPath(OpenMode.GDRIVE,baseFile.getPath()));
      }
 catch (      Exception e) {
        e.printStackTrace();
        b=false;
        break;
      }
    }
  }
 else   if (files.get(0).isOneDriveFile()) {
    CloudStorage cloudStorageOnedrive=dataUtils.getAccount(OpenMode.ONEDRIVE);
    for (    HybridFileParcelable baseFile : files) {
      try {
        cloudStorageOnedrive.delete(CloudUtil.stripPath(OpenMode.ONEDRIVE,baseFile.getPath()));
      }
 catch (      Exception e) {
        e.printStackTrace();
        b=false;
        break;
      }
    }
  }
 else {
    for (    HybridFileParcelable a : files)     try {
      (a).delete(cd,rootMode);
    }
 catch (    ShellNotRunningException e) {
      e.printStackTrace();
      b=false;
    }
  }
  if (!files.get(0).isSmb()) {
    try {
      for (      HybridFileParcelable f : files) {
        delete(cd,f.getPath());
      }
    }
 catch (    Exception e) {
      for (      HybridFileParcelable f : files) {
        FileUtils.scanFile(f.getPath(),cd);
      }
    }
  }
  for (  HybridFileParcelable file : files) {
    if (file.getName().endsWith(CryptUtil.CRYPT_EXTENSION)) {
      CryptHandler handler=new CryptHandler(cd);
      handler.clear(file.getPath());
    }
  }
  return b;
}","protected Boolean doInBackground(ArrayList<HybridFileParcelable>... p1){
  files=p1[0];
  boolean wasDeleted=true;
  if (files.size() == 0)   return true;
  if (files.get(0).isOtgFile()) {
    for (    HybridFileParcelable file : files) {
      DocumentFile documentFile=OTGUtil.getDocumentFile(file.getPath(),cd,false);
      wasDeleted=documentFile.delete();
    }
  }
 else   if (files.get(0).isDropBoxFile()) {
    CloudStorage cloudStorageDropbox=dataUtils.getAccount(OpenMode.DROPBOX);
    for (    HybridFileParcelable baseFile : files) {
      try {
        cloudStorageDropbox.delete(CloudUtil.stripPath(OpenMode.DROPBOX,baseFile.getPath()));
      }
 catch (      Exception e) {
        e.printStackTrace();
        wasDeleted=false;
        break;
      }
    }
  }
 else   if (files.get(0).isBoxFile()) {
    CloudStorage cloudStorageBox=dataUtils.getAccount(OpenMode.BOX);
    for (    HybridFileParcelable baseFile : files) {
      try {
        cloudStorageBox.delete(CloudUtil.stripPath(OpenMode.BOX,baseFile.getPath()));
      }
 catch (      Exception e) {
        e.printStackTrace();
        wasDeleted=false;
        break;
      }
    }
  }
 else   if (files.get(0).isGoogleDriveFile()) {
    CloudStorage cloudStorageGdrive=dataUtils.getAccount(OpenMode.GDRIVE);
    for (    HybridFileParcelable baseFile : files) {
      try {
        cloudStorageGdrive.delete(CloudUtil.stripPath(OpenMode.GDRIVE,baseFile.getPath()));
      }
 catch (      Exception e) {
        e.printStackTrace();
        wasDeleted=false;
        break;
      }
    }
  }
 else   if (files.get(0).isOneDriveFile()) {
    CloudStorage cloudStorageOnedrive=dataUtils.getAccount(OpenMode.ONEDRIVE);
    for (    HybridFileParcelable baseFile : files) {
      try {
        cloudStorageOnedrive.delete(CloudUtil.stripPath(OpenMode.ONEDRIVE,baseFile.getPath()));
      }
 catch (      Exception e) {
        e.printStackTrace();
        wasDeleted=false;
        break;
      }
    }
  }
 else {
    for (    HybridFileParcelable file : files) {
      try {
        if (file.delete(cd,rootMode)) {
          wasDeleted=true;
        }
 else {
          wasDeleted=false;
          break;
        }
      }
 catch (      ShellNotRunningException e) {
        e.printStackTrace();
        wasDeleted=false;
        break;
      }
    }
  }
  if (!files.get(0).isSmb()) {
    try {
      for (      HybridFileParcelable f : files) {
        delete(cd,f.getPath());
      }
    }
 catch (    Exception e) {
      for (      HybridFileParcelable f : files) {
        FileUtils.scanFile(f.getPath(),cd);
      }
    }
  }
  for (  HybridFileParcelable file : files) {
    if (file.getName().endsWith(CryptUtil.CRYPT_EXTENSION)) {
      CryptHandler handler=new CryptHandler(cd);
      handler.clear(file.getPath());
    }
  }
  return wasDeleted;
}",0.9516810582399412
162474,"@Override public void onPostExecute(Boolean b){
  Intent intent=new Intent(MainActivity.KEY_INTENT_LOAD_LIST);
  String path=files.get(0).getParent(cd);
  intent.putExtra(MainActivity.KEY_INTENT_LOAD_LIST_FILE,path);
  cd.sendBroadcast(intent);
  if (!b) {
    Toast.makeText(cd,cd.getResources().getString(R.string.error),Toast.LENGTH_SHORT).show();
  }
 else   if (compressedExplorerFragment == null) {
    Toast.makeText(cd,cd.getResources().getString(R.string.done),Toast.LENGTH_SHORT).show();
  }
  if (compressedExplorerFragment != null) {
    compressedExplorerFragment.files.clear();
  }
}","@Override public void onPostExecute(Boolean wasDeleted){
  Intent intent=new Intent(MainActivity.KEY_INTENT_LOAD_LIST);
  String path=files.get(0).getParent(cd);
  intent.putExtra(MainActivity.KEY_INTENT_LOAD_LIST_FILE,path);
  cd.sendBroadcast(intent);
  if (!wasDeleted) {
    Toast.makeText(cd,cd.getResources().getString(R.string.error),Toast.LENGTH_SHORT).show();
  }
 else   if (compressedExplorerFragment == null) {
    Toast.makeText(cd,cd.getResources().getString(R.string.done),Toast.LENGTH_SHORT).show();
  }
  if (compressedExplorerFragment != null) {
    compressedExplorerFragment.files.clear();
  }
}",0.9818481848184818
162475,"private static boolean rmdir(final File file,Context context){
  if (file == null)   return false;
  if (!file.exists()) {
    return true;
  }
  if (!file.isDirectory()) {
    return false;
  }
  String[] fileList=file.list();
  if (fileList != null && fileList.length > 0) {
    rmdir1(file,context);
  }
  String[] fileList1=file.list();
  if (fileList1 != null && fileList1.length > 0) {
    return false;
  }
  if (file.delete()) {
    return true;
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    DocumentFile document=getDocumentFile(file,true,context);
    return document.delete();
  }
  if (Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT) {
    ContentResolver resolver=context.getContentResolver();
    ContentValues values=new ContentValues();
    values.put(MediaStore.MediaColumns.DATA,file.getAbsolutePath());
    resolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,values);
    resolver.delete(MediaStore.Files.getContentUri(""String_Node_Str""),MediaStore.MediaColumns.DATA + ""String_Node_Str"",new String[]{file.getAbsolutePath()});
  }
  return !file.exists();
}","/** 
 * Delete a folder.
 * @param file The folder name.
 * @return true if successful.
 */
private static boolean rmdir(@NonNull final File file,Context context){
  if (!file.exists())   return true;
  File[] files=file.listFiles();
  if (files != null && files.length > 0) {
    for (    File child : files) {
      rmdir(child,context);
    }
  }
  if (file.delete()) {
    return true;
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    DocumentFile document=getDocumentFile(file,true,context);
    if (document != null && document.delete()) {
      return true;
    }
  }
  if (Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT) {
    ContentResolver resolver=context.getContentResolver();
    ContentValues values=new ContentValues();
    values.put(MediaStore.MediaColumns.DATA,file.getAbsolutePath());
    resolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,values);
    resolver.delete(MediaStore.Files.getContentUri(""String_Node_Str""),MediaStore.MediaColumns.DATA + ""String_Node_Str"",new String[]{file.getAbsolutePath()});
  }
  return !file.exists();
}",0.7527173913043478
162476,"/** 
 * Delete a file. May be even on external SD card.
 * @param file the file to be deleted.
 * @return True if successfully deleted.
 */
static boolean deleteFile(@NonNull final File file,Context context){
  if (file == null)   return true;
  boolean fileDelete=deleteFilesInFolder(file,context);
  if (file.delete() || fileDelete)   return true;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && FileUtil.isOnExtSdCard(file,context)) {
    DocumentFile document=getDocumentFile(file,false,context);
    return document.delete();
  }
  if (Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT) {
    ContentResolver resolver=context.getContentResolver();
    try {
      Uri uri=MediaStoreHack.getUriFromFile(file.getAbsolutePath(),context);
      resolver.delete(uri,null,null);
      return !file.exists();
    }
 catch (    Exception e) {
      Log.e(LOG,""String_Node_Str"" + file.getAbsolutePath(),e);
      return false;
    }
  }
  return !file.exists();
}","/** 
 * Delete a file. May be even on external SD card.
 * @param file the file to be deleted.
 * @return True if successfully deleted.
 */
static boolean deleteFile(@NonNull final File file,Context context){
  if (file == null)   return true;
  boolean fileDelete=rmdir(file,context);
  if (file.delete() || fileDelete)   return true;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && FileUtil.isOnExtSdCard(file,context)) {
    DocumentFile document=getDocumentFile(file,false,context);
    return document.delete();
  }
  if (Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT) {
    ContentResolver resolver=context.getContentResolver();
    try {
      Uri uri=MediaStoreHack.getUriFromFile(file.getAbsolutePath(),context);
      resolver.delete(uri,null,null);
      return !file.exists();
    }
 catch (    Exception e) {
      Log.e(LOG,""String_Node_Str"" + file.getAbsolutePath(),e);
      return false;
    }
  }
  return !file.exists();
}",0.9886480908152736
162477,"/** 
 * Show dialog to rename a file
 * @param f the file to rename
 */
public void rename(final HybridFileParcelable f){
  MaterialDialog.Builder builder=new MaterialDialog.Builder(getActivity());
  String name=f.getName();
  builder.input(""String_Node_Str"",name,false,(materialDialog,charSequence) -> {
  }
);
  builder.theme(utilsProvider.getAppTheme().getMaterialDialogTheme());
  builder.title(getResources().getString(R.string.rename));
  builder.onNegative((dialog,which) -> dialog.cancel());
  builder.onPositive((dialog,which) -> {
    String name1=dialog.getInputEditText().getText().toString();
    if (f.isSmb()) {
      if (f.isDirectory() && !name1.endsWith(""String_Node_Str""))       name1=name1 + ""String_Node_Str"";
    }
    getMainActivity().mainActivityHelper.rename(openMode,f.getPath(),CURRENT_PATH + ""String_Node_Str"" + name1,getActivity(),getMainActivity().isRootExplorer());
  }
);
  builder.positiveText(R.string.save);
  builder.negativeText(R.string.cancel);
  builder.positiveColor(accentColor).negativeColor(accentColor).widgetColor(accentColor);
  final MaterialDialog materialDialog=builder.build();
  materialDialog.show();
  Log.d(getClass().getSimpleName(),f.getNameString(getContext()));
  materialDialog.getInputEditText().post(() -> {
    if (!f.isDirectory()) {
      materialDialog.getInputEditText().setSelection(f.getNameString(getContext()).length());
    }
  }
);
}","/** 
 * Show dialog to rename a file
 * @param f the file to rename
 */
public void rename(final HybridFileParcelable f){
  MaterialDialog.Builder builder=new MaterialDialog.Builder(getActivity());
  String name=f.getName();
  builder.input(""String_Node_Str"",name,false,(materialDialog,charSequence) -> {
  }
);
  builder.theme(utilsProvider.getAppTheme().getMaterialDialogTheme());
  builder.title(getResources().getString(R.string.rename));
  builder.onNegative((dialog,which) -> dialog.cancel());
  builder.onPositive((dialog,which) -> {
    String name1=dialog.getInputEditText().getText().toString();
    getMainActivity().mainActivityHelper.rename(openMode,f.getPath(),CURRENT_PATH + ""String_Node_Str"" + name1,getActivity(),getMainActivity().isRootExplorer());
  }
);
  builder.positiveText(R.string.save);
  builder.negativeText(R.string.cancel);
  builder.positiveColor(accentColor).negativeColor(accentColor).widgetColor(accentColor);
  final MaterialDialog materialDialog=builder.build();
  materialDialog.show();
  Log.d(getClass().getSimpleName(),f.getNameString(getContext()));
  materialDialog.getInputEditText().post(() -> {
    if (!f.isDirectory()) {
      materialDialog.getInputEditText().setSelection(f.getNameString(getContext()).length());
    }
  }
);
}",0.9511740588893032
162478,"private void checkUnsavedChanges(){
  if (mOriginal != null && mInput.isShown() && !mOriginal.equals(mInput.getText().toString())) {
    new MaterialDialog.Builder(this).title(R.string.unsavedchanges).content(R.string.unsavedchangesdesc).positiveText(R.string.yes).negativeText(R.string.no).positiveColor(getColorPreference().getColor(ColorUsage.ACCENT)).negativeColor(getColorPreference().getColor(ColorUsage.ACCENT)).callback(new MaterialDialog.ButtonCallback(){
      @Override public void onPositive(      MaterialDialog dialog){
        saveFile(mInput.getText().toString());
        finish();
      }
      @Override public void onNegative(      MaterialDialog dialog){
        finish();
      }
    }
).build().show();
  }
 else {
    finish();
  }
}","private void checkUnsavedChanges(){
  if (mOriginal != null && mInput.isShown() && !mOriginal.equals(mInput.getText().toString())) {
    new MaterialDialog.Builder(this).title(R.string.unsavedchanges).content(R.string.unsavedchangesdesc).positiveText(R.string.yes).negativeText(R.string.no).positiveColor(getColorPreference().getColor(ColorUsage.ACCENT)).negativeColor(getColorPreference().getColor(ColorUsage.ACCENT)).onPositive((dialog,which) -> {
      saveFile(mInput.getText().toString());
      finish();
    }
).onNegative((dialog,which) -> finish()).build().show();
  }
 else {
    finish();
  }
}",0.750367107195301
162479,"/** 
 * Kill any connection that is still in place. Used by   {@link com.amaze.filemanager.activities.MainActivity}.
 * @see MainActivity#onDestroy()
 * @see MainActivity#exit()
 */
public void expungeAllConnections(){
  AppConfig.runInBackground(() -> {
    if (!mConnections.isEmpty()) {
      for (      SSHClient connection : mConnections.values()) {
        SshClientUtils.tryDisconnect(connection);
      }
      mConnections.clear();
    }
  }
);
}","/** 
 * Kill any connection that is still in place. Used by   {@link com.amaze.filemanager.activities.MainActivity}.
 * @see MainActivity#onDestroy()
 * @see MainActivity#exit()
 */
public void expungeAllConnections(){
  AppConfig.runInBackground(() -> {
    if (!connections.isEmpty()) {
      for (      SSHClient connection : connections.values()) {
        SshClientUtils.tryDisconnect(connection);
      }
      connections.clear();
    }
  }
);
}",0.9900771775082692
162480,"/** 
 * Obtain a   {@link SSHClient} connection from the underlying connection pool.Beneath it will return the connection if it exists; otherwise it will create a new one and put it into the connection pool.
 * @param url SSH connection URL, in the form of <code>ssh://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;</code> or <code>ssh://&lt;username&gt;@&lt;host&gt;:&lt;port&gt;</code>
 * @return {@link SSHClient} connection, already opened and authenticated
 * @throws IOException IOExceptions that occur during connection setup
 */
public SSHClient getConnection(@NonNull String url) throws IOException {
  url=SshClientUtils.extractBaseUriFrom(url);
  SSHClient client=mConnections.get(url);
  if (client == null) {
    client=create(url);
    if (client != null)     mConnections.put(url,client);
  }
 else {
    if (!validate(client)) {
      Log.d(TAG,""String_Node_Str"");
      expire(client);
      mConnections.remove(url);
      client=create(url);
      if (client != null)       mConnections.put(url,client);
    }
  }
  return client;
}","/** 
 * Obtain a   {@link SSHClient} connection from the underlying connection pool.Beneath it will return the connection if it exists; otherwise it will create a new one and put it into the connection pool.
 * @param url SSH connection URL, in the form of <code>ssh://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;</code> or <code>ssh://&lt;username&gt;@&lt;host&gt;:&lt;port&gt;</code>
 * @return {@link SSHClient} connection, already opened and authenticated
 * @throws IOException IOExceptions that occur during connection setup
 */
public SSHClient getConnection(@NonNull String url) throws IOException {
  url=SshClientUtils.extractBaseUriFrom(url);
  SSHClient client=connections.get(url);
  if (client == null) {
    client=create(url);
    if (client != null)     connections.put(url,client);
  }
 else {
    if (!validate(client)) {
      Log.d(TAG,""String_Node_Str"");
      expire(client);
      connections.remove(url);
      client=create(url);
      if (client != null)       connections.put(url,client);
    }
  }
  return client;
}",0.9943502824858758
162481,"private SshConnectionPool(){
  mConnections=new ConcurrentHashMap<String,SSHClient>();
}","private SshConnectionPool(){
  connections=new ConcurrentHashMap<String,SSHClient>();
}",0.9828571428571428
162482,"/** 
 * Use this to obtain SshConnectionPool instance singleton.
 * @return {@link SshConnectionPool} instance
 */
public static final SshConnectionPool getInstance(){
  if (sInstance == null)   sInstance=new SshConnectionPool();
  return sInstance;
}","/** 
 * Use this to obtain SshConnectionPool instance singleton.
 * @return {@link SshConnectionPool} instance
 */
public static final SshConnectionPool getInstance(){
  if (instance == null)   instance=new SshConnectionPool();
  return instance;
}",0.9819639278557114
162483,"public Response(String remotePath,net.schmizz.sshj.sftp.Response response) throws SFTPException, Buffer.BufferException {
  response.ensurePacketTypeIs(PacketType.EXTENDED_REPLY);
  if (!response.readStatusCode().equals(net.schmizz.sshj.sftp.Response.StatusCode.OK)) {
    throw new SFTPException(""String_Node_Str"" + response.readStatusCode());
  }
  mRemotePath=remotePath;
  mResponse=response;
  fileSystemBlockSize=(int)mResponse.readUInt32();
  fundamentalFileSystemBlockSize=(int)mResponse.readUInt64();
  fileSystemBlocks=mResponse.readUInt64();
  freeFileSystemBlocks=mResponse.readUInt64();
  availableFileSystemBlocks=mResponse.readUInt64();
  totalFileInodes=mResponse.readUInt64();
  freeFileInodes=mResponse.readUInt64();
  availableFileInodes=mResponse.readUInt64();
  fileSystemId=readUInt64FromBuffer(mResponse);
  fileSystemFlag=(int)mResponse.readUInt64();
  filenameMaxLength=(int)mResponse.readUInt64();
}","public Response(String remotePath,net.schmizz.sshj.sftp.Response response) throws SFTPException, Buffer.BufferException {
  response.ensurePacketTypeIs(PacketType.EXTENDED_REPLY);
  if (!response.readStatusCode().equals(net.schmizz.sshj.sftp.Response.StatusCode.OK)) {
    throw new SFTPException(""String_Node_Str"" + response.readStatusCode());
  }
  this.remotePath=remotePath;
  this.response=response;
  fileSystemBlockSize=(int)this.response.readUInt32();
  fundamentalFileSystemBlockSize=(int)this.response.readUInt64();
  fileSystemBlocks=this.response.readUInt64();
  freeFileSystemBlocks=this.response.readUInt64();
  availableFileSystemBlocks=this.response.readUInt64();
  totalFileInodes=this.response.readUInt64();
  freeFileInodes=this.response.readUInt64();
  availableFileInodes=this.response.readUInt64();
  fileSystemId=readUInt64FromBuffer(this.response);
  fileSystemFlag=(int)this.response.readUInt64();
  filenameMaxLength=(int)this.response.readUInt64();
}",0.9453207150368034
162484,"@Override public String toString(){
  return new StringBuilder().append(""String_Node_Str"").append(mRemotePath).append(""String_Node_Str"").append(""String_Node_Str"").append(fileSystemBlockSize).append(',').append(""String_Node_Str"").append(fundamentalFileSystemBlockSize).append(',').append(""String_Node_Str"").append(fileSystemBlocks).append(',').append(""String_Node_Str"").append(freeFileSystemBlocks).append(',').append(""String_Node_Str"").append(availableFileSystemBlocks).append(',').append(""String_Node_Str"").append(totalFileInodes).append(',').append(""String_Node_Str"").append(freeFileInodes).append(',').append(""String_Node_Str"").append(availableFileInodes).append(',').append(""String_Node_Str"").append(getFileSystemId()).append(',').append(""String_Node_Str"").append(fileSystemFlag).append(',').append(""String_Node_Str"").append(filenameMaxLength).toString();
}","@Override public String toString(){
  return new StringBuilder().append(""String_Node_Str"").append(remotePath).append(""String_Node_Str"").append(""String_Node_Str"").append(fileSystemBlockSize).append(',').append(""String_Node_Str"").append(fundamentalFileSystemBlockSize).append(',').append(""String_Node_Str"").append(fileSystemBlocks).append(',').append(""String_Node_Str"").append(freeFileSystemBlocks).append(',').append(""String_Node_Str"").append(availableFileSystemBlocks).append(',').append(""String_Node_Str"").append(totalFileInodes).append(',').append(""String_Node_Str"").append(freeFileInodes).append(',').append(""String_Node_Str"").append(availableFileInodes).append(',').append(""String_Node_Str"").append(getFileSystemId()).append(',').append(""String_Node_Str"").append(fileSystemFlag).append(',').append(""String_Node_Str"").append(filenameMaxLength).toString();
}",0.9982568274259151
162485,"@Override protected void onPreExecute(){
  mProgressDialog=ProgressDialog.show(AppConfig.getInstance().getActivityContext(),""String_Node_Str"",AppConfig.getInstance().getResources().getString(R.string.processing));
}","@Override protected void onPreExecute(){
  progressDialog=ProgressDialog.show(AppConfig.getInstance().getActivityContext(),""String_Node_Str"",AppConfig.getInstance().getResources().getString(R.string.processing));
}",0.993006993006993
162486,"@Override protected AsyncTaskResult<PublicKey> doInBackground(Void... voids){
  final AtomicReference<AsyncTaskResult<PublicKey>> holder=new AtomicReference<AsyncTaskResult<PublicKey>>();
  final CountDownLatch latch=new CountDownLatch(1);
  final SSHClient sshClient=new SSHClient(new CustomSshJConfig());
  sshClient.setConnectTimeout(SSH_CONNECT_TIMEOUT);
  sshClient.addHostKeyVerifier((hostname,port,key) -> {
    holder.set(new AsyncTaskResult<PublicKey>(key));
    latch.countDown();
    return true;
  }
);
  try {
    sshClient.connect(mHostname,mPort);
    latch.await();
  }
 catch (  IOException e) {
    e.printStackTrace();
    holder.set(new AsyncTaskResult<PublicKey>(e));
    latch.countDown();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
    holder.set(new AsyncTaskResult<PublicKey>(e));
    latch.countDown();
  }
 finally {
    SshClientUtils.tryDisconnect(sshClient);
    return holder.get();
  }
}","@Override protected AsyncTaskResult<PublicKey> doInBackground(Void... voids){
  final AtomicReference<AsyncTaskResult<PublicKey>> holder=new AtomicReference<AsyncTaskResult<PublicKey>>();
  final CountDownLatch latch=new CountDownLatch(1);
  final SSHClient sshClient=new SSHClient(new CustomSshJConfig());
  sshClient.setConnectTimeout(SSH_CONNECT_TIMEOUT);
  sshClient.addHostKeyVerifier((hostname,port,key) -> {
    holder.set(new AsyncTaskResult<PublicKey>(key));
    latch.countDown();
    return true;
  }
);
  try {
    sshClient.connect(hostname,port);
    latch.await();
  }
 catch (  IOException e) {
    e.printStackTrace();
    holder.set(new AsyncTaskResult<PublicKey>(e));
    latch.countDown();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
    holder.set(new AsyncTaskResult<PublicKey>(e));
    latch.countDown();
  }
 finally {
    SshClientUtils.tryDisconnect(sshClient);
    return holder.get();
  }
}",0.9914802981895634
162487,"@Override protected void onPostExecute(AsyncTaskResult<PublicKey> result){
  mProgressDialog.dismiss();
  if (result.exception != null) {
    if (SocketException.class.isAssignableFrom(result.exception.getClass()) || SocketTimeoutException.class.isAssignableFrom(result.exception.getClass())) {
      Toast.makeText(AppConfig.getInstance(),String.format(AppConfig.getInstance().getResources().getString(R.string.ssh_connect_failed),mHostname,mPort,result.exception.getLocalizedMessage()),Toast.LENGTH_LONG).show();
    }
  }
 else {
    mCallback.onResult(result);
  }
}","@Override protected void onPostExecute(AsyncTaskResult<PublicKey> result){
  progressDialog.dismiss();
  if (result.exception != null) {
    if (SocketException.class.isAssignableFrom(result.exception.getClass()) || SocketTimeoutException.class.isAssignableFrom(result.exception.getClass())) {
      Toast.makeText(AppConfig.getInstance(),String.format(AppConfig.getInstance().getResources().getString(R.string.ssh_connect_failed),hostname,port,result.exception.getLocalizedMessage()),Toast.LENGTH_LONG).show();
    }
  }
 else {
    callback.onResult(result);
  }
}",0.98943661971831
162488,"public GetSshHostFingerprintTask(@NonNull String hostname,int port,AsyncTaskResult.Callback<AsyncTaskResult<PublicKey>> callback){
  this.mHostname=hostname;
  this.mPort=port;
  this.mCallback=callback;
}","public GetSshHostFingerprintTask(@NonNull String hostname,int port,AsyncTaskResult.Callback<AsyncTaskResult<PublicKey>> callback){
  this.hostname=hostname;
  this.port=port;
  this.callback=callback;
}",0.7862407862407862
162489,"@Override protected AsyncTaskResult<KeyPair> doInBackground(Void... voids){
  AsyncTaskResult<KeyPair> retval=null;
  for (  Provider provider : Security.getProviders())   Log.d(TAG,""String_Node_Str"" + provider.getName());
  try {
    for (    PemToKeyPairConverter converter : converters) {
      KeyPair keyPair=converter.convert(new String(mPemFile));
      if (keyPair != null) {
        retval=new AsyncTaskResult<KeyPair>(keyPair);
        break;
      }
    }
    if (retval == null)     throw new IOException(""String_Node_Str"");
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    retval=new AsyncTaskResult<KeyPair>(e);
  }
  return retval;
}","@Override protected AsyncTaskResult<KeyPair> doInBackground(Void... voids){
  AsyncTaskResult<KeyPair> retval=null;
  for (  Provider provider : Security.getProviders())   Log.d(TAG,""String_Node_Str"" + provider.getName());
  try {
    for (    PemToKeyPairConverter converter : converters) {
      KeyPair keyPair=converter.convert(new String(pemFile));
      if (keyPair != null) {
        retval=new AsyncTaskResult<KeyPair>(keyPair);
        break;
      }
    }
    if (retval == null)     throw new IOException(""String_Node_Str"");
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    retval=new AsyncTaskResult<KeyPair>(e);
  }
  return retval;
}",0.9977595220313666
162490,"public PemToKeyPairTask(@NonNull byte[] pemContent,AsyncTaskResult.Callback<AsyncTaskResult<KeyPair>> callback,String keyPassphrase){
  this.mPemFile=pemContent;
  this.mCallback=callback;
  if (keyPassphrase == null)   mPasswordFinder=null;
 else   mPasswordFinder=new PasswordFinder(){
    @Override public char[] reqPassword(    Resource<?> resource){
      return keyPassphrase.toCharArray();
    }
    @Override public boolean shouldRetry(    Resource<?> resource){
      return false;
    }
  }
;
}","public PemToKeyPairTask(@NonNull byte[] pemContent,AsyncTaskResult.Callback<AsyncTaskResult<KeyPair>> callback,String keyPassphrase){
  this.pemFile=pemContent;
  this.callback=callback;
  if (keyPassphrase == null)   passwordFinder=null;
 else   passwordFinder=new PasswordFinder(){
    @Override public char[] reqPassword(    Resource<?> resource){
      return keyPassphrase.toCharArray();
    }
    @Override public boolean shouldRetry(    Resource<?> resource){
      return false;
    }
  }
;
}",0.9880478087649402
162491,"@Override protected void onPostExecute(AsyncTaskResult<KeyPair> result){
  if (result.exception != null) {
    MaterialDialog.Builder builder=new MaterialDialog.Builder(AppConfig.getInstance().getActivityContext());
    EditText textfield=new EditText(builder.getContext());
    textfield.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
    builder.customView(textfield,false).title(R.string.ssh_key_prompt_passphrase).positiveText(R.string.ok).onPositive(((dialog,which) -> {
      new PemToKeyPairTask(mPemFile,mCallback,textfield.getText().toString()).execute();
      dialog.dismiss();
    }
)).negativeText(R.string.cancel).onNegative(((dialog,which) -> {
      dialog.dismiss();
      toastOnParseError(result);
    }
));
    builder.show();
  }
  if (mCallback != null) {
    mCallback.onResult(result);
  }
}","@Override protected void onPostExecute(AsyncTaskResult<KeyPair> result){
  if (result.exception != null) {
    MaterialDialog.Builder builder=new MaterialDialog.Builder(AppConfig.getInstance().getActivityContext());
    EditText textfield=new EditText(builder.getContext());
    textfield.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
    builder.customView(textfield,false).title(R.string.ssh_key_prompt_passphrase).positiveText(R.string.ok).onPositive(((dialog,which) -> {
      new PemToKeyPairTask(pemFile,callback,textfield.getText().toString()).execute();
      dialog.dismiss();
    }
)).negativeText(R.string.cancel).onNegative(((dialog,which) -> {
      dialog.dismiss();
      toastOnParseError(result);
    }
));
    builder.show();
  }
  if (callback != null) {
    callback.onResult(result);
  }
}",0.9929245283018868
162492,"@Override public KeyPair convert(String source){
  PuTTYKeyFile converter=new PuTTYKeyFile();
  converter.init(new StringReader(source),mPasswordFinder);
  try {
    return new KeyPair(converter.getPublic(),converter.getPrivate());
  }
 catch (  Exception ignored) {
    ignored.printStackTrace();
    return null;
  }
}","@Override public KeyPair convert(String source){
  PuTTYKeyFile converter=new PuTTYKeyFile();
  converter.init(new StringReader(source),passwordFinder);
  try {
    return new KeyPair(converter.getPublic(),converter.getPrivate());
  }
 catch (  Exception ignored) {
    ignored.printStackTrace();
    return null;
  }
}",0.9953051643192488
162493,"@Override public PrivateKey getPrivate() throws IOException {
  return mPrivateKey.getPrivate();
}","@Override public PrivateKey getPrivate() throws IOException {
  return privateKey.getPrivate();
}",0.9846153846153848
162494,"@Override protected AsyncTaskResult<SSHClient> doInBackground(Void... voids){
  final SSHClient sshClient=new SSHClient(new CustomSshJConfig());
  sshClient.addHostKeyVerifier(mHostKey);
  sshClient.setConnectTimeout(SSH_CONNECT_TIMEOUT);
  try {
    sshClient.connect(mHostname,mPort);
    if (mPassword != null && !""String_Node_Str"".equals(mPassword)) {
      sshClient.authPassword(mUsername,mPassword);
      return new AsyncTaskResult<SSHClient>(sshClient);
    }
 else {
      sshClient.authPublickey(mUsername,new KeyProvider(){
        @Override public PrivateKey getPrivate() throws IOException {
          return mPrivateKey.getPrivate();
        }
        @Override public PublicKey getPublic() throws IOException {
          return mPrivateKey.getPublic();
        }
        @Override public KeyType getType() throws IOException {
          return KeyType.fromKey(getPublic());
        }
      }
);
      return new AsyncTaskResult<SSHClient>(sshClient);
    }
  }
 catch (  UserAuthException e) {
    e.printStackTrace();
    return new AsyncTaskResult<SSHClient>(e);
  }
catch (  TransportException e) {
    e.printStackTrace();
    return new AsyncTaskResult<SSHClient>(e);
  }
catch (  IOException e) {
    e.printStackTrace();
    return new AsyncTaskResult<SSHClient>(e);
  }
}","@Override protected AsyncTaskResult<SSHClient> doInBackground(Void... voids){
  final SSHClient sshClient=new SSHClient(new CustomSshJConfig());
  sshClient.addHostKeyVerifier(hostKey);
  sshClient.setConnectTimeout(SSH_CONNECT_TIMEOUT);
  try {
    sshClient.connect(hostname,port);
    if (password != null && !""String_Node_Str"".equals(password)) {
      sshClient.authPassword(username,password);
      return new AsyncTaskResult<SSHClient>(sshClient);
    }
 else {
      sshClient.authPublickey(username,new KeyProvider(){
        @Override public PrivateKey getPrivate() throws IOException {
          return privateKey.getPrivate();
        }
        @Override public PublicKey getPublic() throws IOException {
          return privateKey.getPublic();
        }
        @Override public KeyType getType() throws IOException {
          return KeyType.fromKey(getPublic());
        }
      }
);
      return new AsyncTaskResult<SSHClient>(sshClient);
    }
  }
 catch (  UserAuthException e) {
    e.printStackTrace();
    return new AsyncTaskResult<SSHClient>(e);
  }
catch (  TransportException e) {
    e.printStackTrace();
    return new AsyncTaskResult<SSHClient>(e);
  }
catch (  IOException e) {
    e.printStackTrace();
    return new AsyncTaskResult<SSHClient>(e);
  }
}",0.9488372093023256
162495,"/** 
 * Constructor.
 * @param hostname hostname, required
 * @param port port, must be unsigned integer
 * @param hostKey SSH host fingerprint, required
 * @param username login username, required
 * @param password login password, required if using password authentication
 * @param privateKey login {@link KeyPair}, required if using key-based authentication
 */
public SshAuthenticationTask(@NonNull String hostname,@NonNull int port,@NonNull String hostKey,@NonNull String username,String password,KeyPair privateKey){
  this.mHostname=hostname;
  this.mPort=port;
  this.mHostKey=hostKey;
  this.mUsername=username;
  this.mPassword=password;
  this.mPrivateKey=privateKey;
}","/** 
 * Constructor.
 * @param hostname hostname, required
 * @param port port, must be unsigned integer
 * @param hostKey SSH host fingerprint, required
 * @param username login username, required
 * @param password login password, required if using password authentication
 * @param privateKey login {@link KeyPair}, required if using key-based authentication
 */
public SshAuthenticationTask(@NonNull String hostname,@NonNull int port,@NonNull String hostKey,@NonNull String username,String password,KeyPair privateKey){
  this.hostname=hostname;
  this.port=port;
  this.hostKey=hostKey;
  this.username=username;
  this.password=password;
  this.privateKey=privateKey;
}",0.986725663716814
162496,"@Override protected void onPostExecute(AsyncTaskResult<SSHClient> result){
  if (result.exception != null) {
    if (SocketException.class.isAssignableFrom(result.exception.getClass()) || SocketTimeoutException.class.isAssignableFrom(result.exception.getClass())) {
      Toast.makeText(AppConfig.getInstance(),String.format(AppConfig.getInstance().getResources().getString(R.string.ssh_connect_failed),mHostname,mPort,result.exception.getLocalizedMessage()),Toast.LENGTH_LONG).show();
      return;
    }
 else     if (TransportException.class.isAssignableFrom(result.exception.getClass())) {
      DisconnectReason disconnectReason=TransportException.class.cast(result.exception).getDisconnectReason();
      if (DisconnectReason.HOST_KEY_NOT_VERIFIABLE.equals(disconnectReason)) {
        new AlertDialog.Builder(AppConfig.getInstance().getActivityContext()).setTitle(R.string.ssh_connect_failed_host_key_changed_title).setMessage(R.string.ssh_connect_failed_host_key_changed_message).setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            dialog.dismiss();
          }
        }
).show();
      }
      return;
    }
 else     if (mPassword != null) {
      Toast.makeText(AppConfig.getInstance(),R.string.ssh_authentication_failure_password,Toast.LENGTH_LONG).show();
      return;
    }
 else     if (mPrivateKey != null) {
      Toast.makeText(AppConfig.getInstance(),R.string.ssh_authentication_failure_key,Toast.LENGTH_LONG).show();
      return;
    }
  }
}","@Override protected void onPostExecute(AsyncTaskResult<SSHClient> result){
  if (result.exception != null) {
    if (SocketException.class.isAssignableFrom(result.exception.getClass()) || SocketTimeoutException.class.isAssignableFrom(result.exception.getClass())) {
      Toast.makeText(AppConfig.getInstance(),String.format(AppConfig.getInstance().getResources().getString(R.string.ssh_connect_failed),hostname,port,result.exception.getLocalizedMessage()),Toast.LENGTH_LONG).show();
      return;
    }
 else     if (TransportException.class.isAssignableFrom(result.exception.getClass())) {
      DisconnectReason disconnectReason=TransportException.class.cast(result.exception).getDisconnectReason();
      if (DisconnectReason.HOST_KEY_NOT_VERIFIABLE.equals(disconnectReason)) {
        new AlertDialog.Builder(AppConfig.getInstance().getActivityContext()).setTitle(R.string.ssh_connect_failed_host_key_changed_title).setMessage(R.string.ssh_connect_failed_host_key_changed_message).setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            dialog.dismiss();
          }
        }
).show();
      }
      return;
    }
 else     if (password != null) {
      Toast.makeText(AppConfig.getInstance(),R.string.ssh_authentication_failure_password,Toast.LENGTH_LONG).show();
      return;
    }
 else     if (privateKey != null) {
      Toast.makeText(AppConfig.getInstance(),R.string.ssh_authentication_failure_key,Toast.LENGTH_LONG).show();
      return;
    }
  }
}",0.993064312736444
162497,"@Override public PublicKey getPublic() throws IOException {
  return mPrivateKey.getPublic();
}","@Override public PublicKey getPublic() throws IOException {
  return privateKey.getPublic();
}",0.984126984126984
162498,"/** 
 * the following method is called each time the action mode is shown. Always called after onCreateActionMode, but may be called multiple times if the mode is invalidated.
 */
public boolean onPrepareActionMode(ActionMode mode,Menu menu){
  ArrayList<LayoutElementParcelable> positions=adapter.getCheckedItems();
  TextView textView1=(TextView)actionModeView.findViewById(R.id.item_count);
  textView1.setText(String.valueOf(positions.size()));
  textView1.setOnClickListener(null);
  mode.setTitle(positions.size() + ""String_Node_Str"");
  hideOption(R.id.openmulti,menu);
  if (openMode != OpenMode.FILE) {
    hideOption(R.id.addshortcut,menu);
    hideOption(R.id.compress,menu);
    return true;
  }
  if (getMainActivity().mReturnIntent)   if (Build.VERSION.SDK_INT >= 16)   showOption(R.id.openmulti,menu);
  if (!results) {
    hideOption(R.id.openparent,menu);
    if (positions.size() == 1) {
      showOption(R.id.addshortcut,menu);
      showOption(R.id.openwith,menu);
      showOption(R.id.share,menu);
      File x=new File(adapter.getCheckedItems().get(0).desc);
      if (x.isDirectory()) {
        hideOption(R.id.openwith,menu);
        hideOption(R.id.share,menu);
        hideOption(R.id.openmulti,menu);
      }
      if (getMainActivity().mReturnIntent)       if (Build.VERSION.SDK_INT >= 16)       showOption(R.id.openmulti,menu);
    }
 else {
      try {
        showOption(R.id.share,menu);
        if (getMainActivity().mReturnIntent)         if (Build.VERSION.SDK_INT >= 16)         showOption(R.id.openmulti,menu);
        for (        LayoutElementParcelable e : adapter.getCheckedItems()) {
          File x=new File(e.desc);
          if (x.isDirectory()) {
            hideOption(R.id.share,menu);
            hideOption(R.id.openmulti,menu);
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      hideOption(R.id.openwith,menu);
      hideOption(R.id.addshortcut,menu);
    }
  }
 else {
    if (positions.size() == 1) {
      showOption(R.id.addshortcut,menu);
      showOption(R.id.openparent,menu);
      showOption(R.id.openwith,menu);
      showOption(R.id.share,menu);
      File x=new File(adapter.getCheckedItems().get(0).desc);
      if (x.isDirectory()) {
        hideOption(R.id.openwith,menu);
        hideOption(R.id.share,menu);
        hideOption(R.id.openmulti,menu);
      }
      if (getMainActivity().mReturnIntent)       if (Build.VERSION.SDK_INT >= 16)       showOption(R.id.openmulti,menu);
    }
 else {
      hideOption(R.id.openparent,menu);
      hideOption(R.id.addshortcut,menu);
      if (getMainActivity().mReturnIntent)       if (Build.VERSION.SDK_INT >= 16)       showOption(R.id.openmulti,menu);
      try {
        for (        LayoutElementParcelable e : adapter.getCheckedItems()) {
          File x=new File(e.desc);
          if (x.isDirectory()) {
            hideOption(R.id.share,menu);
            hideOption(R.id.openmulti,menu);
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      hideOption(R.id.openwith,menu);
    }
  }
  return true;
}","/** 
 * the following method is called each time the action mode is shown. Always called after onCreateActionMode, but may be called multiple times if the mode is invalidated.
 */
public boolean onPrepareActionMode(ActionMode mode,Menu menu){
  ArrayList<LayoutElementParcelable> positions=adapter.getCheckedItems();
  TextView textView1=(TextView)actionModeView.findViewById(R.id.item_count);
  textView1.setText(String.valueOf(positions.size()));
  textView1.setOnClickListener(null);
  mode.setTitle(positions.size() + ""String_Node_Str"");
  hideOption(R.id.openmulti,menu);
  menu.findItem(R.id.all).setTitle(positions.size() == folder_count + file_count ? R.string.deselect_all : R.string.selectall);
  if (openMode != OpenMode.FILE) {
    hideOption(R.id.addshortcut,menu);
    hideOption(R.id.compress,menu);
    return true;
  }
  if (getMainActivity().mReturnIntent)   if (Build.VERSION.SDK_INT >= 16)   showOption(R.id.openmulti,menu);
  if (!results) {
    hideOption(R.id.openparent,menu);
    if (positions.size() == 1) {
      showOption(R.id.addshortcut,menu);
      showOption(R.id.openwith,menu);
      showOption(R.id.share,menu);
      File x=new File(adapter.getCheckedItems().get(0).desc);
      if (x.isDirectory()) {
        hideOption(R.id.openwith,menu);
        hideOption(R.id.share,menu);
        hideOption(R.id.openmulti,menu);
      }
      if (getMainActivity().mReturnIntent)       if (Build.VERSION.SDK_INT >= 16)       showOption(R.id.openmulti,menu);
    }
 else {
      try {
        showOption(R.id.share,menu);
        if (getMainActivity().mReturnIntent)         if (Build.VERSION.SDK_INT >= 16)         showOption(R.id.openmulti,menu);
        for (        LayoutElementParcelable e : adapter.getCheckedItems()) {
          File x=new File(e.desc);
          if (x.isDirectory()) {
            hideOption(R.id.share,menu);
            hideOption(R.id.openmulti,menu);
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      hideOption(R.id.openwith,menu);
      hideOption(R.id.addshortcut,menu);
    }
  }
 else {
    if (positions.size() == 1) {
      showOption(R.id.addshortcut,menu);
      showOption(R.id.openparent,menu);
      showOption(R.id.openwith,menu);
      showOption(R.id.share,menu);
      File x=new File(adapter.getCheckedItems().get(0).desc);
      if (x.isDirectory()) {
        hideOption(R.id.openwith,menu);
        hideOption(R.id.share,menu);
        hideOption(R.id.openmulti,menu);
      }
      if (getMainActivity().mReturnIntent)       if (Build.VERSION.SDK_INT >= 16)       showOption(R.id.openmulti,menu);
    }
 else {
      hideOption(R.id.openparent,menu);
      hideOption(R.id.addshortcut,menu);
      if (getMainActivity().mReturnIntent)       if (Build.VERSION.SDK_INT >= 16)       showOption(R.id.openmulti,menu);
      try {
        for (        LayoutElementParcelable e : adapter.getCheckedItems()) {
          File x=new File(e.desc);
          if (x.isDirectory()) {
            hideOption(R.id.share,menu);
            hideOption(R.id.openmulti,menu);
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      hideOption(R.id.openwith,menu);
    }
  }
  return true;
}",0.979886863607794
162499,"@Override public boolean onPreferenceClick(final Preference preference){
switch (preference.getKey()) {
case KEY_COLOREDNAV:
    activity.invalidateNavBar();
  break;
case PreferencesConstants.PREFERENCE_SKIN:
case PreferencesConstants.PREFERENCE_SKIN_TWO:
case PreferencesConstants.PREFERENCE_ACCENT:
case PreferencesConstants.PREFERENCE_ICON_SKIN:
final ColorUsage usage=ColorUsage.fromString(preference.getKey());
if (usage != null) {
ColorAdapter adapter=new ColorAdapter(getActivity(),ColorPreference.availableColors,usage);
GridView v=(GridView)getActivity().getLayoutInflater().inflate(R.layout.dialog_grid,null);
v.setAdapter(adapter);
v.setOnItemClickListener(adapter);
int fab_skin=activity.getColorPreference().getColor(ColorUsage.ACCENT);
dialog=new MaterialDialog.Builder(getActivity()).positiveText(R.string.cancel).title(R.string.choose_color).theme(activity.getAppTheme().getMaterialDialogTheme()).autoDismiss(true).positiveColor(fab_skin).neutralColor(fab_skin).neutralText(R.string.defualt).callback(new MaterialDialog.ButtonCallback(){
  @Override public void onNeutral(  MaterialDialog dialog){
    super.onNeutral(dialog);
    if (activity != null)     activity.setRestartActivity();
    activity.getColorPreference().setRes(usage,usage.getDefaultColor()).saveToPreferences(sharedPref);
    invalidateEverything();
  }
}
).customView(v,false).build();
adapter.setDialog(dialog);
dialog.show();
}
return false;
case ""String_Node_Str"":
switchSections();
return true;
}
return false;
}","@Override public boolean onPreferenceClick(final Preference preference){
switch (preference.getKey()) {
case KEY_COLOREDNAV:
    activity.invalidateNavBar();
  break;
case PreferencesConstants.PREFERENCE_SKIN:
case PreferencesConstants.PREFERENCE_SKIN_TWO:
case PreferencesConstants.PREFERENCE_ACCENT:
case PreferencesConstants.PREFERENCE_ICON_SKIN:
final ColorUsage usage=ColorUsage.fromString(preference.getKey());
if (usage != null) {
ColorAdapter adapter=new ColorAdapter(getActivity(),ColorPreference.getUniqueAvailableColors(getActivity()),usage);
GridView v=(GridView)getActivity().getLayoutInflater().inflate(R.layout.dialog_grid,null);
v.setAdapter(adapter);
v.setOnItemClickListener(adapter);
int fab_skin=activity.getColorPreference().getColor(ColorUsage.ACCENT);
dialog=new MaterialDialog.Builder(getActivity()).positiveText(R.string.cancel).title(R.string.choose_color).theme(activity.getAppTheme().getMaterialDialogTheme()).autoDismiss(true).positiveColor(fab_skin).neutralColor(fab_skin).neutralText(R.string.defualt).callback(new MaterialDialog.ButtonCallback(){
  @Override public void onNeutral(  MaterialDialog dialog){
    super.onNeutral(dialog);
    if (activity != null)     activity.setRestartActivity();
    activity.getColorPreference().setRes(usage,usage.getDefaultColor()).saveToPreferences(sharedPref);
    invalidateEverything();
  }
}
).customView(v,false).build();
adapter.setDialog(dialog);
dialog.show();
}
return false;
case ""String_Node_Str"":
switchSections();
return true;
}
return false;
}",0.9914191419141914
162500,"public static void showEncryptAuthenticateDialog(final Context c,final Intent intent,final MainActivity main,AppTheme appTheme,final EncryptDecryptUtils.EncryptButtonCallbackInterface encryptButtonCallbackInterface){
  int accentColor=main.getColorPreference().getColor(ColorUsage.ACCENT);
  MaterialDialog.Builder builder=new MaterialDialog.Builder(c);
  builder.title(main.getResources().getString(R.string.crypt_encrypt));
  View rootView=View.inflate(c,R.layout.dialog_encrypt_authenticate,null);
  final AppCompatEditText passwordEditText=(AppCompatEditText)rootView.findViewById(R.id.edit_text_dialog_encrypt_password);
  final AppCompatEditText passwordConfirmEditText=(AppCompatEditText)rootView.findViewById(R.id.edit_text_dialog_encrypt_password_confirm);
  passwordEditText.post(() -> {
    InputMethodManager imm=(InputMethodManager)main.getSystemService(Context.INPUT_METHOD_SERVICE);
    imm.showSoftInput(passwordEditText,InputMethodManager.SHOW_IMPLICIT);
  }
);
  TextInputLayout textInputLayoutPassword=rootView.findViewById(R.id.til_encrypt_password);
  TextInputLayout textInputLayoutPasswordConfirm=rootView.findViewById(R.id.til_encrypt_password_confirm);
  passwordEditText.addTextChangedListener(new SimpleTextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      super.afterTextChanged(s);
      if (TextUtils.isEmpty(s.toString())) {
        textInputLayoutPassword.setError(String.format(c.getResources().getString(R.string.cantbeempty),c.getResources().getString(R.string.password)));
      }
 else {
        textInputLayoutPassword.setError(""String_Node_Str"");
      }
    }
  }
);
  passwordConfirmEditText.addTextChangedListener(new SimpleTextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      super.afterTextChanged(s);
      if (s.toString().equals(passwordEditText.getText().toString())) {
        textInputLayoutPasswordConfirm.setError(""String_Node_Str"");
      }
    }
  }
);
  passwordConfirmEditText.setOnFocusChangeListener((v,hasFocus) -> {
    if (TextUtils.isEmpty(passwordEditText.getText().toString())) {
      textInputLayoutPassword.setError(String.format(c.getResources().getString(R.string.cantbeempty),c.getResources().getString(R.string.password)));
    }
 else {
      textInputLayoutPassword.setError(""String_Node_Str"");
    }
  }
);
  passwordEditText.setOnFocusChangeListener((v,hasFocus) -> {
    boolean isPasswordSame=passwordConfirmEditText.getText().toString().equals(passwordEditText.getText().toString());
    if (!isPasswordSame && !TextUtils.isEmpty(passwordConfirmEditText.getText().toString())) {
      textInputLayoutPasswordConfirm.setError(c.getResources().getString(R.string.password_no_match));
    }
  }
);
  builder.customView(rootView,true);
  builder.positiveText(c.getString(R.string.ok));
  builder.negativeText(c.getString(R.string.cancel));
  builder.theme(appTheme.getMaterialDialogTheme());
  builder.positiveColor(accentColor);
  builder.negativeColor(accentColor);
  builder.onNegative((dialog,which) -> dialog.cancel());
  builder.autoDismiss(false);
  builder.onPositive((dialog,which) -> {
    if (TextUtils.isEmpty(passwordEditText.getText().toString())) {
      textInputLayoutPassword.setError(String.format(c.getResources().getString(R.string.cantbeempty),c.getResources().getString(R.string.password)));
    }
 else     if (!passwordConfirmEditText.getText().toString().equals(passwordEditText.getText().toString())) {
      textInputLayoutPasswordConfirm.setError(c.getResources().getString(R.string.password_no_match));
    }
 else {
      try {
        encryptButtonCallbackInterface.onButtonPressed(intent,passwordEditText.getText().toString());
      }
 catch (      Exception e) {
        e.printStackTrace();
        Toast.makeText(c,c.getString(R.string.crypt_encryption_fail),Toast.LENGTH_LONG).show();
      }
 finally {
        dialog.dismiss();
      }
    }
  }
);
  builder.show();
}","public static void showEncryptAuthenticateDialog(final Context c,final Intent intent,final MainActivity main,AppTheme appTheme,final EncryptDecryptUtils.EncryptButtonCallbackInterface encryptButtonCallbackInterface){
  int accentColor=main.getColorPreference().getColor(ColorUsage.ACCENT);
  MaterialDialog.Builder builder=new MaterialDialog.Builder(c);
  builder.title(main.getResources().getString(R.string.crypt_encrypt));
  View rootView=View.inflate(c,R.layout.dialog_encrypt_authenticate,null);
  final AppCompatEditText passwordEditText=rootView.findViewById(R.id.edit_text_dialog_encrypt_password);
  final AppCompatEditText passwordConfirmEditText=rootView.findViewById(R.id.edit_text_dialog_encrypt_password_confirm);
  passwordEditText.post(() -> {
    InputMethodManager imm=(InputMethodManager)main.getSystemService(Context.INPUT_METHOD_SERVICE);
    imm.showSoftInput(passwordEditText,InputMethodManager.SHOW_IMPLICIT);
  }
);
  TextInputLayout textInputLayoutPassword=rootView.findViewById(R.id.til_encrypt_password);
  TextInputLayout textInputLayoutPasswordConfirm=rootView.findViewById(R.id.til_encrypt_password_confirm);
  passwordEditText.addTextChangedListener(new SimpleTextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      super.afterTextChanged(s);
      if (!TextUtils.isEmpty(s.toString())) {
        textInputLayoutPassword.setError(""String_Node_Str"");
      }
    }
  }
);
  passwordConfirmEditText.addTextChangedListener(new SimpleTextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      super.afterTextChanged(s);
      if (s.toString().equals(passwordEditText.getText().toString())) {
        textInputLayoutPasswordConfirm.setError(""String_Node_Str"");
      }
    }
  }
);
  passwordConfirmEditText.setOnFocusChangeListener((v,hasFocus) -> {
    if (TextUtils.isEmpty(passwordEditText.getText().toString())) {
      textInputLayoutPassword.setError(c.getResources().getString(R.string.error) + ""String_Node_Str"" + String.format(c.getResources().getString(R.string.cantbeempty),c.getResources().getString(R.string.password)));
    }
 else {
      textInputLayoutPassword.setError(""String_Node_Str"");
    }
  }
);
  passwordEditText.setOnFocusChangeListener((v,hasFocus) -> {
    boolean isPasswordSame=passwordConfirmEditText.getText().toString().equals(passwordEditText.getText().toString());
    if (!isPasswordSame && !TextUtils.isEmpty(passwordConfirmEditText.getText().toString())) {
      textInputLayoutPasswordConfirm.setError(c.getResources().getString(R.string.error) + ""String_Node_Str"" + c.getResources().getString(R.string.password_no_match));
    }
  }
);
  builder.customView(rootView,true);
  builder.positiveText(c.getString(R.string.ok));
  builder.negativeText(c.getString(R.string.cancel));
  builder.theme(appTheme.getMaterialDialogTheme());
  builder.positiveColor(accentColor);
  builder.negativeColor(accentColor);
  builder.onNegative((dialog,which) -> dialog.cancel());
  builder.autoDismiss(false);
  builder.onPositive((dialog,which) -> {
    if (TextUtils.isEmpty(passwordEditText.getText().toString())) {
      textInputLayoutPassword.setError(c.getResources().getString(R.string.error) + ""String_Node_Str"" + String.format(c.getResources().getString(R.string.cantbeempty),c.getResources().getString(R.string.password)));
    }
 else     if (!passwordConfirmEditText.getText().toString().equals(passwordEditText.getText().toString())) {
      textInputLayoutPasswordConfirm.setError(c.getResources().getString(R.string.error) + ""String_Node_Str"" + c.getResources().getString(R.string.password_no_match));
    }
 else {
      try {
        encryptButtonCallbackInterface.onButtonPressed(intent,passwordEditText.getText().toString());
      }
 catch (      Exception e) {
        e.printStackTrace();
        Toast.makeText(c,c.getString(R.string.crypt_encryption_fail),Toast.LENGTH_LONG).show();
      }
 finally {
        dialog.dismiss();
      }
    }
  }
);
  builder.show();
}",0.917255297679112
162501,"public boolean onActionItemClicked(ActionMode mode,MenuItem item){
switch (item.getItemId()) {
case R.id.all:
    compressedExplorerAdapter.toggleChecked(true);
  mode.invalidate();
return true;
case R.id.ex:
Toast.makeText(getActivity(),getResources().getString(R.string.extracting),Toast.LENGTH_SHORT).show();
String[] dirs=new String[compressedExplorerAdapter.getCheckedItemPositions().size()];
for (int i=0; i < dirs.length; i++) {
dirs[i]=elements.get(compressedExplorerAdapter.getCheckedItemPositions().get(i)).name;
}
compressedInterface.decompress(null,dirs);
mode.finish();
return true;
}
return false;
}","public boolean onActionItemClicked(ActionMode mode,MenuItem item){
switch (item.getItemId()) {
case R.id.all:
    ArrayList<Integer> positions=compressedExplorerAdapter.getCheckedItemPositions();
  boolean shouldDeselectAll=positions.size() != folder + file;
compressedExplorerAdapter.toggleChecked(shouldDeselectAll);
mode.invalidate();
item.setTitle(shouldDeselectAll ? R.string.deselect_all : R.string.selectall);
if (!shouldDeselectAll) {
selection=false;
mActionMode.finish();
mActionMode=null;
}
return true;
case R.id.ex:
Toast.makeText(getActivity(),getResources().getString(R.string.extracting),Toast.LENGTH_SHORT).show();
String[] dirs=new String[compressedExplorerAdapter.getCheckedItemPositions().size()];
for (int i=0; i < dirs.length; i++) {
dirs[i]=elements.get(compressedExplorerAdapter.getCheckedItemPositions().get(i)).name;
}
compressedInterface.decompress(null,dirs);
mode.finish();
return true;
}
return false;
}",0.7723156532988357
162502,"public boolean onPrepareActionMode(ActionMode mode,Menu menu){
  ArrayList<Integer> positions=compressedExplorerAdapter.getCheckedItemPositions();
  ((TextView)v.findViewById(R.id.item_count)).setText(positions.size() + ""String_Node_Str"");
  return false;
}","public boolean onPrepareActionMode(ActionMode mode,Menu menu){
  ArrayList<Integer> positions=compressedExplorerAdapter.getCheckedItemPositions();
  ((TextView)v.findViewById(R.id.item_count)).setText(positions.size() + ""String_Node_Str"");
  menu.findItem(R.id.all).setTitle(positions.size() == folder + file ? R.string.deselect_all : R.string.selectall);
  return false;
}",0.7777777777777778
162503,"public boolean onActionItemClicked(ActionMode mode,MenuItem item){
  computeScroll();
  ArrayList<LayoutElementParcelable> checkedItems=adapter.getCheckedItems();
switch (item.getItemId()) {
case R.id.openmulti:
    try {
      Intent intent_result=new Intent(Intent.ACTION_SEND_MULTIPLE);
      ArrayList<Uri> resulturis=new ArrayList<>();
      for (      LayoutElementParcelable element : checkedItems) {
        HybridFileParcelable baseFile=element.generateBaseFile();
        Uri resultUri=Utils.getUriForBaseFile(getActivity(),baseFile);
        if (resultUri != null) {
          resulturis.add(resultUri);
        }
      }
      intent_result.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
      getActivity().setResult(FragmentActivity.RESULT_OK,intent_result);
      intent_result.putParcelableArrayListExtra(Intent.EXTRA_STREAM,resulturis);
      getActivity().finish();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  return true;
case R.id.about:
LayoutElementParcelable x=checkedItems.get(0);
GeneralDialogCreation.showPropertiesDialogWithPermissions((x).generateBaseFile(),x.permissions,(ThemedActivity)getActivity(),ThemedActivity.rootMode,utilsProvider.getAppTheme());
mode.finish();
return true;
case R.id.delete:
GeneralDialogCreation.deleteFilesDialog(getContext(),LIST_ELEMENTS,getMainActivity(),checkedItems,utilsProvider.getAppTheme());
return true;
case R.id.share:
ArrayList<File> arrayList=new ArrayList<>();
for (LayoutElementParcelable e : checkedItems) {
arrayList.add(new File(e.desc));
}
if (arrayList.size() > 100) Toast.makeText(getActivity(),getResources().getString(R.string.share_limit),Toast.LENGTH_SHORT).show();
 else {
switch (LIST_ELEMENTS.get(0).getMode()) {
case DROPBOX:
case BOX:
case GDRIVE:
case ONEDRIVE:
FileUtils.shareCloudFile(LIST_ELEMENTS.get(0).desc,LIST_ELEMENTS.get(0).getMode(),getContext());
break;
default :
FileUtils.shareFiles(arrayList,getActivity(),utilsProvider.getAppTheme(),accentColor);
break;
}
}
return true;
case R.id.openparent:
loadlist(new File(checkedItems.get(0).desc).getParent(),false,OpenMode.FILE);
return true;
case R.id.all:
if (adapter.areAllChecked(CURRENT_PATH)) {
adapter.toggleChecked(false,CURRENT_PATH);
}
 else {
adapter.toggleChecked(true,CURRENT_PATH);
}
mode.invalidate();
return true;
case R.id.rename:
final ActionMode m=mode;
final HybridFileParcelable f;
f=checkedItems.get(0).generateBaseFile();
rename(f);
mode.finish();
return true;
case R.id.hide:
for (int i1=0; i1 < checkedItems.size(); i1++) {
hide(checkedItems.get(i1).desc);
}
updateList();
mode.finish();
return true;
case R.id.ex:
getMainActivity().mainActivityHelper.extractFile(new File(checkedItems.get(0).desc));
mode.finish();
return true;
case R.id.cpy:
case R.id.cut:
{
HybridFileParcelable[] copies=new HybridFileParcelable[checkedItems.size()];
for (int i=0; i < checkedItems.size(); i++) {
copies[i]=checkedItems.get(i).generateBaseFile();
}
int op=item.getItemId() == R.id.cpy ? PasteHelper.OPERATION_COPY : PasteHelper.OPERATION_CUT;
PasteHelper pasteHelper=new PasteHelper(op,copies);
getMainActivity().setPaste(pasteHelper);
mode.finish();
return true;
}
case R.id.compress:
ArrayList<HybridFileParcelable> copies1=new ArrayList<>();
for (int i4=0; i4 < checkedItems.size(); i4++) {
copies1.add(checkedItems.get(i4).generateBaseFile());
}
GeneralDialogCreation.showCompressDialog((MainActivity)getActivity(),copies1,CURRENT_PATH);
mode.finish();
return true;
case R.id.openwith:
boolean useNewStack=sharedPref.getBoolean(PreferencesConstants.PREFERENCE_TEXTEDITOR_NEWSTACK,false);
FileUtils.openunknown(new File(checkedItems.get(0).desc),getActivity(),true,useNewStack);
return true;
case R.id.addshortcut:
addShortcut(checkedItems.get(0));
mode.finish();
return true;
default :
return false;
}
}","public boolean onActionItemClicked(ActionMode mode,MenuItem item){
  computeScroll();
  ArrayList<LayoutElementParcelable> checkedItems=adapter.getCheckedItems();
switch (item.getItemId()) {
case R.id.openmulti:
    try {
      Intent intent_result=new Intent(Intent.ACTION_SEND_MULTIPLE);
      ArrayList<Uri> resulturis=new ArrayList<>();
      for (      LayoutElementParcelable element : checkedItems) {
        HybridFileParcelable baseFile=element.generateBaseFile();
        Uri resultUri=Utils.getUriForBaseFile(getActivity(),baseFile);
        if (resultUri != null) {
          resulturis.add(resultUri);
        }
      }
      intent_result.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
      getActivity().setResult(FragmentActivity.RESULT_OK,intent_result);
      intent_result.putParcelableArrayListExtra(Intent.EXTRA_STREAM,resulturis);
      getActivity().finish();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  return true;
case R.id.about:
LayoutElementParcelable x=checkedItems.get(0);
GeneralDialogCreation.showPropertiesDialogWithPermissions((x).generateBaseFile(),x.permissions,(ThemedActivity)getActivity(),ThemedActivity.rootMode,utilsProvider.getAppTheme());
mode.finish();
return true;
case R.id.delete:
GeneralDialogCreation.deleteFilesDialog(getContext(),LIST_ELEMENTS,getMainActivity(),checkedItems,utilsProvider.getAppTheme());
return true;
case R.id.share:
ArrayList<File> arrayList=new ArrayList<>();
for (LayoutElementParcelable e : checkedItems) {
arrayList.add(new File(e.desc));
}
if (arrayList.size() > 100) Toast.makeText(getActivity(),getResources().getString(R.string.share_limit),Toast.LENGTH_SHORT).show();
 else {
switch (LIST_ELEMENTS.get(0).getMode()) {
case DROPBOX:
case BOX:
case GDRIVE:
case ONEDRIVE:
FileUtils.shareCloudFile(LIST_ELEMENTS.get(0).desc,LIST_ELEMENTS.get(0).getMode(),getContext());
break;
default :
FileUtils.shareFiles(arrayList,getActivity(),utilsProvider.getAppTheme(),accentColor);
break;
}
}
return true;
case R.id.openparent:
loadlist(new File(checkedItems.get(0).desc).getParent(),false,OpenMode.FILE);
return true;
case R.id.all:
if (adapter.areAllChecked(CURRENT_PATH)) {
adapter.toggleChecked(false,CURRENT_PATH);
item.setTitle(R.string.selectall);
}
 else {
adapter.toggleChecked(true,CURRENT_PATH);
item.setTitle(R.string.deselect_all);
}
mode.invalidate();
return true;
case R.id.rename:
final ActionMode m=mode;
final HybridFileParcelable f;
f=checkedItems.get(0).generateBaseFile();
rename(f);
mode.finish();
return true;
case R.id.hide:
for (int i1=0; i1 < checkedItems.size(); i1++) {
hide(checkedItems.get(i1).desc);
}
updateList();
mode.finish();
return true;
case R.id.ex:
getMainActivity().mainActivityHelper.extractFile(new File(checkedItems.get(0).desc));
mode.finish();
return true;
case R.id.cpy:
case R.id.cut:
{
HybridFileParcelable[] copies=new HybridFileParcelable[checkedItems.size()];
for (int i=0; i < checkedItems.size(); i++) {
copies[i]=checkedItems.get(i).generateBaseFile();
}
int op=item.getItemId() == R.id.cpy ? PasteHelper.OPERATION_COPY : PasteHelper.OPERATION_CUT;
PasteHelper pasteHelper=new PasteHelper(op,copies);
getMainActivity().setPaste(pasteHelper);
mode.finish();
return true;
}
case R.id.compress:
ArrayList<HybridFileParcelable> copies1=new ArrayList<>();
for (int i4=0; i4 < checkedItems.size(); i4++) {
copies1.add(checkedItems.get(i4).generateBaseFile());
}
GeneralDialogCreation.showCompressDialog((MainActivity)getActivity(),copies1,CURRENT_PATH);
mode.finish();
return true;
case R.id.openwith:
boolean useNewStack=sharedPref.getBoolean(PreferencesConstants.PREFERENCE_TEXTEDITOR_NEWSTACK,false);
FileUtils.openunknown(new File(checkedItems.get(0).desc),getActivity(),true,useNewStack);
return true;
case R.id.addshortcut:
addShortcut(checkedItems.get(0));
mode.finish();
return true;
default :
return false;
}
}",0.9904637491835402
162504,"public boolean onActionItemClicked(ActionMode mode,MenuItem item){
switch (item.getItemId()) {
case R.id.all:
    compressedExplorerAdapter.toggleChecked(true);
  mode.invalidate();
return true;
case R.id.ex:
Toast.makeText(getActivity(),getResources().getString(R.string.extracting),Toast.LENGTH_SHORT).show();
String[] dirs=new String[compressedExplorerAdapter.getCheckedItemPositions().size()];
for (int i=0; i < dirs.length; i++) {
dirs[i]=elements.get(compressedExplorerAdapter.getCheckedItemPositions().get(i)).name;
}
compressedInterface.decompress(null,dirs);
mode.finish();
return true;
}
return false;
}","public boolean onActionItemClicked(ActionMode mode,MenuItem item){
switch (item.getItemId()) {
case R.id.all:
    ArrayList<Integer> positions=compressedExplorerAdapter.getCheckedItemPositions();
  boolean shouldDeselectAll=positions.size() != folder + file;
compressedExplorerAdapter.toggleChecked(shouldDeselectAll);
mode.invalidate();
item.setTitle(shouldDeselectAll ? R.string.deselect_all : R.string.selectall);
if (!shouldDeselectAll) {
selection=false;
mActionMode.finish();
mActionMode=null;
}
return true;
case R.id.ex:
Toast.makeText(getActivity(),getResources().getString(R.string.extracting),Toast.LENGTH_SHORT).show();
String[] dirs=new String[compressedExplorerAdapter.getCheckedItemPositions().size()];
for (int i=0; i < dirs.length; i++) {
dirs[i]=elements.get(compressedExplorerAdapter.getCheckedItemPositions().get(i)).name;
}
compressedInterface.decompress(null,dirs);
mode.finish();
return true;
}
return false;
}",0.7723156532988357
162505,"public boolean onPrepareActionMode(ActionMode mode,Menu menu){
  ArrayList<Integer> positions=compressedExplorerAdapter.getCheckedItemPositions();
  ((TextView)v.findViewById(R.id.item_count)).setText(positions.size() + ""String_Node_Str"");
  return false;
}","public boolean onPrepareActionMode(ActionMode mode,Menu menu){
  ArrayList<Integer> positions=compressedExplorerAdapter.getCheckedItemPositions();
  ((TextView)v.findViewById(R.id.item_count)).setText(positions.size() + ""String_Node_Str"");
  menu.findItem(R.id.all).setTitle(positions.size() == folder + file ? R.string.deselect_all : R.string.selectall);
  return false;
}",0.7777777777777778
162506,"public boolean onActionItemClicked(ActionMode mode,MenuItem item){
  computeScroll();
  ArrayList<LayoutElementParcelable> checkedItems=adapter.getCheckedItems();
switch (item.getItemId()) {
case R.id.openmulti:
    try {
      Intent intent_result=new Intent(Intent.ACTION_SEND_MULTIPLE);
      ArrayList<Uri> resulturis=new ArrayList<>();
      for (      LayoutElementParcelable element : checkedItems) {
        HybridFileParcelable baseFile=element.generateBaseFile();
        Uri resultUri=Utils.getUriForBaseFile(getActivity(),baseFile);
        if (resultUri != null) {
          resulturis.add(resultUri);
        }
      }
      intent_result.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
      getActivity().setResult(FragmentActivity.RESULT_OK,intent_result);
      intent_result.putParcelableArrayListExtra(Intent.EXTRA_STREAM,resulturis);
      getActivity().finish();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  return true;
case R.id.about:
LayoutElementParcelable x=checkedItems.get(0);
GeneralDialogCreation.showPropertiesDialogWithPermissions((x).generateBaseFile(),x.permissions,(ThemedActivity)getActivity(),ThemedActivity.rootMode,utilsProvider.getAppTheme());
mode.finish();
return true;
case R.id.delete:
GeneralDialogCreation.deleteFilesDialog(getContext(),LIST_ELEMENTS,getMainActivity(),checkedItems,utilsProvider.getAppTheme());
return true;
case R.id.share:
ArrayList<File> arrayList=new ArrayList<>();
for (LayoutElementParcelable e : checkedItems) {
arrayList.add(new File(e.desc));
}
if (arrayList.size() > 100) Toast.makeText(getActivity(),getResources().getString(R.string.share_limit),Toast.LENGTH_SHORT).show();
 else {
switch (LIST_ELEMENTS.get(0).getMode()) {
case DROPBOX:
case BOX:
case GDRIVE:
case ONEDRIVE:
FileUtils.shareCloudFile(LIST_ELEMENTS.get(0).desc,LIST_ELEMENTS.get(0).getMode(),getContext());
break;
default :
FileUtils.shareFiles(arrayList,getActivity(),utilsProvider.getAppTheme(),accentColor);
break;
}
}
return true;
case R.id.openparent:
loadlist(new File(checkedItems.get(0).desc).getParent(),false,OpenMode.FILE);
return true;
case R.id.all:
if (adapter.areAllChecked(CURRENT_PATH)) {
adapter.toggleChecked(false,CURRENT_PATH);
}
 else {
adapter.toggleChecked(true,CURRENT_PATH);
}
mode.invalidate();
return true;
case R.id.rename:
final ActionMode m=mode;
final HybridFileParcelable f;
f=checkedItems.get(0).generateBaseFile();
rename(f);
mode.finish();
return true;
case R.id.hide:
for (int i1=0; i1 < checkedItems.size(); i1++) {
hide(checkedItems.get(i1).desc);
}
updateList();
mode.finish();
return true;
case R.id.ex:
getMainActivity().mainActivityHelper.extractFile(new File(checkedItems.get(0).desc));
mode.finish();
return true;
case R.id.cpy:
case R.id.cut:
{
HybridFileParcelable[] copies=new HybridFileParcelable[checkedItems.size()];
for (int i=0; i < checkedItems.size(); i++) {
copies[i]=checkedItems.get(i).generateBaseFile();
}
int op=item.getItemId() == R.id.cpy ? PasteHelper.OPERATION_COPY : PasteHelper.OPERATION_CUT;
PasteHelper pasteHelper=new PasteHelper(op,copies);
getMainActivity().setPaste(pasteHelper);
mode.finish();
return true;
}
case R.id.compress:
ArrayList<HybridFileParcelable> copies1=new ArrayList<>();
for (int i4=0; i4 < checkedItems.size(); i4++) {
copies1.add(checkedItems.get(i4).generateBaseFile());
}
GeneralDialogCreation.showCompressDialog((MainActivity)getActivity(),copies1,CURRENT_PATH);
mode.finish();
return true;
case R.id.openwith:
boolean useNewStack=sharedPref.getBoolean(PreferencesConstants.PREFERENCE_TEXTEDITOR_NEWSTACK,false);
FileUtils.openunknown(new File(checkedItems.get(0).desc),getActivity(),true,useNewStack);
return true;
case R.id.addshortcut:
addShortcut(checkedItems.get(0));
mode.finish();
return true;
default :
return false;
}
}","public boolean onActionItemClicked(ActionMode mode,MenuItem item){
  computeScroll();
  ArrayList<LayoutElementParcelable> checkedItems=adapter.getCheckedItems();
switch (item.getItemId()) {
case R.id.openmulti:
    try {
      Intent intent_result=new Intent(Intent.ACTION_SEND_MULTIPLE);
      ArrayList<Uri> resulturis=new ArrayList<>();
      for (      LayoutElementParcelable element : checkedItems) {
        HybridFileParcelable baseFile=element.generateBaseFile();
        Uri resultUri=Utils.getUriForBaseFile(getActivity(),baseFile);
        if (resultUri != null) {
          resulturis.add(resultUri);
        }
      }
      intent_result.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
      getActivity().setResult(FragmentActivity.RESULT_OK,intent_result);
      intent_result.putParcelableArrayListExtra(Intent.EXTRA_STREAM,resulturis);
      getActivity().finish();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  return true;
case R.id.about:
LayoutElementParcelable x=checkedItems.get(0);
GeneralDialogCreation.showPropertiesDialogWithPermissions((x).generateBaseFile(),x.permissions,(ThemedActivity)getActivity(),ThemedActivity.rootMode,utilsProvider.getAppTheme());
mode.finish();
return true;
case R.id.delete:
GeneralDialogCreation.deleteFilesDialog(getContext(),LIST_ELEMENTS,getMainActivity(),checkedItems,utilsProvider.getAppTheme());
return true;
case R.id.share:
ArrayList<File> arrayList=new ArrayList<>();
for (LayoutElementParcelable e : checkedItems) {
arrayList.add(new File(e.desc));
}
if (arrayList.size() > 100) Toast.makeText(getActivity(),getResources().getString(R.string.share_limit),Toast.LENGTH_SHORT).show();
 else {
switch (LIST_ELEMENTS.get(0).getMode()) {
case DROPBOX:
case BOX:
case GDRIVE:
case ONEDRIVE:
FileUtils.shareCloudFile(LIST_ELEMENTS.get(0).desc,LIST_ELEMENTS.get(0).getMode(),getContext());
break;
default :
FileUtils.shareFiles(arrayList,getActivity(),utilsProvider.getAppTheme(),accentColor);
break;
}
}
return true;
case R.id.openparent:
loadlist(new File(checkedItems.get(0).desc).getParent(),false,OpenMode.FILE);
return true;
case R.id.all:
if (adapter.areAllChecked(CURRENT_PATH)) {
adapter.toggleChecked(false,CURRENT_PATH);
item.setTitle(R.string.selectall);
}
 else {
adapter.toggleChecked(true,CURRENT_PATH);
item.setTitle(R.string.deselect_all);
}
mode.invalidate();
return true;
case R.id.rename:
final ActionMode m=mode;
final HybridFileParcelable f;
f=checkedItems.get(0).generateBaseFile();
rename(f);
mode.finish();
return true;
case R.id.hide:
for (int i1=0; i1 < checkedItems.size(); i1++) {
hide(checkedItems.get(i1).desc);
}
updateList();
mode.finish();
return true;
case R.id.ex:
getMainActivity().mainActivityHelper.extractFile(new File(checkedItems.get(0).desc));
mode.finish();
return true;
case R.id.cpy:
case R.id.cut:
{
HybridFileParcelable[] copies=new HybridFileParcelable[checkedItems.size()];
for (int i=0; i < checkedItems.size(); i++) {
copies[i]=checkedItems.get(i).generateBaseFile();
}
int op=item.getItemId() == R.id.cpy ? PasteHelper.OPERATION_COPY : PasteHelper.OPERATION_CUT;
PasteHelper pasteHelper=new PasteHelper(op,copies);
getMainActivity().setPaste(pasteHelper);
mode.finish();
return true;
}
case R.id.compress:
ArrayList<HybridFileParcelable> copies1=new ArrayList<>();
for (int i4=0; i4 < checkedItems.size(); i4++) {
copies1.add(checkedItems.get(i4).generateBaseFile());
}
GeneralDialogCreation.showCompressDialog((MainActivity)getActivity(),copies1,CURRENT_PATH);
mode.finish();
return true;
case R.id.openwith:
boolean useNewStack=sharedPref.getBoolean(PreferencesConstants.PREFERENCE_TEXTEDITOR_NEWSTACK,false);
FileUtils.openunknown(new File(checkedItems.get(0).desc),getActivity(),true,useNewStack);
return true;
case R.id.addshortcut:
addShortcut(checkedItems.get(0));
mode.finish();
return true;
default :
return false;
}
}",0.9904637491835402
162507,"void initialiseViews(){
  appBarLayout=getAppbar().getAppbarLayout();
  mScreenLayout=findViewById(R.id.main_frame);
  buttonBarFrame=findViewById(R.id.buttonbarframe);
  drawerHeaderLayout=getLayoutInflater().inflate(R.layout.drawerheader,null);
  drawerHeaderParent=(RelativeLayout)drawerHeaderLayout.findViewById(R.id.drawer_header_parent);
  drawerHeaderView=drawerHeaderLayout.findViewById(R.id.drawer_header);
  drawerHeaderView.setOnLongClickListener(v -> {
    Intent intent1;
    if (SDK_INT < Build.VERSION_CODES.KITKAT) {
      intent1=new Intent();
      intent1.setAction(Intent.ACTION_GET_CONTENT);
    }
 else {
      intent1=new Intent(Intent.ACTION_OPEN_DOCUMENT);
    }
    intent1.addCategory(Intent.CATEGORY_OPENABLE);
    intent1.setType(""String_Node_Str"");
    startActivityForResult(intent1,image_selector_request_code);
    return false;
  }
);
  setSupportActionBar(getAppbar().getToolbar());
  frameLayout=findViewById(R.id.content_frame);
  indicator_layout=findViewById(R.id.indicator_layout);
  mDrawerLinear=findViewById(R.id.left_drawer);
  if (getAppTheme().equals(AppTheme.DARK))   mDrawerLinear.setBackgroundColor(Utils.getColor(this,R.color.holo_dark_background));
 else   if (getAppTheme().equals(AppTheme.BLACK))   mDrawerLinear.setBackgroundColor(Utils.getColor(this,android.R.color.black));
 else   mDrawerLinear.setBackgroundColor(Color.WHITE);
  mDrawerLayout=findViewById(R.id.drawer_layout);
  mDrawerList=findViewById(R.id.menu_drawer);
  drawerHeaderView.setBackgroundResource(R.drawable.amaze_header);
  if (findViewById(R.id.tab_frame) != null) {
    mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_OPEN,mDrawerLinear);
    mDrawerLayout.openDrawer(mDrawerLinear);
    mDrawerLayout.setScrimColor(Color.TRANSPARENT);
    isDrawerLocked=true;
  }
 else   if (findViewById(R.id.tab_frame) == null) {
    mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED,mDrawerLinear);
    mDrawerLayout.closeDrawer(mDrawerLinear);
    isDrawerLocked=false;
  }
  mDrawerList.addHeaderView(drawerHeaderLayout);
  getSupportActionBar().setDisplayShowTitleEnabled(false);
  fabBgView=findViewById(R.id.fab_bg);
  if (getAppTheme().equals(AppTheme.DARK) || getAppTheme().equals(AppTheme.BLACK)) {
    fabBgView.setBackgroundResource(R.drawable.fab_shadow_dark);
  }
  fabBgView.setOnClickListener(view -> {
    if (getAppbar().getSearchView().isEnabled())     getAppbar().getSearchView().hideSearchView();
  }
);
  setDrawerHeaderBackground();
  if (SDK_INT == Build.VERSION_CODES.KITKAT_WATCH || SDK_INT == Build.VERSION_CODES.KITKAT) {
    SystemBarTintManager tintManager=new SystemBarTintManager(this);
    tintManager.setStatusBarTintEnabled(true);
    FrameLayout.MarginLayoutParams p=(ViewGroup.MarginLayoutParams)findViewById(R.id.drawer_layout).getLayoutParams();
    SystemBarTintManager.SystemBarConfig config=tintManager.getConfig();
    if (!isDrawerLocked)     p.setMargins(0,config.getStatusBarHeight(),0,0);
  }
 else   if (SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    Window window=getWindow();
    window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
    if (isDrawerLocked) {
      window.setStatusBarColor((skinStatusBar));
    }
 else     window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
    if (colourednavigation)     window.setNavigationBarColor(skinStatusBar);
  }
}","void initialiseViews(){
  appBarLayout=getAppbar().getAppbarLayout();
  mScreenLayout=findViewById(R.id.main_frame);
  buttonBarFrame=findViewById(R.id.buttonbarframe);
  drawerHeaderLayout=getLayoutInflater().inflate(R.layout.drawerheader,null);
  drawerHeaderParent=(RelativeLayout)drawerHeaderLayout.findViewById(R.id.drawer_header_parent);
  drawerHeaderView=drawerHeaderLayout.findViewById(R.id.drawer_header);
  drawerHeaderView.setOnLongClickListener(v -> {
    Intent intent1;
    if (SDK_INT < Build.VERSION_CODES.KITKAT) {
      intent1=new Intent();
      intent1.setAction(Intent.ACTION_GET_CONTENT);
    }
 else {
      intent1=new Intent(Intent.ACTION_OPEN_DOCUMENT);
    }
    intent1.addCategory(Intent.CATEGORY_OPENABLE);
    intent1.setType(""String_Node_Str"");
    startActivityForResult(intent1,image_selector_request_code);
    return false;
  }
);
  setSupportActionBar(getAppbar().getToolbar());
  frameLayout=findViewById(R.id.content_frame);
  indicator_layout=findViewById(R.id.indicator_layout);
  mDrawerLinear=findViewById(R.id.left_drawer);
  if (getAppTheme().equals(AppTheme.DARK))   mDrawerLinear.setBackgroundColor(Utils.getColor(this,R.color.holo_dark_background));
 else   if (getAppTheme().equals(AppTheme.BLACK))   mDrawerLinear.setBackgroundColor(Utils.getColor(this,android.R.color.black));
 else   mDrawerLinear.setBackgroundColor(Color.WHITE);
  mDrawerLayout=findViewById(R.id.drawer_layout);
  mDrawerList=findViewById(R.id.menu_drawer);
  drawerHeaderView.setBackgroundResource(R.drawable.amaze_header);
  boolean initDrawerOpen;
  if (findViewById(R.id.tab_frame) != null) {
    mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_OPEN,mDrawerLinear);
    mDrawerLayout.setScrimColor(Color.TRANSPARENT);
    isDrawerLocked=true;
    initDrawerOpen=true;
  }
 else {
    mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED,mDrawerLinear);
    isDrawerLocked=false;
    initDrawerOpen=false;
  }
  mDrawerLayout.post(() -> {
    if (initDrawerOpen) {
      mDrawerLayout.openDrawer(mDrawerLinear);
    }
 else {
      mDrawerLayout.closeDrawer(mDrawerLinear);
    }
  }
);
  mDrawerList.addHeaderView(drawerHeaderLayout);
  getSupportActionBar().setDisplayShowTitleEnabled(false);
  fabBgView=findViewById(R.id.fab_bg);
  if (getAppTheme().equals(AppTheme.DARK) || getAppTheme().equals(AppTheme.BLACK)) {
    fabBgView.setBackgroundResource(R.drawable.fab_shadow_dark);
  }
  fabBgView.setOnClickListener(view -> {
    if (getAppbar().getSearchView().isEnabled())     getAppbar().getSearchView().hideSearchView();
  }
);
  setDrawerHeaderBackground();
  if (SDK_INT == Build.VERSION_CODES.KITKAT_WATCH || SDK_INT == Build.VERSION_CODES.KITKAT) {
    SystemBarTintManager tintManager=new SystemBarTintManager(this);
    tintManager.setStatusBarTintEnabled(true);
    FrameLayout.MarginLayoutParams p=(ViewGroup.MarginLayoutParams)findViewById(R.id.drawer_layout).getLayoutParams();
    SystemBarTintManager.SystemBarConfig config=tintManager.getConfig();
    if (!isDrawerLocked)     p.setMargins(0,config.getStatusBarHeight(),0,0);
  }
 else   if (SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    Window window=getWindow();
    window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
    if (isDrawerLocked) {
      window.setStatusBarColor((skinStatusBar));
    }
 else     window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
    if (colourednavigation)     window.setNavigationBarColor(skinStatusBar);
  }
}",0.9436640115858074
162508,"@Override public void onBackPressed(){
  if (currentFragment instanceof ColorPref) {
    if (((ColorPref)currentFragment).onBackPressed())     return;
  }
  if (selectedItem != START_PREFERENCE && changed) {
    restartActivity(this);
  }
 else   if (selectedItem != START_PREFERENCE) {
    selectItem(START_PREFERENCE);
  }
 else {
    Intent in=new Intent(PreferencesActivity.this,MainActivity.class);
    in.setAction(Intent.ACTION_MAIN);
    in.setAction(Intent.CATEGORY_LAUNCHER);
    this.startActivity(in);
    this.finish();
  }
}","@Override public void onBackPressed(){
  if (currentFragment instanceof ColorPref) {
    if (((ColorPref)currentFragment).onBackPressed())     return;
  }
  if (selectedItem != START_PREFERENCE && restartActivity) {
    restartActivity(this);
  }
 else   if (selectedItem != START_PREFERENCE) {
    selectItem(START_PREFERENCE);
  }
 else {
    Intent in=new Intent(PreferencesActivity.this,MainActivity.class);
    in.setAction(Intent.ACTION_MAIN);
    in.setAction(Intent.CATEGORY_LAUNCHER);
    this.startActivity(in);
    this.finish();
  }
}",0.9797047970479704
162509,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
    if (currentFragment.onOptionsItemSelected(item))     return true;
  if (selectedItem != START_PREFERENCE && changed) {
    restartActivity(this);
  }
 else   if (selectedItem != START_PREFERENCE) {
    selectItem(START_PREFERENCE);
  }
 else {
    Intent in=new Intent(PreferencesActivity.this,MainActivity.class);
    in.setAction(Intent.ACTION_MAIN);
    in.setAction(Intent.CATEGORY_LAUNCHER);
    final int enter_anim=android.R.anim.fade_in;
    final int exit_anim=android.R.anim.fade_out;
    Activity activity=this;
    activity.overridePendingTransition(enter_anim,exit_anim);
    activity.finish();
    activity.overridePendingTransition(enter_anim,exit_anim);
    activity.startActivity(in);
  }
return true;
}
return false;
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
    if (currentFragment.onOptionsItemSelected(item))     return true;
  if (selectedItem != START_PREFERENCE && restartActivity) {
    restartActivity(this);
  }
 else   if (selectedItem != START_PREFERENCE) {
    selectItem(START_PREFERENCE);
  }
 else {
    Intent in=new Intent(PreferencesActivity.this,MainActivity.class);
    in.setAction(Intent.ACTION_MAIN);
    in.setAction(Intent.CATEGORY_LAUNCHER);
    final int enter_anim=android.R.anim.fade_in;
    final int exit_anim=android.R.anim.fade_out;
    Activity activity=this;
    activity.overridePendingTransition(enter_anim,exit_anim);
    activity.finish();
    activity.overridePendingTransition(enter_anim,exit_anim);
    activity.startActivity(in);
  }
return true;
}
return false;
}",0.9871944121071012
162510,"private void loadSection0(){
  if (((PreferencesActivity)getActivity()).getChanged()) {
    ((PreferencesActivity)getActivity()).restartActivity(getActivity());
  }
  addPreferencesFromResource(R.xml.color_prefs);
  if (Build.VERSION.SDK_INT >= 21) {
    findPreference(KEY_COLOREDNAV).setEnabled(true);
  }
}","private void loadSection0(){
  if (((PreferencesActivity)getActivity()).getRestartActivity()) {
    ((PreferencesActivity)getActivity()).restartActivity(getActivity());
  }
  addPreferencesFromResource(R.xml.color_prefs);
  if (Build.VERSION.SDK_INT >= 21) {
    findPreference(KEY_COLOREDNAV).setEnabled(true);
  }
}",0.9648562300319488
162511,"@Override public boolean onPreferenceClick(final Preference preference){
switch (preference.getKey()) {
case KEY_COLOREDNAV:
    activity.invalidateNavBar();
  break;
case PreferencesConstants.PREFERENCE_SKIN:
case PreferencesConstants.PREFERENCE_SKIN_TWO:
case PreferencesConstants.PREFERENCE_ACCENT:
case PreferencesConstants.PREFERENCE_ICON_SKIN:
final ColorUsage usage=ColorUsage.fromString(preference.getKey());
if (usage != null) {
ColorAdapter adapter=new ColorAdapter(getActivity(),ColorPreference.availableColors,usage);
GridView v=(GridView)getActivity().getLayoutInflater().inflate(R.layout.dialog_grid,null);
v.setAdapter(adapter);
v.setOnItemClickListener(adapter);
int fab_skin=activity.getColorPreference().getColor(ColorUsage.ACCENT);
dialog=new MaterialDialog.Builder(getActivity()).positiveText(R.string.cancel).title(R.string.choose_color).theme(activity.getAppTheme().getMaterialDialogTheme()).autoDismiss(true).positiveColor(fab_skin).neutralColor(fab_skin).neutralText(R.string.defualt).callback(new MaterialDialog.ButtonCallback(){
  @Override public void onNeutral(  MaterialDialog dialog){
    super.onNeutral(dialog);
    if (activity != null)     activity.setChanged();
    activity.getColorPreference().setRes(usage,usage.getDefaultColor()).saveToPreferences(sharedPref);
    invalidateEverything();
  }
}
).customView(v,false).build();
adapter.setDialog(dialog);
dialog.show();
}
return false;
case ""String_Node_Str"":
switchSections();
return true;
}
return false;
}","@Override public boolean onPreferenceClick(final Preference preference){
switch (preference.getKey()) {
case KEY_COLOREDNAV:
    activity.invalidateNavBar();
  break;
case PreferencesConstants.PREFERENCE_SKIN:
case PreferencesConstants.PREFERENCE_SKIN_TWO:
case PreferencesConstants.PREFERENCE_ACCENT:
case PreferencesConstants.PREFERENCE_ICON_SKIN:
final ColorUsage usage=ColorUsage.fromString(preference.getKey());
if (usage != null) {
ColorAdapter adapter=new ColorAdapter(getActivity(),ColorPreference.availableColors,usage);
GridView v=(GridView)getActivity().getLayoutInflater().inflate(R.layout.dialog_grid,null);
v.setAdapter(adapter);
v.setOnItemClickListener(adapter);
int fab_skin=activity.getColorPreference().getColor(ColorUsage.ACCENT);
dialog=new MaterialDialog.Builder(getActivity()).positiveText(R.string.cancel).title(R.string.choose_color).theme(activity.getAppTheme().getMaterialDialogTheme()).autoDismiss(true).positiveColor(fab_skin).neutralColor(fab_skin).neutralText(R.string.defualt).callback(new MaterialDialog.ButtonCallback(){
  @Override public void onNeutral(  MaterialDialog dialog){
    super.onNeutral(dialog);
    if (activity != null)     activity.setRestartActivity();
    activity.getColorPreference().setRes(usage,usage.getDefaultColor()).saveToPreferences(sharedPref);
    invalidateEverything();
  }
}
).customView(v,false).build();
adapter.setDialog(dialog);
dialog.show();
}
return false;
case ""String_Node_Str"":
switchSections();
return true;
}
return false;
}",0.9926617745163442
162512,"private void loadSection1(){
  addPreferencesFromResource(R.xml.conficolor_prefs);
  ColorPickerDialog selectedColors=(ColorPickerDialog)findPreference(KEY_PRESELECTED_CONFIGS);
  invalidateColorPreference(selectedColors);
  selectedColors.setColorPreference(activity.getColorPreference(),activity.getAppTheme());
  selectedColors.setListener(() -> {
    if (activity != null)     activity.setChanged();
    checkCustomization();
    invalidateEverything();
    int colorPickerPref=sharedPref.getInt(PreferencesConstants.PREFERENCE_COLOR_CONFIG,ColorPickerDialog.NO_DATA);
    if (colorPickerPref == ColorPickerDialog.RANDOM_INDEX) {
      Toast.makeText(getActivity(),R.string.setRandom,Toast.LENGTH_LONG).show();
    }
  }
);
  checkCustomization();
}","private void loadSection1(){
  addPreferencesFromResource(R.xml.conficolor_prefs);
  ColorPickerDialog selectedColors=(ColorPickerDialog)findPreference(KEY_PRESELECTED_CONFIGS);
  invalidateColorPreference(selectedColors);
  selectedColors.setColorPreference(activity.getColorPreference(),activity.getAppTheme());
  selectedColors.setListener(() -> {
    if (activity != null)     activity.setRestartActivity();
    checkCustomization();
    invalidateEverything();
    int colorPickerPref=sharedPref.getInt(PreferencesConstants.PREFERENCE_COLOR_CONFIG,ColorPickerDialog.NO_DATA);
    if (colorPickerPref == ColorPickerDialog.RANDOM_INDEX) {
      Toast.makeText(getActivity(),R.string.setRandom,Toast.LENGTH_LONG).show();
    }
  }
);
  checkCustomization();
}",0.9854689564068692
162513,"@Override public void onNeutral(MaterialDialog dialog){
  super.onNeutral(dialog);
  if (activity != null)   activity.setChanged();
  activity.getColorPreference().setRes(usage,usage.getDefaultColor()).saveToPreferences(sharedPref);
  invalidateEverything();
}","@Override public void onNeutral(MaterialDialog dialog){
  super.onNeutral(dialog);
  if (activity != null)   activity.setRestartActivity();
  activity.getColorPreference().setRes(usage,usage.getDefaultColor()).saveToPreferences(sharedPref);
  invalidateEverything();
}",0.5189393939393939
162514,"@Override public boolean onPreferenceClick(final Preference preference){
  if (sharedPrefs != null)   activity.setChanged();
  if (preference instanceof PathSwitchPreference) {
    PathSwitchPreference p=(PathSwitchPreference)preference;
switch (p.getLastItemClicked()) {
case PathSwitchPreference.EDIT:
      loadEditDialog((PathSwitchPreference)preference);
    break;
case PathSwitchPreference.DELETE:
  loadDeleteDialog((PathSwitchPreference)preference);
break;
default :
break;
}
}
 else if (preference.getKey().equals(PreferencesConstants.PREFERENCE_SHORTCUT)) {
if (getPreferenceScreen().getPreferenceCount() >= findPreference(PreferencesConstants.PREFERENCE_SHORTCUT).getOrder()) findPreference(PreferencesConstants.PREFERENCE_SHORTCUT).setOrder(getPreferenceScreen().getPreferenceCount() + 10);
loadCreateDialog();
}
return false;
}","@Override public boolean onPreferenceClick(final Preference preference){
  if (preference instanceof PathSwitchPreference) {
    PathSwitchPreference p=(PathSwitchPreference)preference;
switch (p.getLastItemClicked()) {
case PathSwitchPreference.EDIT:
      loadEditDialog((PathSwitchPreference)preference);
    break;
case PathSwitchPreference.DELETE:
  loadDeleteDialog((PathSwitchPreference)preference);
break;
default :
break;
}
}
 else if (preference.getKey().equals(PreferencesConstants.PREFERENCE_SHORTCUT)) {
if (getPreferenceScreen().getPreferenceCount() >= findPreference(PreferencesConstants.PREFERENCE_SHORTCUT).getOrder()) findPreference(PreferencesConstants.PREFERENCE_SHORTCUT).setOrder(getPreferenceScreen().getPreferenceCount() + 10);
loadCreateDialog();
}
return false;
}",0.9680981595092024
162515,"@Override public boolean onPreferenceClick(Preference preference){
  if (preferences != null)   ((PreferencesActivity)getActivity()).setChanged();
  currentValue[prefPos.get(preference.getKey())]=((SwitchPreference)preference).isChecked();
  TinyDB.putBooleanArray(preferences,KEY,currentValue);
  return true;
}","@Override public boolean onPreferenceClick(Preference preference){
  currentValue[prefPos.get(preference.getKey())]=((SwitchPreference)preference).isChecked();
  TinyDB.putBooleanArray(preferences,KEY,currentValue);
  return true;
}",0.8529411764705882
162516,"@Override protected Void doInBackground(Void... params){
  if (baseFile.isDirectory())   totalSize=baseFile.folderSize(context);
 else   totalSize=baseFile.length(context);
  progressHandler=new ProgressHandler(1,totalSize);
  progressHandler.setProgressListener(DecryptService.this::publishResults);
  serviceWatcherUtil=new ServiceWatcherUtil(progressHandler,totalSize);
  addFirstDatapoint(baseFile.getName(),1,totalSize,false);
  if (FileUtil.checkFolder(baseFile.getPath(),context) == 1) {
    serviceWatcherUtil.watch();
    try {
      new CryptUtil(context,baseFile,decryptPath,progressHandler,failedOps);
    }
 catch (    Exception e) {
      e.printStackTrace();
      failedOps.add(baseFile);
    }
  }
  return null;
}","@Override protected Void doInBackground(Void... params){
  String baseFileFolder=baseFile.isDirectory() ? baseFile.getPath() : baseFile.getPath().substring(0,baseFile.getPath().lastIndexOf('/'));
  if (baseFile.isDirectory())   totalSize=baseFile.folderSize(context);
 else   totalSize=baseFile.length(context);
  progressHandler=new ProgressHandler(1,totalSize);
  progressHandler.setProgressListener(DecryptService.this::publishResults);
  serviceWatcherUtil=new ServiceWatcherUtil(progressHandler,totalSize);
  addFirstDatapoint(baseFile.getName(),1,totalSize,false);
  if (FileUtil.checkFolder(baseFileFolder,context) == 1) {
    serviceWatcherUtil.watch();
    try {
      new CryptUtil(context,baseFile,decryptPath,progressHandler,failedOps);
    }
 catch (    Exception e) {
      e.printStackTrace();
      failedOps.add(baseFile);
    }
  }
  return null;
}",0.9029430181590482
162517,"public void generateMode(Context context){
  if (path.startsWith(""String_Node_Str"")) {
    mode=OpenMode.SMB;
  }
 else   if (path.startsWith(OTGUtil.PREFIX_OTG)) {
    mode=OpenMode.OTG;
  }
 else   if (isCustomPath()) {
    mode=OpenMode.CUSTOM;
  }
 else   if (path.startsWith(CloudHandler.CLOUD_PREFIX_BOX)) {
    mode=OpenMode.BOX;
  }
 else   if (path.startsWith(CloudHandler.CLOUD_PREFIX_ONE_DRIVE)) {
    mode=OpenMode.ONEDRIVE;
  }
 else   if (path.startsWith(CloudHandler.CLOUD_PREFIX_GOOGLE_DRIVE)) {
    mode=OpenMode.GDRIVE;
  }
 else   if (path.startsWith(CloudHandler.CLOUD_PREFIX_DROPBOX)) {
    mode=OpenMode.DROPBOX;
  }
 else   if (context == null) {
    mode=OpenMode.FILE;
  }
 else {
    boolean rootmode=PreferenceManager.getDefaultSharedPreferences(context).getBoolean(""String_Node_Str"",false);
    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {
      mode=OpenMode.FILE;
      if (rootmode && !getFile().canRead()) {
        mode=OpenMode.ROOT;
      }
    }
 else {
      if (FileUtil.isOnExtSdCard(getFile(),context)) {
        mode=OpenMode.FILE;
      }
 else       if (rootmode && !getFile().canRead()) {
        mode=OpenMode.ROOT;
      }
      if (mode == OpenMode.UNKNOWN) {
        mode=OpenMode.FILE;
      }
    }
  }
}","public void generateMode(Context context){
  if (path.startsWith(""String_Node_Str"")) {
    mode=OpenMode.SMB;
  }
 else   if (path.startsWith(OTGUtil.PREFIX_OTG)) {
    mode=OpenMode.OTG;
  }
 else   if (isCustomPath()) {
    mode=OpenMode.CUSTOM;
  }
 else   if (path.startsWith(CloudHandler.CLOUD_PREFIX_BOX)) {
    mode=OpenMode.BOX;
  }
 else   if (path.startsWith(CloudHandler.CLOUD_PREFIX_ONE_DRIVE)) {
    mode=OpenMode.ONEDRIVE;
  }
 else   if (path.startsWith(CloudHandler.CLOUD_PREFIX_GOOGLE_DRIVE)) {
    mode=OpenMode.GDRIVE;
  }
 else   if (path.startsWith(CloudHandler.CLOUD_PREFIX_DROPBOX)) {
    mode=OpenMode.DROPBOX;
  }
 else   if (context == null) {
    mode=OpenMode.FILE;
  }
 else {
    boolean rootmode=PreferenceManager.getDefaultSharedPreferences(context).getBoolean(PrefFrag.PREFERENCE_ROOTMODE,false);
    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {
      mode=OpenMode.FILE;
      if (rootmode && !getFile().canRead()) {
        mode=OpenMode.ROOT;
      }
    }
 else {
      if (FileUtil.isOnExtSdCard(getFile(),context)) {
        mode=OpenMode.FILE;
      }
 else       if (rootmode && !getFile().canRead()) {
        mode=OpenMode.ROOT;
      }
      if (mode == OpenMode.UNKNOWN) {
        mode=OpenMode.FILE;
      }
    }
  }
}",0.9838899803536346
162518,"private void createViews(ArrayList<CompressedObjectParcelable> items,String dir){
  if (compressedExplorerAdapter == null) {
    compressedExplorerAdapter=new CompressedExplorerAdapter(getActivity(),utilsProvider,items,this);
    listView.setAdapter(compressedExplorerAdapter);
  }
 else {
    compressedExplorerAdapter.generateZip(items);
  }
  folder=0;
  file=0;
  for (  CompressedObjectParcelable item : items) {
    if (item.isDirectory())     folder++;
 else     file++;
  }
  stopAnims=true;
  if (!addheader) {
    listView.removeItemDecoration(dividerItemDecoration);
    addheader=true;
  }
 else {
    dividerItemDecoration=new DividerItemDecoration(getActivity(),true,showDividers);
    listView.addItemDecoration(dividerItemDecoration);
    addheader=false;
  }
  final FastScroller fastScroller=(FastScroller)rootView.findViewById(R.id.fastscroll);
  fastScroller.setRecyclerView(listView,1);
  fastScroller.setPressedHandleColor(mainActivity.getColorPreference().getColor(ColorUsage.ACCENT));
  ((AppBarLayout)mToolbarContainer).addOnOffsetChangedListener((appBarLayout,verticalOffset) -> {
    fastScroller.updateHandlePosition(verticalOffset,112);
  }
);
  listView.stopScroll();
  relativeDirectory=dir;
  updateBottomBar();
  swipeRefreshLayout.setRefreshing(false);
}","private void createViews(ArrayList<CompressedObjectParcelable> items,String dir){
  if (compressedExplorerAdapter == null) {
    compressedExplorerAdapter=new CompressedExplorerAdapter(getActivity(),utilsProvider,items,this);
    listView.setAdapter(compressedExplorerAdapter);
  }
 else {
    compressedExplorerAdapter.generateZip(items);
  }
  folder=0;
  file=0;
  for (  CompressedObjectParcelable item : items) {
    if (item.getType() == CompressedObjectParcelable.TYPE_GOBACK)     continue;
    if (item.isDirectory())     folder++;
 else     file++;
  }
  stopAnims=true;
  if (!addheader) {
    listView.removeItemDecoration(dividerItemDecoration);
    addheader=true;
  }
 else {
    dividerItemDecoration=new DividerItemDecoration(getActivity(),true,showDividers);
    listView.addItemDecoration(dividerItemDecoration);
    addheader=false;
  }
  final FastScroller fastScroller=(FastScroller)rootView.findViewById(R.id.fastscroll);
  fastScroller.setRecyclerView(listView,1);
  fastScroller.setPressedHandleColor(mainActivity.getColorPreference().getColor(ColorUsage.ACCENT));
  ((AppBarLayout)mToolbarContainer).addOnOffsetChangedListener((appBarLayout,verticalOffset) -> {
    fastScroller.updateHandlePosition(verticalOffset,112);
  }
);
  listView.stopScroll();
  relativeDirectory=dir;
  updateBottomBar();
  swipeRefreshLayout.setRefreshing(false);
}",0.9698795180722892
162519,"public LoadFilesListTask(Context c,UtilitiesProviderInterface utilsProvider,boolean back,MainFragment ma,OpenMode openmode){
  this.utilsProvider=utilsProvider;
  this.back=back;
  this.ma=ma;
  this.openmode=openmode;
  this.c=c;
}","public LoadFilesListTask(Context c,String path,MainFragment ma,OpenMode openmode,OnAsyncTaskFinished<Pair<OpenMode,ArrayList<LayoutElementParcelable>>> l){
  this.path=path;
  this.ma=ma;
  this.openmode=openmode;
  this.c=c;
  this.listener=l;
}",0.2217573221757322
162520,"@Override protected ArrayList<LayoutElementParcelable> doInBackground(String... params){
  ArrayList<LayoutElementParcelable> list=null;
  path=params[0];
  grid=ma.checkPathIsGrid(path);
  ma.folder_count=0;
  ma.file_count=0;
  if (openmode == OpenMode.UNKNOWN) {
    HybridFile hFile=new HybridFile(OpenMode.UNKNOWN,path);
    hFile.generateMode(ma.getActivity());
    if (hFile.isLocal()) {
      openmode=OpenMode.FILE;
    }
 else     if (hFile.isSmb()) {
      openmode=OpenMode.SMB;
      ma.smbPath=path;
    }
 else     if (hFile.isOtgFile()) {
      openmode=OpenMode.OTG;
    }
 else     if (hFile.isBoxFile()) {
      openmode=OpenMode.BOX;
    }
 else     if (hFile.isDropBoxFile()) {
      openmode=OpenMode.DROPBOX;
    }
 else     if (hFile.isGoogleDriveFile()) {
      openmode=OpenMode.GDRIVE;
    }
 else     if (hFile.isOneDriveFile()) {
      openmode=OpenMode.ONEDRIVE;
    }
 else     if (hFile.isCustomPath())     openmode=OpenMode.CUSTOM;
 else     if (android.util.Patterns.EMAIL_ADDRESS.matcher(path).matches()) {
      openmode=OpenMode.ROOT;
    }
  }
switch (openmode) {
case SMB:
    HybridFile hFile=new HybridFile(OpenMode.SMB,path);
  try {
    SmbFile[] smbFile=hFile.getSmbFile(5000).listFiles();
    list=ma.addToSmb(smbFile,path);
    openmode=OpenMode.SMB;
  }
 catch (  SmbAuthException e) {
    if (!e.getMessage().toLowerCase().contains(""String_Node_Str""))     ma.reauthenticateSmb();
    publishProgress(e.getLocalizedMessage());
  }
catch (  SmbException|NullPointerException e) {
    publishProgress(e.getLocalizedMessage());
    e.printStackTrace();
  }
break;
case CUSTOM:
ArrayList<HybridFileParcelable> arrayList=null;
switch (Integer.parseInt(path)) {
case 0:
arrayList=listImages();
break;
case 1:
arrayList=listVideos();
break;
case 2:
arrayList=listaudio();
break;
case 3:
arrayList=listDocs();
break;
case 4:
arrayList=listApks();
break;
case 5:
arrayList=listRecent();
break;
case 6:
arrayList=listRecentFiles();
break;
}
path=String.valueOf(Integer.parseInt(path));
if (arrayList != null) list=addTo(arrayList);
 else return new ArrayList<>();
break;
case OTG:
list=addTo(listOtg(path));
openmode=OpenMode.OTG;
break;
case DROPBOX:
CloudStorage cloudStorageDropbox=dataUtils.getAccount(OpenMode.DROPBOX);
try {
list=addTo(listCloud(path,cloudStorageDropbox,OpenMode.DROPBOX));
}
 catch (CloudPluginException e) {
e.printStackTrace();
return new ArrayList<>();
}
break;
case BOX:
CloudStorage cloudStorageBox=dataUtils.getAccount(OpenMode.BOX);
try {
list=addTo(listCloud(path,cloudStorageBox,OpenMode.BOX));
}
 catch (CloudPluginException e) {
e.printStackTrace();
return new ArrayList<>();
}
break;
case GDRIVE:
CloudStorage cloudStorageGDrive=dataUtils.getAccount(OpenMode.GDRIVE);
try {
list=addTo(listCloud(path,cloudStorageGDrive,OpenMode.GDRIVE));
}
 catch (CloudPluginException e) {
e.printStackTrace();
return new ArrayList<>();
}
break;
case ONEDRIVE:
CloudStorage cloudStorageOneDrive=dataUtils.getAccount(OpenMode.ONEDRIVE);
try {
list=addTo(listCloud(path,cloudStorageOneDrive,OpenMode.ONEDRIVE));
}
 catch (CloudPluginException e) {
e.printStackTrace();
return new ArrayList<>();
}
break;
default :
try {
ArrayList<HybridFileParcelable> arrayList1;
arrayList1=RootHelper.getFilesList(path,ThemedActivity.rootMode,ma.SHOW_HIDDEN,new RootHelper.GetModeCallBack(){
@Override public void getMode(OpenMode mode){
openmode=mode;
}
}
);
list=addTo(arrayList1);
}
 catch (RootNotPermittedException e) {
return null;
}
break;
}
if (list != null && !(openmode == OpenMode.CUSTOM && ((path).equals(""String_Node_Str"") || (path).equals(""String_Node_Str"")))) {
Collections.sort(list,new FileListSorter(ma.dsort,ma.sortby,ma.asc));
}
return list;
}","protected Pair<OpenMode,ArrayList<LayoutElementParcelable>> doInBackground(Void... p){
  ma.folder_count=0;
  ma.file_count=0;
  if (openmode == OpenMode.UNKNOWN) {
    HybridFile hFile=new HybridFile(OpenMode.UNKNOWN,path);
    hFile.generateMode(ma.getActivity());
    if (hFile.isLocal()) {
      openmode=OpenMode.FILE;
    }
 else     if (hFile.isSmb()) {
      openmode=OpenMode.SMB;
      ma.smbPath=path;
    }
 else     if (hFile.isOtgFile()) {
      openmode=OpenMode.OTG;
    }
 else     if (hFile.isBoxFile()) {
      openmode=OpenMode.BOX;
    }
 else     if (hFile.isDropBoxFile()) {
      openmode=OpenMode.DROPBOX;
    }
 else     if (hFile.isGoogleDriveFile()) {
      openmode=OpenMode.GDRIVE;
    }
 else     if (hFile.isOneDriveFile()) {
      openmode=OpenMode.ONEDRIVE;
    }
 else     if (hFile.isCustomPath())     openmode=OpenMode.CUSTOM;
 else     if (android.util.Patterns.EMAIL_ADDRESS.matcher(path).matches()) {
      openmode=OpenMode.ROOT;
    }
  }
  if (isCancelled())   return null;
  ArrayList<LayoutElementParcelable> list=null;
switch (openmode) {
case SMB:
    HybridFile hFile=new HybridFile(OpenMode.SMB,path);
  try {
    SmbFile[] smbFile=hFile.getSmbFile(5000).listFiles();
    list=ma.addToSmb(smbFile,path);
    openmode=OpenMode.SMB;
  }
 catch (  SmbAuthException e) {
    if (!e.getMessage().toLowerCase().contains(""String_Node_Str""))     ma.reauthenticateSmb();
    publishProgress(e.getLocalizedMessage());
  }
catch (  SmbException|NullPointerException e) {
    publishProgress(e.getLocalizedMessage());
    e.printStackTrace();
  }
break;
case CUSTOM:
ArrayList<HybridFileParcelable> arrayList=null;
switch (Integer.parseInt(path)) {
case 0:
arrayList=listImages();
break;
case 1:
arrayList=listVideos();
break;
case 2:
arrayList=listaudio();
break;
case 3:
arrayList=listDocs();
break;
case 4:
arrayList=listApks();
break;
case 5:
arrayList=listRecent();
break;
case 6:
arrayList=listRecentFiles();
break;
}
path=String.valueOf(Integer.parseInt(path));
if (arrayList != null) list=addTo(arrayList);
 else return new Pair<>(openmode,new ArrayList<LayoutElementParcelable>());
break;
case OTG:
list=addTo(listOtg(path));
openmode=OpenMode.OTG;
break;
case DROPBOX:
CloudStorage cloudStorageDropbox=dataUtils.getAccount(OpenMode.DROPBOX);
try {
list=addTo(listCloud(path,cloudStorageDropbox,OpenMode.DROPBOX));
}
 catch (CloudPluginException e) {
e.printStackTrace();
return null;
}
break;
case BOX:
CloudStorage cloudStorageBox=dataUtils.getAccount(OpenMode.BOX);
try {
list=addTo(listCloud(path,cloudStorageBox,OpenMode.BOX));
}
 catch (CloudPluginException e) {
e.printStackTrace();
return null;
}
break;
case GDRIVE:
CloudStorage cloudStorageGDrive=dataUtils.getAccount(OpenMode.GDRIVE);
try {
list=addTo(listCloud(path,cloudStorageGDrive,OpenMode.GDRIVE));
}
 catch (CloudPluginException e) {
e.printStackTrace();
return null;
}
break;
case ONEDRIVE:
CloudStorage cloudStorageOneDrive=dataUtils.getAccount(OpenMode.ONEDRIVE);
try {
list=addTo(listCloud(path,cloudStorageOneDrive,OpenMode.ONEDRIVE));
}
 catch (CloudPluginException e) {
e.printStackTrace();
return null;
}
break;
default :
try {
ArrayList<HybridFileParcelable> arrayList1;
arrayList1=RootHelper.getFilesList(path,ThemedActivity.rootMode,ma.SHOW_HIDDEN,new RootHelper.GetModeCallBack(){
@Override public void getMode(OpenMode mode){
openmode=mode;
}
}
);
list=addTo(arrayList1);
}
 catch (RootNotPermittedException e) {
return null;
}
break;
}
if (list != null && !(openmode == OpenMode.CUSTOM && ((path).equals(""String_Node_Str"") || (path).equals(""String_Node_Str"")))) {
Collections.sort(list,new FileListSorter(ma.dsort,ma.sortby,ma.asc));
}
return new Pair<>(openmode,list);
}",0.9456903539583896
162521,"@Override protected void onPostExecute(ArrayList<LayoutElementParcelable> list){
  if (isCancelled()) {
    list=null;
  }
  ma.createViews(list,back,path,openmode,false,grid);
  ma.mSwipeRefreshLayout.setRefreshing(false);
}","@Override protected void onPostExecute(Pair<OpenMode,ArrayList<LayoutElementParcelable>> list){
  super.onPostExecute(list);
  listener.onAsyncTaskFinished(list);
}",0.5449871465295629
162522,"public void loadlist(String path,boolean back,OpenMode openMode){
  if (mActionMode != null) {
    mActionMode.finish();
  }
  if (loadFilesListTask != null && loadFilesListTask.getStatus() == AsyncTask.Status.RUNNING)   loadFilesListTask.cancel(true);
  loadFilesListTask=new LoadFilesListTask(ma.getActivity(),utilsProvider,back,ma,openMode);
  loadFilesListTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,(path));
}","/** 
 * This loads a path into the MainFragment.
 * @param path the path to be loaded
 * @param back if we're coming back from any directory and want the scroll to be restored
 * @param openMode the mode in which the directory should be opened
 */
public void loadlist(final String path,final boolean back,final OpenMode openMode){
  if (mActionMode != null)   mActionMode.finish();
  mSwipeRefreshLayout.setRefreshing(true);
  if (loadFilesListTask != null && loadFilesListTask.getStatus() == AsyncTask.Status.RUNNING) {
    loadFilesListTask.cancel(true);
  }
  loadFilesListTask=new LoadFilesListTask(ma.getActivity(),path,ma,openMode,new OnAsyncTaskFinished<Pair<OpenMode,ArrayList<LayoutElementParcelable>>>(){
    @Override public void onAsyncTaskFinished(    Pair<OpenMode,ArrayList<LayoutElementParcelable>> data){
      if (data.second != null) {
        createViews(data.second,back,path,data.first,false,checkPathIsGrid(path));
        mSwipeRefreshLayout.setRefreshing(false);
      }
    }
  }
);
  loadFilesListTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}",0.50199203187251
162523,"public void updatePath(@NonNull final String news,boolean results,String query,OpenMode openmode,int folderCount,int fileCount,BottomBarButtonPath buttonPathInterface){
  if (news.length() == 0)   return;
  MainActivityHelper mainActivityHelper=mainActivity.get().mainActivityHelper;
switch (openmode) {
case SMB:
    newPath=mainActivityHelper.parseSmbPath(news);
  break;
case OTG:
newPath=mainActivityHelper.parseOTGPath(news);
break;
case CUSTOM:
newPath=mainActivityHelper.getIntegralNames(news);
break;
case DROPBOX:
case BOX:
case ONEDRIVE:
case GDRIVE:
newPath=mainActivityHelper.parseCloudPath(openmode,news);
break;
default :
newPath=news;
}
if (!results) {
pathText.setText(mainActivity.get().getString(R.string.folderfilecount,folderCount,fileCount));
}
 else {
fullPathText.setText(mainActivity.get().getString(R.string.searchresults,query));
pathText.setText(""String_Node_Str"");
return;
}
final String oldPath=fullPathText.getText().toString();
if (oldPath.equals(newPath)) return;
if (!areButtonsShowing()) {
final Animation slideIn=AnimationUtils.loadAnimation(mainActivity.get(),R.anim.slide_in);
Animation slideOut=AnimationUtils.loadAnimation(mainActivity.get(),R.anim.slide_out);
if (newPath.length() > oldPath.length() && newPath.contains(oldPath) && oldPath.length() != 0) {
fullPathAnim.setAnimation(slideIn);
fullPathAnim.animate().setListener(new AnimatorListenerAdapter(){
@Override public void onAnimationEnd(Animator animation){
super.onAnimationEnd(animation);
new Handler().postDelayed(new Runnable(){
@Override public void run(){
fullPathAnim.setVisibility(View.GONE);
fullPathText.setText(newPath);
}
}
,PATH_ANIM_END_DELAY);
}
@Override public void onAnimationStart(Animator animation){
super.onAnimationStart(animation);
fullPathAnim.setVisibility(View.VISIBLE);
fullPathAnim.setText(Utils.differenceStrings(oldPath,newPath));
scroll.post(new Runnable(){
@Override public void run(){
pathScroll.fullScroll(View.FOCUS_RIGHT);
}
}
);
}
@Override public void onAnimationCancel(Animator animation){
super.onAnimationCancel(animation);
}
}
).setStartDelay(PATH_ANIM_START_DELAY).start();
}
 else if (newPath.length() < oldPath.length() && oldPath.contains(newPath)) {
fullPathAnim.setAnimation(slideOut);
fullPathAnim.animate().setListener(new AnimatorListenerAdapter(){
@Override public void onAnimationEnd(Animator animation){
super.onAnimationEnd(animation);
fullPathAnim.setVisibility(View.GONE);
fullPathText.setText(newPath);
scroll.post(new Runnable(){
@Override public void run(){
pathScroll.fullScroll(View.FOCUS_RIGHT);
}
}
);
}
@Override public void onAnimationStart(Animator animation){
super.onAnimationStart(animation);
fullPathAnim.setVisibility(View.VISIBLE);
fullPathAnim.setText(Utils.differenceStrings(newPath,oldPath));
fullPathText.setText(newPath);
scroll.post(new Runnable(){
@Override public void run(){
pathScroll.fullScroll(View.FOCUS_LEFT);
}
}
);
}
}
).setStartDelay(PATH_ANIM_START_DELAY).start();
}
 else if (oldPath.isEmpty()) {
fullPathAnim.setAnimation(slideIn);
fullPathAnim.setText(newPath);
fullPathAnim.animate().setListener(new AnimatorListenerAdapter(){
@Override public void onAnimationStart(Animator animation){
super.onAnimationStart(animation);
fullPathAnim.setVisibility(View.VISIBLE);
fullPathText.setText(""String_Node_Str"");
scroll.post(new Runnable(){
@Override public void run(){
pathScroll.fullScroll(View.FOCUS_RIGHT);
}
}
);
}
@Override public void onAnimationEnd(Animator animation){
super.onAnimationEnd(animation);
new Handler().postDelayed(new Runnable(){
@Override public void run(){
fullPathAnim.setVisibility(View.GONE);
fullPathText.setText(newPath);
}
}
,PATH_ANIM_END_DELAY);
}
@Override public void onAnimationCancel(Animator animation){
super.onAnimationCancel(animation);
}
}
).setStartDelay(PATH_ANIM_START_DELAY).start();
}
 else {
fullPathAnim.setAnimation(slideOut);
fullPathAnim.animate().setListener(new AnimatorListenerAdapter(){
@Override public void onAnimationStart(Animator animator){
super.onAnimationStart(animator);
fullPathAnim.setVisibility(View.VISIBLE);
fullPathAnim.setText(oldPath);
fullPathText.setText(""String_Node_Str"");
scroll.post(new Runnable(){
@Override public void run(){
pathScroll.fullScroll(View.FOCUS_LEFT);
}
}
);
}
@Override public void onAnimationEnd(Animator animator){
super.onAnimationEnd(animator);
fullPathAnim.setText(newPath);
fullPathText.setText(""String_Node_Str"");
fullPathAnim.setAnimation(slideIn);
fullPathAnim.animate().setListener(new AnimatorListenerAdapter(){
@Override public void onAnimationEnd(Animator animation){
super.onAnimationEnd(animation);
new Handler().postDelayed(new Runnable(){
@Override public void run(){
fullPathAnim.setVisibility(View.GONE);
fullPathText.setText(newPath);
}
}
,PATH_ANIM_END_DELAY);
}
@Override public void onAnimationStart(Animator animation){
super.onAnimationStart(animation);
fullPathAnim.setVisibility(View.VISIBLE);
fullPathText.setText(""String_Node_Str"");
scroll.post(new Runnable(){
@Override public void run(){
pathScroll.fullScroll(View.FOCUS_RIGHT);
}
}
);
}
}
).start();
}
@Override public void onAnimationCancel(Animator animation){
super.onAnimationCancel(animation);
}
}
).setStartDelay(PATH_ANIM_START_DELAY).start();
}
}
 else {
showButtons(buttonPathInterface);
}
}","public void updatePath(@NonNull final String news,boolean results,String query,OpenMode openmode,int folderCount,int fileCount,BottomBarButtonPath buttonPathInterface){
  if (news.length() == 0)   return;
  MainActivityHelper mainActivityHelper=mainActivity.get().mainActivityHelper;
switch (openmode) {
case SMB:
    newPath=mainActivityHelper.parseSmbPath(news);
  break;
case OTG:
newPath=mainActivityHelper.parseOTGPath(news);
break;
case CUSTOM:
newPath=mainActivityHelper.getIntegralNames(news);
break;
case DROPBOX:
case BOX:
case ONEDRIVE:
case GDRIVE:
newPath=mainActivityHelper.parseCloudPath(openmode,news);
break;
default :
newPath=news;
}
if (!results) {
pathText.setText(mainActivity.get().getString(R.string.folderfilecount,folderCount,fileCount));
}
 else {
fullPathText.setText(mainActivity.get().getString(R.string.searchresults,query));
pathText.setText(""String_Node_Str"");
return;
}
final String oldPath=fullPathText.getText().toString();
if (oldPath.equals(newPath)) return;
if (!areButtonsShowing()) {
final Animation slideIn=AnimationUtils.loadAnimation(mainActivity.get(),R.anim.slide_in);
Animation slideOut=AnimationUtils.loadAnimation(mainActivity.get(),R.anim.slide_out);
if (newPath.length() > oldPath.length() && newPath.contains(oldPath) && oldPath.length() != 0) {
fullPathAnim.setAnimation(slideIn);
fullPathAnim.animate().setListener(new AnimatorListenerAdapter(){
@Override public void onAnimationEnd(Animator animation){
super.onAnimationEnd(animation);
new Handler().postDelayed(new Runnable(){
@Override public void run(){
fullPathAnim.setVisibility(View.GONE);
fullPathText.setText(newPath);
}
}
,PATH_ANIM_END_DELAY);
}
@Override public void onAnimationStart(Animator animation){
super.onAnimationStart(animation);
fullPathAnim.setVisibility(View.VISIBLE);
fullPathAnim.setText(Utils.differenceStrings(oldPath,newPath));
scroll.post(new Runnable(){
@Override public void run(){
pathScroll.fullScroll(View.FOCUS_RIGHT);
}
}
);
}
@Override public void onAnimationCancel(Animator animation){
super.onAnimationCancel(animation);
}
}
).setStartDelay(PATH_ANIM_START_DELAY).start();
}
 else if (newPath.length() < oldPath.length() && oldPath.contains(newPath)) {
fullPathAnim.setAnimation(slideOut);
fullPathAnim.animate().setListener(new AnimatorListenerAdapter(){
@Override public void onAnimationEnd(Animator animation){
super.onAnimationEnd(animation);
fullPathAnim.setVisibility(View.GONE);
fullPathText.setText(newPath);
scroll.post(new Runnable(){
@Override public void run(){
pathScroll.fullScroll(View.FOCUS_RIGHT);
}
}
);
}
@Override public void onAnimationStart(Animator animation){
super.onAnimationStart(animation);
fullPathAnim.setVisibility(View.VISIBLE);
fullPathAnim.setText(Utils.differenceStrings(newPath,oldPath));
fullPathText.setText(newPath);
scroll.post(new Runnable(){
@Override public void run(){
pathScroll.fullScroll(View.FOCUS_LEFT);
}
}
);
}
}
).setStartDelay(PATH_ANIM_START_DELAY).start();
}
 else if (oldPath.isEmpty()) {
fullPathAnim.setAnimation(slideIn);
fullPathAnim.setText(newPath);
fullPathAnim.animate().setListener(new AnimatorListenerAdapter(){
@Override public void onAnimationStart(Animator animation){
super.onAnimationStart(animation);
fullPathAnim.setVisibility(View.VISIBLE);
fullPathText.setText(""String_Node_Str"");
scroll.post(new Runnable(){
@Override public void run(){
pathScroll.fullScroll(View.FOCUS_RIGHT);
}
}
);
}
@Override public void onAnimationEnd(Animator animation){
super.onAnimationEnd(animation);
new Handler().postDelayed(new Runnable(){
@Override public void run(){
fullPathAnim.setVisibility(View.GONE);
fullPathText.setText(newPath);
}
}
,PATH_ANIM_END_DELAY);
}
@Override public void onAnimationCancel(Animator animation){
super.onAnimationCancel(animation);
}
}
).setStartDelay(PATH_ANIM_START_DELAY).start();
}
 else {
fullPathAnim.setAnimation(slideOut);
fullPathAnim.animate().setListener(new AnimatorListenerAdapter(){
@Override public void onAnimationStart(Animator animator){
super.onAnimationStart(animator);
fullPathAnim.setVisibility(View.VISIBLE);
fullPathAnim.setText(oldPath);
fullPathText.setText(""String_Node_Str"");
scroll.post(new Runnable(){
@Override public void run(){
pathScroll.fullScroll(View.FOCUS_LEFT);
}
}
);
}
@Override public void onAnimationEnd(Animator animator){
super.onAnimationEnd(animator);
fullPathAnim.setText(newPath);
fullPathText.setText(""String_Node_Str"");
fullPathAnim.setAnimation(slideIn);
fullPathAnim.animate().setListener(new AnimatorListenerAdapter(){
@Override public void onAnimationEnd(Animator animation){
super.onAnimationEnd(animation);
new Handler().postDelayed(new Runnable(){
@Override public void run(){
fullPathAnim.setVisibility(View.GONE);
fullPathText.setText(newPath);
}
}
,PATH_ANIM_END_DELAY);
}
@Override public void onAnimationStart(Animator animation){
super.onAnimationStart(animation);
fullPathAnim.setVisibility(View.VISIBLE);
fullPathText.setText(""String_Node_Str"");
scroll.post(new Runnable(){
@Override public void run(){
pathScroll.fullScroll(View.FOCUS_RIGHT);
}
}
);
}
}
).start();
}
@Override public void onAnimationCancel(Animator animation){
super.onAnimationCancel(animation);
}
}
).setStartDelay(PATH_ANIM_START_DELAY).start();
}
}
 else {
showButtons(buttonPathInterface);
fullPathText.setText(newPath);
}
}",0.9970646719060696
162524,"@Override public void onClick(){
  super.onClick();
  mTile=getQsTile();
  if (!FTPService.isRunning()) {
    if (FTPService.isConnectedToWifi(getApplicationContext())) {
      startServer();
      mTile.setState(Tile.STATE_ACTIVE);
      mTile.updateTile();
    }
 else {
      mTile.setState(Tile.STATE_INACTIVE);
      mTile.updateTile();
      Toast.makeText(getApplicationContext(),getString(R.string.ftp_no_wifi),Toast.LENGTH_LONG).show();
    }
  }
 else {
    stopServer();
    mTile.setState(Tile.STATE_INACTIVE);
    mTile.updateTile();
  }
}","@Override public void onClick(){
  super.onClick();
  mTile=getQsTile();
  if (!FTPService.isRunning()) {
    if (FTPService.isConnectedToWifi(getApplicationContext()) || FTPService.isConnectedToLocalNetwork(getApplicationContext()) || FTPService.isEnabledWifiHotspot(getApplicationContext())) {
      startServer();
      mTile.setState(Tile.STATE_ACTIVE);
      mTile.updateTile();
    }
 else {
      mTile.setState(Tile.STATE_INACTIVE);
      mTile.updateTile();
      Toast.makeText(getApplicationContext(),getString(R.string.ftp_no_wifi),Toast.LENGTH_LONG).show();
    }
  }
 else {
    stopServer();
    mTile.setState(Tile.STATE_INACTIVE);
    mTile.updateTile();
  }
}",0.8982912937347437
162525,"/** 
 * AsyncTask to load RAR file items.
 * @param zipExplorerFragment the zipExplorerFragment fragment instance
 * @param dir
 */
public RarHelperTask(ZipExplorerFragment zipExplorerFragment,String dir){
  this.zipExplorerFragment=zipExplorerFragment;
  this.dir=dir;
}","/** 
 * AsyncTask to load RAR file items.
 * @param realFileDirectory the location of the zip file
 * @param dir relativeDirectory to access inside the zip file
 */
public RarHelperTask(Context c,String realFileDirectory,String dir,OnAsyncTaskFinished<Pair<Archive,ArrayList<FileHeader>>> l){
  context=new WeakReference<>(c);
  fileLocation=realFileDirectory;
  relativeDirectory=dir;
  onFinish=l;
}",0.3422619047619047
162526,"@Override protected ArrayList<FileHeader> doInBackground(File... params){
  ArrayList<FileHeader> elements=new ArrayList<>();
  try {
    Archive zipfile=new Archive(params[0]);
    zipExplorerFragment.archive=zipfile;
    if (zipExplorerFragment.wholelistRar.size() == 0) {
      FileHeader fh=zipfile.nextFileHeader();
      while (fh != null) {
        zipExplorerFragment.wholelistRar.add(fh);
        fh=zipfile.nextFileHeader();
      }
    }
    if (dir == null || dir.trim().length() == 0 || dir.equals(""String_Node_Str"")) {
      for (      FileHeader header : zipExplorerFragment.wholelistRar) {
        String name=header.getFileNameString();
        if (!name.contains(""String_Node_Str"")) {
          elements.add(header);
        }
      }
    }
 else {
      for (      FileHeader header : zipExplorerFragment.wholelistRar) {
        String name=header.getFileNameString();
        if (name.substring(0,name.lastIndexOf(""String_Node_Str"")).equals(dir)) {
          elements.add(header);
        }
      }
    }
  }
 catch (  Exception e) {
  }
  Collections.sort(elements,new FileListSorter());
  return elements;
}","@Override protected Pair<Archive,ArrayList<FileHeader>> doInBackground(Void... params){
  try {
    ArrayList<FileHeader> elements=new ArrayList<>();
    Archive zipfile=new Archive(new File(fileLocation));
    String relativeDirDiffSeparator=relativeDirectory.replace(""String_Node_Str"",""String_Node_Str"");
    for (    FileHeader header : zipfile.getFileHeaders()) {
      String name=header.getFileNameString();
      boolean isInBaseDir=(relativeDirDiffSeparator == null || relativeDirDiffSeparator.equals(""String_Node_Str"")) && !name.contains(""String_Node_Str"");
      boolean isInRelativeDir=relativeDirDiffSeparator != null && name.contains(""String_Node_Str"") && name.substring(0,name.lastIndexOf(""String_Node_Str"")).equals(relativeDirDiffSeparator);
      if (isInBaseDir || isInRelativeDir) {
        elements.add(header);
      }
    }
    Collections.sort(elements,new FileListSorter());
    return new Pair<>(zipfile,elements);
  }
 catch (  RarException|IOException e) {
    e.printStackTrace();
    return null;
  }
}",0.1584066697545159
162527,"@Override protected void onPostExecute(ArrayList<FileHeader> zipEntries){
  super.onPostExecute(zipEntries);
  zipExplorerFragment.swipeRefreshLayout.setRefreshing(false);
  zipExplorerFragment.createRarViews(zipEntries,dir);
}","@Override protected void onPostExecute(Pair<Archive,ArrayList<FileHeader>> ArchivePairZipEntries){
  super.onPostExecute(ArchivePairZipEntries);
  onFinish.onAsyncTaskFinished(ArchivePairZipEntries);
}",0.5420560747663551
162528,"/** 
 * AsyncTask to load ZIP file items.
 * @param zipExplorerFragment the zipExplorerFragment fragment instance
 * @param dir
 */
public ZipHelperTask(ZipExplorerFragment zipExplorerFragment,String dir){
  this.zipExplorerFragment=zipExplorerFragment;
  this.dir=dir;
  zipExplorerFragment.swipeRefreshLayout.setRefreshing(true);
}","/** 
 * AsyncTask to load ZIP file items.
 * @param realFileDirectory the location of the zip file
 * @param dir relativeDirectory to access inside the zip file
 */
public ZipHelperTask(Context c,String realFileDirectory,String dir,OnAsyncTaskFinished<ArrayList<ZipObjectParcelable>> l){
  context=new WeakReference<>(c);
  fileLocation=Uri.parse(realFileDirectory);
  relativeDirectory=dir;
  onFinish=l;
}",0.3135135135135135
162529,"@Override protected ArrayList<ZipObjectParcelable> doInBackground(String... params){
  ArrayList<ZipObjectParcelable> elements=new ArrayList<>();
  try {
    if (zipExplorerFragment.wholelist.size() == 0) {
      Uri uri=Uri.parse(params[0]);
      if (new File(uri.getPath()).canRead()) {
        ZipFile zipfile=new ZipFile(uri.getPath());
        for (Enumeration e=zipfile.entries(); e.hasMoreElements(); ) {
          ZipEntry entry=(ZipEntry)e.nextElement();
          zipExplorerFragment.wholelist.add(new ZipObjectParcelable(entry,entry.getTime(),entry.getSize(),entry.isDirectory()));
        }
      }
 else {
        ZipEntry entry1;
        if (zipExplorerFragment.wholelist.size() == 0) {
          ZipInputStream zipfile1=new ZipInputStream(zipExplorerFragment.getActivity().getContentResolver().openInputStream(uri));
          while ((entry1=zipfile1.getNextEntry()) != null) {
            zipExplorerFragment.wholelist.add(new ZipObjectParcelable(entry1,entry1.getTime(),entry1.getSize(),entry1.isDirectory()));
          }
        }
      }
    }
    ArrayList<String> strings=new ArrayList<>();
    for (    ZipObjectParcelable entry : zipExplorerFragment.wholelist) {
      String s=entry.getName();
      File file=new File(entry.getName());
      if (dir == null || dir.trim().length() == 0) {
        String y=entry.getName();
        if (y.startsWith(""String_Node_Str""))         y=y.substring(1,y.length());
        if (file.getParent() == null || file.getParent().length() == 0 || file.getParent().equals(""String_Node_Str"")) {
          if (!strings.contains(y)) {
            elements.add(new ZipObjectParcelable(new ZipEntry(y),entry.getTime(),entry.getSize(),entry.isDirectory()));
            strings.add(y);
          }
        }
 else {
          String path=y.substring(0,y.indexOf(""String_Node_Str"") + 1);
          if (!strings.contains(path)) {
            ZipObjectParcelable zipObj=new ZipObjectParcelable(new ZipEntry(path),entry.getTime(),entry.getSize(),true);
            strings.add(path);
            elements.add(zipObj);
          }
        }
      }
 else {
        String y=entry.getName();
        if (entry.getName().startsWith(""String_Node_Str""))         y=y.substring(1,y.length());
        if (file.getParent() != null && (file.getParent().equals(dir) || file.getParent().equals(""String_Node_Str"" + dir))) {
          if (!strings.contains(y)) {
            elements.add(new ZipObjectParcelable(new ZipEntry(y),entry.getTime(),entry.getSize(),entry.isDirectory()));
            strings.add(y);
          }
        }
 else {
          if (y.startsWith(dir + ""String_Node_Str"") && y.length() > dir.length() + 1) {
            String path1=y.substring(dir.length() + 1,y.length());
            int index=dir.length() + 1 + path1.indexOf(""String_Node_Str"");
            String path=y.substring(0,index + 1);
            if (!strings.contains(path)) {
              ZipObjectParcelable zipObj=new ZipObjectParcelable(new ZipEntry(y.substring(0,index + 1)),entry.getTime(),entry.getSize(),true);
              strings.add(path);
              elements.add(zipObj);
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  Collections.sort(elements,new FileListSorter());
  if (zipExplorerFragment.gobackitem && dir != null && dir.trim().length() != 0)   elements.add(0,new ZipObjectParcelable(null,0,0,true));
  zipExplorerFragment.elements=elements;
  return elements;
}","@Override protected ArrayList<ZipObjectParcelable> doInBackground(Void... params){
  ArrayList<ZipObjectParcelable> elements=new ArrayList<>();
  try {
    ArrayList<ZipObjectParcelable> wholelist=new ArrayList<>();
    if (new File(fileLocation.getPath()).canRead()) {
      ZipFile zipfile=new ZipFile(fileLocation.getPath());
      for (Enumeration e=zipfile.entries(); e.hasMoreElements(); ) {
        ZipEntry entry=(ZipEntry)e.nextElement();
        wholelist.add(new ZipObjectParcelable(entry,entry.getTime(),entry.getSize(),entry.isDirectory()));
      }
    }
 else {
      ZipInputStream zipfile1=new ZipInputStream(context.get().getContentResolver().openInputStream(fileLocation));
      for (ZipEntry entry=zipfile1.getNextEntry(); entry != null; entry=zipfile1.getNextEntry()) {
        wholelist.add(new ZipObjectParcelable(entry,entry.getTime(),entry.getSize(),entry.isDirectory()));
      }
    }
    ArrayList<String> strings=new ArrayList<>();
    for (    ZipObjectParcelable entry : wholelist) {
      File file=new File(entry.getName());
      if (relativeDirectory == null || relativeDirectory.trim().length() == 0) {
        String y=entry.getName();
        if (y.startsWith(""String_Node_Str""))         y=y.substring(1,y.length());
        if (file.getParent() == null || file.getParent().length() == 0 || file.getParent().equals(""String_Node_Str"")) {
          if (!strings.contains(y)) {
            elements.add(new ZipObjectParcelable(new ZipEntry(y),entry.getTime(),entry.getSize(),entry.isDirectory()));
            strings.add(y);
          }
        }
 else {
          String path=y.substring(0,y.indexOf(""String_Node_Str"") + 1);
          if (!strings.contains(path)) {
            ZipObjectParcelable zipObj=new ZipObjectParcelable(new ZipEntry(path),entry.getTime(),entry.getSize(),true);
            strings.add(path);
            elements.add(zipObj);
          }
        }
      }
 else {
        String y=entry.getName();
        if (entry.getName().startsWith(""String_Node_Str""))         y=y.substring(1,y.length());
        if (file.getParent() != null && (file.getParent().equals(relativeDirectory) || file.getParent().equals(""String_Node_Str"" + relativeDirectory))) {
          if (!strings.contains(y)) {
            elements.add(new ZipObjectParcelable(new ZipEntry(y),entry.getTime(),entry.getSize(),entry.isDirectory()));
            strings.add(y);
          }
        }
 else {
          if (y.startsWith(relativeDirectory + ""String_Node_Str"") && y.length() > relativeDirectory.length() + 1) {
            String path1=y.substring(relativeDirectory.length() + 1,y.length());
            int index=relativeDirectory.length() + 1 + path1.indexOf(""String_Node_Str"");
            String path=y.substring(0,index + 1);
            if (!strings.contains(path)) {
              ZipObjectParcelable zipObj=new ZipObjectParcelable(new ZipEntry(y.substring(0,index + 1)),entry.getTime(),entry.getSize(),true);
              strings.add(path);
              elements.add(zipObj);
            }
          }
        }
      }
    }
    Collections.sort(elements,new FileListSorter());
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return elements;
}",0.6285971223021583
162530,"@Override protected void onPostExecute(ArrayList<ZipObjectParcelable> zipEntries){
  super.onPostExecute(zipEntries);
  zipExplorerFragment.swipeRefreshLayout.setRefreshing(false);
  zipExplorerFragment.createZipViews(zipEntries,dir);
}","@Override protected void onPostExecute(ArrayList<ZipObjectParcelable> zipEntries){
  super.onPostExecute(zipEntries);
  onFinish.onAsyncTaskFinished(zipEntries);
}",0.7268170426065163
162531,"@Override public boolean onPrepareOptionsMenu(Menu menu){
  MenuItem s=menu.findItem(R.id.view);
  MenuItem search=menu.findItem(R.id.search);
  MenuItem paste=menu.findItem(R.id.paste);
  Fragment fragment=getFragmentAtFrame();
  if (fragment instanceof TabFragment) {
    appbar.setTitle(R.string.appbar_name);
    if (useGridView) {
      s.setTitle(getResources().getString(R.string.gridview));
    }
 else {
      s.setTitle(getResources().getString(R.string.listview));
    }
    try {
      TabFragment tabFragment=(TabFragment)fragment;
      MainFragment ma=getCurrentMainFragment();
      if (ma.IS_LIST)       s.setTitle(R.string.gridview);
 else       s.setTitle(R.string.listview);
      appbar.getBottomBar().updatePath(ma.getCurrentPath(),ma.results,MainActivityHelper.SEARCH_TEXT,ma.openMode,ma.folder_count,ma.file_count,ma);
    }
 catch (    Exception e) {
    }
    appbar.getBottomBar().setClickListener();
    invalidatePasteButton(paste);
    search.setVisible(true);
    if (indicator_layout != null)     indicator_layout.setVisibility(View.VISIBLE);
    menu.findItem(R.id.search).setVisible(true);
    menu.findItem(R.id.home).setVisible(true);
    menu.findItem(R.id.history).setVisible(true);
    menu.findItem(R.id.sethome).setVisible(true);
    menu.findItem(R.id.sort).setVisible(true);
    if (showHidden)     menu.findItem(R.id.hiddenitems).setVisible(true);
    menu.findItem(R.id.view).setVisible(true);
    menu.findItem(R.id.extract).setVisible(false);
    invalidatePasteButton(menu.findItem(R.id.paste));
    findViewById(R.id.buttonbarframe).setVisibility(View.VISIBLE);
  }
 else   if (fragment instanceof AppsListFragment || fragment instanceof ProcessViewerFragment || fragment instanceof FTPServerFragment) {
    appBarLayout.setExpanded(true);
    menu.findItem(R.id.sethome).setVisible(false);
    if (indicator_layout != null)     indicator_layout.setVisibility(View.GONE);
    findViewById(R.id.buttonbarframe).setVisibility(View.GONE);
    menu.findItem(R.id.search).setVisible(false);
    menu.findItem(R.id.home).setVisible(false);
    menu.findItem(R.id.history).setVisible(false);
    menu.findItem(R.id.extract).setVisible(false);
    if (fragment instanceof ProcessViewerFragment) {
      menu.findItem(R.id.sort).setVisible(false);
    }
 else {
      menu.findItem(R.id.dsort).setVisible(false);
      menu.findItem(R.id.sortby).setVisible(false);
    }
    menu.findItem(R.id.hiddenitems).setVisible(false);
    menu.findItem(R.id.view).setVisible(false);
    menu.findItem(R.id.paste).setVisible(false);
  }
 else   if (fragment instanceof ZipExplorerFragment) {
    menu.findItem(R.id.sethome).setVisible(false);
    if (indicator_layout != null)     indicator_layout.setVisibility(View.GONE);
    getAppbar().getBottomBar().resetClickListener();
    menu.findItem(R.id.search).setVisible(false);
    menu.findItem(R.id.home).setVisible(false);
    menu.findItem(R.id.history).setVisible(false);
    menu.findItem(R.id.sort).setVisible(false);
    menu.findItem(R.id.hiddenitems).setVisible(false);
    menu.findItem(R.id.view).setVisible(false);
    menu.findItem(R.id.paste).setVisible(false);
    menu.findItem(R.id.extract).setVisible(true);
  }
  return super.onPrepareOptionsMenu(menu);
}","@Override public boolean onPrepareOptionsMenu(Menu menu){
  MenuItem s=menu.findItem(R.id.view);
  MenuItem search=menu.findItem(R.id.search);
  MenuItem paste=menu.findItem(R.id.paste);
  Fragment fragment=getFragmentAtFrame();
  if (fragment instanceof TabFragment) {
    appbar.setTitle(R.string.appbar_name);
    if (useGridView) {
      s.setTitle(getResources().getString(R.string.gridview));
    }
 else {
      s.setTitle(getResources().getString(R.string.listview));
    }
    try {
      TabFragment tabFragment=(TabFragment)fragment;
      MainFragment ma=getCurrentMainFragment();
      if (ma.IS_LIST)       s.setTitle(R.string.gridview);
 else       s.setTitle(R.string.listview);
      appbar.getBottomBar().updatePath(ma.getCurrentPath(),ma.results,MainActivityHelper.SEARCH_TEXT,ma.openMode,ma.folder_count,ma.file_count,ma);
    }
 catch (    Exception e) {
    }
    appbar.getBottomBar().setClickListener();
    invalidatePasteButton(paste);
    search.setVisible(true);
    if (indicator_layout != null)     indicator_layout.setVisibility(View.VISIBLE);
    menu.findItem(R.id.search).setVisible(true);
    menu.findItem(R.id.home).setVisible(true);
    menu.findItem(R.id.history).setVisible(true);
    menu.findItem(R.id.sethome).setVisible(true);
    menu.findItem(R.id.sort).setVisible(true);
    if (showHidden)     menu.findItem(R.id.hiddenitems).setVisible(true);
    menu.findItem(R.id.view).setVisible(true);
    menu.findItem(R.id.extract).setVisible(false);
    invalidatePasteButton(menu.findItem(R.id.paste));
    findViewById(R.id.buttonbarframe).setVisibility(View.VISIBLE);
  }
 else   if (fragment instanceof AppsListFragment || fragment instanceof ProcessViewerFragment || fragment instanceof FTPServerFragment) {
    appBarLayout.setExpanded(true);
    menu.findItem(R.id.sethome).setVisible(false);
    if (indicator_layout != null)     indicator_layout.setVisibility(View.GONE);
    findViewById(R.id.buttonbarframe).setVisibility(View.GONE);
    menu.findItem(R.id.search).setVisible(false);
    menu.findItem(R.id.home).setVisible(false);
    menu.findItem(R.id.history).setVisible(false);
    menu.findItem(R.id.extract).setVisible(false);
    if (fragment instanceof ProcessViewerFragment) {
      menu.findItem(R.id.sort).setVisible(false);
    }
 else {
      menu.findItem(R.id.dsort).setVisible(false);
      menu.findItem(R.id.sortby).setVisible(false);
    }
    menu.findItem(R.id.hiddenitems).setVisible(false);
    menu.findItem(R.id.view).setVisible(false);
    menu.findItem(R.id.paste).setVisible(false);
  }
 else   if (fragment instanceof ZipExplorerFragment) {
    appbar.setTitle(R.string.appbar_name);
    menu.findItem(R.id.sethome).setVisible(false);
    if (indicator_layout != null)     indicator_layout.setVisibility(View.GONE);
    getAppbar().getBottomBar().resetClickListener();
    menu.findItem(R.id.search).setVisible(false);
    menu.findItem(R.id.home).setVisible(false);
    menu.findItem(R.id.history).setVisible(false);
    menu.findItem(R.id.sort).setVisible(false);
    menu.findItem(R.id.hiddenitems).setVisible(false);
    menu.findItem(R.id.view).setVisible(false);
    menu.findItem(R.id.paste).setVisible(false);
    menu.findItem(R.id.extract).setVisible(true);
  }
  return super.onPrepareOptionsMenu(menu);
}",0.9934361166234162
162532,"public void showButtons(final BottomBarButtonPath buttonPathInterface){
  final String path=buttonPathInterface.getPath();
  if (buttons.getVisibility() == View.VISIBLE) {
    lastUsedArrowButton=0;
    lastUsedFolderButton=0;
    buttons.removeAllViews();
    buttons.setMinimumHeight(pathLayout.getHeight());
    buttonRoot.setImageDrawable(mainActivity.get().getResources().getDrawable(buttonPathInterface.getRootDrawable()));
    buttonRoot.setOnClickListener(new View.OnClickListener(){
      public void onClick(      View p1){
        buttonPathInterface.changePath(""String_Node_Str"");
        timer.cancel();
        timer.start();
      }
    }
);
    Pair<ArrayList<String>,ArrayList<String>> nameAndPathPair=FileUtils.getPaths(path);
    ArrayList<String> names=nameAndPathPair.first;
    ArrayList<String> rnames=new ArrayList<>(nameAndPathPair.first);
    final ArrayList<String> rpaths=nameAndPathPair.second;
    Collections.reverse(rpaths);
    View view=new View(mainActivity.get());
    LinearLayout.LayoutParams params1=new LinearLayout.LayoutParams(appbar.getToolbar().getContentInsetLeft(),LinearLayout.LayoutParams.WRAP_CONTENT);
    view.setLayoutParams(params1);
    buttons.addView(view);
    for (int i=0; i < names.size(); i++) {
      final int k=i;
      if (rpaths.get(i).equals(""String_Node_Str"")) {
        buttons.addView(buttonRoot);
      }
 else       if (FileUtils.isStorage(rpaths.get(i))) {
        buttonStorage.setOnClickListener(new View.OnClickListener(){
          public void onClick(          View p1){
            buttonPathInterface.changePath(rpaths.get(k));
            timer.cancel();
            timer.start();
          }
        }
);
        buttons.addView(buttonStorage);
      }
 else {
        Button button=createFolderButton(rnames.get(i));
        button.setOnClickListener(new View.OnClickListener(){
          public void onClick(          View p1){
            buttonPathInterface.changePath(rpaths.get(k));
            timer.cancel();
            timer.start();
          }
        }
);
        buttons.addView(button);
      }
      if (names.size() - i != 1) {
        buttons.addView(createArrow());
      }
    }
    scroll.post(new Runnable(){
      @Override public void run(){
        sendScroll(scroll);
        sendScroll(pathScroll);
      }
    }
);
    if (buttons.getVisibility() == View.VISIBLE) {
      timer.cancel();
      timer.start();
    }
  }
}","public void showButtons(final BottomBarButtonPath buttonPathInterface){
  final String path=buttonPathInterface.getPath();
  if (buttons.getVisibility() == View.VISIBLE) {
    lastUsedArrowButton=0;
    lastUsedFolderButton=0;
    buttons.removeAllViews();
    buttons.setMinimumHeight(pathLayout.getHeight());
    buttonRoot.setImageDrawable(mainActivity.get().getResources().getDrawable(buttonPathInterface.getRootDrawable()));
    buttonRoot.setOnClickListener(new View.OnClickListener(){
      public void onClick(      View p1){
        buttonPathInterface.changePath(""String_Node_Str"");
        timer.cancel();
        timer.start();
      }
    }
);
    String[] names=FileUtils.getFolderNamesInPath(path);
    final String[] paths=FileUtils.getPathsInPath(path);
    View view=new View(mainActivity.get());
    LinearLayout.LayoutParams params1=new LinearLayout.LayoutParams(appbar.getToolbar().getContentInsetLeft(),LinearLayout.LayoutParams.WRAP_CONTENT);
    view.setLayoutParams(params1);
    buttons.addView(view);
    for (int i=0; i < names.length; i++) {
      final int k=i;
      if (paths[i].equals(""String_Node_Str"")) {
        buttons.addView(buttonRoot);
      }
 else       if (FileUtils.isStorage(paths[i])) {
        buttonStorage.setOnClickListener(new View.OnClickListener(){
          public void onClick(          View p1){
            buttonPathInterface.changePath(paths[k]);
            timer.cancel();
            timer.start();
          }
        }
);
        buttons.addView(buttonStorage);
      }
 else {
        Button button=createFolderButton(names[i]);
        button.setOnClickListener(new View.OnClickListener(){
          public void onClick(          View p1){
            buttonPathInterface.changePath(paths[k]);
            timer.cancel();
            timer.start();
          }
        }
);
        buttons.addView(button);
      }
      if (names.length - i != 1) {
        buttons.addView(createArrow());
      }
    }
    scroll.post(new Runnable(){
      @Override public void run(){
        sendScroll(scroll);
        sendScroll(pathScroll);
      }
    }
);
    if (buttons.getVisibility() == View.VISIBLE) {
      timer.cancel();
      timer.start();
    }
  }
}",0.9189421629757042
162533,"public void onClick(View p1){
  buttonPathInterface.changePath(rpaths.get(k));
  timer.cancel();
  timer.start();
}","public void onClick(View p1){
  buttonPathInterface.changePath(paths[k]);
  timer.cancel();
  timer.start();
}",0.96
162534,"private boolean extractTar(File archive,String destinationPath){
  try {
    ArrayList<TarArchiveEntry> archiveEntries=new ArrayList<>();
    TarArchiveInputStream inputStream;
    if (archive.getName().endsWith(""String_Node_Str""))     inputStream=new TarArchiveInputStream(new BufferedInputStream(new FileInputStream(archive)));
 else     inputStream=new TarArchiveInputStream(new GZIPInputStream(new FileInputStream(archive)));
    TarArchiveEntry tarArchiveEntry=inputStream.getNextTarEntry();
    while (tarArchiveEntry != null) {
      archiveEntries.add(tarArchiveEntry);
      tarArchiveEntry=inputStream.getNextTarEntry();
    }
    for (    TarArchiveEntry entry : archiveEntries) {
      totalBytes+=entry.getSize();
    }
    progressHandler.setTotalSize(totalBytes);
    setInitDataPackage(totalBytes,archiveEntries.get(0).getName(),1);
    watcherUtil=new ServiceWatcherUtil(progressHandler,totalBytes);
    watcherUtil.watch();
    for (    TarArchiveEntry entry : archiveEntries) {
      if (!progressHandler.getCancelled()) {
        progressHandler.setFileName(entry.getName());
        unzipTAREntry(inputStream,entry,destinationPath);
      }
    }
    progressHandler.setSourceFilesProcessed(1);
    inputStream.close();
    return true;
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + archive,e);
    AppConfig.toast(getApplicationContext(),getString(R.string.error));
    return false;
  }
}","private boolean extractTar(File archive,String destinationPath){
  try {
    ArrayList<TarArchiveEntry> archiveEntries=new ArrayList<>();
    TarArchiveInputStream inputStream=createTarInputStream(archive);
    TarArchiveEntry tarArchiveEntry=inputStream.getNextTarEntry();
    while (tarArchiveEntry != null) {
      archiveEntries.add(tarArchiveEntry);
      tarArchiveEntry=inputStream.getNextTarEntry();
    }
    for (    TarArchiveEntry entry : archiveEntries) {
      totalBytes+=entry.getSize();
    }
    progressHandler.setTotalSize(totalBytes);
    setInitDataPackage(totalBytes,archiveEntries.get(0).getName(),1);
    watcherUtil=new ServiceWatcherUtil(progressHandler,totalBytes);
    watcherUtil.watch();
    inputStream=createTarInputStream(archive);
    for (    TarArchiveEntry entry : archiveEntries) {
      if (!progressHandler.getCancelled()) {
        inputStream.getNextTarEntry();
        progressHandler.setFileName(entry.getName());
        unzipTAREntry(inputStream,entry,destinationPath);
      }
    }
    progressHandler.setSourceFilesProcessed(1);
    inputStream.close();
    return true;
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + archive,e);
    AppConfig.toast(getApplicationContext(),getString(R.string.error));
    return false;
  }
}",0.4572260647979614
162535,"@Override public void run(){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(this);
  FtpServerFactory serverFactory=new FtpServerFactory();
  ConnectionConfigFactory connectionConfigFactory=new ConnectionConfigFactory();
  connectionConfigFactory.setAnonymousLoginEnabled(true);
  serverFactory.setConnectionConfig(connectionConfigFactory.createConnectionConfig());
  String usernamePreference=preferences.getString(KEY_PREFERENCE_USERNAME,DEFAULT_USERNAME);
  if (!usernamePreference.equals(DEFAULT_USERNAME)) {
    username=usernamePreference;
    password=preferences.getString(KEY_PREFERENCE_PASSWORD,""String_Node_Str"");
    isPasswordProtected=true;
  }
  BaseUser user=new BaseUser();
  if (!isPasswordProtected) {
    user.setName(""String_Node_Str"");
  }
 else {
    user.setName(username);
    user.setPassword(password);
  }
  user.setHomeDirectory(preferences.getString(KEY_PREFERENCE_PATH,DEFAULT_PATH));
  List<Authority> list=new ArrayList<>();
  list.add(new WritePermission());
  user.setAuthorities(list);
  try {
    serverFactory.getUserManager().save(user);
  }
 catch (  FtpException e) {
    e.printStackTrace();
  }
  ListenerFactory fac=new ListenerFactory();
  port=preferences.getInt(PORT_PREFERENCE_KEY,DEFAULT_PORT);
  if (preferences.getBoolean(KEY_PREFERENCE_SECURE,DEFAULT_SECURE)) {
    SslConfigurationFactory sslConfigurationFactory=new SslConfigurationFactory();
    File file;
    try {
      InputStream stream=getResources().openRawResource(R.raw.key);
      file=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
      FileOutputStream outputStream=new FileOutputStream(file);
      IOUtils.copy(stream,outputStream);
    }
 catch (    Exception e) {
      e.printStackTrace();
      file=null;
    }
    if (file != null) {
      sslConfigurationFactory.setKeystoreFile(file);
      sslConfigurationFactory.setKeystorePassword(""String_Node_Str"");
      fac.setSslConfiguration(sslConfigurationFactory.createSslConfiguration());
      fac.setImplicitSsl(true);
    }
 else {
      preferences.edit().putBoolean(KEY_PREFERENCE_SECURE,false).apply();
    }
  }
  fac.setPort(port);
  fac.setIdleTimeout(preferences.getInt(KEY_PREFERENCE_TIMEOUT,DEFAULT_TIMEOUT));
  serverFactory.addListener(""String_Node_Str"",fac.createListener());
  try {
    server=serverFactory.createServer();
    server.start();
    sendBroadcast(new Intent(FTPService.ACTION_STARTED));
  }
 catch (  Exception e) {
    sendBroadcast(new Intent(FTPService.ACTION_FAILEDTOSTART));
  }
}","@Override public void run(){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(this);
  FtpServerFactory serverFactory=new FtpServerFactory();
  ConnectionConfigFactory connectionConfigFactory=new ConnectionConfigFactory();
  connectionConfigFactory.setAnonymousLoginEnabled(true);
  serverFactory.setConnectionConfig(connectionConfigFactory.createConnectionConfig());
  String usernamePreference=preferences.getString(KEY_PREFERENCE_USERNAME,DEFAULT_USERNAME);
  if (!usernamePreference.equals(DEFAULT_USERNAME)) {
    username=usernamePreference;
    password=preferences.getString(KEY_PREFERENCE_PASSWORD,""String_Node_Str"");
    isPasswordProtected=true;
  }
  BaseUser user=new BaseUser();
  if (!isPasswordProtected) {
    user.setName(""String_Node_Str"");
  }
 else {
    user.setName(username);
    user.setPassword(password);
  }
  user.setHomeDirectory(preferences.getString(KEY_PREFERENCE_PATH,DEFAULT_PATH));
  List<Authority> list=new ArrayList<>();
  list.add(new WritePermission());
  user.setAuthorities(list);
  try {
    serverFactory.getUserManager().save(user);
  }
 catch (  FtpException e) {
    e.printStackTrace();
  }
  ListenerFactory fac=new ListenerFactory();
  if (preferences.getBoolean(KEY_PREFERENCE_SECURE,DEFAULT_SECURE)) {
    SslConfigurationFactory sslConfigurationFactory=new SslConfigurationFactory();
    File file;
    try {
      InputStream stream=getResources().openRawResource(R.raw.key);
      file=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
      FileOutputStream outputStream=new FileOutputStream(file);
      IOUtils.copy(stream,outputStream);
    }
 catch (    Exception e) {
      e.printStackTrace();
      file=null;
    }
    if (file != null) {
      sslConfigurationFactory.setKeystoreFile(file);
      sslConfigurationFactory.setKeystorePassword(""String_Node_Str"");
      fac.setSslConfiguration(sslConfigurationFactory.createSslConfiguration());
      fac.setImplicitSsl(true);
    }
 else {
      preferences.edit().putBoolean(KEY_PREFERENCE_SECURE,false).apply();
    }
  }
  fac.setPort(preferences.getInt(PORT_PREFERENCE_KEY,DEFAULT_PORT));
  fac.setIdleTimeout(preferences.getInt(KEY_PREFERENCE_TIMEOUT,DEFAULT_TIMEOUT));
  serverFactory.addListener(""String_Node_Str"",fac.createListener());
  try {
    server=serverFactory.createServer();
    server.start();
    sendBroadcast(new Intent(FTPService.ACTION_STARTED));
  }
 catch (  Exception e) {
    sendBroadcast(new Intent(FTPService.ACTION_FAILEDTOSTART));
  }
}",0.6332871561448644
162536,"public static int getPort(){
  return port;
}","public static int getPort(Context context){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(context);
  return preferences.getInt(PORT_PREFERENCE_KEY,DEFAULT_PORT);
}",0.3651452282157676
162537,"public static InetAddress getLocalInetAddress(Context context){
  if (!isConnectedToLocalNetwork(context)) {
    Log.e(TAG,""String_Node_Str"");
    return null;
  }
  if (isConnectedToWifi(context)) {
    WifiManager wm=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);
    int ipAddress=wm.getConnectionInfo().getIpAddress();
    if (ipAddress == 0)     return null;
    return intToInet(ipAddress);
  }
  try {
    Enumeration<NetworkInterface> netinterfaces=NetworkInterface.getNetworkInterfaces();
    while (netinterfaces.hasMoreElements()) {
      NetworkInterface netinterface=netinterfaces.nextElement();
      Enumeration<InetAddress> addresses=netinterface.getInetAddresses();
      while (addresses.hasMoreElements()) {
        InetAddress address=addresses.nextElement();
        if (isEnabledWifiHotspot(context) && WIFI_AP_ADDRESS.equals(address.getHostAddress()))         return address;
        if (!address.isLoopbackAddress() && !address.isLinkLocalAddress())         return address;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","public static InetAddress getLocalInetAddress(Context context){
  if (!isConnectedToLocalNetwork(context) && !isEnabledWifiHotspot(context)) {
    Log.e(TAG,""String_Node_Str"");
    return null;
  }
  if (isConnectedToWifi(context)) {
    WifiManager wm=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);
    int ipAddress=wm.getConnectionInfo().getIpAddress();
    if (ipAddress == 0)     return null;
    return intToInet(ipAddress);
  }
  try {
    Enumeration<NetworkInterface> netinterfaces=NetworkInterface.getNetworkInterfaces();
    while (netinterfaces.hasMoreElements()) {
      NetworkInterface netinterface=netinterfaces.nextElement();
      Enumeration<InetAddress> addresses=netinterface.getInetAddresses();
      while (addresses.hasMoreElements()) {
        InetAddress address=addresses.nextElement();
        if (isEnabledWifiHotspot(context) && WIFI_AP_ADDRESS.equals(address.getHostAddress()))         return address;
        if (!address.isLoopbackAddress() && !address.isLinkLocalAddress())         return address;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}",0.9847806624888094
162538,"@SuppressWarnings(""String_Node_Str"") private void createNotification(Context context){
  String notificationService=Context.NOTIFICATION_SERVICE;
  NotificationManager notificationManager=(NotificationManager)context.getSystemService(notificationService);
  InetAddress address=FTPService.getLocalInetAddress(context);
  String iptext=""String_Node_Str"" + address.getHostAddress() + ""String_Node_Str""+ FTPService.getPort()+ ""String_Node_Str"";
  int icon=R.drawable.ic_ftp_light;
  CharSequence tickerText=context.getResources().getString(R.string.ftp_notif_starting);
  long when=System.currentTimeMillis();
  CharSequence contentTitle=context.getResources().getString(R.string.ftp_notif_title);
  CharSequence contentText=String.format(context.getResources().getString(R.string.ftp_notif_text),iptext);
  Intent notificationIntent=new Intent(context,MainActivity.class);
  notificationIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
  PendingIntent contentIntent=PendingIntent.getActivity(context,0,notificationIntent,0);
  int stopIcon=android.R.drawable.ic_menu_close_clear_cancel;
  CharSequence stopText=context.getResources().getString(R.string.ftp_notif_stop_server);
  Intent stopIntent=new Intent(FTPService.ACTION_STOP_FTPSERVER);
  PendingIntent stopPendingIntent=PendingIntent.getBroadcast(context,0,stopIntent,PendingIntent.FLAG_ONE_SHOT);
  Notification.Builder notificationBuilder=new Notification.Builder(context).setContentTitle(contentTitle).setContentText(contentText).setContentIntent(contentIntent).setSmallIcon(icon).setTicker(tickerText).setWhen(when).setOngoing(true);
  Notification notification=null;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    notificationBuilder.setVisibility(Notification.VISIBILITY_PUBLIC);
    notificationBuilder.setCategory(Notification.CATEGORY_SERVICE);
    notificationBuilder.setPriority(Notification.PRIORITY_MAX);
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
    notificationBuilder.addAction(stopIcon,stopText,stopPendingIntent);
    notificationBuilder.setShowWhen(false);
    notification=notificationBuilder.build();
  }
 else {
    notification=notificationBuilder.getNotification();
  }
  notificationManager.notify(NOTIFICATION_ID,notification);
}","@SuppressWarnings(""String_Node_Str"") private void createNotification(Context context){
  String notificationService=Context.NOTIFICATION_SERVICE;
  NotificationManager notificationManager=(NotificationManager)context.getSystemService(notificationService);
  InetAddress address=FTPService.getLocalInetAddress(context);
  String iptext=""String_Node_Str"" + address.getHostAddress() + ""String_Node_Str""+ FTPService.getPort(context)+ ""String_Node_Str"";
  int icon=R.drawable.ic_ftp_light;
  CharSequence tickerText=context.getResources().getString(R.string.ftp_notif_starting);
  long when=System.currentTimeMillis();
  CharSequence contentTitle=context.getResources().getString(R.string.ftp_notif_title);
  CharSequence contentText=String.format(context.getResources().getString(R.string.ftp_notif_text),iptext);
  Intent notificationIntent=new Intent(context,MainActivity.class);
  notificationIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
  PendingIntent contentIntent=PendingIntent.getActivity(context,0,notificationIntent,0);
  int stopIcon=android.R.drawable.ic_menu_close_clear_cancel;
  CharSequence stopText=context.getResources().getString(R.string.ftp_notif_stop_server);
  Intent stopIntent=new Intent(FTPService.ACTION_STOP_FTPSERVER);
  PendingIntent stopPendingIntent=PendingIntent.getBroadcast(context,0,stopIntent,PendingIntent.FLAG_ONE_SHOT);
  Notification.Builder notificationBuilder=new Notification.Builder(context).setContentTitle(contentTitle).setContentText(contentText).setContentIntent(contentIntent).setSmallIcon(icon).setTicker(tickerText).setWhen(when).setOngoing(true);
  Notification notification=null;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    notificationBuilder.setVisibility(Notification.VISIBILITY_PUBLIC);
    notificationBuilder.setCategory(Notification.CATEGORY_SERVICE);
    notificationBuilder.setPriority(Notification.PRIORITY_MAX);
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
    notificationBuilder.addAction(stopIcon,stopText,stopPendingIntent);
    notificationBuilder.setShowWhen(false);
    notification=notificationBuilder.build();
  }
 else {
    notification=notificationBuilder.getNotification();
  }
  notificationManager.notify(NOTIFICATION_ID,notification);
}",0.9984746132054914
162539,"/** 
 * Loading adapter after getting a list of elements
 * @param bitmap   the list of objects for the adapter
 * @param back
 * @param path     the path for the adapter
 * @param openMode the type of file being created
 * @param results  is the list of elements a result from search
 * @param grid     whether to set grid view or list view
 */
public void createViews(ArrayList<LayoutElement> bitmap,boolean back,String path,final OpenMode openMode,boolean results,boolean grid){
  if (bitmap != null) {
synchronized (bitmap) {
      if (GO_BACK_ITEM)       if (!path.equals(""String_Node_Str"") && (openMode == OpenMode.FILE || openMode == OpenMode.ROOT) && !path.equals(OTGUtil.PREFIX_OTG + ""String_Node_Str"")&& !path.equals(CloudHandler.CLOUD_PREFIX_GOOGLE_DRIVE + ""String_Node_Str"")&& !path.equals(CloudHandler.CLOUD_PREFIX_ONE_DRIVE + ""String_Node_Str"")&& !path.equals(CloudHandler.CLOUD_PREFIX_BOX + ""String_Node_Str"")&& !path.equals(CloudHandler.CLOUD_PREFIX_DROPBOX + ""String_Node_Str"")) {
        if (bitmap.size() == 0 || !bitmap.get(0).getSize().equals(goback)) {
          Bitmap iconBitmap=BitmapFactory.decodeResource(res,R.drawable.ic_arrow_left_white_24dp);
          bitmap.add(0,utils.newElement(new BitmapDrawable(res,iconBitmap),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",goback,0,false,true,""String_Node_Str""));
        }
      }
      if (bitmap.size() == 0 && !results) {
        nofilesview.setVisibility(View.VISIBLE);
        listView.setVisibility(View.GONE);
        mSwipeRefreshLayout.setEnabled(false);
      }
 else {
        mSwipeRefreshLayout.setEnabled(true);
        nofilesview.setVisibility(View.GONE);
        listView.setVisibility(View.VISIBLE);
      }
      putLayoutElements(bitmap);
      if (grid && IS_LIST)       switchToGrid();
 else       if (!grid && !IS_LIST)       switchToList();
      if (adapter == null) {
        adapter=new RecyclerAdapter(ma,utilsProvider,bitmap,ma.getActivity());
      }
 else {
        adapter.setItems(getLayoutElements());
      }
      stopAnims=true;
      this.openMode=openMode;
      if (openMode != OpenMode.CUSTOM)       dataUtils.addHistoryFile(path);
      listView.setAdapter(adapter);
      if (!addheader) {
        listView.removeItemDecoration(dividerItemDecoration);
        addheader=true;
      }
      if (addheader && IS_LIST) {
        dividerItemDecoration=new DividerItemDecoration(getActivity(),DividerItemDecoration.VERTICAL_LIST,true,SHOW_DIVIDERS);
        listView.addItemDecoration(dividerItemDecoration);
        addheader=false;
      }
      if (!results)       this.results=false;
      CURRENT_PATH=path;
      if (back) {
        if (scrolls.containsKey(CURRENT_PATH)) {
          Bundle b=scrolls.get(CURRENT_PATH);
          if (IS_LIST)           mLayoutManager.scrollToPositionWithOffset(b.getInt(""String_Node_Str""),b.getInt(""String_Node_Str""));
 else           mLayoutManagerGrid.scrollToPositionWithOffset(b.getInt(""String_Node_Str""),b.getInt(""String_Node_Str""));
        }
      }
      getMainActivity().updatePaths(no);
      listView.stopScroll();
      fastScroller.setRecyclerView(listView,IS_LIST ? 1 : columns);
      mToolbarContainer.addOnOffsetChangedListener(new AppBarLayout.OnOffsetChangedListener(){
        @Override public void onOffsetChanged(        AppBarLayout appBarLayout,        int verticalOffset){
          fastScroller.updateHandlePosition(verticalOffset,112);
        }
      }
);
      fastScroller.registerOnTouchListener(new FastScroller.onTouchListener(){
        @Override public void onTouch(){
          if (stopAnims && adapter != null) {
            stopAnimation();
            stopAnims=false;
          }
        }
      }
);
      if (buttons.getVisibility() == View.VISIBLE)       getMainActivity().bbar(this);
      AppConfig.runInBackground(new Runnable(){
        @Override public void run(){
switch (openMode) {
case ROOT:
case FILE:
            File file=new File(CURRENT_PATH);
          if (file.isDirectory() && file.canRead()) {
            if (customFileObserver != null) {
              customFileObserver.stopWatching();
            }
            customFileObserver=new CustomFileObserver(CURRENT_PATH);
            customFileObserver.startWatching();
          }
        break;
default :
      break;
  }
}
}
);
}
}
 else {
loadlist(home,true,OpenMode.FILE);
}
}","/** 
 * Loading adapter after getting a list of elements
 * @param bitmap   the list of objects for the adapter
 * @param back
 * @param path     the path for the adapter
 * @param openMode the type of file being created
 * @param results  is the list of elements a result from search
 * @param grid     whether to set grid view or list view
 */
public void createViews(ArrayList<LayoutElement> bitmap,boolean back,String path,final OpenMode openMode,boolean results,boolean grid){
  if ((bitmap != null) && (isAdded())) {
synchronized (bitmap) {
      if (GO_BACK_ITEM)       if (!path.equals(""String_Node_Str"") && (openMode == OpenMode.FILE || openMode == OpenMode.ROOT) && !path.equals(OTGUtil.PREFIX_OTG + ""String_Node_Str"")&& !path.equals(CloudHandler.CLOUD_PREFIX_GOOGLE_DRIVE + ""String_Node_Str"")&& !path.equals(CloudHandler.CLOUD_PREFIX_ONE_DRIVE + ""String_Node_Str"")&& !path.equals(CloudHandler.CLOUD_PREFIX_BOX + ""String_Node_Str"")&& !path.equals(CloudHandler.CLOUD_PREFIX_DROPBOX + ""String_Node_Str"")) {
        if (bitmap.size() == 0 || !bitmap.get(0).getSize().equals(goback)) {
          Bitmap iconBitmap=BitmapFactory.decodeResource(res,R.drawable.ic_arrow_left_white_24dp);
          bitmap.add(0,utils.newElement(new BitmapDrawable(res,iconBitmap),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",goback,0,false,true,""String_Node_Str""));
        }
      }
      if (bitmap.size() == 0 && !results) {
        nofilesview.setVisibility(View.VISIBLE);
        listView.setVisibility(View.GONE);
        mSwipeRefreshLayout.setEnabled(false);
      }
 else {
        mSwipeRefreshLayout.setEnabled(true);
        nofilesview.setVisibility(View.GONE);
        listView.setVisibility(View.VISIBLE);
      }
      putLayoutElements(bitmap);
      if (grid && IS_LIST)       switchToGrid();
 else       if (!grid && !IS_LIST)       switchToList();
      if (adapter == null) {
        adapter=new RecyclerAdapter(ma,utilsProvider,bitmap,ma.getActivity());
      }
 else {
        adapter.setItems(getLayoutElements());
      }
      stopAnims=true;
      this.openMode=openMode;
      if (openMode != OpenMode.CUSTOM)       dataUtils.addHistoryFile(path);
      listView.setAdapter(adapter);
      if (!addheader) {
        listView.removeItemDecoration(dividerItemDecoration);
        addheader=true;
      }
      if (addheader && IS_LIST) {
        dividerItemDecoration=new DividerItemDecoration(getActivity(),DividerItemDecoration.VERTICAL_LIST,true,SHOW_DIVIDERS);
        listView.addItemDecoration(dividerItemDecoration);
        addheader=false;
      }
      if (!results)       this.results=false;
      CURRENT_PATH=path;
      if (back) {
        if (scrolls.containsKey(CURRENT_PATH)) {
          Bundle b=scrolls.get(CURRENT_PATH);
          if (IS_LIST)           mLayoutManager.scrollToPositionWithOffset(b.getInt(""String_Node_Str""),b.getInt(""String_Node_Str""));
 else           mLayoutManagerGrid.scrollToPositionWithOffset(b.getInt(""String_Node_Str""),b.getInt(""String_Node_Str""));
        }
      }
      getMainActivity().updatePaths(no);
      listView.stopScroll();
      fastScroller.setRecyclerView(listView,IS_LIST ? 1 : columns);
      mToolbarContainer.addOnOffsetChangedListener(new AppBarLayout.OnOffsetChangedListener(){
        @Override public void onOffsetChanged(        AppBarLayout appBarLayout,        int verticalOffset){
          fastScroller.updateHandlePosition(verticalOffset,112);
        }
      }
);
      fastScroller.registerOnTouchListener(new FastScroller.onTouchListener(){
        @Override public void onTouch(){
          if (stopAnims && adapter != null) {
            stopAnimation();
            stopAnims=false;
          }
        }
      }
);
      if (buttons.getVisibility() == View.VISIBLE)       getMainActivity().bbar(this);
      AppConfig.runInBackground(new Runnable(){
        @Override public void run(){
switch (openMode) {
case ROOT:
case FILE:
            File file=new File(CURRENT_PATH);
          if (file.isDirectory() && file.canRead()) {
            if (customFileObserver != null) {
              customFileObserver.stopWatching();
            }
            customFileObserver=new CustomFileObserver(CURRENT_PATH);
            customFileObserver.startWatching();
          }
        break;
default :
      break;
  }
}
}
);
}
}
 else {
loadlist(home,true,OpenMode.FILE);
}
}",0.9980506822612084
162540,"@Override protected void onPostExecute(final String[] hashes){
  super.onPostExecute(hashes);
  if (!f.isDirectory()) {
    md5HashText.setText(hashes[0]);
    sha256Text.setText(hashes[1]);
    mMD5LinearLayout.setOnLongClickListener(new View.OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        Futils.copyToClipboard(c,hashes[0]);
        Toast.makeText(c,c.getResources().getString(R.string.md5).toUpperCase() + ""String_Node_Str"" + c.getResources().getString(R.string.properties_copied_clipboard),Toast.LENGTH_SHORT).show();
        return false;
      }
    }
);
    mSHA256LinearLayout.setOnLongClickListener(new View.OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        Futils.copyToClipboard(c,hashes[1]);
        Toast.makeText(c,c.getResources().getString(R.string.hash_sha256) + ""String_Node_Str"" + c.getResources().getString(R.string.properties_copied_clipboard),Toast.LENGTH_SHORT).show();
        return false;
      }
    }
);
  }
 else {
    mMD5LinearLayout.setVisibility(View.GONE);
    mSHA256LinearLayout.setVisibility(View.GONE);
  }
}","@Override protected void onPostExecute(final String[] hashes){
  super.onPostExecute(hashes);
  if (!f.isDirectory() && f.getSize() != 0) {
    md5HashText.setText(hashes[0]);
    sha256Text.setText(hashes[1]);
    mMD5LinearLayout.setOnLongClickListener(new View.OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        Futils.copyToClipboard(c,hashes[0]);
        Toast.makeText(c,c.getResources().getString(R.string.md5).toUpperCase() + ""String_Node_Str"" + c.getResources().getString(R.string.properties_copied_clipboard),Toast.LENGTH_SHORT).show();
        return false;
      }
    }
);
    mSHA256LinearLayout.setOnLongClickListener(new View.OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        Futils.copyToClipboard(c,hashes[1]);
        Toast.makeText(c,c.getResources().getString(R.string.hash_sha256) + ""String_Node_Str"" + c.getResources().getString(R.string.properties_copied_clipboard),Toast.LENGTH_SHORT).show();
        return false;
      }
    }
);
  }
 else {
    mMD5LinearLayout.setVisibility(View.GONE);
    mSHA256LinearLayout.setVisibility(View.GONE);
  }
}",0.9912126537785588
162541,"@Override protected void onPostExecute(Pair<String,List<PieEntry>> data){
  if (data == null) {
    chart.setVisibility(View.GONE);
    return;
  }
  PieDataSet set=new PieDataSet(data.second,null);
  set.setColors(COLORS);
  set.setXValuePosition(PieDataSet.ValuePosition.OUTSIDE_SLICE);
  set.setYValuePosition(PieDataSet.ValuePosition.OUTSIDE_SLICE);
  set.setSliceSpace(5f);
  PieData pieData=new PieData(set);
  pieData.setValueFormatter(new SizeFormatter(context));
  chart.setCenterText(new SpannableString(context.getString(R.string.total) + data.first));
  chart.setData(pieData);
  chart.notifyDataSetChanged();
  chart.invalidate();
}","@Override protected void onPostExecute(Pair<String,List<PieEntry>> data){
  if (data == null) {
    chart.setVisibility(View.GONE);
    return;
  }
  PieDataSet set=new PieDataSet(data.second,null);
  set.setColors(COLORS);
  set.setXValuePosition(PieDataSet.ValuePosition.OUTSIDE_SLICE);
  set.setYValuePosition(PieDataSet.ValuePosition.OUTSIDE_SLICE);
  set.setSliceSpace(5f);
  set.setValueLinePart2Length(1.05f);
  set.setSelectionShift(0f);
  PieData pieData=new PieData(set);
  pieData.setValueFormatter(new SizeFormatter(context));
  chart.setCenterText(new SpannableString(context.getString(R.string.total) + ""String_Node_Str"" + data.first));
  chart.setData(pieData);
  chart.notifyDataSetChanged();
  chart.invalidate();
}",0.9368191721132898
162542,"private void showPropertiesDialog(final BaseFile baseFile,final String permissions,BasicActivity basic,boolean isRoot,AppTheme appTheme,boolean showPermissions){
  final ExecutorService executor=Executors.newFixedThreadPool(3);
  final Context c=basic.getApplicationContext();
  int accentColor=basic.getColorPreference().getColor(ColorUsage.ACCENT);
  long last=baseFile.getDate();
  final String date=getDate(last), items=basic.getResources().getString(R.string.calculating), name=baseFile.getName(), parent=baseFile.getReadablePath(baseFile.getParent(c));
  SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(c);
  String fabskin=PreferenceUtils.getAccentString(sharedPrefs);
  MaterialDialog.Builder builder=new MaterialDialog.Builder(basic);
  builder.title(basic.getResources().getString(R.string.properties));
  builder.theme(appTheme.getMaterialDialogTheme());
  View v=basic.getLayoutInflater().inflate(R.layout.properties_dialog,null);
  TextView itemsText=(TextView)v.findViewById(R.id.t7);
{
    TextView mNameTitle=(TextView)v.findViewById(R.id.title_name);
    mNameTitle.setTextColor(accentColor);
    TextView mDateTitle=(TextView)v.findViewById(R.id.title_date);
    mDateTitle.setTextColor(accentColor);
    TextView mSizeTitle=(TextView)v.findViewById(R.id.title_size);
    mSizeTitle.setTextColor(accentColor);
    TextView mLocationTitle=(TextView)v.findViewById(R.id.title_location);
    mLocationTitle.setTextColor(accentColor);
    TextView md5Title=(TextView)v.findViewById(R.id.title_md5);
    md5Title.setTextColor(accentColor);
    TextView sha256Title=(TextView)v.findViewById(R.id.title_sha256);
    sha256Title.setTextColor(accentColor);
    ((TextView)v.findViewById(R.id.t5)).setText(name);
    ((TextView)v.findViewById(R.id.t6)).setText(parent);
    itemsText.setText(items);
    ((TextView)v.findViewById(R.id.t8)).setText(date);
    LinearLayout mNameLinearLayout=(LinearLayout)v.findViewById(R.id.properties_dialog_name);
    LinearLayout mLocationLinearLayout=(LinearLayout)v.findViewById(R.id.properties_dialog_location);
    LinearLayout mSizeLinearLayout=(LinearLayout)v.findViewById(R.id.properties_dialog_size);
    LinearLayout mDateLinearLayout=(LinearLayout)v.findViewById(R.id.properties_dialog_date);
    mNameLinearLayout.setOnLongClickListener(new View.OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        Futils.copyToClipboard(c,name);
        Toast.makeText(c,c.getResources().getString(R.string.name) + ""String_Node_Str"" + c.getResources().getString(R.string.properties_copied_clipboard),Toast.LENGTH_SHORT).show();
        return false;
      }
    }
);
    mLocationLinearLayout.setOnLongClickListener(new View.OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        Futils.copyToClipboard(c,parent);
        Toast.makeText(c,c.getResources().getString(R.string.location) + ""String_Node_Str"" + c.getResources().getString(R.string.properties_copied_clipboard),Toast.LENGTH_SHORT).show();
        return false;
      }
    }
);
    mSizeLinearLayout.setOnLongClickListener(new View.OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        Futils.copyToClipboard(c,items);
        Toast.makeText(c,c.getResources().getString(R.string.size) + ""String_Node_Str"" + c.getResources().getString(R.string.properties_copied_clipboard),Toast.LENGTH_SHORT).show();
        return false;
      }
    }
);
    mDateLinearLayout.setOnLongClickListener(new View.OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        Futils.copyToClipboard(c,date);
        Toast.makeText(c,c.getResources().getString(R.string.date) + ""String_Node_Str"" + c.getResources().getString(R.string.properties_copied_clipboard),Toast.LENGTH_SHORT).show();
        return false;
      }
    }
);
  }
  CountFolderItems countFolderItems=new CountFolderItems(c,itemsText,baseFile);
  countFolderItems.executeOnExecutor(executor);
  GenerateHashes hashGen=new GenerateHashes(baseFile,c,v);
  hashGen.executeOnExecutor(executor);
{
    PieChart chart=(PieChart)v.findViewById(R.id.chart);
    chart.setTouchEnabled(false);
    chart.setDrawEntryLabels(false);
    chart.setDescription(null);
    chart.setNoDataText(c.getString(R.string.loading));
    chart.getLegend().setEnabled(true);
    chart.getLegend().setForm(Legend.LegendForm.CIRCLE);
    chart.getLegend().setHorizontalAlignment(Legend.LegendHorizontalAlignment.CENTER);
    chart.getLegend().setTypeface(Typeface.create(""String_Node_Str"",Typeface.NORMAL));
    chart.animateY(1000);
    chart.invalidate();
    LoadFolderSpaceData loadFolderSpaceData=new LoadFolderSpaceData(c,chart,baseFile);
    loadFolderSpaceData.executeOnExecutor(executor);
  }
  if (showPermissions) {
    final MainFragment main=((MainActivity)basic).mainFragment;
    AppCompatButton appCompatButton=(AppCompatButton)v.findViewById(R.id.permissionsButton);
    appCompatButton.setAllCaps(true);
    final View permissionsTable=v.findViewById(R.id.permtable);
    final View button=v.findViewById(R.id.set);
    if (isRoot && permissions.length() > 6) {
      appCompatButton.setVisibility(View.VISIBLE);
      appCompatButton.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          if (permissionsTable.getVisibility() == View.GONE) {
            permissionsTable.setVisibility(View.VISIBLE);
            button.setVisibility(View.VISIBLE);
            setPermissionsDialog(permissionsTable,button,baseFile,permissions,c,main);
          }
 else {
            button.setVisibility(View.GONE);
            permissionsTable.setVisibility(View.GONE);
          }
        }
      }
);
    }
  }
  builder.customView(v,true);
  builder.positiveText(basic.getResources().getString(R.string.ok));
  builder.positiveColor(Color.parseColor(fabskin));
  builder.dismissListener(new DialogInterface.OnDismissListener(){
    @Override public void onDismiss(    DialogInterface dialog){
      executor.shutdown();
    }
  }
);
  MaterialDialog materialDialog=builder.build();
  materialDialog.show();
  materialDialog.getActionButton(DialogAction.NEGATIVE).setEnabled(false);
}","private void showPropertiesDialog(final BaseFile baseFile,final String permissions,BasicActivity basic,boolean isRoot,AppTheme appTheme,boolean showPermissions){
  final ExecutorService executor=Executors.newFixedThreadPool(3);
  final Context c=basic.getApplicationContext();
  int accentColor=basic.getColorPreference().getColor(ColorUsage.ACCENT);
  long last=baseFile.getDate();
  final String date=getDate(last), items=basic.getResources().getString(R.string.calculating), name=baseFile.getName(), parent=baseFile.getReadablePath(baseFile.getParent(c));
  SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(c);
  String fabskin=PreferenceUtils.getAccentString(sharedPrefs);
  MaterialDialog.Builder builder=new MaterialDialog.Builder(basic);
  builder.title(basic.getResources().getString(R.string.properties));
  builder.theme(appTheme.getMaterialDialogTheme());
  View v=basic.getLayoutInflater().inflate(R.layout.properties_dialog,null);
  TextView itemsText=(TextView)v.findViewById(R.id.t7);
{
    TextView mNameTitle=(TextView)v.findViewById(R.id.title_name);
    mNameTitle.setTextColor(accentColor);
    TextView mDateTitle=(TextView)v.findViewById(R.id.title_date);
    mDateTitle.setTextColor(accentColor);
    TextView mSizeTitle=(TextView)v.findViewById(R.id.title_size);
    mSizeTitle.setTextColor(accentColor);
    TextView mLocationTitle=(TextView)v.findViewById(R.id.title_location);
    mLocationTitle.setTextColor(accentColor);
    TextView md5Title=(TextView)v.findViewById(R.id.title_md5);
    md5Title.setTextColor(accentColor);
    TextView sha256Title=(TextView)v.findViewById(R.id.title_sha256);
    sha256Title.setTextColor(accentColor);
    ((TextView)v.findViewById(R.id.t5)).setText(name);
    ((TextView)v.findViewById(R.id.t6)).setText(parent);
    itemsText.setText(items);
    ((TextView)v.findViewById(R.id.t8)).setText(date);
    LinearLayout mNameLinearLayout=(LinearLayout)v.findViewById(R.id.properties_dialog_name);
    LinearLayout mLocationLinearLayout=(LinearLayout)v.findViewById(R.id.properties_dialog_location);
    LinearLayout mSizeLinearLayout=(LinearLayout)v.findViewById(R.id.properties_dialog_size);
    LinearLayout mDateLinearLayout=(LinearLayout)v.findViewById(R.id.properties_dialog_date);
    mNameLinearLayout.setOnLongClickListener(new View.OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        Futils.copyToClipboard(c,name);
        Toast.makeText(c,c.getResources().getString(R.string.name) + ""String_Node_Str"" + c.getResources().getString(R.string.properties_copied_clipboard),Toast.LENGTH_SHORT).show();
        return false;
      }
    }
);
    mLocationLinearLayout.setOnLongClickListener(new View.OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        Futils.copyToClipboard(c,parent);
        Toast.makeText(c,c.getResources().getString(R.string.location) + ""String_Node_Str"" + c.getResources().getString(R.string.properties_copied_clipboard),Toast.LENGTH_SHORT).show();
        return false;
      }
    }
);
    mSizeLinearLayout.setOnLongClickListener(new View.OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        Futils.copyToClipboard(c,items);
        Toast.makeText(c,c.getResources().getString(R.string.size) + ""String_Node_Str"" + c.getResources().getString(R.string.properties_copied_clipboard),Toast.LENGTH_SHORT).show();
        return false;
      }
    }
);
    mDateLinearLayout.setOnLongClickListener(new View.OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        Futils.copyToClipboard(c,date);
        Toast.makeText(c,c.getResources().getString(R.string.date) + ""String_Node_Str"" + c.getResources().getString(R.string.properties_copied_clipboard),Toast.LENGTH_SHORT).show();
        return false;
      }
    }
);
  }
  CountFolderItems countFolderItems=new CountFolderItems(c,itemsText,baseFile);
  countFolderItems.executeOnExecutor(executor);
  GenerateHashes hashGen=new GenerateHashes(baseFile,c,v);
  hashGen.executeOnExecutor(executor);
{
    PieChart chart=(PieChart)v.findViewById(R.id.chart);
    chart.setTouchEnabled(false);
    chart.setDrawEntryLabels(false);
    chart.setDescription(null);
    chart.setNoDataText(c.getString(R.string.loading));
    chart.setRotationAngle(0f);
    chart.getLegend().setEnabled(true);
    chart.getLegend().setForm(Legend.LegendForm.CIRCLE);
    chart.getLegend().setHorizontalAlignment(Legend.LegendHorizontalAlignment.CENTER);
    chart.getLegend().setTypeface(Typeface.create(""String_Node_Str"",Typeface.NORMAL));
    chart.animateY(1000);
    chart.invalidate();
    LoadFolderSpaceData loadFolderSpaceData=new LoadFolderSpaceData(c,chart,baseFile);
    loadFolderSpaceData.executeOnExecutor(executor);
  }
  if (showPermissions) {
    final MainFragment main=((MainActivity)basic).mainFragment;
    AppCompatButton appCompatButton=(AppCompatButton)v.findViewById(R.id.permissionsButton);
    appCompatButton.setAllCaps(true);
    final View permissionsTable=v.findViewById(R.id.permtable);
    final View button=v.findViewById(R.id.set);
    if (isRoot && permissions.length() > 6) {
      appCompatButton.setVisibility(View.VISIBLE);
      appCompatButton.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          if (permissionsTable.getVisibility() == View.GONE) {
            permissionsTable.setVisibility(View.VISIBLE);
            button.setVisibility(View.VISIBLE);
            setPermissionsDialog(permissionsTable,button,baseFile,permissions,c,main);
          }
 else {
            button.setVisibility(View.GONE);
            permissionsTable.setVisibility(View.GONE);
          }
        }
      }
);
    }
  }
  builder.customView(v,true);
  builder.positiveText(basic.getResources().getString(R.string.ok));
  builder.positiveColor(Color.parseColor(fabskin));
  builder.dismissListener(new DialogInterface.OnDismissListener(){
    @Override public void onDismiss(    DialogInterface dialog){
      executor.shutdown();
    }
  }
);
  MaterialDialog materialDialog=builder.build();
  materialDialog.show();
  materialDialog.getActionButton(DialogAction.NEGATIVE).setEnabled(false);
}",0.9974375400384368
162543,"public void refreshDrawer(){
  List<String> val=DataUtils.getStorages();
  if (val == null)   val=getStorageDirectories();
  createDrawerItems(DataUtils.getAccounts(),DataUtils.getServers(),val);
}","public void refreshDrawer(){
  List<String> val=DataUtils.getStorages();
  if (val == null)   val=getStorageDirectories();
  createDrawerItems(val);
}",0.8645533141210374
162544,"private void createDrawerItems(ArrayList<String[]> accounts,ArrayList<String[]> servers,List<String> storageDirectories){
  ArrayList<Item> sectionItems=new ArrayList<>();
  storage_count=0;
  for (  String file : storageDirectories) {
    File f=new File(file);
    String name;
    Drawable icon1=ContextCompat.getDrawable(this,R.drawable.ic_sd_storage_white_56dp);
    if (""String_Node_Str"".equals(file) || ""String_Node_Str"".equals(file)) {
      name=getResources().getString(R.string.storage);
    }
 else     if (""String_Node_Str"".equals(file)) {
      name=getResources().getString(R.string.extstorage);
    }
 else     if (""String_Node_Str"".equals(file)) {
      name=getResources().getString(R.string.rootdirectory);
      icon1=ContextCompat.getDrawable(this,R.drawable.ic_drawer_root_white);
    }
 else     if (""String_Node_Str"".equals(file)) {
      name=""String_Node_Str"";
      icon1=ContextCompat.getDrawable(this,R.drawable.ic_usb_white_48dp);
    }
 else     name=f.getName();
    if (!f.isDirectory() || f.canExecute()) {
      storage_count++;
      sectionItems.add(new EntryItem(name,file,icon1));
    }
  }
  sectionItems.add(new SectionItem());
  if (servers != null && servers.size() > 0) {
    for (    String[] file : servers) {
      sectionItems.add(new EntryItem(file[0],file[1],ContextCompat.getDrawable(this,R.drawable.ic_settings_remote_white_48dp)));
    }
    sectionItems.add(new SectionItem());
  }
  if (accounts != null && accounts.size() > 0) {
    Collections.sort(accounts,new BookSorter());
    for (    String[] file : accounts) {
      sectionItems.add(new EntryItem(file[0],file[1],ContextCompat.getDrawable(this,R.drawable.drive)));
    }
    sectionItems.add(new SectionItem());
  }
  ArrayList<String[]> books=DataUtils.getBooks();
  if (books != null && books.size() > 0) {
    Collections.sort(books,new BookSorter());
    for (    String[] file : books) {
      sectionItems.add(new EntryItem(file[0],file[1],ContextCompat.getDrawable(this,R.drawable.folder_fab)));
    }
    sectionItems.add(new SectionItem());
  }
  sectionItems.add(new EntryItem(getResources().getString(R.string.quick),""String_Node_Str"",ContextCompat.getDrawable(this,R.drawable.ic_star_white_18dp)));
  sectionItems.add(new EntryItem(getResources().getString(R.string.recent),""String_Node_Str"",ContextCompat.getDrawable(this,R.drawable.ic_history_white_48dp)));
  sectionItems.add(new EntryItem(getResources().getString(R.string.images),""String_Node_Str"",ContextCompat.getDrawable(this,R.drawable.ic_doc_image)));
  sectionItems.add(new EntryItem(getResources().getString(R.string.videos),""String_Node_Str"",ContextCompat.getDrawable(this,R.drawable.ic_doc_video_am)));
  sectionItems.add(new EntryItem(getResources().getString(R.string.audio),""String_Node_Str"",ContextCompat.getDrawable(this,R.drawable.ic_doc_audio_am)));
  sectionItems.add(new EntryItem(getResources().getString(R.string.documents),""String_Node_Str"",ContextCompat.getDrawable(this,R.drawable.ic_doc_doc_am)));
  sectionItems.add(new EntryItem(getResources().getString(R.string.apks),""String_Node_Str"",ContextCompat.getDrawable(this,R.drawable.ic_doc_apk_grid)));
  DataUtils.setList(sectionItems);
  adapter=new DrawerAdapter(this,this,sectionItems,this,sharedPref);
  mDrawerList.setAdapter(adapter);
}","private void createDrawerItems(List<String> storageDirectories){
  ArrayList<Item> sectionItems=new ArrayList<>();
  storage_count=0;
  for (  String file : storageDirectories) {
    File f=new File(file);
    String name;
    Drawable icon1=ContextCompat.getDrawable(this,R.drawable.ic_sd_storage_white_56dp);
    if (""String_Node_Str"".equals(file) || ""String_Node_Str"".equals(file)) {
      name=getResources().getString(R.string.storage);
    }
 else     if (""String_Node_Str"".equals(file)) {
      name=getResources().getString(R.string.extstorage);
    }
 else     if (""String_Node_Str"".equals(file)) {
      name=getResources().getString(R.string.rootdirectory);
      icon1=ContextCompat.getDrawable(this,R.drawable.ic_drawer_root_white);
    }
 else     if (""String_Node_Str"".equals(file)) {
      name=""String_Node_Str"";
      icon1=ContextCompat.getDrawable(this,R.drawable.ic_usb_white_48dp);
    }
 else     name=f.getName();
    if (!f.isDirectory() || f.canExecute()) {
      storage_count++;
      sectionItems.add(new EntryItem(name,file,icon1));
    }
  }
  sectionItems.add(new SectionItem());
  ArrayList<String[]> servers=DataUtils.getServers();
  if (servers != null && servers.size() > 0) {
    for (    String[] file : servers) {
      sectionItems.add(new EntryItem(file[0],file[1],ContextCompat.getDrawable(this,R.drawable.ic_settings_remote_white_48dp)));
    }
    sectionItems.add(new SectionItem());
  }
  ArrayList<String[]> accounts=DataUtils.getAccounts();
  if (accounts != null && accounts.size() > 0) {
    Collections.sort(accounts,new BookSorter());
    for (    String[] file : accounts) {
      sectionItems.add(new EntryItem(file[0],file[1],ContextCompat.getDrawable(this,R.drawable.drive)));
    }
    sectionItems.add(new SectionItem());
  }
  ArrayList<String[]> books=DataUtils.getBooks();
  if (books != null && books.size() > 0) {
    Collections.sort(books,new BookSorter());
    for (    String[] file : books) {
      sectionItems.add(new EntryItem(file[0],file[1],ContextCompat.getDrawable(this,R.drawable.folder_fab)));
    }
    sectionItems.add(new SectionItem());
  }
  if (sharedPref.getBoolean(PREFERENCE_SHOW_SIDEBAR_FOLDERS,true)) {
    sectionItems.add(new EntryItem(getResources().getString(R.string.quick),""String_Node_Str"",ContextCompat.getDrawable(this,R.drawable.ic_star_white_18dp)));
    sectionItems.add(new EntryItem(getResources().getString(R.string.recent),""String_Node_Str"",ContextCompat.getDrawable(this,R.drawable.ic_history_white_48dp)));
    sectionItems.add(new EntryItem(getResources().getString(R.string.images),""String_Node_Str"",ContextCompat.getDrawable(this,R.drawable.ic_doc_image)));
    sectionItems.add(new EntryItem(getResources().getString(R.string.videos),""String_Node_Str"",ContextCompat.getDrawable(this,R.drawable.ic_doc_video_am)));
    sectionItems.add(new EntryItem(getResources().getString(R.string.audio),""String_Node_Str"",ContextCompat.getDrawable(this,R.drawable.ic_doc_audio_am)));
    sectionItems.add(new EntryItem(getResources().getString(R.string.documents),""String_Node_Str"",ContextCompat.getDrawable(this,R.drawable.ic_doc_doc_am)));
    sectionItems.add(new EntryItem(getResources().getString(R.string.apks),""String_Node_Str"",ContextCompat.getDrawable(this,R.drawable.ic_doc_apk_grid)));
  }
  DataUtils.setList(sectionItems);
  adapter=new DrawerAdapter(this,this,sectionItems,this,sharedPref);
  mDrawerList.setAdapter(adapter);
}",0.5322245322245323
162545,"public void deleteFiles(ArrayList<Layoutelements> a,final Main b,List<Integer> pos,AppTheme appTheme){
  final MaterialDialog.Builder c=new MaterialDialog.Builder(b.getActivity());
  c.title(b.getResources().getString(R.string.confirm));
  String names=""String_Node_Str"";
  final ArrayList<BaseFile> todelete=new ArrayList<>();
  for (int i=0; i < pos.size(); i++) {
    todelete.add(a.get(pos.get(i)).generateBaseFile());
    names=names + ""String_Node_Str"" + (i + 1)+ ""String_Node_Str""+ a.get(pos.get(i)).getTitle();
  }
  c.content(b.getResources().getString(R.string.questiondelete) + names);
  c.theme(appTheme.getMaterialDialogTheme());
  c.negativeText(b.getResources().getString(R.string.no));
  c.positiveText(b.getResources().getString(R.string.yes));
  c.positiveColor(Color.parseColor(b.fabSkin));
  c.negativeColor(Color.parseColor(b.fabSkin));
  c.callback(new MaterialDialog.ButtonCallback(){
    @Override public void onPositive(    MaterialDialog materialDialog){
      Toast.makeText(b.getActivity(),b.getResources().getString(R.string.deleting),Toast.LENGTH_SHORT).show();
      b.MAIN_ACTIVITY.mainActivityHelper.deleteFiles(todelete);
    }
    @Override public void onNegative(    MaterialDialog materialDialog){
    }
  }
);
  c.build().show();
}","public void deleteFiles(ArrayList<Layoutelements> a,final Main b,List<Integer> pos,AppTheme appTheme){
  final MaterialDialog.Builder c=new MaterialDialog.Builder(b.getActivity());
  c.title(b.getResources().getString(R.string.confirm));
  int fileCounter=0, dirCounter=0;
  final ArrayList<BaseFile> todelete=new ArrayList<>();
  StringBuilder dirNames=new StringBuilder();
  StringBuilder fileNames=new StringBuilder();
  for (int i=0; i < pos.size(); i++) {
    todelete.add(a.get(pos.get(i)).generateBaseFile());
    if (a.get(pos.get(i)).isDirectory())     dirNames.append(""String_Node_Str"").append(++dirCounter).append(""String_Node_Str"").append(a.get(pos.get(i)).getTitle());
 else     fileNames.append(""String_Node_Str"").append(++fileCounter).append(""String_Node_Str"").append(a.get(pos.get(i)).getTitle()).append(""String_Node_Str"").append(a.get(pos.get(i)).getSize()).append(""String_Node_Str"");
  }
  String titleFiles=b.getResources().getString(R.string.title_files);
  String titleDirs=b.getResources().getString(R.string.title_dirs);
  if (fileNames.length() == 0)   c.content(b.getResources().getString(R.string.questiondelete) + ""String_Node_Str"" + ""String_Node_Str""+ titleDirs+ ""String_Node_Str""+ dirNames);
 else   if (dirNames.length() == 0)   c.content(b.getResources().getString(R.string.questiondelete) + ""String_Node_Str"" + ""String_Node_Str""+ titleFiles+ ""String_Node_Str""+ fileNames);
 else   c.content(b.getResources().getString(R.string.questiondelete) + ""String_Node_Str"" + ""String_Node_Str""+ titleDirs+ ""String_Node_Str""+ dirNames+ ""String_Node_Str""+ ""String_Node_Str""+ titleFiles+ ""String_Node_Str""+ fileNames);
  c.theme(appTheme.getMaterialDialogTheme());
  c.negativeText(b.getResources().getString(R.string.no));
  c.positiveText(b.getResources().getString(R.string.yes));
  c.positiveColor(Color.parseColor(b.fabSkin));
  c.negativeColor(Color.parseColor(b.fabSkin));
  c.callback(new MaterialDialog.ButtonCallback(){
    @Override public void onPositive(    MaterialDialog materialDialog){
      Toast.makeText(b.getActivity(),b.getResources().getString(R.string.deleting),Toast.LENGTH_SHORT).show();
      b.MAIN_ACTIVITY.mainActivityHelper.deleteFiles(todelete);
    }
    @Override public void onNegative(    MaterialDialog materialDialog){
    }
  }
);
  c.build().show();
}",0.6439351593068754
162546,"public void mkFile(final HFile path,final Main ma){
  final Toast toast=Toast.makeText(ma.getActivity(),ma.getString(R.string.creatingfile),Toast.LENGTH_SHORT);
  toast.show();
  Operations.mkfile(path,ma.getActivity(),BaseActivity.rootMode,new Operations.ErrorCallBack(){
    @Override public void exists(    final HFile file){
      ma.getActivity().runOnUiThread(new Runnable(){
        @Override public void run(){
          if (toast != null)           toast.cancel();
          Toast.makeText(mainActivity,mainActivity.getString(R.string.fileexist),Toast.LENGTH_SHORT).show();
          if (ma != null && ma.getActivity() != null) {
            mkfile(file.getMode(),file.getParent(),ma);
          }
        }
      }
);
    }
    @Override public void launchSAF(    HFile file){
      ma.getActivity().runOnUiThread(new Runnable(){
        @Override public void run(){
          if (toast != null)           toast.cancel();
          mainActivity.oppathe=path.getPath();
          mainActivity.operation=DataUtils.NEW_FOLDER;
          guideDialogForLEXA(mainActivity.oppathe);
        }
      }
);
    }
    @Override public void launchSAF(    HFile file,    HFile file1){
    }
    @Override public void done(    HFile hFile,    final boolean b){
      ma.getActivity().runOnUiThread(new Runnable(){
        @Override public void run(){
          if (b) {
            ma.updateList();
          }
 else           Toast.makeText(ma.getActivity(),ma.getString(R.string.operationunsuccesful),Toast.LENGTH_SHORT).show();
        }
      }
);
    }
    @Override public void invalidName(    final HFile file){
      ma.getActivity().runOnUiThread(new Runnable(){
        @Override public void run(){
          if (toast != null)           toast.cancel();
          Toast.makeText(ma.getActivity(),ma.getString(R.string.invalid_name) + ""String_Node_Str"" + file.getName(),Toast.LENGTH_LONG).show();
        }
      }
);
    }
  }
);
}","public void mkFile(final HFile path,final Main ma){
  final Toast toast=Toast.makeText(ma.getActivity(),ma.getString(R.string.creatingfile),Toast.LENGTH_SHORT);
  toast.show();
  Operations.mkfile(path,ma.getActivity(),BaseActivity.rootMode,new Operations.ErrorCallBack(){
    @Override public void exists(    final HFile file){
      ma.getActivity().runOnUiThread(new Runnable(){
        @Override public void run(){
          if (toast != null)           toast.cancel();
          Toast.makeText(mainActivity,mainActivity.getString(R.string.fileexist),Toast.LENGTH_SHORT).show();
          if (ma != null && ma.getActivity() != null) {
            mkfile(file.getMode(),file.getParent(),ma);
          }
        }
      }
);
    }
    @Override public void launchSAF(    HFile file){
      ma.getActivity().runOnUiThread(new Runnable(){
        @Override public void run(){
          if (toast != null)           toast.cancel();
          mainActivity.oppathe=path.getPath();
          mainActivity.operation=DataUtils.NEW_FILE;
          guideDialogForLEXA(mainActivity.oppathe);
        }
      }
);
    }
    @Override public void launchSAF(    HFile file,    HFile file1){
    }
    @Override public void done(    HFile hFile,    final boolean b){
      ma.getActivity().runOnUiThread(new Runnable(){
        @Override public void run(){
          if (b) {
            ma.updateList();
          }
 else           Toast.makeText(ma.getActivity(),ma.getString(R.string.operationunsuccesful),Toast.LENGTH_SHORT).show();
        }
      }
);
    }
    @Override public void invalidName(    final HFile file){
      ma.getActivity().runOnUiThread(new Runnable(){
        @Override public void run(){
          if (toast != null)           toast.cancel();
          Toast.makeText(ma.getActivity(),ma.getString(R.string.invalid_name) + ""String_Node_Str"" + file.getName(),Toast.LENGTH_LONG).show();
        }
      }
);
    }
  }
);
}",0.9989669421487604
162547,"@Override public void onPostExecute(Boolean movedCorrectly){
  if (movedCorrectly) {
    if (main != null && main.CURRENT_PATH.equals(paths.get(0)))     main.updateList();
    for (int i=0; i < paths.size(); i++) {
      for (      BaseFile f : files.get(i)) {
        Futils.scanFile(f.getPath(),context);
        Futils.scanFile(paths.get(i) + ""String_Node_Str"" + f.getName(),context);
      }
    }
  }
 else {
    for (int i=0; i < paths.size(); i++) {
      Intent intent=new Intent(context,CopyService.class);
      intent.putExtra(CopyService.TAG_COPY_SOURCES,files.get(i));
      intent.putExtra(CopyService.TAG_COPY_TARGET,paths.get(i));
      intent.putExtra(CopyService.TAG_COPY_MOVE,true);
      intent.putExtra(CopyService.TAG_COPY_OPEN_MODE,mode.ordinal());
      ServiceWatcherUtil.runService(context,intent);
    }
  }
  for (  ArrayList<BaseFile> folder : files) {
    BaseFile folderPath=new BaseFile(folder.get(0).getParent());
    try {
      if (folderPath.listOnlyFiles(rootMode).size() == 0)       folderPath.delete(context,rootMode);
    }
 catch (    RootNotPermittedException e) {
      e.printStackTrace();
    }
  }
}","@Override public void onPostExecute(Boolean movedCorrectly){
  if (movedCorrectly) {
    if (main != null && main.CURRENT_PATH.equals(paths.get(0)))     main.updateList();
    for (int i=0; i < paths.size(); i++) {
      for (      BaseFile f : files.get(i)) {
        Futils.scanFile(f.getPath(),context);
        Futils.scanFile(paths.get(i) + ""String_Node_Str"" + f.getName(),context);
      }
    }
  }
 else {
    for (int i=0; i < paths.size(); i++) {
      Intent intent=new Intent(context,CopyService.class);
      intent.putExtra(CopyService.TAG_COPY_SOURCES,files.get(i));
      intent.putExtra(CopyService.TAG_COPY_TARGET,paths.get(i));
      intent.putExtra(CopyService.TAG_COPY_MOVE,true);
      intent.putExtra(CopyService.TAG_COPY_OPEN_MODE,mode.ordinal());
      ServiceWatcherUtil.runService(context,intent);
    }
  }
  Collections.reverse(files);
  for (  ArrayList<BaseFile> folder : files) {
    BaseFile folderPath=new BaseFile(folder.get(0).getParent());
    try {
      if (folderPath.listFiles(rootMode).size() == 0)       folderPath.delete(context,rootMode);
    }
 catch (    RootNotPermittedException e) {
      e.printStackTrace();
    }
  }
}",0.9853195164075992
162548,"@Override public void run(){
  mModified=!mInput.getText().toString().equals(mOriginal);
  invalidateOptionsMenu();
}","@Override public void run(){
  modified=!mInput.getText().toString().equals(mOriginal);
  if (mModified != modified) {
    mModified=modified;
    invalidateOptionsMenu();
  }
}",0.7891156462585034
162549,"/** 
 * Helper method for   {@link #saveFile(Uri,File,String)}Works on a background thread to save data to output stream associated with this reader
 * @see #saveFile(Uri,File,String)
 * @param uri
 * @param file
 * @param inputText
 * @throws StreamNotFoundException
 * @throws IOException
 * @throws RootNotPermittedException
 */
private void writeTextFile(final Uri uri,final File file,String inputText) throws StreamNotFoundException, IOException, RootNotPermittedException {
  mOriginal=inputText;
  OutputStream outputStream=null;
  if (uri.toString().contains(""String_Node_Str"")) {
    if (file.canWrite()) {
      try {
        outputStream=new FileOutputStream(file);
      }
 catch (      FileNotFoundException e) {
        outputStream=null;
      }
    }
    if (BaseActivity.rootMode && outputStream == null) {
      try {
        if (cacheFile != null && cacheFile.exists())         outputStream=new FileOutputStream(cacheFile);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
        outputStream=null;
      }
    }
  }
 else   if (uri.toString().contains(""String_Node_Str"")) {
    if (parcelFileDescriptor != null) {
      File descriptorFile=new File(GenericCopyUtil.PATH_FILE_DESCRIPTOR + parcelFileDescriptor.getFd());
      try {
        outputStream=new FileOutputStream(descriptorFile);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
        outputStream=null;
      }
    }
    if (outputStream == null) {
      try {
        outputStream=getContentResolver().openOutputStream(uri);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
        outputStream=null;
      }
    }
  }
  if (outputStream == null)   throw new StreamNotFoundException();
  outputStream.write(inputText.getBytes());
  outputStream.close();
  if (cacheFile != null && cacheFile.exists()) {
    RootUtils.cat(cacheFile.getPath(),mFile.getPath());
    cacheFile.delete();
  }
  runOnUiThread(new Runnable(){
    @Override public void run(){
      Toast.makeText(c,getString(R.string.done),Toast.LENGTH_SHORT).show();
    }
  }
);
}","/** 
 * Helper method for   {@link #saveFile(Uri,File,String)}Works on a background thread to save data to output stream associated with this reader
 * @see #saveFile(Uri,File,String)
 * @param uri
 * @param file
 * @param inputText
 * @throws StreamNotFoundException
 * @throws IOException
 * @throws RootNotPermittedException
 */
private void writeTextFile(final Uri uri,final File file,String inputText) throws StreamNotFoundException, IOException, RootNotPermittedException {
  OutputStream outputStream=null;
  if (uri.toString().contains(""String_Node_Str"")) {
    try {
      outputStream=FileUtil.getOutputStream(file,this);
    }
 catch (    Exception e) {
      outputStream=null;
    }
    if (BaseActivity.rootMode && outputStream == null) {
      try {
        if (cacheFile != null && cacheFile.exists())         outputStream=new FileOutputStream(cacheFile);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
        outputStream=null;
      }
    }
  }
 else   if (uri.toString().contains(""String_Node_Str"")) {
    if (parcelFileDescriptor != null) {
      File descriptorFile=new File(GenericCopyUtil.PATH_FILE_DESCRIPTOR + parcelFileDescriptor.getFd());
      try {
        outputStream=new FileOutputStream(descriptorFile);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
        outputStream=null;
      }
    }
    if (outputStream == null) {
      try {
        outputStream=getContentResolver().openOutputStream(uri);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
        outputStream=null;
      }
    }
  }
  if (outputStream == null)   throw new StreamNotFoundException();
  outputStream.write(inputText.getBytes());
  outputStream.close();
  mOriginal=inputText;
  mModified=false;
  invalidateOptionsMenu();
  if (cacheFile != null && cacheFile.exists()) {
    RootUtils.cat(cacheFile.getPath(),mFile.getPath());
    cacheFile.delete();
  }
  runOnUiThread(new Runnable(){
    @Override public void run(){
      Toast.makeText(c,getString(R.string.done),Toast.LENGTH_SHORT).show();
    }
  }
);
}",0.9380028395646
162550,"@Override public void onTextChanged(CharSequence charSequence,int i,int i2,int i3){
  if (charSequence.hashCode() == mInput.getText().hashCode()) {
    if (mTimer != null) {
      mTimer.cancel();
      mTimer.purge();
      mTimer=null;
    }
    mTimer=new Timer();
    mTimer.schedule(new TimerTask(){
      @Override public void run(){
        mModified=!mInput.getText().toString().equals(mOriginal);
        invalidateOptionsMenu();
      }
    }
,250);
  }
}","@Override public void onTextChanged(CharSequence charSequence,int i,int i2,int i3){
  if (charSequence.hashCode() == mInput.getText().hashCode()) {
    if (mTimer != null) {
      mTimer.cancel();
      mTimer.purge();
      mTimer=null;
    }
    mTimer=new Timer();
    mTimer.schedule(new TimerTask(){
      boolean modified;
      @Override public void run(){
        modified=!mInput.getText().toString().equals(mOriginal);
        if (mModified != modified) {
          mModified=modified;
          invalidateOptionsMenu();
        }
      }
    }
,250);
  }
}",0.8081395348837209
162551,"@Override public boolean onCreateOptionsMenu(Menu menu){
  getMenuInflater().inflate(R.menu.text,menu);
  menu.findItem(R.id.save).setVisible(mModified);
  menu.findItem(R.id.find).setVisible(true);
  return super.onCreateOptionsMenu(menu);
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  getMenuInflater().inflate(R.menu.text,menu);
  menu.findItem(R.id.find).setVisible(true);
  return super.onCreateOptionsMenu(menu);
}",0.8847926267281107
162552,"/** 
 * Check is a file is writable. Detects write issues on external SD card.
 * @param file The file
 * @return true if the file is writable.
 */
public static final boolean isWritable(final File file){
  if (file == null)   return false;
  boolean isExisting=file.exists();
  try {
    FileOutputStream output=new FileOutputStream(file,true);
    try {
      output.close();
    }
 catch (    IOException e) {
    }
  }
 catch (  FileNotFoundException e) {
    return false;
  }
  boolean result=file.canWrite();
  if (!isExisting) {
    file.delete();
  }
  return result;
}","/** 
 * Check if a file is writable. Detects write issues on external SD card.
 * @param file The file
 * @return true if the file is writable.
 */
public static final boolean isWritable(final File file){
  if (file == null)   return false;
  boolean isExisting=file.exists();
  try {
    FileOutputStream output=new FileOutputStream(file,true);
    try {
      output.close();
    }
 catch (    IOException e) {
    }
  }
 catch (  FileNotFoundException e) {
    return false;
  }
  boolean result=file.canWrite();
  if (!isExisting) {
    file.delete();
  }
  return result;
}",0.9982698961937716
162553,"/** 
 * Starts copy of file Supports :   {@link File},   {@link jcifs.smb.SmbFile},   {@link DocumentFile}
 * @throws IOException
 */
private void startCopy() throws IOException {
  FileInputStream inputStream=null;
  FileOutputStream outputStream=null;
  FileChannel inChannel=null;
  FileChannel outChannel=null;
  BufferedInputStream bufferedInputStream=null;
  BufferedOutputStream bufferedOutputStream=null;
  try {
    if (mSourceFile.isOtgFile()) {
      ContentResolver contentResolver=mContext.getContentResolver();
      DocumentFile documentSourceFile=RootHelper.getDocumentFile(mSourceFile.getPath(),mContext,false);
      bufferedInputStream=new BufferedInputStream(contentResolver.openInputStream(documentSourceFile.getUri()),DEFAULT_BUFFER_SIZE);
    }
 else     if (mSourceFile.isSmb()) {
      bufferedInputStream=new BufferedInputStream(mSourceFile.getInputStream(),DEFAULT_BUFFER_SIZE);
    }
 else {
      inChannel=new RandomAccessFile(new File(mSourceFile.getPath()),""String_Node_Str"").getChannel();
    }
    if (mTargetFile.isOtgFile()) {
      ContentResolver contentResolver=mContext.getContentResolver();
      DocumentFile documentTargetFile=RootHelper.getDocumentFile(mTargetFile.getPath(),mContext,true);
      bufferedOutputStream=new BufferedOutputStream(contentResolver.openOutputStream(documentTargetFile.getUri()),DEFAULT_BUFFER_SIZE);
    }
 else     if (mTargetFile.isSmb()) {
      bufferedOutputStream=new BufferedOutputStream(mTargetFile.getOutputStream(mContext),DEFAULT_BUFFER_SIZE);
    }
 else {
      outChannel=new RandomAccessFile(new File(mTargetFile.getPath()),""String_Node_Str"").getChannel();
    }
    if (bufferedInputStream != null) {
      if (bufferedOutputStream != null)       copyFile(bufferedInputStream,bufferedOutputStream);
 else       if (outChannel != null) {
        copyFile(bufferedInputStream,outChannel);
      }
    }
 else     if (inChannel != null) {
      if (bufferedOutputStream != null)       copyFile(inChannel,bufferedOutputStream);
 else       if (outChannel != null)       copyFile(inChannel,outChannel);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    Log.d(getClass().getSimpleName(),""String_Node_Str"");
    throw new IOException();
  }
 finally {
    try {
      if (inChannel != null)       inChannel.close();
      if (outChannel != null)       outChannel.close();
      if (inputStream != null)       inputStream.close();
      if (outputStream != null)       outputStream.close();
      if (bufferedInputStream != null)       bufferedInputStream.close();
      if (bufferedOutputStream != null)       bufferedOutputStream.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * Starts copy of file Supports :   {@link File},   {@link jcifs.smb.SmbFile},   {@link DocumentFile}
 * @throws IOException
 */
private void startCopy() throws IOException {
  FileInputStream inputStream=null;
  FileOutputStream outputStream=null;
  FileChannel inChannel=null;
  FileChannel outChannel=null;
  BufferedInputStream bufferedInputStream=null;
  BufferedOutputStream bufferedOutputStream=null;
  try {
    if (mSourceFile.isOtgFile()) {
      ContentResolver contentResolver=mContext.getContentResolver();
      DocumentFile documentSourceFile=RootHelper.getDocumentFile(mSourceFile.getPath(),mContext,false);
      bufferedInputStream=new BufferedInputStream(contentResolver.openInputStream(documentSourceFile.getUri()),DEFAULT_BUFFER_SIZE);
    }
 else     if (mSourceFile.isSmb()) {
      bufferedInputStream=new BufferedInputStream(mSourceFile.getInputStream(),DEFAULT_BUFFER_SIZE);
    }
 else {
      File file=new File(mSourceFile.getPath());
      if (FileUtil.isReadable(file)) {
        inChannel=new RandomAccessFile(file,""String_Node_Str"").getChannel();
      }
 else {
        ContentResolver contentResolver=mContext.getContentResolver();
        DocumentFile documentSourceFile=FileUtil.getDocumentFile(file,mSourceFile.isDirectory(),mContext);
        bufferedInputStream=new BufferedInputStream(contentResolver.openInputStream(documentSourceFile.getUri()),DEFAULT_BUFFER_SIZE);
      }
    }
    if (mTargetFile.isOtgFile()) {
      ContentResolver contentResolver=mContext.getContentResolver();
      DocumentFile documentTargetFile=RootHelper.getDocumentFile(mTargetFile.getPath(),mContext,true);
      bufferedOutputStream=new BufferedOutputStream(contentResolver.openOutputStream(documentTargetFile.getUri()),DEFAULT_BUFFER_SIZE);
    }
 else     if (mTargetFile.isSmb()) {
      bufferedOutputStream=new BufferedOutputStream(mTargetFile.getOutputStream(mContext),DEFAULT_BUFFER_SIZE);
    }
 else {
      File file=new File(mTargetFile.getPath());
      if (FileUtil.isWritable(file)) {
        outChannel=new RandomAccessFile(file,""String_Node_Str"").getChannel();
      }
 else {
        ContentResolver contentResolver=mContext.getContentResolver();
        DocumentFile documentTargetFile=FileUtil.getDocumentFile(file,mTargetFile.isDirectory(),mContext);
        bufferedOutputStream=new BufferedOutputStream(contentResolver.openOutputStream(documentTargetFile.getUri()),DEFAULT_BUFFER_SIZE);
      }
    }
    if (bufferedInputStream != null) {
      if (bufferedOutputStream != null)       copyFile(bufferedInputStream,bufferedOutputStream);
 else       if (outChannel != null) {
        copyFile(bufferedInputStream,outChannel);
      }
    }
 else     if (inChannel != null) {
      if (bufferedOutputStream != null)       copyFile(inChannel,bufferedOutputStream);
 else       if (outChannel != null)       copyFile(inChannel,outChannel);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    Log.d(getClass().getSimpleName(),""String_Node_Str"");
    throw new IOException();
  }
 finally {
    try {
      if (inChannel != null)       inChannel.close();
      if (outChannel != null)       outChannel.close();
      if (inputStream != null)       inputStream.close();
      if (outputStream != null)       outputStream.close();
      if (bufferedInputStream != null)       bufferedInputStream.close();
      if (bufferedOutputStream != null)       bufferedOutputStream.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.7747950490274875
162554,"public void guideDialogForLEXA(String path){
  final MaterialDialog.Builder x=new MaterialDialog.Builder(mainActivity);
  x.theme(mainActivity.getAppTheme().getMaterialDialogTheme());
  x.title(R.string.needsaccess);
  LayoutInflater layoutInflater=(LayoutInflater)mainActivity.getSystemService(mainActivity.LAYOUT_INFLATER_SERVICE);
  View view=layoutInflater.inflate(R.layout.lexadrawer,null);
  x.customView(view,true);
  TextView textView=(TextView)view.findViewById(R.id.description);
  textView.setText(mainActivity.getResources().getString(R.string.needsaccesssummary) + path + mainActivity.getResources().getString(R.string.needsaccesssummary1));
  ((ImageView)view.findViewById(R.id.icon)).setImageResource(R.drawable.sd_operate_step);
  x.positiveText(R.string.open);
  x.negativeText(R.string.cancel);
  x.positiveColor(Color.parseColor(BaseActivity.accentSkin));
  x.negativeColor(Color.parseColor(BaseActivity.accentSkin));
  x.callback(new MaterialDialog.ButtonCallback(){
    @Override public void onPositive(    MaterialDialog materialDialog){
      triggerStorageAccessFramework();
    }
    @Override public void onNegative(    MaterialDialog materialDialog){
      Toast.makeText(mainActivity,R.string.error,Toast.LENGTH_SHORT).show();
    }
  }
);
  final MaterialDialog y=x.build();
  y.show();
}","public void guideDialogForLEXA(String path){
  final MaterialDialog.Builder x=new MaterialDialog.Builder(mainActivity);
  x.theme(mainActivity.getAppTheme().getMaterialDialogTheme());
  x.title(R.string.needsaccess);
  LayoutInflater layoutInflater=(LayoutInflater)mainActivity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View view=layoutInflater.inflate(R.layout.lexadrawer,null);
  x.customView(view,true);
  TextView textView=(TextView)view.findViewById(R.id.description);
  textView.setText(mainActivity.getResources().getString(R.string.needsaccesssummary) + path + mainActivity.getResources().getString(R.string.needsaccesssummary1));
  ((ImageView)view.findViewById(R.id.icon)).setImageResource(R.drawable.sd_operate_step);
  x.positiveText(R.string.open);
  x.negativeText(R.string.cancel);
  x.positiveColor(Color.parseColor(BaseActivity.accentSkin));
  x.negativeColor(Color.parseColor(BaseActivity.accentSkin));
  x.callback(new MaterialDialog.ButtonCallback(){
    @Override public void onPositive(    MaterialDialog materialDialog){
      triggerStorageAccessFramework();
    }
    @Override public void onNegative(    MaterialDialog materialDialog){
      Toast.makeText(mainActivity,R.string.error,Toast.LENGTH_SHORT).show();
    }
  }
);
  final MaterialDialog y=x.build();
  y.show();
}",0.99277291745911
162555,"@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  final boolean edit=getArguments().getBoolean(""String_Node_Str"",false);
  final String path=getArguments().getString(""String_Node_Str"");
  final String name=getArguments().getString(""String_Node_Str"");
  context=getActivity();
  emptyAddress=String.format(getString(R.string.cantbeempty),getString(R.string.ip));
  emptyName=String.format(getString(R.string.cantbeempty),getString(R.string.connectionname));
  invalidDomain=String.format(getString(R.string.invalid),getString(R.string.domain));
  invalidUsername=String.format(getString(R.string.invalid),getString(R.string.username).toLowerCase());
  if (getActivity() instanceof SmbConnectionListener) {
    smbConnectionListener=(SmbConnectionListener)getActivity();
  }
  final SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);
  final MaterialDialog.Builder ba3=new MaterialDialog.Builder(context);
  ba3.title((R.string.smb_con));
  ba3.autoDismiss(false);
  final View v2=getActivity().getLayoutInflater().inflate(R.layout.smb_dialog,null);
  final TextInputLayout connectionTIL=(TextInputLayout)v2.findViewById(R.id.connectionTIL);
  final TextInputLayout ipTIL=(TextInputLayout)v2.findViewById(R.id.ipTIL);
  final TextInputLayout domainTIL=(TextInputLayout)v2.findViewById(R.id.domainTIL);
  final TextInputLayout usernameTIL=(TextInputLayout)v2.findViewById(R.id.usernameTIL);
  final AppCompatEditText con_name=(AppCompatEditText)v2.findViewById(R.id.connectionET);
  con_name.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (con_name.getText().toString().length() == 0)       connectionTIL.setError(emptyName);
 else       connectionTIL.setError(""String_Node_Str"");
    }
  }
);
  final AppCompatEditText ip=(AppCompatEditText)v2.findViewById(R.id.ipET);
  ip.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (ip.getText().toString().length() == 0)       ipTIL.setError(emptyAddress);
 else       ipTIL.setError(""String_Node_Str"");
    }
  }
);
  final AppCompatEditText domain=(AppCompatEditText)v2.findViewById(R.id.domainET);
  domain.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (domain.getText().toString().contains(""String_Node_Str""))       domainTIL.setError(invalidDomain);
 else       domainTIL.setError(""String_Node_Str"");
    }
  }
);
  final AppCompatEditText user=(AppCompatEditText)v2.findViewById(R.id.usernameET);
  user.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (user.getText().toString().contains(""String_Node_Str""))       usernameTIL.setError(invalidUsername);
 else       usernameTIL.setError(""String_Node_Str"");
    }
  }
);
  int color=Color.parseColor(PreferenceUtils.getAccentString(sharedPreferences));
  final AppCompatEditText pass=(AppCompatEditText)v2.findViewById(R.id.passwordET);
  final AppCompatCheckBox ch=(AppCompatCheckBox)v2.findViewById(R.id.checkBox2);
  TextView help=(TextView)v2.findViewById(R.id.wanthelp);
  setTint(con_name,color);
  setTint(user,color);
  setTint(pass,color);
  Futils.setTint(ch,color);
  help.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Futils.showSMBHelpDialog(context,PreferenceUtils.getAccentString(sharedPreferences));
    }
  }
);
  ch.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (ch.isChecked()) {
        user.setEnabled(false);
        pass.setEnabled(false);
      }
 else {
        user.setEnabled(true);
        pass.setEnabled(true);
      }
    }
  }
);
  if (edit) {
    String userp=""String_Node_Str"", passp=""String_Node_Str"", ipp=""String_Node_Str"", domainp=""String_Node_Str"";
    con_name.setText(name);
    try {
      jcifs.Config.registerSmbURLHandler();
      URL a=new URL(path);
      String userinfo=a.getUserInfo();
      if (userinfo != null) {
        String inf=URLDecoder.decode(userinfo,""String_Node_Str"");
        int domainDelim=!inf.contains(""String_Node_Str"") ? 0 : inf.indexOf(';');
        domainp=inf.substring(0,domainDelim);
        if (domainp != null && domainp.length() > 0)         inf=inf.substring(domainDelim + 1);
        userp=inf.substring(0,inf.indexOf(""String_Node_Str""));
        passp=inf.substring(inf.indexOf(""String_Node_Str"") + 1,inf.length());
        domain.setText(domainp);
        user.setText(userp);
        pass.setText(passp);
      }
 else       ch.setChecked(true);
      ipp=a.getHost();
      ip.setText(ipp);
    }
 catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
catch (    MalformedURLException e) {
      e.printStackTrace();
    }
  }
 else   if (path != null && path.length() > 0) {
    con_name.setText(name);
    ip.setText(path);
    user.requestFocus();
  }
 else {
    con_name.setText(R.string.smb_con);
    con_name.requestFocus();
  }
  ba3.customView(v2,true);
  ba3.theme(utilsProvider.getAppTheme().getMaterialDialogTheme());
  ba3.neutralText(R.string.cancel);
  ba3.positiveText(R.string.create);
  if (edit)   ba3.negativeText(R.string.delete);
  ba3.positiveColor(color).negativeColor(color).neutralColor(color);
  ba3.onPositive(new MaterialDialog.SingleButtonCallback(){
    @Override public void onClick(    @NonNull MaterialDialog dialog,    @NonNull DialogAction which){
      String s[];
      String ipa=ip.getText().toString();
      String con_nam=con_name.getText().toString();
      String sDomain=domain.getText().toString();
      String username=user.getText().toString();
      TextInputLayout firstInvalidField=null;
      if (con_nam == null || con_nam.length() == 0) {
        connectionTIL.setError(emptyName);
        firstInvalidField=connectionTIL;
      }
      if (ipa == null || ipa.length() == 0) {
        ipTIL.setError(emptyAddress);
        if (firstInvalidField == null)         firstInvalidField=ipTIL;
      }
      if (sDomain.contains(""String_Node_Str"")) {
        domainTIL.setError(invalidDomain);
        if (firstInvalidField == null)         firstInvalidField=domainTIL;
      }
      if (username.contains(""String_Node_Str"")) {
        usernameTIL.setError(invalidUsername);
        if (firstInvalidField == null)         firstInvalidField=usernameTIL;
      }
      if (firstInvalidField != null) {
        firstInvalidField.requestFocus();
        return;
      }
      SmbFile smbFile;
      String domaind=domain.getText().toString();
      if (ch.isChecked())       smbFile=connectingWithSmbServer(new String[]{ipa,""String_Node_Str"",""String_Node_Str"",domaind},true);
 else {
        String useru=user.getText().toString();
        String passp=pass.getText().toString();
        smbFile=connectingWithSmbServer(new String[]{ipa,useru,passp,domaind},false);
      }
      if (smbFile == null)       return;
      s=new String[]{con_name.getText().toString(),smbFile.getPath()};
      if (smbConnectionListener != null) {
        smbConnectionListener.addConnection(edit,s[0],s[1],name,path);
      }
      dismiss();
    }
  }
);
  ba3.onNegative(new MaterialDialog.SingleButtonCallback(){
    @Override public void onClick(    @NonNull MaterialDialog dialog,    @NonNull DialogAction which){
      if (smbConnectionListener != null) {
        smbConnectionListener.deleteConnection(name,path);
        dismiss();
      }
    }
  }
);
  ba3.onNeutral(new MaterialDialog.SingleButtonCallback(){
    @Override public void onClick(    @NonNull MaterialDialog dialog,    @NonNull DialogAction which){
      dismiss();
    }
  }
);
  return ba3.build();
}","@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  final boolean edit=getArguments().getBoolean(""String_Node_Str"",false);
  final String path=getArguments().getString(""String_Node_Str"");
  final String name=getArguments().getString(""String_Node_Str"");
  context=getActivity();
  emptyAddress=String.format(getString(R.string.cantbeempty),getString(R.string.ip));
  emptyName=String.format(getString(R.string.cantbeempty),getString(R.string.connectionname));
  invalidDomain=String.format(getString(R.string.invalid),getString(R.string.domain));
  invalidUsername=String.format(getString(R.string.invalid),getString(R.string.username).toLowerCase());
  if (getActivity() instanceof SmbConnectionListener) {
    smbConnectionListener=(SmbConnectionListener)getActivity();
  }
  final SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);
  final MaterialDialog.Builder ba3=new MaterialDialog.Builder(context);
  ba3.title((R.string.smb_con));
  ba3.autoDismiss(false);
  final View v2=getActivity().getLayoutInflater().inflate(R.layout.smb_dialog,null);
  final TextInputLayout connectionTIL=(TextInputLayout)v2.findViewById(R.id.connectionTIL);
  final TextInputLayout ipTIL=(TextInputLayout)v2.findViewById(R.id.ipTIL);
  final TextInputLayout domainTIL=(TextInputLayout)v2.findViewById(R.id.domainTIL);
  final TextInputLayout usernameTIL=(TextInputLayout)v2.findViewById(R.id.usernameTIL);
  final AppCompatEditText con_name=(AppCompatEditText)v2.findViewById(R.id.connectionET);
  con_name.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (con_name.getText().toString().length() == 0)       connectionTIL.setError(emptyName);
 else       connectionTIL.setError(""String_Node_Str"");
    }
  }
);
  final AppCompatEditText ip=(AppCompatEditText)v2.findViewById(R.id.ipET);
  ip.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (ip.getText().toString().length() == 0)       ipTIL.setError(emptyAddress);
 else       ipTIL.setError(""String_Node_Str"");
    }
  }
);
  final AppCompatEditText domain=(AppCompatEditText)v2.findViewById(R.id.domainET);
  domain.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (domain.getText().toString().contains(""String_Node_Str""))       domainTIL.setError(invalidDomain);
 else       domainTIL.setError(""String_Node_Str"");
    }
  }
);
  final AppCompatEditText user=(AppCompatEditText)v2.findViewById(R.id.usernameET);
  user.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (user.getText().toString().contains(""String_Node_Str""))       usernameTIL.setError(invalidUsername);
 else       usernameTIL.setError(""String_Node_Str"");
    }
  }
);
  int color=Color.parseColor(PreferenceUtils.getAccentString(sharedPreferences));
  final AppCompatEditText pass=(AppCompatEditText)v2.findViewById(R.id.passwordET);
  final AppCompatCheckBox ch=(AppCompatCheckBox)v2.findViewById(R.id.checkBox2);
  TextView help=(TextView)v2.findViewById(R.id.wanthelp);
  setTint(con_name,color);
  setTint(user,color);
  setTint(pass,color);
  Futils.setTint(ch,color);
  help.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Futils.showSMBHelpDialog(context,PreferenceUtils.getAccentString(sharedPreferences));
    }
  }
);
  ch.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (ch.isChecked()) {
        user.setEnabled(false);
        pass.setEnabled(false);
      }
 else {
        user.setEnabled(true);
        pass.setEnabled(true);
      }
    }
  }
);
  if (edit) {
    String userp=""String_Node_Str"", passp=""String_Node_Str"", ipp=""String_Node_Str"", domainp=""String_Node_Str"";
    con_name.setText(name);
    try {
      jcifs.Config.registerSmbURLHandler();
      URL a=new URL(path);
      String userinfo=a.getUserInfo();
      if (userinfo != null) {
        String inf=URLDecoder.decode(userinfo,""String_Node_Str"");
        int domainDelim=!inf.contains(""String_Node_Str"") ? 0 : inf.indexOf(';');
        domainp=inf.substring(0,domainDelim);
        if (domainp != null && domainp.length() > 0)         inf=inf.substring(domainDelim + 1);
        userp=inf.substring(0,inf.indexOf(""String_Node_Str""));
        passp=inf.substring(inf.indexOf(""String_Node_Str"") + 1,inf.length());
        domain.setText(domainp);
        user.setText(userp);
        pass.setText(passp);
      }
 else       ch.setChecked(true);
      ipp=a.getHost();
      ip.setText(ipp);
    }
 catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
catch (    MalformedURLException e) {
      e.printStackTrace();
    }
  }
 else   if (path != null && path.length() > 0) {
    con_name.setText(name);
    ip.setText(path);
    user.requestFocus();
  }
 else {
    con_name.setText(R.string.smb_con);
    con_name.requestFocus();
  }
  ba3.customView(v2,true);
  ba3.theme(utilsProvider.getAppTheme().getMaterialDialogTheme());
  ba3.neutralText(R.string.cancel);
  ba3.positiveText(R.string.create);
  if (edit)   ba3.negativeText(R.string.delete);
  ba3.positiveColor(color).negativeColor(color).neutralColor(color);
  ba3.onPositive(new MaterialDialog.SingleButtonCallback(){
    @Override public void onClick(    @NonNull MaterialDialog dialog,    @NonNull DialogAction which){
      String s[];
      String ipa=ip.getText().toString();
      String con_nam=con_name.getText().toString();
      String sDomain=domain.getText().toString();
      String username=user.getText().toString();
      TextInputLayout firstInvalidField=null;
      if (con_nam == null || con_nam.length() == 0) {
        connectionTIL.setError(emptyName);
        firstInvalidField=connectionTIL;
      }
      if (ipa == null || ipa.length() == 0) {
        ipTIL.setError(emptyAddress);
        if (firstInvalidField == null)         firstInvalidField=ipTIL;
      }
      if (sDomain.contains(""String_Node_Str"")) {
        domainTIL.setError(invalidDomain);
        if (firstInvalidField == null)         firstInvalidField=domainTIL;
      }
      if (username.contains(""String_Node_Str"")) {
        usernameTIL.setError(invalidUsername);
        if (firstInvalidField == null)         firstInvalidField=usernameTIL;
      }
      if (firstInvalidField != null) {
        firstInvalidField.requestFocus();
        return;
      }
      SmbFile smbFile;
      String domaind=domain.getText().toString();
      if (ch.isChecked())       smbFile=connectingWithSmbServer(new String[]{ipa,""String_Node_Str"",""String_Node_Str"",domaind},true);
 else {
        String useraw=user.getText().toString();
        String useru=useraw.replaceAll(""String_Node_Str"",""String_Node_Str"");
        String passp=pass.getText().toString();
        smbFile=connectingWithSmbServer(new String[]{ipa,useru,passp,domaind},false);
      }
      if (smbFile == null)       return;
      s=new String[]{con_name.getText().toString(),smbFile.getPath()};
      if (smbConnectionListener != null) {
        smbConnectionListener.addConnection(edit,s[0],s[1],name,path);
      }
      dismiss();
    }
  }
);
  ba3.onNegative(new MaterialDialog.SingleButtonCallback(){
    @Override public void onClick(    @NonNull MaterialDialog dialog,    @NonNull DialogAction which){
      if (smbConnectionListener != null) {
        smbConnectionListener.deleteConnection(name,path);
        dismiss();
      }
    }
  }
);
  ba3.onNeutral(new MaterialDialog.SingleButtonCallback(){
    @Override public void onClick(    @NonNull MaterialDialog dialog,    @NonNull DialogAction which){
      dismiss();
    }
  }
);
  return ba3.build();
}",0.9953826618954172
162556,"@Override protected void onPostExecute(Void aVoid){
  super.onPostExecute(aVoid);
  String cmd=""String_Node_Str"" + output.getPath();
  Log.d(""String_Node_Str"",cmd);
  RootHelper.runAndWait(cmd,false);
  utilsProvider.getFutils().openFile(output,(MainActivity)zipViewer);
}","@Override protected void onPostExecute(Void aVoid){
  super.onPostExecute(aVoid);
  String cmd=""String_Node_Str"" + output.getPath();
  Log.d(""String_Node_Str"",cmd);
  RootHelper.runAndWait(cmd,false);
  new Futils().openFile(output,(MainActivity)zipViewer);
}",0.832391713747646
162557,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Sp=PreferenceManager.getDefaultSharedPreferences(this);
  theme=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  theme1=theme == 2 ? PreferenceUtils.hourOfDay() : theme;
  if (theme1 == 1) {
    setTheme(R.style.appCompatDark);
    getWindow().getDecorView().setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
  }
  setContentView(R.layout.activity_db_viewer);
  toolbar=(android.support.v7.widget.Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  skin=PreferenceUtils.getPrimaryColorString(Sp);
  if (Build.VERSION.SDK_INT >= 21) {
    ActivityManager.TaskDescription taskDescription=new ActivityManager.TaskDescription(""String_Node_Str"",((BitmapDrawable)ContextCompat.getDrawable(this,R.mipmap.ic_launcher)).getBitmap(),Color.parseColor(skin));
    ((Activity)this).setTaskDescription(taskDescription);
  }
  skinStatusBar=PreferenceUtils.getStatusColor(skin);
  getSupportActionBar().setBackgroundDrawable(new ColorDrawable(Color.parseColor(skin)));
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  rootMode=PreferenceManager.getDefaultSharedPreferences(this).getBoolean(""String_Node_Str"",false);
  int sdk=Build.VERSION.SDK_INT;
  if (sdk == 20 || sdk == 19) {
    SystemBarTintManager tintManager=new SystemBarTintManager(this);
    tintManager.setStatusBarTintEnabled(true);
    tintManager.setStatusBarTintColor(Color.parseColor(skin));
    FrameLayout.MarginLayoutParams p=(ViewGroup.MarginLayoutParams)findViewById(R.id.parentdb).getLayoutParams();
    SystemBarTintManager.SystemBarConfig config=tintManager.getConfig();
    p.setMargins(0,config.getStatusBarHeight(),0,0);
  }
 else   if (Build.VERSION.SDK_INT >= 21) {
    boolean colourednavigation=Sp.getBoolean(""String_Node_Str"",true);
    Window window=getWindow();
    window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
    window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
    window.setStatusBarColor((PreferenceUtils.getStatusColor(skin)));
    if (colourednavigation)     window.setNavigationBarColor((PreferenceUtils.getStatusColor(skin)));
  }
  path=getIntent().getStringExtra(""String_Node_Str"");
  pathFile=new File(path);
  listView=(ListView)findViewById(R.id.listView);
  load(pathFile);
  listView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      FragmentTransaction fragmentTransaction=getSupportFragmentManager().beginTransaction();
      DbViewerFragment fragment=new DbViewerFragment();
      Bundle bundle=new Bundle();
      bundle.putString(""String_Node_Str"",arrayList.get(position));
      fragment.setArguments(bundle);
      fragmentTransaction.add(R.id.content_frame,fragment);
      fragmentTransaction.addToBackStack(null);
      fragmentTransaction.commit();
    }
  }
);
}","@Override public void onCreate(Bundle savedInstanceState){
  this.checkStorage=false;
  super.onCreate(savedInstanceState);
  if (theme1 == 1) {
    setTheme(R.style.appCompatDark);
    getWindow().getDecorView().setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
  }
  setContentView(R.layout.activity_db_viewer);
  toolbar=(android.support.v7.widget.Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  skin=PreferenceUtils.getPrimaryColorString(Sp);
  if (Build.VERSION.SDK_INT >= 21) {
    ActivityManager.TaskDescription taskDescription=new ActivityManager.TaskDescription(""String_Node_Str"",((BitmapDrawable)ContextCompat.getDrawable(this,R.mipmap.ic_launcher)).getBitmap(),Color.parseColor(skin));
    ((Activity)this).setTaskDescription(taskDescription);
  }
  skinStatusBar=PreferenceUtils.getStatusColor(skin);
  getSupportActionBar().setBackgroundDrawable(new ColorDrawable(Color.parseColor(skin)));
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  int sdk=Build.VERSION.SDK_INT;
  if (sdk == 20 || sdk == 19) {
    SystemBarTintManager tintManager=new SystemBarTintManager(this);
    tintManager.setStatusBarTintEnabled(true);
    tintManager.setStatusBarTintColor(Color.parseColor(skin));
    FrameLayout.MarginLayoutParams p=(ViewGroup.MarginLayoutParams)findViewById(R.id.parentdb).getLayoutParams();
    SystemBarTintManager.SystemBarConfig config=tintManager.getConfig();
    p.setMargins(0,config.getStatusBarHeight(),0,0);
  }
 else   if (Build.VERSION.SDK_INT >= 21) {
    boolean colourednavigation=Sp.getBoolean(""String_Node_Str"",true);
    Window window=getWindow();
    window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
    window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
    window.setStatusBarColor((PreferenceUtils.getStatusColor(skin)));
    if (colourednavigation)     window.setNavigationBarColor((PreferenceUtils.getStatusColor(skin)));
  }
  path=getIntent().getStringExtra(""String_Node_Str"");
  pathFile=new File(path);
  listView=(ListView)findViewById(R.id.listView);
  load(pathFile);
  listView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      FragmentTransaction fragmentTransaction=getSupportFragmentManager().beginTransaction();
      DbViewerFragment fragment=new DbViewerFragment();
      Bundle bundle=new Bundle();
      bundle.putString(""String_Node_Str"",arrayList.get(position));
      fragment.setArguments(bundle);
      fragmentTransaction.add(R.id.content_frame,fragment);
      fragmentTransaction.addToBackStack(null);
      fragmentTransaction.commit();
    }
  }
);
}",0.9443577743109725
162558,"private void load(final File file){
  new Thread(new Runnable(){
    @Override public void run(){
      if (!file.canRead() && rootMode) {
        File file1=getExternalCacheDir();
        if (file1 != null)         file1=getCacheDir();
        RootTools.remount(file.getParent(),""String_Node_Str"");
        RootTools.copyFile(pathFile.getPath(),new File(file1.getPath(),file.getName()).getPath(),true,false);
        pathFile=new File(file1.getPath(),file.getName());
        RootHelper.runAndWait(""String_Node_Str"" + pathFile.getPath(),true);
        delete=true;
      }
      try {
        sqLiteDatabase=SQLiteDatabase.openDatabase(pathFile.getPath(),null,SQLiteDatabase.OPEN_READONLY);
        c=sqLiteDatabase.rawQuery(""String_Node_Str"",null);
        arrayList=getDbTableNames(c);
        arrayAdapter=new ArrayAdapter(DbViewer.this,android.R.layout.simple_list_item_1,arrayList);
      }
 catch (      Exception e) {
        e.printStackTrace();
        finish();
      }
      runOnUiThread(new Runnable(){
        @Override public void run(){
          listView.setAdapter(arrayAdapter);
        }
      }
);
    }
  }
).start();
}","private void load(final File file){
  new Thread(new Runnable(){
    @Override public void run(){
      if (!file.canRead() && rootmode) {
        File file1=getExternalCacheDir();
        if (file1 != null)         file1=getCacheDir();
        RootTools.remount(file.getParent(),""String_Node_Str"");
        RootTools.copyFile(pathFile.getPath(),new File(file1.getPath(),file.getName()).getPath(),true,false);
        pathFile=new File(file1.getPath(),file.getName());
        RootHelper.runAndWait(""String_Node_Str"" + pathFile.getPath(),true);
        delete=true;
      }
      try {
        sqLiteDatabase=SQLiteDatabase.openDatabase(pathFile.getPath(),null,SQLiteDatabase.OPEN_READONLY);
        c=sqLiteDatabase.rawQuery(""String_Node_Str"",null);
        arrayList=getDbTableNames(c);
        arrayAdapter=new ArrayAdapter(DbViewer.this,android.R.layout.simple_list_item_1,arrayList);
      }
 catch (      Exception e) {
        e.printStackTrace();
        finish();
      }
      runOnUiThread(new Runnable(){
        @Override public void run(){
          listView.setAdapter(arrayAdapter);
        }
      }
);
    }
  }
).start();
}",0.999124343257443
162559,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Sp=PreferenceManager.getDefaultSharedPreferences(this);
  fabSkin=PreferenceUtils.getFabColor(Sp.getInt(""String_Node_Str"",1));
  theme=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  theme1=theme == 2 ? PreferenceUtils.hourOfDay() : theme;
  nodes=new ArrayList<>();
  it=nodes.listIterator();
  if (Build.VERSION.SDK_INT >= 21) {
switch (fabSkin) {
case ""String_Node_Str"":
      if (theme1 == 0)       setTheme(R.style.pref_accent_light_red);
 else       setTheme(R.style.pref_accent_dark_red);
    break;
case ""String_Node_Str"":
  if (theme1 == 0)   setTheme(R.style.pref_accent_light_pink);
 else   setTheme(R.style.pref_accent_dark_pink);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_purple);
 else setTheme(R.style.pref_accent_dark_purple);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_deep_purple);
 else setTheme(R.style.pref_accent_dark_deep_purple);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_indigo);
 else setTheme(R.style.pref_accent_dark_indigo);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_blue);
 else setTheme(R.style.pref_accent_dark_blue);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_light_blue);
 else setTheme(R.style.pref_accent_dark_light_blue);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_cyan);
 else setTheme(R.style.pref_accent_dark_cyan);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_teal);
 else setTheme(R.style.pref_accent_dark_teal);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_green);
 else setTheme(R.style.pref_accent_dark_green);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_light_green);
 else setTheme(R.style.pref_accent_dark_light_green);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_amber);
 else setTheme(R.style.pref_accent_dark_amber);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_orange);
 else setTheme(R.style.pref_accent_dark_orange);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_deep_orange);
 else setTheme(R.style.pref_accent_dark_deep_orange);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_brown);
 else setTheme(R.style.pref_accent_dark_brown);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_black);
 else setTheme(R.style.pref_accent_dark_black);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_blue_grey);
 else setTheme(R.style.pref_accent_dark_blue_grey);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_super_su);
 else setTheme(R.style.pref_accent_dark_super_su);
break;
}
}
 else {
if (theme1 == 1) {
setTheme(R.style.appCompatDark);
}
 else {
setTheme(R.style.appCompatLight);
}
}
if (theme1 == 1) {
getWindow().getDecorView().setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
}
setContentView(R.layout.search);
toolbar=(android.support.v7.widget.Toolbar)findViewById(R.id.toolbar);
setSupportActionBar(toolbar);
skin=PreferenceUtils.getSkinColor(Sp.getInt(""String_Node_Str"",4));
if (Build.VERSION.SDK_INT >= 21) {
ActivityManager.TaskDescription taskDescription=new ActivityManager.TaskDescription(""String_Node_Str"",((BitmapDrawable)getResources().getDrawable(R.mipmap.ic_launcher)).getBitmap(),Color.parseColor(skin));
((Activity)this).setTaskDescription(taskDescription);
}
skinStatusBar=PreferenceUtils.getStatusColor(skin);
getSupportActionBar().setBackgroundDrawable(new ColorDrawable(Color.parseColor(skin)));
getSupportActionBar().setDisplayHomeAsUpEnabled(true);
rootMode=PreferenceManager.getDefaultSharedPreferences(c).getBoolean(""String_Node_Str"",false);
int sdk=Build.VERSION.SDK_INT;
if (sdk == 20 || sdk == 19) {
SystemBarTintManager tintManager=new SystemBarTintManager(this);
tintManager.setStatusBarTintEnabled(true);
tintManager.setStatusBarTintColor(Color.parseColor(skin));
FrameLayout.MarginLayoutParams p=(ViewGroup.MarginLayoutParams)findViewById(R.id.texteditor).getLayoutParams();
SystemBarTintManager.SystemBarConfig config=tintManager.getConfig();
p.setMargins(0,config.getStatusBarHeight(),0,0);
}
 else if (Build.VERSION.SDK_INT >= 21) {
boolean colourednavigation=Sp.getBoolean(""String_Node_Str"",true);
Window window=getWindow();
window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
window.setStatusBarColor((PreferenceUtils.getStatusColor(skin)));
if (colourednavigation) window.setNavigationBarColor((PreferenceUtils.getStatusColor(skin)));
}
mInput=(EditText)findViewById(R.id.fname);
try {
if (getIntent().getData() != null) mFile=new File(getIntent().getData().getPath());
 else mFile=new File(getIntent().getStringExtra(""String_Node_Str""));
}
 catch (Exception e) {
mFile=null;
}
mInput.addTextChangedListener(this);
try {
if (theme1 == 1) mInput.setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
getSupportActionBar().setDisplayHomeAsUpEnabled(true);
}
 catch (Exception e) {
}
setTitle(mFile.getName());
load(mFile);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Sp=PreferenceManager.getDefaultSharedPreferences(this);
  fabSkin=PreferenceUtils.getFabColor(Sp.getInt(""String_Node_Str"",1));
  theme=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  theme1=theme == 2 ? PreferenceUtils.hourOfDay() : theme;
  nodes=new ArrayList<>();
  if (Build.VERSION.SDK_INT >= 21) {
switch (fabSkin) {
case ""String_Node_Str"":
      if (theme1 == 0)       setTheme(R.style.pref_accent_light_red);
 else       setTheme(R.style.pref_accent_dark_red);
    break;
case ""String_Node_Str"":
  if (theme1 == 0)   setTheme(R.style.pref_accent_light_pink);
 else   setTheme(R.style.pref_accent_dark_pink);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_purple);
 else setTheme(R.style.pref_accent_dark_purple);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_deep_purple);
 else setTheme(R.style.pref_accent_dark_deep_purple);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_indigo);
 else setTheme(R.style.pref_accent_dark_indigo);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_blue);
 else setTheme(R.style.pref_accent_dark_blue);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_light_blue);
 else setTheme(R.style.pref_accent_dark_light_blue);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_cyan);
 else setTheme(R.style.pref_accent_dark_cyan);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_teal);
 else setTheme(R.style.pref_accent_dark_teal);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_green);
 else setTheme(R.style.pref_accent_dark_green);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_light_green);
 else setTheme(R.style.pref_accent_dark_light_green);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_amber);
 else setTheme(R.style.pref_accent_dark_amber);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_orange);
 else setTheme(R.style.pref_accent_dark_orange);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_deep_orange);
 else setTheme(R.style.pref_accent_dark_deep_orange);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_brown);
 else setTheme(R.style.pref_accent_dark_brown);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_black);
 else setTheme(R.style.pref_accent_dark_black);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_blue_grey);
 else setTheme(R.style.pref_accent_dark_blue_grey);
break;
case ""String_Node_Str"":
if (theme1 == 0) setTheme(R.style.pref_accent_light_super_su);
 else setTheme(R.style.pref_accent_dark_super_su);
break;
}
}
 else {
if (theme1 == 1) {
setTheme(R.style.appCompatDark);
}
 else {
setTheme(R.style.appCompatLight);
}
}
if (theme1 == 1) {
getWindow().getDecorView().setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
}
setContentView(R.layout.search);
toolbar=(android.support.v7.widget.Toolbar)findViewById(R.id.toolbar);
setSupportActionBar(toolbar);
skin=PreferenceUtils.getSkinColor(Sp.getInt(""String_Node_Str"",4));
if (Build.VERSION.SDK_INT >= 21) {
ActivityManager.TaskDescription taskDescription=new ActivityManager.TaskDescription(""String_Node_Str"",((BitmapDrawable)getResources().getDrawable(R.mipmap.ic_launcher)).getBitmap(),Color.parseColor(skin));
((Activity)this).setTaskDescription(taskDescription);
}
skinStatusBar=PreferenceUtils.getStatusColor(skin);
getSupportActionBar().setBackgroundDrawable(new ColorDrawable(Color.parseColor(skin)));
getSupportActionBar().setDisplayHomeAsUpEnabled(true);
rootMode=PreferenceManager.getDefaultSharedPreferences(c).getBoolean(""String_Node_Str"",false);
int sdk=Build.VERSION.SDK_INT;
if (sdk == 20 || sdk == 19) {
SystemBarTintManager tintManager=new SystemBarTintManager(this);
tintManager.setStatusBarTintEnabled(true);
tintManager.setStatusBarTintColor(Color.parseColor(skin));
FrameLayout.MarginLayoutParams p=(ViewGroup.MarginLayoutParams)findViewById(R.id.texteditor).getLayoutParams();
SystemBarTintManager.SystemBarConfig config=tintManager.getConfig();
p.setMargins(0,config.getStatusBarHeight(),0,0);
}
 else if (Build.VERSION.SDK_INT >= 21) {
boolean colourednavigation=Sp.getBoolean(""String_Node_Str"",true);
Window window=getWindow();
window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
window.setStatusBarColor((PreferenceUtils.getStatusColor(skin)));
if (colourednavigation) window.setNavigationBarColor((PreferenceUtils.getStatusColor(skin)));
}
mInput=(EditText)findViewById(R.id.fname);
try {
if (getIntent().getData() != null) mFile=new File(getIntent().getData().getPath());
 else mFile=new File(getIntent().getStringExtra(""String_Node_Str""));
}
 catch (Exception e) {
mFile=null;
}
mInput.addTextChangedListener(this);
try {
if (theme1 == 1) mInput.setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
getSupportActionBar().setDisplayHomeAsUpEnabled(true);
}
 catch (Exception e) {
}
setTitle(mFile.getName());
load(mFile);
}",0.9975367211020892
162560,"@Override public void onClick(View v){
switch (v.getId()) {
case R.id.prev:
    Log.d(getClass().getName(),""String_Node_Str"");
  if (it.hasPrevious()) {
    MapEntry keyValue=(MapEntry)it.previous();
    Log.d(getClass().getName(),""String_Node_Str"" + keyValue.getKey() + ""String_Node_Str""+ keyValue.getValue());
  }
break;
case R.id.next:
Log.d(getClass().getName(),""String_Node_Str"");
if (it.hasNext()) {
MapEntry keyValue=(MapEntry)it.next();
Log.d(getClass().getName(),""String_Node_Str"" + keyValue.getKey() + ""String_Node_Str""+ keyValue.getValue());
}
break;
case R.id.close:
searchEditText.setText(""String_Node_Str"");
break;
default :
return;
}
}","@Override public void onClick(View v){
switch (v.getId()) {
case R.id.prev:
    if (mCurrent > 0) {
      Map.Entry keyValue=nodes.get(--mCurrent);
      mInput.requestFocus();
      mInput.setSelection((Integer)keyValue.getKey(),(Integer)keyValue.getValue());
    }
  break;
case R.id.next:
if (mCurrent < nodes.size() - 1) {
  Map.Entry keyValue=nodes.get(++mCurrent);
  mInput.requestFocus();
  mInput.setSelection((Integer)keyValue.getKey(),(Integer)keyValue.getValue());
}
break;
case R.id.close:
searchEditText.setText(""String_Node_Str"");
break;
default :
return;
}
}",0.1766148814390842
162561,"@Override public void afterTextChanged(Editable editable){
  if (searchEditText != null && editable.hashCode() == searchEditText.getText().hashCode()) {
    while (it.hasNext()) {
      it.next();
      it.remove();
      System.out.println(""String_Node_Str"");
    }
    for (int i=0; i < (mOriginal.length() - editable.length()); i++) {
      if (searchEditText.length() == 0)       break;
      if (mOriginal.substring(i,i + editable.length()).equalsIgnoreCase(editable.toString())) {
        MapEntry mapEntry=new MapEntry(i,i + editable.length());
        it.add(mapEntry);
      }
    }
    System.out.println(nodes.size());
    if (!it.hasNext()) {
      upButton.setEnabled(true);
      downButton.setEnabled(true);
    }
 else {
      upButton.setEnabled(false);
      downButton.setEnabled(false);
    }
  }
}","@Override public void afterTextChanged(Editable editable){
  if (searchEditText != null && editable.hashCode() == searchEditText.getText().hashCode()) {
    for (int i=0; i < (mOriginal.length() - editable.length()); i++) {
      if (searchEditText.length() == 0)       break;
      if (mOriginal.substring(i,i + editable.length()).equalsIgnoreCase(editable.toString())) {
        nodes.add(new MapEntry(i,i + editable.length()));
      }
    }
    if (nodes.size() != 0) {
      upButton.setEnabled(true);
      downButton.setEnabled(true);
    }
 else {
      upButton.setEnabled(false);
      downButton.setEnabled(false);
    }
  }
}",0.7656357388316152
162562,"@Override public void beforeTextChanged(CharSequence charSequence,int i,int i2,int i3){
}","@Override public void beforeTextChanged(CharSequence charSequence,int i,int i2,int i3){
  if (searchEditText != null && charSequence.hashCode() == searchEditText.getText().hashCode()) {
    nodes.clear();
    mCurrent=-1;
  }
}",0.5632911392405063
162563,"@Override public boolean onCreateOptionsMenu(Menu menu){
  getMenuInflater().inflate(R.menu.text,menu);
  menu.findItem(R.id.save).setVisible(mModified);
  menu.findItem(R.id.find).setVisible(false);
  menu.findItem(R.id.edit).setVisible(false);
  return super.onCreateOptionsMenu(menu);
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  getMenuInflater().inflate(R.menu.text,menu);
  menu.findItem(R.id.save).setVisible(mModified);
  menu.findItem(R.id.find).setVisible(true);
  menu.findItem(R.id.edit).setVisible(false);
  return super.onCreateOptionsMenu(menu);
}",0.9878682842287696
162564,"public void onDestroyActionMode(ActionMode mode){
  mActionMode=null;
  selection=false;
  if (!results)   adapter.toggleChecked(false,current);
 else   adapter.toggleChecked(false);
  mainActivity.setPagingEnabled(true);
  ObjectAnimator anim=ObjectAnimator.ofInt(getActivity().findViewById(R.id.buttonbarframe),""String_Node_Str"",res.getColor(R.color.holo_dark_action_mode),skin_color);
  anim.setDuration(0);
  anim.setEvaluator(new ArgbEvaluator());
  anim.start();
  if (Build.VERSION.SDK_INT >= 21) {
    Window window=getActivity().getWindow();
    if (mainActivity.colourednavigation)     window.setNavigationBarColor(mainActivity.skinStatusBar);
  }
}","public void onDestroyActionMode(ActionMode mode){
  mActionMode=null;
  selection=false;
  if (mainActivity.isDrawerLocked)   mainActivity.translateDrawerList(false);
  if (!results)   adapter.toggleChecked(false,current);
 else   adapter.toggleChecked(false);
  mainActivity.setPagingEnabled(true);
  ObjectAnimator anim=ObjectAnimator.ofInt(getActivity().findViewById(R.id.buttonbarframe),""String_Node_Str"",res.getColor(R.color.holo_dark_action_mode),skin_color);
  anim.setDuration(0);
  anim.setEvaluator(new ArgbEvaluator());
  anim.start();
  if (Build.VERSION.SDK_INT >= 21) {
    Window window=getActivity().getWindow();
    if (mainActivity.colourednavigation)     window.setNavigationBarColor(mainActivity.skinStatusBar);
  }
}",0.9441260744985672
162565,"public boolean onCreateActionMode(ActionMode mode,Menu menu){
  MenuInflater inflater=mode.getMenuInflater();
  v=getActivity().getLayoutInflater().inflate(R.layout.actionmode,null);
  try {
    v.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  mode.setCustomView(v);
  mainActivity.setPagingEnabled(false);
  inflater.inflate(R.menu.contextual,menu);
  initMenu(menu);
  hideOption(R.id.addshortcut,menu);
  hideOption(R.id.sethome,menu);
  hideOption(R.id.rename,menu);
  hideOption(R.id.share,menu);
  hideOption(R.id.about,menu);
  hideOption(R.id.openwith,menu);
  hideOption(R.id.ex,menu);
  if (mainActivity.mReturnIntent)   showOption(R.id.openmulti,menu);
  mode.setTitle(utils.getString(getActivity(),R.string.select));
  ObjectAnimator anim=ObjectAnimator.ofInt(getActivity().findViewById(R.id.buttonbarframe),""String_Node_Str"",skin_color,res.getColor(R.color.holo_dark_action_mode));
  anim.setDuration(0);
  anim.setEvaluator(new ArgbEvaluator());
  anim.start();
  if (Build.VERSION.SDK_INT >= 21) {
    Window window=getActivity().getWindow();
    if (mainActivity.colourednavigation)     window.setNavigationBarColor(res.getColor(android.R.color.black));
  }
  return true;
}","public boolean onCreateActionMode(ActionMode mode,Menu menu){
  MenuInflater inflater=mode.getMenuInflater();
  v=getActivity().getLayoutInflater().inflate(R.layout.actionmode,null);
  try {
    v.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  mode.setCustomView(v);
  mainActivity.setPagingEnabled(false);
  if (mainActivity.isDrawerLocked)   mainActivity.translateDrawerList(true);
  inflater.inflate(R.menu.contextual,menu);
  initMenu(menu);
  hideOption(R.id.addshortcut,menu);
  hideOption(R.id.sethome,menu);
  hideOption(R.id.rename,menu);
  hideOption(R.id.share,menu);
  hideOption(R.id.about,menu);
  hideOption(R.id.openwith,menu);
  hideOption(R.id.ex,menu);
  if (mainActivity.mReturnIntent)   showOption(R.id.openmulti,menu);
  mode.setTitle(utils.getString(getActivity(),R.string.select));
  ObjectAnimator anim=ObjectAnimator.ofInt(getActivity().findViewById(R.id.buttonbarframe),""String_Node_Str"",skin_color,res.getColor(R.color.holo_dark_action_mode));
  anim.setDuration(0);
  anim.setEvaluator(new ArgbEvaluator());
  anim.start();
  if (Build.VERSION.SDK_INT >= 21) {
    Window window=getActivity().getWindow();
    if (mainActivity.colourednavigation)     window.setNavigationBarColor(res.getColor(android.R.color.black));
  }
  return true;
}",0.971618134906008
162566,"public void onLongItemClick(final int position){
  final MaterialDialog.Builder builder=new MaterialDialog.Builder(getActivity());
  if (theme1 == 1)   builder.theme(Theme.DARK);
  builder.items(new String[]{utils.getString(getActivity(),R.string.open),utils.getString(getActivity(),R.string.backup),utils.getString(getActivity(),R.string.uninstall),utils.getString(getActivity(),R.string.properties),utils.getString(getActivity(),R.string.play),utils.getString(getActivity(),R.string.share)}).itemsCallback(new MaterialDialog.ListCallback(){
    @Override public void onSelection(    MaterialDialog materialDialog,    View view,    int i,    CharSequence s){
switch (i) {
case 0:
        Intent i1=app.getActivity().getPackageManager().getLaunchIntentForPackage(a.get(position).getPermissions());
      if (i1 != null)       app.startActivity(i1);
 else       Toast.makeText(app.getActivity(),utils.getString(getActivity(),R.string.not_allowed),Toast.LENGTH_LONG).show();
    break;
case 1:
  Toast.makeText(getActivity(),utils.getString(getActivity(),R.string.copyingapk) + Environment.getExternalStorageDirectory().getPath() + ""String_Node_Str"",Toast.LENGTH_LONG).show();
File f=new File(a.get(position).getDesc());
ArrayList<String> ab=new ArrayList<String>();
File dst=new File(Environment.getExternalStorageDirectory().getPath() + ""String_Node_Str"");
if (!dst.exists() || !dst.isDirectory()) dst.mkdirs();
Intent intent=new Intent(getActivity(),CopyService.class);
if (Build.VERSION.SDK_INT >= 21) {
ab.add(f.getParent());
}
 else {
ab.add(f.getPath());
}
intent.putExtra(""String_Node_Str"",ab);
intent.putExtra(""String_Node_Str"",dst.getPath());
getActivity().startService(intent);
break;
case 2:
ArrayList<Integer> arrayList1=new ArrayList<Integer>();
arrayList1.add(position);
final File f1=new File(a.get(position).getDesc());
ApplicationInfo info1=null;
for (ApplicationInfo info : c) {
if (info.packageName.equals(a.get(position).getPermissions())) info1=info;
}
if ((info1.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
if (Sp.getBoolean(""String_Node_Str"",false)) {
MaterialDialog.Builder builder1=new MaterialDialog.Builder(getActivity());
if (theme1 == 1) builder1.theme(Theme.DARK);
builder1.content(utils.getString(getActivity(),R.string.unin_system_apk)).title(utils.getString(getActivity(),R.string.warning)).negativeText(utils.getString(getActivity(),R.string.no)).positiveText(utils.getString(getActivity(),R.string.yes)).negativeColor(Color.parseColor(fabSkin)).positiveColor(Color.parseColor(fabSkin)).callback(new MaterialDialog.ButtonCallback(){
@Override public void onNegative(MaterialDialog materialDialog){
materialDialog.cancel();
}
@Override public void onPositive(MaterialDialog materialDialog){
ArrayList<File> files=new ArrayList<File>();
if (Build.VERSION.SDK_INT >= 21) {
String parent=f1.getParent();
if (!parent.equals(""String_Node_Str"") && !parent.equals(""String_Node_Str"")) files.add(new File(f1.getParent()));
 else files.add(f1);
}
 else {
files.add(f1);
}
new DeleteTask(getActivity().getContentResolver(),getActivity()).execute(files);
}
}
).build().show();
}
 else {
Toast.makeText(getActivity(),utils.getString(getActivity(),R.string.enablerootmde),Toast.LENGTH_SHORT).show();
}
}
 else {
unin(c.get(position).packageName);
}
break;
case 3:
startActivity(new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS,Uri.parse(""String_Node_Str"" + a.get(position).getPermissions())));
break;
case 4:
Intent intent1=new Intent(Intent.ACTION_VIEW);
intent1.setData(Uri.parse(""String_Node_Str"" + a.get(position).getPermissions()));
startActivity(intent1);
break;
case 5:
ArrayList<File> arrayList2=new ArrayList<File>();
arrayList2.add(new File(a.get(position).getDesc()));
utils.shareFiles(arrayList2,getActivity());
}
}
}
).title(a.get(position).getTitle()).build().show();
}","public void onLongItemClick(final int position){
  final MaterialDialog.Builder builder=new MaterialDialog.Builder(getActivity());
  if (theme1 == 1)   builder.theme(Theme.DARK);
  builder.items(new String[]{utils.getString(getActivity(),R.string.open),utils.getString(getActivity(),R.string.backup),utils.getString(getActivity(),R.string.uninstall),utils.getString(getActivity(),R.string.properties),utils.getString(getActivity(),R.string.play),utils.getString(getActivity(),R.string.share)}).itemsCallback(new MaterialDialog.ListCallback(){
    @Override public void onSelection(    MaterialDialog materialDialog,    View view,    int i,    CharSequence s){
switch (i) {
case 0:
        Intent i1=app.getActivity().getPackageManager().getLaunchIntentForPackage(a.get(position).getPermissions());
      if (i1 != null)       app.startActivity(i1);
 else       Toast.makeText(app.getActivity(),utils.getString(getActivity(),R.string.not_allowed),Toast.LENGTH_LONG).show();
    break;
case 1:
  Toast.makeText(getActivity(),utils.getString(getActivity(),R.string.copyingapk) + Environment.getExternalStorageDirectory().getPath() + ""String_Node_Str"",Toast.LENGTH_LONG).show();
File f=new File(a.get(position).getDesc());
ArrayList<String> ab=new ArrayList<String>();
File dst=new File(Environment.getExternalStorageDirectory().getPath() + ""String_Node_Str"");
if (!dst.exists() || !dst.isDirectory()) dst.mkdirs();
Intent intent=new Intent(getActivity(),CopyService.class);
if (Build.VERSION.SDK_INT >= 21) {
ab.add(f.getParent());
}
 else {
ab.add(f.getPath());
}
intent.putExtra(""String_Node_Str"",ab);
intent.putExtra(""String_Node_Str"",dst.getPath());
getActivity().startService(intent);
break;
case 2:
final File f1=new File(a.get(position).getDesc());
ApplicationInfo info1=null;
for (ApplicationInfo info : c) {
if (info.publicSourceDir.equals(a.get(position).getDesc())) info1=info;
}
if ((info1.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
if (Sp.getBoolean(""String_Node_Str"",false)) {
MaterialDialog.Builder builder1=new MaterialDialog.Builder(getActivity());
if (theme1 == 1) builder1.theme(Theme.DARK);
builder1.content(utils.getString(getActivity(),R.string.unin_system_apk)).title(utils.getString(getActivity(),R.string.warning)).negativeText(utils.getString(getActivity(),R.string.no)).positiveText(utils.getString(getActivity(),R.string.yes)).negativeColor(Color.parseColor(fabSkin)).positiveColor(Color.parseColor(fabSkin)).callback(new MaterialDialog.ButtonCallback(){
@Override public void onNegative(MaterialDialog materialDialog){
materialDialog.cancel();
}
@Override public void onPositive(MaterialDialog materialDialog){
ArrayList<File> files=new ArrayList<File>();
if (Build.VERSION.SDK_INT >= 21) {
String parent=f1.getParent();
if (!parent.equals(""String_Node_Str"") && !parent.equals(""String_Node_Str"")) files.add(new File(f1.getParent()));
 else files.add(f1);
}
 else {
files.add(f1);
}
new DeleteTask(getActivity().getContentResolver(),getActivity()).execute(files);
}
}
).build().show();
}
 else {
Toast.makeText(getActivity(),utils.getString(getActivity(),R.string.enablerootmde),Toast.LENGTH_SHORT).show();
}
}
 else {
unin(a.get(position).getPermissions());
}
break;
case 3:
startActivity(new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS,Uri.parse(""String_Node_Str"" + a.get(position).getPermissions())));
break;
case 4:
Intent intent1=new Intent(Intent.ACTION_VIEW);
intent1.setData(Uri.parse(""String_Node_Str"" + a.get(position).getPermissions()));
startActivity(intent1);
break;
case 5:
ArrayList<File> arrayList2=new ArrayList<File>();
arrayList2.add(new File(a.get(position).getDesc()));
utils.shareFiles(arrayList2,getActivity());
}
}
}
).title(a.get(position).getTitle()).build().show();
}",0.9474379292128896
162567,"@Override public void onSelection(MaterialDialog materialDialog,View view,int i,CharSequence s){
switch (i) {
case 0:
    Intent i1=app.getActivity().getPackageManager().getLaunchIntentForPackage(a.get(position).getPermissions());
  if (i1 != null)   app.startActivity(i1);
 else   Toast.makeText(app.getActivity(),utils.getString(getActivity(),R.string.not_allowed),Toast.LENGTH_LONG).show();
break;
case 1:
Toast.makeText(getActivity(),utils.getString(getActivity(),R.string.copyingapk) + Environment.getExternalStorageDirectory().getPath() + ""String_Node_Str"",Toast.LENGTH_LONG).show();
File f=new File(a.get(position).getDesc());
ArrayList<String> ab=new ArrayList<String>();
File dst=new File(Environment.getExternalStorageDirectory().getPath() + ""String_Node_Str"");
if (!dst.exists() || !dst.isDirectory()) dst.mkdirs();
Intent intent=new Intent(getActivity(),CopyService.class);
if (Build.VERSION.SDK_INT >= 21) {
ab.add(f.getParent());
}
 else {
ab.add(f.getPath());
}
intent.putExtra(""String_Node_Str"",ab);
intent.putExtra(""String_Node_Str"",dst.getPath());
getActivity().startService(intent);
break;
case 2:
ArrayList<Integer> arrayList1=new ArrayList<Integer>();
arrayList1.add(position);
final File f1=new File(a.get(position).getDesc());
ApplicationInfo info1=null;
for (ApplicationInfo info : c) {
if (info.packageName.equals(a.get(position).getPermissions())) info1=info;
}
if ((info1.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
if (Sp.getBoolean(""String_Node_Str"",false)) {
MaterialDialog.Builder builder1=new MaterialDialog.Builder(getActivity());
if (theme1 == 1) builder1.theme(Theme.DARK);
builder1.content(utils.getString(getActivity(),R.string.unin_system_apk)).title(utils.getString(getActivity(),R.string.warning)).negativeText(utils.getString(getActivity(),R.string.no)).positiveText(utils.getString(getActivity(),R.string.yes)).negativeColor(Color.parseColor(fabSkin)).positiveColor(Color.parseColor(fabSkin)).callback(new MaterialDialog.ButtonCallback(){
@Override public void onNegative(MaterialDialog materialDialog){
materialDialog.cancel();
}
@Override public void onPositive(MaterialDialog materialDialog){
ArrayList<File> files=new ArrayList<File>();
if (Build.VERSION.SDK_INT >= 21) {
String parent=f1.getParent();
if (!parent.equals(""String_Node_Str"") && !parent.equals(""String_Node_Str"")) files.add(new File(f1.getParent()));
 else files.add(f1);
}
 else {
files.add(f1);
}
new DeleteTask(getActivity().getContentResolver(),getActivity()).execute(files);
}
}
).build().show();
}
 else {
Toast.makeText(getActivity(),utils.getString(getActivity(),R.string.enablerootmde),Toast.LENGTH_SHORT).show();
}
}
 else {
unin(c.get(position).packageName);
}
break;
case 3:
startActivity(new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS,Uri.parse(""String_Node_Str"" + a.get(position).getPermissions())));
break;
case 4:
Intent intent1=new Intent(Intent.ACTION_VIEW);
intent1.setData(Uri.parse(""String_Node_Str"" + a.get(position).getPermissions()));
startActivity(intent1);
break;
case 5:
ArrayList<File> arrayList2=new ArrayList<File>();
arrayList2.add(new File(a.get(position).getDesc()));
utils.shareFiles(arrayList2,getActivity());
}
}","@Override public void onSelection(MaterialDialog materialDialog,View view,int i,CharSequence s){
switch (i) {
case 0:
    Intent i1=app.getActivity().getPackageManager().getLaunchIntentForPackage(a.get(position).getPermissions());
  if (i1 != null)   app.startActivity(i1);
 else   Toast.makeText(app.getActivity(),utils.getString(getActivity(),R.string.not_allowed),Toast.LENGTH_LONG).show();
break;
case 1:
Toast.makeText(getActivity(),utils.getString(getActivity(),R.string.copyingapk) + Environment.getExternalStorageDirectory().getPath() + ""String_Node_Str"",Toast.LENGTH_LONG).show();
File f=new File(a.get(position).getDesc());
ArrayList<String> ab=new ArrayList<String>();
File dst=new File(Environment.getExternalStorageDirectory().getPath() + ""String_Node_Str"");
if (!dst.exists() || !dst.isDirectory()) dst.mkdirs();
Intent intent=new Intent(getActivity(),CopyService.class);
if (Build.VERSION.SDK_INT >= 21) {
ab.add(f.getParent());
}
 else {
ab.add(f.getPath());
}
intent.putExtra(""String_Node_Str"",ab);
intent.putExtra(""String_Node_Str"",dst.getPath());
getActivity().startService(intent);
break;
case 2:
final File f1=new File(a.get(position).getDesc());
ApplicationInfo info1=null;
for (ApplicationInfo info : c) {
if (info.publicSourceDir.equals(a.get(position).getDesc())) info1=info;
}
if ((info1.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
if (Sp.getBoolean(""String_Node_Str"",false)) {
MaterialDialog.Builder builder1=new MaterialDialog.Builder(getActivity());
if (theme1 == 1) builder1.theme(Theme.DARK);
builder1.content(utils.getString(getActivity(),R.string.unin_system_apk)).title(utils.getString(getActivity(),R.string.warning)).negativeText(utils.getString(getActivity(),R.string.no)).positiveText(utils.getString(getActivity(),R.string.yes)).negativeColor(Color.parseColor(fabSkin)).positiveColor(Color.parseColor(fabSkin)).callback(new MaterialDialog.ButtonCallback(){
@Override public void onNegative(MaterialDialog materialDialog){
materialDialog.cancel();
}
@Override public void onPositive(MaterialDialog materialDialog){
ArrayList<File> files=new ArrayList<File>();
if (Build.VERSION.SDK_INT >= 21) {
String parent=f1.getParent();
if (!parent.equals(""String_Node_Str"") && !parent.equals(""String_Node_Str"")) files.add(new File(f1.getParent()));
 else files.add(f1);
}
 else {
files.add(f1);
}
new DeleteTask(getActivity().getContentResolver(),getActivity()).execute(files);
}
}
).build().show();
}
 else {
Toast.makeText(getActivity(),utils.getString(getActivity(),R.string.enablerootmde),Toast.LENGTH_SHORT).show();
}
}
 else {
unin(a.get(position).getPermissions());
}
break;
case 3:
startActivity(new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS,Uri.parse(""String_Node_Str"" + a.get(position).getPermissions())));
break;
case 4:
Intent intent1=new Intent(Intent.ACTION_VIEW);
intent1.setData(Uri.parse(""String_Node_Str"" + a.get(position).getPermissions()));
startActivity(intent1);
break;
case 5:
ArrayList<File> arrayList2=new ArrayList<File>();
arrayList2.add(new File(a.get(position).getDesc()));
utils.shareFiles(arrayList2,getActivity());
}
}",0.936724960254372
162568,"@Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent,int viewType){
  View v=mInflater.inflate(R.layout.rowlayout,parent,false);
  ViewHolder vh=new ViewHolder(v);
  if (zipViewer.mainActivity.theme1 == 1)   vh.txtTitle.setTextColor(zipViewer.getActivity().getResources().getColor(android.R.color.white));
  return vh;
}","@Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent,int viewType){
  if (viewType == 0) {
    View v=mInflater.inflate(R.layout.rowlayout,parent,false);
    v.findViewById(R.id.icon).setVisibility(View.INVISIBLE);
    return new ViewHolder(v);
  }
  View v=mInflater.inflate(R.layout.rowlayout,parent,false);
  ViewHolder vh=new ViewHolder(v);
  if (zipViewer.mainActivity.theme1 == 1)   vh.txtTitle.setTextColor(zipViewer.getActivity().getResources().getColor(android.R.color.white));
  return vh;
}",0.7917146144994246
162569,"@Override public void onBindViewHolder(RecyclerView.ViewHolder vholder,int position1){
  final RarAdapter.ViewHolder holder=(RarAdapter.ViewHolder)vholder;
  if (position1 == 0) {
    holder.rl.setMinimumHeight(zipViewer.paddingTop);
    return;
  }
  final FileHeader rowItem=enter.get(position1 - 1);
  zipViewer.elements.add(position1 - 1,headerRequired(rowItem));
  final int p=position1 - 1;
  GradientDrawable gradientDrawable=(GradientDrawable)holder.imageView.getBackground();
  holder.imageView.setImageDrawable(Icons.loadMimeIcon(zipViewer.getActivity(),rowItem.getFileNameString(),false));
  holder.txtTitle.setText(rowItem.getFileNameString().substring(rowItem.getFileNameString().lastIndexOf(""String_Node_Str"") + 1));
  if (rowItem.isDirectory()) {
    holder.imageView.setImageDrawable(folder);
    gradientDrawable.setColor(Color.parseColor(zipViewer.skin));
  }
 else {
    if (zipViewer.coloriseIcons) {
      if (Icons.isVideo(rowItem.getFileNameString()))       gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isAudio(rowItem.getFileNameString()))       gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isPdf(rowItem.getFileNameString()))       gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isCode(rowItem.getFileNameString()))       gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isText(rowItem.getFileNameString()))       gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isArchive(rowItem.getFileNameString()))       gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isgeneric(rowItem.getFileNameString()))       gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else       gradientDrawable.setColor(Color.parseColor(zipViewer.skin));
    }
 else     gradientDrawable.setColor(Color.parseColor(zipViewer.skin));
  }
  holder.rl.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View view){
      toggleChecked(p);
      return false;
    }
  }
);
  holder.imageView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      final Animation animation=AnimationUtils.loadAnimation(zipViewer.getActivity(),R.anim.holder_anim);
      holder.imageView.setAnimation(animation);
      toggleChecked(p);
    }
  }
);
  Boolean checked=myChecked.get(p);
  if (checked != null) {
    if (zipViewer.mainActivity.theme1 == 0) {
      holder.rl.setBackgroundResource(R.drawable.safr_ripple_white);
    }
 else {
      holder.rl.setBackgroundResource(R.drawable.safr_ripple_black);
    }
    if (checked) {
      holder.imageView.setImageDrawable(zipViewer.getResources().getDrawable(R.drawable.abc_ic_cab_done_holo_dark));
      gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
      if (Build.VERSION.SDK_INT >= 21) {
        holder.rl.setElevation(6f);
      }
 else {
        if (zipViewer.mainActivity.theme1 == 0) {
          holder.rl.setBackgroundColor(c.getResources().getColor(R.color.safr_pressed));
        }
 else {
          holder.rl.setBackgroundColor(c.getResources().getColor(R.color.safr_pressed_dark));
        }
      }
    }
 else {
      if (Build.VERSION.SDK_INT >= 21) {
        holder.rl.setElevation(0f);
      }
    }
  }
  holder.rl.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View p1){
      if (zipViewer.selection)       toggleChecked(p);
 else {
        if (rowItem.isDirectory()) {
          zipViewer.elements.clear();
          new RarHelperTask(zipViewer,rowItem.getFileNameString()).execute(zipViewer.f);
        }
 else {
          if (headerRequired(rowItem) != null) {
            FileHeader fileHeader=headerRequired(rowItem);
            File file1=new File(c.getCacheDir().getAbsolutePath() + ""String_Node_Str"" + fileHeader.getFileNameString());
            zipViewer.files.clear();
            zipViewer.files.add(0,file1);
            new ZipExtractTask(zipViewer.archive,c.getCacheDir().getAbsolutePath(),zipViewer.mainActivity,fileHeader.getFileNameString(),false,fileHeader).execute();
          }
        }
      }
    }
  }
);
}","@Override public void onBindViewHolder(RecyclerView.ViewHolder vholder,int position1){
  final RarAdapter.ViewHolder holder=(RarAdapter.ViewHolder)vholder;
  if (position1 == 0) {
    holder.rl.setMinimumHeight(zipViewer.paddingTop);
    return;
  }
  final FileHeader rowItem=enter.get(position1 - 1);
  zipViewer.elements.add(position1 - 1,headerRequired(rowItem));
  final int p=position1 - 1;
  GradientDrawable gradientDrawable=(GradientDrawable)holder.imageView.getBackground();
  holder.imageView.setImageDrawable(Icons.loadMimeIcon(zipViewer.getActivity(),rowItem.getFileNameString(),false));
  holder.txtTitle.setText(rowItem.getFileNameString().substring(rowItem.getFileNameString().lastIndexOf(""String_Node_Str"") + 1));
  if (rowItem.isDirectory()) {
    holder.imageView.setImageDrawable(folder);
    gradientDrawable.setColor(Color.parseColor(zipViewer.iconskin));
  }
 else {
    if (zipViewer.coloriseIcons) {
      if (Icons.isVideo(rowItem.getFileNameString()))       gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isAudio(rowItem.getFileNameString()))       gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isPdf(rowItem.getFileNameString()))       gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isCode(rowItem.getFileNameString()))       gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isText(rowItem.getFileNameString()))       gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isArchive(rowItem.getFileNameString()))       gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isgeneric(rowItem.getFileNameString()))       gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else       gradientDrawable.setColor(Color.parseColor(zipViewer.iconskin));
    }
 else     gradientDrawable.setColor(Color.parseColor(zipViewer.iconskin));
  }
  holder.rl.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View view){
      toggleChecked(p);
      return false;
    }
  }
);
  holder.imageView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      final Animation animation=AnimationUtils.loadAnimation(zipViewer.getActivity(),R.anim.holder_anim);
      holder.imageView.setAnimation(animation);
      toggleChecked(p);
    }
  }
);
  Boolean checked=myChecked.get(p);
  if (checked != null) {
    if (zipViewer.mainActivity.theme1 == 0) {
      holder.rl.setBackgroundResource(R.drawable.safr_ripple_white);
    }
 else {
      holder.rl.setBackgroundResource(R.drawable.safr_ripple_black);
    }
    if (checked) {
      holder.imageView.setImageDrawable(zipViewer.getResources().getDrawable(R.drawable.abc_ic_cab_done_holo_dark));
      gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
      if (Build.VERSION.SDK_INT >= 21) {
        holder.rl.setElevation(6f);
      }
 else {
        if (zipViewer.mainActivity.theme1 == 0) {
          holder.rl.setBackgroundColor(c.getResources().getColor(R.color.safr_pressed));
        }
 else {
          holder.rl.setBackgroundColor(c.getResources().getColor(R.color.safr_pressed_dark));
        }
      }
    }
 else {
      if (Build.VERSION.SDK_INT >= 21) {
        holder.rl.setElevation(0f);
      }
    }
  }
  holder.rl.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View p1){
      if (zipViewer.selection)       toggleChecked(p);
 else {
        if (rowItem.isDirectory()) {
          zipViewer.elements.clear();
          new RarHelperTask(zipViewer,rowItem.getFileNameString()).execute(zipViewer.f);
        }
 else {
          if (headerRequired(rowItem) != null) {
            FileHeader fileHeader=headerRequired(rowItem);
            File file1=new File(c.getCacheDir().getAbsolutePath() + ""String_Node_Str"" + fileHeader.getFileNameString());
            zipViewer.files.clear();
            zipViewer.files.add(0,file1);
            new ZipExtractTask(zipViewer.archive,c.getCacheDir().getAbsolutePath(),zipViewer.mainActivity,fileHeader.getFileNameString(),false,fileHeader).execute();
          }
        }
      }
    }
  }
);
}",0.99859649122807
162570,"@Override public long getHeaderId(int i){
  if (main.islist) {
    if (i != 0) {
      if (items.get(i - 1).getSize().equals(main.goback))       return -1;
      if (items.get(i - 1).isDirectory(main.rootMode))       return 'D';
 else       return 'F';
    }
  }
 else {
    if (i != 0 && i != 1 && i != 2) {
      if (items.get(i - 3).getSize().equals(main.goback))       return -1;
      if (items.get(i - 3).isDirectory(main.rootMode))       return 'D';
 else       return 'F';
    }
  }
  return -1;
}","@Override public long getHeaderId(int i){
  if (i >= 0 && i < items.size())   if (main.islist) {
    if (i != 0) {
      if (items.get(i - 1).getSize().equals(main.goback))       return -1;
      if (items.get(i - 1).isDirectory(main.rootMode))       return 'D';
 else       return 'F';
    }
  }
 else {
    if (i != 0 && i != 1 && i != 2) {
      if (items.get(i - 3).getSize().equals(main.goback))       return -1;
      if (items.get(i - 3).isDirectory(main.rootMode))       return 'D';
 else       return 'F';
    }
  }
  return -1;
}",0.9674329501915708
162571,"@Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup viewGroup,int i){
  View v=mInflater.inflate(R.layout.rowlayout,viewGroup,false);
  ViewHolder vh=new ViewHolder(v);
  if (zipViewer.mainActivity.theme1 == 1)   vh.txtTitle.setTextColor(zipViewer.getActivity().getResources().getColor(android.R.color.white));
  return vh;
}","@Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup viewGroup,int i){
  if (i == 0) {
    View v=mInflater.inflate(R.layout.rowlayout,viewGroup,false);
    v.findViewById(R.id.icon).setVisibility(View.INVISIBLE);
    return new ViewHolder(v);
  }
  View v=mInflater.inflate(R.layout.rowlayout,viewGroup,false);
  ViewHolder vh=new ViewHolder(v);
  if (zipViewer.mainActivity.theme1 == 1)   vh.txtTitle.setTextColor(zipViewer.getActivity().getResources().getColor(android.R.color.white));
  return vh;
}",0.7949015063731171
162572,"@Override public void onBindViewHolder(RecyclerView.ViewHolder viewHolder,int position1){
  final ViewHolder holder=(ZipAdapter.ViewHolder)viewHolder;
  if (position1 == 0) {
    holder.rl.setMinimumHeight(zipViewer.paddingTop);
    return;
  }
  final ZipObj rowItem=enter.get(position1 - 1);
  final int p=position1 - 1;
  GradientDrawable gradientDrawable=(GradientDrawable)holder.imageView.getBackground();
  if (rowItem.getEntry() == null) {
    holder.imageView.setImageResource(R.drawable.abc_ic_ab_back_mtrl_am_alpha);
    gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
    holder.txtTitle.setText(""String_Node_Str"");
    holder.txtDesc.setText(""String_Node_Str"");
    holder.date.setText(R.string.goback);
  }
 else {
    holder.imageView.setImageDrawable(Icons.loadMimeIcon(zipViewer.getActivity(),rowItem.getName(),false));
    final StringBuilder stringBuilder=new StringBuilder(rowItem.getName());
    if (zipViewer.showLastModified)     holder.date.setText(new Futils().getdate(rowItem.getTime(),""String_Node_Str"",zipViewer.year));
    if (rowItem.isDirectory()) {
      holder.imageView.setImageDrawable(folder);
      gradientDrawable.setColor(Color.parseColor(zipViewer.skin));
      if (stringBuilder.toString().length() > 0) {
        stringBuilder.deleteCharAt(rowItem.getName().length() - 1);
        try {
          holder.txtTitle.setText(stringBuilder.toString().substring(stringBuilder.toString().lastIndexOf(""String_Node_Str"") + 1));
        }
 catch (        Exception e) {
          holder.txtTitle.setText(rowItem.getName().substring(0,rowItem.getName().lastIndexOf(""String_Node_Str"")));
        }
      }
    }
 else {
      if (zipViewer.showSize)       holder.txtDesc.setText(new Futils().readableFileSize(rowItem.getSize()));
      holder.txtTitle.setText(rowItem.getName().substring(rowItem.getName().lastIndexOf(""String_Node_Str"") + 1));
      if (zipViewer.coloriseIcons) {
        if (Icons.isVideo(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isAudio(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isPdf(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isCode(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isText(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isArchive(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isgeneric(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         gradientDrawable.setColor(Color.parseColor(zipViewer.skin));
      }
 else       gradientDrawable.setColor(Color.parseColor(zipViewer.skin));
    }
  }
  holder.rl.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View view){
      if (rowItem.getEntry() != null)       toggleChecked(p);
      System.out.println(""String_Node_Str"");
      return false;
    }
  }
);
  holder.imageView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (rowItem.getEntry() != null) {
        final Animation animation=AnimationUtils.loadAnimation(zipViewer.getActivity(),R.anim.holder_anim);
        holder.imageView.setAnimation(animation);
        toggleChecked(p);
      }
    }
  }
);
  Boolean checked=myChecked.get(p);
  if (checked != null) {
    if (zipViewer.mainActivity.theme1 == 0) {
      holder.rl.setBackgroundResource(R.drawable.safr_ripple_white);
    }
 else {
      holder.rl.setBackgroundResource(R.drawable.safr_ripple_black);
    }
    if (checked) {
      holder.imageView.setImageDrawable(zipViewer.getResources().getDrawable(R.drawable.abc_ic_cab_done_holo_dark));
      gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
      if (Build.VERSION.SDK_INT >= 21) {
        holder.rl.setElevation(6f);
      }
 else {
        if (zipViewer.mainActivity.theme1 == 0) {
          holder.rl.setBackgroundColor(c.getResources().getColor(R.color.safr_pressed));
        }
 else {
          holder.rl.setBackgroundColor(c.getResources().getColor(R.color.safr_pressed_dark));
        }
      }
    }
 else {
      if (Build.VERSION.SDK_INT >= 21) {
        holder.rl.setElevation(0f);
      }
    }
  }
  holder.rl.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View p1){
      System.out.println(""String_Node_Str"");
      if (rowItem.getEntry() == null)       zipViewer.goBack();
 else {
        if (zipViewer.selection)         toggleChecked(p);
 else {
          final StringBuilder stringBuilder=new StringBuilder(rowItem.getName());
          if (rowItem.isDirectory())           stringBuilder.deleteCharAt(rowItem.getName().length() - 1);
          if (rowItem.isDirectory()) {
            new ZipHelperTask(zipViewer,stringBuilder.toString()).execute(zipViewer.f);
          }
 else {
            String x=rowItem.getName().substring(rowItem.getName().lastIndexOf(""String_Node_Str"") + 1);
            File file=new File(c.getCacheDir().getAbsolutePath() + ""String_Node_Str"" + x);
            zipViewer.files.clear();
            zipViewer.files.add(0,file);
            try {
              ZipFile zipFile=new ZipFile(zipViewer.f);
              new ZipExtractTask(zipFile,c.getCacheDir().getAbsolutePath(),zipViewer.getActivity(),x,true,rowItem.getEntry()).execute();
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
        }
      }
    }
  }
);
}","@Override public void onBindViewHolder(RecyclerView.ViewHolder viewHolder,int position1){
  final ViewHolder holder=(ZipAdapter.ViewHolder)viewHolder;
  if (position1 == 0) {
    holder.rl.setMinimumHeight(zipViewer.paddingTop);
    return;
  }
  final ZipObj rowItem=enter.get(position1 - 1);
  final int p=position1 - 1;
  GradientDrawable gradientDrawable=(GradientDrawable)holder.imageView.getBackground();
  if (rowItem.getEntry() == null) {
    holder.imageView.setImageResource(R.drawable.abc_ic_ab_back_mtrl_am_alpha);
    gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
    holder.txtTitle.setText(""String_Node_Str"");
    holder.txtDesc.setText(""String_Node_Str"");
    holder.date.setText(R.string.goback);
  }
 else {
    holder.imageView.setImageDrawable(Icons.loadMimeIcon(zipViewer.getActivity(),rowItem.getName(),false));
    final StringBuilder stringBuilder=new StringBuilder(rowItem.getName());
    if (zipViewer.showLastModified)     holder.date.setText(new Futils().getdate(rowItem.getTime(),""String_Node_Str"",zipViewer.year));
    if (rowItem.isDirectory()) {
      holder.imageView.setImageDrawable(folder);
      gradientDrawable.setColor(Color.parseColor(zipViewer.iconskin));
      if (stringBuilder.toString().length() > 0) {
        stringBuilder.deleteCharAt(rowItem.getName().length() - 1);
        try {
          holder.txtTitle.setText(stringBuilder.toString().substring(stringBuilder.toString().lastIndexOf(""String_Node_Str"") + 1));
        }
 catch (        Exception e) {
          holder.txtTitle.setText(rowItem.getName().substring(0,rowItem.getName().lastIndexOf(""String_Node_Str"")));
        }
      }
    }
 else {
      if (zipViewer.showSize)       holder.txtDesc.setText(new Futils().readableFileSize(rowItem.getSize()));
      holder.txtTitle.setText(rowItem.getName().substring(rowItem.getName().lastIndexOf(""String_Node_Str"") + 1));
      if (zipViewer.coloriseIcons) {
        if (Icons.isVideo(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isAudio(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isPdf(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isCode(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isText(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isArchive(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isgeneric(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         gradientDrawable.setColor(Color.parseColor(zipViewer.iconskin));
      }
 else       gradientDrawable.setColor(Color.parseColor(zipViewer.iconskin));
    }
  }
  holder.rl.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View view){
      if (rowItem.getEntry() != null)       toggleChecked(p);
      System.out.println(""String_Node_Str"");
      return false;
    }
  }
);
  holder.imageView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (rowItem.getEntry() != null) {
        final Animation animation=AnimationUtils.loadAnimation(zipViewer.getActivity(),R.anim.holder_anim);
        holder.imageView.setAnimation(animation);
        toggleChecked(p);
      }
    }
  }
);
  Boolean checked=myChecked.get(p);
  if (checked != null) {
    if (zipViewer.mainActivity.theme1 == 0) {
      holder.rl.setBackgroundResource(R.drawable.safr_ripple_white);
    }
 else {
      holder.rl.setBackgroundResource(R.drawable.safr_ripple_black);
    }
    if (checked) {
      holder.imageView.setImageDrawable(zipViewer.getResources().getDrawable(R.drawable.abc_ic_cab_done_holo_dark));
      gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
      if (Build.VERSION.SDK_INT >= 21) {
        holder.rl.setElevation(6f);
      }
 else {
        if (zipViewer.mainActivity.theme1 == 0) {
          holder.rl.setBackgroundColor(c.getResources().getColor(R.color.safr_pressed));
        }
 else {
          holder.rl.setBackgroundColor(c.getResources().getColor(R.color.safr_pressed_dark));
        }
      }
    }
 else {
      if (Build.VERSION.SDK_INT >= 21) {
        holder.rl.setElevation(0f);
      }
    }
  }
  holder.rl.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View p1){
      System.out.println(""String_Node_Str"");
      if (rowItem.getEntry() == null)       zipViewer.goBack();
 else {
        if (zipViewer.selection)         toggleChecked(p);
 else {
          final StringBuilder stringBuilder=new StringBuilder(rowItem.getName());
          if (rowItem.isDirectory())           stringBuilder.deleteCharAt(rowItem.getName().length() - 1);
          if (rowItem.isDirectory()) {
            new ZipHelperTask(zipViewer,stringBuilder.toString()).execute(zipViewer.f);
          }
 else {
            String x=rowItem.getName().substring(rowItem.getName().lastIndexOf(""String_Node_Str"") + 1);
            File file=new File(c.getCacheDir().getAbsolutePath() + ""String_Node_Str"" + x);
            zipViewer.files.clear();
            zipViewer.files.add(0,file);
            try {
              ZipFile zipFile=new ZipFile(zipViewer.f);
              new ZipExtractTask(zipFile,c.getCacheDir().getAbsolutePath(),zipViewer.getActivity(),x,true,rowItem.getEntry()).execute();
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
        }
      }
    }
  }
);
}",0.9989606790230384
162573,"@Override public long getHeaderId(int position){
  if (position != 0) {
    if (enter.get(position - 1) == null)     return -1;
 else     if (enter.get(position - 1).isDirectory())     return 'D';
 else     return 'F';
  }
  return -1;
}","@Override public long getHeaderId(int position){
  if (position >= 0 && position < enter.size())   if (position != 0) {
    if (enter.get(position - 1) == null)     return -1;
 else     if (enter.get(position - 1).isDirectory())     return 'D';
 else     return 'F';
  }
  return -1;
}",0.9080459770114944
162574,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  s=getArguments().getString(""String_Node_Str"");
  f=new File(s);
  listView.setVisibility(View.VISIBLE);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  listView.setVisibility(View.VISIBLE);
  mLayoutManager=new LinearLayoutManager(getActivity());
  listView.setLayoutManager(mLayoutManager);
  if (mainActivity.theme1 == 1)   rootView.setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
 else   listView.setBackgroundColor(getResources().getColor(android.R.color.background_light));
  gobackitem=Sp.getBoolean(""String_Node_Str"",true);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  Calendar calendar=Calendar.getInstance();
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  files=new ArrayList<File>();
  loadlist(f.getPath());
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  hidemode=Sp.getInt(""String_Node_Str"",0);
  paddingTop=(mToolbarHeight=getToolbarHeight(getActivity())) + dpToPx(72);
  try {
    mainActivity.toolbar.setTitle(f.getName());
  }
 catch (  Exception e) {
    mainActivity.toolbar.setTitle(getResources().getString(R.string.zip_viewer));
  }
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.fabHideAnim=AnimationUtils.loadAnimation(getActivity(),R.anim.fab_hide);
  mainActivity.floatingActionButton.setAnimation(mainActivity.fabHideAnim);
  mainActivity.floatingActionButton.animate();
  mainActivity.floatingActionButton.setVisibility(View.GONE);
  mainActivity.supportInvalidateOptionsMenu();
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  s=getArguments().getString(""String_Node_Str"");
  f=new File(s);
  listView.setVisibility(View.VISIBLE);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  listView.setVisibility(View.VISIBLE);
  mLayoutManager=new LinearLayoutManager(getActivity());
  listView.setLayoutManager(mLayoutManager);
  if (mainActivity.theme1 == 1)   rootView.setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
 else   listView.setBackgroundColor(getResources().getColor(android.R.color.background_light));
  gobackitem=Sp.getBoolean(""String_Node_Str"",true);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  Calendar calendar=Calendar.getInstance();
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  iconskin=Sp.getString(""String_Node_Str"",skin);
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  files=new ArrayList<File>();
  loadlist(f.getPath());
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  hidemode=Sp.getInt(""String_Node_Str"",0);
  paddingTop=(mToolbarHeight=getToolbarHeight(getActivity())) + dpToPx(72);
  try {
    mainActivity.toolbar.setTitle(f.getName());
  }
 catch (  Exception e) {
    mainActivity.toolbar.setTitle(getResources().getString(R.string.zip_viewer));
  }
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.fabHideAnim=AnimationUtils.loadAnimation(getActivity(),R.anim.fab_hide);
  mainActivity.floatingActionButton.setAnimation(mainActivity.fabHideAnim);
  mainActivity.floatingActionButton.animate();
  mainActivity.floatingActionButton.setVisibility(View.GONE);
  mainActivity.supportInvalidateOptionsMenu();
}",0.9871559633027523
162575,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  s=getArguments().getString(""String_Node_Str"");
  f=new File(s);
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  hidemode=Sp.getInt(""String_Node_Str"",0);
  paddingTop=(mToolbarHeight=getToolbarHeight(getActivity())) + dpToPx(72);
  listView.setVisibility(View.VISIBLE);
  mLayoutManager=new LinearLayoutManager(getActivity());
  listView.setLayoutManager(mLayoutManager);
  mainActivity.supportInvalidateOptionsMenu();
  if (mainActivity.theme1 == 1)   rootView.setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
 else   listView.setBackgroundColor(getResources().getColor(android.R.color.background_light));
  gobackitem=Sp.getBoolean(""String_Node_Str"",true);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  Calendar calendar=Calendar.getInstance();
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  mainActivity.findViewById(R.id.buttonbarframe).setBackgroundColor(Color.parseColor(skin));
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  files=new ArrayList<File>();
  if (savedInstanceState == null)   loadlist(f.getPath());
 else {
    wholelist=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    elements=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    current=savedInstanceState.getString(""String_Node_Str"");
    f=new File(savedInstanceState.getString(""String_Node_Str""));
    createviews(elements,current);
  }
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.fabHideAnim=AnimationUtils.loadAnimation(getActivity(),R.anim.fab_hide);
  mainActivity.floatingActionButton.setAnimation(mainActivity.fabHideAnim);
  mainActivity.floatingActionButton.animate();
  mainActivity.floatingActionButton.setVisibility(View.GONE);
  try {
    mainActivity.toolbar.setTitle(f.getName());
  }
 catch (  Exception e) {
    mainActivity.toolbar.setTitle(getResources().getString(R.string.zip_viewer));
  }
  mainActivity.supportInvalidateOptionsMenu();
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  s=getArguments().getString(""String_Node_Str"");
  f=new File(s);
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  hidemode=Sp.getInt(""String_Node_Str"",0);
  paddingTop=(mToolbarHeight=getToolbarHeight(getActivity())) + dpToPx(72);
  listView.setVisibility(View.VISIBLE);
  mLayoutManager=new LinearLayoutManager(getActivity());
  listView.setLayoutManager(mLayoutManager);
  mainActivity.supportInvalidateOptionsMenu();
  if (mainActivity.theme1 == 1)   rootView.setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
 else   listView.setBackgroundColor(getResources().getColor(android.R.color.background_light));
  gobackitem=Sp.getBoolean(""String_Node_Str"",true);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  Calendar calendar=Calendar.getInstance();
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  iconskin=Sp.getString(""String_Node_Str"",skin);
  mainActivity.findViewById(R.id.buttonbarframe).setBackgroundColor(Color.parseColor(skin));
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  files=new ArrayList<File>();
  if (savedInstanceState == null)   loadlist(f.getPath());
 else {
    wholelist=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    elements=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    current=savedInstanceState.getString(""String_Node_Str"");
    f=new File(savedInstanceState.getString(""String_Node_Str""));
    createviews(elements,current);
  }
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.fabHideAnim=AnimationUtils.loadAnimation(getActivity(),R.anim.fab_hide);
  mainActivity.floatingActionButton.setAnimation(mainActivity.fabHideAnim);
  mainActivity.floatingActionButton.animate();
  mainActivity.floatingActionButton.setVisibility(View.GONE);
  try {
    mainActivity.toolbar.setTitle(f.getName());
  }
 catch (  Exception e) {
    mainActivity.toolbar.setTitle(getResources().getString(R.string.zip_viewer));
  }
  mainActivity.supportInvalidateOptionsMenu();
}",0.9896427816529276
162576,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setRetainInstance(true);
  mainActivity=(MainActivity)getActivity();
  mainActivity.toolbar.setTitle(utils.getString(getActivity(),R.string.apps));
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.supportInvalidateOptionsMenu();
  fabSkin=mainActivity.fabskin;
  vl=getListView();
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  ListView vl=getListView();
  int theme=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  theme1=theme == 2 ? PreferenceUtils.hourOfDay() : theme;
  vl.setDivider(null);
  if (theme1 == 1)   getActivity().getWindow().getDecorView().setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
  if (savedInstanceState == null)   new LoadListTask().execute();
 else {
    c=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    a=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    adapter=new AppsAdapter(getActivity(),R.layout.rowlayout,a,app,c);
    setListAdapter(adapter);
    vl.setSelectionFromTop(savedInstanceState.getInt(""String_Node_Str""),savedInstanceState.getInt(""String_Node_Str""));
  }
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setRetainInstance(true);
  mainActivity=(MainActivity)getActivity();
  mainActivity.toolbar.setTitle(utils.getString(getActivity(),R.string.apps));
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.floatingActionButton.setVisibility(View.GONE);
  mainActivity.buttonBarFrame.setVisibility(View.GONE);
  mainActivity.supportInvalidateOptionsMenu();
  fabSkin=mainActivity.fabskin;
  vl=getListView();
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  ListView vl=getListView();
  int theme=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  theme1=theme == 2 ? PreferenceUtils.hourOfDay() : theme;
  vl.setDivider(null);
  if (theme1 == 1)   getActivity().getWindow().getDecorView().setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
  if (savedInstanceState == null)   new LoadListTask().execute();
 else {
    c=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    a=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    adapter=new AppsAdapter(getActivity(),R.layout.rowlayout,a,app,c);
    setListAdapter(adapter);
    vl.setSelectionFromTop(savedInstanceState.getInt(""String_Node_Str""),savedInstanceState.getInt(""String_Node_Str""));
  }
}",0.9548238897396631
162577,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  rootView=inflater.inflate(R.layout.bookmark_frag,container,false);
  MainActivity mainActivity=(MainActivity)getActivity();
  mainActivity.toolbar.setTitle(utils.getString(getActivity(),R.string.bookmanag));
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.floatingActionButton.setVisibility(View.GONE);
  listview=(RecyclerView)rootView.findViewById(R.id.listView);
  rootView.findViewById(R.id.buttonbarframe).setVisibility(View.GONE);
  c=getActivity();
  linearLayoutManager=new LinearLayoutManager(c);
  listview.setLayoutManager(linearLayoutManager);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  rootView=inflater.inflate(R.layout.bookmark_frag,container,false);
  MainActivity mainActivity=(MainActivity)getActivity();
  mainActivity.toolbar.setTitle(utils.getString(getActivity(),R.string.bookmanag));
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.floatingActionButton.setVisibility(View.GONE);
  mainActivity.buttonBarFrame.setVisibility(View.GONE);
  listview=(RecyclerView)rootView.findViewById(R.id.listView);
  c=getActivity();
  linearLayoutManager=new LinearLayoutManager(c);
  listview.setLayoutManager(linearLayoutManager);
  return rootView;
}",0.8602150537634409
162578,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.preferences);
  sharedPref=PreferenceManager.getDefaultSharedPreferences(getActivity());
  skin=sharedPref.getString(""String_Node_Str"",""String_Node_Str"");
  fabSkin=sharedPref.getString(""String_Node_Str"",""String_Node_Str"");
  final int th1=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str""));
  theme=th1 == 2 ? PreferenceUtils.hourOfDay() : th1;
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      final String[] sort=getResources().getStringArray(R.array.columns);
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.title(R.string.gridcolumnno);
      int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str""));
      if (current != 0)       current=current - 2;
 else       current=1;
      a.items(sort).itemsCallbackSingleChoice(current,new MaterialDialog.ListCallbackSingleChoice(){
        @Override public boolean onSelection(        MaterialDialog dialog,        View view,        int which,        CharSequence text){
          sharedPref.edit().putString(""String_Node_Str"",""String_Node_Str"" + sort[which]).commit();
          dialog.dismiss();
          return true;
        }
      }
);
      a.build().show();
      return true;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      String[] sort=getResources().getStringArray(R.array.hidemode);
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.title(getString(R.string.hide_mode_title));
      int current=sharedPref.getInt(""String_Node_Str"",0);
      a.items(sort).itemsCallbackSingleChoice(current,new MaterialDialog.ListCallbackSingleChoice(){
        @Override public boolean onSelection(        MaterialDialog dialog,        View view,        int which,        CharSequence text){
          sharedPref.edit().putInt(""String_Node_Str"",which).commit();
          dialog.dismiss();
          restartPC(getActivity());
          return true;
        }
      }
);
      a.build().show();
      return true;
    }
  }
);
  if (Build.VERSION.SDK_INT >= 21)   findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      restartPC(getActivity());
      return false;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      String[] sort=getResources().getStringArray(R.array.directorysortmode);
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.title(R.string.directorysort);
      int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str""));
      a.items(sort).itemsCallbackSingleChoice(current,new MaterialDialog.ListCallbackSingleChoice(){
        @Override public boolean onSelection(        MaterialDialog dialog,        View view,        int which,        CharSequence text){
          sharedPref.edit().putString(""String_Node_Str"",""String_Node_Str"" + which).commit();
          dialog.dismiss();
          return true;
        }
      }
);
      a.build().show();
      return true;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      String[] sort=getResources().getStringArray(R.array.theme);
      int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str""));
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.items(sort).itemsCallbackSingleChoice(current,new MaterialDialog.ListCallbackSingleChoice(){
        @Override public boolean onSelection(        MaterialDialog dialog,        View view,        int which,        CharSequence text){
          sharedPref.edit().putString(""String_Node_Str"",""String_Node_Str"" + which).commit();
          dialog.dismiss();
          restartPC(getActivity());
          return true;
        }
      }
);
      a.title(R.string.theme);
      a.build().show();
      return true;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      String[] sort=getResources().getStringArray(R.array.sortby);
      int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str""));
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.items(sort).itemsCallbackSingleChoice(current,new MaterialDialog.ListCallbackSingleChoice(){
        @Override public boolean onSelection(        MaterialDialog dialog,        View view,        int which,        CharSequence text){
          sharedPref.edit().putString(""String_Node_Str"",""String_Node_Str"" + which).commit();
          dialog.dismiss();
          return true;
        }
      }
);
      a.title(R.string.sortby);
      a.build().show();
      return true;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(this);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(this);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(this);
  final SwitchPreference checkBoxPreference=(SwitchPreference)findPreference(""String_Node_Str"");
  boolean check=sharedPref.getBoolean(""String_Node_Str"",false);
  checkBoxPreference.setChecked(check);
  checkBoxPreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object o){
      if (!checkBoxPreference.isChecked()) {
        sharedPref.edit().putBoolean(""String_Node_Str"",true).apply();
        checkBoxPreference.setChecked(true);
      }
 else {
        sharedPref.edit().putBoolean(""String_Node_Str"",false).apply();
        checkBoxPreference.setChecked(false);
      }
      Toast.makeText(getActivity(),R.string.setRandom,Toast.LENGTH_LONG).show();
      return false;
    }
  }
);
  final SwitchPreference rootmode=(SwitchPreference)findPreference(""String_Node_Str"");
  rootmode.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      boolean b=sharedPref.getBoolean(""String_Node_Str"",false);
      if (b) {
        if (RootTools.isAccessGiven()) {
          rootmode.setChecked(true);
        }
 else {
          rootmode.setChecked(false);
          Toast.makeText(getActivity(),getResources().getString(R.string.rootfailure),Toast.LENGTH_LONG).show();
        }
      }
 else {
        rootmode.setChecked(false);
      }
      return false;
    }
  }
);
  Preference preference4=(Preference)findPreference(""String_Node_Str"");
  preference4.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      skin=sharedPref.getString(""String_Node_Str"",""String_Node_Str"");
      if (theme == 1)       a.theme(Theme.DARK);
      a.positiveText(R.string.close);
      a.positiveColor(Color.parseColor(fabSkin));
      LayoutInflater layoutInflater=(LayoutInflater)getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      View view=layoutInflater.inflate(R.layout.authors,null);
      a.customView(view,true);
      a.title(R.string.authors);
      a.callback(new MaterialDialog.ButtonCallback(){
        @Override public void onPositive(        MaterialDialog materialDialog){
          materialDialog.cancel();
        }
        @Override public void onNegative(        MaterialDialog materialDialog){
        }
      }
);
      a.build().show();
      final Intent intent=new Intent(Intent.ACTION_VIEW);
      TextView googlePlus1=(TextView)view.findViewById(R.id.googlePlus1);
      googlePlus1.setTextColor(Color.parseColor(skin));
      TextView googlePlus2=(TextView)view.findViewById(R.id.googlePlus2);
      googlePlus2.setTextColor(Color.parseColor(skin));
      TextView git1=(TextView)view.findViewById(R.id.git1);
      git1.setTextColor(Color.parseColor(skin));
      TextView git2=(TextView)view.findViewById(R.id.git2);
      git2.setTextColor(Color.parseColor(skin));
      googlePlus1.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          intent.setData(Uri.parse(""String_Node_Str""));
          startActivity(intent);
        }
      }
);
      googlePlus2.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          intent.setData(Uri.parse(""String_Node_Str""));
          startActivity(intent);
        }
      }
);
      git1.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          intent.setData(Uri.parse(""String_Node_Str""));
          startActivity(intent);
        }
      }
);
      git2.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          intent.setData(Uri.parse(""String_Node_Str""));
          startActivity(intent);
        }
      }
);
      TextView textView=(TextView)view.findViewById(R.id.icon_credits);
      textView.setMovementMethod(LinkMovementMethod.getInstance());
      textView.setLinksClickable(true);
      textView.setText(Html.fromHtml(getActivity().getString(R.string.icon_credits)));
      return false;
    }
  }
);
  Preference preference1=(Preference)findPreference(""String_Node_Str"");
  preference1.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.title(R.string.changelog);
      a.content(Html.fromHtml(getActivity().getString(R.string.changelog_version_5) + getActivity().getString(R.string.changelog_change_5) + getActivity().getString(R.string.changelog_version_4)+ getActivity().getString(R.string.changelog_change_4)+ getActivity().getString(R.string.changelog_version_3)+ getActivity().getString(R.string.changelog_change_3)+ getActivity().getString(R.string.changelog_version_2)+ getActivity().getString(R.string.changelog_change_2)+ getActivity().getString(R.string.changelog_version_1)+ getActivity().getString(R.string.changelog_change_1)));
      a.negativeText(R.string.close);
      a.negativeColor(Color.parseColor(skin));
      a.positiveText(R.string.fullChangelog);
      a.positiveColor(Color.parseColor(fabSkin));
      a.callback(new MaterialDialog.ButtonCallback(){
        @Override public void onPositive(        MaterialDialog materialDialog){
          Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
          startActivity(intent);
        }
        @Override public void onNegative(        MaterialDialog materialDialog){
          materialDialog.cancel();
        }
      }
).build().show();
      return false;
    }
  }
);
  Preference preference2=(Preference)findPreference(""String_Node_Str"");
  final Dialog dialog=new Dialog(getActivity(),android.R.style.Theme_Holo_Light_DialogWhenLarge_NoActionBar);
  LayoutInflater inflater=(LayoutInflater)getActivity().getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
  final View dialog_view=inflater.inflate(R.layout.open_source_licenses,null);
  dialog.setContentView(dialog_view);
  preference2.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference arg0){
      WebView wv=(WebView)dialog_view.findViewById(R.id.webView1);
      PreferenceUtils preferenceUtils=new PreferenceUtils();
      wv.loadData(PreferenceUtils.LICENCE_TERMS,""String_Node_Str"",null);
      dialog.show();
      return false;
    }
  }
);
  Preference preference3=(Preference)findPreference(""String_Node_Str"");
  preference3.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Intent intent=new Intent(Intent.ACTION_VIEW);
      intent.setType(""String_Node_Str"");
      intent.setData(Uri.parse(""String_Node_Str""));
      intent.setClassName(""String_Node_Str"",""String_Node_Str"");
      intent.putExtra(Intent.EXTRA_SUBJECT,""String_Node_Str"");
      startActivity(intent);
      return false;
    }
  }
);
  Preference preference5=(Preference)findPreference(""String_Node_Str"");
  preference5.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Intent intent1=new Intent(Intent.ACTION_VIEW);
      intent1.setData(Uri.parse(""String_Node_Str""));
      startActivity(intent1);
      return false;
    }
  }
);
  Preference preference6=findPreference(""String_Node_Str"");
  preference6.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Uri uri=Uri.parse(""String_Node_Str"");
      Intent intent=new Intent();
      intent.setData(uri);
      startActivity(intent);
      return false;
    }
  }
);
  Preference studio=findPreference(""String_Node_Str"");
  studio.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      COUNT++;
      if (COUNT >= 5) {
        if (toast != null)         toast.cancel();
        toast=Toast.makeText(getActivity(),""String_Node_Str"" + COUNT,Toast.LENGTH_SHORT);
        toast.show();
        sharedPref.edit().putInt(""String_Node_Str"",Integer.parseInt(Integer.toString(COUNT) + ""String_Node_Str"")).apply();
      }
 else {
        sharedPref.edit().putInt(""String_Node_Str"",0).apply();
      }
      return false;
    }
  }
);
  SwitchPreference preference7=(SwitchPreference)findPreference(""String_Node_Str"");
  if (BuildConfig.IS_VERSION_FDROID)   preference7.setEnabled(false);
  SwitchPreference preference8=(SwitchPreference)findPreference(""String_Node_Str"");
  if (Build.VERSION.SDK_INT >= 21)   preference8.setEnabled(true);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.preferences);
  sharedPref=PreferenceManager.getDefaultSharedPreferences(getActivity());
  skin=sharedPref.getString(""String_Node_Str"",""String_Node_Str"");
  fabSkin=sharedPref.getString(""String_Node_Str"",""String_Node_Str"");
  final int th1=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str""));
  theme=th1 == 2 ? PreferenceUtils.hourOfDay() : th1;
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      final String[] sort=getResources().getStringArray(R.array.columns);
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.title(R.string.gridcolumnno);
      int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str""));
      if (current != 0)       current=current - 2;
 else       current=1;
      a.items(sort).itemsCallbackSingleChoice(current,new MaterialDialog.ListCallbackSingleChoice(){
        @Override public boolean onSelection(        MaterialDialog dialog,        View view,        int which,        CharSequence text){
          sharedPref.edit().putString(""String_Node_Str"",""String_Node_Str"" + sort[which]).commit();
          dialog.dismiss();
          return true;
        }
      }
);
      a.build().show();
      return true;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      String[] sort=getResources().getStringArray(R.array.hidemode);
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.title(getString(R.string.hide_mode_title));
      int current=sharedPref.getInt(""String_Node_Str"",0);
      a.items(sort).itemsCallbackSingleChoice(current,new MaterialDialog.ListCallbackSingleChoice(){
        @Override public boolean onSelection(        MaterialDialog dialog,        View view,        int which,        CharSequence text){
          sharedPref.edit().putInt(""String_Node_Str"",which).commit();
          dialog.dismiss();
          restartPC(getActivity());
          return true;
        }
      }
);
      a.build().show();
      return true;
    }
  }
);
  if (Build.VERSION.SDK_INT >= 21)   findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      restartPC(getActivity());
      return false;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      String[] sort=getResources().getStringArray(R.array.directorysortmode);
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.title(R.string.directorysort);
      int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str""));
      a.items(sort).itemsCallbackSingleChoice(current,new MaterialDialog.ListCallbackSingleChoice(){
        @Override public boolean onSelection(        MaterialDialog dialog,        View view,        int which,        CharSequence text){
          sharedPref.edit().putString(""String_Node_Str"",""String_Node_Str"" + which).commit();
          dialog.dismiss();
          return true;
        }
      }
);
      a.build().show();
      return true;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      String[] sort=getResources().getStringArray(R.array.theme);
      int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str""));
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.items(sort).itemsCallbackSingleChoice(current,new MaterialDialog.ListCallbackSingleChoice(){
        @Override public boolean onSelection(        MaterialDialog dialog,        View view,        int which,        CharSequence text){
          sharedPref.edit().putString(""String_Node_Str"",""String_Node_Str"" + which).commit();
          dialog.dismiss();
          restartPC(getActivity());
          return true;
        }
      }
);
      a.title(R.string.theme);
      a.build().show();
      return true;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      String[] sort=getResources().getStringArray(R.array.sortby);
      int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str""));
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.items(sort).itemsCallbackSingleChoice(current,new MaterialDialog.ListCallbackSingleChoice(){
        @Override public boolean onSelection(        MaterialDialog dialog,        View view,        int which,        CharSequence text){
          sharedPref.edit().putString(""String_Node_Str"",""String_Node_Str"" + which).commit();
          dialog.dismiss();
          return true;
        }
      }
);
      a.title(R.string.sortby);
      a.build().show();
      return true;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(this);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(this);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(this);
  final SwitchPreference checkBoxPreference=(SwitchPreference)findPreference(""String_Node_Str"");
  boolean check=sharedPref.getBoolean(""String_Node_Str"",false);
  checkBoxPreference.setChecked(check);
  checkBoxPreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object o){
      if (!checkBoxPreference.isChecked()) {
        sharedPref.edit().putBoolean(""String_Node_Str"",true).apply();
        checkBoxPreference.setChecked(true);
      }
 else {
        sharedPref.edit().putBoolean(""String_Node_Str"",false).apply();
        checkBoxPreference.setChecked(false);
      }
      Toast.makeText(getActivity(),R.string.setRandom,Toast.LENGTH_LONG).show();
      return false;
    }
  }
);
  final SwitchPreference rootmode=(SwitchPreference)findPreference(""String_Node_Str"");
  rootmode.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      boolean b=sharedPref.getBoolean(""String_Node_Str"",false);
      if (b) {
        if (RootTools.isAccessGiven()) {
          rootmode.setChecked(true);
        }
 else {
          rootmode.setChecked(false);
          Toast.makeText(getActivity(),getResources().getString(R.string.rootfailure),Toast.LENGTH_LONG).show();
        }
      }
 else {
        rootmode.setChecked(false);
      }
      return false;
    }
  }
);
  Preference preference4=(Preference)findPreference(""String_Node_Str"");
  preference4.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      skin=sharedPref.getString(""String_Node_Str"",""String_Node_Str"");
      if (theme == 1)       a.theme(Theme.DARK);
      a.positiveText(R.string.close);
      a.positiveColor(Color.parseColor(fabSkin));
      LayoutInflater layoutInflater=(LayoutInflater)getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      View view=layoutInflater.inflate(R.layout.authors,null);
      a.customView(view,true);
      a.title(R.string.authors);
      a.callback(new MaterialDialog.ButtonCallback(){
        @Override public void onPositive(        MaterialDialog materialDialog){
          materialDialog.cancel();
        }
        @Override public void onNegative(        MaterialDialog materialDialog){
        }
      }
);
      a.build().show();
      final Intent intent=new Intent(Intent.ACTION_VIEW);
      TextView googlePlus1=(TextView)view.findViewById(R.id.googlePlus1);
      googlePlus1.setTextColor(Color.parseColor(skin));
      TextView googlePlus2=(TextView)view.findViewById(R.id.googlePlus2);
      googlePlus2.setTextColor(Color.parseColor(skin));
      TextView git1=(TextView)view.findViewById(R.id.git1);
      git1.setTextColor(Color.parseColor(skin));
      TextView git2=(TextView)view.findViewById(R.id.git2);
      git2.setTextColor(Color.parseColor(skin));
      googlePlus1.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          intent.setData(Uri.parse(""String_Node_Str""));
          startActivity(intent);
        }
      }
);
      googlePlus2.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          intent.setData(Uri.parse(""String_Node_Str""));
          startActivity(intent);
        }
      }
);
      git1.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          intent.setData(Uri.parse(""String_Node_Str""));
          startActivity(intent);
        }
      }
);
      git2.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          intent.setData(Uri.parse(""String_Node_Str""));
          startActivity(intent);
        }
      }
);
      TextView textView=(TextView)view.findViewById(R.id.icon_credits);
      textView.setMovementMethod(LinkMovementMethod.getInstance());
      textView.setLinksClickable(true);
      textView.setText(Html.fromHtml(getActivity().getString(R.string.icon_credits)));
      return false;
    }
  }
);
  Preference preference1=(Preference)findPreference(""String_Node_Str"");
  preference1.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.title(R.string.changelog);
      a.content(Html.fromHtml(getActivity().getString(R.string.changelog_version_5) + getActivity().getString(R.string.changelog_change_5) + getActivity().getString(R.string.changelog_version_4)+ getActivity().getString(R.string.changelog_change_4)+ getActivity().getString(R.string.changelog_version_3)+ getActivity().getString(R.string.changelog_change_3)+ getActivity().getString(R.string.changelog_version_2)+ getActivity().getString(R.string.changelog_change_2)+ getActivity().getString(R.string.changelog_version_1)+ getActivity().getString(R.string.changelog_change_1)));
      a.negativeText(R.string.close);
      a.negativeColor(Color.parseColor(fabSkin));
      a.positiveText(R.string.fullChangelog);
      a.positiveColor(Color.parseColor(fabSkin));
      a.callback(new MaterialDialog.ButtonCallback(){
        @Override public void onPositive(        MaterialDialog materialDialog){
          Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
          startActivity(intent);
        }
        @Override public void onNegative(        MaterialDialog materialDialog){
          materialDialog.cancel();
        }
      }
).build().show();
      return false;
    }
  }
);
  Preference preference2=(Preference)findPreference(""String_Node_Str"");
  final Dialog dialog=new Dialog(getActivity(),android.R.style.Theme_Holo_Light_DialogWhenLarge_NoActionBar);
  LayoutInflater inflater=(LayoutInflater)getActivity().getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
  final View dialog_view=inflater.inflate(R.layout.open_source_licenses,null);
  dialog.setContentView(dialog_view);
  preference2.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference arg0){
      WebView wv=(WebView)dialog_view.findViewById(R.id.webView1);
      PreferenceUtils preferenceUtils=new PreferenceUtils();
      wv.loadData(PreferenceUtils.LICENCE_TERMS,""String_Node_Str"",null);
      dialog.show();
      return false;
    }
  }
);
  Preference preference3=(Preference)findPreference(""String_Node_Str"");
  preference3.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Intent intent=new Intent(Intent.ACTION_VIEW);
      intent.setType(""String_Node_Str"");
      intent.setData(Uri.parse(""String_Node_Str""));
      intent.setClassName(""String_Node_Str"",""String_Node_Str"");
      intent.putExtra(Intent.EXTRA_SUBJECT,""String_Node_Str"");
      startActivity(intent);
      return false;
    }
  }
);
  Preference preference5=(Preference)findPreference(""String_Node_Str"");
  preference5.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Intent intent1=new Intent(Intent.ACTION_VIEW);
      intent1.setData(Uri.parse(""String_Node_Str""));
      startActivity(intent1);
      return false;
    }
  }
);
  Preference preference6=findPreference(""String_Node_Str"");
  preference6.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Uri uri=Uri.parse(""String_Node_Str"");
      Intent intent=new Intent();
      intent.setData(uri);
      startActivity(intent);
      return false;
    }
  }
);
  Preference studio=findPreference(""String_Node_Str"");
  studio.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      COUNT++;
      if (COUNT >= 5) {
        if (toast != null)         toast.cancel();
        toast=Toast.makeText(getActivity(),""String_Node_Str"" + COUNT,Toast.LENGTH_SHORT);
        toast.show();
        sharedPref.edit().putInt(""String_Node_Str"",Integer.parseInt(Integer.toString(COUNT) + ""String_Node_Str"")).apply();
      }
 else {
        sharedPref.edit().putInt(""String_Node_Str"",0).apply();
      }
      return false;
    }
  }
);
  SwitchPreference preference7=(SwitchPreference)findPreference(""String_Node_Str"");
  if (BuildConfig.IS_VERSION_FDROID)   preference7.setEnabled(false);
  SwitchPreference preference8=(SwitchPreference)findPreference(""String_Node_Str"");
  if (Build.VERSION.SDK_INT >= 21)   preference8.setEnabled(true);
}",0.9998332610798012
162579,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View root=(ViewGroup)inflater.inflate(R.layout.processparent,container,false);
  setRetainInstance(false);
  mainActivity=(MainActivity)getActivity();
  if (mainActivity.theme1 == 1)   root.setBackgroundResource(android.R.color.black);
  rootView=(LinearLayout)root.findViewById(R.id.secondbut);
  mainActivity.toolbar.setTitle(utils.getString(getActivity(),R.string.processes));
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  icons=new IconUtils(Sp,getActivity());
  mainActivity.supportInvalidateOptionsMenu();
  return root;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View root=(ViewGroup)inflater.inflate(R.layout.processparent,container,false);
  setRetainInstance(false);
  mainActivity=(MainActivity)getActivity();
  if (mainActivity.theme1 == 1)   root.setBackgroundResource(getResources().getColor(R.color.holo_dark_background));
  rootView=(LinearLayout)root.findViewById(R.id.secondbut);
  mainActivity.toolbar.setTitle(utils.getString(getActivity(),R.string.processes));
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.floatingActionButton.setVisibility(View.GONE);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  icons=new IconUtils(Sp,getActivity());
  mainActivity.supportInvalidateOptionsMenu();
  return root;
}",0.9171052631578948
162580,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  s=getArguments().getString(""String_Node_Str"");
  f=new File(s);
  listView.setVisibility(View.VISIBLE);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  listView.setVisibility(View.VISIBLE);
  mLayoutManager=new LinearLayoutManager(getActivity());
  listView.setLayoutManager(mLayoutManager);
  if (mainActivity.theme1 == 1)   rootView.setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
 else   listView.setBackgroundColor(getResources().getColor(android.R.color.background_light));
  gobackitem=Sp.getBoolean(""String_Node_Str"",true);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  Calendar calendar=Calendar.getInstance();
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  files=new ArrayList<File>();
  loadlist(f.getPath());
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  hidemode=Sp.getInt(""String_Node_Str"",0);
  paddingTop=(mToolbarHeight=getToolbarHeight(getActivity())) + dpToPx(72);
  try {
    mainActivity.toolbar.setTitle(f.getName());
  }
 catch (  Exception e) {
    mainActivity.toolbar.setTitle(getResources().getString(R.string.zip_viewer));
  }
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.supportInvalidateOptionsMenu();
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  s=getArguments().getString(""String_Node_Str"");
  f=new File(s);
  listView.setVisibility(View.VISIBLE);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  listView.setVisibility(View.VISIBLE);
  mLayoutManager=new LinearLayoutManager(getActivity());
  listView.setLayoutManager(mLayoutManager);
  if (mainActivity.theme1 == 1)   rootView.setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
 else   listView.setBackgroundColor(getResources().getColor(android.R.color.background_light));
  gobackitem=Sp.getBoolean(""String_Node_Str"",true);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  Calendar calendar=Calendar.getInstance();
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  files=new ArrayList<File>();
  loadlist(f.getPath());
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  hidemode=Sp.getInt(""String_Node_Str"",0);
  paddingTop=(mToolbarHeight=getToolbarHeight(getActivity())) + dpToPx(72);
  try {
    mainActivity.toolbar.setTitle(f.getName());
  }
 catch (  Exception e) {
    mainActivity.toolbar.setTitle(getResources().getString(R.string.zip_viewer));
  }
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.fabHideAnim=AnimationUtils.loadAnimation(getActivity(),R.anim.fab_hide);
  mainActivity.floatingActionButton.setAnimation(mainActivity.fabHideAnim);
  mainActivity.floatingActionButton.animate();
  mainActivity.floatingActionButton.setVisibility(View.GONE);
  mainActivity.supportInvalidateOptionsMenu();
}",0.9218436873747496
162581,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  s=getArguments().getString(""String_Node_Str"");
  f=new File(s);
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  hidemode=Sp.getInt(""String_Node_Str"",0);
  paddingTop=(mToolbarHeight=getToolbarHeight(getActivity())) + dpToPx(72);
  listView.setVisibility(View.VISIBLE);
  mLayoutManager=new LinearLayoutManager(getActivity());
  listView.setLayoutManager(mLayoutManager);
  mainActivity.supportInvalidateOptionsMenu();
  if (mainActivity.theme1 == 1)   rootView.setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
 else   listView.setBackgroundColor(getResources().getColor(android.R.color.background_light));
  gobackitem=Sp.getBoolean(""String_Node_Str"",true);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  Calendar calendar=Calendar.getInstance();
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  mainActivity.findViewById(R.id.buttonbarframe).setBackgroundColor(Color.parseColor(skin));
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  files=new ArrayList<File>();
  if (savedInstanceState == null)   loadlist(f.getPath());
 else {
    wholelist=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    elements=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    current=savedInstanceState.getString(""String_Node_Str"");
    f=new File(savedInstanceState.getString(""String_Node_Str""));
    createviews(elements,current);
  }
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  try {
    mainActivity.toolbar.setTitle(f.getName());
  }
 catch (  Exception e) {
    mainActivity.toolbar.setTitle(getResources().getString(R.string.zip_viewer));
  }
  mainActivity.supportInvalidateOptionsMenu();
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  s=getArguments().getString(""String_Node_Str"");
  f=new File(s);
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  hidemode=Sp.getInt(""String_Node_Str"",0);
  paddingTop=(mToolbarHeight=getToolbarHeight(getActivity())) + dpToPx(72);
  listView.setVisibility(View.VISIBLE);
  mLayoutManager=new LinearLayoutManager(getActivity());
  listView.setLayoutManager(mLayoutManager);
  mainActivity.supportInvalidateOptionsMenu();
  if (mainActivity.theme1 == 1)   rootView.setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
 else   listView.setBackgroundColor(getResources().getColor(android.R.color.background_light));
  gobackitem=Sp.getBoolean(""String_Node_Str"",true);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  Calendar calendar=Calendar.getInstance();
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  mainActivity.findViewById(R.id.buttonbarframe).setBackgroundColor(Color.parseColor(skin));
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  files=new ArrayList<File>();
  if (savedInstanceState == null)   loadlist(f.getPath());
 else {
    wholelist=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    elements=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    current=savedInstanceState.getString(""String_Node_Str"");
    f=new File(savedInstanceState.getString(""String_Node_Str""));
    createviews(elements,current);
  }
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.fabHideAnim=AnimationUtils.loadAnimation(getActivity(),R.anim.fab_hide);
  mainActivity.floatingActionButton.setAnimation(mainActivity.fabHideAnim);
  mainActivity.floatingActionButton.animate();
  mainActivity.floatingActionButton.setVisibility(View.GONE);
  try {
    mainActivity.toolbar.setTitle(f.getName());
  }
 catch (  Exception e) {
    mainActivity.toolbar.setTitle(getResources().getString(R.string.zip_viewer));
  }
  mainActivity.supportInvalidateOptionsMenu();
}",0.9380811975504648
162582,"public void createViews(ArrayList<Layoutelements> bitmap,boolean back,File f){
  try {
    if (bitmap != null) {
      TextView footerText=(TextView)footerView.findViewById(R.id.footerText);
      if (bitmap.size() == 0) {
        footerText.setText(res.getString(R.string.nofiles));
      }
 else {
        footerText.setText(res.getString(R.string.tapnhold));
      }
      if (gobackitem)       if (!f.getPath().equals(""String_Node_Str"")) {
        if (bitmap.size() == 0 || !bitmap.get(0).getSize().equals(goback))         bitmap.add(0,utils.newElement(res.getDrawable(R.drawable.abc_ic_ab_back_mtrl_am_alpha),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",goback,""String_Node_Str"",true,""String_Node_Str""));
      }
      adapter=new Recycleradapter(ma,bitmap,ma.getActivity());
      mSwipeRefreshLayout.setRefreshing(false);
      try {
        listView.setAdapter(adapter);
        if (!addheader && islist) {
          listView.removeItemDecoration(dividerItemDecoration);
          listView.removeItemDecoration(headersDecor);
          addheader=true;
        }
        if (addheader && islist) {
          dividerItemDecoration=new DividerItemDecoration(getActivity(),DividerItemDecoration.VERTICAL_LIST);
          listView.addItemDecoration(dividerItemDecoration);
          headersDecor=new StickyRecyclerHeadersDecoration(adapter);
          listView.addItemDecoration(headersDecor);
          addheader=false;
        }
        results=false;
        current=f.getPath();
        if (back) {
          if (scrolls.containsKey(current)) {
            Bundle b=scrolls.get(current);
            if (islist)             mLayoutManager.scrollToPositionWithOffset(b.getInt(""String_Node_Str""),b.getInt(""String_Node_Str""));
 else             mLayoutManagerGrid.scrollToPositionWithOffset(b.getInt(""String_Node_Str""),b.getInt(""String_Node_Str""));
          }
        }
        mainActivity.updatepaths();
        listView.setOnScrollListener(new HidingScrollListener(getActivity(),hidemode){
          @Override public void onMoved(          int distance){
            mToolbarContainer.setTranslationY(-distance);
          }
          @Override public void onShow(){
            mToolbarContainer.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
          }
          @Override public void onHide(){
            mToolbarContainer.findViewById(R.id.lin).animate().translationY(-mToolbarHeight).setInterpolator(new AccelerateInterpolator(2)).start();
          }
        }
);
        if (buttons.getVisibility() == View.VISIBLE)         mainActivity.bbar();
        mainActivity.updateDrawer(current);
        mainActivity.updatepager();
      }
 catch (      Exception e) {
      }
    }
 else {
      loadlist(new File(current),true);
    }
  }
 catch (  Exception e) {
  }
}","public void createViews(ArrayList<Layoutelements> bitmap,boolean back,File f){
  try {
    if (bitmap != null) {
      TextView footerText=(TextView)footerView.findViewById(R.id.footerText);
      if (bitmap.size() == 0) {
        footerText.setText(res.getString(R.string.nofiles));
      }
 else {
        footerText.setText(res.getString(R.string.tapnhold));
      }
      if (gobackitem)       if (!f.getPath().equals(""String_Node_Str"")) {
        if (bitmap.size() == 0 || !bitmap.get(0).getSize().equals(goback))         bitmap.add(0,utils.newElement(res.getDrawable(R.drawable.abc_ic_ab_back_mtrl_am_alpha),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",goback,""String_Node_Str"",true,""String_Node_Str""));
      }
      adapter=new Recycleradapter(ma,bitmap,ma.getActivity());
      mSwipeRefreshLayout.setRefreshing(false);
      try {
        listView.setAdapter(adapter);
        if (!addheader && islist) {
          listView.removeItemDecoration(dividerItemDecoration);
          listView.removeItemDecoration(headersDecor);
          addheader=true;
        }
        if (addheader && islist) {
          dividerItemDecoration=new DividerItemDecoration(getActivity(),DividerItemDecoration.VERTICAL_LIST);
          listView.addItemDecoration(dividerItemDecoration);
          headersDecor=new StickyRecyclerHeadersDecoration(adapter);
          listView.addItemDecoration(headersDecor);
          addheader=false;
        }
        results=false;
        current=f.getPath();
        if (back) {
          if (scrolls.containsKey(current)) {
            Bundle b=scrolls.get(current);
            if (islist)             mLayoutManager.scrollToPositionWithOffset(b.getInt(""String_Node_Str""),b.getInt(""String_Node_Str""));
 else             mLayoutManagerGrid.scrollToPositionWithOffset(b.getInt(""String_Node_Str""),b.getInt(""String_Node_Str""));
          }
        }
        mainActivity.updatepaths();
        listView.setOnScrollListener(scrollListener);
        if (buttons.getVisibility() == View.VISIBLE)         mainActivity.bbar();
        mainActivity.updateDrawer(current);
        mainActivity.updatepager();
      }
 catch (      Exception e) {
      }
    }
 else {
      loadlist(new File(current),true);
    }
  }
 catch (  Exception e) {
  }
}",0.8917647058823529
162583,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(false);
  mainActivity=(MainActivity)getActivity();
  utils=new Futils();
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  color=calculatevalues(x);
  ColorMatrix colorMatrix=new ColorMatrix(calculatefilter(color));
  colorMatrixColorFilter=new ColorMatrixColorFilter(colorMatrix);
  history=new HistoryManager(getActivity(),""String_Node_Str"");
  hidden=new HistoryManager(getActivity(),""String_Node_Str"");
  hiddenfiles=hidden.readTable();
  rootMode=Sp.getBoolean(""String_Node_Str"",false);
  showHidden=Sp.getBoolean(""String_Node_Str"",false);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  if (islist) {
    folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  }
 else {
    folder=res.getDrawable(R.drawable.ic_grid_folder1);
  }
  folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  getSortModes();
  darkimage=res.getDrawable(R.drawable.ic_doc_image_dark);
  darkvideo=res.getDrawable(R.drawable.ic_doc_video_dark);
  this.setRetainInstance(false);
  File f;
  if (savepaths)   f=new File(current);
 else   f=new File(home);
  mainActivity.initiatebbar();
  scroll=(HorizontalScrollView)rootView.findViewById(R.id.scroll);
  scroll1=(HorizontalScrollView)rootView.findViewById(R.id.scroll1);
  footerView=getActivity().getLayoutInflater().inflate(R.layout.divider,null);
  mSwipeRefreshLayout=(SwipeRefreshLayout)rootView.findViewById(R.id.activity_main_swipe_refresh_layout);
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      loadlist(new File(current),false);
    }
  }
);
  if (savedInstanceState == null) {
    if (Intentpath != null) {
      File file1=new File(Intentpath);
      if (file1.isDirectory()) {
        loadlist(file1,false);
      }
 else {
        utils.openFile(file1,mainActivity);
        loadlist(f,false);
      }
    }
 else {
      loadlist(f,false);
    }
  }
 else {
    Bundle b=new Bundle();
    String cur=savedInstanceState.getString(""String_Node_Str"");
    if (cur != null) {
      b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
      b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
      scrolls.put(cur,b);
      list=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
      if (savedInstanceState.getBoolean(""String_Node_Str"")) {
        try {
          results=true;
          slist=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
          ((TextView)ma.pathbar.findViewById(R.id.pathname)).setText(ma.utils.getString(ma.getActivity(),R.string.searchresults));
          ma.adapter=new Recycleradapter(ma,slist,ma.getActivity());
          ma.listView.setAdapter(ma.adapter);
          ma.results=true;
        }
 catch (        Exception e) {
        }
      }
 else {
        createViews(list,true,new File(cur));
      }
      if (savedInstanceState.getBoolean(""String_Node_Str"")) {
        for (        int i : savedInstanceState.getIntegerArrayList(""String_Node_Str"")) {
          adapter.toggleChecked(i);
        }
      }
    }
  }
  mSwipeRefreshLayout.setProgressViewOffset(true,paddingTop,paddingTop + dpToPx(72));
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(false);
  mainActivity=(MainActivity)getActivity();
  utils=new Futils();
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  color=calculatevalues(x);
  ColorMatrix colorMatrix=new ColorMatrix(calculatefilter(color));
  colorMatrixColorFilter=new ColorMatrixColorFilter(colorMatrix);
  history=new HistoryManager(getActivity(),""String_Node_Str"");
  hidden=new HistoryManager(getActivity(),""String_Node_Str"");
  hiddenfiles=hidden.readTable();
  rootMode=Sp.getBoolean(""String_Node_Str"",false);
  showHidden=Sp.getBoolean(""String_Node_Str"",false);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  if (islist) {
    folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  }
 else {
    folder=res.getDrawable(R.drawable.ic_grid_folder1);
  }
  folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  getSortModes();
  darkimage=res.getDrawable(R.drawable.ic_doc_image_dark);
  darkvideo=res.getDrawable(R.drawable.ic_doc_video_dark);
  this.setRetainInstance(false);
  File f;
  if (savepaths)   f=new File(current);
 else   f=new File(home);
  mainActivity.initiatebbar();
  scroll=(HorizontalScrollView)rootView.findViewById(R.id.scroll);
  scroll1=(HorizontalScrollView)rootView.findViewById(R.id.scroll1);
  footerView=getActivity().getLayoutInflater().inflate(R.layout.divider,null);
  mSwipeRefreshLayout=(SwipeRefreshLayout)rootView.findViewById(R.id.activity_main_swipe_refresh_layout);
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      loadlist(new File(current),false);
    }
  }
);
  if (savedInstanceState == null) {
    if (Intentpath != null) {
      File file1=new File(Intentpath);
      if (file1.isDirectory()) {
        loadlist(file1,false);
      }
 else {
        utils.openFile(file1,mainActivity);
        loadlist(f,false);
      }
    }
 else {
      loadlist(f,false);
    }
  }
 else {
    Bundle b=new Bundle();
    String cur=savedInstanceState.getString(""String_Node_Str"");
    if (cur != null) {
      b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
      b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
      scrolls.put(cur,b);
      list=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
      if (savedInstanceState.getBoolean(""String_Node_Str"")) {
        try {
          results=true;
          slist=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
          ((TextView)ma.pathbar.findViewById(R.id.pathname)).setText(ma.utils.getString(ma.getActivity(),R.string.searchresults));
          ma.adapter=new Recycleradapter(ma,slist,ma.getActivity());
          ma.listView.setAdapter(ma.adapter);
          ma.results=true;
        }
 catch (        Exception e) {
        }
      }
 else {
        createViews(list,true,new File(cur));
      }
      if (savedInstanceState.getBoolean(""String_Node_Str"")) {
        for (        int i : savedInstanceState.getIntegerArrayList(""String_Node_Str"")) {
          adapter.toggleChecked(i);
        }
      }
    }
  }
  mToolbarHeight=getToolbarHeight(getActivity());
  paddingTop=(mToolbarHeight) + dpToPx(72);
  if (hidemode == 2)   mToolbarHeight=paddingTop;
  mToolbarContainer.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
        mToolbarContainer.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      }
 else {
        mToolbarContainer.getViewTreeObserver().removeGlobalOnLayoutListener(this);
      }
      paddingTop=mToolbarContainer.getHeight();
      if (hidemode != 2)       mToolbarHeight=mainActivity.toolbar.getHeight();
      if (scrollListener != null)       scrollListener.updatedimens(mToolbarHeight);
    }
  }
);
  scrollListener=new HidingScrollListener(mToolbarHeight){
    @Override public void onMoved(    int distance){
      mToolbarContainer.setTranslationY(-distance);
    }
    @Override public void onShow(){
      mToolbarContainer.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
    }
    @Override public void onHide(){
      mToolbarContainer.findViewById(R.id.lin).animate().translationY(-mToolbarHeight).setInterpolator(new AccelerateInterpolator(2)).start();
    }
  }
;
  mSwipeRefreshLayout.setProgressViewOffset(true,paddingTop,paddingTop + dpToPx(72));
}",0.8335643190122213
162584,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  rootView=inflater.inflate(R.layout.main_frag,container,false);
  listView=(android.support.v7.widget.RecyclerView)rootView.findViewById(R.id.listView);
  if (getArguments() != null)   Intentpath=getArguments().getString(""String_Node_Str"");
  animation=AnimationUtils.loadAnimation(getActivity(),R.anim.load_list_anim);
  animation1=AnimationUtils.loadAnimation(getActivity(),R.anim.fab_newtab);
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  buttons=(LinearLayout)getActivity().findViewById(R.id.buttons);
  pathbar=(LinearLayout)getActivity().findViewById(R.id.pathbar);
  showThumbs=Sp.getBoolean(""String_Node_Str"",true);
  ic=new IconHolder(getActivity(),showThumbs,!islist);
  res=getResources();
  goback=res.getString(R.string.goback);
  itemsstring=res.getString(R.string.items);
  apk=res.getDrawable(R.drawable.ic_doc_apk_grid);
  if (theme1 == 1) {
    mainActivity.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.holo_dark_background)));
  }
 else {
    if (islist)     mainActivity.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(android.R.color.background_light)));
  }
  listView.setHasFixedSize(true);
  mLayoutManager=new LinearLayoutManager(getActivity());
  int columns=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  mLayoutManagerGrid=new GridLayoutManager(getActivity(),columns);
  if (islist) {
    listView.setLayoutManager(mLayoutManager);
  }
 else {
    listView.setLayoutManager(mLayoutManagerGrid);
  }
  paddingTop=(mToolbarHeight=getToolbarHeight(getActivity())) + dpToPx(72);
  if (hidemode == 2)   mToolbarHeight=paddingTop;
  mToolbarContainer.setBackgroundColor(Color.parseColor(skin));
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  rootView=inflater.inflate(R.layout.main_frag,container,false);
  listView=(android.support.v7.widget.RecyclerView)rootView.findViewById(R.id.listView);
  if (getArguments() != null)   Intentpath=getArguments().getString(""String_Node_Str"");
  animation=AnimationUtils.loadAnimation(getActivity(),R.anim.load_list_anim);
  animation1=AnimationUtils.loadAnimation(getActivity(),R.anim.fab_newtab);
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  buttons=(LinearLayout)getActivity().findViewById(R.id.buttons);
  pathbar=(LinearLayout)getActivity().findViewById(R.id.pathbar);
  showThumbs=Sp.getBoolean(""String_Node_Str"",true);
  ic=new IconHolder(getActivity(),showThumbs,!islist);
  res=getResources();
  goback=res.getString(R.string.goback);
  itemsstring=res.getString(R.string.items);
  apk=res.getDrawable(R.drawable.ic_doc_apk_grid);
  if (theme1 == 1) {
    mainActivity.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.holo_dark_background)));
  }
 else {
    if (islist)     mainActivity.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(android.R.color.background_light)));
  }
  listView.setHasFixedSize(true);
  mLayoutManager=new LinearLayoutManager(getActivity());
  int columns=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  mLayoutManagerGrid=new GridLayoutManager(getActivity(),columns);
  if (islist) {
    listView.setLayoutManager(mLayoutManager);
  }
 else {
    listView.setLayoutManager(mLayoutManagerGrid);
  }
  mToolbarContainer.setBackgroundColor(Color.parseColor(skin));
  return rootView;
}",0.936205931729155
162585,"public void createviews(ArrayList<FileHeader> zipEntries,String dir){
  zipViewer.zipAdapter=new RarAdapter(zipViewer.getActivity(),zipEntries,zipViewer);
  zipViewer.listView.setAdapter(zipViewer.zipAdapter);
  if (!addheader) {
    listView.removeItemDecoration(dividerItemDecoration);
    listView.removeItemDecoration(headersDecor);
    addheader=true;
  }
  if (addheader) {
    dividerItemDecoration=new DividerItemDecoration(getActivity(),DividerItemDecoration.VERTICAL_LIST);
    listView.addItemDecoration(dividerItemDecoration);
    headersDecor=new StickyRecyclerHeadersDecoration(zipAdapter);
    listView.addItemDecoration(headersDecor);
    addheader=false;
  }
  listView.setOnScrollListener(new HidingScrollListener(getActivity(),hidemode){
    @Override public void onMoved(    int distance){
      mToolbarContainer.setTranslationY(-distance);
    }
    @Override public void onShow(){
      mToolbarContainer.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
    }
    @Override public void onHide(){
      mToolbarContainer.findViewById(R.id.lin).animate().translationY(-mToolbarHeight).setInterpolator(new AccelerateInterpolator(2)).start();
    }
  }
);
  zipViewer.current=dir;
  zipViewer.bbar();
  swipeRefreshLayout.setRefreshing(false);
}","public void createviews(ArrayList<FileHeader> zipEntries,String dir){
  zipViewer.zipAdapter=new RarAdapter(zipViewer.getActivity(),zipEntries,zipViewer);
  zipViewer.listView.setAdapter(zipViewer.zipAdapter);
  if (!addheader) {
    listView.removeItemDecoration(dividerItemDecoration);
    listView.removeItemDecoration(headersDecor);
    addheader=true;
  }
  if (addheader) {
    dividerItemDecoration=new DividerItemDecoration(getActivity(),DividerItemDecoration.VERTICAL_LIST);
    listView.addItemDecoration(dividerItemDecoration);
    headersDecor=new StickyRecyclerHeadersDecoration(zipAdapter);
    listView.addItemDecoration(headersDecor);
    addheader=false;
  }
  listView.setOnScrollListener(scrollListener);
  zipViewer.current=dir;
  zipViewer.bbar();
  swipeRefreshLayout.setRefreshing(false);
}",0.7696682464454976
162586,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  s=getArguments().getString(""String_Node_Str"");
  f=new File(s);
  listView.setVisibility(View.VISIBLE);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  listView.setVisibility(View.VISIBLE);
  mLayoutManager=new LinearLayoutManager(getActivity());
  listView.setLayoutManager(mLayoutManager);
  if (mainActivity.theme1 == 1)   rootView.setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
 else   listView.setBackgroundColor(getResources().getColor(android.R.color.background_light));
  gobackitem=Sp.getBoolean(""String_Node_Str"",true);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  Calendar calendar=Calendar.getInstance();
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  iconskin=Sp.getString(""String_Node_Str"",skin);
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  files=new ArrayList<File>();
  loadlist(f.getPath());
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  hidemode=Sp.getInt(""String_Node_Str"",0);
  paddingTop=(mToolbarHeight=getToolbarHeight(getActivity())) + dpToPx(72);
  try {
    mainActivity.toolbar.setTitle(f.getName());
  }
 catch (  Exception e) {
    mainActivity.toolbar.setTitle(getResources().getString(R.string.zip_viewer));
  }
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.fabHideAnim=AnimationUtils.loadAnimation(getActivity(),R.anim.fab_hide);
  mainActivity.floatingActionButton.setAnimation(mainActivity.fabHideAnim);
  mainActivity.floatingActionButton.animate();
  mainActivity.floatingActionButton.setVisibility(View.GONE);
  mainActivity.supportInvalidateOptionsMenu();
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  s=getArguments().getString(""String_Node_Str"");
  f=new File(s);
  listView.setVisibility(View.VISIBLE);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  listView.setVisibility(View.VISIBLE);
  mLayoutManager=new LinearLayoutManager(getActivity());
  listView.setLayoutManager(mLayoutManager);
  if (mainActivity.theme1 == 1)   rootView.setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
 else   listView.setBackgroundColor(getResources().getColor(android.R.color.background_light));
  gobackitem=Sp.getBoolean(""String_Node_Str"",true);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  Calendar calendar=Calendar.getInstance();
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  iconskin=Sp.getString(""String_Node_Str"",skin);
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  files=new ArrayList<File>();
  loadlist(f.getPath());
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  hidemode=Sp.getInt(""String_Node_Str"",0);
  try {
    mainActivity.toolbar.setTitle(f.getName());
  }
 catch (  Exception e) {
    mainActivity.toolbar.setTitle(getResources().getString(R.string.zip_viewer));
  }
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.fabHideAnim=AnimationUtils.loadAnimation(getActivity(),R.anim.fab_hide);
  mainActivity.floatingActionButton.setAnimation(mainActivity.fabHideAnim);
  mainActivity.floatingActionButton.animate();
  mainActivity.floatingActionButton.setVisibility(View.GONE);
  mainActivity.supportInvalidateOptionsMenu();
  mToolbarHeight=getToolbarHeight(getActivity());
  paddingTop=(mToolbarHeight) + dpToPx(72);
  if (hidemode == 2)   mToolbarHeight=paddingTop;
  mToolbarContainer.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
        mToolbarContainer.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      }
 else {
        mToolbarContainer.getViewTreeObserver().removeGlobalOnLayoutListener(this);
      }
      paddingTop=mToolbarContainer.getHeight();
      if (hidemode != 2)       mToolbarHeight=mainActivity.toolbar.getHeight();
      if (scrollListener != null)       scrollListener.updatedimens(mToolbarHeight);
    }
  }
);
  scrollListener=new HidingScrollListener(mToolbarHeight){
    @Override public void onMoved(    int distance){
      mToolbarContainer.setTranslationY(-distance);
    }
    @Override public void onShow(){
      mToolbarContainer.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
    }
    @Override public void onHide(){
      mToolbarContainer.findViewById(R.id.lin).animate().translationY(-mToolbarHeight).setInterpolator(new AccelerateInterpolator(2)).start();
    }
  }
;
}",0.72656097083578
162587,"public void createviews(ArrayList<ZipObj> zipEntries,String dir){
  zipViewer.zipAdapter=new ZipAdapter(zipViewer.getActivity(),zipEntries,zipViewer);
  zipViewer.listView.setAdapter(zipViewer.zipAdapter);
  if (!addheader) {
    listView.removeItemDecoration(dividerItemDecoration);
    listView.removeItemDecoration(headersDecor);
    addheader=true;
  }
  if (addheader) {
    dividerItemDecoration=new DividerItemDecoration(getActivity(),DividerItemDecoration.VERTICAL_LIST);
    listView.addItemDecoration(dividerItemDecoration);
    headersDecor=new StickyRecyclerHeadersDecoration(zipAdapter);
    listView.addItemDecoration(headersDecor);
    addheader=false;
  }
  listView.setOnScrollListener(new HidingScrollListener(getActivity(),hidemode){
    @Override public void onMoved(    int distance){
      mToolbarContainer.setTranslationY(-distance);
    }
    @Override public void onShow(){
      mToolbarContainer.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
    }
    @Override public void onHide(){
      mToolbarContainer.findViewById(R.id.lin).animate().translationY(-mToolbarHeight).setInterpolator(new AccelerateInterpolator(2)).start();
    }
  }
);
  zipViewer.current=dir;
  zipViewer.bbar();
  swipeRefreshLayout.setRefreshing(false);
}","public void createviews(ArrayList<ZipObj> zipEntries,String dir){
  zipViewer.zipAdapter=new ZipAdapter(zipViewer.getActivity(),zipEntries,zipViewer);
  zipViewer.listView.setAdapter(zipViewer.zipAdapter);
  if (!addheader) {
    listView.removeItemDecoration(dividerItemDecoration);
    listView.removeItemDecoration(headersDecor);
    addheader=true;
  }
  if (addheader) {
    dividerItemDecoration=new DividerItemDecoration(getActivity(),DividerItemDecoration.VERTICAL_LIST);
    listView.addItemDecoration(dividerItemDecoration);
    headersDecor=new StickyRecyclerHeadersDecoration(zipAdapter);
    listView.addItemDecoration(headersDecor);
    addheader=false;
  }
  listView.setOnScrollListener(scrollListener);
  zipViewer.current=dir;
  zipViewer.bbar();
  swipeRefreshLayout.setRefreshing(false);
}",0.768791627021884
162588,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  s=getArguments().getString(""String_Node_Str"");
  f=new File(s);
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  hidemode=Sp.getInt(""String_Node_Str"",0);
  paddingTop=(mToolbarHeight=getToolbarHeight(getActivity())) + dpToPx(72);
  listView.setVisibility(View.VISIBLE);
  mLayoutManager=new LinearLayoutManager(getActivity());
  listView.setLayoutManager(mLayoutManager);
  mainActivity.supportInvalidateOptionsMenu();
  if (mainActivity.theme1 == 1)   rootView.setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
 else   listView.setBackgroundColor(getResources().getColor(android.R.color.background_light));
  gobackitem=Sp.getBoolean(""String_Node_Str"",true);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  Calendar calendar=Calendar.getInstance();
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  iconskin=Sp.getString(""String_Node_Str"",skin);
  mainActivity.findViewById(R.id.buttonbarframe).setBackgroundColor(Color.parseColor(skin));
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  files=new ArrayList<File>();
  if (savedInstanceState == null)   loadlist(f.getPath());
 else {
    wholelist=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    elements=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    current=savedInstanceState.getString(""String_Node_Str"");
    f=new File(savedInstanceState.getString(""String_Node_Str""));
    createviews(elements,current);
  }
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.fabHideAnim=AnimationUtils.loadAnimation(getActivity(),R.anim.fab_hide);
  mainActivity.floatingActionButton.setAnimation(mainActivity.fabHideAnim);
  mainActivity.floatingActionButton.animate();
  mainActivity.floatingActionButton.setVisibility(View.GONE);
  try {
    mainActivity.toolbar.setTitle(f.getName());
  }
 catch (  Exception e) {
    mainActivity.toolbar.setTitle(getResources().getString(R.string.zip_viewer));
  }
  mainActivity.supportInvalidateOptionsMenu();
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  s=getArguments().getString(""String_Node_Str"");
  f=new File(s);
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  hidemode=Sp.getInt(""String_Node_Str"",0);
  listView.setVisibility(View.VISIBLE);
  mLayoutManager=new LinearLayoutManager(getActivity());
  listView.setLayoutManager(mLayoutManager);
  mainActivity.supportInvalidateOptionsMenu();
  if (mainActivity.theme1 == 1)   rootView.setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
 else   listView.setBackgroundColor(getResources().getColor(android.R.color.background_light));
  gobackitem=Sp.getBoolean(""String_Node_Str"",true);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  Calendar calendar=Calendar.getInstance();
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  iconskin=Sp.getString(""String_Node_Str"",skin);
  mainActivity.findViewById(R.id.buttonbarframe).setBackgroundColor(Color.parseColor(skin));
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  files=new ArrayList<File>();
  if (savedInstanceState == null)   loadlist(f.getPath());
 else {
    wholelist=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    elements=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    current=savedInstanceState.getString(""String_Node_Str"");
    f=new File(savedInstanceState.getString(""String_Node_Str""));
    createviews(elements,current);
  }
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.fabHideAnim=AnimationUtils.loadAnimation(getActivity(),R.anim.fab_hide);
  mainActivity.floatingActionButton.setAnimation(mainActivity.fabHideAnim);
  mainActivity.floatingActionButton.animate();
  mainActivity.floatingActionButton.setVisibility(View.GONE);
  try {
    mainActivity.toolbar.setTitle(f.getName());
  }
 catch (  Exception e) {
    mainActivity.toolbar.setTitle(getResources().getString(R.string.zip_viewer));
  }
  mainActivity.supportInvalidateOptionsMenu();
  mToolbarHeight=getToolbarHeight(getActivity());
  paddingTop=(mToolbarHeight) + dpToPx(72);
  if (hidemode == 2)   mToolbarHeight=paddingTop;
  mToolbarContainer.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
        mToolbarContainer.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      }
 else {
        mToolbarContainer.getViewTreeObserver().removeGlobalOnLayoutListener(this);
      }
      paddingTop=mToolbarContainer.getHeight();
      if (hidemode != 2)       mToolbarHeight=mainActivity.toolbar.getHeight();
      if (scrollListener != null)       scrollListener.updatedimens(mToolbarHeight);
    }
  }
);
  scrollListener=new HidingScrollListener(mToolbarHeight){
    @Override public void onMoved(    int distance){
      mToolbarContainer.setTranslationY(-distance);
    }
    @Override public void onShow(){
      mToolbarContainer.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
    }
    @Override public void onHide(){
      mToolbarContainer.findViewById(R.id.lin).animate().translationY(-mToolbarHeight).setInterpolator(new AccelerateInterpolator(2)).start();
    }
  }
;
}",0.7681327800829876
162589,"public HidingScrollListener(Context context,int mode){
switch (mode) {
case HIDE_NONE:
    mToolbarHeight=0;
  break;
case HIDE_TOOLBAR:
mToolbarHeight=getToolbarHeight(context);
break;
case HIDE_WHOLE_BAR:
mToolbarHeight=getToolbarHeight(context) + dpToPx(72,context);
break;
}
}","public HidingScrollListener(int mToolbarHeight){
  this.mToolbarHeight=mToolbarHeight;
}",0.4456521739130434
162590,"public ArrayList<Layoutelements> addToSmb(SmbFile[] mFile) throws SmbException {
  ArrayList<Layoutelements> a=new ArrayList<Layoutelements>();
  smbFiles=new ArrayList<SmbFile>();
  for (int i=0; i < mFile.length; i++) {
    smbFiles.add(mFile[i]);
    if (mFile[i].isDirectory()) {
      a.add(new Layoutelements(folder,mFile[i].getName(),mFile[i].getPath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"",true));
    }
 else {
      try {
        a.add(new Layoutelements(Icons.loadMimeIcon(getActivity(),mFile[i].getPath(),!islist),mFile[i].getName(),mFile[i].getPath(),""String_Node_Str"",""String_Node_Str"",utils.readableFileSize(mFile[i].length()),false,""String_Node_Str"",false));
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  return a;
}","public ArrayList<Layoutelements> addToSmb(SmbFile[] mFile) throws SmbException {
  Log.e(""String_Node_Str"",mFile.length + ""String_Node_Str"");
  ArrayList<Layoutelements> a=new ArrayList<Layoutelements>();
  smbFiles=new ArrayList<SmbFile>();
  for (int i=0; i < mFile.length; i++) {
    smbFiles.add(mFile[i]);
    if (mFile[i].isDirectory()) {
      a.add(new Layoutelements(folder,mFile[i].getName(),mFile[i].getPath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"",true));
    }
 else {
      try {
        a.add(new Layoutelements(Icons.loadMimeIcon(getActivity(),mFile[i].getPath(),!islist),mFile[i].getName(),mFile[i].getPath(),""String_Node_Str"",""String_Node_Str"",utils.readableFileSize(mFile[i].length()),false,""String_Node_Str"",false));
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  Log.e(""String_Node_Str"",a.size() + ""String_Node_Str"");
  return a;
}",0.9322617680826636
162591,"public void onListItemClicked(int position,View v){
  if (results) {
    String path=list.get(position).getDesc();
    if (selection)     adapter.toggleChecked(position);
 else {
      final File f=new File(path);
      if (list.get(position).isDirectory()) {
        loadlist(f,false);
        results=false;
      }
 else {
        if (mainActivity.mReturnIntent) {
          returnIntentResults(f);
        }
 else         utils.openFile(f,(MainActivity)getActivity());
      }
    }
  }
 else   if (selection == true) {
    if (!list.get(position).getSize().equals(goback)) {
      adapter.toggleChecked(position);
    }
 else {
      selection=false;
      if (mActionMode != null)       mActionMode.finish();
      mActionMode=null;
    }
  }
 else {
    if (!list.get(position).getSize().equals(goback)) {
      String path;
      Layoutelements l=list.get(position);
      if (!l.hasSymlink()) {
        path=l.getDesc();
      }
 else {
        path=l.getSymlink();
      }
      final File f=new File(path);
      if (l.isDirectory()) {
        computeScroll();
        loadlist(f,false);
      }
 else {
        if (mainActivity.mReturnIntent) {
          returnIntentResults(f);
        }
 else {
          utils.openFile(f,(MainActivity)getActivity());
        }
      }
    }
 else {
      goBackItemClick();
    }
  }
}","public void onListItemClicked(int position,View v){
  if (results) {
    String path=list.get(position).getDesc();
    if (selection)     adapter.toggleChecked(position);
 else {
      final File f=new File(path);
      if (list.get(position).isDirectory()) {
        loadlist(f,false);
        results=false;
      }
 else {
        if (mainActivity.mReturnIntent) {
          returnIntentResults(f);
        }
 else         utils.openFile(f,(MainActivity)getActivity());
      }
    }
  }
 else   if (smbMode) {
    if (selection)     adapter.toggleChecked(position);
 else {
      Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
      loadSmblist(smbFiles.get(position),false);
    }
  }
 else   if (selection == true) {
    if (!list.get(position).getSize().equals(goback)) {
      adapter.toggleChecked(position);
    }
 else {
      selection=false;
      if (mActionMode != null)       mActionMode.finish();
      mActionMode=null;
    }
  }
 else {
    if (!list.get(position).getSize().equals(goback)) {
      String path;
      Layoutelements l=list.get(position);
      if (!l.hasSymlink()) {
        path=l.getDesc();
      }
 else {
        path=l.getSymlink();
      }
      final File f=new File(path);
      if (l.isDirectory()) {
        computeScroll();
        loadlist(f,false);
      }
 else {
        if (mainActivity.mReturnIntent) {
          returnIntentResults(f);
        }
 else {
          utils.openFile(f,(MainActivity)getActivity());
        }
      }
    }
 else {
      goBackItemClick();
    }
  }
}",0.921907394609537
162592,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(false);
  mainActivity=(MainActivity)getActivity();
  utils=new Futils();
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  color=calculatevalues(x);
  ColorMatrix colorMatrix=new ColorMatrix(calculatefilter(color));
  colorMatrixColorFilter=new ColorMatrixColorFilter(colorMatrix);
  history=new HistoryManager(getActivity(),""String_Node_Str"");
  hidden=new HistoryManager(getActivity(),""String_Node_Str"");
  hiddenfiles=hidden.readTable();
  rootMode=Sp.getBoolean(""String_Node_Str"",false);
  showHidden=Sp.getBoolean(""String_Node_Str"",false);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  if (islist) {
    folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  }
 else {
    folder=res.getDrawable(R.drawable.ic_grid_folder1);
  }
  folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  getSortModes();
  darkimage=res.getDrawable(R.drawable.ic_doc_image_dark);
  darkvideo=res.getDrawable(R.drawable.ic_doc_video_dark);
  this.setRetainInstance(false);
  File f;
  if (savepaths)   f=new File(current);
 else   f=new File(home);
  mainActivity.initiatebbar();
  scroll=(HorizontalScrollView)rootView.findViewById(R.id.scroll);
  scroll1=(HorizontalScrollView)rootView.findViewById(R.id.scroll1);
  footerView=getActivity().getLayoutInflater().inflate(R.layout.divider,null);
  mSwipeRefreshLayout=(SwipeRefreshLayout)rootView.findViewById(R.id.activity_main_swipe_refresh_layout);
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      loadlist(new File(current),false);
    }
  }
);
  if (savedInstanceState == null) {
    if (Intentpath != null) {
      File file1=new File(Intentpath);
      if (file1.isDirectory()) {
        loadlist(file1,false);
      }
 else {
        utils.openFile(file1,mainActivity);
        loadlist(f,false);
      }
    }
 else {
      loadlist(f,false);
    }
  }
 else {
    Bundle b=new Bundle();
    String cur=savedInstanceState.getString(""String_Node_Str"");
    if (cur != null) {
      b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
      b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
      scrolls.put(cur,b);
      list=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
      if (savedInstanceState.getBoolean(""String_Node_Str"")) {
        try {
          createViews(list,true,new File(current));
          ((TextView)ma.pathbar.findViewById(R.id.pathname)).setText(ma.utils.getString(ma.getActivity(),R.string.searchresults));
          results=true;
        }
 catch (        Exception e) {
        }
      }
 else {
        createViews(list,true,new File(cur));
      }
      if (savedInstanceState.getBoolean(""String_Node_Str"")) {
        for (        int i : savedInstanceState.getIntegerArrayList(""String_Node_Str"")) {
          adapter.toggleChecked(i);
        }
      }
    }
  }
  mToolbarHeight=getToolbarHeight(getActivity());
  paddingTop=(mToolbarHeight) + dpToPx(72);
  if (hidemode == 2)   mToolbarHeight=paddingTop;
  mToolbarContainer.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
        mToolbarContainer.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      }
 else {
        mToolbarContainer.getViewTreeObserver().removeGlobalOnLayoutListener(this);
      }
      paddingTop=mToolbarContainer.getHeight();
      if (hidemode != 2)       mToolbarHeight=mainActivity.toolbar.getHeight();
    }
  }
);
  mSwipeRefreshLayout.setColorSchemeColors(Color.parseColor(fabSkin));
  mSwipeRefreshLayout.setProgressViewOffset(true,paddingTop,paddingTop + dpToPx(72));
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(false);
  mainActivity=(MainActivity)getActivity();
  utils=new Futils();
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  color=calculatevalues(x);
  ColorMatrix colorMatrix=new ColorMatrix(calculatefilter(color));
  colorMatrixColorFilter=new ColorMatrixColorFilter(colorMatrix);
  history=new HistoryManager(getActivity(),""String_Node_Str"");
  hidden=new HistoryManager(getActivity(),""String_Node_Str"");
  hiddenfiles=hidden.readTable();
  rootMode=Sp.getBoolean(""String_Node_Str"",false);
  showHidden=Sp.getBoolean(""String_Node_Str"",false);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  if (islist) {
    folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  }
 else {
    folder=res.getDrawable(R.drawable.ic_grid_folder1);
  }
  folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  getSortModes();
  darkimage=res.getDrawable(R.drawable.ic_doc_image_dark);
  darkvideo=res.getDrawable(R.drawable.ic_doc_video_dark);
  this.setRetainInstance(false);
  File f;
  if (savepaths)   f=new File(current);
 else   f=new File(home);
  mainActivity.initiatebbar();
  scroll=(HorizontalScrollView)rootView.findViewById(R.id.scroll);
  scroll1=(HorizontalScrollView)rootView.findViewById(R.id.scroll1);
  footerView=getActivity().getLayoutInflater().inflate(R.layout.divider,null);
  mSwipeRefreshLayout=(SwipeRefreshLayout)rootView.findViewById(R.id.activity_main_swipe_refresh_layout);
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      loadlist(new File(current),false);
    }
  }
);
  mToolbarHeight=getToolbarHeight(getActivity());
  paddingTop=(mToolbarHeight) + dpToPx(72);
  if (hidemode == 2)   mToolbarHeight=paddingTop;
  mToolbarContainer.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
        mToolbarContainer.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      }
 else {
        mToolbarContainer.getViewTreeObserver().removeGlobalOnLayoutListener(this);
      }
      paddingTop=mToolbarContainer.getHeight();
      if (hidemode != 2)       mToolbarHeight=mainActivity.toolbar.getHeight();
    }
  }
);
  mSwipeRefreshLayout.setColorSchemeColors(Color.parseColor(fabSkin));
  mSwipeRefreshLayout.setProgressViewOffset(true,paddingTop,paddingTop + dpToPx(72));
  if (savedInstanceState == null) {
    if (Intentpath != null) {
      File file1=new File(Intentpath);
      if (file1.isDirectory()) {
        loadlist(file1,false);
      }
 else {
        utils.openFile(file1,mainActivity);
        loadlist(f,false);
      }
    }
 else {
      loadlist(f,false);
    }
  }
 else {
    Bundle b=new Bundle();
    String cur=savedInstanceState.getString(""String_Node_Str"");
    if (cur != null) {
      b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
      b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
      scrolls.put(cur,b);
      retreiveSmbFromSavedInstance(savedInstanceState);
      list=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
      if (savedInstanceState.getBoolean(""String_Node_Str"")) {
        try {
          createViews(list,true,new File(current));
          ((TextView)ma.pathbar.findViewById(R.id.pathname)).setText(ma.utils.getString(ma.getActivity(),R.string.searchresults));
          results=true;
        }
 catch (        Exception e) {
        }
      }
 else {
        createViews(list,true,new File(cur));
      }
      if (savedInstanceState.getBoolean(""String_Node_Str"")) {
        for (        int i : savedInstanceState.getIntegerArrayList(""String_Node_Str"")) {
          adapter.toggleChecked(i);
        }
      }
    }
  }
}",0.6616238023197176
162593,"@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  int index;
  View vi;
  if (listView != null) {
    if (islist) {
      index=(mLayoutManager).findFirstVisibleItemPosition();
      vi=listView.getChildAt(0);
    }
 else {
      index=(mLayoutManagerGrid).findFirstVisibleItemPosition();
      vi=listView.getChildAt(0);
    }
    int top=(vi == null) ? 0 : vi.getTop();
    outState.putInt(""String_Node_Str"",index);
    outState.putInt(""String_Node_Str"",top);
    outState.putParcelableArrayList(""String_Node_Str"",list);
    outState.putString(""String_Node_Str"",current);
    outState.putBoolean(""String_Node_Str"",selection);
    if (selection) {
      outState.putIntegerArrayList(""String_Node_Str"",adapter.getCheckedItemPositions());
    }
    if (results) {
      outState.putBoolean(""String_Node_Str"",results);
    }
  }
}","@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  int index;
  View vi;
  if (listView != null) {
    if (islist) {
      index=(mLayoutManager).findFirstVisibleItemPosition();
      vi=listView.getChildAt(0);
    }
 else {
      index=(mLayoutManagerGrid).findFirstVisibleItemPosition();
      vi=listView.getChildAt(0);
    }
    int top=(vi == null) ? 0 : vi.getTop();
    outState.putInt(""String_Node_Str"",index);
    outState.putInt(""String_Node_Str"",top);
    outState.putParcelableArrayList(""String_Node_Str"",list);
    outState.putString(""String_Node_Str"",current);
    outState.putBoolean(""String_Node_Str"",selection);
    if (selection) {
      outState.putIntegerArrayList(""String_Node_Str"",adapter.getCheckedItemPositions());
    }
    if (results) {
      outState.putBoolean(""String_Node_Str"",results);
    }
    if (smbMode)     addSmbToSavedInstance(outState,smbUser,smbPass,smbFiles,SmbAnonym);
  }
}",0.9518137520303196
162594,"public SmbFile connectingWithSmbServer(String[] auth,boolean anonym){
  try {
    String yourPeerIP=auth[0];
    String path=""String_Node_Str"" + yourPeerIP;
    SmbFile smbFile;
    if (anonym) {
      smbFile=new SmbFile(path,NtlmPasswordAuthentication.ANONYMOUS);
    }
 else {
      NtlmPasswordAuthentication auth1=new NtlmPasswordAuthentication(null,auth[1],auth[2]);
      smbFile=new SmbFile(path,auth1);
    }
    return smbFile;
  }
 catch (  Exception e) {
    e.printStackTrace();
    Log.e(""String_Node_Str"",e.getMessage());
    return null;
  }
}","public SmbFile connectingWithSmbServer(String[] auth,boolean anonym){
  try {
    String yourPeerIP=auth[0];
    String path=""String_Node_Str"" + yourPeerIP;
    smbPath=path;
    SmbFile smbFile;
    if (anonym) {
      SmbAnonym=true;
      smbFile=new SmbFile(path,NtlmPasswordAuthentication.ANONYMOUS);
    }
 else {
      SmbAnonym=false;
      smbUser=auth[1];
      smbPass=auth[2];
      NtlmPasswordAuthentication auth1=new NtlmPasswordAuthentication(null,auth[1],auth[2]);
      smbFile=new SmbFile(path,auth1);
    }
    return smbFile;
  }
 catch (  Exception e) {
    e.printStackTrace();
    Log.e(""String_Node_Str"",e.getMessage());
    return null;
  }
}",0.9111654441727792
162595,"@Override protected void onPreExecute(){
  ma.history.addPath(ma.current);
}","@Override protected void onPreExecute(){
  Log.e(""String_Node_Str"",""String_Node_Str"");
  ma.history.addPath(ma.current);
}",0.7676767676767676
162596,"@Override protected ArrayList<Layoutelements> doInBackground(SmbFile... params){
  f=params[0];
  ma.list=new ArrayList<Layoutelements>();
  try {
    ma.list=ma.addToSmb(f.listFiles());
    return ma.list;
  }
 catch (  Exception e) {
    publishProgress(e.getMessage());
    return null;
  }
}","@Override protected ArrayList<Layoutelements> doInBackground(SmbFile... params){
  Log.e(""String_Node_Str"",""String_Node_Str"");
  f=params[0];
  Log.e(""String_Node_Str"",f.getPath());
  ma.list=new ArrayList<Layoutelements>();
  try {
    SmbFile[] smbFile=f.listFiles();
    Log.e(""String_Node_Str"",""String_Node_Str"" + smbFile.length);
    ma.list=ma.addToSmb(smbFile);
    return ma.list;
  }
 catch (  Exception e) {
    publishProgress(e.getMessage());
    e.printStackTrace();
    return null;
  }
}",0.7001254705144291
162597,"@Override protected void onPostExecute(ArrayList<Layoutelements> bitmap){
  if (isCancelled()) {
    bitmap=null;
  }
  ma.createViews(bitmap,back,new File(f.getPath()));
  ma.listView.setVisibility(View.VISIBLE);
}","@Override protected void onPostExecute(ArrayList<Layoutelements> bitmap){
  if (isCancelled()) {
    bitmap=null;
  }
  Log.e(""String_Node_Str"",""String_Node_Str"");
  ma.createViews(bitmap,back,new File(f.getPath()));
  ma.smbPath=f.getPath();
  ma.smbMode=true;
  ma.listView.setVisibility(View.VISIBLE);
}",0.8253358925143954
162598,"public void createViews(ArrayList<Layoutelements> bitmap,boolean back,File f){
  try {
    if (bitmap != null) {
      TextView footerText=(TextView)footerView.findViewById(R.id.footerText);
      if (bitmap.size() == 0) {
        footerText.setText(res.getString(R.string.nofiles));
      }
 else {
        footerText.setText(res.getString(R.string.tapnhold));
      }
      if (gobackitem)       if (!f.getPath().equals(""String_Node_Str"")) {
        if (bitmap.size() == 0 || !bitmap.get(0).getSize().equals(goback))         bitmap.add(0,utils.newElement(res.getDrawable(R.drawable.abc_ic_ab_back_mtrl_am_alpha),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",goback,""String_Node_Str"",true,""String_Node_Str""));
      }
      adapter=new Recycleradapter(ma,bitmap,ma.getActivity());
      mSwipeRefreshLayout.setRefreshing(false);
      try {
        listView.setAdapter(adapter);
        if (!addheader && islist) {
          listView.removeItemDecoration(dividerItemDecoration);
          listView.removeItemDecoration(headersDecor);
          addheader=true;
        }
        if (addheader && islist) {
          dividerItemDecoration=new DividerItemDecoration(getActivity(),DividerItemDecoration.VERTICAL_LIST);
          listView.addItemDecoration(dividerItemDecoration);
          headersDecor=new StickyRecyclerHeadersDecoration(adapter);
          listView.addItemDecoration(headersDecor);
          addheader=false;
        }
        results=false;
        current=f.getPath();
        if (back) {
          if (scrolls.containsKey(current)) {
            Bundle b=scrolls.get(current);
            if (islist)             mLayoutManager.scrollToPositionWithOffset(b.getInt(""String_Node_Str""),b.getInt(""String_Node_Str""));
 else             mLayoutManagerGrid.scrollToPositionWithOffset(b.getInt(""String_Node_Str""),b.getInt(""String_Node_Str""));
          }
        }
        mainActivity.updatepaths();
        listView.setOnScrollListener(scrollListener);
        if (buttons.getVisibility() == View.VISIBLE)         mainActivity.bbar();
        mainActivity.updateDrawer(current);
        mainActivity.updatepager();
      }
 catch (      Exception e) {
      }
    }
 else {
      loadlist(new File(current),true);
    }
  }
 catch (  Exception e) {
  }
}","public void createViews(ArrayList<Layoutelements> bitmap,boolean back,File f){
  try {
    if (bitmap != null) {
      TextView footerText=(TextView)footerView.findViewById(R.id.footerText);
      if (bitmap.size() == 0) {
        footerText.setText(res.getString(R.string.nofiles));
      }
 else {
        footerText.setText(res.getString(R.string.tapnhold));
      }
      if (gobackitem)       if (!f.getPath().equals(""String_Node_Str"")) {
        if (bitmap.size() == 0 || !bitmap.get(0).getSize().equals(goback))         bitmap.add(0,utils.newElement(res.getDrawable(R.drawable.abc_ic_ab_back_mtrl_am_alpha),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",goback,""String_Node_Str"",true,""String_Node_Str""));
      }
      adapter=new Recycleradapter(ma,bitmap,ma.getActivity());
      mSwipeRefreshLayout.setRefreshing(false);
      try {
        listView.setAdapter(adapter);
        if (!addheader && islist) {
          listView.removeItemDecoration(dividerItemDecoration);
          listView.removeItemDecoration(headersDecor);
          addheader=true;
        }
        if (addheader && islist) {
          dividerItemDecoration=new DividerItemDecoration(getActivity(),DividerItemDecoration.VERTICAL_LIST);
          listView.addItemDecoration(dividerItemDecoration);
          headersDecor=new StickyRecyclerHeadersDecoration(adapter);
          listView.addItemDecoration(headersDecor);
          addheader=false;
        }
        results=false;
        current=f.getPath();
        if (back) {
          if (scrolls.containsKey(current)) {
            Bundle b=scrolls.get(current);
            if (islist)             mLayoutManager.scrollToPositionWithOffset(b.getInt(""String_Node_Str""),b.getInt(""String_Node_Str""));
 else             mLayoutManagerGrid.scrollToPositionWithOffset(b.getInt(""String_Node_Str""),b.getInt(""String_Node_Str""));
          }
        }
        mainActivity.updatepaths();
        listView.setOnScrollListener(new HidingScrollListener(mToolbarHeight,hidemode){
          @Override public void onMoved(          int distance){
            mToolbarContainer.setTranslationY(-distance);
          }
          @Override public void onShow(){
            mToolbarContainer.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
          }
          @Override public void onHide(){
            mToolbarContainer.findViewById(R.id.lin).animate().translationY(-mToolbarHeight).setInterpolator(new AccelerateInterpolator(2)).start();
          }
        }
);
        if (buttons.getVisibility() == View.VISIBLE)         mainActivity.bbar();
        mainActivity.updateDrawer(current);
        mainActivity.updatepager();
      }
 catch (      Exception e) {
      }
    }
 else {
      loadlist(new File(current),true);
    }
  }
 catch (  Exception e) {
  }
}",0.8915898843364046
162599,"@Override public void onGlobalLayout(){
  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
    mToolbarContainer.getViewTreeObserver().removeOnGlobalLayoutListener(this);
  }
 else {
    mToolbarContainer.getViewTreeObserver().removeGlobalOnLayoutListener(this);
  }
  paddingTop=mToolbarContainer.getHeight();
  if (hidemode != 2)   mToolbarHeight=mainActivity.toolbar.getHeight();
  if (scrollListener != null)   scrollListener.updatedimens(mToolbarHeight);
}","@Override public void onGlobalLayout(){
  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
    mToolbarContainer.getViewTreeObserver().removeOnGlobalLayoutListener(this);
  }
 else {
    mToolbarContainer.getViewTreeObserver().removeGlobalOnLayoutListener(this);
  }
  paddingTop=mToolbarContainer.getHeight();
  if (hidemode != 2)   mToolbarHeight=mainActivity.toolbar.getHeight();
}",0.916030534351145
162600,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(false);
  mainActivity=(MainActivity)getActivity();
  utils=new Futils();
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  color=calculatevalues(x);
  ColorMatrix colorMatrix=new ColorMatrix(calculatefilter(color));
  colorMatrixColorFilter=new ColorMatrixColorFilter(colorMatrix);
  history=new HistoryManager(getActivity(),""String_Node_Str"");
  hidden=new HistoryManager(getActivity(),""String_Node_Str"");
  hiddenfiles=hidden.readTable();
  rootMode=Sp.getBoolean(""String_Node_Str"",false);
  showHidden=Sp.getBoolean(""String_Node_Str"",false);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  if (islist) {
    folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  }
 else {
    folder=res.getDrawable(R.drawable.ic_grid_folder1);
  }
  folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  getSortModes();
  darkimage=res.getDrawable(R.drawable.ic_doc_image_dark);
  darkvideo=res.getDrawable(R.drawable.ic_doc_video_dark);
  this.setRetainInstance(false);
  File f;
  if (savepaths)   f=new File(current);
 else   f=new File(home);
  mainActivity.initiatebbar();
  scroll=(HorizontalScrollView)rootView.findViewById(R.id.scroll);
  scroll1=(HorizontalScrollView)rootView.findViewById(R.id.scroll1);
  footerView=getActivity().getLayoutInflater().inflate(R.layout.divider,null);
  mSwipeRefreshLayout=(SwipeRefreshLayout)rootView.findViewById(R.id.activity_main_swipe_refresh_layout);
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      loadlist(new File(current),false);
    }
  }
);
  if (savedInstanceState == null) {
    if (Intentpath != null) {
      File file1=new File(Intentpath);
      if (file1.isDirectory()) {
        loadlist(file1,false);
      }
 else {
        utils.openFile(file1,mainActivity);
        loadlist(f,false);
      }
    }
 else {
      loadlist(f,false);
    }
  }
 else {
    Bundle b=new Bundle();
    String cur=savedInstanceState.getString(""String_Node_Str"");
    if (cur != null) {
      b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
      b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
      scrolls.put(cur,b);
      list=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
      if (savedInstanceState.getBoolean(""String_Node_Str"")) {
        try {
          results=true;
          slist=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
          ((TextView)ma.pathbar.findViewById(R.id.pathname)).setText(ma.utils.getString(ma.getActivity(),R.string.searchresults));
          ma.adapter=new Recycleradapter(ma,slist,ma.getActivity());
          ma.listView.setAdapter(ma.adapter);
          ma.results=true;
        }
 catch (        Exception e) {
        }
      }
 else {
        createViews(list,true,new File(cur));
      }
      if (savedInstanceState.getBoolean(""String_Node_Str"")) {
        for (        int i : savedInstanceState.getIntegerArrayList(""String_Node_Str"")) {
          adapter.toggleChecked(i);
        }
      }
    }
  }
  mToolbarHeight=getToolbarHeight(getActivity());
  paddingTop=(mToolbarHeight) + dpToPx(72);
  if (hidemode == 2)   mToolbarHeight=paddingTop;
  mToolbarContainer.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
        mToolbarContainer.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      }
 else {
        mToolbarContainer.getViewTreeObserver().removeGlobalOnLayoutListener(this);
      }
      paddingTop=mToolbarContainer.getHeight();
      if (hidemode != 2)       mToolbarHeight=mainActivity.toolbar.getHeight();
      if (scrollListener != null)       scrollListener.updatedimens(mToolbarHeight);
    }
  }
);
  scrollListener=new HidingScrollListener(mToolbarHeight){
    @Override public void onMoved(    int distance){
      mToolbarContainer.setTranslationY(-distance);
    }
    @Override public void onShow(){
      mToolbarContainer.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
    }
    @Override public void onHide(){
      mToolbarContainer.findViewById(R.id.lin).animate().translationY(-mToolbarHeight).setInterpolator(new AccelerateInterpolator(2)).start();
    }
  }
;
  mSwipeRefreshLayout.setProgressViewOffset(true,paddingTop,paddingTop + dpToPx(72));
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(false);
  mainActivity=(MainActivity)getActivity();
  utils=new Futils();
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  color=calculatevalues(x);
  ColorMatrix colorMatrix=new ColorMatrix(calculatefilter(color));
  colorMatrixColorFilter=new ColorMatrixColorFilter(colorMatrix);
  history=new HistoryManager(getActivity(),""String_Node_Str"");
  hidden=new HistoryManager(getActivity(),""String_Node_Str"");
  hiddenfiles=hidden.readTable();
  rootMode=Sp.getBoolean(""String_Node_Str"",false);
  showHidden=Sp.getBoolean(""String_Node_Str"",false);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  if (islist) {
    folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  }
 else {
    folder=res.getDrawable(R.drawable.ic_grid_folder1);
  }
  folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  getSortModes();
  darkimage=res.getDrawable(R.drawable.ic_doc_image_dark);
  darkvideo=res.getDrawable(R.drawable.ic_doc_video_dark);
  this.setRetainInstance(false);
  File f;
  if (savepaths)   f=new File(current);
 else   f=new File(home);
  mainActivity.initiatebbar();
  scroll=(HorizontalScrollView)rootView.findViewById(R.id.scroll);
  scroll1=(HorizontalScrollView)rootView.findViewById(R.id.scroll1);
  footerView=getActivity().getLayoutInflater().inflate(R.layout.divider,null);
  mSwipeRefreshLayout=(SwipeRefreshLayout)rootView.findViewById(R.id.activity_main_swipe_refresh_layout);
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      loadlist(new File(current),false);
    }
  }
);
  if (savedInstanceState == null) {
    if (Intentpath != null) {
      File file1=new File(Intentpath);
      if (file1.isDirectory()) {
        loadlist(file1,false);
      }
 else {
        utils.openFile(file1,mainActivity);
        loadlist(f,false);
      }
    }
 else {
      loadlist(f,false);
    }
  }
 else {
    Bundle b=new Bundle();
    String cur=savedInstanceState.getString(""String_Node_Str"");
    if (cur != null) {
      b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
      b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
      scrolls.put(cur,b);
      list=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
      if (savedInstanceState.getBoolean(""String_Node_Str"")) {
        try {
          results=true;
          slist=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
          ((TextView)ma.pathbar.findViewById(R.id.pathname)).setText(ma.utils.getString(ma.getActivity(),R.string.searchresults));
          ma.adapter=new Recycleradapter(ma,slist,ma.getActivity());
          ma.listView.setAdapter(ma.adapter);
          ma.results=true;
        }
 catch (        Exception e) {
        }
      }
 else {
        createViews(list,true,new File(cur));
      }
      if (savedInstanceState.getBoolean(""String_Node_Str"")) {
        for (        int i : savedInstanceState.getIntegerArrayList(""String_Node_Str"")) {
          adapter.toggleChecked(i);
        }
      }
    }
  }
  mToolbarHeight=getToolbarHeight(getActivity());
  paddingTop=(mToolbarHeight) + dpToPx(72);
  if (hidemode == 2)   mToolbarHeight=paddingTop;
  mToolbarContainer.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
        mToolbarContainer.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      }
 else {
        mToolbarContainer.getViewTreeObserver().removeGlobalOnLayoutListener(this);
      }
      paddingTop=mToolbarContainer.getHeight();
      if (hidemode != 2)       mToolbarHeight=mainActivity.toolbar.getHeight();
    }
  }
);
  mSwipeRefreshLayout.setProgressViewOffset(true,paddingTop,paddingTop + dpToPx(72));
}",0.9314404432132964
162601,"@Override public void onGlobalLayout(){
  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
    mToolbarContainer.getViewTreeObserver().removeOnGlobalLayoutListener(this);
  }
 else {
    mToolbarContainer.getViewTreeObserver().removeGlobalOnLayoutListener(this);
  }
  paddingTop=mToolbarContainer.getHeight();
  if (hidemode != 2)   mToolbarHeight=mainActivity.toolbar.getHeight();
  if (scrollListener != null)   scrollListener.updatedimens(mToolbarHeight);
}","@Override public void onGlobalLayout(){
  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
    mToolbarContainer.getViewTreeObserver().removeOnGlobalLayoutListener(this);
  }
 else {
    mToolbarContainer.getViewTreeObserver().removeGlobalOnLayoutListener(this);
  }
  paddingTop=mToolbarContainer.getHeight();
  if (hidemode != 2)   mToolbarHeight=mainActivity.toolbar.getHeight();
}",0.916030534351145
162602,"public void createviews(ArrayList<FileHeader> zipEntries,String dir){
  zipViewer.zipAdapter=new RarAdapter(zipViewer.getActivity(),zipEntries,zipViewer);
  zipViewer.listView.setAdapter(zipViewer.zipAdapter);
  if (!addheader) {
    listView.removeItemDecoration(dividerItemDecoration);
    listView.removeItemDecoration(headersDecor);
    addheader=true;
  }
  if (addheader) {
    dividerItemDecoration=new DividerItemDecoration(getActivity(),DividerItemDecoration.VERTICAL_LIST);
    listView.addItemDecoration(dividerItemDecoration);
    headersDecor=new StickyRecyclerHeadersDecoration(zipAdapter);
    listView.addItemDecoration(headersDecor);
    addheader=false;
  }
  listView.setOnScrollListener(scrollListener);
  zipViewer.current=dir;
  zipViewer.bbar();
  swipeRefreshLayout.setRefreshing(false);
}","public void createviews(ArrayList<FileHeader> zipEntries,String dir){
  zipViewer.zipAdapter=new RarAdapter(zipViewer.getActivity(),zipEntries,zipViewer);
  zipViewer.listView.setAdapter(zipViewer.zipAdapter);
  if (!addheader) {
    listView.removeItemDecoration(dividerItemDecoration);
    listView.removeItemDecoration(headersDecor);
    addheader=true;
  }
  if (addheader) {
    dividerItemDecoration=new DividerItemDecoration(getActivity(),DividerItemDecoration.VERTICAL_LIST);
    listView.addItemDecoration(dividerItemDecoration);
    headersDecor=new StickyRecyclerHeadersDecoration(zipAdapter);
    listView.addItemDecoration(headersDecor);
    addheader=false;
  }
  listView.setOnScrollListener(new HidingScrollListener(mToolbarHeight,hidemode){
    @Override public void onMoved(    int distance){
      mToolbarContainer.setTranslationY(-distance);
    }
    @Override public void onShow(){
      mToolbarContainer.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
    }
    @Override public void onHide(){
      mToolbarContainer.findViewById(R.id.lin).animate().translationY(-mToolbarHeight).setInterpolator(new AccelerateInterpolator(2)).start();
    }
  }
);
  zipViewer.current=dir;
  zipViewer.bbar();
  swipeRefreshLayout.setRefreshing(false);
}",0.7693036475603979
162603,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  s=getArguments().getString(""String_Node_Str"");
  f=new File(s);
  listView.setVisibility(View.VISIBLE);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  listView.setVisibility(View.VISIBLE);
  mLayoutManager=new LinearLayoutManager(getActivity());
  listView.setLayoutManager(mLayoutManager);
  if (mainActivity.theme1 == 1)   rootView.setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
 else   listView.setBackgroundColor(getResources().getColor(android.R.color.background_light));
  gobackitem=Sp.getBoolean(""String_Node_Str"",true);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  Calendar calendar=Calendar.getInstance();
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  iconskin=Sp.getString(""String_Node_Str"",skin);
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  files=new ArrayList<File>();
  loadlist(f.getPath());
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  hidemode=Sp.getInt(""String_Node_Str"",0);
  try {
    mainActivity.toolbar.setTitle(f.getName());
  }
 catch (  Exception e) {
    mainActivity.toolbar.setTitle(getResources().getString(R.string.zip_viewer));
  }
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.fabHideAnim=AnimationUtils.loadAnimation(getActivity(),R.anim.fab_hide);
  mainActivity.floatingActionButton.setAnimation(mainActivity.fabHideAnim);
  mainActivity.floatingActionButton.animate();
  mainActivity.floatingActionButton.setVisibility(View.GONE);
  mainActivity.supportInvalidateOptionsMenu();
  mToolbarHeight=getToolbarHeight(getActivity());
  paddingTop=(mToolbarHeight) + dpToPx(72);
  if (hidemode == 2)   mToolbarHeight=paddingTop;
  mToolbarContainer.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
        mToolbarContainer.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      }
 else {
        mToolbarContainer.getViewTreeObserver().removeGlobalOnLayoutListener(this);
      }
      paddingTop=mToolbarContainer.getHeight();
      if (hidemode != 2)       mToolbarHeight=mainActivity.toolbar.getHeight();
      if (scrollListener != null)       scrollListener.updatedimens(mToolbarHeight);
    }
  }
);
  scrollListener=new HidingScrollListener(mToolbarHeight){
    @Override public void onMoved(    int distance){
      mToolbarContainer.setTranslationY(-distance);
    }
    @Override public void onShow(){
      mToolbarContainer.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
    }
    @Override public void onHide(){
      mToolbarContainer.findViewById(R.id.lin).animate().translationY(-mToolbarHeight).setInterpolator(new AccelerateInterpolator(2)).start();
    }
  }
;
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  s=getArguments().getString(""String_Node_Str"");
  f=new File(s);
  listView.setVisibility(View.VISIBLE);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  listView.setVisibility(View.VISIBLE);
  mLayoutManager=new LinearLayoutManager(getActivity());
  listView.setLayoutManager(mLayoutManager);
  if (mainActivity.theme1 == 1)   rootView.setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
 else   listView.setBackgroundColor(getResources().getColor(android.R.color.background_light));
  gobackitem=Sp.getBoolean(""String_Node_Str"",true);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  Calendar calendar=Calendar.getInstance();
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  iconskin=Sp.getString(""String_Node_Str"",skin);
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  files=new ArrayList<File>();
  loadlist(f.getPath());
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  hidemode=Sp.getInt(""String_Node_Str"",0);
  try {
    mainActivity.toolbar.setTitle(f.getName());
  }
 catch (  Exception e) {
    mainActivity.toolbar.setTitle(getResources().getString(R.string.zip_viewer));
  }
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.fabHideAnim=AnimationUtils.loadAnimation(getActivity(),R.anim.fab_hide);
  mainActivity.floatingActionButton.setAnimation(mainActivity.fabHideAnim);
  mainActivity.floatingActionButton.animate();
  mainActivity.floatingActionButton.setVisibility(View.GONE);
  mainActivity.supportInvalidateOptionsMenu();
  mToolbarHeight=getToolbarHeight(getActivity());
  paddingTop=(mToolbarHeight) + dpToPx(72);
  if (hidemode == 2)   mToolbarHeight=paddingTop;
  mToolbarContainer.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
        mToolbarContainer.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      }
 else {
        mToolbarContainer.getViewTreeObserver().removeGlobalOnLayoutListener(this);
      }
      paddingTop=mToolbarContainer.getHeight();
      if (hidemode != 2)       mToolbarHeight=mainActivity.toolbar.getHeight();
    }
  }
);
}",0.896875
162604,"@Override public void onGlobalLayout(){
  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
    mToolbarContainer.getViewTreeObserver().removeOnGlobalLayoutListener(this);
  }
 else {
    mToolbarContainer.getViewTreeObserver().removeGlobalOnLayoutListener(this);
  }
  paddingTop=mToolbarContainer.getHeight();
  if (hidemode != 2)   mToolbarHeight=mainActivity.toolbar.getHeight();
  if (scrollListener != null)   scrollListener.updatedimens(mToolbarHeight);
}","@Override public void onGlobalLayout(){
  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
    mToolbarContainer.getViewTreeObserver().removeOnGlobalLayoutListener(this);
  }
 else {
    mToolbarContainer.getViewTreeObserver().removeGlobalOnLayoutListener(this);
  }
  paddingTop=mToolbarContainer.getHeight();
  if (hidemode != 2)   mToolbarHeight=mainActivity.toolbar.getHeight();
}",0.916030534351145
162605,"public void createviews(ArrayList<ZipObj> zipEntries,String dir){
  zipViewer.zipAdapter=new ZipAdapter(zipViewer.getActivity(),zipEntries,zipViewer);
  zipViewer.listView.setAdapter(zipViewer.zipAdapter);
  if (!addheader) {
    listView.removeItemDecoration(dividerItemDecoration);
    listView.removeItemDecoration(headersDecor);
    addheader=true;
  }
  if (addheader) {
    dividerItemDecoration=new DividerItemDecoration(getActivity(),DividerItemDecoration.VERTICAL_LIST);
    listView.addItemDecoration(dividerItemDecoration);
    headersDecor=new StickyRecyclerHeadersDecoration(zipAdapter);
    listView.addItemDecoration(headersDecor);
    addheader=false;
  }
  listView.setOnScrollListener(scrollListener);
  zipViewer.current=dir;
  zipViewer.bbar();
  swipeRefreshLayout.setRefreshing(false);
}","public void createviews(ArrayList<ZipObj> zipEntries,String dir){
  zipViewer.zipAdapter=new ZipAdapter(zipViewer.getActivity(),zipEntries,zipViewer);
  zipViewer.listView.setAdapter(zipViewer.zipAdapter);
  if (!addheader) {
    listView.removeItemDecoration(dividerItemDecoration);
    listView.removeItemDecoration(headersDecor);
    addheader=true;
  }
  if (addheader) {
    dividerItemDecoration=new DividerItemDecoration(getActivity(),DividerItemDecoration.VERTICAL_LIST);
    listView.addItemDecoration(dividerItemDecoration);
    headersDecor=new StickyRecyclerHeadersDecoration(zipAdapter);
    listView.addItemDecoration(headersDecor);
    addheader=false;
  }
  listView.setOnScrollListener(new HidingScrollListener(mToolbarHeight,hidemode){
    @Override public void onMoved(    int distance){
      mToolbarContainer.setTranslationY(-distance);
    }
    @Override public void onShow(){
      mToolbarContainer.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
    }
    @Override public void onHide(){
      mToolbarContainer.findViewById(R.id.lin).animate().translationY(-mToolbarHeight).setInterpolator(new AccelerateInterpolator(2)).start();
    }
  }
);
  zipViewer.current=dir;
  zipViewer.bbar();
  swipeRefreshLayout.setRefreshing(false);
}",0.7684260580123633
162606,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  s=getArguments().getString(""String_Node_Str"");
  f=new File(s);
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  hidemode=Sp.getInt(""String_Node_Str"",0);
  listView.setVisibility(View.VISIBLE);
  mLayoutManager=new LinearLayoutManager(getActivity());
  listView.setLayoutManager(mLayoutManager);
  mainActivity.supportInvalidateOptionsMenu();
  if (mainActivity.theme1 == 1)   rootView.setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
 else   listView.setBackgroundColor(getResources().getColor(android.R.color.background_light));
  gobackitem=Sp.getBoolean(""String_Node_Str"",true);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  Calendar calendar=Calendar.getInstance();
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  iconskin=Sp.getString(""String_Node_Str"",skin);
  mainActivity.findViewById(R.id.buttonbarframe).setBackgroundColor(Color.parseColor(skin));
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  files=new ArrayList<File>();
  if (savedInstanceState == null)   loadlist(f.getPath());
 else {
    wholelist=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    elements=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    current=savedInstanceState.getString(""String_Node_Str"");
    f=new File(savedInstanceState.getString(""String_Node_Str""));
    createviews(elements,current);
  }
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.fabHideAnim=AnimationUtils.loadAnimation(getActivity(),R.anim.fab_hide);
  mainActivity.floatingActionButton.setAnimation(mainActivity.fabHideAnim);
  mainActivity.floatingActionButton.animate();
  mainActivity.floatingActionButton.setVisibility(View.GONE);
  try {
    mainActivity.toolbar.setTitle(f.getName());
  }
 catch (  Exception e) {
    mainActivity.toolbar.setTitle(getResources().getString(R.string.zip_viewer));
  }
  mainActivity.supportInvalidateOptionsMenu();
  mToolbarHeight=getToolbarHeight(getActivity());
  paddingTop=(mToolbarHeight) + dpToPx(72);
  if (hidemode == 2)   mToolbarHeight=paddingTop;
  mToolbarContainer.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
        mToolbarContainer.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      }
 else {
        mToolbarContainer.getViewTreeObserver().removeGlobalOnLayoutListener(this);
      }
      paddingTop=mToolbarContainer.getHeight();
      if (hidemode != 2)       mToolbarHeight=mainActivity.toolbar.getHeight();
      if (scrollListener != null)       scrollListener.updatedimens(mToolbarHeight);
    }
  }
);
  scrollListener=new HidingScrollListener(mToolbarHeight){
    @Override public void onMoved(    int distance){
      mToolbarContainer.setTranslationY(-distance);
    }
    @Override public void onShow(){
      mToolbarContainer.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
    }
    @Override public void onHide(){
      mToolbarContainer.findViewById(R.id.lin).animate().translationY(-mToolbarHeight).setInterpolator(new AccelerateInterpolator(2)).start();
    }
  }
;
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  s=getArguments().getString(""String_Node_Str"");
  f=new File(s);
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  hidemode=Sp.getInt(""String_Node_Str"",0);
  listView.setVisibility(View.VISIBLE);
  mLayoutManager=new LinearLayoutManager(getActivity());
  listView.setLayoutManager(mLayoutManager);
  mainActivity.supportInvalidateOptionsMenu();
  if (mainActivity.theme1 == 1)   rootView.setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
 else   listView.setBackgroundColor(getResources().getColor(android.R.color.background_light));
  gobackitem=Sp.getBoolean(""String_Node_Str"",true);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  Calendar calendar=Calendar.getInstance();
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  iconskin=Sp.getString(""String_Node_Str"",skin);
  mainActivity.findViewById(R.id.buttonbarframe).setBackgroundColor(Color.parseColor(skin));
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  files=new ArrayList<File>();
  if (savedInstanceState == null)   loadlist(f.getPath());
 else {
    wholelist=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    elements=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    current=savedInstanceState.getString(""String_Node_Str"");
    f=new File(savedInstanceState.getString(""String_Node_Str""));
    createviews(elements,current);
  }
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.fabHideAnim=AnimationUtils.loadAnimation(getActivity(),R.anim.fab_hide);
  mainActivity.floatingActionButton.setAnimation(mainActivity.fabHideAnim);
  mainActivity.floatingActionButton.animate();
  mainActivity.floatingActionButton.setVisibility(View.GONE);
  try {
    mainActivity.toolbar.setTitle(f.getName());
  }
 catch (  Exception e) {
    mainActivity.toolbar.setTitle(getResources().getString(R.string.zip_viewer));
  }
  mainActivity.supportInvalidateOptionsMenu();
  mToolbarHeight=getToolbarHeight(getActivity());
  paddingTop=(mToolbarHeight) + dpToPx(72);
  if (hidemode == 2)   mToolbarHeight=paddingTop;
  mToolbarContainer.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
        mToolbarContainer.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      }
 else {
        mToolbarContainer.getViewTreeObserver().removeGlobalOnLayoutListener(this);
      }
      paddingTop=mToolbarContainer.getHeight();
      if (hidemode != 2)       mToolbarHeight=mainActivity.toolbar.getHeight();
    }
  }
);
}",0.9110245656081486
162607,"public HidingScrollListener(int mToolbarHeight){
  this.mToolbarHeight=mToolbarHeight;
}","public HidingScrollListener(int mToolbarHeight,int mode){
  this.mToolbarHeight=mToolbarHeight;
  if (mode == 0)   this.mToolbarHeight=0;
}",0.775330396475771
162608,"public View getView(final int position,View convertView,ViewGroup parent){
  final Layoutelements rowItem=getItem(position);
  View view;
  final int p=position;
  if (convertView == null) {
    LayoutInflater mInflater=(LayoutInflater)context.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
    view=mInflater.inflate(R.layout.rowlayout,null);
    final ViewHolder vholder=new ViewHolder();
    vholder.txtTitle=(TextView)view.findViewById(R.id.firstline);
    vholder.imageView=(ImageView)view.findViewById(R.id.bicon);
    vholder.rl=(RelativeLayout)view.findViewById(R.id.second);
    vholder.txtDesc=(TextView)view.findViewById(R.id.date);
    vholder.imageView.setVisibility(View.VISIBLE);
    view.findViewById(R.id.icon).setVisibility(View.GONE);
    view.findViewById(R.id.cicon).setVisibility(View.GONE);
    view.setTag(vholder);
  }
 else {
    view=convertView;
  }
  final ViewHolder holder=(ViewHolder)view.getTag();
  holder.imageView.setImageDrawable(rowItem.getImageId());
  app.ic.cancelLoad(holder.imageView);
  app.ic.loadDrawable(holder.imageView,new File(rowItem.getDesc()),null);
  holder.txtTitle.setText(rowItem.getTitle());
  holder.txtDesc.setText(rowItem.getSize());
  holder.rl.setClickable(true);
  holder.rl.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View p1){
      if (app.selection == true) {
        toggleChecked(p);
        app.mActionMode.invalidate();
      }
 else {
        app.onLongItemClick(p);
      }
    }
  }
);
  holder.rl.setOnLongClickListener(new View.OnLongClickListener(){
    public boolean onLongClick(    View p1){
      app.onLongItemClick(p);
      return false;
    }
  }
);
  Boolean checked=myChecked.get(position);
  if (checked != null) {
    if (checked) {
      holder.rl.setBackgroundColor(Color.parseColor(""String_Node_Str""));
    }
 else {
      if (app.uimode == 0) {
        if (app.theme1 == 0) {
          holder.rl.setBackgroundResource(R.drawable.safr_ripple_white);
        }
 else {
          holder.rl.setBackgroundResource(R.drawable.safr_ripple_black);
        }
      }
 else       if (app.uimode == 1) {
        holder.rl.setBackgroundResource(R.drawable.bg_card);
      }
    }
  }
  return view;
}","public View getView(final int position,View convertView,ViewGroup parent){
  final Layoutelements rowItem=getItem(position);
  View view;
  final int p=position;
  if (convertView == null) {
    LayoutInflater mInflater=(LayoutInflater)context.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
    view=mInflater.inflate(R.layout.rowlayout,null);
    final ViewHolder vholder=new ViewHolder();
    vholder.txtTitle=(TextView)view.findViewById(R.id.firstline);
    vholder.imageView=(ImageView)view.findViewById(R.id.bicon);
    vholder.rl=(RelativeLayout)view.findViewById(R.id.second);
    vholder.txtDesc=(TextView)view.findViewById(R.id.date);
    vholder.imageView.setVisibility(View.VISIBLE);
    view.findViewById(R.id.icon).setVisibility(View.GONE);
    view.findViewById(R.id.cicon).setVisibility(View.GONE);
    view.setTag(vholder);
  }
 else {
    view=convertView;
  }
  final ViewHolder holder=(ViewHolder)view.getTag();
  holder.imageView.setImageDrawable(rowItem.getImageId());
  app.ic.cancelLoad(holder.imageView);
  app.ic.loadDrawable(holder.imageView,new File(rowItem.getDesc()),null);
  holder.txtTitle.setText(rowItem.getTitle());
  holder.txtDesc.setText(rowItem.getSize());
  holder.rl.setClickable(true);
  holder.rl.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View p1){
      if (app.selection == true) {
        toggleChecked(p);
        app.mActionMode.invalidate();
      }
 else {
        app.onLongItemClick(p);
      }
    }
  }
);
  holder.rl.setOnLongClickListener(new View.OnLongClickListener(){
    public boolean onLongClick(    View p1){
      app.onLongItemClick(p);
      return false;
    }
  }
);
  Boolean checked=myChecked.get(position);
  if (checked != null) {
    if (checked) {
      holder.rl.setBackgroundColor(Color.parseColor(""String_Node_Str""));
    }
 else {
      if (app.theme1 == 0) {
        holder.rl.setBackgroundResource(R.drawable.safr_ripple_white);
      }
 else {
        holder.rl.setBackgroundResource(R.drawable.safr_ripple_black);
      }
    }
  }
  return view;
}",0.9204200700116686
162609,"private boolean isPositionHeader(int position){
  return position == 0;
}","private boolean isPositionHeader(int position){
  if (main.islist)   return position == 0;
 else   return position == 0 || position == 1 || position == 2;
}",0.6375545851528385
162610,"@Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent,int viewType){
  View v;
  if (main.islist)   v=mInflater.inflate(R.layout.rowlayout,parent,false);
 else   v=mInflater.inflate(R.layout.griditem,parent,false);
  ViewHolder vh=new ViewHolder(v);
  if (main.theme1 == 1)   vh.txtTitle.setTextColor(main.getActivity().getResources().getColor(android.R.color.white));
  return vh;
}","@Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent,int viewType){
  if (viewType == 0) {
    View v=mInflater.inflate(R.layout.rowlayout,parent,false);
    return new ViewHolder(v);
  }
  View v;
  if (main.islist)   v=mInflater.inflate(R.layout.rowlayout,parent,false);
 else   v=mInflater.inflate(R.layout.griditem,parent,false);
  ViewHolder vh=new ViewHolder(v);
  if (main.theme1 == 1)   vh.txtTitle.setTextColor(main.getActivity().getResources().getColor(android.R.color.white));
  return vh;
}",0.871244635193133
162611,"@Override public void onBindViewHolder(RecyclerView.ViewHolder vholder,final int p1){
  final Recycleradapter.ViewHolder holder=((Recycleradapter.ViewHolder)vholder);
  if (p1 == 0) {
    holder.rl.setMinimumHeight(main.paddingTop);
    return;
  }
  final int p=p1 - 1;
  final Layoutelements rowItem=items.get(p);
  if (main.islist) {
    holder.rl.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        main.onListItemClicked(p,v);
      }
    }
);
    holder.rl.setOnLongClickListener(new View.OnLongClickListener(){
      public boolean onLongClick(      View p1){
        if (!rowItem.getSize().equals(main.goback)) {
          toggleChecked(p);
        }
        return true;
      }
    }
);
    filetype=-1;
    if (Icons.isPicture((rowItem.getDesc().toLowerCase())))     filetype=0;
 else     if (Icons.isApk((rowItem.getDesc())))     filetype=1;
 else     if (Icons.isVideo(rowItem.getDesc()))     filetype=2;
    holder.txtTitle.setText(rowItem.getTitle());
    holder.imageView.setImageDrawable(rowItem.getImageId());
    holder.ext.setText(""String_Node_Str"");
    holder.imageView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        final Animation animation=AnimationUtils.loadAnimation(context,R.anim.holder_anim);
        if (!rowItem.getSize().equals(main.goback)) {
          holder.imageView.setAnimation(animation);
          toggleChecked(p);
        }
 else         main.goBack();
      }
    }
);
    holder.viewmageV.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        if (!rowItem.getSize().equals(main.goback))         toggleChecked(p);
 else         main.goBack();
      }
    }
);
    holder.apk.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        if (!rowItem.getSize().equals(main.goback))         toggleChecked(p);
 else         main.goBack();
      }
    }
);
    holder.imageView.setVisibility(View.VISIBLE);
    holder.viewmageV.setVisibility(View.INVISIBLE);
    if (filetype == 0) {
      if (main.showThumbs) {
        if (main.circularImages) {
          holder.imageView.setVisibility(View.GONE);
          holder.apk.setVisibility(View.GONE);
          holder.viewmageV.setVisibility(View.VISIBLE);
          holder.viewmageV.setImageDrawable(main.darkimage);
          main.ic.cancelLoad(holder.viewmageV);
          main.ic.loadDrawable(holder.viewmageV,new File(rowItem.getDesc()),null);
        }
 else {
          holder.imageView.setVisibility(View.GONE);
          holder.apk.setVisibility(View.VISIBLE);
          holder.apk.setImageDrawable(main.darkimage);
          main.ic.cancelLoad(holder.apk);
          main.ic.loadDrawable(holder.apk,new File(rowItem.getDesc()),null);
        }
      }
    }
 else     if (filetype == 1) {
      if (main.showThumbs) {
        holder.viewmageV.setVisibility(View.GONE);
        holder.imageView.setVisibility(View.GONE);
        holder.apk.setVisibility(View.VISIBLE);
        holder.apk.setImageDrawable(main.apk);
        main.ic.cancelLoad(holder.apk);
        main.ic.loadDrawable(holder.apk,new File(rowItem.getDesc()),null);
      }
    }
 else     if (filetype == 2) {
      if (main.showThumbs) {
        if (main.circularImages) {
          holder.imageView.setVisibility(View.GONE);
          holder.viewmageV.setVisibility(View.VISIBLE);
          holder.viewmageV.setImageDrawable(main.darkvideo);
          main.ic.cancelLoad(holder.viewmageV);
          main.ic.loadDrawable(holder.viewmageV,new File(rowItem.getDesc()),null);
        }
 else {
          holder.imageView.setVisibility(View.GONE);
          holder.apk.setVisibility(View.VISIBLE);
          holder.apk.setImageDrawable(main.darkvideo);
          main.ic.cancelLoad(holder.apk);
          main.ic.loadDrawable(holder.apk,new File(rowItem.getDesc()),null);
        }
      }
    }
 else {
      holder.viewmageV.setVisibility(View.GONE);
      holder.apk.setVisibility(View.GONE);
    }
    Boolean checked=myChecked.get(p);
    if (checked != null) {
      if (main.uimode == 0) {
        if (main.theme1 == 0) {
          holder.rl.setBackgroundResource(R.drawable.safr_ripple_white);
        }
 else {
          holder.rl.setBackgroundResource(R.drawable.safr_ripple_black);
        }
      }
 else       if (main.uimode == 1) {
        holder.rl.setBackgroundResource(R.drawable.bg_card);
      }
      if (checked) {
        holder.apk.setVisibility(View.GONE);
        holder.viewmageV.setVisibility(View.GONE);
        holder.imageView.setVisibility(View.VISIBLE);
        holder.imageView.setImageDrawable(main.getResources().getDrawable(R.drawable.abc_ic_cab_done_holo_dark));
        GradientDrawable gradientDrawable=(GradientDrawable)holder.imageView.getBackground();
        gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
        holder.ext.setText(""String_Node_Str"");
        if (Build.VERSION.SDK_INT >= 21) {
          if (main.theme1 == 0) {
            holder.rl.setElevation(6f);
          }
 else {
            holder.rl.setBackgroundColor(context.getResources().getColor(R.color.safr_pressed_dark));
          }
        }
      }
 else {
        GradientDrawable gradientDrawable=(GradientDrawable)holder.imageView.getBackground();
        if (main.coloriseIcons) {
          if (rowItem.isDirectory(main.rootMode))           gradientDrawable.setColor(Color.parseColor(main.skin));
 else           if (Icons.isVideo(rowItem.getDesc()))           gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else           if (Icons.isAudio(rowItem.getDesc()))           gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else           if (Icons.isPdf(rowItem.getDesc()))           gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else           if (Icons.isCode(rowItem.getDesc()))           gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else           if (Icons.isText(rowItem.getDesc()))           gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else           if (Icons.isArchive(rowItem.getDesc()))           gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else           if (Icons.isgeneric(rowItem.getDesc())) {
            gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
            String ext=MimeTypes.getExtension(new File(rowItem.getDesc()).getName());
            if (ext != null && ext.trim().length() != 0) {
              holder.ext.setText(ext);
              holder.imageView.setImageDrawable(null);
            }
          }
 else {
            gradientDrawable.setColor(Color.parseColor(main.skin));
          }
        }
 else         gradientDrawable.setColor(Color.parseColor(main.skin));
        if (rowItem.getSize().equals(main.goback))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
        if (Build.VERSION.SDK_INT >= 21) {
          holder.rl.setElevation(0f);
        }
      }
    }
    if (main.showPermissions)     holder.perm.setText(rowItem.getPermissions());
    if (main.showLastModified)     holder.date.setText(rowItem.getDate());
    String size=rowItem.getSize();
    if (size.equals(main.goback)) {
      holder.date.setText(size);
      holder.txtDesc.setText(""String_Node_Str"");
    }
 else     if (main.showSize)     holder.txtDesc.setText(rowItem.getSize());
  }
 else {
    Boolean checked=myChecked.get(p);
    holder.rl.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        main.onListItemClicked(p,v);
      }
    }
);
    holder.rl.setOnLongClickListener(new View.OnLongClickListener(){
      public boolean onLongClick(      View p1){
        if (!rowItem.getSize().equals(main.goback)) {
          toggleChecked(p);
        }
        return true;
      }
    }
);
    holder.txtTitle.setText(rowItem.getTitle());
    holder.imageView1.setVisibility(View.INVISIBLE);
    holder.imageView.setVisibility(View.VISIBLE);
    holder.imageView.setImageDrawable(rowItem.getImageId());
    if (Icons.isPicture((rowItem.getDesc().toLowerCase()))) {
      holder.imageView.setColorFilter(null);
      holder.imageView1.setVisibility(View.VISIBLE);
      holder.imageView1.setImageDrawable(null);
      if (main.theme == 1)       holder.imageView1.setBackgroundColor(Color.parseColor(""String_Node_Str""));
      main.ic.cancelLoad(holder.imageView1);
      main.ic.loadDrawable(holder.imageView1,new File(rowItem.getDesc()),null);
    }
 else     if (Icons.isApk((rowItem.getDesc()))) {
      holder.imageView.setColorFilter(null);
      main.ic.cancelLoad(holder.imageView);
      main.ic.loadDrawable(holder.imageView,new File(rowItem.getDesc()),null);
    }
    if (Icons.isVideo(rowItem.getDesc())) {
      holder.imageView.setColorFilter(null);
      holder.imageView1.setVisibility(View.VISIBLE);
      holder.imageView1.setImageDrawable(null);
      if (main.theme == 1)       holder.imageView1.setBackgroundColor(Color.parseColor(""String_Node_Str""));
      main.ic.cancelLoad(holder.imageView1);
      main.ic.loadDrawable(holder.imageView1,new File(rowItem.getDesc()),null);
    }
    if (main.coloriseIcons) {
      if (rowItem.isDirectory(main.rootMode))       holder.imageView.setColorFilter(Color.parseColor(main.skin));
 else       if (Icons.isVideo(rowItem.getDesc()))       holder.imageView.setColorFilter(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isAudio(rowItem.getDesc()))       holder.imageView.setColorFilter(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isPdf(rowItem.getDesc()))       holder.imageView.setColorFilter(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isCode(rowItem.getDesc()))       holder.imageView.setColorFilter(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isText(rowItem.getDesc()))       holder.imageView.setColorFilter(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isArchive(rowItem.getDesc()))       holder.imageView.setColorFilter(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isgeneric(rowItem.getDesc()))       holder.imageView.setColorFilter(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isApk(rowItem.getDesc()) || Icons.isPicture(rowItem.getDesc()))       holder.imageView.setColorFilter(null);
 else       holder.imageView.setColorFilter(Color.parseColor(main.skin));
    }
 else     if (!Icons.isApk(rowItem.getDesc()) && !Icons.isPicture(rowItem.getDesc()))     holder.imageView.setColorFilter(Color.parseColor(main.skin));
 else     holder.imageView.setColorFilter(null);
    if (rowItem.getSize().equals(main.goback))     holder.imageView.setColorFilter(Color.parseColor(""String_Node_Str""));
    if (checked != null) {
      if (checked) {
        holder.imageView.setColorFilter(Color.parseColor(main.skin));
        holder.imageView.setImageDrawable(main.getResources().getDrawable(R.drawable.abc_ic_cab_done_holo_dark));
        holder.rl.setBackgroundColor(Color.parseColor(""String_Node_Str""));
      }
 else {
        if (main.uimode == 0) {
          if (main.theme1 == 0)           holder.rl.setBackgroundResource(R.drawable.item_doc_grid);
 else {
            holder.rl.setBackgroundResource(R.drawable.ic_grid_card_background_dark);
            holder.rl.findViewById(R.id.icon_frame).setBackgroundColor(Color.parseColor(""String_Node_Str""));
          }
        }
 else         if (main.uimode == 1) {
          holder.rl.setBackgroundResource(R.drawable.bg_card);
        }
      }
    }
    if (main.showLastModified)     holder.date.setText(rowItem.getDate());
    if (rowItem.getSize().equals(main.goback)) {
      holder.date.setText(rowItem.getSize());
      holder.txtDesc.setText(""String_Node_Str"");
    }
 else     holder.txtDesc.setText(rowItem.getSize());
    if (main.showPermissions)     holder.perm.setText(rowItem.getPermissions());
  }
}","@Override public void onBindViewHolder(RecyclerView.ViewHolder vholder,final int p1){
  final Recycleradapter.ViewHolder holder=((Recycleradapter.ViewHolder)vholder);
  int i=0;
  if (main.islist) {
    i=1;
    if (p1 == 0) {
      holder.rl.setMinimumHeight(main.paddingTop);
      return;
    }
  }
 else {
    i=3;
    if (p1 == 0 || p1 == 1 || p1 == 2) {
      holder.rl.setMinimumHeight(main.paddingTop);
      return;
    }
  }
  final int p=p1 - i;
  final Layoutelements rowItem=items.get(p);
  if (main.islist) {
    holder.rl.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        main.onListItemClicked(p,v);
      }
    }
);
    holder.rl.setOnLongClickListener(new View.OnLongClickListener(){
      public boolean onLongClick(      View p1){
        if (!rowItem.getSize().equals(main.goback)) {
          toggleChecked(p);
        }
        return true;
      }
    }
);
    filetype=-1;
    if (Icons.isPicture((rowItem.getDesc().toLowerCase())))     filetype=0;
 else     if (Icons.isApk((rowItem.getDesc())))     filetype=1;
 else     if (Icons.isVideo(rowItem.getDesc()))     filetype=2;
    holder.txtTitle.setText(rowItem.getTitle());
    holder.imageView.setImageDrawable(rowItem.getImageId());
    holder.ext.setText(""String_Node_Str"");
    holder.imageView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        final Animation animation=AnimationUtils.loadAnimation(context,R.anim.holder_anim);
        if (!rowItem.getSize().equals(main.goback)) {
          holder.imageView.setAnimation(animation);
          toggleChecked(p);
        }
 else         main.goBack();
      }
    }
);
    holder.viewmageV.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        if (!rowItem.getSize().equals(main.goback))         toggleChecked(p);
 else         main.goBack();
      }
    }
);
    holder.apk.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        if (!rowItem.getSize().equals(main.goback))         toggleChecked(p);
 else         main.goBack();
      }
    }
);
    holder.imageView.setVisibility(View.VISIBLE);
    holder.viewmageV.setVisibility(View.INVISIBLE);
    if (filetype == 0) {
      if (main.showThumbs) {
        if (main.circularImages) {
          holder.imageView.setVisibility(View.GONE);
          holder.apk.setVisibility(View.GONE);
          holder.viewmageV.setVisibility(View.VISIBLE);
          holder.viewmageV.setImageDrawable(main.darkimage);
          main.ic.cancelLoad(holder.viewmageV);
          main.ic.loadDrawable(holder.viewmageV,new File(rowItem.getDesc()),null);
        }
 else {
          holder.imageView.setVisibility(View.GONE);
          holder.apk.setVisibility(View.VISIBLE);
          holder.apk.setImageDrawable(main.darkimage);
          main.ic.cancelLoad(holder.apk);
          main.ic.loadDrawable(holder.apk,new File(rowItem.getDesc()),null);
        }
      }
    }
 else     if (filetype == 1) {
      if (main.showThumbs) {
        holder.viewmageV.setVisibility(View.GONE);
        holder.imageView.setVisibility(View.GONE);
        holder.apk.setVisibility(View.VISIBLE);
        holder.apk.setImageDrawable(main.apk);
        main.ic.cancelLoad(holder.apk);
        main.ic.loadDrawable(holder.apk,new File(rowItem.getDesc()),null);
      }
    }
 else     if (filetype == 2) {
      if (main.showThumbs) {
        if (main.circularImages) {
          holder.imageView.setVisibility(View.GONE);
          holder.viewmageV.setVisibility(View.VISIBLE);
          holder.viewmageV.setImageDrawable(main.darkvideo);
          main.ic.cancelLoad(holder.viewmageV);
          main.ic.loadDrawable(holder.viewmageV,new File(rowItem.getDesc()),null);
        }
 else {
          holder.imageView.setVisibility(View.GONE);
          holder.apk.setVisibility(View.VISIBLE);
          holder.apk.setImageDrawable(main.darkvideo);
          main.ic.cancelLoad(holder.apk);
          main.ic.loadDrawable(holder.apk,new File(rowItem.getDesc()),null);
        }
      }
    }
 else {
      holder.viewmageV.setVisibility(View.GONE);
      holder.apk.setVisibility(View.GONE);
    }
    Boolean checked=myChecked.get(p);
    if (checked != null) {
      if (main.theme1 == 0) {
        holder.rl.setBackgroundResource(R.drawable.safr_ripple_white);
      }
 else {
        holder.rl.setBackgroundResource(R.drawable.safr_ripple_black);
      }
      if (checked) {
        holder.apk.setVisibility(View.GONE);
        holder.viewmageV.setVisibility(View.GONE);
        holder.imageView.setVisibility(View.VISIBLE);
        holder.imageView.setImageDrawable(main.getResources().getDrawable(R.drawable.abc_ic_cab_done_holo_dark));
        GradientDrawable gradientDrawable=(GradientDrawable)holder.imageView.getBackground();
        gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
        holder.ext.setText(""String_Node_Str"");
        if (Build.VERSION.SDK_INT >= 21) {
          if (main.theme1 == 0) {
            holder.rl.setElevation(6f);
          }
 else {
            holder.rl.setBackgroundColor(context.getResources().getColor(R.color.safr_pressed_dark));
          }
        }
      }
 else {
        GradientDrawable gradientDrawable=(GradientDrawable)holder.imageView.getBackground();
        if (main.coloriseIcons) {
          if (rowItem.isDirectory(main.rootMode))           gradientDrawable.setColor(Color.parseColor(main.skin));
 else           if (Icons.isVideo(rowItem.getDesc()))           gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else           if (Icons.isAudio(rowItem.getDesc()))           gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else           if (Icons.isPdf(rowItem.getDesc()))           gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else           if (Icons.isCode(rowItem.getDesc()))           gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else           if (Icons.isText(rowItem.getDesc()))           gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else           if (Icons.isArchive(rowItem.getDesc()))           gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else           if (Icons.isgeneric(rowItem.getDesc())) {
            gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
            String ext=MimeTypes.getExtension(new File(rowItem.getDesc()).getName());
            if (ext != null && ext.trim().length() != 0) {
              holder.ext.setText(ext);
              holder.imageView.setImageDrawable(null);
            }
          }
 else {
            gradientDrawable.setColor(Color.parseColor(main.skin));
          }
        }
 else         gradientDrawable.setColor(Color.parseColor(main.skin));
        if (rowItem.getSize().equals(main.goback))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
        if (Build.VERSION.SDK_INT >= 21) {
          holder.rl.setElevation(0f);
        }
      }
    }
    if (main.showPermissions)     holder.perm.setText(rowItem.getPermissions());
    if (main.showLastModified)     holder.date.setText(rowItem.getDate());
    String size=rowItem.getSize();
    if (size.equals(main.goback)) {
      holder.date.setText(size);
      holder.txtDesc.setText(""String_Node_Str"");
    }
 else     if (main.showSize)     holder.txtDesc.setText(rowItem.getSize());
  }
 else {
    Boolean checked=myChecked.get(p);
    holder.rl.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        main.onListItemClicked(p,v);
      }
    }
);
    holder.rl.setOnLongClickListener(new View.OnLongClickListener(){
      public boolean onLongClick(      View p1){
        if (!rowItem.getSize().equals(main.goback)) {
          toggleChecked(p);
        }
        return true;
      }
    }
);
    holder.txtTitle.setText(rowItem.getTitle());
    holder.imageView1.setVisibility(View.INVISIBLE);
    holder.imageView.setVisibility(View.VISIBLE);
    holder.imageView.setImageDrawable(rowItem.getImageId());
    if (Icons.isPicture((rowItem.getDesc().toLowerCase()))) {
      holder.imageView.setColorFilter(null);
      holder.imageView1.setVisibility(View.VISIBLE);
      holder.imageView1.setImageDrawable(null);
      if (main.theme == 1)       holder.imageView1.setBackgroundColor(Color.parseColor(""String_Node_Str""));
      main.ic.cancelLoad(holder.imageView1);
      main.ic.loadDrawable(holder.imageView1,new File(rowItem.getDesc()),null);
    }
 else     if (Icons.isApk((rowItem.getDesc()))) {
      holder.imageView.setColorFilter(null);
      main.ic.cancelLoad(holder.imageView);
      main.ic.loadDrawable(holder.imageView,new File(rowItem.getDesc()),null);
    }
    if (Icons.isVideo(rowItem.getDesc())) {
      holder.imageView.setColorFilter(null);
      holder.imageView1.setVisibility(View.VISIBLE);
      holder.imageView1.setImageDrawable(null);
      if (main.theme == 1)       holder.imageView1.setBackgroundColor(Color.parseColor(""String_Node_Str""));
      main.ic.cancelLoad(holder.imageView1);
      main.ic.loadDrawable(holder.imageView1,new File(rowItem.getDesc()),null);
    }
    if (main.coloriseIcons) {
      if (rowItem.isDirectory(main.rootMode))       holder.imageView.setColorFilter(Color.parseColor(main.skin));
 else       if (Icons.isVideo(rowItem.getDesc()))       holder.imageView.setColorFilter(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isAudio(rowItem.getDesc()))       holder.imageView.setColorFilter(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isPdf(rowItem.getDesc()))       holder.imageView.setColorFilter(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isCode(rowItem.getDesc()))       holder.imageView.setColorFilter(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isText(rowItem.getDesc()))       holder.imageView.setColorFilter(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isArchive(rowItem.getDesc()))       holder.imageView.setColorFilter(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isgeneric(rowItem.getDesc()))       holder.imageView.setColorFilter(Color.parseColor(""String_Node_Str""));
 else       if (Icons.isApk(rowItem.getDesc()) || Icons.isPicture(rowItem.getDesc()))       holder.imageView.setColorFilter(null);
 else       holder.imageView.setColorFilter(Color.parseColor(main.skin));
    }
 else     if (!Icons.isApk(rowItem.getDesc()) && !Icons.isPicture(rowItem.getDesc()))     holder.imageView.setColorFilter(Color.parseColor(main.skin));
 else     holder.imageView.setColorFilter(null);
    if (rowItem.getSize().equals(main.goback))     holder.imageView.setColorFilter(Color.parseColor(""String_Node_Str""));
    if (checked != null) {
      if (checked) {
        holder.imageView.setColorFilter(Color.parseColor(main.skin));
        holder.imageView.setImageDrawable(main.getResources().getDrawable(R.drawable.abc_ic_cab_done_holo_dark));
        holder.rl.setBackgroundColor(Color.parseColor(""String_Node_Str""));
      }
 else {
        if (main.theme1 == 0)         holder.rl.setBackgroundResource(R.drawable.item_doc_grid);
 else {
          holder.rl.setBackgroundResource(R.drawable.ic_grid_card_background_dark);
          holder.rl.findViewById(R.id.icon_frame).setBackgroundColor(Color.parseColor(""String_Node_Str""));
        }
      }
    }
    if (main.showLastModified)     holder.date.setText(rowItem.getDate());
    if (rowItem.getSize().equals(main.goback)) {
      holder.date.setText(rowItem.getSize());
      holder.txtDesc.setText(""String_Node_Str"");
    }
 else     holder.txtDesc.setText(rowItem.getSize());
    if (main.showPermissions)     holder.perm.setText(rowItem.getPermissions());
  }
}",0.9716949437258524
162612,"@Override public long getHeaderId(int i){
  if (i != 0) {
    if (items.get(i - 1).getSize().equals(main.goback))     return -1;
    if (items.get(i - 1).isDirectory(main.rootMode))     return 'D';
 else     return 'F';
  }
  return -1;
}","@Override public long getHeaderId(int i){
  if (main.islist) {
    if (i != 0) {
      if (items.get(i - 1).getSize().equals(main.goback))       return -1;
      if (items.get(i - 1).isDirectory(main.rootMode))       return 'D';
 else       return 'F';
    }
  }
 else {
    if (i != 0 && i != 1 && i != 2) {
      if (items.get(i - 3).getSize().equals(main.goback))       return -1;
      if (items.get(i - 3).isDirectory(main.rootMode))       return 'D';
 else       return 'F';
    }
  }
  return -1;
}",0.6137281292059219
162613,"@Override public void onBindViewHolder(RecyclerView.ViewHolder viewHolder,int position1){
  final ViewHolder holder=(ZipAdapter.ViewHolder)viewHolder;
  if (position1 == 0) {
    holder.rl.setMinimumHeight(zipViewer.paddingTop);
    return;
  }
  final ZipObj rowItem=enter.get(position1 - 1);
  final int p=position1 - 1;
  GradientDrawable gradientDrawable=(GradientDrawable)holder.imageView.getBackground();
  if (rowItem.getEntry() == null) {
    holder.imageView.setImageResource(R.drawable.abc_ic_ab_back_mtrl_am_alpha);
    gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
    holder.txtTitle.setText(""String_Node_Str"");
    holder.txtDesc.setText(""String_Node_Str"");
    holder.date.setText(R.string.goback);
  }
 else {
    holder.imageView.setImageDrawable(Icons.loadMimeIcon(zipViewer.getActivity(),rowItem.getName(),false));
    final StringBuilder stringBuilder=new StringBuilder(rowItem.getName());
    if (zipViewer.showLastModified)     holder.date.setText(new Futils().getdate(rowItem.getTime(),""String_Node_Str"",zipViewer.year));
    if (rowItem.isDirectory()) {
      holder.imageView.setImageDrawable(folder);
      gradientDrawable.setColor(Color.parseColor(zipViewer.skin));
      if (stringBuilder.toString().length() > 0) {
        stringBuilder.deleteCharAt(rowItem.getName().length() - 1);
        try {
          holder.txtTitle.setText(stringBuilder.toString().substring(stringBuilder.toString().lastIndexOf(""String_Node_Str"") + 1));
        }
 catch (        Exception e) {
          holder.txtTitle.setText(rowItem.getName().substring(0,rowItem.getName().lastIndexOf(""String_Node_Str"")));
        }
      }
    }
 else {
      if (zipViewer.showSize)       holder.txtDesc.setText(new Futils().readableFileSize(rowItem.getSize()));
      holder.txtTitle.setText(rowItem.getName().substring(rowItem.getName().lastIndexOf(""String_Node_Str"") + 1));
      if (zipViewer.coloriseIcons) {
        if (Icons.isVideo(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isAudio(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isPdf(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isCode(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isText(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isArchive(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isgeneric(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         gradientDrawable.setColor(Color.parseColor(zipViewer.skin));
      }
 else       gradientDrawable.setColor(Color.parseColor(zipViewer.skin));
    }
  }
  holder.rl.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View view){
      if (rowItem.getEntry() != null)       toggleChecked(p);
      System.out.println(""String_Node_Str"");
      return false;
    }
  }
);
  holder.imageView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (rowItem.getEntry() != null) {
        final Animation animation=AnimationUtils.loadAnimation(zipViewer.getActivity(),R.anim.holder_anim);
        holder.imageView.setAnimation(animation);
        toggleChecked(p);
      }
    }
  }
);
  Boolean checked=myChecked.get(p);
  if (checked != null) {
    if (zipViewer.uimode == 0) {
      if (zipViewer.mainActivity.theme1 == 0) {
        holder.rl.setBackgroundResource(R.drawable.safr_ripple_white);
      }
 else {
        holder.rl.setBackgroundResource(R.drawable.safr_ripple_black);
      }
    }
 else     if (zipViewer.uimode == 1) {
      holder.rl.setBackgroundResource(R.drawable.bg_card);
    }
    if (checked) {
      holder.imageView.setImageDrawable(zipViewer.getResources().getDrawable(R.drawable.abc_ic_cab_done_holo_dark));
      gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
      if (Build.VERSION.SDK_INT >= 21) {
        holder.rl.setElevation(6f);
      }
 else {
        if (zipViewer.mainActivity.theme1 == 0) {
          holder.rl.setBackgroundColor(c.getResources().getColor(R.color.safr_pressed));
        }
 else {
          holder.rl.setBackgroundColor(c.getResources().getColor(R.color.safr_pressed_dark));
        }
      }
    }
 else {
      if (Build.VERSION.SDK_INT >= 21) {
        holder.rl.setElevation(0f);
      }
    }
  }
  holder.rl.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View p1){
      System.out.println(""String_Node_Str"");
      if (rowItem.getEntry() == null)       zipViewer.goBack();
 else {
        if (zipViewer.selection)         toggleChecked(p);
 else {
          final StringBuilder stringBuilder=new StringBuilder(rowItem.getName());
          if (rowItem.isDirectory())           stringBuilder.deleteCharAt(rowItem.getName().length() - 1);
          if (rowItem.isDirectory()) {
            new ZipHelperTask(zipViewer,stringBuilder.toString()).execute(zipViewer.f);
          }
 else {
            String x=rowItem.getName().substring(rowItem.getName().lastIndexOf(""String_Node_Str"") + 1);
            File file=new File(c.getCacheDir().getAbsolutePath() + ""String_Node_Str"" + x);
            zipViewer.files.clear();
            zipViewer.files.add(0,file);
            try {
              ZipFile zipFile=new ZipFile(zipViewer.f);
              new ZipExtractTask(zipFile,c.getCacheDir().getAbsolutePath(),zipViewer.getActivity(),x,true,rowItem.getEntry()).execute();
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
        }
      }
    }
  }
);
}","@Override public void onBindViewHolder(RecyclerView.ViewHolder viewHolder,int position1){
  final ViewHolder holder=(ZipAdapter.ViewHolder)viewHolder;
  if (position1 == 0) {
    holder.rl.setMinimumHeight(zipViewer.paddingTop);
    return;
  }
  final ZipObj rowItem=enter.get(position1 - 1);
  final int p=position1 - 1;
  GradientDrawable gradientDrawable=(GradientDrawable)holder.imageView.getBackground();
  if (rowItem.getEntry() == null) {
    holder.imageView.setImageResource(R.drawable.abc_ic_ab_back_mtrl_am_alpha);
    gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
    holder.txtTitle.setText(""String_Node_Str"");
    holder.txtDesc.setText(""String_Node_Str"");
    holder.date.setText(R.string.goback);
  }
 else {
    holder.imageView.setImageDrawable(Icons.loadMimeIcon(zipViewer.getActivity(),rowItem.getName(),false));
    final StringBuilder stringBuilder=new StringBuilder(rowItem.getName());
    if (zipViewer.showLastModified)     holder.date.setText(new Futils().getdate(rowItem.getTime(),""String_Node_Str"",zipViewer.year));
    if (rowItem.isDirectory()) {
      holder.imageView.setImageDrawable(folder);
      gradientDrawable.setColor(Color.parseColor(zipViewer.skin));
      if (stringBuilder.toString().length() > 0) {
        stringBuilder.deleteCharAt(rowItem.getName().length() - 1);
        try {
          holder.txtTitle.setText(stringBuilder.toString().substring(stringBuilder.toString().lastIndexOf(""String_Node_Str"") + 1));
        }
 catch (        Exception e) {
          holder.txtTitle.setText(rowItem.getName().substring(0,rowItem.getName().lastIndexOf(""String_Node_Str"")));
        }
      }
    }
 else {
      if (zipViewer.showSize)       holder.txtDesc.setText(new Futils().readableFileSize(rowItem.getSize()));
      holder.txtTitle.setText(rowItem.getName().substring(rowItem.getName().lastIndexOf(""String_Node_Str"") + 1));
      if (zipViewer.coloriseIcons) {
        if (Icons.isVideo(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isAudio(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isPdf(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isCode(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isText(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isArchive(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         if (Icons.isgeneric(rowItem.getName()))         gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
 else         gradientDrawable.setColor(Color.parseColor(zipViewer.skin));
      }
 else       gradientDrawable.setColor(Color.parseColor(zipViewer.skin));
    }
  }
  holder.rl.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View view){
      if (rowItem.getEntry() != null)       toggleChecked(p);
      System.out.println(""String_Node_Str"");
      return false;
    }
  }
);
  holder.imageView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (rowItem.getEntry() != null) {
        final Animation animation=AnimationUtils.loadAnimation(zipViewer.getActivity(),R.anim.holder_anim);
        holder.imageView.setAnimation(animation);
        toggleChecked(p);
      }
    }
  }
);
  Boolean checked=myChecked.get(p);
  if (checked != null) {
    if (zipViewer.mainActivity.theme1 == 0) {
      holder.rl.setBackgroundResource(R.drawable.safr_ripple_white);
    }
 else {
      holder.rl.setBackgroundResource(R.drawable.safr_ripple_black);
    }
    if (checked) {
      holder.imageView.setImageDrawable(zipViewer.getResources().getDrawable(R.drawable.abc_ic_cab_done_holo_dark));
      gradientDrawable.setColor(Color.parseColor(""String_Node_Str""));
      if (Build.VERSION.SDK_INT >= 21) {
        holder.rl.setElevation(6f);
      }
 else {
        if (zipViewer.mainActivity.theme1 == 0) {
          holder.rl.setBackgroundColor(c.getResources().getColor(R.color.safr_pressed));
        }
 else {
          holder.rl.setBackgroundColor(c.getResources().getColor(R.color.safr_pressed_dark));
        }
      }
    }
 else {
      if (Build.VERSION.SDK_INT >= 21) {
        holder.rl.setElevation(0f);
      }
    }
  }
  holder.rl.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View p1){
      System.out.println(""String_Node_Str"");
      if (rowItem.getEntry() == null)       zipViewer.goBack();
 else {
        if (zipViewer.selection)         toggleChecked(p);
 else {
          final StringBuilder stringBuilder=new StringBuilder(rowItem.getName());
          if (rowItem.isDirectory())           stringBuilder.deleteCharAt(rowItem.getName().length() - 1);
          if (rowItem.isDirectory()) {
            new ZipHelperTask(zipViewer,stringBuilder.toString()).execute(zipViewer.f);
          }
 else {
            String x=rowItem.getName().substring(rowItem.getName().lastIndexOf(""String_Node_Str"") + 1);
            File file=new File(c.getCacheDir().getAbsolutePath() + ""String_Node_Str"" + x);
            zipViewer.files.clear();
            zipViewer.files.add(0,file);
            try {
              ZipFile zipFile=new ZipFile(zipViewer.f);
              new ZipExtractTask(zipFile,c.getCacheDir().getAbsolutePath(),zipViewer.getActivity(),x,true,rowItem.getEntry()).execute();
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
        }
      }
    }
  }
);
}",0.9709934114828442
162614,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setRetainInstance(true);
  MainActivity mainActivity=(MainActivity)getActivity();
  mainActivity.toolbar.setTitle(utils.getString(getActivity(),R.string.apps));
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.supportInvalidateOptionsMenu();
  vl=getListView();
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  uimode=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  ListView vl=getListView();
  Calendar calendar=Calendar.getInstance();
  int hour=calendar.get(Calendar.HOUR_OF_DAY);
  int theme=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  theme1=theme;
  vl.setDivider(null);
  if (theme == 2) {
    if (hour <= 6 || hour >= 18) {
      theme1=1;
    }
 else     theme1=0;
  }
  if (theme1 == 1)   getActivity().getWindow().getDecorView().setBackgroundColor(Color.BLACK);
  if (savedInstanceState == null)   new LoadListTask().execute();
 else {
    c=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    a=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    adapter=new AppsAdapter(getActivity(),R.layout.rowlayout,a,app,c);
    setListAdapter(adapter);
    vl.setSelectionFromTop(savedInstanceState.getInt(""String_Node_Str""),savedInstanceState.getInt(""String_Node_Str""));
  }
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setRetainInstance(true);
  MainActivity mainActivity=(MainActivity)getActivity();
  mainActivity.toolbar.setTitle(utils.getString(getActivity(),R.string.apps));
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.supportInvalidateOptionsMenu();
  vl=getListView();
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  ListView vl=getListView();
  Calendar calendar=Calendar.getInstance();
  int hour=calendar.get(Calendar.HOUR_OF_DAY);
  int theme=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  theme1=theme;
  vl.setDivider(null);
  if (theme == 2) {
    if (hour <= 6 || hour >= 18) {
      theme1=1;
    }
 else     theme1=0;
  }
  if (theme1 == 1)   getActivity().getWindow().getDecorView().setBackgroundColor(Color.BLACK);
  if (savedInstanceState == null)   new LoadListTask().execute();
 else {
    c=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    a=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    adapter=new AppsAdapter(getActivity(),R.layout.rowlayout,a,app,c);
    setListAdapter(adapter);
    vl.setSelectionFromTop(savedInstanceState.getInt(""String_Node_Str""),savedInstanceState.getInt(""String_Node_Str""));
  }
}",0.9716157205240176
162615,"public void createViews(ArrayList<Layoutelements> bitmap,boolean back,File f){
  try {
    if (bitmap != null) {
      TextView footerText=(TextView)footerView.findViewById(R.id.footerText);
      if (bitmap.size() == 0) {
        footerText.setText(res.getString(R.string.nofiles));
      }
 else {
        footerText.setText(res.getString(R.string.tapnhold));
      }
      if (gobackitem)       if (!f.getPath().equals(""String_Node_Str"")) {
        if (bitmap.size() == 0 || !bitmap.get(0).getSize().equals(goback))         bitmap.add(0,utils.newElement(res.getDrawable(R.drawable.abc_ic_ab_back_mtrl_am_alpha),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",goback,""String_Node_Str"",true,""String_Node_Str""));
      }
      adapter=new Recycleradapter(ma,bitmap,ma.getActivity());
      mSwipeRefreshLayout.setRefreshing(false);
      try {
        listView.setAdapter(adapter);
        if (!addheader && islist) {
          if (uimode == 0)           listView.removeItemDecoration(dividerItemDecoration);
          listView.removeItemDecoration(headersDecor);
          addheader=true;
        }
        if (addheader && islist) {
          if (uimode == 0) {
            dividerItemDecoration=new DividerItemDecoration(getActivity(),DividerItemDecoration.VERTICAL_LIST);
            listView.addItemDecoration(dividerItemDecoration);
          }
          headersDecor=new StickyRecyclerHeadersDecoration(adapter);
          listView.addItemDecoration(headersDecor);
          addheader=false;
        }
        results=false;
        current=f.getPath();
        if (back) {
          if (scrolls.containsKey(current)) {
            Bundle b=scrolls.get(current);
            if (islist)             mLayoutManager.scrollToPositionWithOffset(b.getInt(""String_Node_Str""),b.getInt(""String_Node_Str""));
 else             mLayoutManagerGrid.scrollToPositionWithOffset(b.getInt(""String_Node_Str""),b.getInt(""String_Node_Str""));
          }
        }
        mainActivity.updatepaths();
        listView.setOnScrollListener(new HidingScrollListener(getActivity(),hidemode){
          @Override public void onMoved(          int distance){
            mToolbarContainer.setTranslationY(-distance);
          }
          @Override public void onShow(){
            mToolbarContainer.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
          }
          @Override public void onHide(){
            mToolbarContainer.findViewById(R.id.lin).animate().translationY(-mToolbarHeight).setInterpolator(new AccelerateInterpolator(2)).start();
          }
        }
);
        if (buttons.getVisibility() == View.VISIBLE)         mainActivity.bbar(current,this);
        mToolbarContainer.setBackgroundColor(Color.parseColor(skin));
        mainActivity.updateDrawer(current);
        mainActivity.updatepager();
      }
 catch (      Exception e) {
      }
    }
 else {
      loadlist(new File(current),true);
    }
  }
 catch (  Exception e) {
  }
}","public void createViews(ArrayList<Layoutelements> bitmap,boolean back,File f){
  try {
    if (bitmap != null) {
      TextView footerText=(TextView)footerView.findViewById(R.id.footerText);
      if (bitmap.size() == 0) {
        footerText.setText(res.getString(R.string.nofiles));
      }
 else {
        footerText.setText(res.getString(R.string.tapnhold));
      }
      if (gobackitem)       if (!f.getPath().equals(""String_Node_Str"")) {
        if (bitmap.size() == 0 || !bitmap.get(0).getSize().equals(goback))         bitmap.add(0,utils.newElement(res.getDrawable(R.drawable.abc_ic_ab_back_mtrl_am_alpha),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",goback,""String_Node_Str"",true,""String_Node_Str""));
      }
      adapter=new Recycleradapter(ma,bitmap,ma.getActivity());
      mSwipeRefreshLayout.setRefreshing(false);
      try {
        listView.setAdapter(adapter);
        if (!addheader && islist) {
          listView.removeItemDecoration(dividerItemDecoration);
          listView.removeItemDecoration(headersDecor);
          addheader=true;
        }
        if (addheader && islist) {
          dividerItemDecoration=new DividerItemDecoration(getActivity(),DividerItemDecoration.VERTICAL_LIST);
          listView.addItemDecoration(dividerItemDecoration);
          headersDecor=new StickyRecyclerHeadersDecoration(adapter);
          listView.addItemDecoration(headersDecor);
          addheader=false;
        }
        results=false;
        current=f.getPath();
        if (back) {
          if (scrolls.containsKey(current)) {
            Bundle b=scrolls.get(current);
            if (islist)             mLayoutManager.scrollToPositionWithOffset(b.getInt(""String_Node_Str""),b.getInt(""String_Node_Str""));
 else             mLayoutManagerGrid.scrollToPositionWithOffset(b.getInt(""String_Node_Str""),b.getInt(""String_Node_Str""));
          }
        }
        mainActivity.updatepaths();
        listView.setOnScrollListener(new HidingScrollListener(getActivity(),hidemode){
          @Override public void onMoved(          int distance){
            mToolbarContainer.setTranslationY(-distance);
          }
          @Override public void onShow(){
            mToolbarContainer.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
          }
          @Override public void onHide(){
            mToolbarContainer.findViewById(R.id.lin).animate().translationY(-mToolbarHeight).setInterpolator(new AccelerateInterpolator(2)).start();
          }
        }
);
        if (buttons.getVisibility() == View.VISIBLE)         mainActivity.bbar(current,this);
        mToolbarContainer.setBackgroundColor(Color.parseColor(skin));
        mainActivity.updateDrawer(current);
        mainActivity.updatepager();
      }
 catch (      Exception e) {
      }
    }
 else {
      loadlist(new File(current),true);
    }
  }
 catch (  Exception e) {
  }
}",0.9877675840978594
162616,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(false);
  mainActivity=(MainActivity)getActivity();
  utils=new Futils();
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  color=calculatevalues(x);
  ColorMatrix colorMatrix=new ColorMatrix(calculatefilter(color));
  colorMatrixColorFilter=new ColorMatrixColorFilter(colorMatrix);
  history=new HistoryManager(getActivity(),""String_Node_Str"");
  hidden=new HistoryManager(getActivity(),""String_Node_Str"");
  hiddenfiles=hidden.readTable();
  rootMode=Sp.getBoolean(""String_Node_Str"",false);
  showHidden=Sp.getBoolean(""String_Node_Str"",false);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  if (islist) {
    folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  }
 else {
    folder=res.getDrawable(R.drawable.ic_grid_folder1);
  }
  folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  getSortModes();
  darkimage=res.getDrawable(R.drawable.ic_doc_image_dark);
  darkvideo=res.getDrawable(R.drawable.ic_doc_video_dark);
  this.setRetainInstance(false);
  File f;
  if (savepaths)   f=new File(current);
 else   f=new File(home);
  mainActivity.initiatebbar(current,this);
  scroll=(HorizontalScrollView)rootView.findViewById(R.id.scroll);
  scroll1=(HorizontalScrollView)rootView.findViewById(R.id.scroll1);
  uimode=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  if (uimode == 1 && islist) {
    float scale=getResources().getDisplayMetrics().density;
    int dpAsPixels=(int)(5 * scale + 0.5f);
    listView.setPadding(dpAsPixels,0,dpAsPixels,0);
    listView.addItemDecoration(new SpacesItemDecoration(dpAsPixels));
  }
  footerView=getActivity().getLayoutInflater().inflate(R.layout.divider,null);
  mSwipeRefreshLayout=(SwipeRefreshLayout)rootView.findViewById(R.id.activity_main_swipe_refresh_layout);
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      loadlist(new File(current),false);
    }
  }
);
  if (savedInstanceState == null) {
    if (Intentpath != null) {
      File file1=new File(Intentpath);
      if (file1.isDirectory()) {
        loadlist(file1,false);
      }
 else {
        utils.openFile(file1,mainActivity);
        loadlist(f,false);
      }
    }
 else {
      loadlist(f,false);
    }
  }
 else {
    Bundle b=new Bundle();
    String cur=savedInstanceState.getString(""String_Node_Str"");
    if (cur != null) {
      b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
      b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
      scrolls.put(cur,b);
      list=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
      if (savedInstanceState.getBoolean(""String_Node_Str"")) {
        try {
          results=true;
          slist=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
          ((TextView)ma.pathbar.findViewById(R.id.pathname)).setText(ma.utils.getString(ma.getActivity(),R.string.searchresults));
          ma.adapter=new Recycleradapter(ma,slist,ma.getActivity());
          ma.listView.setAdapter(ma.adapter);
          ma.results=true;
        }
 catch (        Exception e) {
        }
      }
 else {
        createViews(list,true,new File(cur));
      }
      if (savedInstanceState.getBoolean(""String_Node_Str"")) {
        for (        int i : savedInstanceState.getIntegerArrayList(""String_Node_Str"")) {
          adapter.toggleChecked(i);
        }
      }
    }
  }
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(false);
  mainActivity=(MainActivity)getActivity();
  utils=new Futils();
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  color=calculatevalues(x);
  ColorMatrix colorMatrix=new ColorMatrix(calculatefilter(color));
  colorMatrixColorFilter=new ColorMatrixColorFilter(colorMatrix);
  history=new HistoryManager(getActivity(),""String_Node_Str"");
  hidden=new HistoryManager(getActivity(),""String_Node_Str"");
  hiddenfiles=hidden.readTable();
  rootMode=Sp.getBoolean(""String_Node_Str"",false);
  showHidden=Sp.getBoolean(""String_Node_Str"",false);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  if (islist) {
    folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  }
 else {
    folder=res.getDrawable(R.drawable.ic_grid_folder1);
  }
  folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  getSortModes();
  darkimage=res.getDrawable(R.drawable.ic_doc_image_dark);
  darkvideo=res.getDrawable(R.drawable.ic_doc_video_dark);
  this.setRetainInstance(false);
  File f;
  if (savepaths)   f=new File(current);
 else   f=new File(home);
  mainActivity.initiatebbar(current,this);
  scroll=(HorizontalScrollView)rootView.findViewById(R.id.scroll);
  scroll1=(HorizontalScrollView)rootView.findViewById(R.id.scroll1);
  footerView=getActivity().getLayoutInflater().inflate(R.layout.divider,null);
  mSwipeRefreshLayout=(SwipeRefreshLayout)rootView.findViewById(R.id.activity_main_swipe_refresh_layout);
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      loadlist(new File(current),false);
    }
  }
);
  if (savedInstanceState == null) {
    if (Intentpath != null) {
      File file1=new File(Intentpath);
      if (file1.isDirectory()) {
        loadlist(file1,false);
      }
 else {
        utils.openFile(file1,mainActivity);
        loadlist(f,false);
      }
    }
 else {
      loadlist(f,false);
    }
  }
 else {
    Bundle b=new Bundle();
    String cur=savedInstanceState.getString(""String_Node_Str"");
    if (cur != null) {
      b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
      b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
      scrolls.put(cur,b);
      list=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
      if (savedInstanceState.getBoolean(""String_Node_Str"")) {
        try {
          results=true;
          slist=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
          ((TextView)ma.pathbar.findViewById(R.id.pathname)).setText(ma.utils.getString(ma.getActivity(),R.string.searchresults));
          ma.adapter=new Recycleradapter(ma,slist,ma.getActivity());
          ma.listView.setAdapter(ma.adapter);
          ma.results=true;
        }
 catch (        Exception e) {
        }
      }
 else {
        createViews(list,true,new File(cur));
      }
      if (savedInstanceState.getBoolean(""String_Node_Str"")) {
        for (        int i : savedInstanceState.getIntegerArrayList(""String_Node_Str"")) {
          adapter.toggleChecked(i);
        }
      }
    }
  }
  mSwipeRefreshLayout.setProgressViewOffset(true,paddingTop,paddingTop + dpToPx(72));
}",0.9383432467720876
162617,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  rootView=inflater.inflate(R.layout.main_frag,container,false);
  listView=(android.support.v7.widget.RecyclerView)rootView.findViewById(R.id.listView);
  if (getArguments() != null)   Intentpath=getArguments().getString(""String_Node_Str"");
  animation=AnimationUtils.loadAnimation(getActivity(),R.anim.load_list_anim);
  animation1=AnimationUtils.loadAnimation(getActivity(),R.anim.fab_newtab);
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  buttons=(LinearLayout)getActivity().findViewById(R.id.buttons);
  pathbar=(LinearLayout)getActivity().findViewById(R.id.pathbar);
  showThumbs=Sp.getBoolean(""String_Node_Str"",true);
  ic=new IconHolder(getActivity(),showThumbs,!islist);
  res=getResources();
  goback=res.getString(R.string.goback);
  itemsstring=res.getString(R.string.items);
  apk=res.getDrawable(R.drawable.ic_doc_apk_grid);
  uimode=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  if (theme1 == 1) {
    mainActivity.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.holo_dark_background)));
  }
 else {
    if (uimode == 0 && islist) {
      mainActivity.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(android.R.color.background_light)));
    }
  }
  listView.setHasFixedSize(true);
  mLayoutManager=new LinearLayoutManager(getActivity());
  int columns=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  mLayoutManagerGrid=new GridLayoutManager(getActivity(),columns);
  if (islist) {
    listView.setLayoutManager(mLayoutManager);
  }
 else {
    listView.setLayoutManager(mLayoutManagerGrid);
  }
  paddingTop=(mToolbarHeight=getToolbarHeight(getActivity())) + dpToPx(72);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  rootView=inflater.inflate(R.layout.main_frag,container,false);
  listView=(android.support.v7.widget.RecyclerView)rootView.findViewById(R.id.listView);
  if (getArguments() != null)   Intentpath=getArguments().getString(""String_Node_Str"");
  animation=AnimationUtils.loadAnimation(getActivity(),R.anim.load_list_anim);
  animation1=AnimationUtils.loadAnimation(getActivity(),R.anim.fab_newtab);
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  buttons=(LinearLayout)getActivity().findViewById(R.id.buttons);
  pathbar=(LinearLayout)getActivity().findViewById(R.id.pathbar);
  showThumbs=Sp.getBoolean(""String_Node_Str"",true);
  ic=new IconHolder(getActivity(),showThumbs,!islist);
  res=getResources();
  goback=res.getString(R.string.goback);
  itemsstring=res.getString(R.string.items);
  apk=res.getDrawable(R.drawable.ic_doc_apk_grid);
  if (theme1 == 1) {
    mainActivity.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.holo_dark_background)));
  }
 else {
    if (islist)     mainActivity.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(android.R.color.background_light)));
  }
  listView.setHasFixedSize(true);
  mLayoutManager=new LinearLayoutManager(getActivity());
  int columns=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  mLayoutManagerGrid=new GridLayoutManager(getActivity(),columns);
  if (islist) {
    listView.setLayoutManager(mLayoutManager);
  }
 else {
    listView.setLayoutManager(mLayoutManagerGrid);
  }
  paddingTop=(mToolbarHeight=getToolbarHeight(getActivity())) + dpToPx(72);
  if (hidemode == 2)   mToolbarHeight=paddingTop;
  return rootView;
}",0.7310344827586207
162618,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.preferences);
  sharedPref=PreferenceManager.getDefaultSharedPreferences(getActivity());
  skin=sharedPref.getString(""String_Node_Str"",""String_Node_Str"");
  Calendar calendar=Calendar.getInstance();
  int hour=calendar.get(Calendar.HOUR_OF_DAY);
  final Preference ui=(Preference)findPreference(""String_Node_Str"");
  final int th1=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str""));
  theme=th1;
  if (th1 == 2) {
    ui.setEnabled(false);
    if (hour <= 6 || hour >= 18) {
      theme=1;
    }
 else     theme=0;
  }
  if (th1 == 1) {
    ui.setEnabled(false);
  }
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      final String[] sort=getResources().getStringArray(R.array.columns);
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.title(R.string.gridcolumnno);
      int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str""));
      if (current != 0)       current=current - 2;
 else       current=1;
      a.items(sort).itemsCallbackSingleChoice(current,new MaterialDialog.ListCallbackSingleChoice(){
        @Override public boolean onSelection(        MaterialDialog dialog,        View view,        int which,        CharSequence text){
          sharedPref.edit().putString(""String_Node_Str"",""String_Node_Str"" + sort[which]).commit();
          dialog.dismiss();
          return true;
        }
      }
);
      a.build().show();
      return true;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      String[] sort=getResources().getStringArray(R.array.uimode);
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.title(R.string.directorysort);
      int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str""));
      a.items(sort).itemsCallbackSingleChoice(current,new MaterialDialog.ListCallbackSingleChoice(){
        @Override public boolean onSelection(        MaterialDialog dialog,        View view,        int which,        CharSequence text){
          sharedPref.edit().putString(""String_Node_Str"",""String_Node_Str"" + which).commit();
          dialog.dismiss();
          return true;
        }
      }
);
      a.build().show();
      return true;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      String[] sort=getResources().getStringArray(R.array.hidemode);
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.title(""String_Node_Str"");
      int current=sharedPref.getInt(""String_Node_Str"",0);
      a.items(sort).itemsCallbackSingleChoice(current,new MaterialDialog.ListCallbackSingleChoice(){
        @Override public boolean onSelection(        MaterialDialog dialog,        View view,        int which,        CharSequence text){
          sharedPref.edit().putInt(""String_Node_Str"",which).commit();
          dialog.dismiss();
          return true;
        }
      }
);
      a.build().show();
      return true;
    }
  }
);
  if (Build.VERSION.SDK_INT >= 21)   findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      restartPC(getActivity());
      return false;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      String[] sort=getResources().getStringArray(R.array.directorysortmode);
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.title(R.string.directorysort);
      int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str""));
      a.items(sort).itemsCallbackSingleChoice(current,new MaterialDialog.ListCallbackSingleChoice(){
        @Override public boolean onSelection(        MaterialDialog dialog,        View view,        int which,        CharSequence text){
          sharedPref.edit().putString(""String_Node_Str"",""String_Node_Str"" + which).commit();
          dialog.dismiss();
          return true;
        }
      }
);
      a.build().show();
      return true;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      String[] sort=getResources().getStringArray(R.array.theme);
      int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str""));
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.items(sort).itemsCallbackSingleChoice(current,new MaterialDialog.ListCallbackSingleChoice(){
        @Override public boolean onSelection(        MaterialDialog dialog,        View view,        int which,        CharSequence text){
          sharedPref.edit().putString(""String_Node_Str"",""String_Node_Str"" + which).commit();
          if (which != 0)           sharedPref.edit().putString(""String_Node_Str"",""String_Node_Str"").commit();
          dialog.dismiss();
          restartPC(getActivity());
          return true;
        }
      }
);
      a.title(R.string.theme);
      a.build().show();
      return true;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      String[] sort=getResources().getStringArray(R.array.sortby);
      int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str""));
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.items(sort).itemsCallbackSingleChoice(current,new MaterialDialog.ListCallbackSingleChoice(){
        @Override public boolean onSelection(        MaterialDialog dialog,        View view,        int which,        CharSequence text){
          sharedPref.edit().putString(""String_Node_Str"",""String_Node_Str"" + which).commit();
          dialog.dismiss();
          return true;
        }
      }
);
      a.title(R.string.sortby);
      a.build().show();
      return true;
    }
  }
);
  final Preference preference=(Preference)findPreference(""String_Node_Str"");
  final int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str"" + 6));
  preference.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      final int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str"" + 6));
      final String[] colors=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      final MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      a.positiveText(R.string.cancel);
      a.positiveColor(Color.parseColor(skin));
      a.title(R.string.skin);
      if (theme == 1)       a.theme(Theme.DARK);
      LayoutInflater layoutInflater=(LayoutInflater)getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      View view=layoutInflater.inflate(R.layout.list_dialog,null);
      ListView listView=(ListView)view.findViewById(R.id.listView);
      listView.setDivider(null);
      a.customView(view,true);
      a.autoDismiss(true);
      MaterialDialog x=a.build();
      ArrayList<String> arrayList=new ArrayList<String>();
      for (      String c : colors) {
        arrayList.add(c);
      }
      ColorAdapter adapter=new ColorAdapter(getActivity(),arrayList,""String_Node_Str"",""String_Node_Str"");
      listView.setAdapter(adapter);
      x.show();
      return false;
    }
  }
);
  final Preference fabpreference=(Preference)findPreference(""String_Node_Str"");
  fabpreference.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      final int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str"" + 0));
      final String[] colors=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      final MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      a.positiveText(R.string.cancel);
      a.positiveColor(Color.parseColor(skin));
      a.title(R.string.fab_skin);
      if (th1 == 1)       a.theme(Theme.DARK);
      LayoutInflater layoutInflater=(LayoutInflater)getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      View view=layoutInflater.inflate(R.layout.list_dialog,null);
      ListView listView=(ListView)view.findViewById(R.id.listView);
      listView.setDivider(null);
      a.customView(view,true);
      a.autoDismiss(true);
      MaterialDialog x=a.build();
      ArrayList<String> arrayList=new ArrayList<String>();
      for (      String c : colors) {
        arrayList.add(c);
      }
      ColorAdapter adapter=new ColorAdapter(getActivity(),arrayList,""String_Node_Str"",""String_Node_Str"");
      listView.setAdapter(adapter);
      x.show();
      return false;
    }
  }
);
  final CheckBoxPreference checkBoxPreference=(CheckBoxPreference)findPreference(""String_Node_Str"");
  boolean check=sharedPref.getBoolean(""String_Node_Str"",false);
  checkBoxPreference.setChecked(check);
  checkBoxPreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object o){
      if (!checkBoxPreference.isChecked()) {
        sharedPref.edit().putBoolean(""String_Node_Str"",true).apply();
        checkBoxPreference.setChecked(true);
      }
 else {
        sharedPref.edit().putBoolean(""String_Node_Str"",false).apply();
        checkBoxPreference.setChecked(false);
      }
      Toast.makeText(getActivity(),R.string.setRandom,Toast.LENGTH_LONG).show();
      return false;
    }
  }
);
  final CheckBoxPreference rootmode=(CheckBoxPreference)findPreference(""String_Node_Str"");
  rootmode.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      boolean b=sharedPref.getBoolean(""String_Node_Str"",false);
      if (b) {
        if (RootTools.isAccessGiven()) {
          rootmode.setChecked(true);
        }
 else {
          rootmode.setChecked(false);
          Toast.makeText(getActivity(),getResources().getString(R.string.rootfailure),Toast.LENGTH_LONG).show();
        }
      }
 else {
        rootmode.setChecked(false);
      }
      return false;
    }
  }
);
  Preference preference4=(Preference)findPreference(""String_Node_Str"");
  preference4.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      skin=sharedPref.getString(""String_Node_Str"",""String_Node_Str"");
      if (theme == 1)       a.theme(Theme.DARK);
      a.positiveText(R.string.close);
      a.positiveColor(Color.parseColor(skin));
      LayoutInflater layoutInflater=(LayoutInflater)getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      View view=layoutInflater.inflate(R.layout.authors,null);
      a.customView(view,true);
      a.title(R.string.authors);
      a.callback(new MaterialDialog.ButtonCallback(){
        @Override public void onPositive(        MaterialDialog materialDialog){
          materialDialog.cancel();
        }
        @Override public void onNegative(        MaterialDialog materialDialog){
        }
      }
);
      a.build().show();
      final Intent intent=new Intent(Intent.ACTION_VIEW);
      TextView googlePlus1=(TextView)view.findViewById(R.id.googlePlus1);
      googlePlus1.setTextColor(Color.parseColor(skin));
      TextView googlePlus2=(TextView)view.findViewById(R.id.googlePlus2);
      googlePlus2.setTextColor(Color.parseColor(skin));
      TextView git1=(TextView)view.findViewById(R.id.git1);
      git1.setTextColor(Color.parseColor(skin));
      TextView git2=(TextView)view.findViewById(R.id.git2);
      git2.setTextColor(Color.parseColor(skin));
      googlePlus1.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          intent.setData(Uri.parse(""String_Node_Str""));
          startActivity(intent);
        }
      }
);
      googlePlus2.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          intent.setData(Uri.parse(""String_Node_Str""));
          startActivity(intent);
        }
      }
);
      git1.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          intent.setData(Uri.parse(""String_Node_Str""));
          startActivity(intent);
        }
      }
);
      git2.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          intent.setData(Uri.parse(""String_Node_Str""));
          startActivity(intent);
        }
      }
);
      TextView textView=(TextView)view.findViewById(R.id.icon_credits);
      textView.setMovementMethod(LinkMovementMethod.getInstance());
      textView.setLinksClickable(true);
      textView.setText(Html.fromHtml(getActivity().getString(R.string.icon_credits)));
      return false;
    }
  }
);
  Preference preference1=(Preference)findPreference(""String_Node_Str"");
  preference1.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.title(R.string.changelog);
      a.content(Html.fromHtml(getActivity().getString(R.string.changelog_version_5) + getActivity().getString(R.string.changelog_change_5) + getActivity().getString(R.string.changelog_version_4)+ getActivity().getString(R.string.changelog_change_4)+ getActivity().getString(R.string.changelog_version_3)+ getActivity().getString(R.string.changelog_change_3)+ getActivity().getString(R.string.changelog_version_2)+ getActivity().getString(R.string.changelog_change_2)+ getActivity().getString(R.string.changelog_version_1)+ getActivity().getString(R.string.changelog_change_1)));
      a.negativeText(R.string.close);
      a.negativeColor(Color.parseColor(skin));
      a.positiveText(R.string.fullChangelog);
      a.positiveColor(Color.parseColor(skin));
      a.callback(new MaterialDialog.ButtonCallback(){
        @Override public void onPositive(        MaterialDialog materialDialog){
          Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
          startActivity(intent);
        }
        @Override public void onNegative(        MaterialDialog materialDialog){
          materialDialog.cancel();
        }
      }
).build().show();
      return false;
    }
  }
);
  Preference preference2=(Preference)findPreference(""String_Node_Str"");
  final Dialog dialog=new Dialog(getActivity(),android.R.style.Theme_Holo_Light_DialogWhenLarge_NoActionBar);
  LayoutInflater inflater=(LayoutInflater)getActivity().getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
  final View dialog_view=inflater.inflate(R.layout.open_source_licenses,null);
  dialog.setContentView(dialog_view);
  preference2.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference arg0){
      String oss_dialog=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      WebView wv=(WebView)dialog_view.findViewById(R.id.webView1);
      wv.loadData(oss_dialog,""String_Node_Str"",null);
      dialog.show();
      return false;
    }
  }
);
  Preference preference3=(Preference)findPreference(""String_Node_Str"");
  preference3.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Intent intent=new Intent(Intent.ACTION_VIEW);
      intent.setType(""String_Node_Str"");
      intent.setData(Uri.parse(""String_Node_Str""));
      intent.setClassName(""String_Node_Str"",""String_Node_Str"");
      intent.putExtra(Intent.EXTRA_SUBJECT,""String_Node_Str"");
      startActivity(intent);
      return false;
    }
  }
);
  Preference preference5=(Preference)findPreference(""String_Node_Str"");
  preference5.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Intent intent1=new Intent(Intent.ACTION_VIEW);
      intent1.setData(Uri.parse(""String_Node_Str""));
      startActivity(intent1);
      return false;
    }
  }
);
  Preference preference6=findPreference(""String_Node_Str"");
  preference6.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Uri uri=Uri.parse(""String_Node_Str"");
      Intent intent=new Intent();
      intent.setData(uri);
      startActivity(intent);
      return false;
    }
  }
);
  Preference studio=findPreference(""String_Node_Str"");
  studio.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      COUNT++;
      if (COUNT >= 5) {
        if (toast != null)         toast.cancel();
        toast=Toast.makeText(getActivity(),""String_Node_Str"" + COUNT,Toast.LENGTH_SHORT);
        toast.show();
        sharedPref.edit().putInt(""String_Node_Str"",Integer.parseInt(Integer.toString(COUNT) + ""String_Node_Str"")).apply();
      }
 else {
        sharedPref.edit().putInt(""String_Node_Str"",0).apply();
      }
      return false;
    }
  }
);
  CheckBoxPreference preference7=(CheckBoxPreference)findPreference(""String_Node_Str"");
  if (BuildConfig.IS_VERSION_FDROID)   preference7.setEnabled(false);
  CheckBoxPreference preference8=(CheckBoxPreference)findPreference(""String_Node_Str"");
  if (Build.VERSION.SDK_INT >= 21)   preference8.setEnabled(true);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.preferences);
  sharedPref=PreferenceManager.getDefaultSharedPreferences(getActivity());
  skin=sharedPref.getString(""String_Node_Str"",""String_Node_Str"");
  Calendar calendar=Calendar.getInstance();
  int hour=calendar.get(Calendar.HOUR_OF_DAY);
  final int th1=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str""));
  theme=th1;
  if (th1 == 2) {
    if (hour <= 6 || hour >= 18) {
      theme=1;
    }
 else     theme=0;
  }
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      final String[] sort=getResources().getStringArray(R.array.columns);
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.title(R.string.gridcolumnno);
      int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str""));
      if (current != 0)       current=current - 2;
 else       current=1;
      a.items(sort).itemsCallbackSingleChoice(current,new MaterialDialog.ListCallbackSingleChoice(){
        @Override public boolean onSelection(        MaterialDialog dialog,        View view,        int which,        CharSequence text){
          sharedPref.edit().putString(""String_Node_Str"",""String_Node_Str"" + sort[which]).commit();
          dialog.dismiss();
          return true;
        }
      }
);
      a.build().show();
      return true;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      String[] sort=getResources().getStringArray(R.array.hidemode);
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.title(""String_Node_Str"");
      int current=sharedPref.getInt(""String_Node_Str"",0);
      a.items(sort).itemsCallbackSingleChoice(current,new MaterialDialog.ListCallbackSingleChoice(){
        @Override public boolean onSelection(        MaterialDialog dialog,        View view,        int which,        CharSequence text){
          sharedPref.edit().putInt(""String_Node_Str"",which).commit();
          dialog.dismiss();
          return true;
        }
      }
);
      a.build().show();
      return true;
    }
  }
);
  if (Build.VERSION.SDK_INT >= 21)   findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      restartPC(getActivity());
      return false;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      String[] sort=getResources().getStringArray(R.array.directorysortmode);
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.title(R.string.directorysort);
      int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str""));
      a.items(sort).itemsCallbackSingleChoice(current,new MaterialDialog.ListCallbackSingleChoice(){
        @Override public boolean onSelection(        MaterialDialog dialog,        View view,        int which,        CharSequence text){
          sharedPref.edit().putString(""String_Node_Str"",""String_Node_Str"" + which).commit();
          dialog.dismiss();
          return true;
        }
      }
);
      a.build().show();
      return true;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      String[] sort=getResources().getStringArray(R.array.theme);
      int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str""));
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.items(sort).itemsCallbackSingleChoice(current,new MaterialDialog.ListCallbackSingleChoice(){
        @Override public boolean onSelection(        MaterialDialog dialog,        View view,        int which,        CharSequence text){
          sharedPref.edit().putString(""String_Node_Str"",""String_Node_Str"" + which).commit();
          dialog.dismiss();
          restartPC(getActivity());
          return true;
        }
      }
);
      a.title(R.string.theme);
      a.build().show();
      return true;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      String[] sort=getResources().getStringArray(R.array.sortby);
      int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str""));
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.items(sort).itemsCallbackSingleChoice(current,new MaterialDialog.ListCallbackSingleChoice(){
        @Override public boolean onSelection(        MaterialDialog dialog,        View view,        int which,        CharSequence text){
          sharedPref.edit().putString(""String_Node_Str"",""String_Node_Str"" + which).commit();
          dialog.dismiss();
          return true;
        }
      }
);
      a.title(R.string.sortby);
      a.build().show();
      return true;
    }
  }
);
  final Preference preference=(Preference)findPreference(""String_Node_Str"");
  final int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str"" + 6));
  preference.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      final int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str"" + 6));
      final String[] colors=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      final MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      a.positiveText(R.string.cancel);
      a.positiveColor(Color.parseColor(skin));
      a.title(R.string.skin);
      if (theme == 1)       a.theme(Theme.DARK);
      LayoutInflater layoutInflater=(LayoutInflater)getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      View view=layoutInflater.inflate(R.layout.list_dialog,null);
      ListView listView=(ListView)view.findViewById(R.id.listView);
      listView.setDivider(null);
      a.customView(view,true);
      a.autoDismiss(true);
      MaterialDialog x=a.build();
      ArrayList<String> arrayList=new ArrayList<String>();
      for (      String c : colors) {
        arrayList.add(c);
      }
      ColorAdapter adapter=new ColorAdapter(getActivity(),arrayList,""String_Node_Str"",""String_Node_Str"");
      listView.setAdapter(adapter);
      x.show();
      return false;
    }
  }
);
  final Preference fabpreference=(Preference)findPreference(""String_Node_Str"");
  fabpreference.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      final int current=Integer.parseInt(sharedPref.getString(""String_Node_Str"",""String_Node_Str"" + 0));
      final String[] colors=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      final MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      a.positiveText(R.string.cancel);
      a.positiveColor(Color.parseColor(skin));
      a.title(R.string.fab_skin);
      if (th1 == 1)       a.theme(Theme.DARK);
      LayoutInflater layoutInflater=(LayoutInflater)getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      View view=layoutInflater.inflate(R.layout.list_dialog,null);
      ListView listView=(ListView)view.findViewById(R.id.listView);
      listView.setDivider(null);
      a.customView(view,true);
      a.autoDismiss(true);
      MaterialDialog x=a.build();
      ArrayList<String> arrayList=new ArrayList<String>();
      for (      String c : colors) {
        arrayList.add(c);
      }
      ColorAdapter adapter=new ColorAdapter(getActivity(),arrayList,""String_Node_Str"",""String_Node_Str"");
      listView.setAdapter(adapter);
      x.show();
      return false;
    }
  }
);
  final CheckBoxPreference checkBoxPreference=(CheckBoxPreference)findPreference(""String_Node_Str"");
  boolean check=sharedPref.getBoolean(""String_Node_Str"",false);
  checkBoxPreference.setChecked(check);
  checkBoxPreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object o){
      if (!checkBoxPreference.isChecked()) {
        sharedPref.edit().putBoolean(""String_Node_Str"",true).apply();
        checkBoxPreference.setChecked(true);
      }
 else {
        sharedPref.edit().putBoolean(""String_Node_Str"",false).apply();
        checkBoxPreference.setChecked(false);
      }
      Toast.makeText(getActivity(),R.string.setRandom,Toast.LENGTH_LONG).show();
      return false;
    }
  }
);
  final CheckBoxPreference rootmode=(CheckBoxPreference)findPreference(""String_Node_Str"");
  rootmode.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      boolean b=sharedPref.getBoolean(""String_Node_Str"",false);
      if (b) {
        if (RootTools.isAccessGiven()) {
          rootmode.setChecked(true);
        }
 else {
          rootmode.setChecked(false);
          Toast.makeText(getActivity(),getResources().getString(R.string.rootfailure),Toast.LENGTH_LONG).show();
        }
      }
 else {
        rootmode.setChecked(false);
      }
      return false;
    }
  }
);
  Preference preference4=(Preference)findPreference(""String_Node_Str"");
  preference4.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      skin=sharedPref.getString(""String_Node_Str"",""String_Node_Str"");
      if (theme == 1)       a.theme(Theme.DARK);
      a.positiveText(R.string.close);
      a.positiveColor(Color.parseColor(skin));
      LayoutInflater layoutInflater=(LayoutInflater)getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      View view=layoutInflater.inflate(R.layout.authors,null);
      a.customView(view,true);
      a.title(R.string.authors);
      a.callback(new MaterialDialog.ButtonCallback(){
        @Override public void onPositive(        MaterialDialog materialDialog){
          materialDialog.cancel();
        }
        @Override public void onNegative(        MaterialDialog materialDialog){
        }
      }
);
      a.build().show();
      final Intent intent=new Intent(Intent.ACTION_VIEW);
      TextView googlePlus1=(TextView)view.findViewById(R.id.googlePlus1);
      googlePlus1.setTextColor(Color.parseColor(skin));
      TextView googlePlus2=(TextView)view.findViewById(R.id.googlePlus2);
      googlePlus2.setTextColor(Color.parseColor(skin));
      TextView git1=(TextView)view.findViewById(R.id.git1);
      git1.setTextColor(Color.parseColor(skin));
      TextView git2=(TextView)view.findViewById(R.id.git2);
      git2.setTextColor(Color.parseColor(skin));
      googlePlus1.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          intent.setData(Uri.parse(""String_Node_Str""));
          startActivity(intent);
        }
      }
);
      googlePlus2.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          intent.setData(Uri.parse(""String_Node_Str""));
          startActivity(intent);
        }
      }
);
      git1.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          intent.setData(Uri.parse(""String_Node_Str""));
          startActivity(intent);
        }
      }
);
      git2.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          intent.setData(Uri.parse(""String_Node_Str""));
          startActivity(intent);
        }
      }
);
      TextView textView=(TextView)view.findViewById(R.id.icon_credits);
      textView.setMovementMethod(LinkMovementMethod.getInstance());
      textView.setLinksClickable(true);
      textView.setText(Html.fromHtml(getActivity().getString(R.string.icon_credits)));
      return false;
    }
  }
);
  Preference preference1=(Preference)findPreference(""String_Node_Str"");
  preference1.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      MaterialDialog.Builder a=new MaterialDialog.Builder(getActivity());
      if (theme == 1)       a.theme(Theme.DARK);
      a.title(R.string.changelog);
      a.content(Html.fromHtml(getActivity().getString(R.string.changelog_version_5) + getActivity().getString(R.string.changelog_change_5) + getActivity().getString(R.string.changelog_version_4)+ getActivity().getString(R.string.changelog_change_4)+ getActivity().getString(R.string.changelog_version_3)+ getActivity().getString(R.string.changelog_change_3)+ getActivity().getString(R.string.changelog_version_2)+ getActivity().getString(R.string.changelog_change_2)+ getActivity().getString(R.string.changelog_version_1)+ getActivity().getString(R.string.changelog_change_1)));
      a.negativeText(R.string.close);
      a.negativeColor(Color.parseColor(skin));
      a.positiveText(R.string.fullChangelog);
      a.positiveColor(Color.parseColor(skin));
      a.callback(new MaterialDialog.ButtonCallback(){
        @Override public void onPositive(        MaterialDialog materialDialog){
          Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
          startActivity(intent);
        }
        @Override public void onNegative(        MaterialDialog materialDialog){
          materialDialog.cancel();
        }
      }
).build().show();
      return false;
    }
  }
);
  Preference preference2=(Preference)findPreference(""String_Node_Str"");
  final Dialog dialog=new Dialog(getActivity(),android.R.style.Theme_Holo_Light_DialogWhenLarge_NoActionBar);
  LayoutInflater inflater=(LayoutInflater)getActivity().getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
  final View dialog_view=inflater.inflate(R.layout.open_source_licenses,null);
  dialog.setContentView(dialog_view);
  preference2.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference arg0){
      String oss_dialog=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      WebView wv=(WebView)dialog_view.findViewById(R.id.webView1);
      wv.loadData(oss_dialog,""String_Node_Str"",null);
      dialog.show();
      return false;
    }
  }
);
  Preference preference3=(Preference)findPreference(""String_Node_Str"");
  preference3.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Intent intent=new Intent(Intent.ACTION_VIEW);
      intent.setType(""String_Node_Str"");
      intent.setData(Uri.parse(""String_Node_Str""));
      intent.setClassName(""String_Node_Str"",""String_Node_Str"");
      intent.putExtra(Intent.EXTRA_SUBJECT,""String_Node_Str"");
      startActivity(intent);
      return false;
    }
  }
);
  Preference preference5=(Preference)findPreference(""String_Node_Str"");
  preference5.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Intent intent1=new Intent(Intent.ACTION_VIEW);
      intent1.setData(Uri.parse(""String_Node_Str""));
      startActivity(intent1);
      return false;
    }
  }
);
  Preference preference6=findPreference(""String_Node_Str"");
  preference6.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Uri uri=Uri.parse(""String_Node_Str"");
      Intent intent=new Intent();
      intent.setData(uri);
      startActivity(intent);
      return false;
    }
  }
);
  Preference studio=findPreference(""String_Node_Str"");
  studio.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      COUNT++;
      if (COUNT >= 5) {
        if (toast != null)         toast.cancel();
        toast=Toast.makeText(getActivity(),""String_Node_Str"" + COUNT,Toast.LENGTH_SHORT);
        toast.show();
        sharedPref.edit().putInt(""String_Node_Str"",Integer.parseInt(Integer.toString(COUNT) + ""String_Node_Str"")).apply();
      }
 else {
        sharedPref.edit().putInt(""String_Node_Str"",0).apply();
      }
      return false;
    }
  }
);
  CheckBoxPreference preference7=(CheckBoxPreference)findPreference(""String_Node_Str"");
  if (BuildConfig.IS_VERSION_FDROID)   preference7.setEnabled(false);
  CheckBoxPreference preference8=(CheckBoxPreference)findPreference(""String_Node_Str"");
  if (Build.VERSION.SDK_INT >= 21)   preference8.setEnabled(true);
}",0.948553564551571
162619,"public void createviews(ArrayList<FileHeader> zipEntries,String dir){
  zipViewer.zipAdapter=new RarAdapter(zipViewer.getActivity(),zipEntries,zipViewer);
  zipViewer.listView.setAdapter(zipViewer.zipAdapter);
  if (!addheader) {
    if (uimode == 0)     listView.removeItemDecoration(dividerItemDecoration);
    listView.removeItemDecoration(headersDecor);
    addheader=true;
  }
  if (addheader) {
    if (uimode == 0) {
      dividerItemDecoration=new DividerItemDecoration(getActivity(),DividerItemDecoration.VERTICAL_LIST);
      listView.addItemDecoration(dividerItemDecoration);
    }
    headersDecor=new StickyRecyclerHeadersDecoration(zipAdapter);
    listView.addItemDecoration(headersDecor);
    addheader=false;
  }
  listView.setOnScrollListener(new HidingScrollListener(getActivity(),hidemode){
    @Override public void onMoved(    int distance){
      mToolbarContainer.setTranslationY(-distance);
    }
    @Override public void onShow(){
      mToolbarContainer.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
    }
    @Override public void onHide(){
      mToolbarContainer.findViewById(R.id.lin).animate().translationY(-mToolbarHeight).setInterpolator(new AccelerateInterpolator(2)).start();
    }
  }
);
  zipViewer.current=dir;
  zipViewer.bbar();
  swipeRefreshLayout.setRefreshing(false);
}","public void createviews(ArrayList<FileHeader> zipEntries,String dir){
  zipViewer.zipAdapter=new RarAdapter(zipViewer.getActivity(),zipEntries,zipViewer);
  zipViewer.listView.setAdapter(zipViewer.zipAdapter);
  if (!addheader) {
    listView.removeItemDecoration(dividerItemDecoration);
    listView.removeItemDecoration(headersDecor);
    addheader=true;
  }
  if (addheader) {
    dividerItemDecoration=new DividerItemDecoration(getActivity(),DividerItemDecoration.VERTICAL_LIST);
    listView.addItemDecoration(dividerItemDecoration);
    headersDecor=new StickyRecyclerHeadersDecoration(zipAdapter);
    listView.addItemDecoration(headersDecor);
    addheader=false;
  }
  listView.setOnScrollListener(new HidingScrollListener(getActivity(),hidemode){
    @Override public void onMoved(    int distance){
      mToolbarContainer.setTranslationY(-distance);
    }
    @Override public void onShow(){
      mToolbarContainer.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
    }
    @Override public void onHide(){
      mToolbarContainer.findViewById(R.id.lin).animate().translationY(-mToolbarHeight).setInterpolator(new AccelerateInterpolator(2)).start();
    }
  }
);
  zipViewer.current=dir;
  zipViewer.bbar();
  swipeRefreshLayout.setRefreshing(false);
}",0.8421450151057401
162620,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  s=getArguments().getString(""String_Node_Str"");
  f=new File(s);
  listView.setVisibility(View.VISIBLE);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  uimode=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  if (uimode == 1) {
    float scale=getResources().getDisplayMetrics().density;
    int dpAsPixels=(int)(5 * scale + 0.5f);
    listView.setPadding(dpAsPixels,0,dpAsPixels,0);
    listView.addItemDecoration(new SpacesItemDecoration(dpAsPixels));
  }
  listView.setVisibility(View.VISIBLE);
  mLayoutManager=new LinearLayoutManager(getActivity());
  listView.setLayoutManager(mLayoutManager);
  if (mainActivity.theme1 == 1)   rootView.setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
 else   if (uimode == 0) {
    listView.setBackgroundColor(getResources().getColor(android.R.color.background_light));
  }
  gobackitem=Sp.getBoolean(""String_Node_Str"",true);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  Calendar calendar=Calendar.getInstance();
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  files=new ArrayList<File>();
  loadlist(f.getPath());
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  hidemode=Sp.getInt(""String_Node_Str"",0);
  paddingTop=(mToolbarHeight=getToolbarHeight(getActivity())) + dpToPx(72);
  try {
    mainActivity.toolbar.setTitle(f.getName());
  }
 catch (  Exception e) {
    mainActivity.toolbar.setTitle(getResources().getString(R.string.zip_viewer));
  }
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.supportInvalidateOptionsMenu();
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  s=getArguments().getString(""String_Node_Str"");
  f=new File(s);
  listView.setVisibility(View.VISIBLE);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  listView.setVisibility(View.VISIBLE);
  mLayoutManager=new LinearLayoutManager(getActivity());
  listView.setLayoutManager(mLayoutManager);
  if (mainActivity.theme1 == 1)   rootView.setBackgroundColor(getResources().getColor(R.color.holo_dark_background));
 else   listView.setBackgroundColor(getResources().getColor(android.R.color.background_light));
  gobackitem=Sp.getBoolean(""String_Node_Str"",true);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  Calendar calendar=Calendar.getInstance();
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  files=new ArrayList<File>();
  loadlist(f.getPath());
  mToolbarContainer=getActivity().findViewById(R.id.lin);
  hidemode=Sp.getInt(""String_Node_Str"",0);
  paddingTop=(mToolbarHeight=getToolbarHeight(getActivity())) + dpToPx(72);
  try {
    mainActivity.toolbar.setTitle(f.getName());
  }
 catch (  Exception e) {
    mainActivity.toolbar.setTitle(getResources().getString(R.string.zip_viewer));
  }
  mainActivity.tabsSpinner.setVisibility(View.GONE);
  mainActivity.supportInvalidateOptionsMenu();
}",0.9004474272930649
162621,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mainActivity=(MainActivity)getActivity();
  no=getArguments().getInt(""String_Node_Str"",1);
  home=getArguments().getString(""String_Node_Str"");
  current=getArguments().getString(""String_Node_Str"");
  tabHandler=new TabHandler(getActivity(),null,null,1);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  savepaths=Sp.getBoolean(""String_Node_Str"",true);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  mainActivity.initiatebbar(ma.current,ma);
  sh=new Shortcuts(getActivity());
  islist=Sp.getBoolean(""String_Node_Str"",true);
  Calendar calendar=Calendar.getInstance();
  int hour=calendar.get(Calendar.HOUR_OF_DAY);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  theme=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  theme1=theme;
  if (theme == 2) {
    if (hour <= 6 || hour >= 18) {
      theme1=1;
    }
 else     theme1=0;
  }
  showPermissions=Sp.getBoolean(""String_Node_Str"",false);
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  gobackitem=Sp.getBoolean(""String_Node_Str"",false);
  circularImages=Sp.getBoolean(""String_Node_Str"",true);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  icons=new IconUtils(Sp,getActivity());
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mainActivity=(MainActivity)getActivity();
  no=getArguments().getInt(""String_Node_Str"",1);
  home=getArguments().getString(""String_Node_Str"");
  current=getArguments().getString(""String_Node_Str"");
  tabHandler=new TabHandler(getActivity(),null,null,1);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  savepaths=Sp.getBoolean(""String_Node_Str"",true);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  sh=new Shortcuts(getActivity());
  islist=Sp.getBoolean(""String_Node_Str"",true);
  Calendar calendar=Calendar.getInstance();
  int hour=calendar.get(Calendar.HOUR_OF_DAY);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  theme=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  theme1=theme;
  if (theme == 2) {
    if (hour <= 6 || hour >= 18) {
      theme1=1;
    }
 else     theme1=0;
  }
  showPermissions=Sp.getBoolean(""String_Node_Str"",false);
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  gobackitem=Sp.getBoolean(""String_Node_Str"",false);
  circularImages=Sp.getBoolean(""String_Node_Str"",true);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  icons=new IconUtils(Sp,getActivity());
}",0.983206106870229
162622,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(false);
  utils=new Futils();
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  color=calculatevalues(x);
  ColorMatrix colorMatrix=new ColorMatrix(calculatefilter(color));
  colorMatrixColorFilter=new ColorMatrixColorFilter(colorMatrix);
  history=new HistoryManager(getActivity(),""String_Node_Str"");
  hidden=new HistoryManager(getActivity(),""String_Node_Str"");
  hiddenfiles=hidden.readTable();
  rootMode=Sp.getBoolean(""String_Node_Str"",false);
  showHidden=Sp.getBoolean(""String_Node_Str"",false);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  if (islist) {
    folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  }
 else {
    folder=res.getDrawable(R.drawable.ic_grid_folder1);
  }
  folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  getSortModes();
  darkimage=res.getDrawable(R.drawable.ic_doc_image_dark);
  darkvideo=res.getDrawable(R.drawable.ic_doc_video_dark);
  this.setRetainInstance(false);
  File f;
  if (savepaths)   f=new File(current);
 else   f=new File(home);
  scroll=(HorizontalScrollView)rootView.findViewById(R.id.scroll);
  scroll1=(HorizontalScrollView)rootView.findViewById(R.id.scroll1);
  uimode=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  if (uimode == 1 && islist) {
    float scale=getResources().getDisplayMetrics().density;
    int dpAsPixels=(int)(5 * scale + 0.5f);
    listView.setPadding(dpAsPixels,0,dpAsPixels,0);
    listView.addItemDecoration(new SpacesItemDecoration(dpAsPixels));
  }
  footerView=getActivity().getLayoutInflater().inflate(R.layout.divider,null);
  mSwipeRefreshLayout=(SwipeRefreshLayout)rootView.findViewById(R.id.activity_main_swipe_refresh_layout);
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      loadlist(new File(current),false);
    }
  }
);
  if (savedInstanceState == null) {
    if (Intentpath != null) {
      File file1=new File(Intentpath);
      if (file1.isDirectory()) {
        loadlist(file1,false);
      }
 else {
        utils.openFile(file1,mainActivity);
        loadlist(f,false);
      }
    }
 else {
      loadlist(f,false);
    }
  }
 else {
    Bundle b=new Bundle();
    String cur=savedInstanceState.getString(""String_Node_Str"");
    if (cur != null) {
      b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
      b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
      scrolls.put(cur,b);
      list=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
      if (savedInstanceState.getBoolean(""String_Node_Str"")) {
        try {
          results=true;
          slist=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
          ((TextView)ma.pathbar.findViewById(R.id.pathname)).setText(ma.utils.getString(ma.getActivity(),R.string.searchresults));
          ma.adapter=new Recycleradapter(ma,slist,ma.getActivity());
          ma.listView.setAdapter(ma.adapter);
          ma.results=true;
        }
 catch (        Exception e) {
        }
      }
 else {
        createViews(list,true,new File(cur));
      }
      if (savedInstanceState.getBoolean(""String_Node_Str"")) {
        for (        int i : savedInstanceState.getIntegerArrayList(""String_Node_Str"")) {
          adapter.toggleChecked(i);
        }
      }
    }
  }
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(false);
  mainActivity=(MainActivity)getActivity();
  utils=new Futils();
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  color=calculatevalues(x);
  ColorMatrix colorMatrix=new ColorMatrix(calculatefilter(color));
  colorMatrixColorFilter=new ColorMatrixColorFilter(colorMatrix);
  history=new HistoryManager(getActivity(),""String_Node_Str"");
  hidden=new HistoryManager(getActivity(),""String_Node_Str"");
  hiddenfiles=hidden.readTable();
  rootMode=Sp.getBoolean(""String_Node_Str"",false);
  showHidden=Sp.getBoolean(""String_Node_Str"",false);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  if (islist) {
    folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  }
 else {
    folder=res.getDrawable(R.drawable.ic_grid_folder1);
  }
  folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  getSortModes();
  darkimage=res.getDrawable(R.drawable.ic_doc_image_dark);
  darkvideo=res.getDrawable(R.drawable.ic_doc_video_dark);
  this.setRetainInstance(false);
  File f;
  if (savepaths)   f=new File(current);
 else   f=new File(home);
  mainActivity.initiatebbar(current,this);
  scroll=(HorizontalScrollView)rootView.findViewById(R.id.scroll);
  scroll1=(HorizontalScrollView)rootView.findViewById(R.id.scroll1);
  uimode=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  if (uimode == 1 && islist) {
    float scale=getResources().getDisplayMetrics().density;
    int dpAsPixels=(int)(5 * scale + 0.5f);
    listView.setPadding(dpAsPixels,0,dpAsPixels,0);
    listView.addItemDecoration(new SpacesItemDecoration(dpAsPixels));
  }
  footerView=getActivity().getLayoutInflater().inflate(R.layout.divider,null);
  mSwipeRefreshLayout=(SwipeRefreshLayout)rootView.findViewById(R.id.activity_main_swipe_refresh_layout);
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      loadlist(new File(current),false);
    }
  }
);
  if (savedInstanceState == null) {
    if (Intentpath != null) {
      File file1=new File(Intentpath);
      if (file1.isDirectory()) {
        loadlist(file1,false);
      }
 else {
        utils.openFile(file1,mainActivity);
        loadlist(f,false);
      }
    }
 else {
      loadlist(f,false);
    }
  }
 else {
    Bundle b=new Bundle();
    String cur=savedInstanceState.getString(""String_Node_Str"");
    if (cur != null) {
      b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
      b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
      scrolls.put(cur,b);
      list=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
      if (savedInstanceState.getBoolean(""String_Node_Str"")) {
        try {
          results=true;
          slist=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
          ((TextView)ma.pathbar.findViewById(R.id.pathname)).setText(ma.utils.getString(ma.getActivity(),R.string.searchresults));
          ma.adapter=new Recycleradapter(ma,slist,ma.getActivity());
          ma.listView.setAdapter(ma.adapter);
          ma.results=true;
        }
 catch (        Exception e) {
        }
      }
 else {
        createViews(list,true,new File(cur));
      }
      if (savedInstanceState.getBoolean(""String_Node_Str"")) {
        for (        int i : savedInstanceState.getIntegerArrayList(""String_Node_Str"")) {
          adapter.toggleChecked(i);
        }
      }
    }
  }
}",0.9876753081172972
162623,"@Override public void onClick(View view){
  popup.show();
}","@Override public void onClick(View view){
  Fragment fragment=getFragment().getTab();
  if (fragment.getClass().getName().contains(""String_Node_Str"")) {
    Main main=(Main)fragment;
    main.bbar(main.current);
    main.crossfade();
    main.timer.cancel();
    main.timer.start();
  }
}",0.2651296829971181
162624,"/** 
 * Called when the activity is first created.
 */
@Override public void onCreate(Bundle savedInstanceState){
  try {
    super.onCreate(savedInstanceState);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  getActionBar().hide();
  Sp=PreferenceManager.getDefaultSharedPreferences(this);
  utils=new Futils();
  s=new Shortcuts(this);
  path=getIntent().getStringExtra(""String_Node_Str"");
  restart=getIntent().getBooleanExtra(""String_Node_Str"",false);
  val=getStorageDirectories();
  rootmode=Sp.getBoolean(""String_Node_Str"",false);
  theme=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  util=new IconUtils(Sp,this);
  Calendar calendar=Calendar.getInstance();
  int hour=calendar.get(Calendar.HOUR_OF_DAY);
  int th=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  theme1=th;
  if (th == 2) {
    Sp.edit().putString(""String_Node_Str"",""String_Node_Str"").commit();
    if (hour <= 6 || hour >= 18) {
      theme1=1;
    }
 else     theme1=0;
  }
  if (theme1 == 1) {
    setTheme(R.style.DarkTheme);
  }
  setContentView(R.layout.main);
  aBoolean=Sp.getBoolean(""String_Node_Str"",true);
  ImageView overflow=((ImageView)findViewById(R.id.action_overflow));
  showPopup(overflow);
  title=(TextView)findViewById(R.id.title);
  frameLayout=(FrameLayout)findViewById(R.id.content_frame);
  paste=(ImageButton)findViewById(R.id.paste);
  paste.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Main ma=((TabFragment)getSupportFragmentManager().findFragmentById(R.id.content_frame)).getTab();
      String path=ma.current;
      ArrayList<String> arrayList=new ArrayList<String>();
      if (COPY_PATH != null) {
        arrayList=COPY_PATH;
        new CheckForFiles(ma,path,false).execute(arrayList);
      }
 else       if (MOVE_PATH != null) {
        arrayList=MOVE_PATH;
        new CheckForFiles(ma,path,true).execute(arrayList);
      }
      COPY_PATH=null;
      MOVE_PATH=null;
      invalidatePasteButton();
    }
  }
);
  intent=getIntent();
  if (intent.getAction().equals(Intent.ACTION_GET_CONTENT) || intent.getAction().equals(RingtoneManager.ACTION_RINGTONE_PICKER)) {
    mReturnIntent=true;
    if (intent.getAction().equals(RingtoneManager.ACTION_RINGTONE_PICKER)) {
      mRingtonePickerIntent=true;
    }
    Toast.makeText(this,utils.getString(con,R.string.pick_a_file),Toast.LENGTH_LONG).show();
  }
  skin=PreferenceManager.getDefaultSharedPreferences(this).getString(""String_Node_Str"",""String_Node_Str"");
  RelativeLayout linearLayout=(RelativeLayout)findViewById(R.id.action_bar);
  linearLayout.setBackgroundColor(Color.parseColor(skin));
  LinearLayout linearLayout1=(LinearLayout)findViewById(R.id.pathbar);
  linearLayout1.setBackgroundColor(Color.parseColor(skin));
  title.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
    }
  }
);
  HorizontalScrollView horizontalScrollView=(HorizontalScrollView)findViewById(R.id.scroll1);
  horizontalScrollView.setBackgroundColor(Color.parseColor(skin));
  HorizontalScrollView horizontalScrollView1=(HorizontalScrollView)findViewById(R.id.scroll);
  horizontalScrollView1.setBackgroundColor(Color.parseColor(skin));
  LinearLayout linearLayout2=(LinearLayout)findViewById(R.id.drawerheader);
  linearLayout2.setBackgroundColor(Color.parseColor(skin));
  LinearLayout linearLayout3=(LinearLayout)findViewById(R.id.settings_bg);
  linearLayout3.setBackgroundColor(Color.parseColor(skin));
  FloatingActionButton floatingActionButton=(FloatingActionButton)findViewById(R.id.fab);
  floatingActionButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      MaterialDialog.Builder builder=new MaterialDialog.Builder(con);
      builder.items(new String[]{getResources().getString(R.string.folder),getResources().getString(R.string.file),getResources().getString(R.string.tab)});
      builder.itemsCallback(new MaterialDialog.ListCallback(){
        @Override public void onSelection(        MaterialDialog materialDialog,        View view,        int i,        CharSequence s){
          add(i);
        }
      }
);
      builder.title(getResources().getString(R.string.new_string));
      if (theme1 == 1)       builder.theme(Theme.DARK);
      builder.build().show();
    }
  }
);
  if (Sp.getBoolean(""String_Node_Str"",true)) {
    try {
      s.makeS();
    }
 catch (    Exception e) {
    }
    File file=new File(val.get(0));
    Sp.edit().putString(""String_Node_Str"",file.getPath()).apply();
    Sp.edit().putBoolean(""String_Node_Str"",false).commit();
  }
  mDrawerLinear=(RelativeLayout)findViewById(R.id.left_drawer);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mDrawerList=(ListView)findViewById(R.id.menu_drawer);
  (findViewById(R.id.search)).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      search();
    }
  }
);
  list=new ArrayList<String>();
  for (int i=0; i < val.size(); i++) {
    File file=new File(val.get(i));
    if (!file.isDirectory())     list.add(val.get(i));
 else     if (file.canExecute())     list.add(val.get(i));
  }
  list.add(utils.getString(this,R.string.apps));
  list.add(utils.getString(this,R.string.bookmanag));
  adapter=new DrawerAdapter(this,list,MainActivity.this,Sp);
  mDrawerList.setAdapter(adapter);
  if (savedInstanceState == null) {
    if (!restart)     selectItem(0);
 else     goToMain();
  }
 else {
    select=savedInstanceState.getInt(""String_Node_Str"",0);
    adapter.toggleChecked(select);
  }
  if (Build.VERSION.SDK_INT >= 19) {
    SystemBarTintManager tintManager=new SystemBarTintManager(this);
    tintManager.setStatusBarTintEnabled(true);
    tintManager.setStatusBarTintColor(Color.parseColor(skin));
    SystemBarTintManager.SystemBarConfig config=tintManager.getConfig();
    DrawerLayout.MarginLayoutParams p=(ViewGroup.MarginLayoutParams)mDrawerLayout.getLayoutParams();
    p.setMargins(0,config.getPixelInsetTop(false),0,0);
  }
  final Activity activity=this;
  ((ImageButton)findViewById(R.id.settingsbutton)).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Intent in=new Intent(MainActivity.this,Preferences.class);
      final int enter_anim=android.R.anim.fade_in;
      final int exit_anim=android.R.anim.fade_out;
      activity.overridePendingTransition(enter_anim,exit_anim);
      activity.finish();
      activity.overridePendingTransition(enter_anim,exit_anim);
      activity.startActivity(in);
    }
  }
);
  if (theme1 == 1) {
    mDrawerList.setBackgroundResource(android.R.drawable.screen_background_dark);
  }
  mDrawerList.setOnItemClickListener(new DrawerItemClickListener());
  mDrawerList.setDivider(null);
  progress=(ProgressWheel)findViewById(R.id.progressBar);
  progress.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (select != 102) {
        android.support.v4.app.FragmentTransaction transaction=getSupportFragmentManager().beginTransaction();
        transaction.replace(R.id.content_frame,new ProcessViewer());
        select=102;
        title.setText(utils.getString(con,R.string.process_viewer));
        transaction.commit();
      }
 else {
        selectItem(0);
      }
    }
  }
);
  if (select != null && select < list.size() - 2) {
    title.setText(R.string.app_name);
  }
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,util.getDrawerDrawable(),R.string.drawer_open,R.string.drawer_close){
    public void onDrawerClosed(    View view){
      if (select == 102)       title.setText(R.string.process_viewer);
    }
    public void onDrawerOpened(    View drawerView){
    }
  }
;
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  ((ImageButton)findViewById(R.id.drawer_buttton)).setOnClickListener(new ImageView.OnClickListener(){
    @Override public void onClick(    View view){
      if (mDrawerLayout.isDrawerOpen(mDrawerLinear)) {
        mDrawerLayout.closeDrawer(mDrawerLinear);
      }
 else       mDrawerLayout.openDrawer(mDrawerLinear);
    }
  }
);
}","/** 
 * Called when the activity is first created.
 */
@Override public void onCreate(Bundle savedInstanceState){
  try {
    super.onCreate(savedInstanceState);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  getActionBar().hide();
  Sp=PreferenceManager.getDefaultSharedPreferences(this);
  utils=new Futils();
  s=new Shortcuts(this);
  path=getIntent().getStringExtra(""String_Node_Str"");
  restart=getIntent().getBooleanExtra(""String_Node_Str"",false);
  val=getStorageDirectories();
  rootmode=Sp.getBoolean(""String_Node_Str"",false);
  theme=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  util=new IconUtils(Sp,this);
  Calendar calendar=Calendar.getInstance();
  int hour=calendar.get(Calendar.HOUR_OF_DAY);
  int th=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  theme1=th;
  if (th == 2) {
    Sp.edit().putString(""String_Node_Str"",""String_Node_Str"").commit();
    if (hour <= 6 || hour >= 18) {
      theme1=1;
    }
 else     theme1=0;
  }
  if (theme1 == 1) {
    setTheme(R.style.DarkTheme);
  }
  setContentView(R.layout.main);
  aBoolean=Sp.getBoolean(""String_Node_Str"",true);
  ImageView overflow=((ImageView)findViewById(R.id.action_overflow));
  showPopup(overflow);
  title=(TextView)findViewById(R.id.title);
  frameLayout=(FrameLayout)findViewById(R.id.content_frame);
  paste=(ImageButton)findViewById(R.id.paste);
  paste.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Main ma=((TabFragment)getSupportFragmentManager().findFragmentById(R.id.content_frame)).getTab();
      String path=ma.current;
      ArrayList<String> arrayList=new ArrayList<String>();
      if (COPY_PATH != null) {
        arrayList=COPY_PATH;
        new CheckForFiles(ma,path,false).execute(arrayList);
      }
 else       if (MOVE_PATH != null) {
        arrayList=MOVE_PATH;
        new CheckForFiles(ma,path,true).execute(arrayList);
      }
      COPY_PATH=null;
      MOVE_PATH=null;
      invalidatePasteButton();
    }
  }
);
  intent=getIntent();
  if (intent.getAction().equals(Intent.ACTION_GET_CONTENT) || intent.getAction().equals(RingtoneManager.ACTION_RINGTONE_PICKER)) {
    mReturnIntent=true;
    if (intent.getAction().equals(RingtoneManager.ACTION_RINGTONE_PICKER)) {
      mRingtonePickerIntent=true;
    }
    Toast.makeText(this,utils.getString(con,R.string.pick_a_file),Toast.LENGTH_LONG).show();
  }
  skin=PreferenceManager.getDefaultSharedPreferences(this).getString(""String_Node_Str"",""String_Node_Str"");
  RelativeLayout linearLayout=(RelativeLayout)findViewById(R.id.action_bar);
  linearLayout.setBackgroundColor(Color.parseColor(skin));
  LinearLayout linearLayout1=(LinearLayout)findViewById(R.id.pathbar);
  linearLayout1.setBackgroundColor(Color.parseColor(skin));
  title.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
    }
  }
);
  HorizontalScrollView horizontalScrollView=(HorizontalScrollView)findViewById(R.id.scroll1);
  horizontalScrollView.setBackgroundColor(Color.parseColor(skin));
  HorizontalScrollView horizontalScrollView1=(HorizontalScrollView)findViewById(R.id.scroll);
  horizontalScrollView1.setBackgroundColor(Color.parseColor(skin));
  LinearLayout linearLayout2=(LinearLayout)findViewById(R.id.drawerheader);
  linearLayout2.setBackgroundColor(Color.parseColor(skin));
  LinearLayout linearLayout3=(LinearLayout)findViewById(R.id.settings_bg);
  linearLayout3.setBackgroundColor(Color.parseColor(skin));
  FloatingActionButton floatingActionButton=(FloatingActionButton)findViewById(R.id.fab);
  floatingActionButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      MaterialDialog.Builder builder=new MaterialDialog.Builder(con);
      builder.items(new String[]{getResources().getString(R.string.folder),getResources().getString(R.string.file),getResources().getString(R.string.tab)});
      builder.itemsCallback(new MaterialDialog.ListCallback(){
        @Override public void onSelection(        MaterialDialog materialDialog,        View view,        int i,        CharSequence s){
          add(i);
        }
      }
);
      builder.title(getResources().getString(R.string.new_string));
      if (theme1 == 1)       builder.theme(Theme.DARK);
      builder.build().show();
    }
  }
);
  if (Sp.getBoolean(""String_Node_Str"",true)) {
    try {
      s.makeS();
    }
 catch (    Exception e) {
    }
    File file=new File(val.get(0));
    Sp.edit().putString(""String_Node_Str"",file.getPath()).apply();
    Sp.edit().putBoolean(""String_Node_Str"",false).commit();
  }
  mDrawerLinear=(RelativeLayout)findViewById(R.id.left_drawer);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mDrawerList=(ListView)findViewById(R.id.menu_drawer);
  (findViewById(R.id.search)).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      search();
    }
  }
);
  list=new ArrayList<String>();
  for (int i=0; i < val.size(); i++) {
    File file=new File(val.get(i));
    if (!file.isDirectory())     list.add(val.get(i));
 else     if (file.canExecute())     list.add(val.get(i));
  }
  list.add(utils.getString(this,R.string.apps));
  list.add(utils.getString(this,R.string.bookmanag));
  adapter=new DrawerAdapter(this,list,MainActivity.this,Sp);
  mDrawerList.setAdapter(adapter);
  initiatebbar();
  if (savedInstanceState == null) {
    if (!restart)     selectItem(0);
 else     goToMain();
  }
 else {
    select=savedInstanceState.getInt(""String_Node_Str"",0);
    adapter.toggleChecked(select);
  }
  if (Build.VERSION.SDK_INT >= 19) {
    SystemBarTintManager tintManager=new SystemBarTintManager(this);
    tintManager.setStatusBarTintEnabled(true);
    tintManager.setStatusBarTintColor(Color.parseColor(skin));
    SystemBarTintManager.SystemBarConfig config=tintManager.getConfig();
    DrawerLayout.MarginLayoutParams p=(ViewGroup.MarginLayoutParams)mDrawerLayout.getLayoutParams();
    p.setMargins(0,config.getPixelInsetTop(false),0,0);
  }
  final Activity activity=this;
  ((ImageButton)findViewById(R.id.settingsbutton)).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Intent in=new Intent(MainActivity.this,Preferences.class);
      final int enter_anim=android.R.anim.fade_in;
      final int exit_anim=android.R.anim.fade_out;
      activity.overridePendingTransition(enter_anim,exit_anim);
      activity.finish();
      activity.overridePendingTransition(enter_anim,exit_anim);
      activity.startActivity(in);
    }
  }
);
  if (theme1 == 1) {
    mDrawerList.setBackgroundResource(android.R.drawable.screen_background_dark);
  }
  mDrawerList.setOnItemClickListener(new DrawerItemClickListener());
  mDrawerList.setDivider(null);
  progress=(ProgressWheel)findViewById(R.id.progressBar);
  progress.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (select != 102) {
        android.support.v4.app.FragmentTransaction transaction=getSupportFragmentManager().beginTransaction();
        transaction.replace(R.id.content_frame,new ProcessViewer());
        select=102;
        title.setText(utils.getString(con,R.string.process_viewer));
        transaction.commit();
      }
 else {
        selectItem(0);
      }
    }
  }
);
  if (select != null && select < list.size() - 2) {
    title.setText(R.string.app_name);
  }
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,util.getDrawerDrawable(),R.string.drawer_open,R.string.drawer_close){
    public void onDrawerClosed(    View view){
      if (select == 102)       title.setText(R.string.process_viewer);
    }
    public void onDrawerOpened(    View drawerView){
    }
  }
;
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  ((ImageButton)findViewById(R.id.drawer_buttton)).setOnClickListener(new ImageView.OnClickListener(){
    @Override public void onClick(    View view){
      if (mDrawerLayout.isDrawerOpen(mDrawerLinear)) {
        mDrawerLayout.closeDrawer(mDrawerLinear);
      }
 else       mDrawerLayout.openDrawer(mDrawerLinear);
    }
  }
);
}",0.9988992172211352
162625,"public void onClick(View p1){
  loadlist(new File(rpaths.get(index)),true);
  timer.cancel();
  timer.start();
}","public void onClick(View p1){
  mainActivity.getFragment().getTab().loadlist(new File(""String_Node_Str""),false);
  timer.cancel();
  timer.start();
}",0.7432950191570882
162626,"public void createViews(ArrayList<Layoutelements> bitmap,boolean back,File f){
  try {
    if (bitmap != null) {
      TextView footerText=(TextView)footerView.findViewById(R.id.footerText);
      if (bitmap.size() == 0) {
        footerText.setText(res.getString(R.string.nofiles));
      }
 else {
        footerText.setText(res.getString(R.string.tapnhold));
      }
      if (!f.getPath().equals(""String_Node_Str"")) {
        if (bitmap.size() == 0 || !bitmap.get(0).getSize().equals(goback))         bitmap.add(0,utils.newElement(res.getDrawable(R.drawable.abc_ic_ab_back_mtrl_am_alpha),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",goback,""String_Node_Str"",true));
      }
      adapter=new MyAdapter(getActivity(),R.layout.rowlayout,bitmap,ma);
      try {
        if (aBoolean) {
          listView.setAdapter(adapter);
        }
 else {
          gridView.setAdapter(adapter);
        }
        results=false;
        current=f.getPath();
        if (back) {
          if (scrolls.containsKey(current)) {
            Bundle b=scrolls.get(current);
            listView.setSelectionFromTop(b.getInt(""String_Node_Str""),b.getInt(""String_Node_Str""));
          }
        }
        if (!shouldbbar) {
          shouldbbar=true;
          if (mainActivity.shouldbbar(current))           bbar(current);
        }
 else         bbar(current);
        mainActivity.updateDrawer(current);
        mainActivity.updatepager();
      }
 catch (      Exception e) {
      }
    }
 else {
      loadlist(new File(current),true);
    }
  }
 catch (  Exception e) {
  }
}","public void createViews(ArrayList<Layoutelements> bitmap,boolean back,File f){
  try {
    if (bitmap != null) {
      TextView footerText=(TextView)footerView.findViewById(R.id.footerText);
      if (bitmap.size() == 0) {
        footerText.setText(res.getString(R.string.nofiles));
      }
 else {
        footerText.setText(res.getString(R.string.tapnhold));
      }
      if (!f.getPath().equals(""String_Node_Str"")) {
        if (bitmap.size() == 0 || !bitmap.get(0).getSize().equals(goback))         bitmap.add(0,utils.newElement(res.getDrawable(R.drawable.abc_ic_ab_back_mtrl_am_alpha),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",goback,""String_Node_Str"",true));
      }
      adapter=new MyAdapter(getActivity(),R.layout.rowlayout,bitmap,ma);
      try {
        if (aBoolean) {
          listView.setAdapter(adapter);
        }
 else {
          gridView.setAdapter(adapter);
        }
        results=false;
        current=f.getPath();
        if (back) {
          if (scrolls.containsKey(current)) {
            Bundle b=scrolls.get(current);
            listView.setSelectionFromTop(b.getInt(""String_Node_Str""),b.getInt(""String_Node_Str""));
          }
        }
        floatingActionButton.show();
        if (!shouldbbar) {
          shouldbbar=true;
          if (mainActivity.shouldbbar(current)) {
            updatePath(current);
            if (buttons.getVisibility() == View.VISIBLE)             bbar(current);
          }
        }
 else {
          if (buttons.getVisibility() == View.VISIBLE)           bbar(current);
          updatePath(current);
        }
        mainActivity.updateDrawer(current);
        mainActivity.updatepager();
      }
 catch (      Exception e) {
      }
    }
 else {
      loadlist(new File(current),true);
    }
  }
 catch (  Exception e) {
  }
}",0.8974889217134416
162627,"public void bbar(String text){
  try {
    buttons.removeAllViews();
    Drawable arrow=getResources().getDrawable(R.drawable.abc_ic_ab_back_holo_dark);
    Bundle b=utils.getPaths(text,getActivity());
    ArrayList<String> names=b.getStringArrayList(""String_Node_Str"");
    ArrayList<String> rnames=new ArrayList<String>();
    for (int i=names.size() - 1; i >= 0; i--) {
      rnames.add(names.get(i));
    }
    ArrayList<String> paths=b.getStringArrayList(""String_Node_Str"");
    final ArrayList<String> rpaths=new ArrayList<String>();
    for (int i=paths.size() - 1; i >= 0; i--) {
      rpaths.add(paths.get(i));
    }
    for (int i=0; i < names.size(); i++) {
      ImageView v=new ImageView(getActivity());
      v.setImageDrawable(arrow);
      LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
      params.gravity=Gravity.CENTER_VERTICAL;
      v.setLayoutParams(params);
      final int index=i;
      if (rpaths.get(i).equals(""String_Node_Str"")) {
        ib=new ImageButton(getActivity());
        ib.setImageDrawable(icons.getRootDrawable());
        ib.setBackgroundColor(Color.parseColor(skin));
        ib.setOnClickListener(new View.OnClickListener(){
          public void onClick(          View p1){
            loadlist(new File(""String_Node_Str""),false);
            timer.cancel();
            timer.start();
          }
        }
);
        buttons.addView(ib);
        if (names.size() - i != 1)         buttons.addView(v);
      }
 else       if (rpaths.get(i).equals(Environment.getExternalStorageDirectory().getPath())) {
        ib=new ImageButton(getActivity());
        ib.setImageDrawable(icons.getSdDrawable());
        ib.setBackgroundColor(Color.parseColor(skin));
        ib.setOnClickListener(new View.OnClickListener(){
          public void onClick(          View p1){
            loadlist(new File(rpaths.get(index)),true);
            timer.cancel();
            timer.start();
          }
        }
);
        buttons.addView(ib);
        if (names.size() - i != 1)         buttons.addView(v);
      }
 else {
        Button button=new Button(getActivity());
        button.setText(rnames.get(index));
        button.setTextColor(getResources().getColor(android.R.color.white));
        button.setTextSize(13);
        button.setBackgroundResource(0);
        button.setOnClickListener(new Button.OnClickListener(){
          public void onClick(          View p1){
            loadlist(new File(rpaths.get(index)),true);
            timer.cancel();
            timer.start();
          }
        }
);
        button.setOnLongClickListener(new View.OnLongClickListener(){
          @Override public boolean onLongClick(          View view){
            File file1=new File(rpaths.get(index));
            copyToClipboard(getActivity(),file1.getPath());
            Toast.makeText(getActivity(),res.getString(R.string.pathcopied),Toast.LENGTH_SHORT).show();
            return false;
          }
        }
);
        buttons.addView(button);
        if (names.size() - i != 1)         buttons.addView(v);
      }
    }
    File f=new File(text);
    TextView textView=(TextView)pathbar.findViewById(R.id.pathname);
    String used=utils.readableFileSize(f.getTotalSpace() - f.getFreeSpace());
    String free=utils.readableFileSize(f.getFreeSpace());
    textView.setText(res.getString(R.string.used) + ""String_Node_Str"" + used+ ""String_Node_Str""+ res.getString(R.string.free)+ ""String_Node_Str""+ free);
    TextView bapath=(TextView)pathbar.findViewById(R.id.fullpath);
    bapath.setAllCaps(true);
    bapath.setText(f.getPath());
    scroll.post(new Runnable(){
      @Override public void run(){
        scroll.fullScroll(View.FOCUS_RIGHT);
        scroll1.fullScroll(View.FOCUS_RIGHT);
      }
    }
);
    if (buttons.getVisibility() == View.VISIBLE) {
      timer.cancel();
      timer.start();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"");
  }
}","public void bbar(String text){
  try {
    buttons.removeAllViews();
    Drawable arrow=getResources().getDrawable(R.drawable.abc_ic_ab_back_holo_dark);
    Bundle b=utils.getPaths(text,getActivity());
    ArrayList<String> names=b.getStringArrayList(""String_Node_Str"");
    ArrayList<String> rnames=new ArrayList<String>();
    for (int i=names.size() - 1; i >= 0; i--) {
      rnames.add(names.get(i));
    }
    ArrayList<String> paths=b.getStringArrayList(""String_Node_Str"");
    final ArrayList<String> rpaths=new ArrayList<String>();
    for (int i=paths.size() - 1; i >= 0; i--) {
      rpaths.add(paths.get(i));
    }
    for (int i=0; i < names.size(); i++) {
      ImageView v=new ImageView(getActivity());
      v.setImageDrawable(arrow);
      LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
      params.gravity=Gravity.CENTER_VERTICAL;
      v.setLayoutParams(params);
      final int index=i;
      if (rpaths.get(i).equals(""String_Node_Str"")) {
        ib=new ImageButton(getActivity());
        ib.setImageDrawable(icons.getRootDrawable());
        ib.setBackgroundColor(Color.parseColor(skin));
        ib.setOnClickListener(new View.OnClickListener(){
          public void onClick(          View p1){
            mainActivity.getFragment().getTab().loadlist(new File(""String_Node_Str""),false);
            timer.cancel();
            timer.start();
          }
        }
);
        buttons.addView(ib);
        if (names.size() - i != 1)         buttons.addView(v);
      }
 else       if (rpaths.get(i).equals(Environment.getExternalStorageDirectory().getPath())) {
        ib=new ImageButton(getActivity());
        ib.setImageDrawable(icons.getSdDrawable());
        ib.setBackgroundColor(Color.parseColor(skin));
        ib.setOnClickListener(new View.OnClickListener(){
          public void onClick(          View p1){
            mainActivity.getFragment().getTab().loadlist(new File(""String_Node_Str""),false);
            timer.cancel();
            timer.start();
          }
        }
);
        buttons.addView(ib);
        if (names.size() - i != 1)         buttons.addView(v);
      }
 else {
        Button button=new Button(getActivity());
        button.setText(rnames.get(index));
        button.setTextColor(getResources().getColor(android.R.color.white));
        button.setTextSize(13);
        button.setBackgroundResource(0);
        button.setOnClickListener(new Button.OnClickListener(){
          public void onClick(          View p1){
            mainActivity.getFragment().getTab().loadlist(new File(""String_Node_Str""),false);
            timer.cancel();
            timer.start();
          }
        }
);
        button.setOnLongClickListener(new View.OnLongClickListener(){
          @Override public boolean onLongClick(          View view){
            File file1=new File(rpaths.get(index));
            copyToClipboard(getActivity(),file1.getPath());
            Toast.makeText(getActivity(),res.getString(R.string.pathcopied),Toast.LENGTH_SHORT).show();
            return false;
          }
        }
);
        buttons.addView(button);
        if (names.size() - i != 1)         buttons.addView(v);
      }
    }
    File f=new File(text);
    TextView textView=(TextView)pathbar.findViewById(R.id.pathname);
    String used=utils.readableFileSize(f.getTotalSpace() - f.getFreeSpace());
    String free=utils.readableFileSize(f.getFreeSpace());
    textView.setText(res.getString(R.string.used) + ""String_Node_Str"" + used+ ""String_Node_Str""+ res.getString(R.string.free)+ ""String_Node_Str""+ free);
    TextView bapath=(TextView)pathbar.findViewById(R.id.fullpath);
    bapath.setAllCaps(true);
    bapath.setText(f.getPath());
    scroll.post(new Runnable(){
      @Override public void run(){
        scroll.fullScroll(View.FOCUS_RIGHT);
        scroll1.fullScroll(View.FOCUS_RIGHT);
      }
    }
);
    if (buttons.getVisibility() == View.VISIBLE) {
      timer.cancel();
      timer.start();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"");
  }
}",0.96855192588981
162628,"private void crossfade(){
  buttons.setAlpha(0f);
  buttons.setVisibility(View.VISIBLE);
  buttons.animate().alpha(1f).setDuration(100).setListener(null);
  pathbar.animate().alpha(0f).setDuration(100).setListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      pathbar.setVisibility(View.GONE);
    }
  }
);
}","public void crossfade(){
  buttons.setAlpha(0f);
  buttons.setVisibility(View.VISIBLE);
  buttons.animate().alpha(1f).setDuration(100).setListener(null);
  pathbar.animate().alpha(0f).setDuration(100).setListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      pathbar.setVisibility(View.GONE);
    }
  }
);
}",0.9849108367626886
162629,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(false);
  getActivity().findViewById(R.id.buttonbarframe).setVisibility(View.VISIBLE);
  list1=new ArrayList<String>();
  getActivity().findViewById(R.id.search).setVisibility(View.VISIBLE);
  getActivity().findViewById(R.id.action_overflow).setVisibility(View.VISIBLE);
  utils=new Futils();
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  color=calculatevalues(x);
  ColorMatrix colorMatrix=new ColorMatrix(calculatefilter(color));
  colorMatrixColorFilter=new ColorMatrixColorFilter(colorMatrix);
  history=new HistoryManager(getActivity(),""String_Node_Str"");
  hidden=new HistoryManager(getActivity(),""String_Node_Str"");
  hiddenfiles=hidden.readTable();
  rootMode=Sp.getBoolean(""String_Node_Str"",false);
  showHidden=Sp.getBoolean(""String_Node_Str"",false);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  if (aBoolean) {
    folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  }
 else {
    folder=res.getDrawable(R.drawable.ic_grid_folder1);
  }
  folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  getSortModes();
  darkimage=res.getDrawable(R.drawable.ic_doc_image_dark);
  darkvideo=res.getDrawable(R.drawable.ic_doc_video_dark);
  home=Sp.getString(""String_Node_Str"",mainActivity.val.get(0));
  this.setRetainInstance(false);
  File f=new File(Sp.getString(""String_Node_Str"",home));
  buttons=(LinearLayout)getActivity().findViewById(R.id.buttons);
  pathbar=(LinearLayout)getActivity().findViewById(R.id.pathbar);
  textView=(TextView)getActivity().findViewById(R.id.fullpath);
  pathbar.setBackgroundColor(Color.parseColor(skin));
  pathbar.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      crossfade();
      timer.cancel();
      timer.start();
    }
  }
);
  textView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      crossfade();
      timer.cancel();
      timer.start();
    }
  }
);
  scroll=(HorizontalScrollView)getActivity().findViewById(R.id.scroll);
  scroll1=(HorizontalScrollView)getActivity().findViewById(R.id.scroll1);
  uimode=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  if (uimode == 1) {
    float scale=getResources().getDisplayMetrics().density;
    int dpAsPixels=(int)(5 * scale + 0.5f);
    if (aBoolean) {
      listView.setPadding(dpAsPixels,0,dpAsPixels,0);
      listView.setDivider(null);
      listView.setDividerHeight(dpAsPixels);
    }
 else {
      gridView.setPadding(dpAsPixels,0,dpAsPixels,0);
    }
  }
  footerView=getActivity().getLayoutInflater().inflate(R.layout.divider,null);
  if (aBoolean) {
    listView.addFooterView(footerView);
    listView.setFastScrollEnabled(true);
  }
 else {
    gridView.setFastScrollEnabled(true);
  }
  if (savedInstanceState == null) {
    if (Intentpath != null) {
      File file1=new File(Intentpath);
      if (file1.isDirectory())       loadlist(file1,false);
 else {
        utils.openFile(file1,mainActivity);
        loadlist(f,false);
      }
    }
 else     loadlist(f,false);
  }
 else {
    Bundle b=new Bundle();
    String cur=savedInstanceState.getString(""String_Node_Str"");
    b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
    b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
    scrolls.put(cur,b);
    list=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    createViews(list,true,new File(cur));
    if (savedInstanceState.getBoolean(""String_Node_Str"")) {
      for (      int i : savedInstanceState.getIntegerArrayList(""String_Node_Str"")) {
        adapter.toggleChecked(i);
      }
    }
  }
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(false);
  getActivity().findViewById(R.id.buttonbarframe).setVisibility(View.VISIBLE);
  list1=new ArrayList<String>();
  getActivity().findViewById(R.id.search).setVisibility(View.VISIBLE);
  getActivity().findViewById(R.id.action_overflow).setVisibility(View.VISIBLE);
  utils=new Futils();
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  color=calculatevalues(x);
  ColorMatrix colorMatrix=new ColorMatrix(calculatefilter(color));
  colorMatrixColorFilter=new ColorMatrixColorFilter(colorMatrix);
  history=new HistoryManager(getActivity(),""String_Node_Str"");
  hidden=new HistoryManager(getActivity(),""String_Node_Str"");
  hiddenfiles=hidden.readTable();
  rootMode=Sp.getBoolean(""String_Node_Str"",false);
  showHidden=Sp.getBoolean(""String_Node_Str"",false);
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  if (aBoolean) {
    folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  }
 else {
    folder=res.getDrawable(R.drawable.ic_grid_folder1);
  }
  folder=res.getDrawable(R.drawable.ic_grid_folder_new);
  getSortModes();
  darkimage=res.getDrawable(R.drawable.ic_doc_image_dark);
  darkvideo=res.getDrawable(R.drawable.ic_doc_video_dark);
  home=Sp.getString(""String_Node_Str"",mainActivity.val.get(0));
  this.setRetainInstance(false);
  File f=new File(Sp.getString(""String_Node_Str"",home));
  buttons=(LinearLayout)getActivity().findViewById(R.id.buttons);
  pathbar=(LinearLayout)getActivity().findViewById(R.id.pathbar);
  textView=(TextView)getActivity().findViewById(R.id.fullpath);
  pathbar.setBackgroundColor(Color.parseColor(skin));
  scroll=(HorizontalScrollView)getActivity().findViewById(R.id.scroll);
  scroll1=(HorizontalScrollView)getActivity().findViewById(R.id.scroll1);
  uimode=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  if (uimode == 1) {
    float scale=getResources().getDisplayMetrics().density;
    int dpAsPixels=(int)(5 * scale + 0.5f);
    if (aBoolean) {
      listView.setPadding(dpAsPixels,0,dpAsPixels,0);
      listView.setDivider(null);
      listView.setDividerHeight(dpAsPixels);
    }
 else {
      gridView.setPadding(dpAsPixels,0,dpAsPixels,0);
    }
  }
  footerView=getActivity().getLayoutInflater().inflate(R.layout.divider,null);
  if (aBoolean) {
    listView.addFooterView(footerView);
    listView.setFastScrollEnabled(true);
  }
 else {
    gridView.setFastScrollEnabled(true);
  }
  if (savedInstanceState == null) {
    if (Intentpath != null) {
      File file1=new File(Intentpath);
      if (file1.isDirectory())       loadlist(file1,false);
 else {
        utils.openFile(file1,mainActivity);
        loadlist(f,false);
      }
    }
 else     loadlist(f,false);
  }
 else {
    Bundle b=new Bundle();
    String cur=savedInstanceState.getString(""String_Node_Str"");
    b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
    b.putInt(""String_Node_Str"",savedInstanceState.getInt(""String_Node_Str""));
    scrolls.put(cur,b);
    list=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    createViews(list,true,new File(cur));
    if (savedInstanceState.getBoolean(""String_Node_Str"")) {
      for (      int i : savedInstanceState.getIntegerArrayList(""String_Node_Str"")) {
        adapter.toggleChecked(i);
      }
    }
  }
}",0.9493266694432876
162630,"public void onPageSelected(int p1){
  currenttab=p1;
  String name=fragments.get(p1).getClass().getName();
  if (name.contains(""String_Node_Str"")) {
    Main ma=((Main)fragments.get(p1));
    if (ma.current != null) {
      ((MainActivity)getActivity()).updateDrawer(ma.current);
      ma.bbar(ma.current);
      try {
        ((TextView)STRIP.getChildAt(p1)).setText(ma.current);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
 else   if (name.contains(""String_Node_Str"")) {
    ZipViewer ma=((ZipViewer)fragments.get(p1));
    ma.bbar();
  }
}","public void onPageSelected(int p1){
  currenttab=p1;
  mainActivity.updateActionButtons();
  String name=fragments.get(p1).getClass().getName();
  if (name.contains(""String_Node_Str"")) {
    Main ma=((Main)fragments.get(p1));
    if (ma.current != null) {
      mainActivity.updateDrawer(ma.current);
      ma.updatePath(ma.current);
      if (ma.buttons.getVisibility() == View.VISIBLE)       ma.bbar(ma.current);
      try {
        ((TextView)STRIP.getChildAt(p1)).setText(ma.current);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
 else   if (name.contains(""String_Node_Str"")) {
    ZipViewer ma=((ZipViewer)fragments.get(p1));
    ma.bbar();
  }
}",0.8537735849056604
162631,"@Override public CharSequence getPageTitle(int position){
  String name=fragments.get(position).getClass().getName();
  if (name.contains(""String_Node_Str"")) {
    Main ma=((Main)fragments.get(position));
    if (ma.results) {
      return utils.getString(getActivity(),R.string.searchresults);
    }
 else {
      if (ma.current.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
 else {
        return new File(ma.current).getName();
      }
    }
  }
 else   if (name.contains(""String_Node_Str"")) {
    ZipViewer ma=((ZipViewer)fragments.get(position));
    if (ma.current == null || ma.current.equals(""String_Node_Str"")) {
      return ""String_Node_Str"";
    }
 else {
      return new File(ma.current).getName();
    }
  }
  return fragments.get(position).getClass().getName();
}","@Override public CharSequence getPageTitle(int position){
  String name=fragments.get(position).getClass().getName();
  if (name.contains(""String_Node_Str"")) {
    Main ma=((Main)fragments.get(position));
    if (ma.results) {
      return utils.getString(getActivity(),R.string.searchresults);
    }
 else {
      if (ma.current.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
 else {
        return new File(ma.current).getName();
      }
    }
  }
 else   if (name.contains(""String_Node_Str"")) {
    ZipViewer ma=((ZipViewer)fragments.get(position));
    try {
      return ma.f.getName();
    }
 catch (    Exception e) {
      return ""String_Node_Str"";
    }
  }
  return fragments.get(position).getClass().getName();
}",0.8588007736943907
162632,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.tabfragment,container,false);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  path0=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  path1=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  mViewPager=(ViewPager)rootView.findViewById(R.id.pager);
  STRIP=((android.support.v4.view.PagerTitleStrip)rootView.findViewById(R.id.pager_title_strip));
  STRIP.setBackgroundDrawable(new ColorDrawable(Color.parseColor(((MainActivity)getActivity()).skin)));
  if (getArguments() != null)   path=getArguments().getString(""String_Node_Str"");
  mViewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    public void onPageScrolled(    int p1,    float p2,    int p3){
      String name=fragments.get(mViewPager.getCurrentItem()).getClass().getName();
      if (name.contains(""String_Node_Str"")) {
        Main ma=((Main)fragments.get(mViewPager.getCurrentItem()));
        if (ma.mActionMode != null) {
          ma.mActionMode.finish();
          ma.mActionMode=null;
        }
      }
 else       if (name.contains(""String_Node_Str"")) {
        ZipViewer ma=((ZipViewer)fragments.get(mViewPager.getCurrentItem()));
        if (ma.mActionMode != null) {
          ma.mActionMode.finish();
          ma.mActionMode=null;
        }
      }
    }
    public void onPageSelected(    int p1){
      currenttab=p1;
      String name=fragments.get(p1).getClass().getName();
      if (name.contains(""String_Node_Str"")) {
        Main ma=((Main)fragments.get(p1));
        if (ma.current != null) {
          ((MainActivity)getActivity()).updateDrawer(ma.current);
          ma.bbar(ma.current);
          try {
            ((TextView)STRIP.getChildAt(p1)).setText(ma.current);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
 else       if (name.contains(""String_Node_Str"")) {
        ZipViewer ma=((ZipViewer)fragments.get(p1));
        ma.bbar();
      }
    }
    public void onPageScrollStateChanged(    int p1){
    }
  }
);
  if (savedInstanceState == null) {
    mSectionsPagerAdapter=new ScreenSlidePagerAdapter(getActivity().getSupportFragmentManager());
    int i=Sp.getInt(""String_Node_Str"",0);
    if (i == 0) {
      addTab(path0);
      addTab(path1);
    }
 else {
      for (int j=0; j < i; j++) {
        addTab(Sp.getString(""String_Node_Str"" + j,""String_Node_Str""));
      }
    }
    if (path != null && path.trim().length() != 0) {
      addTab1(path);
    }
    mViewPager.setAdapter(mSectionsPagerAdapter);
    if (path != null && path.trim().length() != 0) {
      mViewPager.setCurrentItem(fragments.size() - 1);
    }
 else {
      int k=Sp.getInt(""String_Node_Str"",0);
      try {
        mViewPager.setCurrentItem(k,true);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
 else {
    fragments.clear();
    tabs=savedInstanceState.getStringArrayList(""String_Node_Str"");
    for (int i=0; i < tabs.size(); i++) {
      fragments.add(i,getActivity().getSupportFragmentManager().getFragment(savedInstanceState,""String_Node_Str"" + i));
    }
    mSectionsPagerAdapter=new ScreenSlidePagerAdapter(getActivity().getSupportFragmentManager());
    mViewPager.setAdapter(mSectionsPagerAdapter);
  }
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.tabfragment,container,false);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  path0=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  path1=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  mViewPager=(ViewPager)rootView.findViewById(R.id.pager);
  STRIP=((android.support.v4.view.PagerTitleStrip)rootView.findViewById(R.id.pager_title_strip));
  STRIP.setBackgroundDrawable(new ColorDrawable(Color.parseColor(((MainActivity)getActivity()).skin)));
  if (getArguments() != null)   path=getArguments().getString(""String_Node_Str"");
  mainActivity=((MainActivity)getActivity());
  mViewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    public void onPageScrolled(    int p1,    float p2,    int p3){
      String name=fragments.get(mViewPager.getCurrentItem()).getClass().getName();
      if (name.contains(""String_Node_Str"")) {
        Main ma=((Main)fragments.get(mViewPager.getCurrentItem()));
        if (ma.mActionMode != null) {
          ma.mActionMode.finish();
          ma.mActionMode=null;
        }
      }
 else       if (name.contains(""String_Node_Str"")) {
        ZipViewer ma=((ZipViewer)fragments.get(mViewPager.getCurrentItem()));
        if (ma.mActionMode != null) {
          ma.mActionMode.finish();
          ma.mActionMode=null;
        }
      }
    }
    public void onPageSelected(    int p1){
      currenttab=p1;
      mainActivity.updateActionButtons();
      String name=fragments.get(p1).getClass().getName();
      if (name.contains(""String_Node_Str"")) {
        Main ma=((Main)fragments.get(p1));
        if (ma.current != null) {
          mainActivity.updateDrawer(ma.current);
          ma.updatePath(ma.current);
          if (ma.buttons.getVisibility() == View.VISIBLE)           ma.bbar(ma.current);
          try {
            ((TextView)STRIP.getChildAt(p1)).setText(ma.current);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
 else       if (name.contains(""String_Node_Str"")) {
        ZipViewer ma=((ZipViewer)fragments.get(p1));
        ma.bbar();
      }
    }
    public void onPageScrollStateChanged(    int p1){
    }
  }
);
  if (savedInstanceState == null) {
    mSectionsPagerAdapter=new ScreenSlidePagerAdapter(getActivity().getSupportFragmentManager());
    int i=Sp.getInt(""String_Node_Str"",0);
    if (i == 0) {
      addTab(path0);
      addTab(path1);
    }
 else {
      for (int j=0; j < i; j++) {
        addTab(Sp.getString(""String_Node_Str"" + j,""String_Node_Str""));
      }
    }
    if (path != null && path.trim().length() != 0) {
      addTab1(path);
    }
    mViewPager.setAdapter(mSectionsPagerAdapter);
    if (path != null && path.trim().length() != 0) {
      mViewPager.setCurrentItem(fragments.size() - 1);
    }
 else {
      int k=Sp.getInt(""String_Node_Str"",0);
      try {
        mViewPager.setCurrentItem(k,true);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
 else {
    fragments.clear();
    tabs=savedInstanceState.getStringArrayList(""String_Node_Str"");
    for (int i=0; i < tabs.size(); i++) {
      fragments.add(i,getActivity().getSupportFragmentManager().getFragment(savedInstanceState,""String_Node_Str"" + i));
    }
    mSectionsPagerAdapter=new ScreenSlidePagerAdapter(getActivity().getSupportFragmentManager());
    mViewPager.setAdapter(mSectionsPagerAdapter);
  }
  return rootView;
}",0.9652025099828864
162633,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  s=getArguments().getString(""String_Node_Str"");
  f=new File(s);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  Calendar calendar=Calendar.getInstance();
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  ((TextView)getActivity().findViewById(R.id.title)).setText(f.getName());
  getListView().setDividerHeight(0);
  getListView().setDivider(null);
  FloatingActionButton floatingActionButton=(FloatingActionButton)getActivity().findViewById(R.id.fab);
  floatingActionButton.hide(true);
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  getActivity().findViewById(R.id.action_overflow).setVisibility(View.GONE);
  getActivity().findViewById(R.id.search).setVisibility(View.INVISIBLE);
  getActivity().findViewById(R.id.paste).setVisibility(View.INVISIBLE);
  getActivity().findViewById(R.id.title).setVisibility(View.VISIBLE);
  getActivity().findViewById(R.id.pathbar).setOnClickListener(null);
  ((TextView)getActivity().findViewById(R.id.pathname)).setText(""String_Node_Str"");
  getActivity().findViewById(R.id.fullpath).setOnClickListener(null);
  files=new ArrayList<File>();
  if (savedInstanceState == null)   new ZipHelperTask(this,""String_Node_Str"").execute(f);
 else {
    wholelist=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    elements=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    current=savedInstanceState.getString(""String_Node_Str"");
    zipViewer.zipAdapter=new ZipAdapter(zipViewer.getActivity(),R.layout.simplerow,elements,zipViewer);
    zipViewer.setListAdapter(zipViewer.zipAdapter);
    ((TextView)zipViewer.getActivity().findViewById(R.id.fullpath)).setText(zipViewer.current);
  }
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  s=getArguments().getString(""String_Node_Str"");
  f=new File(s);
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  coloriseIcons=Sp.getBoolean(""String_Node_Str"",false);
  Calendar calendar=Calendar.getInstance();
  showSize=Sp.getBoolean(""String_Node_Str"",false);
  showLastModified=Sp.getBoolean(""String_Node_Str"",true);
  year=(""String_Node_Str"" + calendar.get(Calendar.YEAR)).substring(2,4);
  skin=Sp.getString(""String_Node_Str"",""String_Node_Str"");
  getListView().setDividerHeight(0);
  getListView().setDivider(null);
  FloatingActionButton floatingActionButton=(FloatingActionButton)getActivity().findViewById(R.id.fab);
  floatingActionButton.hide(true);
  String x=getSelectionColor();
  skinselection=Color.parseColor(x);
  getActivity().findViewById(R.id.action_overflow).setVisibility(View.GONE);
  getActivity().findViewById(R.id.search).setVisibility(View.INVISIBLE);
  getActivity().findViewById(R.id.paste).setVisibility(View.INVISIBLE);
  getActivity().findViewById(R.id.title).setVisibility(View.VISIBLE);
  getActivity().findViewById(R.id.pathbar).setOnClickListener(null);
  ((TextView)getActivity().findViewById(R.id.pathname)).setText(""String_Node_Str"");
  getActivity().findViewById(R.id.fullpath).setOnClickListener(null);
  files=new ArrayList<File>();
  mainActivity=(MainActivity)getActivity();
  if (savedInstanceState == null)   new ZipHelperTask(this,""String_Node_Str"").execute(f);
 else {
    wholelist=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    elements=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    current=savedInstanceState.getString(""String_Node_Str"");
    zipViewer.zipAdapter=new ZipAdapter(zipViewer.getActivity(),R.layout.simplerow,elements,zipViewer);
    zipViewer.setListAdapter(zipViewer.zipAdapter);
    ((TextView)zipViewer.getActivity().findViewById(R.id.fullpath)).setText(zipViewer.current);
  }
}",0.9708261828879629
162634,"public View getView(int position,View convertView,ViewGroup parent){
  final Layoutelements rowItem=getItem(position);
  View view;
  final int p=position;
  if (convertView == null) {
    LayoutInflater mInflater=(LayoutInflater)context.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
    view=mInflater.inflate(R.layout.simplerow,null);
    final ViewHolder vholder=new ViewHolder();
    vholder.txtTitle=(TextView)view.findViewById(R.id.firstline);
    vholder.imageView=(ImageView)view.findViewById(R.id.icon);
    vholder.rl=(RelativeLayout)view.findViewById(R.id.second);
    view.setTag(vholder);
  }
 else {
    view=convertView;
  }
  final ViewHolder holder=(ViewHolder)view.getTag();
  holder.imageView.setImageDrawable(rowItem.getImageId());
  final Bitmap b=app.getBitmapFromMemCache(app.c.get(p).publicSourceDir);
  if (b != null) {
    holder.imageView.setImageBitmap(b);
  }
 else {
    ImageView i=holder.imageView;
    i.setTag(""String_Node_Str"" + p);
    app.loadBitmap(app.c.get(p),i,((BitmapDrawable)rowItem.getImageId()).getBitmap());
  }
  holder.txtTitle.setText(rowItem.getTitle());
  holder.rl.setClickable(true);
  holder.rl.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View p1){
      if (app.selection == true) {
        toggleChecked(p);
        app.mActionMode.invalidate();
      }
 else {
        Intent i=app.getActivity().getPackageManager().getLaunchIntentForPackage(app.c.get(p).packageName);
        if (i != null)         app.startActivity(i);
 else         Toast.makeText(app.getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
      }
    }
  }
);
  holder.rl.setOnLongClickListener(new View.OnLongClickListener(){
    public boolean onLongClick(    View p1){
      app.onLongItemClick(p);
      return false;
    }
  }
);
  Boolean checked=myChecked.get(position);
  if (checked != null) {
    if (checked) {
      holder.rl.setBackgroundColor(Color.parseColor(""String_Node_Str""));
    }
 else {
      if (app.uimode == 0) {
        holder.rl.setBackgroundResource(R.drawable.listitem1);
      }
 else       if (app.uimode == 1) {
        holder.rl.setBackgroundResource(R.drawable.bg_card);
      }
    }
  }
  return view;
}","public View getView(int position,View convertView,ViewGroup parent){
  final Layoutelements rowItem=getItem(position);
  View view;
  final int p=position;
  if (convertView == null) {
    LayoutInflater mInflater=(LayoutInflater)context.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
    view=mInflater.inflate(R.layout.simplerow,null);
    final ViewHolder vholder=new ViewHolder();
    vholder.txtTitle=(TextView)view.findViewById(R.id.firstline);
    vholder.imageView=(ImageView)view.findViewById(R.id.icon);
    vholder.rl=(RelativeLayout)view.findViewById(R.id.second);
    view.setTag(vholder);
  }
 else {
    view=convertView;
  }
  final ViewHolder holder=(ViewHolder)view.getTag();
  holder.imageView.setImageDrawable(rowItem.getImageId());
  app.ic.cancelLoad(holder.imageView);
  app.ic.loadDrawable(holder.imageView,new File(rowItem.getDesc()),null);
  holder.txtTitle.setText(rowItem.getTitle());
  holder.rl.setClickable(true);
  holder.rl.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View p1){
      if (app.selection == true) {
        toggleChecked(p);
        app.mActionMode.invalidate();
      }
 else {
        Intent i=app.getActivity().getPackageManager().getLaunchIntentForPackage(app.c.get(p).packageName);
        if (i != null)         app.startActivity(i);
 else         Toast.makeText(app.getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
      }
    }
  }
);
  holder.rl.setOnLongClickListener(new View.OnLongClickListener(){
    public boolean onLongClick(    View p1){
      app.onLongItemClick(p);
      return false;
    }
  }
);
  Boolean checked=myChecked.get(position);
  if (checked != null) {
    if (checked) {
      holder.rl.setBackgroundColor(Color.parseColor(""String_Node_Str""));
    }
 else {
      if (app.uimode == 0) {
        holder.rl.setBackgroundResource(R.drawable.listitem1);
      }
 else       if (app.uimode == 1) {
        holder.rl.setBackgroundResource(R.drawable.bg_card);
      }
    }
  }
  return view;
}",0.9043560606060606
162635,"public View getView(int position,View convertView,ViewGroup parent){
  final Layoutelements rowItem=getItem(position);
  if (main.aBoolean) {
    View view=convertView;
    final int p=position;
    if (convertView == null) {
      LayoutInflater mInflater=(LayoutInflater)context.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
      view=mInflater.inflate(R.layout.rowlayout,parent,false);
      final ViewHolder vholder=new ViewHolder();
      vholder.txtTitle=(TextView)view.findViewById(R.id.firstline);
      vholder.viewmageV=(CircularImageView)view.findViewById(R.id.cicon);
      vholder.imageView=(ImageView)view.findViewById(R.id.icon);
      vholder.rl=view.findViewById(R.id.second);
      vholder.perm=(TextView)view.findViewById(R.id.permis);
      vholder.date=(TextView)view.findViewById(R.id.date);
      vholder.txtDesc=(TextView)view.findViewById(R.id.secondLine);
      view.setTag(vholder);
      GradientDrawable gradientDrawable=(GradientDrawable)vholder.imageView.getBackground();
      gradientDrawable.setColor(Color.parseColor(main.skin));
    }
    final ViewHolder holder=(ViewHolder)view.getTag();
    Boolean checked=myChecked.get(position);
    if (checked != null) {
      if (checked) {
        holder.rl.setBackgroundColor(main.skinselection);
      }
 else {
        if (main.uimode == 0) {
          holder.rl.setBackgroundResource(R.drawable.listitem1);
        }
 else         if (main.uimode == 1) {
          holder.rl.setBackgroundResource(R.drawable.bg_card);
        }
      }
    }
    holder.rl.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        main.onListItemClicked(p,v);
      }
    }
);
    holder.rl.setOnLongClickListener(new View.OnLongClickListener(){
      public boolean onLongClick(      View p1){
        if (main.results) {
          utils.longClickSearchItem(main,rowItem.getDesc());
        }
 else         if (!main.selection) {
          if (main.current.equals(""String_Node_Str"")) {
            toggleChecked(p);
          }
 else           if (p != 0) {
            toggleChecked(p);
          }
        }
        return true;
      }
    }
);
    holder.txtTitle.setText(rowItem.getTitle());
    holder.imageView.setImageDrawable(rowItem.getImageId());
    holder.imageView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        toggleChecked(p);
      }
    }
);
    holder.viewmageV.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        toggleChecked(p);
      }
    }
);
    holder.imageView.setVisibility(View.VISIBLE);
    holder.viewmageV.setVisibility(View.INVISIBLE);
    if (Icons.isPicture((rowItem.getDesc().toLowerCase()))) {
      holder.imageView.setVisibility(View.GONE);
      holder.viewmageV.setVisibility(View.VISIBLE);
      holder.viewmageV.setImageDrawable(main.getResources().getDrawable(R.drawable.ic_doc_image));
      main.ic.cancelLoad(holder.viewmageV);
      main.ic.loadDrawable(holder.viewmageV,new File(rowItem.getDesc()),null);
    }
 else     if (Icons.isApk((rowItem.getDesc()))) {
      main.ic.cancelLoad(holder.imageView);
      main.ic.loadDrawable(holder.imageView,new File(rowItem.getDesc()),main.getResources().getDrawable(R.drawable.ic_doc_apk));
    }
    if (checked != null) {
      if (checked)       holder.imageView.setImageDrawable(main.getResources().getDrawable(R.drawable.abc_ic_cab_done_holo_dark));
    }
    if (main.showPermissions)     holder.perm.setText(rowItem.getPermissions());
    if (main.showLastModified)     holder.date.setText(rowItem.getDate(""String_Node_Str""));
    if (main.showSize)     holder.txtDesc.setText(rowItem.getSize());
    return view;
  }
 else {
    View view;
    final int p=position;
    if (convertView == null) {
      LayoutInflater mInflater=(LayoutInflater)context.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
      view=mInflater.inflate(R.layout.griditem,parent,false);
      final ViewHolder vholder=new ViewHolder();
      vholder.rl=view.findViewById(R.id.frame);
      vholder.txtTitle=(TextView)view.findViewById(R.id.title);
      vholder.imageView=(ImageView)view.findViewById(R.id.icon_mime);
      vholder.imageView1=(ImageView)view.findViewById(R.id.icon_thumb);
      vholder.date=(TextView)view.findViewById(R.id.date);
      vholder.txtDesc=(TextView)view.findViewById(R.id.size);
      vholder.perm=(TextView)view.findViewById(R.id.perm);
      if (main.theme == 1)       view.findViewById(R.id.icon_frame).setBackgroundColor(Color.parseColor(""String_Node_Str""));
      view.setTag(vholder);
    }
 else {
      view=convertView;
    }
    final ViewHolder holder=(ViewHolder)view.getTag();
    Boolean checked=myChecked.get(position);
    if (checked != null) {
      if (checked) {
        holder.rl.setBackgroundColor(main.skinselection);
      }
 else {
        if (main.uimode == 0) {
          if (main.theme == 0)           holder.rl.setBackgroundResource(R.drawable.item_doc_grid);
 else           holder.rl.setBackgroundResource(R.drawable.ic_grid_card_background_dark);
        }
 else         if (main.uimode == 1) {
          holder.rl.setBackgroundResource(R.drawable.bg_card);
        }
      }
    }
    holder.rl.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        main.onListItemClicked(p,v);
      }
    }
);
    holder.rl.setOnLongClickListener(new View.OnLongClickListener(){
      public boolean onLongClick(      View p1){
        if (main.results) {
          utils.longClickSearchItem(main,rowItem.getDesc());
        }
 else         if (main.current.equals(""String_Node_Str"")) {
          toggleChecked(p);
        }
 else         if (p != 0) {
          toggleChecked(p);
        }
        return true;
      }
    }
);
    holder.txtTitle.setText(rowItem.getTitle());
    holder.imageView1.setVisibility(View.INVISIBLE);
    holder.imageView.setVisibility(View.VISIBLE);
    holder.imageView.setColorFilter(colorMatrixColorFilter);
    holder.imageView.setImageDrawable(rowItem.getImageId());
    if (Icons.isPicture((rowItem.getDesc().toLowerCase()))) {
      holder.imageView.setColorFilter(null);
      holder.imageView1.setVisibility(View.VISIBLE);
      holder.imageView1.setImageDrawable(null);
      if (main.theme == 1)       holder.imageView1.setBackgroundColor(Color.parseColor(""String_Node_Str""));
      main.ic.cancelLoad(holder.imageView1);
      main.ic.loadDrawable(holder.imageView1,new File(rowItem.getDesc()),null);
    }
    if (Icons.isApk((rowItem.getDesc()))) {
      holder.imageView.setColorFilter(null);
      main.ic.cancelLoad(holder.imageView);
      main.ic.loadDrawable(holder.imageView,new File(rowItem.getDesc()),main.getResources().getDrawable(R.drawable.ic_doc_apk));
    }
    if (main.showLastModified)     holder.date.setText(rowItem.getDate(""String_Node_Str""));
    if (main.showSize)     holder.txtDesc.setText(rowItem.getSize());
    if (main.showPermissions)     holder.perm.setText(rowItem.getPermissions());
    return view;
  }
}","public View getView(int position,View convertView,ViewGroup parent){
  final Layoutelements rowItem=getItem(position);
  if (main.aBoolean) {
    View view=convertView;
    final int p=position;
    if (convertView == null) {
      LayoutInflater mInflater=(LayoutInflater)context.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
      view=mInflater.inflate(R.layout.rowlayout,parent,false);
      final ViewHolder vholder=new ViewHolder();
      vholder.txtTitle=(TextView)view.findViewById(R.id.firstline);
      vholder.viewmageV=(CircularImageView)view.findViewById(R.id.cicon);
      vholder.imageView=(ImageView)view.findViewById(R.id.icon);
      vholder.rl=view.findViewById(R.id.second);
      vholder.perm=(TextView)view.findViewById(R.id.permis);
      vholder.date=(TextView)view.findViewById(R.id.date);
      vholder.txtDesc=(TextView)view.findViewById(R.id.secondLine);
      view.setTag(vholder);
      GradientDrawable gradientDrawable=(GradientDrawable)vholder.imageView.getBackground();
      gradientDrawable.setColor(Color.parseColor(main.skin));
    }
    final ViewHolder holder=(ViewHolder)view.getTag();
    Boolean checked=myChecked.get(position);
    if (checked != null) {
      if (checked) {
        holder.rl.setBackgroundColor(main.skinselection);
      }
 else {
        if (main.uimode == 0) {
          holder.rl.setBackgroundResource(R.drawable.listitem1);
        }
 else         if (main.uimode == 1) {
          holder.rl.setBackgroundResource(R.drawable.bg_card);
        }
      }
    }
    holder.rl.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        main.onListItemClicked(p,v);
      }
    }
);
    holder.rl.setOnLongClickListener(new View.OnLongClickListener(){
      public boolean onLongClick(      View p1){
        if (main.results) {
          utils.longClickSearchItem(main,rowItem.getDesc());
        }
 else         if (!main.selection) {
          if (main.current.equals(""String_Node_Str"")) {
            toggleChecked(p);
          }
 else           if (p != 0) {
            toggleChecked(p);
          }
        }
        return true;
      }
    }
);
    holder.txtTitle.setText(rowItem.getTitle());
    holder.imageView.setImageDrawable(rowItem.getImageId());
    holder.imageView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        if (!rowItem.getSize().equals(""String_Node_Str""))         toggleChecked(p);
 else         main.goBack();
      }
    }
);
    holder.viewmageV.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        if (!rowItem.getSize().equals(""String_Node_Str""))         toggleChecked(p);
 else         main.goBack();
      }
    }
);
    holder.imageView.setVisibility(View.VISIBLE);
    holder.viewmageV.setVisibility(View.INVISIBLE);
    if (Icons.isPicture((rowItem.getDesc().toLowerCase()))) {
      holder.imageView.setVisibility(View.GONE);
      holder.viewmageV.setVisibility(View.VISIBLE);
      holder.viewmageV.setImageDrawable(rowItem.getImageId());
      main.ic.cancelLoad(holder.viewmageV);
      main.ic.loadDrawable(holder.viewmageV,new File(rowItem.getDesc()),null);
    }
 else     if (Icons.isApk((rowItem.getDesc()))) {
      main.ic.cancelLoad(holder.imageView);
      main.ic.loadDrawable(holder.imageView,new File(rowItem.getDesc()),null);
    }
    if (checked != null) {
      if (checked)       holder.imageView.setImageDrawable(main.getResources().getDrawable(R.drawable.abc_ic_cab_done_holo_dark));
    }
    if (main.showPermissions)     holder.perm.setText(rowItem.getPermissions());
    if (main.showLastModified)     holder.date.setText(rowItem.getDate(""String_Node_Str""));
    if (main.showSize)     holder.txtDesc.setText(rowItem.getSize());
    return view;
  }
 else {
    View view;
    final int p=position;
    if (convertView == null) {
      LayoutInflater mInflater=(LayoutInflater)context.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
      view=mInflater.inflate(R.layout.griditem,parent,false);
      final ViewHolder vholder=new ViewHolder();
      vholder.rl=view.findViewById(R.id.frame);
      vholder.txtTitle=(TextView)view.findViewById(R.id.title);
      vholder.imageView=(ImageView)view.findViewById(R.id.icon_mime);
      vholder.imageView1=(ImageView)view.findViewById(R.id.icon_thumb);
      vholder.date=(TextView)view.findViewById(R.id.date);
      vholder.txtDesc=(TextView)view.findViewById(R.id.size);
      vholder.perm=(TextView)view.findViewById(R.id.perm);
      if (main.theme == 1)       view.findViewById(R.id.icon_frame).setBackgroundColor(Color.parseColor(""String_Node_Str""));
      view.setTag(vholder);
    }
 else {
      view=convertView;
    }
    final ViewHolder holder=(ViewHolder)view.getTag();
    Boolean checked=myChecked.get(position);
    if (checked != null) {
      if (checked) {
        holder.rl.setBackgroundColor(main.skinselection);
      }
 else {
        if (main.uimode == 0) {
          if (main.theme == 0)           holder.rl.setBackgroundResource(R.drawable.item_doc_grid);
 else           holder.rl.setBackgroundResource(R.drawable.ic_grid_card_background_dark);
        }
 else         if (main.uimode == 1) {
          holder.rl.setBackgroundResource(R.drawable.bg_card);
        }
      }
    }
    holder.rl.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        main.onListItemClicked(p,v);
      }
    }
);
    holder.rl.setOnLongClickListener(new View.OnLongClickListener(){
      public boolean onLongClick(      View p1){
        if (main.results) {
          utils.longClickSearchItem(main,rowItem.getDesc());
        }
 else         if (main.current.equals(""String_Node_Str"")) {
          toggleChecked(p);
        }
 else         if (p != 0) {
          toggleChecked(p);
        }
        return true;
      }
    }
);
    holder.txtTitle.setText(rowItem.getTitle());
    holder.imageView1.setVisibility(View.INVISIBLE);
    holder.imageView.setVisibility(View.VISIBLE);
    holder.imageView.setColorFilter(colorMatrixColorFilter);
    holder.imageView.setImageDrawable(rowItem.getImageId());
    if (Icons.isPicture((rowItem.getDesc().toLowerCase()))) {
      holder.imageView.setColorFilter(null);
      holder.imageView1.setVisibility(View.VISIBLE);
      holder.imageView1.setImageDrawable(null);
      if (main.theme == 1)       holder.imageView1.setBackgroundColor(Color.parseColor(""String_Node_Str""));
      main.ic.cancelLoad(holder.imageView1);
      main.ic.loadDrawable(holder.imageView1,new File(rowItem.getDesc()),null);
    }
    if (Icons.isApk((rowItem.getDesc()))) {
      holder.imageView.setColorFilter(null);
      main.ic.cancelLoad(holder.imageView);
      main.ic.loadDrawable(holder.imageView,new File(rowItem.getDesc()),null);
    }
    if (main.showLastModified)     holder.date.setText(rowItem.getDate(""String_Node_Str""));
    if (main.showSize)     holder.txtDesc.setText(rowItem.getSize());
    if (main.showPermissions)     holder.perm.setText(rowItem.getPermissions());
    return view;
  }
}",0.9747403873140612
162636,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  getActivity().findViewById(R.id.fabbutton).setVisibility(View.GONE);
  final int maxMemory=(int)(Runtime.getRuntime().maxMemory() / 1024);
  getActivity().findViewById(R.id.buttonbarframe).setVisibility(View.GONE);
  final int cacheSize=maxMemory / 4;
  mMemoryCache=new LruCache<String,Bitmap>(cacheSize){
  }
;
  vl=getListView();
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  uimode=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  ListView vl=getListView();
  if (uimode == 1) {
    float scale=getResources().getDisplayMetrics().density;
    int dpAsPixels=(int)(5 * scale + 0.5f);
    vl.setPadding(dpAsPixels,0,dpAsPixels,0);
    vl.setDivider(null);
  }
  vl.setFastScrollEnabled(true);
  if (savedInstanceState == null)   new LoadListTask().execute();
 else {
    c=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    a=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    adapter=new AppsAdapter(getActivity(),R.layout.rowlayout,a,app);
    setListAdapter(adapter);
    vl.setSelectionFromTop(savedInstanceState.getInt(""String_Node_Str""),savedInstanceState.getInt(""String_Node_Str""));
  }
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  getActivity().findViewById(R.id.fabbutton).setVisibility(View.GONE);
  final int maxMemory=(int)(Runtime.getRuntime().maxMemory() / 1024);
  getActivity().findViewById(R.id.buttonbarframe).setVisibility(View.GONE);
  final int cacheSize=maxMemory / 4;
  mMemoryCache=new LruCache<String,Bitmap>(cacheSize){
  }
;
  vl=getListView();
  Sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  uimode=Integer.parseInt(Sp.getString(""String_Node_Str"",""String_Node_Str""));
  ListView vl=getListView();
  if (uimode == 1) {
    float scale=getResources().getDisplayMetrics().density;
    int dpAsPixels=(int)(5 * scale + 0.5f);
    vl.setPadding(dpAsPixels,0,dpAsPixels,0);
    vl.setDividerHeight(dpAsPixels);
  }
  vl.setDivider(null);
  vl.setFastScrollEnabled(true);
  if (savedInstanceState == null)   new LoadListTask().execute();
 else {
    c=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    a=savedInstanceState.getParcelableArrayList(""String_Node_Str"");
    adapter=new AppsAdapter(getActivity(),R.layout.rowlayout,a,app);
    setListAdapter(adapter);
    vl.setSelectionFromTop(savedInstanceState.getInt(""String_Node_Str""),savedInstanceState.getInt(""String_Node_Str""));
  }
}",0.9827784156142364
162637,"@Override protected Bitmap doInBackground(ApplicationInfo... params){
  path=params[0];
  Bitmap b=((BitmapDrawable)path.loadIcon(getActivity().getPackageManager())).getBitmap();
  addBitmapToMemoryCache(path.publicSourceDir,b);
  return b;
}","protected ArrayList<Layoutelements> doInBackground(Void[] p1){
  try {
    List<ApplicationInfo> all_apps=getActivity().getPackageManager().getInstalledApplications(PackageManager.GET_META_DATA);
    for (    ApplicationInfo object : all_apps) {
      c.add(object);
    }
    Collections.sort(c,new AppsSorter(getActivity().getPackageManager()));
    for (int i=0; i < c.size(); i++) {
      a.add(new Layoutelements(getActivity().getResources().getDrawable(R.drawable.ic_doc_apk_grid),c.get(i).loadLabel(getActivity().getPackageManager()).toString(),c.get(i).publicSourceDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false));
      File file=new File(c.get(i).publicSourceDir);
      mFile.add(file);
    }
  }
 catch (  Exception e) {
  }
  return a;
}",0.0198216055500495
162638,"@Override protected void onPostExecute(Bitmap bitmap){
  if (isCancelled()) {
    bitmap=null;
  }
  if (imageViewReference != null && bitmap != null) {
    final ImageView imageView=imageViewReference.get();
    final BitmapWorkerTask bitmapWorkerTask=getBitmapWorkerTask(imageView);
    if (this == bitmapWorkerTask && imageView != null) {
      imageView.setImageBitmap(bitmap);
    }
  }
}","@Override protected void onPostExecute(ArrayList<Layoutelements> bitmap){
  if (isCancelled()) {
    bitmap=null;
  }
  try {
    if (bitmap != null) {
      adapter=new AppsAdapter(getActivity(),R.layout.rowlayout,bitmap,app);
      setListAdapter(adapter);
    }
  }
 catch (  Exception e) {
  }
}",0.3641618497109826
162639,"private void verifyServiceDeclaration(){
  final PackageManager packageManager=mContext.getPackageManager();
  final Intent intent=new Intent(mContext,BeaconService.class);
  List resolveInfo=packageManager.queryIntentServices(intent,PackageManager.MATCH_DEFAULT_ONLY);
  if (resolveInfo.size() == 0) {
    throw new ServiceNotDeclaredException();
  }
}","private void verifyServiceDeclaration(){
  final PackageManager packageManager=mContext.getPackageManager();
  final Intent intent=new Intent(mContext,BeaconService.class);
  List<ResolveInfo> resolveInfo=packageManager.queryIntentServices(intent,PackageManager.MATCH_DEFAULT_ONLY);
  if (resolveInfo != null && resolveInfo.size() == 0) {
    throw new ServiceNotDeclaredException();
  }
}",0.9514824797843666
162640,"/** 
 * Tells the <code>BeaconService</code> to stop looking for beacons that match the passed <code>Region</code> object.  Note that the Region's unique identifier is used to match it to an existing monitored Region.
 * @param region
 * @see BeaconManager#setMonitorNotifier(MonitorNotifier)
 * @see BeaconManager#startMonitoringBeaconsInRegion(Region region)
 * @see MonitorNotifier
 * @see Region
 */
@TargetApi(18) public void stopMonitoringBeaconsInRegion(Region region) throws RemoteException {
  if (android.os.Build.VERSION.SDK_INT < 18) {
    LogManager.w(TAG,""String_Node_Str"");
    return;
  }
  if (serviceMessenger == null) {
    throw new RemoteException(""String_Node_Str"");
  }
  Message msg=Message.obtain(null,BeaconService.MSG_STOP_MONITORING,0,0);
  StartRMData obj=new StartRMData(region,callbackPackageName(),this.getScanPeriod(),this.getBetweenScanPeriod(),this.mBackgroundMode);
  msg.obj=obj;
  serviceMessenger.send(msg);
synchronized (monitoredRegions) {
    Region regionToRemove=null;
    for (    Region monitoredRegion : monitoredRegions) {
      if (region.getUniqueId().equals(monitoredRegion.getUniqueId())) {
        regionToRemove=monitoredRegion;
      }
    }
    monitoredRegions.remove(regionToRemove);
  }
}","/** 
 * Tells the <code>BeaconService</code> to stop looking for beacons that match the passed <code>Region</code> object.  Note that the Region's unique identifier is used to match it to an existing monitored Region.
 * @param region
 * @see BeaconManager#setMonitorNotifier(MonitorNotifier)
 * @see BeaconManager#startMonitoringBeaconsInRegion(Region region)
 * @see MonitorNotifier
 * @see Region
 */
@TargetApi(18) public void stopMonitoringBeaconsInRegion(Region region) throws RemoteException {
  if (android.os.Build.VERSION.SDK_INT < 18) {
    LogManager.w(TAG,""String_Node_Str"");
    return;
  }
  if (serviceMessenger == null) {
    throw new RemoteException(""String_Node_Str"");
  }
  Message msg=Message.obtain(null,BeaconService.MSG_STOP_MONITORING,0,0);
  StartRMData obj=new StartRMData(region,callbackPackageName(),this.getScanPeriod(),this.getBetweenScanPeriod(),this.mBackgroundMode);
  msg.obj=obj;
  serviceMessenger.send(msg);
}",0.8637813211845102
162641,"/** 
 * @return the list of regions currently being monitored
 */
public Collection<Region> getMonitoredRegions(){
synchronized (this.monitoredRegions) {
    return new ArrayList<Region>(this.monitoredRegions);
  }
}","/** 
 * @return the list of regions currently being monitored
 */
public Collection<Region> getMonitoredRegions(){
  return MonitoringStatus.getInstanceForApplication(mContext).regions();
}",0.6962962962962963
162642,"/** 
 * Tells the <code>BeaconService</code> to start looking for beacons that match the passed <code>Region</code> object.  Note that the Region's unique identifier must be retained to later call the stopMonitoringBeaconsInRegion method.
 * @param region
 * @see BeaconManager#setMonitorNotifier(MonitorNotifier)
 * @see BeaconManager#stopMonitoringBeaconsInRegion(Region region)
 * @see MonitorNotifier
 * @see Region
 */
@TargetApi(18) public void startMonitoringBeaconsInRegion(Region region) throws RemoteException {
  if (android.os.Build.VERSION.SDK_INT < 18) {
    LogManager.w(TAG,""String_Node_Str"");
    return;
  }
  if (serviceMessenger == null) {
    throw new RemoteException(""String_Node_Str"");
  }
  LogManager.d(TAG,""String_Node_Str"" + region + ""String_Node_Str""+ region.getUniqueId());
  Message msg=Message.obtain(null,BeaconService.MSG_START_MONITORING,0,0);
  StartRMData obj=new StartRMData(region,callbackPackageName(),this.getScanPeriod(),this.getBetweenScanPeriod(),this.mBackgroundMode);
  msg.obj=obj;
  serviceMessenger.send(msg);
synchronized (monitoredRegions) {
    this.requestStateForRegion(region);
    monitoredRegions.add(region);
  }
}","/** 
 * Tells the <code>BeaconService</code> to start looking for beacons that match the passed <code>Region</code> object.  Note that the Region's unique identifier must be retained to later call the stopMonitoringBeaconsInRegion method.
 * @param region
 * @see BeaconManager#setMonitorNotifier(MonitorNotifier)
 * @see BeaconManager#stopMonitoringBeaconsInRegion(Region region)
 * @see MonitorNotifier
 * @see Region
 */
@TargetApi(18) public void startMonitoringBeaconsInRegion(Region region) throws RemoteException {
  if (android.os.Build.VERSION.SDK_INT < 18) {
    LogManager.w(TAG,""String_Node_Str"");
    return;
  }
  if (serviceMessenger == null) {
    throw new RemoteException(""String_Node_Str"");
  }
  LogManager.d(TAG,""String_Node_Str"" + region + ""String_Node_Str""+ region.getUniqueId());
  Message msg=Message.obtain(null,BeaconService.MSG_START_MONITORING,0,0);
  StartRMData obj=new StartRMData(region,callbackPackageName(),this.getScanPeriod(),this.getBetweenScanPeriod(),this.mBackgroundMode);
  msg.obj=obj;
  serviceMessenger.send(msg);
  this.requestStateForRegion(region);
}",0.9674008810572688
162643,"@Override public void onDestroy(){
  LogManager.e(TAG,""String_Node_Str"");
  if (android.os.Build.VERSION.SDK_INT < 18) {
    LogManager.w(TAG,""String_Node_Str"");
    return;
  }
  bluetoothCrashResolver.stop();
  LogManager.i(TAG,""String_Node_Str"");
  handler.removeCallbacksAndMessages(null);
  mCycledScanner.stop();
  monitoringStatus.stopStatusPreservation();
}","@Override public void onDestroy(){
  LogManager.e(TAG,""String_Node_Str"");
  if (android.os.Build.VERSION.SDK_INT < 18) {
    LogManager.w(TAG,""String_Node_Str"");
    return;
  }
  bluetoothCrashResolver.stop();
  LogManager.i(TAG,""String_Node_Str"");
  handler.removeCallbacksAndMessages(null);
  mCycledScanner.stop();
  mCycledScanner.destroy();
  monitoringStatus.stopStatusPreservation();
}",0.9630606860158312
162644,"public void startMonitoringBeaconsInRegion(Region region,Callback callback){
  LogManager.d(TAG,""String_Node_Str"");
  monitoringStatus.addRegion(region);
  LogManager.d(TAG,""String_Node_Str"",monitoringStatus.regionsCount());
  mCycledScanner.start();
}","public void startMonitoringBeaconsInRegion(Region region,Callback callback){
  LogManager.d(TAG,""String_Node_Str"");
  monitoringStatus.addRegion(region,callback);
  LogManager.d(TAG,""String_Node_Str"",monitoringStatus.regionsCount());
  mCycledScanner.start();
}",0.9824561403508772
162645,"/** 
 * Tries making the callback, first via messenger, then via intent
 * @param context
 * @param dataName
 * @param data
 * @return false if it callback cannot be made
 */
public boolean call(Context context,String dataName,Parcelable data){
  if (intent != null) {
    LogManager.d(TAG,""String_Node_Str"",intent.getComponent());
    intent.putExtra(dataName,data);
    context.startService(intent);
    return true;
  }
  return false;
}","/** 
 * Tries making the callback, first via messenger, then via intent
 * @param context
 * @param dataName
 * @param data
 * @return false if it callback cannot be made
 */
public boolean call(Context context,String dataName,Parcelable data){
  if (intent == null) {
    initializeIntent();
  }
  if (intent != null) {
    LogManager.d(TAG,""String_Node_Str"",intent.getComponent());
    intent.putExtra(dataName,data);
    context.startService(intent);
    return true;
  }
  return false;
}",0.944206008583691
162646,"public synchronized void addRegion(Region region){
  if (getRegionsStateMap().containsKey(region)) {
    for (    Region existingRegion : getRegionsStateMap().keySet()) {
      if (existingRegion.equals(region)) {
        if (existingRegion.hasSameIdentifiers(region)) {
          return;
        }
 else {
          LogManager.d(TAG,""String_Node_Str"" + region.getUniqueId());
          LogManager.d(TAG,""String_Node_Str"" + existingRegion);
          LogManager.d(TAG,""String_Node_Str"" + region);
          LogManager.d(TAG,""String_Node_Str"");
          getRegionsStateMap().remove(region);
          break;
        }
      }
    }
  }
  getRegionsStateMap().put(region,new RegionMonitoringState(new Callback(mContext.getPackageName())));
  saveMonitoringStatusIfOn();
}","public synchronized void addRegion(Region region,Callback callback){
  if (getRegionsStateMap().containsKey(region)) {
    for (    Region existingRegion : getRegionsStateMap().keySet()) {
      if (existingRegion.equals(region)) {
        if (existingRegion.hasSameIdentifiers(region)) {
          return;
        }
 else {
          LogManager.d(TAG,""String_Node_Str"" + region.getUniqueId());
          LogManager.d(TAG,""String_Node_Str"" + existingRegion);
          LogManager.d(TAG,""String_Node_Str"" + region);
          LogManager.d(TAG,""String_Node_Str"");
          getRegionsStateMap().remove(region);
          break;
        }
      }
    }
  }
  getRegionsStateMap().put(region,new RegionMonitoringState(callback));
  saveMonitoringStatusIfOn();
}",0.9666011787819252
162647,"protected BluetoothAdapter getBluetoothAdapter(){
  if (mBluetoothAdapter == null) {
    final BluetoothManager bluetoothManager=(BluetoothManager)mContext.getApplicationContext().getSystemService(Context.BLUETOOTH_SERVICE);
    mBluetoothAdapter=bluetoothManager.getAdapter();
    if (mBluetoothAdapter == null) {
      LogManager.w(TAG,""String_Node_Str"");
    }
  }
  return mBluetoothAdapter;
}","protected BluetoothAdapter getBluetoothAdapter(){
  try {
    if (mBluetoothAdapter == null) {
      final BluetoothManager bluetoothManager=(BluetoothManager)mContext.getApplicationContext().getSystemService(Context.BLUETOOTH_SERVICE);
      mBluetoothAdapter=bluetoothManager.getAdapter();
      if (mBluetoothAdapter == null) {
        LogManager.w(TAG,""String_Node_Str"");
      }
    }
  }
 catch (  SecurityException e) {
    LogManager.e(TAG,""String_Node_Str"");
  }
  return mBluetoothAdapter;
}",0.8841870824053452
162648,"private void finishScanCycle(){
  LogManager.d(TAG,""String_Node_Str"");
  mCycledLeScanCallback.onCycleEnd();
  if (mScanning) {
    if (getBluetoothAdapter() != null) {
      if (getBluetoothAdapter().isEnabled()) {
        long now=System.currentTimeMillis();
        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && mBetweenScanPeriod + mScanPeriod < ANDROID_N_MIN_SCAN_CYCLE_MILLIS && now - mLastScanStopTime < ANDROID_N_MIN_SCAN_CYCLE_MILLIS) {
          LogManager.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + (ANDROID_N_MIN_SCAN_CYCLE_MILLIS - (now - mLastScanStopTime)) + ""String_Node_Str"");
        }
 else {
          try {
            LogManager.d(TAG,""String_Node_Str"");
            finishScan();
            mLastScanStopTime=now;
          }
 catch (          Exception e) {
            LogManager.w(e,TAG,""String_Node_Str"");
          }
        }
        mLastScanCycleEndTime=SystemClock.elapsedRealtime();
      }
 else {
        LogManager.d(TAG,""String_Node_Str"");
      }
    }
    mNextScanCycleStartTime=getNextScanStartTime();
    if (mScanningEnabled) {
      scanLeDevice(true);
    }
  }
  if (!mScanningEnabled) {
    LogManager.d(TAG,""String_Node_Str"");
    mScanCyclerStarted=false;
    cancelWakeUpAlarm();
  }
}","private void finishScanCycle(){
  LogManager.d(TAG,""String_Node_Str"");
  try {
    mCycledLeScanCallback.onCycleEnd();
    if (mScanning) {
      if (getBluetoothAdapter() != null) {
        if (getBluetoothAdapter().isEnabled()) {
          long now=System.currentTimeMillis();
          if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && mBetweenScanPeriod + mScanPeriod < ANDROID_N_MIN_SCAN_CYCLE_MILLIS && now - mLastScanStopTime < ANDROID_N_MIN_SCAN_CYCLE_MILLIS) {
            LogManager.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + (ANDROID_N_MIN_SCAN_CYCLE_MILLIS - (now - mLastScanStopTime)) + ""String_Node_Str"");
          }
 else {
            try {
              LogManager.d(TAG,""String_Node_Str"");
              finishScan();
              mLastScanStopTime=now;
            }
 catch (            Exception e) {
              LogManager.w(e,TAG,""String_Node_Str"");
            }
          }
          mLastScanCycleEndTime=SystemClock.elapsedRealtime();
        }
 else {
          LogManager.d(TAG,""String_Node_Str"");
        }
      }
      mNextScanCycleStartTime=getNextScanStartTime();
      if (mScanningEnabled) {
        scanLeDevice(true);
      }
    }
    if (!mScanningEnabled) {
      LogManager.d(TAG,""String_Node_Str"");
      mScanCyclerStarted=false;
      cancelWakeUpAlarm();
    }
  }
 catch (  SecurityException e) {
    LogManager.w(TAG,""String_Node_Str"");
  }
}",0.9416974169741698
162649,"@SuppressLint(""String_Node_Str"") protected void scanLeDevice(final Boolean enable){
  mScanCyclerStarted=true;
  if (getBluetoothAdapter() == null) {
    LogManager.e(TAG,""String_Node_Str"");
  }
  if (enable) {
    if (deferScanIfNeeded()) {
      return;
    }
    LogManager.d(TAG,""String_Node_Str"");
    if (!mScanning || mScanningPaused || mRestartNeeded) {
      mScanning=true;
      mScanningPaused=false;
      try {
        if (getBluetoothAdapter() != null) {
          if (getBluetoothAdapter().isEnabled()) {
            if (mBluetoothCrashResolver != null && mBluetoothCrashResolver.isRecoveryInProgress()) {
              LogManager.w(TAG,""String_Node_Str"");
            }
 else {
              if (mScanningEnabled) {
                if (mRestartNeeded) {
                  mRestartNeeded=false;
                  LogManager.d(TAG,""String_Node_Str"");
                }
 else {
                  LogManager.d(TAG,""String_Node_Str"");
                }
                try {
                  if (android.os.Build.VERSION.SDK_INT < 23 || checkLocationPermission()) {
                    startScan();
                  }
                }
 catch (                Exception e) {
                  LogManager.e(e,TAG,""String_Node_Str"");
                }
              }
 else {
                LogManager.d(TAG,""String_Node_Str"");
              }
            }
            mLastScanCycleStartTime=SystemClock.elapsedRealtime();
          }
 else {
            LogManager.d(TAG,""String_Node_Str"");
          }
        }
      }
 catch (      Exception e) {
        LogManager.e(e,TAG,""String_Node_Str"");
      }
    }
 else {
      LogManager.d(TAG,""String_Node_Str"");
    }
    mScanCycleStopTime=(SystemClock.elapsedRealtime() + mScanPeriod);
    scheduleScanCycleStop();
    LogManager.d(TAG,""String_Node_Str"");
  }
 else {
    LogManager.d(TAG,""String_Node_Str"");
    mScanning=false;
    mScanCyclerStarted=false;
    stopScan();
    mLastScanCycleEndTime=SystemClock.elapsedRealtime();
  }
}","@SuppressLint(""String_Node_Str"") protected void scanLeDevice(final Boolean enable){
  try {
    mScanCyclerStarted=true;
    if (getBluetoothAdapter() == null) {
      LogManager.e(TAG,""String_Node_Str"");
    }
    if (enable) {
      if (deferScanIfNeeded()) {
        return;
      }
      LogManager.d(TAG,""String_Node_Str"");
      if (!mScanning || mScanningPaused || mRestartNeeded) {
        mScanning=true;
        mScanningPaused=false;
        try {
          if (getBluetoothAdapter() != null) {
            if (getBluetoothAdapter().isEnabled()) {
              if (mBluetoothCrashResolver != null && mBluetoothCrashResolver.isRecoveryInProgress()) {
                LogManager.w(TAG,""String_Node_Str"");
              }
 else {
                if (mScanningEnabled) {
                  if (mRestartNeeded) {
                    mRestartNeeded=false;
                    LogManager.d(TAG,""String_Node_Str"");
                  }
 else {
                    LogManager.d(TAG,""String_Node_Str"");
                  }
                  try {
                    if (android.os.Build.VERSION.SDK_INT < 23 || checkLocationPermission()) {
                      startScan();
                    }
                  }
 catch (                  Exception e) {
                    LogManager.e(e,TAG,""String_Node_Str"");
                  }
                }
 else {
                  LogManager.d(TAG,""String_Node_Str"");
                }
              }
              mLastScanCycleStartTime=SystemClock.elapsedRealtime();
            }
 else {
              LogManager.d(TAG,""String_Node_Str"");
            }
          }
        }
 catch (        Exception e) {
          LogManager.e(e,TAG,""String_Node_Str"");
        }
      }
 else {
        LogManager.d(TAG,""String_Node_Str"");
      }
      mScanCycleStopTime=(SystemClock.elapsedRealtime() + mScanPeriod);
      scheduleScanCycleStop();
      LogManager.d(TAG,""String_Node_Str"");
    }
 else {
      LogManager.d(TAG,""String_Node_Str"");
      mScanning=false;
      mScanCyclerStarted=false;
      stopScan();
      mLastScanCycleEndTime=SystemClock.elapsedRealtime();
    }
  }
 catch (  SecurityException e) {
    LogManager.w(TAG,""String_Node_Str"");
  }
}",0.9445497630331754
162650,"protected CycledLeScanner(Context context,long scanPeriod,long betweenScanPeriod,boolean backgroundFlag,CycledLeScanCallback cycledLeScanCallback,BluetoothCrashResolver crashResolver){
  mScanPeriod=scanPeriod;
  mBetweenScanPeriod=betweenScanPeriod;
  mContext=context;
  mCycledLeScanCallback=cycledLeScanCallback;
  mBluetoothCrashResolver=crashResolver;
  mBackgroundFlag=backgroundFlag;
}","protected CycledLeScanner(Context context,long scanPeriod,long betweenScanPeriod,boolean backgroundFlag,CycledLeScanCallback cycledLeScanCallback,BluetoothCrashResolver crashResolver){
  mScanPeriod=scanPeriod;
  mBetweenScanPeriod=betweenScanPeriod;
  mContext=context;
  mCycledLeScanCallback=cycledLeScanCallback;
  mBluetoothCrashResolver=crashResolver;
  mBackgroundFlag=backgroundFlag;
  mScanThread=new HandlerThread(""String_Node_Str"");
  mScanThread.start();
  mScanHandler=new Handler(mScanThread.getLooper());
}",0.8599562363238512
162651,"/** 
 * Specifies a class to remove from the array of <code>MonitorNotifier</code>.
 * @param notifier
 * @see MonitorNotifier
 * @see #startMonitoringBeaconsInRegion(Region region)
 * @see Region
 */
public boolean removeMonitoreNotifier(MonitorNotifier notifier){
synchronized (monitorNotifiers) {
    return monitorNotifiers.remove(notifier);
  }
}","/** 
 * @see #removeMonitorNotifier
 * @deprecated Misspelled. Replaced by {@link #removeMonitorNotifier}
 */
@Deprecated public boolean removeMonitoreNotifier(MonitorNotifier notifier){
  return removeMonitorNotifier(notifier);
}",0.3476764199655766
162652,"/** 
 * Specifies a class that should be called each time the <code>BeaconService</code> sees or stops seeing a Region of beacons. <p/> Permits to register severals <code>MonitorNotifier</code> objects. <p/> Unregister the notifier using (@link #removeMonitoreNotifier)
 * @param notifier
 * @see MonitorNotifier
 * @see #startMonitoringBeaconsInRegion(Region region)
 * @see Region
 */
public void addMonitorNotifier(MonitorNotifier notifier){
  if (notifier != null) {
synchronized (monitorNotifiers) {
      monitorNotifiers.add(notifier);
    }
  }
}","/** 
 * Specifies a class that should be called each time the <code>BeaconService</code> sees or stops seeing a Region of beacons. <p/> Permits to register several <code>MonitorNotifier</code> objects. <p/> Unregister the notifier using   {@link #removeMonitoreNotifier}
 * @param notifier The {@link MonitorNotifier} to register.
 * @see MonitorNotifier
 * @see #startMonitoringBeaconsInRegion(Region)
 * @see Region
 */
public void addMonitorNotifier(MonitorNotifier notifier){
  if (notifier != null) {
synchronized (monitorNotifiers) {
      monitorNotifiers.add(notifier);
    }
  }
}",0.9518810148731408
162653,"/** 
 * Specifies a class that should be called each time the <code>BeaconService</code> sees or stops seeing a Region of beacons. <p/> IMPORTANT:  Only one MonitorNotifier may be active for a given application.  If two different activities or services set different MonitorNotifier instances, the last one set will receive all the notifications.
 * @param notifier
 * @see MonitorNotifier
 * @see #startMonitoringBeaconsInRegion(Region region)
 * @see Region
 * @deprecated replaced by (@link #addMonitorNotifier)
 */
@Deprecated public void setMonitorNotifier(MonitorNotifier notifier){
synchronized (monitorNotifiers) {
    monitorNotifiers.clear();
  }
  addMonitorNotifier(notifier);
}","/** 
 * Specifies a class that should be called each time the <code>BeaconService</code> sees or stops seeing a Region of beacons. <p/> IMPORTANT:  Only one MonitorNotifier may be active for a given application.  If two different activities or services set different MonitorNotifier instances, the last one set will receive all the notifications.
 * @param notifier The {@link MonitorNotifier} to register.
 * @see MonitorNotifier
 * @see #startMonitoringBeaconsInRegion(Region)
 * @see Region
 * @deprecated replaced by {@link #addMonitorNotifier}
 */
@Deprecated public void setMonitorNotifier(MonitorNotifier notifier){
synchronized (monitorNotifiers) {
    monitorNotifiers.clear();
  }
  addMonitorNotifier(notifier);
}",0.9632248939179632
162654,"/** 
 * Remove all the Monitor Notifers
 */
public void removeAllMonitorNotifiers(){
synchronized (monitorNotifiers) {
    monitorNotifiers.clear();
  }
}","/** 
 * Remove all the Monitor Notifiers.
 */
public void removeAllMonitorNotifiers(){
synchronized (monitorNotifiers) {
    monitorNotifiers.clear();
  }
}",0.9935483870967742
162655,"/** 
 * Specifies a class that should be called each time the <code>BeaconService</code> gets ranging data, which is nominally once per second when beacons are detected. <p/> IMPORTANT:  Only one RangeNotifier may be active for a given application.  If two different activities or services set different RangeNotifier instances, the last one set will receive all the notifications.
 * @param notifier
 * @see RangeNotifier
 * @deprecated replaced by (@link #addRangeNotifier)
 */
@Deprecated public void setRangeNotifier(RangeNotifier notifier){
synchronized (rangeNotifiers) {
    rangeNotifiers.clear();
  }
  addRangeNotifier(notifier);
}","/** 
 * Specifies a class that should be called each time the <code>BeaconService</code> gets ranging data, which is nominally once per second when beacons are detected. <p/> IMPORTANT:  Only one RangeNotifier may be active for a given application.  If two different activities or services set different RangeNotifier instances, the last one set will receive all the notifications.
 * @param notifier The {@link RangeNotifier} to register.
 * @see RangeNotifier
 * @deprecated replaced by (@link #addRangeNotifier)
 */
@Deprecated public void setRangeNotifier(RangeNotifier notifier){
synchronized (rangeNotifiers) {
    rangeNotifiers.clear();
  }
  addRangeNotifier(notifier);
}",0.9704769114307344
162656,"/** 
 * Specifies a class to remove from the array of <code>RangeNotifier</code>
 * @param notifier
 * @see RangeNotifier
 */
public boolean removeRangeNotifier(RangeNotifier notifier){
synchronized (rangeNotifiers) {
    return rangeNotifiers.remove(notifier);
  }
}","/** 
 * Specifies a class to remove from the array of <code>RangeNotifier</code>
 * @param notifier The {@link RangeNotifier} to unregister.
 * @see RangeNotifier
 */
public boolean removeRangeNotifier(RangeNotifier notifier){
synchronized (rangeNotifiers) {
    return rangeNotifiers.remove(notifier);
  }
}",0.928695652173913
162657,"/** 
 * Turns off saving the state of monitored regions to persistent storage so it is retained over app restarts.  Defaults to enabled.  When enabled, there will not be an ""extra"" region entry event when the app starts up and a beacon for a monitored region was previously visible within the past 15 minutes.  Note that there is a limit to 50 monitored regions that may be perisisted.  If more than 50 regions are monitored, state is not persisted for any.
 * @param enabled
 */
public void setRegionStatePeristenceEnabled(boolean enabled){
  if (enabled) {
    MonitoringStatus.getInstanceForApplication(mContext).startStatusPreservation();
  }
 else {
    MonitoringStatus.getInstanceForApplication(mContext).stopStatusPreservation();
  }
}","/** 
 * @see #setRegionStatePersistenceEnabled
 * @deprecated Misspelled. Replaced by {@link #setRegionStatePersistenceEnabled}
 */
@Deprecated public void setRegionStatePeristenceEnabled(boolean enabled){
  setRegionStatePersistenceEnabled(enabled);
}",0.1768844221105527
162658,"/** 
 * Remove all the Range Notifiers
 */
public void removeAllRangeNotifiers(){
synchronized (rangeNotifiers) {
    rangeNotifiers.clear();
  }
}","/** 
 * Remove all the Range Notifiers.
 */
public void removeAllRangeNotifiers(){
synchronized (rangeNotifiers) {
    rangeNotifiers.clear();
  }
}",0.9966101694915256
162659,"/** 
 * Specifies a class that should be called each time the <code>BeaconService</code> gets ranging data, which is nominally once per second when beacons are detected. <p/> Permits to register several <code>RangeNotifier</code> objects. <p/> The notifier must be unregistered using (@link #removeRangeNotifier)
 * @param notifier
 * @see RangeNotifier
 */
public void addRangeNotifier(RangeNotifier notifier){
  if (notifier != null) {
synchronized (rangeNotifiers) {
      rangeNotifiers.add(notifier);
    }
  }
}","/** 
 * Specifies a class that should be called each time the <code>BeaconService</code> gets ranging data, which is nominally once per second when beacons are detected. <p/> Permits to register several <code>RangeNotifier</code> objects. <p/> The notifier must be unregistered using (@link #removeRangeNotifier)
 * @param notifier The {@link RangeNotifier} to register.
 * @see RangeNotifier
 */
public void addRangeNotifier(RangeNotifier notifier){
  if (notifier != null) {
synchronized (rangeNotifiers) {
      rangeNotifiers.add(notifier);
    }
  }
}",0.9636533084808948
162660,"/** 
 * Tells the <code>BeaconService</code> to start looking for beacons that match the passed <code>Region</code> object.  Note that the Region's unique identifier must be retained to later call the stopMonitoringBeaconsInRegion method.
 * @param region
 * @see BeaconManager#setMonitorNotifier(MonitorNotifier)
 * @see BeaconManager#stopMonitoringBeaconsInRegion(Region region)
 * @see MonitorNotifier
 * @see Region
 */
@TargetApi(18) public void startMonitoringBeaconsInRegion(Region region) throws RemoteException {
  if (android.os.Build.VERSION.SDK_INT < 18) {
    LogManager.w(TAG,""String_Node_Str"");
    return;
  }
  if (serviceMessenger == null) {
    throw new RemoteException(""String_Node_Str"");
  }
  Message msg=Message.obtain(null,BeaconService.MSG_START_MONITORING,0,0);
  StartRMData obj=new StartRMData(region,callbackPackageName(),this.getScanPeriod(),this.getBetweenScanPeriod(),this.mBackgroundMode);
  msg.obj=obj;
  serviceMessenger.send(msg);
synchronized (monitoredRegions) {
    this.requestStateForRegion(region);
    monitoredRegions.add(region);
  }
}","/** 
 * Tells the <code>BeaconService</code> to start looking for beacons that match the passed <code>Region</code> object.  Note that the Region's unique identifier must be retained to later call the stopMonitoringBeaconsInRegion method.
 * @param region
 * @see BeaconManager#setMonitorNotifier(MonitorNotifier)
 * @see BeaconManager#stopMonitoringBeaconsInRegion(Region region)
 * @see MonitorNotifier
 * @see Region
 */
@TargetApi(18) public void startMonitoringBeaconsInRegion(Region region) throws RemoteException {
  if (android.os.Build.VERSION.SDK_INT < 18) {
    LogManager.w(TAG,""String_Node_Str"");
    return;
  }
  if (serviceMessenger == null) {
    throw new RemoteException(""String_Node_Str"");
  }
  LogManager.d(TAG,""String_Node_Str"" + region + ""String_Node_Str""+ region.getUniqueId());
  Message msg=Message.obtain(null,BeaconService.MSG_START_MONITORING,0,0);
  StartRMData obj=new StartRMData(region,callbackPackageName(),this.getScanPeriod(),this.getBetweenScanPeriod(),this.mBackgroundMode);
  msg.obj=obj;
  serviceMessenger.send(msg);
synchronized (monitoredRegions) {
    this.requestStateForRegion(region);
    monitoredRegions.add(region);
  }
}",0.9600709849157054
162661,"/** 
 * Requests the current in/out state on the specified region. If the region is being monitored, this will cause an asynchronous callback on the `MonitorNotifier`'s `didDetermineStateForRegion` method.  If it is not a monitored region, it will be ignored.
 * @param region
 */
public void requestStateForRegion(Region region){
  MonitoringStatus status=MonitoringStatus.getInstanceForApplication(mContext);
  RegionMonitoringState stateObj=status.stateOf(region);
  int state=MonitorNotifier.OUTSIDE;
  if (stateObj != null && stateObj.isInside()) {
    state=MonitorNotifier.INSIDE;
  }
synchronized (monitorNotifiers) {
    for (    MonitorNotifier notifier : monitorNotifiers) {
      notifier.didDetermineStateForRegion(state,region);
    }
  }
}","/** 
 * Requests the current in/out state on the specified region. If the region is being monitored, this will cause an asynchronous callback on the `MonitorNotifier`'s `didDetermineStateForRegion` method.  If it is not a monitored region, it will be ignored.
 * @param region
 */
public void requestStateForRegion(Region region){
  MonitoringStatus status=MonitoringStatus.getInstanceForApplication(mContext);
  RegionMonitoringState stateObj=status.stateOf(region);
  int state=MonitorNotifier.OUTSIDE;
  if (stateObj != null && stateObj.getInside()) {
    state=MonitorNotifier.INSIDE;
  }
synchronized (monitorNotifiers) {
    for (    MonitorNotifier notifier : monitorNotifiers) {
      notifier.didDetermineStateForRegion(state,region);
    }
  }
}",0.9966865473823724
162662,"@Override public void onCreate(){
  LogManager.i(TAG,""String_Node_Str"",BuildConfig.VERSION_NAME);
  bluetoothCrashResolver=new BluetoothCrashResolver(this);
  bluetoothCrashResolver.start();
  mExecutor=Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() + 1);
  mCycledScanner=CycledLeScanner.createScanner(this,BeaconManager.DEFAULT_FOREGROUND_SCAN_PERIOD,BeaconManager.DEFAULT_FOREGROUND_BETWEEN_SCAN_PERIOD,mBackgroundFlag,mCycledLeScanCallback,bluetoothCrashResolver);
  beaconManager=BeaconManager.getInstanceForApplication(getApplicationContext());
  boolean matchBeaconsByServiceUUID=true;
  if (beaconManager.getBeaconParsers() != null) {
    beaconParsers.addAll(beaconManager.getBeaconParsers());
    for (    BeaconParser beaconParser : beaconManager.getBeaconParsers()) {
      if (beaconParser.getExtraDataParsers().size() > 0) {
        matchBeaconsByServiceUUID=false;
        beaconParsers.addAll(beaconParser.getExtraDataParsers());
      }
    }
  }
  mExtraDataBeaconTracker=new ExtraDataBeaconTracker(matchBeaconsByServiceUUID);
  defaultDistanceCalculator=new ModelSpecificDistanceCalculator(this,BeaconManager.getDistanceModelUpdateUrl());
  Beacon.setDistanceCalculator(defaultDistanceCalculator);
  monitoringStatus=MonitoringStatus.getInstanceForApplication(getApplicationContext());
  try {
    Class klass=Class.forName(""String_Node_Str"");
    java.lang.reflect.Field f=klass.getField(""String_Node_Str"");
    this.simulatedScanData=(List<Beacon>)f.get(null);
  }
 catch (  ClassNotFoundException e) {
    LogManager.d(TAG,""String_Node_Str"");
  }
catch (  Exception e) {
    LogManager.e(e,TAG,""String_Node_Str"");
  }
}","@Override public void onCreate(){
  LogManager.i(TAG,""String_Node_Str"",BuildConfig.VERSION_NAME);
  bluetoothCrashResolver=new BluetoothCrashResolver(this);
  bluetoothCrashResolver.start();
  mExecutor=Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() + 1);
  mCycledScanner=CycledLeScanner.createScanner(this,BeaconManager.DEFAULT_FOREGROUND_SCAN_PERIOD,BeaconManager.DEFAULT_FOREGROUND_BETWEEN_SCAN_PERIOD,mBackgroundFlag,mCycledLeScanCallback,bluetoothCrashResolver);
  beaconManager=BeaconManager.getInstanceForApplication(getApplicationContext());
  boolean matchBeaconsByServiceUUID=true;
  if (beaconManager.getBeaconParsers() != null) {
    beaconParsers.addAll(beaconManager.getBeaconParsers());
    for (    BeaconParser beaconParser : beaconManager.getBeaconParsers()) {
      if (beaconParser.getExtraDataParsers().size() > 0) {
        matchBeaconsByServiceUUID=false;
        beaconParsers.addAll(beaconParser.getExtraDataParsers());
      }
    }
  }
  mExtraDataBeaconTracker=new ExtraDataBeaconTracker(matchBeaconsByServiceUUID);
  defaultDistanceCalculator=new ModelSpecificDistanceCalculator(this,BeaconManager.getDistanceModelUpdateUrl());
  Beacon.setDistanceCalculator(defaultDistanceCalculator);
  monitoringStatus=MonitoringStatus.getInstanceForApplication(getApplicationContext());
  monitoringStatus.startStatusPreservation();
  try {
    Class klass=Class.forName(""String_Node_Str"");
    java.lang.reflect.Field f=klass.getField(""String_Node_Str"");
    this.simulatedScanData=(List<Beacon>)f.get(null);
  }
 catch (  ClassNotFoundException e) {
    LogManager.d(TAG,""String_Node_Str"");
  }
catch (  Exception e) {
    LogManager.e(e,TAG,""String_Node_Str"");
  }
}",0.9863824748371818
162663,"@Override public void onDestroy(){
  LogManager.e(TAG,""String_Node_Str"");
  if (android.os.Build.VERSION.SDK_INT < 18) {
    LogManager.w(TAG,""String_Node_Str"");
    return;
  }
  bluetoothCrashResolver.stop();
  LogManager.i(TAG,""String_Node_Str"");
  handler.removeCallbacksAndMessages(null);
  mCycledScanner.stop();
  monitoringStatus.stopStatusPreservationOnProcessDestruction();
}","@Override public void onDestroy(){
  LogManager.e(TAG,""String_Node_Str"");
  if (android.os.Build.VERSION.SDK_INT < 18) {
    LogManager.w(TAG,""String_Node_Str"");
    return;
  }
  bluetoothCrashResolver.stop();
  LogManager.i(TAG,""String_Node_Str"");
  handler.removeCallbacksAndMessages(null);
  mCycledScanner.stop();
  monitoringStatus.stopStatusPreservation();
}",0.9733333333333334
162664,"public synchronized void updateNewlyOutside(){
  Iterator<Region> monitoredRegionIterator=regions().iterator();
  boolean needsMonitoringStateSaving=false;
  while (monitoredRegionIterator.hasNext()) {
    Region region=monitoredRegionIterator.next();
    RegionMonitoringState state=stateOf(region);
    if (state.isNewlyOutside()) {
      needsMonitoringStateSaving=true;
      LogManager.d(TAG,""String_Node_Str"",region);
      state.getCallback().call(mContext,""String_Node_Str"",new MonitoringData(state.isInside(),region));
    }
  }
  if (needsMonitoringStateSaving) {
    saveMonitoringStatusIfOn();
  }
 else {
    updateMonitoringStatusTime(System.currentTimeMillis());
  }
}","public synchronized void updateNewlyOutside(){
  Iterator<Region> monitoredRegionIterator=regions().iterator();
  boolean needsMonitoringStateSaving=false;
  while (monitoredRegionIterator.hasNext()) {
    Region region=monitoredRegionIterator.next();
    RegionMonitoringState state=stateOf(region);
    if (state.markOutsideIfExpired()) {
      needsMonitoringStateSaving=true;
      LogManager.d(TAG,""String_Node_Str"",region);
      state.getCallback().call(mContext,""String_Node_Str"",new MonitoringData(state.getInside(),region));
    }
  }
  if (needsMonitoringStateSaving) {
    saveMonitoringStatusIfOn();
  }
 else {
    updateMonitoringStatusTime(System.currentTimeMillis());
  }
}",0.9817916970138384
162665,"public synchronized void updateNewlyInsideInRegionsContaining(Beacon beacon){
  List<Region> matchingRegions=regionsMatchingTo(beacon);
  boolean needsMonitoringStateSaving=false;
  for (  Region region : matchingRegions) {
    RegionMonitoringState state=mRegionsStatesMap.get(region);
    if (state != null && state.markInside()) {
      needsMonitoringStateSaving=true;
      state.getCallback().call(mContext,""String_Node_Str"",new MonitoringData(state.isInside(),region));
    }
  }
  if (needsMonitoringStateSaving) {
    saveMonitoringStatusIfOn();
  }
 else {
    updateMonitoringStatusTime(System.currentTimeMillis());
  }
}","public synchronized void updateNewlyInsideInRegionsContaining(Beacon beacon){
  List<Region> matchingRegions=regionsMatchingTo(beacon);
  boolean needsMonitoringStateSaving=false;
  for (  Region region : matchingRegions) {
    RegionMonitoringState state=mRegionsStatesMap.get(region);
    if (state != null && state.markInside()) {
      needsMonitoringStateSaving=true;
      state.getCallback().call(mContext,""String_Node_Str"",new MonitoringData(state.getInside(),region));
    }
  }
  if (needsMonitoringStateSaving) {
    saveMonitoringStatusIfOn();
  }
 else {
    updateMonitoringStatusTime(System.currentTimeMillis());
  }
}",0.9960474308300395
162666,"public synchronized void addRegion(Region region){
  if (mRegionsStatesMap.containsKey(region))   return;
  mRegionsStatesMap.put(region,new RegionMonitoringState(new Callback(mContext.getPackageName())));
  saveMonitoringStatusIfOn();
}","public synchronized void addRegion(Region region){
  if (mRegionsStatesMap.containsKey(region)) {
    for (    Region existingRegion : mRegionsStatesMap.keySet()) {
      if (existingRegion.equals(region)) {
        if (existingRegion.hasSameIdentifiers(region)) {
          return;
        }
 else {
          LogManager.d(TAG,""String_Node_Str"" + region.getUniqueId());
          LogManager.d(TAG,""String_Node_Str"" + existingRegion);
          LogManager.d(TAG,""String_Node_Str"" + region);
          LogManager.d(TAG,""String_Node_Str"");
        }
      }
    }
    return;
  }
  mRegionsStatesMap.put(region,new RegionMonitoringState(new Callback(mContext.getPackageName())));
  saveMonitoringStatusIfOn();
}",0.4904862579281184
162667,"public MonitoringStatus(Context context){
  this.mContext=context;
  long millisSinceLastMonitor=System.currentTimeMillis() - getLastMonitoringStatusUpdateTime();
  if (millisSinceLastMonitor > MAX_STATUS_PRESERVATION_FILE_AGE_TO_RESTORE_SECS * 1000) {
    LogManager.d(TAG,""String_Node_Str"" + millisSinceLastMonitor);
  }
 else {
    restoreMonitoringStatus();
  }
}","public MonitoringStatus(Context context){
  this.mContext=context;
  long millisSinceLastMonitor=System.currentTimeMillis() - getLastMonitoringStatusUpdateTime();
  if (millisSinceLastMonitor > MAX_STATUS_PRESERVATION_FILE_AGE_TO_RESTORE_SECS * 1000) {
    LogManager.d(TAG,""String_Node_Str"" + millisSinceLastMonitor);
  }
 else {
    restoreMonitoringStatus();
    LogManager.d(TAG,""String_Node_Str"");
  }
}",0.9470967741935484
162668,"protected void restoreMonitoringStatus(){
  FileInputStream inputStream=null;
  ObjectInputStream objectInputStream=null;
  try {
    inputStream=mContext.openFileInput(STATUS_PRESERVATION_FILE_NAME);
    objectInputStream=new ObjectInputStream(inputStream);
    Map<Region,RegionMonitoringState> obj=(Map<Region,RegionMonitoringState>)objectInputStream.readObject();
    mRegionsStatesMap.putAll(obj);
  }
 catch (  IOException|ClassNotFoundException|ClassCastException e) {
    if (e instanceof InvalidClassException) {
      LogManager.d(TAG,""String_Node_Str"");
    }
 else     LogManager.e(TAG,""String_Node_Str"",e.getMessage());
  }
 finally {
    if (null != inputStream) {
      try {
        inputStream.close();
      }
 catch (      IOException ignored) {
      }
    }
    if (objectInputStream != null) {
      try {
        objectInputStream.close();
      }
 catch (      IOException ignored) {
      }
    }
  }
}","protected void restoreMonitoringStatus(){
  FileInputStream inputStream=null;
  ObjectInputStream objectInputStream=null;
  try {
    inputStream=mContext.openFileInput(STATUS_PRESERVATION_FILE_NAME);
    objectInputStream=new ObjectInputStream(inputStream);
    Map<Region,RegionMonitoringState> obj=(Map<Region,RegionMonitoringState>)objectInputStream.readObject();
    LogManager.d(TAG,""String_Node_Str"" + obj.size() + ""String_Node_Str"");
    for (    Region region : obj.keySet()) {
      LogManager.d(TAG,""String_Node_Str"" + region + ""String_Node_Str""+ region.getUniqueId()+ ""String_Node_Str""+ obj.get(region));
    }
    mRegionsStatesMap.putAll(obj);
  }
 catch (  IOException|ClassNotFoundException|ClassCastException e) {
    if (e instanceof InvalidClassException) {
      LogManager.d(TAG,""String_Node_Str"");
    }
 else     LogManager.e(TAG,""String_Node_Str"",e.getMessage());
  }
 finally {
    if (null != inputStream) {
      try {
        inputStream.close();
      }
 catch (      IOException ignored) {
      }
    }
    if (objectInputStream != null) {
      try {
        objectInputStream.close();
      }
 catch (      IOException ignored) {
      }
    }
  }
}",0.5794215267899478
162669,"@TargetApi(5) protected Beacon fromScanData(byte[] bytesToProcess,int rssi,BluetoothDevice device,Beacon beacon){
  BleAdvertisement advert=new BleAdvertisement(bytesToProcess);
  boolean parseFailed=false;
  Pdu pduToParse=null;
  int startByte=0;
  ArrayList<Identifier> identifiers=new ArrayList<Identifier>();
  ArrayList<Long> dataFields=new ArrayList<Long>();
  for (  Pdu pdu : advert.getPdus()) {
    if (pdu.getType() == Pdu.GATT_SERVICE_UUID_PDU_TYPE || pdu.getType() == Pdu.MANUFACTURER_DATA_PDU_TYPE) {
      pduToParse=pdu;
      if (LogManager.isVerboseLoggingEnabled()) {
        LogManager.d(TAG,""String_Node_Str"",pdu.getType(),bytesToHex(bytesToProcess),pdu.getStartIndex(),pdu.getEndIndex());
      }
      break;
    }
 else {
      if (LogManager.isVerboseLoggingEnabled()) {
        LogManager.d(TAG,""String_Node_Str"",pdu.getType());
      }
    }
  }
  if (pduToParse == null) {
    if (LogManager.isVerboseLoggingEnabled()) {
      LogManager.d(TAG,""String_Node_Str"");
    }
    parseFailed=true;
  }
 else {
    byte[] serviceUuidBytes=null;
    byte[] typeCodeBytes=longToByteArray(getMatchingBeaconTypeCode(),mMatchingBeaconTypeCodeEndOffset - mMatchingBeaconTypeCodeStartOffset + 1);
    if (getServiceUuid() != null) {
      serviceUuidBytes=longToByteArray(getServiceUuid(),mServiceUuidEndOffset - mServiceUuidStartOffset + 1,false);
    }
    startByte=pduToParse.getStartIndex();
    boolean patternFound=false;
    if (getServiceUuid() == null) {
      if (byteArraysMatch(bytesToProcess,startByte + mMatchingBeaconTypeCodeStartOffset,typeCodeBytes,0)) {
        patternFound=true;
      }
    }
 else {
      if (byteArraysMatch(bytesToProcess,startByte + mServiceUuidStartOffset,serviceUuidBytes,0) && byteArraysMatch(bytesToProcess,startByte + mMatchingBeaconTypeCodeStartOffset,typeCodeBytes,0)) {
        patternFound=true;
      }
    }
    if (patternFound == false) {
      if (getServiceUuid() == null) {
        if (LogManager.isVerboseLoggingEnabled()) {
          LogManager.d(TAG,""String_Node_Str"" + ""String_Node_Str"",byteArrayToString(typeCodeBytes),bytesToHex(bytesToProcess));
        }
      }
 else {
        if (LogManager.isVerboseLoggingEnabled()) {
          LogManager.d(TAG,""String_Node_Str"" + ""String_Node_Str"",byteArrayToString(serviceUuidBytes),startByte + mServiceUuidStartOffset,byteArrayToString(typeCodeBytes),startByte + mMatchingBeaconTypeCodeStartOffset,bytesToHex(bytesToProcess));
        }
      }
      parseFailed=true;
      beacon=null;
    }
 else {
      if (LogManager.isVerboseLoggingEnabled()) {
        LogManager.d(TAG,""String_Node_Str"",byteArrayToString(typeCodeBytes));
        LogManager.d(TAG,""String_Node_Str"",bytesToHex(bytesToProcess));
      }
    }
    if (patternFound) {
      if (bytesToProcess.length <= startByte + mLayoutSize && mAllowPduOverflow) {
        if (LogManager.isVerboseLoggingEnabled()) {
          LogManager.d(TAG,""String_Node_Str"" + bytesToProcess.length + ""String_Node_Str""+ (startByte + mLayoutSize));
        }
        bytesToProcess=ensureMaxSize(bytesToProcess,startByte + mLayoutSize);
      }
      for (int i=0; i < mIdentifierEndOffsets.size(); i++) {
        int endIndex=mIdentifierEndOffsets.get(i) + startByte;
        if (endIndex > pduToParse.getEndIndex() && mIdentifierVariableLengthFlags.get(i)) {
          if (LogManager.isVerboseLoggingEnabled()) {
            LogManager.d(TAG,""String_Node_Str"" + (endIndex - pduToParse.getEndIndex()));
          }
          Identifier identifier=Identifier.fromBytes(bytesToProcess,mIdentifierStartOffsets.get(i) + startByte,pduToParse.getEndIndex() + 1,mIdentifierLittleEndianFlags.get(i));
          identifiers.add(identifier);
        }
 else         if (endIndex > pduToParse.getEndIndex() && !mAllowPduOverflow) {
          parseFailed=true;
          if (LogManager.isVerboseLoggingEnabled()) {
            LogManager.d(TAG,""String_Node_Str"" + i + ""String_Node_Str""+ endIndex+ ""String_Node_Str""+ pduToParse.getEndIndex());
          }
        }
 else {
          Identifier identifier=Identifier.fromBytes(bytesToProcess,mIdentifierStartOffsets.get(i) + startByte,endIndex + 1,mIdentifierLittleEndianFlags.get(i));
          identifiers.add(identifier);
        }
      }
      for (int i=0; i < mDataEndOffsets.size(); i++) {
        int endIndex=mDataEndOffsets.get(i) + startByte;
        if (endIndex > pduToParse.getEndIndex() && !mAllowPduOverflow) {
          if (LogManager.isVerboseLoggingEnabled()) {
            LogManager.d(TAG,""String_Node_Str"" + i + ""String_Node_Str""+ endIndex+ ""String_Node_Str""+ pduToParse.getEndIndex()+ ""String_Node_Str"");
          }
          dataFields.add(new Long(0l));
        }
 else {
          String dataString=byteArrayToFormattedString(bytesToProcess,mDataStartOffsets.get(i) + startByte,endIndex,mDataLittleEndianFlags.get(i));
          dataFields.add(Long.parseLong(dataString));
        }
      }
      if (mPowerStartOffset != null) {
        int endIndex=mPowerEndOffset + startByte;
        int txPower=0;
        try {
          if (endIndex > pduToParse.getEndIndex() && !mAllowPduOverflow) {
            parseFailed=true;
            if (LogManager.isVerboseLoggingEnabled()) {
              LogManager.d(TAG,""String_Node_Str"" + endIndex + ""String_Node_Str""+ pduToParse.getEndIndex());
            }
          }
 else {
            String powerString=byteArrayToFormattedString(bytesToProcess,mPowerStartOffset + startByte,mPowerEndOffset + startByte,false);
            txPower=Integer.parseInt(powerString) + mDBmCorrection;
            if (txPower > 127) {
              txPower-=256;
            }
            beacon.mTxPower=txPower;
          }
        }
 catch (        NumberFormatException e1) {
        }
catch (        NullPointerException e2) {
        }
      }
    }
  }
  if (parseFailed) {
    beacon=null;
  }
 else {
    int beaconTypeCode=0;
    String beaconTypeString=byteArrayToFormattedString(bytesToProcess,mMatchingBeaconTypeCodeStartOffset + startByte,mMatchingBeaconTypeCodeEndOffset + startByte,false);
    beaconTypeCode=Integer.parseInt(beaconTypeString);
    int manufacturer=0;
    String manufacturerString=byteArrayToFormattedString(bytesToProcess,startByte,startByte + 1,true);
    manufacturer=Integer.parseInt(manufacturerString);
    String macAddress=null;
    String name=null;
    if (device != null) {
      macAddress=device.getAddress();
      name=device.getName();
    }
    beacon.mIdentifiers=identifiers;
    beacon.mDataFields=dataFields;
    beacon.mRssi=rssi;
    beacon.mBeaconTypeCode=beaconTypeCode;
    if (mServiceUuid != null) {
      beacon.mServiceUuid=(int)mServiceUuid.longValue();
    }
 else {
      beacon.mServiceUuid=-1;
    }
    beacon.mBluetoothAddress=macAddress;
    beacon.mBluetoothName=name;
    beacon.mManufacturer=manufacturer;
    beacon.mParserIdentifier=mIdentifier;
  }
  return beacon;
}","@TargetApi(5) protected Beacon fromScanData(byte[] bytesToProcess,int rssi,BluetoothDevice device,Beacon beacon){
  BleAdvertisement advert=new BleAdvertisement(bytesToProcess);
  boolean parseFailed=false;
  Pdu pduToParse=null;
  int startByte=0;
  ArrayList<Identifier> identifiers=new ArrayList<Identifier>();
  ArrayList<Long> dataFields=new ArrayList<Long>();
  for (  Pdu pdu : advert.getPdus()) {
    if (pdu.getType() == Pdu.GATT_SERVICE_UUID_PDU_TYPE || pdu.getType() == Pdu.MANUFACTURER_DATA_PDU_TYPE) {
      pduToParse=pdu;
      if (LogManager.isVerboseLoggingEnabled()) {
        LogManager.d(TAG,""String_Node_Str"",pdu.getType(),bytesToHex(bytesToProcess),pdu.getStartIndex(),pdu.getEndIndex());
      }
      break;
    }
 else {
      if (LogManager.isVerboseLoggingEnabled()) {
        LogManager.d(TAG,""String_Node_Str"",pdu.getType());
      }
    }
  }
  if (pduToParse == null) {
    if (LogManager.isVerboseLoggingEnabled()) {
      LogManager.d(TAG,""String_Node_Str"");
    }
    parseFailed=true;
  }
 else {
    byte[] serviceUuidBytes=null;
    byte[] typeCodeBytes=longToByteArray(getMatchingBeaconTypeCode(),mMatchingBeaconTypeCodeEndOffset - mMatchingBeaconTypeCodeStartOffset + 1);
    if (getServiceUuid() != null) {
      serviceUuidBytes=longToByteArray(getServiceUuid(),mServiceUuidEndOffset - mServiceUuidStartOffset + 1,false);
    }
    startByte=pduToParse.getStartIndex();
    boolean patternFound=false;
    if (getServiceUuid() == null) {
      if (byteArraysMatch(bytesToProcess,startByte + mMatchingBeaconTypeCodeStartOffset,typeCodeBytes,0)) {
        patternFound=true;
      }
    }
 else {
      if (byteArraysMatch(bytesToProcess,startByte + mServiceUuidStartOffset,serviceUuidBytes,0) && byteArraysMatch(bytesToProcess,startByte + mMatchingBeaconTypeCodeStartOffset,typeCodeBytes,0)) {
        patternFound=true;
      }
    }
    if (patternFound == false) {
      if (getServiceUuid() == null) {
        if (LogManager.isVerboseLoggingEnabled()) {
          LogManager.d(TAG,""String_Node_Str"" + ""String_Node_Str"",byteArrayToString(typeCodeBytes),bytesToHex(bytesToProcess));
        }
      }
 else {
        if (LogManager.isVerboseLoggingEnabled()) {
          LogManager.d(TAG,""String_Node_Str"" + ""String_Node_Str"",byteArrayToString(serviceUuidBytes),startByte + mServiceUuidStartOffset,byteArrayToString(typeCodeBytes),startByte + mMatchingBeaconTypeCodeStartOffset,bytesToHex(bytesToProcess));
        }
      }
      parseFailed=true;
      beacon=null;
    }
 else {
      if (LogManager.isVerboseLoggingEnabled()) {
        LogManager.d(TAG,""String_Node_Str"",byteArrayToString(typeCodeBytes));
        LogManager.d(TAG,""String_Node_Str"",bytesToHex(bytesToProcess));
      }
    }
    if (patternFound) {
      if (bytesToProcess.length <= startByte + mLayoutSize && mAllowPduOverflow) {
        if (LogManager.isVerboseLoggingEnabled()) {
          LogManager.d(TAG,""String_Node_Str"" + bytesToProcess.length + ""String_Node_Str""+ (startByte + mLayoutSize));
        }
        bytesToProcess=ensureMaxSize(bytesToProcess,startByte + mLayoutSize);
      }
      for (int i=0; i < mIdentifierEndOffsets.size(); i++) {
        int endIndex=mIdentifierEndOffsets.get(i) + startByte;
        if (endIndex > pduToParse.getEndIndex() && mIdentifierVariableLengthFlags.get(i)) {
          if (LogManager.isVerboseLoggingEnabled()) {
            LogManager.d(TAG,""String_Node_Str"" + (endIndex - pduToParse.getEndIndex()));
          }
          Identifier identifier=Identifier.fromBytes(bytesToProcess,mIdentifierStartOffsets.get(i) + startByte,pduToParse.getEndIndex() + 1,mIdentifierLittleEndianFlags.get(i));
          identifiers.add(identifier);
        }
 else         if (endIndex > pduToParse.getEndIndex() && !mAllowPduOverflow) {
          parseFailed=true;
          if (LogManager.isVerboseLoggingEnabled()) {
            LogManager.d(TAG,""String_Node_Str"" + i + ""String_Node_Str""+ endIndex+ ""String_Node_Str""+ pduToParse.getEndIndex());
          }
        }
 else {
          Identifier identifier=Identifier.fromBytes(bytesToProcess,mIdentifierStartOffsets.get(i) + startByte,endIndex + 1,mIdentifierLittleEndianFlags.get(i));
          identifiers.add(identifier);
        }
      }
      for (int i=0; i < mDataEndOffsets.size(); i++) {
        int endIndex=mDataEndOffsets.get(i) + startByte;
        if (endIndex > pduToParse.getEndIndex() && !mAllowPduOverflow) {
          if (LogManager.isVerboseLoggingEnabled()) {
            LogManager.d(TAG,""String_Node_Str"" + i + ""String_Node_Str""+ endIndex+ ""String_Node_Str""+ pduToParse.getEndIndex()+ ""String_Node_Str"");
          }
          dataFields.add(new Long(0l));
        }
 else {
          String dataString=byteArrayToFormattedString(bytesToProcess,mDataStartOffsets.get(i) + startByte,endIndex,mDataLittleEndianFlags.get(i));
          dataFields.add(Long.decode(dataString));
        }
      }
      if (mPowerStartOffset != null) {
        int endIndex=mPowerEndOffset + startByte;
        int txPower=0;
        try {
          if (endIndex > pduToParse.getEndIndex() && !mAllowPduOverflow) {
            parseFailed=true;
            if (LogManager.isVerboseLoggingEnabled()) {
              LogManager.d(TAG,""String_Node_Str"" + endIndex + ""String_Node_Str""+ pduToParse.getEndIndex());
            }
          }
 else {
            String powerString=byteArrayToFormattedString(bytesToProcess,mPowerStartOffset + startByte,mPowerEndOffset + startByte,false);
            txPower=Integer.parseInt(powerString) + mDBmCorrection;
            if (txPower > 127) {
              txPower-=256;
            }
            beacon.mTxPower=txPower;
          }
        }
 catch (        NumberFormatException e1) {
        }
catch (        NullPointerException e2) {
        }
      }
    }
  }
  if (parseFailed) {
    beacon=null;
  }
 else {
    int beaconTypeCode=0;
    String beaconTypeString=byteArrayToFormattedString(bytesToProcess,mMatchingBeaconTypeCodeStartOffset + startByte,mMatchingBeaconTypeCodeEndOffset + startByte,false);
    beaconTypeCode=Integer.parseInt(beaconTypeString);
    int manufacturer=0;
    String manufacturerString=byteArrayToFormattedString(bytesToProcess,startByte,startByte + 1,true);
    manufacturer=Integer.parseInt(manufacturerString);
    String macAddress=null;
    String name=null;
    if (device != null) {
      macAddress=device.getAddress();
      name=device.getName();
    }
    beacon.mIdentifiers=identifiers;
    beacon.mDataFields=dataFields;
    beacon.mRssi=rssi;
    beacon.mBeaconTypeCode=beaconTypeCode;
    if (mServiceUuid != null) {
      beacon.mServiceUuid=(int)mServiceUuid.longValue();
    }
 else {
      beacon.mServiceUuid=-1;
    }
    beacon.mBluetoothAddress=macAddress;
    beacon.mBluetoothName=name;
    beacon.mManufacturer=manufacturer;
    beacon.mParserIdentifier=mIdentifier;
  }
  return beacon;
}",0.998913122237519
162670,"@SuppressLint(""String_Node_Str"") protected void scanLeDevice(final Boolean enable){
  mScanCyclerStarted=true;
  if (getBluetoothAdapter() == null) {
    LogManager.e(TAG,""String_Node_Str"");
  }
  if (enable) {
    if (deferScanIfNeeded()) {
      return;
    }
    LogManager.d(TAG,""String_Node_Str"");
    if (!mScanning || mScanningPaused || mRestartNeeded) {
      mScanning=true;
      mScanningPaused=false;
      try {
        if (getBluetoothAdapter() != null) {
          if (getBluetoothAdapter().isEnabled()) {
            if (mBluetoothCrashResolver != null && mBluetoothCrashResolver.isRecoveryInProgress()) {
              LogManager.w(TAG,""String_Node_Str"");
            }
 else {
              if (mScanningEnabled) {
                if (mRestartNeeded) {
                  mRestartNeeded=false;
                  LogManager.d(TAG,""String_Node_Str"");
                }
 else {
                  LogManager.d(TAG,""String_Node_Str"");
                }
                try {
                  startScan();
                }
 catch (                Exception e) {
                  LogManager.e(e,TAG,""String_Node_Str"");
                }
              }
 else {
                LogManager.d(TAG,""String_Node_Str"");
              }
            }
            mLastScanCycleStartTime=new Date().getTime();
          }
 else {
            LogManager.d(TAG,""String_Node_Str"");
          }
        }
      }
 catch (      Exception e) {
        LogManager.e(e,TAG,""String_Node_Str"");
      }
    }
 else {
      LogManager.d(TAG,""String_Node_Str"");
    }
    mScanCycleStopTime=(new Date().getTime() + mScanPeriod);
    scheduleScanCycleStop();
    LogManager.d(TAG,""String_Node_Str"");
  }
 else {
    LogManager.d(TAG,""String_Node_Str"");
    mScanning=false;
    stopScan();
    mLastScanCycleEndTime=new Date().getTime();
  }
}","@SuppressLint(""String_Node_Str"") protected void scanLeDevice(final Boolean enable){
  mScanCyclerStarted=true;
  if (getBluetoothAdapter() == null) {
    LogManager.e(TAG,""String_Node_Str"");
  }
  if (enable) {
    if (deferScanIfNeeded()) {
      return;
    }
    LogManager.d(TAG,""String_Node_Str"");
    if (!mScanning || mScanningPaused || mRestartNeeded) {
      mScanning=true;
      mScanningPaused=false;
      try {
        if (getBluetoothAdapter() != null) {
          if (getBluetoothAdapter().isEnabled()) {
            if (mBluetoothCrashResolver != null && mBluetoothCrashResolver.isRecoveryInProgress()) {
              LogManager.w(TAG,""String_Node_Str"");
            }
 else {
              if (mScanningEnabled) {
                if (mRestartNeeded) {
                  mRestartNeeded=false;
                  LogManager.d(TAG,""String_Node_Str"");
                }
 else {
                  LogManager.d(TAG,""String_Node_Str"");
                }
                try {
                  startScan();
                }
 catch (                Exception e) {
                  LogManager.e(e,TAG,""String_Node_Str"");
                }
              }
 else {
                LogManager.d(TAG,""String_Node_Str"");
              }
            }
            mLastScanCycleStartTime=new Date().getTime();
          }
 else {
            LogManager.d(TAG,""String_Node_Str"");
          }
        }
      }
 catch (      Exception e) {
        LogManager.e(e,TAG,""String_Node_Str"");
      }
    }
 else {
      LogManager.d(TAG,""String_Node_Str"");
    }
    mScanCycleStopTime=(new Date().getTime() + mScanPeriod);
    scheduleScanCycleStop();
    LogManager.d(TAG,""String_Node_Str"");
  }
 else {
    LogManager.d(TAG,""String_Node_Str"");
    mScanning=false;
    mScanCyclerStarted=false;
    stopScan();
    mLastScanCycleEndTime=new Date().getTime();
  }
}",0.9805405405405404
162671,"private void loadModelMap(){
  boolean mapLoaded=false;
  if (mRemoteUpdateUrlString != null) {
    mapLoaded=loadModelMapFromFile();
    if (!mapLoaded) {
      requestModelMapFromWeb();
    }
  }
  if (!mapLoaded) {
    loadDefaultModelMap();
  }
  mDistanceCalculator=findCalculatorForModel(mRequestedModel);
}","private void loadModelMap(){
  boolean mapLoaded=false;
  if (mRemoteUpdateUrlString != null) {
    mapLoaded=loadModelMapFromFile();
    if (!mapLoaded) {
      requestModelMapFromWeb();
    }
  }
  if (!mapLoaded) {
    loadDefaultModelMap();
  }
  mDistanceCalculator=findCalculatorForModelWithLock(mRequestedModel);
}",0.9873817034700316
162672,"@Override public void onComplete(String body,Exception ex,int code){
  if (ex != null) {
    LogManager.w(TAG,""String_Node_Str"",ex,mRemoteUpdateUrlString);
  }
 else   if (code != 200) {
    LogManager.w(TAG,""String_Node_Str"" + ""String_Node_Str"",mRemoteUpdateUrlString,code);
  }
 else {
    LogManager.d(TAG,""String_Node_Str"");
    try {
      buildModelMap(body);
      if (saveJson(body)) {
        loadModelMapFromFile();
        mDistanceCalculator=findCalculatorForModel(mRequestedModel);
        LogManager.i(TAG,""String_Node_Str"");
      }
    }
 catch (    JSONException e) {
      LogManager.w(e,TAG,""String_Node_Str"");
    }
  }
}","@Override public void onComplete(String body,Exception ex,int code){
  if (ex != null) {
    LogManager.w(TAG,""String_Node_Str"",ex,mRemoteUpdateUrlString);
  }
 else   if (code != 200) {
    LogManager.w(TAG,""String_Node_Str"" + ""String_Node_Str"",mRemoteUpdateUrlString,code);
  }
 else {
    LogManager.d(TAG,""String_Node_Str"");
    try {
      buildModelMapWithLock(body);
      if (saveJson(body)) {
        loadModelMapFromFile();
        mDistanceCalculator=findCalculatorForModelWithLock(mRequestedModel);
        LogManager.i(TAG,""String_Node_Str"");
      }
    }
 catch (    JSONException e) {
      LogManager.w(e,TAG,""String_Node_Str"");
    }
  }
}",0.987673343605547
162673,"@TargetApi(Build.VERSION_CODES.HONEYCOMB) private void requestModelMapFromWeb(){
  if (mContext.checkCallingOrSelfPermission(""String_Node_Str"") != PackageManager.PERMISSION_GRANTED) {
    LogManager.w(TAG,""String_Node_Str"");
    return;
  }
  new ModelSpecificDistanceUpdater(mContext,mRemoteUpdateUrlString,new ModelSpecificDistanceUpdater.CompletionHandler(){
    @Override public void onComplete(    String body,    Exception ex,    int code){
      if (ex != null) {
        LogManager.w(TAG,""String_Node_Str"",ex,mRemoteUpdateUrlString);
      }
 else       if (code != 200) {
        LogManager.w(TAG,""String_Node_Str"" + ""String_Node_Str"",mRemoteUpdateUrlString,code);
      }
 else {
        LogManager.d(TAG,""String_Node_Str"");
        try {
          buildModelMap(body);
          if (saveJson(body)) {
            loadModelMapFromFile();
            mDistanceCalculator=findCalculatorForModel(mRequestedModel);
            LogManager.i(TAG,""String_Node_Str"");
          }
        }
 catch (        JSONException e) {
          LogManager.w(e,TAG,""String_Node_Str"");
        }
      }
    }
  }
).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}","@TargetApi(Build.VERSION_CODES.HONEYCOMB) private void requestModelMapFromWeb(){
  if (mContext.checkCallingOrSelfPermission(""String_Node_Str"") != PackageManager.PERMISSION_GRANTED) {
    LogManager.w(TAG,""String_Node_Str"");
    return;
  }
  new ModelSpecificDistanceUpdater(mContext,mRemoteUpdateUrlString,new ModelSpecificDistanceUpdater.CompletionHandler(){
    @Override public void onComplete(    String body,    Exception ex,    int code){
      if (ex != null) {
        LogManager.w(TAG,""String_Node_Str"",ex,mRemoteUpdateUrlString);
      }
 else       if (code != 200) {
        LogManager.w(TAG,""String_Node_Str"" + ""String_Node_Str"",mRemoteUpdateUrlString,code);
      }
 else {
        LogManager.d(TAG,""String_Node_Str"");
        try {
          buildModelMapWithLock(body);
          if (saveJson(body)) {
            loadModelMapFromFile();
            mDistanceCalculator=findCalculatorForModelWithLock(mRequestedModel);
            LogManager.i(TAG,""String_Node_Str"");
          }
        }
 catch (        JSONException e) {
          LogManager.w(e,TAG,""String_Node_Str"");
        }
      }
    }
  }
).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}",0.9931389365351628
162674,"/** 
 * Obtains the best possible <code>DistanceCalculator</code> for the Android device passed as an argument
 */
public ModelSpecificDistanceCalculator(Context context,String remoteUpdateUrlString,AndroidModel model){
  mRequestedModel=model;
  mRemoteUpdateUrlString=remoteUpdateUrlString;
  mContext=context;
  loadModelMap();
  mDistanceCalculator=findCalculatorForModel(model);
}","/** 
 * Obtains the best possible <code>DistanceCalculator</code> for the Android device passed as an argument
 */
public ModelSpecificDistanceCalculator(Context context,String remoteUpdateUrlString,AndroidModel model){
  mRequestedModel=model;
  mRemoteUpdateUrlString=remoteUpdateUrlString;
  mContext=context;
  loadModelMap();
  mDistanceCalculator=findCalculatorForModelWithLock(model);
}",0.9897172236503856
162675,"private boolean loadModelMapFromFile(){
  File file=new File(mContext.getFilesDir(),CONFIG_FILE);
  FileInputStream inputStream=null;
  BufferedReader reader=null;
  StringBuilder sb=new StringBuilder();
  try {
    inputStream=new FileInputStream(file);
    reader=new BufferedReader(new InputStreamReader(inputStream));
    String line;
    while ((line=reader.readLine()) != null) {
      sb.append(line).append(""String_Node_Str"");
    }
  }
 catch (  FileNotFoundException fnfe) {
    return false;
  }
catch (  IOException e) {
    LogManager.e(e,TAG,""String_Node_Str"",file);
    return false;
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      Exception e2) {
      }
    }
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      Exception e2) {
      }
    }
  }
  try {
    buildModelMap(sb.toString());
    return true;
  }
 catch (  JSONException e) {
    LogManager.e(TAG,""String_Node_Str"",e,mRemoteUpdateUrlString,sb.toString());
    return false;
  }
}","private boolean loadModelMapFromFile(){
  File file=new File(mContext.getFilesDir(),CONFIG_FILE);
  FileInputStream inputStream=null;
  BufferedReader reader=null;
  StringBuilder sb=new StringBuilder();
  try {
    inputStream=new FileInputStream(file);
    reader=new BufferedReader(new InputStreamReader(inputStream));
    String line;
    while ((line=reader.readLine()) != null) {
      sb.append(line).append(""String_Node_Str"");
    }
  }
 catch (  FileNotFoundException fnfe) {
    return false;
  }
catch (  IOException e) {
    LogManager.e(e,TAG,""String_Node_Str"",file);
    return false;
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      Exception e2) {
      }
    }
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      Exception e2) {
      }
    }
  }
  try {
    buildModelMapWithLock(sb.toString());
    return true;
  }
 catch (  JSONException e) {
    LogManager.e(TAG,""String_Node_Str"",e,mRemoteUpdateUrlString,sb.toString());
    return false;
  }
}",0.9962085308056872
162676,"private void loadModelMap(){
  boolean mapLoaded=false;
  if (mRemoteUpdateUrlString != null) {
    mapLoaded=loadModelMapFromFile();
    if (!mapLoaded) {
      requestModelMapFromWeb();
    }
  }
  if (!mapLoaded) {
    loadDefaultModelMap();
  }
  mDistanceCalculator=findCalculatorForModel(mRequestedModel);
}","private void loadModelMap(){
  boolean mapLoaded=false;
  if (mRemoteUpdateUrlString != null) {
    mapLoaded=loadModelMapFromFile();
    if (!mapLoaded) {
      requestModelMapFromWeb();
    }
  }
  if (!mapLoaded) {
    loadDefaultModelMap();
  }
  mDistanceCalculator=findCalculatorForModelWithLock(mRequestedModel);
}",0.9873817034700316
162677,"@Override public void onComplete(String body,Exception ex,int code){
  if (ex != null) {
    LogManager.w(TAG,""String_Node_Str"",ex,mRemoteUpdateUrlString);
  }
 else   if (code != 200) {
    LogManager.w(TAG,""String_Node_Str"" + ""String_Node_Str"",mRemoteUpdateUrlString,code);
  }
 else {
    LogManager.d(TAG,""String_Node_Str"");
    try {
      buildModelMap(body);
      if (saveJson(body)) {
        loadModelMapFromFile();
        mDistanceCalculator=findCalculatorForModel(mRequestedModel);
        LogManager.i(TAG,""String_Node_Str"");
      }
    }
 catch (    JSONException e) {
      LogManager.w(e,TAG,""String_Node_Str"");
    }
  }
}","@Override public void onComplete(String body,Exception ex,int code){
  if (ex != null) {
    LogManager.w(TAG,""String_Node_Str"",ex,mRemoteUpdateUrlString);
  }
 else   if (code != 200) {
    LogManager.w(TAG,""String_Node_Str"" + ""String_Node_Str"",mRemoteUpdateUrlString,code);
  }
 else {
    LogManager.d(TAG,""String_Node_Str"");
    try {
      buildModelMapWithLock(body);
      if (saveJson(body)) {
        loadModelMapFromFile();
        mDistanceCalculator=findCalculatorForModelWithLock(mRequestedModel);
        LogManager.i(TAG,""String_Node_Str"");
      }
    }
 catch (    JSONException e) {
      LogManager.w(e,TAG,""String_Node_Str"");
    }
  }
}",0.987673343605547
162678,"@TargetApi(Build.VERSION_CODES.HONEYCOMB) private void requestModelMapFromWeb(){
  if (mContext.checkCallingOrSelfPermission(""String_Node_Str"") != PackageManager.PERMISSION_GRANTED) {
    LogManager.w(TAG,""String_Node_Str"");
    return;
  }
  new ModelSpecificDistanceUpdater(mContext,mRemoteUpdateUrlString,new ModelSpecificDistanceUpdater.CompletionHandler(){
    @Override public void onComplete(    String body,    Exception ex,    int code){
      if (ex != null) {
        LogManager.w(TAG,""String_Node_Str"",ex,mRemoteUpdateUrlString);
      }
 else       if (code != 200) {
        LogManager.w(TAG,""String_Node_Str"" + ""String_Node_Str"",mRemoteUpdateUrlString,code);
      }
 else {
        LogManager.d(TAG,""String_Node_Str"");
        try {
          buildModelMap(body);
          if (saveJson(body)) {
            loadModelMapFromFile();
            mDistanceCalculator=findCalculatorForModel(mRequestedModel);
            LogManager.i(TAG,""String_Node_Str"");
          }
        }
 catch (        JSONException e) {
          LogManager.w(e,TAG,""String_Node_Str"");
        }
      }
    }
  }
).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}","@TargetApi(Build.VERSION_CODES.HONEYCOMB) private void requestModelMapFromWeb(){
  if (mContext.checkCallingOrSelfPermission(""String_Node_Str"") != PackageManager.PERMISSION_GRANTED) {
    LogManager.w(TAG,""String_Node_Str"");
    return;
  }
  new ModelSpecificDistanceUpdater(mContext,mRemoteUpdateUrlString,new ModelSpecificDistanceUpdater.CompletionHandler(){
    @Override public void onComplete(    String body,    Exception ex,    int code){
      if (ex != null) {
        LogManager.w(TAG,""String_Node_Str"",ex,mRemoteUpdateUrlString);
      }
 else       if (code != 200) {
        LogManager.w(TAG,""String_Node_Str"" + ""String_Node_Str"",mRemoteUpdateUrlString,code);
      }
 else {
        LogManager.d(TAG,""String_Node_Str"");
        try {
          buildModelMapWithLock(body);
          if (saveJson(body)) {
            loadModelMapFromFile();
            mDistanceCalculator=findCalculatorForModelWithLock(mRequestedModel);
            LogManager.i(TAG,""String_Node_Str"");
          }
        }
 catch (        JSONException e) {
          LogManager.w(e,TAG,""String_Node_Str"");
        }
      }
    }
  }
).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}",0.9931389365351628
162679,"/** 
 * Obtains the best possible <code>DistanceCalculator</code> for the Android device passed as an argument
 */
public ModelSpecificDistanceCalculator(Context context,String remoteUpdateUrlString,AndroidModel model){
  mRequestedModel=model;
  mRemoteUpdateUrlString=remoteUpdateUrlString;
  mContext=context;
  loadModelMap();
  mDistanceCalculator=findCalculatorForModel(model);
}","/** 
 * Obtains the best possible <code>DistanceCalculator</code> for the Android device passed as an argument
 */
public ModelSpecificDistanceCalculator(Context context,String remoteUpdateUrlString,AndroidModel model){
  mRequestedModel=model;
  mRemoteUpdateUrlString=remoteUpdateUrlString;
  mContext=context;
  loadModelMap();
  mDistanceCalculator=findCalculatorForModelWithLock(model);
}",0.9897172236503856
162680,"private boolean loadModelMapFromFile(){
  File file=new File(mContext.getFilesDir(),CONFIG_FILE);
  FileInputStream inputStream=null;
  BufferedReader reader=null;
  StringBuilder sb=new StringBuilder();
  try {
    inputStream=new FileInputStream(file);
    reader=new BufferedReader(new InputStreamReader(inputStream));
    String line;
    while ((line=reader.readLine()) != null) {
      sb.append(line).append(""String_Node_Str"");
    }
  }
 catch (  FileNotFoundException fnfe) {
    return false;
  }
catch (  IOException e) {
    LogManager.e(e,TAG,""String_Node_Str"",file);
    return false;
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      Exception e2) {
      }
    }
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      Exception e2) {
      }
    }
  }
  try {
    buildModelMap(sb.toString());
    return true;
  }
 catch (  JSONException e) {
    LogManager.e(TAG,""String_Node_Str"",e,mRemoteUpdateUrlString,sb.toString());
    return false;
  }
}","private boolean loadModelMapFromFile(){
  File file=new File(mContext.getFilesDir(),CONFIG_FILE);
  FileInputStream inputStream=null;
  BufferedReader reader=null;
  StringBuilder sb=new StringBuilder();
  try {
    inputStream=new FileInputStream(file);
    reader=new BufferedReader(new InputStreamReader(inputStream));
    String line;
    while ((line=reader.readLine()) != null) {
      sb.append(line).append(""String_Node_Str"");
    }
  }
 catch (  FileNotFoundException fnfe) {
    return false;
  }
catch (  IOException e) {
    LogManager.e(e,TAG,""String_Node_Str"",file);
    return false;
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      Exception e2) {
      }
    }
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      Exception e2) {
      }
    }
  }
  try {
    buildModelMapWithLock(sb.toString());
    return true;
  }
 catch (  JSONException e) {
    LogManager.e(TAG,""String_Node_Str"",e,mRemoteUpdateUrlString,sb.toString());
    return false;
  }
}",0.9962085308056872
162681,"/** 
 * Starts this beacon advertising
 */
public void startAdvertising(){
  if (mBeacon == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  int manufacturerCode=mBeacon.getManufacturer();
  int serviceUuid=mBeacon.getServiceUuid();
  if (mBeaconParser == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  byte[] advertisingBytes=mBeaconParser.getBeaconAdvertisementData(mBeacon);
  String byteString=""String_Node_Str"";
  for (int i=0; i < advertisingBytes.length; i++) {
    byteString+=String.format(""String_Node_Str"",advertisingBytes[i]);
    byteString+=""String_Node_Str"";
  }
  LogManager.d(TAG,""String_Node_Str"" + ""String_Node_Str"",mBeacon.getId1(),mBeacon.getIdentifiers().size() > 1 ? mBeacon.getId2() : ""String_Node_Str"",mBeacon.getIdentifiers().size() > 2 ? mBeacon.getId3() : ""String_Node_Str"",byteString,advertisingBytes.length);
  try {
    AdvertiseData.Builder dataBuilder=new AdvertiseData.Builder();
    if (serviceUuid > 0) {
      byte[] serviceUuidBytes=new byte[]{(byte)((serviceUuid >> 8) & 0xff),(byte)(serviceUuid & 0xff)};
      ParcelUuid parcelUuid=parseUuidFrom(serviceUuidBytes);
      dataBuilder.addServiceData(parcelUuid,advertisingBytes);
    }
 else {
      dataBuilder.addManufacturerData(manufacturerCode,advertisingBytes);
    }
    AdvertiseSettings.Builder settingsBuilder=new AdvertiseSettings.Builder();
    settingsBuilder.setAdvertiseMode(mAdvertiseMode);
    settingsBuilder.setTxPowerLevel(mAdvertiseTxPowerLevel);
    settingsBuilder.setConnectable(false);
    mBluetoothLeAdvertiser.startAdvertising(settingsBuilder.build(),dataBuilder.build(),getAdvertiseCallback());
    LogManager.d(TAG,""String_Node_Str"",getAdvertiseCallback());
  }
 catch (  Exception e) {
    LogManager.e(e,TAG,""String_Node_Str"");
  }
}","/** 
 * Starts this beacon advertising
 */
public void startAdvertising(){
  if (mBeacon == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  int manufacturerCode=mBeacon.getManufacturer();
  int serviceUuid=mBeaconParser.getServiceUuid().intValue();
  if (mBeaconParser == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  byte[] advertisingBytes=mBeaconParser.getBeaconAdvertisementData(mBeacon);
  String byteString=""String_Node_Str"";
  for (int i=0; i < advertisingBytes.length; i++) {
    byteString+=String.format(""String_Node_Str"",advertisingBytes[i]);
    byteString+=""String_Node_Str"";
  }
  LogManager.d(TAG,""String_Node_Str"" + ""String_Node_Str"",mBeacon.getId1(),mBeacon.getIdentifiers().size() > 1 ? mBeacon.getId2() : ""String_Node_Str"",mBeacon.getIdentifiers().size() > 2 ? mBeacon.getId3() : ""String_Node_Str"",byteString,advertisingBytes.length);
  try {
    AdvertiseData.Builder dataBuilder=new AdvertiseData.Builder();
    if (serviceUuid > 0) {
      byte[] serviceUuidBytes=new byte[]{(byte)(serviceUuid & 0xff),(byte)((serviceUuid >> 8) & 0xff)};
      ParcelUuid parcelUuid=parseUuidFrom(serviceUuidBytes);
      dataBuilder.addServiceData(parcelUuid,advertisingBytes);
    }
 else {
      dataBuilder.addManufacturerData(manufacturerCode,advertisingBytes);
    }
    AdvertiseSettings.Builder settingsBuilder=new AdvertiseSettings.Builder();
    settingsBuilder.setAdvertiseMode(mAdvertiseMode);
    settingsBuilder.setTxPowerLevel(mAdvertiseTxPowerLevel);
    settingsBuilder.setConnectable(false);
    mBluetoothLeAdvertiser.startAdvertising(settingsBuilder.build(),dataBuilder.build(),getAdvertiseCallback());
    LogManager.d(TAG,""String_Node_Str"",getAdvertiseCallback());
  }
 catch (  Exception e) {
    LogManager.e(e,TAG,""String_Node_Str"");
  }
}",0.9914103629814351
162682,"private static Identifier parseHex(String identifierString){
  String str=identifierString.length() % 2 == 0 ? ""String_Node_Str"" : ""String_Node_Str"";
  str+=identifierString.toUpperCase();
  byte[] result=new byte[str.length() / 2];
  for (int i=0; i < result.length; i++) {
    result[i]=(byte)(Integer.parseInt(str.substring(i * 2,i * 2 + 2),16) & 0xFF);
  }
  return new Identifier(result);
}","private static Identifier parseHex(String identifierString,int desiredByteLength){
  String str=identifierString.length() % 2 == 0 ? ""String_Node_Str"" : ""String_Node_Str"";
  str+=identifierString.toUpperCase();
  if (desiredByteLength > 0 && desiredByteLength < str.length() / 2) {
    str=str.substring(str.length() - desiredByteLength * 2);
  }
  if (desiredByteLength > 0 && desiredByteLength > str.length() / 2) {
    int extraCharsToAdd=desiredByteLength * 2 - str.length();
    StringBuilder sb=new StringBuilder();
    while (sb.length() < extraCharsToAdd) {
      sb.append(""String_Node_Str"");
    }
    str=sb.toString() + str;
  }
  byte[] result=new byte[str.length() / 2];
  for (int i=0; i < result.length; i++) {
    result[i]=(byte)(Integer.parseInt(str.substring(i * 2,i * 2 + 2),16) & 0xFF);
  }
  return new Identifier(result);
}",0.6360708534621579
162683,"/** 
 * Takes the passed string and tries to figure out what format it is in. Then turns the string into plain bytes and constructs an Identifier. Known bug: This method happily parses UUIDs without dashes (normally invalid). Although the bug is left unfixed for backward compatibility, please check your UUIDs or even better, use  {@link #fromUuid(java.util.UUID)} directly, which is safe.Allowed formats: <ul> <li>UUID: 2F234454-CF6D-4A0F-ADF2-F4911BA9FFA6 (16 bytes)</li> <li>Hexadecimal: 0x000000000003 (variable length)</li> <li>Decimal: 1337 (2 bytes)</li> </ul>
 * @param stringValue string to parse
 * @return             Identifier representing the specified value
 * @throws IllegalArgumentException if the passed string cannot be parsed
 * @throws NullPointerException if the passed string is <code>null</code>
 * @see                <a href=""https://www.ietf.org/rfc/rfc4122.txt"">RFC 4122 on UUIDs</a>
 */
public static Identifier parse(String stringValue){
  if (stringValue == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (HEX_PATTERN.matcher(stringValue).matches()) {
    return parseHex(stringValue.substring(2));
  }
  if (UUID_PATTERN.matcher(stringValue).matches()) {
    return parseHex(stringValue.replace(""String_Node_Str"",""String_Node_Str""));
  }
  if (DECIMAL_PATTERN.matcher(stringValue).matches()) {
    int value=-1;
    try {
      value=Integer.valueOf(stringValue);
    }
 catch (    Throwable t) {
      throw new IllegalArgumentException(""String_Node_Str"",t);
    }
    return fromInt(value);
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","/** 
 * Variant of the parse method that allows specifying the byte length of the identifier.
 * @see #parse(String)
 * @param stringValue
 * @param desiredByteLength
 * @return
 */
public static Identifier parse(String stringValue,int desiredByteLength){
  if (stringValue == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (HEX_PATTERN.matcher(stringValue).matches()) {
    return parseHex(stringValue.substring(2),desiredByteLength);
  }
  if (UUID_PATTERN.matcher(stringValue).matches()) {
    return parseHex(stringValue.replace(""String_Node_Str"",""String_Node_Str""),desiredByteLength);
  }
  if (DECIMAL_PATTERN.matcher(stringValue).matches()) {
    int value=-1;
    try {
      value=Integer.valueOf(stringValue);
    }
 catch (    Throwable t) {
      throw new IllegalArgumentException(""String_Node_Str"",t);
    }
    if (desiredByteLength <= 0 || desiredByteLength == 2) {
      return fromInt(value);
    }
 else {
      return fromLong(value,desiredByteLength);
    }
  }
  if (HEX_PATTERN_NO_PREFIX.matcher(stringValue).matches()) {
    return parseHex(stringValue,desiredByteLength);
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}",0.5196568977841315
162684,"/** 
 * Converts identifier to a byte array
 * @param bigEndian true if bytes are MSB first
 * @return a new byte array with a copy of the value
 */
public byte[] toByteArrayOfSpecifiedEndianness(boolean bigEndian){
  byte[] copy=Arrays.copyOf(mValue,mValue.length);
  if (!bigEndian) {
    reverseArray(copy);
  }
  return copy;
}","/** 
 * Converts identifier to a byte array
 * @param bigEndian true if bytes are MSB first
 * @return a new byte array with a copy of the value
 */
@TargetApi(Build.VERSION_CODES.GINGERBREAD) public byte[] toByteArrayOfSpecifiedEndianness(boolean bigEndian){
  byte[] copy=Arrays.copyOf(mValue,mValue.length);
  if (!bigEndian) {
    reverseArray(copy);
  }
  return copy;
}",0.9376770538243626
162685,"/** 
 * Creates an Identifier from the specified byte array.
 * @param bytes array to copy from
 * @param start the start index, inclusive
 * @param end the end index, exclusive
 * @param littleEndian whether the bytes are ordered in little endian
 * @return a new Identifier
 * @throws java.lang.NullPointerException <code>bytes</code> must not be <code>null</code>
 * @throws java.lang.ArrayIndexOutOfBoundsException start or end are outside the bounds of the array
 * @throws java.lang.IllegalArgumentException start is larger than end
 */
public static Identifier fromBytes(byte[] bytes,int start,int end,boolean littleEndian){
  if (bytes == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (start < 0 || start > bytes.length) {
    throw new ArrayIndexOutOfBoundsException(""String_Node_Str"");
  }
  if (end > bytes.length) {
    throw new ArrayIndexOutOfBoundsException(""String_Node_Str"");
  }
  if (start > end) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  byte[] byteRange=Arrays.copyOfRange(bytes,start,end);
  if (littleEndian) {
    reverseArray(byteRange);
  }
  return new Identifier(byteRange);
}","/** 
 * Creates an Identifier from the specified byte array.
 * @param bytes array to copy from
 * @param start the start index, inclusive
 * @param end the end index, exclusive
 * @param littleEndian whether the bytes are ordered in little endian
 * @return a new Identifier
 * @throws java.lang.NullPointerException <code>bytes</code> must not be <code>null</code>
 * @throws java.lang.ArrayIndexOutOfBoundsException start or end are outside the bounds of the array
 * @throws java.lang.IllegalArgumentException start is larger than end
 */
@TargetApi(Build.VERSION_CODES.GINGERBREAD) public static Identifier fromBytes(byte[] bytes,int start,int end,boolean littleEndian){
  if (bytes == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (start < 0 || start > bytes.length) {
    throw new ArrayIndexOutOfBoundsException(""String_Node_Str"");
  }
  if (end > bytes.length) {
    throw new ArrayIndexOutOfBoundsException(""String_Node_Str"");
  }
  if (start > end) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  byte[] byteRange=Arrays.copyOfRange(bytes,start,end);
  if (littleEndian) {
    reverseArray(byteRange);
  }
  return new Identifier(byteRange);
}",0.9813084112149532
162686,"/** 
 * methods for clients
 */
public void startRangingBeaconsInRegion(Region region,Callback callback){
synchronized (rangedRegionState) {
    if (rangedRegionState.containsKey(region)) {
      LogManager.i(TAG,""String_Node_Str"");
      rangedRegionState.remove(region);
    }
    rangedRegionState.put(region,new RangeState(callback));
    LogManager.d(TAG,""String_Node_Str"",rangedRegionState.size());
  }
  if (!scanningEnabled) {
    mCycledScanner.start();
  }
}","/** 
 * methods for clients
 */
public void startRangingBeaconsInRegion(Region region,Callback callback){
synchronized (rangedRegionState) {
    if (rangedRegionState.containsKey(region)) {
      LogManager.i(TAG,""String_Node_Str"");
      rangedRegionState.remove(region);
    }
    rangedRegionState.put(region,new RangeState(callback));
    LogManager.d(TAG,""String_Node_Str"",rangedRegionState.size());
  }
  mCycledScanner.start();
}",0.9646017699115044
162687,"public void stopRangingBeaconsInRegion(Region region){
  int rangedRegionCount;
synchronized (rangedRegionState) {
    rangedRegionState.remove(region);
    rangedRegionCount=rangedRegionState.size();
    LogManager.d(TAG,""String_Node_Str"",rangedRegionState.size());
  }
  if (scanningEnabled && rangedRegionCount == 0 && monitoredRegionState.size() == 0) {
    mCycledScanner.stop();
  }
}","public void stopRangingBeaconsInRegion(Region region){
  int rangedRegionCount;
synchronized (rangedRegionState) {
    rangedRegionState.remove(region);
    rangedRegionCount=rangedRegionState.size();
    LogManager.d(TAG,""String_Node_Str"",rangedRegionState.size());
  }
  if (rangedRegionCount == 0 && monitoredRegionState.size() == 0) {
    mCycledScanner.stop();
  }
}",0.9750328515111696
162688,"public void startMonitoringBeaconsInRegion(Region region,Callback callback){
  LogManager.d(TAG,""String_Node_Str"");
synchronized (monitoredRegionState) {
    if (monitoredRegionState.containsKey(region)) {
      LogManager.i(TAG,""String_Node_Str"");
      monitoredRegionState.remove(region);
    }
    monitoredRegionState.put(region,new MonitorState(callback));
  }
  LogManager.d(TAG,""String_Node_Str"",monitoredRegionState.size());
  if (!scanningEnabled) {
    mCycledScanner.start();
  }
}","public void startMonitoringBeaconsInRegion(Region region,Callback callback){
  LogManager.d(TAG,""String_Node_Str"");
synchronized (monitoredRegionState) {
    if (monitoredRegionState.containsKey(region)) {
      LogManager.i(TAG,""String_Node_Str"");
      monitoredRegionState.remove(region);
    }
    monitoredRegionState.put(region,new MonitorState(callback));
  }
  LogManager.d(TAG,""String_Node_Str"",monitoredRegionState.size());
  mCycledScanner.start();
}",0.9664570230607966
162689,"public void stopMonitoringBeaconsInRegion(Region region){
  int monitoredRegionCount;
  LogManager.d(TAG,""String_Node_Str"");
synchronized (monitoredRegionState) {
    monitoredRegionState.remove(region);
    monitoredRegionCount=monitoredRegionState.size();
  }
  LogManager.d(TAG,""String_Node_Str"",monitoredRegionState.size());
  if (scanningEnabled && monitoredRegionCount == 0 && monitoredRegionState.size() == 0) {
    mCycledScanner.stop();
  }
}","public void stopMonitoringBeaconsInRegion(Region region){
  int monitoredRegionCount;
  LogManager.d(TAG,""String_Node_Str"");
synchronized (monitoredRegionState) {
    monitoredRegionState.remove(region);
    monitoredRegionCount=monitoredRegionState.size();
  }
  LogManager.d(TAG,""String_Node_Str"",monitoredRegionState.size());
  if (monitoredRegionCount == 0 && rangedRegionState.size() == 0) {
    mCycledScanner.stop();
  }
}",0.9090909090909092
162690,"private void finishScanCycle(){
  LogManager.d(TAG,""String_Node_Str"");
  mCycledLeScanCallback.onCycleEnd();
  if (mScanning) {
    if (getBluetoothAdapter() != null) {
      if (getBluetoothAdapter().isEnabled()) {
        try {
          LogManager.d(TAG,""String_Node_Str"");
          finishScan();
        }
 catch (        Exception e) {
          LogManager.w(e,TAG,""String_Node_Str"");
        }
        mLastScanCycleEndTime=new Date().getTime();
      }
 else {
        LogManager.d(TAG,""String_Node_Str"");
      }
    }
    mNextScanCycleStartTime=getNextScanStartTime();
    if (mScanningEnabled) {
      scanLeDevice(true);
    }
 else {
      LogManager.d(TAG,""String_Node_Str"");
      mScanCyclerStarted=false;
      cancelWakeUpAlarm();
    }
  }
}","private void finishScanCycle(){
  LogManager.d(TAG,""String_Node_Str"");
  mCycledLeScanCallback.onCycleEnd();
  if (mScanning) {
    if (getBluetoothAdapter() != null) {
      if (getBluetoothAdapter().isEnabled()) {
        try {
          LogManager.d(TAG,""String_Node_Str"");
          finishScan();
        }
 catch (        Exception e) {
          LogManager.w(e,TAG,""String_Node_Str"");
        }
        mLastScanCycleEndTime=new Date().getTime();
      }
 else {
        LogManager.d(TAG,""String_Node_Str"");
      }
    }
    mNextScanCycleStartTime=getNextScanStartTime();
    if (mScanningEnabled) {
      scanLeDevice(true);
    }
  }
  if (!mScanningEnabled) {
    LogManager.d(TAG,""String_Node_Str"");
    mScanCyclerStarted=false;
    cancelWakeUpAlarm();
  }
}",0.964122635355512
162691,"protected boolean deferScanIfNeeded(){
  long millisecondsUntilStart=mNextScanCycleStartTime - System.currentTimeMillis();
  if (millisecondsUntilStart > 0) {
    if (true) {
      long secsSinceLastDetection=System.currentTimeMillis() - DetectionTracker.getInstance().getLastDetectionTime();
      if (mScanDeferredBefore == false) {
        if (secsSinceLastDetection > BACKGROUND_L_SCAN_DETECTION_PERIOD_MILLIS) {
          mBackgroundLScanStartTime=System.currentTimeMillis();
          mBackgroundLScanFirstDetectionTime=0l;
          LogManager.d(TAG,""String_Node_Str"");
          ScanSettings settings=(new ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_POWER)).build();
          try {
            if (getScanner() != null) {
              getScanner().startScan(new ScanFilterUtils().createScanFiltersForBeaconParsers(mBeaconManager.getBeaconParsers()),settings,getNewLeScanCallback());
            }
          }
 catch (          IllegalStateException e) {
            LogManager.w(TAG,""String_Node_Str"");
          }
        }
 else {
          LogManager.d(TAG,""String_Node_Str"" + ""String_Node_Str"",secsSinceLastDetection);
        }
      }
      if (mBackgroundLScanStartTime > 0l) {
        if (DetectionTracker.getInstance().getLastDetectionTime() > mBackgroundLScanStartTime) {
          if (mBackgroundLScanFirstDetectionTime == 0l) {
            mBackgroundLScanFirstDetectionTime=DetectionTracker.getInstance().getLastDetectionTime();
          }
          if (System.currentTimeMillis() - mBackgroundLScanFirstDetectionTime >= BACKGROUND_L_SCAN_DETECTION_PERIOD_MILLIS) {
            LogManager.d(TAG,""String_Node_Str"");
            try {
              if (getScanner() != null) {
                getScanner().stopScan((android.bluetooth.le.ScanCallback)getNewLeScanCallback());
              }
            }
 catch (            IllegalStateException e) {
              LogManager.w(TAG,""String_Node_Str"");
            }
            mBackgroundLScanStartTime=0l;
          }
 else {
            LogManager.d(TAG,""String_Node_Str"");
            mCycledLeScanCallback.onCycleEnd();
          }
        }
      }
    }
    LogManager.d(TAG,""String_Node_Str"",millisecondsUntilStart);
    if (mScanDeferredBefore == false && mBackgroundFlag) {
      setWakeUpAlarm();
    }
    mHandler.postDelayed(new Runnable(){
      @Override public void run(){
        scanLeDevice(true);
      }
    }
,millisecondsUntilStart > 1000 ? 1000 : millisecondsUntilStart);
    mScanDeferredBefore=true;
    return true;
  }
 else {
    if (mBackgroundLScanStartTime > 0l) {
      try {
        if (getScanner() != null) {
          getScanner().stopScan((android.bluetooth.le.ScanCallback)getNewLeScanCallback());
        }
      }
 catch (      IllegalStateException e) {
        LogManager.w(TAG,""String_Node_Str"");
      }
      if (getScanner() != null) {
        getScanner().stopScan(getNewLeScanCallback());
      }
      mBackgroundLScanStartTime=0;
    }
    mScanDeferredBefore=false;
  }
  return false;
}","protected boolean deferScanIfNeeded(){
  long millisecondsUntilStart=mNextScanCycleStartTime - System.currentTimeMillis();
  if (millisecondsUntilStart > 0) {
    if (true) {
      long secsSinceLastDetection=System.currentTimeMillis() - DetectionTracker.getInstance().getLastDetectionTime();
      if (mScanDeferredBefore == false) {
        if (secsSinceLastDetection > BACKGROUND_L_SCAN_DETECTION_PERIOD_MILLIS) {
          mBackgroundLScanStartTime=System.currentTimeMillis();
          mBackgroundLScanFirstDetectionTime=0l;
          LogManager.d(TAG,""String_Node_Str"");
          ScanSettings settings=(new ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_POWER)).build();
          try {
            if (getScanner() != null) {
              getScanner().startScan(new ScanFilterUtils().createScanFiltersForBeaconParsers(mBeaconManager.getBeaconParsers()),settings,getNewLeScanCallback());
            }
          }
 catch (          IllegalStateException e) {
            LogManager.w(TAG,""String_Node_Str"");
          }
        }
 else {
          LogManager.d(TAG,""String_Node_Str"" + ""String_Node_Str"",secsSinceLastDetection);
        }
      }
      if (mBackgroundLScanStartTime > 0l) {
        if (DetectionTracker.getInstance().getLastDetectionTime() > mBackgroundLScanStartTime) {
          if (mBackgroundLScanFirstDetectionTime == 0l) {
            mBackgroundLScanFirstDetectionTime=DetectionTracker.getInstance().getLastDetectionTime();
          }
          if (System.currentTimeMillis() - mBackgroundLScanFirstDetectionTime >= BACKGROUND_L_SCAN_DETECTION_PERIOD_MILLIS) {
            LogManager.d(TAG,""String_Node_Str"");
            try {
              if (getScanner() != null) {
                getScanner().stopScan((android.bluetooth.le.ScanCallback)getNewLeScanCallback());
              }
            }
 catch (            IllegalStateException e) {
              LogManager.w(TAG,""String_Node_Str"");
            }
            mBackgroundLScanStartTime=0l;
          }
 else {
            LogManager.d(TAG,""String_Node_Str"");
            mCycledLeScanCallback.onCycleEnd();
          }
        }
      }
    }
    LogManager.d(TAG,""String_Node_Str"",millisecondsUntilStart);
    if (mScanDeferredBefore == false && mBackgroundFlag) {
      setWakeUpAlarm();
    }
    mHandler.postDelayed(new Runnable(){
      @Override public void run(){
        scanLeDevice(true);
      }
    }
,millisecondsUntilStart > 1000 ? 1000 : millisecondsUntilStart);
    mScanDeferredBefore=true;
    return true;
  }
 else {
    if (mBackgroundLScanStartTime > 0l) {
      try {
        if (getScanner() != null) {
          getScanner().stopScan((android.bluetooth.le.ScanCallback)getNewLeScanCallback());
        }
      }
 catch (      IllegalStateException e) {
        LogManager.w(TAG,""String_Node_Str"");
      }
      mBackgroundLScanStartTime=0;
    }
    mScanDeferredBefore=false;
  }
  return false;
}",0.9837384744341996
162692,"/** 
 * Checks to see if an Beacon object is included in the matching criteria of this Region
 * @param beacon the beacon to check to see if it is in the Region
 * @return true if is covered
 */
public boolean matchesBeacon(Beacon beacon){
  if (this.mIdentifiers.size() != beacon.mIdentifiers.size()) {
    return false;
  }
  for (int i=0; i < this.mIdentifiers.size(); i++) {
    if (mIdentifiers.get(i) != null && !mIdentifiers.get(i).equals(beacon.mIdentifiers.get(i))) {
      return false;
    }
  }
  return true;
}","/** 
 * Checks to see if an Beacon object is included in the matching criteria of this Region
 * @param beacon the beacon to check to see if it is in the Region
 * @return true if is covered
 */
public boolean matchesBeacon(Beacon beacon){
  for (int i=0; i < this.mIdentifiers.size(); i++) {
    if (beacon.getIdentifiers().size() <= i && mIdentifiers.get(i) == null) {
    }
 else {
      if (mIdentifiers.get(i) != null && !mIdentifiers.get(i).equals(beacon.mIdentifiers.get(i))) {
        return false;
      }
    }
  }
  return true;
}",0.8214285714285714
162693,"private List<Region> matchingRegions(Beacon beacon,Collection<Region> regions){
  List<Region> matched=new ArrayList<Region>();
  Iterator<Region> regionIterator=regions.iterator();
  while (regionIterator.hasNext()) {
    Region region=regionIterator.next();
    if (region.matchesBeacon(beacon)) {
      matched.add(region);
    }
 else {
      BeaconManager.logDebug(TAG,""String_Node_Str"" + region);
    }
  }
  return matched;
}","private List<Region> matchingRegions(Beacon beacon,Collection<Region> regions){
  List<Region> matched=new ArrayList<Region>();
  Iterator<Region> regionIterator=regions.iterator();
  while (regionIterator.hasNext()) {
    Region region=regionIterator.next();
    if (region.matchesBeacon(beacon)) {
      matched.add(region);
    }
 else {
      BeaconManager.logDebug(TAG,""String_Node_Str"" + region + ""String_Node_Str""+ beacon);
    }
  }
  return matched;
}",0.968609865470852
162694,"/** 
 * Tells the cycler the scan rate and whether it is in operating in background mode. Background mode flag  is used only with the Android 5.0 scanning implementations to switch between LOW_POWER_MODE vs. LOW_LATENCY_MODE
 * @param backgroundFlag
 */
public void setScanPeriods(long scanPeriod,long betweenScanPeriod,boolean backgroundFlag){
  Log.d(TAG,""String_Node_Str"" + scanPeriod + ""String_Node_Str""+ betweenScanPeriod+ ""String_Node_Str"");
  if (mBackgroundFlag != backgroundFlag) {
    mRestartNeeded=true;
  }
  mBackgroundFlag=backgroundFlag;
  mScanPeriod=scanPeriod;
  mBetweenScanPeriod=betweenScanPeriod;
  if (mBackgroundFlag == true) {
    BeaconManager.logDebug(TAG,""String_Node_Str"");
    setWakeUpAlarm();
  }
 else {
    BeaconManager.logDebug(TAG,""String_Node_Str"");
    cancelWakeUpAlarm();
  }
  long now=new Date().getTime();
  if (mNextScanCycleStartTime > now) {
    long proposedNextScanStartTime=(mLastScanCycleEndTime + betweenScanPeriod);
    if (proposedNextScanStartTime < mNextScanCycleStartTime) {
      mNextScanCycleStartTime=proposedNextScanStartTime;
      Log.i(TAG,""String_Node_Str"" + new Date(mNextScanCycleStartTime));
    }
  }
  if (mScanCycleStopTime > now) {
    long proposedScanStopTime=(mLastScanCycleStartTime + scanPeriod);
    if (proposedScanStopTime < mScanCycleStopTime) {
      mScanCycleStopTime=proposedScanStopTime;
      Log.i(TAG,""String_Node_Str"" + new Date(mScanCycleStopTime));
    }
  }
}","/** 
 * Tells the cycler the scan rate and whether it is in operating in background mode. Background mode flag  is used only with the Android 5.0 scanning implementations to switch between LOW_POWER_MODE vs. LOW_LATENCY_MODE
 * @param backgroundFlag
 */
public void setScanPeriods(long scanPeriod,long betweenScanPeriod,boolean backgroundFlag){
  BeaconManager.logDebug(TAG,""String_Node_Str"" + scanPeriod + ""String_Node_Str""+ betweenScanPeriod+ ""String_Node_Str"");
  if (mBackgroundFlag != backgroundFlag) {
    mRestartNeeded=true;
  }
  mBackgroundFlag=backgroundFlag;
  mScanPeriod=scanPeriod;
  mBetweenScanPeriod=betweenScanPeriod;
  if (mBackgroundFlag == true) {
    BeaconManager.logDebug(TAG,""String_Node_Str"");
    setWakeUpAlarm();
  }
 else {
    BeaconManager.logDebug(TAG,""String_Node_Str"");
    cancelWakeUpAlarm();
  }
  long now=new Date().getTime();
  if (mNextScanCycleStartTime > now) {
    long proposedNextScanStartTime=(mLastScanCycleEndTime + betweenScanPeriod);
    if (proposedNextScanStartTime < mNextScanCycleStartTime) {
      mNextScanCycleStartTime=proposedNextScanStartTime;
      Log.i(TAG,""String_Node_Str"" + new Date(mNextScanCycleStartTime));
    }
  }
  if (mScanCycleStopTime > now) {
    long proposedScanStopTime=(mLastScanCycleStartTime + scanPeriod);
    if (proposedScanStopTime < mScanCycleStopTime) {
      mScanCycleStopTime=proposedScanStopTime;
      Log.i(TAG,""String_Node_Str"" + new Date(mScanCycleStopTime));
    }
  }
}",0.9914529914529916
162695,"@TargetApi(3) private void cancelWakeUpAlarm(){
  Log.d(TAG,""String_Node_Str"" + mWakeUpOperation);
  if (mWakeUpOperation != null) {
    AlarmManager alarmManager=(AlarmManager)mContext.getSystemService(Context.ALARM_SERVICE);
    alarmManager.cancel(mWakeUpOperation);
  }
}","@TargetApi(3) private void cancelWakeUpAlarm(){
  BeaconManager.logDebug(TAG,""String_Node_Str"" + mWakeUpOperation);
  if (mWakeUpOperation != null) {
    AlarmManager alarmManager=(AlarmManager)mContext.getSystemService(Context.ALARM_SERVICE);
    alarmManager.cancel(mWakeUpOperation);
  }
}",0.9523809523809524
162696,"@TargetApi(21) private void finishScanCycle(){
  BeaconManager.logDebug(TAG,""String_Node_Str"");
  mCycledLeScanCallback.onCycleEnd();
  if (mScanning == true) {
    if (getBluetoothAdapter() != null) {
      if (getBluetoothAdapter().isEnabled()) {
        try {
          Log.d(TAG,""String_Node_Str"");
          if (mUseAndroidLScanner) {
            if (mBetweenScanPeriod == 0) {
              BeaconManager.logDebug(TAG,""String_Node_Str"");
            }
 else {
              mScanner.stopScan((android.bluetooth.le.ScanCallback)getNewLeScanCallback());
              mScanningPaused=true;
            }
          }
 else {
            getBluetoothAdapter().stopLeScan((BluetoothAdapter.LeScanCallback)getLeScanCallback());
            mScanningPaused=true;
          }
        }
 catch (        Exception e) {
          Log.w(""String_Node_Str"",e);
        }
        mLastScanCycleEndTime=new Date().getTime();
      }
 else {
        Log.w(TAG,""String_Node_Str"");
      }
    }
    mNextScanCycleStartTime=(new Date().getTime() + mBetweenScanPeriod);
    if (mScanningEnabled) {
      scanLeDevice(true);
    }
 else {
      BeaconManager.logDebug(TAG,""String_Node_Str"");
      mScanCyclerStarted=false;
      cancelWakeUpAlarm();
    }
  }
}","@TargetApi(21) private void finishScanCycle(){
  BeaconManager.logDebug(TAG,""String_Node_Str"");
  mCycledLeScanCallback.onCycleEnd();
  if (mScanning == true) {
    if (getBluetoothAdapter() != null) {
      if (getBluetoothAdapter().isEnabled()) {
        try {
          BeaconManager.logDebug(TAG,""String_Node_Str"");
          if (mUseAndroidLScanner) {
            if (mBetweenScanPeriod == 0) {
              BeaconManager.logDebug(TAG,""String_Node_Str"");
            }
 else {
              mScanner.stopScan((android.bluetooth.le.ScanCallback)getNewLeScanCallback());
              mScanningPaused=true;
            }
          }
 else {
            getBluetoothAdapter().stopLeScan((BluetoothAdapter.LeScanCallback)getLeScanCallback());
            mScanningPaused=true;
          }
        }
 catch (        Exception e) {
          Log.w(""String_Node_Str"",e);
        }
        mLastScanCycleEndTime=new Date().getTime();
      }
 else {
        Log.w(TAG,""String_Node_Str"");
      }
    }
    mNextScanCycleStartTime=(new Date().getTime() + mBetweenScanPeriod);
    if (mScanningEnabled) {
      scanLeDevice(true);
    }
 else {
      BeaconManager.logDebug(TAG,""String_Node_Str"");
      mScanCyclerStarted=false;
      cancelWakeUpAlarm();
    }
  }
}",0.989247311827957
162697,"@SuppressLint(""String_Node_Str"") public void stop(){
  mScanningEnabled=false;
  if (mScanCyclerStarted) {
    scanLeDevice(false);
  }
  if (mBluetoothAdapter != null) {
    try {
      if (mUseAndroidLScanner) {
        mScanner.stopScan((android.bluetooth.le.ScanCallback)getNewLeScanCallback());
      }
 else {
        getBluetoothAdapter().stopLeScan((BluetoothAdapter.LeScanCallback)getLeScanCallback());
      }
    }
 catch (    Exception e) {
      Log.w(""String_Node_Str"",e);
    }
    mLastScanCycleEndTime=new Date().getTime();
  }
}","@SuppressLint(""String_Node_Str"") public void stop(){
  BeaconManager.logDebug(TAG,""String_Node_Str"");
  mScanningEnabled=false;
  if (mScanCyclerStarted) {
    scanLeDevice(false);
  }
  if (mBluetoothAdapter != null) {
    try {
      if (mUseAndroidLScanner) {
        mScanner.stopScan((android.bluetooth.le.ScanCallback)getNewLeScanCallback());
      }
 else {
        getBluetoothAdapter().stopLeScan((BluetoothAdapter.LeScanCallback)getLeScanCallback());
      }
    }
 catch (    Exception e) {
      Log.w(""String_Node_Str"",e);
    }
    mLastScanCycleEndTime=new Date().getTime();
  }
}",0.9570552147239264
162698,"@SuppressLint(""String_Node_Str"") private void scanLeDevice(final Boolean enable){
  mScanCyclerStarted=true;
  if (android.os.Build.VERSION.SDK_INT < 18) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  if (getBluetoothAdapter() == null) {
    Log.e(TAG,""String_Node_Str"");
  }
  if (enable) {
    if (deferScanIfNeeded()) {
      return;
    }
    Log.d(TAG,""String_Node_Str"");
    if (mScanning == false || mScanningPaused || mRestartNeeded) {
      mScanning=true;
      mScanningPaused=false;
      try {
        if (getBluetoothAdapter() != null) {
          if (getBluetoothAdapter().isEnabled()) {
            if (mBluetoothCrashResolver != null && mBluetoothCrashResolver.isRecoveryInProgress()) {
              Log.w(TAG,""String_Node_Str"");
            }
 else {
              if (mScanningEnabled) {
                try {
                  if (mUseAndroidLScanner) {
                    if (mRestartNeeded) {
                      mRestartNeeded=false;
                      Log.d(TAG,""String_Node_Str"");
                    }
 else {
                      Log.d(TAG,""String_Node_Str"");
                    }
                    List<ScanFilter> filters=new ArrayList<ScanFilter>();
                    if (mScanner == null) {
                      Log.d(TAG,""String_Node_Str"");
                      mScanner=getBluetoothAdapter().getBluetoothLeScanner();
                    }
                    ScanSettings settings;
                    if (mBackgroundFlag) {
                      Log.d(TAG,""String_Node_Str"");
                      settings=(new ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_POWER)).build();
                    }
 else {
                      Log.d(TAG,""String_Node_Str"");
                      settings=(new ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY)).build();
                    }
                    mScanner.startScan(filters,settings,(android.bluetooth.le.ScanCallback)getNewLeScanCallback());
                  }
 else {
                    Log.d(TAG,""String_Node_Str"");
                    mRestartNeeded=false;
                    getBluetoothAdapter().startLeScan((BluetoothAdapter.LeScanCallback)getLeScanCallback());
                  }
                }
 catch (                Exception e) {
                  Log.w(""String_Node_Str"",e);
                }
              }
 else {
                BeaconManager.logDebug(TAG,""String_Node_Str"");
              }
            }
            mLastScanCycleStartTime=new Date().getTime();
          }
 else {
            Log.w(TAG,""String_Node_Str"");
          }
        }
      }
 catch (      Exception e) {
        Log.e(""String_Node_Str"",""String_Node_Str"",e);
      }
    }
 else {
      BeaconManager.logDebug(TAG,""String_Node_Str"");
    }
    mScanCycleStopTime=(new Date().getTime() + mScanPeriod);
    scheduleScanCycleStop();
    BeaconManager.logDebug(TAG,""String_Node_Str"");
  }
 else {
    BeaconManager.logDebug(TAG,""String_Node_Str"");
    mScanning=false;
    if (getBluetoothAdapter() != null) {
      try {
        getBluetoothAdapter().stopLeScan((BluetoothAdapter.LeScanCallback)getLeScanCallback());
      }
 catch (      Exception e) {
        Log.w(""String_Node_Str"",e);
      }
      mLastScanCycleEndTime=new Date().getTime();
    }
  }
}","@SuppressLint(""String_Node_Str"") private void scanLeDevice(final Boolean enable){
  mScanCyclerStarted=true;
  if (android.os.Build.VERSION.SDK_INT < 18) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  if (getBluetoothAdapter() == null) {
    Log.e(TAG,""String_Node_Str"");
  }
  if (enable) {
    if (deferScanIfNeeded()) {
      return;
    }
    BeaconManager.logDebug(TAG,""String_Node_Str"");
    if (mScanning == false || mScanningPaused || mRestartNeeded) {
      mScanning=true;
      mScanningPaused=false;
      try {
        if (getBluetoothAdapter() != null) {
          if (getBluetoothAdapter().isEnabled()) {
            if (mBluetoothCrashResolver != null && mBluetoothCrashResolver.isRecoveryInProgress()) {
              Log.w(TAG,""String_Node_Str"");
            }
 else {
              if (mScanningEnabled) {
                try {
                  if (mUseAndroidLScanner) {
                    if (mRestartNeeded) {
                      mRestartNeeded=false;
                      BeaconManager.logDebug(TAG,""String_Node_Str"");
                    }
 else {
                      BeaconManager.logDebug(TAG,""String_Node_Str"");
                    }
                    List<ScanFilter> filters=new ArrayList<ScanFilter>();
                    if (mScanner == null) {
                      BeaconManager.logDebug(TAG,""String_Node_Str"");
                      mScanner=getBluetoothAdapter().getBluetoothLeScanner();
                    }
                    ScanSettings settings;
                    if (mBackgroundFlag) {
                      BeaconManager.logDebug(TAG,""String_Node_Str"");
                      settings=(new ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_POWER)).build();
                    }
 else {
                      BeaconManager.logDebug(TAG,""String_Node_Str"");
                      settings=(new ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY)).build();
                    }
                    mScanner.startScan(filters,settings,(android.bluetooth.le.ScanCallback)getNewLeScanCallback());
                  }
 else {
                    BeaconManager.logDebug(TAG,""String_Node_Str"");
                    mRestartNeeded=false;
                    getBluetoothAdapter().startLeScan((BluetoothAdapter.LeScanCallback)getLeScanCallback());
                  }
                }
 catch (                Exception e) {
                  Log.w(""String_Node_Str"",e);
                }
              }
 else {
                BeaconManager.logDebug(TAG,""String_Node_Str"");
              }
            }
            mLastScanCycleStartTime=new Date().getTime();
          }
 else {
            Log.w(TAG,""String_Node_Str"");
          }
        }
      }
 catch (      Exception e) {
        Log.e(""String_Node_Str"",""String_Node_Str"",e);
      }
    }
 else {
      BeaconManager.logDebug(TAG,""String_Node_Str"");
    }
    mScanCycleStopTime=(new Date().getTime() + mScanPeriod);
    scheduleScanCycleStop();
    BeaconManager.logDebug(TAG,""String_Node_Str"");
  }
 else {
    BeaconManager.logDebug(TAG,""String_Node_Str"");
    mScanning=false;
    if (mUseAndroidLScanner) {
      mScanner.stopScan((android.bluetooth.le.ScanCallback)getNewLeScanCallback());
    }
 else {
      if (getBluetoothAdapter() != null) {
        try {
          getBluetoothAdapter().stopLeScan((BluetoothAdapter.LeScanCallback)getLeScanCallback());
        }
 catch (        Exception e) {
          Log.w(""String_Node_Str"",e);
        }
        mLastScanCycleEndTime=new Date().getTime();
      }
    }
  }
}",0.9502473086994472
162699,"/** 
 * <p>Defines a beacon field parsing algorithm based on a string designating the zero-indexed offsets to bytes within a BLE advertisement.</p> <p>If you want to see examples of how other folks have set up BeaconParsers for different kinds of beacons, try doing a Google search for ""getBeaconParsers"" (include the quotes in the search.)</p> <p>Four prefixes are allowed in the string:</p> <pre> m - matching byte sequence for this beacon type to parse (one allowed) i - identifier (multiple allowed) p - power calibration field (one allowed) d - data field (multiple allowed) </pre> <p>Each prefix is followed by a colon, then an inclusive decimal byte offset for the field from the beginning of the advertisement.  In the case of the m prefix, an = sign follows the byte offset, followed by a big endian hex representation of the bytes that must be matched for this beacon type.  When multiple i or d entries exist in the string, they will be added in order of definition to the identifier or data array for the beacon when parsing the beacon advertisement.  Terms are separated by commas.</p> <p>All offsets from the start of the advertisement are relative to the first byte of the two byte manufacturer code.  The manufacturer code is therefore always at position 0-1</p> <p>If the expression cannot be parsed, a <code>BeaconLayoutException</code> is thrown.</p> <p>Example of a parser string for AltBeacon:</p> </pre> ""m:2-3:beac,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25"" </pre> <p>This signifies that the beacon type will be decoded when an advertisement is found with 0xbeac in bytes 2-3, and a three-part identifier will be pulled out of bytes 4-19, bytes 20-21 and bytes 22-23, respectively.  A signed power calibration value will be pulled out of byte 24, and a data field will be pulled out of byte 25.</p> Note: bytes 0-1 of the BLE manufacturer advertisements are the two byte manufacturer code. Generally you should not match on these two bytes when using a BeaconParser, because it will limit your parser to matching only a transmitter made by a specific manufacturer.  Software and operating systems that scan for beacons typically ignore these two bytes, allowing beacon manufacturers to use their own company code assigned by Bluetooth SIG.  The default parser implementation will already pull out this company code and store it in the beacon.mManufacturer field.  Matcher expressions should therefore start with ""m2-3:"" followed by the multi-byte hex value that signifies the beacon type.
 * @param beaconLayout
 * @return the BeaconParser instance
 */
public BeaconParser setBeaconLayout(String beaconLayout){
  String[] terms=beaconLayout.split(""String_Node_Str"");
  for (  String term : terms) {
    boolean found=false;
    Matcher matcher=I_PATTERN.matcher(term);
    while (matcher.find()) {
      found=true;
      try {
        int startOffset=Integer.parseInt(matcher.group(1));
        int endOffset=Integer.parseInt(matcher.group(2));
        Boolean littleEndian=matcher.group(3).equals(""String_Node_Str"");
        mIdentifierLittleEndianFlags.add(littleEndian);
        mIdentifierStartOffsets.add(startOffset);
        mIdentifierEndOffsets.add(endOffset);
      }
 catch (      NumberFormatException e) {
        throw new BeaconLayoutException(""String_Node_Str"" + term);
      }
    }
    matcher=D_PATTERN.matcher(term);
    while (matcher.find()) {
      found=true;
      try {
        int startOffset=Integer.parseInt(matcher.group(1));
        int endOffset=Integer.parseInt(matcher.group(2));
        Boolean littleEndian=matcher.group(3).equals(""String_Node_Str"");
        mDataLittleEndianFlags.add(littleEndian);
        mDataStartOffsets.add(startOffset);
        mDataEndOffsets.add(endOffset);
      }
 catch (      NumberFormatException e) {
        throw new BeaconLayoutException(""String_Node_Str"" + term);
      }
    }
    matcher=P_PATTERN.matcher(term);
    while (matcher.find()) {
      found=true;
      try {
        int startOffset=Integer.parseInt(matcher.group(1));
        int endOffset=Integer.parseInt(matcher.group(2));
        mPowerStartOffset=startOffset;
        mPowerEndOffset=endOffset;
      }
 catch (      NumberFormatException e) {
        throw new BeaconLayoutException(""String_Node_Str"" + term);
      }
    }
    matcher=M_PATTERN.matcher(term);
    while (matcher.find()) {
      found=true;
      try {
        int startOffset=Integer.parseInt(matcher.group(1));
        int endOffset=Integer.parseInt(matcher.group(2));
        mMatchingBeaconTypeCodeStartOffset=startOffset;
        mMatchingBeaconTypeCodeEndOffset=endOffset;
      }
 catch (      NumberFormatException e) {
        throw new BeaconLayoutException(""String_Node_Str"" + term);
      }
      String hexString=matcher.group(3);
      try {
        mMatchingBeaconTypeCode=Long.decode(""String_Node_Str"" + hexString);
      }
 catch (      NumberFormatException e) {
        throw new BeaconLayoutException(""String_Node_Str"" + hexString + ""String_Node_Str""+ term);
      }
    }
    if (!found) {
      BeaconManager.logDebug(TAG,""String_Node_Str"" + term);
      throw new BeaconLayoutException(""String_Node_Str"" + term);
    }
  }
  if (mPowerStartOffset == null || mPowerEndOffset == null) {
    throw new BeaconLayoutException(""String_Node_Str"");
  }
  if (mMatchingBeaconTypeCodeStartOffset == null || mMatchingBeaconTypeCodeEndOffset == null) {
    throw new BeaconLayoutException(""String_Node_Str"");
  }
  if (mIdentifierStartOffsets.size() == 0 || mIdentifierEndOffsets.size() == 0) {
    throw new BeaconLayoutException(""String_Node_Str"");
  }
  return this;
}","/** 
 * <p>Defines a beacon field parsing algorithm based on a string designating the zero-indexed offsets to bytes within a BLE advertisement.</p> <p>If you want to see examples of how other folks have set up BeaconParsers for different kinds of beacons, try doing a Google search for ""getBeaconParsers"" (include the quotes in the search.)</p> <p>Four prefixes are allowed in the string:</p> <pre> m - matching byte sequence for this beacon type to parse (exactly one required) i - identifier (at least one required, multiple allowed) p - power calibration field (exactly one required) d - data field (optional, multiple allowed) </pre> <p>Each prefix is followed by a colon, then an inclusive decimal byte offset for the field from the beginning of the advertisement.  In the case of the m prefix, an = sign follows the byte offset, followed by a big endian hex representation of the bytes that must be matched for this beacon type.  When multiple i or d entries exist in the string, they will be added in order of definition to the identifier or data array for the beacon when parsing the beacon advertisement.  Terms are separated by commas.</p> <p>All offsets from the start of the advertisement are relative to the first byte of the two byte manufacturer code.  The manufacturer code is therefore always at position 0-1</p> <p>All data field and identifier expressions may be optionally suffixed with the letter l, which indicates the field should be parsed as little endian.  If not present, the field will be presumed to be big endian. <p>If the expression cannot be parsed, a <code>BeaconLayoutException</code> is thrown.</p> <p>Example of a parser string for AltBeacon:</p> </pre> ""m:2-3=beac,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25"" </pre> <p>This signifies that the beacon type will be decoded when an advertisement is found with 0xbeac in bytes 2-3, and a three-part identifier will be pulled out of bytes 4-19, bytes 20-21 and bytes 22-23, respectively.  A signed power calibration value will be pulled out of byte 24, and a data field will be pulled out of byte 25.</p> Note: bytes 0-1 of the BLE manufacturer advertisements are the two byte manufacturer code. Generally you should not match on these two bytes when using a BeaconParser, because it will limit your parser to matching only a transmitter made by a specific manufacturer.  Software and operating systems that scan for beacons typically ignore these two bytes, allowing beacon manufacturers to use their own company code assigned by Bluetooth SIG.  The default parser implementation will already pull out this company code and store it in the beacon.mManufacturer field.  Matcher expressions should therefore start with ""m2-3:"" followed by the multi-byte hex value that signifies the beacon type.
 * @param beaconLayout
 * @return the BeaconParser instance
 */
public BeaconParser setBeaconLayout(String beaconLayout){
  String[] terms=beaconLayout.split(""String_Node_Str"");
  for (  String term : terms) {
    boolean found=false;
    Matcher matcher=I_PATTERN.matcher(term);
    while (matcher.find()) {
      found=true;
      try {
        int startOffset=Integer.parseInt(matcher.group(1));
        int endOffset=Integer.parseInt(matcher.group(2));
        Boolean littleEndian=matcher.group(3).equals(""String_Node_Str"");
        mIdentifierLittleEndianFlags.add(littleEndian);
        mIdentifierStartOffsets.add(startOffset);
        mIdentifierEndOffsets.add(endOffset);
      }
 catch (      NumberFormatException e) {
        throw new BeaconLayoutException(""String_Node_Str"" + term);
      }
    }
    matcher=D_PATTERN.matcher(term);
    while (matcher.find()) {
      found=true;
      try {
        int startOffset=Integer.parseInt(matcher.group(1));
        int endOffset=Integer.parseInt(matcher.group(2));
        Boolean littleEndian=matcher.group(3).equals(""String_Node_Str"");
        mDataLittleEndianFlags.add(littleEndian);
        mDataStartOffsets.add(startOffset);
        mDataEndOffsets.add(endOffset);
      }
 catch (      NumberFormatException e) {
        throw new BeaconLayoutException(""String_Node_Str"" + term);
      }
    }
    matcher=P_PATTERN.matcher(term);
    while (matcher.find()) {
      found=true;
      try {
        int startOffset=Integer.parseInt(matcher.group(1));
        int endOffset=Integer.parseInt(matcher.group(2));
        mPowerStartOffset=startOffset;
        mPowerEndOffset=endOffset;
      }
 catch (      NumberFormatException e) {
        throw new BeaconLayoutException(""String_Node_Str"" + term);
      }
    }
    matcher=M_PATTERN.matcher(term);
    while (matcher.find()) {
      found=true;
      try {
        int startOffset=Integer.parseInt(matcher.group(1));
        int endOffset=Integer.parseInt(matcher.group(2));
        mMatchingBeaconTypeCodeStartOffset=startOffset;
        mMatchingBeaconTypeCodeEndOffset=endOffset;
      }
 catch (      NumberFormatException e) {
        throw new BeaconLayoutException(""String_Node_Str"" + term);
      }
      String hexString=matcher.group(3);
      try {
        mMatchingBeaconTypeCode=Long.decode(""String_Node_Str"" + hexString);
      }
 catch (      NumberFormatException e) {
        throw new BeaconLayoutException(""String_Node_Str"" + hexString + ""String_Node_Str""+ term);
      }
    }
    if (!found) {
      BeaconManager.logDebug(TAG,""String_Node_Str"" + term);
      throw new BeaconLayoutException(""String_Node_Str"" + term);
    }
  }
  if (mPowerStartOffset == null || mPowerEndOffset == null) {
    throw new BeaconLayoutException(""String_Node_Str"");
  }
  if (mMatchingBeaconTypeCodeStartOffset == null || mMatchingBeaconTypeCodeEndOffset == null) {
    throw new BeaconLayoutException(""String_Node_Str"");
  }
  if (mIdentifierStartOffsets.size() == 0 || mIdentifierEndOffsets.size() == 0) {
    throw new BeaconLayoutException(""String_Node_Str"");
  }
  return this;
}",0.973640713353632
162700,"/** 
 * methods for clients
 */
public void startRangingBeaconsInRegion(Region region,Callback callback){
synchronized (rangedRegionState) {
    if (rangedRegionState.containsKey(region)) {
      Log.i(TAG,""String_Node_Str"");
      rangedRegionState.remove(region);
    }
    rangedRegionState.put(region,new RangeState(callback));
  }
  BeaconManager.logDebug(TAG,""String_Node_Str"" + rangedRegionState.size() + ""String_Node_Str"");
  if (!scanningEnabled) {
    enableScanning();
  }
}","/** 
 * methods for clients
 */
public void startRangingBeaconsInRegion(Region region,Callback callback){
synchronized (rangedRegionState) {
    if (rangedRegionState.containsKey(region)) {
      Log.i(TAG,""String_Node_Str"");
      rangedRegionState.remove(region);
    }
    rangedRegionState.put(region,new RangeState(callback));
    BeaconManager.logDebug(TAG,""String_Node_Str"" + rangedRegionState.size() + ""String_Node_Str"");
  }
  if (!scanningEnabled) {
    enableScanning();
  }
}",0.9938271604938272
162701,"private void processExpiredMonitors(){
  Iterator<Region> monitoredRegionIterator=monitoredRegionState.keySet().iterator();
  while (monitoredRegionIterator.hasNext()) {
    Region region=monitoredRegionIterator.next();
    MonitorState state=monitoredRegionState.get(region);
    if (state.isNewlyOutside()) {
      BeaconManager.logDebug(TAG,""String_Node_Str"" + region);
      state.getCallback().call(BeaconService.this,""String_Node_Str"",new MonitoringData(state.isInside(),region));
    }
  }
}","private void processExpiredMonitors(){
synchronized (monitoredRegionState) {
    Iterator<Region> monitoredRegionIterator=monitoredRegionState.keySet().iterator();
    while (monitoredRegionIterator.hasNext()) {
      Region region=monitoredRegionIterator.next();
      MonitorState state=monitoredRegionState.get(region);
      if (state.isNewlyOutside()) {
        BeaconManager.logDebug(TAG,""String_Node_Str"" + region);
        state.getCallback().call(BeaconService.this,""String_Node_Str"",new MonitoringData(state.isInside(),region));
      }
    }
  }
}",0.9431818181818182
162702,"private void processRangeData(){
  Iterator<Region> regionIterator=rangedRegionState.keySet().iterator();
  while (regionIterator.hasNext()) {
    Region region=regionIterator.next();
    RangeState rangeState=rangedRegionState.get(region);
    BeaconManager.logDebug(TAG,""String_Node_Str"");
    rangeState.getCallback().call(BeaconService.this,""String_Node_Str"",new RangingData(rangeState.finalizeBeacons(),region));
  }
}","private void processRangeData(){
synchronized (rangedRegionState) {
    Iterator<Region> regionIterator=rangedRegionState.keySet().iterator();
    while (regionIterator.hasNext()) {
      Region region=regionIterator.next();
      RangeState rangeState=rangedRegionState.get(region);
      BeaconManager.logDebug(TAG,""String_Node_Str"");
      rangeState.getCallback().call(BeaconService.this,""String_Node_Str"",new RangingData(rangeState.finalizeBeacons(),region));
    }
  }
}",0.9410456062291436
162703,"private void processBeaconFromScan(Beacon beacon){
  lastBeaconDetectionTime=new Date();
  trackedBeaconsPacketCount++;
  if (trackedBeacons.contains(beacon)) {
    BeaconManager.logDebug(TAG,""String_Node_Str"" + beacon.toString());
  }
  trackedBeacons.add(beacon);
  BeaconManager.logDebug(TAG,""String_Node_Str"" + beacon.toString());
  List<Region> matchedRegions=null;
synchronized (monitoredRegionState) {
    matchedRegions=matchingRegions(beacon,monitoredRegionState.keySet());
  }
  Iterator<Region> matchedRegionIterator=matchedRegions.iterator();
  while (matchedRegionIterator.hasNext()) {
    Region region=matchedRegionIterator.next();
    MonitorState state=monitoredRegionState.get(region);
    if (state.markInside()) {
      state.getCallback().call(BeaconService.this,""String_Node_Str"",new MonitoringData(state.isInside(),region));
    }
  }
  BeaconManager.logDebug(TAG,""String_Node_Str"");
synchronized (rangedRegionState) {
    matchedRegions=matchingRegions(beacon,rangedRegionState.keySet());
  }
  matchedRegionIterator=matchedRegions.iterator();
  while (matchedRegionIterator.hasNext()) {
    Region region=matchedRegionIterator.next();
    BeaconManager.logDebug(TAG,""String_Node_Str"" + region);
    RangeState rangeState=rangedRegionState.get(region);
synchronized (rangeState) {
      rangeState.addBeacon(beacon);
    }
  }
}","private void processBeaconFromScan(Beacon beacon){
  lastBeaconDetectionTime=new Date();
  trackedBeaconsPacketCount++;
  if (trackedBeacons.contains(beacon)) {
    BeaconManager.logDebug(TAG,""String_Node_Str"" + beacon.toString());
  }
  trackedBeacons.add(beacon);
  BeaconManager.logDebug(TAG,""String_Node_Str"" + beacon.toString());
  List<Region> matchedRegions=null;
synchronized (monitoredRegionState) {
    matchedRegions=matchingRegions(beacon,monitoredRegionState.keySet());
  }
  Iterator<Region> matchedRegionIterator=matchedRegions.iterator();
  while (matchedRegionIterator.hasNext()) {
    Region region=matchedRegionIterator.next();
    MonitorState state=monitoredRegionState.get(region);
    if (state.markInside()) {
      state.getCallback().call(BeaconService.this,""String_Node_Str"",new MonitoringData(state.isInside(),region));
    }
  }
  BeaconManager.logDebug(TAG,""String_Node_Str"");
synchronized (rangedRegionState) {
    matchedRegions=matchingRegions(beacon,rangedRegionState.keySet());
    matchedRegionIterator=matchedRegions.iterator();
    while (matchedRegionIterator.hasNext()) {
      Region region=matchedRegionIterator.next();
      BeaconManager.logDebug(TAG,""String_Node_Str"" + region);
      RangeState rangeState=rangedRegionState.get(region);
      rangeState.addBeacon(beacon);
    }
  }
}",0.9858314690529456
162704,"public void stopRangingBeaconsInRegion(Region region){
synchronized (rangedRegionState) {
    rangedRegionState.remove(region);
  }
  BeaconManager.logDebug(TAG,""String_Node_Str"" + rangedRegionState.size() + ""String_Node_Str"");
  if (scanningEnabled && rangedRegionState.size() == 0 && monitoredRegionState.size() == 0) {
    disableScanning();
  }
}","public void stopRangingBeaconsInRegion(Region region){
  int rangedRegionCount;
synchronized (rangedRegionState) {
    rangedRegionState.remove(region);
    rangedRegionCount=rangedRegionState.size();
    BeaconManager.logDebug(TAG,""String_Node_Str"" + rangedRegionState.size() + ""String_Node_Str"");
  }
  if (scanningEnabled && rangedRegionCount == 0 && monitoredRegionState.size() == 0) {
    disableScanning();
  }
}",0.875
162705,"public void stopMonitoringBeaconsInRegion(Region region){
  BeaconManager.logDebug(TAG,""String_Node_Str"");
synchronized (monitoredRegionState) {
    monitoredRegionState.remove(region);
  }
  BeaconManager.logDebug(TAG,""String_Node_Str"" + monitoredRegionState.size() + ""String_Node_Str"");
  if (scanningEnabled && rangedRegionState.size() == 0 && monitoredRegionState.size() == 0) {
    disableScanning();
  }
}","public void stopMonitoringBeaconsInRegion(Region region){
  int monitoredRegionCount;
  BeaconManager.logDebug(TAG,""String_Node_Str"");
synchronized (monitoredRegionState) {
    monitoredRegionState.remove(region);
    monitoredRegionCount=monitoredRegionState.size();
  }
  BeaconManager.logDebug(TAG,""String_Node_Str"" + monitoredRegionState.size() + ""String_Node_Str"");
  if (scanningEnabled && monitoredRegionCount == 0 && monitoredRegionState.size() == 0) {
    disableScanning();
  }
}",0.86
162706,"/** 
 * This method notifies the beacon service that the application is either moving to background mode or foreground mode.  When in background mode, BluetoothLE scans to look for beacons are executed less frequently in order to save battery life. The specific scan rates for background and foreground operation are set by the defaults below, but may be customized. When ranging in the background, the time between updates will be much less frequent than in the foreground.  Updates will come every time interval equal to the sum total of the BackgroundScanPeriod and the BackgroundBetweenScanPeriod.
 * @see #DEFAULT_FOREGROUND_SCAN_PERIOD
 * @see #DEFAULT_FOREGROUND_BETWEEN_SCAN_PERIOD;
 * @see #DEFAULT_BACKGROUND_SCAN_PERIOD;
 * @see #DEFAULT_BACKGROUND_BETWEEN_SCAN_PERIOD;
 * @see #setForegroundScanPeriod(long p)
 * @see #setForegroundBetweenScanPeriod(long p)
 * @see #setBackgroundScanPeriod(long p)
 * @see #setBackgroundBetweenScanPeriod(long p)
 * @param backgroundMode true indicates the app is in the background
 */
public void setBackgroundMode(boolean backgroundMode){
  if (android.os.Build.VERSION.SDK_INT < 18) {
    Log.w(TAG,""String_Node_Str"");
  }
  if (backgroundMode != mBackgroundMode) {
    mBackgroundMode=backgroundMode;
    try {
      this.updateScanPeriods();
    }
 catch (    RemoteException e) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
}","/** 
 * This method notifies the beacon service that the application is either moving to background mode or foreground mode.  When in background mode, BluetoothLE scans to look for beacons are executed less frequently in order to save battery life. The specific scan rates for background and foreground operation are set by the defaults below, but may be customized. When ranging in the background, the time between updates will be much less frequent than in the foreground.  Updates will come every time interval equal to the sum total of the BackgroundScanPeriod and the BackgroundBetweenScanPeriod.
 * @see #DEFAULT_FOREGROUND_SCAN_PERIOD
 * @see #DEFAULT_FOREGROUND_BETWEEN_SCAN_PERIOD;
 * @see #DEFAULT_BACKGROUND_SCAN_PERIOD;
 * @see #DEFAULT_BACKGROUND_BETWEEN_SCAN_PERIOD;
 * @see #setForegroundScanPeriod(long p)
 * @see #setForegroundBetweenScanPeriod(long p)
 * @see #setBackgroundScanPeriod(long p)
 * @see #setBackgroundBetweenScanPeriod(long p)
 * @param backgroundMode true indicates the app is in the background
 */
public void setBackgroundMode(boolean backgroundMode){
  if (android.os.Build.VERSION.SDK_INT < 18) {
    Log.w(TAG,""String_Node_Str"");
  }
  mBackgroundModeUninitialized=false;
  if (backgroundMode != mBackgroundMode) {
    mBackgroundMode=backgroundMode;
    try {
      this.updateScanPeriods();
    }
 catch (    RemoteException e) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
}",0.9864091559370528
162707,"/** 
 * Method reserved for system use
 */
@Override public void onBeaconServiceConnect(){
  BeaconManager.logDebug(TAG,""String_Node_Str"");
  beaconManager.setMonitorNotifier(application);
  try {
    for (    Region region : regions) {
      BeaconManager.logDebug(TAG,""String_Node_Str"" + region);
      beaconManager.startMonitoringBeaconsInRegion(region);
      beaconManager.setBackgroundMode(true);
    }
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"" + e);
  }
}","/** 
 * Method reserved for system use
 */
@Override public void onBeaconServiceConnect(){
  BeaconManager.logDebug(TAG,""String_Node_Str"");
  beaconManager.setMonitorNotifier(application);
  try {
    for (    Region region : regions) {
      BeaconManager.logDebug(TAG,""String_Node_Str"" + region);
      beaconManager.startMonitoringBeaconsInRegion(region);
      if (beaconManager.isBackgroundModeUninitialized()) {
        beaconManager.setBackgroundMode(true);
      }
    }
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"" + e);
  }
}",0.9014354066985646
162708,"/** 
 * Calculated the estimated distance in meters to the beacon based on a reference rssi at 1m and the known actual rssi at the current location
 * @param txPower
 * @param rssi
 * @return estimated distance
 */
protected static double calculateDistance(int txPower,double rssi){
  if (rssi == 0) {
    return -1.0;
  }
  BeaconManager.logDebug(TAG,""String_Node_Str"" + rssi + ""String_Node_Str""+ txPower);
  double ratio=rssi * 1.0 / txPower;
  double distance;
  if (ratio < 1.0) {
    distance=Math.pow(ratio,10);
  }
 else {
    distance=(0.42093) * Math.pow(ratio,6.9476) + 0.54992;
    BeaconManager.logDebug(TAG,""String_Node_Str"" + rssi + ""String_Node_Str""+ distance);
  }
  BeaconManager.logDebug(TAG,""String_Node_Str"" + rssi + ""String_Node_Str""+ distance);
  return distance;
}","/** 
 * Estimate the distance to the beacon using the DistanceCalculator set on this class.  If no DistanceCalculator has been set, return -1 as the distance.
 * @see org.altbeacon.beacon.distance.DistanceCalculator
 * @param txPower
 * @param bestRssiAvailable
 * @return
 */
protected static Double calculateDistance(int txPower,double bestRssiAvailable){
  if (Beacon.getDistanceCalculator() != null) {
    return Beacon.getDistanceCalculator().calculateDistance(txPower,bestRssiAvailable);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    return -1.0;
  }
}",0.2594514455151964
162709,"/** 
 * Sets the running average rssi for use in distance calculations
 * @see #calculateDistance(int,double)
 * @param rssi the running average rssi
 */
public void setRunningAverageRssi(double rssi){
  mRunningAverageRssi=rssi;
  mDistance=null;
}","/** 
 * Sets the running average rssi for use in distance calculations
 * @param rssi the running average rssi
 */
public void setRunningAverageRssi(double rssi){
  mRunningAverageRssi=rssi;
  mDistance=null;
}",0.915032679738562
162710,"/** 
 * This method notifies the beacon service that the application is either moving to background mode or foreground mode.  When in background mode, BluetoothLE scans to look for beacons are executed less frequently in order to save battery life. The specific scan rates for background and foreground operation are set by the defaults below, but may be customized. When ranging in the background, the time between updates will be much less frequent than in the foreground.  Updates will come every time interval equal to the sum total of the BackgroundScanPeriod and the BackgroundBetweenScanPeriod.
 * @see #DEFAULT_FOREGROUND_SCAN_PERIOD
 * @see #DEFAULT_FOREGROUND_BETWEEN_SCAN_PERIOD;
 * @see #DEFAULT_BACKGROUND_SCAN_PERIOD;
 * @see #DEFAULT_BACKGROUND_BETWEEN_SCAN_PERIOD;
 * @see #setForegroundScanPeriod(long p)
 * @see #setForegroundBetweenScanPeriod(long p)
 * @see #setBackgroundScanPeriod(long p)
 * @see #setBackgroundBetweenScanPeriod(long p)
 * @param backgroundMode true indicates the app is in the background
 */
public void setBackgroundMode(boolean backgroundMode){
  if (android.os.Build.VERSION.SDK_INT < 18) {
    Log.w(TAG,""String_Node_Str"");
  }
  if (backgroundMode != mBackgroundMode) {
    mBackgroundMode=backgroundMode;
    try {
      this.updateScanPeriods();
    }
 catch (    RemoteException e) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
}","/** 
 * This method notifies the beacon service that the application is either moving to background mode or foreground mode.  When in background mode, BluetoothLE scans to look for beacons are executed less frequently in order to save battery life. The specific scan rates for background and foreground operation are set by the defaults below, but may be customized. When ranging in the background, the time between updates will be much less frequent than in the foreground.  Updates will come every time interval equal to the sum total of the BackgroundScanPeriod and the BackgroundBetweenScanPeriod.
 * @see #DEFAULT_FOREGROUND_SCAN_PERIOD
 * @see #DEFAULT_FOREGROUND_BETWEEN_SCAN_PERIOD;
 * @see #DEFAULT_BACKGROUND_SCAN_PERIOD;
 * @see #DEFAULT_BACKGROUND_BETWEEN_SCAN_PERIOD;
 * @see #setForegroundScanPeriod(long p)
 * @see #setForegroundBetweenScanPeriod(long p)
 * @see #setBackgroundScanPeriod(long p)
 * @see #setBackgroundBetweenScanPeriod(long p)
 * @param backgroundMode true indicates the app is in the background
 */
public void setBackgroundMode(boolean backgroundMode){
  if (android.os.Build.VERSION.SDK_INT < 18) {
    Log.w(TAG,""String_Node_Str"");
  }
  mBackgroundModeUninitialized=false;
  if (backgroundMode != mBackgroundMode) {
    mBackgroundMode=backgroundMode;
    try {
      this.updateScanPeriods();
    }
 catch (    RemoteException e) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
}",0.9864091559370528
162711,"@TargetApi(17) private void startRecovery(){
  recoveryAttemptCount++;
  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();
  if (isDebugEnabled())   Log.d(TAG,""String_Node_Str"");
  if (!adapter.isDiscovering()) {
    Log.w(TAG,""String_Node_Str"");
    recoveryInProgress=true;
    discoveryStartConfirmed=false;
    if (isDebugEnabled())     Log.d(TAG,""String_Node_Str"");
    if (!adapter.startDiscovery()) {
      Log.w(TAG,""String_Node_Str"");
    }
    if (isDebugEnabled())     Log.d(TAG,""String_Node_Str"" + adapter.isDiscovering());
    if (TIME_TO_LET_DISCOVERY_RUN_MILLIS > 0) {
      if (isDebugEnabled())       Log.d(TAG,""String_Node_Str"" + TIME_TO_LET_DISCOVERY_RUN_MILLIS + ""String_Node_Str"");
      discoveryCanceller.doInBackground();
    }
 else {
      Log.d(TAG,""String_Node_Str"");
    }
  }
 else {
    Log.w(TAG,""String_Node_Str"");
  }
}","@TargetApi(17) private void startRecovery(){
  recoveryAttemptCount++;
  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();
  if (isDebugEnabled())   Log.d(TAG,""String_Node_Str"");
  if (!adapter.isDiscovering()) {
    Log.w(TAG,""String_Node_Str"");
    recoveryInProgress=true;
    discoveryStartConfirmed=false;
    if (isDebugEnabled())     Log.d(TAG,""String_Node_Str"");
    if (!adapter.startDiscovery()) {
      Log.w(TAG,""String_Node_Str"");
    }
    if (isDebugEnabled())     Log.d(TAG,""String_Node_Str"" + adapter.isDiscovering());
    if (TIME_TO_LET_DISCOVERY_RUN_MILLIS > 0) {
      if (isDebugEnabled())       Log.d(TAG,""String_Node_Str"" + TIME_TO_LET_DISCOVERY_RUN_MILLIS + ""String_Node_Str"");
      discoveryCanceller.doInBackground();
    }
 else {
      if (isDebugEnabled())       Log.d(TAG,""String_Node_Str"");
    }
  }
 else {
    Log.w(TAG,""String_Node_Str"");
  }
}",0.9840909090909092
162712,"/** 
 * Construct an AltBeacon from a Bluetooth LE packet collected by Android's Bluetooth APIs, including the raw bluetooth device info
 * @param scanData The actual packet bytes
 * @param rssi The measured signal strength of the packet
 * @param device The bluetooth device that was detected
 * @return An instance of an <code>Beacon</code>
 */
@TargetApi(5) public Beacon fromScanData(byte[] scanData,int rssi,BluetoothDevice device){
  AltBeacon beacon=null;
  int startByte=2;
  boolean patternFound=false;
  while (startByte <= 5) {
    if (((int)scanData[startByte + 2] & 0xff) == 0x02 && ((int)scanData[startByte + 3] & 0xff) == 0x15) {
      patternFound=true;
      break;
    }
 else     if (((int)scanData[startByte + 2] & 0xff) == (getMatchingBeaconTypeCode() & 0x00ff) && ((int)scanData[startByte + 3] & 0xff) == (getMatchingBeaconTypeCode() & 0xff00) >> 8) {
      patternFound=true;
      break;
    }
    startByte++;
  }
  if (patternFound == false) {
    if (BeaconManager.debug)     Log.d(TAG,""String_Node_Str"" + String.format(""String_Node_Str"",getMatchingBeaconTypeCode()) + ""String_Node_Str""+ bytesToHex(scanData));
    return null;
  }
 else {
    if (BeaconManager.debug)     Log.d(TAG,""String_Node_Str"" + String.format(""String_Node_Str"",getMatchingBeaconTypeCode()) + ""String_Node_Str""+ startByte);
  }
  Integer id2=(scanData[startByte + 20] & 0xff) * 0x100 + (scanData[startByte + 21] & 0xff);
  Integer id3=(scanData[startByte + 22] & 0xff) * 0x100 + (scanData[startByte + 23] & 0xff);
  int txPower=0;
  if (scanData.length > startByte + 24) {
    txPower=(int)scanData[startByte + 24];
  }
  int manData=0;
  if (scanData.length > startByte + 25) {
    manData=(int)(scanData[startByte + 25] & 0xff);
  }
  int beaconTypeCode=(scanData[startByte + 3] & 0xff) * 0x100 + (scanData[startByte + 2] & 0xff);
  byte[] id1Bytes=new byte[16];
  System.arraycopy(scanData,startByte + 4,id1Bytes,0,16);
  String hexString=bytesToHex(id1Bytes);
  StringBuilder sb=new StringBuilder();
  sb.append(hexString.substring(0,8));
  sb.append(""String_Node_Str"");
  sb.append(hexString.substring(8,12));
  sb.append(""String_Node_Str"");
  sb.append(hexString.substring(12,16));
  sb.append(""String_Node_Str"");
  sb.append(hexString.substring(16,20));
  sb.append(""String_Node_Str"");
  sb.append(hexString.substring(20,32));
  String id1=sb.toString();
  if (BeaconManager.debug)   Log.d(TAG,""String_Node_Str"" + id1 + ""String_Node_Str""+ hexString);
  if (device != null) {
    beacon.mBluetoothAddress=device.getAddress();
  }
  String macAddress=null;
  if (device != null) {
    macAddress=device.getAddress();
  }
  AltBeacon altBeacon=new AltBeacon(id1,id2.toString(),id3.toString(),txPower,rssi,beaconTypeCode,manData,macAddress);
  altBeacon.mManData=manData;
  return altBeacon;
}","/** 
 * Construct an AltBeacon from a Bluetooth LE packet collected by Android's Bluetooth APIs, including the raw bluetooth device info
 * @param scanData The actual packet bytes
 * @param rssi The measured signal strength of the packet
 * @param device The bluetooth device that was detected
 * @return An instance of an <code>Beacon</code>
 */
@TargetApi(5) public Beacon fromScanData(byte[] scanData,int rssi,BluetoothDevice device){
  int startByte=2;
  boolean patternFound=false;
  while (startByte <= 5) {
    if (((int)scanData[startByte + 2] & 0xff) == 0x02 && ((int)scanData[startByte + 3] & 0xff) == 0x15) {
      patternFound=true;
      break;
    }
 else     if (((int)scanData[startByte + 2] & 0xff) == (getMatchingBeaconTypeCode() & 0x00ff) && ((int)scanData[startByte + 3] & 0xff) == (getMatchingBeaconTypeCode() & 0xff00) >> 8) {
      patternFound=true;
      break;
    }
    startByte++;
  }
  if (patternFound == false) {
    if (BeaconManager.debug)     Log.d(TAG,""String_Node_Str"" + String.format(""String_Node_Str"",getMatchingBeaconTypeCode()) + ""String_Node_Str""+ bytesToHex(scanData));
    return null;
  }
 else {
    if (BeaconManager.debug)     Log.d(TAG,""String_Node_Str"" + String.format(""String_Node_Str"",getMatchingBeaconTypeCode()) + ""String_Node_Str""+ startByte);
  }
  Integer id2=(scanData[startByte + 20] & 0xff) * 0x100 + (scanData[startByte + 21] & 0xff);
  Integer id3=(scanData[startByte + 22] & 0xff) * 0x100 + (scanData[startByte + 23] & 0xff);
  int txPower=0;
  if (scanData.length > startByte + 24) {
    txPower=(int)scanData[startByte + 24];
  }
  int manData=0;
  if (scanData.length > startByte + 25) {
    manData=(int)(scanData[startByte + 25] & 0xff);
  }
  int beaconTypeCode=(scanData[startByte + 3] & 0xff) * 0x100 + (scanData[startByte + 2] & 0xff);
  byte[] id1Bytes=new byte[16];
  System.arraycopy(scanData,startByte + 4,id1Bytes,0,16);
  String hexString=bytesToHex(id1Bytes);
  StringBuilder sb=new StringBuilder();
  sb.append(hexString.substring(0,8));
  sb.append(""String_Node_Str"");
  sb.append(hexString.substring(8,12));
  sb.append(""String_Node_Str"");
  sb.append(hexString.substring(12,16));
  sb.append(""String_Node_Str"");
  sb.append(hexString.substring(16,20));
  sb.append(""String_Node_Str"");
  sb.append(hexString.substring(20,32));
  String id1=sb.toString();
  if (BeaconManager.debug)   Log.d(TAG,""String_Node_Str"" + id1 + ""String_Node_Str""+ hexString);
  String macAddress=null;
  if (device != null) {
    macAddress=device.getAddress();
  }
  AltBeacon altBeacon=new AltBeacon(id1,id2.toString(),id3.toString(),txPower,rssi,beaconTypeCode,manData,macAddress);
  altBeacon.mManData=manData;
  if (device != null) {
    altBeacon.mBluetoothAddress=device.getAddress();
  }
  return altBeacon;
}",0.9023339317773788
162713,"@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  int i=1;
  for (  Identifier identifier : mIdentifiers) {
    sb.append(""String_Node_Str"");
    sb.append(i);
    sb.append(""String_Node_Str"");
    sb.append(identifier.toString());
  }
  return sb.toString();
}","@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  int i=1;
  for (  Identifier identifier : mIdentifiers) {
    sb.append(""String_Node_Str"");
    sb.append(i);
    sb.append(""String_Node_Str"");
    sb.append(identifier.toString());
    sb.append(""String_Node_Str"");
    i++;
  }
  return sb.toString();
}",0.930756843800322
162714,"public boolean equals(Object other){
  if (other instanceof Region) {
    return ((Region)other).uniqueId == this.uniqueId;
  }
  return false;
}","public boolean equals(Object other){
  if (other instanceof Region) {
    return ((Region)other).uniqueId.equals(this.uniqueId);
  }
  return false;
}",0.9559322033898304
162715,"/** 
 * Construct an iBeacon from a Bluetooth LE packet collected by Android's Bluetooth APIs
 * @param scanData The actual packet bytes
 * @param rssi The measured signal strength of the packet
 * @return An instance of an <code>IBeacon</code>
 */
public static IBeacon fromScanData(byte[] scanData,int rssi){
  int startByte=2;
  boolean patternFound=false;
  while (startByte <= 5) {
    if (((int)scanData[startByte] & 0xff) == 0x4c && ((int)scanData[startByte + 1] & 0xff) == 0x00 && ((int)scanData[startByte + 2] & 0xff) == 0x02 && ((int)scanData[startByte + 3] & 0xff) == 0x15) {
      patternFound=true;
      break;
    }
 else     if (((int)scanData[startByte] & 0xff) == 0x2d && ((int)scanData[startByte + 1] & 0xff) == 0x24 && ((int)scanData[startByte + 2] & 0xff) == 0xbf && ((int)scanData[startByte + 3] & 0xff) == 0x16) {
      IBeacon iBeacon=new IBeacon();
      iBeacon.major=0;
      iBeacon.minor=0;
      iBeacon.proximityUuid=""String_Node_Str"";
      iBeacon.txPower=-55;
      return iBeacon;
    }
    startByte++;
  }
  if (patternFound == false) {
    if (IBeaconManager.LOG_DEBUG)     Log.d(TAG,""String_Node_Str"" + bytesToHex(scanData));
    return null;
  }
  IBeacon iBeacon=new IBeacon();
  iBeacon.major=(scanData[startByte + 20] & 0xff) * 0x100 + (scanData[startByte + 21] & 0xff);
  iBeacon.minor=(scanData[startByte + 22] & 0xff) * 0x100 + (scanData[startByte + 23] & 0xff);
  iBeacon.txPower=(int)scanData[startByte + 24];
  iBeacon.rssi=rssi;
  byte[] proximityUuidBytes=new byte[16];
  System.arraycopy(scanData,startByte + 4,proximityUuidBytes,0,16);
  String hexString=bytesToHex(proximityUuidBytes);
  StringBuilder sb=new StringBuilder();
  sb.append(hexString.substring(0,8));
  sb.append(""String_Node_Str"");
  sb.append(hexString.substring(8,12));
  sb.append(""String_Node_Str"");
  sb.append(hexString.substring(12,16));
  sb.append(""String_Node_Str"");
  sb.append(hexString.substring(16,20));
  sb.append(""String_Node_Str"");
  sb.append(hexString.substring(20,32));
  iBeacon.proximityUuid=sb.toString();
  return iBeacon;
}","/** 
 * Construct an iBeacon from a Bluetooth LE packet collected by Android's Bluetooth APIs
 * @param scanData The actual packet bytes
 * @param rssi The measured signal strength of the packet
 * @return An instance of an <code>IBeacon</code>
 */
public static IBeacon fromScanData(byte[] scanData,int rssi){
  int startByte=2;
  boolean patternFound=false;
  while (startByte <= 5) {
    if (((int)scanData[startByte] & 0xff) == 0x4c && ((int)scanData[startByte + 1] & 0xff) == 0x00 && ((int)scanData[startByte + 2] & 0xff) == 0x02 && ((int)scanData[startByte + 3] & 0xff) == 0x15) {
      patternFound=true;
      break;
    }
 else     if (((int)scanData[startByte] & 0xff) == 0x2d && ((int)scanData[startByte + 1] & 0xff) == 0x24 && ((int)scanData[startByte + 2] & 0xff) == 0xbf && ((int)scanData[startByte + 3] & 0xff) == 0x16) {
      if (IBeaconManager.LOG_DEBUG)       Log.d(TAG,""String_Node_Str"");
      IBeacon iBeacon=new IBeacon();
      iBeacon.major=0;
      iBeacon.minor=0;
      iBeacon.proximityUuid=""String_Node_Str"";
      iBeacon.txPower=-55;
      return iBeacon;
    }
 else     if (((int)scanData[startByte] & 0xff) == 0xad && ((int)scanData[startByte + 1] & 0xff) == 0x77 && ((int)scanData[startByte + 2] & 0xff) == 0x00 && ((int)scanData[startByte + 3] & 0xff) == 0xc6) {
      if (IBeaconManager.LOG_DEBUG)       Log.d(TAG,""String_Node_Str"");
      IBeacon iBeacon=new IBeacon();
      iBeacon.major=0;
      iBeacon.minor=0;
      iBeacon.proximityUuid=""String_Node_Str"";
      iBeacon.txPower=-55;
      return iBeacon;
    }
    startByte++;
  }
  if (patternFound == false) {
    if (IBeaconManager.LOG_DEBUG)     Log.d(TAG,""String_Node_Str"" + bytesToHex(scanData));
    return null;
  }
  IBeacon iBeacon=new IBeacon();
  iBeacon.major=(scanData[startByte + 20] & 0xff) * 0x100 + (scanData[startByte + 21] & 0xff);
  iBeacon.minor=(scanData[startByte + 22] & 0xff) * 0x100 + (scanData[startByte + 23] & 0xff);
  iBeacon.txPower=(int)scanData[startByte + 24];
  iBeacon.rssi=rssi;
  byte[] proximityUuidBytes=new byte[16];
  System.arraycopy(scanData,startByte + 4,proximityUuidBytes,0,16);
  String hexString=bytesToHex(proximityUuidBytes);
  StringBuilder sb=new StringBuilder();
  sb.append(hexString.substring(0,8));
  sb.append(""String_Node_Str"");
  sb.append(hexString.substring(8,12));
  sb.append(""String_Node_Str"");
  sb.append(hexString.substring(12,16));
  sb.append(""String_Node_Str"");
  sb.append(hexString.substring(16,20));
  sb.append(""String_Node_Str"");
  sb.append(hexString.substring(20,32));
  iBeacon.proximityUuid=sb.toString();
  return iBeacon;
}",0.7848426461143224
162716,"@Override protected void onHandleIntent(Intent intent){
  if (IBeaconManager.LOG_DEBUG)   Log.d(TAG,""String_Node_Str"");
  MonitoringData monitoringData=null;
  RangingData rangingData=null;
  if (intent != null && intent.getExtras() != null) {
    monitoringData=(MonitoringData)intent.getExtras().get(""String_Node_Str"");
    rangingData=(RangingData)intent.getExtras().get(""String_Node_Str"");
  }
  if (rangingData != null) {
    if (IBeaconManager.LOG_DEBUG)     Log.d(TAG,""String_Node_Str"");
    if (rangingData.getIBeacons() == null) {
      Log.w(TAG,""String_Node_Str"");
    }
    RangeNotifier notifier=IBeaconManager.getInstanceForApplication(this).getRangingNotifier();
    if (notifier != null) {
      notifier.didRangeBeaconsInRegion(IBeaconData.fromIBeaconDatas(rangingData.getIBeacons()),rangingData.getRegion());
    }
 else {
      if (IBeaconManager.LOG_DEBUG)       Log.d(TAG,""String_Node_Str"");
    }
  }
  if (monitoringData != null) {
    if (IBeaconManager.LOG_DEBUG)     Log.d(TAG,""String_Node_Str"");
    MonitorNotifier notifier=IBeaconManager.getInstanceForApplication(this).getMonitoringNotifier();
    if (notifier != null) {
      if (IBeaconManager.LOG_DEBUG)       Log.d(TAG,""String_Node_Str"" + notifier);
      notifier.didDetermineStateForRegion(monitoringData.isInside() ? MonitorNotifier.INSIDE : MonitorNotifier.OUTSIDE,monitoringData.getRegion());
      if (monitoringData.isInside()) {
        notifier.didEnterRegion(monitoringData.getRegion());
      }
 else {
        notifier.didExitRegion(monitoringData.getRegion());
      }
    }
  }
}","@Override protected void onHandleIntent(Intent intent){
  if (IBeaconManager.LOG_DEBUG)   Log.d(TAG,""String_Node_Str"");
  MonitoringData monitoringData=null;
  RangingData rangingData=null;
  if (intent != null && intent.getExtras() != null) {
    monitoringData=(MonitoringData)intent.getExtras().get(""String_Node_Str"");
    rangingData=(RangingData)intent.getExtras().get(""String_Node_Str"");
  }
  if (rangingData != null) {
    if (IBeaconManager.LOG_DEBUG)     Log.d(TAG,""String_Node_Str"");
    if (rangingData.getIBeacons() == null) {
      Log.w(TAG,""String_Node_Str"");
    }
    RangeNotifier notifier=IBeaconManager.getInstanceForApplication(this).getRangingNotifier();
    java.util.Collection<IBeacon> iBeacons=IBeaconData.fromIBeaconDatas(rangingData.getIBeacons());
    if (notifier != null) {
      notifier.didRangeBeaconsInRegion(iBeacons,rangingData.getRegion());
    }
 else {
      if (IBeaconManager.LOG_DEBUG)       Log.d(TAG,""String_Node_Str"");
    }
    RangeNotifier dataNotifier=IBeaconManager.getInstanceForApplication(this).getDataRequestNotifier();
    if (dataNotifier != null) {
      dataNotifier.didRangeBeaconsInRegion(iBeacons,rangingData.getRegion());
    }
  }
  if (monitoringData != null) {
    if (IBeaconManager.LOG_DEBUG)     Log.d(TAG,""String_Node_Str"");
    MonitorNotifier notifier=IBeaconManager.getInstanceForApplication(this).getMonitoringNotifier();
    if (notifier != null) {
      if (IBeaconManager.LOG_DEBUG)       Log.d(TAG,""String_Node_Str"" + notifier);
      notifier.didDetermineStateForRegion(monitoringData.isInside() ? MonitorNotifier.INSIDE : MonitorNotifier.OUTSIDE,monitoringData.getRegion());
      if (monitoringData.isInside()) {
        notifier.didEnterRegion(monitoringData.getRegion());
      }
 else {
        notifier.didExitRegion(monitoringData.getRegion());
      }
    }
  }
}",0.8883056284631088
162717,"/** 
 * Binds an Android <code>Activity</code> or <code>Service</code> to the <code>IBeaconService</code>.  The  <code>Activity</code> or <code>Service</code> must implement the <code>IBeaconConsuemr</code> interface so that it can get a callback when the service is ready to use.
 * @param consumer the <code>Activity</code> or <code>Service</code> that will receive the callback when the service is ready.
 */
public void bind(IBeaconConsumer consumer){
  if (consumers.keySet().contains(consumer)) {
    if (IBeaconManager.LOG_DEBUG)     Log.d(TAG,""String_Node_Str"");
  }
 else {
    Log.d(TAG,""String_Node_Str"" + consumer);
    consumers.put(consumer,new ConsumerInfo());
    Intent intent=new Intent(consumer.getApplicationContext(),IBeaconService.class);
    consumer.bindService(intent,iBeaconServiceConnection,Context.BIND_AUTO_CREATE);
    if (IBeaconManager.LOG_DEBUG)     Log.d(TAG,""String_Node_Str"" + consumers.size());
    if (serviceMessenger != null) {
      setBackgroundMode(consumer,false);
    }
  }
}","/** 
 * Binds an Android <code>Activity</code> or <code>Service</code> to the <code>IBeaconService</code>.  The  <code>Activity</code> or <code>Service</code> must implement the <code>IBeaconConsuemr</code> interface so that it can get a callback when the service is ready to use.
 * @param consumer the <code>Activity</code> or <code>Service</code> that will receive the callback when the service is ready.
 */
public void bind(IBeaconConsumer consumer){
  if (consumers.keySet().contains(consumer)) {
    if (IBeaconManager.LOG_DEBUG)     Log.d(TAG,""String_Node_Str"");
  }
 else {
    if (IBeaconManager.LOG_DEBUG)     Log.d(TAG,""String_Node_Str"" + consumer);
    consumers.put(consumer,new ConsumerInfo());
    Intent intent=new Intent(consumer.getApplicationContext(),IBeaconService.class);
    consumer.bindService(intent,iBeaconServiceConnection,Context.BIND_AUTO_CREATE);
    if (IBeaconManager.LOG_DEBUG)     Log.d(TAG,""String_Node_Str"" + consumers.size());
    if (serviceMessenger != null) {
      setBackgroundMode(consumer,false);
    }
  }
}",0.9836065573770492
162718,"public void onServiceConnected(ComponentName className,IBinder service){
  Log.d(TAG,""String_Node_Str"");
  serviceMessenger=new Messenger(service);
  Iterator<IBeaconConsumer> consumerIterator=consumers.keySet().iterator();
  while (consumerIterator.hasNext()) {
    IBeaconConsumer consumer=consumerIterator.next();
    Boolean alreadyConnected=consumers.get(consumer).isConnected;
    if (!alreadyConnected) {
      consumer.onIBeaconServiceConnect();
      ConsumerInfo consumerInfo=consumers.get(consumer);
      consumerInfo.isConnected=true;
      consumers.put(consumer,consumerInfo);
    }
  }
}","public void onServiceConnected(ComponentName className,IBinder service){
  if (IBeaconManager.LOG_DEBUG)   Log.d(TAG,""String_Node_Str"");
  serviceMessenger=new Messenger(service);
  Iterator<IBeaconConsumer> consumerIterator=consumers.keySet().iterator();
  while (consumerIterator.hasNext()) {
    IBeaconConsumer consumer=consumerIterator.next();
    Boolean alreadyConnected=consumers.get(consumer).isConnected;
    if (!alreadyConnected) {
      consumer.onIBeaconServiceConnect();
      ConsumerInfo consumerInfo=consumers.get(consumer);
      consumerInfo.isConnected=true;
      consumers.put(consumer,consumerInfo);
    }
  }
}",0.974151857835218
162719,"/** 
 * Two detected iBeacons are considered equal if they share the same three identifiers, regardless of their distance or RSSI.
 */
@Override public boolean equals(Object that){
  if (!(that instanceof IBeacon)) {
    return false;
  }
  IBeacon thatIBeacon=(IBeacon)that;
  return (thatIBeacon.getMinor() == this.getMinor() && thatIBeacon.getProximityUuid() == thatIBeacon.getProximityUuid());
}","/** 
 * Two detected iBeacons are considered equal if they share the same three identifiers, regardless of their distance or RSSI.
 */
@Override public boolean equals(Object that){
  if (!(that instanceof IBeacon)) {
    return false;
  }
  IBeacon thatIBeacon=(IBeacon)that;
  return (thatIBeacon.getMajor() == this.getMajor() && thatIBeacon.getMinor() == this.getMinor() && thatIBeacon.getProximityUuid() == thatIBeacon.getProximityUuid());
}",0.937129300118624
162720,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mContext=this;
  mListView=(MaterialListView)findViewById(R.id.material_listview);
  mListView.setItemAnimator(new SlideInLeftAnimator());
  mListView.getItemAnimator().setAddDuration(300);
  mListView.getItemAnimator().setRemoveDuration(300);
  final ImageView emptyView=new ImageView(this);
  emptyView.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
  mListView.setEmptyView(emptyView);
  Picasso.with(this).load(""String_Node_Str"").resize(100,100).centerInside().into(emptyView);
  fillArray();
  mListView.setOnDismissCallback(new OnDismissCallback(){
    @Override public void onDismiss(    @NonNull Card card,    int position){
      Toast.makeText(mContext,""String_Node_Str"" + card.getTag(),Toast.LENGTH_SHORT).show();
    }
  }
);
  mListView.addOnItemTouchListener(new RecyclerItemClickListener.OnItemClickListener(){
    @Override public void onItemClick(    @NonNull Card card,    int position){
      Log.d(""String_Node_Str"",""String_Node_Str"" + card.getTag());
    }
    @Override public void onItemLongClick(    @NonNull Card card,    int position){
      Log.d(""String_Node_Str"",""String_Node_Str"" + card.getTag());
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mContext=this;
  mListView=(MaterialListView)findViewById(R.id.material_listview);
  mListView.setItemAnimator(new SlideInLeftAnimator());
  mListView.getItemAnimator().setAddDuration(300);
  mListView.getItemAnimator().setRemoveDuration(300);
  final ImageView emptyView=(ImageView)findViewById(R.id.imageView);
  emptyView.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
  mListView.setEmptyView(emptyView);
  Picasso.with(this).load(""String_Node_Str"").resize(100,100).centerInside().into(emptyView);
  fillArray();
  mListView.setOnDismissCallback(new OnDismissCallback(){
    @Override public void onDismiss(    @NonNull Card card,    int position){
      Toast.makeText(mContext,""String_Node_Str"" + card.getTag(),Toast.LENGTH_SHORT).show();
    }
  }
);
  mListView.addOnItemTouchListener(new RecyclerItemClickListener.OnItemClickListener(){
    @Override public void onItemClick(    @NonNull Card card,    int position){
      Log.d(""String_Node_Str"",""String_Node_Str"" + card.getTag());
    }
    @Override public void onItemLongClick(    @NonNull Card card,    int position){
      Log.d(""String_Node_Str"",""String_Node_Str"" + card.getTag());
    }
  }
);
}",0.9784283513097072
162721,"/** 
 * Renders the content and style of the card to the view.
 * @param view to display the content and style on.
 * @param card to render.
 */
@SuppressWarnings(""String_Node_Str"") public void render(@NonNull final View view,@NonNull final Card card){
  final CardView cardView=findViewById(view,R.id.cardView,CardView.class);
  if (cardView != null) {
    cardView.setBackgroundColor(getBackgroundColor());
  }
  final TextView title=findViewById(view,R.id.title,TextView.class);
  if (title != null) {
    title.setText(getTitle());
    title.setTextColor(getTitleColor());
  }
  final TextView subtitle=findViewById(view,R.id.subtitle,TextView.class);
  if (subtitle != null) {
    subtitle.setText(getSubtitle());
    subtitle.setTextColor(getSubtitleColor());
    if (getSubtitle() == null || getSubtitle().isEmpty()) {
      subtitle.setVisibility(View.GONE);
    }
 else {
      subtitle.setVisibility(View.VISIBLE);
    }
  }
  final TextView supportingText=findViewById(view,R.id.supportingText,TextView.class);
  if (supportingText != null) {
    supportingText.setText(getDescription());
    supportingText.setTextColor(getDescriptionColor());
  }
  final ImageView imageView=findViewById(view,R.id.image,ImageView.class);
  if (imageView != null) {
    if (getDrawable() != null) {
      imageView.setImageDrawable(getDrawable());
    }
 else {
      final RequestCreator requestCreator=Picasso.with(getContext()).load(getImageUrl());
      if (getOnImageConfigListenerListener() != null) {
        getOnImageConfigListenerListener().onImageConfigure(requestCreator);
      }
      requestCreator.into(imageView);
    }
  }
  final View divider=findViewById(view,R.id.divider,View.class);
  if (divider != null) {
    divider.setVisibility(isDividerVisible() ? View.VISIBLE : View.INVISIBLE);
    if (isDividerVisible()) {
      final ViewGroup.MarginLayoutParams params=(ViewGroup.MarginLayoutParams)divider.getLayoutParams();
      if (isFullWidthDivider()) {
        params.setMargins(0,0,0,0);
      }
 else {
        int dividerMarginPx=dpToPx(DIVIDER_MARGIN_DP);
        params.setMargins(dividerMarginPx,0,dividerMarginPx,0);
      }
    }
  }
  for (  final Map.Entry<Integer,Action> entry : mActionMapping.entrySet()) {
    final View actionViewRaw=findViewById(view,entry.getKey(),View.class);
    if (actionViewRaw != null) {
      final Action action=entry.getValue();
      action.setProvider(this);
      action.onRender(actionViewRaw,card);
    }
  }
}","/** 
 * Renders the content and style of the card to the view.
 * @param view to display the content and style on.
 * @param card to render.
 */
@SuppressWarnings(""String_Node_Str"") public void render(@NonNull final View view,@NonNull final Card card){
  final CardView cardView=findViewById(view,R.id.cardView,CardView.class);
  if (cardView != null) {
    cardView.setCardBackgroundColor(getBackgroundColor());
  }
  final TextView title=findViewById(view,R.id.title,TextView.class);
  if (title != null) {
    title.setText(getTitle());
    title.setTextColor(getTitleColor());
  }
  final TextView subtitle=findViewById(view,R.id.subtitle,TextView.class);
  if (subtitle != null) {
    subtitle.setText(getSubtitle());
    subtitle.setTextColor(getSubtitleColor());
    if (getSubtitle() == null || getSubtitle().isEmpty()) {
      subtitle.setVisibility(View.GONE);
    }
 else {
      subtitle.setVisibility(View.VISIBLE);
    }
  }
  final TextView supportingText=findViewById(view,R.id.supportingText,TextView.class);
  if (supportingText != null) {
    supportingText.setText(getDescription());
    supportingText.setTextColor(getDescriptionColor());
  }
  final ImageView imageView=findViewById(view,R.id.image,ImageView.class);
  if (imageView != null) {
    if (getDrawable() != null) {
      imageView.setImageDrawable(getDrawable());
    }
 else {
      final RequestCreator requestCreator=Picasso.with(getContext()).load(getImageUrl());
      if (getOnImageConfigListenerListener() != null) {
        getOnImageConfigListenerListener().onImageConfigure(requestCreator);
      }
      requestCreator.into(imageView);
    }
  }
  final View divider=findViewById(view,R.id.divider,View.class);
  if (divider != null) {
    divider.setVisibility(isDividerVisible() ? View.VISIBLE : View.INVISIBLE);
    if (isDividerVisible()) {
      final ViewGroup.MarginLayoutParams params=(ViewGroup.MarginLayoutParams)divider.getLayoutParams();
      if (isFullWidthDivider()) {
        params.setMargins(0,0,0,0);
      }
 else {
        int dividerMarginPx=dpToPx(DIVIDER_MARGIN_DP);
        params.setMargins(dividerMarginPx,0,dividerMarginPx,0);
      }
    }
  }
  for (  final Map.Entry<Integer,Action> entry : mActionMapping.entrySet()) {
    final View actionViewRaw=findViewById(view,entry.getKey(),View.class);
    if (actionViewRaw != null) {
      final Action action=entry.getValue();
      action.setProvider(this);
      action.onRender(actionViewRaw,card);
    }
  }
}",0.999194198227236
162722,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mContext=this;
  mListView=(MaterialListView)findViewById(R.id.material_listview);
  mListView.setCardAnimation(MaterialListView.CardAnimation.SWING_BOTTOM_IN);
  fillArray();
  mListView.setOnDismissCallback(new OnDismissCallback(){
    @Override public void onDismiss(    Card card,    int position){
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mContext=this;
  View view=findViewById(R.id.material_listview);
  if (view instanceof MaterialListView) {
    mListView=(MaterialListView)view;
  }
 else {
    mListView=(MaterialStaggeredGridView)view;
  }
  mListView.setCardAnimation(MaterialListView.CardAnimation.SWING_BOTTOM_IN);
  fillArray();
  mListView.setOnDismissCallback(new OnDismissCallback(){
    @Override public void onDismiss(    Card card,    int position){
    }
  }
);
}",0.8347659980897804
162723,"private void fillArray(){
  for (int i=0; i < 35; i++) {
    Card card=getRandomCard(i);
    mListView.getAdapter().add(card);
  }
}","private void fillArray(){
  for (int i=0; i < 35; i++) {
    Card card=getRandomCard(i);
    mListView.add(card);
  }
}",0.9482071713147412
162724,"private Card getRandomCard(final int position){
  String title=""String_Node_Str"" + (position + 1);
  String description=""String_Node_Str"";
  int type=position % 6;
  final Card card;
  Drawable icon;
switch (type) {
case 0:
    card=new SmallImageCard();
  card.setDescription(description);
card.setTitle(title);
icon=getResources().getDrawable(R.drawable.ic_launcher);
card.setBitmap(icon);
return card;
case 1:
card=new BigImageCard();
card.setDescription(description);
card.setTitle(title);
icon=getResources().getDrawable(R.drawable.photo);
card.setBitmap(icon);
card.setCanDismiss(false);
return card;
case 2:
card=new BasicImageButtonsCard();
card.setDescription(description);
card.setTitle(title);
icon=getResources().getDrawable(R.drawable.dog);
card.setBitmap(icon);
((BasicImageButtonsCard)card).setLeftButtonText(""String_Node_Str"");
((BasicImageButtonsCard)card).setRightButtonText(""String_Node_Str"");
if (position % 2 == 0) ((BasicImageButtonsCard)card).setShowDivider(true);
((BasicImageButtonsCard)card).setOnLeftButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(TextView textView){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
mListView.getAdapter().getItem(0).setTitle(""String_Node_Str"");
mListView.getAdapter().notifyDataSetChanged();
}
}
);
((BasicImageButtonsCard)card).setOnRightButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(TextView textView){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
card.dismiss();
}
}
);
return card;
case 3:
card=new BasicButtonsCard();
card.setDescription(description);
card.setTitle(title);
((BasicButtonsCard)card).setLeftButtonText(""String_Node_Str"");
((BasicButtonsCard)card).setRightButtonText(""String_Node_Str"");
if (position % 2 == 0) ((BasicButtonsCard)card).setShowDivider(true);
((BasicButtonsCard)card).setOnLeftButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(TextView textView){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
);
((BasicButtonsCard)card).setOnRightButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(TextView textView){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
);
return card;
case 4:
card=new WelcomeCard();
card.setTitle(""String_Node_Str"");
card.setDescription(""String_Node_Str"");
((WelcomeCard)card).setSubtitle(""String_Node_Str"");
((WelcomeCard)card).setButtonText(""String_Node_Str"");
((WelcomeCard)card).setOnButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(TextView textView){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
);
if (position % 2 == 0) ((WelcomeCard)card).setBackgroundColorFromId(mContext,R.color.background_material_dark);
return card;
case 5:
card=new BasicListCard();
card.setTitle(""String_Node_Str"");
card.setDescription(""String_Node_Str"");
((BasicListCard)card).addAllItems(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
((BasicListCard)card).setOnItemClickListener(new AdapterView.OnItemClickListener(){
@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
CheckedTextView checkedTextView=(CheckedTextView)view;
checkedTextView.setChecked(!checkedTextView.isChecked());
}
}
);
return card;
default :
card=new BigImageButtonsCard();
card.setDescription(description);
card.setTitle(title);
icon=getResources().getDrawable(R.drawable.photo);
card.setBitmap(icon);
((BigImageButtonsCard)card).setLeftButtonText(""String_Node_Str"");
((BigImageButtonsCard)card).setRightButtonText(""String_Node_Str"");
if (position % 2 == 0) {
((BigImageButtonsCard)card).setShowDivider(true);
}
((BigImageButtonsCard)card).setOnLeftButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(TextView textView){
Log.d(""String_Node_Str"",""String_Node_Str"");
mListView.getAdapter().add(generateNewCard());
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
);
((BigImageButtonsCard)card).setOnRightButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(TextView textView){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
);
return card;
}
}","private Card getRandomCard(final int position){
  String title=""String_Node_Str"" + (position + 1);
  String description=""String_Node_Str"";
  int type=position % 6;
  final Card card;
  Drawable icon;
switch (type) {
case 0:
    card=new SmallImageCard();
  card.setDescription(description);
card.setTitle(title);
icon=getResources().getDrawable(R.drawable.ic_launcher);
card.setBitmap(icon);
return card;
case 1:
card=new BigImageCard();
card.setDescription(description);
card.setTitle(title);
icon=getResources().getDrawable(R.drawable.photo);
card.setBitmap(icon);
card.setDismissible(false);
return card;
case 2:
card=new BasicImageButtonsCard();
card.setDescription(description);
card.setTitle(title);
icon=getResources().getDrawable(R.drawable.dog);
card.setBitmap(icon);
((BasicImageButtonsCard)card).setLeftButtonText(""String_Node_Str"");
((BasicImageButtonsCard)card).setRightButtonText(""String_Node_Str"");
if (position % 2 == 0) ((BasicImageButtonsCard)card).setShowDivider(true);
((BasicImageButtonsCard)card).setOnLeftButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(TextView textView){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
mListView.getCard(0).setTitle(""String_Node_Str"");
mListView.notifyDataSetChanged();
}
}
);
((BasicImageButtonsCard)card).setOnRightButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(TextView textView){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
card.dismiss();
}
}
);
return card;
case 3:
card=new BasicButtonsCard();
card.setDescription(description);
card.setTitle(title);
((BasicButtonsCard)card).setLeftButtonText(""String_Node_Str"");
((BasicButtonsCard)card).setRightButtonText(""String_Node_Str"");
if (position % 2 == 0) ((BasicButtonsCard)card).setShowDivider(true);
((BasicButtonsCard)card).setOnLeftButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(TextView textView){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
);
((BasicButtonsCard)card).setOnRightButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(TextView textView){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
);
return card;
case 4:
card=new WelcomeCard();
card.setTitle(""String_Node_Str"");
card.setDescription(""String_Node_Str"");
((WelcomeCard)card).setSubtitle(""String_Node_Str"");
((WelcomeCard)card).setButtonText(""String_Node_Str"");
((WelcomeCard)card).setOnButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(TextView textView){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
);
if (position % 2 == 0) ((WelcomeCard)card).setBackgroundColorFromId(mContext,R.color.background_material_dark);
return card;
case 5:
card=new BasicListCard();
card.setTitle(""String_Node_Str"");
card.setDescription(""String_Node_Str"");
((BasicListCard)card).addAllItems(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
((BasicListCard)card).setOnItemClickListener(new AdapterView.OnItemClickListener(){
@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
boolean checked=((BasicListCard)card).isItemChecked(((BasicListCard)card).getItems().get(position));
((BasicListCard)card).setItemChecked(position,!checked);
}
}
);
return card;
default :
card=new BigImageButtonsCard();
card.setDescription(description);
card.setTitle(title);
icon=getResources().getDrawable(R.drawable.photo);
card.setBitmap(icon);
((BigImageButtonsCard)card).setLeftButtonText(""String_Node_Str"");
((BigImageButtonsCard)card).setRightButtonText(""String_Node_Str"");
if (position % 2 == 0) {
((BigImageButtonsCard)card).setShowDivider(true);
}
((BigImageButtonsCard)card).setOnLeftButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(TextView textView){
Log.d(""String_Node_Str"",""String_Node_Str"");
mListView.add(generateNewCard());
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
);
((BigImageButtonsCard)card).setOnRightButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(TextView textView){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
);
return card;
}
}",0.9694403113196748
162725,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  CheckedTextView checkedTextView=(CheckedTextView)view;
  checkedTextView.setChecked(!checkedTextView.isChecked());
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  boolean checked=((BasicListCard)card).isItemChecked(((BasicListCard)card).getItems().get(position));
  ((BasicListCard)card).setItemChecked(position,!checked);
}",0.4749455337690632
162726,"public void setMaterialListViewAdapter(MaterialListViewAdapter adapter){
  BusProvider.getInstance().register(this);
  mAdapter=adapter;
  setAdapter(mAdapter);
  setDivider(null);
  setDividerHeight(8);
  setDefaultListeners();
}","public void setMaterialListViewAdapter(MaterialListViewAdapter adapter){
  mAdapter=adapter;
  setAdapter(mAdapter);
  setDivider(null);
  setDividerHeight(8);
  setDefaultListeners();
}",0.8942307692307693
162727,"private Card getRandomCard(final int position){
  String title=""String_Node_Str"" + (position + 1);
  String description=""String_Node_Str"";
  int type=position % 6;
  final Card card;
  Drawable icon;
switch (type) {
case 0:
    card=new SmallImageCard();
  card.setDescription(description);
card.setTitle(title);
icon=getResources().getDrawable(R.drawable.ic_launcher);
card.setBitmap(icon);
return card;
case 1:
card=new BigImageCard();
card.setDescription(description);
card.setTitle(title);
icon=getResources().getDrawable(R.drawable.photo);
card.setBitmap(icon);
card.setDismissible(false);
return card;
case 2:
card=new BasicImageButtonsCard();
card.setDescription(description);
card.setTitle(title);
icon=getResources().getDrawable(R.drawable.dog);
card.setBitmap(icon);
((BasicImageButtonsCard)card).setLeftButtonText(""String_Node_Str"");
((BasicImageButtonsCard)card).setRightButtonText(""String_Node_Str"");
if (position % 2 == 0) ((BasicImageButtonsCard)card).setShowDivider(true);
((BasicImageButtonsCard)card).setOnLeftButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(TextView textView){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
mListView.getCard(0).setTitle(""String_Node_Str"");
mListView.notifyDataSetChanged();
}
}
);
((BasicImageButtonsCard)card).setOnRightButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(TextView textView){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
card.dismiss();
}
}
);
return card;
case 3:
card=new BasicButtonsCard();
card.setDescription(description);
card.setTitle(title);
((BasicButtonsCard)card).setLeftButtonText(""String_Node_Str"");
((BasicButtonsCard)card).setRightButtonText(""String_Node_Str"");
if (position % 2 == 0) ((BasicButtonsCard)card).setShowDivider(true);
((BasicButtonsCard)card).setOnLeftButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(TextView textView){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
);
((BasicButtonsCard)card).setOnRightButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(TextView textView){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
);
return card;
case 4:
card=new WelcomeCard();
card.setTitle(""String_Node_Str"");
card.setDescription(""String_Node_Str"");
((WelcomeCard)card).setSubtitle(""String_Node_Str"");
((WelcomeCard)card).setButtonText(""String_Node_Str"");
((WelcomeCard)card).setOnButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(TextView textView){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
);
if (position % 2 == 0) ((WelcomeCard)card).setBackgroundColorFromId(mContext,R.color.background_material_dark);
return card;
case 5:
card=new BasicListCard();
card.setTitle(""String_Node_Str"");
card.setDescription(""String_Node_Str"");
((BasicListCard)card).addItem(""String_Node_Str"");
((BasicListCard)card).addAllItems(""String_Node_Str"",""String_Node_Str"");
((BasicListCard)card).setOnItemClickListener(new AdapterView.OnItemClickListener(){
@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
boolean checked=((BasicListCard)card).isItemChecked(((BasicListCard)card).getItems().get(position));
((BasicListCard)card).setItemChecked(position,!checked);
}
}
);
return card;
default :
card=new BigImageButtonsCard();
card.setDescription(description);
card.setTitle(title);
icon=getResources().getDrawable(R.drawable.photo);
card.setBitmap(icon);
((BigImageButtonsCard)card).setLeftButtonText(""String_Node_Str"");
((BigImageButtonsCard)card).setRightButtonText(""String_Node_Str"");
if (position % 2 == 0) {
((BigImageButtonsCard)card).setShowDivider(true);
}
((BigImageButtonsCard)card).setOnLeftButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(TextView textView){
Log.d(""String_Node_Str"",""String_Node_Str"");
mListView.add(generateNewCard());
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
);
((BigImageButtonsCard)card).setOnRightButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(TextView textView){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
);
return card;
}
}","private Card getRandomCard(final int position){
  String title=""String_Node_Str"" + (position + 1);
  String description=""String_Node_Str"";
  int type=position % 6;
  final Card card;
  Drawable icon;
switch (type) {
case 0:
    card=new SmallImageCard(this);
  card.setDescription(description);
card.setTitle(title);
icon=getResources().getDrawable(R.drawable.ic_launcher);
card.setBitmap(icon);
return card;
case 1:
card=new BigImageCard(this);
card.setDescription(description);
card.setTitle(title);
icon=getResources().getDrawable(R.drawable.photo);
card.setBitmap(icon);
card.setDismissible(false);
return card;
case 2:
card=new BasicImageButtonsCard(this);
card.setDescription(description);
card.setTitle(title);
icon=getResources().getDrawable(R.drawable.dog);
card.setBitmap(icon);
((BasicImageButtonsCard)card).setLeftButtonText(""String_Node_Str"");
((BasicImageButtonsCard)card).setRightButtonText(""String_Node_Str"");
if (position % 2 == 0) ((BasicImageButtonsCard)card).setDividerVisible(true);
((BasicImageButtonsCard)card).setOnLeftButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(View view,Card card){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
mListView.getCard(0).setTitle(""String_Node_Str"");
mListView.notifyDataSetChanged();
}
}
);
((BasicImageButtonsCard)card).setOnRightButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(View view,Card card){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
card.dismiss();
}
}
);
return card;
case 3:
card=new BasicButtonsCard(this);
card.setDescription(description);
card.setTitle(title);
((BasicButtonsCard)card).setLeftButtonText(""String_Node_Str"");
((BasicButtonsCard)card).setRightButtonText(""String_Node_Str"");
if (position % 2 == 0) ((BasicButtonsCard)card).setDividerVisible(true);
((BasicButtonsCard)card).setOnLeftButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(View view,Card card){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
);
((BasicButtonsCard)card).setOnRightButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(View view,Card card){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
);
return card;
case 4:
card=new WelcomeCard(this);
card.setTitle(""String_Node_Str"");
card.setDescription(""String_Node_Str"");
((WelcomeCard)card).setSubtitle(""String_Node_Str"");
((WelcomeCard)card).setButtonText(""String_Node_Str"");
((WelcomeCard)card).setOnButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(View view,Card card){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
);
if (position % 2 == 0) ((WelcomeCard)card).setBackgroundColorRes(R.color.background_material_dark);
return card;
case 5:
card=new BasicListCard(this);
card.setTitle(""String_Node_Str"");
card.setDescription(""String_Node_Str"");
BasicListAdapter adapter=new BasicListAdapter(this);
adapter.add(""String_Node_Str"");
adapter.add(""String_Node_Str"");
adapter.add(""String_Node_Str"");
((BasicListCard)card).setAdapter(adapter);
return card;
default :
card=new BigImageButtonsCard(this);
card.setDescription(description);
card.setTitle(title);
icon=getResources().getDrawable(R.drawable.photo);
card.setBitmap(icon);
((BigImageButtonsCard)card).setLeftButtonText(""String_Node_Str"");
((BigImageButtonsCard)card).setRightButtonText(""String_Node_Str"");
if (position % 2 == 0) {
((BigImageButtonsCard)card).setDividerVisible(true);
}
((BigImageButtonsCard)card).setOnLeftButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(View view,Card card){
Log.d(""String_Node_Str"",""String_Node_Str"");
mListView.add(generateNewCard());
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
);
((BigImageButtonsCard)card).setOnRightButtonPressedListener(new OnButtonPressListener(){
@Override public void onButtonPressedListener(View view,Card card){
Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
);
return card;
}
}",0.7891362629677119
162728,"private Card generateNewCard(){
  Card card=new BasicImageButtonsCard();
  card.setBitmap(mContext,R.drawable.dog);
  card.setTitle(""String_Node_Str"");
  card.setDescription(""String_Node_Str"");
  return card;
}","private Card generateNewCard(){
  Card card=new BasicImageButtonsCard(this);
  card.setBitmap(mContext,R.drawable.dog);
  card.setTitle(""String_Node_Str"");
  card.setDescription(""String_Node_Str"");
  return card;
}",0.9905660377358492
162729,"@Override public void onButtonPressedListener(TextView textView){
  Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}","@Override public void onButtonPressedListener(View view,Card card){
  Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}",0.9285714285714286
162730,"@Override public boolean onTouch(View view,MotionEvent motionEvent){
  if (mViewWidth < 2) {
    mViewWidth=mListView.getWidth();
  }
switch (motionEvent.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
{
      if (mPaused) {
        return false;
      }
      Rect rect=new Rect();
      int childCount=mListView.getChildCount();
      int[] listViewCoords=new int[2];
      mListView.getLocationOnScreen(listViewCoords);
      int x=(int)motionEvent.getRawX() - listViewCoords[0];
      int y=(int)motionEvent.getRawY() - listViewCoords[1];
      View child;
      for (int i=0; i < childCount; i++) {
        child=mListView.getChildAt(i);
        child.getHitRect(rect);
        if (rect.contains(x,y)) {
          mDownView=child;
          break;
        }
      }
      if (mDownView != null) {
        mDownX=motionEvent.getRawX();
        Card card=(Card)mDownView.getTag();
        mDownPosition=mListView.getPosition(card);
        mVelocityTracker=VelocityTracker.obtain();
        mVelocityTracker.addMovement(motionEvent);
      }
      view.onTouchEvent(motionEvent);
      return true;
    }
case MotionEvent.ACTION_UP:
{
    if (mVelocityTracker == null) {
      break;
    }
    float deltaX=motionEvent.getRawX() - mDownX;
    mVelocityTracker.addMovement(motionEvent);
    mVelocityTracker.computeCurrentVelocity(1000);
    float velocityX=Math.abs(mVelocityTracker.getXVelocity());
    float velocityY=Math.abs(mVelocityTracker.getYVelocity());
    boolean dismiss=false;
    boolean dismissRight=false;
    if (Math.abs(deltaX) > mViewWidth / 2) {
      dismiss=true;
      dismissRight=deltaX > 0;
    }
 else     if (mMinFlingVelocity <= velocityX && velocityX <= mMaxFlingVelocity && velocityY < velocityX) {
      dismiss=true;
      dismissRight=mVelocityTracker.getXVelocity() > 0;
    }
    if (dismiss && isCurrentItemDismissable()) {
      final View downView=mDownView;
      final int downPosition=mDownPosition;
      ++mDismissAnimationRefCount;
      animate(mDownView).translationX(dismissRight ? mViewWidth : -mViewWidth).alpha(0).setDuration(mAnimationTime).setListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          performDismiss(downView,downPosition);
        }
      }
);
    }
 else {
      animate(mDownView).translationX(0).alpha(1).setDuration(mAnimationTime).setListener(null);
    }
    mVelocityTracker=null;
    mDownX=0;
    mDownView=null;
    mDownPosition=ListView.INVALID_POSITION;
    mSwiping=false;
    break;
  }
case MotionEvent.ACTION_MOVE:
{
  if (mDownPosition != ListView.INVALID_POSITION) {
    if (mListView.getAdapter().getItem(mDownPosition).isDismissible()) {
      if (mVelocityTracker == null || mPaused) {
        break;
      }
      mVelocityTracker.addMovement(motionEvent);
      float deltaX=motionEvent.getRawX() - mDownX;
      if (Math.abs(deltaX) > mSlop) {
        mSwiping=true;
        mListView.requestDisallowInterceptTouchEvent(true);
        MotionEvent cancelEvent=MotionEvent.obtain(motionEvent);
        cancelEvent.setAction(MotionEvent.ACTION_CANCEL | (motionEvent.getActionIndex() << MotionEvent.ACTION_POINTER_INDEX_SHIFT));
        mListView.onTouchEvent(cancelEvent);
      }
      if (mSwiping) {
        setTranslationX(mDownView,deltaX);
        setAlpha(mDownView,Math.max(0f,Math.min(1f,1f - 2f * Math.abs(deltaX) / mViewWidth)));
        return true;
      }
      break;
    }
  }
}
}
return false;
}","@Override public boolean onTouch(View view,MotionEvent motionEvent){
  if (mListView.getAdapter().isEmpty()) {
    return false;
  }
  if (mViewWidth < 2) {
    mViewWidth=mListView.getWidth();
  }
switch (motionEvent.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
{
      if (mPaused) {
        return false;
      }
      Rect rect=new Rect();
      int childCount=mListView.getChildCount();
      int[] listViewCoords=new int[2];
      mListView.getLocationOnScreen(listViewCoords);
      int x=(int)motionEvent.getRawX() - listViewCoords[0];
      int y=(int)motionEvent.getRawY() - listViewCoords[1];
      View child;
      for (int i=0; i < childCount; i++) {
        child=mListView.getChildAt(i);
        child.getHitRect(rect);
        if (rect.contains(x,y)) {
          mDownView=child;
          break;
        }
      }
      if (mDownView != null) {
        mDownX=motionEvent.getRawX();
        Card card=(Card)mDownView.getTag();
        mDownPosition=mListView.getPosition(card);
        mVelocityTracker=VelocityTracker.obtain();
        mVelocityTracker.addMovement(motionEvent);
      }
      view.onTouchEvent(motionEvent);
      return true;
    }
case MotionEvent.ACTION_UP:
{
    if (mVelocityTracker == null) {
      break;
    }
    float deltaX=motionEvent.getRawX() - mDownX;
    mVelocityTracker.addMovement(motionEvent);
    mVelocityTracker.computeCurrentVelocity(1000);
    float velocityX=Math.abs(mVelocityTracker.getXVelocity());
    float velocityY=Math.abs(mVelocityTracker.getYVelocity());
    boolean dismiss=false;
    boolean dismissRight=false;
    if (Math.abs(deltaX) > mViewWidth / 2) {
      dismiss=true;
      dismissRight=deltaX > 0;
    }
 else     if (mMinFlingVelocity <= velocityX && velocityX <= mMaxFlingVelocity && velocityY < velocityX) {
      dismiss=true;
      dismissRight=mVelocityTracker.getXVelocity() > 0;
    }
    if (dismiss && isCurrentItemDismissable()) {
      final View downView=mDownView;
      final int downPosition=mDownPosition;
      ++mDismissAnimationRefCount;
      animate(mDownView).translationX(dismissRight ? mViewWidth : -mViewWidth).alpha(0).setDuration(mAnimationTime).setListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          performDismiss(downView,downPosition);
        }
      }
);
    }
 else {
      animate(mDownView).translationX(0).alpha(1).setDuration(mAnimationTime).setListener(null);
    }
    mVelocityTracker=null;
    mDownX=0;
    mDownView=null;
    mDownPosition=ListView.INVALID_POSITION;
    mSwiping=false;
    break;
  }
case MotionEvent.ACTION_MOVE:
{
  if (mDownPosition != ListView.INVALID_POSITION) {
    if (mListView.getAdapter().getItem(mDownPosition).isDismissible()) {
      if (mVelocityTracker == null || mPaused) {
        break;
      }
      mVelocityTracker.addMovement(motionEvent);
      float deltaX=motionEvent.getRawX() - mDownX;
      if (Math.abs(deltaX) > mSlop) {
        mSwiping=true;
        mListView.requestDisallowInterceptTouchEvent(true);
        MotionEvent cancelEvent=MotionEvent.obtain(motionEvent);
        cancelEvent.setAction(MotionEvent.ACTION_CANCEL | (motionEvent.getActionIndex() << MotionEvent.ACTION_POINTER_INDEX_SHIFT));
        mListView.onTouchEvent(cancelEvent);
      }
      if (mSwiping) {
        setTranslationX(mDownView,deltaX);
        setAlpha(mDownView,Math.max(0f,Math.min(1f,1f - 2f * Math.abs(deltaX) / mViewWidth)));
        return true;
      }
      break;
    }
  }
}
}
return false;
}",0.9908805927614706
162731,"@Override public View getView(int position,View convertView,ViewGroup viewGroup){
  if (convertView == null) {
    boolean found=false;
    for (int i=0; i < mClassList.size() && !found; i++) {
      if (mClassList.get(i).isInstance(getItem(position))) {
        convertView=View.inflate(mContext,getItem(position).getLayout(),null);
        found=true;
      }
    }
  }
  ((GridItemView)convertView).configureView(getItem(position));
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup viewGroup){
  if (convertView == null) {
    boolean found=false;
    for (int i=0; i < mClassList.size() && !found; i++) {
      if (mClassList.get(i).isInstance(getItem(position))) {
        convertView=View.inflate(mContext,getItem(position).getLayout(),null);
        found=true;
      }
    }
  }
 else {
    if (mDeletedList.contains(getItem(position).getClass())) {
      convertView=View.inflate(mContext,getItem(position).getLayout(),null);
    }
  }
  ((GridItemView)convertView).configureView(getItem(position));
  return convertView;
}",0.8531598513011153
162732,"public void remove(Card card){
  if (mCardList != null)   mCardList.remove(card);
  notifyDataSetChanged();
}","public void remove(Card card){
  if (mCardList != null) {
    if (!mDeletedList.contains(card.getClass())) {
      mDeletedList.add(card.getClass());
      Log.d(""String_Node_Str"",card.getClass().toString());
    }
    mCardList.remove(card);
  }
  notifyDataSetChanged();
}",0.5691906005221932
162733,"public static Typeface findFont(Context context,String fontName,String defaultFont){
  if (cachedFontMap.containsKey(fontName)) {
    return cachedFontMap.get(fontName);
  }
 else {
    try {
      AssetManager assets=context.getResources().getAssets();
      if (Arrays.asList(assets.list(""String_Node_Str"")).contains(fontName)) {
        Typeface typeface=Typeface.createFromAsset(context.getAssets(),String.format(""String_Node_Str"",fontName));
        cachedFontMap.put(fontName,typeface);
        return typeface;
      }
 else       if (Arrays.asList(assets.list(""String_Node_Str"")).contains(fontName)) {
        Typeface typeface=Typeface.createFromAsset(context.getAssets(),String.format(""String_Node_Str"",fontName));
        cachedFontMap.put(fontName,typeface);
        return typeface;
      }
 else       if (Arrays.asList(assets.list(""String_Node_Str"")).contains(fontName)) {
        Typeface typeface=Typeface.createFromAsset(context.getAssets(),String.format(""String_Node_Str"",fontName));
        cachedFontMap.put(fontName,typeface);
        return typeface;
      }
 else {
        throw new Exception(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      if (!TextUtils.isEmpty(defaultFont)) {
        Typeface typeface=Typeface.createFromAsset(context.getAssets(),String.format(""String_Node_Str"",defaultFont));
        cachedFontMap.put(fontName,typeface);
        return typeface;
      }
 else {
        return Typeface.DEFAULT;
      }
    }
  }
}","public static Typeface findFont(Context context,String fonPath,String defaultFontPath){
  String fontName=new File(fonPath).getName();
  String defaultFontName=""String_Node_Str"";
  if (!TextUtils.isEmpty(defaultFontPath)) {
    defaultFontName=new File(defaultFontPath).getName();
  }
  if (cachedFontMap.containsKey(fontName)) {
    return cachedFontMap.get(fontName);
  }
 else {
    try {
      AssetManager assets=context.getResources().getAssets();
      if (Arrays.asList(assets.list(""String_Node_Str"")).contains(fonPath)) {
        Typeface typeface=Typeface.createFromAsset(context.getAssets(),fontName);
        cachedFontMap.put(fontName,typeface);
        return typeface;
      }
 else       if (Arrays.asList(assets.list(""String_Node_Str"")).contains(fontName)) {
        Typeface typeface=Typeface.createFromAsset(context.getAssets(),String.format(""String_Node_Str"",fontName));
        cachedFontMap.put(fontName,typeface);
        return typeface;
      }
 else       if (Arrays.asList(assets.list(""String_Node_Str"")).contains(fontName)) {
        Typeface typeface=Typeface.createFromAsset(context.getAssets(),String.format(""String_Node_Str"",fontName));
        cachedFontMap.put(fontName,typeface);
        return typeface;
      }
 else       if (!TextUtils.isEmpty(defaultFontPath) && Arrays.asList(assets.list(""String_Node_Str"")).contains(defaultFontPath)) {
        Typeface typeface=Typeface.createFromAsset(context.getAssets(),defaultFontPath);
        cachedFontMap.put(defaultFontName,typeface);
        return typeface;
      }
 else {
        throw new Exception(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      return Typeface.DEFAULT;
    }
  }
}",0.718562874251497
162734,"/** 
 * Setup Text View
 * @return : TextView
 */
private TextView setupTextView(){
  if (mText != null) {
    TextView textView=new TextView(mContext);
    textView.setText(mText);
    textView.setGravity(mDefaultTextGravity);
    textView.setTextColor(mDefaultTextColor);
    textView.setTextSize(mDefaultTextSize);
    textView.setLayoutParams(new TableLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT,1f));
    if (!isInEditMode() && mTextTypeFace != null) {
      textView.setTypeface(mTextTypeFace);
    }
    return textView;
  }
  return null;
}","/** 
 * Setup Text View
 * @return : TextView
 */
private TextView setupTextView(){
  if (mText != null) {
    TextView textView=new TextView(mContext);
    textView.setText(mText);
    textView.setGravity(mDefaultTextGravity);
    textView.setTextColor(mDefaultTextColor);
    textView.setTextSize(mDefaultTextSize);
    textView.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
    if (!isInEditMode() && mTextTypeFace != null) {
      textView.setTypeface(mTextTypeFace);
    }
    return textView;
  }
  return null;
}",0.9428320140721196
162735,"/** 
 * Initialize button container
 */
private void initializeButtonContainer(){
  if (mIconPosition == POSITION_TOP || mIconPosition == POSITION_BOTTOM) {
    this.setOrientation(LinearLayout.VERTICAL);
  }
 else {
    this.setOrientation(LinearLayout.HORIZONTAL);
  }
  LayoutParams containerParams=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  this.setLayoutParams(containerParams);
  this.setGravity(Gravity.CENTER_VERTICAL);
  this.setClickable(true);
  this.setFocusable(true);
  if (mIconResource == null && mFontIcon == null && getPaddingLeft() == 0 && getPaddingRight() == 0 && getPaddingTop() == 0 && getPaddingBottom() == 0) {
    this.setPadding(20,20,20,20);
  }
}","/** 
 * Initialize button container
 */
private void initializeButtonContainer(){
  if (mIconPosition == POSITION_TOP || mIconPosition == POSITION_BOTTOM) {
    this.setOrientation(LinearLayout.VERTICAL);
  }
 else {
    this.setOrientation(LinearLayout.HORIZONTAL);
  }
  LayoutParams containerParams=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  this.setLayoutParams(containerParams);
  this.setGravity(Gravity.CENTER);
  this.setClickable(true);
  this.setFocusable(true);
  if (mIconResource == null && mFontIcon == null && getPaddingLeft() == 0 && getPaddingRight() == 0 && getPaddingTop() == 0 && getPaddingBottom() == 0) {
    this.setPadding(20,20,20,20);
  }
}",0.9935760171306208
162736,"/** 
 * Setup Font Icon View
 * @return : TextView
 */
private TextView setupFontIconView(){
  if (mFontIcon != null) {
    TextView fontIconView=new TextView(mContext);
    fontIconView.setTextColor(mDefaultIconColor);
    LayoutParams iconTextViewParams=new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT,1f);
    iconTextViewParams.rightMargin=mIconPaddingRight;
    iconTextViewParams.leftMargin=mIconPaddingLeft;
    iconTextViewParams.topMargin=mIconPaddingTop;
    iconTextViewParams.bottomMargin=mIconPaddingBottom;
    if (mTextView != null) {
      if (mIconPosition == POSITION_TOP || mIconPosition == POSITION_BOTTOM) {
        iconTextViewParams.gravity=Gravity.CENTER;
        fontIconView.setGravity(Gravity.CENTER);
      }
 else {
        fontIconView.setGravity(Gravity.CENTER_VERTICAL);
        iconTextViewParams.gravity=Gravity.CENTER_VERTICAL;
      }
    }
 else {
      iconTextViewParams.gravity=Gravity.CENTER;
      fontIconView.setGravity(Gravity.CENTER_VERTICAL);
    }
    fontIconView.setLayoutParams(iconTextViewParams);
    if (!isInEditMode()) {
      fontIconView.setTextSize(mFontIconSize);
      fontIconView.setText(mFontIcon);
      fontIconView.setTypeface(mIconTypeFace);
    }
 else {
      fontIconView.setText(""String_Node_Str"");
    }
    return fontIconView;
  }
  return null;
}","/** 
 * Setup Font Icon View
 * @return : TextView
 */
private TextView setupFontIconView(){
  if (mFontIcon != null) {
    TextView fontIconView=new TextView(mContext);
    fontIconView.setTextColor(mDefaultIconColor);
    LayoutParams iconTextViewParams=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
    iconTextViewParams.rightMargin=mIconPaddingRight;
    iconTextViewParams.leftMargin=mIconPaddingLeft;
    iconTextViewParams.topMargin=mIconPaddingTop;
    iconTextViewParams.bottomMargin=mIconPaddingBottom;
    if (mTextView != null) {
      if (mIconPosition == POSITION_TOP || mIconPosition == POSITION_BOTTOM) {
        iconTextViewParams.gravity=Gravity.CENTER;
        fontIconView.setGravity(Gravity.CENTER);
      }
 else {
        fontIconView.setGravity(Gravity.CENTER_VERTICAL);
        iconTextViewParams.gravity=Gravity.CENTER_VERTICAL;
      }
    }
 else {
      iconTextViewParams.gravity=Gravity.CENTER;
      fontIconView.setGravity(Gravity.CENTER_VERTICAL);
    }
    fontIconView.setLayoutParams(iconTextViewParams);
    if (!isInEditMode()) {
      fontIconView.setTextSize(mFontIconSize);
      fontIconView.setText(mFontIcon);
      fontIconView.setTypeface(mIconTypeFace);
    }
 else {
      fontIconView.setText(""String_Node_Str"");
    }
    return fontIconView;
  }
  return null;
}",0.980245993291092
162737,"/** 
 * Setup Text View
 * @return : TextView
 */
private TextView setupTextView(){
  if (mText != null) {
    TextView textView=new TextView(mContext);
    textView.setText(mText);
    textView.setGravity(mDefaultTextGravity);
    textView.setTextColor(mDefaultTextColor);
    textView.setTextSize(mDefaultTextSize);
    textView.setLayoutParams(new TableLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT,1f));
    if (!isInEditMode() && mTextTypeFace != null) {
      textView.setTypeface(mTextTypeFace);
    }
    return textView;
  }
  return null;
}","/** 
 * Setup Text View
 * @return : TextView
 */
private TextView setupTextView(){
  if (mText != null) {
    TextView textView=new TextView(mContext);
    textView.setText(mText);
    textView.setGravity(mDefaultTextGravity);
    textView.setTextColor(mDefaultTextColor);
    textView.setTextSize(mDefaultTextSize);
    textView.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
    if (!isInEditMode() && mTextTypeFace != null) {
      textView.setTypeface(mTextTypeFace);
    }
    return textView;
  }
  return null;
}",0.9428320140721196
162738,"/** 
 * Initialize button container
 */
private void initializeButtonContainer(){
  if (mIconPosition == POSITION_TOP || mIconPosition == POSITION_BOTTOM) {
    this.setOrientation(LinearLayout.VERTICAL);
  }
 else {
    this.setOrientation(LinearLayout.HORIZONTAL);
  }
  LayoutParams containerParams=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  this.setLayoutParams(containerParams);
  this.setGravity(Gravity.CENTER_VERTICAL);
  this.setClickable(true);
  this.setFocusable(true);
  if (mIconResource == null && mFontIcon == null && getPaddingLeft() == 0 && getPaddingRight() == 0 && getPaddingTop() == 0 && getPaddingBottom() == 0) {
    this.setPadding(20,20,20,20);
  }
}","/** 
 * Initialize button container
 */
private void initializeButtonContainer(){
  if (mIconPosition == POSITION_TOP || mIconPosition == POSITION_BOTTOM) {
    this.setOrientation(LinearLayout.VERTICAL);
  }
 else {
    this.setOrientation(LinearLayout.HORIZONTAL);
  }
  LayoutParams containerParams=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  this.setLayoutParams(containerParams);
  this.setGravity(Gravity.CENTER);
  this.setClickable(true);
  this.setFocusable(true);
  if (mIconResource == null && mFontIcon == null && getPaddingLeft() == 0 && getPaddingRight() == 0 && getPaddingTop() == 0 && getPaddingBottom() == 0) {
    this.setPadding(20,20,20,20);
  }
}",0.9935760171306208
162739,"/** 
 * Setup Font Icon View
 * @return : TextView
 */
private TextView setupFontIconView(){
  if (mFontIcon != null) {
    TextView fontIconView=new TextView(mContext);
    fontIconView.setTextColor(mDefaultIconColor);
    LayoutParams iconTextViewParams=new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT,1f);
    iconTextViewParams.rightMargin=mIconPaddingRight;
    iconTextViewParams.leftMargin=mIconPaddingLeft;
    iconTextViewParams.topMargin=mIconPaddingTop;
    iconTextViewParams.bottomMargin=mIconPaddingBottom;
    if (mTextView != null) {
      if (mIconPosition == POSITION_TOP || mIconPosition == POSITION_BOTTOM) {
        iconTextViewParams.gravity=Gravity.CENTER;
        fontIconView.setGravity(Gravity.CENTER);
      }
 else {
        fontIconView.setGravity(Gravity.CENTER_VERTICAL);
        iconTextViewParams.gravity=Gravity.CENTER_VERTICAL;
      }
    }
 else {
      iconTextViewParams.gravity=Gravity.CENTER;
      fontIconView.setGravity(Gravity.CENTER_VERTICAL);
    }
    fontIconView.setLayoutParams(iconTextViewParams);
    if (!isInEditMode()) {
      fontIconView.setTextSize(mFontIconSize);
      fontIconView.setText(mFontIcon);
      fontIconView.setTypeface(mIconTypeFace);
    }
 else {
      fontIconView.setText(""String_Node_Str"");
    }
    return fontIconView;
  }
  return null;
}","/** 
 * Setup Font Icon View
 * @return : TextView
 */
private TextView setupFontIconView(){
  if (mFontIcon != null) {
    TextView fontIconView=new TextView(mContext);
    fontIconView.setTextColor(mDefaultIconColor);
    LayoutParams iconTextViewParams=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
    iconTextViewParams.rightMargin=mIconPaddingRight;
    iconTextViewParams.leftMargin=mIconPaddingLeft;
    iconTextViewParams.topMargin=mIconPaddingTop;
    iconTextViewParams.bottomMargin=mIconPaddingBottom;
    if (mTextView != null) {
      if (mIconPosition == POSITION_TOP || mIconPosition == POSITION_BOTTOM) {
        iconTextViewParams.gravity=Gravity.CENTER;
        fontIconView.setGravity(Gravity.CENTER);
      }
 else {
        fontIconView.setGravity(Gravity.CENTER_VERTICAL);
        iconTextViewParams.gravity=Gravity.CENTER_VERTICAL;
      }
    }
 else {
      iconTextViewParams.gravity=Gravity.CENTER;
      fontIconView.setGravity(Gravity.CENTER_VERTICAL);
    }
    fontIconView.setLayoutParams(iconTextViewParams);
    if (!isInEditMode()) {
      fontIconView.setTextSize(mFontIconSize);
      fontIconView.setText(mFontIcon);
      fontIconView.setTypeface(mIconTypeFace);
    }
 else {
      fontIconView.setText(""String_Node_Str"");
    }
    return fontIconView;
  }
  return null;
}",0.980245993291092
162740,"@Override public Iterable<String> buildUpdates(JavaPairRDD<String,String> newData){
  return ExampleBatchLayerUpdate.countDistinctOtherWords(newData).entrySet().stream().map(entry -> {
    String word=entry.getKey();
    int count=entry.getValue();
    int newCount;
synchronized (distinctOtherWords) {
      Integer oldCount=distinctOtherWords.get(word);
      newCount=oldCount == null ? count : oldCount + count;
      distinctOtherWords.put(word,newCount);
    }
    return word + ""String_Node_Str"" + newCount;
  }
).collect(Collectors.toList());
}","@Override public Iterable<String> buildUpdates(JavaPairRDD<String,String> newData){
  return ExampleBatchLayerUpdate.countDistinctOtherWords(newData).entrySet().stream().map(entry -> {
    String word=entry.getKey();
    int count=entry.getValue();
    int newCount;
synchronized (distinctOtherWords) {
      newCount=count + distinctOtherWords.getOrDefault(word,0);
      distinctOtherWords.put(word,newCount);
    }
    return word + ""String_Node_Str"" + newCount;
  }
).collect(Collectors.toList());
}",0.9004739336492891
162741,"@Override protected String getName(){
  return NAME;
}","/** 
 * @deprecated because superclass method is deprecated
 */
@Override @Deprecated protected String getName(){
  return NAME;
}",0.5869565217391305
162742,"private void configureTomcat(Tomcat tomcat,Connector connector){
  tomcat.setBaseDir(noSuchBaseDir.toAbsolutePath().toString());
  tomcat.setConnector(connector);
  tomcat.getService().addConnector(connector);
}","private void configureTomcat(Tomcat tomcat,Connector connector){
  tomcat.setBaseDir(noSuchBaseDir.toAbsolutePath().toString());
  tomcat.setConnector(connector);
}",0.8746666666666667
162743,"@Test public void testAuthenticate() throws Exception {
  InMemoryRealm realm=new InMemoryRealm();
  StandardContext ctx=new StandardContext();
  ctx.setName(""String_Node_Str"");
  realm.setContainer(ctx);
  realm.start();
  realm.addUser(""String_Node_Str"",""String_Node_Str"");
  assertNotNull(realm.getName());
  Principal authPrincipal=realm.authenticate(""String_Node_Str"",""String_Node_Str"");
  assertNotNull(authPrincipal);
  assertEquals(""String_Node_Str"",authPrincipal.getName());
  assertNull(realm.authenticate(""String_Node_Str"",""String_Node_Str""));
  assertNull(realm.authenticate(""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",realm.getPassword(""String_Node_Str""));
  assertEquals(""String_Node_Str"",realm.getPrincipal(""String_Node_Str"").getName());
}","@Test public void testAuthenticate() throws Exception {
  InMemoryRealm realm=new InMemoryRealm();
  StandardContext ctx=new StandardContext();
  ctx.setName(""String_Node_Str"");
  realm.setContainer(ctx);
  realm.start();
  realm.addUser(""String_Node_Str"",""String_Node_Str"");
  Principal authPrincipal=realm.authenticate(""String_Node_Str"",""String_Node_Str"");
  assertNotNull(authPrincipal);
  assertEquals(""String_Node_Str"",authPrincipal.getName());
  assertNull(realm.authenticate(""String_Node_Str"",""String_Node_Str""));
  assertNull(realm.authenticate(""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",realm.getPassword(""String_Node_Str""));
  assertEquals(""String_Node_Str"",realm.getPrincipal(""String_Node_Str"").getName());
}",0.9777777777777776
162744,"public ALSUpdate(Config config){
  super(config);
  iterations=config.getInt(""String_Node_Str"");
  implicit=config.getBoolean(""String_Node_Str"");
  logStrength=config.getBoolean(""String_Node_Str"");
  Preconditions.checkArgument(iterations > 0);
  hyperParamValues=Arrays.asList(HyperParams.fromConfig(config,""String_Node_Str""),HyperParams.fromConfig(config,""String_Node_Str""),HyperParams.fromConfig(config,""String_Node_Str""));
  if (logStrength) {
    hyperParamValues.add(HyperParams.fromConfig(config,""String_Node_Str""));
  }
  noKnownItems=config.getBoolean(""String_Node_Str"");
  decayFactor=config.getDouble(""String_Node_Str"");
  decayZeroThreshold=config.getDouble(""String_Node_Str"");
  Preconditions.checkArgument(iterations > 0);
  Preconditions.checkArgument(decayFactor > 0.0 && decayFactor <= 1.0);
  Preconditions.checkArgument(decayZeroThreshold >= 0.0);
}","public ALSUpdate(Config config){
  super(config);
  iterations=config.getInt(""String_Node_Str"");
  implicit=config.getBoolean(""String_Node_Str"");
  logStrength=config.getBoolean(""String_Node_Str"");
  Preconditions.checkArgument(iterations > 0);
  hyperParamValues=new ArrayList<>(Arrays.asList(HyperParams.fromConfig(config,""String_Node_Str""),HyperParams.fromConfig(config,""String_Node_Str""),HyperParams.fromConfig(config,""String_Node_Str"")));
  if (logStrength) {
    hyperParamValues.add(HyperParams.fromConfig(config,""String_Node_Str""));
  }
  noKnownItems=config.getBoolean(""String_Node_Str"");
  decayFactor=config.getDouble(""String_Node_Str"");
  decayZeroThreshold=config.getDouble(""String_Node_Str"");
  Preconditions.checkArgument(iterations > 0);
  Preconditions.checkArgument(decayFactor > 0.0 && decayFactor <= 1.0);
  Preconditions.checkArgument(decayZeroThreshold >= 0.0);
}",0.9903023388476896
162745,"private static Map<TopicAndPartition,?> getLeaderOffsets(KafkaCluster kc,Map<TopicAndPartition,Long> offsets,Predicate<Map.Entry<TopicAndPartition,Long>> predicate,boolean earliest){
  Set<TopicAndPartition> needOffset=offsets.entrySet().stream().filter(predicate).map(Map.Entry::getKey).collect(Collectors.toSet());
  @SuppressWarnings(""String_Node_Str"") scala.collection.immutable.Set<TopicAndPartition> needOffsetScalaSet=(scala.collection.immutable.Set<TopicAndPartition>)scala.collection.immutable.Set$.MODULE$.apply(JavaConversions.asScalaSet(needOffset).toSeq());
  return JavaConversions.mapAsJavaMap((earliest ? kc.getEarliestLeaderOffsets(needOffsetScalaSet) : kc.getLatestLeaderOffsets(needOffsetScalaSet)).right().get());
}","private static Map<TopicAndPartition,?> getLeaderOffsets(KafkaCluster kc,Map<TopicAndPartition,Long> offsets,Predicate<Map.Entry<TopicAndPartition,Long>> predicate,boolean earliest){
  Set<TopicAndPartition> needOffset=offsets.entrySet().stream().filter(predicate).map(Map.Entry::getKey).collect(Collectors.toSet());
  if (needOffset.isEmpty()) {
    return Collections.emptyMap();
  }
  @SuppressWarnings(""String_Node_Str"") scala.collection.immutable.Set<TopicAndPartition> needOffsetScalaSet=(scala.collection.immutable.Set<TopicAndPartition>)scala.collection.immutable.Set$.MODULE$.apply(JavaConversions.asScalaSet(needOffset).toSeq());
  return JavaConversions.mapAsJavaMap((earliest ? kc.getEarliestLeaderOffsets(needOffsetScalaSet) : kc.getLatestLeaderOffsets(needOffsetScalaSet)).right().get());
}",0.9551656920077972
162746,"private static void fillInLatestOffsets(Map<TopicAndPartition,Long> offsets,Map<String,String> kafkaParams){
  if (offsets.containsValue(null)) {
    @SuppressWarnings(""String_Node_Str"") scala.collection.immutable.Map<String,String> kafkaParamsScalaMap=(scala.collection.immutable.Map<String,String>)scala.collection.immutable.Map$.MODULE$.apply(JavaConversions.mapAsScalaMap(kafkaParams).toSeq());
    KafkaCluster kc=new KafkaCluster(kafkaParamsScalaMap);
    getLeaderOffsets(kc,offsets,entry -> entry.getValue() == null,false).forEach((tAndP,leaderOffsetsObj) -> {
      long latestTopicOffset=readOffset(leaderOffsetsObj);
      log.info(""String_Node_Str"",tAndP,latestTopicOffset);
      offsets.put(tAndP,latestTopicOffset);
    }
);
    Set<TopicAndPartition> hadOffset=offsets.entrySet().stream().filter(entry -> entry.getValue() != null).map(Map.Entry::getKey).collect(Collectors.toSet());
    getLeaderOffsets(kc,offsets,entry -> entry.getValue() != null,true).forEach((tAndP,leaderOffsetsObj) -> {
      long earliestTopicOffset=readOffset(leaderOffsetsObj);
      long currentOffset=offsets.get(tAndP);
      if (currentOffset < earliestTopicOffset) {
        log.warn(""String_Node_Str"",currentOffset,tAndP,earliestTopicOffset);
        offsets.put(tAndP,earliestTopicOffset);
      }
    }
);
  }
}","private static void fillInLatestOffsets(Map<TopicAndPartition,Long> offsets,Map<String,String> kafkaParams){
  @SuppressWarnings(""String_Node_Str"") scala.collection.immutable.Map<String,String> kafkaParamsScalaMap=(scala.collection.immutable.Map<String,String>)scala.collection.immutable.Map$.MODULE$.apply(JavaConversions.mapAsScalaMap(kafkaParams).toSeq());
  KafkaCluster kc=new KafkaCluster(kafkaParamsScalaMap);
  getLeaderOffsets(kc,offsets,entry -> entry.getValue() == null,false).forEach((tAndP,leaderOffsetsObj) -> {
    long latestTopicOffset=readOffset(leaderOffsetsObj);
    log.info(""String_Node_Str"",tAndP,latestTopicOffset);
    offsets.put(tAndP,latestTopicOffset);
  }
);
  getLeaderOffsets(kc,offsets,entry -> entry.getValue() != null,true).forEach((tAndP,leaderOffsetsObj) -> {
    long earliestTopicOffset=readOffset(leaderOffsetsObj);
    long currentOffset=offsets.get(tAndP);
    if (currentOffset < earliestTopicOffset) {
      log.warn(""String_Node_Str"",currentOffset,tAndP,earliestTopicOffset);
      offsets.put(tAndP,earliestTopicOffset);
    }
  }
);
}",0.7399665551839465
162747,"@Test public void testKMeans() throws Exception {
  Path tempDir=getTempDir();
  Path dataDir=tempDir.resolve(""String_Node_Str"");
  Path modelDir=tempDir.resolve(""String_Node_Str"");
  Map<String,Object> overlayConfig=new HashMap<>();
  overlayConfig.put(""String_Node_Str"",KMeansUpdate.class.getName());
  ConfigUtils.set(overlayConfig,""String_Node_Str"",dataDir);
  ConfigUtils.set(overlayConfig,""String_Node_Str"",modelDir);
  overlayConfig.put(""String_Node_Str"",GEN_INTERVAL_SEC);
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",20);
  overlayConfig.put(""String_Node_Str"",20);
  overlayConfig.put(""String_Node_Str"",NUM_FEATURES);
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",3);
  overlayConfig.put(""String_Node_Str"",2);
  overlayConfig.put(""String_Node_Str"",EVALUATION_STRATEGY);
  Config config=ConfigUtils.overlayOn(overlayConfig,getConfig());
  startMessaging();
  startServerProduceConsumeTopics(config,new RandomKMeansDataGenerator(NUM_FEATURES),DATA_TO_WRITE,WRITE_INTERVAL_MSEC);
  List<Path> modelInstanceDirs=IOUtils.listFiles(modelDir,""String_Node_Str"");
  checkIntervals(modelInstanceDirs.size(),DATA_TO_WRITE,WRITE_INTERVAL_MSEC,GEN_INTERVAL_SEC);
  Path latestModelDir=modelInstanceDirs.get(modelInstanceDirs.size() - 1);
  Path modelFile=latestModelDir.resolve(MLUpdate.MODEL_FILE_NAME);
  assertTrue(""String_Node_Str"" + modelFile,Files.exists(modelFile));
  PMML pmml=PMMLUtils.read(modelFile);
  Model rootModel=pmml.getModels().get(0);
  ClusteringModel clusteringModel=(ClusteringModel)rootModel;
  assertEquals(100,clusteringModel.getNumberOfClusters().intValue());
}","@Test public void testKMeans() throws Exception {
  Path tempDir=getTempDir();
  Path dataDir=tempDir.resolve(""String_Node_Str"");
  Path modelDir=tempDir.resolve(""String_Node_Str"");
  Map<String,Object> overlayConfig=new HashMap<>();
  overlayConfig.put(""String_Node_Str"",KMeansUpdate.class.getName());
  ConfigUtils.set(overlayConfig,""String_Node_Str"",dataDir);
  ConfigUtils.set(overlayConfig,""String_Node_Str"",modelDir);
  overlayConfig.put(""String_Node_Str"",GEN_INTERVAL_SEC);
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",20);
  overlayConfig.put(""String_Node_Str"",20);
  overlayConfig.put(""String_Node_Str"",NUM_FEATURES);
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",3);
  overlayConfig.put(""String_Node_Str"",2);
  overlayConfig.put(""String_Node_Str"",EVALUATION_STRATEGY);
  Config config=ConfigUtils.overlayOn(overlayConfig,getConfig());
  startMessaging();
  startServerProduceConsumeTopics(config,new RandomKMeansDataGenerator(NUM_FEATURES),DATA_TO_WRITE,WRITE_INTERVAL_MSEC);
  List<Path> modelInstanceDirs=IOUtils.listFiles(modelDir,""String_Node_Str"");
  checkIntervals(modelInstanceDirs.size(),DATA_TO_WRITE,WRITE_INTERVAL_MSEC,GEN_INTERVAL_SEC);
  Path latestModelDir=modelInstanceDirs.get(modelInstanceDirs.size() - 1);
  Path modelFile=latestModelDir.resolve(MLUpdate.MODEL_FILE_NAME);
  assertTrue(""String_Node_Str"" + modelFile,Files.exists(modelFile));
  PMML pmml=PMMLUtils.read(modelFile);
  Model rootModel=pmml.getModels().get(0);
  ClusteringModel clusteringModel=(ClusteringModel)rootModel;
  assertEquals(100,clusteringModel.getNumberOfClusters());
}",0.9967271645343648
162748,"@Test public void testKMeans() throws Exception {
  Path tempDir=getTempDir();
  Path dataDir=tempDir.resolve(""String_Node_Str"");
  Path modelDir=tempDir.resolve(""String_Node_Str"");
  Map<String,Object> overlayConfig=new HashMap<>();
  overlayConfig.put(""String_Node_Str"",KMeansUpdate.class.getName());
  ConfigUtils.set(overlayConfig,""String_Node_Str"",dataDir);
  ConfigUtils.set(overlayConfig,""String_Node_Str"",modelDir);
  overlayConfig.put(""String_Node_Str"",GEN_INTERVAL_SEC);
  overlayConfig.put(""String_Node_Str"",NUM_CLUSTERS);
  overlayConfig.put(""String_Node_Str"",5);
  overlayConfig.put(""String_Node_Str"",NUM_FEATURES);
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",EVALUATION_STRATEGY);
  Config config=ConfigUtils.overlayOn(overlayConfig,getConfig());
  startMessaging();
  List<Pair<String,String>> updates=startServerProduceConsumeTopics(config,new RandomKMeansDataGenerator(NUM_FEATURES),DATA_TO_WRITE,WRITE_INTERVAL_MSEC);
  List<Path> modelInstanceDirs=IOUtils.listFiles(modelDir,""String_Node_Str"");
  int generations=modelInstanceDirs.size();
  checkIntervals(generations,DATA_TO_WRITE,WRITE_INTERVAL_MSEC,GEN_INTERVAL_SEC);
  for (  Path modelInstanceDir : modelInstanceDirs) {
    Path modelFile=modelInstanceDir.resolve(MLUpdate.MODEL_FILE_NAME);
    assertNonEmpty(modelFile);
    PMMLUtils.read(modelFile);
  }
  InputSchema schema=new InputSchema(config);
  for (  Pair<String,String> km : updates) {
    String type=km.getFirst();
    String value=km.getSecond();
    assertContains(Arrays.asList(""String_Node_Str"",""String_Node_Str""),type);
    PMML pmml=AppPMMLUtils.readPMMLFromUpdateKeyMessage(type,value,null);
    checkHeader(pmml.getHeader());
    checkDataDictionary(schema,pmml.getDataDictionary());
    Model rootModel=pmml.getModels().get(0);
    ClusteringModel clusteringModel=(ClusteringModel)rootModel;
    assertEquals(NUM_CLUSTERS,clusteringModel.getNumberOfClusters().intValue());
    assertEquals(NUM_CLUSTERS,clusteringModel.getClusters().size());
    assertEquals(NUM_FEATURES,clusteringModel.getClusteringFields().size());
    assertEquals(ComparisonMeasure.Kind.DISTANCE,clusteringModel.getComparisonMeasure().getKind());
    assertEquals(NUM_FEATURES,clusteringModel.getClusters().get(0).getArray().getN().intValue());
    for (    Cluster cluster : clusteringModel.getClusters()) {
      assertGreater(cluster.getSize(),0);
    }
  }
}","@Test public void testKMeans() throws Exception {
  Path tempDir=getTempDir();
  Path dataDir=tempDir.resolve(""String_Node_Str"");
  Path modelDir=tempDir.resolve(""String_Node_Str"");
  Map<String,Object> overlayConfig=new HashMap<>();
  overlayConfig.put(""String_Node_Str"",KMeansUpdate.class.getName());
  ConfigUtils.set(overlayConfig,""String_Node_Str"",dataDir);
  ConfigUtils.set(overlayConfig,""String_Node_Str"",modelDir);
  overlayConfig.put(""String_Node_Str"",GEN_INTERVAL_SEC);
  overlayConfig.put(""String_Node_Str"",NUM_CLUSTERS);
  overlayConfig.put(""String_Node_Str"",5);
  overlayConfig.put(""String_Node_Str"",NUM_FEATURES);
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",EVALUATION_STRATEGY);
  Config config=ConfigUtils.overlayOn(overlayConfig,getConfig());
  startMessaging();
  List<Pair<String,String>> updates=startServerProduceConsumeTopics(config,new RandomKMeansDataGenerator(NUM_FEATURES),DATA_TO_WRITE,WRITE_INTERVAL_MSEC);
  List<Path> modelInstanceDirs=IOUtils.listFiles(modelDir,""String_Node_Str"");
  int generations=modelInstanceDirs.size();
  checkIntervals(generations,DATA_TO_WRITE,WRITE_INTERVAL_MSEC,GEN_INTERVAL_SEC);
  for (  Path modelInstanceDir : modelInstanceDirs) {
    Path modelFile=modelInstanceDir.resolve(MLUpdate.MODEL_FILE_NAME);
    assertNonEmpty(modelFile);
    PMMLUtils.read(modelFile);
  }
  InputSchema schema=new InputSchema(config);
  for (  Pair<String,String> km : updates) {
    String type=km.getFirst();
    String value=km.getSecond();
    assertContains(Arrays.asList(""String_Node_Str"",""String_Node_Str""),type);
    PMML pmml=AppPMMLUtils.readPMMLFromUpdateKeyMessage(type,value,null);
    checkHeader(pmml.getHeader());
    checkDataDictionary(schema,pmml.getDataDictionary());
    Model rootModel=pmml.getModels().get(0);
    ClusteringModel clusteringModel=(ClusteringModel)rootModel;
    assertEquals(NUM_CLUSTERS,clusteringModel.getNumberOfClusters());
    assertEquals(NUM_CLUSTERS,clusteringModel.getClusters().size());
    assertEquals(NUM_FEATURES,clusteringModel.getClusteringFields().size());
    assertEquals(ComparisonMeasure.Kind.DISTANCE,clusteringModel.getComparisonMeasure().getKind());
    assertEquals(NUM_FEATURES,clusteringModel.getClusters().get(0).getArray().getN().intValue());
    for (    Cluster cluster : clusteringModel.getClusters()) {
      assertGreater(cluster.getSize(),0);
    }
  }
}",0.9977342945417096
162749,"@Test public void testKMeansSpeed() throws Exception {
  Map<String,Object> overlayConfig=new HashMap<>();
  overlayConfig.put(""String_Node_Str"",KMeansSpeedModelManager.class.getName());
  overlayConfig.put(""String_Node_Str"",6);
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  Config config=ConfigUtils.overlayOn(overlayConfig,getConfig());
  startMessaging();
  List<Pair<String,String>> updates=startServerProduceConsumeTopics(config,new MockKMeansInputGenerator(),new MockKMeansModelGenerator(),300,1);
  updates.forEach(update -> log.info(""String_Node_Str"",update));
  int numUpdates=updates.size();
  assertGreaterOrEqual(updates.size(),NUM_CLUSTERS + 1);
  assertEquals(""String_Node_Str"",updates.get(0).getFirst());
  PMML pmml=PMMLUtils.fromString(updates.get(0).getSecond());
  Model model=pmml.getModels().get(0);
  assertInstanceOf(model,ClusteringModel.class);
  ClusteringModel clusteringModel=(ClusteringModel)model;
  assertEquals(NUM_CLUSTERS,clusteringModel.getNumberOfClusters().intValue());
  List<Cluster> clusters=clusteringModel.getClusters();
  Map<Integer,ClusterInfo> clusterInfos=new HashMap<>();
  for (int i=1; i < numUpdates; i++) {
    Pair<String,String> update=updates.get(i);
    assertEquals(""String_Node_Str"",update.getFirst());
    List<?> fields=TextUtils.readJSON(update.getSecond(),List.class);
    int clusterID=(Integer)fields.get(0);
    double[] updatedCenter=TextUtils.convertViaJSON(fields.get(1),double[].class);
    int updatedClusterSize=(Integer)fields.get(2);
    clusterInfos.put(clusterID,new ClusterInfo(clusterID,updatedCenter,updatedClusterSize));
  }
  assertEquals(3,clusterInfos.size());
  for (  ClusterInfo clusterInfo : clusterInfos.values()) {
    int id=clusterInfo.getID();
    Cluster cluster=clusters.get(id);
    String[] tokens=TextUtils.parseDelimited(cluster.getArray().getValue(),' ');
    double[] modelCenter=VectorMath.parseVector(tokens);
    double[] updatedCenter=clusterInfo.getCenter();
    assertEquals(tokens.length,modelCenter.length);
    assertFalse(Arrays.equals(modelCenter,updatedCenter));
    assertArrayEquals(updatedCenter,MockKMeansInputGenerator.UPDATE_POINTS[id],0.1);
    long updatedClusterSize=clusterInfo.getCount();
    assertGreater(updatedClusterSize,cluster.getSize());
    assertEquals(100 + cluster.getSize(),updatedClusterSize);
  }
}","@Test public void testKMeansSpeed() throws Exception {
  Map<String,Object> overlayConfig=new HashMap<>();
  overlayConfig.put(""String_Node_Str"",KMeansSpeedModelManager.class.getName());
  overlayConfig.put(""String_Node_Str"",6);
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  Config config=ConfigUtils.overlayOn(overlayConfig,getConfig());
  startMessaging();
  List<Pair<String,String>> updates=startServerProduceConsumeTopics(config,new MockKMeansInputGenerator(),new MockKMeansModelGenerator(),300,1);
  updates.forEach(update -> log.info(""String_Node_Str"",update));
  int numUpdates=updates.size();
  assertGreaterOrEqual(updates.size(),NUM_CLUSTERS + 1);
  assertEquals(""String_Node_Str"",updates.get(0).getFirst());
  PMML pmml=PMMLUtils.fromString(updates.get(0).getSecond());
  Model model=pmml.getModels().get(0);
  assertInstanceOf(model,ClusteringModel.class);
  ClusteringModel clusteringModel=(ClusteringModel)model;
  assertEquals(NUM_CLUSTERS,clusteringModel.getNumberOfClusters());
  List<Cluster> clusters=clusteringModel.getClusters();
  Map<Integer,ClusterInfo> clusterInfos=new HashMap<>();
  for (int i=1; i < numUpdates; i++) {
    Pair<String,String> update=updates.get(i);
    assertEquals(""String_Node_Str"",update.getFirst());
    List<?> fields=TextUtils.readJSON(update.getSecond(),List.class);
    int clusterID=(Integer)fields.get(0);
    double[] updatedCenter=TextUtils.convertViaJSON(fields.get(1),double[].class);
    int updatedClusterSize=(Integer)fields.get(2);
    clusterInfos.put(clusterID,new ClusterInfo(clusterID,updatedCenter,updatedClusterSize));
  }
  assertEquals(3,clusterInfos.size());
  for (  ClusterInfo clusterInfo : clusterInfos.values()) {
    int id=clusterInfo.getID();
    Cluster cluster=clusters.get(id);
    String[] tokens=TextUtils.parseDelimited(cluster.getArray().getValue(),' ');
    double[] modelCenter=VectorMath.parseVector(tokens);
    double[] updatedCenter=clusterInfo.getCenter();
    assertEquals(tokens.length,modelCenter.length);
    assertFalse(Arrays.equals(modelCenter,updatedCenter));
    assertArrayEquals(updatedCenter,MockKMeansInputGenerator.UPDATE_POINTS[id],0.1);
    long updatedClusterSize=clusterInfo.getCount();
    assertGreater(updatedClusterSize,cluster.getSize());
    assertEquals(100 + cluster.getSize(),updatedClusterSize);
  }
}",0.9977097647303768
162750,"private void makeContext(Tomcat tomcat,Path noSuchBaseDir) throws IOException {
  Path contextPath=noSuchBaseDir.resolve(""String_Node_Str"");
  Files.createDirectories(contextPath);
  context=tomcat.addContext(contextPathURIBase,contextPath.toAbsolutePath().toString());
  context.setWebappVersion(""String_Node_Str"");
  context.setName(""String_Node_Str"");
  context.addWelcomeFile(""String_Node_Str"");
  addErrorPages(context);
  context.addParameter(OryxApplication.class.getName() + ""String_Node_Str"",appResourcesPackages);
  String serializedConfig=ConfigUtils.serialize(config);
  context.addParameter(ConfigUtils.class.getName() + ""String_Node_Str"",serializedConfig);
  Wrapper wrapper=Tomcat.addServlet(context,""String_Node_Str"",""String_Node_Str"");
  wrapper.addInitParameter(""String_Node_Str"",OryxApplication.class.getName());
  wrapper.addMapping(""String_Node_Str"");
  wrapper.setLoadOnStartup(1);
  if (!doNotInitTopics) {
    context.addApplicationListener(ModelManagerListener.class.getName());
  }
  boolean needHTTPS=keystoreFile != null;
  boolean needAuthentication=userName != null;
  if (needHTTPS || needAuthentication) {
    SecurityCollection securityCollection=new SecurityCollection();
    securityCollection.addPattern(""String_Node_Str"");
    SecurityConstraint securityConstraint=new SecurityConstraint();
    securityConstraint.addCollection(securityCollection);
    if (needHTTPS) {
      securityConstraint.setUserConstraint(""String_Node_Str"");
    }
    if (needAuthentication) {
      LoginConfig loginConfig=new LoginConfig();
      loginConfig.setAuthMethod(""String_Node_Str"");
      loginConfig.setRealmName(InMemoryRealm.NAME);
      context.setLoginConfig(loginConfig);
      securityConstraint.addAuthRole(InMemoryRealm.AUTH_ROLE);
      context.addSecurityRole(InMemoryRealm.AUTH_ROLE);
      DigestAuthenticator authenticator=new DigestAuthenticator();
      authenticator.setNonceValidity(10 * 1000L);
      authenticator.setNonceCacheSize(20000);
      context.getPipeline().addValve(authenticator);
    }
    context.addConstraint(securityConstraint);
  }
  context.setCookies(false);
}","private void makeContext(Tomcat tomcat,Path noSuchBaseDir) throws IOException {
  Path contextPath=noSuchBaseDir.resolve(""String_Node_Str"");
  Files.createDirectories(contextPath);
  context=tomcat.addContext(contextPathURIBase,contextPath.toAbsolutePath().toString());
  context.setWebappVersion(""String_Node_Str"");
  context.setName(""String_Node_Str"");
  context.addWelcomeFile(""String_Node_Str"");
  addErrorPages(context);
  context.addParameter(OryxApplication.class.getName() + ""String_Node_Str"",appResourcesPackages);
  String serializedConfig=ConfigUtils.serialize(config);
  context.addParameter(ConfigUtils.class.getName() + ""String_Node_Str"",serializedConfig);
  Wrapper wrapper=Tomcat.addServlet(context,""String_Node_Str"",""String_Node_Str"");
  wrapper.addInitParameter(""String_Node_Str"",OryxApplication.class.getName());
  wrapper.addMapping(""String_Node_Str"");
  wrapper.setLoadOnStartup(1);
  wrapper.setMultipartConfigElement(new MultipartConfigElement(""String_Node_Str""));
  if (!doNotInitTopics) {
    context.addApplicationListener(ModelManagerListener.class.getName());
  }
  boolean needHTTPS=keystoreFile != null;
  boolean needAuthentication=userName != null;
  if (needHTTPS || needAuthentication) {
    SecurityCollection securityCollection=new SecurityCollection();
    securityCollection.addPattern(""String_Node_Str"");
    SecurityConstraint securityConstraint=new SecurityConstraint();
    securityConstraint.addCollection(securityCollection);
    if (needHTTPS) {
      securityConstraint.setUserConstraint(""String_Node_Str"");
    }
    if (needAuthentication) {
      LoginConfig loginConfig=new LoginConfig();
      loginConfig.setAuthMethod(""String_Node_Str"");
      loginConfig.setRealmName(InMemoryRealm.NAME);
      context.setLoginConfig(loginConfig);
      securityConstraint.addAuthRole(InMemoryRealm.AUTH_ROLE);
      context.addSecurityRole(InMemoryRealm.AUTH_ROLE);
      DigestAuthenticator authenticator=new DigestAuthenticator();
      authenticator.setNonceValidity(10 * 1000L);
      authenticator.setNonceCacheSize(20000);
      context.getPipeline().addValve(authenticator);
    }
    context.addConstraint(securityConstraint);
  }
  context.setCookies(false);
}",0.9806094182825484
162751,"private static String abbreviatedToString(Collection<?> c){
  return c.stream().limit(16).collect(Collectors.toList()) + (c.size() > 16 ? ""String_Node_Str"" : ""String_Node_Str"");
}","private static <T>String abbreviatedToString(Collection<T> c){
  return c.size() <= 16 ? c.toString() : c.stream().limit(16).collect(Collectors.toList()) + ""String_Node_Str"";
}",0.7887323943661971
162752,"@Override public final String toString(){
  return id + ""String_Node_Str"" + getValueString();
}","@Override public final String toString(){
  return id + ""String_Node_Str"" + valueString();
}",0.9732620320855616
162753,"@Override public final String toCSV(){
  return id + ""String_Node_Str"" + getValueString();
}","@Override public final String toCSV(){
  return id + ""String_Node_Str"" + valueString();
}",0.9723756906077348
162754,"@Override protected final DeploymentContext configureDeployment(){
  configureProperties();
  String joinedPackages=Joiner.on(',').join(getResourcePackages());
  return ServletDeploymentContext.builder(OryxApplication.class).initParam(""String_Node_Str"",OryxApplication.class.getName()).contextParam(OryxApplication.class.getName() + ""String_Node_Str"",joinedPackages).addListener(getInitListenerClass()).build();
}","@Override protected final DeploymentContext configureDeployment(){
  configureProperties();
  String joinedPackages=Joiner.on(',').join(getResourcePackages()) + ""String_Node_Str"";
  return ServletDeploymentContext.builder(OryxApplication.class).initParam(""String_Node_Str"",OryxApplication.class.getName()).contextParam(OryxApplication.class.getName() + ""String_Node_Str"",joinedPackages).addListener(getInitListenerClass()).build();
}",0.9763593380614656
162755,"@Test public void testError(){
  MockHttpServletRequest mockRequest=new MockHttpServletRequest();
  mockRequest.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,500);
  mockRequest.setAttribute(RequestDispatcher.ERROR_REQUEST_URI,""String_Node_Str"");
  mockRequest.setAttribute(RequestDispatcher.ERROR_MESSAGE,""String_Node_Str"");
  mockRequest.setAttribute(RequestDispatcher.ERROR_EXCEPTION,new IllegalStateException());
  Response response=new ErrorResource().error(mockRequest);
  assertEquals(500,response.getStatus());
  String responseBody=response.getEntity().toString();
  assertTrue(responseBody.contains(""String_Node_Str""));
  assertTrue(responseBody.contains(""String_Node_Str""));
  assertTrue(responseBody.contains(""String_Node_Str""));
  assertTrue(responseBody.contains(""String_Node_Str""));
}","@Test public void testError(){
  MockHttpServletRequest mockRequest=new MockHttpServletRequest();
  mockRequest.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,500);
  mockRequest.setAttribute(RequestDispatcher.ERROR_REQUEST_URI,""String_Node_Str"");
  mockRequest.setAttribute(RequestDispatcher.ERROR_MESSAGE,""String_Node_Str"");
  mockRequest.setAttribute(RequestDispatcher.ERROR_EXCEPTION,new IllegalStateException());
  Response response=new ErrorResource().errorHTML(mockRequest);
  assertEquals(500,response.getStatus());
  String responseBody=response.getEntity().toString();
  assertTrue(responseBody.contains(""String_Node_Str""));
  assertTrue(responseBody.contains(""String_Node_Str""));
  assertTrue(responseBody.contains(""String_Node_Str""));
  assertTrue(responseBody.contains(""String_Node_Str""));
}",0.9975124378109452
162756,"/** 
 * @param zkServers Zookeeper server string: host1:port1[,host2:port2,...]
 * @param topic topic to create (if not already existing)
 * @param topicProperties optional topic config properties
 */
public static void maybeCreateTopic(String zkServers,String topic,int partitions,Properties topicProperties){
  try (AutoZkClient zkClient=new AutoZkClient(zkServers)){
    if (AdminUtils.topicExists(zkClient,topic)) {
      log.info(""String_Node_Str"",topic);
    }
 else {
      log.info(""String_Node_Str"",topic);
      try {
        AdminUtils.createTopic(zkClient,topic,partitions,1,topicProperties);
        log.info(""String_Node_Str"",topic);
      }
 catch (      TopicExistsException tee) {
        log.info(""String_Node_Str"",topic);
      }
    }
  }
 }","/** 
 * @param zkServers Zookeeper server string: host1:port1[,host2:port2,...]
 * @param topic topic to create (if not already existing)
 * @param partitions number of topic partitions
 * @param topicProperties optional topic config properties
 */
public static void maybeCreateTopic(String zkServers,String topic,int partitions,Properties topicProperties){
  try (AutoZkClient zkClient=new AutoZkClient(zkServers)){
    if (AdminUtils.topicExists(zkClient,topic)) {
      log.info(""String_Node_Str"",topic);
    }
 else {
      log.info(""String_Node_Str"",topic);
      try {
        AdminUtils.createTopic(zkClient,topic,partitions,1,topicProperties);
        log.info(""String_Node_Str"",topic);
      }
 catch (      TopicExistsException tee) {
        log.info(""String_Node_Str"",topic);
      }
    }
  }
 }",0.9694267515923568
162757,"@Test public void testRDFSpeedRegression() throws Exception {
  Map<String,Object> overlayConfig=new HashMap<>();
  overlayConfig.put(""String_Node_Str"",RDFSpeedModelManager.class.getName());
  overlayConfig.put(""String_Node_Str"",5);
  overlayConfig.put(""String_Node_Str"",1);
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  Config config=ConfigUtils.overlayOn(overlayConfig,getConfig());
  startMessaging();
  List<Pair<String,String>> updates=startServerProduceConsumeTopics(config,new MockRDFRegressionInputGenerator(),new MockRDFRegressionModelGenerator(),NUM_INPUT,1);
  if (log.isDebugEnabled()) {
    for (    Pair<String,String> update : updates) {
      log.debug(""String_Node_Str"",update);
    }
  }
  int numUpdates=updates.size();
  assertTrue(numUpdates >= 3 && numUpdates % 2 != 0);
  assertEquals(""String_Node_Str"",updates.get(0).getFirst());
  for (int i=1; i < numUpdates; i++) {
    Pair<String,String> update=updates.get(i);
    assertEquals(""String_Node_Str"",update.getFirst());
    List<?> fields=MAPPER.readValue(update.getSecond(),List.class);
    int treeID=(Integer)fields.get(0);
    String nodeID=fields.get(1).toString();
    double mean=(Double)fields.get(2);
    assertEquals(0,treeID);
    assertTrue(""String_Node_Str"".equals(nodeID) || ""String_Node_Str"".equals(nodeID));
    if (""String_Node_Str"".equals(nodeID)) {
      assertEquals(5.0,mean,0.5);
    }
 else {
      assertEquals(-4.0,mean,0.5);
    }
  }
  for (int i=1; i < numUpdates; i+=2) {
    Pair<String,String> update1=updates.get(i);
    Pair<String,String> update2=updates.get(i + 1);
    List<?> fields1=MAPPER.readValue(update1.getSecond(),List.class);
    List<?> fields2=MAPPER.readValue(update2.getSecond(),List.class);
    int count1=(Integer)fields1.get(3);
    int count2=(Integer)fields2.get(3);
    assertTrue(Math.abs(count1 - count2) <= 1);
    String nodeID1=fields1.get(1).toString();
    String nodeID2=fields2.get(1).toString();
    if (""String_Node_Str"".equals(nodeID1)) {
      assertEquals(""String_Node_Str"",nodeID2);
    }
 else {
      assertEquals(""String_Node_Str"",nodeID2);
    }
  }
}","@Test public void testRDFSpeedRegression() throws Exception {
  Map<String,Object> overlayConfig=new HashMap<>();
  overlayConfig.put(""String_Node_Str"",RDFSpeedModelManager.class.getName());
  overlayConfig.put(""String_Node_Str"",10);
  overlayConfig.put(""String_Node_Str"",1);
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  Config config=ConfigUtils.overlayOn(overlayConfig,getConfig());
  startMessaging();
  List<Pair<String,String>> updates=startServerProduceConsumeTopics(config,new MockRDFRegressionInputGenerator(),new MockRDFRegressionModelGenerator(),NUM_INPUT,1);
  if (log.isDebugEnabled()) {
    for (    Pair<String,String> update : updates) {
      log.debug(""String_Node_Str"",update);
    }
  }
  int numUpdates=updates.size();
  assertTrue(numUpdates >= 3 && numUpdates % 2 != 0);
  assertEquals(""String_Node_Str"",updates.get(0).getFirst());
  for (int i=1; i < numUpdates; i++) {
    Pair<String,String> update=updates.get(i);
    assertEquals(""String_Node_Str"",update.getFirst());
    List<?> fields=MAPPER.readValue(update.getSecond(),List.class);
    int treeID=(Integer)fields.get(0);
    String nodeID=fields.get(1).toString();
    double mean=(Double)fields.get(2);
    assertEquals(0,treeID);
    assertTrue(""String_Node_Str"".equals(nodeID) || ""String_Node_Str"".equals(nodeID));
    if (""String_Node_Str"".equals(nodeID)) {
      assertEquals(5.0,mean,0.5);
    }
 else {
      assertEquals(-4.0,mean,0.5);
    }
  }
  for (int i=1; i < numUpdates; i+=2) {
    Pair<String,String> update1=updates.get(i);
    Pair<String,String> update2=updates.get(i + 1);
    List<?> fields1=MAPPER.readValue(update1.getSecond(),List.class);
    List<?> fields2=MAPPER.readValue(update2.getSecond(),List.class);
    int count1=(Integer)fields1.get(3);
    int count2=(Integer)fields2.get(3);
    assertTrue(Math.abs(count1 - count2) <= 1);
    String nodeID1=fields1.get(1).toString();
    String nodeID2=fields2.get(1).toString();
    if (""String_Node_Str"".equals(nodeID1)) {
      assertEquals(""String_Node_Str"",nodeID2);
    }
 else {
      assertEquals(""String_Node_Str"",nodeID2);
    }
  }
}",0.999327505043712
162758,"@Test public void testRDFSpeedRegression() throws Exception {
  Map<String,Object> overlayConfig=new HashMap<>();
  overlayConfig.put(""String_Node_Str"",RDFSpeedModelManager.class.getName());
  overlayConfig.put(""String_Node_Str"",10);
  overlayConfig.put(""String_Node_Str"",1);
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  Config config=ConfigUtils.overlayOn(overlayConfig,getConfig());
  startMessaging();
  List<Pair<String,String>> updates=startServerProduceConsumeTopics(config,new MockRDFRegressionInputGenerator(),new MockRDFRegressionModelGenerator(),NUM_INPUT,1);
  if (log.isDebugEnabled()) {
    for (    Pair<String,String> update : updates) {
      log.debug(""String_Node_Str"",update);
    }
  }
  int numUpdates=updates.size();
  assertTrue(numUpdates >= 3 && numUpdates % 2 != 0);
  assertEquals(""String_Node_Str"",updates.get(0).getFirst());
  for (int i=1; i < numUpdates; i++) {
    Pair<String,String> update=updates.get(i);
    assertEquals(""String_Node_Str"",update.getFirst());
    List<?> fields=MAPPER.readValue(update.getSecond(),List.class);
    int treeID=(Integer)fields.get(0);
    String nodeID=fields.get(1).toString();
    double mean=(Double)fields.get(2);
    assertEquals(0,treeID);
    assertTrue(""String_Node_Str"".equals(nodeID) || ""String_Node_Str"".equals(nodeID));
    if (""String_Node_Str"".equals(nodeID)) {
      assertEquals(5.0,mean,0.5);
    }
 else {
      assertEquals(-4.0,mean,0.5);
    }
  }
  for (int i=1; i < numUpdates; i+=2) {
    Pair<String,String> update1=updates.get(i);
    Pair<String,String> update2=updates.get(i + 1);
    List<?> fields1=MAPPER.readValue(update1.getSecond(),List.class);
    List<?> fields2=MAPPER.readValue(update2.getSecond(),List.class);
    int count1=(Integer)fields1.get(3);
    int count2=(Integer)fields2.get(3);
    assertTrue(Math.abs(count1 - count2) <= 1);
    String nodeID1=fields1.get(1).toString();
    String nodeID2=fields2.get(1).toString();
    if (""String_Node_Str"".equals(nodeID1)) {
      assertEquals(""String_Node_Str"",nodeID2);
    }
 else {
      assertEquals(""String_Node_Str"",nodeID2);
    }
  }
}","@Test public void testRDFSpeedRegression() throws Exception {
  Map<String,Object> overlayConfig=new HashMap<>();
  overlayConfig.put(""String_Node_Str"",RDFSpeedModelManager.class.getName());
  overlayConfig.put(""String_Node_Str"",10);
  overlayConfig.put(""String_Node_Str"",1);
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  Config config=ConfigUtils.overlayOn(overlayConfig,getConfig());
  startMessaging();
  List<Pair<String,String>> updates=startServerProduceConsumeTopics(config,new MockRDFRegressionInputGenerator(),new MockRDFRegressionModelGenerator(),NUM_INPUT,1);
  if (log.isDebugEnabled()) {
    for (    Pair<String,String> update : updates) {
      log.debug(""String_Node_Str"",update);
    }
  }
  int numUpdates=updates.size();
  assertTrue(numUpdates >= 3 && numUpdates % 2 != 0);
  assertEquals(""String_Node_Str"",updates.get(0).getFirst());
  for (int i=1; i < numUpdates; i++) {
    Pair<String,String> update=updates.get(i);
    assertEquals(""String_Node_Str"",update.getFirst());
    List<?> fields=MAPPER.readValue(update.getSecond(),List.class);
    int treeID=(Integer)fields.get(0);
    String nodeID=fields.get(1).toString();
    double mean=(Double)fields.get(2);
    int count=(Integer)fields.get(3);
    assertEquals(0,treeID);
    assertTrue(""String_Node_Str"".equals(nodeID) || ""String_Node_Str"".equals(nodeID));
    if (""String_Node_Str"".equals(nodeID)) {
      assertEquals(expectedPositiveMean(count),mean,0.1);
    }
 else {
      assertEquals(expectedNegativeMean(count),mean,0.1);
    }
  }
  for (int i=1; i < numUpdates; i+=2) {
    Pair<String,String> update1=updates.get(i);
    Pair<String,String> update2=updates.get(i + 1);
    List<?> fields1=MAPPER.readValue(update1.getSecond(),List.class);
    List<?> fields2=MAPPER.readValue(update2.getSecond(),List.class);
    int count1=(Integer)fields1.get(3);
    int count2=(Integer)fields2.get(3);
    assertTrue(Math.abs(count1 - count2) <= 1);
    String nodeID1=fields1.get(1).toString();
    String nodeID2=fields2.get(1).toString();
    if (""String_Node_Str"".equals(nodeID1)) {
      assertEquals(""String_Node_Str"",nodeID2);
    }
 else {
      assertEquals(""String_Node_Str"",nodeID2);
    }
  }
}",0.9711897954695404
162759,"private static void checkProbability(int majorityCount,int count,BinomialDistribution dist){
  double expected=0.9 * count;
  double probAsExtreme=majorityCount <= expected ? dist.cumulativeProbability(majorityCount) : 1.0 - dist.cumulativeProbability(majorityCount);
  assertTrue(majorityCount + ""String_Node_Str"" + expected+ ""String_Node_Str""+ count+ ""String_Node_Str"",probAsExtreme >= 0.001);
}","private static void checkProbability(int majorityCount,int count,BinomialDistribution dist){
  double expected=0.9 * count;
  double probAsExtreme=majorityCount <= expected ? dist.cumulativeProbability(majorityCount) : (1.0 - dist.cumulativeProbability(majorityCount)) + dist.probability(majorityCount);
  assertTrue(majorityCount + ""String_Node_Str"" + expected+ ""String_Node_Str""+ count+ ""String_Node_Str"",probAsExtreme >= 0.001);
}",0.9566265060240964
162760,"@Override public PMML buildModel(JavaSparkContext sparkContext,JavaRDD<String> trainData,List<?> hyperParameters,Path candidatePath){
  int features=(Integer)hyperParameters.get(0);
  double lambda=(Double)hyperParameters.get(1);
  double alpha=(Double)hyperParameters.get(2);
  Preconditions.checkArgument(features > 0);
  Preconditions.checkArgument(lambda >= 0.0);
  Preconditions.checkArgument(alpha > 0.0);
  JavaRDD<String[]> parsedRDD=trainData.map(MLFunctions.PARSE_FN);
  JavaRDD<Rating> trainRatingData=parsedToRatingRDD(parsedRDD);
  trainRatingData=aggregateScores(trainRatingData);
  MatrixFactorizationModel model;
  if (implicit) {
    model=ALS.trainImplicit(trainRatingData.rdd(),features,iterations,lambda,alpha);
  }
 else {
    model=ALS.train(trainRatingData.rdd(),features,iterations,lambda);
  }
  Map<Integer,String> reverseIDLookup=parsedRDD.flatMapToPair(new ToReverseLookupFn()).reduceByKey(Functions.<String>last()).collectAsMap();
  PMML pmml=mfModelToPMML(model,features,lambda,alpha,implicit,candidatePath,reverseIDLookup);
  unpersist(model);
  return pmml;
}","@Override public PMML buildModel(JavaSparkContext sparkContext,JavaRDD<String> trainData,List<?> hyperParameters,Path candidatePath){
  int features=(Integer)hyperParameters.get(0);
  double lambda=(Double)hyperParameters.get(1);
  double alpha=(Double)hyperParameters.get(2);
  Preconditions.checkArgument(features > 0);
  Preconditions.checkArgument(lambda >= 0.0);
  Preconditions.checkArgument(alpha > 0.0);
  JavaRDD<String[]> parsedRDD=trainData.map(MLFunctions.PARSE_FN);
  JavaRDD<Rating> trainRatingData=parsedToRatingRDD(parsedRDD);
  trainRatingData=aggregateScores(trainRatingData);
  MatrixFactorizationModel model;
  if (implicit) {
    model=ALS.trainImplicit(trainRatingData.rdd(),features,iterations,lambda,alpha);
  }
 else {
    model=ALS.train(trainRatingData.rdd(),features,iterations,lambda);
  }
  Map<Integer,String> reverseIDLookup=parsedRDD.flatMapToPair(new ToReverseLookupFn()).reduceByKey(Functions.<String>last()).collectAsMap();
  reverseIDLookup=new HashMap<>(reverseIDLookup);
  PMML pmml=mfModelToPMML(model,features,lambda,alpha,implicit,candidatePath,reverseIDLookup);
  unpersist(model);
  return pmml;
}",0.9704301075268816
162761,"protected static <T>void assertContainsSame(Collection<T> a,Collection<T> b){
  assertTrue((a == null && b == null) || (a.containsAll(b) && b.containsAll(a)));
}","protected static <T>void assertContainsSame(Collection<T> expected,Collection<T> actual){
  if (expected == null) {
    assertNull(actual);
  }
 else {
    assertNotNull(actual);
    assertEquals(expected.size(),actual.size());
    assertTrue(expected.containsAll(actual) && actual.containsAll(expected));
  }
}",0.4576271186440678
162762,"/** 
 * @param elements values to join by space to make one line of text
 * @return one line of text, formatted according to PMML quoting rules(\"" instead of """" for escaping quotes; ignore space surrounding values
 */
public static String joinPMMLDelimited(Iterable<?> elements){
  String rawResult=doJoinDelimited(elements,formatForDelimiter(' '));
  return TWO_DOUBLE_QUOTE.matcher(rawResult).replaceAll(""String_Node_Str"");
}","/** 
 * @param elements values to join by space to make one line of text
 * @return one line of text, formatted according to PMML quoting rules(\"" instead of """" for escaping quotes; ignore space surrounding values
 */
public static String joinPMMLDelimited(Iterable<?> elements){
  String rawResult=doJoinDelimited(elements,formatForDelimiter(' '));
  return TWO_DOUBLE_QUOTE_ESC.matcher(rawResult).replaceAll(SLASH_QUOTE_ESC);
}",0.9626168224299064
162763,"public synchronized void update(double[] newPoint,long newCount){
  int length=center.length;
  Preconditions.checkArgument(length == newPoint.length);
  double[] newCenter=new double[length];
  for (int i=0; i < length; i++) {
    newCenter[i]=(newPoint[i] * newCount + center[i] * count) / (newCount + count);
  }
  this.center=newCenter;
  count+=newCount;
}","public synchronized void update(double[] newPoint,long newCount){
  int length=center.length;
  Preconditions.checkArgument(length == newPoint.length);
  double[] newCenter=new double[length];
  long newTotalCount=newCount + count;
  double newToTotal=(double)newCount / newTotalCount;
  for (int i=0; i < length; i++) {
    double centerI=center[i];
    newCenter[i]=centerI + newToTotal * (newPoint[i] - centerI);
  }
  center=newCenter;
  count=newTotalCount;
}",0.6351515151515151
162764,"@Override public String toString(){
  return id + ""String_Node_Str"" + Arrays.toString(center)+ ""String_Node_Str""+ count;
}","@Override public synchronized String toString(){
  return id + ""String_Node_Str"" + Arrays.toString(center)+ ""String_Node_Str""+ count;
}",0.9494163424124512
162765,"private void recompute(){
  int total=getCount();
  int maxCount=-1;
  int theMaxCategory=-1;
  for (int i=0; i < categoryCounts.length; i++) {
    int count=categoryCounts[i];
    if (count > maxCount) {
      maxCount=count;
      theMaxCategory=i;
    }
    categoryProbabilities[i]=(double)count / total;
  }
  Preconditions.checkArgument(theMaxCategory >= 0);
  maxCategory=theMaxCategory;
}","private synchronized void recompute(){
  int total=getCount();
  int maxCount=-1;
  int theMaxCategory=-1;
  double[] newCategoryProbabilities=new double[categoryCounts.length];
  for (int i=0; i < newCategoryProbabilities.length; i++) {
    int count=categoryCounts[i];
    if (count > maxCount) {
      maxCount=count;
      theMaxCategory=i;
    }
    newCategoryProbabilities[i]=(double)count / total;
  }
  categoryProbabilities=newCategoryProbabilities;
  Preconditions.checkArgument(theMaxCategory >= 0);
  maxCategory=theMaxCategory;
}",0.8136315228966986
162766,"public synchronized void update(double mean,int count){
  int oldCount=getCount();
  int newCount=oldCount + count;
  setCount(newCount);
  prediction=(oldCount / (double)newCount) * prediction + (mean * count) / newCount;
}","public synchronized void update(double newPrediction,int newCount){
  int count=getCount();
  int newTotalCount=count + newCount;
  double newToTotal=(double)newCount / newTotalCount;
  setCount(newTotalCount);
  prediction+=newToTotal * (newPrediction - prediction);
}",0.4746450304259635
162767,"@Test public void testUpdate(){
  ClusterInfo info=new ClusterInfo(0,new double[]{-1.0,2.0},2);
  assertEquals(0,info.getID());
  assertArrayEquals(new double[]{-1.0,2.0},info.getCenter());
  assertEquals(2,info.getCount());
  assertTrue(""String_Node_Str"".equals(info.toString()));
  info.update(new double[]{-1.0,-1.0});
  assertEquals(0,info.getID());
  assertArrayEquals(new double[]{-1.0,1.0},info.getCenter());
  assertEquals(3,info.getCount());
  assertTrue(""String_Node_Str"".equals(info.toString()));
  info.update(new double[]{0.0,0.0},3);
  assertEquals(0,info.getID());
  assertArrayEquals(new double[]{-0.5,0.5},info.getCenter());
  assertEquals(6,info.getCount());
  assertTrue(""String_Node_Str"".equals(info.toString()));
}","@Test public void testUpdate(){
  ClusterInfo info=new ClusterInfo(0,new double[]{-1.0,2.0},2);
  assertEquals(0,info.getID());
  assertArrayEquals(new double[]{-1.0,2.0},info.getCenter());
  assertEquals(2,info.getCount());
  assertEquals(""String_Node_Str"",info.toString());
  info.update(new double[]{-1.0,-1.0});
  assertEquals(0,info.getID());
  assertArrayEquals(new double[]{-1.0,1.0},info.getCenter());
  assertEquals(3,info.getCount());
  assertEquals(""String_Node_Str"",info.toString());
  info.update(new double[]{0.0,0.0},3);
  assertEquals(0,info.getID());
  assertArrayEquals(new double[]{-0.5,0.5},info.getCenter());
  assertEquals(6,info.getCount());
  assertEquals(""String_Node_Str"",info.toString());
}",0.9008264462809916
162768,"@GET @Path(""String_Node_Str"") @Produces({MediaType.TEXT_PLAIN,CSVMessageBodyWriter.TEXT_CSV,MediaType.APPLICATION_JSON}) public Collection<String> get(){
  return getALSServingModel().getAllItemIDs();
}","@GET @Path(""String_Node_Str"") @Produces({MediaType.TEXT_PLAIN,CSVMessageBodyWriter.TEXT_CSV,MediaType.APPLICATION_JSON}) public Collection<String> get() throws OryxServingException {
  return getALSServingModel().getAllItemIDs();
}",0.9330254041570438
162769,"@GET @Path(""String_Node_Str"") @Produces({MediaType.TEXT_PLAIN,CSVMessageBodyWriter.TEXT_CSV,MediaType.APPLICATION_JSON}) public Collection<String> get(){
  return getALSServingModel().getAllUserIDs();
}","@GET @Path(""String_Node_Str"") @Produces({MediaType.TEXT_PLAIN,CSVMessageBodyWriter.TEXT_CSV,MediaType.APPLICATION_JSON}) public Collection<String> get() throws OryxServingException {
  return getALSServingModel().getAllUserIDs();
}",0.9330254041570438
162770,"@GET @Path(""String_Node_Str"") @Produces({MediaType.TEXT_PLAIN,CSVMessageBodyWriter.TEXT_CSV,MediaType.APPLICATION_JSON}) public Collection<String> get(@PathParam(""String_Node_Str"") String userID){
  Collection<String> knownItems=getALSServingModel().getKnownItems(userID);
  if (knownItems == null) {
    return Collections.emptyList();
  }
 else {
synchronized (knownItems) {
      return new ArrayList<>(knownItems);
    }
  }
}","@GET @Path(""String_Node_Str"") @Produces({MediaType.TEXT_PLAIN,CSVMessageBodyWriter.TEXT_CSV,MediaType.APPLICATION_JSON}) public Collection<String> get(@PathParam(""String_Node_Str"") String userID) throws OryxServingException {
  Collection<String> knownItems=getALSServingModel().getKnownItems(userID);
  if (knownItems == null) {
    return Collections.emptyList();
  }
 else {
synchronized (knownItems) {
      return new ArrayList<>(knownItems);
    }
  }
}",0.967379077615298
162771,"@GET @Produces({MediaType.TEXT_PLAIN,CSVMessageBodyWriter.TEXT_CSV,MediaType.APPLICATION_JSON}) public List<IDCount> get(@DefaultValue(""String_Node_Str"") @QueryParam(""String_Node_Str"") int howMany,@DefaultValue(""String_Node_Str"") @QueryParam(""String_Node_Str"") int offset,@QueryParam(""String_Node_Str"") List<String> rescorerParams){
  ALSServingModel model=getALSServingModel();
  RescorerProvider rescorerProvider=model.getRescorerProvider();
  Rescorer rescorer=null;
  if (rescorerProvider != null) {
    rescorer=rescorerProvider.getMostActiveUsersRescorer(rescorerParams);
  }
  return MostPopularItems.mapTopCountsToIDCounts(model.getUserCounts(),howMany,offset,rescorer);
}","@GET @Produces({MediaType.TEXT_PLAIN,CSVMessageBodyWriter.TEXT_CSV,MediaType.APPLICATION_JSON}) public List<IDCount> get(@DefaultValue(""String_Node_Str"") @QueryParam(""String_Node_Str"") int howMany,@DefaultValue(""String_Node_Str"") @QueryParam(""String_Node_Str"") int offset,@QueryParam(""String_Node_Str"") List<String> rescorerParams) throws OryxServingException {
  ALSServingModel model=getALSServingModel();
  RescorerProvider rescorerProvider=model.getRescorerProvider();
  Rescorer rescorer=null;
  if (rescorerProvider != null) {
    rescorer=rescorerProvider.getMostActiveUsersRescorer(rescorerParams);
  }
  return MostPopularItems.mapTopCountsToIDCounts(model.getUserCounts(),howMany,offset,rescorer);
}",0.9791216702663786
162772,"@GET @Produces({MediaType.TEXT_PLAIN,CSVMessageBodyWriter.TEXT_CSV,MediaType.APPLICATION_JSON}) public List<IDCount> get(@DefaultValue(""String_Node_Str"") @QueryParam(""String_Node_Str"") int howMany,@DefaultValue(""String_Node_Str"") @QueryParam(""String_Node_Str"") int offset,@QueryParam(""String_Node_Str"") List<String> rescorerParams){
  ALSServingModel model=getALSServingModel();
  RescorerProvider rescorerProvider=model.getRescorerProvider();
  Rescorer rescorer=null;
  if (rescorerProvider != null) {
    rescorer=rescorerProvider.getMostPopularItemsRescorer(rescorerParams);
  }
  return mapTopCountsToIDCounts(model.getItemCounts(),howMany,offset,rescorer);
}","@GET @Produces({MediaType.TEXT_PLAIN,CSVMessageBodyWriter.TEXT_CSV,MediaType.APPLICATION_JSON}) public List<IDCount> get(@DefaultValue(""String_Node_Str"") @QueryParam(""String_Node_Str"") int howMany,@DefaultValue(""String_Node_Str"") @QueryParam(""String_Node_Str"") int offset,@QueryParam(""String_Node_Str"") List<String> rescorerParams) throws OryxServingException {
  ALSServingModel model=getALSServingModel();
  RescorerProvider rescorerProvider=model.getRescorerProvider();
  Rescorer rescorer=null;
  if (rescorerProvider != null) {
    rescorer=rescorerProvider.getMostPopularItemsRescorer(rescorerParams);
  }
  return mapTopCountsToIDCounts(model.getItemCounts(),howMany,offset,rescorer);
}",0.9786293294030952
162773,"@GET @Produces({MediaType.TEXT_PLAIN,CSVMessageBodyWriter.TEXT_CSV,MediaType.APPLICATION_JSON}) public List<String> get(){
  ALSServingModel model=getALSServingModel();
  int features=model.getFeatures();
  List<String> items=new ArrayList<>(features);
  float[] unitVector=new float[features];
  for (int i=0; i < features; i++) {
    unitVector[i]=1.0f;
    List<Pair<String,Double>> topIDDot=model.topN(new DotsFunction(unitVector),1);
    items.add(topIDDot.isEmpty() ? null : topIDDot.get(0).getFirst());
    unitVector[i]=0.0f;
  }
  return items;
}","@GET @Produces({MediaType.TEXT_PLAIN,CSVMessageBodyWriter.TEXT_CSV,MediaType.APPLICATION_JSON}) public List<String> get() throws OryxServingException {
  ALSServingModel model=getALSServingModel();
  int features=model.getFeatures();
  List<String> items=new ArrayList<>(features);
  float[] unitVector=new float[features];
  for (int i=0; i < features; i++) {
    unitVector[i]=1.0f;
    List<Pair<String,Double>> topIDDot=model.topN(new DotsFunction(unitVector),1);
    items.add(topIDDot.isEmpty() ? null : topIDDot.get(0).getFirst());
    unitVector[i]=0.0f;
  }
  return items;
}",0.974539069359087
162774,"@HEAD public Response head(){
  return get();
}","@HEAD public Response head() throws OryxServingException {
  return get();
}",0.7642276422764228
162775,"@GET public Response get(){
  return getALSServingModel() == null ? Response.status(Response.Status.SERVICE_UNAVAILABLE).build() : Response.ok().build();
}","@GET public Response get() throws OryxServingException {
  getALSServingModel();
  return Response.ok().build();
}",0.6022304832713755
162776,"@GET @Produces({MediaType.TEXT_PLAIN,CSVMessageBodyWriter.TEXT_CSV,MediaType.APPLICATION_JSON}) public List<Double> getAllImportances(){
  RDFServingModel model=getRDFServingModel();
  double[] importances=model.getForest().getFeatureImportances();
  List<Double> result=new ArrayList<>(importances.length);
  for (  double importance : importances) {
    result.add(importance);
  }
  return result;
}","@GET @Produces({MediaType.TEXT_PLAIN,CSVMessageBodyWriter.TEXT_CSV,MediaType.APPLICATION_JSON}) public List<Double> getAllImportances() throws OryxServingException {
  RDFServingModel model=getRDFServingModel();
  double[] importances=model.getForest().getFeatureImportances();
  List<Double> result=new ArrayList<>(importances.length);
  for (  double importance : importances) {
    result.add(importance);
  }
  return result;
}",0.965186074429772
162777,"/** 
 * Called by the framework to initiate a continuous process of reading models, and reading from the input topic and updating model state in memory, and issuing updates to the update topic. This will be executed asynchronously and may block.
 * @param updateIterator iterator to read models from
 * @throws IOException if an error occurs while reading updates
 */
@Override public void consume(Iterator<KeyMessage<String,String>> updateIterator) throws IOException {
  while (updateIterator.hasNext()) {
    KeyMessage<String,String> km=updateIterator.next();
    String key=km.getKey();
    String message=km.getMessage();
switch (key) {
case ""String_Node_Str"":
      if (model == null) {
        continue;
      }
    DecisionForest forest=model.getForest();
  List<?> update=MAPPER.readValue(message,List.class);
int treeID=Integer.parseInt(update.get(0).toString());
String nodeID=update.get(1).toString();
if (inputSchema.isClassification()) {
TerminalNode nodeToUpdate=(TerminalNode)forest.getTrees()[treeID].findByID(nodeID);
CategoricalPrediction predictionToUpdate=(CategoricalPrediction)nodeToUpdate.getPrediction();
int encoding=Integer.parseInt(update.get(2).toString());
int count=Integer.parseInt(update.get(3).toString());
predictionToUpdate.update(encoding,count);
}
 else {
TerminalNode nodeToUpdate=(TerminalNode)forest.getTrees()[treeID].findByID(nodeID);
NumericPrediction predictionToUpdate=(NumericPrediction)nodeToUpdate.getPrediction();
double mean=Double.parseDouble(update.get(2).toString());
int count=Integer.parseInt(update.get(3).toString());
predictionToUpdate.update(mean,count);
}
break;
case ""String_Node_Str"":
PMML pmml;
try {
pmml=PMMLUtils.fromString(message);
}
 catch (JAXBException e) {
throw new IOException(e);
}
RDFPMMLUtils.validatePMMLVsSchema(pmml,inputSchema);
Pair<DecisionForest,CategoricalValueEncodings> forestAndEncodings=RDFPMMLUtils.read(pmml);
model=new RDFServingModel(forestAndEncodings.getFirst(),forestAndEncodings.getSecond(),inputSchema);
break;
default :
throw new IllegalStateException(""String_Node_Str"" + key);
}
}
}","/** 
 * Called by the framework to initiate a continuous process of reading models, and reading from the input topic and updating model state in memory, and issuing updates to the update topic. This will be executed asynchronously and may block.
 * @param updateIterator iterator to read models from
 * @throws IOException if an error occurs while reading updates
 */
@Override public void consume(Iterator<KeyMessage<String,String>> updateIterator) throws IOException {
  while (updateIterator.hasNext()) {
    KeyMessage<String,String> km=updateIterator.next();
    String key=km.getKey();
    String message=km.getMessage();
switch (key) {
case ""String_Node_Str"":
      if (model == null) {
        continue;
      }
    DecisionForest forest=model.getForest();
  List<?> update=MAPPER.readValue(message,List.class);
int treeID=Integer.parseInt(update.get(0).toString());
String nodeID=update.get(1).toString();
if (inputSchema.isClassification()) {
TerminalNode nodeToUpdate=(TerminalNode)forest.getTrees()[treeID].findByID(nodeID);
CategoricalPrediction predictionToUpdate=(CategoricalPrediction)nodeToUpdate.getPrediction();
@SuppressWarnings(""String_Node_Str"") Map<Integer,Integer> counts=(Map<Integer,Integer>)update.get(2);
for (Map.Entry<?,?> entry : counts.entrySet()) {
int encoding=Integer.parseInt(entry.getKey().toString());
int count=Integer.parseInt(entry.getValue().toString());
predictionToUpdate.update(encoding,count);
}
}
 else {
TerminalNode nodeToUpdate=(TerminalNode)forest.getTrees()[treeID].findByID(nodeID);
NumericPrediction predictionToUpdate=(NumericPrediction)nodeToUpdate.getPrediction();
double mean=Double.parseDouble(update.get(2).toString());
int count=Integer.parseInt(update.get(3).toString());
predictionToUpdate.update(mean,count);
}
break;
case ""String_Node_Str"":
PMML pmml;
try {
pmml=PMMLUtils.fromString(message);
}
 catch (JAXBException e) {
throw new IOException(e);
}
RDFPMMLUtils.validatePMMLVsSchema(pmml,inputSchema);
Pair<DecisionForest,CategoricalValueEncodings> forestAndEncodings=RDFPMMLUtils.read(pmml);
model=new RDFServingModel(forestAndEncodings.getFirst(),forestAndEncodings.getSecond(),inputSchema);
break;
default :
throw new IllegalStateException(""String_Node_Str"" + key);
}
}
}",0.9341040462427744
162778,"@Test public void testRDFServingModel() throws Exception {
  Map<String,Object> overlayConfig=new HashMap<>();
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",RDFServingModelManager.class.getName());
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  Config config=ConfigUtils.overlayOn(overlayConfig,getConfig());
  startMessaging();
  startServer(config);
  startUpdateTopics(new MockRDFClassificationModelGenerator(),10);
  Thread.sleep(1000);
  RDFServingModelManager manager=(RDFServingModelManager)getServingLayer().getContext().getServletContext().getAttribute(AbstractOryxResource.MODEL_MANAGER_KEY);
  assertNotNull(""String_Node_Str"",manager);
  RDFServingModel model=manager.getModel();
  log.debug(""String_Node_Str"",model);
  CategoricalValueEncodings encodings=model.getEncodings();
  assertEquals(2,encodings.getValueCount(0));
  assertEquals(2,encodings.getValueCount(1));
  Map<Integer,String> encodingValuePredictor=encodings.getEncodingValueMap(0);
  assertEquals(""String_Node_Str"",encodingValuePredictor.get(0));
  assertEquals(""String_Node_Str"",encodingValuePredictor.get(1));
  Map<Integer,String> encodingValueTarget=encodings.getEncodingValueMap(1);
  assertEquals(""String_Node_Str"",encodingValueTarget.get(0));
  assertEquals(""String_Node_Str"",encodingValueTarget.get(1));
  DecisionForest forest=model.getForest();
  assertEquals(1,forest.getTrees().length);
  assertArrayEquals(new double[]{1.0},forest.getWeights());
  InputSchema inputSchema=model.getInputSchema();
  assertEquals(2,inputSchema.getNumFeatures());
}","@Test public void testRDFServingModel() throws Exception {
  Map<String,Object> overlayConfig=new HashMap<>();
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",RDFServingModelManager.class.getName());
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  Config config=ConfigUtils.overlayOn(overlayConfig,getConfig());
  startMessaging();
  startServer(config);
  startUpdateTopics(new MockRDFClassificationModelGenerator(),5);
  Thread.sleep(1000);
  RDFServingModelManager manager=(RDFServingModelManager)getServingLayer().getContext().getServletContext().getAttribute(AbstractOryxResource.MODEL_MANAGER_KEY);
  assertNotNull(""String_Node_Str"",manager);
  RDFServingModel model=manager.getModel();
  log.debug(""String_Node_Str"",model);
  CategoricalValueEncodings encodings=model.getEncodings();
  assertEquals(2,encodings.getValueCount(0));
  assertEquals(2,encodings.getValueCount(1));
  Map<Integer,String> encodingValuePredictor=encodings.getEncodingValueMap(0);
  assertEquals(""String_Node_Str"",encodingValuePredictor.get(0));
  assertEquals(""String_Node_Str"",encodingValuePredictor.get(1));
  Map<Integer,String> encodingValueTarget=encodings.getEncodingValueMap(1);
  assertEquals(""String_Node_Str"",encodingValueTarget.get(0));
  assertEquals(""String_Node_Str"",encodingValueTarget.get(1));
  DecisionForest forest=model.getForest();
  DecisionTree[] trees=forest.getTrees();
  assertEquals(1,trees.length);
  assertArrayEquals(new double[]{1.0},forest.getWeights());
  InputSchema inputSchema=model.getInputSchema();
  assertEquals(2,inputSchema.getNumFeatures());
  DecisionTree tree=trees[0];
  DecisionNode root=(DecisionNode)tree.findByID(""String_Node_Str"");
  TerminalNode left=(TerminalNode)tree.findByID(""String_Node_Str"");
  TerminalNode right=(TerminalNode)tree.findByID(""String_Node_Str"");
  assertSame(root.getLeft(),left);
  assertSame(root.getRight(),right);
  assertEquals(7,left.getCount());
  assertEquals(7,right.getCount());
  CategoricalPrediction leftPrediction=(CategoricalPrediction)left.getPrediction();
  CategoricalPrediction rightPrediction=(CategoricalPrediction)right.getPrediction();
  assertEquals(2,leftPrediction.getCategoryCounts()[0]);
  assertEquals(5,leftPrediction.getCategoryCounts()[1]);
  assertEquals(3,rightPrediction.getCategoryCounts()[0]);
  assertEquals(4,rightPrediction.getCategoryCounts()[1]);
}",0.8005664385178192
162779,"@Override public Iterable<String> buildUpdates(JavaPairRDD<String,String> newData){
  if (model == null) {
    return Collections.emptyList();
  }
  JavaRDD<Example> examplesRDD=newData.values().map(MLFunctions.PARSE_FN).map(new ToExampleFn(inputSchema,model.getEncodings()));
  DecisionForest forest=model.getForest();
  JavaPairRDD<Pair<Integer,String>,Iterable<Feature>> targetsByTreeAndID=examplesRDD.flatMapToPair(new ToTreeNodeFeatureFn(forest)).groupByKey();
  List<String> updates=new ArrayList<>();
  if (inputSchema.isClassification()) {
    List<Tuple2<Pair<Integer,String>,Map<Integer,Long>>> countsByTreeAndID=targetsByTreeAndID.mapValues(new TargetCategoryCountFn()).collect();
    for (    Tuple2<Pair<Integer,String>,Map<Integer,Long>> p : countsByTreeAndID) {
      Object[] updateTokens={p._1().getFirst(),p._1().getSecond(),p._2()};
      updates.add(TextUtils.joinJSON(Arrays.asList(updateTokens)));
    }
  }
 else {
    List<Tuple2<Pair<Integer,String>,Mean>> meanTargetsByTreeAndID=targetsByTreeAndID.mapValues(new MeanNewTargetFn()).collect();
    for (    Tuple2<Pair<Integer,String>,Mean> p : meanTargetsByTreeAndID) {
      Mean mean=p._2();
      Object[] updateTokens={p._1().getFirst(),p._1().getSecond(),mean.getResult(),mean.getN()};
      updates.add(TextUtils.joinJSON(Arrays.asList(updateTokens)));
    }
  }
  return updates;
}","@Override public Iterable<String> buildUpdates(JavaPairRDD<String,String> newData){
  if (model == null) {
    return Collections.emptyList();
  }
  JavaRDD<Example> examplesRDD=newData.values().map(MLFunctions.PARSE_FN).map(new ToExampleFn(inputSchema,model.getEncodings()));
  DecisionForest forest=model.getForest();
  JavaPairRDD<Pair<Integer,String>,Iterable<Feature>> targetsByTreeAndID=examplesRDD.flatMapToPair(new ToTreeNodeFeatureFn(forest)).groupByKey();
  List<String> updates=new ArrayList<>();
  if (inputSchema.isClassification()) {
    List<Tuple2<Pair<Integer,String>,Map<Integer,Long>>> countsByTreeAndID=targetsByTreeAndID.mapValues(new TargetCategoryCountFn()).collect();
    for (    Tuple2<Pair<Integer,String>,Map<Integer,Long>> p : countsByTreeAndID) {
      Integer treeID=p._1().getFirst();
      String nodeID=p._1().getSecond();
      updates.add(TextUtils.joinJSON(Arrays.asList(treeID,nodeID,p._2())));
    }
  }
 else {
    List<Tuple2<Pair<Integer,String>,Mean>> meanTargetsByTreeAndID=targetsByTreeAndID.mapValues(new MeanNewTargetFn()).collect();
    for (    Tuple2<Pair<Integer,String>,Mean> p : meanTargetsByTreeAndID) {
      Integer treeID=p._1().getFirst();
      String nodeID=p._1().getSecond();
      Mean mean=p._2();
      updates.add(TextUtils.joinJSON(Arrays.asList(treeID,nodeID,mean.getResult(),mean.getN())));
    }
  }
  return updates;
}",0.6518895348837209
162780,"@Override public Pair<String,String> generate(int id,RandomGenerator random){
  PMML pmml=PMMLUtils.buildSkeletonPMML();
  double dummyCount=2.0 * (id + 1);
  DataDictionary dataDictionary=new DataDictionary();
  dataDictionary.setNumberOfFields(2);
  DataField predictor=new DataField(new FieldName(""String_Node_Str""),OpType.CATEGORICAL,DataType.STRING);
  predictor.getValues().add(new Value(""String_Node_Str""));
  predictor.getValues().add(new Value(""String_Node_Str""));
  dataDictionary.getDataFields().add(predictor);
  DataField target=new DataField(new FieldName(""String_Node_Str""),OpType.CATEGORICAL,DataType.STRING);
  target.getValues().add(new Value(""String_Node_Str""));
  target.getValues().add(new Value(""String_Node_Str""));
  dataDictionary.getDataFields().add(target);
  pmml.setDataDictionary(dataDictionary);
  MiningSchema miningSchema=new MiningSchema();
  MiningField predictorMF=new MiningField(new FieldName(""String_Node_Str""));
  predictorMF.setOptype(OpType.CATEGORICAL);
  predictorMF.setUsageType(FieldUsageType.ACTIVE);
  predictorMF.setImportance(0.5);
  miningSchema.getMiningFields().add(predictorMF);
  MiningField targetMF=new MiningField(new FieldName(""String_Node_Str""));
  targetMF.setOptype(OpType.CATEGORICAL);
  targetMF.setUsageType(FieldUsageType.PREDICTED);
  miningSchema.getMiningFields().add(targetMF);
  Node rootNode=new Node();
  rootNode.setId(""String_Node_Str"");
  rootNode.setRecordCount(dummyCount);
  rootNode.setPredicate(new True());
  double halfCount=dummyCount / 2;
  Node left=new Node();
  left.setId(""String_Node_Str"");
  left.setRecordCount(halfCount);
  left.setPredicate(new True());
  left.getScoreDistributions().add(new ScoreDistribution(""String_Node_Str"",halfCount));
  Node right=new Node();
  right.setId(""String_Node_Str"");
  right.setRecordCount(halfCount);
  right.setPredicate(new SimpleSetPredicate(new Array(""String_Node_Str"",Array.Type.STRING),new FieldName(""String_Node_Str""),SimpleSetPredicate.BooleanOperator.IS_NOT_IN));
  right.getScoreDistributions().add(new ScoreDistribution(""String_Node_Str"",halfCount));
  rootNode.getNodes().add(right);
  rootNode.getNodes().add(left);
  TreeModel treeModel=new TreeModel(miningSchema,rootNode,MiningFunctionType.CLASSIFICATION);
  treeModel.setSplitCharacteristic(TreeModel.SplitCharacteristic.BINARY_SPLIT);
  treeModel.setMissingValueStrategy(MissingValueStrategyType.DEFAULT_CHILD);
  treeModel.setMiningSchema(miningSchema);
  pmml.getModels().add(treeModel);
  return new Pair<>(""String_Node_Str"",PMMLUtils.toString(pmml));
}","@Override public Pair<String,String> generate(int id,RandomGenerator random){
  if (id == 0) {
    PMML pmml=buildModel();
    return new Pair<>(""String_Node_Str"",PMMLUtils.toString(pmml));
  }
 else {
    String nodeID=""String_Node_Str"" + ((id % 2 == 0) ? '-' : '+');
    Map<Integer,Integer> counts=new HashMap<>();
    counts.put(0,1);
    counts.put(1,2);
    return new Pair<>(""String_Node_Str"",TextUtils.joinJSON(Arrays.asList(0,nodeID,counts)));
  }
}",0.0710963455149501
162781,"@GET @Produces(MediaType.TEXT_HTML) public String error(@Context HttpServletRequest request){
  StringBuilder html=new StringBuilder(1000);
  html.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  html.append(""String_Node_Str"");
  Object statusCode=request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);
  if (statusCode != null) {
    html.append(' ').append(statusCode);
  }
  html.append(""String_Node_Str"");
  Object requestURI=request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI);
  if (requestURI != null) {
    html.append(""String_Node_Str"");
    html.append(JspHelper.escapeXml(requestURI));
  }
  html.append(""String_Node_Str"");
  Object message=request.getAttribute(RequestDispatcher.ERROR_MESSAGE);
  if (message != null) {
    html.append(""String_Node_Str"");
    html.append(JspHelper.escapeXml(message));
    html.append(""String_Node_Str"");
  }
  Throwable throwable=(Throwable)request.getAttribute(RequestDispatcher.ERROR_EXCEPTION);
  if (throwable != null) {
    StringWriter sw=new StringWriter();
    throwable.printStackTrace(new PrintWriter(sw));
    html.append(""String_Node_Str"");
    html.append(JspHelper.escapeXml(sw.toString()));
    html.append(""String_Node_Str"");
  }
  html.append(""String_Node_Str"");
  return html.toString();
}","@GET @Produces(MediaType.TEXT_HTML) public Response error(@Context HttpServletRequest request){
  StringBuilder html=new StringBuilder(1000);
  html.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  html.append(""String_Node_Str"");
  Number statusCode=(Number)request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);
  if (statusCode != null) {
    html.append(' ').append(statusCode);
  }
  html.append(""String_Node_Str"");
  Object requestURI=request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI);
  if (requestURI != null) {
    html.append(""String_Node_Str"");
    html.append(JspHelper.escapeXml(requestURI));
  }
  html.append(""String_Node_Str"");
  Object message=request.getAttribute(RequestDispatcher.ERROR_MESSAGE);
  if (message != null) {
    html.append(""String_Node_Str"");
    html.append(JspHelper.escapeXml(message));
    html.append(""String_Node_Str"");
  }
  Throwable throwable=(Throwable)request.getAttribute(RequestDispatcher.ERROR_EXCEPTION);
  if (throwable != null) {
    StringWriter sw=new StringWriter();
    throwable.printStackTrace(new PrintWriter(sw));
    html.append(""String_Node_Str"");
    html.append(JspHelper.escapeXml(sw.toString()));
    html.append(""String_Node_Str"");
  }
  html.append(""String_Node_Str"");
  Response.Status finalStatus=statusCode == null ? Response.Status.OK : Response.Status.fromStatusCode(statusCode.intValue());
  return Response.status(finalStatus).entity(html.toString()).build();
}",0.914804469273743
162782,"@Test public void testError(){
  MockHttpServletRequest mockRequest=new MockHttpServletRequest();
  mockRequest.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,500);
  mockRequest.setAttribute(RequestDispatcher.ERROR_REQUEST_URI,""String_Node_Str"");
  mockRequest.setAttribute(RequestDispatcher.ERROR_MESSAGE,""String_Node_Str"");
  mockRequest.setAttribute(RequestDispatcher.ERROR_EXCEPTION,new IllegalStateException());
  String response=new ErrorResource().error(mockRequest);
  assertTrue(response.contains(""String_Node_Str""));
  assertTrue(response.contains(""String_Node_Str""));
  assertTrue(response.contains(""String_Node_Str""));
  assertTrue(response.contains(""String_Node_Str""));
}","@Test public void testError(){
  MockHttpServletRequest mockRequest=new MockHttpServletRequest();
  mockRequest.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,500);
  mockRequest.setAttribute(RequestDispatcher.ERROR_REQUEST_URI,""String_Node_Str"");
  mockRequest.setAttribute(RequestDispatcher.ERROR_MESSAGE,""String_Node_Str"");
  mockRequest.setAttribute(RequestDispatcher.ERROR_EXCEPTION,new IllegalStateException());
  Response response=new ErrorResource().error(mockRequest);
  assertEquals(500,response.getStatus());
  String responseBody=response.getEntity().toString();
  assertTrue(responseBody.contains(""String_Node_Str""));
  assertTrue(responseBody.contains(""String_Node_Str""));
  assertTrue(responseBody.contains(""String_Node_Str""));
  assertTrue(responseBody.contains(""String_Node_Str""));
}",0.9147078576225656
162783,"@Test public void testServingLayerSecure() throws Exception {
  Path keystoreFile=SecureAPIConfigIT.buildKeystoreFile();
  Map<String,Object> overlay=buildOverlay();
  overlay.put(""String_Node_Str"",""String_Node_Str"" + keystoreFile + ""String_Node_Str"");
  overlay.put(""String_Node_Str"",""String_Node_Str"");
  Config config=ConfigUtils.overlayOn(overlay,ConfigUtils.getDefault());
  doTestServingLayer(config);
}","@Test public void testServingLayerSecure() throws Exception {
  Path keystoreFile=SecureAPIConfigIT.buildKeystoreFile();
  Map<String,Object> overlay=buildOverlay();
  overlay.put(""String_Node_Str"",""String_Node_Str"" + keystoreFile + ""String_Node_Str"");
  overlay.put(""String_Node_Str"",""String_Node_Str"");
  Config config=ConfigUtils.overlayOn(overlay,ConfigUtils.getDefault());
  try {
    doTestServingLayer(config);
  }
  finally {
    Files.delete(Paths.get(config.getString(""String_Node_Str"")));
  }
}",0.8949671772428884
162784,"@Override public Void call(JavaPairRDD<K,M> newData,Time timestamp) throws IOException, InterruptedException {
  long count=newData.count();
  if (count == 0) {
    log.info(""String_Node_Str"");
    return null;
  }
  log.info(""String_Node_Str"",count);
  Configuration hadoopConf=sparkContext.hadoopConfiguration();
  JavaPairRDD<K,M> pastData;
  Path inputPathPattern=new Path(dataDirString + ""String_Node_Str"");
  FileSystem fs=FileSystem.get(hadoopConf);
  FileStatus[] inputPathStatuses=fs.globStatus(inputPathPattern);
  if (inputPathStatuses == null || inputPathStatuses.length == 0) {
    log.info(""String_Node_Str"",inputPathPattern);
    pastData=null;
  }
 else {
    log.info(""String_Node_Str"",inputPathStatuses[0].getPath());
    Configuration updatedConf=new Configuration(hadoopConf);
    updatedConf.set(FileInputFormat.INPUT_DIR,joinFSPaths(fs,inputPathStatuses));
    @SuppressWarnings(""String_Node_Str"") JavaPairRDD<Writable,Writable> pastWritableData=(JavaPairRDD<Writable,Writable>)sparkContext.newAPIHadoopRDD(updatedConf,SequenceFileInputFormat.class,keyWritableClass,messageWritableClass);
    pastData=pastWritableData.mapToPair(new WritableToValueFunction<>(keyClass,messageClass,keyWritableClass,messageWritableClass));
  }
  try (TopicProducer<String,U> producer=new TopicProducerImpl<>(updateBroker,updateTopic)){
    updateInstance.runUpdate(sparkContext,timestamp.milliseconds(),newData,pastData,modelDirString,producer);
  }
   return null;
}","@Override public Void call(JavaPairRDD<K,M> newData,Time timestamp) throws IOException, InterruptedException {
  if (newData.take(1).isEmpty()) {
    log.info(""String_Node_Str"");
    return null;
  }
  log.info(""String_Node_Str"",timestamp);
  Configuration hadoopConf=sparkContext.hadoopConfiguration();
  JavaPairRDD<K,M> pastData;
  Path inputPathPattern=new Path(dataDirString + ""String_Node_Str"");
  FileSystem fs=FileSystem.get(hadoopConf);
  FileStatus[] inputPathStatuses=fs.globStatus(inputPathPattern);
  if (inputPathStatuses == null || inputPathStatuses.length == 0) {
    log.info(""String_Node_Str"",inputPathPattern);
    pastData=null;
  }
 else {
    log.info(""String_Node_Str"",inputPathStatuses[0].getPath());
    Configuration updatedConf=new Configuration(hadoopConf);
    updatedConf.set(FileInputFormat.INPUT_DIR,joinFSPaths(fs,inputPathStatuses));
    @SuppressWarnings(""String_Node_Str"") JavaPairRDD<Writable,Writable> pastWritableData=(JavaPairRDD<Writable,Writable>)sparkContext.newAPIHadoopRDD(updatedConf,SequenceFileInputFormat.class,keyWritableClass,messageWritableClass);
    pastData=pastWritableData.mapToPair(new WritableToValueFunction<>(keyClass,messageClass,keyWritableClass,messageWritableClass));
  }
  try (TopicProducer<String,U> producer=new TopicProducerImpl<>(updateBroker,updateTopic)){
    updateInstance.runUpdate(sparkContext,timestamp.milliseconds(),newData,pastData,modelDirString,producer);
  }
   return null;
}",0.9757761856021836
162785,"@Override public Void call(JavaPairRDD<Writable,Writable> rdd,Time time){
  long count=rdd.count();
  if (count > 0) {
    String file=prefix + ""String_Node_Str"" + time.milliseconds()+ ""String_Node_Str""+ suffix;
    log.info(""String_Node_Str"",count,file);
    rdd.saveAsNewAPIHadoopFile(file,keyWritableClass,messageWritableClass,outputFormatClass,hadoopConf);
  }
 else {
    log.info(""String_Node_Str"");
  }
  return null;
}","@Override public Void call(JavaPairRDD<Writable,Writable> rdd,Time time){
  if (rdd.take(1).isEmpty()) {
    log.info(""String_Node_Str"");
  }
 else {
    String file=prefix + ""String_Node_Str"" + time.milliseconds()+ ""String_Node_Str""+ suffix;
    log.info(""String_Node_Str"",file);
    rdd.saveAsNewAPIHadoopFile(file,keyWritableClass,messageWritableClass,outputFormatClass,hadoopConf);
  }
  return null;
}",0.7884615384615384
162786,"@Override public Void call(JavaPairRDD<K,M> newData) throws IOException {
  long count=newData.count();
  if (count > 0) {
    log.info(""String_Node_Str"",count);
    try (TopicProducer<String,U> producer=new TopicProducerImpl<>(updateBroker,updateTopic)){
      for (      U update : modelManager.buildUpdates(newData)) {
        producer.send(""String_Node_Str"",update);
      }
    }
   }
 else {
    log.debug(""String_Node_Str"");
  }
  return null;
}","@Override public Void call(JavaPairRDD<K,M> newData) throws IOException {
  if (newData.take(1).isEmpty()) {
    log.debug(""String_Node_Str"");
  }
 else {
    log.info(""String_Node_Str"");
    try (TopicProducer<String,U> producer=new TopicProducerImpl<>(updateBroker,updateTopic)){
      for (      U update : modelManager.buildUpdates(newData)) {
        producer.send(""String_Node_Str"",update);
      }
    }
   }
  return null;
}",0.7782805429864253
162787,"@Override public void runUpdate(JavaSparkContext sparkContext,long timestamp,JavaPairRDD<Object,M> newKeyMessageData,JavaPairRDD<Object,M> pastKeyMessageData,String modelDirString,TopicProducer<String,String> modelUpdateTopic) throws IOException, InterruptedException {
  Preconditions.checkNotNull(newKeyMessageData);
  JavaRDD<M> newData=newKeyMessageData.values();
  JavaRDD<M> pastData=pastKeyMessageData == null ? null : pastKeyMessageData.values();
  List<HyperParamValues<?>> hyperParamValues=getHyperParameterValues();
  int valuesPerHyperParam=chooseValuesPerHyperParam(hyperParamValues.size());
  List<List<?>> hyperParameterCombos=HyperParams.chooseHyperParameterCombos(hyperParamValues,candidates,valuesPerHyperParam);
  FileSystem fs=FileSystem.get(sparkContext.hadoopConfiguration());
  Path modelDir=new Path(modelDirString);
  Path tempModelPath=new Path(modelDir,""String_Node_Str"");
  Path candidatesPath=new Path(tempModelPath,Long.toString(System.currentTimeMillis()));
  fs.mkdirs(candidatesPath);
  Path bestCandidatePath=findBestCandidatePath(sparkContext,newData,pastData,hyperParameterCombos,candidatesPath);
  Path finalPath=new Path(modelDir,Long.toString(System.currentTimeMillis()));
  if (bestCandidatePath == null) {
    log.info(""String_Node_Str"");
  }
 else {
    fs.rename(bestCandidatePath,finalPath);
  }
  fs.delete(candidatesPath,true);
  Path bestModelPath=new Path(finalPath,MODEL_FILE_NAME);
  if (fs.exists(bestModelPath)) {
    PMML bestModel;
    try (InputStream in=new GZIPInputStream(fs.open(bestModelPath),1 << 16)){
      bestModel=PMMLUtils.read(in);
    }
     modelUpdateTopic.send(""String_Node_Str"",PMMLUtils.toString(bestModel));
    publishAdditionalModelData(sparkContext,bestModel,newData,pastData,finalPath,modelUpdateTopic);
  }
}","@Override public void runUpdate(JavaSparkContext sparkContext,long timestamp,JavaPairRDD<Object,M> newKeyMessageData,JavaPairRDD<Object,M> pastKeyMessageData,String modelDirString,TopicProducer<String,String> modelUpdateTopic) throws IOException, InterruptedException {
  Preconditions.checkNotNull(newKeyMessageData);
  JavaRDD<M> newData=newKeyMessageData.values();
  JavaRDD<M> pastData=pastKeyMessageData == null ? null : pastKeyMessageData.values();
  if (newData != null) {
    newData.cache();
    newData.count();
  }
  if (pastData != null) {
    pastData.cache();
    pastData.count();
  }
  List<HyperParamValues<?>> hyperParamValues=getHyperParameterValues();
  int valuesPerHyperParam=chooseValuesPerHyperParam(hyperParamValues.size());
  List<List<?>> hyperParameterCombos=HyperParams.chooseHyperParameterCombos(hyperParamValues,candidates,valuesPerHyperParam);
  FileSystem fs=FileSystem.get(sparkContext.hadoopConfiguration());
  Path modelDir=new Path(modelDirString);
  Path tempModelPath=new Path(modelDir,""String_Node_Str"");
  Path candidatesPath=new Path(tempModelPath,Long.toString(System.currentTimeMillis()));
  fs.mkdirs(candidatesPath);
  Path bestCandidatePath=findBestCandidatePath(sparkContext,newData,pastData,hyperParameterCombos,candidatesPath);
  Path finalPath=new Path(modelDir,Long.toString(System.currentTimeMillis()));
  if (bestCandidatePath == null) {
    log.info(""String_Node_Str"");
  }
 else {
    fs.rename(bestCandidatePath,finalPath);
  }
  fs.delete(candidatesPath,true);
  Path bestModelPath=new Path(finalPath,MODEL_FILE_NAME);
  if (fs.exists(bestModelPath)) {
    PMML bestModel;
    try (InputStream in=new GZIPInputStream(fs.open(bestModelPath),1 << 16)){
      bestModel=PMMLUtils.read(in);
    }
     modelUpdateTopic.send(""String_Node_Str"",PMMLUtils.toString(bestModel));
    publishAdditionalModelData(sparkContext,bestModel,newData,pastData,finalPath,modelUpdateTopic);
  }
  if (newData != null) {
    newData.unpersist();
  }
  if (pastData != null) {
    pastData.unpersist();
  }
}",0.9334377447141738
162788,"@Override public Tuple2<Path,Double> call() throws IOException {
  List<?> hyperParameters=hyperParameterCombos.get(i % hyperParameterCombos.size());
  Path candidatePath=new Path(candidatesPath,Integer.toString(i));
  log.info(""String_Node_Str"",i,hyperParameters);
  Pair<JavaRDD<M>,JavaRDD<M>> trainTestData=splitTrainTest(newData,pastData);
  JavaRDD<M> allTrainData=trainTestData.getFirst();
  JavaRDD<M> testData=trainTestData.getSecond();
  allTrainData.cache();
  long trainDataSize=allTrainData == null ? 0 : allTrainData.count();
  long testDataSize=testData == null ? 0 : testData.count();
  log.info(""String_Node_Str"",trainDataSize,testDataSize);
  Double eval=null;
  if (trainDataSize <= 0) {
    log.info(""String_Node_Str"");
  }
 else {
    PMML model=buildModel(sparkContext,allTrainData,hyperParameters,candidatePath);
    if (model == null) {
      log.info(""String_Node_Str"");
    }
 else {
      Path modelPath=new Path(candidatePath,MODEL_FILE_NAME);
      log.info(""String_Node_Str"",modelPath);
      FileSystem fs=FileSystem.get(sparkContext.hadoopConfiguration());
      fs.mkdirs(candidatePath);
      try (OutputStream out=new GZIPOutputStream(fs.create(modelPath),1 << 16)){
        PMMLUtils.write(model,out);
      }
       if (testDataSize == 0) {
        log.info(""String_Node_Str"");
      }
 else {
        log.info(""String_Node_Str"");
        double thisEval=evaluate(sparkContext,model,candidatePath,testData);
        eval=Double.isNaN(thisEval) ? null : thisEval;
      }
    }
  }
  if (!allTrainData.getStorageLevel().equals(StorageLevel.NONE())) {
    allTrainData.unpersist();
  }
  log.info(""String_Node_Str"",hyperParameters,eval,candidatePath);
  return new Tuple2<>(candidatePath,eval);
}","@Override public Tuple2<Path,Double> call() throws IOException {
  List<?> hyperParameters=hyperParameterCombos.get(i % hyperParameterCombos.size());
  Path candidatePath=new Path(candidatesPath,Integer.toString(i));
  log.info(""String_Node_Str"",i,hyperParameters);
  Pair<JavaRDD<M>,JavaRDD<M>> trainTestData=splitTrainTest(newData,pastData);
  JavaRDD<M> allTrainData=trainTestData.getFirst();
  JavaRDD<M> testData=trainTestData.getSecond();
  Double eval=null;
  if (empty(allTrainData)) {
    log.info(""String_Node_Str"");
  }
 else {
    PMML model=buildModel(sparkContext,allTrainData,hyperParameters,candidatePath);
    if (model == null) {
      log.info(""String_Node_Str"");
    }
 else {
      Path modelPath=new Path(candidatePath,MODEL_FILE_NAME);
      log.info(""String_Node_Str"",modelPath);
      FileSystem fs=FileSystem.get(sparkContext.hadoopConfiguration());
      fs.mkdirs(candidatePath);
      try (OutputStream out=new GZIPOutputStream(fs.create(modelPath),1 << 16)){
        PMMLUtils.write(model,out);
      }
       if (empty(testData)) {
        log.info(""String_Node_Str"");
      }
 else {
        log.info(""String_Node_Str"");
        double thisEval=evaluate(sparkContext,model,candidatePath,testData);
        eval=Double.isNaN(thisEval) ? null : thisEval;
      }
    }
  }
  log.info(""String_Node_Str"",hyperParameters,eval,candidatePath);
  return new Tuple2<>(candidatePath,eval);
}",0.869869551384028
162789,"private Pair<JavaRDD<M>,JavaRDD<M>> splitTrainTest(JavaRDD<M> newData,JavaRDD<M> pastData){
  Preconditions.checkNotNull(newData);
  if (testFraction <= 0.0) {
    return new Pair<>(pastData == null ? newData : newData.union(pastData),null);
  }
  if (testFraction >= 1.0) {
    return new Pair<>(pastData,newData);
  }
  if (newData.count() == 0) {
    return new Pair<>(pastData,null);
  }
  Pair<JavaRDD<M>,JavaRDD<M>> newTrainTest=splitNewDataToTrainTest(newData);
  JavaRDD<M> newTrainData=newTrainTest.getFirst();
  return new Pair<>(pastData == null ? newTrainData : newTrainData.union(pastData),newTrainTest.getSecond());
}","private Pair<JavaRDD<M>,JavaRDD<M>> splitTrainTest(JavaRDD<M> newData,JavaRDD<M> pastData){
  Preconditions.checkNotNull(newData);
  if (testFraction <= 0.0) {
    return new Pair<>(pastData == null ? newData : newData.union(pastData),null);
  }
  if (testFraction >= 1.0) {
    return new Pair<>(pastData,newData);
  }
  if (empty(newData)) {
    return new Pair<>(pastData,null);
  }
  Pair<JavaRDD<M>,JavaRDD<M>> newTrainTest=splitNewDataToTrainTest(newData);
  JavaRDD<M> newTrainData=newTrainTest.getFirst();
  return new Pair<>(pastData == null ? newTrainData : newTrainData.union(pastData),newTrainTest.getSecond());
}",0.9729299363057324
162790,"@Override public Prediction apply(DecisionTree tree){
  return tree.classify(test);
}","@Override public Prediction apply(DecisionTree tree){
  return tree.predict(test);
}",0.9230769230769232
162791,"/** 
 * @param predictorIndex index (0-based) among only predictors (not ID, not ignored, not target)
 * @return index (0-based) among all features
 */
public int predictorToFeatureIndex(int predictorIndex){
  Integer featureIndex=allToPredictorMap.inverse().get(predictorIndex);
  Preconditions.checkArgument(featureIndex != null);
  return featureIndex;
}","/** 
 * @param predictorIndex index (0-based) among only predictors (not ID, not ignored, not target)
 * @return index (0-based) among all features
 */
public int predictorToFeatureIndex(int predictorIndex){
  Integer featureIndex=allToPredictorMap.inverse().get(predictorIndex);
  Preconditions.checkArgument(featureIndex != null,""String_Node_Str"",predictorIndex);
  return featureIndex;
}",0.9558232931726908
162792,"/** 
 * @param featureIndex index (0-based) among all features
 * @return index (0-based) among only predictors (not ID, not ignored, not target)
 */
public int featureToPredictorIndex(int featureIndex){
  Integer predictorIndex=allToPredictorMap.get(featureIndex);
  Preconditions.checkArgument(predictorIndex != null);
  return predictorIndex;
}","/** 
 * @param featureIndex index (0-based) among all features
 * @return index (0-based) among only predictors (not ID, not ignored, not target)
 */
public int featureToPredictorIndex(int featureIndex){
  Integer predictorIndex=allToPredictorMap.get(featureIndex);
  Preconditions.checkArgument(predictorIndex != null,""String_Node_Str"",featureIndex);
  return predictorIndex;
}",0.9572413793103448
162793,"@Override public Boolean call(Example example){
  CategoricalPrediction prediction=(CategoricalPrediction)forest.classify(example);
  CategoricalFeature target=(CategoricalFeature)example.getTarget();
  return prediction.getMostProbableCategoryEncoding() == target.getEncoding();
}","@Override public Boolean call(Example example){
  CategoricalPrediction prediction=(CategoricalPrediction)forest.predict(example);
  CategoricalFeature target=(CategoricalFeature)example.getTarget();
  return prediction.getMostProbableCategoryEncoding() == target.getEncoding();
}",0.9732620320855616
162794,"static double rmse(final DecisionForest forest,JavaRDD<Example> examples){
  double mse=examples.mapToDouble(new DoubleFunction<Example>(){
    @Override public double call(    Example example){
      NumericPrediction prediction=(NumericPrediction)forest.classify(example);
      NumericFeature target=(NumericFeature)example.getTarget();
      double diff=prediction.getPrediction() - target.getValue();
      return diff * diff;
    }
  }
).mean();
  return Math.sqrt(mse);
}","static double rmse(final DecisionForest forest,JavaRDD<Example> examples){
  double mse=examples.mapToDouble(new DoubleFunction<Example>(){
    @Override public double call(    Example example){
      NumericPrediction prediction=(NumericPrediction)forest.predict(example);
      NumericFeature target=(NumericFeature)example.getTarget();
      double diff=prediction.getPrediction() - target.getValue();
      return diff * diff;
    }
  }
).mean();
  return Math.sqrt(mse);
}",0.9842931937172776
162795,"static double accuracy(final DecisionForest forest,JavaRDD<Example> examples){
  long total=examples.count();
  long correct=examples.filter(new Function<Example,Boolean>(){
    @Override public Boolean call(    Example example){
      CategoricalPrediction prediction=(CategoricalPrediction)forest.classify(example);
      CategoricalFeature target=(CategoricalFeature)example.getTarget();
      return prediction.getMostProbableCategoryEncoding() == target.getEncoding();
    }
  }
).count();
  return (double)correct / total;
}","static double accuracy(final DecisionForest forest,JavaRDD<Example> examples){
  long total=examples.count();
  long correct=examples.filter(new Function<Example,Boolean>(){
    @Override public Boolean call(    Example example){
      CategoricalPrediction prediction=(CategoricalPrediction)forest.predict(example);
      CategoricalFeature target=(CategoricalFeature)example.getTarget();
      return prediction.getMostProbableCategoryEncoding() == target.getEncoding();
    }
  }
).count();
  return (double)correct / total;
}",0.9858356940509916
162796,"private TreeModel toTreeModel(DecisionTreeModel dtModel,CategoricalValueEncodings categoricalValueEncodings,Map<Integer,Long> nodeIDCounts){
  boolean classificationTask=dtModel.algo().equals(Algo.Classification());
  Preconditions.checkState(classificationTask == inputSchema.isClassification());
  Map<Integer,String> targetEncodingToValue=categoricalValueEncodings.getEncodingValueMap(inputSchema.getTargetFeatureIndex());
  Node root=new Node();
  root.setId(""String_Node_Str"");
  Queue<Node> modelNodes=new ArrayDeque<>();
  modelNodes.add(root);
  Queue<Pair<org.apache.spark.mllib.tree.model.Node,Split>> treeNodes=new ArrayDeque<>();
  treeNodes.add(new Pair<>(dtModel.topNode(),(Split)null));
  while (!treeNodes.isEmpty()) {
    Pair<org.apache.spark.mllib.tree.model.Node,Split> treeNodePredicate=treeNodes.remove();
    Node modelNode=modelNodes.remove();
    Predicate predicate=buildPredicate(treeNodePredicate.getSecond(),categoricalValueEncodings);
    modelNode.setPredicate(predicate);
    org.apache.spark.mllib.tree.model.Node treeNode=treeNodePredicate.getFirst();
    long nodeCount=nodeIDCounts.get(treeNode.id());
    modelNode.setRecordCount((double)nodeCount);
    if (treeNode.isLeaf()) {
      Predict prediction=treeNode.predict();
      int targetEncodedValue=(int)prediction.predict();
      if (classificationTask) {
        String predictedCategoricalValue=targetEncodingToValue.get(targetEncodedValue);
        double confidence=prediction.prob();
        Preconditions.checkState(confidence >= 0.0 && confidence <= 1.0);
        long pseudoSDRecordCount=Math.round(confidence * nodeCount);
        ScoreDistribution distribution=new ScoreDistribution(predictedCategoricalValue,pseudoSDRecordCount);
        distribution.setConfidence(confidence);
        modelNode.getScoreDistributions().add(distribution);
      }
 else {
        modelNode.setScore(Double.toString(targetEncodedValue));
      }
    }
 else {
      Split split=treeNode.split().get();
      Node positiveModelNode=new Node();
      positiveModelNode.setId(modelNode.getId() + '+');
      modelNode.getNodes().add(positiveModelNode);
      Node negativeModelNode=new Node();
      negativeModelNode.setId(modelNode.getId() + '-');
      modelNode.getNodes().add(negativeModelNode);
      org.apache.spark.mllib.tree.model.Node rightTreeNode=treeNode.rightNode().get();
      org.apache.spark.mllib.tree.model.Node leftTreeNode=treeNode.leftNode().get();
      boolean defaultRight=nodeIDCounts.get(rightTreeNode.id()) > nodeIDCounts.get(leftTreeNode.id());
      modelNode.setDefaultChild(defaultRight ? positiveModelNode.getId() : negativeModelNode.getId());
      modelNodes.add(positiveModelNode);
      modelNodes.add(negativeModelNode);
      treeNodes.add(new Pair<>(rightTreeNode,split));
      treeNodes.add(new Pair<>(leftTreeNode,(Split)null));
    }
  }
  TreeModel treeModel=new TreeModel();
  treeModel.setNode(root);
  treeModel.setSplitCharacteristic(TreeModel.SplitCharacteristic.BINARY_SPLIT);
  treeModel.setMissingValueStrategy(MissingValueStrategyType.DEFAULT_CHILD);
  return treeModel;
}","private TreeModel toTreeModel(DecisionTreeModel dtModel,CategoricalValueEncodings categoricalValueEncodings,Map<Integer,Long> nodeIDCounts){
  boolean classificationTask=dtModel.algo().equals(Algo.Classification());
  Preconditions.checkState(classificationTask == inputSchema.isClassification());
  Node root=new Node();
  root.setId(""String_Node_Str"");
  Queue<Node> modelNodes=new ArrayDeque<>();
  modelNodes.add(root);
  Queue<Pair<org.apache.spark.mllib.tree.model.Node,Split>> treeNodes=new ArrayDeque<>();
  treeNodes.add(new Pair<>(dtModel.topNode(),(Split)null));
  while (!treeNodes.isEmpty()) {
    Pair<org.apache.spark.mllib.tree.model.Node,Split> treeNodePredicate=treeNodes.remove();
    Node modelNode=modelNodes.remove();
    Predicate predicate=buildPredicate(treeNodePredicate.getSecond(),categoricalValueEncodings);
    modelNode.setPredicate(predicate);
    org.apache.spark.mllib.tree.model.Node treeNode=treeNodePredicate.getFirst();
    long nodeCount=nodeIDCounts.get(treeNode.id());
    modelNode.setRecordCount((double)nodeCount);
    if (treeNode.isLeaf()) {
      Predict prediction=treeNode.predict();
      int targetEncodedValue=(int)prediction.predict();
      if (classificationTask) {
        Map<Integer,String> targetEncodingToValue=categoricalValueEncodings.getEncodingValueMap(inputSchema.getTargetFeatureIndex());
        String predictedCategoricalValue=targetEncodingToValue.get(targetEncodedValue);
        double confidence=prediction.prob();
        Preconditions.checkState(confidence >= 0.0 && confidence <= 1.0);
        long pseudoSDRecordCount=Math.round(confidence * nodeCount);
        ScoreDistribution distribution=new ScoreDistribution(predictedCategoricalValue,pseudoSDRecordCount);
        distribution.setConfidence(confidence);
        modelNode.getScoreDistributions().add(distribution);
      }
 else {
        modelNode.setScore(Double.toString(targetEncodedValue));
      }
    }
 else {
      Split split=treeNode.split().get();
      Node positiveModelNode=new Node();
      positiveModelNode.setId(modelNode.getId() + '+');
      modelNode.getNodes().add(positiveModelNode);
      Node negativeModelNode=new Node();
      negativeModelNode.setId(modelNode.getId() + '-');
      modelNode.getNodes().add(negativeModelNode);
      org.apache.spark.mllib.tree.model.Node rightTreeNode=treeNode.rightNode().get();
      org.apache.spark.mllib.tree.model.Node leftTreeNode=treeNode.leftNode().get();
      boolean defaultRight=nodeIDCounts.get(rightTreeNode.id()) > nodeIDCounts.get(leftTreeNode.id());
      modelNode.setDefaultChild(defaultRight ? positiveModelNode.getId() : negativeModelNode.getId());
      modelNodes.add(positiveModelNode);
      modelNodes.add(negativeModelNode);
      treeNodes.add(new Pair<>(rightTreeNode,split));
      treeNodes.add(new Pair<>(leftTreeNode,(Split)null));
    }
  }
  TreeModel treeModel=new TreeModel();
  treeModel.setNode(root);
  treeModel.setSplitCharacteristic(TreeModel.SplitCharacteristic.BINARY_SPLIT);
  treeModel.setMissingValueStrategy(MissingValueStrategyType.DEFAULT_CHILD);
  return treeModel;
}",0.957931920359666
162797,"@Override public PMML buildModel(JavaSparkContext sparkContext,JavaRDD<String> trainData,List<?> hyperParameters,Path candidatePath){
  int maxSplitCandidates=(Integer)hyperParameters.get(0);
  int maxDepth=(Integer)hyperParameters.get(1);
  String impurity=(String)hyperParameters.get(2);
  Preconditions.checkArgument(maxSplitCandidates > 0);
  Preconditions.checkArgument(maxDepth > 0);
  JavaRDD<String[]> parsedRDD=trainData.map(MLFunctions.PARSE_FN);
  CategoricalValueEncodings categoricalValueEncodings=new CategoricalValueEncodings(getDistinctValues(parsedRDD));
  JavaRDD<LabeledPoint> trainPointData=parseToLabeledPointRDD(parsedRDD,categoricalValueEncodings);
  Map<Integer,Integer> categoryInfo=categoricalValueEncodings.getCategoryCounts();
  categoryInfo.remove(inputSchema.getTargetFeatureIndex());
  int seed=RandomManager.getRandom().nextInt();
  RandomForestModel model;
  if (inputSchema.isClassification()) {
    int numTargetClasses=categoricalValueEncodings.getValueCount(inputSchema.getTargetFeatureIndex());
    model=RandomForest.trainClassifier(trainPointData,numTargetClasses,categoryInfo,numTrees,""String_Node_Str"",impurity,maxDepth,maxSplitCandidates,seed);
  }
 else {
    model=RandomForest.trainRegressor(trainPointData,categoryInfo,numTrees,""String_Node_Str"",impurity,maxDepth,maxSplitCandidates,seed);
  }
  List<Map<Integer,Long>> treeNodeIDCounts=treeNodeExampleCounts(trainPointData,model);
  Map<Integer,Long> predictorIndexCounts=predictorExampleCounts(trainPointData,model);
  return rdfModelToPMML(model,categoricalValueEncodings,maxDepth,maxSplitCandidates,impurity,treeNodeIDCounts,predictorIndexCounts);
}","@Override public PMML buildModel(JavaSparkContext sparkContext,JavaRDD<String> trainData,List<?> hyperParameters,Path candidatePath){
  int maxSplitCandidates=(Integer)hyperParameters.get(0);
  int maxDepth=(Integer)hyperParameters.get(1);
  String impurity=(String)hyperParameters.get(2);
  Preconditions.checkArgument(maxSplitCandidates >= 2,""String_Node_Str"");
  Preconditions.checkArgument(maxDepth > 0,""String_Node_Str"");
  JavaRDD<String[]> parsedRDD=trainData.map(MLFunctions.PARSE_FN);
  CategoricalValueEncodings categoricalValueEncodings=new CategoricalValueEncodings(getDistinctValues(parsedRDD));
  JavaRDD<LabeledPoint> trainPointData=parseToLabeledPointRDD(parsedRDD,categoricalValueEncodings);
  Map<Integer,Integer> categoryInfo=categoricalValueEncodings.getCategoryCounts();
  categoryInfo.remove(inputSchema.getTargetFeatureIndex());
  Map<Integer,Integer> categoryInfoByPredictor=new HashMap<>(categoryInfo.size());
  for (  Map.Entry<Integer,Integer> e : categoryInfo.entrySet()) {
    categoryInfoByPredictor.put(inputSchema.featureToPredictorIndex(e.getKey()),e.getValue());
  }
  int seed=RandomManager.getRandom().nextInt();
  RandomForestModel model;
  if (inputSchema.isClassification()) {
    int numTargetClasses=categoricalValueEncodings.getValueCount(inputSchema.getTargetFeatureIndex());
    model=RandomForest.trainClassifier(trainPointData,numTargetClasses,categoryInfoByPredictor,numTrees,""String_Node_Str"",impurity,maxDepth,maxSplitCandidates,seed);
  }
 else {
    model=RandomForest.trainRegressor(trainPointData,categoryInfoByPredictor,numTrees,""String_Node_Str"",impurity,maxDepth,maxSplitCandidates,seed);
  }
  List<Map<Integer,Long>> treeNodeIDCounts=treeNodeExampleCounts(trainPointData,model);
  Map<Integer,Long> predictorIndexCounts=predictorExampleCounts(trainPointData,model);
  return rdfModelToPMML(model,categoricalValueEncodings,maxDepth,maxSplitCandidates,impurity,treeNodeIDCounts,predictorIndexCounts);
}",0.9135254988913526
162798,"protected static void checkExtensions(PMML pmml,Map<String,?> expected){
  for (  Map.Entry<String,?> e : expected.entrySet()) {
    assertEquals(e.getValue().toString(),AppPMMLUtils.getExtensionValue(pmml,e.getKey()));
  }
}","protected static void checkExtensions(PMML pmml,Map<String,?> expected){
  for (  Map.Entry<String,?> e : expected.entrySet()) {
    String key=e.getKey();
    assertEquals(""String_Node_Str"" + key + ""String_Node_Str"",e.getValue().toString(),AppPMMLUtils.getExtensionValue(pmml,key));
  }
}",0.8365758754863813
162799,"protected static void checkMiningSchema(InputSchema schema,MiningSchema miningSchema){
  assertNotNull(miningSchema);
  List<MiningField> miningFields=miningSchema.getMiningFields();
  List<String> expectedFeatureNames=schema.getFeatureNames();
  assertEquals(expectedFeatureNames.size(),miningFields.size());
  for (int i=0; i < expectedFeatureNames.size(); i++) {
    MiningField miningField=miningFields.get(i);
    String expectedFeature=expectedFeatureNames.get(i);
    assertEquals(expectedFeature,miningField.getName().getValue());
    if (schema.isNumeric(expectedFeature)) {
      assertEquals(OpType.CONTINUOUS,miningField.getOptype());
      if (schema.isTarget(expectedFeature)) {
        assertEquals(FieldUsageType.PREDICTED,miningField.getUsageType());
      }
 else {
        assertEquals(FieldUsageType.ACTIVE,miningField.getUsageType());
        assertTrue(miningField.getImportance() >= 0.0 && miningField.getImportance() <= 1.0);
      }
    }
 else     if (schema.isCategorical(expectedFeature)) {
      assertEquals(OpType.CATEGORICAL,miningField.getOptype());
      if (schema.isTarget(expectedFeature)) {
        assertEquals(FieldUsageType.PREDICTED,miningField.getUsageType());
      }
 else {
        assertEquals(FieldUsageType.ACTIVE,miningField.getUsageType());
        assertTrue(miningField.getImportance() >= 0.0 && miningField.getImportance() <= 1.0);
      }
    }
 else {
      assertEquals(FieldUsageType.SUPPLEMENTARY,miningField.getUsageType());
    }
  }
}","protected static void checkMiningSchema(InputSchema schema,MiningSchema miningSchema){
  assertNotNull(miningSchema);
  List<MiningField> miningFields=miningSchema.getMiningFields();
  List<String> expectedFeatureNames=schema.getFeatureNames();
  assertEquals(""String_Node_Str"",expectedFeatureNames.size(),miningFields.size());
  for (int i=0; i < expectedFeatureNames.size(); i++) {
    MiningField miningField=miningFields.get(i);
    String expectedFeature=expectedFeatureNames.get(i);
    String featureName=miningField.getName().getValue();
    assertEquals(""String_Node_Str"" + i,expectedFeature,featureName);
    if (schema.isNumeric(expectedFeature)) {
      assertEquals(""String_Node_Str"" + featureName,OpType.CONTINUOUS,miningField.getOptype());
      if (schema.isTarget(expectedFeature)) {
        assertEquals(""String_Node_Str"" + featureName,FieldUsageType.PREDICTED,miningField.getUsageType());
      }
 else {
        assertEquals(""String_Node_Str"" + featureName,FieldUsageType.ACTIVE,miningField.getUsageType());
        double importance=miningField.getImportance();
        assertTrue(""String_Node_Str"" + importance,importance >= 0.0 && importance <= 1.0);
      }
    }
 else     if (schema.isCategorical(expectedFeature)) {
      assertEquals(""String_Node_Str"" + featureName,OpType.CATEGORICAL,miningField.getOptype());
      if (schema.isTarget(expectedFeature)) {
        assertEquals(""String_Node_Str"" + featureName,FieldUsageType.PREDICTED,miningField.getUsageType());
      }
 else {
        assertEquals(""String_Node_Str"" + featureName,FieldUsageType.ACTIVE,miningField.getUsageType());
        double importance=miningField.getImportance();
        assertTrue(""String_Node_Str"" + importance,importance >= 0.0 && importance <= 1.0);
      }
    }
 else {
      assertEquals(""String_Node_Str"" + featureName,FieldUsageType.SUPPLEMENTARY,miningField.getUsageType());
    }
  }
}",0.817432273262662
162800,"protected static void checkDataDictionary(InputSchema schema,DataDictionary dataDictionary){
  assertNotNull(dataDictionary);
  assertEquals(schema.getNumFeatures(),dataDictionary.getNumberOfFields().intValue());
  List<DataField> dataFields=dataDictionary.getDataFields();
  assertEquals(schema.getNumFeatures(),dataFields.size());
  for (  DataField dataField : dataFields) {
    String featureName=dataField.getName().getValue();
    if (schema.isNumeric(featureName)) {
      assertEquals(OpType.CONTINUOUS,dataField.getOptype());
      assertEquals(DataType.DOUBLE,dataField.getDataType());
    }
 else     if (schema.isCategorical(featureName)) {
      assertEquals(OpType.CATEGORICAL,dataField.getOptype());
      assertEquals(DataType.STRING,dataField.getDataType());
    }
 else {
      assertNull(dataField.getOptype());
      assertNull(dataField.getDataType());
    }
  }
}","protected static void checkDataDictionary(InputSchema schema,DataDictionary dataDictionary){
  assertNotNull(dataDictionary);
  assertEquals(""String_Node_Str"",schema.getNumFeatures(),dataDictionary.getNumberOfFields().intValue());
  List<DataField> dataFields=dataDictionary.getDataFields();
  assertEquals(schema.getNumFeatures(),dataFields.size());
  for (  DataField dataField : dataFields) {
    String featureName=dataField.getName().getValue();
    if (schema.isNumeric(featureName)) {
      assertEquals(""String_Node_Str"" + featureName,OpType.CONTINUOUS,dataField.getOptype());
      assertEquals(""String_Node_Str"" + featureName,DataType.DOUBLE,dataField.getDataType());
    }
 else     if (schema.isCategorical(featureName)) {
      assertEquals(""String_Node_Str"" + featureName,OpType.CATEGORICAL,dataField.getOptype());
      assertEquals(""String_Node_Str"" + featureName,DataType.STRING,dataField.getDataType());
    }
 else {
      assertNull(dataField.getOptype());
      assertNull(dataField.getDataType());
    }
  }
}",0.9237995824634656
162801,"@Test public void testALS() throws Exception {
  Path tempDir=getTempDir();
  Path dataDir=tempDir.resolve(""String_Node_Str"");
  Path modelDir=tempDir.resolve(""String_Node_Str"");
  Map<String,Object> overlayConfig=new HashMap<>();
  overlayConfig.put(""String_Node_Str"",ALSUpdate.class.getName());
  ConfigUtils.set(overlayConfig,""String_Node_Str"",dataDir);
  ConfigUtils.set(overlayConfig,""String_Node_Str"",modelDir);
  overlayConfig.put(""String_Node_Str"",GEN_INTERVAL_SEC);
  overlayConfig.put(""String_Node_Str"",BLOCK_INTERVAL_SEC);
  overlayConfig.put(""String_Node_Str"",false);
  overlayConfig.put(""String_Node_Str"",LAMBDA);
  overlayConfig.put(""String_Node_Str"",FEATURES);
  Config config=ConfigUtils.overlayOn(overlayConfig,getConfig());
  startMessaging();
  List<Pair<String,String>> updates=startServerProduceConsumeTopics(config,new RandomALSDataGenerator(NUM_USERS_ITEMS,NUM_USERS_ITEMS,1,5),DATA_TO_WRITE,WRITE_INTERVAL_MSEC);
  List<Path> modelInstanceDirs=IOUtils.listFiles(modelDir,""String_Node_Str"");
  log.info(""String_Node_Str"",modelInstanceDirs);
  int generations=modelInstanceDirs.size();
  checkIntervals(generations,DATA_TO_WRITE,WRITE_INTERVAL_MSEC,GEN_INTERVAL_SEC);
  List<Collection<Integer>> userIDs=new ArrayList<>();
  userIDs.add(Collections.<Integer>emptySet());
  List<Collection<Integer>> productIDs=new ArrayList<>();
  productIDs.add(Collections.<Integer>emptySet());
  for (  Path modelInstanceDir : modelInstanceDirs) {
    log.info(""String_Node_Str"",modelInstanceDir);
    Path modelFile=modelInstanceDir.resolve(MLUpdate.MODEL_FILE_NAME);
    assertTrue(""String_Node_Str"" + modelFile,Files.exists(modelFile));
    assertTrue(""String_Node_Str"" + modelFile,Files.size(modelFile) > 0);
    Path xDir=modelInstanceDir.resolve(""String_Node_Str"");
    assertTrue(Files.exists(xDir));
    userIDs.add(checkFeatures(xDir,userIDs.get(userIDs.size() - 1)));
    Path yDir=modelInstanceDir.resolve(""String_Node_Str"");
    assertTrue(Files.exists(yDir));
    productIDs.add(checkFeatures(yDir,productIDs.get(productIDs.size() - 1)));
  }
  userIDs.remove(0);
  productIDs.remove(0);
  Collection<Integer> expectedUsers=null;
  Collection<Integer> expectedProducts=null;
  Collection<Integer> seenUsers=null;
  Collection<Integer> seenProducts=null;
  Collection<Integer> lastModelUsers=null;
  Collection<Integer> lastModelProducts=null;
  int whichGeneration=-1;
  for (  Pair<String,String> km : updates) {
    String type=km.getFirst();
    String value=km.getSecond();
    log.debug(""String_Node_Str"",type,value);
    boolean isModel=""String_Node_Str"".equals(type);
    boolean isUpdate=""String_Node_Str"".equals(type);
    assertTrue(isModel || isUpdate);
    if (isUpdate) {
      assertNotNull(seenUsers);
      assertNotNull(seenProducts);
      List<?> update=MAPPER.readValue(value,List.class);
      String whichMatrixField=update.get(0).toString();
      boolean isUser=""String_Node_Str"".equals(whichMatrixField);
      boolean isProduct=""String_Node_Str"".equals(whichMatrixField);
      Integer id=Integer.valueOf(update.get(1).toString());
      assertTrue(isUser || isProduct);
      if (isUser) {
        seenUsers.add(id);
      }
 else {
        seenProducts.add(id);
      }
      for (      float f : MAPPER.convertValue(update.get(2),float[].class)) {
        assertTrue(!Float.isNaN(f) && !Float.isInfinite(f));
      }
      if (isUser) {
        @SuppressWarnings(""String_Node_Str"") Collection<String> knownUsersItems=(Collection<String>)update.get(3);
        assertFalse(knownUsersItems.isEmpty());
        for (        String known : knownUsersItems) {
          int i=Integer.parseInt(known);
          assertTrue(i >= 0 && i < NUM_USERS_ITEMS);
        }
      }
    }
 else {
      PMML pmml=PMMLUtils.fromString(value);
      checkHeader(pmml.getHeader());
      assertEquals(7,pmml.getExtensions().size());
      Map<String,Object> expected=new HashMap<>();
      expected.put(""String_Node_Str"",FEATURES);
      expected.put(""String_Node_Str"",LAMBDA);
      expected.put(""String_Node_Str"",false);
      checkExtensions(pmml,expected);
      assertEquals(expectedUsers,seenUsers);
      assertEquals(expectedProducts,seenProducts);
      assertEquals(expectedUsers,lastModelUsers);
      assertEquals(expectedProducts,lastModelProducts);
      whichGeneration++;
      expectedUsers=userIDs.get(whichGeneration);
      expectedProducts=productIDs.get(whichGeneration);
      seenUsers=new HashSet<>();
      seenProducts=new HashSet<>();
      lastModelUsers=parseIDsFromContent(AppPMMLUtils.getExtensionContent(pmml,""String_Node_Str""));
      lastModelProducts=parseIDsFromContent(AppPMMLUtils.getExtensionContent(pmml,""String_Node_Str""));
    }
  }
}","@Test public void testALS() throws Exception {
  Path tempDir=getTempDir();
  Path dataDir=tempDir.resolve(""String_Node_Str"");
  Path modelDir=tempDir.resolve(""String_Node_Str"");
  Map<String,Object> overlayConfig=new HashMap<>();
  overlayConfig.put(""String_Node_Str"",ALSUpdate.class.getName());
  ConfigUtils.set(overlayConfig,""String_Node_Str"",dataDir);
  ConfigUtils.set(overlayConfig,""String_Node_Str"",modelDir);
  overlayConfig.put(""String_Node_Str"",GEN_INTERVAL_SEC);
  overlayConfig.put(""String_Node_Str"",BLOCK_INTERVAL_SEC);
  overlayConfig.put(""String_Node_Str"",false);
  overlayConfig.put(""String_Node_Str"",LAMBDA);
  overlayConfig.put(""String_Node_Str"",FEATURES);
  Config config=ConfigUtils.overlayOn(overlayConfig,getConfig());
  startMessaging();
  List<Pair<String,String>> updates=startServerProduceConsumeTopics(config,new RandomALSDataGenerator(NUM_USERS_ITEMS,NUM_USERS_ITEMS,1,5),DATA_TO_WRITE,WRITE_INTERVAL_MSEC);
  List<Path> modelInstanceDirs=IOUtils.listFiles(modelDir,""String_Node_Str"");
  log.info(""String_Node_Str"",modelInstanceDirs);
  int generations=modelInstanceDirs.size();
  checkIntervals(generations,DATA_TO_WRITE,WRITE_INTERVAL_MSEC,GEN_INTERVAL_SEC);
  List<Collection<Integer>> userIDs=new ArrayList<>();
  userIDs.add(Collections.<Integer>emptySet());
  List<Collection<Integer>> productIDs=new ArrayList<>();
  productIDs.add(Collections.<Integer>emptySet());
  for (  Path modelInstanceDir : modelInstanceDirs) {
    log.info(""String_Node_Str"",modelInstanceDir);
    Path modelFile=modelInstanceDir.resolve(MLUpdate.MODEL_FILE_NAME);
    assertTrue(""String_Node_Str"" + modelFile,Files.exists(modelFile));
    assertTrue(""String_Node_Str"" + modelFile,Files.size(modelFile) > 0);
    PMMLUtils.read(modelFile);
    Path xDir=modelInstanceDir.resolve(""String_Node_Str"");
    assertTrue(Files.exists(xDir));
    userIDs.add(checkFeatures(xDir,userIDs.get(userIDs.size() - 1)));
    Path yDir=modelInstanceDir.resolve(""String_Node_Str"");
    assertTrue(Files.exists(yDir));
    productIDs.add(checkFeatures(yDir,productIDs.get(productIDs.size() - 1)));
  }
  userIDs.remove(0);
  productIDs.remove(0);
  Collection<Integer> expectedUsers=null;
  Collection<Integer> expectedProducts=null;
  Collection<Integer> seenUsers=null;
  Collection<Integer> seenProducts=null;
  Collection<Integer> lastModelUsers=null;
  Collection<Integer> lastModelProducts=null;
  int whichGeneration=-1;
  for (  Pair<String,String> km : updates) {
    String type=km.getFirst();
    String value=km.getSecond();
    log.debug(""String_Node_Str"",type,value);
    boolean isModel=""String_Node_Str"".equals(type);
    boolean isUpdate=""String_Node_Str"".equals(type);
    assertTrue(isModel || isUpdate);
    if (isUpdate) {
      assertNotNull(seenUsers);
      assertNotNull(seenProducts);
      List<?> update=MAPPER.readValue(value,List.class);
      String whichMatrixField=update.get(0).toString();
      boolean isUser=""String_Node_Str"".equals(whichMatrixField);
      boolean isProduct=""String_Node_Str"".equals(whichMatrixField);
      Integer id=Integer.valueOf(update.get(1).toString());
      assertTrue(isUser || isProduct);
      if (isUser) {
        seenUsers.add(id);
      }
 else {
        seenProducts.add(id);
      }
      for (      float f : MAPPER.convertValue(update.get(2),float[].class)) {
        assertTrue(!Float.isNaN(f) && !Float.isInfinite(f));
      }
      if (isUser) {
        @SuppressWarnings(""String_Node_Str"") Collection<String> knownUsersItems=(Collection<String>)update.get(3);
        assertFalse(knownUsersItems.isEmpty());
        for (        String known : knownUsersItems) {
          int i=Integer.parseInt(known);
          assertTrue(i >= 0 && i < NUM_USERS_ITEMS);
        }
      }
    }
 else {
      log.info(""String_Node_Str"",value);
      PMML pmml=PMMLUtils.fromString(value);
      checkHeader(pmml.getHeader());
      assertEquals(7,pmml.getExtensions().size());
      Map<String,Object> expected=new HashMap<>();
      expected.put(""String_Node_Str"",FEATURES);
      expected.put(""String_Node_Str"",LAMBDA);
      expected.put(""String_Node_Str"",false);
      checkExtensions(pmml,expected);
      assertEquals(expectedUsers,seenUsers);
      assertEquals(expectedProducts,seenProducts);
      assertEquals(expectedUsers,lastModelUsers);
      assertEquals(expectedProducts,lastModelProducts);
      whichGeneration++;
      expectedUsers=userIDs.get(whichGeneration);
      expectedProducts=productIDs.get(whichGeneration);
      seenUsers=new HashSet<>();
      seenProducts=new HashSet<>();
      lastModelUsers=parseIDsFromContent(AppPMMLUtils.getExtensionContent(pmml,""String_Node_Str""));
      lastModelProducts=parseIDsFromContent(AppPMMLUtils.getExtensionContent(pmml,""String_Node_Str""));
    }
  }
}",0.9924114671163576
162802,"@Ignore @Test public void testKMeans() throws Exception {
  Path tempDir=getTempDir();
  Path dataDir=tempDir.resolve(""String_Node_Str"");
  Path modelDir=tempDir.resolve(""String_Node_Str"");
  Map<String,Object> overlayConfig=new HashMap<>();
  overlayConfig.put(""String_Node_Str"",KMeansUpdate.class.getName());
  ConfigUtils.set(overlayConfig,""String_Node_Str"",dataDir);
  ConfigUtils.set(overlayConfig,""String_Node_Str"",modelDir);
  overlayConfig.put(""String_Node_Str"",GEN_INTERVAL_SEC);
  overlayConfig.put(""String_Node_Str"",BLOCK_INTERVAL_SEC);
  overlayConfig.put(""String_Node_Str"",CLUSTERS);
  overlayConfig.put(""String_Node_Str"",2);
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",5);
  Config config=ConfigUtils.overlayOn(overlayConfig,getConfig());
  startMessaging();
  List<Pair<String,String>> updates=startServerProduceConsumeTopics(config,new RandomKMeansDataGenerator(2),DATA_TO_WRITE,WRITE_INTERVAL_MSEC);
  List<Path> modelInstanceDirs=IOUtils.listFiles(modelDir,""String_Node_Str"");
  log.info(""String_Node_Str"",modelInstanceDirs);
  assertFalse(""String_Node_Str"",modelInstanceDirs.isEmpty());
  int generations=modelInstanceDirs.size();
  checkIntervals(generations,DATA_TO_WRITE,WRITE_INTERVAL_MSEC,GEN_INTERVAL_SEC);
  for (  Path modelInstanceDir : modelInstanceDirs) {
    log.info(""String_Node_Str"",modelInstanceDir);
    Path modelFile=modelInstanceDir.resolve(MLUpdate.MODEL_FILE_NAME);
    assertTrue(""String_Node_Str"" + modelFile,Files.exists(modelFile));
    assertTrue(""String_Node_Str"" + modelFile,Files.size(modelFile) > 0);
  }
  for (  Pair<String,String> km : updates) {
    String type=km.getFirst();
    String value=km.getSecond();
    log.debug(""String_Node_Str"",type,value);
    assertEquals(""String_Node_Str"",type);
    PMML pmml=PMMLUtils.fromString(value);
    checkHeader(pmml.getHeader());
    Model rootModel=pmml.getModels().get(0);
    assertTrue(rootModel instanceof ClusteringModel);
    ClusteringModel clusteringModel=((ClusteringModel)rootModel);
    assertEquals(Integer.valueOf(CLUSTERS),clusteringModel.getNumberOfClusters());
    assertEquals(ComparisonMeasure.Kind.DISTANCE,clusteringModel.getComparisonMeasure().getKind());
    assertEquals(2,clusteringModel.getClusters().get(0).getArray().getN().intValue());
  }
}","@Ignore @Test public void testKMeans() throws Exception {
  Path tempDir=getTempDir();
  Path dataDir=tempDir.resolve(""String_Node_Str"");
  Path modelDir=tempDir.resolve(""String_Node_Str"");
  Map<String,Object> overlayConfig=new HashMap<>();
  overlayConfig.put(""String_Node_Str"",KMeansUpdate.class.getName());
  ConfigUtils.set(overlayConfig,""String_Node_Str"",dataDir);
  ConfigUtils.set(overlayConfig,""String_Node_Str"",modelDir);
  overlayConfig.put(""String_Node_Str"",GEN_INTERVAL_SEC);
  overlayConfig.put(""String_Node_Str"",BLOCK_INTERVAL_SEC);
  overlayConfig.put(""String_Node_Str"",CLUSTERS);
  overlayConfig.put(""String_Node_Str"",2);
  overlayConfig.put(""String_Node_Str"",""String_Node_Str"");
  overlayConfig.put(""String_Node_Str"",5);
  Config config=ConfigUtils.overlayOn(overlayConfig,getConfig());
  startMessaging();
  List<Pair<String,String>> updates=startServerProduceConsumeTopics(config,new RandomKMeansDataGenerator(2),DATA_TO_WRITE,WRITE_INTERVAL_MSEC);
  List<Path> modelInstanceDirs=IOUtils.listFiles(modelDir,""String_Node_Str"");
  log.info(""String_Node_Str"",modelInstanceDirs);
  assertFalse(""String_Node_Str"",modelInstanceDirs.isEmpty());
  int generations=modelInstanceDirs.size();
  checkIntervals(generations,DATA_TO_WRITE,WRITE_INTERVAL_MSEC,GEN_INTERVAL_SEC);
  for (  Path modelInstanceDir : modelInstanceDirs) {
    log.info(""String_Node_Str"",modelInstanceDir);
    Path modelFile=modelInstanceDir.resolve(MLUpdate.MODEL_FILE_NAME);
    assertTrue(""String_Node_Str"" + modelFile,Files.exists(modelFile));
    assertTrue(""String_Node_Str"" + modelFile,Files.size(modelFile) > 0);
    PMMLUtils.read(modelFile);
  }
  for (  Pair<String,String> km : updates) {
    String type=km.getFirst();
    String value=km.getSecond();
    assertEquals(""String_Node_Str"",type);
    log.info(""String_Node_Str"",value);
    PMML pmml=PMMLUtils.fromString(value);
    checkHeader(pmml.getHeader());
    Model rootModel=pmml.getModels().get(0);
    assertTrue(rootModel instanceof ClusteringModel);
    ClusteringModel clusteringModel=((ClusteringModel)rootModel);
    assertEquals(Integer.valueOf(CLUSTERS),clusteringModel.getNumberOfClusters());
    assertEquals(ComparisonMeasure.Kind.DISTANCE,clusteringModel.getComparisonMeasure().getKind());
    assertEquals(2,clusteringModel.getClusters().get(0).getArray().getN().intValue());
  }
}",0.9727876580244268
162803,"private static BufferedReader buildReader(String contentEncoding,InputStream in) throws IOException {
switch (contentEncoding) {
case ""String_Node_Str"":
    in=new ZipInputStream(in);
  break;
case ""String_Node_Str"":
case ""String_Node_Str"":
in=new GZIPInputStream(in);
break;
}
return new BufferedReader(new InputStreamReader(in,StandardCharsets.UTF_8));
}","private static BufferedReader buildReader(String contentEncoding,InputStream in) throws IOException {
  if (contentEncoding != null) {
switch (contentEncoding) {
case ""String_Node_Str"":
      in=new ZipInputStream(in);
    break;
case ""String_Node_Str"":
case ""String_Node_Str"":
  in=new GZIPInputStream(in);
break;
}
}
return new BufferedReader(new InputStreamReader(in,StandardCharsets.UTF_8));
}",0.9455511288180612
162804,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public List<Double> getEstimatePreferences(@PathParam(""String_Node_Str"") final Integer userID,@PathParam(""String_Node_Str"") final List<PathSegment> pathSegmentsList){
  ALSServingModelManager alsServingModelManager=(ALSServingModelManager)servletContext.getAttribute(""String_Node_Str"");
  ALSServingModel alsServingModel=alsServingModelManager.getModel();
  List<Integer> itemIdsList=new ArrayList<>(pathSegmentsList.size());
  for (  PathSegment pathSegment : pathSegmentsList) {
    itemIdsList.add(Integer.valueOf(pathSegment.getPath()));
  }
  return alsServingModel.estimatePreference(userID,itemIdsList);
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public List<Double> getEstimatePreferences(@PathParam(""String_Node_Str"") Integer userID,@PathParam(""String_Node_Str"") List<PathSegment> pathSegmentsList){
  ALSServingModelManager alsServingModelManager=(ALSServingModelManager)servletContext.getAttribute(""String_Node_Str"");
  ALSServingModel alsServingModel=alsServingModelManager.getModel();
  List<Integer> itemIdsList=new ArrayList<>(pathSegmentsList.size());
  for (  PathSegment pathSegment : pathSegmentsList) {
    itemIdsList.add(Integer.valueOf(pathSegment.getPath()));
  }
  return alsServingModel.estimatePreference(userID,itemIdsList);
}",0.9910979228486648
162805,"@GET @Produces(MediaType.APPLICATION_JSON) @Path(""String_Node_Str"") public List<Double> getEstimatesForAnonymous(@PathParam(""String_Node_Str"") final int toItemID,@PathParam(""String_Node_Str"") final List<PathSegment> pathSegmentList){
  ALSServingModelManager alsServingModelManager=(ALSServingModelManager)servletContext.getAttribute(""String_Node_Str"");
  ALSServingModel alsServingModel=alsServingModelManager.getModel();
  List<Integer> itemIdList=new ArrayList<>(pathSegmentList.size());
  for (  PathSegment pathSegment : pathSegmentList) {
    itemIdList.add(Integer.valueOf(pathSegment.getPath()));
  }
{
  }
  return Arrays.asList(1.2,3.4);
}","@GET @Produces(MediaType.APPLICATION_JSON) @Path(""String_Node_Str"") public List<Double> getEstimatesForAnonymous(@PathParam(""String_Node_Str"") int toItemID,@PathParam(""String_Node_Str"") List<PathSegment> pathSegmentList){
  ALSServingModelManager alsServingModelManager=(ALSServingModelManager)servletContext.getAttribute(""String_Node_Str"");
  ALSServingModel alsServingModel=alsServingModelManager.getModel();
  List<Integer> itemIdList=new ArrayList<>(pathSegmentList.size());
  for (  PathSegment pathSegment : pathSegmentList) {
    itemIdList.add(Integer.valueOf(pathSegment.getPath()));
  }
{
  }
  return Arrays.asList(1.2,3.4);
}",0.9906687402799378
162806,"/** 
 * android-changed Android does not use a SecurityManager. This will simply execute the runnable ingoring permisions.
 */
public void runWithPermissions(Runnable r,Permission... permissions){
  r.run();
}","/** 
 * android-changed Android does not use a SecurityManager. This will simply execute the runnable ignoring permissions.
 */
public void runWithPermissions(Runnable r,Permission... permissions){
  r.run();
}",0.935560859188544
162807,"/** 
 * android-changed Android does not use a SecurityManager. This will simply execute the runnable ingoring permisions.
 */
public void runWithSecurityManagerWithPermissions(Runnable r,Permission... permissions){
  r.run();
}","/** 
 * android-changed Android does not use a SecurityManager. This will simply execute the runnable ignoring permissions.
 */
public void runWithSecurityManagerWithPermissions(Runnable r,Permission... permissions){
  r.run();
}",0.9409190371991248
162808,"/** 
 * Create a ProcessInstanceLimiter instance using the default shareed file named ProcessInstanceLimiter_DEFAULT_SHARED_MAP_ in the tmp directory.
 * @param sharedMapPath - The path to a file which will be used to store the sharedmap (the file need not pre-exist)
 * @param callback      - An instance of the Callback interface, which will receivecallbacks
 * @throws IOException - if the default shared file cannot be created
 */
public ProcessInstanceLimiter(String sharedMapPath,Callback callback) throws IOException {
  this.sharedMapPath=sharedMapPath;
  this.callback=callback;
  ChronicleMapBuilder<String,Data> builder=ChronicleMapBuilder.of(String.class,Data.class);
  builder.entries(1000);
  builder.averageKeySize((DEFAULT_PROCESS_NAME + ""String_Node_Str"").length());
  this.theSharedMap=builder.createPersistedTo(new File(sharedMapPath));
  Thread t=new Thread(this,""String_Node_Str"");
  t.setDaemon(true);
  t.start();
}","/** 
 * Create a ProcessInstanceLimiter instance using the default shared file named ProcessInstanceLimiter_DEFAULT_SHARED_MAP_ in the tmp directory.
 * @param sharedMapPath - The path to a file which will be used to store the sharedmap (the file need not pre-exist)
 * @param callback      - An instance of the Callback interface, which will receivecallbacks
 * @throws IOException - if the default shared file cannot be created
 */
public ProcessInstanceLimiter(String sharedMapPath,Callback callback) throws IOException {
  this.sharedMapPath=sharedMapPath;
  this.callback=callback;
  ChronicleMapBuilder<String,Data> builder=ChronicleMapBuilder.of(String.class,Data.class);
  builder.entries(1000);
  builder.averageKeySize((DEFAULT_PROCESS_NAME + ""String_Node_Str"").length());
  this.theSharedMap=builder.createPersistedTo(new File(sharedMapPath));
  Thread t=new Thread(this,""String_Node_Str"");
  t.setDaemon(true);
  t.start();
}",0.9994666666666666
162809,"@Override public ByteBuffer getUsing(@Nullable ByteBuffer using){
  if (using == null || using.capacity() < bb.remaining()) {
    using=ByteBuffer.allocate(bb.remaining());
  }
 else {
    using.position(0);
    using.limit(bb.capacity());
  }
  bytes.bytesStore(bytesStore,bb.position(),bb.remaining());
  bytes.read(using);
  using.flip();
  return using;
}","@Override public ByteBuffer getUsing(@Nullable ByteBuffer using){
  if (using == null || using.capacity() < bb.remaining()) {
    using=ByteBuffer.allocate(bb.remaining());
  }
 else {
    using.position(0);
    using.limit(bb.remaining());
  }
  bytes.bytesStore(bytesStore,bb.position(),bb.remaining());
  bytes.read(using);
  using.flip();
  return using;
}",0.9763560500695412
162810,"@NotNull @Override public List<T> read(Bytes in,@Nullable List<T> using){
  int size=in.readInt();
  if (using == null) {
    using=new ArrayList<>(size);
  }
 else   if (using.size() < size) {
    while (using.size() < size) {
      using.add(null);
    }
  }
 else   if (using.size() > size) {
    using.subList(size,using.size()).clear();
  }
  for (int i=0; i < size; i++) {
    using.set(i,elementReader.read(in,using.get(i)));
  }
  return using;
}","@NotNull @Override public List<T> read(Bytes in,@Nullable List<T> using){
  int size=in.readInt();
  if (using == null) {
    using=new ArrayList<>(size);
    for (int i=0; i < size; i++) {
      using.add(null);
    }
  }
 else   if (using.size() < size) {
    while (using.size() < size) {
      using.add(null);
    }
  }
 else   if (using.size() > size) {
    using.subList(size,using.size()).clear();
  }
  for (int i=0; i < size; i++) {
    using.set(i,elementReader.read(in,using.get(i)));
  }
  return using;
}",0.934156378600823
162811,"public void addKnownItems(String id,List<CharSequence> items){
  try (ExternalMapQueryContext<CharSequence,List<CharSequence>,?> c=knownItems.queryContext(id)){
    if (c.writeLock().tryLock(1,MINUTES)) {
      putNoReturn(c,items);
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}","public void addKnownItems(ChronicleMap<CharSequence,List<CharSequence>> knownItems,String id,List<CharSequence> items){
  try (ExternalMapQueryContext<CharSequence,List<CharSequence>,?> c=knownItems.queryContext(id)){
    if (c.writeLock().tryLock(1,MINUTES)) {
      putNoReturn(c,items);
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}",0.93124246079614
162812,"@Override public void recoverSegments(){
  Logger log=lh.LOG;
  VanillaChronicleHash<?,?,?,?> h=hh.h();
  for (int segmentIndex=0; segmentIndex < h.actualSegments; segmentIndex++) {
    s.initSegmentIndex(segmentIndex);
    resetSegmentLock();
    zeroOutFirstSegmentTierCountersArea();
    tierRecovery.recoverTier(segmentIndex);
  }
  VanillaGlobalMutableState globalMutableState=h.globalMutableState();
  long storedExtraTiersInUse=globalMutableState.getExtraTiersInUse();
  long allocatedExtraTiers=globalMutableState.getAllocatedExtraTierBulks() * h.tiersInBulk;
  long expectedExtraTiersInUse=Math.max(0,Math.min(storedExtraTiersInUse,allocatedExtraTiers));
  long actualExtraTiersInUse=0;
  long firstFreeExtraTierIndex=-1;
  for (long extraTierIndex=0; extraTierIndex < expectedExtraTiersInUse; extraTierIndex++) {
    long tierIndex=h.extraTierIndexToTierIndex(extraTierIndex);
    s.initSegmentTier(0,tierIndex);
    int segmentIndex=tierRecovery.recoverTier(-1);
    if (segmentIndex > 0) {
      long tierCountersAreaAddr=s.tierCountersAreaAddr();
      int storedSegmentIndex=TierCountersArea.segmentIndex(tierCountersAreaAddr);
      if (storedSegmentIndex != segmentIndex) {
        log.error(""String_Node_Str"" + ""String_Node_Str"",tierIndex,storedSegmentIndex,segmentIndex);
        TierCountersArea.segmentIndex(tierCountersAreaAddr,segmentIndex);
      }
      s.nextTierIndex(0);
      s.initSegmentIndex(segmentIndex);
      s.goToLastTier();
      s.nextTierIndex(tierIndex);
      TierCountersArea.prevTierIndex(tierCountersAreaAddr,s.tierIndex);
      TierCountersArea.tier(tierCountersAreaAddr,s.tier + 1);
      actualExtraTiersInUse=extraTierIndex + 1;
    }
 else {
      firstFreeExtraTierIndex=extraTierIndex;
      break;
    }
  }
  if (storedExtraTiersInUse != actualExtraTiersInUse) {
    log.error(""String_Node_Str"" + ""String_Node_Str"",storedExtraTiersInUse,actualExtraTiersInUse);
    globalMutableState.setExtraTiersInUse(actualExtraTiersInUse);
  }
  long firstFreeTierIndex;
  if (firstFreeExtraTierIndex == -1) {
    if (allocatedExtraTiers > expectedExtraTiersInUse) {
      firstFreeTierIndex=h.extraTierIndexToTierIndex(expectedExtraTiersInUse);
    }
 else {
      firstFreeTierIndex=0;
    }
  }
 else {
    firstFreeTierIndex=h.extraTierIndexToTierIndex(firstFreeExtraTierIndex);
  }
  if (firstFreeTierIndex > 0) {
    long lastTierIndex=h.extraTierIndexToTierIndex(allocatedExtraTiers - 1);
    h.linkAndZeroOutFreeTiers(firstFreeTierIndex,lastTierIndex);
  }
  long storedFirstFreeTierIndex=globalMutableState.getFirstFreeTierIndex();
  if (storedFirstFreeTierIndex != firstFreeTierIndex) {
    log.error(""String_Node_Str"" + ""String_Node_Str"",storedFirstFreeTierIndex,firstFreeTierIndex);
  }
  removeDuplicatesInSegments();
}","@Override public void recoverSegments(){
  Logger log=lh.LOG;
  VanillaChronicleHash<?,?,?,?> h=hh.h();
  for (int segmentIndex=0; segmentIndex < h.actualSegments; segmentIndex++) {
    s.initSegmentIndex(segmentIndex);
    resetSegmentLock();
    zeroOutFirstSegmentTierCountersArea();
    tierRecovery.recoverTier(segmentIndex);
  }
  VanillaGlobalMutableState globalMutableState=h.globalMutableState();
  long storedExtraTiersInUse=globalMutableState.getExtraTiersInUse();
  long allocatedExtraTiers=globalMutableState.getAllocatedExtraTierBulks() * h.tiersInBulk;
  long expectedExtraTiersInUse=Math.max(0,Math.min(storedExtraTiersInUse,allocatedExtraTiers));
  long actualExtraTiersInUse=0;
  long firstFreeExtraTierIndex=-1;
  for (long extraTierIndex=0; extraTierIndex < expectedExtraTiersInUse; extraTierIndex++) {
    long tierIndex=h.extraTierIndexToTierIndex(extraTierIndex);
    s.initSegmentTier(0,tierIndex);
    int segmentIndex=tierRecovery.recoverTier(-1);
    if (segmentIndex >= 0) {
      long tierCountersAreaAddr=s.tierCountersAreaAddr();
      int storedSegmentIndex=TierCountersArea.segmentIndex(tierCountersAreaAddr);
      if (storedSegmentIndex != segmentIndex) {
        log.error(""String_Node_Str"" + ""String_Node_Str"",tierIndex,storedSegmentIndex,segmentIndex);
        TierCountersArea.segmentIndex(tierCountersAreaAddr,segmentIndex);
      }
      s.nextTierIndex(0);
      s.initSegmentIndex(segmentIndex);
      s.goToLastTier();
      s.nextTierIndex(tierIndex);
      TierCountersArea.prevTierIndex(tierCountersAreaAddr,s.tierIndex);
      TierCountersArea.tier(tierCountersAreaAddr,s.tier + 1);
      actualExtraTiersInUse=extraTierIndex + 1;
    }
 else {
      firstFreeExtraTierIndex=extraTierIndex;
      break;
    }
  }
  if (storedExtraTiersInUse != actualExtraTiersInUse) {
    log.error(""String_Node_Str"" + ""String_Node_Str"",storedExtraTiersInUse,actualExtraTiersInUse);
    globalMutableState.setExtraTiersInUse(actualExtraTiersInUse);
  }
  long firstFreeTierIndex;
  if (firstFreeExtraTierIndex == -1) {
    if (allocatedExtraTiers > expectedExtraTiersInUse) {
      firstFreeTierIndex=h.extraTierIndexToTierIndex(expectedExtraTiersInUse);
    }
 else {
      firstFreeTierIndex=0;
    }
  }
 else {
    firstFreeTierIndex=h.extraTierIndexToTierIndex(firstFreeExtraTierIndex);
  }
  if (firstFreeTierIndex > 0) {
    long lastTierIndex=h.extraTierIndexToTierIndex(allocatedExtraTiers - 1);
    h.linkAndZeroOutFreeTiers(firstFreeTierIndex,lastTierIndex);
  }
  long storedFirstFreeTierIndex=globalMutableState.getFirstFreeTierIndex();
  if (storedFirstFreeTierIndex != firstFreeTierIndex) {
    log.error(""String_Node_Str"" + ""String_Node_Str"",storedFirstFreeTierIndex,firstFreeTierIndex);
  }
  removeDuplicatesInSegments();
}",0.9998197223724536
162813,"private int checkEntry(long searchKey,long entryPos,int segmentIndex){
  Logger log=lh.LOG;
  VanillaChronicleHash<?,?,?,?> h=mh.h();
  if (entryPos < 0 || entryPos >= h.actualChunksPerSegmentTier) {
    log.error(""String_Node_Str"",entryPos,h.actualChunksPerSegmentTier - 1);
  }
  try {
    e.readExistingEntry(entryPos);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return -1;
  }
  if (e.keyEnd() > s.segmentBytes.capacity()) {
    log.error(""String_Node_Str"",e.keySize);
    return -1;
  }
  long keyHashCode=khc.keyHashCode();
  int segmentIndexFromKey=h.hashSplitting.segmentIndex(keyHashCode);
  if (segmentIndexFromKey < 0 || segmentIndexFromKey >= h.actualSegments) {
    log.error(""String_Node_Str"" + ""String_Node_Str"",segmentIndexFromKey,h.actualSegments - 1,e.key());
    return -1;
  }
  long segmentHashFromKey=h.hashSplitting.segmentHash(keyHashCode);
  long searchKeyFromKey=h.hashLookup.maskUnsetKey(segmentHashFromKey);
  if (searchKey != searchKeyFromKey) {
    log.error(""String_Node_Str"" + ""String_Node_Str"",searchKey,searchKeyFromKey,e.key());
    return -1;
  }
  try {
    long entryAndChecksumEnd=e.entryEnd() + e.checksumStrategy.extraEntryBytes();
    if (entryAndChecksumEnd > s.segmentBytes.capacity()) {
      log.error(""String_Node_Str"",e.valueSize,e.key());
      return -1;
    }
  }
 catch (  Exception ex) {
    log.error(""String_Node_Str"",ex,e.key());
    return -1;
  }
  int storedChecksum=e.checksumStrategy.storedChecksum();
  int checksumFromEntry=e.checksumStrategy.computeChecksum();
  if (storedChecksum != checksumFromEntry) {
    log.error(""String_Node_Str"" + ""String_Node_Str"",storedChecksum,checksumFromEntry,e.key(),e.value());
    return -1;
  }
  if (!s.freeList.isRangeClear(entryPos,entryPos + e.entrySizeInChunks)) {
    log.error(""String_Node_Str"",entryPos,entryPos + e.entrySizeInChunks - 1,e.key(),e.value());
  }
  s.freeList.setRange(entryPos,entryPos + e.entrySizeInChunks);
  if (segmentIndex < 0) {
    return segmentIndexFromKey;
  }
 else {
    if (segmentIndex != segmentIndexFromKey) {
      log.error(""String_Node_Str"" + ""String_Node_Str"",segmentIndex,searchKeyFromKey,e.key(),e.value());
      return -1;
    }
 else {
      return segmentIndex;
    }
  }
}","private int checkEntry(long searchKey,long entryPos,int segmentIndex){
  Logger log=lh.LOG;
  VanillaChronicleHash<?,?,?,?> h=mh.h();
  if (entryPos < 0 || entryPos >= h.actualChunksPerSegmentTier) {
    log.error(""String_Node_Str"",entryPos,h.actualChunksPerSegmentTier - 1);
    return -1;
  }
  try {
    e.readExistingEntry(entryPos);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return -1;
  }
  if (e.keyEnd() > s.segmentBytes.capacity()) {
    log.error(""String_Node_Str"",e.keySize);
    return -1;
  }
  long keyHashCode=khc.keyHashCode();
  int segmentIndexFromKey=h.hashSplitting.segmentIndex(keyHashCode);
  if (segmentIndexFromKey < 0 || segmentIndexFromKey >= h.actualSegments) {
    log.error(""String_Node_Str"" + ""String_Node_Str"",segmentIndexFromKey,h.actualSegments - 1,e.key());
    return -1;
  }
  long segmentHashFromKey=h.hashSplitting.segmentHash(keyHashCode);
  long searchKeyFromKey=h.hashLookup.maskUnsetKey(segmentHashFromKey);
  if (searchKey != searchKeyFromKey) {
    log.error(""String_Node_Str"" + ""String_Node_Str"",searchKey,searchKeyFromKey,e.key());
    return -1;
  }
  try {
    long entryAndChecksumEnd=e.entryEnd() + e.checksumStrategy.extraEntryBytes();
    if (entryAndChecksumEnd > s.segmentBytes.capacity()) {
      log.error(""String_Node_Str"",e.valueSize,e.key());
      return -1;
    }
  }
 catch (  Exception ex) {
    log.error(""String_Node_Str"",ex,e.key());
    return -1;
  }
  int storedChecksum=e.checksumStrategy.storedChecksum();
  int checksumFromEntry=e.checksumStrategy.computeChecksum();
  if (storedChecksum != checksumFromEntry) {
    log.error(""String_Node_Str"" + ""String_Node_Str"",storedChecksum,checksumFromEntry,e.key(),e.value());
    return -1;
  }
  if (!s.freeList.isRangeClear(entryPos,entryPos + e.entrySizeInChunks)) {
    log.error(""String_Node_Str"",entryPos,entryPos + e.entrySizeInChunks - 1,e.key(),e.value());
    return -1;
  }
  if (segmentIndex < 0) {
    return segmentIndexFromKey;
  }
 else {
    if (segmentIndex != segmentIndexFromKey) {
      log.error(""String_Node_Str"" + ""String_Node_Str"",segmentIndex,searchKeyFromKey,e.key(),e.value());
      return -1;
    }
 else {
      return segmentIndex;
    }
  }
}",0.9789426523297492
162814,"public int recoverTier(int segmentIndex){
  s.freeList.clearAll();
  Logger log=lh.LOG;
  VanillaChronicleHash<?,?,?,?> h=mh.h();
  CompactOffHeapLinearHashTable hl=h.hashLookup;
  long hlAddr=s.tierBaseAddr;
  long hlPos=0;
  do {
    long hlEntry=hl.readEntry(hlAddr,hlPos);
    nextHlPos:     if (!hl.empty(hlEntry)) {
      hl.clearEntry(hlAddr,hlPos);
      long searchKey=hl.key(hlEntry);
      long entryPos=hl.value(hlEntry);
      int si=checkEntry(searchKey,entryPos,segmentIndex);
      if (si < 0) {
        break nextHlPos;
      }
 else {
        segmentIndex=si;
      }
      long startInsertPos=hl.hlPos(searchKey);
      long insertPos=startInsertPos;
      do {
        long hlInsertEntry=hl.readEntry(hlAddr,insertPos);
        if (hl.empty(hlInsertEntry)) {
          hl.writeEntry(hlAddr,insertPos,hl.entry(searchKey,entryPos));
          break nextHlPos;
        }
        if (insertPos == hlPos) {
          throw new ChronicleHashRecoveryFailedException(""String_Node_Str"" + h.file() + ""String_Node_Str"");
        }
        if (hl.key(hlInsertEntry) == searchKey) {
          long anotherEntryPos=hl.value(hlInsertEntry);
          if (anotherEntryPos == entryPos)           break nextHlPos;
          long currentKeyOffset=e.keyOffset;
          long currentKeySize=e.keySize;
          int currentEntrySizeInChunks=e.entrySizeInChunks;
          if (checkEntry(searchKey,anotherEntryPos,segmentIndex) > 0) {
            if (e.keySize == currentKeySize && BytesUtil.bytesEqual(s.segmentBS,currentKeyOffset,s.segmentBS,e.keyOffset,currentKeySize)) {
              log.error(""String_Node_Str"" + ""String_Node_Str"",entryPos,anotherEntryPos,e.key(),e.value());
              s.freeList.clearRange(entryPos,entryPos + currentEntrySizeInChunks);
              break nextHlPos;
            }
          }
        }
        insertPos=hl.step(insertPos);
      }
 while (insertPos != startInsertPos);
      throw new ChronicleHashRecoveryFailedException(""String_Node_Str"" + ""String_Node_Str"" + h.file() + ""String_Node_Str"");
    }
    hlPos=hl.step(hlPos);
  }
 while (hlPos != 0);
  return segmentIndex;
}","public int recoverTier(int segmentIndex){
  s.freeList.clearAll();
  Logger log=lh.LOG;
  VanillaChronicleHash<?,?,?,?> h=mh.h();
  CompactOffHeapLinearHashTable hl=h.hashLookup;
  long hlAddr=s.tierBaseAddr;
  long validEntries=0;
  long hlPos=0;
  do {
    long hlEntry=hl.readEntry(hlAddr,hlPos);
    nextHlPos:     if (!hl.empty(hlEntry)) {
      hl.clearEntry(hlAddr,hlPos);
      if (validEntries >= h.maxEntriesPerHashLookup) {
        log.error(""String_Node_Str"",s.tierIndex,h.maxEntriesPerHashLookup);
        break nextHlPos;
      }
      long searchKey=hl.key(hlEntry);
      long entryPos=hl.value(hlEntry);
      int si=checkEntry(searchKey,entryPos,segmentIndex);
      if (si < 0) {
        break nextHlPos;
      }
 else {
        s.freeList.setRange(entryPos,entryPos + e.entrySizeInChunks);
        segmentIndex=si;
      }
      long startInsertPos=hl.hlPos(searchKey);
      long insertPos=startInsertPos;
      do {
        long hlInsertEntry=hl.readEntry(hlAddr,insertPos);
        if (hl.empty(hlInsertEntry)) {
          hl.writeEntry(hlAddr,insertPos,hl.entry(searchKey,entryPos));
          validEntries++;
          break nextHlPos;
        }
        if (insertPos == hlPos) {
          throw new ChronicleHashRecoveryFailedException(""String_Node_Str"" + h.file() + ""String_Node_Str"");
        }
        checkDuplicateKeys:         if (hl.key(hlInsertEntry) == searchKey) {
          long anotherEntryPos=hl.value(hlInsertEntry);
          if (anotherEntryPos == entryPos) {
            validEntries++;
            break nextHlPos;
          }
          long currentKeyOffset=e.keyOffset;
          long currentKeySize=e.keySize;
          int currentEntrySizeInChunks=e.entrySizeInChunks;
          if (insertPos >= 0 && insertPos < hlPos) {
            e.readExistingEntry(anotherEntryPos);
          }
 else           if (checkEntry(searchKey,anotherEntryPos,segmentIndex) < 0) {
            break checkDuplicateKeys;
          }
          if (e.keySize == currentKeySize && BytesUtil.bytesEqual(s.segmentBS,currentKeyOffset,s.segmentBS,e.keyOffset,currentKeySize)) {
            log.error(""String_Node_Str"" + ""String_Node_Str"",entryPos,anotherEntryPos,e.key(),e.value());
            s.freeList.clearRange(entryPos,entryPos + currentEntrySizeInChunks);
            break nextHlPos;
          }
        }
        insertPos=hl.step(insertPos);
      }
 while (insertPos != startInsertPos);
      throw new ChronicleHashRecoveryFailedException(""String_Node_Str"" + ""String_Node_Str"" + h.file() + ""String_Node_Str"");
    }
    hlPos=hl.step(hlPos);
  }
 while (hlPos != 0);
  shiftHashLookupEntries();
  return segmentIndex;
}",0.8784576697401508
162815,"public final void basicRecover(File file,RandomAccessFile raf) throws IOException {
  this.file=file;
  long segmentHeadersOffset=computeSegmentHeadersOffset();
  long sizeInBytesWithoutTiers=computeSizeInBytesWithoutTiers(segmentHeadersOffset);
  long sizeBeyondSegments=Math.max(raf.length() - sizeInBytesWithoutTiers,0);
  int allocatedExtraTierBulks=(int)(sizeBeyondSegments / tierBulkSizeInBytes);
  long mapSize=pageAlign(sizeInBytesWithoutTiers + allocatedExtraTierBulks * tierBulkSizeInBytes);
  initBytesStoreAndHeadersViews(map(raf,mapSize,0));
  resetGlobalMutableStateLock(file);
  recoverAllocatedExtraTierBulks(file,allocatedExtraTierBulks);
  recoverSegmentHeadersOffset(file,segmentHeadersOffset);
  initBulks();
}","public final void basicRecover(File file,RandomAccessFile raf) throws IOException {
  this.file=file;
  long segmentHeadersOffset=computeSegmentHeadersOffset();
  long sizeInBytesWithoutTiers=computeSizeInBytesWithoutTiers(segmentHeadersOffset);
  long sizeBeyondSegments=Math.max(raf.length() - sizeInBytesWithoutTiers,0);
  int allocatedExtraTierBulks=(int)(sizeBeyondSegments / tierBulkSizeInBytes);
  long mapSize=pageAlign(sizeInBytesWithoutTiers + allocatedExtraTierBulks * tierBulkSizeInBytes);
  initBytesStoreAndHeadersViews(map(raf,mapSize,0));
  resetGlobalMutableStateLock(file);
  recoverAllocatedExtraTierBulks(file,allocatedExtraTierBulks);
  recoverSegmentHeadersOffset(file,segmentHeadersOffset);
  initOffsetsAndBulks();
}",0.9931972789115646
162816,"public void removeDuplicatesInSegment(){
  long startHlPos=0L;
  VanillaChronicleMap<?,?,?> m=mh.m();
  CompactOffHeapLinearHashTable hashLookup=m.hashLookup;
  long currentTierBaseAddr=s.tierBaseAddr;
  while (!hashLookup.empty(hashLookup.readEntry(currentTierBaseAddr,startHlPos))) {
    startHlPos=hashLookup.step(startHlPos);
  }
  long hlPos=startHlPos;
  int steps=0;
  long entries=0;
  tierIteration:   do {
    hlPos=hashLookup.step(hlPos);
    steps++;
    long entry=hashLookup.readEntry(currentTierBaseAddr,hlPos);
    if (!hashLookup.empty(entry)) {
      e.readExistingEntry(hashLookup.value(entry));
      Data key=(Data)e.key();
      try (ExternalMapQueryContext<?,?,?> c=m.queryContext(key)){
        MapEntry<?,?> entry2=c.entry();
        Data<?> key2=entry2.key();
        if (key2.bytes().address(key2.offset()) != key.bytes().address(key.offset())) {
          lh.LOG.error(""String_Node_Str"" + ""String_Node_Str"",key,c.segmentIndex(),entry2.value(),e.value());
          if (hashLookup.remove(currentTierBaseAddr,hlPos) != hlPos) {
            hlPos=hashLookup.stepBack(hlPos);
            steps--;
          }
          continue tierIteration;
        }
      }
       entries++;
    }
  }
 while (hlPos != startHlPos || steps == 0);
  recoverTierEntriesCounter(entries);
  recoverLowestPossibleFreeChunkTiered();
}","public void removeDuplicatesInSegment(){
  long startHlPos=0L;
  VanillaChronicleMap<?,?,?> m=mh.m();
  CompactOffHeapLinearHashTable hashLookup=m.hashLookup;
  long currentTierBaseAddr=s.tierBaseAddr;
  while (!hashLookup.empty(hashLookup.readEntry(currentTierBaseAddr,startHlPos))) {
    startHlPos=hashLookup.step(startHlPos);
  }
  long hlPos=startHlPos;
  int steps=0;
  long entries=0;
  tierIteration:   do {
    hlPos=hashLookup.step(hlPos);
    steps++;
    long entry=hashLookup.readEntry(currentTierBaseAddr,hlPos);
    if (!hashLookup.empty(entry)) {
      e.readExistingEntry(hashLookup.value(entry));
      Data key=(Data)e.key();
      try (ExternalMapQueryContext<?,?,?> c=m.queryContext(key)){
        MapEntry<?,?> entry2=c.entry();
        Data<?> key2=((MapEntry)c).key();
        if (key2.bytes().address(key2.offset()) != key.bytes().address(key.offset())) {
          lh.LOG.error(""String_Node_Str"" + ""String_Node_Str"",key,c.segmentIndex(),entry2 != null ? ((MapEntry)c).value() : ""String_Node_Str"",!e.entryDeleted() ? e.value() : ""String_Node_Str"");
          if (hashLookup.remove(currentTierBaseAddr,hlPos) != hlPos) {
            hlPos=hashLookup.stepBack(hlPos);
            steps--;
          }
          continue tierIteration;
        }
      }
       entries++;
    }
  }
 while (hlPos != startHlPos || steps == 0);
  recoverTierEntriesCounter(entries);
  recoverLowestPossibleFreeChunkTiered();
}",0.9627755692085292
162817,"public boolean entryDeleted(){
  return s.segmentBS.readBoolean(entryDeletedOffset());
}","@Override public boolean entryDeleted(){
  return s.segmentBS.readBoolean(entryDeletedOffset());
}",0.946236559139785
162818,"private void cleanupModificationIterationBits(){
  ReplicatedChronicleMap<?,?,?> m=rh.m();
  ReplicatedChronicleMap<?,?,?>.ModificationIterator[] its=m.acquireAllModificationIterators();
  ReusableBitSet freeList=s.freeList;
  for (long pos=0; ; ) {
    long nextPos=freeList.nextSetBit(pos);
    if (nextPos > pos) {
      for (      ReplicatedChronicleMap<?,?,?>.ModificationIterator it : its) {
        it.clearRange0(s.tierIndex,pos,nextPos);
      }
    }
    if (nextPos > 0) {
      e.readExistingEntry(nextPos);
      if (e.entrySizeInChunks > 1) {
        for (        ReplicatedChronicleMap<?,?,?>.ModificationIterator it : its) {
          it.clearRange0(s.tierIndex,nextPos + 1,nextPos + e.entrySizeInChunks);
        }
      }
      pos=nextPos + e.entrySizeInChunks;
    }
 else {
      if (pos < m.actualChunksPerSegmentTier) {
        for (        ReplicatedChronicleMap<?,?,?>.ModificationIterator it : its) {
          it.clearRange0(s.tierIndex,pos,m.actualChunksPerSegmentTier);
        }
      }
    }
  }
}","private void cleanupModificationIterationBits(){
  ReplicatedChronicleMap<?,?,?> m=rh.m();
  ReplicatedChronicleMap<?,?,?>.ModificationIterator[] its=m.acquireAllModificationIterators();
  ReusableBitSet freeList=s.freeList;
  for (long pos=0; pos < m.actualChunksPerSegmentTier; ) {
    long nextPos=freeList.nextSetBit(pos);
    if (nextPos > pos) {
      for (      ReplicatedChronicleMap<?,?,?>.ModificationIterator it : its) {
        it.clearRange0(s.tierIndex,pos,nextPos);
      }
    }
    if (nextPos > 0) {
      e.readExistingEntry(nextPos);
      if (e.entrySizeInChunks > 1) {
        for (        ReplicatedChronicleMap<?,?,?>.ModificationIterator it : its) {
          it.clearRange0(s.tierIndex,nextPos + 1,nextPos + e.entrySizeInChunks);
        }
      }
      pos=nextPos + e.entrySizeInChunks;
    }
 else {
      for (      ReplicatedChronicleMap<?,?,?>.ModificationIterator it : its) {
        it.clearRange0(s.tierIndex,pos,m.actualChunksPerSegmentTier);
      }
      break;
    }
  }
}",0.6012751348700344
162819,"@Override public void doRemoveCompletely(){
  boolean wasDeleted=e.entryDeleted();
  super.doRemove();
  if (wasDeleted)   s.tierDeleted(s.tierDeleted() - 1);
}","@Override public void doRemoveCompletely(){
  boolean wasDeleted=e.entryDeleted();
  super.doRemove();
  ru.dropChange();
  if (wasDeleted)   s.tierDeleted(s.tierDeleted() - 1);
}",0.943952802359882
162820,"@Override public void doRemoveCompletely(){
  boolean wasDeleted=e.entryDeleted();
  super.doRemove();
  if (wasDeleted)   s.tierDeleted(s.tierDeleted() - 1L);
}","@Override public void doRemoveCompletely(){
  boolean wasDeleted=e.entryDeleted();
  super.doRemove();
  ru.dropChange();
  if (wasDeleted)   s.tierDeleted(s.tierDeleted() - 1L);
}",0.9442815249266864
162821,"public void putNewVolatile(long value){
  if (ks.searchStatePresent())   throw new AssertionError();
  hl().checkValueForPut(value);
  long currentEntry=hl().readEntry(addr(),hlp.hashLookupPos);
  hl().writeEntryVolatile(addr(),hlp.hashLookupPos,currentEntry,searchKey,value);
}","public void putNewVolatile(long entryPos){
  boolean keySearchReInit=!ks.keySearchInit();
  if (ks.searchStatePresent())   throw new AssertionError();
  if (keySearchReInit) {
    e.readExistingEntry(entryPos);
  }
  hl().checkValueForPut(entryPos);
  long currentEntry=hl().readEntry(addr(),hlp.hashLookupPos);
  hl().writeEntryVolatile(addr(),hlp.hashLookupPos,currentEntry,searchKey,entryPos);
}",0.7781065088757396
162822,abstract boolean keySearchInit();,public abstract boolean keySearchInit();,0.9041095890410958
162823,"@Override public void updateOrigin(byte newIdentifier,long newTimestamp){
  checkOnEachPublicOperation.checkOnEachPublicOperation();
  s.innerWriteLock.lock();
  updateReplicationState(newTimestamp,newIdentifier);
}","@Override public void updateOrigin(byte newIdentifier,long newTimestamp){
  checkOnEachPublicOperation.checkOnEachPublicOperation();
  s.innerWriteLock.lock();
  updateReplicationState(newIdentifier,newTimestamp);
}",0.9348837209302324
162824,"void updateReplicationState(long timestamp,byte identifier){
  initDelayedUpdateChecksum(true);
  Bytes segmentBytes=s.segmentBytesForWrite();
  segmentBytes.writePosition(replicationBytesOffset);
  segmentBytes.writeLong(timestamp);
  segmentBytes.writeByte(identifier);
}","void updateReplicationState(byte identifier,long timestamp){
  initDelayedUpdateChecksum(true);
  Bytes segmentBytes=s.segmentBytesForWrite();
  segmentBytes.writePosition(replicationBytesOffset);
  segmentBytes.writeLong(timestamp);
  segmentBytes.writeByte(identifier);
}",0.8937728937728938
162825,"public void updatedReplicationStateOnPresentEntry(){
  if (!ru.replicationUpdateInit()) {
    s.innerWriteLock.lock();
    long timestamp;
    if (identifier() != mh.m().identifier()) {
      timestamp=Math.max(timestamp() + 1,mh.m().timeProvider.currentTime());
    }
 else {
      timestamp=mh.m().timeProvider.currentTime();
    }
    updateReplicationState(timestamp,mh.m().identifier());
  }
}","public void updatedReplicationStateOnPresentEntry(){
  if (!ru.replicationUpdateInit()) {
    s.innerWriteLock.lock();
    long timestamp;
    if (identifier() != mh.m().identifier()) {
      timestamp=Math.max(timestamp() + 1,mh.m().timeProvider.currentTime());
    }
 else {
      timestamp=mh.m().timeProvider.currentTime();
    }
    updateReplicationState(mh.m().identifier(),timestamp);
  }
}",0.9296482412060302
162826,"public void updatedReplicationStateOnAbsentEntry(){
  if (!ru.replicationUpdateInit()) {
    s.innerWriteLock.lock();
    updateReplicationState(mh.m().timeProvider.currentTime(),mh.m().identifier());
  }
}","public void updatedReplicationStateOnAbsentEntry(){
  if (!ru.replicationUpdateInit()) {
    s.innerWriteLock.lock();
    updateReplicationState(mh.m().identifier(),mh.m().timeProvider.currentTime());
  }
}",0.9029126213592232
162827,"public void initReplicationInput(Bytes replicatedInputBytes){
  initReplicatedInputBytes(replicatedInputBytes);
  bootstrapTimestamp=replicatedInputBytes.readLong();
  riTimestamp=replicatedInputBytes.readStopBit();
  riId=replicatedInputBytes.readByte();
  ru.initReplicationUpdate(riTimestamp,riId);
  isDeleted=replicatedInputBytes.readBoolean();
  riKeySize=mh.m().keySizeMarshaller.readSize(replicatedInputBytes);
  riKeyOffset=replicatedInputBytes.readPosition();
  if (!isDeleted) {
    replicatedInputBytes.readSkip(riKeySize);
    riValueSize=mh.m().valueSizeMarshaller.readSize(replicatedInputBytes);
    riValueOffset=replicatedInputBytes.readPosition();
  }
}","public void initReplicationInput(Bytes replicatedInputBytes){
  initReplicatedInputBytes(replicatedInputBytes);
  bootstrapTimestamp=replicatedInputBytes.readLong();
  riTimestamp=replicatedInputBytes.readStopBit();
  riId=replicatedInputBytes.readByte();
  ru.initReplicationUpdate(riId,riTimestamp);
  isDeleted=replicatedInputBytes.readBoolean();
  riKeySize=mh.m().keySizeMarshaller.readSize(replicatedInputBytes);
  riKeyOffset=replicatedInputBytes.readPosition();
  if (!isDeleted) {
    replicatedInputBytes.readSkip(riKeySize);
    riValueSize=mh.m().valueSizeMarshaller.readSize(replicatedInputBytes);
    riValueOffset=replicatedInputBytes.readPosition();
  }
}",0.992548435171386
162828,"@Override public void remotePut(Data<V> newValue,byte remoteIdentifier,long timestamp){
  mh.m().setLastModificationTime(remoteIdentifier,timestamp);
  s.innerUpdateLock.lock();
  mh.m().remoteOperations.put(this,newValue);
}","@Override public void remotePut(Data<V> newValue,byte remoteIdentifier,long timestamp){
  ru.initReplicationUpdate(remoteIdentifier,timestamp);
  mh.m().setLastModificationTime(remoteIdentifier,timestamp);
  s.innerUpdateLock.lock();
  mh.m().remoteOperations.put(this,newValue);
}",0.8893280632411067
162829,"@Override public void remoteRemove(byte remoteIdentifier,long timestamp){
  mh.m().setLastModificationTime(remoteIdentifier,timestamp);
  s.innerWriteLock.lock();
  mh.m().remoteOperations.remove(this);
}","@Override public void remoteRemove(byte remoteIdentifier,long timestamp){
  ru.initReplicationUpdate(remoteIdentifier,timestamp);
  mh.m().setLastModificationTime(remoteIdentifier,timestamp);
  s.innerWriteLock.lock();
  mh.m().remoteOperations.remove(this);
}",0.8793103448275862
162830,"public void initReplicationUpdate(long timestamp,byte identifier){
  innerRemoteTimestamp=timestamp;
  if (identifier == 0)   throw new IllegalStateException(""String_Node_Str"");
  innerRemoteIdentifier=identifier;
}","public void initReplicationUpdate(byte identifier,long timestamp){
  innerRemoteTimestamp=timestamp;
  if (identifier == 0)   throw new IllegalStateException(""String_Node_Str"");
  innerRemoteIdentifier=identifier;
}",0.9302325581395348
162831,"@Stage(""String_Node_Str"") private void unlinkFromSegmentContextsChain(){
}","@Stage(""String_Node_Str"") private void unlinkFromSegmentContextsChain(){
  LocksInterface prevContext=rootContextLockedOnThisSegment;
  while (true) {
    LocksInterface nextNode=prevContext.nextNode();
    if (nextNode == this || nextNode == null)     break;
    prevContext=nextNode;
  }
  verifyInnermostContext();
  prevContext.setNextNode(null);
}",0.3474178403755869
162832,"private long forEachTierWhile(Predicate<? super E> action,long size,int currentTier,long currentTierBaseAddr,long tierIndex){
  boolean interrupted=false;
  long startPos=0L;
  CompactOffHeapLinearHashTable hashLookup=hh.h().hashLookup;
  while (!hashLookup.empty(hashLookup.readEntry(currentTierBaseAddr,startPos))) {
    startPos=hashLookup.step(startPos);
  }
  hlp.initHashLookupPos(startPos);
  long currentHashLookupPos;
  do {
    currentHashLookupPos=hashLookup.step(hlp.hashLookupPos);
    hlp.setHashLookupPos(currentHashLookupPos);
    long entry=hashLookup.readEntry(currentTierBaseAddr,currentHashLookupPos);
    initHashLookupEntry(entry);
    if (!hashLookup.empty(entry)) {
      e.readExistingEntry(hashLookup.value(entry));
      if (entryIsPresent()) {
        initEntryRemovedOnThisIteration(false);
        try {
          if (!action.test((E)this)) {
            interrupted=true;
            break;
          }
 else {
            if (--size == 0)             break;
          }
        }
  finally {
          if (s.tier != currentTier) {
            s.initSegmentTier_WithBaseAddr(currentTier,currentTierBaseAddr,tierIndex);
            currentHashLookupPos=hashLookup.stepBack(currentHashLookupPos);
            hlp.initHashLookupPos(currentHashLookupPos);
          }
        }
      }
    }
  }
 while (currentHashLookupPos != startPos);
  return interrupted ? ~size : size;
}","private long forEachTierWhile(Predicate<? super E> action,long size,int currentTier,long currentTierBaseAddr,long tierIndex){
  boolean interrupted=false;
  long startPos=0L;
  CompactOffHeapLinearHashTable hashLookup=hh.h().hashLookup;
  while (!hashLookup.empty(hashLookup.readEntry(currentTierBaseAddr,startPos))) {
    startPos=hashLookup.step(startPos);
  }
  hlp.initHashLookupPos(startPos);
  long currentHashLookupPos;
  int steps=0;
  do {
    currentHashLookupPos=hashLookup.step(hlp.hashLookupPos);
    steps++;
    hlp.setHashLookupPos(currentHashLookupPos);
    long entry=hashLookup.readEntry(currentTierBaseAddr,currentHashLookupPos);
    initHashLookupEntry(entry);
    if (!hashLookup.empty(entry)) {
      e.readExistingEntry(hashLookup.value(entry));
      if (entryIsPresent()) {
        initEntryRemovedOnThisIteration(false);
        try {
          if (!action.test((E)this)) {
            interrupted=true;
            break;
          }
 else {
            if (--size == 0)             break;
          }
        }
  finally {
          if (s.tier != currentTier) {
            s.initSegmentTier_WithBaseAddr(currentTier,currentTierBaseAddr,tierIndex);
            currentHashLookupPos=hashLookup.stepBack(currentHashLookupPos);
            steps--;
            hlp.initHashLookupPos(currentHashLookupPos);
          }
        }
      }
    }
  }
 while (currentHashLookupPos != startPos || steps == 0);
  return interrupted ? ~size : size;
}",0.9780564263322884
162833,"@Test public void testOverflowAllocationDuringIteration(){
  int entries=10000;
  String x=""String_Node_Str"";
  try (ChronicleMap<Integer,CharSequence> map=ChronicleMapBuilder.of(Integer.class,CharSequence.class).averageValue(x).entries(entries).maxBloatFactor(10.0).actualSegments(1).create()){
    for (int i=0; i < entries; i++) {
      map.put(i,x);
    }
    for (int i=0; i < 3; i++) {
      final String currentX=x;
      map.forEachEntry(e -> {
        String v=e.value().get().toString();
        if (!currentX.contentEquals(v)) {
          throw new AssertionError(currentX + ""String_Node_Str"" + v+ ""String_Node_Str""+ e.key());
        }
        e.doReplaceValue(e.context().wrapValueAsData(v + v));
      }
);
      x=x + x;
      for (int j=0; j < entries; j++) {
        if (map.get(j) == null || !x.contentEquals(map.get(j))) {
          throw new AssertionError();
        }
      }
    }
  }
 }","@Test public void testOverflowAllocationDuringIteration(){
  int entries=10000;
  String x=""String_Node_Str"";
  try (ChronicleMap<Integer,CharSequence> map=ChronicleMapBuilder.of(Integer.class,CharSequence.class).averageValue(x).entries(entries).maxBloatFactor(10.0).actualSegments(1).create()){
    for (int i=0; i < entries; i++) {
      map.put(i,x);
    }
    for (int i=0; i < 3; i++) {
      try {
        final String currentX=x;
        map.forEachEntry(e -> {
          String v=e.value().get().toString();
          if (!currentX.contentEquals(v)) {
            throw new AssertionError(currentX + ""String_Node_Str"" + v+ ""String_Node_Str""+ e.key());
          }
          e.doReplaceValue(e.context().wrapValueAsData(v + v));
        }
);
        x=x + x;
        for (int j=0; j < entries; j++) {
          if (map.get(j) == null || !x.contentEquals(map.get(j))) {
            throw new AssertionError();
          }
        }
      }
  finally {
        ((VanillaChronicleMap)map).verifyTierCountersAreaData();
      }
    }
  }
 }",0.931899641577061
162834,"public long innerEntrySize(long sizeOfEverythingBeforeValue,long valueSize){
  if (mh.m().constantlySizedEntry) {
    return alignAddr(sizeOfEverythingBeforeValue + valueSize,mh.m().alignment);
  }
 else   if (mh.m().couldNotDetermineAlignmentBeforeAllocation) {
    return sizeOfEverythingBeforeValue + mh.m().worstAlignment + valueSize;
  }
 else {
    return alignAddr(sizeOfEverythingBeforeValue,mh.m().alignment) + valueSize;
  }
}","public long innerEntrySize(long sizeOfEverythingBeforeValue,long valueSize){
  long sizeWithoutChecksum;
  if (mh.m().constantlySizedEntry) {
    sizeWithoutChecksum=alignAddr(sizeOfEverythingBeforeValue + valueSize,mh.m().alignment);
  }
 else   if (mh.m().couldNotDetermineAlignmentBeforeAllocation) {
    sizeWithoutChecksum=sizeOfEverythingBeforeValue + mh.m().worstAlignment + valueSize;
  }
 else {
    sizeWithoutChecksum=alignAddr(sizeOfEverythingBeforeValue,mh.m().alignment) + valueSize;
  }
  return sizeWithoutChecksum + checksumStrategy.extraEntryBytes();
}",0.8250497017892644
162835,"@Override public void doInsert(Data<V> value){
  q.putPrefix();
  if (!q.entryPresent()) {
    if (!ks.searchStatePresent()) {
      putEntry(value);
      ks.setSearchState(PRESENT);
      q.initPresenceOfEntry(EntryPresence.PRESENT);
    }
 else {
      e.innerDefaultReplaceValue(value);
      s.deleted(s.deleted() - 1);
    }
    s.incrementModCount();
    e.writeEntryPresent();
    ru.updateChange();
    e.updatedReplicationStateOnAbsentEntry();
    e.checksumStrategy.computeAndStoreChecksum();
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","@Override public void doInsert(Data<V> value){
  q.putPrefix();
  s.innerUpdateLock.lock();
  if (!q.entryPresent()) {
    if (!ks.searchStatePresent()) {
      putEntry(value);
      e.updatedReplicationStateOnAbsentEntry();
      ks.setSearchState(PRESENT);
      q.initPresenceOfEntry(EntryPresence.PRESENT);
    }
 else {
      e.innerDefaultReplaceValue(value);
      e.updatedReplicationStateOnPresentEntry();
      s.deleted(s.deleted() - 1);
    }
    s.incrementModCount();
    e.writeEntryPresent();
    ru.updateChange();
    e.checksumStrategy.computeAndStoreChecksum();
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.8613138686131386
162836,"public ModificationIterator(int identifier,ModificationNotifier notifier){
  this(identifier);
  setModificationNotifier(notifier);
}","public ModificationIterator(int remoteIdentifier,ModificationNotifier notifier){
  this(remoteIdentifier);
  setModificationNotifier(notifier);
}",0.9424460431654677
162837,"@Override public void run(){
  final Attached attached=new Attached();
  attached.connector=ClientConnector.this;
  try {
    socketChannel.register(selector,OP_CONNECT,attached);
  }
 catch (  ClosedChannelException e) {
    if (socketChannel.isOpen())     LOG.error(""String_Node_Str"",e);
  }
}","@Override public void run(){
  final Attached attached=new Attached();
  attached.connector=ClientConnector.this;
  try {
    socketChannel.register(selector,OP_CONNECT,attached);
  }
 catch (  ClosedChannelException e) {
    if (socketChannel.isOpen())     LOG.error(""String_Node_Str"",e);
    onFail(socketChannel);
  }
}",0.9562398703403564
162838,"/** 
 * blocks until connected
 */
@Override SelectableChannel doConnect() throws IOException, InterruptedException {
  boolean success=false;
  final SocketChannel socketChannel=openSocketChannel(TcpReplicator.this.closeables);
  try {
    socketChannel.configureBlocking(false);
    socketChannel.socket().setReuseAddress(true);
    socketChannel.socket().setSoLinger(false,0);
    socketChannel.socket().setSoTimeout(0);
    socketChannel.connect(details.address());
    Thread.sleep(10);
    addPendingRegistration(new Runnable(){
      @Override public void run(){
        final Attached attached=new Attached();
        attached.connector=ClientConnector.this;
        try {
          socketChannel.register(selector,OP_CONNECT,attached);
        }
 catch (        ClosedChannelException e) {
          if (socketChannel.isOpen())           LOG.error(""String_Node_Str"",e);
        }
      }
    }
);
    selector.wakeup();
    success=true;
    return socketChannel;
  }
  finally {
    if (!success) {
      try {
        try {
          socketChannel.socket().close();
        }
 catch (        Exception e) {
          LOG.error(""String_Node_Str"",e);
        }
        socketChannel.close();
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"",e);
      }
      this.connectLater();
    }
  }
}","/** 
 * blocks until connected
 */
@Override SelectableChannel doConnect() throws IOException, InterruptedException {
  boolean success=false;
  final SocketChannel socketChannel=openSocketChannel(TcpReplicator.this.closeables);
  try {
    socketChannel.configureBlocking(false);
    socketChannel.socket().setReuseAddress(true);
    socketChannel.socket().setSoLinger(false,0);
    socketChannel.socket().setSoTimeout(0);
    socketChannel.connect(details.address());
    Thread.sleep(10);
    addPendingRegistration(new Runnable(){
      @Override public void run(){
        final Attached attached=new Attached();
        attached.connector=ClientConnector.this;
        try {
          socketChannel.register(selector,OP_CONNECT,attached);
        }
 catch (        ClosedChannelException e) {
          if (socketChannel.isOpen())           LOG.error(""String_Node_Str"",e);
          onFail(socketChannel);
        }
      }
    }
);
    selector.wakeup();
    success=true;
    return socketChannel;
  }
  finally {
    if (!success) {
      onFail(socketChannel);
    }
  }
}",0.8521594684385382
162839,"/** 
 * called when the selector receives a OP_CONNECT message
 */
private void onConnect(@NotNull final SelectionKey key) throws IOException {
  SocketChannel channel=null;
  try {
    channel=(SocketChannel)key.channel();
  }
  finally {
    closeables.add(channel);
  }
  final Attached attached=(Attached)key.attachment();
  try {
    if (!channel.finishConnect()) {
      return;
    }
  }
 catch (  SocketException e) {
    quietClose(key,e);
    attached.connector.connectLater();
    throw e;
  }
  attached.connector.setSuccessfullyConnected();
  if (LOG.isDebugEnabled())   LOG.debug(""String_Node_Str"",channel.socket().getInetAddress(),localIdentifier);
  channel.configureBlocking(false);
  channel.socket().setTcpNoDelay(true);
  channel.socket().setSoTimeout(0);
  channel.socket().setSoLinger(false,0);
  attached.entryReader=new TcpSocketChannelEntryReader();
  attached.entryWriter=new TcpSocketChannelEntryWriter();
  key.interestOps(OP_WRITE | OP_READ);
  throttle(channel);
  attached.entryWriter.identifierToBuffer(localIdentifier);
}","/** 
 * called when the selector receives a OP_CONNECT message
 */
private void onConnect(@NotNull final SelectionKey key) throws IOException {
  SocketChannel channel=null;
  try {
    channel=(SocketChannel)key.channel();
  }
  finally {
    closeables.add(channel);
  }
  final Attached attached=(Attached)key.attachment();
  try {
    if (!channel.finishConnect()) {
      return;
    }
    channel.configureBlocking(false);
    channel.socket().setTcpNoDelay(true);
    channel.socket().setSoTimeout(0);
    channel.socket().setSoLinger(false,0);
  }
 catch (  IOException e) {
    quietClose(key,e);
    attached.connector.connectLater();
    throw e;
  }
  attached.connector.setSuccessfullyConnected();
  if (LOG.isDebugEnabled())   LOG.debug(""String_Node_Str"",channel.socket().getInetAddress(),localIdentifier);
  attached.entryReader=new TcpSocketChannelEntryReader();
  attached.entryWriter=new TcpSocketChannelEntryWriter();
  key.interestOps(OP_WRITE | OP_READ);
  throttle(channel);
  attached.entryWriter.identifierToBuffer(localIdentifier);
}",0.8475378787878788
162840,"@Override public void close() throws IOException {
  channelDataLock.writeLock().lock();
  try {
    int removedPos=chronicleChannelPositionsInList[chronicleChannel];
    if (removedPos == -1)     return;
    chronicleChannelPositionsInList[removedPos]=-1;
    chronicleChannelList.remove(removedPos);
    chronicleChannelIds.remove(removedPos);
    for (int i=0, len=chronicleChannelIds.size(); i < len; i++) {
      int channelId=chronicleChannelIds.get(i);
      int pos=chronicleChannelPositionsInList[channelId];
      if (pos > removedPos)       chronicleChannelPositionsInList[channelId]=pos - 1;
    }
    chronicleChannels[chronicleChannel]=null;
    channelEntryExternalizables[chronicleChannel]=null;
    if (chronicleChannelList.size() == 1)     ChannelProvider.this.close();
  }
  finally {
    channelDataLock.writeLock().unlock();
  }
}","@Override public void close() throws IOException {
  channelDataLock.writeLock().lock();
  try {
    int removedPos=chronicleChannelPositionsInList[chronicleChannel];
    if (removedPos == -1)     return;
    chronicleChannelPositionsInList[chronicleChannel]=-1;
    chronicleChannelList.remove(removedPos);
    chronicleChannelIds.remove(removedPos);
    for (int i=0, len=chronicleChannelIds.size(); i < len; i++) {
      int channelId=chronicleChannelIds.get(i);
      int pos=chronicleChannelPositionsInList[channelId];
      if (pos > removedPos)       chronicleChannelPositionsInList[channelId]=pos - 1;
    }
    chronicleChannels[chronicleChannel]=null;
    channelEntryExternalizables[chronicleChannel]=null;
    if (chronicleChannelList.size() == 1)     ChannelProvider.this.close();
  }
  finally {
    channelDataLock.writeLock().unlock();
  }
}",0.9847775175644028
162841,"@Override public ChronicleSetBuilder<K> aligned64BitMemoryOperationsAtomic(boolean aligned64BitMemoryOperationsAtomic){
  return null;
}","@Override public ChronicleSetBuilder<K> aligned64BitMemoryOperationsAtomic(boolean aligned64BitMemoryOperationsAtomic){
  chronicleMapBuilder.aligned64BitMemoryOperationsAtomic(aligned64BitMemoryOperationsAtomic);
  return this;
}",0.6830601092896175
162842,"/** 
 * called when the selector receives a OP_READ message
 */
private void onRead(@NotNull final SelectionKey key,final long approxTime) throws IOException, InterruptedException {
  final SocketChannel socketChannel=(SocketChannel)key.channel();
  final Attached attached=(Attached)key.attachment();
  if (attached == null) {
    LOG.info(""String_Node_Str"" + socketChannel + ""String_Node_Str"");
    socketChannel.close();
    return;
  }
  try {
    int len=attached.entryReader.readSocketToBuffer(socketChannel);
    if (len == -1) {
      socketChannel.register(selector,0);
      if (replicationConfig.autoReconnectedUponDroppedConnection()) {
        AbstractConnector connector=attached.connector;
        if (connector != null)         connector.connectLater();
      }
 else       socketChannel.close();
      return;
    }
    if (len == 0)     return;
    if (attached.entryWriter.isWorkIncomplete())     return;
  }
 catch (  IOException e) {
    if (!attached.isServer)     attached.connector.connectLater();
    throw e;
  }
  if (LOG.isDebugEnabled())   LOG.debug(""String_Node_Str"");
  attached.entryReader.lastHeartBeatReceived=approxTime;
  if (attached.isHandShakingComplete()) {
    attached.entryReader.entriesFromBuffer(attached,key);
  }
 else {
    doHandShaking(key,socketChannel);
  }
}","/** 
 * called when the selector receives a OP_READ message
 */
private void onRead(@NotNull final SelectionKey key,final long approxTime) throws IOException, InterruptedException {
  final SocketChannel socketChannel=(SocketChannel)key.channel();
  final Attached attached=(Attached)key.attachment();
  if (attached == null) {
    LOG.info(""String_Node_Str"" + socketChannel + ""String_Node_Str"");
    socketChannel.close();
    return;
  }
  try {
    int len=attached.entryReader.readSocketToBuffer(socketChannel);
    if (len == -1) {
      socketChannel.register(selector,0,attached);
      if (replicationConfig.autoReconnectedUponDroppedConnection()) {
        AbstractConnector connector=attached.connector;
        if (connector != null)         connector.connectLater();
      }
 else       socketChannel.close();
      return;
    }
    if (len == 0)     return;
    if (attached.entryWriter.isWorkIncomplete())     return;
  }
 catch (  IOException e) {
    if (!attached.isServer)     attached.connector.connectLater();
    throw e;
  }
  if (LOG.isDebugEnabled())   LOG.debug(""String_Node_Str"");
  attached.entryReader.lastHeartBeatReceived=approxTime;
  if (attached.isHandShakingComplete()) {
    attached.entryReader.entriesFromBuffer(attached,key);
  }
 else {
    doHandShaking(key,socketChannel);
  }
}",0.9965792474344356
162843,"/** 
 * closes and only logs the exception at debug
 * @param key the SelectionKey
 * @param e   the Exception that caused the issue
 */
private void quietClose(@NotNull final SelectionKey key,@NotNull final Exception e){
  if (LOG.isDebugEnabled())   LOG.debug(""String_Node_Str"",e);
  if (key.channel() != null && key.attachment() != null && connectionListener != null)   connectionListener.onDisconnect(((SocketChannel)key.channel()).socket().getInetAddress(),((Attached)key.attachment()).remoteIdentifier);
  closeEarlyAndQuietly(key.channel());
}","/** 
 * closes and only logs the exception at debug
 * @param key the SelectionKey
 * @param e   the Exception that caused the issue
 */
private void quietClose(@NotNull final SelectionKey key,@Nullable final Exception e){
  if (LOG.isDebugEnabled() && e != null)   LOG.debug(""String_Node_Str"",e);
  if (key.channel() != null && key.attachment() != null && connectionListener != null)   connectionListener.onDisconnect(((SocketChannel)key.channel()).socket().getInetAddress(),((Attached)key.attachment()).remoteIdentifier);
  closeEarlyAndQuietly(key.channel());
}",0.9766606822262118
162844,"/** 
 * check to see if we have lost connection with the remote node and if we have attempts a reconnect.
 * @param key               the key relating to the heartbeat that we are checking
 * @param approxTimeOutTime the approximate time in milliseconds
 * @throws ConnectException
 */
private void heartbeatCheckHasReceived(@NotNull final SelectionKey key,final long approxTimeOutTime){
  final Attached attached=(Attached)key.attachment();
  if (attached.isServer || !attached.isHandShakingComplete())   return;
  final SocketChannel channel=(SocketChannel)key.channel();
  if (approxTimeOutTime > attached.entryReader.lastHeartBeatReceived + attached.remoteHeartbeatInterval) {
    if (LOG.isDebugEnabled())     LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + attached.remoteIdentifier);
    activeKeys.clear(attached.remoteIdentifier);
    closeables.closeQuietly(channel.socket());
    if (replicationConfig.autoReconnectedUponDroppedConnection())     attached.connector.connectLater();
  }
}","/** 
 * check to see if we have lost connection with the remote node and if we have attempts a reconnect.
 * @param key               the key relating to the heartbeat that we are checking
 * @param approxTimeOutTime the approximate time in milliseconds
 * @throws ConnectException
 */
private void heartbeatCheckHasReceived(@NotNull final SelectionKey key,final long approxTimeOutTime){
  final Attached attached=(Attached)key.attachment();
  if (attached.isServer && !attached.isHandShakingComplete())   return;
  final SocketChannel channel=(SocketChannel)key.channel();
  if (approxTimeOutTime > attached.entryReader.lastHeartBeatReceived + attached.remoteHeartbeatInterval) {
    if (LOG.isDebugEnabled())     LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + attached.remoteIdentifier);
    activeKeys.clear(attached.remoteIdentifier);
    quietClose(key,null);
    closeables.closeQuietly(channel.socket());
    if (replicationConfig.autoReconnectedUponDroppedConnection())     attached.connector.connectLater();
  }
}",0.9851778656126482
162845,"public long tierIndexToBaseAddr(long tierIndex){
  tierIndex-=1;
  if (tierIndex < actualSegments)   return segmentBaseAddr((int)tierIndex);
  return extraTierIndexToBaseAddress(tierIndex);
}","public long tierIndexToBaseAddr(long tierIndex){
  long tierIndexMinusOne=tierIndex - 1;
  if (tierIndexMinusOne < actualSegments)   return segmentBaseAddr((int)tierIndexMinusOne);
  return extraTierIndexToBaseAddr(tierIndexMinusOne);
}",0.7868852459016393
162846,"private long combineExtraTier(long tierIndexMinusOne,long pos){
  long extraTierIndex=tierIndexMinusOne - actualSegments;
  long tierOffsetWithinBulk=extraTierIndex & ((1L << log2NumberOfTiersInBulk) - 1);
  return (tierOffsetWithinBulk << segmentIndexShift) | pos;
}","private long combineExtraTier(long tierIndexMinusOne,long pos){
  long extraTierIndex=tierIndexMinusOne - actualSegments;
  long tierIndexOffsetWithinBulk=extraTierIndex & (numberOfTiersInBulk - 1);
  return (tierIndexOffsetWithinBulk << segmentIndexShift) | pos;
}",0.9548872180451128
162847,"/** 
 * @param entryCallback call this to get an entry, this class will take care of the locking
 * @return true if an entry was processed
 */
@Override public boolean nextEntry(@NotNull EntryCallback entryCallback,int chronicleId){
  while (true) {
    long position=nextPosition();
    if (position == NOT_FOUND) {
      this.position=NOT_FOUND;
      return false;
    }
    this.position=position;
    int tierIndexMinusOne=(int)(position >>> segmentIndexShift);
    try (CompiledReplicatedMapIterationContext<K,KI,MKI,V,VI,MVI,R> context=iterationContext()){
      if (iterationMainSegmentsAreaOrTierBulk < 0) {
        context.initSegmentIndex(tierIndexMinusOne);
      }
 else {
        long tierBaseAddr=tierIndexToBaseAddr(tierIndexMinusOne + 1);
        long tierCountersAreaAddr=tierBaseAddr + segmentHashLookupOuterSize;
        context.initSegmentIndex(TierCountersArea.segmentIndex(tierCountersAreaAddr));
        int tier=TierCountersArea.tier(tierCountersAreaAddr);
        long tierIndex=actualSegments + (iterationMainSegmentsAreaOrTierBulk << log2NumberOfTiersInBulk) + tierIndexMinusOne+ 1;
        context.initSegmentTier(tier,tierIndex,tierBaseAddr);
      }
      context.updateLock().lock();
      if (changesForUpdatesGet(position)) {
        entryCallback.onBeforeEntry();
        final long segmentPos=position & posMask;
        context.readExistingEntry(segmentPos);
        if (entryCallback.shouldBeIgnored(context,chronicleId)) {
          changesForUpdatesClear(position);
          continue;
        }
        context.segmentBytes().limit(context.valueOffset() + context.valueSize());
        context.segmentBytes().position(context.keySizeOffset());
        boolean success=entryCallback.onEntry(context.segmentBytes(),chronicleId,bootStrapTimeStamp());
        entryCallback.onAfterEntry();
        if (success)         changesForUpdatesClear(position);
        return success;
      }
    }
   }
}","/** 
 * @param entryCallback call this to get an entry, this class will take care of the locking
 * @return true if an entry was processed
 */
@Override public boolean nextEntry(@NotNull EntryCallback entryCallback,int chronicleId){
  while (true) {
    long position=nextPosition();
    if (position == NOT_FOUND) {
      this.position=NOT_FOUND;
      return false;
    }
    this.position=position;
    int segmentIndexOrTierIndexOffsetWithinBulk=(int)(position >>> segmentIndexShift);
    try (CompiledReplicatedMapIterationContext<K,KI,MKI,V,VI,MVI,R> context=iterationContext()){
      if (iterationMainSegmentsAreaOrTierBulk < 0) {
        context.initSegmentIndex(segmentIndexOrTierIndexOffsetWithinBulk);
      }
 else {
        TierBulkData tierBulkData=tierBulkOffsets.get(iterationMainSegmentsAreaOrTierBulk);
        long tierBaseAddr=tierAddr(tierBulkData,segmentIndexOrTierIndexOffsetWithinBulk);
        long tierCountersAreaAddr=tierBaseAddr + segmentHashLookupOuterSize;
        context.initSegmentIndex(TierCountersArea.segmentIndex(tierCountersAreaAddr));
        int tier=TierCountersArea.tier(tierCountersAreaAddr);
        long tierIndex=actualSegments + (iterationMainSegmentsAreaOrTierBulk << log2NumberOfTiersInBulk) + segmentIndexOrTierIndexOffsetWithinBulk+ 1;
        context.initSegmentTier(tier,tierIndex,tierBaseAddr);
      }
      context.updateLock().lock();
      if (changesForUpdatesGet(position)) {
        entryCallback.onBeforeEntry();
        final long segmentPos=position & posMask;
        context.readExistingEntry(segmentPos);
        if (entryCallback.shouldBeIgnored(context,chronicleId)) {
          changesForUpdatesClear(position);
          continue;
        }
        context.segmentBytes().limit(context.valueOffset() + context.valueSize());
        context.segmentBytes().position(context.keySizeOffset());
        boolean success=entryCallback.onEntry(context.segmentBytes(),chronicleId,bootStrapTimeStamp());
        entryCallback.onAfterEntry();
        if (success)         changesForUpdatesClear(position);
        return success;
      }
    }
   }
}",0.8991596638655462
162848,"private void waitTillEqual(final int timeOutMs) throws InterruptedException {
  Map map1UnChanged=new HashMap();
  Map map2UnChanged=new HashMap();
  int numberOfTimesTheSame=0;
  long startTime=System.currentTimeMillis();
  for (int t=0; t < timeOutMs + 100; t++) {
    if (map1.entrySet().equals(map2.entrySet())) {
      if (map1.equals(map1UnChanged) && map2.equals(map2UnChanged)) {
        numberOfTimesTheSame++;
      }
 else {
        numberOfTimesTheSame=0;
        map1UnChanged=new HashMap(map1);
        map2UnChanged=new HashMap(map2);
      }
      Thread.sleep(1);
      if (numberOfTimesTheSame == 10) {
        System.out.println(""String_Node_Str"");
        break;
      }
    }
    Thread.sleep(1);
    if (System.currentTimeMillis() - startTime > timeOutMs)     break;
  }
}","private void waitTillEqual(final int timeOutMs) throws InterruptedException {
  Map map1UnChanged=new HashMap();
  Map map2UnChanged=new HashMap();
  int numberOfTimesTheSame=0;
  long startTime=System.currentTimeMillis();
  for (int t=0; t < timeOutMs + 100; t++) {
    if (difference(map1,map2).areEqual()) {
      if (difference(map1,map1UnChanged).areEqual() && difference(map2,map2UnChanged).areEqual()) {
        numberOfTimesTheSame++;
      }
 else {
        numberOfTimesTheSame=0;
        map1UnChanged=new HashMap(map1);
        map2UnChanged=new HashMap(map2);
      }
      Thread.sleep(1);
      if (numberOfTimesTheSame == 10) {
        System.out.println(""String_Node_Str"");
        break;
      }
    }
    Thread.sleep(1);
    if (System.currentTimeMillis() - startTime > timeOutMs)     break;
  }
}",0.8876474239602731
162849,"@Test public void testSoakTestWithRandomData() throws IOException, InterruptedException {
  try {
    System.out.print(""String_Node_Str"");
    for (int j=1; j < 2 * Builder.SIZE; j++) {
      if (j % 1000 == 0)       System.out.print(""String_Node_Str"");
      Random rnd=new Random(j);
      for (int i=1; i < 10; i++) {
        final ChronicleMap<Integer,Set<Integer>> map=rnd.nextBoolean() ? map1 : map2;
        int key=rnd.nextInt(Builder.SIZE);
        try (ExternalMapQueryContext<Integer,Set<Integer>,?> q=map.queryContext(key)){
          q.updateLock().lock();
          MapEntry<Integer,Set<Integer>> entry=q.entry();
          if (entry != null) {
            Set<Integer> value=entry.value().get();
            value.add(rnd.nextInt(20));
            q.replaceValue(entry,q.wrapValueAsData(value));
          }
 else {
            HashSet<Integer> value=new HashSet<>();
            q.insert(q.absentEntry(),q.wrapValueAsData(value));
          }
        }
       }
    }
    System.out.println(""String_Node_Str"");
    waitTillEqual(15000);
    assertEquals(map1.entrySet(),map2.entrySet());
  }
  finally {
    map1.close();
    map2.close();
  }
}","@Test public void testSoakTestWithRandomData() throws IOException, InterruptedException {
  try {
    System.out.print(""String_Node_Str"");
    for (int j=1; j < 2 * Builder.SIZE; j++) {
      if (j % 1000 == 0)       System.out.print(""String_Node_Str"");
      Random rnd=new Random(j);
      for (int i=1; i < 10; i++) {
        final ChronicleMap<Integer,Set<Integer>> map=rnd.nextBoolean() ? map1 : map2;
        int key=rnd.nextInt(Builder.SIZE);
        try (ExternalMapQueryContext<Integer,Set<Integer>,?> q=map.queryContext(key)){
          q.updateLock().lock();
          MapEntry<Integer,Set<Integer>> entry=q.entry();
          if (entry != null) {
            Set<Integer> value=entry.value().get();
            value.add(rnd.nextInt(20));
            q.replaceValue(entry,q.wrapValueAsData(value));
          }
 else {
            HashSet<Integer> value=new HashSet<>();
            q.insert(q.absentEntry(),q.wrapValueAsData(value));
          }
        }
       }
    }
    System.out.println(""String_Node_Str"");
    waitTillEqual(15000);
    MapDifference<Integer,Set<Integer>> difference=difference(map1,map2);
    if (difference.areEqual()) {
      System.out.println(""String_Node_Str"");
      return;
    }
    Map<Integer,Set<Integer>> onlyOnMap1=difference.entriesOnlyOnLeft();
    System.out.println(""String_Node_Str"");
    for (    Integer k : onlyOnMap1.keySet()) {
      printState(map1,k);
    }
    Map<Integer,Set<Integer>> onlyOnMap2=difference.entriesOnlyOnRight();
    System.out.println(""String_Node_Str"");
    for (    Integer k : onlyOnMap2.keySet()) {
      printState(map2,k);
    }
    Set<Integer> entryDifferingKeys=difference.entriesDiffering().keySet();
    System.out.println(""String_Node_Str"");
    for (    Integer k : entryDifferingKeys) {
      printState(map1,k);
      printState(map2,k);
    }
    throw new AssertionError(difference);
  }
  finally {
    map1.close();
    map2.close();
  }
}",0.7208252740167633
162850,"@Before public void setup() throws IOException {
  final InetSocketAddress endpoint=new InetSocketAddress(""String_Node_Str"",s_port + 1);
  HashSet<Integer> averageValue=new HashSet<>();
  for (int i=0; i < 10; i++) {
    averageValue.add(i);
  }
  ChronicleMapBuilder<Integer,Set<Integer>> builder=ChronicleMapBuilder.of(Integer.class,(Class<Set<Integer>>)(Class)Set.class).entries(Builder.SIZE).averageValue(averageValue).entryOperations(growOnlySetValuedMapEntryOperations()).remoteOperations(growOnlySetValuedMapRemoteOperations());
{
    final TcpTransportAndNetworkConfig tcpConfig1=TcpTransportAndNetworkConfig.of(s_port,endpoint).autoReconnectedUponDroppedConnection(true).heartBeatInterval(1,TimeUnit.SECONDS).tcpBufferSize((int)MEGABYTES.toBytes(64));
    map1=builder.replication(SingleChronicleHashReplication.builder().tcpTransportAndNetwork(tcpConfig1).name(""String_Node_Str"").createWithId((byte)1)).instance().name(""String_Node_Str"").create();
  }
{
    final TcpTransportAndNetworkConfig tcpConfig2=TcpTransportAndNetworkConfig.of(s_port + 1).autoReconnectedUponDroppedConnection(true).heartBeatInterval(1,TimeUnit.SECONDS).tcpBufferSize((int)MEGABYTES.toBytes(64));
    map2=builder.replication(SingleChronicleHashReplication.builder().tcpTransportAndNetwork(tcpConfig2).name(""String_Node_Str"").createWithId((byte)2)).instance().name(""String_Node_Str"").create();
  }
  s_port+=2;
}","@Before public void setup() throws IOException {
  final InetSocketAddress endpoint=new InetSocketAddress(""String_Node_Str"",s_port + 1);
  HashSet<Integer> averageValue=new HashSet<>();
  for (int i=0; i < 10; i++) {
    averageValue.add(i);
  }
  ChronicleMapBuilder<Integer,Set<Integer>> builder=ChronicleMapBuilder.of(Integer.class,(Class<Set<Integer>>)(Class)Set.class).entries(Builder.SIZE).averageValue(averageValue).entryOperations(growOnlySetValuedMapEntryOperations()).remoteOperations(growOnlySetValuedMapRemoteOperations());
{
    final TcpTransportAndNetworkConfig tcpConfig1=TcpTransportAndNetworkConfig.of(s_port,endpoint).autoReconnectedUponDroppedConnection(true).heartBeatInterval(1,TimeUnit.SECONDS).tcpBufferSize((int)MEGABYTES.toBytes(64));
    map1=builder.instance().replicated(SingleChronicleHashReplication.builder().tcpTransportAndNetwork(tcpConfig1).name(""String_Node_Str"").createWithId((byte)1)).name(""String_Node_Str"").create();
  }
{
    final TcpTransportAndNetworkConfig tcpConfig2=TcpTransportAndNetworkConfig.of(s_port + 1).autoReconnectedUponDroppedConnection(true).heartBeatInterval(1,TimeUnit.SECONDS).tcpBufferSize((int)MEGABYTES.toBytes(64));
    map2=builder.instance().replicated(SingleChronicleHashReplication.builder().tcpTransportAndNetwork(tcpConfig2).name(""String_Node_Str"").createWithId((byte)2)).name(""String_Node_Str"").create();
  }
  s_port+=2;
}",0.9691977077363896
162851,"private static <K,V>boolean trySerializeHeaderViaXStream(VanillaChronicleMap<K,?,?,V,?,?,?> map,ObjectOutputStream oos) throws IOException {
  Class<?> xStreamClass;
  try {
    xStreamClass=Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    xStreamClass=null;
  }
  if (xStreamClass == null) {
    LOG.info(""String_Node_Str"");
    return false;
  }
  try {
    oos.writeByte(XML_SERIALIZATION);
    Method toXML=xStreamClass.getMethod(""String_Node_Str"",Object.class,OutputStream.class);
    toXML.invoke(xStreamClass.newInstance(),map,oos);
    return true;
  }
 catch (  NoSuchMethodException|InvocationTargetException|IllegalAccessException|InstantiationException e) {
    throw new AssertionError(e);
  }
}","private static <K,V>boolean trySerializeHeaderViaXStream(VanillaChronicleMap<K,?,?,V,?,?,?> map,ObjectOutputStream oos) throws IOException {
  Class<?> xStreamClass;
  try {
    xStreamClass=Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException|NoClassDefFoundError e) {
    xStreamClass=null;
  }
  if (xStreamClass == null) {
    LOG.info(""String_Node_Str"");
    return false;
  }
  try {
    oos.writeByte(XML_SERIALIZATION);
    Method toXML=xStreamClass.getMethod(""String_Node_Str"",Object.class,OutputStream.class);
    toXML.invoke(xStreamClass.newInstance(),map,oos);
    return true;
  }
 catch (  NoSuchMethodException|InvocationTargetException|IllegalAccessException|InstantiationException e) {
    throw new AssertionError(e);
  }
}",0.9859906604402936
162852,"protected void relocation(Data<V> newValue,long newSizeOfEverythingBeforeValue){
  s.free(pos,entrySizeInChunks);
  long entrySize=innerEntrySize(newSizeOfEverythingBeforeValue,newValue.size());
  allocatedChunks.initEntryAndKeyCopying(entrySize,valueSizeOffset - keySizeOffset);
  writeValueAndPutPos(newValue);
}","protected void relocation(Data<V> newValue,long newSizeOfEverythingBeforeValue){
  s.innerWriteLock.lock();
  s.free(pos,entrySizeInChunks);
  long entrySize=innerEntrySize(newSizeOfEverythingBeforeValue,newValue.size());
  allocatedChunks.initEntryAndKeyCopying(entrySize,valueSizeOffset - keySizeOffset);
  writeValueAndPutPos(newValue);
}",0.9587786259541984
162853,"private <E>double preMapConstruction(SerializationBuilder<E> builder,double configuredAverageSize,E average,E sample){
  builder.objectSerializer(acquireObjectSerializer(JDKObjectSerializer.INSTANCE));
  if (sample != null) {
    builder.constantSizeBySample(sample);
    return builder.maxSize();
  }
 else {
    return averageKeyOrValueSize(configuredAverageSize,builder,average);
  }
}","private <E>double preMapConstruction(SerializationBuilder<E> builder,double configuredAverageSize,E average,E sample){
  builder.objectSerializer(acquireObjectSerializer(JDKObjectSerializer.INSTANCE));
  if (sample != null) {
    builder.maxSize(DEFAULT_KEY_OR_VALUE_SIZE);
    builder.constantSizeBySample(sample);
    return builder.maxSize();
  }
 else {
    return averageKeyOrValueSize(configuredAverageSize,builder,average);
  }
}",0.941747572815534
162854,"public void putValueDeletedEntry(Data<V> newValue){
}","public void putValueDeletedEntry(Data<V> newValue){
  throw new AssertionError(""String_Node_Str"" + ""String_Node_Str"");
}",0.6127167630057804
162855,"public SerializationBuilder<E> maxSize(long maxSize){
  if (copyingInterop == CopyingInterop.FROM_MARSHALLER) {
    this.maxSize=maxSize;
    metaInteropProvider(CopyingMetaBytesInterop.<E,BytesMarshaller<E>>providerForBytesMarshaller(instancesAreMutable,maxSize));
  }
 else   if (copyingInterop == CopyingInterop.FROM_WRITER) {
    this.maxSize=maxSize;
    metaInteropProvider(CopyingMetaBytesInterop.<E,BytesWriter<E>>providerForBytesWriter(instancesAreMutable));
  }
  return this;
}","public long maxSize(){
  return maxSize;
}",0.1320754716981132
162856,"private double averageKeySize(){
  return averageKeySize=averageKeyOrValueSize(averageKeySize,keyBuilder,averageKey);
}","private double averageKeySize(){
  if (!isDefined(averageKeySize))   throw new AssertionError();
  return averageKeySize;
}",0.4876033057851239
162857,"private <E>void preMapConstruction(boolean replicated,SerializationBuilder<E> builder,double averageSize,E sample){
  builder.objectSerializer(acquireObjectSerializer(JDKObjectSerializer.INSTANCE));
  if (sample != null) {
    builder.constantSizeBySample(sample);
  }
 else {
    builder.maxSize(bufferSize(builder,averageSize,replicated));
  }
}","private <E>double preMapConstruction(SerializationBuilder<E> builder,double configuredAverageSize,E average,E sample){
  builder.objectSerializer(acquireObjectSerializer(JDKObjectSerializer.INSTANCE));
  if (sample != null) {
    builder.constantSizeBySample(sample);
    return builder.maxSize();
  }
 else {
    return averageKeyOrValueSize(configuredAverageSize,builder,average);
  }
}",0.6993197278911565
162858,"double averageValueSize(){
  return averageValueSize=averageKeyOrValueSize(averageValueSize,valueBuilder,averageValue);
}","double averageValueSize(){
  if (!isDefined(averageValueSize))   throw new AssertionError();
  return averageValueSize;
}",0.4545454545454545
162859,"private long bufferSize(SerializationBuilder builder,double averageSize,boolean replicated){
  if (builder.constantSizeMarshaller())   return round(ceil(averageSize));
  int maxChunksPerEntry=maxChunksPerEntry(replicated);
  int limitedMaxChunksPerEntry=Math.min(64,maxChunksPerEntry);
  long limitedMaxEntrySize=limitedMaxChunksPerEntry * chunkSize(replicated);
  long limitFactor=Math.max(2L,entries() >> 10);
  return Math.min(round(ceil(limitFactor * averageSize)),limitedMaxEntrySize);
}","private long bufferSize(SerializationBuilder builder,double averageSize,boolean replicated){
  if (builder.constantSizeMarshaller())   return round(ceil(averageSize));
  @SuppressWarnings(""String_Node_Str"") int maxChunksPerEntry=maxChunksPerEntry(replicated);
  int limitedMaxChunksPerEntry=Math.min(64,maxChunksPerEntry);
  long limitedMaxEntrySize=limitedMaxChunksPerEntry * chunkSize(replicated);
  long limitFactor=Math.max(2L,entries() >> 10);
  return Math.min(round(ceil(limitFactor * averageSize)),limitedMaxEntrySize);
}",0.9637610186092068
162860,"@Override public boolean onEntry(final Bytes entry,final int chronicleId){
  long startOfEntry=entry.position();
  long pos0=in.position();
  long start=0;
  try {
    in.writeByte(StatelessChronicleMap.EventId.STATEFUL_UPDATE.ordinal());
    long sizeLocation=in.position();
    in.skip(SIZE_OF_SIZE);
    start=in.position();
    externalizable.writeExternalEntry(entry,in,chronicleId);
    if (in.position() == start) {
      in.position(pos0);
      return false;
    }
    final long bytesWritten=(int)(in.position() - start);
    if (bytesWritten > Integer.MAX_VALUE)     throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + Integer.MAX_VALUE);
    if (LOG.isDebugEnabled())     LOG.debug(""String_Node_Str"" + (int)bytesWritten);
    in.writeInt(sizeLocation,(int)bytesWritten);
  }
 catch (  IllegalArgumentException e) {
    entry.position(startOfEntry);
    in.position(pos0);
    long remaining=in.remaining();
    int entrySize=externalizable.sizeOfEntry(entry,chronicleId);
    if (entrySize > remaining) {
      long newSize=start + entrySize;
      if (newSize > Integer.MAX_VALUE)       return false;
      resizeBuffer((int)newSize);
      in.position(pos0);
      entry.position(startOfEntry);
      return onEntry(entry,chronicleId);
    }
 else     throw e;
  }
  return true;
}","@Override public boolean onEntry(@NotNull final Bytes entry,final int chronicleId,final long bootstrapTime){
  long startOfEntry=entry.position();
  long pos0=in.position();
  long start=0;
  try {
    in.writeByte(StatelessChronicleMap.EventId.STATEFUL_UPDATE.ordinal());
    long sizeLocation=in.position();
    in.skip(SIZE_OF_SIZE);
    start=in.position();
    externalizable.writeExternalEntry(entry,in,chronicleId,bootstrapTime);
    if (in.position() == start) {
      in.position(pos0);
      return false;
    }
    final long bytesWritten=(int)(in.position() - start);
    if (bytesWritten > Integer.MAX_VALUE)     throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + Integer.MAX_VALUE);
    if (LOG.isDebugEnabled())     LOG.debug(""String_Node_Str"" + (int)bytesWritten);
    in.writeInt(sizeLocation,(int)bytesWritten);
  }
 catch (  IllegalArgumentException e) {
    entry.position(startOfEntry);
    in.position(pos0);
    long remaining=in.remaining();
    int entrySize=externalizable.sizeOfEntry(entry,chronicleId);
    if (entrySize > remaining) {
      long newSize=start + entrySize;
      if (newSize > Integer.MAX_VALUE)       return false;
      resizeBuffer((int)newSize);
      in.position(pos0);
      entry.position(startOfEntry);
      return onEntry(entry,chronicleId,bootstrapTime);
    }
 else     throw e;
  }
  return true;
}",0.976968796433878
162861,"@Override public ModificationIterator acquireModificationIterator(final byte remoteIdentifier){
  final ModificationIterator result=systemModificationIterator.get(remoteIdentifier);
  if (result != null)   return result;
  final PayloadProvider iterator=new PayloadProvider(){
    final Queue<Bytes> payloads=new LinkedTransferQueue<Bytes>();
    ModificationNotifier modificationNotifier0;
    @Override public boolean hasNext(){
      return payloads.peek() != null;
    }
    @Override public boolean nextEntry(    @NotNull EntryCallback callback,    int na){
      final Bytes bytes=payloads.poll();
      if (bytes == null)       return false;
      callback.onEntry(bytes,0);
      return true;
    }
    @Override public void dirtyEntries(    long fromTimeStamp){
    }
    @Override public void setModificationNotifier(    @NotNull ModificationNotifier modificationNotifier){
      modificationNotifier0=modificationNotifier;
    }
    @Override public void addPayload(    Bytes bytes){
      if (bytes.remaining() == 0)       return;
      payloads.add(bytes);
      modificationNotifier0.onChange();
    }
  }
;
  systemModificationIterator.set(remoteIdentifier,iterator);
  systemModificationIteratorBitSet.set(remoteIdentifier);
  return iterator;
}","@Override public ModificationIterator acquireModificationIterator(final byte remoteIdentifier){
  final ModificationIterator result=systemModificationIterator.get(remoteIdentifier);
  if (result != null)   return result;
  final PayloadProvider iterator=new PayloadProvider(){
    final Queue<Bytes> payloads=new LinkedTransferQueue<Bytes>();
    ModificationNotifier modificationNotifier0;
    @Override public boolean hasNext(){
      return payloads.peek() != null;
    }
    @Override public boolean nextEntry(    @NotNull EntryCallback callback,    int na){
      final Bytes bytes=payloads.poll();
      if (bytes == null)       return false;
      callback.onEntry(bytes,0,System.currentTimeMillis());
      return true;
    }
    @Override public void dirtyEntries(    long fromTimeStamp){
    }
    @Override public void setModificationNotifier(    @NotNull ModificationNotifier modificationNotifier){
      modificationNotifier0=modificationNotifier;
    }
    @Override public void addPayload(    Bytes bytes){
      if (bytes.remaining() == 0)       return;
      payloads.add(bytes);
      modificationNotifier0.onChange();
    }
  }
;
  systemModificationIterator.set(remoteIdentifier,iterator);
  systemModificationIteratorBitSet.set(remoteIdentifier);
  return iterator;
}",0.9894076108277756
162862,"@Override public void writeExternalEntry(@NotNull Bytes entry,@NotNull Bytes destination,int na){
  destination.write(entry,entry.position(),entry.remaining());
}","@Override public void writeExternalEntry(@NotNull Bytes entry,@NotNull Bytes destination,int na,long bootstrapTime){
  destination.write(entry,entry.position(),entry.remaining());
}",0.9446064139941692
162863,"@Override public boolean nextEntry(@NotNull EntryCallback callback,int na){
  final Bytes bytes=payloads.poll();
  if (bytes == null)   return false;
  callback.onEntry(bytes,0);
  return true;
}","@Override public boolean nextEntry(@NotNull EntryCallback callback,int na){
  final Bytes bytes=payloads.poll();
  if (bytes == null)   return false;
  callback.onEntry(bytes,0,System.currentTimeMillis());
  return true;
}",0.935251798561151
162864,"/** 
 * The map implements this method to save its contents.
 * @param entry       the byte location of the entry to be stored
 * @param destination a buffer the entry will be written to, the segment may reject thisoperation and add zeroBytes, if the identifier in the entry did not match the maps local
 * @param chronicleId is the channel id used to identify the canonical map or queue
 */
void writeExternalEntry(@NotNull Bytes entry,@NotNull Bytes destination,int chronicleId);","/** 
 * The map implements this method to save its contents.
 * @param entry       the byte location of the entry to be stored
 * @param destination a buffer the entry will be written to, the segment may reject thisoperation and add zeroBytes, if the identifier in the entry did not match the maps local
 * @param chronicleId is the channel id used to identify the canonical map or queue
 */
void writeExternalEntry(@NotNull Bytes entry,@NotNull Bytes destination,int chronicleId,long bootstrapTime);",0.980632008154944
162865,"/** 
 * Called just after   {@link #onEntry(net.openhft.lang.io.Bytes,int)}. No-op by default.
 */
public void onAfterEntry(){
}","/** 
 * Called just after   {@link #onEntry(net.openhft.lang.io.Bytes,int,long)}. No-op by default.
 */
public void onAfterEntry(){
}",0.9808429118773946
162866,"/** 
 * Called just before   {@link #onEntry(net.openhft.lang.io.Bytes,int)}. No-op by default.
 */
public void onBeforeEntry(){
}","/** 
 * Called just before   {@link #onEntry(net.openhft.lang.io.Bytes,int,long)}. No-op by default.
 */
public void onBeforeEntry(){
}",0.981132075471698
162867,"/** 
 * Called whenever a put() or remove() has occurred to a replicating map.
 * @param entry       the entry you will receive, this does not have to be locked, aslocking is already provided from the caller.
 * @param chronicleId only assigned when clustering
 * @return {@code false} if this entry should be ignored because the identifier of thesource node is not from one of our changes, WARNING even though we check the identifier in the ModificationIterator the entry may have been updated.
 */
public abstract boolean onEntry(final Bytes entry,final int chronicleId);","/** 
 * Called whenever a put() or remove() has occurred to a replicating map.
 * @param entry       the entry you will receive, this does not have to be locked, aslocking is already provided from the caller.
 * @param chronicleId only assigned when clustering
 * @return {@code false} if this entry should be ignored because the identifier of thesource node is not from one of our changes, WARNING even though we check the identifier in the ModificationIterator the entry may have been updated.
 */
public abstract boolean onEntry(final Bytes entry,final int chronicleId,long bootstrapTime);",0.9836909871244636
162868,"void raiseChange(long segmentIndex,long pos){
  LOG.debug(""String_Node_Str"",localIdentifier,segmentIndex,pos);
  changesForUpdates.set(combine(segmentIndex,pos));
  if (modificationNotifier != null)   modificationNotifier.onChange();
}","void raiseChange(long segmentIndex,long pos,long timestamp){
}",0.3164983164983165
162869,"/** 
 * This method does not set a segment lock, A segment lock should be obtained before calling this method, especially when being used in a multi threaded context.
 */
@Override public void writeExternalEntry(@NotNull Bytes entry,@NotNull Bytes destination,int chronicleId){
  final long keySize=keySizeMarshaller.readSize(entry);
  final long keyPosition=entry.position();
  entry.skip(keySize);
  final long timeStamp=entry.readLong();
  final byte identifier=entry.readByte();
  if (identifier != localIdentifier) {
    return;
  }
  final boolean isDeleted=entry.readBoolean();
  long valueSize;
  if (!isDeleted) {
    valueSize=valueSizeMarshaller.readSize(entry);
  }
 else {
    valueSize=valueSizeMarshaller.minEncodableSize();
  }
  final long valuePosition=entry.position();
  keySizeMarshaller.writeSize(destination,keySize);
  valueSizeMarshaller.writeSize(destination,valueSize);
  destination.writeStopBit(timeStamp);
  if (identifier == 0)   throw new IllegalStateException(""String_Node_Str"");
  destination.writeByte(identifier);
  destination.writeBoolean(isDeleted);
  entry.position(keyPosition);
  destination.write(entry,entry.position(),keySize);
  boolean debugEnabled=LOG.isDebugEnabled();
  String message=null;
  if (debugEnabled) {
    if (isDeleted) {
      LOG.debug(""String_Node_Str"",localIdentifier,entry.toString().trim());
    }
 else {
      message=String.format(""String_Node_Str"",localIdentifier,entry.toString().trim());
    }
  }
  if (isDeleted)   return;
  entry.position(valuePosition);
  alignment.alignPositionAddr(entry);
  destination.write(entry,entry.position(),valueSize);
  if (debugEnabled) {
    LOG.debug(message + ""String_Node_Str"" + entry.toString().trim()+ ""String_Node_Str"");
  }
}","/** 
 * This method does not set a segment lock, A segment lock should be obtained before calling this method, especially when being used in a multi threaded context.
 */
@Override public void writeExternalEntry(@NotNull Bytes entry,@NotNull Bytes destination,int chronicleId,long bootstrapTime){
  final long keySize=keySizeMarshaller.readSize(entry);
  final long keyPosition=entry.position();
  entry.skip(keySize);
  final long timeStamp=entry.readLong();
  final byte identifier=entry.readByte();
  if (identifier != localIdentifier) {
    return;
  }
  final boolean isDeleted=entry.readBoolean();
  long valueSize;
  if (!isDeleted) {
    valueSize=valueSizeMarshaller.readSize(entry);
  }
 else {
    valueSize=valueSizeMarshaller.minEncodableSize();
  }
  final long valuePosition=entry.position();
  destination.writeLong(bootstrapTime);
  keySizeMarshaller.writeSize(destination,keySize);
  valueSizeMarshaller.writeSize(destination,valueSize);
  destination.writeStopBit(timeStamp);
  if (identifier == 0)   throw new IllegalStateException(""String_Node_Str"");
  destination.writeByte(identifier);
  destination.writeBoolean(isDeleted);
  entry.position(keyPosition);
  destination.write(entry,entry.position(),keySize);
  boolean debugEnabled=LOG.isDebugEnabled();
  String message=null;
  if (debugEnabled) {
    if (isDeleted) {
      LOG.debug(""String_Node_Str"",localIdentifier,entry.toString().trim());
    }
 else {
      message=String.format(""String_Node_Str"",localIdentifier,entry.toString().trim());
    }
  }
  if (isDeleted)   return;
  entry.position(valuePosition);
  alignment.alignPositionAddr(entry);
  destination.write(entry,entry.position(),valueSize);
  if (debugEnabled) {
    LOG.debug(message + ""String_Node_Str"" + entry.toString().trim()+ ""String_Node_Str"");
  }
}",0.983338040101666
162870,"/** 
 * @param entryCallback call this to get an entry, this class will take care of the locking
 * @return true if an entry was processed
 */
@Override public boolean nextEntry(@NotNull EntryCallback entryCallback,int chronicleId){
  long position=this.position;
  while (true) {
    long oldPosition=position;
    position=changesForIteration.nextSetBit(oldPosition + 1L);
    if (position == NOT_FOUND) {
      if (oldPosition == NOT_FOUND) {
        this.position=NOT_FOUND;
        return false;
      }
      continue;
    }
    this.position=position;
    int segmentIndex=(int)(position >>> segmentIndexShift);
    try (CompiledReplicatedMapIterationContext<K,KI,MKI,V,VI,MVI,R,?> context=iterationContext()){
      context.initTheSegmentIndex(segmentIndex);
      context.updateLock().lock();
      if (changesForUpdates.get(position)) {
        entryCallback.onBeforeEntry();
        final long segmentPos=position & posMask;
        context.readExistingEntry(segmentPos);
        if (entryCallback.shouldBeIgnored(context,chronicleId)) {
          changesForUpdates.clear(position);
          continue;
        }
        context.entryBytes().limit(context.valueOffset() + context.valueSize());
        context.entryBytes().position(context.keySizeOffset());
        boolean success=entryCallback.onEntry(context.entryBytes(),chronicleId);
        entryCallback.onAfterEntry();
        if (success)         changesForUpdates.clear(position);
        return success;
      }
    }
   }
}","/** 
 * @param entryCallback call this to get an entry, this class will take care of the locking
 * @return true if an entry was processed
 */
@Override public boolean nextEntry(@NotNull EntryCallback entryCallback,int chronicleId){
  long position=this.position;
  while (true) {
    long oldPosition=position;
    position=changesForIteration.nextSetBit(oldPosition + 1L);
    if (position == NOT_FOUND) {
      if (oldPosition == NOT_FOUND) {
        this.position=NOT_FOUND;
        return false;
      }
      bootStrapTimeStamp.set(0);
      continue;
    }
    this.position=position;
    int segmentIndex=(int)(position >>> segmentIndexShift);
    try (CompiledReplicatedMapIterationContext<K,KI,MKI,V,VI,MVI,R,?> context=iterationContext()){
      context.initTheSegmentIndex(segmentIndex);
      context.updateLock().lock();
      if (changesForUpdates.get(position)) {
        entryCallback.onBeforeEntry();
        final long segmentPos=position & posMask;
        context.readExistingEntry(segmentPos);
        if (entryCallback.shouldBeIgnored(context,chronicleId)) {
          changesForUpdates.clear(position);
          continue;
        }
        context.entryBytes().limit(context.valueOffset() + context.valueSize());
        context.entryBytes().position(context.keySizeOffset());
        boolean success=entryCallback.onEntry(context.entryBytes(),chronicleId,bootStrapTimeStamp());
        entryCallback.onAfterEntry();
        if (success)         changesForUpdates.clear(position);
        return success;
      }
    }
   }
}",0.9822718319107026
162871,"public void moveChange(long segmentIndex,long oldPos,long newPos){
  for (long next=modIterSet.nextSetBit(0L); next > 0L; next=modIterSet.nextSetBit(next + 1L)) {
    try {
      ModificationIterator modificationIterator=acquireModificationIterator((byte)next);
      if (modificationIterator.dropChange(segmentIndex,oldPos))       modificationIterator.raiseChange(segmentIndex,newPos);
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}","public void moveChange(long segmentIndex,long oldPos,long newPos,long timestamp){
  for (long next=modIterSet.nextSetBit(0L); next > 0L; next=modIterSet.nextSetBit(next + 1L)) {
    try {
      ModificationIterator modificationIterator=acquireModificationIterator((byte)next);
      if (modificationIterator.dropChange(segmentIndex,oldPos))       modificationIterator.raiseChange(segmentIndex,newPos,timestamp);
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}",0.9740394600207684
162872,"@Override public void dirtyEntries(long fromTimeStamp){
  try (CompiledReplicatedMapIterationContext<K,KI,MKI,V,VI,MVI,R,?> c=iterationContext()){
    boolean debugEnabled=LOG.isDebugEnabled();
    for (int i=0; i < actualSegments; i++) {
      final int segmentIndex=i;
      c.initTheSegmentIndex(segmentIndex);
      c.forEachReplicableEntry(entry -> {
        if (debugEnabled) {
          LOG.debug(""String_Node_Str"",localIdentifier,c.key(),c.value());
        }
        MapReplicableEntry re=(MapReplicableEntry)entry;
        if (debugEnabled) {
          LOG.debug(""String_Node_Str"" + ""String_Node_Str"",fromTimeStamp,re.originTimestamp(),re.originIdentifier(),localIdentifier);
        }
        if (re.originTimestamp() >= fromTimeStamp && (!bootstrapOnlyLocalEntries || re.originIdentifier() == localIdentifier)) {
          raiseChange(segmentIndex,c.pos());
        }
      }
);
    }
  }
 }","@Override public void dirtyEntries(long fromTimeStamp){
  try (CompiledReplicatedMapIterationContext<K,KI,MKI,V,VI,MVI,R,?> c=iterationContext()){
    boolean debugEnabled=LOG.isDebugEnabled();
    for (int i=0; i < actualSegments; i++) {
      final int segmentIndex=i;
      c.initTheSegmentIndex(segmentIndex);
      c.forEachReplicableEntry(entry -> {
        if (debugEnabled) {
          LOG.debug(""String_Node_Str"",localIdentifier,c.key(),c.value());
        }
        MapReplicableEntry re=(MapReplicableEntry)entry;
        if (debugEnabled) {
          LOG.debug(""String_Node_Str"" + ""String_Node_Str"",fromTimeStamp,re.originTimestamp(),re.originIdentifier(),localIdentifier);
        }
        if (re.originTimestamp() >= fromTimeStamp && (!bootstrapOnlyLocalEntries || re.originIdentifier() == localIdentifier)) {
          raiseChange(segmentIndex,c.pos(),c.timestamp());
        }
      }
);
    }
  }
 }",0.9923076923076924
162873,"public void initReplicationInput(Bytes replicatedInputBytes){
  initReplicatedInputBytes(replicatedInputBytes);
  riKeySize=mh.m().keySizeMarshaller.readSize(replicatedInputBytes);
  riValueSize=mh.m().valueSizeMarshaller.readSize(replicatedInputBytes);
  riTimestamp=replicatedInputBytes.readStopBit();
  riId=replicatedInputBytes.readByte();
  ru.initReplicationUpdate(riTimestamp,riId);
  isDeleted=replicatedInputBytes.readBoolean();
  riKeyOffset=replicatedInputBytes.position();
  riValueOffset=riKeyOffset + riKeySize;
}","public void initReplicationInput(Bytes replicatedInputBytes){
  initReplicatedInputBytes(replicatedInputBytes);
  bootstrapTimestamp=replicatedInputBytes.readLong();
  riKeySize=mh.m().keySizeMarshaller.readSize(replicatedInputBytes);
  riValueSize=mh.m().valueSizeMarshaller.readSize(replicatedInputBytes);
  riTimestamp=replicatedInputBytes.readStopBit();
  riId=replicatedInputBytes.readByte();
  ru.initReplicationUpdate(riTimestamp,riId);
  isDeleted=replicatedInputBytes.readBoolean();
  riKeyOffset=replicatedInputBytes.position();
  riValueOffset=riKeyOffset + riKeySize;
}",0.9512635379061372
162874,"public void processReplicatedEvent(){
  if (riId == mh.m().identifier()) {
    return;
  }
  q.initInputKey(replicatedInputKeyBytesValue);
  boolean debugEnabled=lh.LOG.isDebugEnabled();
  s.innerUpdateLock.lock();
  if (isDeleted) {
    if (debugEnabled) {
      lh.LOG.debug(""String_Node_Str"",mh.m().identifier(),riId,q.inputKey);
    }
    mh.m().remoteOperations.remove(this);
    mh.m().setLastModificationTime(riId,riTimestamp);
    return;
  }
  String message=null;
  if (debugEnabled) {
    message=String.format(""String_Node_Str"",mh.m().identifier(),riId,q.inputKey);
  }
  mh.m().remoteOperations.put(this,replicatedInputValueBytesValue);
  mh.m().setLastModificationTime(riId,riTimestamp);
  if (debugEnabled) {
    lh.LOG.debug(message + ""String_Node_Str"" + replicatedInputValueBytesValue+ ""String_Node_Str"");
  }
}","public void processReplicatedEvent(){
  if (riId == mh.m().identifier()) {
    return;
  }
  mh.m().setLastModificationTime(riId,bootstrapTimestamp);
  q.initInputKey(replicatedInputKeyBytesValue);
  boolean debugEnabled=lh.LOG.isDebugEnabled();
  s.innerUpdateLock.lock();
  if (isDeleted) {
    if (debugEnabled) {
      lh.LOG.debug(""String_Node_Str"",mh.m().identifier(),riId,q.inputKey);
    }
    mh.m().remoteOperations.remove(this);
    return;
  }
  String message=null;
  if (debugEnabled) {
    message=String.format(""String_Node_Str"",mh.m().identifier(),riId,q.inputKey);
  }
  mh.m().remoteOperations.put(this,replicatedInputValueBytesValue);
  if (debugEnabled) {
    lh.LOG.debug(message + ""String_Node_Str"" + replicatedInputValueBytesValue+ ""String_Node_Str"");
  }
}",0.8974518334369174
162875,"public void initEntryAndKeyCopying(long entrySize,long bytesToCopy){
  initAllocatedChunks(hh.h().inChunks(entrySize));
  entry.copyExistingEntry(s.alloc(allocatedChunks),bytesToCopy);
  incrementSegmentEntriesIfNeeded();
}","public void initEntryAndKeyCopying(long entrySize,long bytesToCopy){
  initAllocatedChunks(hh.h().inChunks(entrySize));
  incrementSegmentEntriesIfNeeded();
  entry.copyExistingEntry(s.alloc(allocatedChunks),bytesToCopy);
}",0.7085201793721974
162876,"public void initEntryAndKey(long entrySize){
  initAllocatedChunks(hh.h().inChunks(entrySize));
  entry.writeNewEntry(s.alloc(allocatedChunks),q.inputKey);
  incrementSegmentEntriesIfNeeded();
}","public void initEntryAndKey(long entrySize){
  initAllocatedChunks(hh.h().inChunks(entrySize));
  incrementSegmentEntriesIfNeeded();
  entry.writeNewEntry(s.alloc(allocatedChunks),q.inputKey);
}",0.8092783505154639
162877,"@NotNull EQC queryContext(Value<K,?> key);","@NotNull EQC queryContext(Data<K,?> key);",0.9156626506024096
162878,"/** 
 * Returns the key is going to be inserted into the   {@code ChronicleHash}.
 */
@NotNull Value<K,?> absentKey();","/** 
 * Returns the key is going to be inserted into the   {@code ChronicleHash}.
 */
@NotNull Data<K,?> absentKey();",0.9702127659574468
162879,"/** 
 * Returns the entry key.
 */
@NotNull Value<K,?> key();","/** 
 * Returns the entry key.
 */
@NotNull Data<K,?> key();",0.9421487603305784
162880,"/** 
 * Returns the queried key as a   {@code Value}.
 */
Value<K,?> queriedKey();","/** 
 * Returns the queried key as a   {@code Data}.
 */
Data<K,?> queriedKey();",0.9135802469135802
162881,"/** 
 * Returns the acceptance decision, should be made about the modification operation in the given   {@code context}, aiming to modify the given   {@code entry}. This method doesn't do any changes to   {@code entry} nor {@code context} state. {@link MapRemoteOperations} and{@link SetRemoteOperations} method implementations should guide the result of calling thismethod to do something to <i>actually</i> apply the remote operation.
 * @param entry the entry to be modified
 * @param context the remote operation context
 * @return if the remote operation should be accepted or discarded
 */
public static AcceptanceDecision decideOnRemoteModification(HashReplicableEntry<?> entry,RemoteOperationContext<?> context){
  long remoteTimestamp=context.remoteTimestamp();
  long originTimestamp=entry.originTimestamp();
  boolean shouldAccept=remoteTimestamp > originTimestamp || (remoteTimestamp == originTimestamp && context.remoteIdentifier() <= entry.originIdentifier());
  return shouldAccept ? ACCEPT : DISCARD;
}","/** 
 * Returns the acceptance decision, should be made about the modification operation in the given   {@code context}, aiming to modify the given   {@code entry}. This method doesn't do any changes to   {@code entry} nor {@code context} state. {@link MapRemoteOperations} and{@link SetRemoteOperations} method implementations should guide the result of calling thismethod to do something to <i>actually</i> apply the remote operation.
 * @param entry the entry to be modified
 * @param context the remote operation context
 * @return if the remote operation should be accepted or discarded
 */
public static AcceptanceDecision decideOnRemoteModification(ReplicableEntry entry,RemoteOperationContext<?> context){
  long remoteTimestamp=context.remoteTimestamp();
  long originTimestamp=entry.originTimestamp();
  boolean shouldAccept=remoteTimestamp > originTimestamp || (remoteTimestamp == originTimestamp && context.remoteIdentifier() <= entry.originIdentifier());
  return shouldAccept ? ACCEPT : DISCARD;
}",0.9965500246426812
162882,"@Override public boolean shouldBeIgnored(final HashReplicableEntry<?> entry,final int chronicleId){
  return !externalizable.identifierCheck(entry,chronicleId);
}","@Override public boolean shouldBeIgnored(final ReplicableEntry entry,final int chronicleId){
  return !externalizable.identifierCheck(entry,chronicleId);
}",0.9779179810725552
162883,"@Override public boolean identifierCheck(@NotNull HashReplicableEntry<?> entry,int chronicleId){
  return true;
}","@Override public boolean identifierCheck(@NotNull ReplicableEntry entry,int chronicleId){
  return true;
}",0.9680365296803652
162884,"@NotNull @Override public ExternalMapQueryContext<String,String,?> queryContext(Value<String,?> key){
  throw new UnsupportedOperationException();
}","@NotNull @Override public ExternalMapQueryContext<String,String,?> queryContext(Data<String,?> key){
  throw new UnsupportedOperationException();
}",0.976271186440678
162885,"/** 
 * Returns the <i>default</i> (or <i>nil</i>) value, that should be inserted into the map in this context. This is primarily used in   {@link ChronicleMap#acquireUsing} operationimplementation, i. e.  {@link MapMethods#acquireUsing}. <p>This method if the default implementation for   {@link MapEntryOperations#defaultValue}, which might be customized over the default.
 * @return the default value to be inserted into the map
 * @see MapEntryOperations#defaultValue(MapAbsentEntry)
 */
@NotNull Value<V,?> defaultValue();","/** 
 * Returns the <i>default</i> (or <i>nil</i>) value, that should be inserted into the map in this context. This is primarily used in   {@link ChronicleMap#acquireUsing} operationimplementation, i. e.  {@link MapMethods#acquireUsing}. <p>This method if the default implementation for   {@link MapEntryOperations#defaultValue}, which might be customized over the default.
 * @return the default value to be inserted into the map
 * @see MapEntryOperations#defaultValue(MapAbsentEntry)
 */
@NotNull Data<V,?> defaultValue();",0.9914529914529916
162886,"/** 
 * Inserts the new entry into the map, of   {@linkplain #absentKey() the key} and the given {@code value}. <p>This method is the default implementation for   {@link MapEntryOperations#insert(MapAbsentEntry,Value)}, which might be customized over the default. 
 * @param value the value to insert into the map along with {@link #absentKey() the key}
 * @throws IllegalStateException if some locking/state conditions required to perform insertionoperation are not met
 * @see MapEntryOperations#insert(MapAbsentEntry,Value)
 */
void doInsert(Value<V,?> value);","/** 
 * Inserts the new entry into the map, of   {@linkplain #absentKey() the key} and the given {@code value}. <p>This method is the default implementation for   {@link MapEntryOperations#insert(MapAbsentEntry,Data)}, which might be customized over the default.
 * @param value the value to insert into the map along with {@link #absentKey() the key}
 * @throws IllegalStateException if some locking/state conditions required to perform insertionoperation are not met
 * @see MapEntryOperations#insert(MapAbsentEntry,Data)
 */
void doInsert(Data<V,?> value);",0.9750445632798574
162887,"/** 
 * Wraps the given value as a   {@code Value}. Useful when you need to pass a value to some method accepting   {@code Value}, for example,   {@link MapEntryOperations#replaceValue(MapEntry,Value)}, without allocating new objects (i. e. garbage) and   {@code ThreadLocals}. <p>The returned   {@code Value} object shouldn't outlive this {@code MapContext}.
 * @param value the value object to wrap
 * @return the value as {@code Value}
 */
Value<V,?> wrapValueAsValue(V value);","/** 
 * Wraps the given value as a   {@code Data}. Useful when you need to pass a value to some method accepting   {@code Data}, for example,   {@link MapEntryOperations#replaceValue(MapEntry,Data)}, without allocating new objects (i. e. garbage) and   {@code ThreadLocals}. <p>The returned   {@code Data} object shouldn't outlive this {@code MapContext}.
 * @param value the value object to wrap
 * @return the value as {@code Data}
 */
Data<V,?> wrapValueAsValue(V value);",0.9433962264150944
162888,"public final void createMappedStoreAndSegments(File file) throws IOException {
  OS.warnOnWindows(sizeInBytes());
  createMappedStoreAndSegments(new MappedStore(file,FileChannel.MapMode.READ_WRITE,sizeInBytes(),BytesMarshallableSerializer.create()));
}","public final void createMappedStoreAndSegments(File file) throws IOException {
  createMappedStoreAndSegments(new MappedStore(file,FileChannel.MapMode.READ_WRITE,sizeInBytes(),BytesMarshallableSerializer.create()));
}",0.9253731343283582
162889,"ChronicleMap<K,V> createWithoutFile(SingleChronicleHashReplication singleHashReplication,ReplicationChannel channel){
  try {
    VanillaChronicleMap<K,?,?,V,?,?,?> map=newMap(singleHashReplication,channel);
    if (OS.warnOnWindows(map.sizeInBytes())) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    BytesStore bytesStore=new DirectStore(JDKObjectSerializer.INSTANCE,map.sizeInBytes(),true);
    map.createMappedStoreAndSegments(bytesStore);
    return establishReplication(map,singleHashReplication,channel);
  }
 catch (  IOException e) {
    throw new AssertionError(e);
  }
}","ChronicleMap<K,V> createWithoutFile(SingleChronicleHashReplication singleHashReplication,ReplicationChannel channel){
  try {
    VanillaChronicleMap<K,?,?,V,?,?,?> map=newMap(singleHashReplication,channel);
    BytesStore bytesStore=new DirectStore(JDKObjectSerializer.INSTANCE,map.sizeInBytes(),true);
    map.createMappedStoreAndSegments(bytesStore);
    return establishReplication(map,singleHashReplication,channel);
  }
 catch (  IOException e) {
    throw new AssertionError(e);
  }
}",0.898444647758463
162890,"/** 
 * This method does not set a segment lock, A segment lock should be obtained before calling this method, especially when being used in a multi threaded context.
 */
@Override public void readExternalEntry(@NotNull Bytes source){
  try (CompiledReplicatedMapQueryContext<K,KI,MKI,V,VI,MVI,R,?> remoteOpContext=mapContext()){
    remoteOpContext.initReplicationInput(source);
  }
 }","/** 
 * This method does not set a segment lock, A segment lock should be obtained before calling this method, especially when being used in a multi threaded context.
 */
@Override public void readExternalEntry(@NotNull Bytes source){
  try (CompiledReplicatedMapQueryContext<K,KI,MKI,V,VI,MVI,R,?> remoteOpContext=mapContext()){
    remoteOpContext.initReplicationInput(source);
    remoteOpContext.processReplicatedEvent();
  }
 }",0.9437652811735942
162891,"private void checkTimeout(long timeoutTime){
  if (timeoutTime < System.currentTimeMillis() && !IS_DEBUG)   throw new RemoteCallTimeoutException();
}","private void checkTimeout(long timeoutTime){
}",0.4717948717948718
162892,"@Override public void process(@NotNull final Wire in,@NotNull final Wire out,@NotNull final ConcurrentMap<K,V> map,@NotNull final CharSequence csp,@NotNull final BiConsumer<ValueOut,V> vToWire,@NotNull final Function<ValueIn,K> kFromWire,@NotNull final Function<ValueIn,V> vFromWire) throws StreamCorruptedException {
  this.vToWire=vToWire;
  this.wireToK=kFromWire;
  this.wireToV=vFromWire;
  try {
    this.inWire=in;
    this.outWire=out;
    this.map=map;
    this.csp=csp;
    inWire.readDocument(metaDataConsumer,dataConsumer);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
}","@Override public <K,V>void process(Wire in,Wire out,Map<K,V> map,CharSequence csp,BiConsumer<ValueOut,V> vToWire,Function<ValueIn,K> kFromWire,Function<ValueIn,V> vFromWire) throws StreamCorruptedException {
  this.vToWire=(BiConsumer<ValueOut,Object>)vToWire;
  this.wireToK=(Function<ValueIn,Object>)kFromWire;
  this.wireToV=(Function<ValueIn,Object>)vFromWire;
  try {
    this.inWire=in;
    this.outWire=out;
    this.map=map;
    this.csp=csp;
    inWire.readDocument(metaDataConsumer,dataConsumer);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
}",0.6711749788672866
162893,"@Override public <K,V>void process(Wire in,Wire out,Map<K,V> map,CharSequence csp,BiConsumer<ValueOut,V> vToWire,Function<ValueIn,K> kFromWire,Function<ValueIn,V> vFromWire) throws StreamCorruptedException {
  this.vToWire=(BiConsumer<ValueOut,Object>)vToWire;
  this.wireToK=(Function<ValueIn,Object>)kFromWire;
  this.wireToV=(Function<ValueIn,Object>)vFromWire;
  try {
    this.inWire=in;
    this.outWire=out;
    this.map=map;
    this.csp=csp;
    inWire.readDocument(metaDataConsumer,dataConsumer);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
}","@Override public void process(Wire in,Wire out,Map<K,V> map,CharSequence csp,BiConsumer<ValueOut,V> vToWire,Function<ValueIn,K> kFromWire,Function<ValueIn,V> vFromWire) throws StreamCorruptedException {
  this.vToWire=vToWire;
  this.wireToK=kFromWire;
  this.wireToV=vFromWire;
  try {
    this.inWire=in;
    this.outWire=out;
    this.map=map;
    this.csp=csp;
    inWire.readDocument(metaDataConsumer,dataConsumer);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
}",0.8576779026217228
162894,"private byte[] bytes(Object b){
  if (b == null)   return null;
  final Wire wire=toWire();
  ((ValueOut)b).object(b);
  wire.bytes().flip();
  return toWire().getValueIn().bytes();
}","private byte[] bytes(Object b){
  if (b == null)   return null;
  final Wire wire=toWire();
  wire.getValueOut().object(b);
  wire.bytes().flip();
  return toWire().getValueIn().bytes();
}",0.9649595687331536
162895,"@Nullable protected <R>R proxyReturnObject(@NotNull final Class<R> rClass,@NotNull final E eventId,Object field){
  final long startTime=System.currentTimeMillis();
  final long tid=sendEvent(startTime,eventId,out -> out.object(out));
  if (eventReturnsNull(eventId))   return null;
  if (rClass == vClass)   return (R)readValue(reply,tid,startTime,null);
 else   throw new UnsupportedOperationException(""String_Node_Str"" + rClass + ""String_Node_Str""+ ""String_Node_Str"");
}","@Nullable protected <R>R proxyReturnObject(@NotNull final Class<R> rClass,@NotNull final E eventId,@NotNull final Object o){
  final long startTime=System.currentTimeMillis();
  final long tid=sendEvent(startTime,eventId,out -> out.object(o));
  if (eventReturnsNull(eventId))   return null;
  if (rClass == vClass)   return (R)readValue(reply,tid,startTime,null);
 else   throw new UnsupportedOperationException(""String_Node_Str"" + rClass + ""String_Node_Str""+ ""String_Node_Str"");
}",0.975916230366492
162896,"public boolean containsValue(Object value){
  return proxyReturnBoolean(containsValue,out -> out.object(out));
}","public boolean containsValue(Object value){
  return proxyReturnBoolean(containsValue,out -> out.object(value));
}",0.9734513274336284
162897,"public boolean containsKey(Object key){
  return proxyReturnBoolean(containsKey,out -> out.object(out));
}","public boolean containsKey(Object key){
  return proxyReturnBoolean(containsKey,out -> out.object(key));
}",0.9716981132075472
162898,"private synchronized void attemptConnect(final InetSocketAddress remoteAddress){
  closeExisting();
  try {
    SocketChannel socketChannel=AbstractChannelReplicator.openSocketChannel(closeables);
    if (socketChannel.connect(remoteAddress)) {
      clientChannel=socketChannel;
    }
  }
 catch (  IOException e) {
    if (closeables != null)     closeables.closeQuietly();
    clientChannel=null;
  }
}","private synchronized void attemptConnect(final InetSocketAddress remoteAddress){
  closeExisting();
  try {
    SocketChannel socketChannel=AbstractChannelReplicator.openSocketChannel(closeables);
    if (socketChannel.connect(remoteAddress))     clientChannel=socketChannel;
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
    if (closeables != null)     closeables.closeQuietly();
    clientChannel=null;
  }
}",0.944976076555024
162899,"private ByteBuffer inWireByteBuffer(){
  return (ByteBuffer)intWire.bytes().underlyingObject();
}","private ByteBuffer inWireByteBuffer(long requiredCapacity){
  intWire.bytes().ensureCapacity(requiredCapacity);
  return (ByteBuffer)intWire.bytes().underlyingObject();
}",0.7265917602996255
162900,"private byte[] toBytes(WireKey fieldName){
  final Wire wire=inWire;
  final ValueIn read=wire.read(fieldName);
  final long l=read.readLength();
  if (l > Integer.MAX_VALUE)   throw new BufferOverflowException();
  final int fieldLength=(int)l;
  final long endPos=wire.bytes().position() + fieldLength;
  final long limit=wire.bytes().limit();
  try {
    byte[] bytes=new byte[fieldLength];
    wire.bytes().read(bytes);
    return bytes;
  }
  finally {
    wire.bytes().position(endPos);
    wire.bytes().limit(limit);
  }
}","private byte[] toBytes(WireKey fieldName){
  final Wire wire=inWire;
  final ValueIn read=wire.read(fieldName);
  final long l=read.readLength();
  if (l > Integer.MAX_VALUE)   throw new BufferOverflowException();
  final int fieldLength=(int)l;
  Bytes<?> bytes1=wire.bytes();
  final long endPos=bytes1.position() + fieldLength;
  final long limit=bytes1.limit();
  try {
    byte[] bytes=new byte[fieldLength];
    bytes1.read(bytes);
    return bytes;
  }
  finally {
    bytes1.position(endPos);
    bytes1.limit(limit);
  }
}",0.8849056603773585
162901,"@Override public void run(){
  boolean hasNext;
  for (; ; ) {
    hasNext=inWire.read(Fields.hasNext).bool();
    collectData.put(toBytes(arg1),toBytes(arg2));
    if (!hasNext) {
      incompleteWork.remove(transactionId);
      outWire.write(Fields.transactionId).int64(transactionId);
      writeVoid(() -> {
        bytesMap.delegate.putAll((Map)collectData);
        return null;
      }
);
      return;
    }
    if (inWire.bytes().remaining() == 0)     return;
  }
}","@Override public void run(){
  boolean hasNext;
  for (; ; ) {
    hasNext=inWire.read(Fields.hasNext).bool();
    collectData.put(toBytes(arg1),toBytes(arg2));
    if (!hasNext) {
      incompleteWork.remove(transactionId);
      outWire.write(Fields.transactionId).int64(transactionId);
      writeVoid(() -> {
        bytesMap.delegate.putAll((Map)collectData);
        return null;
      }
);
      return;
    }
    final Bytes<?> bytes=inWire.bytes();
    if (bytes.remaining() == 0)     return;
  }
}",0.9613034623217924
162902,"@SuppressWarnings(""String_Node_Str"") private void writeValueFromBytes(final Function<BytesChronicleMap,byte[]> f){
  write(b -> {
    byte[] fromBytes=f.apply(b);
    boolean isNull=fromBytes == null || fromBytes.length == 0;
    outWire.write(resultIsNull).bool(isNull);
    if (isNull)     return;
    outWire.write(result);
    outWire.bytes().write(fromBytes);
  }
);
}","@SuppressWarnings(""String_Node_Str"") private void writeValueFromBytes(final Function<BytesChronicleMap,byte[]> f){
  write(b -> {
    byte[] fromBytes=f.apply(b);
    boolean isNull=fromBytes == null || fromBytes.length == 0;
    outWire.write(resultIsNull).bool(isNull);
    if (isNull)     return;
    outWire.write(result);
    Bytes<?> bytes=outWire.bytes();
    bytes.write(fromBytes);
  }
);
}",0.966321243523316
162903,"@SuppressWarnings(""String_Node_Str"") private void writeValueUsingDelegate(final Function<ChronicleMap<byte[],byte[]>,byte[]> f){
  write(b -> {
    byte[] result=f.apply((ChronicleMap)b.delegate);
    boolean isNull=result == null;
    outWire.write(resultIsNull).bool(isNull);
    if (isNull)     return;
    isNull=result.length == 0;
    outWire.write(Fields.result);
    outWire.bytes().write(result);
  }
);
}","@SuppressWarnings(""String_Node_Str"") private void writeValueUsingDelegate(final Function<ChronicleMap<byte[],byte[]>,byte[]> f){
  write(b -> {
    byte[] result=f.apply((ChronicleMap)b.delegate);
    boolean isNull=result == null;
    outWire.write(resultIsNull).bool(isNull);
    if (isNull)     return;
    isNull=result.length == 0;
    outWire.write(Fields.result);
    final Bytes<?> bytes=outWire.bytes();
    bytes.write(result);
  }
);
}",0.9627906976744186
162904,"@SuppressWarnings(""String_Node_Str"") void onEvent() throws StreamCorruptedException {
  long transactionId=inWire.read(Fields.transactionId).int64();
  timestamp=inWire.read(timeStamp).int64();
  channelId=inWire.read(Fields.channelId).int16();
  final StringBuilder methodName=Wires.acquireStringBuilder();
  inWire.read(Fields.methodName).text(methodName);
  if (!incompleteWork.isEmpty()) {
    Runnable runnable=incompleteWork.get(transactionId);
    if (runnable != null) {
      runnable.run();
      return;
    }
  }
  try {
    if (putWithoutAcc.contentEquals(methodName)) {
      writeVoid(bytesMap -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,arg1,arg2);
        bytesMap.put(reader,reader);
      }
);
      return;
    }
    if (keySet.contentEquals(methodName)) {
      writeChunked(transactionId,map -> map.keySet().iterator(),writeElement);
      return;
    }
    if (values.contentEquals(methodName)) {
      writeChunked(transactionId,map -> map.delegate.values().iterator(),writeElement);
      return;
    }
    if (entrySet.contentEquals(methodName)) {
      writeChunked(transactionId,m -> m.delegate.entrySet().iterator(),writeEntry);
      return;
    }
    if (entrySetRestricted.contentEquals(methodName)) {
      long maxEntries=inWire.read(arg1).int64();
      writeChunked(transactionId,m -> m.delegate.entrySet().iterator(),writeEntry,maxEntries);
      return;
    }
    if (putAll.contentEquals(methodName)) {
      putAll(transactionId);
      return;
    }
    outWire.write(Fields.transactionId).int64(transactionId);
    if (createChannel.contentEquals(methodName)) {
      writeVoid(() -> {
        short channelId1=inWire.read(arg1).int16();
        mapFactory.get().replicatedViaChannel(hub.createChannel(channelId1)).create();
        return null;
      }
);
      return;
    }
    if (EventId.remoteIdentifier.contentEquals(methodName)) {
      this.remoteIdentifier=inWire.read(result).int8();
      return;
    }
    if (longSize.contentEquals(methodName)) {
      write(b -> outWire.write(result).int64(b.longSize()));
      return;
    }
    if (isEmpty.contentEquals(methodName)) {
      write(b -> outWire.write(result).bool(b.isEmpty()));
      return;
    }
    if (containsKey.contentEquals(methodName)) {
      write(b -> outWire.write(result).bool(b.delegate.containsKey(toByteArray(inWire,arg1))));
      return;
    }
    if (containsValue.contentEquals(methodName)) {
      write(b -> outWire.write(result).bool(b.delegate.containsValue(toByteArray(inWire,arg1))));
      return;
    }
    if (get.contentEquals(methodName)) {
      writeValueUsingDelegate(map -> map.get(toByteArray(inWire,arg1)));
      return;
    }
    if (put.contentEquals(methodName)) {
      writeValue(b -> {
        final net.openhft.lang.io.Bytes reader=MapWireHandler.this.toReader(inWire,arg1,arg2);
        return b.put(reader,reader);
      }
);
      return;
    }
    if (remove.contentEquals(methodName)) {
      writeValue(b -> b.remove(toReader(inWire,arg1)));
      return;
    }
    if (clear.contentEquals(methodName)) {
      writeVoid(BytesChronicleMap::clear);
      return;
    }
    if (replace.contentEquals(methodName)) {
      write(bytesMap -> {
        final VanillaChronicleMap map=bytesMap.delegate;
        byte[] result=(byte[])map.replace(toByteArray(inWire,arg1),toByteArray(inWire,arg2));
        boolean isNull=result == null || result.length == 0;
        outWire.write(resultIsNull).bool(isNull);
        if (!isNull) {
          outWire.write(Fields.result);
          outWire.bytes().write(result);
        }
      }
);
      return;
    }
    if (replaceWithOldAndNewValue.contentEquals(methodName)) {
      write(bytesMap -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,arg1,arg2,arg3);
        boolean result=bytesMap.replace(reader,reader,reader);
        outWire.write(Fields.result).bool(result);
      }
);
      return;
    }
    if (putIfAbsent.contentEquals(methodName)) {
      writeValueFromBytes(b -> {
        byte[] key=MapWireHandler.this.toByteArray(inWire,arg1);
        byte[] value=MapWireHandler.this.toByteArray(inWire,arg2);
        return ((Map<byte[],byte[]>)b.delegate).putIfAbsent(key,value);
      }
);
      return;
    }
    if (removeWithValue.contentEquals(methodName)) {
      write(bytesMap -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,arg1,arg2);
        outWire.write(result).bool(bytesMap.remove(reader,reader));
      }
);
      return;
    }
    if (applicationVersion.contentEquals(methodName)) {
      write(b -> outWire.write(result).text(applicationVersion()));
      return;
    }
    if (persistedDataVersion.contentEquals(methodName)) {
      write(b -> outWire.write(result).text(persistedDataVersion()));
      return;
    }
    if (hashCode.contentEquals(methodName)) {
      write(b -> outWire.write(result).int32(b.hashCode()));
      return;
    }
    throw new IllegalStateException(""String_Node_Str"" + methodName);
  }
  finally {
    if (EventGroup.IS_DEBUG) {
      long len=outWire.bytes().position() - SIZE_OF_SIZE;
      if (len == 0) {
        System.out.println(""String_Node_Str"" + ""String_Node_Str"");
      }
 else {
        System.out.println(""String_Node_Str"" + ""String_Node_Str"" + Bytes.toDebugString(outWire.bytes(),SIZE_OF_SIZE,len));
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") void onEvent() throws StreamCorruptedException {
  long transactionId=inWire.read(Fields.transactionId).int64();
  timestamp=inWire.read(timeStamp).int64();
  channelId=inWire.read(Fields.channelId).int16();
  final StringBuilder methodName=Wires.acquireStringBuilder();
  inWire.read(Fields.methodName).text(methodName);
  if (!incompleteWork.isEmpty()) {
    Runnable runnable=incompleteWork.get(transactionId);
    if (runnable != null) {
      runnable.run();
      return;
    }
  }
  Bytes<?> bytes=outWire.bytes();
  try {
    if (putWithoutAcc.contentEquals(methodName)) {
      writeVoid(bytesMap -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,arg1,arg2);
        bytesMap.put(reader,reader);
      }
);
      return;
    }
    if (keySet.contentEquals(methodName)) {
      writeChunked(transactionId,map -> map.keySet().iterator(),writeElement);
      return;
    }
    if (values.contentEquals(methodName)) {
      writeChunked(transactionId,map -> map.delegate.values().iterator(),writeElement);
      return;
    }
    if (entrySet.contentEquals(methodName)) {
      writeChunked(transactionId,m -> m.delegate.entrySet().iterator(),writeEntry);
      return;
    }
    if (entrySetRestricted.contentEquals(methodName)) {
      long maxEntries=inWire.read(arg1).int64();
      writeChunked(transactionId,m -> m.delegate.entrySet().iterator(),writeEntry,maxEntries);
      return;
    }
    if (putAll.contentEquals(methodName)) {
      putAll(transactionId);
      return;
    }
    outWire.write(Fields.transactionId).int64(transactionId);
    if (createChannel.contentEquals(methodName)) {
      writeVoid(() -> {
        short channelId1=inWire.read(arg1).int16();
        mapFactory.get().replicatedViaChannel(hub.createChannel(channelId1)).create();
        return null;
      }
);
      return;
    }
    if (EventId.remoteIdentifier.contentEquals(methodName)) {
      this.remoteIdentifier=inWire.read(result).int8();
      return;
    }
    if (longSize.contentEquals(methodName)) {
      write(b -> outWire.write(result).int64(b.longSize()));
      return;
    }
    if (isEmpty.contentEquals(methodName)) {
      write(b -> outWire.write(result).bool(b.isEmpty()));
      return;
    }
    if (containsKey.contentEquals(methodName)) {
      write(b -> outWire.write(result).bool(b.delegate.containsKey(toByteArray(inWire,arg1))));
      return;
    }
    if (containsValue.contentEquals(methodName)) {
      write(b -> outWire.write(result).bool(b.delegate.containsValue(toByteArray(inWire,arg1))));
      return;
    }
    if (get.contentEquals(methodName)) {
      writeValueUsingDelegate(map -> map.get(toByteArray(inWire,arg1)));
      return;
    }
    if (put.contentEquals(methodName)) {
      writeValue(b -> {
        final net.openhft.lang.io.Bytes reader=MapWireHandler.this.toReader(inWire,arg1,arg2);
        return b.put(reader,reader);
      }
);
      return;
    }
    if (remove.contentEquals(methodName)) {
      writeValue(b -> b.remove(toReader(inWire,arg1)));
      return;
    }
    if (clear.contentEquals(methodName)) {
      writeVoid(BytesChronicleMap::clear);
      return;
    }
    if (replace.contentEquals(methodName)) {
      write(bytesMap -> {
        final VanillaChronicleMap map=bytesMap.delegate;
        byte[] result=(byte[])map.replace(toByteArray(inWire,arg1),toByteArray(inWire,arg2));
        boolean isNull=result == null || result.length == 0;
        outWire.write(resultIsNull).bool(isNull);
        if (!isNull) {
          outWire.write(Fields.result);
          bytes.write(result);
        }
      }
);
      return;
    }
    if (replaceWithOldAndNewValue.contentEquals(methodName)) {
      write(bytesMap -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,arg1,arg2,arg3);
        boolean result=bytesMap.replace(reader,reader,reader);
        outWire.write(Fields.result).bool(result);
      }
);
      return;
    }
    if (putIfAbsent.contentEquals(methodName)) {
      writeValueFromBytes(b -> {
        byte[] key=MapWireHandler.this.toByteArray(inWire,arg1);
        byte[] value=MapWireHandler.this.toByteArray(inWire,arg2);
        return ((Map<byte[],byte[]>)b.delegate).putIfAbsent(key,value);
      }
);
      return;
    }
    if (removeWithValue.contentEquals(methodName)) {
      write(bytesMap -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,arg1,arg2);
        outWire.write(result).bool(bytesMap.remove(reader,reader));
      }
);
      return;
    }
    if (applicationVersion.contentEquals(methodName)) {
      write(b -> outWire.write(result).text(applicationVersion()));
      return;
    }
    if (persistedDataVersion.contentEquals(methodName)) {
      write(b -> outWire.write(result).text(persistedDataVersion()));
      return;
    }
    if (hashCode.contentEquals(methodName)) {
      write(b -> outWire.write(result).int32(b.hashCode()));
      return;
    }
    throw new IllegalStateException(""String_Node_Str"" + methodName);
  }
  finally {
    if (EventGroup.IS_DEBUG) {
      long len=bytes.position() - SIZE_OF_SIZE;
      if (len == 0) {
        System.out.println(""String_Node_Str"" + ""String_Node_Str"");
      }
 else {
        System.out.println(""String_Node_Str"" + ""String_Node_Str"" + Bytes.toDebugString(bytes,SIZE_OF_SIZE,len));
      }
    }
  }
}",0.9940276222471072
162905,"/** 
 * creates a lang buffer that holds just the payload of the args
 * @param wire the inbound wire
 * @return a new lang buffer containing the bytes of the args
 */
private byte[] toByteArray(@NotNull Wire wire,@NotNull WireKey field){
  final ValueIn read=wire.read(field);
  final long fieldLength=read.readLength();
  final long endPos=wire.bytes().position() + fieldLength;
  final long limit=wire.bytes().limit();
  byte[] result=new byte[]{};
  try {
    final Bytes source=wire.bytes();
    source.limit(endPos);
    if (source.remaining() > Integer.MAX_VALUE)     throw new BufferOverflowException();
    result=new byte[(int)source.remaining()];
    source.read(result);
  }
  finally {
    wire.bytes().position(endPos);
    wire.bytes().limit(limit);
  }
  return result;
}","/** 
 * creates a lang buffer that holds just the payload of the args
 * @param wire the inbound wire
 * @return a new lang buffer containing the bytes of the args
 */
private byte[] toByteArray(@NotNull Wire wire,@NotNull WireKey field){
  final ValueIn read=wire.read(field);
  final long fieldLength=read.readLength();
  Bytes<?> bytes=wire.bytes();
  final long endPos=bytes.position() + fieldLength;
  final long limit=bytes.limit();
  byte[] result=new byte[]{};
  try {
    final Bytes source=bytes;
    source.limit(endPos);
    if (source.remaining() > Integer.MAX_VALUE)     throw new BufferOverflowException();
    result=new byte[(int)source.remaining()];
    source.read(result);
  }
  finally {
    bytes.position(endPos);
    bytes.limit(limit);
  }
  return result;
}",0.9261146496815288
162906,"private void putAll(long transactionId){
  final BytesChronicleMap bytesMap=bytesMap(MapWireHandler.this.channelId);
  if (bytesMap == null)   return;
  Runnable runnable=incompleteWork.get(transactionId);
  if (runnable != null) {
    runnable.run();
    return;
  }
  runnable=new Runnable(){
    final Map<byte[],byte[]> collectData=new HashMap<>();
    @Override public void run(){
      boolean hasNext;
      for (; ; ) {
        hasNext=inWire.read(Fields.hasNext).bool();
        collectData.put(toBytes(arg1),toBytes(arg2));
        if (!hasNext) {
          incompleteWork.remove(transactionId);
          outWire.write(Fields.transactionId).int64(transactionId);
          writeVoid(() -> {
            bytesMap.delegate.putAll((Map)collectData);
            return null;
          }
);
          return;
        }
        if (inWire.bytes().remaining() == 0)         return;
      }
    }
  }
;
  incompleteWork.put(transactionId,runnable);
  runnable.run();
}","private void putAll(long transactionId){
  final BytesChronicleMap bytesMap=bytesMap(MapWireHandler.this.channelId);
  if (bytesMap == null)   return;
  Runnable runnable=incompleteWork.get(transactionId);
  if (runnable != null) {
    runnable.run();
    return;
  }
  runnable=new Runnable(){
    final Map<byte[],byte[]> collectData=new HashMap<>();
    @Override public void run(){
      boolean hasNext;
      for (; ; ) {
        hasNext=inWire.read(Fields.hasNext).bool();
        collectData.put(toBytes(arg1),toBytes(arg2));
        if (!hasNext) {
          incompleteWork.remove(transactionId);
          outWire.write(Fields.transactionId).int64(transactionId);
          writeVoid(() -> {
            bytesMap.delegate.putAll((Map)collectData);
            return null;
          }
);
          return;
        }
        final Bytes<?> bytes=inWire.bytes();
        if (bytes.remaining() == 0)         return;
      }
    }
  }
;
  incompleteWork.put(transactionId,runnable);
  runnable.run();
}",0.9787878787878788
162907,"/** 
 * creates a lang buffer that holds just the payload of the args
 * @param wire the inbound wire
 * @param args the key names of the {@code wire} args
 * @return a new lang buffer containing the bytes of the args
 */
private net.openhft.lang.io.Bytes toReader(@NotNull Wire wire,@NotNull WireKey... args){
  final long inSize=wire.bytes().limit();
  final net.openhft.lang.io.Bytes bytes=DirectStore.allocate(inSize).bytes();
  for (  final WireKey field : args) {
    final ValueIn read=wire.read(field);
    final long fieldLength=read.readLength();
    final long endPos=wire.bytes().position() + fieldLength;
    final long limit=wire.bytes().limit();
    try {
      final Bytes source=wire.bytes();
      source.limit(endPos);
      bytes.writeStopBit(source.remaining());
      while (source.remaining() > 0) {
        if (source.remaining() >= 8)         bytes.writeLong(source.readLong());
 else         bytes.writeByte(source.readByte());
      }
    }
  finally {
      wire.bytes().position(endPos);
      wire.bytes().limit(limit);
    }
  }
  return bytes.flip();
}","/** 
 * creates a lang buffer that holds just the payload of the args
 * @param wire the inbound wire
 * @param args the key names of the {@code wire} args
 * @return a new lang buffer containing the bytes of the args
 */
private net.openhft.lang.io.Bytes toReader(@NotNull Wire wire,@NotNull WireKey... args){
  Bytes<?> bytes1=wire.bytes();
  final long inSize=bytes1.limit();
  final net.openhft.lang.io.Bytes bytes=DirectStore.allocate(inSize).bytes();
  for (  final WireKey field : args) {
    final ValueIn read=wire.read(field);
    final long fieldLength=read.readLength();
    final long endPos=bytes1.position() + fieldLength;
    final long limit=bytes1.limit();
    try {
      final Bytes source=bytes1;
      source.limit(endPos);
      bytes.writeStopBit(source.remaining());
      while (source.remaining() > 0) {
        if (source.remaining() >= 8)         bytes.writeLong(source.readLong());
 else         bytes.writeByte(source.readByte());
      }
    }
  finally {
      bytes1.position(endPos);
      bytes1.limit(limit);
    }
  }
  return bytes.flip();
}",0.9306839186691312
162908,"@SuppressWarnings(""String_Node_Str"") private void write(@NotNull Consumer<BytesChronicleMap> c){
  final BytesChronicleMap bytesMap=bytesMap(channelId);
  if (bytesMap == null) {
    LOG.error(""String_Node_Str"" + channelId + ""String_Node_Str"");
    return;
  }
  bytesMap.output=null;
  outWire.bytes().mark();
  outWire.write(isException).bool(false);
  try {
    c.accept(bytesMap);
  }
 catch (  Exception e) {
    outWire.bytes().reset();
    outWire.write(isException).bool(true);
    outWire.write(exception).text(toString(e));
    LOG.error(""String_Node_Str"",e);
    return;
  }
}","@SuppressWarnings(""String_Node_Str"") private void write(@NotNull Consumer<BytesChronicleMap> c){
  final BytesChronicleMap bytesMap=bytesMap(channelId);
  if (bytesMap == null) {
    LOG.error(""String_Node_Str"" + channelId + ""String_Node_Str"");
    return;
  }
  bytesMap.output=null;
  final Bytes<?> bytes=outWire.bytes();
  bytes.mark();
  outWire.write(isException).bool(false);
  try {
    c.accept(bytesMap);
  }
 catch (  Exception e) {
    bytes.reset();
    outWire.write(isException).bool(true);
    outWire.write(exception).text(toString(e));
    LOG.error(""String_Node_Str"",e);
    return;
  }
}",0.9581239530988276
162909,"/** 
 * only used for debugging
 */
@SuppressWarnings(""String_Node_Str"") private void showOutWire(){
  System.out.println(""String_Node_Str"" + outWire.bytes().position() + ""String_Node_Str""+ Bytes.toDebugString(outWire.bytes(),0,outWire.bytes().position()));
}","/** 
 * only used for debugging
 */
@SuppressWarnings(""String_Node_Str"") private void showOutWire(){
  Bytes<?> bytes=outWire.bytes();
  System.out.println(""String_Node_Str"" + bytes.position() + ""String_Node_Str""+ Bytes.toDebugString(bytes,0,bytes.position()));
}",0.8199233716475096
162910,"@SuppressWarnings(""String_Node_Str"") void onEvent(){
  long transactionId=inWire.read(TRANSACTION_ID).int64();
  timestamp=inWire.read(TIME_STAMP).int64();
  channelId=inWire.read(CHANNEL_ID).int16();
  inWire.read(METHOD_NAME).text(methodName);
  if (""String_Node_Str"".contentEquals(methodName)) {
    writeVoid(bytesMap -> {
      final net.openhft.lang.io.Bytes reader=toReader(inWire,ARG_1,ARG_2);
      bytesMap.put(reader,reader);
    }
);
    return;
  }
  outWire.write(() -> ""String_Node_Str"").int64(transactionId);
  try {
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeChunked(transactionId,map -> map.keySet().iterator(),writeElement);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeChunked(transactionId,map -> map.delegate.values().iterator(),writeElement);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeChunked(transactionId,m -> m.delegate.entrySet().iterator(),writeEntry);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      putAll(transactionId);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeVoid(() -> {
        short channelId1=inWire.read(ARG_1).int16();
        chronicleHashInstanceBuilder.get().replicatedViaChannel(hub.createChannel(channelId1)).create();
        return null;
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      this.remoteIdentifier=inWire.read(RESULT).int8();
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).int64(b.longSize()));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).bool(b.isEmpty()));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).bool(b.delegate.containsKey(toByteArray(inWire,ARG_1))));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).bool(b.delegate.containsValue(toByteArray(inWire,ARG_1))));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeValueUsingDelegate(map -> map.get(toByteArray(inWire,ARG_1)));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeValue(b -> {
        final net.openhft.lang.io.Bytes reader=MapWireHandler.this.toReader(inWire,ARG_1,ARG_2);
        return b.put(reader,reader);
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeValue(b -> b.remove(toReader(inWire,ARG_1)));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeVoid(BytesChronicleMap::clear);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeValue(bytesMap -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,ARG_1,ARG_2);
        return bytesMap.replace(reader,reader);
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(bytesMap -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,ARG_1,ARG_2,ARG_3);
        boolean result=bytesMap.replace(reader,reader,reader);
        outWire.write(RESULT).bool(result);
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeValue(bytesMap -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,ARG_1,ARG_2);
        return bytesMap.putIfAbsent(reader,reader);
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(bytesMap -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,ARG_1,ARG_2);
        outWire.write(RESULT).bool(bytesMap.remove(reader,reader));
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).text(applicationVersion()));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).text(persistedDataVersion()));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).int32(b.hashCode()));
      return;
    }
    throw new IllegalStateException(""String_Node_Str"" + methodName);
  }
  finally {
    if (EventGroup.IS_DEBUG) {
      long len=outWire.bytes().position() - SIZE_OF_SIZE;
      System.out.println(""String_Node_Str"" + Bytes.toDebugString(outWire.bytes(),SIZE_OF_SIZE,len));
    }
  }
}","@SuppressWarnings(""String_Node_Str"") void onEvent(){
  long transactionId=inWire.read(TRANSACTION_ID).int64();
  timestamp=inWire.read(TIME_STAMP).int64();
  channelId=inWire.read(CHANNEL_ID).int16();
  inWire.read(METHOD_NAME).text(methodName);
  if (""String_Node_Str"".contentEquals(methodName)) {
    writeVoid(bytesMap -> {
      final net.openhft.lang.io.Bytes reader=toReader(inWire,ARG_1,ARG_2);
      bytesMap.put(reader,reader);
    }
);
    return;
  }
  outWire.write(() -> ""String_Node_Str"").int64(transactionId);
  try {
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeChunked(transactionId,map -> map.keySet().iterator(),writeElement);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeChunked(transactionId,map -> map.delegate.values().iterator(),writeElement);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeChunked(transactionId,m -> m.delegate.entrySet().iterator(),writeEntry);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      putAll(transactionId);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeVoid(() -> {
        short channelId1=inWire.read(ARG_1).int16();
        chronicleHashInstanceBuilder.get().replicatedViaChannel(hub.createChannel(channelId1)).create();
        return null;
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      this.remoteIdentifier=inWire.read(RESULT).int8();
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).int64(b.longSize()));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).bool(b.isEmpty()));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).bool(b.delegate.containsKey(toByteArray(inWire,ARG_1))));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).bool(b.delegate.containsValue(toByteArray(inWire,ARG_1))));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeValueUsingDelegate(map -> map.get(toByteArray(inWire,ARG_1)));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeValue(b -> {
        final net.openhft.lang.io.Bytes reader=MapWireHandler.this.toReader(inWire,ARG_1,ARG_2);
        return b.put(reader,reader);
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeValue(b -> b.remove(toReader(inWire,ARG_1)));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeVoid(BytesChronicleMap::clear);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(bytesMap -> {
        VanillaChronicleMap map=bytesMap.delegate;
        byte[] result=(byte[])map.replace(toByteArray(inWire,ARG_1),toByteArray(inWire,ARG_2));
        boolean isNull=result == null || result.length == 0;
        outWire.write(() -> ""String_Node_Str"").bool(isNull);
        if (!isNull) {
          outWire.write(() -> ""String_Node_Str"");
          outWire.bytes().write(result);
        }
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(bytesMap -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,ARG_1,ARG_2,ARG_3);
        boolean result=bytesMap.replace(reader,reader,reader);
        outWire.write(RESULT).bool(result);
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeValue(bytesMap -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,ARG_1,ARG_2);
        return bytesMap.putIfAbsent(reader,reader);
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(bytesMap -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,ARG_1,ARG_2);
        outWire.write(RESULT).bool(bytesMap.remove(reader,reader));
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).text(applicationVersion()));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).text(persistedDataVersion()));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).int32(b.hashCode()));
      return;
    }
    throw new IllegalStateException(""String_Node_Str"" + methodName);
  }
  finally {
    if (EventGroup.IS_DEBUG) {
      long len=outWire.bytes().position() - SIZE_OF_SIZE;
      System.out.println(""String_Node_Str"" + Bytes.toDebugString(outWire.bytes(),SIZE_OF_SIZE,len));
    }
  }
}",0.8960581134494178
162911,"@SuppressWarnings(""String_Node_Str"") private void writeVoid(@NotNull Consumer<BytesChronicleMap> process){
  final BytesChronicleMap bytesMap=bytesMap(channelId);
  if (bytesMap == null) {
    LOG.error(""String_Node_Str"" + channelId + ""String_Node_Str"");
    return;
  }
  bytesMap.output=null;
  try {
    process.accept(bytesMap);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
}","@SuppressWarnings(""String_Node_Str"") private void writeVoid(@NotNull Consumer<BytesChronicleMap> process){
  final BytesChronicleMap bytesMap=bytesMap(channelId);
  if (bytesMap == null) {
    LOG.error(""String_Node_Str"" + channelId + ""String_Node_Str"");
    return;
  }
  bytesMap.output=null;
  try {
    process.accept(bytesMap);
    outWire.write(IS_EXCEPTION).bool(false);
  }
 catch (  Exception e) {
    outWire.write(IS_EXCEPTION).bool(true);
    LOG.error(""String_Node_Str"",e);
  }
}",0.9005586592178771
162912,"/** 
 * Returns a hash function implementing <a href=""https://code.google.com/p/cityhash/source/browse/trunk/src/city.cc?r=10""> CityHash64 algorithm, version 1.1</a> using the two given seed values. This implementation produce equal results for equal input on platforms with different   {@link ByteOrder}, but is slower on big-endian platforms than on little-endian.
 * @see #city_1_1()
 * @see #city_1_1(long)
 */
public static LongHashFunction city_1_1(long seed0,long seed1){
  return CityHash_1_1.asLongHashFunctionWithTwoSeeds(seed0,seed1);
}","/** 
 * Returns a hash function implementing <a href=""https://code.google.com/p/cityhash/source/browse/trunk/src/city.cc?r=10""> CityHash64 algorithm, version 1.1</a> using the two given seed values. This implementation produce equal results for equal input on platforms with different   {@link ByteOrder}, but is slower on big-endian platforms than on little-endian.
 * @return an instance of LongHashFunction
 * @see #city_1_1()
 * @see #city_1_1(long)
 */
public static LongHashFunction city_1_1(long seed0,long seed1){
  return CityHash_1_1.asLongHashFunctionWithTwoSeeds(seed0,seed1);
}",0.9621811785400176
162913,"/** 
 * Returns the hash code for the given   {@code short} value; this method is consistent with{@code LongHashFunction} methods that accept sequences of bytes, assuming the {@code input}value is interpreted in   {@linkplain ByteOrder#nativeOrder() native} byte order. For example,the result of  {@code hashShort(v)} call is identical to the result of{@code} hashShorts(new short[] v})} call for any  {@code short} value.As a consequence,  {@code hashShort(v)} call produce always the same result as {@code hashChar((char) v)}.
 */
public abstract long hashShort(short input);","/** 
 * Returns the hash code for the given   {@code short} value; this method is consistent with{@code LongHashFunction} methods that accept sequences of bytes, assuming the {@code input}value is interpreted in   {@linkplain ByteOrder#nativeOrder() native} byte order. For example,the result of  {@code hashShort(v)} call is identical to the result of{@code} hashShorts(new short[] v})} call for any  {@code short} value.As a consequence,  {@code hashShort(v)} call produce always the same result as {@code hashChar((char) v)}.
 * @param input the input
 * @return a hashShort
 */
public abstract long hashShort(short input);",0.9592684954280964
162914,"/** 
 * Returns the hash code for the given   {@code int} value; this method is consistent with{@code LongHashFunction} methods that accept sequences of bytes, assuming the {@code input}value is interpreted in   {@linkplain ByteOrder#nativeOrder() native} byte order. For example,the result of  {@code hashInt(v)} call is identical to the result of{@code} hashInts(new int[] v})} call for any  {@code int} value.
 */
public abstract long hashInt(int input);","/** 
 * Returns the hash code for the given   {@code int} value; this method is consistent with{@code LongHashFunction} methods that accept sequences of bytes, assuming the {@code input}value is interpreted in   {@linkplain ByteOrder#nativeOrder() native} byte order. For example,the result of  {@code hashInt(v)} call is identical to the result of{@code} hashInts(new int[] v})} call for any  {@code int} value.
 * @param input the input
 * @return a hashLong
 */
public abstract long hashInt(int input);",0.95010395010395
162915,"/** 
 * Returns the hash code for the empty (zero-length) bytes sequence, for example   {@code hashBytes(new byte[0])}.
 */
public abstract long hashVoid();","/** 
 * Returns the hash code for the empty (zero-length) bytes sequence, for example   {@code hashBytes(new byte[0])}.
 * @return a hash
 */
public abstract long hashVoid();",0.9454545454545454
162916,"/** 
 * Returns the hash code for the given   {@code long} value; this method is consistent with{@code LongHashFunction} methods that accept sequences of bytes, assuming the {@code input}value is interpreted in   {@linkplain ByteOrder#nativeOrder() native} byte order. For example,the result of  {@code hashLong(v)} call is identical to the result of{@code} hashLongs(new long[] v})} call for any  {@code long} value.
 */
public abstract long hashLong(long input);","/** 
 * Returns the hash code for the given   {@code long} value; this method is consistent with{@code LongHashFunction} methods that accept sequences of bytes, assuming the {@code input}value is interpreted in   {@linkplain ByteOrder#nativeOrder() native} byte order. For example,the result of  {@code hashLong(v)} call is identical to the result of{@code} hashLongs(new long[] v})} call for any  {@code long} value.
 * @param input the input
 * @return a hashLong
 */
public abstract long hashLong(long input);",0.9508196721311476
162917,"/** 
 * Returns the hash code for the given   {@code byte} value. This method is consistent with{@code LongHashFunction} methods that accept sequences of bytes. For example, the result of{@code hashByte(v)} call is identical to the result of{@code} hashBytes(new byte[] v})} call for any  {@code byte} value.
 */
public abstract long hashByte(byte input);","/** 
 * Returns the hash code for the given   {@code byte} value. This method is consistent with{@code LongHashFunction} methods that accept sequences of bytes. For example, the result of{@code hashByte(v)} call is identical to the result of{@code} hashBytes(new byte[] v})} call for any  {@code byte} value.
 * @param input the input
 * @return a hashByte
 */
public abstract long hashByte(byte input);",0.9366754617414248
162918,"/** 
 * Equivalent of   {@code ChronicleMapStatelessClientBuilder.<K, V>of(serverAddress).create()}.
 * @param serverAddress address of the server map
 * @param < K > key type of the map
 * @param < V > value type of the map
 * @return stateless client of the ChronicleMap of server
 */
public static <K,V>ChronicleMap<K,V> createClientOf(InetSocketAddress serverAddress) throws IOException {
  return ChronicleMapStatelessClientBuilder.<K,V>of(serverAddress).create();
}","/** 
 * Equivalent of   {@code ChronicleMapStatelessClientBuilder.<K,V>of(serverAddress).create()}.
 * @param serverAddress address of the server map
 * @param < K > key type of the map
 * @param < V > value type of the map
 * @return stateless client of the ChronicleMap of server
 * @throws IOException if it not possible to connect to the {@code serverAddress}
 */
public static <K,V>ChronicleMap<K,V> createClientOf(InetSocketAddress serverAddress) throws IOException {
  return ChronicleMapStatelessClientBuilder.<K,V>of(serverAddress).create();
}",0.1955034213098729
162919,"/** 
 * Called just after   {@link #onEntry(VanillaContext,int)}. No-op by default.
 */
public void onAfterEntry(){
}","/** 
 * Called just after   {@link #onEntry(net.openhft.lang.io.Bytes,int)}. No-op by default.
 */
public void onAfterEntry(){
}",0.889795918367347
162920,"/** 
 * Called just before   {@link #onEntry(VanillaContext,int)}. No-op by default.
 */
public void onBeforeEntry(){
}","/** 
 * Called just before   {@link #onEntry(net.openhft.lang.io.Bytes,int)}. No-op by default.
 */
public void onBeforeEntry(){
}",0.891566265060241
162921,"/** 
 * Called whenever a put() or remove() has occurred to a replicating map.
 * @param context       the entry you will receive, this does not have to be locked, aslocking is already provided from the caller.
 * @param chronicleId only assigned when clustering
 * @return {@code false} if this entry should be ignored because the identifier of thesource node is not from one of our changes, WARNING even though we check the identifier in the ModificationIterator the entry may have been updated.
 */
public abstract boolean onEntry(final Bytes entry,final int chronicleId);","/** 
 * Called whenever a put() or remove() has occurred to a replicating map.
 * @param entry       the entry you will receive, this does not have to be locked, aslocking is already provided from the caller.
 * @param chronicleId only assigned when clustering
 * @return {@code false} if this entry should be ignored because the identifier of thesource node is not from one of our changes, WARNING even though we check the identifier in the ModificationIterator the entry may have been updated.
 */
public abstract boolean onEntry(final Bytes entry,final int chronicleId);",0.989547038327526
162922,"/** 
 * The map implements this method to restore its contents. This method must read the values in the same sequence and with the same types as were written by   {@code writeExternalEntry()}. This method is typically called when we receive a remote replication event, this event could originate from either a remote   {@code put(K key, Vvalue)} or {@code remove(Object key)}
 * @param copies
 * @param context
 * @param source       bytes to read an entry from
 */
void readExternalEntry(@NotNull ReplicatedChronicleMap.BytesReplicatedContext context,@NotNull Bytes source);","/** 
 * The map implements this method to restore its contents. This method must read the values in the same sequence and with the same types as were written by   {@code writeExternalEntry()}. This method is typically called when we receive a remote replication event, this event could originate from either a remote   {@code put(K key, Vvalue)} or {@code remove(Object key)}
 * @param context       the Bytes Replicated Context
 * @param source       bytes to read an entry from
 */
void readExternalEntry(@NotNull ReplicatedChronicleMap.BytesReplicatedContext context,@NotNull Bytes source);",0.9571917808219178
162923,"/** 
 * {@inheritDoc}<p>Example: if keys in your set(s) are English words in   {@link String} form, average Englishword length is 5.1, configure average key size of 6: <pre> {@code ChronicleSet<String> uniqueWords = ChronicleSetBuilder.of(String.class) .entries(50000) .averageKeySize(6) .create();}</pre> <p>(Note that 6 is chosen as average key size in bytes despite strings in Java are UTF-16 encoded (and each character takes 2 bytes on-heap), because default off-heap   {@link String}encoding is UTF-8 in   {@code ChronicleSet}.)
 * @see #constantKeySizeBySample(Object)
 * @see #actualChunkSize(int)
 * @param averageKeySize
 */
@Override public ChronicleSetBuilder<K> averageKeySize(double averageKeySize){
  chronicleMapBuilder.averageKeySize(averageKeySize);
  return this;
}","/** 
 * {@inheritDoc}<p>Example: if keys in your set(s) are English words in   {@link String} form, average Englishword length is 5.1, configure average key size of 6: <pre> {@code ChronicleSet<String> uniqueWords = ChronicleSetBuilder.of(String.class) .entries(50000) .averageKeySize(6) .create();}</pre> <p>(Note that 6 is chosen as average key size in bytes despite strings in Java are UTF-16 encoded (and each character takes 2 bytes on-heap), because default off-heap   {@link String}encoding is UTF-8 in   {@code ChronicleSet}.)
 * @see #constantKeySizeBySample(Object)
 * @see #actualChunkSize(int)
 * @param averageKeySize   the average size in bytes of the key
 */
@Override public ChronicleSetBuilder<K> averageKeySize(double averageKeySize){
  chronicleMapBuilder.averageKeySize(averageKeySize);
  return this;
}",0.9757311761045426
162924,"default int mapHashCode(){
  int[] h=new int[1];
  forEach((k,v) -> h[0]+=k.hashCode() ^ v.hashCode());
  return h[0];
}","default int mapHashCode(){
  int[] h=new int[1];
  forEach((k,v) -> h[0]+=hashCode(k) ^ hashCode(v));
  return h[0];
}",0.9747899159663864
162925,"default boolean mapEquals(Object o){
  if (o == this)   return true;
  if (!(o instanceof Map))   return false;
  Map<?,?> m=(Map<?,?>)o;
  if ((m instanceof ChronicleMap ? ((ChronicleMap)m).longSize() : m.size()) != longSize())   return false;
  try {
    return forEachEntryWhile(c -> c.get().equals(m.get(c.key())));
  }
 catch (  ClassCastException unused) {
    return false;
  }
catch (  NullPointerException unused) {
    return false;
  }
}","default boolean mapEquals(Object o){
  if (o == this)   return true;
  if (!(o instanceof Map))   return false;
  Map<?,?> m=(Map<?,?>)o;
  if ((m instanceof ChronicleMap ? ((ChronicleMap)m).longSize() : m.size()) != longSize())   return false;
  try {
    return forEachEntryWhile(c -> {
      K k=c.key();
      V v=(V)m.get(k instanceof CharSequence ? k.toString() : k);
      return v != null && c.valueEqualTo(v);
    }
);
  }
 catch (  ClassCastException unused) {
    return false;
  }
catch (  NullPointerException unused) {
    return false;
  }
}",0.852589641434263
162926,"@Test public void testByteBufferDirectByteBufferMap() throws ExecutionException, InterruptedException, IOException {
  if (typeOfMap == TypeOfMap.STATELESS)   return;
  ChronicleMapBuilder<ByteBuffer,ByteBuffer> builder=ChronicleMapBuilder.of(ByteBuffer.class,ByteBuffer.class).averageKeySize(5).averageValueSize(5).entries(1000);
  try (ChronicleMap<ByteBuffer,ByteBuffer> map=newInstance(builder)){
    ByteBuffer key1=ByteBuffer.wrap(new byte[]{1,1,1,1});
    ByteBuffer key2=ByteBuffer.wrap(new byte[]{2,2,2,2});
    ByteBuffer value1=ByteBuffer.allocateDirect(4);
    value1.put(new byte[]{11,11,11,11});
    value1.flip();
    ByteBuffer value2=ByteBuffer.allocateDirect(4);
    value2.put(new byte[]{22,22,22,22});
    value2.flip();
    assertNull(map.put(key1,value1));
    assertBBEquals(value1,map.put(key1,value2));
    assertBBEquals(value2,map.get(key1));
    assertNull(map.get(key2));
    map.put(key1,value1);
    mapChecks();
    final SerializableFunction<ByteBuffer,ByteBuffer> function=new SerializableFunction<ByteBuffer,ByteBuffer>(){
      @Override public ByteBuffer apply(      ByteBuffer s){
        ByteBuffer slice=s.slice();
        slice.limit(2);
        return slice;
      }
    }
;
    assertBBEquals(ByteBuffer.wrap(new byte[]{11,11}),map.getMapped(key1,function));
    assertEquals(null,map.getMapped(key2,function));
    mapChecks();
    assertBBEquals(ByteBuffer.wrap(new byte[]{12,10}),map.putMapped(key1,new UnaryOperator<ByteBuffer>(){
      @Override public ByteBuffer update(      ByteBuffer s){
        s.put(0,(byte)(s.get(0) + 1));
        s.put(1,(byte)(s.get(1) - 1));
        return function.apply(s);
      }
    }
));
    assertBBEquals(ByteBuffer.wrap(new byte[]{12,10}),map.get(key1));
    mapChecks();
  }
 }","@Test public void testByteBufferDirectByteBufferMap() throws ExecutionException, InterruptedException, IOException {
  if (typeOfMap == TypeOfMap.STATELESS)   return;
  ChronicleMapBuilder<ByteBuffer,ByteBuffer> builder=ChronicleMapBuilder.of(ByteBuffer.class,ByteBuffer.class).averageKeySize(5).averageValueSize(5).entries(1000);
  try (ChronicleMap<ByteBuffer,ByteBuffer> map=newInstance(builder)){
    ByteBuffer key1=ByteBuffer.wrap(new byte[]{1,1,1,1});
    ByteBuffer key2=ByteBuffer.wrap(new byte[]{2,2,2,2});
    ByteBuffer value1=ByteBuffer.allocateDirect(4);
    value1.put(new byte[]{11,11,11,11});
    value1.flip();
    ByteBuffer value2=ByteBuffer.allocateDirect(4);
    value2.put(new byte[]{22,22,22,22});
    value2.flip();
    assertNull(map.put(key1,value1));
    assertBBEquals(value1,map.put(key1,value2));
    assertBBEquals(value2,map.get(key1));
    assertNull(map.get(key2));
    map.put(key1,value1);
    mapChecks();
    final SerializableFunction<ByteBuffer,ByteBuffer> function=s -> {
      ByteBuffer slice=s.slice();
      slice.limit(2);
      return slice;
    }
;
    assertBBEquals(ByteBuffer.wrap(new byte[]{11,11}),map.getMapped(key1,function));
    assertEquals(null,map.getMapped(key2,function));
    mapChecks();
    assertBBEquals(ByteBuffer.wrap(new byte[]{12,10}),map.putMapped(key1,s -> {
      s.put(0,(byte)(s.get(0) + 1));
      s.put(1,(byte)(s.get(1) - 1));
      return function.apply(s);
    }
));
    assertBBEquals(ByteBuffer.wrap(new byte[]{12,10}),map.get(key1));
    mapChecks();
  }
 }",0.881089258698941
162927,"public ClientWiredStatelessChronicleMap(@NotNull final ClientWiredChronicleMapStatelessClientBuilder config,@NotNull final Class kClass,@NotNull final Class vClass,short channelID){
  this.channelID=channelID;
  hub=config.hub;
  this.putReturnsNull=config.putReturnsNull();
  this.removeReturnsNull=config.removeReturnsNull();
  this.kClass=kClass;
  this.vClass=vClass;
}","public ClientWiredStatelessChronicleMap(@NotNull final ClientWiredChronicleMapStatelessBuilder config,@NotNull final Class kClass,@NotNull final Class vClass,short channelID){
  this.channelID=channelID;
  hub=config.hub;
  this.putReturnsNull=config.putReturnsNull();
  this.removeReturnsNull=config.removeReturnsNull();
  this.kClass=kClass;
  this.vClass=vClass;
}",0.991891891891892
162928,"private void writeChunked(long transactionId,@NotNull final Function<Map,Iterator<byte[]>> function,@NotNull final Consumer<Iterator<byte[]>> c){
  final BytesChronicleMap m=bytesMap(channelId);
  final Iterator<byte[]> iterator=function.apply(m);
  out=() -> {
    outWire.write(TRANSACTION_ID).int64(transactionId);
    write(map -> {
      boolean hasNext=iterator.hasNext();
      outWire.write(HAS_NEXT).bool(hasNext);
      if (hasNext)       c.accept(iterator);
 else       out=null;
    }
);
  }
;
  out.run();
}","private void writeChunked(long transactionId,@NotNull final Function<BytesChronicleMap,Iterator> function,@NotNull final Consumer<Iterator<byte[]>> c){
  final BytesChronicleMap m=bytesMap(channelId);
  final Iterator<byte[]> iterator=function.apply(m);
  out=() -> {
    outWire.write(TRANSACTION_ID).int64(transactionId);
    write(map -> {
      boolean hasNext=iterator.hasNext();
      outWire.write(HAS_NEXT).bool(hasNext);
      if (hasNext)       c.accept(iterator);
 else       out=null;
    }
);
  }
;
  out.run();
}",0.8967495219885278
162929,"@SuppressWarnings(""String_Node_Str"") void onEvent(){
  long transactionId=inWire.read(TRANSACTION_ID).int64();
  timestamp=inWire.read(TIME_STAMP).int64();
  channelId=inWire.read(CHANNEL_ID).int16();
  inWire.read(METHOD_NAME).text(methodName);
  if (""String_Node_Str"".contentEquals(methodName)) {
    writeVoid(bytesMap -> {
      final net.openhft.lang.io.Bytes reader=toReader(inWire,ARG_1,ARG_2);
      bytesMap.put(reader,reader);
    }
);
    return;
  }
  try {
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeChunked(transactionId,map -> map.keySet().iterator(),writeElement);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeChunked(transactionId,map -> map.values().iterator(),writeElement);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeChunked(transactionId,map -> map.entrySet().iterator(),writeEntry);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      putAll(transactionId);
      return;
    }
    outWire.write(() -> ""String_Node_Str"").int64(transactionId);
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeVoid(() -> {
        short channelId1=inWire.read(ARG_1).int16();
        chronicleHashInstanceBuilder.get().replicatedViaChannel(hub.createChannel(channelId1)).create();
        return null;
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      this.remoteIdentifier=inWire.read(RESULT).int8();
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).int64(b.longSize()));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).bool(b.isEmpty()));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).bool(b.containsKey(toReader(inWire,ARG_1))));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).bool(b.containsKey(toReader(inWire,ARG_1))));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeValueUsingDelegate(map -> {
        byte[] key1=this.toByteArray(inWire,ARG_1);
        return map.get(key1);
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeValue(b -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,ARG_1,ARG_2);
        return b.put(reader,reader);
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeValue(b -> b.remove(toReader(inWire,ARG_1)));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeVoid(BytesChronicleMap::clear);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeValue(bytesMap -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,ARG_1,ARG_2);
        return bytesMap.replace(reader,reader);
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeValue(bytesMap -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,ARG_1,ARG_2,ARG_3);
        return bytesMap.replace(reader,reader);
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeValue(bytesMap -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,ARG_1,ARG_2);
        return bytesMap.putIfAbsent(reader,reader);
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(bytesMap -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,ARG_1,ARG_2);
        outWire.write(RESULT).bool(bytesMap.remove(reader,reader));
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).text(b.toString()));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).text(applicationVersion()));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).text(persistedDataVersion()));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).int32(b.hashCode()));
      return;
    }
    throw new IllegalStateException(""String_Node_Str"" + methodName);
  }
  finally {
    if (EventGroup.IS_DEBUG) {
      long len=outWire.bytes().position() - SIZE_OF_SIZE;
      System.out.println(""String_Node_Str"" + Bytes.toDebugString(outWire.bytes(),SIZE_OF_SIZE,len));
    }
  }
}","@SuppressWarnings(""String_Node_Str"") void onEvent(){
  long transactionId=inWire.read(TRANSACTION_ID).int64();
  timestamp=inWire.read(TIME_STAMP).int64();
  channelId=inWire.read(CHANNEL_ID).int16();
  inWire.read(METHOD_NAME).text(methodName);
  if (""String_Node_Str"".contentEquals(methodName)) {
    writeVoid(bytesMap -> {
      final net.openhft.lang.io.Bytes reader=toReader(inWire,ARG_1,ARG_2);
      bytesMap.put(reader,reader);
    }
);
    return;
  }
  try {
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeChunked(transactionId,map -> map.keySet().iterator(),writeElement);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeChunked(transactionId,map -> map.delegate.values().iterator(),writeElement);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeEntryChunked(transactionId,m -> m.delegate.entrySet().iterator(),writeEntry);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      putAll(transactionId);
      return;
    }
    outWire.write(() -> ""String_Node_Str"").int64(transactionId);
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeVoid(() -> {
        short channelId1=inWire.read(ARG_1).int16();
        chronicleHashInstanceBuilder.get().replicatedViaChannel(hub.createChannel(channelId1)).create();
        return null;
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      this.remoteIdentifier=inWire.read(RESULT).int8();
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).int64(b.longSize()));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).bool(b.isEmpty()));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).bool(b.containsKey(toReader(inWire,ARG_1))));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).bool(b.containsKey(toReader(inWire,ARG_1))));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeValueUsingDelegate(map -> {
        byte[] key1=this.toByteArray(inWire,ARG_1);
        return map.get(key1);
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeValue(b -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,ARG_1,ARG_2);
        return b.put(reader,reader);
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeValue(b -> b.remove(toReader(inWire,ARG_1)));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeVoid(BytesChronicleMap::clear);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeValue(bytesMap -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,ARG_1,ARG_2);
        return bytesMap.replace(reader,reader);
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeValue(bytesMap -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,ARG_1,ARG_2,ARG_3);
        return bytesMap.replace(reader,reader);
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      writeValue(bytesMap -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,ARG_1,ARG_2);
        return bytesMap.putIfAbsent(reader,reader);
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(bytesMap -> {
        final net.openhft.lang.io.Bytes reader=toReader(inWire,ARG_1,ARG_2);
        outWire.write(RESULT).bool(bytesMap.remove(reader,reader));
      }
);
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).text(applicationVersion()));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).text(persistedDataVersion()));
      return;
    }
    if (""String_Node_Str"".contentEquals(methodName)) {
      write(b -> outWire.write(RESULT).int32(b.hashCode()));
      return;
    }
    throw new IllegalStateException(""String_Node_Str"" + methodName);
  }
  finally {
    if (EventGroup.IS_DEBUG) {
      long len=outWire.bytes().position() - SIZE_OF_SIZE;
      System.out.println(""String_Node_Str"" + Bytes.toDebugString(outWire.bytes(),SIZE_OF_SIZE,len));
    }
  }
}",0.9757217847769027
162930,"void initRemoveDependencies(){
  initSegment();
  initLocks();
  checkUpdateLocked();
}","void initRemoveDependencies(){
  initSegment();
  initLocks();
  updateLockIfNeeded();
}",0.9257142857142856
162931,"void putValue(){
  initEntrySizeInChunks();
  int lesserChunks=-1;
  if (newValueSize != valueSize) {
    long newSizeOfEverythingBeforeValue=valueSizeOffset + m.valueSizeMarshaller.sizeEncodingSize(newValueSize);
    long entryStartAddr=entry.address();
    long newValueAddr=m.alignment.alignAddr(entryStartAddr + newSizeOfEverythingBeforeValue);
    long newEntrySize=newValueAddr + newValueSize - entryStartAddr;
    int newSizeInChunks=inChunks(newEntrySize);
    newValueDoesNotFit:     if (newSizeInChunks > entrySizeInChunks) {
      if (newSizeInChunks > m.maxChunksPerEntry) {
        throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + newSizeInChunks + ""String_Node_Str""+ m.maxChunksPerEntry+ ""String_Node_Str"");
      }
      if (freeList.allClear(pos + entrySizeInChunks,pos + newSizeInChunks)) {
        long setFrom=state == PRESENT ? pos + entrySizeInChunks : pos;
        freeList.set(setFrom,pos + newSizeInChunks);
        break newValueDoesNotFit;
      }
      beforeRelocation();
      if (state == PRESENT)       free(pos,entrySizeInChunks);
      int allocatedChunks=inChunks(innerEntrySize(newSizeOfEverythingBeforeValue,newValueSize));
      pos=alloc(allocatedChunks);
      reuse(pos);
      UNSAFE.copyMemory(entryStartAddr,entry.address(),valueSizeOffset);
      writeValueAndPutPos(allocatedChunks);
      return;
    }
 else     if (newSizeInChunks < entrySizeInChunks) {
      if (state == PRESENT)       freeList.clear(pos + newSizeInChunks,pos + entrySizeInChunks);
      lesserChunks=newSizeInChunks;
    }
    upgradeToWriteLock();
    writeNewValueSize();
  }
 else {
    entry.position(valueOffset);
    upgradeToWriteLock();
  }
  writeNewValueAndSwitch();
  if (state != PRESENT) {
    freeList.set(pos,entrySizeInChunks);
    size(size() + 1L);
    beforePutPos();
    hashLookup.putVolatile(pos);
  }
  if (lesserChunks > 0)   freeExtraAllocatedChunks(lesserChunks);
}","void putValue(){
  initEntrySizeInChunks();
  int lesserChunks=-1;
  if (newValueSize != valueSize) {
    long newSizeOfEverythingBeforeValue=valueSizeOffset + m.valueSizeMarshaller.sizeEncodingSize(newValueSize);
    long entryStartAddr=entry.address();
    long newValueAddr=m.alignment.alignAddr(entryStartAddr + newSizeOfEverythingBeforeValue);
    long newEntrySize=newValueAddr + newValueSize - entryStartAddr;
    int newSizeInChunks=inChunks(newEntrySize);
    newValueDoesNotFit:     if (newSizeInChunks > entrySizeInChunks) {
      if (newSizeInChunks > m.maxChunksPerEntry) {
        throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + newSizeInChunks + ""String_Node_Str""+ m.maxChunksPerEntry+ ""String_Node_Str"");
      }
      if (freeList.allClear(pos + entrySizeInChunks,pos + newSizeInChunks)) {
        long setFrom=freeListBitsSet() ? pos + entrySizeInChunks : pos;
        freeList.set(setFrom,pos + newSizeInChunks);
        break newValueDoesNotFit;
      }
      beforeRelocation();
      if (freeListBitsSet())       free(pos,entrySizeInChunks);
      int allocatedChunks=inChunks(innerEntrySize(newSizeOfEverythingBeforeValue,newValueSize));
      pos=alloc(allocatedChunks);
      reuse(pos);
      UNSAFE.copyMemory(entryStartAddr,entry.address(),valueSizeOffset);
      writeValueAndPutPos(allocatedChunks);
      return;
    }
 else     if (newSizeInChunks < entrySizeInChunks) {
      if (freeListBitsSet())       freeList.clear(pos + newSizeInChunks,pos + entrySizeInChunks);
      lesserChunks=newSizeInChunks;
    }
    upgradeToWriteLock();
    writeNewValueSize();
  }
 else {
    entry.position(valueOffset);
    upgradeToWriteLock();
  }
  writeNewValueAndSwitch();
  if (state != PRESENT) {
    if (!freeListBitsSet())     freeList.set(pos,pos + entrySizeInChunks);
    size(size() + 1L);
    beforePutPos();
    hashLookup.putVolatile(pos);
  }
  if (lesserChunks > 0)   freeExtraAllocatedChunks(lesserChunks);
}",0.8190427437931918
162932,"void initPutDependencies(){
  initLocks();
  checkUpdateLocked();
  initKeySearch();
  initValueModel();
  initKeyModel();
}","void initPutDependencies(){
  initLocks();
  updateLockIfNeeded();
  initKeySearch();
  initValueModel();
  initKeyModel();
}",0.9477911646586346
162933,"@Override public boolean remove(long hash,long pos){
  c.pos=pos;
  c.initKeyFromPos();
  try {
    if (!c.containsKey())     return false;
    shouldBreak=predicate.test(c);
    while (c.writeLockCount > 0) {
      c.writeLock().unlock();
    }
    if (!c.isUpdateLocked()) {
      throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
    }
    return c.state == DELETED && !(c instanceof ReplicatedContext);
  }
  finally {
    c.closeKeySearch();
  }
}","@Override public boolean remove(long hash,long pos){
  c.pos=pos;
  c.initKeyFromPos();
  try {
    if (!c.containsKey())     return false;
    shouldBreak=!predicate.test(c);
    c.closeKey0();
    while (c.writeLockCount > 0) {
      c.writeLock().unlock();
    }
    if (!c.isUpdateLocked()) {
      throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
    }
    return c.state == DELETED && !(c instanceof ReplicatedContext);
  }
  finally {
    c.closeKeySearch();
  }
}",0.9462809917355371
162934,"private void fillEntryBuffer(){
  if (!entryBuffer.isEmpty())   return;
  while (true) {
    if (segmentIndex < 0)     return;
    try (VanillaContext<K,?,?,V,?,?> c=mapContext()){
      context=c;
      c.segmentIndex=segmentIndex;
      segmentIndex--;
      if (c.size() == 0)       continue;
      c.updateLock().lock();
      c.initSegment();
      c.hashLookup.forEach(this);
    }
  finally {
      context=null;
    }
  }
}","private void fillEntryBuffer(){
  if (!entryBuffer.isEmpty())   return;
  while (true) {
    if (segmentIndex < 0)     return;
    try (VanillaContext<K,?,?,V,?,?> c=mapContext()){
      context=c;
      c.segmentIndex=segmentIndex;
      segmentIndex--;
      if (c.size() == 0)       continue;
      c.updateLock().lock();
      c.initSegment();
      c.hashLookup.forEach(this);
      return;
    }
  finally {
      context=null;
    }
  }
}",0.9840182648401826
162935,"@Nullable private Work replaceWithOldAndNew(Bytes reader,@NotNull TcpReplicator.TcpSocketChannelEntryWriter writer,final long sizeLocation,long timestamp,byte id){
  try {
    writer.ensureBufferSize(1L);
    bytesMap.replace(reader,reader,reader);
  }
 catch (  Throwable e) {
    return sendException(writer,sizeLocation,e);
  }
  writeSizeAndFlags(sizeLocation,false,writer.in());
  return null;
}","@Nullable private Work replaceWithOldAndNew(Bytes reader,@NotNull TcpReplicator.TcpSocketChannelEntryWriter writer,final long sizeLocation,long timestamp,byte id){
  try {
    writer.ensureBufferSize(1L);
    writer.in().writeBoolean(bytesMap.replace(reader,reader,reader));
  }
 catch (  Throwable e) {
    return sendException(writer,sizeLocation,e);
  }
  writeSizeAndFlags(sizeLocation,false,writer.in());
  return null;
}",0.9685230024213076
162936,"@Nullable private Work containsKey(Bytes reader,@NotNull TcpReplicator.TcpSocketChannelEntryWriter writer,final long sizeLocation){
  try {
    writer.in().writeBoolean(map.containsKey(reader));
  }
 catch (  Throwable e) {
    return sendException(writer,sizeLocation,e);
  }
  writeSizeAndFlags(sizeLocation,false,writer.in());
  return null;
}","@Nullable private Work containsKey(Bytes reader,@NotNull TcpReplicator.TcpSocketChannelEntryWriter writer,final long sizeLocation){
  try {
    writer.in().writeBoolean(bytesMap.containsKey(reader));
  }
 catch (  Throwable e) {
    return sendException(writer,sizeLocation,e);
  }
  writeSizeAndFlags(sizeLocation,false,writer.in());
  return null;
}",0.9899569583931134
162937,"@Nullable private Work get(Bytes reader,TcpReplicator.TcpSocketChannelEntryWriter writer,final long sizeLocation,long transactionId){
  bytesMap.output=writer;
  try {
    map.get(reader);
  }
 catch (  Throwable e) {
    return sendException(writer,sizeLocation,e);
  }
 finally {
    bytesMap.output=null;
  }
  writeSizeAndFlags(sizeLocation,false,writer.in());
  return null;
}","@Nullable private Work get(Bytes reader,TcpReplicator.TcpSocketChannelEntryWriter writer,final long sizeLocation,long transactionId){
  bytesMap.output=writer;
  try {
    bytesMap.get(reader);
  }
 catch (  Throwable e) {
    return sendException(writer,sizeLocation,e);
  }
 finally {
    bytesMap.output=null;
  }
  writeSizeAndFlags(sizeLocation,false,writer.in());
  return null;
}",0.9908735332464146
162938,"@Test(timeout=25000) public void persistedTest(){
  final File db=Paths.get(System.getProperty(""String_Node_Str""),""String_Node_Str"").toFile();
  try {
    test(new Function<ChronicleMapBuilder<Integer,Integer>,ChronicleMap<Integer,Integer>>(){
      @Override public ChronicleMap<Integer,Integer> apply(      ChronicleMapBuilder<Integer,Integer> builder){
        try {
          return builder.createPersistedTo(db);
        }
 catch (        IOException e) {
          throw new AssertionError(e);
        }
      }
    }
);
    System.out.println(MemoryUnit.BYTES.toMegabytes(db.length()) + ""String_Node_Str"");
    assertTrue(""String_Node_Str"",db.length() < MemoryUnit.MEGABYTES.toBytes(400));
  }
  finally {
    db.delete();
  }
}","@Test(timeout=25000) public void persistedTest(){
  final File db=Paths.get(System.getProperty(""String_Node_Str""),""String_Node_Str"").toFile();
  if (db.exists())   db.delete();
  try {
    test(new Function<ChronicleMapBuilder<Integer,Integer>,ChronicleMap<Integer,Integer>>(){
      @Override public ChronicleMap<Integer,Integer> apply(      ChronicleMapBuilder<Integer,Integer> builder){
        try {
          return builder.createPersistedTo(db);
        }
 catch (        IOException e) {
          throw new AssertionError(e);
        }
      }
    }
);
    System.out.println(MemoryUnit.BYTES.toMegabytes(db.length()) + ""String_Node_Str"");
    assertTrue(""String_Node_Str"",db.length() < MemoryUnit.MEGABYTES.toBytes(400));
  }
  finally {
    db.delete();
  }
}",0.9773936170212766
162939,"public <T extends ChronicleHash>T create(MapInstanceBuilder<CharSequence,CharSequence> config) throws IOException, TimeoutException, InterruptedException {
  int withChannelId=nextFreeChannel.incrementAndGet();
  try (MapKeyContext<MapInstanceBuilder> c=map.context(config.name)){
    MapInstanceBuilder value=config.replicatedViaChannel(replicationHub.createChannel(withChannelId));
    boolean added=!c.containsKey();
    c.put(value);
    if (added) {
      LOG.info(""String_Node_Str"" + value.name + ""String_Node_Str""+ value.channel.channelId());
      try {
        toReplicatedViaChannel(value.mapBuilder,value.channel.channelId()).create();
      }
 catch (      IllegalStateException e) {
        LOG.debug(""String_Node_Str"" + value.name + ""String_Node_Str""+ value.channel.channelId(),e);
      }
catch (      IOException e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
   return (T)get(config.name).mapBuilder.create();
}","public <T extends ChronicleHash>T create(MapInstanceBuilder<CharSequence,CharSequence> config) throws IOException, TimeoutException, InterruptedException {
  int withChannelId=nextFreeChannel.incrementAndGet();
  try (MapKeyContext<MapInstanceBuilder> c=map.context(config.name)){
    c.updateLock().lock();
    MapInstanceBuilder value=config.replicatedViaChannel(replicationHub.createChannel(withChannelId));
    boolean added=!c.containsKey();
    c.put(value);
    if (added) {
      LOG.info(""String_Node_Str"" + value.name + ""String_Node_Str""+ value.channel.channelId());
      try {
        toReplicatedViaChannel(value.mapBuilder,value.channel.channelId()).create();
      }
 catch (      IllegalStateException e) {
        LOG.debug(""String_Node_Str"" + value.name + ""String_Node_Str""+ value.channel.channelId(),e);
      }
catch (      IOException e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
   return (T)get(config.name).mapBuilder.create();
}",0.9859007832898172
162940,"@Override public void accept(long key,long pos){
  context.pos=pos;
  context.initKeyFromPos();
  if (!context.containsKey())   return;
  entryBuffer.add(new WriteThroughEntry(context.immutableKey(),context.getUsing(null)));
}","@Override public void accept(long hash,long pos){
  context.pos=pos;
  context.initKeyFromPos();
  try {
    if (!context.containsKey())     return;
    K key=context.immutableKey();
    V value=context.getUsing(null);
    entryBuffer.add(new WriteThroughEntry(key,value));
  }
  finally {
    context.closeKeySearch();
  }
}",0.6061705989110708
162941,"final void reuse(long pos){
  reuse(entry,pos);
}","final void reuse(long pos){
  entry=reuse(entryCache,pos);
}",0.8990825688073395
162942,"void closeLocks0(){
  if (rootContextOnThisSegment == this) {
    if (totalWriteLockCount > 0) {
      segmentHeader.writeUnlock(segmentHeaderAddress);
      closeKeySearch();
    }
 else     if (totalUpdateLockCount > 0) {
      segmentHeader.updateUnlock(segmentHeaderAddress);
      closeKeySearch();
    }
 else     if (totalReadLockCount > 0) {
      segmentHeader.readUnlock(segmentHeaderAddress);
      closeKeySearch();
    }
  }
 else {
    if (writeLockCount > 0 && rootContextOnThisSegment.totalReadLockCount == writeLockCount) {
      if (shouldUpdateUnlock()) {
        if (shouldReadUnlock()) {
          segmentHeader.writeUnlock(segmentHeaderAddress);
          closeKeySearch();
        }
 else {
          segmentHeader.downgradeWriteToReadLock(segmentHeaderAddress);
        }
      }
 else {
        segmentHeader.downgradeWriteToUpdateLock(segmentHeaderAddress);
      }
    }
 else     if (shouldUpdateUnlock()) {
      if (shouldReadUnlock()) {
        segmentHeader.updateUnlock(segmentHeaderAddress);
        closeKeySearch();
      }
 else {
        segmentHeader.downgradeUpdateToReadLock(segmentHeaderAddress);
      }
    }
 else     if (shouldReadUnlock()) {
      segmentHeader.readUnlock(segmentHeaderAddress);
      closeKeySearch();
    }
    rootContextOnThisSegment.totalReadLockCount-=readLockCount;
    rootContextOnThisSegment.totalUpdateLockCount-=updateLockCount;
    rootContextOnThisSegment.totalWriteLockCount-=writeLockCount;
  }
  rootContextOnThisSegment=null;
}","void closeLocks0(){
  if (rootContextOnThisSegment == this) {
    if (totalWriteLockCount > 0) {
      segmentHeader.writeUnlock(segmentHeaderAddress);
      closeKeySearch();
    }
 else     if (totalUpdateLockCount > 0) {
      segmentHeader.updateUnlock(segmentHeaderAddress);
      closeKeySearch();
    }
 else     if (totalReadLockCount > 0) {
      segmentHeader.readUnlock(segmentHeaderAddress);
      closeKeySearch();
    }
  }
 else {
    if (writeLockCount > 0 && rootContextOnThisSegment.totalReadLockCount == writeLockCount) {
      if (shouldUpdateUnlock()) {
        if (shouldReadUnlock()) {
          segmentHeader.writeUnlock(segmentHeaderAddress);
          closeKeySearch();
        }
 else {
          segmentHeader.downgradeWriteToReadLock(segmentHeaderAddress);
        }
      }
 else {
        segmentHeader.downgradeWriteToUpdateLock(segmentHeaderAddress);
      }
    }
 else     if (shouldUpdateUnlock()) {
      if (shouldReadUnlock()) {
        segmentHeader.updateUnlock(segmentHeaderAddress);
        closeKeySearch();
      }
 else {
        segmentHeader.downgradeUpdateToReadLock(segmentHeaderAddress);
      }
    }
 else     if (shouldReadUnlock()) {
      segmentHeader.readUnlock(segmentHeaderAddress);
      closeKeySearch();
    }
  }
  rootContextOnThisSegment.totalReadLockCount-=readLockCount;
  rootContextOnThisSegment.totalUpdateLockCount-=updateLockCount;
  rootContextOnThisSegment.totalWriteLockCount-=writeLockCount;
  readLockCount=updateLockCount=writeLockCount=0;
  rootContextOnThisSegment=null;
}",0.9601567602873938
162943,"void writeNewValueAndSwitch(){
  metaValueInterop.write(valueInterop,entry,newValue);
  value=newValue;
  closeNewValue0();
}","void writeNewValueAndSwitch(){
  entry.position(valueOffset);
  metaValueInterop.write(valueInterop,entry,newValue);
  value=newValue;
  closeNewValue0();
}",0.8896797153024911
162944,"void closeKeySearch0(){
  state=null;
  hashLookup.closeSearch0();
}","void closeKeySearch0(){
  state=null;
  pos=-1;
  entry=null;
  hashLookup.closeSearch0();
}",0.85
162945,"@Test public void testOnheapAcquireUsingLocked() throws IOException {
  ChronicleMapBuilder<CharSequence,LongValue> builder=ChronicleMapBuilder.of(CharSequence.class,LongValue.class).entries(1000).averageKeySize(""String_Node_Str"".length());
  File tmpFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  tmpFile.deleteOnExit();
  final ChronicleMap<CharSequence,LongValue> map=builder.createPersistedTo(tmpFile);
  LongValue value=DataValueClasses.newDirectReference(LongValue.class);
  try (MapKeyContext<LongValue> context=map.context(""String_Node_Str"")){
    assertEquals(false,context.containsKey());
    assertEquals(null,context.get());
  }
   try (MapKeyContext<LongValue> context=map.acquireContext(""String_Node_Str"",value)){
    value.setValue(10);
  }
   try (MapKeyContext<LongValue> context=map.acquireContext(""String_Node_Str"",value)){
    LongValue value1=context.get();
    value1.addValue(1);
  }
   try (MapKeyContext<LongValue> context=map.context(""String_Node_Str"")){
    assertEquals(true,context.containsKey());
    assertEquals(11,context.get().getValue());
  }
   try (MapKeyContext<LongValue> context=map.acquireContext(""String_Node_Str"",value)){
    context.remove();
  }
   try (MapKeyContext<LongValue> context=map.context(""String_Node_Str"")){
    assertEquals(false,context.containsKey());
    assertEquals(null,context.get());
  }
   try (MapKeyContext<LongValue> context=map.acquireContext(""String_Node_Str"",value)){
    assertEquals(0,context.get().getValue());
  }
   value.setValue(1);
  try (MapKeyContext<LongValue> lockedEntry=map.context(""String_Node_Str"")){
    assertEquals(1,lockedEntry.get().getValue());
  }
   try (MapKeyContext<LongValue> context=map.acquireContext(""String_Node_Str"",value)){
    LongValue value1=context.get();
    value1.addValue(1);
  }
   try (MapKeyContext<LongValue> context=map.context(""String_Node_Str"")){
    LongValue value1=context.get();
    assertEquals(2,value1.getValue());
  }
   map.close();
}","@Test public void testOnheapAcquireUsingLocked() throws IOException {
  ChronicleMapBuilder<CharSequence,LongValue> builder=ChronicleMapBuilder.of(CharSequence.class,LongValue.class).entries(1000).averageKeySize(""String_Node_Str"".length());
  File tmpFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  tmpFile.deleteOnExit();
  final ChronicleMap<CharSequence,LongValue> map=builder.createPersistedTo(tmpFile);
  LongValue value=DataValueClasses.newDirectReference(LongValue.class);
  try (MapKeyContext<LongValue> context=map.context(""String_Node_Str"")){
    assertEquals(false,context.containsKey());
    assertEquals(null,context.get());
  }
   try (MapKeyContext<LongValue> context=map.acquireContext(""String_Node_Str"",value)){
    value.setValue(10);
  }
   try (MapKeyContext<LongValue> context=map.acquireContext(""String_Node_Str"",value)){
    LongValue value1=context.get();
    value1.addValue(1);
  }
   try (MapKeyContext<LongValue> context=map.context(""String_Node_Str"")){
    assertEquals(true,context.containsKey());
    assertEquals(11,context.get().getValue());
  }
   try (MapKeyContext<LongValue> context=map.context(""String_Node_Str"")){
    context.remove();
  }
   try (MapKeyContext<LongValue> context=map.context(""String_Node_Str"")){
    assertEquals(false,context.containsKey());
    assertEquals(null,context.get());
  }
   try (MapKeyContext<LongValue> context=map.acquireContext(""String_Node_Str"",value)){
    assertEquals(0,context.get().getValue());
  }
   value.setValue(1);
  try (MapKeyContext<LongValue> lockedEntry=map.context(""String_Node_Str"")){
    assertEquals(1,lockedEntry.get().getValue());
  }
   try (MapKeyContext<LongValue> context=map.acquireContext(""String_Node_Str"",value)){
    LongValue value1=context.get();
    value1.addValue(1);
  }
   try (MapKeyContext<LongValue> context=map.context(""String_Node_Str"")){
    LongValue value1=context.get();
    assertEquals(2,value1.getValue());
  }
   map.close();
}",0.9962054136099164
162946,"@Override public void replacePrevPos(SearchState searchState,long newValue){
  checkValueForPut(newValue);
  long prevPos=searchState.searchPos;
  if (!searchState.putAfterFailedSearch)   prevPos=stepBack(prevPos);
  long oldEntry=bytes.readInt48(prevPos);
  long oldValue=value(oldEntry);
  checkValueForRemove(oldValue);
  positions.clear(oldValue);
  positions.set(newValue);
  bytes.writeInt48(prevPos,entry(searchState.searchHash,newValue));
}","@Override public void replacePrevPos(SearchState searchState,long newValue,boolean oldValueInPositions){
  checkValueForPut(newValue);
  long prevPos=searchState.searchPos;
  if (!searchState.putAfterFailedSearch)   prevPos=stepBack(prevPos);
  if (oldValueInPositions) {
    long oldEntry=bytes.readInt48(prevPos);
    long oldValue=value(oldEntry);
    checkValueForRemove(oldValue);
    positions.clear(oldValue);
  }
  positions.set(newValue);
  bytes.writeInt48(prevPos,entry(searchState.searchHash,newValue));
}",0.8746113989637305
162947,"@Override public void replacePrevPos(SearchState searchState,long newValue){
  checkValueForPut(newValue);
  long prevPos=searchState.searchPos;
  if (!searchState.putAfterFailedSearch)   prevPos=stepBack(prevPos);
  long oldEntry=bytes.readLong(prevPos);
  long oldValue=value(oldEntry);
  checkValueForRemove(oldValue);
  positions.clear(oldValue);
  positions.set(newValue);
  bytes.writeLong(prevPos,entry(searchState.searchHash,newValue));
}","@Override public void replacePrevPos(SearchState searchState,long newValue,boolean oldValueInPositions){
  checkValueForPut(newValue);
  long prevPos=searchState.searchPos;
  if (!searchState.putAfterFailedSearch)   prevPos=stepBack(prevPos);
  if (oldValueInPositions) {
    long oldEntry=bytes.readLong(prevPos);
    long oldValue=value(oldEntry);
    checkValueForRemove(oldValue);
    positions.clear(oldValue);
  }
  positions.set(newValue);
  bytes.writeLong(prevPos,entry(searchState.searchHash,newValue));
}",0.8740894901144641
162948,"void replacePrevPos(SearchState searchState,long newValue);","void replacePrevPos(SearchState searchState,long newValue,boolean oldValueInPositions);",0.8082191780821918
162949,"@Override <KB,KBI,MKBI extends MetaBytesInterop<KB,? super KBI>,RV>RV acquireWithoutLock(@NotNull ThreadLocalCopies copies,@NotNull SegmentState segmentState,MKBI metaKeyInterop,KBI keyInterop,KB key,long keySize,InstanceOrBytesToInstance<KB,K> toKey,ReadValue<RV> readValue,RV usingValue,InstanceOrBytesToInstance<RV,V> toValue,long hash2,boolean create,MutableLockedEntry lock){
  MultiStoreBytes entry=segmentState.tmpBytes;
  MultiMap hashLookup=hashLookup();
  SearchState searchState=segmentState.searchState;
  hashLookup.startSearch(hash2,searchState);
  for (long pos; (pos=hashLookup.nextPos(searchState)) >= 0L; ) {
    long offset=offsetFromPos(pos);
    reuse(entry,offset);
    if (!keyEquals(keyInterop,metaKeyInterop,key,keySize,entry))     continue;
    entry.skip(keySize);
    entry.skip(ADDITIONAL_ENTRY_BYTES - 1L);
    boolean isDeleted=entry.readBoolean();
    if (isDeleted) {
      if (!create)       return readValue.readNull();
      long valueSizePos=entry.position();
      entry.position(valueSizePos - ADDITIONAL_ENTRY_BYTES);
      entry.writeLong(currentTime());
      entry.writeByte(localIdentifier);
      entry.writeBoolean(false);
      long prevValueSize=valueSizeMarshaller.readSize(entry);
      long sizeOfEverythingBeforeValue=entry.position();
      alignment.alignPositionAddr(entry);
      long valueAddr=entry.positionAddr();
      long entryEndAddr=valueAddr + prevValueSize;
      K keyInstance=toKey.toInstance(copies,key,keySize);
      MetaBytesWriter metaElemWriter;
      Object elemWriter;
      Object elem;
      if (defaultValueProvider != null) {
        V defaultValue=defaultValueProvider.get(keyInstance);
        elem=defaultValue;
        VI valueInterop=valueInteropProvider.get(copies,originalValueInterop);
        elemWriter=valueInterop;
        metaElemWriter=metaValueInteropProvider.get(copies,originalMetaValueInterop,valueInterop,defaultValue);
      }
 else       if (prepareValueBytesAsWriter != null) {
        elem=keyInstance;
        elemWriter=null;
        metaElemWriter=prepareValueBytesAsWriter;
      }
 else {
        throw defaultValueOrPrepareBytesShouldBeSpecified();
      }
      putValue(pos,offset,entry,valueSizePos,entryEndAddr,segmentState,metaElemWriter,elemWriter,elem,metaElemWriter.size(elemWriter,elem),hashLookup,sizeOfEverythingBeforeValue);
      pos=segmentState.pos;
      incrementSize();
      hashLookup.putPosition(pos);
      entry.position(valueSizePos);
      long valueSize=readValueSize(entry);
      long valuePos=entry.position();
      RV v=readValue.readValue(copies,entry,usingValue,valueSize);
      onPut(this,pos);
      if (bytesEventListener != null) {
        bytesEventListener.onPut(entry,0L,metaDataBytes,valuePos,true);
      }
      if (eventListener != null) {
        V valueInstance=toValue.toInstance(copies,v,valueSize);
        eventListener.onPut(keyInstance,valueInstance,null);
      }
      return v;
    }
 else {
      segmentState.pos=pos;
      return readValueAndNotifyGet(copies,key,keySize,toKey,readValue,usingValue,toValue,entry);
    }
  }
  if (!create)   return readValue.readNull();
  RV result=createEntryOnAcquire(copies,segmentState,metaKeyInterop,keyInterop,key,keySize,toKey,readValue,usingValue,toValue,entry);
  if (lock instanceof WriteLocked)   ((WriteLocked)lock).created(false);
  return result;
}","@Override <KB,KBI,MKBI extends MetaBytesInterop<KB,? super KBI>,RV>RV acquireWithoutLock(@NotNull ThreadLocalCopies copies,@NotNull SegmentState segmentState,MKBI metaKeyInterop,KBI keyInterop,KB key,long keySize,InstanceOrBytesToInstance<KB,K> toKey,ReadValue<RV> readValue,RV usingValue,InstanceOrBytesToInstance<RV,V> toValue,long hash2,boolean create,MutableLockedEntry lock){
  MultiStoreBytes entry=segmentState.tmpBytes;
  MultiMap hashLookup=hashLookup();
  SearchState searchState=segmentState.searchState;
  hashLookup.startSearch(hash2,searchState);
  for (long pos; (pos=hashLookup.nextPos(searchState)) >= 0L; ) {
    long offset=offsetFromPos(pos);
    reuse(entry,offset);
    if (!keyEquals(keyInterop,metaKeyInterop,key,keySize,entry))     continue;
    entry.skip(keySize);
    entry.skip(ADDITIONAL_ENTRY_BYTES - 1L);
    boolean isDeleted=entry.readBoolean();
    if (isDeleted) {
      if (!create)       return readValue.readNull();
      long valueSizePos=entry.position();
      entry.position(valueSizePos - ADDITIONAL_ENTRY_BYTES);
      entry.writeLong(currentTime());
      entry.writeByte(localIdentifier);
      entry.writeBoolean(false);
      long prevValueSize=valueSizeMarshaller.readSize(entry);
      long sizeOfEverythingBeforeValue=entry.position();
      alignment.alignPositionAddr(entry);
      long valueAddr=entry.positionAddr();
      long entryEndAddr=valueAddr + prevValueSize;
      K keyInstance=toKey.toInstance(copies,key,keySize);
      MetaBytesWriter metaElemWriter;
      Object elemWriter;
      Object elem;
      if (defaultValueProvider != null) {
        V defaultValue=defaultValueProvider.get(keyInstance);
        elem=defaultValue;
        VI valueInterop=valueInteropProvider.get(copies,originalValueInterop);
        elemWriter=valueInterop;
        metaElemWriter=metaValueInteropProvider.get(copies,originalMetaValueInterop,valueInterop,defaultValue);
      }
 else       if (prepareValueBytesAsWriter != null) {
        elem=keyInstance;
        elemWriter=null;
        metaElemWriter=prepareValueBytesAsWriter;
      }
 else {
        throw defaultValueOrPrepareBytesShouldBeSpecified();
      }
      putValue(pos,offset,entry,valueSizePos,entryEndAddr,isDeleted,segmentState,metaElemWriter,elemWriter,elem,metaElemWriter.size(elemWriter,elem),hashLookup,sizeOfEverythingBeforeValue);
      pos=segmentState.pos;
      incrementSize();
      hashLookup.putPosition(pos);
      entry.position(valueSizePos);
      long valueSize=readValueSize(entry);
      long valuePos=entry.position();
      RV v=readValue.readValue(copies,entry,usingValue,valueSize);
      onPut(this,pos);
      if (bytesEventListener != null) {
        bytesEventListener.onPut(entry,0L,metaDataBytes,valuePos,true);
      }
      if (eventListener != null) {
        V valueInstance=toValue.toInstance(copies,v,valueSize);
        eventListener.onPut(keyInstance,valueInstance,null);
      }
      entryCreated(lock);
      return v;
    }
 else {
      segmentState.pos=pos;
      return readValueAndNotifyGet(copies,key,keySize,toKey,readValue,usingValue,toValue,entry);
    }
  }
  if (!create)   return readValue.readNull();
  RV result=createEntryOnAcquire(copies,segmentState,metaKeyInterop,keyInterop,key,keySize,toKey,readValue,usingValue,toValue,entry);
  entryCreated(lock);
  return result;
}",0.9834599910594546
162950,"@Override boolean isDeleted(long pos){
  bytes.position(offsetFromPos(pos) + metaDataBytes);
  long keySize=keySizeMarshaller.readSize(bytes);
  return bytes.readBoolean(bytes.position() + keySize + ADDITIONAL_ENTRY_BYTES - 1L);
}","@Override boolean isDeleted(Bytes entry,long keySize){
  return entry.readBoolean(entry.position() + keySize + ADDITIONAL_ENTRY_BYTES - 1L);
}",0.6827956989247311
162951,"@Override public void replacePrevPos(SearchState searchState,long newValue){
  checkValueForPut(newValue);
  long prevPos=searchState.searchPos;
  if (!searchState.putAfterFailedSearch)   prevPos=stepBack(prevPos);
  int oldEntry=bytes.readInt(prevPos);
  long oldValue=value(oldEntry);
  checkValueForRemove(oldValue);
  positions.clear(oldValue);
  positions.set(newValue);
  bytes.writeInt(prevPos,entry(searchState.searchHash,newValue));
}","@Override public void replacePrevPos(SearchState searchState,long newValue,boolean oldValueInPositions){
  checkValueForPut(newValue);
  long prevPos=searchState.searchPos;
  if (!searchState.putAfterFailedSearch)   prevPos=stepBack(prevPos);
  if (oldValueInPositions) {
    int oldEntry=bytes.readInt(prevPos);
    long oldValue=value(oldEntry);
    checkValueForRemove(oldValue);
    positions.clear(oldValue);
  }
  positions.set(newValue);
  bytes.writeInt(prevPos,entry(searchState.searchHash,newValue));
}",0.8732984293193717
162952,"@Override public Entry<K,V> next(){
  checkSingleThreaded();
  fillEntryBuffer();
  if ((returned=entryBuffer.poll()) == null)   throw new NoSuchElementException();
  return returned;
}","@Override public Entry<K,V> next(){
  checkSingleThreaded();
  fillEntryBuffer();
  Entry<K,V> e;
  if ((e=entryBuffer.poll()) == null)   throw new NoSuchElementException();
  return returned=e;
}",0.9343832020997376
162953,"private <KB,KBI,MKBI extends MetaBytesInterop<KB,? super KBI>,RV,VB extends RV,VBI,MVBI extends MetaBytesInterop<RV,? super VBI>>RV putWithoutLock(@Nullable ThreadLocalCopies copies,final @Nullable SegmentState segmentState,MKBI metaKeyInterop,KBI keyInterop,KB key,long keySize,InstanceOrBytesToInstance<KB,K> toKey,GetValueInterops<VB,VBI,MVBI> getValueInterops,VB value,InstanceOrBytesToInstance<? super VB,V> toValue,long hash2,boolean replaceIfPresent,ReadValue<RV> readValue,boolean resultUnused,byte identifier,long timestamp,boolean remote){
  MultiMap hashLookup=hashLookup();
  SearchState searchState=segmentState.searchState;
  hashLookup.startSearch(hash2,searchState);
  MultiStoreBytes entry=segmentState.tmpBytes;
  for (long pos; (pos=hashLookup.nextPos(searchState)) >= 0L; ) {
    long offset=offsetFromPos(pos);
    reuse(entry,offset);
    if (!keyEquals(keyInterop,metaKeyInterop,key,keySize,entry))     continue;
    entry.skip(keySize);
    final long timeStampPosAddr=entry.positionAddr();
    if (shouldIgnore(entry,timestamp,identifier)) {
      return null;
    }
    boolean isDeleted=entry.readBoolean();
    if (replaceIfPresent || isDeleted) {
      entry.positionAddr(timeStampPosAddr);
      entry.writeLong(timestamp);
      entry.writeByte(identifier);
      entry.writeBoolean(false);
      RV prevValue=replaceValueAndNotifyPut(copies,segmentState,key,keySize,toKey,getValueInterops,value,toValue,entry,pos,offset,hashLookup,readValue,resultUnused,isDeleted,remote);
      if (isDeleted) {
        incrementSize();
        hashLookup.putPosition(segmentState.pos);
      }
      if (resultUnused)       return null;
      return isDeleted ? readValue.readNull() : prevValue;
    }
 else {
      long valueSize=readValueSize(entry);
      return resultUnused ? null : readValue.readValue(copies,entry,null,valueSize);
    }
  }
  VBI valueInterop=getValueInterops.getValueInterop(copies);
  MVBI metaValueInterop=getValueInterops.getMetaValueInterop(copies,valueInterop,value);
  long valueSize=metaValueInterop.size(valueInterop,value);
  putEntry(segmentState,metaKeyInterop,keyInterop,key,keySize,metaValueInterop,valueInterop,value,entry,false);
  entry.position(segmentState.valueSizePos - ADDITIONAL_ENTRY_BYTES);
  entry.writeLong(timestamp);
  entry.writeByte(identifier);
  entry.writeBoolean(false);
  onPutMaybeRemote(segmentState.pos,remote);
  if (bytesEventListener != null)   bytesEventListener.onPut(entry,0L,metaDataBytes,segmentState.valueSizePos,true);
  if (eventListener != null)   eventListener.onPut(toKey.toInstance(copies,key,keySize),toValue.toInstance(copies,value,valueSize),null);
  return resultUnused ? null : readValue.readNull();
}","private <KB,KBI,MKBI extends MetaBytesInterop<KB,? super KBI>,RV,VB extends RV,VBI,MVBI extends MetaBytesInterop<RV,? super VBI>>RV putWithoutLock(@Nullable ThreadLocalCopies copies,final @Nullable SegmentState segmentState,MKBI metaKeyInterop,KBI keyInterop,KB key,long keySize,InstanceOrBytesToInstance<KB,K> toKey,GetValueInterops<VB,VBI,MVBI> getValueInterops,VB value,InstanceOrBytesToInstance<? super VB,V> toValue,long hash2,boolean replaceIfPresent,ReadValue<RV> readValue,boolean resultUnused,byte identifier,long timestamp,boolean remote){
}",0.3388683886838868
162954,"ChronicleMap<K,V> createWithFile(File file,SingleChronicleHashReplication singleHashReplication,ReplicationChannel channel) throws IOException {
  pushingToMapEventListener();
  for (int i=0; i < 10; i++) {
    if (file.exists() && file.length() > 0) {
      try (FileInputStream fis=new FileInputStream(file);ObjectInputStream ois=new ObjectInputStream(fis)){
        XStream xStream=new XStream(new SunLimitedUnsafeReflectionProvider());
        VanillaChronicleMap<K,?,?,V,?,?> map=(VanillaChronicleMap<K,?,?,V,?,?>)xStream.fromXML(ois);
        map.headerSize=roundUpMapHeaderSize(fis.getChannel().position());
        map.createMappedStoreAndSegments(file);
        return establishReplication(map,singleHashReplication,channel);
      }
     }
    if (file.createNewFile() || file.length() == 0) {
      break;
    }
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      throw new IOException(e);
    }
  }
  if (!file.exists())   throw new FileNotFoundException(""String_Node_Str"" + file);
  VanillaChronicleMap<K,?,?,V,?,?> map=newMap(singleHashReplication,channel);
  try (FileOutputStream fos=new FileOutputStream(file);ObjectOutputStream oos=new ObjectOutputStream(fos)){
    XStream xStream=new XStream(new SunLimitedUnsafeReflectionProvider());
    xStream.toXML(map,oos);
    oos.flush();
    map.headerSize=roundUpMapHeaderSize(fos.getChannel().position());
    map.createMappedStoreAndSegments(file);
  }
   return establishReplication(map,singleHashReplication,channel);
}","ChronicleMap<K,V> createWithFile(File file,SingleChronicleHashReplication singleHashReplication,ReplicationChannel channel) throws IOException {
  pushingToMapEventListener();
  for (int i=0; i < 10; i++) {
    if (file.exists() && file.length() > 0) {
      try (FileInputStream fis=new FileInputStream(file);ObjectInputStream ois=new ObjectInputStream(fis)){
        XStream xStream=new XStream(new SunLimitedUnsafeReflectionProvider());
        VanillaChronicleMap<K,?,?,V,?,?> map=(VanillaChronicleMap<K,?,?,V,?,?>)xStream.fromXML(ois);
        map.headerSize=roundUpMapHeaderSize(fis.getChannel().position());
        map.createMappedStoreAndSegments(file);
        preMapConstruction(singleHashReplication != null || channel != null);
        return establishReplication(map,singleHashReplication,channel);
      }
     }
    if (file.createNewFile() || file.length() == 0) {
      break;
    }
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      throw new IOException(e);
    }
  }
  if (!file.exists())   throw new FileNotFoundException(""String_Node_Str"" + file);
  VanillaChronicleMap<K,?,?,V,?,?> map=newMap(singleHashReplication,channel);
  try (FileOutputStream fos=new FileOutputStream(file);ObjectOutputStream oos=new ObjectOutputStream(fos)){
    XStream xStream=new XStream(new SunLimitedUnsafeReflectionProvider());
    xStream.toXML(map,oos);
    oos.flush();
    map.headerSize=roundUpMapHeaderSize(fos.getChannel().position());
    map.createMappedStoreAndSegments(file);
  }
   return establishReplication(map,singleHashReplication,channel);
}",0.9749679075738126
162955,"@Nullable Work processStatelessEvent(final byte eventId,@NotNull final TcpReplicator.TcpSocketChannelEntryWriter writer,@NotNull final ByteBufferBytes reader){
  final StatelessChronicleMap.EventId event=VALUES[eventId];
  long transactionId=reader.readLong();
  long timestamp=transactionId / TcpReplicator.TIMESTAMP_FACTOR;
  byte identifier=reader.readByte();
  int headerSize=reader.readInt();
  reader.skip(headerSize);
switch (event) {
case KEY_SET:
    return keySet(reader,writer,transactionId);
case VALUES:
  return values(reader,writer,transactionId);
case ENTRY_SET:
return entrySet(reader,writer,transactionId);
case PUT_WITHOUT_ACC:
return put(reader,timestamp,identifier);
case PUT_ALL_WITHOUT_ACC:
return putAll(reader,timestamp,identifier);
case REMOVE_WITHOUT_ACC:
return remove(reader,timestamp,identifier);
}
final long sizeLocation=reflectTransactionId(writer.in(),transactionId);
switch (event) {
case LONG_SIZE:
return longSize(writer,sizeLocation);
case IS_EMPTY:
return isEmpty(writer,sizeLocation);
case CONTAINS_KEY:
return containsKey(reader,writer,sizeLocation);
case CONTAINS_VALUE:
return containsValue(reader,writer,sizeLocation);
case GET:
return get(reader,writer,sizeLocation,timestamp);
case PUT:
return put(reader,writer,sizeLocation,timestamp,identifier);
case REMOVE:
return remove(reader,writer,sizeLocation,timestamp,identifier);
case CLEAR:
return clear(writer,sizeLocation,timestamp,identifier);
case REPLACE:
return replace(reader,writer,sizeLocation,timestamp,identifier);
case REPLACE_WITH_OLD_AND_NEW_VALUE:
return replaceWithOldAndNew(reader,writer,sizeLocation,timestamp,identifier);
case PUT_IF_ABSENT:
return putIfAbsent(reader,writer,sizeLocation,timestamp,identifier);
case REMOVE_WITH_VALUE:
return removeWithValue(reader,writer,sizeLocation,timestamp,identifier);
case TO_STRING:
return toString(writer,sizeLocation);
case APPLICATION_VERSION:
return applicationVersion(writer,sizeLocation);
case PERSISTED_DATA_VERSION:
return persistedDataVersion(writer,sizeLocation);
case PUT_ALL:
return putAll(reader,writer,sizeLocation,timestamp,identifier);
case HASH_CODE:
return hashCode(writer,sizeLocation);
case MAP_FOR_KEY:
return mapForKey(reader,writer,sizeLocation);
case PUT_MAPPED:
return putMapped(reader,writer,sizeLocation);
case KEY_BUILDER:
return writeBuilder(writer,sizeLocation,map.keyBuilder);
case VALUE_BUILDER:
return writeBuilder(writer,sizeLocation,map.valueBuilder);
default :
throw new IllegalStateException(""String_Node_Str"" + event);
}
}","@Nullable Work processStatelessEvent(final byte eventId,@NotNull final TcpReplicator.TcpSocketChannelEntryWriter writer,@NotNull final ByteBufferBytes reader){
  final StatelessChronicleMap.EventId event=VALUES[eventId];
  long transactionId=reader.readLong();
  long timestamp=transactionId / TcpReplicator.TIMESTAMP_FACTOR;
  byte identifier=reader.readByte();
  int headerSize=reader.readInt();
  reader.skip(headerSize);
switch (event) {
case KEY_SET:
    return keySet(reader,writer,transactionId);
case VALUES:
  return values(reader,writer,transactionId);
case ENTRY_SET:
return entrySet(reader,writer,transactionId);
case PUT_WITHOUT_ACC:
return put(reader,timestamp,identifier);
case PUT_ALL_WITHOUT_ACC:
return putAll(reader,timestamp,identifier);
case REMOVE_WITHOUT_ACC:
return remove(reader,timestamp,identifier);
}
final long sizeLocation=reflectTransactionId(writer.in(),transactionId);
switch (event) {
case LONG_SIZE:
return longSize(writer,sizeLocation);
case IS_EMPTY:
return isEmpty(writer,sizeLocation);
case CONTAINS_KEY:
return containsKey(reader,writer,sizeLocation);
case CONTAINS_VALUE:
return containsValue(reader,writer,sizeLocation);
case GET:
return get(reader,writer,sizeLocation,timestamp);
case PUT:
return put(reader,writer,sizeLocation,timestamp,identifier);
case REMOVE:
return remove(reader,writer,sizeLocation,timestamp,identifier);
case CLEAR:
return clear(writer,sizeLocation,timestamp,identifier);
case REPLACE:
return replace(reader,writer,sizeLocation,timestamp,identifier);
case REPLACE_WITH_OLD_AND_NEW_VALUE:
return replaceWithOldAndNew(reader,writer,sizeLocation,timestamp,identifier);
case PUT_IF_ABSENT:
return putIfAbsent(reader,writer,sizeLocation,timestamp,identifier);
case REMOVE_WITH_VALUE:
return removeWithValue(reader,writer,sizeLocation,timestamp,identifier);
case TO_STRING:
return toString(writer,sizeLocation);
case APPLICATION_VERSION:
return applicationVersion(writer,sizeLocation);
case PERSISTED_DATA_VERSION:
return persistedDataVersion(writer,sizeLocation);
case PUT_ALL:
return putAll(reader,writer,sizeLocation,timestamp,identifier);
case HASH_CODE:
return hashCode(writer,sizeLocation);
case MAP_FOR_KEY:
return mapForKey(reader,writer,sizeLocation);
case PUT_MAPPED:
return putMapped(reader,writer,sizeLocation);
case KEY_BUILDER:
return writeBuilder(writer,sizeLocation,keySerializationBuilder);
case VALUE_BUILDER:
return writeBuilder(writer,sizeLocation,valueSerializationBuilder);
default :
throw new IllegalStateException(""String_Node_Str"" + event);
}
}",0.993256644188814
162956,"StatelessServerConnector(@NotNull VanillaChronicleMap<K,?,?,V,?,?> map,@NotNull final BufferResizer bufferResizer,int tcpBufferSize,final SerializationBuilder<K> keySerializationBuilder,final SerializationBuilder<V> valueSerializationBuilder){
  this.tcpBufferSize=tcpBufferSize;
  keyReaderWithSize=new ReaderWithSize<>(keySerializationBuilder);
  keyWriterWithSize=new WriterWithSize<>(keySerializationBuilder,bufferResizer);
  valueReaderWithSize=new ReaderWithSize<>(valueSerializationBuilder);
  valueWriterWithSize=new WriterWithSize<>(valueSerializationBuilder,bufferResizer);
  this.map=map;
}","StatelessServerConnector(@NotNull VanillaChronicleMap<K,?,?,V,?,?> map,@NotNull final BufferResizer bufferResizer,int tcpBufferSize,final SerializationBuilder<K> keySerializationBuilder,final SerializationBuilder<V> valueSerializationBuilder){
  this.tcpBufferSize=tcpBufferSize;
  this.keySerializationBuilder=keySerializationBuilder;
  this.valueSerializationBuilder=valueSerializationBuilder;
  keyReaderWithSize=new ReaderWithSize<>(keySerializationBuilder);
  keyWriterWithSize=new WriterWithSize<>(keySerializationBuilder,bufferResizer);
  valueReaderWithSize=new ReaderWithSize<>(valueSerializationBuilder);
  valueWriterWithSize=new WriterWithSize<>(valueSerializationBuilder,bufferResizer);
  this.map=map;
}",0.9119878603945372
162957,"public VanillaChronicleMap(ChronicleMapBuilder<K,V> builder) throws IOException {
  keyBuilder=builder.keyBuilder;
  kClass=keyBuilder.eClass;
  keySizeMarshaller=keyBuilder.sizeMarshaller();
  originalKeyReader=keyBuilder.reader();
  dataFileVersion=BuildVersion.version();
  jsonConverters=builder.jsonConverters();
  originalKeyInterop=(KI)keyBuilder.interop();
  originalMetaKeyInterop=(MKI)keyBuilder.metaInterop();
  metaKeyInteropProvider=(MetaProvider<K,KI,MKI>)keyBuilder.metaInteropProvider();
  valueBuilder=builder.valueBuilder;
  vClass=valueBuilder.eClass;
  if (vClass.getName().endsWith(""String_Node_Str"")) {
    nativeValueClass=vClass;
  }
 else   if (vClass.isInterface()) {
    Class nativeValueClass=null;
    try {
      nativeValueClass=DataValueClasses.directClassFor(vClass);
    }
 catch (    Exception e) {
    }
    this.nativeValueClass=nativeValueClass;
  }
 else {
    nativeValueClass=null;
  }
  valueSizeMarshaller=valueBuilder.sizeMarshaller();
  originalValueReader=valueBuilder.reader();
  originalValueInterop=(VI)valueBuilder.interop();
  originalMetaValueInterop=(MVI)valueBuilder.metaInterop();
  metaValueInteropProvider=(MetaProvider)valueBuilder.metaInteropProvider();
  defaultValueProvider=builder.defaultValueProvider();
  prepareValueBytesAsWriter=builder.prepareValueBytesAsWriter();
  lockTimeOutNS=builder.lockTimeOut(TimeUnit.NANOSECONDS);
  boolean replicated=getClass() == ReplicatedChronicleMap.class;
  this.chunkSize=builder.chunkSize(replicated);
  this.alignment=builder.valueAlignment();
  this.constantlySizedEntry=builder.constantlySizedEntries();
  this.worstAlignment=builder.worstAlignment(replicated);
  int alignment=this.alignment.alignment();
  this.couldNotDetermineAlignmentBeforeAllocation=greatestCommonDivisor((int)chunkSize,alignment) != alignment;
  this.specialEntrySpaceOffset=builder.specialEntrySpaceOffset(replicated);
  this.errorListener=builder.errorListener();
  this.putReturnsNull=builder.putReturnsNull();
  this.removeReturnsNull=builder.removeReturnsNull();
  this.actualSegments=builder.actualSegments(replicated);
  this.actualChunksPerSegment=builder.actualChunksPerSegment(replicated);
  this.entriesPerSegment=builder.entriesPerSegment(replicated);
  this.multiMapFactory=builder.multiMapFactory(replicated);
  this.metaDataBytes=builder.metaDataBytes();
  this.eventListener=builder.eventListener();
  this.bytesEventListener=builder.bytesEventListener();
  this.segmentHeaderSize=builder.segmentHeaderSize(replicated);
  this.maxChunksPerEntry=builder.maxChunksPerEntry();
  hashSplitting=HashSplitting.Splitting.forSegments(actualSegments);
  initTransients();
}","public VanillaChronicleMap(ChronicleMapBuilder<K,V> builder) throws IOException {
  SerializationBuilder<K> keyBuilder=builder.keyBuilder;
  kClass=keyBuilder.eClass;
  keySizeMarshaller=keyBuilder.sizeMarshaller();
  originalKeyReader=keyBuilder.reader();
  dataFileVersion=BuildVersion.version();
  jsonConverters=builder.jsonConverters();
  originalKeyInterop=(KI)keyBuilder.interop();
  originalMetaKeyInterop=(MKI)keyBuilder.metaInterop();
  metaKeyInteropProvider=(MetaProvider<K,KI,MKI>)keyBuilder.metaInteropProvider();
  SerializationBuilder<V> valueBuilder=builder.valueBuilder;
  vClass=valueBuilder.eClass;
  if (vClass.getName().endsWith(""String_Node_Str"")) {
    nativeValueClass=vClass;
  }
 else   if (vClass.isInterface()) {
    Class nativeValueClass=null;
    try {
      nativeValueClass=DataValueClasses.directClassFor(vClass);
    }
 catch (    Exception e) {
    }
    this.nativeValueClass=nativeValueClass;
  }
 else {
    nativeValueClass=null;
  }
  valueSizeMarshaller=valueBuilder.sizeMarshaller();
  originalValueReader=valueBuilder.reader();
  originalValueInterop=(VI)valueBuilder.interop();
  originalMetaValueInterop=(MVI)valueBuilder.metaInterop();
  metaValueInteropProvider=(MetaProvider)valueBuilder.metaInteropProvider();
  defaultValueProvider=builder.defaultValueProvider();
  prepareValueBytesAsWriter=builder.prepareValueBytesAsWriter();
  lockTimeOutNS=builder.lockTimeOut(TimeUnit.NANOSECONDS);
  boolean replicated=getClass() == ReplicatedChronicleMap.class;
  this.chunkSize=builder.chunkSize(replicated);
  this.alignment=builder.valueAlignment();
  this.constantlySizedEntry=builder.constantlySizedEntries();
  this.worstAlignment=builder.worstAlignment(replicated);
  int alignment=this.alignment.alignment();
  this.couldNotDetermineAlignmentBeforeAllocation=greatestCommonDivisor((int)chunkSize,alignment) != alignment;
  this.specialEntrySpaceOffset=builder.specialEntrySpaceOffset(replicated);
  this.errorListener=builder.errorListener();
  this.putReturnsNull=builder.putReturnsNull();
  this.removeReturnsNull=builder.removeReturnsNull();
  this.actualSegments=builder.actualSegments(replicated);
  this.actualChunksPerSegment=builder.actualChunksPerSegment(replicated);
  this.entriesPerSegment=builder.entriesPerSegment(replicated);
  this.multiMapFactory=builder.multiMapFactory(replicated);
  this.metaDataBytes=builder.metaDataBytes();
  this.eventListener=builder.eventListener();
  this.bytesEventListener=builder.bytesEventListener();
  this.segmentHeaderSize=builder.segmentHeaderSize(replicated);
  this.maxChunksPerEntry=builder.maxChunksPerEntry();
  hashSplitting=HashSplitting.Splitting.forSegments(actualSegments);
  initTransients();
}",0.9910581222056632
162958,"@Ignore(""String_Node_Str"") @Test public void testByteArrayKeySizeBySample() throws IOException {
  TcpTransportAndNetworkConfig serverConfig=TcpTransportAndNetworkConfig.of(8877).name(""String_Node_Str"");
  File mapFile=getPersistenceFile();
  for (int i=0; i < 2; i++) {
    try (ChronicleMap server=ChronicleMapBuilder.of(byte[].class,byte[][].class).replication((byte)1,serverConfig).constantKeySizeBySample(new byte[14]).createPersistedTo(mapFile)){
      try (ChronicleMap<byte[],byte[][]> map2=ChronicleMapBuilder.of(byte[].class,byte[][].class).constantKeySizeBySample(new byte[14]).statelessClient(new InetSocketAddress(""String_Node_Str"",8877)).create()){
        byte[] key=new byte[14];
        System.arraycopy(""String_Node_Str"".getBytes(),0,key,0,""String_Node_Str"".length());
        byte[][] value={new byte[11],new byte[11]};
        System.arraycopy(""String_Node_Str"".getBytes(),0,value[0],0,""String_Node_Str"".length());
        System.arraycopy(""String_Node_Str"".getBytes(),0,value[1],0,""String_Node_Str"".length());
        map2.put(key,value);
        Assert.assertNotNull(map2.get(key));
      }
     }
   }
}","@Test public void testByteArrayKeySizeBySample() throws IOException {
  TcpTransportAndNetworkConfig serverConfig=TcpTransportAndNetworkConfig.of(8877).name(""String_Node_Str"");
  File mapFile=getPersistenceFile();
  for (int i=0; i < 2; i++) {
    try (ChronicleMap server=ChronicleMapBuilder.of(byte[].class,byte[][].class).replication((byte)1,serverConfig).constantKeySizeBySample(new byte[14]).createPersistedTo(mapFile)){
      try (ChronicleMap<byte[],byte[][]> map2=ChronicleMapBuilder.of(byte[].class,byte[][].class).constantKeySizeBySample(new byte[14]).statelessClient(new InetSocketAddress(""String_Node_Str"",8877)).create()){
        byte[] key=new byte[14];
        System.arraycopy(""String_Node_Str"".getBytes(),0,key,0,""String_Node_Str"".length());
        byte[][] value={new byte[11],new byte[11]};
        System.arraycopy(""String_Node_Str"".getBytes(),0,value[0],0,""String_Node_Str"".length());
        System.arraycopy(""String_Node_Str"".getBytes(),0,value[1],0,""String_Node_Str"".length());
        map2.put(key,value);
        Assert.assertNotNull(map2.get(key));
      }
     }
   }
}",0.9878651685393258
162959,"@Override <KB,KBI,MKBI extends MetaBytesInterop<KB,? super KBI>,RV>RV acquireWithoutLock(@NotNull ThreadLocalCopies copies,@NotNull SegmentState segmentState,MKBI metaKeyInterop,KBI keyInterop,KB key,long keySize,InstanceOrBytesToInstance<KB,K> toKey,ReadValue<RV> readValue,RV usingValue,InstanceOrBytesToInstance<RV,V> toValue,long hash2,boolean create,MutableLockedEntry lock){
  MultiStoreBytes entry=segmentState.tmpBytes;
  MultiMap hashLookup=hashLookup();
  SearchState searchState=segmentState.searchState;
  hashLookup.startSearch(hash2,searchState);
  for (long pos; (pos=hashLookup.nextPos(searchState)) >= 0L; ) {
    long offset=offsetFromPos(pos);
    reuse(entry,offset);
    if (!keyEquals(keyInterop,metaKeyInterop,key,keySize,entry))     continue;
    entry.skip(keySize);
    entry.skip(ADDITIONAL_ENTRY_BYTES - 1L);
    boolean isDeleted=entry.readBoolean();
    if (isDeleted) {
      if (!create)       return readValue.readNull();
      long valueSizePos=entry.position();
      entry.position(valueSizePos - ADDITIONAL_ENTRY_BYTES);
      entry.writeLong(currentTime());
      entry.writeByte(localIdentifier);
      entry.writeBoolean(false);
      long prevValueSize=readValueSize(entry);
      long valueAddr=entry.positionAddr();
      long entryEndAddr=valueAddr + prevValueSize;
      K keyInstance=toKey.toInstance(copies,key,keySize);
      MetaBytesWriter metaElemWriter;
      Object elemWriter;
      Object elem;
      if (defaultValueProvider != null) {
        V defaultValue=defaultValueProvider.get(keyInstance);
        elem=defaultValue;
        VI valueInterop=valueInteropProvider.get(copies,originalValueInterop);
        elemWriter=valueInterop;
        metaElemWriter=metaValueInteropProvider.get(copies,originalMetaValueInterop,valueInterop,defaultValue);
      }
 else       if (prepareValueBytesAsWriter != null) {
        elem=keyInstance;
        elemWriter=null;
        metaElemWriter=prepareValueBytesAsWriter;
      }
 else {
        throw defaultValueOrPrepareBytesShouldBeSpecified();
      }
      putValue(pos,offset,entry,valueSizePos,entryEndAddr,segmentState,metaElemWriter,elemWriter,elem,metaElemWriter.size(elemWriter,elem),hashLookup);
      pos=segmentState.pos;
      incrementSize();
      hashLookup.putPosition(pos);
      entry.position(valueSizePos);
      long valueSize=readValueSize(entry);
      long valuePos=entry.position();
      RV v=readValue.readValue(copies,entry,usingValue,valueSize);
      onPut(this,pos);
      if (bytesEventListener != null) {
        bytesEventListener.onPut(entry,0L,metaDataBytes,valuePos,true);
      }
      if (eventListener != null) {
        V valueInstance=toValue.toInstance(copies,v,valueSize);
        eventListener.onPut(keyInstance,valueInstance,null);
      }
      return v;
    }
 else {
      segmentState.pos=pos;
      return readValueAndNotifyGet(copies,key,keySize,toKey,readValue,usingValue,toValue,entry);
    }
  }
  if (!create)   return readValue.readNull();
  RV result=createEntryOnAcquire(copies,segmentState,metaKeyInterop,keyInterop,key,keySize,toKey,readValue,usingValue,toValue,entry);
  if (lock instanceof WriteLocked)   ((WriteLocked)lock).created(false);
  return result;
}","@Override <KB,KBI,MKBI extends MetaBytesInterop<KB,? super KBI>,RV>RV acquireWithoutLock(@NotNull ThreadLocalCopies copies,@NotNull SegmentState segmentState,MKBI metaKeyInterop,KBI keyInterop,KB key,long keySize,InstanceOrBytesToInstance<KB,K> toKey,ReadValue<RV> readValue,RV usingValue,InstanceOrBytesToInstance<RV,V> toValue,long hash2,boolean create,MutableLockedEntry lock){
  MultiStoreBytes entry=segmentState.tmpBytes;
  MultiMap hashLookup=hashLookup();
  SearchState searchState=segmentState.searchState;
  hashLookup.startSearch(hash2,searchState);
  for (long pos; (pos=hashLookup.nextPos(searchState)) >= 0L; ) {
    long offset=offsetFromPos(pos);
    reuse(entry,offset);
    if (!keyEquals(keyInterop,metaKeyInterop,key,keySize,entry))     continue;
    entry.skip(keySize);
    entry.skip(ADDITIONAL_ENTRY_BYTES - 1L);
    boolean isDeleted=entry.readBoolean();
    if (isDeleted) {
      if (!create)       return readValue.readNull();
      long valueSizePos=entry.position();
      entry.position(valueSizePos - ADDITIONAL_ENTRY_BYTES);
      entry.writeLong(currentTime());
      entry.writeByte(localIdentifier);
      entry.writeBoolean(false);
      long prevValueSize=valueSizeMarshaller.readSize(entry);
      long sizeOfEverythingBeforeValue=entry.position();
      alignment.alignPositionAddr(entry);
      long valueAddr=entry.positionAddr();
      long entryEndAddr=valueAddr + prevValueSize;
      K keyInstance=toKey.toInstance(copies,key,keySize);
      MetaBytesWriter metaElemWriter;
      Object elemWriter;
      Object elem;
      if (defaultValueProvider != null) {
        V defaultValue=defaultValueProvider.get(keyInstance);
        elem=defaultValue;
        VI valueInterop=valueInteropProvider.get(copies,originalValueInterop);
        elemWriter=valueInterop;
        metaElemWriter=metaValueInteropProvider.get(copies,originalMetaValueInterop,valueInterop,defaultValue);
      }
 else       if (prepareValueBytesAsWriter != null) {
        elem=keyInstance;
        elemWriter=null;
        metaElemWriter=prepareValueBytesAsWriter;
      }
 else {
        throw defaultValueOrPrepareBytesShouldBeSpecified();
      }
      putValue(pos,offset,entry,valueSizePos,entryEndAddr,segmentState,metaElemWriter,elemWriter,elem,metaElemWriter.size(elemWriter,elem),hashLookup,sizeOfEverythingBeforeValue);
      pos=segmentState.pos;
      incrementSize();
      hashLookup.putPosition(pos);
      entry.position(valueSizePos);
      long valueSize=readValueSize(entry);
      long valuePos=entry.position();
      RV v=readValue.readValue(copies,entry,usingValue,valueSize);
      onPut(this,pos);
      if (bytesEventListener != null) {
        bytesEventListener.onPut(entry,0L,metaDataBytes,valuePos,true);
      }
      if (eventListener != null) {
        V valueInstance=toValue.toInstance(copies,v,valueSize);
        eventListener.onPut(keyInstance,valueInstance,null);
      }
      return v;
    }
 else {
      segmentState.pos=pos;
      return readValueAndNotifyGet(copies,key,keySize,toKey,readValue,usingValue,toValue,entry);
    }
  }
  if (!create)   return readValue.readNull();
  RV result=createEntryOnAcquire(copies,segmentState,metaKeyInterop,keyInterop,key,keySize,toKey,readValue,usingValue,toValue,entry);
  if (lock instanceof WriteLocked)   ((WriteLocked)lock).created(false);
  return result;
}",0.976913730255164
162960,"/** 
 * Returns value size, writes the entry (key, value, sizes) to the entry, after this method call entry positioned after value bytes written (i. e. at the end of entry), sets entry position (in segment) and value size position in the given segmentState
 */
final <KB,KBI,MKBI extends MetaBytesInterop<KB,? super KBI>,E,EW>long putEntry(SegmentState segmentState,MKBI metaKeyInterop,KBI keyInterop,KB key,long keySize,MetaBytesWriter<E,? super EW> metaElemWriter,EW elemWriter,E elem,MultiStoreBytes entry,boolean writeDefaultInitialReplicationValues){
  long valueSize=metaElemWriter.size(elemWriter,elem);
  long entrySize=entrySize(keySize,valueSize);
  long pos=alloc(inChunks(entrySize));
  segmentState.pos=pos;
  long offset=offsetFromPos(pos);
  clearMetaData(offset);
  reuse(entry,offset);
  keySizeMarshaller.writeSize(entry,keySize);
  metaKeyInterop.write(keyInterop,entry,key);
  manageReplicationBytes(entry,writeDefaultInitialReplicationValues,false);
  segmentState.valueSizePos=entry.position();
  valueSizeMarshaller.writeSize(entry,valueSize);
  alignment.alignPositionAddr(entry);
  metaElemWriter.write(elemWriter,entry,elem);
  hashLookup.putAfterFailedSearch(segmentState.searchState,pos);
  incrementSize();
  return valueSize;
}","/** 
 * Returns value size, writes the entry (key, value, sizes) to the entry, after this method call entry positioned after value bytes written (i. e. at the end of entry), sets entry position (in segment) and value size position in the given segmentState
 */
final <KB,KBI,MKBI extends MetaBytesInterop<KB,? super KBI>,E,EW>long putEntry(SegmentState segmentState,MKBI metaKeyInterop,KBI keyInterop,KB key,long keySize,MetaBytesWriter<E,? super EW> metaElemWriter,EW elemWriter,E elem,MultiStoreBytes entry,boolean writeDefaultInitialReplicationValues){
  long valueSize=metaElemWriter.size(elemWriter,elem);
  long entrySize=entrySize(keySize,valueSize);
  int allocatedChunks=inChunks(entrySize);
  long pos=alloc(allocatedChunks);
  segmentState.pos=pos;
  long offset=offsetFromPos(pos);
  clearMetaData(offset);
  reuse(entry,offset);
  keySizeMarshaller.writeSize(entry,keySize);
  metaKeyInterop.write(keyInterop,entry,key);
  manageReplicationBytes(entry,writeDefaultInitialReplicationValues,false);
  segmentState.valueSizePos=entry.position();
  valueSizeMarshaller.writeSize(entry,valueSize);
  alignment.alignPositionAddr(entry);
  metaElemWriter.write(elemWriter,entry,elem);
  freeExtraAllocatedChunks(pos,allocatedChunks,entry);
  hashLookup.putAfterFailedSearch(segmentState.searchState,pos);
  incrementSize();
  return valueSize;
}",0.9486196319018404
162961,"/** 
 * Replaces value in existing entry. May cause entry relocation, because there may be not enough space for new value in location already allocated for this entry.
 * @param pos          index of the first chunk occupied by the entry
 * @param offset       relative offset of the entry in Segment bytes (before, i. e.including metaData)
 * @param entry        relative pointer in Segment bytes
 * @param valueSizePos relative position of value size in entry
 * @param entryEndAddr absolute address of the entry end
 * @return relative offset of the entry in Segment bytes after putting value (that may causeentry relocation)
 */
final <E,EW>long putValue(long pos,long offset,MultiStoreBytes entry,long valueSizePos,long entryEndAddr,SegmentState segmentState,MetaBytesWriter<E,? super EW> metaElemWriter,EW elemWriter,E newElem,long newElemSize,MultiMap searchedHashLookup){
  long entryStartAddr=entry.address();
  long valueSizeAddr=entryStartAddr + valueSizePos;
  long newValueAddr=alignment.alignAddr(valueSizeAddr + valueSizeMarshaller.sizeEncodingSize(newElemSize));
  long newEntryEndAddr=newValueAddr + newElemSize;
  newValueDoesNotFit:   if (newEntryEndAddr != entryEndAddr) {
    long oldEntrySize=entryEndAddr - entryStartAddr;
    int oldSizeInChunks=inChunks(oldEntrySize);
    int newSizeInChunks=inChunks(newEntryEndAddr - entryStartAddr);
    if (newSizeInChunks > oldSizeInChunks) {
      if (newSizeInChunks > maxChunksPerEntry) {
        throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + newSizeInChunks + ""String_Node_Str""+ maxChunksPerEntry+ ""String_Node_Str"");
      }
      if (realloc(pos,oldSizeInChunks,newSizeInChunks))       break newValueDoesNotFit;
      free(pos,oldSizeInChunks);
      onRelocation(this,pos);
      pos=alloc(newSizeInChunks);
      searchedHashLookup.replacePrevPos(segmentState.searchState,pos);
      offset=offsetFromPos(pos);
      long newEntryStartAddr=entry.address();
      NativeBytes.UNSAFE.copyMemory(entryStartAddr,newEntryStartAddr,valueSizeAddr - entryStartAddr);
      entry=reuse(entry,offset);
    }
 else     if (newSizeInChunks < oldSizeInChunks) {
      freeList.clear(pos + newSizeInChunks,pos + oldSizeInChunks);
    }
  }
  entry.position(valueSizePos);
  valueSizeMarshaller.writeSize(entry,newElemSize);
  alignment.alignPositionAddr(entry);
  metaElemWriter.write(elemWriter,entry,newElem);
  segmentState.pos=pos;
  return offset;
}","/** 
 * Replaces value in existing entry. May cause entry relocation, because there may be not enough space for new value in location already allocated for this entry.
 * @param pos          index of the first chunk occupied by the entry
 * @param offset       relative offset of the entry in Segment bytes (before, i. e.including metaData)
 * @param entry        relative pointer in Segment bytes
 * @param valueSizePos relative position of value size in entry
 * @param entryEndAddr absolute address of the entry end
 * @return relative offset of the entry in Segment bytes after putting value (that may causeentry relocation)
 */
final <E,EW>long putValue(long pos,long offset,MultiStoreBytes entry,long valueSizePos,long entryEndAddr,SegmentState segmentState,MetaBytesWriter<E,? super EW> metaElemWriter,EW elemWriter,E newElem,long newElemSize,MultiMap searchedHashLookup,long sizeOfEverythingBeforeValue){
  long entryStartAddr=entry.address();
  long valueSizeAddr=entryStartAddr + valueSizePos;
  long newValueAddr=alignment.alignAddr(valueSizeAddr + valueSizeMarshaller.sizeEncodingSize(newElemSize));
  long newEntryEndAddr=newValueAddr + newElemSize;
  newValueDoesNotFit:   if (newEntryEndAddr != entryEndAddr) {
    long oldEntrySize=entryEndAddr - entryStartAddr;
    int oldSizeInChunks=inChunks(oldEntrySize);
    int newSizeInChunks=inChunks(newEntryEndAddr - entryStartAddr);
    if (newSizeInChunks > oldSizeInChunks) {
      if (newSizeInChunks > maxChunksPerEntry) {
        throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + newSizeInChunks + ""String_Node_Str""+ maxChunksPerEntry+ ""String_Node_Str"");
      }
      if (realloc(pos,oldSizeInChunks,newSizeInChunks))       break newValueDoesNotFit;
      free(pos,oldSizeInChunks);
      onRelocation(this,pos);
      int allocatedChunks=inChunks(innerEntrySize(sizeOfEverythingBeforeValue,newElemSize));
      pos=alloc(allocatedChunks);
      searchedHashLookup.replacePrevPos(segmentState.searchState,pos);
      offset=offsetFromPos(pos);
      long newEntryStartAddr=entry.address();
      NativeBytes.UNSAFE.copyMemory(entryStartAddr,newEntryStartAddr,valueSizeAddr - entryStartAddr);
      entry=reuse(entry,offset);
      entry.position(valueSizePos);
      valueSizeMarshaller.writeSize(entry,newElemSize);
      alignment.alignPositionAddr(entry);
      metaElemWriter.write(elemWriter,entry,newElem);
      freeExtraAllocatedChunks(pos,allocatedChunks,entry);
      segmentState.pos=pos;
      return offset;
    }
 else     if (newSizeInChunks < oldSizeInChunks) {
      freeList.clear(pos + newSizeInChunks,pos + oldSizeInChunks);
    }
  }
  entry.position(valueSizePos);
  valueSizeMarshaller.writeSize(entry,newElemSize);
  alignment.alignPositionAddr(entry);
  metaElemWriter.write(elemWriter,entry,newElem);
  segmentState.pos=pos;
  return offset;
}",0.916289592760181
162962,"final <KB,RV,VB extends RV,VBI,MVBI extends MetaBytesInterop<RV,? super VBI>>Object onKeyPresentOnReplace(ThreadLocalCopies copies,@NotNull SegmentState segmentState,KB key,long keySize,InstanceOrBytesToInstance<KB,K> toKey,GetValueInterops<VB,VBI,MVBI> getExpectedValueInterops,VB expectedValue,GetValueInterops<VB,VBI,MVBI> getNewValueInterops,VB newValue,ReadValue<RV> readValue,InstanceOrBytesToInstance<? super RV,V> toValue,long pos,long offset,MultiStoreBytes entry,MultiMap searchedHashLookup){
  long valueSizePos=entry.position();
  long valueSize=readValueSize(entry);
  long entryEndAddr=entry.positionAddr() + valueSize;
  RV prevValue;
  if (expectedValue != null) {
    VBI valueInterop=getExpectedValueInterops.getValueInterop(copies);
    MVBI metaValueInterop=getExpectedValueInterops.getMetaValueInterop(copies,valueInterop,expectedValue);
    if (metaValueInterop.size(valueInterop,expectedValue) != valueSize)     return Boolean.FALSE;
    if (!metaValueInterop.startsWith(valueInterop,entry,expectedValue))     return Boolean.FALSE;
    prevValue=expectedValue;
  }
 else {
    prevValue=readValue.readValue(copies,entry,null,valueSize);
  }
  VBI valueInterop=getNewValueInterops.getValueInterop(copies);
  MVBI metaValueInterop=getNewValueInterops.getMetaValueInterop(copies,valueInterop,newValue);
  long newValueSize=metaValueInterop.size(valueInterop,newValue);
  putValue(pos,offset,entry,valueSizePos,entryEndAddr,segmentState,metaValueInterop,valueInterop,newValue,newValueSize,searchedHashLookup);
  onPut(this,segmentState.pos);
  if (bytesEventListener != null) {
    long keyPos=metaDataBytes;
    bytesEventListener.onPut(entry,0L,keyPos,segmentState.valueSizePos,true);
  }
  if (eventListener != null)   eventListener.onPut(toKey.toInstance(copies,key,keySize),toValue.toInstance(copies,newValue,newValueSize),toValue.toInstance(copies,prevValue,valueSize));
  return expectedValue == null ? prevValue : Boolean.TRUE;
}","final <KB,RV,VB extends RV,VBI,MVBI extends MetaBytesInterop<RV,? super VBI>>Object onKeyPresentOnReplace(ThreadLocalCopies copies,@NotNull SegmentState segmentState,KB key,long keySize,InstanceOrBytesToInstance<KB,K> toKey,GetValueInterops<VB,VBI,MVBI> getExpectedValueInterops,VB expectedValue,GetValueInterops<VB,VBI,MVBI> getNewValueInterops,VB newValue,ReadValue<RV> readValue,InstanceOrBytesToInstance<? super RV,V> toValue,long pos,long offset,MultiStoreBytes entry,MultiMap searchedHashLookup){
  long valueSizePos=entry.position();
  long valueSize=valueSizeMarshaller.readSize(entry);
  long sizeOfEverythingBeforeValue=entry.position();
  alignment.alignPositionAddr(entry);
  long entryEndAddr=entry.positionAddr() + valueSize;
  RV prevValue;
  if (expectedValue != null) {
    VBI valueInterop=getExpectedValueInterops.getValueInterop(copies);
    MVBI metaValueInterop=getExpectedValueInterops.getMetaValueInterop(copies,valueInterop,expectedValue);
    if (metaValueInterop.size(valueInterop,expectedValue) != valueSize)     return Boolean.FALSE;
    if (!metaValueInterop.startsWith(valueInterop,entry,expectedValue))     return Boolean.FALSE;
    prevValue=expectedValue;
  }
 else {
    prevValue=readValue.readValue(copies,entry,null,valueSize);
  }
  VBI valueInterop=getNewValueInterops.getValueInterop(copies);
  MVBI metaValueInterop=getNewValueInterops.getMetaValueInterop(copies,valueInterop,newValue);
  long newValueSize=metaValueInterop.size(valueInterop,newValue);
  putValue(pos,offset,entry,valueSizePos,entryEndAddr,segmentState,metaValueInterop,valueInterop,newValue,newValueSize,searchedHashLookup,sizeOfEverythingBeforeValue);
  onPut(this,segmentState.pos);
  if (bytesEventListener != null) {
    long keyPos=metaDataBytes;
    bytesEventListener.onPut(entry,0L,keyPos,segmentState.valueSizePos,true);
  }
  if (eventListener != null)   eventListener.onPut(toKey.toInstance(copies,key,keySize),toValue.toInstance(copies,newValue,newValueSize),toValue.toInstance(copies,prevValue,valueSize));
  return expectedValue == null ? prevValue : Boolean.TRUE;
}",0.9644092931290164
162963,"final <KB,RV,VB extends RV,VBI,MVBI extends MetaBytesInterop<RV,? super VBI>>RV replaceValueAndNotifyPut(ThreadLocalCopies copies,SegmentState segmentState,KB key,long keySize,InstanceOrBytesToInstance<KB,K> toKey,GetValueInterops<VB,VBI,MVBI> getValueInterops,VB value,InstanceOrBytesToInstance<? super VB,V> toValue,MultiStoreBytes entry,long pos,long offset,MultiMap searchedHashLookup,ReadValue<RV> readValue,boolean resultUnused,boolean entryIsDeleted,boolean remote){
  VBI valueInterop=getValueInterops.getValueInterop(copies);
  MVBI metaValueInterop=getValueInterops.getMetaValueInterop(copies,valueInterop,value);
  long valueSize=metaValueInterop.size(valueInterop,value);
  long valueSizePos=entry.position();
  long prevValueSize=readValueSize(entry);
  long valueAddr=entry.positionAddr();
  long entryEndAddr=valueAddr + prevValueSize;
  RV prevValue=null;
  V prevValueInstance=null;
  if (!resultUnused && !entryIsDeleted)   prevValue=readValue.readValue(copies,entry,null,prevValueSize);
  if (eventListener != null && !entryIsDeleted) {
    entry.positionAddr(valueAddr);
    prevValueInstance=readValue(copies,entry,null,prevValueSize);
  }
  putValue(pos,offset,entry,valueSizePos,entryEndAddr,segmentState,metaValueInterop,valueInterop,value,valueSize,searchedHashLookup);
  onPutMaybeRemote(segmentState.pos,remote);
  if (bytesEventListener != null)   bytesEventListener.onPut(entry,0L,metaDataBytes,valueSizePos,false);
  if (eventListener != null) {
    eventListener.onPut(toKey.toInstance(copies,key,keySize),toValue.toInstance(copies,value,valueSize),prevValueInstance);
  }
  return resultUnused ? null : prevValue;
}","final <KB,RV,VB extends RV,VBI,MVBI extends MetaBytesInterop<RV,? super VBI>>RV replaceValueAndNotifyPut(ThreadLocalCopies copies,SegmentState segmentState,KB key,long keySize,InstanceOrBytesToInstance<KB,K> toKey,GetValueInterops<VB,VBI,MVBI> getValueInterops,VB value,InstanceOrBytesToInstance<? super VB,V> toValue,MultiStoreBytes entry,long pos,long offset,MultiMap searchedHashLookup,ReadValue<RV> readValue,boolean resultUnused,boolean entryIsDeleted,boolean remote){
  VBI valueInterop=getValueInterops.getValueInterop(copies);
  MVBI metaValueInterop=getValueInterops.getMetaValueInterop(copies,valueInterop,value);
  long valueSize=metaValueInterop.size(valueInterop,value);
  long valueSizePos=entry.position();
  long prevValueSize=valueSizeMarshaller.readSize(entry);
  long sizeOfEverythingBeforeValue=entry.position();
  alignment.alignPositionAddr(entry);
  long valueAddr=entry.positionAddr();
  long entryEndAddr=valueAddr + prevValueSize;
  RV prevValue=null;
  V prevValueInstance=null;
  if (!resultUnused && !entryIsDeleted)   prevValue=readValue.readValue(copies,entry,null,prevValueSize);
  if (eventListener != null && !entryIsDeleted) {
    entry.positionAddr(valueAddr);
    prevValueInstance=readValue(copies,entry,null,prevValueSize);
  }
  putValue(pos,offset,entry,valueSizePos,entryEndAddr,segmentState,metaValueInterop,valueInterop,value,valueSize,searchedHashLookup,sizeOfEverythingBeforeValue);
  onPutMaybeRemote(segmentState.pos,remote);
  if (bytesEventListener != null)   bytesEventListener.onPut(entry,0L,metaDataBytes,valueSizePos,false);
  if (eventListener != null) {
    eventListener.onPut(toKey.toInstance(copies,key,keySize),toValue.toInstance(copies,value,valueSize),prevValueInstance);
  }
  return resultUnused ? null : prevValue;
}",0.9579929988331388
162964,"@Override public void close(){
  if (putOnClose) {
    long pos=segmentState.pos;
    long offset=segment.offsetFromPos(pos);
    MultiStoreBytes entry=segment.reuse(segmentState.tmpBytes,offset);
    long keySize=map.keySizeMarshaller.readSize(entry);
    entry.skip(keySize);
    segment.manageReplicationBytes(entry,true,false);
    long valueSizePos=entry.position();
    long valueSize=map.readValueSize(entry);
    long entryEndAddr=entry.positionAddr() + valueSize;
    VI valueInterop=map.valueInteropProvider.get(copies,map.originalValueInterop);
    V value=value();
    MVI metaValueInterop=map.metaValueInteropProvider.get(copies,map.originalMetaValueInterop,valueInterop,value);
    long newValueSize=metaValueInterop.size(valueInterop,value);
    segment.putValue(pos,offset,entry,valueSizePos,entryEndAddr,segmentState,metaValueInterop,valueInterop,value,newValueSize,segment.hashLookup());
    map.onPut(segment,segmentState.pos);
  }
  putOnClose=true;
  segmentState.close();
  segment.writeUnlock();
}","@Override public void close(){
  if (putOnClose) {
    long pos=segmentState.pos;
    long offset=segment.offsetFromPos(pos);
    MultiStoreBytes entry=segment.reuse(segmentState.tmpBytes,offset);
    long keySize=map.keySizeMarshaller.readSize(entry);
    entry.skip(keySize);
    segment.manageReplicationBytes(entry,true,false);
    long valueSizePos=entry.position();
    long valueSize=map.valueSizeMarshaller.readSize(entry);
    long sizeOfEverythingBeforeValue=entry.position();
    map.alignment.alignPositionAddr(entry);
    long entryEndAddr=entry.positionAddr() + valueSize;
    VI valueInterop=map.valueInteropProvider.get(copies,map.originalValueInterop);
    V value=value();
    MVI metaValueInterop=map.metaValueInteropProvider.get(copies,map.originalMetaValueInterop,valueInterop,value);
    long newValueSize=metaValueInterop.size(valueInterop,value);
    segment.putValue(pos,offset,entry,valueSizePos,entryEndAddr,segmentState,metaValueInterop,valueInterop,value,newValueSize,segment.hashLookup(),sizeOfEverythingBeforeValue);
    map.onPut(segment,segmentState.pos);
  }
  putOnClose=true;
  segmentState.close();
  segment.writeUnlock();
}",0.923006416131989
162965,"final long entrySize(long keySize,long valueSize){
  long sizeOfEverythingBeforeValue=sizeOfEverythingBeforeValue(keySize,valueSize);
  if (constantlySizedEntry) {
    return alignment.alignAddr(sizeOfEverythingBeforeValue + valueSize);
  }
 else   if (couldNotDetermineAlignmentBeforeAllocation) {
    return sizeOfEverythingBeforeValue + worstAlignment + valueSize;
  }
 else {
    return alignment.alignAddr(sizeOfEverythingBeforeValue) + valueSize;
  }
}","final long entrySize(long keySize,long valueSize){
  long sizeOfEverythingBeforeValue=sizeOfEverythingBeforeValue(keySize,valueSize);
  return innerEntrySize(sizeOfEverythingBeforeValue,valueSize);
}",0.578386605783866
162966,"@Override public Object unmarshal(HierarchicalStreamReader reader,UnmarshallingContext context){
  reader.moveDown();
  if (!""String_Node_Str"".equals(reader.getNodeName()))   throw new ConversionException(""String_Node_Str"" + reader.getNodeName());
  while (reader.hasMoreChildren()) {
    reader.moveDown();
    final String nodeName0=reader.getNodeName();
    if (!nodeName0.equals(""String_Node_Str""))     throw new ConversionException(""String_Node_Str"" + nodeName0);
    final K k;
    final V v;
    reader.moveDown();
    k=deserialize(context,reader);
    reader.moveUp();
    reader.moveDown();
    v=deserialize(context,reader);
    reader.moveUp();
    if (k != null)     map.put(k,v);
    reader.moveUp();
  }
  reader.moveUp();
  return null;
}","@Override public Object unmarshal(HierarchicalStreamReader reader,UnmarshallingContext context){
  if (""String_Node_Str"".equals(reader.getValue()))   return null;
  if (!""String_Node_Str"".equals(reader.getNodeName()))   throw new ConversionException(""String_Node_Str"");
  reader.moveDown();
  while (reader.hasMoreChildren()) {
    reader.moveDown();
    final String nodeName0=reader.getNodeName();
    if (!nodeName0.equals(""String_Node_Str""))     throw new ConversionException(""String_Node_Str"" + nodeName0);
    final K k;
    final V v;
    reader.moveDown();
    k=deserialize(context,reader);
    reader.moveUp();
    reader.moveDown();
    v=deserialize(context,reader);
    reader.moveUp();
    if (k != null)     map.put(k,v);
    reader.moveUp();
  }
  reader.moveUp();
  return null;
}",0.920696324951644
162967,"@Override <KB,KBI,MKBI extends MetaBytesInterop<KB,? super KBI>,RV>RV acquireWithoutLock(@NotNull ThreadLocalCopies copies,@NotNull SegmentState segmentState,MKBI metaKeyInterop,KBI keyInterop,KB key,long keySize,InstanceOrBytesToInstance<KB,K> toKey,ReadValue<RV> readValue,RV usingValue,InstanceOrBytesToInstance<RV,V> toValue,long hash2,boolean create,MutableLockedEntry lock){
  MultiStoreBytes entry=segmentState.tmpBytes;
  MultiMap hashLookup=hashLookup();
  SearchState searchState=segmentState.searchState;
  hashLookup.startSearch(hash2,searchState);
  for (long pos; (pos=hashLookup.nextPos(searchState)) >= 0L; ) {
    long offset=offsetFromPos(pos);
    reuse(entry,offset);
    if (!keyEquals(keyInterop,metaKeyInterop,key,keySize,entry))     continue;
    entry.skip(keySize);
    entry.skip(ADDITIONAL_ENTRY_BYTES - 1L);
    boolean isDeleted=entry.readBoolean();
    if (isDeleted) {
      if (!create)       return readValue.readNull();
      long valueSizePos=entry.position();
      entry.position(valueSizePos - ADDITIONAL_ENTRY_BYTES);
      entry.writeLong(currentTime());
      entry.writeByte(localIdentifier);
      entry.writeBoolean(false);
      long prevValueSize=readValueSize(entry);
      long valueAddr=entry.positionAddr();
      long entryEndAddr=valueAddr + prevValueSize;
      K keyInstance=toKey.toInstance(copies,key,keySize);
      MetaBytesWriter metaElemWriter;
      Object elemWriter;
      Object elem;
      if (defaultValueProvider != null) {
        V defaultValue=defaultValueProvider.get(keyInstance);
        elem=defaultValue;
        VI valueInterop=valueInteropProvider.get(copies,originalValueInterop);
        elemWriter=valueInterop;
        metaElemWriter=metaValueInteropProvider.get(copies,originalMetaValueInterop,valueInterop,defaultValue);
      }
 else       if (prepareValueBytesAsWriter != null) {
        elem=keyInstance;
        elemWriter=null;
        metaElemWriter=prepareValueBytesAsWriter;
      }
 else {
        throw defaultValueOrPrepareBytesShouldBeSpecified();
      }
      putValue(pos,offset,entry,valueSizePos,entryEndAddr,segmentState,metaElemWriter,elemWriter,elem,metaElemWriter.size(elemWriter,elem),hashLookup);
      pos=segmentState.pos;
      incrementSize();
      hashLookup.putPosition(pos);
      entry.position(valueSizePos);
      long valueSize=readValueSize(entry);
      long valuePos=entry.position();
      RV v=readValue.readValue(copies,entry,usingValue,valueSize);
      onPut(this,pos);
      if (bytesEventListener != null) {
        bytesEventListener.onPut(entry,0L,metaDataBytes,valuePos,true);
      }
      if (eventListener != null) {
        V valueInstance=toValue.toInstance(copies,v,valueSize);
        eventListener.onPut(keyInstance,valueInstance,null);
      }
      return v;
    }
 else {
      return readValueAndNotifyGet(copies,key,keySize,toKey,readValue,usingValue,toValue,entry);
    }
  }
  if (!create)   return readValue.readNull();
  RV result=createEntryOnAcquire(copies,segmentState,metaKeyInterop,keyInterop,key,keySize,toKey,readValue,usingValue,toValue,entry);
  if (lock instanceof WriteLocked)   ((WriteLocked)lock).created(false);
  return result;
}","@Override <KB,KBI,MKBI extends MetaBytesInterop<KB,? super KBI>,RV>RV acquireWithoutLock(@NotNull ThreadLocalCopies copies,@NotNull SegmentState segmentState,MKBI metaKeyInterop,KBI keyInterop,KB key,long keySize,InstanceOrBytesToInstance<KB,K> toKey,ReadValue<RV> readValue,RV usingValue,InstanceOrBytesToInstance<RV,V> toValue,long hash2,boolean create,MutableLockedEntry lock){
  MultiStoreBytes entry=segmentState.tmpBytes;
  MultiMap hashLookup=hashLookup();
  SearchState searchState=segmentState.searchState;
  hashLookup.startSearch(hash2,searchState);
  for (long pos; (pos=hashLookup.nextPos(searchState)) >= 0L; ) {
    long offset=offsetFromPos(pos);
    reuse(entry,offset);
    if (!keyEquals(keyInterop,metaKeyInterop,key,keySize,entry))     continue;
    entry.skip(keySize);
    entry.skip(ADDITIONAL_ENTRY_BYTES - 1L);
    boolean isDeleted=entry.readBoolean();
    if (isDeleted) {
      if (!create)       return readValue.readNull();
      long valueSizePos=entry.position();
      entry.position(valueSizePos - ADDITIONAL_ENTRY_BYTES);
      entry.writeLong(currentTime());
      entry.writeByte(localIdentifier);
      entry.writeBoolean(false);
      long prevValueSize=readValueSize(entry);
      long valueAddr=entry.positionAddr();
      long entryEndAddr=valueAddr + prevValueSize;
      K keyInstance=toKey.toInstance(copies,key,keySize);
      MetaBytesWriter metaElemWriter;
      Object elemWriter;
      Object elem;
      if (defaultValueProvider != null) {
        V defaultValue=defaultValueProvider.get(keyInstance);
        elem=defaultValue;
        VI valueInterop=valueInteropProvider.get(copies,originalValueInterop);
        elemWriter=valueInterop;
        metaElemWriter=metaValueInteropProvider.get(copies,originalMetaValueInterop,valueInterop,defaultValue);
      }
 else       if (prepareValueBytesAsWriter != null) {
        elem=keyInstance;
        elemWriter=null;
        metaElemWriter=prepareValueBytesAsWriter;
      }
 else {
        throw defaultValueOrPrepareBytesShouldBeSpecified();
      }
      putValue(pos,offset,entry,valueSizePos,entryEndAddr,segmentState,metaElemWriter,elemWriter,elem,metaElemWriter.size(elemWriter,elem),hashLookup);
      pos=segmentState.pos;
      incrementSize();
      hashLookup.putPosition(pos);
      entry.position(valueSizePos);
      long valueSize=readValueSize(entry);
      long valuePos=entry.position();
      RV v=readValue.readValue(copies,entry,usingValue,valueSize);
      onPut(this,pos);
      if (bytesEventListener != null) {
        bytesEventListener.onPut(entry,0L,metaDataBytes,valuePos,true);
      }
      if (eventListener != null) {
        V valueInstance=toValue.toInstance(copies,v,valueSize);
        eventListener.onPut(keyInstance,valueInstance,null);
      }
      return v;
    }
 else {
      segmentState.pos=pos;
      return readValueAndNotifyGet(copies,key,keySize,toKey,readValue,usingValue,toValue,entry);
    }
  }
  if (!create)   return readValue.readNull();
  RV result=createEntryOnAcquire(copies,segmentState,metaKeyInterop,keyInterop,key,keySize,toKey,readValue,usingValue,toValue,entry);
  if (lock instanceof WriteLocked)   ((WriteLocked)lock).created(false);
  return result;
}",0.9956345494231368
162968,"<KB,KBI,MKBI extends MetaBytesInterop<KB,? super KBI>,RV>RV acquireWithoutLock(@NotNull ThreadLocalCopies copies,@NotNull SegmentState segmentState,MKBI metaKeyInterop,KBI keyInterop,KB key,long keySize,InstanceOrBytesToInstance<KB,K> toKey,ReadValue<RV> readValue,RV usingValue,InstanceOrBytesToInstance<RV,V> toValue,long hash2,boolean create,MutableLockedEntry lock){
  MultiStoreBytes entry=segmentState.tmpBytes;
  MultiMap hashLookup=this.hashLookup;
  SearchState searchState=segmentState.searchState;
  hashLookup.startSearch(hash2,searchState);
  for (long pos; (pos=hashLookup.nextPos(searchState)) >= 0L; ) {
    long offset=offsetFromPos(pos);
    reuse(entry,offset);
    if (!keyEquals(keyInterop,metaKeyInterop,key,keySize,entry))     continue;
    entry.skip(keySize);
    return readValueAndNotifyGet(copies,key,keySize,toKey,readValue,usingValue,toValue,entry);
  }
  if (!create)   return readValue.readNull();
  RV result=createEntryOnAcquire(copies,segmentState,metaKeyInterop,keyInterop,key,keySize,toKey,readValue,usingValue,toValue,entry);
  if (lock instanceof WriteLocked)   ((WriteLocked)lock).created(true);
  return result;
}","<KB,KBI,MKBI extends MetaBytesInterop<KB,? super KBI>,RV>RV acquireWithoutLock(@NotNull ThreadLocalCopies copies,@NotNull SegmentState segmentState,MKBI metaKeyInterop,KBI keyInterop,KB key,long keySize,InstanceOrBytesToInstance<KB,K> toKey,ReadValue<RV> readValue,RV usingValue,InstanceOrBytesToInstance<RV,V> toValue,long hash2,boolean create,MutableLockedEntry lock){
  MultiStoreBytes entry=segmentState.tmpBytes;
  MultiMap hashLookup=this.hashLookup;
  SearchState searchState=segmentState.searchState;
  hashLookup.startSearch(hash2,searchState);
  for (long pos; (pos=hashLookup.nextPos(searchState)) >= 0L; ) {
    long offset=offsetFromPos(pos);
    reuse(entry,offset);
    if (!keyEquals(keyInterop,metaKeyInterop,key,keySize,entry))     continue;
    entry.skip(keySize);
    segmentState.pos=pos;
    return readValueAndNotifyGet(copies,key,keySize,toKey,readValue,usingValue,toValue,entry);
  }
  if (!create)   return readValue.readNull();
  RV result=createEntryOnAcquire(copies,segmentState,metaKeyInterop,keyInterop,key,keySize,toKey,readValue,usingValue,toValue,entry);
  if (lock instanceof WriteLocked)   ((WriteLocked)lock).created(true);
  return result;
}",0.988860325621251
162969,"@Before public void setup() throws IOException {
  int port=s_port;
  ChronicleMapBuilder<Integer,CharSequence> map1Builder=newTcpSocketShmBuilder(Integer.class,CharSequence.class,(byte)1,port,new InetSocketAddress(""String_Node_Str"",port + 1));
  map1=map1Builder.averageValueSize(10).create();
  map2=newTcpSocketShmIntString((byte)2,port + 1);
  s_port+=2;
}","@Before public void setup() throws IOException {
  int port=s_port;
  ChronicleMapBuilder<Integer,CharSequence> map1Builder=newTcpSocketShmBuilder(Integer.class,CharSequence.class,(byte)1,port,new InetSocketAddress(""String_Node_Str"",port + 1));
  map1=map1Builder.entries(Builder.SIZE).averageValueSize(10).create();
  ChronicleMapBuilder<Integer,CharSequence> map2Builder=newTcpSocketShmBuilder(Integer.class,CharSequence.class,(byte)2,port + 1);
  map2=map2Builder.entries(Builder.SIZE).averageValueSize(10).create();
  s_port+=2;
}",0.7158836689038032
162970,"@Ignore(""String_Node_Str"") @Test public void testSetValue() throws IOException {
  if (typeOfMap == TypeOfMap.STATELESS)   return;
  ChronicleMapBuilder<String,Set<String>> builder=ChronicleMapBuilder.of(String.class,(Class<Set<String>>)(Class)Set.class).valueMarshaller(SetMarshaller.of(new StringMarshaller(8)));
  try (ChronicleMap<String,Set<String>> map=newInstance(builder)){
    map.put(""String_Node_Str"",Collections.<String>emptySet());
    map.put(""String_Node_Str"",new LinkedHashSet<String>(asList(""String_Node_Str"")));
    Set<String> list1=new LinkedHashSet<>();
    try (WriteContext wc=map.acquireUsingLocked(""String_Node_Str"",list1)){
      list1.add(""String_Node_Str"");
      assertEquals(new LinkedHashSet<String>(asList(""String_Node_Str"")),list1);
    }
     Set<String> list2=new LinkedHashSet<>();
    try (ReadContext rc=map.getUsingLocked(""String_Node_Str"",list2)){
      assertTrue(rc.present());
      assertEquals(new LinkedHashSet<String>(asList(""String_Node_Str"")),list2);
    }
     try (WriteContext wc=map.acquireUsingLocked(""String_Node_Str"",list1)){
      list1.add(""String_Node_Str"");
      assertEquals(new LinkedHashSet<String>(asList(""String_Node_Str"",""String_Node_Str"")),list1);
    }
     try (ReadContext rc=map.getUsingLocked(""String_Node_Str"",list2)){
      assertTrue(rc.present());
      assertEquals(new LinkedHashSet<String>(asList(""String_Node_Str"",""String_Node_Str"")),list2);
    }
     for (    Map.Entry<String,Set<String>> entry : map.entrySet()) {
      entry.getKey();
      entry.getValue();
    }
    mapChecks();
  }
 }","@Test public void testSetValue() throws IOException {
  if (typeOfMap == TypeOfMap.STATELESS)   return;
  ChronicleMapBuilder<String,Set<String>> builder=ChronicleMapBuilder.of(String.class,(Class<Set<String>>)(Class)Set.class).valueMarshaller(SetMarshaller.of(new StringMarshaller(8)));
  try (ChronicleMap<String,Set<String>> map=newInstance(builder)){
    map.put(""String_Node_Str"",Collections.<String>emptySet());
    map.put(""String_Node_Str"",new LinkedHashSet<String>(asList(""String_Node_Str"")));
    Set<String> list1=new LinkedHashSet<>();
    try (WriteContext wc=map.acquireUsingLocked(""String_Node_Str"",list1)){
      list1.add(""String_Node_Str"");
      assertEquals(new LinkedHashSet<String>(asList(""String_Node_Str"")),list1);
    }
     Set<String> list2=new LinkedHashSet<>();
    try (ReadContext rc=map.getUsingLocked(""String_Node_Str"",list2)){
      assertTrue(rc.present());
      assertEquals(new LinkedHashSet<String>(asList(""String_Node_Str"")),list2);
    }
     try (WriteContext wc=map.acquireUsingLocked(""String_Node_Str"",list1)){
      list1.add(""String_Node_Str"");
      assertEquals(new LinkedHashSet<String>(asList(""String_Node_Str"",""String_Node_Str"")),list1);
    }
     try (ReadContext rc=map.getUsingLocked(""String_Node_Str"",list2)){
      assertTrue(rc.present());
      assertEquals(new LinkedHashSet<String>(asList(""String_Node_Str"",""String_Node_Str"")),list2);
    }
     for (    Map.Entry<String,Set<String>> entry : map.entrySet()) {
      entry.getKey();
      entry.getValue();
    }
    mapChecks();
  }
 }",0.9913489266260814
162971,"@Nullable Work processStatelessEvent(final byte eventId,@NotNull final TcpReplicator.TcpSocketChannelEntryWriter writer,@NotNull final ByteBufferBytes reader){
  final StatelessChronicleMap.EventId event=VALUES[eventId];
  long transactionId=reader.readLong();
  long timestamp=transactionId / TcpReplicator.TIMESTAMP_FACTOR;
  byte identifier=reader.readByte();
  int headerSize=reader.readInt();
  reader.skip(headerSize);
switch (event) {
case KEY_SET:
    return keySet(reader,writer.in(),transactionId);
case VALUES:
  return values(reader,writer.in(),transactionId);
case ENTRY_SET:
return entrySet(reader,writer.in(),transactionId);
case PUT_WITHOUT_ACC:
return put(reader,timestamp,identifier);
case PUT_ALL_WITHOUT_ACC:
return putAll(reader,timestamp,identifier);
case REMOVE_WITHOUT_ACC:
return remove(reader,timestamp,identifier);
}
final long sizeLocation=reflectTransactionId(writer.in(),transactionId);
switch (event) {
case LONG_SIZE:
return longSize(writer.in(),sizeLocation);
case IS_EMPTY:
return isEmpty(writer.in(),sizeLocation);
case CONTAINS_KEY:
return containsKey(reader,writer.in(),sizeLocation);
case CONTAINS_VALUE:
return containsValue(reader,writer.in(),sizeLocation);
case GET:
return get(reader,writer,sizeLocation,timestamp);
case PUT:
return put(reader,writer,sizeLocation,timestamp,identifier);
case REMOVE:
return remove(reader,writer.in(),sizeLocation,timestamp,identifier);
case CLEAR:
return clear(writer.in(),sizeLocation,timestamp,identifier);
case REPLACE:
return replace(reader,writer,sizeLocation,timestamp,identifier);
case REPLACE_WITH_OLD_AND_NEW_VALUE:
return replaceWithOldAndNew(reader,writer.in(),sizeLocation,timestamp,identifier);
case PUT_IF_ABSENT:
return putIfAbsent(reader,writer,sizeLocation,timestamp,identifier);
case REMOVE_WITH_VALUE:
return removeWithValue(reader,writer.in(),sizeLocation,timestamp,identifier);
case TO_STRING:
return toString(writer.in(),sizeLocation);
case PUT_ALL:
return putAll(reader,writer.in(),sizeLocation,timestamp,identifier);
case HASH_CODE:
return hashCode(writer.in(),sizeLocation);
case MAP_FOR_KEY:
return mapForKey(reader,writer.in(),sizeLocation);
case PUT_MAPPED:
return putMapped(reader,writer.in(),sizeLocation);
default :
throw new IllegalStateException(""String_Node_Str"" + event);
}
}","@Nullable Work processStatelessEvent(final byte eventId,@NotNull final TcpReplicator.TcpSocketChannelEntryWriter writer,@NotNull final ByteBufferBytes reader){
  final StatelessChronicleMap.EventId event=VALUES[eventId];
  long transactionId=reader.readLong();
  long timestamp=transactionId / TcpReplicator.TIMESTAMP_FACTOR;
  byte identifier=reader.readByte();
  int headerSize=reader.readInt();
  reader.skip(headerSize);
switch (event) {
case KEY_SET:
    return keySet(reader,writer.in(),transactionId);
case VALUES:
  return values(reader,writer.in(),transactionId);
case ENTRY_SET:
return entrySet(reader,writer.in(),transactionId);
case PUT_WITHOUT_ACC:
return put(reader,timestamp,identifier);
case PUT_ALL_WITHOUT_ACC:
return putAll(reader,timestamp,identifier);
case REMOVE_WITHOUT_ACC:
return remove(reader,timestamp,identifier);
}
final long sizeLocation=reflectTransactionId(writer.in(),transactionId);
switch (event) {
case LONG_SIZE:
return longSize(writer.in(),sizeLocation);
case IS_EMPTY:
return isEmpty(writer.in(),sizeLocation);
case CONTAINS_KEY:
return containsKey(reader,writer.in(),sizeLocation);
case CONTAINS_VALUE:
return containsValue(reader,writer.in(),sizeLocation);
case GET:
return get(reader,writer,sizeLocation,timestamp);
case PUT:
return put(reader,writer,sizeLocation,timestamp,identifier);
case REMOVE:
return remove(reader,writer,sizeLocation,timestamp,identifier);
case CLEAR:
return clear(writer.in(),sizeLocation,timestamp,identifier);
case REPLACE:
return replace(reader,writer,sizeLocation,timestamp,identifier);
case REPLACE_WITH_OLD_AND_NEW_VALUE:
return replaceWithOldAndNew(reader,writer.in(),sizeLocation,timestamp,identifier);
case PUT_IF_ABSENT:
return putIfAbsent(reader,writer,sizeLocation,timestamp,identifier);
case REMOVE_WITH_VALUE:
return removeWithValue(reader,writer.in(),sizeLocation,timestamp,identifier);
case TO_STRING:
return toString(writer.in(),sizeLocation);
case PUT_ALL:
return putAll(reader,writer.in(),sizeLocation,timestamp,identifier);
case HASH_CODE:
return hashCode(writer.in(),sizeLocation);
case MAP_FOR_KEY:
return mapForKey(reader,writer.in(),sizeLocation);
case PUT_MAPPED:
return putMapped(reader,writer.in(),sizeLocation);
default :
throw new IllegalStateException(""String_Node_Str"" + event);
}
}",0.9989047097480832
162972,"@Nullable private Work remove(Bytes reader,@NotNull Bytes writer,final long sizeLocation,long timestamp,byte id){
  try {
    map.remove(reader,writer);
  }
 catch (  Throwable e) {
    return sendException(writer,sizeLocation,e);
  }
  writeSizeAndFlags(sizeLocation,false,writer);
  return null;
}","@Nullable private Work remove(Bytes reader,TcpReplicator.TcpSocketChannelEntryWriter writer,final long sizeLocation,long timestamp,byte id){
  try {
    map.remove(reader,writer);
  }
 catch (  Throwable e) {
    return sendException(writer.in(),sizeLocation,e);
  }
  writeSizeAndFlags(sizeLocation,false,writer.in());
  return null;
}",0.9007874015748032
162973,"@Override public void startSearch(long key){
  key=maskUnsetKey(key);
  searchPos=pos(key);
  searchHash=key;
}","@Override public void startSearch(long key,SearchState searchStateToReuse){
  key=maskUnsetKey(key);
  searchStateToReuse.searchPos=pos(key);
  searchStateToReuse.searchHash=key;
}",0.7628865979381443
162974,"@Override public void replacePrevPos(long newValue){
  checkValueForPut(newValue);
  long prevPos=stepBack(searchPos);
  long oldEntry=bytes.readInt48(prevPos);
  long oldValue=value(oldEntry);
  positions.clear(oldValue);
  positions.set(newValue);
  bytes.writeInt48(prevPos,entry(searchHash,newValue));
}","@Override public void replacePrevPos(SearchState searchState,long newValue){
  checkValueForPut(newValue);
  long prevPos=stepBack(searchState.searchPos);
  long oldEntry=bytes.readInt48(prevPos);
  long oldValue=value(oldEntry);
  positions.clear(oldValue);
  positions.set(newValue);
  bytes.writeInt48(prevPos,entry(searchState.searchHash,newValue));
}",0.9274924471299094
162975,"@Override public void putAfterFailedSearch(long value){
  checkValueForPut(value);
  positions.set(value);
  bytes.writeInt48(searchPos,entry(searchHash,value));
}","@Override public void putAfterFailedSearch(SearchState searchState,long value){
  checkValueForPut(value);
  positions.set(value);
  bytes.writeInt48(searchState.searchPos,entry(searchState.searchHash,value));
}",0.8716577540106952
162976,"@Override public long nextPos(){
  long pos=searchPos;
  while (true) {
    long entry=bytes.readInt48(pos);
    if (entry == UNSET_ENTRY) {
      searchPos=pos;
      return -1L;
    }
    pos=step(pos);
    if (key(entry) == searchHash) {
      searchPos=pos;
      return value(entry);
    }
  }
}","@Override public long nextPos(SearchState searchState){
  long pos=searchState.searchPos;
  while (true) {
    long entry=bytes.readInt48(pos);
    if (entry == UNSET_ENTRY) {
      searchState.searchPos=pos;
      return -1L;
    }
    pos=step(pos);
    if (key(entry) == searchState.searchHash) {
      searchState.searchPos=pos;
      return value(entry);
    }
  }
}",0.8941877794336811
162977,"@Override public void removePrevPos(){
  long prevPos=stepBack(searchPos);
  long entry=bytes.readInt48(prevPos);
  positions.clear(value(entry));
  removePos(prevPos);
}","@Override public void removePrevPos(SearchState searchState){
  long prevPos=stepBack(searchState.searchPos);
  long entry=bytes.readInt48(prevPos);
  positions.clear(value(entry));
  removePos(prevPos);
}",0.9066666666666666
162978,"@Override public void startSearch(long key){
  key=maskUnsetKey(key);
  searchPos=pos(key);
  searchHash=key;
}","@Override public void startSearch(long key,SearchState searchStateToReuse){
  key=maskUnsetKey(key);
  searchStateToReuse.searchPos=pos(key);
  searchStateToReuse.searchHash=key;
}",0.7628865979381443
162979,"@Override public void replacePrevPos(long newValue){
  checkValueForPut(newValue);
  long prevPos=stepBack(searchPos);
  long oldEntry=bytes.readLong(prevPos);
  long oldValue=value(oldEntry);
  positions.clear(oldValue);
  positions.set(newValue);
  bytes.writeLong(prevPos,entry(searchHash,newValue));
}","@Override public void replacePrevPos(SearchState searchState,long newValue){
  checkValueForPut(newValue);
  long prevPos=stepBack(searchState.searchPos);
  long oldEntry=bytes.readLong(prevPos);
  long oldValue=value(oldEntry);
  positions.clear(oldValue);
  positions.set(newValue);
  bytes.writeLong(prevPos,entry(searchState.searchHash,newValue));
}",0.9270516717325228
162980,"@Override public void putAfterFailedSearch(long value){
  checkValueForPut(value);
  positions.set(value);
  bytes.writeLong(searchPos,entry(searchHash,value));
}","@Override public void putAfterFailedSearch(SearchState searchState,long value){
  checkValueForPut(value);
  positions.set(value);
  bytes.writeLong(searchState.searchPos,entry(searchState.searchHash,value));
}",0.8709677419354839
162981,"@Override public long nextPos(){
  long pos=searchPos;
  while (true) {
    long entry=bytes.readLong(pos);
    if (entry == UNSET_ENTRY) {
      searchPos=pos;
      return -1L;
    }
    pos=step(pos);
    if (key(entry) == searchHash) {
      searchPos=pos;
      return value(entry);
    }
  }
}","@Override public long nextPos(SearchState searchState){
  long pos=searchState.searchPos;
  while (true) {
    long entry=bytes.readLong(pos);
    if (entry == UNSET_ENTRY) {
      searchState.searchPos=pos;
      return -1L;
    }
    pos=step(pos);
    if (key(entry) == searchState.searchHash) {
      searchState.searchPos=pos;
      return value(entry);
    }
  }
}",0.8938714499252616
162982,"@Override public void removePrevPos(){
  long prevPos=stepBack(searchPos);
  long entry=bytes.readLong(prevPos);
  positions.clear(value(entry));
  removePos(prevPos);
}","@Override public void removePrevPos(SearchState searchState){
  long prevPos=stepBack(searchState.searchPos);
  long entry=bytes.readLong(prevPos);
  positions.clear(value(entry));
  removePos(prevPos);
}",0.906166219839142
162983,"/** 
 * Used for start a search for a given key
 */
void startSearch(long key);","/** 
 * Used for start a search for a given key
 */
void startSearch(long key,SearchState searchStateToReuse);",0.8359788359788359
162984,void replacePrevPos(long newValue);,"void replacePrevPos(SearchState searchState,long newValue);",0.7446808510638298
162985,"/** 
 * Used for getting the next position for a given key
 * @return the next position for the last search or negative value
 */
long nextPos();","/** 
 * Used for getting the next position for a given key
 * @return the next position for the last search or negative value
 */
long nextPos(SearchState searchState);",0.926517571884984
162986,void removePrevPos();,void removePrevPos(SearchState searchState);,0.6461538461538462
162987,void putAfterFailedSearch(long value);,"void putAfterFailedSearch(SearchState searchState,long value);",0.76
162988,"private void registerConverter(XStream xstream){
  final Converter converter=new Converter(){
    final Bytes buffer=XStreamConverter.this.buffer;
    @Override public boolean canConvert(    Class aClass){
      if (EntrySet.class.isAssignableFrom(aClass) || WriteThroughEntry.class.isAssignableFrom(aClass))       return true;
      String canonicalName=aClass.getCanonicalName();
      if (canonicalName.startsWith(""String_Node_Str"")) {
        return true;
      }
      return false;
    }
    @Override public void marshal(    Object o,    HierarchicalStreamWriter writer,    MarshallingContext marshallingContext){
      if (WriteThroughEntry.class.isAssignableFrom(o.getClass())) {
        final SimpleEntry e=(SimpleEntry)o;
        writer.startNode(""String_Node_Str"");
        Object key=e.getKey();
        writeType(writer,key,kClass);
        marshallingContext.convertAnother(key);
        writer.endNode();
        writer.startNode(""String_Node_Str"");
        Object value=e.getValue();
        writeType(writer,value,vClass);
        marshallingContext.convertAnother(value);
        writer.endNode();
      }
 else       if (EntrySet.class.isAssignableFrom(o.getClass())) {
        for (        Entry e : (EntrySet)o) {
          writer.startNode(""String_Node_Str"");
          marshallingContext.convertAnother(e);
          writer.endNode();
        }
      }
      if (o.getClass().getCanonicalName().startsWith(""String_Node_Str"") && (o.getClass().getCanonicalName().endsWith(""String_Node_Str"") || o.getClass().getCanonicalName().endsWith(""String_Node_Str""))) {
        Method[] methods=o.getClass().getMethods();
        for (        Method method : methods) {
          if (method.getName().equals(""String_Node_Str"") && method.getParameterTypes().length == 0) {
            try {
              Object result=method.invoke(o);
              writer.setValue(result.toString());
              return;
            }
 catch (            Exception e) {
              throw new RuntimeException(""String_Node_Str"" + o.getClass().getCanonicalName(),e);
            }
          }
        }
      }
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext unmarshallingContext){
      final String nodeName=reader.getNodeName();
switch (nodeName) {
case ""String_Node_Str"":
        while (reader.hasMoreChildren()) {
          reader.moveDown();
          final String nodeName0=reader.getNodeName();
          if (!nodeName0.equals(""String_Node_Str""))           throw new ConversionException(""String_Node_Str"" + ""String_Node_Str"" + nodeName0);
          K k=null;
          V v=null;
          while (reader.hasMoreChildren()) {
            reader.moveDown();
            final String nodeName1=reader.getNodeName();
            if (""String_Node_Str"".equals(nodeName1))             k=get(reader,unmarshallingContext,kClass);
 else             if (""String_Node_Str"".equals(nodeName1))             v=get(reader,unmarshallingContext,vClass);
 else             throw new ConversionException(""String_Node_Str"");
            reader.moveUp();
          }
          if (k != null)           VanillaChronicleMap.this.put(k,v);
          reader.moveUp();
        }
      break;
case ""String_Node_Str"":
    if (kClass.getCanonicalName().startsWith(""String_Node_Str"")) {
      return toNative(reader,vClass);
    }
 else {
      long keySize=keySizeMarshaller.readSize(buffer);
      ThreadLocalCopies copies=keyReaderProvider.getCopies(null);
      BytesReader<K> keyReader=keyReaderProvider.get(copies,originalKeyReader);
      return keyReader.read(buffer,keySize);
    }
case ""String_Node_Str"":
  if (vClass.getCanonicalName().startsWith(""String_Node_Str"")) {
    return toNative(reader,vClass);
  }
 else {
    long valueSize=valueSizeMarshaller.readSize(buffer);
    ThreadLocalCopies copies=valueReaderProvider.getCopies(null);
    BytesReader<V> valueReader=valueReaderProvider.get(copies,originalValueReader);
    return valueReader.read(buffer,valueSize);
  }
}
return null;
}
private <E>E get(HierarchicalStreamReader reader,UnmarshallingContext unmarshallingContext,Class<E> clazz){
if (reader.getAttributeCount() > 0) {
final String type=reader.getAttribute(""String_Node_Str"");
try {
  return (E)unmarshallingContext.convertAnother(null,forName(type));
}
 catch (ClassNotFoundException e) {
  throw new ConversionException(e);
}
}
 else return (E)unmarshallingContext.convertAnother(null,clazz);
}
private Object toNative(HierarchicalStreamReader reader,final Class aClass){
Object o=DataValueClasses.newDirectInstance(aClass);
try {
for (Method $$nativeMethod : o.getClass().getMethods()) {
  if ($$nativeMethod.getName().equals(""String_Node_Str"") && $$nativeMethod.getParameterTypes().length == 1) {
    Class<?> parameterType=$$nativeMethod.getParameterTypes()[0];
    String value=reader.getValue();
    if (parameterType.isPrimitive()) {
      String name=parameterType.getSimpleName();
      String properName=""String_Node_Str"" + Character.toString(name.charAt(0)).toUpperCase() + name.substring(1);
      parameterType=Class.forName(properName);
    }
    Method valueOf=parameterType.getMethod(""String_Node_Str"",String.class);
    Object invoke=valueOf.invoke(null,value);
    $$nativeMethod.invoke(o,invoke);
    return o;
  }
}
}
 catch (Exception e) {
throw new ConversionException(""String_Node_Str"" + aClass.getCanonicalName(),e);
}
throw new ConversionException(""String_Node_Str"" + aClass.getCanonicalName());
}
}
;
xstream.registerConverter(converter);
}","private void registerConverter(XStream xstream){
  final Converter converter=new Converter(){
    final Bytes buffer=XStreamConverter.this.buffer;
    @Override public boolean canConvert(    Class aClass){
      if (EntrySet.class.isAssignableFrom(aClass) || WriteThroughEntry.class.isAssignableFrom(aClass))       return true;
      String canonicalName=aClass.getCanonicalName();
      if (canonicalName.startsWith(""String_Node_Str"")) {
        return true;
      }
      return false;
    }
    @Override public void marshal(    Object o,    HierarchicalStreamWriter writer,    MarshallingContext marshallingContext){
      if (WriteThroughEntry.class.isAssignableFrom(o.getClass())) {
        final SimpleEntry e=(SimpleEntry)o;
        writer.startNode(""String_Node_Str"");
        Object key=e.getKey();
        writeType(writer,key,kClass);
        marshallingContext.convertAnother(key);
        writer.endNode();
        writer.startNode(""String_Node_Str"");
        Object value=e.getValue();
        writeType(writer,value,vClass);
        marshallingContext.convertAnother(value);
        writer.endNode();
      }
 else       if (EntrySet.class.isAssignableFrom(o.getClass())) {
        for (        Entry e : (EntrySet)o) {
          writer.startNode(""String_Node_Str"");
          marshallingContext.convertAnother(e);
          writer.endNode();
        }
      }
      if (o.getClass().getCanonicalName().startsWith(""String_Node_Str"") && (o.getClass().getCanonicalName().endsWith(""String_Node_Str"") || o.getClass().getCanonicalName().endsWith(""String_Node_Str""))) {
        Method[] methods=o.getClass().getMethods();
        for (        Method method : methods) {
          if (method.getName().equals(""String_Node_Str"") && method.getParameterTypes().length == 0) {
            try {
              Object result=method.invoke(o);
              writer.setValue(result.toString());
              return;
            }
 catch (            Exception e) {
              throw new RuntimeException(""String_Node_Str"" + o.getClass().getCanonicalName(),e);
            }
          }
        }
      }
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext unmarshallingContext){
      final String nodeName=reader.getNodeName();
switch (nodeName) {
case ""String_Node_Str"":
        while (reader.hasMoreChildren()) {
          reader.moveDown();
          final String nodeName0=reader.getNodeName();
          if (!nodeName0.equals(""String_Node_Str""))           throw new ConversionException(""String_Node_Str"" + ""String_Node_Str"" + nodeName0);
          K k=null;
          V v=null;
          while (reader.hasMoreChildren()) {
            reader.moveDown();
            final String nodeName1=reader.getNodeName();
            if (""String_Node_Str"".equals(nodeName1))             k=get(reader,unmarshallingContext,kClass);
 else             if (""String_Node_Str"".equals(nodeName1))             v=get(reader,unmarshallingContext,vClass);
 else             throw new ConversionException(""String_Node_Str"");
            reader.moveUp();
          }
          if (k != null)           VanillaChronicleMap.this.put(k,v);
          reader.moveUp();
        }
      break;
case ""String_Node_Str"":
    if (kClass.getCanonicalName().startsWith(""String_Node_Str"")) {
      return to$$Native(reader,vClass);
    }
 else {
      long keySize=keySizeMarshaller.readSize(buffer);
      ThreadLocalCopies copies=keyReaderProvider.getCopies(null);
      BytesReader<K> keyReader=keyReaderProvider.get(copies,originalKeyReader);
      return keyReader.read(buffer,keySize);
    }
case ""String_Node_Str"":
  if (vClass.getCanonicalName().startsWith(""String_Node_Str"")) {
    return to$$Native(reader,vClass);
  }
 else {
    long valueSize=valueSizeMarshaller.readSize(buffer);
    ThreadLocalCopies copies=valueReaderProvider.getCopies(null);
    BytesReader<V> valueReader=valueReaderProvider.get(copies,originalValueReader);
    return valueReader.read(buffer,valueSize);
  }
}
return null;
}
private <E>E get(HierarchicalStreamReader reader,UnmarshallingContext unmarshallingContext,Class<E> clazz){
if (reader.getAttributeCount() > 0) {
final String type=reader.getAttribute(""String_Node_Str"");
try {
  return (E)unmarshallingContext.convertAnother(null,forName(type));
}
 catch (ClassNotFoundException e) {
  throw new ConversionException(e);
}
}
 else return (E)unmarshallingContext.convertAnother(null,clazz);
}
private Object to$$Native(HierarchicalStreamReader reader,final Class aClass){
Object o=DataValueClasses.newDirectInstance(aClass);
try {
for (Method $$nativeMethod : o.getClass().getMethods()) {
  if ($$nativeMethod.getName().equals(""String_Node_Str"") && $$nativeMethod.getParameterTypes().length == 1) {
    Class<?> parameterType=$$nativeMethod.getParameterTypes()[0];
    String value=reader.getValue();
    if (parameterType.isPrimitive()) {
      if (parameterType == int.class)       parameterType=Integer.class;
 else       if (parameterType == char.class)       parameterType=Character.class;
 else {
        final String name=parameterType.getSimpleName();
        final String properName=""String_Node_Str"" + Character.toString(name.charAt(0)).toUpperCase() + name.substring(1);
        parameterType=Class.forName(properName);
      }
    }
    final Method valueOf=parameterType.getMethod(""String_Node_Str"",String.class);
    final Object invoke=valueOf.invoke(null,value);
    $$nativeMethod.invoke(o,invoke);
    return o;
  }
}
}
 catch (Exception e) {
throw new ConversionException(""String_Node_Str"" + aClass.getCanonicalName(),e);
}
throw new ConversionException(""String_Node_Str"" + aClass.getCanonicalName());
}
}
;
xstream.registerConverter(converter);
}",0.97539745980993
162989,"@Override public Object unmarshal(HierarchicalStreamReader reader,UnmarshallingContext unmarshallingContext){
  final String nodeName=reader.getNodeName();
switch (nodeName) {
case ""String_Node_Str"":
    while (reader.hasMoreChildren()) {
      reader.moveDown();
      final String nodeName0=reader.getNodeName();
      if (!nodeName0.equals(""String_Node_Str""))       throw new ConversionException(""String_Node_Str"" + ""String_Node_Str"" + nodeName0);
      K k=null;
      V v=null;
      while (reader.hasMoreChildren()) {
        reader.moveDown();
        final String nodeName1=reader.getNodeName();
        if (""String_Node_Str"".equals(nodeName1))         k=get(reader,unmarshallingContext,kClass);
 else         if (""String_Node_Str"".equals(nodeName1))         v=get(reader,unmarshallingContext,vClass);
 else         throw new ConversionException(""String_Node_Str"");
        reader.moveUp();
      }
      if (k != null)       VanillaChronicleMap.this.put(k,v);
      reader.moveUp();
    }
  break;
case ""String_Node_Str"":
if (kClass.getCanonicalName().startsWith(""String_Node_Str"")) {
  return toNative(reader,vClass);
}
 else {
  long keySize=keySizeMarshaller.readSize(buffer);
  ThreadLocalCopies copies=keyReaderProvider.getCopies(null);
  BytesReader<K> keyReader=keyReaderProvider.get(copies,originalKeyReader);
  return keyReader.read(buffer,keySize);
}
case ""String_Node_Str"":
if (vClass.getCanonicalName().startsWith(""String_Node_Str"")) {
return toNative(reader,vClass);
}
 else {
long valueSize=valueSizeMarshaller.readSize(buffer);
ThreadLocalCopies copies=valueReaderProvider.getCopies(null);
BytesReader<V> valueReader=valueReaderProvider.get(copies,originalValueReader);
return valueReader.read(buffer,valueSize);
}
}
return null;
}","@Override public Object unmarshal(HierarchicalStreamReader reader,UnmarshallingContext unmarshallingContext){
  final String nodeName=reader.getNodeName();
switch (nodeName) {
case ""String_Node_Str"":
    while (reader.hasMoreChildren()) {
      reader.moveDown();
      final String nodeName0=reader.getNodeName();
      if (!nodeName0.equals(""String_Node_Str""))       throw new ConversionException(""String_Node_Str"" + ""String_Node_Str"" + nodeName0);
      K k=null;
      V v=null;
      while (reader.hasMoreChildren()) {
        reader.moveDown();
        final String nodeName1=reader.getNodeName();
        if (""String_Node_Str"".equals(nodeName1))         k=get(reader,unmarshallingContext,kClass);
 else         if (""String_Node_Str"".equals(nodeName1))         v=get(reader,unmarshallingContext,vClass);
 else         throw new ConversionException(""String_Node_Str"");
        reader.moveUp();
      }
      if (k != null)       VanillaChronicleMap.this.put(k,v);
      reader.moveUp();
    }
  break;
case ""String_Node_Str"":
if (kClass.getCanonicalName().startsWith(""String_Node_Str"")) {
  return to$$Native(reader,vClass);
}
 else {
  long keySize=keySizeMarshaller.readSize(buffer);
  ThreadLocalCopies copies=keyReaderProvider.getCopies(null);
  BytesReader<K> keyReader=keyReaderProvider.get(copies,originalKeyReader);
  return keyReader.read(buffer,keySize);
}
case ""String_Node_Str"":
if (vClass.getCanonicalName().startsWith(""String_Node_Str"")) {
return to$$Native(reader,vClass);
}
 else {
long valueSize=valueSizeMarshaller.readSize(buffer);
ThreadLocalCopies copies=valueReaderProvider.getCopies(null);
BytesReader<V> valueReader=valueReaderProvider.get(copies,originalValueReader);
return valueReader.read(buffer,valueSize);
}
}
return null;
}",0.9988616960728516
162990,"@Parameterized.Parameters public static Collection<Object[]> data(){
  return Arrays.asList(new Object[][]{{TypeOfMap.SIMPLE},{TypeOfMap.REPLICATED},{TypeOfMap.STATELESS}});
}","@Parameterized.Parameters public static Collection<Object[]> data(){
  return asList(new Object[][]{{TypeOfMap.SIMPLE},{TypeOfMap.REPLICATED},{TypeOfMap.STATELESS}});
}",0.979591836734694
162991,"@Test public void testSetValue() throws IOException {
  if (typeOfMap == TypeOfMap.STATELESS)   return;
  ChronicleMapBuilder<String,Set<String>> builder=ChronicleMapBuilder.of(String.class,(Class<Set<String>>)(Class)Set.class).valueMarshaller(SetMarshaller.of(new StringMarshaller(8)));
  try (ChronicleMap<String,Set<String>> map=newInstance(builder)){
    map.put(""String_Node_Str"",Collections.<String>emptySet());
    map.put(""String_Node_Str"",new LinkedHashSet<String>(Arrays.asList(""String_Node_Str"")));
    Set<String> list1=new LinkedHashSet<>();
    try (WriteContext wc=map.acquireUsingLocked(""String_Node_Str"",list1)){
      list1.add(""String_Node_Str"");
      assertEquals(new LinkedHashSet<String>(Arrays.asList(""String_Node_Str"")),list1);
    }
     Set<String> list2=new LinkedHashSet<>();
    try (ReadContext rc=map.getUsingLocked(""String_Node_Str"",list2)){
      assertTrue(rc.present());
      assertEquals(new LinkedHashSet<String>(Arrays.asList(""String_Node_Str"")),list2);
    }
     try (WriteContext wc=map.acquireUsingLocked(""String_Node_Str"",list1)){
      list1.add(""String_Node_Str"");
      assertEquals(new LinkedHashSet<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"")),list1);
    }
     try (ReadContext rc=map.getUsingLocked(""String_Node_Str"",list2)){
      assertTrue(rc.present());
      assertEquals(new LinkedHashSet<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"")),list2);
    }
   }
 }","@Test public void testSetValue() throws IOException {
  if (typeOfMap == TypeOfMap.STATELESS)   return;
  ChronicleMapBuilder<String,Set<String>> builder=ChronicleMapBuilder.of(String.class,(Class<Set<String>>)(Class)Set.class).valueMarshaller(SetMarshaller.of(new StringMarshaller(8)));
  try (ChronicleMap<String,Set<String>> map=newInstance(builder)){
    map.put(""String_Node_Str"",Collections.<String>emptySet());
    map.put(""String_Node_Str"",new LinkedHashSet<String>(asList(""String_Node_Str"")));
    Set<String> list1=new LinkedHashSet<>();
    try (WriteContext wc=map.acquireUsingLocked(""String_Node_Str"",list1)){
      list1.add(""String_Node_Str"");
      assertEquals(new LinkedHashSet<String>(asList(""String_Node_Str"")),list1);
    }
     Set<String> list2=new LinkedHashSet<>();
    try (ReadContext rc=map.getUsingLocked(""String_Node_Str"",list2)){
      assertTrue(rc.present());
      assertEquals(new LinkedHashSet<String>(asList(""String_Node_Str"")),list2);
    }
     try (WriteContext wc=map.acquireUsingLocked(""String_Node_Str"",list1)){
      list1.add(""String_Node_Str"");
      assertEquals(new LinkedHashSet<String>(asList(""String_Node_Str"",""String_Node_Str"")),list1);
    }
     try (ReadContext rc=map.getUsingLocked(""String_Node_Str"",list2)){
      assertTrue(rc.present());
      assertEquals(new LinkedHashSet<String>(asList(""String_Node_Str"",""String_Node_Str"")),list2);
    }
   }
 }",0.9877322117069752
162992,"@Test @Ignore(""String_Node_Str"") public void testCharArrayValue() throws ExecutionException, InterruptedException, IOException {
  int valueSize=10;
  char[] expected=new char[valueSize];
  Arrays.fill(expected,'X');
  ChronicleMapBuilder<CharSequence,char[]> builder=ChronicleMapBuilder.of(CharSequence.class,char[].class);
  try (ChronicleMap<CharSequence,char[]> map=newInstance(builder)){
    map.put(""String_Node_Str"",expected);
    char[] actual=map.get(""String_Node_Str"");
    System.out.println(actual);
    assertTrue(Arrays.equals(expected,map.get(""String_Node_Str"")));
  }
 }","@Test public void testCharArrayValue() throws ExecutionException, InterruptedException, IOException {
  int valueSize=10;
  char[] expected=new char[valueSize];
  Arrays.fill(expected,'X');
  ChronicleMapBuilder<CharSequence,char[]> builder=ChronicleMapBuilder.of(CharSequence.class,char[].class);
  try (ChronicleMap<CharSequence,char[]> map=newInstance(builder)){
    map.put(""String_Node_Str"",expected);
    char[] actual=map.get(""String_Node_Str"");
    System.out.println(actual);
    assertEquals(Chars.asList(expected),Chars.asList(map.get(""String_Node_Str"")));
  }
 }",0.1603448275862068
162993,"@Test public void testListValue() throws IOException {
  if (typeOfMap == TypeOfMap.STATELESS)   return;
  ChronicleMapBuilder<String,List<String>> builder=ChronicleMapBuilder.of(String.class,(Class<List<String>>)(Class)List.class).valueMarshaller(ListMarshaller.of(new StringMarshaller(8)));
  try (ChronicleMap<String,List<String>> map=newInstance(builder)){
    map.put(""String_Node_Str"",Collections.<String>emptyList());
    map.put(""String_Node_Str"",Arrays.asList(""String_Node_Str""));
    List<String> list1=new ArrayList<>();
    try (WriteContext wc=map.acquireUsingLocked(""String_Node_Str"",list1)){
      list1.add(""String_Node_Str"");
      assertEquals(Arrays.asList(""String_Node_Str""),list1);
    }
     List<String> list2=new ArrayList<>();
    try (ReadContext rc=map.getUsingLocked(""String_Node_Str"",list2)){
      assertTrue(rc.present());
      assertEquals(Arrays.asList(""String_Node_Str""),list2);
    }
     try (ReadContext rc=map.getUsingLocked(""String_Node_Str"",list2)){
      assertTrue(rc.present());
      list2.add(""String_Node_Str"");
      assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),list2);
    }
     try (WriteContext wc=map.acquireUsingLocked(""String_Node_Str"",list1)){
      list1.add(""String_Node_Str"");
      assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),list1);
    }
     try (ReadContext rc=map.getUsingLocked(""String_Node_Str"",list2)){
      assertTrue(rc.present());
      assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),list2);
    }
   }
 }","@Test public void testListValue() throws IOException {
  if (typeOfMap == TypeOfMap.STATELESS)   return;
  ChronicleMapBuilder<String,List<String>> builder=ChronicleMapBuilder.of(String.class,(Class<List<String>>)(Class)List.class).valueMarshaller(ListMarshaller.of(new StringMarshaller(8)));
  try (ChronicleMap<String,List<String>> map=newInstance(builder)){
    map.put(""String_Node_Str"",Collections.<String>emptyList());
    map.put(""String_Node_Str"",asList(""String_Node_Str""));
    List<String> list1=new ArrayList<>();
    try (WriteContext wc=map.acquireUsingLocked(""String_Node_Str"",list1)){
      list1.add(""String_Node_Str"");
      assertEquals(asList(""String_Node_Str""),list1);
    }
     List<String> list2=new ArrayList<>();
    try (ReadContext rc=map.getUsingLocked(""String_Node_Str"",list2)){
      assertTrue(rc.present());
      assertEquals(asList(""String_Node_Str""),list2);
    }
     try (ReadContext rc=map.getUsingLocked(""String_Node_Str"",list2)){
      assertTrue(rc.present());
      list2.add(""String_Node_Str"");
      assertEquals(asList(""String_Node_Str"",""String_Node_Str""),list2);
    }
     try (WriteContext wc=map.acquireUsingLocked(""String_Node_Str"",list1)){
      list1.add(""String_Node_Str"");
      assertEquals(asList(""String_Node_Str"",""String_Node_Str""),list1);
    }
     try (ReadContext rc=map.getUsingLocked(""String_Node_Str"",list2)){
      assertTrue(rc.present());
      assertEquals(asList(""String_Node_Str"",""String_Node_Str""),list2);
    }
   }
 }",0.9861111111111112
162994,"private static StringBuilder generateReadBody(DataValueModel<?> dvModel,SortedSet<Class> imported){
  StringBuilder read=new StringBuilder();
  Map.Entry<String,FieldModel>[] entries=heapSizeOrderedFields(dvModel);
  for (  Map.Entry<String,FieldModel> entry : entries) {
    String name=entry.getKey();
    FieldModel model=entry.getValue();
    Class type=model.type();
    if (shouldImport(type))     imported.add(type);
    Method setter=getSetter(model);
    Method getter=getGetter(model);
    Method orderedSetter=getOrderedSetter(model);
    Method volatileGetter=getVolatileGetter(model);
    Method defaultSetter=setter != null ? setter : orderedSetter;
    Method defaultGetter=getter != null ? getter : volatileGetter;
    if (!dvModel.isScalar(type)) {
      if (model.isArray()) {
        read.append(""String_Node_Str"").append(model.indexSize().value()).append(""String_Node_Str"");
        read.append(""String_Node_Str"").append(defaultSetter.getName()).append(""String_Node_Str"").append(bytesReaderName(type,false)).append(""String_Node_Str"").append(""String_Node_Str"").append(computeNonScalarOffset(dvModel,type)).append(""String_Node_Str"").append(""String_Node_Str"").append(defaultGetter.getName()).append(""String_Node_Str"");
        read.append(""String_Node_Str"");
      }
 else {
        read.append(""String_Node_Str"").append(defaultSetter.getName()).append(""String_Node_Str"").append(bytesReaderName(type,false)).append(""String_Node_Str"").append(""String_Node_Str"").append(computeNonScalarOffset(dvModel,type)).append(""String_Node_Str"").append(""String_Node_Str"").append(defaultGetter.getName()).append(""String_Node_Str"");
      }
    }
 else {
      if (model.isArray()) {
        read.append(""String_Node_Str"").append(model.indexSize().value()).append(""String_Node_Str"");
        if (CharSequence.class.isAssignableFrom(type))         read.append(""String_Node_Str"");
        read.append(""String_Node_Str"").append(defaultSetter.getName()).append(""String_Node_Str"").append(bytesType(type)).append(""String_Node_Str"");
        if (CharSequence.class.isAssignableFrom(type))         read.append(""String_Node_Str"").append(fieldSize(model)).append(""String_Node_Str"");
        read.append(""String_Node_Str"");
      }
 else {
        read.append(""String_Node_Str"");
        if (CharSequence.class.isAssignableFrom(type))         read.append(""String_Node_Str"");
        read.append(""String_Node_Str"").append(defaultSetter.getName()).append(""String_Node_Str"").append(bytesType(type)).append(""String_Node_Str"");
        if (CharSequence.class.isAssignableFrom(type))         read.append(""String_Node_Str"").append(fieldSize(model)).append(""String_Node_Str"");
        read.append(""String_Node_Str"");
      }
    }
  }
  return read;
}","private static StringBuilder generateReadBody(DataValueModel<?> dvModel,SortedSet<Class> imported){
  StringBuilder read=new StringBuilder();
  Map.Entry<String,FieldModel>[] entries=heapSizeOrderedFields(dvModel);
  for (  Map.Entry<String,FieldModel> entry : entries) {
    String name=entry.getKey();
    FieldModel model=entry.getValue();
    Class type=model.type();
    if (shouldImport(type))     imported.add(type);
    Method setter=getSetter(model);
    Method getter=getGetter(model);
    Method orderedSetter=getOrderedSetter(model);
    Method volatileGetter=getVolatileGetter(model);
    Method defaultSetter=setter != null ? setter : orderedSetter;
    Method defaultGetter=getter != null ? getter : volatileGetter;
    if (!dvModel.isScalar(type)) {
      if (model.isArray()) {
        read.append(""String_Node_Str"").append(model.indexSize().value()).append(""String_Node_Str"");
        read.append(""String_Node_Str"").append(defaultSetter.getName()).append(""String_Node_Str"").append(bytesReaderName(type,false)).append(""String_Node_Str"").append(""String_Node_Str"").append(computeNonScalarOffset(dvModel,type)).append(""String_Node_Str"").append(""String_Node_Str"").append(defaultGetter.getName()).append(""String_Node_Str"");
        read.append(""String_Node_Str"");
      }
 else {
        read.append(""String_Node_Str"").append(defaultSetter.getName()).append(""String_Node_Str"").append(bytesReaderName(type,false)).append(""String_Node_Str"").append(""String_Node_Str"").append(computeNonScalarOffset(dvModel,type)).append(""String_Node_Str"").append(""String_Node_Str"").append(defaultGetter.getName()).append(""String_Node_Str"");
      }
    }
 else {
      if (model.isArray()) {
        read.append(""String_Node_Str"").append(model.indexSize().value()).append(""String_Node_Str"");
        saveCharSequencePosition(read,type);
        read.append(""String_Node_Str"").append(defaultSetter.getName()).append(""String_Node_Str"").append(bytesType(type)).append(""String_Node_Str"");
        updateCharSequencePosition(read,model,type);
        read.append(""String_Node_Str"");
      }
 else {
        read.append(""String_Node_Str"");
        saveCharSequencePosition(read,type);
        read.append(""String_Node_Str"").append(defaultSetter.getName()).append(""String_Node_Str"").append(bytesType(type)).append(""String_Node_Str"");
        updateCharSequencePosition(read,model,type);
        read.append(""String_Node_Str"");
      }
    }
  }
  return read;
}",0.8219389725762842
162995,"private static String generateWriteBody(DataValueModel<?> dvModel,SortedSet<Class> imported){
  StringBuilder write=new StringBuilder();
  Map.Entry<String,FieldModel>[] entries=heapSizeOrderedFields(dvModel);
  for (  Map.Entry<String,FieldModel> entry : entries) {
    String name=entry.getKey();
    FieldModel model=entry.getValue();
    Class type=model.type();
    if (shouldImport(type))     imported.add(type);
    Method setter=getSetter(model);
    Method getter=getGetter(model);
    Method orderedSetter=getOrderedSetter(model);
    Method volatileGetter=getVolatileGetter(model);
    Method defaultSetter=setter != null ? setter : orderedSetter;
    Method defaultGetter=getter != null ? getter : volatileGetter;
    if (!dvModel.isScalar(type)) {
      if (model.isArray()) {
        write.append(""String_Node_Str"").append(model.indexSize().value()).append(""String_Node_Str"");
        write.append(""String_Node_Str"").append(normalize(type)).append(""String_Node_Str"").append(defaultGetter.getName()).append(""String_Node_Str"");
        write.append(""String_Node_Str"").append(""String_Node_Str"");
        write.append(""String_Node_Str"").append(bytesWriterName(type,false)).append(""String_Node_Str"").append(""String_Node_Str"");
        write.append(""String_Node_Str"");
      }
 else {
        write.append(""String_Node_Str"").append(normalize(type)).append(""String_Node_Str"").append(defaultGetter.getName()).append(""String_Node_Str"");
        write.append(""String_Node_Str"").append(""String_Node_Str"");
        write.append(""String_Node_Str"").append(bytesWriterName(type,false)).append(""String_Node_Str"").append(""String_Node_Str"");
      }
    }
 else {
      if (model.isArray()) {
        write.append(""String_Node_Str"").append(model.indexSize().value()).append(""String_Node_Str"");
        if (CharSequence.class.isAssignableFrom(type))         write.append(""String_Node_Str"");
        write.append(""String_Node_Str"").append(bytesType(type)).append(""String_Node_Str"").append(defaultGetter.getName()).append(""String_Node_Str"");
        if (CharSequence.class.isAssignableFrom(type))         write.append(""String_Node_Str"").append(fieldSize(model)).append(""String_Node_Str"");
        write.append(""String_Node_Str"");
      }
 else {
        write.append(""String_Node_Str"");
        if (CharSequence.class.isAssignableFrom(type))         write.append(""String_Node_Str"");
        write.append(""String_Node_Str"").append(bytesType(type)).append(""String_Node_Str"").append(defaultGetter.getName()).append(""String_Node_Str"");
        if (CharSequence.class.isAssignableFrom(type))         write.append(""String_Node_Str"").append(fieldSize(model)).append(""String_Node_Str"");
        write.append(""String_Node_Str"");
      }
    }
  }
  return write.toString();
}","private static String generateWriteBody(DataValueModel<?> dvModel,SortedSet<Class> imported){
  StringBuilder write=new StringBuilder();
  Map.Entry<String,FieldModel>[] entries=heapSizeOrderedFields(dvModel);
  for (  Map.Entry<String,FieldModel> entry : entries) {
    String name=entry.getKey();
    FieldModel model=entry.getValue();
    Class type=model.type();
    if (shouldImport(type))     imported.add(type);
    Method setter=getSetter(model);
    Method getter=getGetter(model);
    Method orderedSetter=getOrderedSetter(model);
    Method volatileGetter=getVolatileGetter(model);
    Method defaultSetter=setter != null ? setter : orderedSetter;
    Method defaultGetter=getter != null ? getter : volatileGetter;
    if (!dvModel.isScalar(type)) {
      if (model.isArray()) {
        write.append(""String_Node_Str"").append(model.indexSize().value()).append(""String_Node_Str"");
        write.append(""String_Node_Str"").append(normalize(type)).append(""String_Node_Str"").append(defaultGetter.getName()).append(""String_Node_Str"");
        write.append(""String_Node_Str"").append(""String_Node_Str"");
        write.append(""String_Node_Str"").append(bytesWriterName(type,false)).append(""String_Node_Str"").append(""String_Node_Str"");
        write.append(""String_Node_Str"");
      }
 else {
        write.append(""String_Node_Str"").append(normalize(type)).append(""String_Node_Str"").append(defaultGetter.getName()).append(""String_Node_Str"");
        write.append(""String_Node_Str"").append(""String_Node_Str"");
        write.append(""String_Node_Str"").append(bytesWriterName(type,false)).append(""String_Node_Str"").append(""String_Node_Str"");
      }
    }
 else {
      if (model.isArray()) {
        write.append(""String_Node_Str"").append(model.indexSize().value()).append(""String_Node_Str"");
        saveCharSequencePosition(write,type);
        write.append(""String_Node_Str"").append(bytesType(type)).append(""String_Node_Str"").append(defaultGetter.getName()).append(""String_Node_Str"");
        zeroOutRemainingCharSequenceBytesAndUpdatePosition(write,model,type);
        write.append(""String_Node_Str"");
      }
 else {
        write.append(""String_Node_Str"");
        saveCharSequencePosition(write,type);
        write.append(""String_Node_Str"").append(bytesType(type)).append(""String_Node_Str"").append(defaultGetter.getName()).append(""String_Node_Str"");
        zeroOutRemainingCharSequenceBytesAndUpdatePosition(write,model,type);
        write.append(""String_Node_Str"");
      }
    }
  }
  return write.toString();
}",0.7553030303030303
162996,"private void clearMetaData(long offset){
  if (metaDataBytes > 0)   bytes.zeroOut(offset,offset + metaDataBytes);
}","final void clearMetaData(long offset){
  if (metaDataBytes > 0)   bytes.zeroOut(offset,offset + metaDataBytes);
}",0.9649122807017544
162997,"private long alloc(int blocks){
  if (blocks > maxEntryOversizeFactor)   throw new IllegalArgumentException(""String_Node_Str"" + blocks + ""String_Node_Str""+ maxEntryOversizeFactor+ ""String_Node_Str"");
  long ret=freeList.setNextNContinuousClearBits(nextPosToSearchFrom,blocks);
  if (ret == DirectBitSet.NOT_FOUND || ret + blocks > entriesPerSegment) {
    if (ret + blocks > entriesPerSegment)     freeList.clear(ret,ret + blocks);
    ret=freeList.setNextNContinuousClearBits(0L,blocks);
    if (ret == DirectBitSet.NOT_FOUND || ret + blocks > entriesPerSegment) {
      if (ret + blocks > entriesPerSegment)       freeList.clear(ret,ret + blocks);
      if (blocks == 1) {
        throw new IllegalStateException(""String_Node_Str"");
      }
 else {
        throw new IllegalStateException(""String_Node_Str"" + blocks + ""String_Node_Str"");
      }
    }
    updateNextPosToSearchFrom(ret,blocks);
  }
 else {
    if (blocks == 1 || freeList.isSet(nextPosToSearchFrom)) {
      updateNextPosToSearchFrom(ret,blocks);
    }
  }
  return ret;
}","final long alloc(int blocks){
  if (blocks > maxEntryOversizeFactor)   throw new IllegalArgumentException(""String_Node_Str"" + blocks + ""String_Node_Str""+ maxEntryOversizeFactor+ ""String_Node_Str"");
  long ret=freeList.setNextNContinuousClearBits(nextPosToSearchFrom,blocks);
  if (ret == DirectBitSet.NOT_FOUND || ret + blocks > entriesPerSegment) {
    if (ret + blocks > entriesPerSegment)     freeList.clear(ret,ret + blocks);
    ret=freeList.setNextNContinuousClearBits(0L,blocks);
    if (ret == DirectBitSet.NOT_FOUND || ret + blocks > entriesPerSegment) {
      if (ret + blocks > entriesPerSegment)       freeList.clear(ret,ret + blocks);
      if (blocks == 1) {
        throw new IllegalStateException(""String_Node_Str"");
      }
 else {
        throw new IllegalStateException(""String_Node_Str"" + blocks + ""String_Node_Str"");
      }
    }
    updateNextPosToSearchFrom(ret,blocks);
  }
 else {
    if (blocks == 1 || freeList.isSet(nextPosToSearchFrom)) {
      updateNextPosToSearchFrom(ret,blocks);
    }
  }
  return ret;
}",0.9942307692307693
162998,"@Test @Ignore(""String_Node_Str"") public void testSoakTestWithRandomData() throws IOException, InterruptedException {
  ExecutorService executorService=Executors.newSingleThreadExecutor();
  System.out.print(""String_Node_Str"");
  for (int j=1; j < 10000; j++) {
    if (j % 100 == 0)     System.out.print(""String_Node_Str"");
    Random rnd=new Random(j);
    if (rnd.nextInt(10) < 2)     time++;
    final long t=time;
    final int key=rnd.nextInt(1000);
    addRandomDelay(executorService,rnd);
    if (rnd.nextBoolean()) {
      final CharSequence value=""String_Node_Str"" + j;
      if (rnd.nextBoolean()) {
        map1.put(key,value);
        task.incrementAndGet();
        executorService.submit(new Runnable(){
          @Override public void run(){
            map2.put0(key,value,true,(byte)1,t);
            task.decrementAndGet();
          }
        }
);
      }
 else {
        map2.put(key,value);
        task.incrementAndGet();
        executorService.submit(new Runnable(){
          @Override public void run(){
            map1.put0(key,value,true,(byte)2,t);
            task.decrementAndGet();
          }
        }
);
      }
    }
 else {
      if (rnd.nextBoolean()) {
        map1.remove(key);
        task.incrementAndGet();
        executorService.submit(new Runnable(){
          @Override public void run(){
            map2.remoteRemove(key,(byte)1,t);
            task.decrementAndGet();
          }
        }
);
      }
 else {
        map2.remove(key);
        task.incrementAndGet();
        executorService.submit(new Runnable(){
          @Override public void run(){
            map1.remoteRemove(key,(byte)2,t);
            task.decrementAndGet();
          }
        }
);
      }
    }
  }
  while (task.get() > 0) {
  }
  Assert.assertEquals(new TreeMap(map1),new TreeMap(map2));
}","@Test public void testSoakTestWithRandomData() throws IOException, InterruptedException {
  ExecutorService executorService=Executors.newSingleThreadExecutor();
  System.out.print(""String_Node_Str"");
  for (int j=1; j < 10000; j++) {
    if (j % 100 == 0)     System.out.print(""String_Node_Str"");
    Random rnd=new Random(j);
    if (rnd.nextInt(10) < 2)     time++;
    final long t=time;
    final int key=rnd.nextInt(1000);
    addRandomDelay(executorService,rnd);
    if (rnd.nextBoolean()) {
      final CharSequence value=""String_Node_Str"" + j;
      if (rnd.nextBoolean()) {
        map1.put(key,value,(byte)1,t);
        task.incrementAndGet();
        executorService.submit(new Runnable(){
          @Override public void run(){
            map2.put0(key,value,true,(byte)1,t);
            task.decrementAndGet();
          }
        }
);
      }
 else {
        map2.put(key,value,(byte)2,t);
        task.incrementAndGet();
        executorService.submit(new Runnable(){
          @Override public void run(){
            map1.put0(key,value,true,(byte)2,t);
            task.decrementAndGet();
          }
        }
);
      }
    }
 else {
      if (rnd.nextBoolean()) {
        map1.remoteRemove(key,(byte)1,t);
        task.incrementAndGet();
        executorService.submit(new Runnable(){
          @Override public void run(){
            map2.remoteRemove(key,(byte)1,t);
            task.decrementAndGet();
          }
        }
);
      }
 else {
        map2.remoteRemove(key,(byte)2,t);
        task.incrementAndGet();
        executorService.submit(new Runnable(){
          @Override public void run(){
            map1.remoteRemove(key,(byte)2,t);
            task.decrementAndGet();
          }
        }
);
      }
    }
  }
  while (task.get() > 0) {
  }
  Assert.assertEquals(new TreeMap(map1),new TreeMap(map2));
}",0.978456503954186
162999,"/** 
 * @throws IOException
 */
public ReplicationHubFindByName(ReplicationHub replicationHub) throws IOException {
  LOG.info(""String_Node_Str"" + replicationHub);
  this.replicationHub=replicationHub;
  ReplicationChannel channel=replicationHub.createChannel((short)MAP_BY_NAME_CHANNEL);
  final MapEventListener<CharSequence,MapInstanceConfig> listener=new MapEventListener<CharSequence,MapInstanceConfig>(){
    @Override public void onPut(    CharSequence key,    MapInstanceConfig value,    MapInstanceConfig replacedValue){
      super.onPut(key,value,replacedValue);
      boolean added=replacedValue == null;
      if (!added || value == null)       return;
      LOG.info(""String_Node_Str"" + value.name + ""String_Node_Str""+ value.channel.channelId());
      try {
        toReplicatedViaChannel(value.mapBuilder,value.channel.channelId()).create();
      }
 catch (      IllegalStateException e) {
        LOG.debug(""String_Node_Str"" + value.name + ""String_Node_Str""+ value.channel.channelId(),e);
      }
catch (      IOException e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
;
  this.map=(Map)ChronicleMapBuilder.of(CharSequence.class,MapInstanceConfig.class).entrySize(3000).entries(128).eventListener(listener).instance().replicatedViaChannel(channel).create();
  if (LOG.isDebugEnabled())   LOG.debug(""String_Node_Str"" + map);
}","/** 
 * @throws IOException
 */
public ReplicationHubFindByName(ReplicationHub replicationHub) throws IOException {
  LOG.info(""String_Node_Str"" + replicationHub);
  this.replicationHub=replicationHub;
  ReplicationChannel channel=replicationHub.createChannel((short)MAP_BY_NAME_CHANNEL);
  final MapEventListener<CharSequence,MapInstanceConfig> listener=new MapEventListener<CharSequence,MapInstanceConfig>(){
    @Override public void onPut(    CharSequence key,    MapInstanceConfig value,    MapInstanceConfig replacedValue){
      super.onPut(key,value,replacedValue);
      boolean added=replacedValue == null;
      if (!added || value == null)       return;
      LOG.info(""String_Node_Str"" + value.name + ""String_Node_Str""+ value.channel.channelId());
      try {
        toReplicatedViaChannel(value.mapBuilder,value.channel.channelId()).create();
      }
 catch (      IllegalStateException e) {
        LOG.debug(""String_Node_Str"" + value.name + ""String_Node_Str""+ value.channel.channelId(),e);
      }
catch (      IOException e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
;
  this.map=(Map)ChronicleMapBuilder.of(CharSequence.class,MapInstanceConfig.class).entrySize(4000).entries(128).eventListener(listener).instance().replicatedViaChannel(channel).create();
  if (LOG.isDebugEnabled())   LOG.debug(""String_Node_Str"" + map);
}",0.9992641648270788
163000,"@Test @Ignore public void testLarge() throws Exception {
  int s=8 * 1024;
  for (int i=0; i < 10; i++) {
    System.out.println(""String_Node_Str"" + i);
    int entries=s * s;
    testEntriesMaxSize(s,entries * 4 / 5,entries * 4 / 3,i);
    entries*=2;
    testEntriesMaxSize(s,entries * 4 / 5,entries * 4 / 3,i);
  }
  System.out.printf(""String_Node_Str"",scoreCount / score);
}","@Test @Ignore(""String_Node_Str"") public void testLarge() throws Exception {
  int s=8 * 1024;
  for (int i=0; i < 10; i++) {
    System.out.println(""String_Node_Str"" + i);
    int entries=s * s;
    testEntriesMaxSize(s,entries * 4 / 5,entries * 4 / 3,i);
    entries*=2;
    testEntriesMaxSize(s,entries * 4 / 5,entries * 4 / 3,i);
  }
  System.out.printf(""String_Node_Str"",scoreCount / score);
}",0.975483870967742
