record_number,buggy_code,fixed_code,code_similarity
127001,"public void waitForUserAction() throws InterruptedException {
  if (!openSocket) {
    return;
  }
  try {
    boolean action=false;
    oos.writeObject(TraceStatusBean.UI_STATUS);
    do {
      ois=new NoHeaderObjectInputStream(s.getInputStream());
      TraceBean traceBean=(TraceBean)ois.readObject();
      if (traceBean.equals(TraceStatusBean.STATUS_WAITING)) {
        oos.writeObject(TraceStatusBean.UI_STATUS);
        Thread.sleep(100);
      }
 else {
        action=true;
      }
    }
 while (!action);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
}","public synchronized void waitForUserAction() throws InterruptedException {
  if (!openSocket) {
    return;
  }
  try {
    boolean action=false;
    oos.writeObject(TraceStatusBean.UI_STATUS);
    do {
      ois=new NoHeaderObjectInputStream(s.getInputStream());
      TraceBean traceBean=(TraceBean)ois.readObject();
      if (traceBean.equals(TraceStatusBean.STATUS_WAITING)) {
        oos.writeObject(TraceStatusBean.UI_STATUS);
        Thread.sleep(100);
      }
 else {
        action=true;
      }
    }
 while (!action);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
}",0.9899923017705928
127002,"public boolean isPause(){
  if (!openSocket) {
    return false;
  }
  try {
    askForStatus();
    ois=new NoHeaderObjectInputStream(s.getInputStream());
    TraceBean traceBean=(TraceBean)ois.readObject();
    return traceBean.equals(TraceStatusBean.PAUSE);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    return false;
  }
}","public synchronized boolean isPause(){
  if (!openSocket) {
    return false;
  }
  try {
    askForStatus();
    ois=new NoHeaderObjectInputStream(s.getInputStream());
    TraceBean traceBean=(TraceBean)ois.readObject();
    return traceBean.equals(TraceStatusBean.PAUSE);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    return false;
  }
}",0.9849012775842044
127003,"public boolean isNextBreakpoint(){
  if (!openSocket) {
    return false;
  }
  try {
    askForStatus();
    ois=new NoHeaderObjectInputStream(s.getInputStream());
    TraceBean traceBean=(TraceBean)ois.readObject();
    return traceBean.equals(TraceStatusBean.NEXT_BREAKPOINT);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    return false;
  }
}","public synchronized boolean isNextBreakpoint(){
  if (!openSocket) {
    return false;
  }
  try {
    askForStatus();
    ois=new NoHeaderObjectInputStream(s.getInputStream());
    TraceBean traceBean=(TraceBean)ois.readObject();
    return traceBean.equals(TraceStatusBean.NEXT_BREAKPOINT);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    return false;
  }
}",0.985539488320356
127004,"public Map<String,String> getTraceData();","public Map<String,TraceData> getTraceData();",0.8470588235294118
127005,"public void setTraceData(Map<String,String> traceData);","public void setTraceData(Map<String,TraceData> traceData);",0.8849557522123894
127006,"public void setTraceData(Map<String,String> traceData){
}","public void setTraceData(Map<String,TraceData> traceData){
}",0.8888888888888888
127007,"public Map<String,String> getTraceData(){
  return null;
}","public Map<String,TraceData> getTraceData(){
  return null;
}",0.8907563025210085
127008,"private void askForStatus() throws IOException {
  oos.writeObject(TraceStatusBean.ID_STATUS);
}","private synchronized void askForStatus() throws IOException {
  oos.writeObject(TraceStatusBean.ID_STATUS);
}",0.9365853658536586
127009,"public boolean isNextRow(){
  if (!openSocket) {
    return false;
  }
  try {
    askForStatus();
    ois=new NoHeaderObjectInputStream(s.getInputStream());
    TraceBean traceBean=(TraceBean)ois.readObject();
    return traceBean.equals(TraceStatusBean.NEXT_ROW);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    return false;
  }
}","public synchronized boolean isNextRow(){
  if (!openSocket) {
    return false;
  }
  try {
    askForStatus();
    ois=new NoHeaderObjectInputStream(s.getInputStream());
    TraceBean traceBean=(TraceBean)ois.readObject();
    return traceBean.equals(TraceStatusBean.NEXT_ROW);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    return false;
  }
}",0.9850746268656716
127010,"public void sendTrace(String connectionId,String startNodeCid,LinkedHashMap datas) throws IOException {
  if (!openSocket) {
    return;
  }
  subjobMap.put(connectionId,startNodeCid);
  Iterator<Entry<String,String>> ite=subjobMap.entrySet().iterator();
  boolean sameSub=false;
  while (ite.hasNext()) {
    Entry<String,String> en=ite.next();
    if (en.getKey().equals(connectionId)) {
      continue;
    }
    if (en.getValue().equals(startNodeCid)) {
      sameSub=true;
      break;
    }
  }
  if (sameSub && processTraces.size() > 1) {
    if (connectionId.equals(this.connectionId)) {
      return;
    }
  }
  TraceDataBean bean;
  if (processTraces.containsKey(connectionId)) {
    bean=processTraces.get(connectionId);
  }
 else {
    bean=new TraceDataBean(connectionId);
  }
  bean.setNbLine(bean.getNbLine() + 1);
  processTraces.put(connectionId,bean);
  bean.setData(datas);
  oos.writeUnshared(bean);
  oos.flush();
  this.connectionId=connectionId;
}","public synchronized void sendTrace(String connectionId,String startNodeCid,LinkedHashMap datas) throws IOException {
  if (!openSocket) {
    return;
  }
  subjobMap.put(connectionId,startNodeCid);
  Iterator<Entry<String,String>> ite=subjobMap.entrySet().iterator();
  boolean sameSub=false;
  while (ite.hasNext()) {
    Entry<String,String> en=ite.next();
    if (en.getKey().equals(connectionId)) {
      continue;
    }
    if (en.getValue().equals(startNodeCid)) {
      sameSub=true;
      break;
    }
  }
  if (sameSub && processTraces.size() > 1) {
    if (connectionId.equals(this.connectionId)) {
      return;
    }
  }
  TraceDataBean bean;
  if (processTraces.containsKey(connectionId)) {
    bean=processTraces.get(connectionId);
  }
 else {
    bean=new TraceDataBean(connectionId);
  }
  bean.setNbLine(bean.getNbLine() + 1);
  processTraces.put(connectionId,bean);
  bean.setData(datas);
  oos.writeUnshared(bean);
  oos.flush();
  this.connectionId=connectionId;
}",0.9933503836317136
127011,"public void waitForUserAction() throws InterruptedException {
  if (!openSocket) {
    return;
  }
  try {
    boolean action=false;
    oos.writeObject(TraceStatusBean.UI_STATUS);
    do {
      ois=new NoHeaderObjectInputStream(s.getInputStream());
      TraceBean traceBean=(TraceBean)ois.readObject();
      if (traceBean.equals(TraceStatusBean.STATUS_WAITING)) {
        oos.writeObject(TraceStatusBean.UI_STATUS);
        Thread.sleep(100);
      }
 else {
        action=true;
      }
    }
 while (!action);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
}","public synchronized void waitForUserAction() throws InterruptedException {
  if (!openSocket) {
    return;
  }
  try {
    boolean action=false;
    oos.writeObject(TraceStatusBean.UI_STATUS);
    do {
      ois=new NoHeaderObjectInputStream(s.getInputStream());
      TraceBean traceBean=(TraceBean)ois.readObject();
      if (traceBean.equals(TraceStatusBean.STATUS_WAITING)) {
        oos.writeObject(TraceStatusBean.UI_STATUS);
        Thread.sleep(100);
      }
 else {
        action=true;
      }
    }
 while (!action);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
}",0.9899923017705928
127012,"public boolean isPause(){
  if (!openSocket) {
    return false;
  }
  try {
    askForStatus();
    ois=new NoHeaderObjectInputStream(s.getInputStream());
    TraceBean traceBean=(TraceBean)ois.readObject();
    return traceBean.equals(TraceStatusBean.PAUSE);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    return false;
  }
}","public synchronized boolean isPause(){
  if (!openSocket) {
    return false;
  }
  try {
    askForStatus();
    ois=new NoHeaderObjectInputStream(s.getInputStream());
    TraceBean traceBean=(TraceBean)ois.readObject();
    return traceBean.equals(TraceStatusBean.PAUSE);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    return false;
  }
}",0.9849012775842044
127013,"public boolean isNextBreakpoint(){
  if (!openSocket) {
    return false;
  }
  try {
    askForStatus();
    ois=new NoHeaderObjectInputStream(s.getInputStream());
    TraceBean traceBean=(TraceBean)ois.readObject();
    return traceBean.equals(TraceStatusBean.NEXT_BREAKPOINT);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    return false;
  }
}","public synchronized boolean isNextBreakpoint(){
  if (!openSocket) {
    return false;
  }
  try {
    askForStatus();
    ois=new NoHeaderObjectInputStream(s.getInputStream());
    TraceBean traceBean=(TraceBean)ois.readObject();
    return traceBean.equals(TraceStatusBean.NEXT_BREAKPOINT);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    return false;
  }
}",0.985539488320356
127014,"public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  List<Catalog> catalogList=new ArrayList<Catalog>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  if (ConnectionUtils.isPostgresql(dbJDBCMetadata)) {
    return fillPostgresqlCatalogs(metaConnection,dbConn,dbJDBCMetadata,catalogList);
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.MYSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL05_08.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String catalogTemp=iMetadataCon.getDatabase();
        if (""String_Node_Str"".equals(catalogTemp)) {
          catalogFilter.clear();
        }
      }
    }
  }
  try {
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().indexOf(EDatabaseTypeName.ORACLEFORSID.getProduct()) > -1) {
      return catalogList;
    }
    if (ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
      return catalogList;
    }
    ResultSet catalogNames=null;
    if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
      catalogNames=((SybaseDatabaseMetaData)dbJDBCMetadata).getCatalogs(((DatabaseConnection)dbConn).getUsername());
    }
 else {
      catalogNames=dbJDBCMetadata.getCatalogs();
    }
    List<String> filterList=new ArrayList<String>();
    if (catalogNames != null) {
      boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
      boolean isSybase=MetadataConnectionUtils.isSybase(dbJDBCMetadata);
      while (catalogNames.next()) {
        String catalogName=null;
        try {
          String temp=null;
          if (isHive) {
            temp=MetaDataConstants.TABLE_CAT.name();
          }
 else {
            temp=MetadataConnectionUtils.isOdbcPostgresql(dbJDBCMetadata) ? DatabaseConstant.ODBC_POSTGRESQL_CATALOG_NAME : MetaDataConstants.TABLE_CAT.name();
          }
          catalogName=catalogNames.getString(temp);
          if (!isHive && !MetadataConnectionUtils.isODBCCatalog(catalogName,dbJDBCMetadata)) {
            continue;
          }
        }
 catch (        Exception e) {
          log.warn(e,e);
          if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.POSTGRESQL_PRODUCT_NAME) > -1) {
            catalogName=""String_Node_Str"";
          }
        }
        if (catalogName != null) {
          if (!isNullSID(dbConn) && dbConn != null && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
            String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
            postFillCatalog(metaConnection,catalogList,filterList,TalendCWMService.getReadableName(dbConn,databaseOnConnWizard),dbConn);
            break;
          }
 else           if (isCreateElement(catalogFilter,catalogName)) {
            postFillCatalog(metaConnection,catalogList,filterList,catalogName,dbConn);
          }
        }
      }
      catalogNames.close();
      if (!isHive) {
        List<Catalog> removeCatalogList=new ArrayList<Catalog>();
        for (        Catalog catalog : catalogList) {
          List<Schema> schemaList=new ArrayList<Schema>();
          try {
            schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,filterList);
            if (!schemaList.isEmpty() && schemaList.size() > 0) {
              CatalogHelper.addSchemas(schemaList,catalog);
            }
          }
 catch (          Throwable e) {
            removeCatalogList.add(catalog);
          }
        }
        if (isSybase && catalogFilter != null && !catalogFilter.isEmpty() && catalogFilter.size() > 0 && catalogList.isEmpty() && catalogList.size() == 0) {
          catalogFilter.clear();
          return fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
        }
        catalogList.removeAll(removeCatalogList);
      }
      Set<MetadataTable> tableSet=ConnectionHelper.getTables(dbConn);
      List<Catalog> replaceCatalogs=new ArrayList<Catalog>();
      List<String> catalogName=new ArrayList<String>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null) {
          if (eContainer instanceof Catalog) {
            Catalog c=(Catalog)eContainer;
            String name=c.getName();
            if (!catalogName.contains(name)) {
              replaceCatalogs.add(c);
              catalogName.add(name);
            }
          }
 else           if (eContainer instanceof Schema) {
            EObject parent=eContainer.eContainer();
            if (parent != null && parent instanceof Catalog) {
              Catalog c=(Catalog)parent;
              String name=c.getName();
              if (!catalogName.contains(name)) {
                List<Schema> filterSchemas=new ArrayList<Schema>();
                List<String> schemaName=new ArrayList<String>();
                List<Schema> schemas=CatalogHelper.getSchemas(c);
                for (                Schema schema : schemas) {
                  if (filterList != null) {
                    if (filterList.contains(schema.getName())) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
 else                     if (schema.getOwnedElement() != null && !schema.getOwnedElement().isEmpty()) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
                  }
                }
                for (                Catalog catalog : catalogList) {
                  if (catalog.getName().equals(name)) {
                    boolean added=false;
                    for (                    Schema schema : CatalogHelper.getSchemas(catalog)) {
                      if (!schemaName.contains(schema.getName())) {
                        filterSchemas.add(schema);
                        added=true;
                      }
                    }
                    if (added) {
                      break;
                    }
                  }
                }
                c.getOwnedElement().clear();
                CatalogHelper.addSchemas(filterSchemas,c);
                replaceCatalogs.add(c);
                catalogName.add(name);
              }
            }
          }
        }
      }
      if (this.isLinked() && !catalogList.isEmpty()) {
        ConnectionHelper.addCatalogs(catalogList,dbConn);
      }
      for (      Catalog catalog : replaceCatalogs) {
        List<Catalog> list=new ArrayList<Catalog>();
        String name=catalog.getName();
        Catalog c=(Catalog)ConnectionHelper.getPackage(name,dbConn,Catalog.class);
        if (c != null) {
          list.add(c);
          ConnectionHelper.removeCatalogs(list,dbConn);
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
 else {
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"",e);
  }
  return catalogList;
}","public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  List<Catalog> catalogList=new ArrayList<Catalog>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  if (ConnectionUtils.isPostgresql(dbJDBCMetadata)) {
    return fillPostgresqlCatalogs(metaConnection,dbConn,dbJDBCMetadata,catalogList);
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.MYSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL05_08.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String catalogTemp=iMetadataCon.getDatabase();
        if (""String_Node_Str"".equals(catalogTemp)) {
          catalogFilter.clear();
        }
      }
    }
  }
  try {
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().indexOf(EDatabaseTypeName.ORACLEFORSID.getProduct()) > -1) {
      return catalogList;
    }
    if (ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
      return catalogList;
    }
    ResultSet catalogNames=null;
    if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
      catalogNames=((SybaseDatabaseMetaData)dbJDBCMetadata).getCatalogs(((DatabaseConnection)dbConn).getUsername());
    }
 else {
      catalogNames=dbJDBCMetadata.getCatalogs();
    }
    List<String> schemaFilterList=new ArrayList<String>();
    if (catalogNames != null) {
      boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
      boolean isSybase=MetadataConnectionUtils.isSybase(dbJDBCMetadata);
      while (catalogNames.next()) {
        String catalogName=null;
        try {
          String temp=null;
          if (isHive) {
            temp=MetaDataConstants.TABLE_CAT.name();
          }
 else {
            temp=MetadataConnectionUtils.isOdbcPostgresql(dbJDBCMetadata) ? DatabaseConstant.ODBC_POSTGRESQL_CATALOG_NAME : MetaDataConstants.TABLE_CAT.name();
          }
          catalogName=catalogNames.getString(temp);
          if (!isHive && !MetadataConnectionUtils.isODBCCatalog(catalogName,dbJDBCMetadata)) {
            continue;
          }
        }
 catch (        Exception e) {
          log.warn(e,e);
          if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.POSTGRESQL_PRODUCT_NAME) > -1) {
            catalogName=""String_Node_Str"";
          }
        }
        if (catalogName != null) {
          if (!isNullSID(dbConn) && dbConn != null && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
            String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,TalendCWMService.getReadableName(dbConn,databaseOnConnWizard),dbConn);
            break;
          }
 else           if (isCreateElement(catalogFilter,catalogName)) {
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,catalogName,dbConn);
          }
        }
      }
      catalogNames.close();
      if (!isHive) {
        List<Catalog> removeCatalogList=new ArrayList<Catalog>();
        for (        Catalog catalog : catalogList) {
          List<Schema> schemaList=new ArrayList<Schema>();
          try {
            schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,schemaFilterList);
            if (!schemaList.isEmpty() && schemaList.size() > 0) {
              CatalogHelper.addSchemas(schemaList,catalog);
            }
          }
 catch (          Throwable e) {
            removeCatalogList.add(catalog);
          }
        }
        if (isSybase && catalogFilter != null && !catalogFilter.isEmpty() && catalogFilter.size() > 0 && catalogList.isEmpty() && catalogList.size() == 0) {
          catalogFilter.clear();
          return fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
        }
        catalogList.removeAll(removeCatalogList);
      }
      Set<MetadataTable> tableSet=ConnectionHelper.getTables(dbConn);
      List<Catalog> replaceCatalogs=new ArrayList<Catalog>();
      List<String> catalogName=new ArrayList<String>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null) {
          if (eContainer instanceof Catalog) {
            Catalog c=(Catalog)eContainer;
            String name=c.getName();
            if (!catalogName.contains(name)) {
              replaceCatalogs.add(c);
              catalogName.add(name);
            }
          }
 else           if (eContainer instanceof Schema) {
            EObject parent=eContainer.eContainer();
            if (parent != null && parent instanceof Catalog) {
              Catalog c=(Catalog)parent;
              String name=c.getName();
              if (!catalogName.contains(name)) {
                List<Schema> filterSchemas=new ArrayList<Schema>();
                List<String> schemaName=new ArrayList<String>();
                List<Schema> schemas=CatalogHelper.getSchemas(c);
                for (                Schema schema : schemas) {
                  if (schemaFilterList != null) {
                    if (schemaFilterList.contains(schema.getName())) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
 else                     if (schema.getOwnedElement() != null && !schema.getOwnedElement().isEmpty()) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
                  }
                }
                for (                Catalog catalog : catalogList) {
                  if (catalog.getName().equals(name)) {
                    boolean added=false;
                    for (                    Schema schema : CatalogHelper.getSchemas(catalog)) {
                      if (!schemaName.contains(schema.getName())) {
                        filterSchemas.add(schema);
                        added=true;
                      }
                    }
                    if (added) {
                      break;
                    }
                  }
                }
                c.getOwnedElement().clear();
                CatalogHelper.addSchemas(filterSchemas,c);
                replaceCatalogs.add(c);
                catalogName.add(name);
              }
            }
          }
        }
      }
      if (this.isLinked() && !catalogList.isEmpty()) {
        ConnectionHelper.addCatalogs(catalogList,dbConn);
      }
      for (      Catalog catalog : replaceCatalogs) {
        List<Catalog> list=new ArrayList<Catalog>();
        String name=catalog.getName();
        Catalog c=(Catalog)ConnectionHelper.getPackage(name,dbConn,Catalog.class);
        if (c != null) {
          list.add(c);
          ConnectionHelper.removeCatalogs(list,dbConn);
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
 else {
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"",e);
  }
  return catalogList;
}",0.9921238819917234
127015,"private List<String> postFillCatalog(IMetadataConnection metaConnection,List<Catalog> catalogList,List<String> filterList,String catalogName,Connection dbConn){
  Catalog catalog=CatalogHelper.createCatalog(catalogName);
  catalogList.add(catalog);
  DatabaseConnection dbConnection=(DatabaseConnection)dbConn;
  if (dbConnection.getDatabaseType() != null && dbConnection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConnection);
    if (iMetadataCon != null) {
      if (!StringUtils.isEmpty(iMetadataCon.getDatabase()) && !filterList.contains(iMetadataCon.getDatabase())) {
        filterList.add(iMetadataCon.getDatabase());
      }
      String pattern=ExtractMetaDataUtils.getInstance().retrieveSchemaPatternForAS400(iMetadataCon.getAdditionalParams());
      if (pattern != null && !""String_Node_Str"".equals(pattern)) {
        String[] multiSchems=ExtractMetaDataUtils.getInstance().getMultiSchems(pattern);
        if (multiSchems != null) {
          for (          String s : multiSchems) {
            if (!StringUtils.isEmpty(s) && !filterList.contains(s)) {
              filterList.add(s);
            }
          }
        }
      }
    }
  }
 else {
    String uiSchema=dbConnection.getUiSchema();
    if (uiSchema != null) {
      uiSchema=TalendCWMService.getReadableName(dbConn,uiSchema);
    }
    if (!StringUtils.isBlank(uiSchema) && !filterList.contains(uiSchema)) {
      filterList.add(uiSchema);
    }
  }
  return filterList;
}","@Deprecated private List<String> postFillCatalog(IMetadataConnection metaConnection,List<Catalog> catalogList,List<String> filterList,String catalogName,Connection dbConn){
  Catalog catalog=CatalogHelper.createCatalog(catalogName);
  catalogList.add(catalog);
  DatabaseConnection dbConnection=(DatabaseConnection)dbConn;
  if (dbConnection.getDatabaseType() != null && dbConnection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConnection);
    if (iMetadataCon != null) {
      if (!StringUtils.isEmpty(iMetadataCon.getDatabase()) && !filterList.contains(iMetadataCon.getDatabase())) {
        filterList.add(iMetadataCon.getDatabase());
      }
      String pattern=ExtractMetaDataUtils.getInstance().retrieveSchemaPatternForAS400(iMetadataCon.getAdditionalParams());
      if (pattern != null && !""String_Node_Str"".equals(pattern)) {
        String[] multiSchems=ExtractMetaDataUtils.getInstance().getMultiSchems(pattern);
        if (multiSchems != null) {
          for (          String s : multiSchems) {
            if (!StringUtils.isEmpty(s) && !filterList.contains(s)) {
              filterList.add(s);
            }
          }
        }
      }
    }
  }
 else {
    String uiSchema=dbConnection.getUiSchema();
    if (uiSchema != null) {
      uiSchema=TalendCWMService.getReadableName(dbConn,uiSchema);
    }
    if (!StringUtils.isBlank(uiSchema) && !filterList.contains(uiSchema)) {
      filterList.add(uiSchema);
    }
  }
  return filterList;
}",0.9961265332472564
127016,"/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  scrolledCompositeFileViewer.getHorizontalBar().addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      int hSelection=scrolledCompositeFileViewer.getHorizontalBar().getSelection();
      graphicRule.setBounds(5 - hSelection,5,filePositionalViewer.getText().getSize().x,graphicRule.getSize().y);
    }
  }
);
  scrolledCompositeFileViewer.addControlListener(new ControlListener(){
    public void controlMoved(    ControlEvent e){
    }
    public void controlResized(    ControlEvent e){
      int compositeXsize=filePositionalViewer.getText().getSize().x;
      int compositeYsize=graphicRule.getSize().y;
      if (compositeXsize <= 10000) {
        graphicRule.setBounds(5,5,500,0);
        graphicRule.setSize(10000,compositeYsize);
      }
 else {
        graphicRule.setBounds(5,5,500,0);
        graphicRule.setSize(compositeXsize,compositeYsize);
      }
    }
  }
);
  serverCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setServer(serverCombo.getText());
      checkFieldsValue();
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setFilePath(PathUtils.getPortablePath(fileField.getText()));
        checkFilePathAndManageIt(true);
      }
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFilePathAndManageIt(true);
    }
  }
);
  fileFormatCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setFormat(FileFormat.getByName(fileFormatCombo.getText()));
      if (getConnection().getRowSeparatorType() == RowSeparator.STANDART_EOL_LITERAL) {
        if (getConnection().getFormat().toString().equals(FileFormat.MAC_LITERAL.getName())) {
          getConnection().setRowSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
        }
 else {
          getConnection().setRowSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
        }
      }
      checkFilePathAndManageIt(false);
    }
  }
);
  filePositionalViewer.getFieldSeparatorValue().addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        String value=filePositionalViewer.getFieldSeparatorValue().getText();
        String valueToField=value;
        if (fieldSeparatorText.getText().contains(""String_Node_Str"")) {
          if (value.equals(""String_Node_Str"")) {
            valueToField=""String_Node_Str"";
          }
 else {
            valueToField=value + ""String_Node_Str"";
          }
        }
        if (!fieldSeparatorText.getText().equals(valueToField)) {
          fieldSeparatorText.setEditable(false);
          fieldSeparatorText.setText(valueToField);
          fieldSeparatorText.setEditable(true);
          fieldPositionText.setEditable(false);
          fieldPositionText.setText(filePositionalViewer.calculatePositionX());
          fieldPositionText.setEditable(true);
          checkFieldsValue();
        }
      }
    }
  }
);
  fieldSeparatorText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        String separatorValue=TalendQuoteUtils.addQuotes(fieldSeparatorText.getText());
        getConnection().setFieldSeparatorValue(separatorValue);
        if (fieldSeparatorText.getEditable() && getConnection().getFieldSeparatorValue().equals(separatorValue)) {
          if (!checkFieldSeparatorValue()) {
            fieldPositionText.setEditable(false);
            if (filePositionalViewer.getVisible()) {
              filePositionalViewer.cleanAllMarkers();
              filePositionalViewer.setEnabled(false);
              graphicRule.setEnabled(false);
            }
          }
 else {
            String value=getValidateFieldSeparator(separatorValue);
            Point selection=fieldSeparatorText.getSelection();
            if ((!value.equals(TalendQuoteUtils.removeQuotes(getConnection().getFieldSeparatorValue())))) {
              fieldPositionText.setEditable(false);
              if (filePositionalViewer.getVisible()) {
                filePositionalViewer.setEnabled(false);
                graphicRule.setEnabled(false);
                filePositionalViewer.cleanAllMarkers();
              }
            }
 else {
              filePositionalViewer.setEnabled(true);
              graphicRule.setEnabled(true);
              filePositionalViewer.setSeparatorValue(value,filePositionalViewer.getVisible());
              String newPosition=filePositionalViewer.calculatePositionX();
              if (!fieldPositionText.getText().equals(newPosition)) {
                fieldPositionText.setEditable(false);
                fieldPositionText.setText(newPosition);
              }
              fieldPositionText.setEditable(true);
            }
            fieldSeparatorText.setSelection(selection.x);
          }
        }
      }
    }
  }
);
  fieldSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (isContextMode()) {
        e.doit=false;
      }
 else {
        e.doit=charIsAcceptedOnFieldSeparator(fieldSeparatorText.getText(),e.character,fieldSeparatorText.getSelection().x);
      }
    }
  }
);
  fieldPositionText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (fieldPositionText.getEditable()) {
          if (!checkFieldPositionValue()) {
            fieldSeparatorText.setEditable(false);
            if (filePositionalViewer.getVisible()) {
              filePositionalViewer.setEnabled(false);
              graphicRule.setEnabled(false);
              filePositionalViewer.cleanAllMarkers();
            }
          }
 else {
            filePositionalViewer.setEnabled(true);
            graphicRule.setEnabled(true);
            String value=getValidateFieldPosition(fieldPositionText.getText());
            Point selection=fieldPositionText.getSelection();
            filePositionalViewer.setPositionValue(value,filePositionalViewer.getVisible());
            fieldSeparatorText.setEditable(true);
            value=filePositionalViewer.getSeparatorValue();
            if (fieldSeparatorText.getText().equals(""String_Node_Str"")) {
              fieldSeparatorText.setText(""String_Node_Str"");
            }
 else             if (fieldSeparatorText.getText().contains(""String_Node_Str"")) {
              fieldSeparatorText.setText(value + ""String_Node_Str"");
            }
 else {
              fieldSeparatorText.setText(value);
            }
            fieldPositionText.setSelection(selection.x);
          }
        }
      }
    }
  }
);
  fieldPositionText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (isContextMode()) {
        e.doit=false;
      }
 else {
        e.doit=charIsAcceptedOnFieldPosition(fieldPositionText.getText(),e.character,fieldPositionText.getSelection().x);
      }
    }
  }
);
}","/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  scrolledCompositeFileViewer.getHorizontalBar().addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      int hSelection=scrolledCompositeFileViewer.getHorizontalBar().getSelection();
      graphicRule.setBounds(5 - hSelection,5,filePositionalViewer.getText().getSize().x,graphicRule.getSize().y);
    }
  }
);
  scrolledCompositeFileViewer.addControlListener(new ControlListener(){
    public void controlMoved(    ControlEvent e){
    }
    public void controlResized(    ControlEvent e){
      int compositeXsize=filePositionalViewer.getText().getSize().x;
      int compositeYsize=graphicRule.getSize().y;
      if (compositeXsize <= 10000) {
        graphicRule.setBounds(5,5,500,0);
        graphicRule.setSize(10000,compositeYsize);
      }
 else {
        graphicRule.setBounds(5,5,500,0);
        graphicRule.setSize(compositeXsize,compositeYsize);
      }
    }
  }
);
  serverCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setServer(serverCombo.getText());
      checkFieldsValue();
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setFilePath(PathUtils.getPortablePath(fileField.getText()));
        checkFilePathAndManageIt(true);
      }
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFilePathAndManageIt(false);
    }
  }
);
  fileFormatCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setFormat(FileFormat.getByName(fileFormatCombo.getText()));
      if (getConnection().getRowSeparatorType() == RowSeparator.STANDART_EOL_LITERAL) {
        if (getConnection().getFormat().toString().equals(FileFormat.MAC_LITERAL.getName())) {
          getConnection().setRowSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
        }
 else {
          getConnection().setRowSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
        }
      }
      checkFilePathAndManageIt(false);
    }
  }
);
  filePositionalViewer.getFieldSeparatorValue().addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        String value=filePositionalViewer.getFieldSeparatorValue().getText();
        String valueToField=value;
        if (fieldSeparatorText.getText().contains(""String_Node_Str"")) {
          if (value.equals(""String_Node_Str"")) {
            valueToField=""String_Node_Str"";
          }
 else {
            valueToField=value + ""String_Node_Str"";
          }
        }
        if (!fieldSeparatorText.getText().equals(valueToField)) {
          fieldSeparatorText.setEditable(false);
          fieldSeparatorText.setText(valueToField);
          fieldSeparatorText.setEditable(true);
          fieldPositionText.setEditable(false);
          fieldPositionText.setText(filePositionalViewer.calculatePositionX());
          fieldPositionText.setEditable(true);
          checkFieldsValue();
        }
      }
    }
  }
);
  fieldSeparatorText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        String separatorValue=TalendQuoteUtils.addQuotes(fieldSeparatorText.getText());
        getConnection().setFieldSeparatorValue(separatorValue);
        if (fieldSeparatorText.getEditable() && getConnection().getFieldSeparatorValue().equals(separatorValue)) {
          if (!checkFieldSeparatorValue()) {
            fieldPositionText.setEditable(false);
            if (filePositionalViewer.getVisible()) {
              filePositionalViewer.cleanAllMarkers();
              filePositionalViewer.setEnabled(false);
              graphicRule.setEnabled(false);
            }
          }
 else {
            String value=getValidateFieldSeparator(separatorValue);
            Point selection=fieldSeparatorText.getSelection();
            if ((!value.equals(TalendQuoteUtils.removeQuotes(getConnection().getFieldSeparatorValue())))) {
              fieldPositionText.setEditable(false);
              if (filePositionalViewer.getVisible()) {
                filePositionalViewer.setEnabled(false);
                graphicRule.setEnabled(false);
                filePositionalViewer.cleanAllMarkers();
              }
            }
 else {
              filePositionalViewer.setEnabled(true);
              graphicRule.setEnabled(true);
              filePositionalViewer.setSeparatorValue(value,filePositionalViewer.getVisible());
              String newPosition=filePositionalViewer.calculatePositionX();
              if (!fieldPositionText.getText().equals(newPosition)) {
                fieldPositionText.setEditable(false);
                fieldPositionText.setText(newPosition);
              }
              fieldPositionText.setEditable(true);
            }
            fieldSeparatorText.setSelection(selection.x);
          }
        }
      }
    }
  }
);
  fieldSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (isContextMode()) {
        e.doit=false;
      }
 else {
        e.doit=charIsAcceptedOnFieldSeparator(fieldSeparatorText.getText(),e.character,fieldSeparatorText.getSelection().x);
      }
    }
  }
);
  fieldPositionText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (fieldPositionText.getEditable()) {
          if (!checkFieldPositionValue()) {
            fieldSeparatorText.setEditable(false);
            if (filePositionalViewer.getVisible()) {
              filePositionalViewer.setEnabled(false);
              graphicRule.setEnabled(false);
              filePositionalViewer.cleanAllMarkers();
            }
          }
 else {
            filePositionalViewer.setEnabled(true);
            graphicRule.setEnabled(true);
            String value=getValidateFieldPosition(fieldPositionText.getText());
            Point selection=fieldPositionText.getSelection();
            filePositionalViewer.setPositionValue(value,filePositionalViewer.getVisible());
            fieldSeparatorText.setEditable(true);
            value=filePositionalViewer.getSeparatorValue();
            if (fieldSeparatorText.getText().equals(""String_Node_Str"")) {
              fieldSeparatorText.setText(""String_Node_Str"");
            }
 else             if (fieldSeparatorText.getText().contains(""String_Node_Str"")) {
              fieldSeparatorText.setText(value + ""String_Node_Str"");
            }
 else {
              fieldSeparatorText.setText(value);
            }
            fieldPositionText.setSelection(selection.x);
          }
        }
      }
    }
  }
);
  fieldPositionText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (isContextMode()) {
        e.doit=false;
      }
 else {
        e.doit=charIsAcceptedOnFieldPosition(fieldPositionText.getText(),e.character,fieldPositionText.getSelection().x);
      }
    }
  }
);
}",0.9995235826584088
127017,"/** 
 * DOC Comment method ""setPerspectiveTabs"".
 */
public static void setPerspectiveTabs(){
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  IWorkbenchPage activePage=activeWorkbenchWindow.getActivePage();
  PerspectiveBarManager barManager=((WorkbenchWindow)activeWorkbenchWindow).getPerspectiveBar();
  try {
    createPerspective(activePage,IBrandingConfiguration.PERSPECTIVE_CAMEL_ID);
  }
 catch (  Exception e) {
    createPerspective(activePage,barManager,IBrandingConfiguration.PERSPECTIVE_CAMEL_ID);
  }
  try {
    createPerspective(activePage,IBrandingConfiguration.PERSPECTIVE_MDM_ID);
  }
 catch (  Exception e) {
    createPerspective(activePage,barManager,IBrandingConfiguration.PERSPECTIVE_MDM_ID);
  }
  try {
    createPerspective(activePage,IBrandingConfiguration.PERSPECTIVE_DQ_ID);
  }
 catch (  Exception e) {
    createPerspective(activePage,barManager,IBrandingConfiguration.PERSPECTIVE_DQ_ID);
  }
  try {
    createPerspective(activePage,IBrandingConfiguration.PERSPECTIVE_DI_ID);
  }
 catch (  Exception e) {
    createPerspective(activePage,barManager,IBrandingConfiguration.PERSPECTIVE_DI_ID);
  }
  barManager.update(false);
}","/** 
 * DOC Comment method ""setPerspectiveTabs"".
 */
public static void setPerspectiveTabs(){
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  ((WorkbenchWindow)activeWorkbenchWindow).addPerspectiveReorderListener(null);
  PerspectiveBarManager barManager=((WorkbenchWindow)activeWorkbenchWindow).getPerspectiveBar();
  if (barManager != null && (barManager instanceof PerspectiveBarManager)) {
    cleanPerspectiveBar();
    IContributionItem lastPerspective=null;
    IContributionItem diCItem=barManager.find(IBrandingConfiguration.PERSPECTIVE_DI_ID);
    if (null == diCItem) {
      IPerspectiveDescriptor diMailPerspective=WorkbenchPlugin.getDefault().getPerspectiveRegistry().findPerspectiveWithId(IBrandingConfiguration.PERSPECTIVE_DI_ID);
      if (null != diMailPerspective && (diMailPerspective instanceof IPerspectiveDescriptor)) {
        PerspectiveBarContributionItem diItem=new PerspectiveBarContributionItem(diMailPerspective,activeWorkbenchWindow.getActivePage());
        if (null != diItem && (diItem instanceof PerspectiveBarContributionItem)) {
          barManager.addItem(diItem);
          diCItem=diItem;
        }
      }
    }
    lastPerspective=diCItem;
    IContributionItem dqCItem=barManager.find(IBrandingConfiguration.PERSPECTIVE_DQ_ID);
    if (null == dqCItem) {
      IPerspectiveDescriptor dqMailPerspective=WorkbenchPlugin.getDefault().getPerspectiveRegistry().findPerspectiveWithId(IBrandingConfiguration.PERSPECTIVE_DQ_ID);
      if (null != dqMailPerspective && (dqMailPerspective instanceof IPerspectiveDescriptor)) {
        PerspectiveBarContributionItem dqItem=new PerspectiveBarContributionItem(dqMailPerspective,activeWorkbenchWindow.getActivePage());
        if (null != dqItem && (dqItem instanceof PerspectiveBarContributionItem)) {
          if (diCItem != null) {
            barManager.insertAfter(diCItem.getId(),dqItem);
          }
 else {
            barManager.addItem(dqItem);
          }
          dqCItem=dqItem;
        }
      }
    }
    if (dqCItem != null) {
      lastPerspective=dqCItem;
    }
    IContributionItem mdmCItem=barManager.find(IBrandingConfiguration.PERSPECTIVE_MDM_ID);
    if (null == mdmCItem) {
      IPerspectiveDescriptor mdmMailPerspective=WorkbenchPlugin.getDefault().getPerspectiveRegistry().findPerspectiveWithId(IBrandingConfiguration.PERSPECTIVE_MDM_ID);
      if (null != mdmMailPerspective && (mdmMailPerspective instanceof IPerspectiveDescriptor)) {
        PerspectiveBarContributionItem mdmItem=new PerspectiveBarContributionItem(mdmMailPerspective,activeWorkbenchWindow.getActivePage());
        if (null != mdmItem && (mdmItem instanceof PerspectiveBarContributionItem)) {
          if (lastPerspective != null) {
            barManager.insertAfter(lastPerspective.getId(),mdmItem);
          }
 else {
            barManager.addItem(mdmItem);
          }
          mdmCItem=mdmItem;
        }
      }
    }
    if (mdmCItem != null) {
      lastPerspective=mdmCItem;
    }
    IContributionItem esbCItem=barManager.find(IBrandingConfiguration.PERSPECTIVE_CAMEL_ID);
    if (null == esbCItem) {
      IPerspectiveDescriptor esbPerspective=WorkbenchPlugin.getDefault().getPerspectiveRegistry().findPerspectiveWithId(IBrandingConfiguration.PERSPECTIVE_CAMEL_ID);
      if (null != esbPerspective && (esbPerspective instanceof IPerspectiveDescriptor)) {
        PerspectiveBarContributionItem esbItem=new PerspectiveBarContributionItem(esbPerspective,activeWorkbenchWindow.getActivePage());
        if (null != esbItem && (esbItem instanceof PerspectiveBarContributionItem)) {
          if (lastPerspective != null) {
            barManager.insertAfter(lastPerspective.getId(),esbItem);
          }
 else {
            barManager.addItem(esbItem);
          }
          mdmCItem=esbItem;
        }
      }
    }
    barManager.update(false);
  }
}",0.2289747108410115
127018,"/** 
 * DOC Comment method ""setPerspectiveTabs"".
 */
public static void setPerspectiveTabs(){
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  PerspectiveBarManager barManager=((WorkbenchWindow)activeWorkbenchWindow).getPerspectiveBar();
  if (barManager != null && (barManager instanceof PerspectiveBarManager)) {
    cleanPerspectiveBar();
    IContributionItem lastPerspective=null;
    IContributionItem diCItem=barManager.find(IBrandingConfiguration.PERSPECTIVE_DI_ID);
    if (null == diCItem) {
      IPerspectiveDescriptor diMailPerspective=WorkbenchPlugin.getDefault().getPerspectiveRegistry().findPerspectiveWithId(IBrandingConfiguration.PERSPECTIVE_DI_ID);
      if (null != diMailPerspective && (diMailPerspective instanceof IPerspectiveDescriptor)) {
        PerspectiveBarContributionItem diItem=new PerspectiveBarContributionItem(diMailPerspective,activeWorkbenchWindow.getActivePage());
        if (null != diItem && (diItem instanceof PerspectiveBarContributionItem)) {
          barManager.addItem(diItem);
          diCItem=diItem;
        }
      }
    }
    lastPerspective=diCItem;
    IContributionItem dqCItem=barManager.find(IBrandingConfiguration.PERSPECTIVE_DQ_ID);
    if (null == dqCItem) {
      IPerspectiveDescriptor dqMailPerspective=WorkbenchPlugin.getDefault().getPerspectiveRegistry().findPerspectiveWithId(IBrandingConfiguration.PERSPECTIVE_DQ_ID);
      if (null != dqMailPerspective && (dqMailPerspective instanceof IPerspectiveDescriptor)) {
        PerspectiveBarContributionItem dqItem=new PerspectiveBarContributionItem(dqMailPerspective,activeWorkbenchWindow.getActivePage());
        if (null != dqItem && (dqItem instanceof PerspectiveBarContributionItem)) {
          if (diCItem != null) {
            barManager.insertAfter(diCItem.getId(),dqItem);
          }
 else {
            barManager.addItem(dqItem);
          }
          dqCItem=dqItem;
        }
      }
    }
    if (dqCItem != null) {
      lastPerspective=dqCItem;
    }
    IContributionItem mdmCItem=barManager.find(IBrandingConfiguration.PERSPECTIVE_MDM_ID);
    if (null == mdmCItem) {
      IPerspectiveDescriptor mdmMailPerspective=WorkbenchPlugin.getDefault().getPerspectiveRegistry().findPerspectiveWithId(IBrandingConfiguration.PERSPECTIVE_MDM_ID);
      if (null != mdmMailPerspective && (mdmMailPerspective instanceof IPerspectiveDescriptor)) {
        PerspectiveBarContributionItem mdmItem=new PerspectiveBarContributionItem(mdmMailPerspective,activeWorkbenchWindow.getActivePage());
        if (null != mdmItem && (mdmItem instanceof PerspectiveBarContributionItem)) {
          if (lastPerspective != null) {
            barManager.insertAfter(lastPerspective.getId(),mdmItem);
          }
 else {
            barManager.addItem(mdmItem);
          }
          mdmCItem=mdmItem;
        }
      }
    }
    if (mdmCItem != null) {
      lastPerspective=mdmCItem;
    }
    IContributionItem esbCItem=barManager.find(IBrandingConfiguration.PERSPECTIVE_CAMEL_ID);
    if (null == esbCItem) {
      IPerspectiveDescriptor esbPerspective=WorkbenchPlugin.getDefault().getPerspectiveRegistry().findPerspectiveWithId(IBrandingConfiguration.PERSPECTIVE_CAMEL_ID);
      if (null != esbPerspective && (esbPerspective instanceof IPerspectiveDescriptor)) {
        PerspectiveBarContributionItem esbItem=new PerspectiveBarContributionItem(esbPerspective,activeWorkbenchWindow.getActivePage());
        if (null != esbItem && (esbItem instanceof PerspectiveBarContributionItem)) {
          if (lastPerspective != null) {
            barManager.insertAfter(lastPerspective.getId(),esbItem);
          }
 else {
            barManager.addItem(esbItem);
          }
          mdmCItem=esbItem;
        }
      }
    }
    barManager.update(false);
  }
}","/** 
 * DOC Comment method ""setPerspectiveTabs"".
 */
public static void setPerspectiveTabs(){
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  IWorkbenchPage activePage=activeWorkbenchWindow.getActivePage();
  PerspectiveBarManager barManager=((WorkbenchWindow)activeWorkbenchWindow).getPerspectiveBar();
  try {
    createPerspective(activePage,IBrandingConfiguration.PERSPECTIVE_CAMEL_ID);
  }
 catch (  Exception e) {
    createPerspective(activePage,barManager,IBrandingConfiguration.PERSPECTIVE_CAMEL_ID);
  }
  try {
    createPerspective(activePage,IBrandingConfiguration.PERSPECTIVE_MDM_ID);
  }
 catch (  Exception e) {
    createPerspective(activePage,barManager,IBrandingConfiguration.PERSPECTIVE_MDM_ID);
  }
  try {
    createPerspective(activePage,IBrandingConfiguration.PERSPECTIVE_DQ_ID);
  }
 catch (  Exception e) {
    createPerspective(activePage,barManager,IBrandingConfiguration.PERSPECTIVE_DQ_ID);
  }
  try {
    createPerspective(activePage,IBrandingConfiguration.PERSPECTIVE_DI_ID);
  }
 catch (  Exception e) {
    createPerspective(activePage,barManager,IBrandingConfiguration.PERSPECTIVE_DI_ID);
  }
  barManager.update(false);
}",0.2668791077474606
127019,"public void execute(RepositoryNode sourceNode,RepositoryNode targetNode) throws Exception {
  if (!validateAction(sourceNode,targetNode)) {
    return;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
    targetNode=targetNode.getParent();
  }
  final IPath path=RepositoryNodeUtilities.getPath(targetNode);
  if (sourceNode.getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
    final Item originalItem=sourceNode.getObject().getProperty().getItem();
    List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
    if (allVersion.size() == 1) {
      copySingleVersionItem(originalItem,path);
    }
 else     if (allVersion.size() > 1) {
      PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
      if (dialog.open() == Window.OK) {
        final Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          IProgressMonitor monitor) throws CoreException {
            try {
              Iterator<IRepositoryViewObject> iterator=selectedVersionItems.iterator();
              while (iterator.hasNext()) {
                IRepositoryViewObject repObj=iterator.next();
                Item selectedItem=repObj.getProperty().getItem();
                if (!iterator.hasNext() && isHadoopClusterItem(selectedItem)) {
                  copyHadoopClusterItem(selectedItem,path);
                  return;
                }
              }
              String id=null;
              String label=null;
              boolean isfirst=true;
              boolean needSys=true;
              for (              IRepositoryViewObject object : selectedVersionItems) {
                Item selectedItem=object.getProperty().getItem();
                Item copy=null;
                if (isfirst) {
                  copy=factory.copy(selectedItem,path);
                  id=copy.getProperty().getId();
                  label=copy.getProperty().getLabel();
                  isfirst=false;
                }
 else {
                  copy=factory.copy(selectedItem,path,label);
                }
                copy.getProperty().setId(id);
                if (needSys && originalItem instanceof RoutineItem) {
                  String lastestVersion=getLastestVersion(selectedVersionItems);
                  if (lastestVersion.equals(copy.getProperty().getVersion())) {
                    synDuplicatedRoutine((RoutineItem)copy,selectedItem.getProperty().getLabel());
                    needSys=false;
                  }
                }
                if (copy instanceof ProcessItem) {
                  RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                }
                factory.save(copy);
              }
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
catch (            BusinessException e) {
              ExceptionHandler.process(e);
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          @Override public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
      }
    }
  }
}","public void execute(RepositoryNode sourceNode,RepositoryNode targetNode) throws Exception {
  if (!validateAction(sourceNode,targetNode)) {
    return;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
    targetNode=targetNode.getParent();
  }
  final IPath path=RepositoryNodeUtilities.getPath(targetNode);
  if (sourceNode.getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
    final Item originalItem=sourceNode.getObject().getProperty().getItem();
    List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
    if (allVersion.size() == 1) {
      copySingleVersionItem(originalItem,path);
    }
 else     if (allVersion.size() > 1) {
      PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
      if (dialog.open() == Window.OK) {
        final Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          IProgressMonitor monitor) throws CoreException {
            try {
              Iterator<IRepositoryViewObject> iterator=selectedVersionItems.iterator();
              while (iterator.hasNext()) {
                IRepositoryViewObject repObj=iterator.next();
                Item selectedItem=repObj.getProperty().getItem();
                if (!iterator.hasNext() && isHadoopClusterItem(selectedItem)) {
                  copyHadoopClusterItem(selectedItem,path);
                  return;
                }
              }
              String id=null;
              String label=null;
              boolean isfirst=true;
              boolean needSys=true;
              List newItems=new ArrayList();
              for (              IRepositoryViewObject object : selectedVersionItems) {
                Item selectedItem=object.getProperty().getItem();
                Item copy=null;
                if (isfirst) {
                  copy=factory.copy(selectedItem,path);
                  id=copy.getProperty().getId();
                  label=copy.getProperty().getLabel();
                  isfirst=false;
                }
 else {
                  copy=factory.copy(selectedItem,path,label);
                }
                copy.getProperty().setId(id);
                if (needSys && originalItem instanceof RoutineItem) {
                  String lastestVersion=getLastestVersion(selectedVersionItems);
                  if (lastestVersion.equals(copy.getProperty().getVersion())) {
                    synDuplicatedRoutine((RoutineItem)copy,selectedItem.getProperty().getLabel());
                    needSys=false;
                  }
                }
                if (copy instanceof ProcessItem) {
                  RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                }
                newItems.add(copy);
                factory.save(copy);
              }
              if (newItems.size() > 0) {
                Collections.sort(newItems,new Comparator(){
                  @Override public int compare(                  Object o1,                  Object o2){
                    Item i1=(Item)o1;
                    Item i2=(Item)o2;
                    return i1.getProperty().getVersion().compareTo(i2.getProperty().getVersion());
                  }
                }
);
                Item item=(Item)newItems.get(newItems.size() - 1);
                copyDataServiceRelateJob(item);
              }
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
catch (            BusinessException e) {
              ExceptionHandler.process(e);
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          @Override public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
      }
    }
  }
}",0.9245810055865922
127020,"private void copySingleVersionItem(final Item item,final IPath path){
  final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
    @Override protected void run() throws LoginException, PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          try {
            if (isHadoopClusterItem(item)) {
              copyHadoopClusterItem(item,path);
              return;
            }
            Item newItem=factory.copy(item,path,true);
            if (newItem instanceof RoutineItem) {
              synDuplicatedRoutine((RoutineItem)newItem,item.getProperty().getLabel());
            }
            ICamelDesignerCoreService service=null;
            if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
              service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
            }
            if (service != null && service.isInstanceofCamelBeans(item)) {
              synDuplicatedBean(newItem);
            }
            if (newItem instanceof ProcessItem || newItem instanceof JobletProcessItem) {
              RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
            }
            if (newItem instanceof ConnectionItem) {
              ConnectionItem connectionItem=(ConnectionItem)newItem;
              connectionItem.getConnection().getSupplierDependency().clear();
            }
            factory.save(newItem);
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
      }
;
      IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
        @Override public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          IWorkspace workspace=ResourcesPlugin.getWorkspace();
          try {
            ISchedulingRule schedulingRule=workspace.getRoot();
            workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
          }
 catch (          CoreException e) {
            throw new InvocationTargetException(e);
          }
        }
      }
;
      try {
        new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
      }
 catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
catch (      InterruptedException e) {
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  factory.executeRepositoryWorkUnit(workUnit);
}","private void copySingleVersionItem(final Item item,final IPath path){
  final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
    @Override protected void run() throws LoginException, PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          try {
            if (isHadoopClusterItem(item)) {
              copyHadoopClusterItem(item,path);
              return;
            }
            Item newItem=factory.copy(item,path,true);
            if (newItem instanceof RoutineItem) {
              synDuplicatedRoutine((RoutineItem)newItem,item.getProperty().getLabel());
            }
            ICamelDesignerCoreService service=null;
            if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
              service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
            }
            if (service != null && service.isInstanceofCamelBeans(item)) {
              synDuplicatedBean(newItem);
            }
            if (newItem instanceof ProcessItem || newItem instanceof JobletProcessItem) {
              RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
            }
            if (newItem instanceof ConnectionItem) {
              ConnectionItem connectionItem=(ConnectionItem)newItem;
              connectionItem.getConnection().getSupplierDependency().clear();
            }
            factory.save(newItem);
            copyDataServiceRelateJob(newItem);
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
      }
;
      IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
        @Override public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          IWorkspace workspace=ResourcesPlugin.getWorkspace();
          try {
            ISchedulingRule schedulingRule=workspace.getRoot();
            workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
          }
 catch (          CoreException e) {
            throw new InvocationTargetException(e);
          }
        }
      }
;
      try {
        new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
      }
 catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
catch (      InterruptedException e) {
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  factory.executeRepositoryWorkUnit(workUnit);
}",0.9885144040670308
127021,"private void createOperation(final String newJobName,final RepositoryNode target,CopyObjectAction copyObjectAction,final TreeSelection selectionInClipboard){
  Object currentSource=selectionInClipboard.toArray()[0];
  try {
    final IPath path=RepositoryNodeUtilities.getPath(target);
    if (((RepositoryNode)currentSource).getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
      Item originalItem=((RepositoryNode)currentSource).getObject().getProperty().getItem();
      List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
      for (      IRepositoryViewObject obj : allVersion) {
        if (obj.getVersion().equals(originalItem.getProperty().getVersion())) {
          originalItem=obj.getProperty().getItem();
          break;
        }
      }
      if (allVersion.size() == 1) {
        duplicateSingleVersionItem(originalItem,path,newJobName);
      }
 else       if (allVersion.size() > 1) {
        final PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
        final Item item=originalItem;
        if (dialog.open() == Window.OK) {
          final Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
          final IWorkspaceRunnable op=new IWorkspaceRunnable(){
            @Override public void run(            IProgressMonitor monitor) throws CoreException {
              try {
                Iterator<IRepositoryViewObject> iterator=selectedVersionItems.iterator();
                while (iterator.hasNext()) {
                  IRepositoryViewObject repObj=iterator.next();
                  Item selectedItem=repObj.getProperty().getItem();
                  if (!iterator.hasNext() && isHadoopClusterItem(selectedItem)) {
                    copyHadoopClusterItem(selectedItem,path,newJobName);
                    return;
                  }
                }
                String id=null;
                boolean isfirst=true;
                boolean needSys=true;
                for (                IRepositoryViewObject object : selectedVersionItems) {
                  Item selectedItem=object.getProperty().getItem();
                  Item copy;
                  copy=factory.copy(selectedItem,path,newJobName);
                  if (isfirst) {
                    id=copy.getProperty().getId();
                    isfirst=false;
                  }
                  copy.getProperty().setId(id);
                  if (needSys && item instanceof RoutineItem) {
                    String lastestVersion=getLastestVersion(selectedVersionItems);
                    if (lastestVersion.equals(copy.getProperty().getVersion())) {
                      synDuplicatedRoutine((RoutineItem)copy,selectedItem.getProperty().getLabel());
                      needSys=false;
                    }
                  }
                  if (copy instanceof ProcessItem || copy instanceof JobletProcessItem) {
                    RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                  }
                  if (copy instanceof ConnectionItem) {
                    Connection connection=((ConnectionItem)copy).getConnection();
                    if (connection != null) {
                      connection.getSupplierDependency().clear();
                      connection.setLabel(newJobName);
                      connection.setName(newJobName);
                    }
                  }
                  factory.save(copy);
                  notifySQLExplorer(copy);
                }
              }
 catch (              PersistenceException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
catch (              BusinessException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
            }
          }
;
          IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
            @Override public void run(            IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
              IWorkspace workspace=ResourcesPlugin.getWorkspace();
              try {
                ISchedulingRule schedulingRule=workspace.getRoot();
                workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
              }
 catch (              CoreException e) {
                throw new InvocationTargetException(e);
              }
            }
          }
;
          try {
            new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
catch (          InterruptedException e) {
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","private void createOperation(final String newJobName,final RepositoryNode target,CopyObjectAction copyObjectAction,final TreeSelection selectionInClipboard){
  Object currentSource=selectionInClipboard.toArray()[0];
  try {
    final IPath path=RepositoryNodeUtilities.getPath(target);
    if (((RepositoryNode)currentSource).getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
      Item originalItem=((RepositoryNode)currentSource).getObject().getProperty().getItem();
      List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
      for (      IRepositoryViewObject obj : allVersion) {
        if (obj.getVersion().equals(originalItem.getProperty().getVersion())) {
          originalItem=obj.getProperty().getItem();
          break;
        }
      }
      if (allVersion.size() == 1) {
        duplicateSingleVersionItem(originalItem,path,newJobName);
      }
 else       if (allVersion.size() > 1) {
        final PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
        final Item item=originalItem;
        if (dialog.open() == Window.OK) {
          final Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
          final IWorkspaceRunnable op=new IWorkspaceRunnable(){
            @Override public void run(            IProgressMonitor monitor) throws CoreException {
              try {
                Iterator<IRepositoryViewObject> iterator=selectedVersionItems.iterator();
                while (iterator.hasNext()) {
                  IRepositoryViewObject repObj=iterator.next();
                  Item selectedItem=repObj.getProperty().getItem();
                  if (!iterator.hasNext() && isHadoopClusterItem(selectedItem)) {
                    copyHadoopClusterItem(selectedItem,path,newJobName);
                    return;
                  }
                }
                String id=null;
                boolean isfirst=true;
                boolean needSys=true;
                List newItems=new ArrayList();
                for (                IRepositoryViewObject object : selectedVersionItems) {
                  Item selectedItem=object.getProperty().getItem();
                  Item copy;
                  copy=factory.copy(selectedItem,path,newJobName);
                  newItems.add(copy);
                  if (isfirst) {
                    id=copy.getProperty().getId();
                    isfirst=false;
                  }
                  copy.getProperty().setId(id);
                  if (needSys && item instanceof RoutineItem) {
                    String lastestVersion=getLastestVersion(selectedVersionItems);
                    if (lastestVersion.equals(copy.getProperty().getVersion())) {
                      synDuplicatedRoutine((RoutineItem)copy,selectedItem.getProperty().getLabel());
                      needSys=false;
                    }
                  }
                  if (copy instanceof ProcessItem || copy instanceof JobletProcessItem) {
                    RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                  }
                  if (copy instanceof ConnectionItem) {
                    Connection connection=((ConnectionItem)copy).getConnection();
                    if (connection != null) {
                      connection.getSupplierDependency().clear();
                      connection.setLabel(newJobName);
                      connection.setName(newJobName);
                    }
                  }
                  factory.save(copy);
                  notifySQLExplorer(copy);
                }
                if (newItems.size() > 0) {
                  Collections.sort(newItems,new Comparator(){
                    @Override public int compare(                    Object o1,                    Object o2){
                      Item i1=(Item)o1;
                      Item i2=(Item)o2;
                      return i1.getProperty().getVersion().compareTo(i2.getProperty().getVersion());
                    }
                  }
);
                  Item item=(Item)newItems.get(newItems.size() - 1);
                  copyDataServiceRelateJob(item);
                }
              }
 catch (              PersistenceException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
catch (              BusinessException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
            }
          }
;
          IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
            @Override public void run(            IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
              IWorkspace workspace=ResourcesPlugin.getWorkspace();
              try {
                ISchedulingRule schedulingRule=workspace.getRoot();
                workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
              }
 catch (              CoreException e) {
                throw new InvocationTargetException(e);
              }
            }
          }
;
          try {
            new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
catch (          InterruptedException e) {
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.93684610994864
127022,"private void duplicateSingleVersionItem(final Item item,final IPath path,final String newName){
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        if (isHadoopClusterItem(item)) {
          copyHadoopClusterItem(item,path,newName);
          return;
        }
        final Item newItem=factory.copy(item,path,newName);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem,item.getProperty().getLabel());
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem || newItem instanceof JobletProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
        }
        if (newItem instanceof ConnectionItem) {
          Connection connection=((ConnectionItem)newItem).getConnection();
          if (connection != null) {
            connection.setLabel(newName);
            connection.setName(newName);
            connection.getSupplierDependency().clear();
          }
        }
        factory.save(newItem);
        notifySQLExplorer(newItem);
      }
 catch (      PersistenceException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
catch (      BusinessException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}","private void duplicateSingleVersionItem(final Item item,final IPath path,final String newName){
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        if (isHadoopClusterItem(item)) {
          copyHadoopClusterItem(item,path,newName);
          return;
        }
        final Item newItem=factory.copy(item,path,newName);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem,item.getProperty().getLabel());
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem || newItem instanceof JobletProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
        }
        if (newItem instanceof ConnectionItem) {
          Connection connection=((ConnectionItem)newItem).getConnection();
          if (connection != null) {
            connection.setLabel(newName);
            connection.setName(newName);
            connection.getSupplierDependency().clear();
          }
        }
        factory.save(newItem);
        notifySQLExplorer(newItem);
        copyDataServiceRelateJob(newItem);
      }
 catch (      PersistenceException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
catch (      BusinessException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}",0.991642371234208
127023,"/** 
 * DOC Comment method ""setPerspectiveTabs"".
 */
public static void setPerspectiveTabs(){
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  IWorkbenchPage activePage=activeWorkbenchWindow.getActivePage();
  PerspectiveBarManager barManager=((WorkbenchWindow)activeWorkbenchWindow).getPerspectiveBar();
  try {
    createPerspective(activePage,IBrandingConfiguration.PERSPECTIVE_CAMEL_ID);
  }
 catch (  Exception e) {
    createPerspective(activePage,barManager,IBrandingConfiguration.PERSPECTIVE_CAMEL_ID);
  }
  try {
    createPerspective(activePage,IBrandingConfiguration.PERSPECTIVE_MDM_ID);
  }
 catch (  Exception e) {
    createPerspective(activePage,barManager,IBrandingConfiguration.PERSPECTIVE_MDM_ID);
  }
  try {
    createPerspective(activePage,IBrandingConfiguration.PERSPECTIVE_DQ_ID);
  }
 catch (  Exception e) {
    createPerspective(activePage,barManager,IBrandingConfiguration.PERSPECTIVE_DQ_ID);
  }
  try {
    createPerspective(activePage,IBrandingConfiguration.PERSPECTIVE_DI_ID);
  }
 catch (  Exception e) {
    createPerspective(activePage,barManager,IBrandingConfiguration.PERSPECTIVE_DI_ID);
  }
  barManager.update(false);
}","/** 
 * DOC Comment method ""setPerspectiveTabs"".
 */
public static void setPerspectiveTabs(){
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  PerspectiveBarManager barManager=((WorkbenchWindow)activeWorkbenchWindow).getPerspectiveBar();
  ((WorkbenchWindow)activeWorkbenchWindow).addPerspectiveReorderListener(null);
  if (barManager != null && (barManager instanceof PerspectiveBarManager)) {
    cleanPerspectiveBar();
    IContributionItem lastPerspective=null;
    IContributionItem diCItem=barManager.find(IBrandingConfiguration.PERSPECTIVE_DI_ID);
    if (null == diCItem) {
      IPerspectiveDescriptor diMailPerspective=WorkbenchPlugin.getDefault().getPerspectiveRegistry().findPerspectiveWithId(IBrandingConfiguration.PERSPECTIVE_DI_ID);
      if (null != diMailPerspective && (diMailPerspective instanceof IPerspectiveDescriptor)) {
        PerspectiveBarContributionItem diItem=new PerspectiveBarContributionItem(diMailPerspective,activeWorkbenchWindow.getActivePage());
        if (null != diItem && (diItem instanceof PerspectiveBarContributionItem)) {
          barManager.addItem(diItem);
          diCItem=diItem;
        }
      }
    }
    lastPerspective=diCItem;
    IContributionItem dqCItem=barManager.find(IBrandingConfiguration.PERSPECTIVE_DQ_ID);
    if (null == dqCItem) {
      IPerspectiveDescriptor dqMailPerspective=WorkbenchPlugin.getDefault().getPerspectiveRegistry().findPerspectiveWithId(IBrandingConfiguration.PERSPECTIVE_DQ_ID);
      if (null != dqMailPerspective && (dqMailPerspective instanceof IPerspectiveDescriptor)) {
        PerspectiveBarContributionItem dqItem=new PerspectiveBarContributionItem(dqMailPerspective,activeWorkbenchWindow.getActivePage());
        if (null != dqItem && (dqItem instanceof PerspectiveBarContributionItem)) {
          if (diCItem != null) {
            barManager.insertAfter(diCItem.getId(),dqItem);
          }
 else {
            barManager.addItem(dqItem);
          }
          dqCItem=dqItem;
        }
      }
    }
    if (dqCItem != null) {
      lastPerspective=dqCItem;
    }
    IContributionItem mdmCItem=barManager.find(IBrandingConfiguration.PERSPECTIVE_MDM_ID);
    if (null == mdmCItem) {
      IPerspectiveDescriptor mdmMailPerspective=WorkbenchPlugin.getDefault().getPerspectiveRegistry().findPerspectiveWithId(IBrandingConfiguration.PERSPECTIVE_MDM_ID);
      if (null != mdmMailPerspective && (mdmMailPerspective instanceof IPerspectiveDescriptor)) {
        PerspectiveBarContributionItem mdmItem=new PerspectiveBarContributionItem(mdmMailPerspective,activeWorkbenchWindow.getActivePage());
        if (null != mdmItem && (mdmItem instanceof PerspectiveBarContributionItem)) {
          if (lastPerspective != null) {
            barManager.insertAfter(lastPerspective.getId(),mdmItem);
          }
 else {
            barManager.addItem(mdmItem);
          }
          mdmCItem=mdmItem;
        }
      }
    }
    if (mdmCItem != null) {
      lastPerspective=mdmCItem;
    }
    IContributionItem esbCItem=barManager.find(IBrandingConfiguration.PERSPECTIVE_CAMEL_ID);
    if (null == esbCItem) {
      IPerspectiveDescriptor esbPerspective=WorkbenchPlugin.getDefault().getPerspectiveRegistry().findPerspectiveWithId(IBrandingConfiguration.PERSPECTIVE_CAMEL_ID);
      if (null != esbPerspective && (esbPerspective instanceof IPerspectiveDescriptor)) {
        PerspectiveBarContributionItem esbItem=new PerspectiveBarContributionItem(esbPerspective,activeWorkbenchWindow.getActivePage());
        if (null != esbItem && (esbItem instanceof PerspectiveBarContributionItem)) {
          if (lastPerspective != null) {
            barManager.insertAfter(lastPerspective.getId(),esbItem);
          }
 else {
            barManager.addItem(esbItem);
          }
          mdmCItem=esbItem;
        }
      }
    }
    barManager.update(false);
  }
}",0.2242697510292099
127024,"/** 
 * Method ""setPropNewName"". Try first the new name with ""[PROPERTY_NAME]_Copy"", then, if it already exists, try again with ""[PROPERTY_NAME]_CopyN"" where N is number between 1 and Integer.MAX.
 * @param copiedProperty
 * @throws PersistenceException
 * @throws BusinessException
 */
private void setPropNewName(Property copiedProperty) throws PersistenceException, BusinessException {
  String originalLabel=copiedProperty.getLabel();
  String copy=""String_Node_Str"";
  String initialTry=originalLabel + copy;
  copiedProperty.setLabel(initialTry);
  copiedProperty.setDisplayName(initialTry);
  if (isNameAvailable(getRepositoryContext().getProject(),copiedProperty.getItem(),null)) {
    return;
  }
 else {
    long index=1;
    while (!isNameAvailable(getRepositoryContext().getProject(),copiedProperty.getItem(),null)) {
      if (index < 0) {
        throw new BusinessException(Messages.getString(""String_Node_Str""));
      }
      String nextTry=originalLabel + copy + (index++);
      copiedProperty.setLabel(nextTry);
      copiedProperty.setDisplayName(nextTry);
    }
  }
}","/** 
 * Method ""setPropNewName"". Try first the new name with ""[PROPERTY_NAME]_Copy"", then, if it already exists, try again with ""[PROPERTY_NAME]_CopyN"" where N is number between 1 and Integer.MAX.
 * @param copiedProperty
 * @throws PersistenceException
 * @throws BusinessException
 */
private void setPropNewName(Property copiedProperty) throws PersistenceException, BusinessException {
  String originalLabel=copiedProperty.getDisplayName();
  String copy=""String_Node_Str"";
  String initialTry=originalLabel + copy;
  copiedProperty.setLabel(initialTry);
  copiedProperty.setDisplayName(initialTry);
  if (isNameAvailable(getRepositoryContext().getProject(),copiedProperty.getItem(),null)) {
    return;
  }
 else {
    long index=1;
    while (!isNameAvailable(getRepositoryContext().getProject(),copiedProperty.getItem(),null)) {
      if (index < 0) {
        throw new BusinessException(Messages.getString(""String_Node_Str""));
      }
      String nextTry=originalLabel + copy + (index++);
      copiedProperty.setLabel(nextTry);
      copiedProperty.setDisplayName(nextTry);
    }
  }
}",0.9926739926739928
127025,"@Override protected void doRun(){
  if (sourceNode == null) {
    return;
  }
  Property property=sourceNode.getObject().getProperty();
  Property updatedProperty=null;
  try {
    updatedProperty=ProxyRepositoryFactory.getInstance().getLastVersion(new Project(ProjectManager.getInstance().getProject(property.getItem())),property.getId()).getProperty();
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  String initNameValue=""String_Node_Str"" + sourceNode.getObject().getProperty().getItem().getProperty().getLabel();
  CopyObjectAction copyObjectAction=CopyObjectAction.getInstance();
  final TreeSelection selectionInClipboard=(TreeSelection)selection;
  promptForSavingIfNecessary((RepositoryNode)selection.getFirstElement());
  String jobNameValue=null;
  try {
    jobNameValue=getDuplicateName(sourceNode,initNameValue,selectionInClipboard);
  }
 catch (  BusinessException e) {
    jobNameValue=""String_Node_Str"";
  }
  InputDialog jobNewNameDialog=new InputDialog(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),jobNameValue,new IInputValidator(){
    @Override public String isValid(    String newText){
      return validJobName(sourceNode,newText,selectionInClipboard);
    }
  }
);
  if (jobNewNameDialog.open() != Dialog.OK) {
    return;
  }
  String jobNewName=jobNewNameDialog.getValue();
  createOperation(jobNewName,sourceNode,copyObjectAction,selectionInClipboard);
}","@Override protected void doRun(){
  if (sourceNode == null) {
    return;
  }
  Property property=sourceNode.getObject().getProperty();
  Property updatedProperty=null;
  try {
    updatedProperty=ProxyRepositoryFactory.getInstance().getLastVersion(new Project(ProjectManager.getInstance().getProject(property.getItem())),property.getId()).getProperty();
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  String initNameValue=""String_Node_Str"" + sourceNode.getObject().getProperty().getItem().getProperty().getDisplayName();
  CopyObjectAction copyObjectAction=CopyObjectAction.getInstance();
  final TreeSelection selectionInClipboard=(TreeSelection)selection;
  promptForSavingIfNecessary((RepositoryNode)selection.getFirstElement());
  String jobNameValue=null;
  try {
    jobNameValue=getDuplicateName(sourceNode,initNameValue,selectionInClipboard);
  }
 catch (  BusinessException e) {
    jobNameValue=""String_Node_Str"";
  }
  InputDialog jobNewNameDialog=new InputDialog(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),jobNameValue,new IInputValidator(){
    @Override public String isValid(    String newText){
      return validJobName(sourceNode,newText,selectionInClipboard);
    }
  }
);
  if (jobNewNameDialog.open() != Dialog.OK) {
    return;
  }
  String jobNewName=jobNewNameDialog.getValue();
  createOperation(jobNewName,sourceNode,copyObjectAction,selectionInClipboard);
}",0.9944903581267218
127026,"/** 
 * Method ""getParentCatalogOrSchema"" returns the owner of the element (Catalog or Schema).
 * @param element (can be null)
 * @return the Catalog or of Schema or null
 * @deprecated use PackageHelper.getParentPackage()
 */
public static Package getParentCatalogOrSchema(ModelElement element){
  if (element == null) {
    return null;
  }
  Namespace namespace=element.getNamespace();
  return PackageHelper.getCatalogOrSchema(namespace);
}","/** 
 * Method ""getParentCatalogOrSchema"" returns the owner of the element (Catalog or Schema).
 * @param element (can be null)
 * @return the Catalog or of Schema or null
 * @deprecated use PackageHelper.getParentPackage()
 */
@Deprecated public static Package getParentCatalogOrSchema(ModelElement element){
  if (element == null) {
    return null;
  }
  Namespace namespace=element.getNamespace();
  return PackageHelper.getCatalogOrSchema(namespace);
}",0.9866962305986696
127027,"public static MetadataTable findByLabel(SAPFunctionUnit functionUnit,String label){
  if (functionUnit == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (label == null || ""String_Node_Str"".equals(label))   throw new IllegalArgumentException(""String_Node_Str"");
  EList tables=functionUnit.getTables();
  for (int i=0; i < tables.size(); i++) {
    MetadataTable table=(MetadataTable)tables.get(i);
    if (label.equals(table.getLabel()))     return table;
  }
  return null;
}","public static MetadataTable findByLabel(SAPFunctionUnit functionUnit,String label){
  if (functionUnit == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (label == null || ""String_Node_Str"".equals(label)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  EList tables=functionUnit.getTables();
  for (int i=0; i < tables.size(); i++) {
    MetadataTable table=(MetadataTable)tables.get(i);
    if (label.equals(table.getLabel())) {
      return table;
    }
  }
  return null;
}",0.9137254901960784
127028,"/** 
 * Method ""addAllPrimaryKeys"".
 * @param table
 * @param primaryKeys the primary keys of the table.
 * @deprecated because there can only be one PrimaryKey on same one table, so use addPrimaryKey instead
 */
public static void addPrimaryKeys(ColumnSet table,List<PrimaryKey> primaryKeys){
}","/** 
 * Method ""addAllPrimaryKeys"".
 * @param table
 * @param primaryKeys the primary keys of the table.
 * @deprecated because there can only be one PrimaryKey on same one table, so use addPrimaryKey instead
 */
@Deprecated public static void addPrimaryKeys(ColumnSet table,List<PrimaryKey> primaryKeys){
}",0.9800664451827242
127029,"/** 
 * Method ""getParentTable"".
 * @param column a column
 * @return the table containing this column or null
 * @deprecated use ColumnHelper.getTdTableOwner();
 */
public static TdTable getParentTable(TdColumn column){
  return ColumnHelper.getColumnOwnerAsTdTable(column);
}","/** 
 * Method ""getParentTable"".
 * @param column a column
 * @return the table containing this column or null
 * @deprecated use ColumnHelper.getTdTableOwner();
 */
@Deprecated public static TdTable getParentTable(TdColumn column){
  return ColumnHelper.getColumnOwnerAsTdTable(column);
}",0.978798586572438
127030,"/** 
 * Method ""getPrimaryKeys"".
 * @param table a table
 * @return a list of all primary keys of the given table
 * @deprecated use getPrimaryKey() instead
 */
public static List<PrimaryKey> getPrimaryKeys(Table table){
  List<PrimaryKey> primarykeys=new ArrayList<PrimaryKey>();
  EList<ModelElement> ownedElements=table.getOwnedElement();
  for (  ModelElement modelElement : ownedElements) {
    PrimaryKey pk=SwitchHelpers.PRIMARY_KEY_SWITCH.doSwitch(modelElement);
    if (pk != null) {
      primarykeys.add(pk);
    }
  }
  return primarykeys;
}","/** 
 * Method ""getPrimaryKeys"".
 * @param table a table
 * @return a list of all primary keys of the given table
 * @deprecated use getPrimaryKey() instead
 */
@Deprecated public static List<PrimaryKey> getPrimaryKeys(Table table){
  List<PrimaryKey> primarykeys=new ArrayList<PrimaryKey>();
  EList<ModelElement> ownedElements=table.getOwnedElement();
  for (  ModelElement modelElement : ownedElements) {
    PrimaryKey pk=SwitchHelpers.PRIMARY_KEY_SWITCH.doSwitch(modelElement);
    if (pk != null) {
      primarykeys.add(pk);
    }
  }
  return primarykeys;
}",0.9892665474060824
127031,"private void regisitPerspectiveListener(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new PerspectiveAdapter(){
    @Override public void perspectiveActivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      IRepositoryView view=RepositoryManager.getRepositoryView();
      if (view != null) {
        if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId) || IBrandingConfiguration.PERSPECTIVE_CAMEL_ID.equals(pId)) {
          view.refresh();
          TalendPaletteHelper.checkAndInitToolBar();
        }
 else         if (IBrandingConfiguration.PERSPECTIVE_DQ_ID.equals(pId)) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            if (tdqRepositoryService != null) {
              tdqRepositoryService.refresh();
            }
          }
          IViewReference findViewReference=RepositoryManagerHelper.findRepositoryViewRef();
          if (findViewReference != null) {
            page.hideView(findViewReference);
          }
        }
      }
    }
  }
);
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new CheatSheetPerspectiveAdapter());
}","private void regisitPerspectiveListener(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new PerspectiveAdapter(){
    @Override public void perspectiveActivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      IRepositoryView view=RepositoryManager.getRepositoryView();
      if (view != null) {
        if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId) || IBrandingConfiguration.PERSPECTIVE_CAMEL_ID.equals(pId)) {
          view.refresh();
          TalendPaletteHelper.checkAndInitToolBar();
        }
 else         if (IBrandingConfiguration.PERSPECTIVE_DQ_ID.equals(pId)) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            if (tdqRepositoryService != null) {
              tdqRepositoryService.refresh();
            }
          }
          IViewReference findViewReference=RepositoryManagerHelper.findRepositoryViewRef();
          if (findViewReference != null) {
            page.hideView(findViewReference);
          }
        }
      }
    }
    @Override public void perspectiveDeactivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId)) {
        IComponentSettingsView viewer=(IComponentSettingsView)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(IComponentSettingsView.ID);
        if (viewer != null) {
          viewer.cleanDisplay();
        }
      }
    }
  }
);
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new CheatSheetPerspectiveAdapter());
}",0.8537258509659613
127032,"@Override public void run(IProgressMonitor monitor) throws CoreException {
  DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
  if (ExtractMetaDataUtils.getInstance().isUseAllSynonyms()) {
    EMap<String,String> map=connection.getParameters();
    if (map.containsKey(ISUSEDINDI)) {
      map.removeKey(ISUSEDINDI);
    }
    map.put(ISUSEDINDI,""String_Node_Str"");
  }
  EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
  EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
  if (PluginChecker.isTDQLoaded()) {
    saveMetaData();
    ITDQRepositoryService tdqRepositoryService=null;
    boolean needUpdateAnalysis=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
    }
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
        return;
      }
    }
    generateOriginalColumnsMap(dataPackageFromOrignalConnection);
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    replaceUUidsForColumnsAndTables(copyDataPackage);
    saveMetaData();
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
    }
  }
 else {
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    saveMetaData();
  }
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
  temConnection=null;
}","@Override public void run(IProgressMonitor monitor) throws CoreException {
  DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
  EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
  EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
  if (PluginChecker.isTDQLoaded()) {
    saveMetaData();
    ITDQRepositoryService tdqRepositoryService=null;
    boolean needUpdateAnalysis=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
    }
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
        return;
      }
    }
    generateOriginalColumnsMap(dataPackageFromOrignalConnection);
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    replaceUUidsForColumnsAndTables(copyDataPackage);
    saveMetaData();
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
    }
  }
 else {
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    saveMetaData();
  }
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
  temConnection=null;
}",0.939152119700748
127033,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
        if (ExtractMetaDataUtils.getInstance().isUseAllSynonyms()) {
          EMap<String,String> map=connection.getParameters();
          if (map.containsKey(ISUSEDINDI)) {
            map.removeKey(ISUSEDINDI);
          }
          map.put(ISUSEDINDI,""String_Node_Str"");
        }
        EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
        EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
        if (PluginChecker.isTDQLoaded()) {
          saveMetaData();
          ITDQRepositoryService tdqRepositoryService=null;
          boolean needUpdateAnalysis=false;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
          }
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
              return;
            }
          }
          generateOriginalColumnsMap(dataPackageFromOrignalConnection);
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          replaceUUidsForColumnsAndTables(copyDataPackage);
          saveMetaData();
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
          }
        }
 else {
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          saveMetaData();
        }
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
        list.add(repositoryObject);
        CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
        temConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
        EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
        EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
        if (PluginChecker.isTDQLoaded()) {
          saveMetaData();
          ITDQRepositoryService tdqRepositoryService=null;
          boolean needUpdateAnalysis=false;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
          }
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
              return;
            }
          }
          generateOriginalColumnsMap(dataPackageFromOrignalConnection);
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          replaceUUidsForColumnsAndTables(copyDataPackage);
          saveMetaData();
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
          }
        }
 else {
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          saveMetaData();
        }
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
        list.add(repositoryObject);
        CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
        temConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    return true;
  }
 else {
    return false;
  }
}",0.949683321604504
127034,"@Override public void run(IProgressMonitor monitor) throws CoreException {
  DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
  if (ExtractMetaDataUtils.isUseAllSynonyms()) {
    EMap<String,String> map=connection.getParameters();
    if (map.containsKey(ISUSEDINDI)) {
      map.removeKey(ISUSEDINDI);
    }
    map.put(ISUSEDINDI,""String_Node_Str"");
  }
  EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
  EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
  if (PluginChecker.isTDQLoaded()) {
    saveMetaData();
    ITDQRepositoryService tdqRepositoryService=null;
    boolean needUpdateAnalysis=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
    }
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
        return;
      }
    }
    generateOriginalColumnsMap(dataPackageFromOrignalConnection);
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    replaceUUidsForColumnsAndTables(copyDataPackage);
    saveMetaData();
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
    }
  }
 else {
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    saveMetaData();
  }
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
  temConnection=null;
}","@Override public void run(IProgressMonitor monitor) throws CoreException {
  DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
  EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
  EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
  if (PluginChecker.isTDQLoaded()) {
    saveMetaData();
    ITDQRepositoryService tdqRepositoryService=null;
    boolean needUpdateAnalysis=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
    }
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
        return;
      }
    }
    generateOriginalColumnsMap(dataPackageFromOrignalConnection);
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    replaceUUidsForColumnsAndTables(copyDataPackage);
    saveMetaData();
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
    }
  }
 else {
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    saveMetaData();
  }
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
  temConnection=null;
}",0.9424424424424424
127035,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          EMap<String,String> map=connection.getParameters();
          if (map.containsKey(ISUSEDINDI)) {
            map.removeKey(ISUSEDINDI);
          }
          map.put(ISUSEDINDI,""String_Node_Str"");
        }
        EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
        EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
        if (PluginChecker.isTDQLoaded()) {
          saveMetaData();
          ITDQRepositoryService tdqRepositoryService=null;
          boolean needUpdateAnalysis=false;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
          }
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
              return;
            }
          }
          generateOriginalColumnsMap(dataPackageFromOrignalConnection);
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          replaceUUidsForColumnsAndTables(copyDataPackage);
          saveMetaData();
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
          }
        }
 else {
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          saveMetaData();
        }
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
        list.add(repositoryObject);
        CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
        temConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
        EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
        EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
        if (PluginChecker.isTDQLoaded()) {
          saveMetaData();
          ITDQRepositoryService tdqRepositoryService=null;
          boolean needUpdateAnalysis=false;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
          }
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
              return;
            }
          }
          generateOriginalColumnsMap(dataPackageFromOrignalConnection);
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          replaceUUidsForColumnsAndTables(copyDataPackage);
          saveMetaData();
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
          }
        }
 else {
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          saveMetaData();
        }
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
        list.add(repositoryObject);
        CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
        temConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    return true;
  }
 else {
    return false;
  }
}",0.9520282186948854
127036,"/** 
 * Get the readable name (actual item display name) via context style name when the item is on context mode.<BR> Note that in order to make it easier for caller to get a name, this contextualName may be passed as an actual display name, in this case, this name will be simply returned.
 * @param dataManager
 * @param contextualName eigher the contextual name or the actual display name.
 * @return the readable actual item display name.
 */
public static String getReadableName(DataManager dataManager,String contextualName){
  if (contextualName == null) {
    log.error(""String_Node_Str"" + dataManager);
    return contextualName;
  }
  if (dataManager instanceof Connection && ((Connection)dataManager).isContextMode()) {
    Connection conn=(Connection)dataManager;
    String contextId=conn.getContextId();
    ContextItem contextItem=ContextUtils.getContextItemById2(contextId);
    ContextType contextType=ContextUtils.getContextTypeByName(contextItem,conn.getContextName(),false);
    if (contextType != null && ContextParameterUtils.isContainContextParam(contextualName)) {
      ContextParameterType param=null;
      for (      ContextParameterType paramType : (List<ContextParameterType>)contextType.getContextParameter()) {
        if (paramType.getName().equals(ContextParameterUtils.getVariableFromCode(contextualName))) {
          param=paramType;
          break;
        }
      }
      if (param != null) {
        String value2=param.getValue();
        if (value2 != null) {
          return value2;
        }
      }
    }
  }
  return contextualName;
}","/** 
 * Get the readable name (actual item display name) via context style name when the item is on context mode.<BR> Note that in order to make it easier for caller to get a name, this contextualName may be passed as an actual display name, in this case, this name will be simply returned.
 * @param dataManager
 * @param value eigher the contextual name or the actual display name.
 * @return the readable actual item display name.
 */
public static String getReadableName(DataManager dataManager,String value){
  if (!(dataManager instanceof Connection) || !((Connection)dataManager).isContextMode()) {
    return value;
  }
 else {
    if (value == null) {
      log.error(""String_Node_Str"" + dataManager);
      return value;
    }
    Connection conn=(Connection)dataManager;
    String contextId=conn.getContextId();
    ContextItem contextItem=ContextUtils.getContextItemById2(contextId);
    ContextType contextType=ContextUtils.getContextTypeByName(contextItem,conn.getContextName(),false);
    if (contextType != null && ContextParameterUtils.isContainContextParam(value)) {
      ContextParameterType param=null;
      for (      ContextParameterType paramType : (List<ContextParameterType>)contextType.getContextParameter()) {
        if (paramType.getName().equals(ContextParameterUtils.getVariableFromCode(value))) {
          param=paramType;
          break;
        }
      }
      if (param != null) {
        String value2=param.getValue();
        if (value2 != null) {
          return value2;
        }
      }
    }
    return value;
  }
}",0.4553259141494435
127037,"/** 
 * DOC Comment method ""setPerspectiveTabs"".
 */
public static void setPerspectiveTabs(){
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  PerspectiveBarManager barManager=((WorkbenchWindow)activeWorkbenchWindow).getPerspectiveBar();
  if (barManager != null && (barManager instanceof PerspectiveBarManager)) {
    cleanPerspectiveBar();
    IContributionItem lastPerspective=null;
    IContributionItem diCItem=barManager.find(IBrandingConfiguration.PERSPECTIVE_DI_ID);
    if (null == diCItem) {
      IPerspectiveDescriptor diMailPerspective=WorkbenchPlugin.getDefault().getPerspectiveRegistry().findPerspectiveWithId(IBrandingConfiguration.PERSPECTIVE_DI_ID);
      if (null != diMailPerspective && (diMailPerspective instanceof IPerspectiveDescriptor)) {
        PerspectiveBarContributionItem diItem=new PerspectiveBarContributionItem(diMailPerspective,activeWorkbenchWindow.getActivePage());
        if (null != diItem && (diItem instanceof PerspectiveBarContributionItem)) {
          barManager.addItem(diItem);
          diCItem=diItem;
        }
      }
    }
    lastPerspective=diCItem;
    IContributionItem dqCItem=barManager.find(IBrandingConfiguration.PERSPECTIVE_DQ_ID);
    if (null == dqCItem) {
      IPerspectiveDescriptor dqMailPerspective=WorkbenchPlugin.getDefault().getPerspectiveRegistry().findPerspectiveWithId(IBrandingConfiguration.PERSPECTIVE_DQ_ID);
      if (null != dqMailPerspective && (dqMailPerspective instanceof IPerspectiveDescriptor)) {
        PerspectiveBarContributionItem dqItem=new PerspectiveBarContributionItem(dqMailPerspective,activeWorkbenchWindow.getActivePage());
        if (null != dqItem && (dqItem instanceof PerspectiveBarContributionItem)) {
          if (diCItem != null) {
            barManager.insertAfter(diCItem.getId(),dqItem);
          }
 else {
            barManager.addItem(dqItem);
          }
          dqCItem=dqItem;
        }
      }
    }
    if (dqCItem != null) {
      lastPerspective=dqCItem;
    }
    IContributionItem mdmCItem=barManager.find(IBrandingConfiguration.PERSPECTIVE_MDM_ID);
    if (null == mdmCItem) {
      IPerspectiveDescriptor mdmMailPerspective=WorkbenchPlugin.getDefault().getPerspectiveRegistry().findPerspectiveWithId(IBrandingConfiguration.PERSPECTIVE_MDM_ID);
      if (null != mdmMailPerspective && (mdmMailPerspective instanceof IPerspectiveDescriptor)) {
        PerspectiveBarContributionItem mdmItem=new PerspectiveBarContributionItem(mdmMailPerspective,activeWorkbenchWindow.getActivePage());
        if (null != mdmItem && (mdmItem instanceof PerspectiveBarContributionItem)) {
          if (lastPerspective != null) {
            barManager.insertAfter(lastPerspective.getId(),mdmItem);
          }
 else {
            barManager.addItem(mdmItem);
          }
          mdmCItem=mdmItem;
        }
      }
    }
    if (mdmCItem != null) {
      lastPerspective=mdmCItem;
    }
    IContributionItem esbCItem=barManager.find(IBrandingConfiguration.PERSPECTIVE_CAMEL_ID);
    if (null == esbCItem) {
      IPerspectiveDescriptor esbPerspective=WorkbenchPlugin.getDefault().getPerspectiveRegistry().findPerspectiveWithId(IBrandingConfiguration.PERSPECTIVE_CAMEL_ID);
      if (null != esbPerspective && (esbPerspective instanceof IPerspectiveDescriptor)) {
        PerspectiveBarContributionItem esbItem=new PerspectiveBarContributionItem(esbPerspective,activeWorkbenchWindow.getActivePage());
        if (null != esbItem && (esbItem instanceof PerspectiveBarContributionItem)) {
          if (lastPerspective != null) {
            barManager.insertAfter(lastPerspective.getId(),esbItem);
          }
 else {
            barManager.addItem(esbItem);
          }
          mdmCItem=esbItem;
        }
      }
    }
    barManager.update(false);
  }
}","/** 
 * DOC Comment method ""setPerspectiveTabs"".
 */
public static void setPerspectiveTabs(){
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  IWorkbenchPage activePage=activeWorkbenchWindow.getActivePage();
  PerspectiveBarManager barManager=((WorkbenchWindow)activeWorkbenchWindow).getPerspectiveBar();
  try {
    createPerspective(activePage,IBrandingConfiguration.PERSPECTIVE_CAMEL_ID);
  }
 catch (  Exception e) {
    createPerspective(activePage,barManager,IBrandingConfiguration.PERSPECTIVE_CAMEL_ID);
  }
  try {
    createPerspective(activePage,IBrandingConfiguration.PERSPECTIVE_MDM_ID);
  }
 catch (  Exception e) {
    createPerspective(activePage,barManager,IBrandingConfiguration.PERSPECTIVE_MDM_ID);
  }
  try {
    createPerspective(activePage,IBrandingConfiguration.PERSPECTIVE_DQ_ID);
  }
 catch (  Exception e) {
    createPerspective(activePage,barManager,IBrandingConfiguration.PERSPECTIVE_DQ_ID);
  }
  try {
    createPerspective(activePage,IBrandingConfiguration.PERSPECTIVE_DI_ID);
  }
 catch (  Exception e) {
    createPerspective(activePage,barManager,IBrandingConfiguration.PERSPECTIVE_DI_ID);
  }
  barManager.update(false);
}",0.2668791077474606
127038,"/** 
 * judge whether UiSchema is null or empty string whatever context mode or nor
 * @param dbConn
 * @return
 */
private boolean isNullUiSchema(Connection dbConn){
  if (dbConn instanceof DatabaseConnection) {
    String databaseOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
    String readableName=TalendCWMService.getReadableName(dbConn,databaseOnConnWizard);
    if (isEmptyString(databaseOnConnWizard) || isEmptyString(readableName)) {
      return true;
    }
  }
  return false;
}","/** 
 * judge whether UiSchema is null or empty string whatever context mode or nor
 * @param dbConn
 * @return
 */
protected boolean isNullUiSchema(Connection dbConn){
  if (dbConn instanceof DatabaseConnection) {
    String databaseOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
    String readableName=TalendCWMService.getReadableName(dbConn,databaseOnConnWizard);
    if (isEmptyString(databaseOnConnWizard) || isEmptyString(readableName)) {
      return true;
    }
  }
  return false;
}",0.9880239520958084
127039,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      extractMeta.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,extractMeta.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : extractMeta.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      extractMeta.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,extractMeta.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : extractMeta.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9889780442641742
127040,"public List<Schema> fillSchemaToCatalog(Connection dbConn,DatabaseMetaData dbJDBCMetadata,Catalog catalog,List<String> schemaFilter) throws Throwable {
  ResultSet schemaRs=null;
  try {
    if (dbJDBCMetadata.getDriverName().equals(DatabaseConstant.MSSQL_DRIVER_NAME_JDBC2_0)) {
      Method getSchemaMethod=dbJDBCMetadata.getClass().getMethod(""String_Node_Str"",String.class,String.class);
      schemaRs=(ResultSet)getSchemaMethod.invoke(dbJDBCMetadata,catalog.getName(),null);
    }
  }
 catch (  SecurityException e) {
  }
catch (  NoSuchMethodException e) {
  }
catch (  IllegalArgumentException e) {
  }
catch (  IllegalAccessException e) {
  }
catch (  InvocationTargetException e) {
    if (e.getTargetException().getClass().toString().equals(""String_Node_Str"")) {
      throw e.getTargetException();
    }
  }
catch (  SQLException e) {
    log.error(e,e);
  }
  if (schemaRs == null) {
    try {
      if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
        schemaRs=((SybaseDatabaseMetaData)dbJDBCMetadata).getSchemas(catalog.getName(),null);
      }
 else       if (dbJDBCMetadata instanceof AS400DatabaseMetaData) {
        schemaRs=dbJDBCMetadata.getSchemas(catalog.getName(),null);
      }
 else {
        schemaRs=dbJDBCMetadata.getSchemas();
      }
    }
 catch (    SQLException e) {
      if (log.isDebugEnabled()) {
        log.debug(e,e);
      }
    }
  }
  List<String> schemaNameCacheTmp=new ArrayList<String>();
  List<Schema> schemaList=new ArrayList<Schema>();
  if (schemaRs == null) {
    log.error(""String_Node_Str"");
  }
 else {
    try {
      while (schemaRs.next()) {
        String schemaName=null;
        String catalogName=null;
        try {
          schemaName=schemaRs.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (!MetadataConnectionUtils.isPostgresql(dbJDBCMetadata) && !MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
            catalogName=schemaRs.getString(MetaDataConstants.TABLE_CATALOG.name());
          }
          if (MetadataConnectionUtils.isMssql(dbJDBCMetadata) && dbJDBCMetadata.getDatabaseMajorVersion() > 8 && dbJDBCMetadata.getDriverMajorVersion() > 1) {
            if (catalogName != null && catalogName != schemaName) {
              schemaName=catalogName;
            }
          }
          if (schemaName == null || !MetadataConnectionUtils.isMssql(dbJDBCMetadata.getConnection()) && catalogName != null && !catalogName.equals(catalog.getName())) {
            continue;
          }
        }
 catch (        Exception e) {
        }
        if (!schemaNameCacheTmp.contains(schemaName) && !MetadataConnectionUtils.isMysql(dbJDBCMetadata)) {
          if (!isNullUiSchema(dbConn) && dbConn != null) {
            String uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
            Schema schema=SchemaHelper.createSchema(TalendCWMService.getReadableName(dbConn,uiSchemaOnConnWizard));
            schemaList.add(schema);
            break;
          }
 else           if (isCreateElement(schemaFilter,schemaName)) {
            Schema schema=SchemaHelper.createSchema(schemaName);
            schemaList.add(schema);
            schemaNameCacheTmp.add(schemaName);
          }
        }
      }
      schemaRs.close();
    }
 catch (    Exception e) {
      if (log.isDebugEnabled()) {
        log.debug(e,e);
      }
    }
  }
  return schemaList;
}","public List<Schema> fillSchemaToCatalog(Connection dbConn,DatabaseMetaData dbJDBCMetadata,Catalog catalog,List<String> schemaFilter) throws Throwable {
  ResultSet schemaRs=null;
  try {
    if (dbJDBCMetadata.getDriverName().equals(DatabaseConstant.MSSQL_DRIVER_NAME_JDBC2_0)) {
      Method getSchemaMethod=dbJDBCMetadata.getClass().getMethod(""String_Node_Str"",String.class,String.class);
      schemaRs=(ResultSet)getSchemaMethod.invoke(dbJDBCMetadata,catalog.getName(),null);
    }
  }
 catch (  SecurityException e) {
  }
catch (  NoSuchMethodException e) {
  }
catch (  IllegalArgumentException e) {
  }
catch (  IllegalAccessException e) {
  }
catch (  InvocationTargetException e) {
    if (e.getTargetException().getClass().toString().equals(""String_Node_Str"")) {
      throw e.getTargetException();
    }
  }
catch (  SQLException e) {
    log.error(e,e);
  }
  if (schemaRs == null) {
    try {
      if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
        schemaRs=((SybaseDatabaseMetaData)dbJDBCMetadata).getSchemas(catalog.getName(),null);
      }
 else       if (dbJDBCMetadata instanceof AS400DatabaseMetaData) {
        schemaRs=dbJDBCMetadata.getSchemas(catalog.getName(),null);
      }
 else {
        schemaRs=dbJDBCMetadata.getSchemas();
      }
    }
 catch (    SQLException e) {
      if (log.isDebugEnabled()) {
        log.debug(e,e);
      }
    }
  }
  List<String> schemaNameCacheTmp=new ArrayList<String>();
  List<Schema> schemaList=new ArrayList<Schema>();
  if (schemaRs == null) {
    log.error(""String_Node_Str"");
  }
 else {
    try {
      while (schemaRs.next()) {
        String schemaName=getSchemaName(schemaRs,dbJDBCMetadata,catalog);
        if (schemaName == null) {
          continue;
        }
        if (!schemaNameCacheTmp.contains(schemaName) && !MetadataConnectionUtils.isMysql(dbJDBCMetadata)) {
          if (dbConn != null && !isNullUiSchema(dbConn)) {
            Schema createByUiSchema=createSchemaByUiSchema((DatabaseConnection)dbConn);
            schemaList.add(createByUiSchema);
            break;
          }
 else           if (isCreateElement(schemaFilter,schemaName)) {
            Schema schema=SchemaHelper.createSchema(schemaName);
            schemaList.add(schema);
            schemaNameCacheTmp.add(schemaName);
          }
        }
      }
    }
 catch (    Exception e) {
      if (log.isDebugEnabled()) {
        log.debug(e,e);
      }
    }
 finally {
      schemaRs.close();
    }
  }
  return schemaList;
}",0.6076424428522689
127041,"@Override public List<TdView> fillViews(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> viewFilter,String viewPattern,String[] tableType){
  List<TdView> viewList=new ArrayList<TdView>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
      if (MetadataConnectionUtils.isAS400(catalogOrSchema)) {
        return viewList;
      }
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,viewPattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    while (tables.next()) {
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String type=tables.getString(GetTable.TABLE_TYPE.name());
      if (!isCreateElement(viewFilter,tableName)) {
        continue;
      }
      String tableOwner=null;
      if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tables.getString(GetTable.TABLE_SCHEM.name());
      }
      boolean flag=true;
      String tableComment=null;
      if (pack != null) {
        Connection c=ConnectionHelper.getConnection(pack);
        flag=MetadataConnectionUtils.isOracle8i(c);
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      TdView table=RelationalFactory.eINSTANCE.createTdView();
      table.setName(tableName);
      table.setTableType(type);
      table.setLabel(table.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,table);
      }
      if (tableComment != null) {
        ColumnSetHelper.setComment(tableComment,table);
      }
      viewList.add(table);
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,viewList),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return viewList;
}","@Override public List<TdView> fillViews(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> viewFilter,String viewPattern,String[] tableType){
  List<TdView> viewList=new ArrayList<TdView>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
      if (MetadataConnectionUtils.isAS400(catalogOrSchema)) {
        return viewList;
      }
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,viewPattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    while (tables.next()) {
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String type=tables.getString(GetTable.TABLE_TYPE.name());
      if (!isCreateElement(viewFilter,tableName)) {
        continue;
      }
      boolean flag=true;
      String tableComment=null;
      if (pack != null) {
        Connection c=ConnectionHelper.getConnection(pack);
        flag=MetadataConnectionUtils.isOracle8i(c);
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      TdView table=RelationalFactory.eINSTANCE.createTdView();
      table.setName(tableName);
      table.setTableType(type);
      table.setLabel(table.getName());
      if (tableComment != null) {
        ColumnSetHelper.setComment(tableComment,table);
      }
      viewList.add(table);
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,viewList),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return viewList;
}",0.9466206616602396
127042,"public List<TdTable> fillTables(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<TdTable> tableList=new ArrayList<TdTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
      if (MetadataConnectionUtils.isAS400(catalogOrSchema)) {
        return tableList;
      }
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracle || isOracleJdbc) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables,dbJDBCMetadata.getConnection());
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    while (tables.next()) {
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (TableType.VIEW.toString().equals(temptableType)) {
        continue;
      }
      if (!isCreateElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tables.getString(GetTable.TABLE_SCHEM.name());
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      TdTable table=RelationalFactory.eINSTANCE.createTdTable();
      table.setName(tableName);
      table.setTableType(temptableType);
      table.setLabel(table.getName());
      table.setId(EcoreUtil.generateUUID());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,table);
      }
      if (tableComment != null) {
        ColumnSetHelper.setComment(tableComment,table);
      }
      tableList.add(table);
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,tableList),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return tableList;
}","public List<TdTable> fillTables(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<TdTable> tableList=new ArrayList<TdTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
      if (MetadataConnectionUtils.isAS400(catalogOrSchema)) {
        return tableList;
      }
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracle || isOracleJdbc) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables,dbJDBCMetadata.getConnection());
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    while (tables.next()) {
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (TableType.VIEW.toString().equals(temptableType)) {
        continue;
      }
      if (!isCreateElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      TdTable table=RelationalFactory.eINSTANCE.createTdTable();
      table.setName(tableName);
      table.setTableType(temptableType);
      table.setLabel(table.getName());
      table.setId(EcoreUtil.generateUUID());
      if (tableComment != null) {
        ColumnSetHelper.setComment(tableComment,table);
      }
      tableList.add(table);
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,tableList),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return tableList;
}",0.9618121097720342
127043,"public static MetadataFillFactory getDBInstance(){
  if (instance == null) {
    instance=new MetadataFillFactory();
  }
  metadataFiller=DBmetadataFiller;
  return instance;
}","/** 
 * Get DatabaseConnection Instance
 * @param dbUrlType the type of you want to fill database
 * @return
 */
public static MetadataFillFactory getDBInstance(SupportDBUrlType dbUrlType){
  if (instance == null) {
    instance=new MetadataFillFactory();
  }
switch (dbUrlType) {
case SYBASEDEFAULTURL:
    metadataFiller=new SybaseConnectionFillerImpl();
  break;
default :
metadataFiller=DBmetadataFiller;
}
return instance;
}",0.5685950413223141
127044,"private void regisitPerspectiveListener(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new PerspectiveAdapter(){
    @Override public void perspectiveActivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      IRepositoryView view=RepositoryManager.getRepositoryView();
      if (view != null) {
        if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId) || IBrandingConfiguration.PERSPECTIVE_CAMEL_ID.equals(pId)) {
          view.refresh();
          TalendPaletteHelper.checkAndInitToolBar();
        }
 else         if (IBrandingConfiguration.PERSPECTIVE_DQ_ID.equals(pId)) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            if (tdqRepositoryService != null) {
              tdqRepositoryService.refresh();
            }
          }
          IViewReference findViewReference=RepositoryManagerHelper.findRepositoryViewRef();
          if (findViewReference != null) {
            page.hideView(findViewReference);
          }
        }
      }
    }
  }
);
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new CheatSheetPerspectiveAdapter());
}","private void regisitPerspectiveListener(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new PerspectiveAdapter(){
    @Override public void perspectiveActivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      IRepositoryView view=RepositoryManager.getRepositoryView();
      if (view != null) {
        if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId) || IBrandingConfiguration.PERSPECTIVE_CAMEL_ID.equals(pId)) {
          view.refresh();
          TalendPaletteHelper.checkAndInitToolBar();
        }
 else         if (IBrandingConfiguration.PERSPECTIVE_DQ_ID.equals(pId)) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            if (tdqRepositoryService != null) {
              tdqRepositoryService.refresh();
            }
          }
          IViewReference findViewReference=RepositoryManagerHelper.findRepositoryViewRef();
          if (findViewReference != null) {
            page.hideView(findViewReference);
          }
        }
      }
    }
    @Override public void perspectiveDeactivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId)) {
        IComponentSettingsView viewer=(IComponentSettingsView)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(IComponentSettingsView.ID);
        if (viewer != null) {
          viewer.cleanDisplay();
        }
      }
    }
  }
);
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new CheatSheetPerspectiveAdapter());
}",0.8537258509659613
127045,"/** 
 * Method ""setPropNewName"". Try first the new name with ""[PROPERTY_NAME]_Copy"", then, if it already exists, try again with ""[PROPERTY_NAME]_CopyN"" where N is number between 1 and Integer.MAX.
 * @param copiedProperty
 * @throws PersistenceException
 * @throws BusinessException
 */
private void setPropNewName(Property copiedProperty) throws PersistenceException, BusinessException {
  String originalLabel=copiedProperty.getLabel();
  String copy=""String_Node_Str"";
  String initialTry=originalLabel + copy;
  copiedProperty.setLabel(initialTry);
  copiedProperty.setDisplayName(initialTry);
  if (isNameAvailable(getRepositoryContext().getProject(),copiedProperty.getItem(),null)) {
    return;
  }
 else {
    long index=1;
    while (!isNameAvailable(getRepositoryContext().getProject(),copiedProperty.getItem(),null)) {
      if (index < 0) {
        throw new BusinessException(Messages.getString(""String_Node_Str""));
      }
      String nextTry=originalLabel + copy + (index++);
      copiedProperty.setLabel(nextTry);
      copiedProperty.setDisplayName(nextTry);
    }
  }
}","/** 
 * Method ""setPropNewName"". Try first the new name with ""[PROPERTY_NAME]_Copy"", then, if it already exists, try again with ""[PROPERTY_NAME]_CopyN"" where N is number between 1 and Integer.MAX.
 * @param copiedProperty
 * @throws PersistenceException
 * @throws BusinessException
 */
private void setPropNewName(Property copiedProperty) throws PersistenceException, BusinessException {
  String originalLabel=copiedProperty.getDisplayName();
  String copy=""String_Node_Str"";
  String initialTry=originalLabel + copy;
  copiedProperty.setLabel(initialTry);
  copiedProperty.setDisplayName(initialTry);
  if (isNameAvailable(getRepositoryContext().getProject(),copiedProperty.getItem(),null)) {
    return;
  }
 else {
    long index=1;
    while (!isNameAvailable(getRepositoryContext().getProject(),copiedProperty.getItem(),null)) {
      if (index < 0) {
        throw new BusinessException(Messages.getString(""String_Node_Str""));
      }
      String nextTry=originalLabel + copy + (index++);
      copiedProperty.setLabel(nextTry);
      copiedProperty.setDisplayName(nextTry);
    }
  }
}",0.9926739926739928
127046,"@Override protected void doRun(){
  if (sourceNode == null) {
    return;
  }
  Property property=sourceNode.getObject().getProperty();
  Property updatedProperty=null;
  try {
    updatedProperty=ProxyRepositoryFactory.getInstance().getLastVersion(new Project(ProjectManager.getInstance().getProject(property.getItem())),property.getId()).getProperty();
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  String initNameValue=""String_Node_Str"" + sourceNode.getObject().getProperty().getItem().getProperty().getLabel();
  CopyObjectAction copyObjectAction=CopyObjectAction.getInstance();
  final TreeSelection selectionInClipboard=(TreeSelection)selection;
  promptForSavingIfNecessary((RepositoryNode)selection.getFirstElement());
  String jobNameValue=null;
  try {
    jobNameValue=getDuplicateName(sourceNode,initNameValue,selectionInClipboard);
  }
 catch (  BusinessException e) {
    jobNameValue=""String_Node_Str"";
  }
  InputDialog jobNewNameDialog=new InputDialog(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),jobNameValue,new IInputValidator(){
    @Override public String isValid(    String newText){
      return validJobName(sourceNode,newText,selectionInClipboard);
    }
  }
);
  if (jobNewNameDialog.open() != Dialog.OK) {
    return;
  }
  String jobNewName=jobNewNameDialog.getValue();
  createOperation(jobNewName,sourceNode,copyObjectAction,selectionInClipboard);
}","@Override protected void doRun(){
  if (sourceNode == null) {
    return;
  }
  Property property=sourceNode.getObject().getProperty();
  Property updatedProperty=null;
  try {
    updatedProperty=ProxyRepositoryFactory.getInstance().getLastVersion(new Project(ProjectManager.getInstance().getProject(property.getItem())),property.getId()).getProperty();
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  String initNameValue=""String_Node_Str"" + sourceNode.getObject().getProperty().getItem().getProperty().getDisplayName();
  CopyObjectAction copyObjectAction=CopyObjectAction.getInstance();
  final TreeSelection selectionInClipboard=(TreeSelection)selection;
  promptForSavingIfNecessary((RepositoryNode)selection.getFirstElement());
  String jobNameValue=null;
  try {
    jobNameValue=getDuplicateName(sourceNode,initNameValue,selectionInClipboard);
  }
 catch (  BusinessException e) {
    jobNameValue=""String_Node_Str"";
  }
  InputDialog jobNewNameDialog=new InputDialog(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),jobNameValue,new IInputValidator(){
    @Override public String isValid(    String newText){
      return validJobName(sourceNode,newText,selectionInClipboard);
    }
  }
);
  if (jobNewNameDialog.open() != Dialog.OK) {
    return;
  }
  String jobNewName=jobNewNameDialog.getValue();
  createOperation(jobNewName,sourceNode,copyObjectAction,selectionInClipboard);
}",0.9944903581267218
127047,"private void regisitPerspectiveListener(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new PerspectiveAdapter(){
    @Override public void perspectiveActivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      IRepositoryView view=RepositoryManager.getRepositoryView();
      if (view != null) {
        if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId) || IBrandingConfiguration.PERSPECTIVE_CAMEL_ID.equals(pId)) {
          view.refresh();
          TalendPaletteHelper.checkAndInitToolBar();
        }
 else         if (IBrandingConfiguration.PERSPECTIVE_DQ_ID.equals(pId)) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            if (tdqRepositoryService != null) {
              tdqRepositoryService.refresh();
            }
          }
          IViewReference findViewReference=RepositoryManagerHelper.findRepositoryViewRef();
          if (findViewReference != null) {
            page.hideView(findViewReference);
          }
        }
      }
    }
  }
);
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new CheatSheetPerspectiveAdapter(CheatSheetPerspectiveAdapter.DQ_CHEATSHEET_START_ID));
}","private void regisitPerspectiveListener(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new PerspectiveAdapter(){
    @Override public void perspectiveActivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      IRepositoryView view=RepositoryManager.getRepositoryView();
      if (view != null) {
        if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId) || IBrandingConfiguration.PERSPECTIVE_CAMEL_ID.equals(pId)) {
          view.refresh();
          TalendPaletteHelper.checkAndInitToolBar();
        }
 else         if (IBrandingConfiguration.PERSPECTIVE_DQ_ID.equals(pId)) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            if (tdqRepositoryService != null) {
              tdqRepositoryService.refresh();
            }
          }
          IViewReference findViewReference=RepositoryManagerHelper.findRepositoryViewRef();
          if (findViewReference != null) {
            page.hideView(findViewReference);
          }
        }
      }
    }
    @Override public void perspectiveDeactivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId)) {
        IComponentSettingsView viewer=(IComponentSettingsView)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(IComponentSettingsView.ID);
        if (viewer != null) {
          viewer.cleanDisplay();
        }
      }
    }
  }
);
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new CheatSheetPerspectiveAdapter(CheatSheetPerspectiveAdapter.DQ_CHEATSHEET_START_ID));
}",0.8593517692536425
127048,"public static boolean addSchemas(Collection<Schema> schemas,Catalog catalog){
  return addPackages(schemas,catalog);
}","public static boolean addSchemas(Schema schema,Catalog catalog){
  return addPackage(schema,catalog);
}",0.9321266968325792
127049,"protected void fillMenu(Menu menu){
  IRepositoryView repositoryView=RepositoryManagerHelper.findRepositoryView();
  if (repositoryView == null) {
    return;
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.PROCESS)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    addToMenu(menu,service.getCreateProcessAction(true),-1);
  }
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  for (  IConfigurationElement element : configurationElements) {
    try {
      AContextualAction action=(AContextualAction)element.createExecutableExtension(""String_Node_Str"");
      action.setToolbar(true);
      action.setWorkbenchPart(repositoryView);
      addToMenu(menu,action,-1);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.BUSINESS_PROCESS)) {
    IRepositoryNode businessNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.BUSINESS_PROCESS);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag=false;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(businessNode.getLabel())) {
        flag=true;
        break;
      }
    }
    if (flag) {
      IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
      addToMenu(menu,service.getCreateDiagramAction(true),-1);
      addSeparator(menu);
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_CONNECTIONS)) {
    final CreateConnectionAction createConnectionAction=new CreateConnectionAction(true);
    createConnectionAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createConnectionAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
    final CreateFileDelimitedAction createFileDelimitedAction=new CreateFileDelimitedAction(true);
    createFileDelimitedAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileDelimitedAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
    final CreateFilePositionalAction createFilePositionalAction=new CreateFilePositionalAction(true);
    createFilePositionalAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFilePositionalAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
    final CreateFileRegexpAction createFileRegexpAction=new CreateFileRegexpAction(true);
    createFileRegexpAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileRegexpAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_XML)) {
    final CreateFileXmlAction createFileXmlAction=new CreateFileXmlAction(true);
    createFileXmlAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileXmlAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
    final CreateFileExcelAction createFileExcelAction=new CreateFileExcelAction(true);
    createFileExcelAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileExcelAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_LDIF)) {
    IRepositoryNode metadataNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA);
    IRepositoryNode ldifNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_LDIF);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag1=false;
    IRepositoryNode metadata=null;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(metadataNode.getLabel())) {
        flag1=true;
        metadata=node;
        break;
      }
    }
    if (flag1) {
      List<IRepositoryNode> metadataChild=metadata.getChildren();
      boolean flag2=false;
      for (      IRepositoryNode node : metadataChild) {
        if (node.getLabel().equals(ldifNode.getLabel())) {
          flag2=true;
          break;
        }
      }
      if (flag2) {
        final CreateFileLdifAction createFileLdifAction=new CreateFileLdifAction(true);
        createFileLdifAction.setWorkbenchPart(repositoryView);
        addToMenu(menu,createFileLdifAction,-1);
      }
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
    IRepositoryNode metadataNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA);
    IRepositoryNode ldapNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag1=false;
    IRepositoryNode metadata=null;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(metadataNode.getLabel())) {
        flag1=true;
        metadata=node;
        break;
      }
    }
    if (flag1) {
      List<IRepositoryNode> metadataChild=metadata.getChildren();
      boolean flag2=false;
      for (      IRepositoryNode node : metadataChild) {
        if (node.getLabel().equals(ldapNode.getLabel())) {
          flag2=true;
          break;
        }
      }
      if (flag2) {
        final CreateLDAPSchemaAction createLDAPSchemaAction=new CreateLDAPSchemaAction(true);
        createLDAPSchemaAction.setWorkbenchPart(repositoryView);
        addToMenu(menu,createLDAPSchemaAction,-1);
      }
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
    final CreateSalesforceSchemaAction createSalesforceModulesAction=new CreateSalesforceSchemaAction(true);
    createSalesforceModulesAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createSalesforceModulesAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
    final CreateGenericSchemaAction createGenericSchemaAction=new CreateGenericSchemaAction(true);
    createGenericSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createGenericSchemaAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
    final CreateWSDLSchemaAction createWSDLSchemaAction=new CreateWSDLSchemaAction(true);
    createWSDLSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createWSDLSchemaAction,-1);
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.ROUTINES)) {
    IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
    addToMenu(menu,service.getCreateRoutineAction(repositoryView),-1);
  }
}","protected void fillMenu(Menu menu){
  IRepositoryView repositoryView=RepositoryManagerHelper.findRepositoryView();
  if (repositoryView == null) {
    return;
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.PROCESS)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    addToMenu(menu,service.getCreateProcessAction(true),-1);
  }
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  for (  IConfigurationElement element : configurationElements) {
    try {
      AContextualAction action=(AContextualAction)element.createExecutableExtension(""String_Node_Str"");
      action.setToolbar(true);
      action.setWorkbenchPart(repositoryView);
      addToMenu(menu,action,-1);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.BUSINESS_PROCESS)) {
    TreeItem[] items=((TreeViewer)repositoryView.getViewer()).getTree().getItems();
    NavigatorContentServiceContentProvider provider=(NavigatorContentServiceContentProvider)((TreeViewer)repositoryView.getViewer()).getContentProvider();
    Object[] objects=provider.getElements(repositoryView.getRoot());
    boolean flag=containsType(objects,ERepositoryObjectType.BUSINESS_PROCESS);
    if (flag) {
      IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
      addToMenu(menu,service.getCreateDiagramAction(true),-1);
      addSeparator(menu);
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_CONNECTIONS)) {
    final CreateConnectionAction createConnectionAction=new CreateConnectionAction(true);
    createConnectionAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createConnectionAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
    final CreateFileDelimitedAction createFileDelimitedAction=new CreateFileDelimitedAction(true);
    createFileDelimitedAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileDelimitedAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
    final CreateFilePositionalAction createFilePositionalAction=new CreateFilePositionalAction(true);
    createFilePositionalAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFilePositionalAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
    final CreateFileRegexpAction createFileRegexpAction=new CreateFileRegexpAction(true);
    createFileRegexpAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileRegexpAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_XML)) {
    final CreateFileXmlAction createFileXmlAction=new CreateFileXmlAction(true);
    createFileXmlAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileXmlAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
    final CreateFileExcelAction createFileExcelAction=new CreateFileExcelAction(true);
    createFileExcelAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileExcelAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_LDIF)) {
    TreeItem[] items=((TreeViewer)repositoryView.getViewer()).getTree().getItems();
    NavigatorContentServiceContentProvider provider=(NavigatorContentServiceContentProvider)((TreeViewer)repositoryView.getViewer()).getContentProvider();
    Object[] objects=provider.getElements(repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA));
    boolean flag=containsType(objects,ERepositoryObjectType.METADATA_FILE_LDIF);
    if (flag) {
      final CreateFileLdifAction createFileLdifAction=new CreateFileLdifAction(true);
      createFileLdifAction.setWorkbenchPart(repositoryView);
      addToMenu(menu,createFileLdifAction,-1);
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
    TreeItem[] items=((TreeViewer)repositoryView.getViewer()).getTree().getItems();
    NavigatorContentServiceContentProvider provider=(NavigatorContentServiceContentProvider)((TreeViewer)repositoryView.getViewer()).getContentProvider();
    Object[] objects=provider.getElements(repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA));
    boolean flag=containsType(objects,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    if (flag) {
      final CreateLDAPSchemaAction createLDAPSchemaAction=new CreateLDAPSchemaAction(true);
      createLDAPSchemaAction.setWorkbenchPart(repositoryView);
      addToMenu(menu,createLDAPSchemaAction,-1);
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
    final CreateSalesforceSchemaAction createSalesforceModulesAction=new CreateSalesforceSchemaAction(true);
    createSalesforceModulesAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createSalesforceModulesAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
    final CreateGenericSchemaAction createGenericSchemaAction=new CreateGenericSchemaAction(true);
    createGenericSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createGenericSchemaAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
    final CreateWSDLSchemaAction createWSDLSchemaAction=new CreateWSDLSchemaAction(true);
    createWSDLSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createWSDLSchemaAction,-1);
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.ROUTINES)) {
    IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
    addToMenu(menu,service.getCreateRoutineAction(repositoryView),-1);
  }
}",0.7687565779582017
127050,"protected void fillMenu(Menu menu){
  IRepositoryView repositoryView=RepositoryManagerHelper.findRepositoryView();
  if (repositoryView == null) {
    return;
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.PROCESS)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    addToMenu(menu,service.getCreateProcessAction(true),-1);
  }
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  for (  IConfigurationElement element : configurationElements) {
    try {
      AContextualAction action=(AContextualAction)element.createExecutableExtension(""String_Node_Str"");
      action.setToolbar(true);
      action.setWorkbenchPart(repositoryView);
      addToMenu(menu,action,-1);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.BUSINESS_PROCESS)) {
    IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
    addToMenu(menu,service.getCreateDiagramAction(true),-1);
    addSeparator(menu);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_CONNECTIONS)) {
    final CreateConnectionAction createConnectionAction=new CreateConnectionAction(true);
    createConnectionAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createConnectionAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
    final CreateFileDelimitedAction createFileDelimitedAction=new CreateFileDelimitedAction(true);
    createFileDelimitedAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileDelimitedAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
    final CreateFilePositionalAction createFilePositionalAction=new CreateFilePositionalAction(true);
    createFilePositionalAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFilePositionalAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
    final CreateFileRegexpAction createFileRegexpAction=new CreateFileRegexpAction(true);
    createFileRegexpAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileRegexpAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_XML)) {
    final CreateFileXmlAction createFileXmlAction=new CreateFileXmlAction(true);
    createFileXmlAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileXmlAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
    final CreateFileExcelAction createFileExcelAction=new CreateFileExcelAction(true);
    createFileExcelAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileExcelAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_LDIF)) {
    final CreateFileLdifAction createFileLdifAction=new CreateFileLdifAction(true);
    createFileLdifAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileLdifAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
    final CreateLDAPSchemaAction createLDAPSchemaAction=new CreateLDAPSchemaAction(true);
    createLDAPSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createLDAPSchemaAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
    final CreateSalesforceSchemaAction createSalesforceModulesAction=new CreateSalesforceSchemaAction(true);
    createSalesforceModulesAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createSalesforceModulesAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
    final CreateGenericSchemaAction createGenericSchemaAction=new CreateGenericSchemaAction(true);
    createGenericSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createGenericSchemaAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
    final CreateWSDLSchemaAction createWSDLSchemaAction=new CreateWSDLSchemaAction(true);
    createWSDLSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createWSDLSchemaAction,-1);
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.ROUTINES)) {
    IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
    addToMenu(menu,service.getCreateRoutineAction(repositoryView),-1);
  }
}","protected void fillMenu(Menu menu){
  IRepositoryView repositoryView=RepositoryManagerHelper.findRepositoryView();
  if (repositoryView == null) {
    return;
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.PROCESS)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    addToMenu(menu,service.getCreateProcessAction(true),-1);
  }
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  for (  IConfigurationElement element : configurationElements) {
    try {
      AContextualAction action=(AContextualAction)element.createExecutableExtension(""String_Node_Str"");
      action.setToolbar(true);
      action.setWorkbenchPart(repositoryView);
      addToMenu(menu,action,-1);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.BUSINESS_PROCESS)) {
    IRepositoryNode businessNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.BUSINESS_PROCESS);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag=false;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(businessNode.getLabel())) {
        flag=true;
        break;
      }
    }
    if (flag) {
      IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
      addToMenu(menu,service.getCreateDiagramAction(true),-1);
      addSeparator(menu);
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_CONNECTIONS)) {
    final CreateConnectionAction createConnectionAction=new CreateConnectionAction(true);
    createConnectionAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createConnectionAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
    final CreateFileDelimitedAction createFileDelimitedAction=new CreateFileDelimitedAction(true);
    createFileDelimitedAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileDelimitedAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
    final CreateFilePositionalAction createFilePositionalAction=new CreateFilePositionalAction(true);
    createFilePositionalAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFilePositionalAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
    final CreateFileRegexpAction createFileRegexpAction=new CreateFileRegexpAction(true);
    createFileRegexpAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileRegexpAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_XML)) {
    final CreateFileXmlAction createFileXmlAction=new CreateFileXmlAction(true);
    createFileXmlAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileXmlAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
    final CreateFileExcelAction createFileExcelAction=new CreateFileExcelAction(true);
    createFileExcelAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileExcelAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_LDIF)) {
    IRepositoryNode metadataNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA);
    IRepositoryNode ldifNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_LDIF);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag1=false;
    IRepositoryNode metadata=null;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(metadataNode.getLabel())) {
        flag1=true;
        metadata=node;
        break;
      }
    }
    if (flag1) {
      List<IRepositoryNode> metadataChild=metadata.getChildren();
      boolean flag2=false;
      for (      IRepositoryNode node : metadataChild) {
        if (node.getLabel().equals(ldifNode.getLabel())) {
          flag2=true;
          break;
        }
      }
      if (flag2) {
        final CreateFileLdifAction createFileLdifAction=new CreateFileLdifAction(true);
        createFileLdifAction.setWorkbenchPart(repositoryView);
        addToMenu(menu,createFileLdifAction,-1);
      }
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
    IRepositoryNode metadataNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA);
    IRepositoryNode ldapNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag1=false;
    IRepositoryNode metadata=null;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(metadataNode.getLabel())) {
        flag1=true;
        metadata=node;
        break;
      }
    }
    if (flag1) {
      List<IRepositoryNode> metadataChild=metadata.getChildren();
      boolean flag2=false;
      for (      IRepositoryNode node : metadataChild) {
        if (node.getLabel().equals(ldapNode.getLabel())) {
          flag2=true;
          break;
        }
      }
      if (flag2) {
        final CreateLDAPSchemaAction createLDAPSchemaAction=new CreateLDAPSchemaAction(true);
        createLDAPSchemaAction.setWorkbenchPart(repositoryView);
        addToMenu(menu,createLDAPSchemaAction,-1);
      }
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
    final CreateSalesforceSchemaAction createSalesforceModulesAction=new CreateSalesforceSchemaAction(true);
    createSalesforceModulesAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createSalesforceModulesAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
    final CreateGenericSchemaAction createGenericSchemaAction=new CreateGenericSchemaAction(true);
    createGenericSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createGenericSchemaAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
    final CreateWSDLSchemaAction createWSDLSchemaAction=new CreateWSDLSchemaAction(true);
    createWSDLSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createWSDLSchemaAction,-1);
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.ROUTINES)) {
    IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
    addToMenu(menu,service.getCreateRoutineAction(repositoryView),-1);
  }
}",0.7951101063384409
127051,"protected void fillMenu(Menu menu){
  IRepositoryView repositoryView=RepositoryManagerHelper.findRepositoryView();
  if (repositoryView == null) {
    return;
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.PROCESS)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    addToMenu(menu,service.getCreateProcessAction(true),-1);
  }
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  for (  IConfigurationElement element : configurationElements) {
    try {
      AContextualAction action=(AContextualAction)element.createExecutableExtension(""String_Node_Str"");
      action.setToolbar(true);
      action.setWorkbenchPart(repositoryView);
      addToMenu(menu,action,-1);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.BUSINESS_PROCESS)) {
    IRepositoryNode businessNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.BUSINESS_PROCESS);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag=false;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(businessNode.getLabel())) {
        flag=true;
      }
    }
    if (flag) {
      IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
      addToMenu(menu,service.getCreateDiagramAction(true),-1);
      addSeparator(menu);
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_CONNECTIONS)) {
    final CreateConnectionAction createConnectionAction=new CreateConnectionAction(true);
    createConnectionAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createConnectionAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
    final CreateFileDelimitedAction createFileDelimitedAction=new CreateFileDelimitedAction(true);
    createFileDelimitedAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileDelimitedAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
    final CreateFilePositionalAction createFilePositionalAction=new CreateFilePositionalAction(true);
    createFilePositionalAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFilePositionalAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
    final CreateFileRegexpAction createFileRegexpAction=new CreateFileRegexpAction(true);
    createFileRegexpAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileRegexpAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_XML)) {
    final CreateFileXmlAction createFileXmlAction=new CreateFileXmlAction(true);
    createFileXmlAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileXmlAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
    final CreateFileExcelAction createFileExcelAction=new CreateFileExcelAction(true);
    createFileExcelAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileExcelAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_LDIF)) {
    IRepositoryNode metadataNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA);
    IRepositoryNode ldifNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_LDIF);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag1=false;
    IRepositoryNode metadata=null;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(metadataNode.getLabel())) {
        flag1=true;
        metadata=node;
        break;
      }
    }
    if (flag1) {
      List<IRepositoryNode> metadataChild=metadata.getChildren();
      boolean flag2=false;
      for (      IRepositoryNode node : metadataChild) {
        if (node.getLabel().equals(ldifNode.getLabel())) {
          flag2=true;
        }
      }
      if (flag2) {
        final CreateFileLdifAction createFileLdifAction=new CreateFileLdifAction(true);
        createFileLdifAction.setWorkbenchPart(repositoryView);
        addToMenu(menu,createFileLdifAction,-1);
      }
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
    IRepositoryNode metadataNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA);
    IRepositoryNode ldifNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag1=false;
    IRepositoryNode metadata=null;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(metadataNode.getLabel())) {
        flag1=true;
        metadata=node;
        break;
      }
    }
    if (flag1) {
      List<IRepositoryNode> metadataChild=metadata.getChildren();
      boolean flag2=false;
      for (      IRepositoryNode node : metadataChild) {
        if (node.getLabel().equals(ldifNode.getLabel())) {
          flag2=true;
        }
      }
      if (flag2) {
        final CreateLDAPSchemaAction createLDAPSchemaAction=new CreateLDAPSchemaAction(true);
        createLDAPSchemaAction.setWorkbenchPart(repositoryView);
        addToMenu(menu,createLDAPSchemaAction,-1);
      }
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
    final CreateSalesforceSchemaAction createSalesforceModulesAction=new CreateSalesforceSchemaAction(true);
    createSalesforceModulesAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createSalesforceModulesAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
    final CreateGenericSchemaAction createGenericSchemaAction=new CreateGenericSchemaAction(true);
    createGenericSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createGenericSchemaAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
    final CreateWSDLSchemaAction createWSDLSchemaAction=new CreateWSDLSchemaAction(true);
    createWSDLSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createWSDLSchemaAction,-1);
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.ROUTINES)) {
    IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
    addToMenu(menu,service.getCreateRoutineAction(repositoryView),-1);
  }
}","protected void fillMenu(Menu menu){
  IRepositoryView repositoryView=RepositoryManagerHelper.findRepositoryView();
  if (repositoryView == null) {
    return;
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.PROCESS)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    addToMenu(menu,service.getCreateProcessAction(true),-1);
  }
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  for (  IConfigurationElement element : configurationElements) {
    try {
      AContextualAction action=(AContextualAction)element.createExecutableExtension(""String_Node_Str"");
      action.setToolbar(true);
      action.setWorkbenchPart(repositoryView);
      addToMenu(menu,action,-1);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.BUSINESS_PROCESS)) {
    IRepositoryNode businessNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.BUSINESS_PROCESS);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag=false;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(businessNode.getLabel())) {
        flag=true;
        break;
      }
    }
    if (flag) {
      IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
      addToMenu(menu,service.getCreateDiagramAction(true),-1);
      addSeparator(menu);
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_CONNECTIONS)) {
    final CreateConnectionAction createConnectionAction=new CreateConnectionAction(true);
    createConnectionAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createConnectionAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
    final CreateFileDelimitedAction createFileDelimitedAction=new CreateFileDelimitedAction(true);
    createFileDelimitedAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileDelimitedAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
    final CreateFilePositionalAction createFilePositionalAction=new CreateFilePositionalAction(true);
    createFilePositionalAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFilePositionalAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
    final CreateFileRegexpAction createFileRegexpAction=new CreateFileRegexpAction(true);
    createFileRegexpAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileRegexpAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_XML)) {
    final CreateFileXmlAction createFileXmlAction=new CreateFileXmlAction(true);
    createFileXmlAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileXmlAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
    final CreateFileExcelAction createFileExcelAction=new CreateFileExcelAction(true);
    createFileExcelAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileExcelAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_LDIF)) {
    IRepositoryNode metadataNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA);
    IRepositoryNode ldifNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_LDIF);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag1=false;
    IRepositoryNode metadata=null;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(metadataNode.getLabel())) {
        flag1=true;
        metadata=node;
        break;
      }
    }
    if (flag1) {
      List<IRepositoryNode> metadataChild=metadata.getChildren();
      boolean flag2=false;
      for (      IRepositoryNode node : metadataChild) {
        if (node.getLabel().equals(ldifNode.getLabel())) {
          flag2=true;
          break;
        }
      }
      if (flag2) {
        final CreateFileLdifAction createFileLdifAction=new CreateFileLdifAction(true);
        createFileLdifAction.setWorkbenchPart(repositoryView);
        addToMenu(menu,createFileLdifAction,-1);
      }
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
    IRepositoryNode metadataNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA);
    IRepositoryNode ldapNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag1=false;
    IRepositoryNode metadata=null;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(metadataNode.getLabel())) {
        flag1=true;
        metadata=node;
        break;
      }
    }
    if (flag1) {
      List<IRepositoryNode> metadataChild=metadata.getChildren();
      boolean flag2=false;
      for (      IRepositoryNode node : metadataChild) {
        if (node.getLabel().equals(ldapNode.getLabel())) {
          flag2=true;
          break;
        }
      }
      if (flag2) {
        final CreateLDAPSchemaAction createLDAPSchemaAction=new CreateLDAPSchemaAction(true);
        createLDAPSchemaAction.setWorkbenchPart(repositoryView);
        addToMenu(menu,createLDAPSchemaAction,-1);
      }
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
    final CreateSalesforceSchemaAction createSalesforceModulesAction=new CreateSalesforceSchemaAction(true);
    createSalesforceModulesAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createSalesforceModulesAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
    final CreateGenericSchemaAction createGenericSchemaAction=new CreateGenericSchemaAction(true);
    createGenericSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createGenericSchemaAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
    final CreateWSDLSchemaAction createWSDLSchemaAction=new CreateWSDLSchemaAction(true);
    createWSDLSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createWSDLSchemaAction,-1);
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.ROUTINES)) {
    IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
    addToMenu(menu,service.getCreateRoutineAction(repositoryView),-1);
  }
}",0.9959439265637232
127052,"protected void fillMenu(Menu menu){
  IRepositoryView repositoryView=RepositoryManagerHelper.findRepositoryView();
  if (repositoryView == null) {
    return;
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.PROCESS)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    addToMenu(menu,service.getCreateProcessAction(true),-1);
  }
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  for (  IConfigurationElement element : configurationElements) {
    try {
      AContextualAction action=(AContextualAction)element.createExecutableExtension(""String_Node_Str"");
      action.setToolbar(true);
      action.setWorkbenchPart(repositoryView);
      addToMenu(menu,action,-1);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.BUSINESS_PROCESS)) {
    IRepositoryNode businessNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.BUSINESS_PROCESS);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag=false;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(businessNode.getLabel())) {
        flag=true;
        break;
      }
    }
    if (flag) {
      IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
      addToMenu(menu,service.getCreateDiagramAction(true),-1);
      addSeparator(menu);
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_CONNECTIONS)) {
    final CreateConnectionAction createConnectionAction=new CreateConnectionAction(true);
    createConnectionAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createConnectionAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
    final CreateFileDelimitedAction createFileDelimitedAction=new CreateFileDelimitedAction(true);
    createFileDelimitedAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileDelimitedAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
    final CreateFilePositionalAction createFilePositionalAction=new CreateFilePositionalAction(true);
    createFilePositionalAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFilePositionalAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
    final CreateFileRegexpAction createFileRegexpAction=new CreateFileRegexpAction(true);
    createFileRegexpAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileRegexpAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_XML)) {
    final CreateFileXmlAction createFileXmlAction=new CreateFileXmlAction(true);
    createFileXmlAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileXmlAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
    final CreateFileExcelAction createFileExcelAction=new CreateFileExcelAction(true);
    createFileExcelAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileExcelAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_LDIF)) {
    IRepositoryNode metadataNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA);
    IRepositoryNode ldifNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_LDIF);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag1=false;
    IRepositoryNode metadata=null;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(metadataNode.getLabel())) {
        flag1=true;
        metadata=node;
        break;
      }
    }
    if (flag1) {
      List<IRepositoryNode> metadataChild=metadata.getChildren();
      boolean flag2=false;
      for (      IRepositoryNode node : metadataChild) {
        if (node.getLabel().equals(ldifNode.getLabel())) {
          flag2=true;
          break;
        }
      }
      if (flag2) {
        final CreateFileLdifAction createFileLdifAction=new CreateFileLdifAction(true);
        createFileLdifAction.setWorkbenchPart(repositoryView);
        addToMenu(menu,createFileLdifAction,-1);
      }
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
    IRepositoryNode metadataNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA);
    IRepositoryNode ldapNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag1=false;
    IRepositoryNode metadata=null;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(metadataNode.getLabel())) {
        flag1=true;
        metadata=node;
        break;
      }
    }
    if (flag1) {
      List<IRepositoryNode> metadataChild=metadata.getChildren();
      boolean flag2=false;
      for (      IRepositoryNode node : metadataChild) {
        if (node.getLabel().equals(ldapNode.getLabel())) {
          flag2=true;
          break;
        }
      }
      if (flag2) {
        final CreateLDAPSchemaAction createLDAPSchemaAction=new CreateLDAPSchemaAction(true);
        createLDAPSchemaAction.setWorkbenchPart(repositoryView);
        addToMenu(menu,createLDAPSchemaAction,-1);
      }
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
    final CreateSalesforceSchemaAction createSalesforceModulesAction=new CreateSalesforceSchemaAction(true);
    createSalesforceModulesAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createSalesforceModulesAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
    final CreateGenericSchemaAction createGenericSchemaAction=new CreateGenericSchemaAction(true);
    createGenericSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createGenericSchemaAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
    final CreateWSDLSchemaAction createWSDLSchemaAction=new CreateWSDLSchemaAction(true);
    createWSDLSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createWSDLSchemaAction,-1);
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.ROUTINES)) {
    IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
    addToMenu(menu,service.getCreateRoutineAction(repositoryView),-1);
  }
}","protected void fillMenu(Menu menu){
  IRepositoryView repositoryView=RepositoryManagerHelper.findRepositoryView();
  if (repositoryView == null) {
    return;
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.PROCESS)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    addToMenu(menu,service.getCreateProcessAction(true),-1);
  }
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  for (  IConfigurationElement element : configurationElements) {
    try {
      AContextualAction action=(AContextualAction)element.createExecutableExtension(""String_Node_Str"");
      action.setToolbar(true);
      action.setWorkbenchPart(repositoryView);
      addToMenu(menu,action,-1);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.BUSINESS_PROCESS)) {
    TreeItem[] items=((TreeViewer)repositoryView.getViewer()).getTree().getItems();
    NavigatorContentServiceContentProvider provider=(NavigatorContentServiceContentProvider)((TreeViewer)repositoryView.getViewer()).getContentProvider();
    Object[] objects=provider.getElements(repositoryView.getRoot());
    boolean flag=containsType(objects,ERepositoryObjectType.BUSINESS_PROCESS);
    if (flag) {
      IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
      addToMenu(menu,service.getCreateDiagramAction(true),-1);
      addSeparator(menu);
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_CONNECTIONS)) {
    final CreateConnectionAction createConnectionAction=new CreateConnectionAction(true);
    createConnectionAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createConnectionAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
    final CreateFileDelimitedAction createFileDelimitedAction=new CreateFileDelimitedAction(true);
    createFileDelimitedAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileDelimitedAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
    final CreateFilePositionalAction createFilePositionalAction=new CreateFilePositionalAction(true);
    createFilePositionalAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFilePositionalAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
    final CreateFileRegexpAction createFileRegexpAction=new CreateFileRegexpAction(true);
    createFileRegexpAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileRegexpAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_XML)) {
    final CreateFileXmlAction createFileXmlAction=new CreateFileXmlAction(true);
    createFileXmlAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileXmlAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
    final CreateFileExcelAction createFileExcelAction=new CreateFileExcelAction(true);
    createFileExcelAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileExcelAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_LDIF)) {
    TreeItem[] items=((TreeViewer)repositoryView.getViewer()).getTree().getItems();
    NavigatorContentServiceContentProvider provider=(NavigatorContentServiceContentProvider)((TreeViewer)repositoryView.getViewer()).getContentProvider();
    Object[] objects=provider.getElements(repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA));
    boolean flag=containsType(objects,ERepositoryObjectType.METADATA_FILE_LDIF);
    if (flag) {
      final CreateFileLdifAction createFileLdifAction=new CreateFileLdifAction(true);
      createFileLdifAction.setWorkbenchPart(repositoryView);
      addToMenu(menu,createFileLdifAction,-1);
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
    TreeItem[] items=((TreeViewer)repositoryView.getViewer()).getTree().getItems();
    NavigatorContentServiceContentProvider provider=(NavigatorContentServiceContentProvider)((TreeViewer)repositoryView.getViewer()).getContentProvider();
    Object[] objects=provider.getElements(repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA));
    boolean flag=containsType(objects,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    if (flag) {
      final CreateLDAPSchemaAction createLDAPSchemaAction=new CreateLDAPSchemaAction(true);
      createLDAPSchemaAction.setWorkbenchPart(repositoryView);
      addToMenu(menu,createLDAPSchemaAction,-1);
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
    final CreateSalesforceSchemaAction createSalesforceModulesAction=new CreateSalesforceSchemaAction(true);
    createSalesforceModulesAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createSalesforceModulesAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
    final CreateGenericSchemaAction createGenericSchemaAction=new CreateGenericSchemaAction(true);
    createGenericSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createGenericSchemaAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
    final CreateWSDLSchemaAction createWSDLSchemaAction=new CreateWSDLSchemaAction(true);
    createWSDLSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createWSDLSchemaAction,-1);
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.ROUTINES)) {
    IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
    addToMenu(menu,service.getCreateRoutineAction(repositoryView),-1);
  }
}",0.7687565779582017
127053,"@Override public void run(){
  IDesignerCoreService designerCoreService=CoreRuntimePlugin.getInstance().getDesignerCoreService();
  if (designerCoreService != null) {
    designerCoreService.switchToCurContextsView();
    designerCoreService.switchToCurComponentSettingsView();
    designerCoreService.switchToCurJobSettingsView();
  }
}","@Override public void run(){
  IDesignerCoreService designerCoreService=CoreRuntimePlugin.getInstance().getDesignerCoreService();
  if (designerCoreService != null) {
    designerCoreService.switchToCurContextsView();
    designerCoreService.switchToCurJobSettingsView();
  }
}",0.8925081433224755
127054,"/** 
 * Added by Marvin Wang on Sep 14, 2012.
 */
private void updateRelatedViews(){
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      IDesignerCoreService designerCoreService=CoreRuntimePlugin.getInstance().getDesignerCoreService();
      if (designerCoreService != null) {
        designerCoreService.switchToCurContextsView();
        designerCoreService.switchToCurComponentSettingsView();
        designerCoreService.switchToCurJobSettingsView();
      }
    }
  }
);
}","/** 
 * Added by Marvin Wang on Sep 14, 2012.
 */
private void updateRelatedViews(){
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      IDesignerCoreService designerCoreService=CoreRuntimePlugin.getInstance().getDesignerCoreService();
      if (designerCoreService != null) {
        designerCoreService.switchToCurContextsView();
        designerCoreService.switchToCurJobSettingsView();
      }
    }
  }
);
}",0.9018789144050104
127055,"@Override public void run(IProgressMonitor monitor) throws CoreException {
  DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
  if (ExtractMetaDataUtils.getInstance().isUseAllSynonyms()) {
    EMap<String,String> map=connection.getParameters();
    if (map.containsKey(ISUSEDINDI)) {
      map.removeKey(ISUSEDINDI);
    }
    map.put(ISUSEDINDI,""String_Node_Str"");
  }
  EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
  EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
  if (PluginChecker.isTDQLoaded()) {
    saveMetaData();
    ITDQRepositoryService tdqRepositoryService=null;
    boolean needUpdateAnalysis=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
    }
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
        return;
      }
    }
    generateOriginalColumnsMap(dataPackageFromOrignalConnection);
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    replaceUUidsForColumnsAndTables(copyDataPackage);
    saveMetaData();
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
    }
  }
 else {
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    saveMetaData();
  }
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
  temConnection=null;
}","@Override public void run(IProgressMonitor monitor) throws CoreException {
  DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
  EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
  EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
  if (PluginChecker.isTDQLoaded()) {
    saveMetaData();
    ITDQRepositoryService tdqRepositoryService=null;
    boolean needUpdateAnalysis=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
    }
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
        return;
      }
    }
    generateOriginalColumnsMap(dataPackageFromOrignalConnection);
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    replaceUUidsForColumnsAndTables(copyDataPackage);
    saveMetaData();
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
    }
  }
 else {
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    saveMetaData();
  }
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
  temConnection=null;
}",0.939152119700748
127056,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
        if (ExtractMetaDataUtils.getInstance().isUseAllSynonyms()) {
          EMap<String,String> map=connection.getParameters();
          if (map.containsKey(ISUSEDINDI)) {
            map.removeKey(ISUSEDINDI);
          }
          map.put(ISUSEDINDI,""String_Node_Str"");
        }
        EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
        EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
        if (PluginChecker.isTDQLoaded()) {
          saveMetaData();
          ITDQRepositoryService tdqRepositoryService=null;
          boolean needUpdateAnalysis=false;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
          }
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
              return;
            }
          }
          generateOriginalColumnsMap(dataPackageFromOrignalConnection);
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          replaceUUidsForColumnsAndTables(copyDataPackage);
          saveMetaData();
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
          }
        }
 else {
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          saveMetaData();
        }
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
        list.add(repositoryObject);
        CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
        temConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
        EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
        EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
        if (PluginChecker.isTDQLoaded()) {
          saveMetaData();
          ITDQRepositoryService tdqRepositoryService=null;
          boolean needUpdateAnalysis=false;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
          }
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
              return;
            }
          }
          generateOriginalColumnsMap(dataPackageFromOrignalConnection);
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          replaceUUidsForColumnsAndTables(copyDataPackage);
          saveMetaData();
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
          }
        }
 else {
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          saveMetaData();
        }
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
        list.add(repositoryObject);
        CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
        temConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    return true;
  }
 else {
    return false;
  }
}",0.949683321604504
127057,"/** 
 * judge whether UiSchema is null or empty string whatever context mode or nor
 * @param dbConn
 * @return
 */
private boolean isNullUiSchema(Connection dbConn){
  if (dbConn instanceof DatabaseConnection) {
    String databaseOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
    String readableName=TalendCWMService.getReadableName(dbConn,databaseOnConnWizard);
    if (isEmptyString(databaseOnConnWizard) || isEmptyString(readableName)) {
      return true;
    }
  }
  return false;
}","/** 
 * judge whether UiSchema is null or empty string whatever context mode or nor
 * @param dbConn
 * @return
 */
protected boolean isNullUiSchema(Connection dbConn){
  if (dbConn instanceof DatabaseConnection) {
    String databaseOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
    String readableName=TalendCWMService.getReadableName(dbConn,databaseOnConnWizard);
    if (isEmptyString(databaseOnConnWizard) || isEmptyString(readableName)) {
      return true;
    }
  }
  return false;
}",0.9880239520958084
127058,"public List<Schema> fillSchemaToCatalog(Connection dbConn,DatabaseMetaData dbJDBCMetadata,Catalog catalog,List<String> schemaFilter) throws Throwable {
  ResultSet schemaRs=null;
  try {
    if (dbJDBCMetadata.getDriverName().equals(DatabaseConstant.MSSQL_DRIVER_NAME_JDBC2_0)) {
      Method getSchemaMethod=dbJDBCMetadata.getClass().getMethod(""String_Node_Str"",String.class,String.class);
      schemaRs=(ResultSet)getSchemaMethod.invoke(dbJDBCMetadata,catalog.getName(),null);
    }
  }
 catch (  SecurityException e) {
  }
catch (  NoSuchMethodException e) {
  }
catch (  IllegalArgumentException e) {
  }
catch (  IllegalAccessException e) {
  }
catch (  InvocationTargetException e) {
    if (e.getTargetException().getClass().toString().equals(""String_Node_Str"")) {
      throw e.getTargetException();
    }
  }
catch (  SQLException e) {
    log.error(e,e);
  }
  if (schemaRs == null) {
    try {
      if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
        schemaRs=((SybaseDatabaseMetaData)dbJDBCMetadata).getSchemas(catalog.getName(),null);
      }
 else       if (dbJDBCMetadata instanceof AS400DatabaseMetaData) {
        schemaRs=dbJDBCMetadata.getSchemas(catalog.getName(),null);
      }
 else {
        schemaRs=dbJDBCMetadata.getSchemas();
      }
    }
 catch (    SQLException e) {
      if (log.isDebugEnabled()) {
        log.debug(e,e);
      }
    }
  }
  List<String> schemaNameCacheTmp=new ArrayList<String>();
  List<Schema> schemaList=new ArrayList<Schema>();
  if (schemaRs != null) {
    try {
      while (schemaRs.next()) {
        String schemaName=null;
        String catalogName=null;
        try {
          schemaName=schemaRs.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (!(MetadataConnectionUtils.isPostgresql(dbJDBCMetadata) || MetadataConnectionUtils.isSybase(dbJDBCMetadata))) {
            catalogName=schemaRs.getString(MetaDataConstants.TABLE_CATALOG.name());
          }
          if (MetadataConnectionUtils.isMssql(dbJDBCMetadata) && dbJDBCMetadata.getDatabaseMajorVersion() > 8 && dbJDBCMetadata.getDriverMajorVersion() > 1) {
            if (catalogName != null && catalogName != schemaName) {
              schemaName=catalogName;
            }
          }
          if (schemaName == null || !MetadataConnectionUtils.isMssql(dbJDBCMetadata.getConnection()) && catalogName != null && !catalogName.equals(catalog.getName())) {
            continue;
          }
        }
 catch (        Exception e) {
        }
        if (!schemaNameCacheTmp.contains(schemaName) && !MetadataConnectionUtils.isMysql(dbJDBCMetadata)) {
          if (!isNullUiSchema(dbConn) && dbConn != null) {
            String uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
            Schema schema=SchemaHelper.createSchema(TalendCWMService.getReadableName(dbConn,uiSchemaOnConnWizard));
            schemaList.add(schema);
            break;
          }
 else           if (isCreateElement(schemaFilter,schemaName)) {
            Schema schema=SchemaHelper.createSchema(schemaName);
            schemaList.add(schema);
            schemaNameCacheTmp.add(schemaName);
          }
        }
      }
      schemaRs.close();
    }
 catch (    Exception e) {
      if (log.isDebugEnabled()) {
        log.debug(e,e);
      }
    }
  }
  return schemaList;
}","public List<Schema> fillSchemaToCatalog(Connection dbConn,DatabaseMetaData dbJDBCMetadata,Catalog catalog,List<String> schemaFilter) throws Throwable {
  ResultSet schemaRs=null;
  try {
    if (dbJDBCMetadata.getDriverName().equals(DatabaseConstant.MSSQL_DRIVER_NAME_JDBC2_0)) {
      Method getSchemaMethod=dbJDBCMetadata.getClass().getMethod(""String_Node_Str"",String.class,String.class);
      schemaRs=(ResultSet)getSchemaMethod.invoke(dbJDBCMetadata,catalog.getName(),null);
    }
  }
 catch (  SecurityException e) {
  }
catch (  NoSuchMethodException e) {
  }
catch (  IllegalArgumentException e) {
  }
catch (  IllegalAccessException e) {
  }
catch (  InvocationTargetException e) {
    if (e.getTargetException().getClass().toString().equals(""String_Node_Str"")) {
      throw e.getTargetException();
    }
  }
catch (  SQLException e) {
    log.error(e,e);
  }
  if (schemaRs == null) {
    try {
      if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
        schemaRs=((SybaseDatabaseMetaData)dbJDBCMetadata).getSchemas(catalog.getName(),null);
      }
 else       if (dbJDBCMetadata instanceof AS400DatabaseMetaData) {
        schemaRs=dbJDBCMetadata.getSchemas(catalog.getName(),null);
      }
 else {
        schemaRs=dbJDBCMetadata.getSchemas();
      }
    }
 catch (    SQLException e) {
      if (log.isDebugEnabled()) {
        log.debug(e,e);
      }
    }
  }
  List<String> schemaNameCacheTmp=new ArrayList<String>();
  List<Schema> schemaList=new ArrayList<Schema>();
  if (schemaRs != null) {
    try {
      while (schemaRs.next()) {
        String schemaName=getSchemaName(schemaRs,dbJDBCMetadata,catalog);
        if (schemaName == null) {
          continue;
        }
        if (!schemaNameCacheTmp.contains(schemaName) && !MetadataConnectionUtils.isMysql(dbJDBCMetadata)) {
          if (!isNullUiSchema(dbConn) && dbConn != null) {
            Schema createByUiSchema=createSchemaByUiSchema((DatabaseConnection)dbConn);
            schemaList.add(createByUiSchema);
            break;
          }
 else           if (isCreateElement(schemaFilter,schemaName)) {
            Schema schema=SchemaHelper.createSchema(schemaName);
            schemaList.add(schema);
            schemaNameCacheTmp.add(schemaName);
          }
        }
      }
      schemaRs.close();
    }
 catch (    Exception e) {
      if (log.isDebugEnabled()) {
        log.debug(e,e);
      }
    }
  }
  return schemaList;
}",0.6068821689259646
127059,"public static MetadataFillFactory getDBInstance(){
  if (instance == null) {
    instance=new MetadataFillFactory();
  }
  metadataFiller=DBmetadataFiller;
  return instance;
}","/** 
 * Get DatabaseConnection Instance
 * @param dbUrlType the type of you want to fill database
 * @return
 */
public static MetadataFillFactory getDBInstance(SupportDBUrlType dbUrlType){
  if (instance == null) {
    instance=new MetadataFillFactory();
  }
switch (dbUrlType) {
case SYBASEDEFAULTURL:
    metadataFiller=new SybaseConnectionFillerImpl();
  break;
default :
metadataFiller=DBmetadataFiller;
}
return instance;
}",0.5685950413223141
127060,"@Override public void run(){
  IDesignerCoreService designerCoreService=CoreRuntimePlugin.getInstance().getDesignerCoreService();
  if (designerCoreService != null) {
    designerCoreService.switchToCurContextsView();
    designerCoreService.switchToCurComponentSettingsView();
    designerCoreService.switchToCurJobSettingsView();
  }
}","@Override public void run(){
  IDesignerCoreService designerCoreService=CoreRuntimePlugin.getInstance().getDesignerCoreService();
  if (designerCoreService != null) {
    designerCoreService.switchToCurContextsView();
    designerCoreService.switchToCurJobSettingsView();
  }
}",0.8925081433224755
127061,"/** 
 * Added by Marvin Wang on Sep 14, 2012.
 */
private void updateRelatedViews(){
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      IDesignerCoreService designerCoreService=CoreRuntimePlugin.getInstance().getDesignerCoreService();
      if (designerCoreService != null) {
        designerCoreService.switchToCurContextsView();
        designerCoreService.switchToCurComponentSettingsView();
        designerCoreService.switchToCurJobSettingsView();
      }
    }
  }
);
}","/** 
 * Added by Marvin Wang on Sep 14, 2012.
 */
private void updateRelatedViews(){
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      IDesignerCoreService designerCoreService=CoreRuntimePlugin.getInstance().getDesignerCoreService();
      if (designerCoreService != null) {
        designerCoreService.switchToCurContextsView();
        designerCoreService.switchToCurJobSettingsView();
      }
    }
  }
);
}",0.9018789144050104
127062,"protected void fillMenu(Menu menu){
  IRepositoryView repositoryView=RepositoryManagerHelper.findRepositoryView();
  if (repositoryView == null) {
    return;
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.PROCESS)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    addToMenu(menu,service.getCreateProcessAction(true),-1);
  }
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  for (  IConfigurationElement element : configurationElements) {
    try {
      AContextualAction action=(AContextualAction)element.createExecutableExtension(""String_Node_Str"");
      action.setToolbar(true);
      action.setWorkbenchPart(repositoryView);
      addToMenu(menu,action,-1);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.BUSINESS_PROCESS)) {
    IRepositoryNode businessNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.BUSINESS_PROCESS);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag=false;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(businessNode.getLabel())) {
        flag=true;
        break;
      }
    }
    if (flag) {
      IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
      addToMenu(menu,service.getCreateDiagramAction(true),-1);
      addSeparator(menu);
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_CONNECTIONS)) {
    final CreateConnectionAction createConnectionAction=new CreateConnectionAction(true);
    createConnectionAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createConnectionAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
    final CreateFileDelimitedAction createFileDelimitedAction=new CreateFileDelimitedAction(true);
    createFileDelimitedAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileDelimitedAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
    final CreateFilePositionalAction createFilePositionalAction=new CreateFilePositionalAction(true);
    createFilePositionalAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFilePositionalAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
    final CreateFileRegexpAction createFileRegexpAction=new CreateFileRegexpAction(true);
    createFileRegexpAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileRegexpAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_XML)) {
    final CreateFileXmlAction createFileXmlAction=new CreateFileXmlAction(true);
    createFileXmlAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileXmlAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
    final CreateFileExcelAction createFileExcelAction=new CreateFileExcelAction(true);
    createFileExcelAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileExcelAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_LDIF)) {
    IRepositoryNode metadataNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA);
    IRepositoryNode ldifNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_LDIF);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag1=false;
    IRepositoryNode metadata=null;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(metadataNode.getLabel())) {
        flag1=true;
        metadata=node;
        break;
      }
    }
    if (flag1) {
      List<IRepositoryNode> metadataChild=metadata.getChildren();
      boolean flag2=false;
      for (      IRepositoryNode node : metadataChild) {
        if (node.getLabel().equals(ldifNode.getLabel())) {
          flag2=true;
          break;
        }
      }
      if (flag2) {
        final CreateFileLdifAction createFileLdifAction=new CreateFileLdifAction(true);
        createFileLdifAction.setWorkbenchPart(repositoryView);
        addToMenu(menu,createFileLdifAction,-1);
      }
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
    IRepositoryNode metadataNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA);
    IRepositoryNode ldapNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag1=false;
    IRepositoryNode metadata=null;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(metadataNode.getLabel())) {
        flag1=true;
        metadata=node;
        break;
      }
    }
    if (flag1) {
      List<IRepositoryNode> metadataChild=metadata.getChildren();
      boolean flag2=false;
      for (      IRepositoryNode node : metadataChild) {
        if (node.getLabel().equals(ldapNode.getLabel())) {
          flag2=true;
          break;
        }
      }
      if (flag2) {
        final CreateLDAPSchemaAction createLDAPSchemaAction=new CreateLDAPSchemaAction(true);
        createLDAPSchemaAction.setWorkbenchPart(repositoryView);
        addToMenu(menu,createLDAPSchemaAction,-1);
      }
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
    final CreateSalesforceSchemaAction createSalesforceModulesAction=new CreateSalesforceSchemaAction(true);
    createSalesforceModulesAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createSalesforceModulesAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
    final CreateGenericSchemaAction createGenericSchemaAction=new CreateGenericSchemaAction(true);
    createGenericSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createGenericSchemaAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
    final CreateWSDLSchemaAction createWSDLSchemaAction=new CreateWSDLSchemaAction(true);
    createWSDLSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createWSDLSchemaAction,-1);
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.ROUTINES)) {
    IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
    addToMenu(menu,service.getCreateRoutineAction(repositoryView),-1);
  }
}","protected void fillMenu(Menu menu){
  IRepositoryView repositoryView=RepositoryManagerHelper.findRepositoryView();
  if (repositoryView == null) {
    return;
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.PROCESS)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    addToMenu(menu,service.getCreateProcessAction(true),-1);
  }
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  for (  IConfigurationElement element : configurationElements) {
    try {
      AContextualAction action=(AContextualAction)element.createExecutableExtension(""String_Node_Str"");
      action.setToolbar(true);
      action.setWorkbenchPart(repositoryView);
      addToMenu(menu,action,-1);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.BUSINESS_PROCESS)) {
    TreeItem[] items=((TreeViewer)repositoryView.getViewer()).getTree().getItems();
    NavigatorContentServiceContentProvider provider=(NavigatorContentServiceContentProvider)((TreeViewer)repositoryView.getViewer()).getContentProvider();
    Object[] objects=provider.getElements(repositoryView.getRoot());
    boolean flag=containsType(objects,ERepositoryObjectType.BUSINESS_PROCESS);
    if (flag) {
      IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
      addToMenu(menu,service.getCreateDiagramAction(true),-1);
      addSeparator(menu);
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_CONNECTIONS)) {
    final CreateConnectionAction createConnectionAction=new CreateConnectionAction(true);
    createConnectionAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createConnectionAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
    final CreateFileDelimitedAction createFileDelimitedAction=new CreateFileDelimitedAction(true);
    createFileDelimitedAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileDelimitedAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
    final CreateFilePositionalAction createFilePositionalAction=new CreateFilePositionalAction(true);
    createFilePositionalAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFilePositionalAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
    final CreateFileRegexpAction createFileRegexpAction=new CreateFileRegexpAction(true);
    createFileRegexpAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileRegexpAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_XML)) {
    final CreateFileXmlAction createFileXmlAction=new CreateFileXmlAction(true);
    createFileXmlAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileXmlAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
    final CreateFileExcelAction createFileExcelAction=new CreateFileExcelAction(true);
    createFileExcelAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileExcelAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_LDIF)) {
    TreeItem[] items=((TreeViewer)repositoryView.getViewer()).getTree().getItems();
    NavigatorContentServiceContentProvider provider=(NavigatorContentServiceContentProvider)((TreeViewer)repositoryView.getViewer()).getContentProvider();
    Object[] objects=provider.getElements(repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA));
    boolean flag=containsType(objects,ERepositoryObjectType.METADATA_FILE_LDIF);
    if (flag) {
      final CreateFileLdifAction createFileLdifAction=new CreateFileLdifAction(true);
      createFileLdifAction.setWorkbenchPart(repositoryView);
      addToMenu(menu,createFileLdifAction,-1);
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
    TreeItem[] items=((TreeViewer)repositoryView.getViewer()).getTree().getItems();
    NavigatorContentServiceContentProvider provider=(NavigatorContentServiceContentProvider)((TreeViewer)repositoryView.getViewer()).getContentProvider();
    Object[] objects=provider.getElements(repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA));
    boolean flag=containsType(objects,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    if (flag) {
      final CreateLDAPSchemaAction createLDAPSchemaAction=new CreateLDAPSchemaAction(true);
      createLDAPSchemaAction.setWorkbenchPart(repositoryView);
      addToMenu(menu,createLDAPSchemaAction,-1);
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
    final CreateSalesforceSchemaAction createSalesforceModulesAction=new CreateSalesforceSchemaAction(true);
    createSalesforceModulesAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createSalesforceModulesAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
    final CreateGenericSchemaAction createGenericSchemaAction=new CreateGenericSchemaAction(true);
    createGenericSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createGenericSchemaAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
    final CreateWSDLSchemaAction createWSDLSchemaAction=new CreateWSDLSchemaAction(true);
    createWSDLSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createWSDLSchemaAction,-1);
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.ROUTINES)) {
    IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
    addToMenu(menu,service.getCreateRoutineAction(repositoryView),-1);
  }
}",0.7687565779582017
127063,"@Override protected boolean checkFieldsValue(){
  String xmlXsdFilePathText=xmlXsdFilePath.getText();
  String outputFilePathText=outputFilePath.getText();
  boolean editable=xmlXsdFilePath.getEditable();
  StringBuffer msgError=new StringBuffer();
  if (creation && !noFileButton.getSelection() && !useFileButton.getSelection()) {
    msgError.append(""String_Node_Str"");
  }
  if (creation && editable && xmlXsdFilePathText == ""String_Node_Str"") {
    msgError.append(""String_Node_Str"");
  }
  if (!valid && creation) {
    if (xmlXsdFilePathText != null && !""String_Node_Str"".equals(xmlXsdFilePathText)) {
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
        xmlXsdFilePathText=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePathText));
      }
      msgError.append(xmlXsdFilePathText + ""String_Node_Str"");
    }
  }
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
    outputFilePathText=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,outputFilePathText));
  }
  if (xmlXsdFilePathText != null && !xmlXsdFilePathText.equals(""String_Node_Str"")) {
    if (treePopulator.isValidFile(xmlXsdFilePathText)) {
      if (!XmlUtil.isXMLFile(xmlXsdFilePathText) && !XmlUtil.isXSDFile(xmlXsdFilePathText)) {
        msgError.append(""String_Node_Str"");
      }
    }
 else {
      msgError.append(""String_Node_Str"");
    }
  }
  if (outputFilePathText != null && !outputFilePathText.equals(""String_Node_Str"") && !XmlUtil.isXMLFile(outputFilePathText)) {
    msgError.append(""String_Node_Str"");
  }
  if (""String_Node_Str"".equals(msgError.toString())) {
    updateStatus(IStatus.OK,null);
    return true;
  }
  updateStatus(IStatus.ERROR,msgError.toString());
  return false;
}","@Override protected boolean checkFieldsValue(){
  String xmlXsdFilePathText=xmlXsdFilePath.getText();
  String outputFilePathText=outputFilePath.getText();
  boolean editable=xmlXsdFilePath.getEditable();
  StringBuffer msgError=new StringBuffer();
  if (creation && !noFileButton.getSelection() && !useFileButton.getSelection()) {
    msgError.append(""String_Node_Str"");
  }
  if (creation && editable && xmlXsdFilePathText == ""String_Node_Str"") {
    msgError.append(""String_Node_Str"");
  }
  if (!valid && creation) {
    if (xmlXsdFilePathText != null && !""String_Node_Str"".equals(xmlXsdFilePathText)) {
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
        xmlXsdFilePathText=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePathText));
      }
      msgError.append(xmlXsdFilePathText + ""String_Node_Str"");
    }
  }
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
    outputFilePathText=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,outputFilePathText));
  }
  if (xmlXsdFilePathText != null && !xmlXsdFilePathText.equals(""String_Node_Str"") && (xsdPathChanged || creation)) {
    if (treePopulator.isValidFile(xmlXsdFilePathText)) {
      if (!XmlUtil.isXMLFile(xmlXsdFilePathText) && !XmlUtil.isXSDFile(xmlXsdFilePathText)) {
        msgError.append(""String_Node_Str"");
      }
    }
 else {
      msgError.append(""String_Node_Str"");
    }
  }
  if (outputFilePathText != null && !outputFilePathText.equals(""String_Node_Str"") && !XmlUtil.isXMLFile(outputFilePathText)) {
    msgError.append(""String_Node_Str"");
  }
  if (""String_Node_Str"".equals(msgError.toString())) {
    updateStatus(IStatus.OK,null);
    return true;
  }
  updateStatus(IStatus.ERROR,msgError.toString());
  return false;
}",0.9918533604887984
127064,"/** 
 * Ensures that fields are set.
 * @return
 */
@Override protected boolean checkFieldsValue(){
  String xmlXsdFilePathText=fileFieldXml.getText();
  if (xmlXsdFilePathText == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!valid) {
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
      xmlXsdFilePathText=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePathText));
    }
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str"",xmlXsdFilePathText));
    return false;
  }
  if (xmlXsdFilePathText != null && !xmlXsdFilePathText.equals(""String_Node_Str"")) {
    if (treePopulator.isValidFile(xmlXsdFilePathText)) {
      if (!XmlUtil.isXMLFile(xmlXsdFilePathText) && !XmlUtil.isXSDFile(xmlXsdFilePathText)) {
        updateStatus(IStatus.ERROR,""String_Node_Str"");
        return false;
      }
    }
 else {
      updateStatus(IStatus.ERROR,""String_Node_Str"");
      return false;
    }
  }
  updateStatus(IStatus.OK,null);
  return true;
}","/** 
 * Ensures that fields are set.
 * @return
 */
@Override protected boolean checkFieldsValue(){
  String xmlXsdFilePathText=fileFieldXml.getText();
  if (xmlXsdFilePathText == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!valid) {
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
      xmlXsdFilePathText=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePathText));
    }
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str"",xmlXsdFilePathText));
    return false;
  }
  if (xmlXsdFilePathText != null && !xmlXsdFilePathText.equals(""String_Node_Str"") && (xsdPathChanged || creation)) {
    if (treePopulator.isValidFile(xmlXsdFilePathText)) {
      if (!XmlUtil.isXMLFile(xmlXsdFilePathText) && !XmlUtil.isXSDFile(xmlXsdFilePathText)) {
        updateStatus(IStatus.ERROR,""String_Node_Str"");
        return false;
      }
    }
 else {
      updateStatus(IStatus.ERROR,""String_Node_Str"");
      return false;
    }
  }
  updateStatus(IStatus.OK,null);
  return true;
}",0.9864864864864864
127065,"protected void fillMenu(Menu menu){
  IRepositoryView repositoryView=RepositoryManagerHelper.findRepositoryView();
  if (repositoryView == null) {
    return;
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.PROCESS)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    addToMenu(menu,service.getCreateProcessAction(true),-1);
  }
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  for (  IConfigurationElement element : configurationElements) {
    try {
      AContextualAction action=(AContextualAction)element.createExecutableExtension(""String_Node_Str"");
      action.setToolbar(true);
      action.setWorkbenchPart(repositoryView);
      addToMenu(menu,action,-1);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.BUSINESS_PROCESS)) {
    IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
    addToMenu(menu,service.getCreateDiagramAction(true),-1);
    addSeparator(menu);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_CONNECTIONS)) {
    final CreateConnectionAction createConnectionAction=new CreateConnectionAction(true);
    createConnectionAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createConnectionAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
    final CreateFileDelimitedAction createFileDelimitedAction=new CreateFileDelimitedAction(true);
    createFileDelimitedAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileDelimitedAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
    final CreateFilePositionalAction createFilePositionalAction=new CreateFilePositionalAction(true);
    createFilePositionalAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFilePositionalAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
    final CreateFileRegexpAction createFileRegexpAction=new CreateFileRegexpAction(true);
    createFileRegexpAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileRegexpAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_XML)) {
    final CreateFileXmlAction createFileXmlAction=new CreateFileXmlAction(true);
    createFileXmlAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileXmlAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
    final CreateFileExcelAction createFileExcelAction=new CreateFileExcelAction(true);
    createFileExcelAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileExcelAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_LDIF)) {
    final CreateFileLdifAction createFileLdifAction=new CreateFileLdifAction(true);
    createFileLdifAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileLdifAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
    final CreateLDAPSchemaAction createLDAPSchemaAction=new CreateLDAPSchemaAction(true);
    createLDAPSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createLDAPSchemaAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
    final CreateSalesforceSchemaAction createSalesforceModulesAction=new CreateSalesforceSchemaAction(true);
    createSalesforceModulesAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createSalesforceModulesAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
    final CreateGenericSchemaAction createGenericSchemaAction=new CreateGenericSchemaAction(true);
    createGenericSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createGenericSchemaAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
    final CreateWSDLSchemaAction createWSDLSchemaAction=new CreateWSDLSchemaAction(true);
    createWSDLSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createWSDLSchemaAction,-1);
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.ROUTINES)) {
    IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
    addToMenu(menu,service.getCreateRoutineAction(repositoryView),-1);
  }
}","protected void fillMenu(Menu menu){
  IRepositoryView repositoryView=RepositoryManagerHelper.findRepositoryView();
  if (repositoryView == null) {
    return;
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.PROCESS)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    addToMenu(menu,service.getCreateProcessAction(true),-1);
  }
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  for (  IConfigurationElement element : configurationElements) {
    try {
      AContextualAction action=(AContextualAction)element.createExecutableExtension(""String_Node_Str"");
      action.setToolbar(true);
      action.setWorkbenchPart(repositoryView);
      addToMenu(menu,action,-1);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.BUSINESS_PROCESS)) {
    IRepositoryNode businessNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.BUSINESS_PROCESS);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag=false;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(businessNode.getLabel())) {
        flag=true;
        break;
      }
    }
    if (flag) {
      IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
      addToMenu(menu,service.getCreateDiagramAction(true),-1);
      addSeparator(menu);
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_CONNECTIONS)) {
    final CreateConnectionAction createConnectionAction=new CreateConnectionAction(true);
    createConnectionAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createConnectionAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
    final CreateFileDelimitedAction createFileDelimitedAction=new CreateFileDelimitedAction(true);
    createFileDelimitedAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileDelimitedAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
    final CreateFilePositionalAction createFilePositionalAction=new CreateFilePositionalAction(true);
    createFilePositionalAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFilePositionalAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
    final CreateFileRegexpAction createFileRegexpAction=new CreateFileRegexpAction(true);
    createFileRegexpAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileRegexpAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_XML)) {
    final CreateFileXmlAction createFileXmlAction=new CreateFileXmlAction(true);
    createFileXmlAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileXmlAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
    final CreateFileExcelAction createFileExcelAction=new CreateFileExcelAction(true);
    createFileExcelAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileExcelAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_LDIF)) {
    IRepositoryNode metadataNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA);
    IRepositoryNode ldifNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_LDIF);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag1=false;
    IRepositoryNode metadata=null;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(metadataNode.getLabel())) {
        flag1=true;
        metadata=node;
        break;
      }
    }
    if (flag1) {
      List<IRepositoryNode> metadataChild=metadata.getChildren();
      boolean flag2=false;
      for (      IRepositoryNode node : metadataChild) {
        if (node.getLabel().equals(ldifNode.getLabel())) {
          flag2=true;
          break;
        }
      }
      if (flag2) {
        final CreateFileLdifAction createFileLdifAction=new CreateFileLdifAction(true);
        createFileLdifAction.setWorkbenchPart(repositoryView);
        addToMenu(menu,createFileLdifAction,-1);
      }
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
    IRepositoryNode metadataNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA);
    IRepositoryNode ldapNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag1=false;
    IRepositoryNode metadata=null;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(metadataNode.getLabel())) {
        flag1=true;
        metadata=node;
        break;
      }
    }
    if (flag1) {
      List<IRepositoryNode> metadataChild=metadata.getChildren();
      boolean flag2=false;
      for (      IRepositoryNode node : metadataChild) {
        if (node.getLabel().equals(ldapNode.getLabel())) {
          flag2=true;
          break;
        }
      }
      if (flag2) {
        final CreateLDAPSchemaAction createLDAPSchemaAction=new CreateLDAPSchemaAction(true);
        createLDAPSchemaAction.setWorkbenchPart(repositoryView);
        addToMenu(menu,createLDAPSchemaAction,-1);
      }
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
    final CreateSalesforceSchemaAction createSalesforceModulesAction=new CreateSalesforceSchemaAction(true);
    createSalesforceModulesAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createSalesforceModulesAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
    final CreateGenericSchemaAction createGenericSchemaAction=new CreateGenericSchemaAction(true);
    createGenericSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createGenericSchemaAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
    final CreateWSDLSchemaAction createWSDLSchemaAction=new CreateWSDLSchemaAction(true);
    createWSDLSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createWSDLSchemaAction,-1);
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.ROUTINES)) {
    IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
    addToMenu(menu,service.getCreateRoutineAction(repositoryView),-1);
  }
}",0.7951101063384409
127066,"private boolean isValidFile(String filePath){
  File file=new File(filePath);
  SAXReader saxReader=new SAXReader();
  URL url;
  try {
    url=file.toURI().toURL();
    Document doc=saxReader.read(url.getFile());
  }
 catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
catch (  DocumentException e) {
    return false;
  }
  return true;
}","public boolean isValidFile(String filePath){
  File file=new File(filePath);
  SAXReader saxReader=new SAXReader();
  URL url;
  try {
    url=file.toURI().toURL();
    Document doc=saxReader.read(url.getFile());
  }
 catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
catch (  DocumentException e) {
    return false;
  }
  return true;
}",0.9847856154910096
127067,"@Override protected boolean checkFieldsValue(){
  boolean editable=xmlXsdFilePath.getEditable();
  StringBuffer msgError=new StringBuffer();
  if (creation && !noFileButton.getSelection() && !useFileButton.getSelection()) {
    msgError.append(""String_Node_Str"");
  }
  if (creation && editable && xmlXsdFilePath.getText() == ""String_Node_Str"") {
    msgError.append(""String_Node_Str"");
  }
  if (!valid && creation) {
    String xmlXsdText=xmlXsdFilePath.getText();
    if (xmlXsdText != null && !""String_Node_Str"".equals(xmlXsdText)) {
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
        xmlXsdText=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePath.getText()));
      }
      msgError.append(xmlXsdText + ""String_Node_Str"");
    }
  }
  String text=outputFilePath.getText();
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
    text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
  }
  if (text != null && !text.equals(""String_Node_Str"") && !XmlUtil.isXMLFile(text)) {
    msgError.append(""String_Node_Str"");
  }
  if (""String_Node_Str"".equals(msgError.toString())) {
    updateStatus(IStatus.OK,null);
    return true;
  }
  updateStatus(IStatus.ERROR,msgError.toString());
  return false;
}","@Override protected boolean checkFieldsValue(){
  String xmlXsdFilePathText=xmlXsdFilePath.getText();
  String outputFilePathText=outputFilePath.getText();
  boolean editable=xmlXsdFilePath.getEditable();
  StringBuffer msgError=new StringBuffer();
  if (creation && !noFileButton.getSelection() && !useFileButton.getSelection()) {
    msgError.append(""String_Node_Str"");
  }
  if (creation && editable && xmlXsdFilePathText == ""String_Node_Str"") {
    msgError.append(""String_Node_Str"");
  }
  if (!valid && creation) {
    if (xmlXsdFilePathText != null && !""String_Node_Str"".equals(xmlXsdFilePathText)) {
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
        xmlXsdFilePathText=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePathText));
      }
      msgError.append(xmlXsdFilePathText + ""String_Node_Str"");
    }
  }
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
    outputFilePathText=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,outputFilePathText));
  }
  if (xmlXsdFilePathText != null && !xmlXsdFilePathText.equals(""String_Node_Str"")) {
    if (treePopulator.isValidFile(xmlXsdFilePathText)) {
      if (!XmlUtil.isXMLFile(xmlXsdFilePathText) && !XmlUtil.isXSDFile(xmlXsdFilePathText)) {
        msgError.append(""String_Node_Str"");
      }
    }
 else {
      msgError.append(""String_Node_Str"");
    }
  }
  if (outputFilePathText != null && !outputFilePathText.equals(""String_Node_Str"") && !XmlUtil.isXMLFile(outputFilePathText)) {
    msgError.append(""String_Node_Str"");
  }
  if (""String_Node_Str"".equals(msgError.toString())) {
    updateStatus(IStatus.OK,null);
    return true;
  }
  updateStatus(IStatus.ERROR,msgError.toString());
  return false;
}",0.7942890442890443
127068,"@Override protected void addFieldsListeners(){
  xmlXsdFilePath.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent event){
      if (xmlXsdFilePath.getResult() == null) {
        return;
      }
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        checkFieldsValue();
        if (!valid) {
          return;
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  xmlXsdFilePath.addFocusListener(new FocusListener(){
    @Override public void focusLost(    FocusEvent e){
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        getConnection().getRoot().clear();
        getConnection().getGroup().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(xmlXsdFilePath.getText()));
      StringBuilder fileContent=new StringBuilder();
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (!XmlUtil.isXMLFile(file.getPath())) {
        setFileContent(file);
      }
      String str;
      try {
        Charset guessCharset=CharsetToolkit.guessEncoding(file,4096);
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessCharset.displayName()));
        while ((str=in.readLine()) != null) {
          fileContent.append(str + ""String_Node_Str"");
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
        fileContentText.setText(new String(fileContent));
      }
 catch (      Exception e1) {
        String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + xmlXsdFilePath.getText().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        if (e1 instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e1 instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e1 instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        fileContentText.setText(msgError);
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception exception) {
          ExceptionHandler.process(exception);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !""String_Node_Str"".equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e1) {
            ExceptionHandler.process(e1);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        checkFieldsValue();
        if (!valid) {
          return;
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
      valid=treePopulator.populateTree(text,treeNode);
      checkFieldsValue();
      isModifing=true;
    }
    @Override public void focusGained(    FocusEvent e){
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
      }
 else {
        treePopulator.setLimit(Integer.valueOf(str));
      }
      valid=treePopulator.populateTree(xmlXsdFilePath.getText(),treeNode);
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
    }
  }
);
  outputFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
      checkFieldsValue();
    }
  }
);
}","@Override protected void addFieldsListeners(){
  xmlXsdFilePath.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent event){
      if (xmlXsdFilePath.getResult() == null) {
        return;
      }
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          if (!validXsd) {
            try {
              XSDSchema xsdSchema=updateXSDSchema(text);
              List<ATreeNode> list=updateRootNodes(xsdSchema,true);
              if (list.size() > 1) {
                RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
                if (dialog.open() == IDialogConstants.OK_ID) {
                  ATreeNode selectedNode=dialog.getSelectedNode();
                  valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
                }
 else {
                  return;
                }
              }
 else {
                valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
              }
            }
 catch (            Exception e) {
              ExceptionHandler.process(e);
            }
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        checkFieldsValue();
        if (!valid) {
          return;
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  xmlXsdFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent event){
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        getConnection().getRoot().clear();
        getConnection().getGroup().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(xmlXsdFilePath.getText()));
      StringBuilder fileContent=new StringBuilder();
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e) {
            ExceptionHandler.process(e);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (treePopulator.isValidFile(file.getPath())) {
        setFileContent(file);
      }
      String str;
      try {
        Charset guessCharset=CharsetToolkit.guessEncoding(file,4096);
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessCharset.displayName()));
        while ((str=in.readLine()) != null) {
          fileContent.append(str + ""String_Node_Str"");
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
        fileContentText.setText(new String(fileContent));
      }
 catch (      Exception e) {
        String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + xmlXsdFilePath.getText().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        if (e instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        fileContentText.setText(msgError);
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception exception) {
          ExceptionHandler.process(exception);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !""String_Node_Str"".equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      if (file.exists() && (xsdPathChanged || creation)) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
                validXsd=true;
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        checkFieldsValue();
        if (!valid) {
          return;
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
      checkFieldsValue();
      isModifing=true;
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
      }
 else {
        treePopulator.setLimit(Integer.valueOf(str));
      }
      valid=treePopulator.populateTree(xmlXsdFilePath.getText(),treeNode);
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
    }
  }
);
  outputFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
      checkFieldsValue();
    }
  }
);
}",0.978267102471472
127069,"@Override public void fillActionBars(IActionBars actionBars){
  if (doubleClickAction != null && !doubleClickAction.getStructuredViewer().equals(getActionSite().getStructuredViewer())) {
    doubleClickAction=null;
    contextualsActions=null;
    makeActions();
  }
  super.fillActionBars(actionBars);
  actionBars.setGlobalActionHandler(ICommonActionConstants.OPEN,doubleClickAction);
}","@Override public void fillActionBars(IActionBars actionBars){
  if (doubleClickAction != null && !doubleClickAction.getStructuredViewer().equals(getActionSite().getStructuredViewer())) {
    doubleClickAction.setStructuredViewer(getActionSite().getStructuredViewer());
    ICommonViewerWorkbenchSite navWorkSite=((ICommonViewerWorkbenchSite)getActionSite().getViewSite());
    if (navWorkSite != null && navWorkSite.getSite() != null) {
      for (      ITreeContextualAction action : contextualsActions) {
        action.setWorkbenchPart(navWorkSite.getSite().getPart());
      }
    }
  }
  super.fillActionBars(actionBars);
  actionBars.setGlobalActionHandler(ICommonActionConstants.OPEN,doubleClickAction);
}",0.6472727272727272
127070,"protected void addContextualActions(IMenuManager manager,IStructuredSelection sel,MenuManager[] menuManagerGroups,Set<String> processedGroupIds){
  for (  ITreeContextualAction action : contextualsActions) {
    checkAndAddActionInMenu(action,sel,manager,menuManagerGroups,processedGroupIds);
  }
}","protected void addContextualActions(IMenuManager manager,IStructuredSelection sel,MenuManager[] menuManagerGroups,Set<String> processedGroupIds){
  ICommonViewerWorkbenchSite navWorkSite=((ICommonViewerWorkbenchSite)getActionSite().getViewSite());
  for (  ITreeContextualAction action : contextualsActions) {
    if (navWorkSite != null && navWorkSite.getSite() != null) {
      action.setWorkbenchPart(navWorkSite.getSite().getPart());
    }
    checkAndAddActionInMenu(action,sel,manager,menuManagerGroups,processedGroupIds);
  }
}",0.7163461538461539
127071,"/** 
 * @author jyhu
 * @aim Get unique name of the graphica node from generating node.
 * @param node: Generated node
 * @return unique name of the graphica node.
 */
public static String getVirtualUniqueName(INode node){
  String uniqueName=node.getUniqueName();
  if (node.isVirtualGenerateNode()) {
    List<? extends INode> nodeList=node.getProcess().getGraphicalNodes();
    for (    INode graphicnode : nodeList) {
      if (graphicnode.isGeneratedAsVirtualComponent()) {
        String nodeUniqueName=graphicnode.getUniqueName();
        if (uniqueName.indexOf(nodeUniqueName + ""String_Node_Str"") == 0) {
          uniqueName=nodeUniqueName;
          break;
        }
      }
    }
  }
  return uniqueName;
}","/** 
 * @author jyhu
 * @aim Get unique name of the graphica node from generating node.
 * @param node: Generated node
 * @return unique name of the graphica node.
 */
public static String getVirtualUniqueName(INode node){
  return getVirtualNode(node).getUniqueName();
}",0.4939271255060729
127072,"private boolean isValidFile(String filePath){
  File file=new File(filePath);
  SAXReader saxReader=new SAXReader();
  URL url;
  try {
    url=file.toURI().toURL();
    Document doc=saxReader.read(url.getFile());
  }
 catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
catch (  DocumentException e) {
    return false;
  }
  return true;
}","public boolean isValidFile(String filePath){
  File file=new File(filePath);
  SAXReader saxReader=new SAXReader();
  URL url;
  try {
    url=file.toURI().toURL();
    Document doc=saxReader.read(url.getFile());
  }
 catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
catch (  DocumentException e) {
    return false;
  }
  return true;
}",0.9847856154910096
127073,"@Override protected boolean checkFieldsValue(){
  boolean editable=xmlXsdFilePath.getEditable();
  StringBuffer msgError=new StringBuffer();
  if (creation && !noFileButton.getSelection() && !useFileButton.getSelection()) {
    msgError.append(""String_Node_Str"");
  }
  if (creation && editable && xmlXsdFilePath.getText() == ""String_Node_Str"") {
    msgError.append(""String_Node_Str"");
  }
  if (!valid && creation) {
    String xmlXsdText=xmlXsdFilePath.getText();
    if (xmlXsdText != null && !""String_Node_Str"".equals(xmlXsdText)) {
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
        xmlXsdText=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePath.getText()));
      }
      msgError.append(xmlXsdText + ""String_Node_Str"");
    }
  }
  String text=outputFilePath.getText();
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
    text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
  }
  if (text != null && !text.equals(""String_Node_Str"") && !XmlUtil.isXMLFile(text)) {
    msgError.append(""String_Node_Str"");
  }
  if (""String_Node_Str"".equals(msgError.toString())) {
    updateStatus(IStatus.OK,null);
    return true;
  }
  updateStatus(IStatus.ERROR,msgError.toString());
  return false;
}","@Override protected boolean checkFieldsValue(){
  String xmlXsdFilePathText=xmlXsdFilePath.getText();
  String outputFilePathText=outputFilePath.getText();
  boolean editable=xmlXsdFilePath.getEditable();
  StringBuffer msgError=new StringBuffer();
  if (creation && !noFileButton.getSelection() && !useFileButton.getSelection()) {
    msgError.append(""String_Node_Str"");
  }
  if (creation && editable && xmlXsdFilePathText == ""String_Node_Str"") {
    msgError.append(""String_Node_Str"");
  }
  if (!valid && creation) {
    if (xmlXsdFilePathText != null && !""String_Node_Str"".equals(xmlXsdFilePathText)) {
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
        xmlXsdFilePathText=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePathText));
      }
      msgError.append(xmlXsdFilePathText + ""String_Node_Str"");
    }
  }
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
    outputFilePathText=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,outputFilePathText));
  }
  if (xmlXsdFilePathText != null && !xmlXsdFilePathText.equals(""String_Node_Str"")) {
    if (treePopulator.isValidFile(xmlXsdFilePathText)) {
      if (!XmlUtil.isXMLFile(xmlXsdFilePathText) && !XmlUtil.isXSDFile(xmlXsdFilePathText)) {
        msgError.append(""String_Node_Str"");
      }
    }
 else {
      msgError.append(""String_Node_Str"");
    }
  }
  if (outputFilePathText != null && !outputFilePathText.equals(""String_Node_Str"") && !XmlUtil.isXMLFile(outputFilePathText)) {
    msgError.append(""String_Node_Str"");
  }
  if (""String_Node_Str"".equals(msgError.toString())) {
    updateStatus(IStatus.OK,null);
    return true;
  }
  updateStatus(IStatus.ERROR,msgError.toString());
  return false;
}",0.7942890442890443
127074,"@Override protected void addFieldsListeners(){
  xmlXsdFilePath.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent event){
      if (xmlXsdFilePath.getResult() == null) {
        return;
      }
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        checkFieldsValue();
        if (!valid) {
          return;
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  xmlXsdFilePath.addFocusListener(new FocusListener(){
    @Override public void focusLost(    FocusEvent e){
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        getConnection().getRoot().clear();
        getConnection().getGroup().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(xmlXsdFilePath.getText()));
      StringBuilder fileContent=new StringBuilder();
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (!XmlUtil.isXMLFile(file.getPath())) {
        setFileContent(file);
      }
      String str;
      try {
        Charset guessCharset=CharsetToolkit.guessEncoding(file,4096);
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessCharset.displayName()));
        while ((str=in.readLine()) != null) {
          fileContent.append(str + ""String_Node_Str"");
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
        fileContentText.setText(new String(fileContent));
      }
 catch (      Exception e1) {
        String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + xmlXsdFilePath.getText().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        if (e1 instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e1 instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e1 instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        fileContentText.setText(msgError);
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception exception) {
          ExceptionHandler.process(exception);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !""String_Node_Str"".equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e1) {
            ExceptionHandler.process(e1);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        checkFieldsValue();
        if (!valid) {
          return;
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
      valid=treePopulator.populateTree(text,treeNode);
      checkFieldsValue();
      isModifing=true;
    }
    @Override public void focusGained(    FocusEvent e){
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
      }
 else {
        treePopulator.setLimit(Integer.valueOf(str));
      }
      valid=treePopulator.populateTree(xmlXsdFilePath.getText(),treeNode);
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
    }
  }
);
  outputFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
      checkFieldsValue();
    }
  }
);
}","@Override protected void addFieldsListeners(){
  xmlXsdFilePath.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent event){
      if (xmlXsdFilePath.getResult() == null) {
        return;
      }
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          if (!validXsd) {
            try {
              XSDSchema xsdSchema=updateXSDSchema(text);
              List<ATreeNode> list=updateRootNodes(xsdSchema,true);
              if (list.size() > 1) {
                RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
                if (dialog.open() == IDialogConstants.OK_ID) {
                  ATreeNode selectedNode=dialog.getSelectedNode();
                  valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
                }
 else {
                  return;
                }
              }
 else {
                valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
              }
            }
 catch (            Exception e) {
              ExceptionHandler.process(e);
            }
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        checkFieldsValue();
        if (!valid) {
          return;
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  xmlXsdFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent event){
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        getConnection().getRoot().clear();
        getConnection().getGroup().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(xmlXsdFilePath.getText()));
      StringBuilder fileContent=new StringBuilder();
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e) {
            ExceptionHandler.process(e);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (treePopulator.isValidFile(file.getPath())) {
        setFileContent(file);
      }
      String str;
      try {
        Charset guessCharset=CharsetToolkit.guessEncoding(file,4096);
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessCharset.displayName()));
        while ((str=in.readLine()) != null) {
          fileContent.append(str + ""String_Node_Str"");
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
        fileContentText.setText(new String(fileContent));
      }
 catch (      Exception e) {
        String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + xmlXsdFilePath.getText().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        if (e instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        fileContentText.setText(msgError);
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception exception) {
          ExceptionHandler.process(exception);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !""String_Node_Str"".equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      if (file.exists() && (xsdPathChanged || creation)) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
                validXsd=true;
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        checkFieldsValue();
        if (!valid) {
          return;
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
      checkFieldsValue();
      isModifing=true;
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
      }
 else {
        treePopulator.setLimit(Integer.valueOf(str));
      }
      valid=treePopulator.populateTree(xmlXsdFilePath.getText(),treeNode);
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
    }
  }
);
  outputFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
      checkFieldsValue();
    }
  }
);
}",0.978267102471472
127075,"public static String addQuotesWithSpaceFieldForSQLStringForce(String fieldName,String dbType,boolean simple){
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  final String quote=getQuoteByDBType(name);
  boolean isCheck=false;
  String preferenceValue=CorePlugin.getDefault().getPreferenceStore().getString(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  isCheck=Boolean.parseBoolean(preferenceValue);
  String temp=removeQuotes(fieldName);
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(temp);
  boolean isSqlKeyword=KeywordsValidator.isSqlKeyword(temp,name.getProduct());
  boolean isH2=EDatabaseTypeName.H2 == name;
  if ((!matcher.matches() || isSqlKeyword) && !isH2 && EDatabaseTypeName.SAS != name) {
    isCheck=true;
  }
  if (!isCheck && isPSQLSimilar(name) && !EDatabaseTypeName.MYSQL.equals(name)) {
    return fieldName;
  }
  String newFieldName=fieldName;
  newFieldName=TalendQuoteUtils.addQuotesForSQLString(newFieldName,quote,simple);
  return newFieldName;
}","public static String addQuotesWithSpaceFieldForSQLStringForce(String fieldName,String dbType,boolean simple){
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  final String quote=getQuoteByDBType(name);
  boolean isCheck=false;
  String preferenceValue=CorePlugin.getDefault().getPreferenceStore().getString(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  isCheck=Boolean.parseBoolean(preferenceValue);
  String temp=removeQuotes(fieldName);
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(temp);
  boolean isSqlKeyword=KeywordsValidator.isSqlKeyword(temp,name.getProduct());
  boolean isH2=EDatabaseTypeName.H2 == name;
  if (((!matcher.matches() || isSqlKeyword) && !isH2 && EDatabaseTypeName.SAS != name) || isIBMDB2ContainLowerCase(dbType,fieldName)) {
    isCheck=true;
  }
  if (!isCheck && isPSQLSimilar(name) && !EDatabaseTypeName.MYSQL.equals(name)) {
    return fieldName;
  }
  String newFieldName=fieldName;
  newFieldName=TalendQuoteUtils.addQuotesForSQLString(newFieldName,quote,simple);
  return newFieldName;
}",0.9773371104815864
127076,"@Override public void fillActionBars(IActionBars actionBars){
  if (doubleClickAction != null && !doubleClickAction.getStructuredViewer().equals(getActionSite().getStructuredViewer())) {
    doubleClickAction=null;
    contextualsActions=null;
    makeActions();
  }
  super.fillActionBars(actionBars);
  actionBars.setGlobalActionHandler(ICommonActionConstants.OPEN,doubleClickAction);
}","@Override public void fillActionBars(IActionBars actionBars){
  if (doubleClickAction != null && !doubleClickAction.getStructuredViewer().equals(getActionSite().getStructuredViewer())) {
    doubleClickAction.setStructuredViewer(getActionSite().getStructuredViewer());
    ICommonViewerWorkbenchSite navWorkSite=((ICommonViewerWorkbenchSite)getActionSite().getViewSite());
    if (navWorkSite != null && navWorkSite.getSite() != null) {
      for (      ITreeContextualAction action : contextualsActions) {
        action.setWorkbenchPart(navWorkSite.getSite().getPart());
      }
    }
  }
  super.fillActionBars(actionBars);
  actionBars.setGlobalActionHandler(ICommonActionConstants.OPEN,doubleClickAction);
}",0.6472727272727272
127077,"protected void addContextualActions(IMenuManager manager,IStructuredSelection sel,MenuManager[] menuManagerGroups,Set<String> processedGroupIds){
  for (  ITreeContextualAction action : contextualsActions) {
    checkAndAddActionInMenu(action,sel,manager,menuManagerGroups,processedGroupIds);
  }
}","protected void addContextualActions(IMenuManager manager,IStructuredSelection sel,MenuManager[] menuManagerGroups,Set<String> processedGroupIds){
  ICommonViewerWorkbenchSite navWorkSite=((ICommonViewerWorkbenchSite)getActionSite().getViewSite());
  for (  ITreeContextualAction action : contextualsActions) {
    if (navWorkSite != null && navWorkSite.getSite() != null) {
      action.setWorkbenchPart(navWorkSite.getSite().getPart());
    }
    checkAndAddActionInMenu(action,sel,manager,menuManagerGroups,processedGroupIds);
  }
}",0.7163461538461539
127078,"@Override public void syncBean(Item beanItem,boolean copyToTemp) throws SystemException {
  if (!isBeanUptodate(beanItem) || !getFile(beanItem).exists()) {
    doSyncBean(beanItem,copyToTemp);
    setBeanAsUptodate(beanItem);
  }
}","public void syncBean(Item beanItem,boolean copyToTemp,boolean forceUpdate) throws SystemException {
  if (beanItem != null && (forceUpdate || !isBeanUptodate(beanItem) || !getFile(beanItem).exists())) {
    doSyncBean(beanItem,copyToTemp);
    setBeanAsUptodate(beanItem);
  }
}",0.6679764243614931
127079,"@Override public void syncAllBeans() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    ITalendSynchronizer talendSynchronizer=codeGenService.createCamelBeanSynchronizer();
    if (talendSynchronizer != null) {
      talendSynchronizer.syncAllBeans();
    }
  }
}","@Override public void syncAllBeans() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    ITalendSynchronizer talendSynchronizer=codeGenService.createCamelBeanSynchronizer();
    if (talendSynchronizer != null) {
      talendSynchronizer.syncAllBeansForLogOn();
    }
  }
}",0.99163179916318
127080,"@Override public void syncAllRoutines() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    codeGenService.createRoutineSynchronizer().syncAllRoutinesForLogOn();
    codeGenService.createRoutineSynchronizer().syncAllPigudf();
  }
}","@Override public void syncAllRoutines() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    codeGenService.createRoutineSynchronizer().syncAllRoutinesForLogOn();
    codeGenService.createRoutineSynchronizer().syncAllPigudfForLogOn();
  }
}",0.991011235955056
127081,"protected void fillMenu(Menu menu){
  IRepositoryView repositoryView=RepositoryManagerHelper.findRepositoryView();
  if (repositoryView == null) {
    return;
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.PROCESS)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    addToMenu(menu,service.getCreateProcessAction(true),-1);
  }
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  for (  IConfigurationElement element : configurationElements) {
    try {
      AContextualAction action=(AContextualAction)element.createExecutableExtension(""String_Node_Str"");
      action.setToolbar(true);
      action.setWorkbenchPart(repositoryView);
      addToMenu(menu,action,-1);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.BUSINESS_PROCESS)) {
    IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
    addToMenu(menu,service.getCreateDiagramAction(true),-1);
    addSeparator(menu);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_CONNECTIONS)) {
    final CreateConnectionAction createConnectionAction=new CreateConnectionAction(true);
    createConnectionAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createConnectionAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
    final CreateFileDelimitedAction createFileDelimitedAction=new CreateFileDelimitedAction(true);
    createFileDelimitedAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileDelimitedAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
    final CreateFilePositionalAction createFilePositionalAction=new CreateFilePositionalAction(true);
    createFilePositionalAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFilePositionalAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
    final CreateFileRegexpAction createFileRegexpAction=new CreateFileRegexpAction(true);
    createFileRegexpAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileRegexpAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_XML)) {
    final CreateFileXmlAction createFileXmlAction=new CreateFileXmlAction(true);
    createFileXmlAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileXmlAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
    final CreateFileExcelAction createFileExcelAction=new CreateFileExcelAction(true);
    createFileExcelAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileExcelAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_LDIF)) {
    final CreateFileLdifAction createFileLdifAction=new CreateFileLdifAction(true);
    createFileLdifAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileLdifAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
    final CreateLDAPSchemaAction createLDAPSchemaAction=new CreateLDAPSchemaAction(true);
    createLDAPSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createLDAPSchemaAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
    final CreateSalesforceSchemaAction createSalesforceModulesAction=new CreateSalesforceSchemaAction(true);
    createSalesforceModulesAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createSalesforceModulesAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
    final CreateGenericSchemaAction createGenericSchemaAction=new CreateGenericSchemaAction(true);
    createGenericSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createGenericSchemaAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
    final CreateWSDLSchemaAction createWSDLSchemaAction=new CreateWSDLSchemaAction(true);
    createWSDLSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createWSDLSchemaAction,-1);
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.ROUTINES)) {
    IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
    addToMenu(menu,service.getCreateRoutineAction(repositoryView),-1);
  }
}","protected void fillMenu(Menu menu){
  IRepositoryView repositoryView=RepositoryManagerHelper.findRepositoryView();
  if (repositoryView == null) {
    return;
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.PROCESS)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    addToMenu(menu,service.getCreateProcessAction(true),-1);
  }
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  for (  IConfigurationElement element : configurationElements) {
    try {
      AContextualAction action=(AContextualAction)element.createExecutableExtension(""String_Node_Str"");
      action.setToolbar(true);
      action.setWorkbenchPart(repositoryView);
      addToMenu(menu,action,-1);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.BUSINESS_PROCESS)) {
    IRepositoryNode businessNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.BUSINESS_PROCESS);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag=false;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(businessNode.getLabel())) {
        flag=true;
      }
    }
    if (flag) {
      IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
      addToMenu(menu,service.getCreateDiagramAction(true),-1);
      addSeparator(menu);
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_CONNECTIONS)) {
    final CreateConnectionAction createConnectionAction=new CreateConnectionAction(true);
    createConnectionAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createConnectionAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
    final CreateFileDelimitedAction createFileDelimitedAction=new CreateFileDelimitedAction(true);
    createFileDelimitedAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileDelimitedAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
    final CreateFilePositionalAction createFilePositionalAction=new CreateFilePositionalAction(true);
    createFilePositionalAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFilePositionalAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
    final CreateFileRegexpAction createFileRegexpAction=new CreateFileRegexpAction(true);
    createFileRegexpAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileRegexpAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_XML)) {
    final CreateFileXmlAction createFileXmlAction=new CreateFileXmlAction(true);
    createFileXmlAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileXmlAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
    final CreateFileExcelAction createFileExcelAction=new CreateFileExcelAction(true);
    createFileExcelAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileExcelAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_LDIF)) {
    IRepositoryNode metadataNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA);
    IRepositoryNode ldifNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_LDIF);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag1=false;
    IRepositoryNode metadata=null;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(metadataNode.getLabel())) {
        flag1=true;
        metadata=node;
        break;
      }
    }
    if (flag1) {
      List<IRepositoryNode> metadataChild=metadata.getChildren();
      boolean flag2=false;
      for (      IRepositoryNode node : metadataChild) {
        if (node.getLabel().equals(ldifNode.getLabel())) {
          flag2=true;
        }
      }
      if (flag2) {
        final CreateFileLdifAction createFileLdifAction=new CreateFileLdifAction(true);
        createFileLdifAction.setWorkbenchPart(repositoryView);
        addToMenu(menu,createFileLdifAction,-1);
      }
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
    IRepositoryNode metadataNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA);
    IRepositoryNode ldifNode=repositoryView.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    List<IRepositoryNode> children=repositoryView.getRoot().getChildren();
    boolean flag1=false;
    IRepositoryNode metadata=null;
    for (    IRepositoryNode node : children) {
      if (node.getLabel().equals(metadataNode.getLabel())) {
        flag1=true;
        metadata=node;
        break;
      }
    }
    if (flag1) {
      List<IRepositoryNode> metadataChild=metadata.getChildren();
      boolean flag2=false;
      for (      IRepositoryNode node : metadataChild) {
        if (node.getLabel().equals(ldifNode.getLabel())) {
          flag2=true;
        }
      }
      if (flag2) {
        final CreateLDAPSchemaAction createLDAPSchemaAction=new CreateLDAPSchemaAction(true);
        createLDAPSchemaAction.setWorkbenchPart(repositoryView);
        addToMenu(menu,createLDAPSchemaAction,-1);
      }
    }
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
    final CreateSalesforceSchemaAction createSalesforceModulesAction=new CreateSalesforceSchemaAction(true);
    createSalesforceModulesAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createSalesforceModulesAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
    final CreateGenericSchemaAction createGenericSchemaAction=new CreateGenericSchemaAction(true);
    createGenericSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createGenericSchemaAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
    final CreateWSDLSchemaAction createWSDLSchemaAction=new CreateWSDLSchemaAction(true);
    createWSDLSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createWSDLSchemaAction,-1);
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.ROUTINES)) {
    IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
    addToMenu(menu,service.getCreateRoutineAction(repositoryView),-1);
  }
}",0.7983857407096014
127082,"@Override public void syncAllRoutines() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    codeGenService.createRoutineSynchronizer().syncAllRoutines();
    codeGenService.createRoutineSynchronizer().syncAllPigudf();
  }
}","@Override public void syncAllRoutines() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    codeGenService.createRoutineSynchronizer().syncAllRoutinesForLogOn();
    codeGenService.createRoutineSynchronizer().syncAllPigudf();
  }
}",0.9908466819221968
127083,"public void syncAllRoutines() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    codeGenService.createRoutineSynchronizer().syncAllRoutines();
  }
}","public void syncAllRoutines() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    codeGenService.createRoutineSynchronizer().syncAllRoutinesForLogOn();
  }
}",0.9889807162534436
127084,"private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    if (particleToTreeNode.containsKey(xsdElementDeclarationParticle)) {
      ATreeNode originalTreeNode=particleToTreeNode.get(xsdElementDeclarationParticle);
      ATreeNode partNode=new ATreeNode();
      partNode.setCurrentNamespace(originalTreeNode.getCurrentNamespace());
      partNode.setValue(originalTreeNode.getValue());
      partNode.setType(ATreeNode.ELEMENT_TYPE);
      partNode.setDataType(originalTreeNode.getDataType());
      partNode.addChild(originalTreeNode.getChildren());
      parentNode.addChild(partNode);
      return;
    }
    ATreeNode partNode=new ATreeNode();
    particleToTreeNode.put(xsdElementDeclarationParticle,partNode);
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (!XSDConstants.isSchemaForSchemaNamespace(xsdElementDeclarationParticle.getTypeDefinition().getTargetNamespace()) && xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}","private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    if (particleToTreeNode.containsKey(xsdElementDeclarationParticle)) {
      ATreeNode originalTreeNode=particleToTreeNode.get(xsdElementDeclarationParticle);
      ATreeNode partNode=new ATreeNode();
      partNode.setCurrentNamespace(originalTreeNode.getCurrentNamespace());
      partNode.setValue(originalTreeNode.getValue());
      partNode.setType(ATreeNode.ELEMENT_TYPE);
      partNode.setDataType(originalTreeNode.getDataType());
      partNode.addChild(originalTreeNode.getChildren());
      parentNode.addChild(partNode);
      return;
    }
    ATreeNode partNode=new ATreeNode();
    particleToTreeNode.put(xsdElementDeclarationParticle,partNode);
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          boolean namespaceFoundInParent=false;
          ATreeNode node=parentNode;
          do {
            for (            Object child : node.getChildren()) {
              if (child instanceof ATreeNode) {
                ATreeNode childNode=(ATreeNode)child;
                if (childNode.getType() == ATreeNode.NAMESPACE_TYPE && namespace.equals(childNode.getValue())) {
                  namespaceFoundInParent=true;
                  break;
                }
              }
            }
            node=node.getParent();
          }
 while (node != null && !namespaceFoundInParent);
          if (!namespaceFoundInParent) {
            ATreeNode namespaceNode=new ATreeNode();
            namespaceNode.setDataType(""String_Node_Str"");
            namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
            namespaceNode.setValue(namespace);
            partNode.addChild(namespaceNode);
          }
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (!XSDConstants.isSchemaForSchemaNamespace(xsdElementDeclarationParticle.getTypeDefinition().getTargetNamespace()) && xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}",0.92670116629335
127085,"/** 
 * bug 12582 by ggu.
 */
@SuppressWarnings(""String_Node_Str"") public Map<String,List<URI>> getUserRoutineModules(){
  Map<String,List<URI>> modules=new HashMap<String,List<URI>>();
  try {
    for (    IRepositoryViewObject ro : getRoutines()) {
      Item item=ro.getProperty().getItem();
      if (item instanceof RoutineItem) {
        EList imports=((RoutineItem)item).getImports();
        for (        Object o : imports) {
          if (o instanceof IMPORTType) {
            String urlPath=((IMPORTType)o).getUrlPath();
            if (urlPath != null && !""String_Node_Str"".equals(urlPath)) {
              File file=new File(urlPath);
              if (file.exists()) {
                URI uri=file.toURI();
                List<URI> list=modules.get(ro.getLabel());
                if (list == null) {
                  list=new ArrayList<URI>();
                  modules.put(ro.getLabel(),list);
                }
                if (!list.contains(uri)) {
                  list.add(uri);
                }
              }
            }
          }
        }
      }
    }
  }
 catch (  SystemException e) {
    ExceptionHandler.process(e);
  }
  return modules;
}","/** 
 * bug 12582 by ggu.
 */
@Override @SuppressWarnings(""String_Node_Str"") public Map<String,List<URI>> getUserRoutineModules(){
  Map<String,List<URI>> modules=new HashMap<String,List<URI>>();
  try {
    for (    IRepositoryViewObject ro : getRoutines()) {
      Item item=ro.getProperty().getItem();
      if (item instanceof RoutineItem) {
        EList imports=((RoutineItem)item).getImports();
        for (        Object o : imports) {
          if (o instanceof IMPORTType) {
            String urlPath=((IMPORTType)o).getUrlPath();
            if (urlPath != null && !""String_Node_Str"".equals(urlPath)) {
              File file=new File(urlPath);
              if (file.exists()) {
                URI uri=file.toURI();
                List<URI> list=modules.get(ro.getLabel());
                if (list == null) {
                  list=new ArrayList<URI>();
                  modules.put(ro.getLabel(),list);
                }
                if (!list.contains(uri)) {
                  list.add(uri);
                }
              }
            }
          }
        }
      }
    }
  }
 catch (  SystemException e) {
    ExceptionHandler.process(e);
  }
  return modules;
}",0.995787700084246
127086,public abstract void renameRoutineClass(RoutineItem routineItem);,@Override public abstract void renameRoutineClass(RoutineItem routineItem);,0.9285714285714286
127087,"public void syncBean(Item beanItem,boolean copyToTemp) throws SystemException {
  if (!isBeanUptodate(beanItem) || !getFile(beanItem).exists()) {
    doSyncBean(beanItem,copyToTemp);
    setBeanAsUptodate(beanItem);
  }
}","@Override public void syncBean(Item beanItem,boolean copyToTemp) throws SystemException {
  if (!isBeanUptodate(beanItem) || !getFile(beanItem).exists()) {
    doSyncBean(beanItem,copyToTemp);
    setBeanAsUptodate(beanItem);
  }
}",0.9778761061946902
127088,public abstract void deleteRoutinefile(IRepositoryViewObject objToDelete);,@Override public abstract void deleteRoutinefile(IRepositoryViewObject objToDelete);,0.9367088607594936
127089,"public void forceSyncRoutine(RoutineItem routineItem){
  id2date.remove(routineItem.getProperty().getId());
  try {
    getFile(routineItem).delete(true,new NullProgressMonitor());
  }
 catch (  Exception e) {
  }
}","@Override public void forceSyncRoutine(RoutineItem routineItem){
  id2date.remove(routineItem.getProperty().getId());
  try {
    getFile(routineItem).delete(true,new NullProgressMonitor());
  }
 catch (  Exception e) {
  }
}",0.9772727272727272
127090,"/** 
 * DOC Administrator Comment method ""renameBeanClass"".
 * @param beanItem
 */
public abstract void renameBeanClass(Item beanItem);","/** 
 * DOC Administrator Comment method ""renameBeanClass"".
 * @param beanItem
 */
@Override public abstract void renameBeanClass(Item beanItem);",0.9642857142857144
127091,"public void syncAllRoutines() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    codeGenService.createRoutineSynchronizer().syncAllRoutines();
  }
}","public void syncAllRoutines() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    codeGenService.createRoutineSynchronizer().syncAllRoutinesForLogOn();
  }
}",0.9889807162534436
127092,"/** 
 * DOC ocarbone Comment method ""performCancel"". Unlock the IRepositoryObject before the close of the wizard.
 * @param IRepositoryObject
 */
public boolean performCancel(){
  if (repositoryObject != null)   repositoryObject.getProperty().eResource().unload();
  closeLockStrategy();
  return true;
}","/** 
 * DOC ocarbone Comment method ""performCancel"". Unlock the IRepositoryObject before the close of the wizard.
 * @param IRepositoryObject
 */
public boolean performCancel(){
  if (repositoryObject != null && repositoryObject.getProperty().eResource() != null)   repositoryObject.getProperty().eResource().unload();
  closeLockStrategy();
  return true;
}",0.918429003021148
127093,"@Override protected void addFieldsListeners(){
  xmlXsdFilePath.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent event){
      if (xmlXsdFilePath.getResult() == null) {
        return;
      }
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        checkFieldsValue();
        if (!valid) {
          return;
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  xmlXsdFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent event){
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        getConnection().getRoot().clear();
        getConnection().getGroup().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(xmlXsdFilePath.getText()));
      StringBuilder fileContent=new StringBuilder();
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e) {
            ExceptionHandler.process(e);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (!XmlUtil.isXMLFile(file.getPath())) {
        setFileContent(file);
      }
      String str;
      try {
        Charset guessCharset=CharsetToolkit.guessEncoding(file,4096);
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessCharset.displayName()));
        while ((str=in.readLine()) != null) {
          fileContent.append(str + ""String_Node_Str"");
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
        fileContentText.setText(new String(fileContent));
      }
 catch (      Exception e) {
        String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + xmlXsdFilePath.getText().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        if (e instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        fileContentText.setText(msgError);
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception exception) {
          ExceptionHandler.process(exception);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !""String_Node_Str"".equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      valid=treePopulator.populateTree(text,treeNode);
      checkFieldsValue();
      isModifing=true;
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
      }
 else {
        treePopulator.setLimit(Integer.valueOf(str));
      }
      valid=treePopulator.populateTree(xmlXsdFilePath.getText(),treeNode);
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
    }
  }
);
  outputFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
      checkFieldsValue();
    }
  }
);
}","@Override protected void addFieldsListeners(){
  xmlXsdFilePath.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent event){
      if (xmlXsdFilePath.getResult() == null) {
        return;
      }
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        checkFieldsValue();
        if (!valid) {
          return;
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  xmlXsdFilePath.addFocusListener(new FocusListener(){
    @Override public void focusLost(    FocusEvent e){
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        getConnection().getRoot().clear();
        getConnection().getGroup().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(xmlXsdFilePath.getText()));
      StringBuilder fileContent=new StringBuilder();
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (!XmlUtil.isXMLFile(file.getPath())) {
        setFileContent(file);
      }
      String str;
      try {
        Charset guessCharset=CharsetToolkit.guessEncoding(file,4096);
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessCharset.displayName()));
        while ((str=in.readLine()) != null) {
          fileContent.append(str + ""String_Node_Str"");
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
        fileContentText.setText(new String(fileContent));
      }
 catch (      Exception e1) {
        String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + xmlXsdFilePath.getText().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        if (e1 instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e1 instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e1 instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        fileContentText.setText(msgError);
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception exception) {
          ExceptionHandler.process(exception);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !""String_Node_Str"".equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e1) {
            ExceptionHandler.process(e1);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        checkFieldsValue();
        if (!valid) {
          return;
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
      valid=treePopulator.populateTree(text,treeNode);
      checkFieldsValue();
      isModifing=true;
    }
    @Override public void focusGained(    FocusEvent e){
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
      }
 else {
        treePopulator.setLimit(Integer.valueOf(str));
      }
      valid=treePopulator.populateTree(xmlXsdFilePath.getText(),treeNode);
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
    }
  }
);
  outputFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
      checkFieldsValue();
    }
  }
);
}",0.9189155808065214
127094,"private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (!XSDConstants.isSchemaForSchemaNamespace(xsdElementDeclarationParticle.getTypeDefinition().getTargetNamespace()) && xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}","private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          boolean namespaceFoundInParent=false;
          ATreeNode node=parentNode;
          do {
            for (            Object child : node.getChildren()) {
              if (child instanceof ATreeNode) {
                ATreeNode childNode=(ATreeNode)child;
                if (childNode.getType() == ATreeNode.NAMESPACE_TYPE && namespace.equals(childNode.getValue())) {
                  namespaceFoundInParent=true;
                  break;
                }
              }
            }
            node=node.getParent();
          }
 while (node != null && !namespaceFoundInParent);
          if (!namespaceFoundInParent) {
            ATreeNode namespaceNode=new ATreeNode();
            namespaceNode.setDataType(""String_Node_Str"");
            namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
            namespaceNode.setValue(namespace);
            partNode.addChild(namespaceNode);
          }
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (!XSDConstants.isSchemaForSchemaNamespace(xsdElementDeclarationParticle.getTypeDefinition().getTargetNamespace()) && xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}",0.91821211862234
127095,"/** 
 * DOC ocarbone Comment method ""performCancel"". Unlock the IRepositoryObject before the close of the wizard.
 * @param IRepositoryObject
 */
public boolean performCancel(){
  if (repositoryObject != null)   repositoryObject.getProperty().eResource().unload();
  closeLockStrategy();
  return true;
}","/** 
 * DOC ocarbone Comment method ""performCancel"". Unlock the IRepositoryObject before the close of the wizard.
 * @param IRepositoryObject
 */
@Override public boolean performCancel(){
  if (repositoryObject != null && repositoryObject.getProperty().eResource() != null) {
    repositoryObject.getProperty().eResource().unload();
  }
  closeLockStrategy();
  return true;
}",0.8852941176470588
127096,"@Override public void syncBean(Item beanItem,boolean copyToTemp) throws SystemException {
  if (!isBeanUptodate(beanItem) || !getFile(beanItem).exists()) {
    doSyncBean(beanItem,copyToTemp);
    setBeanAsUptodate(beanItem);
  }
}","public void syncBean(Item beanItem,boolean copyToTemp,boolean forceUpdate) throws SystemException {
  if (beanItem != null && (forceUpdate || !isBeanUptodate(beanItem) || !getFile(beanItem).exists())) {
    doSyncBean(beanItem,copyToTemp);
    setBeanAsUptodate(beanItem);
  }
}",0.6679764243614931
127097,"@Override public void syncAllBeans() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    ITalendSynchronizer talendSynchronizer=codeGenService.createCamelBeanSynchronizer();
    if (talendSynchronizer != null) {
      talendSynchronizer.syncAllBeans();
    }
  }
}","@Override public void syncAllBeans() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    ITalendSynchronizer talendSynchronizer=codeGenService.createCamelBeanSynchronizer();
    if (talendSynchronizer != null) {
      talendSynchronizer.syncAllBeansForLogOn();
    }
  }
}",0.99163179916318
127098,"@Override public void syncAllRoutines() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    codeGenService.createRoutineSynchronizer().syncAllRoutinesForLogOn();
    codeGenService.createRoutineSynchronizer().syncAllPigudf();
  }
}","@Override public void syncAllRoutines() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    codeGenService.createRoutineSynchronizer().syncAllRoutinesForLogOn();
    codeGenService.createRoutineSynchronizer().syncAllPigudfForLogOn();
  }
}",0.991011235955056
127099,"private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    if (particleToTreeNode.containsKey(xsdElementDeclarationParticle)) {
      ATreeNode originalTreeNode=particleToTreeNode.get(xsdElementDeclarationParticle);
      ATreeNode partNode=new ATreeNode();
      partNode.setCurrentNamespace(originalTreeNode.getCurrentNamespace());
      partNode.setValue(originalTreeNode.getValue());
      partNode.setType(ATreeNode.ELEMENT_TYPE);
      partNode.setDataType(originalTreeNode.getDataType());
      partNode.addChild(originalTreeNode.getChildren());
      parentNode.addChild(partNode);
      return;
    }
    ATreeNode partNode=new ATreeNode();
    particleToTreeNode.put(xsdElementDeclarationParticle,partNode);
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (!XSDConstants.isSchemaForSchemaNamespace(xsdElementDeclarationParticle.getTypeDefinition().getTargetNamespace()) && xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}","private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    if (particleToTreeNode.containsKey(xsdElementDeclarationParticle)) {
      ATreeNode originalTreeNode=particleToTreeNode.get(xsdElementDeclarationParticle);
      ATreeNode partNode=new ATreeNode();
      partNode.setCurrentNamespace(originalTreeNode.getCurrentNamespace());
      partNode.setValue(originalTreeNode.getValue());
      partNode.setType(ATreeNode.ELEMENT_TYPE);
      partNode.setDataType(originalTreeNode.getDataType());
      partNode.addChild(originalTreeNode.getChildren());
      parentNode.addChild(partNode);
      return;
    }
    ATreeNode partNode=new ATreeNode();
    particleToTreeNode.put(xsdElementDeclarationParticle,partNode);
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          boolean namespaceFoundInParent=false;
          ATreeNode node=parentNode;
          do {
            for (            Object child : node.getChildren()) {
              if (child instanceof ATreeNode) {
                ATreeNode childNode=(ATreeNode)child;
                if (childNode.getType() == ATreeNode.NAMESPACE_TYPE && namespace.equals(childNode.getValue())) {
                  namespaceFoundInParent=true;
                  break;
                }
              }
            }
            node=node.getParent();
          }
 while (node != null && !namespaceFoundInParent);
          if (!namespaceFoundInParent) {
            ATreeNode namespaceNode=new ATreeNode();
            namespaceNode.setDataType(""String_Node_Str"");
            namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
            namespaceNode.setValue(namespace);
            partNode.addChild(namespaceNode);
          }
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (!XSDConstants.isSchemaForSchemaNamespace(xsdElementDeclarationParticle.getTypeDefinition().getTargetNamespace()) && xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}",0.92670116629335
127100,"/** 
 * DOC ocarbone Comment method ""performCancel"". Unlock the IRepositoryObject before the close of the wizard.
 * @param IRepositoryObject
 */
public boolean performCancel(){
  if (repositoryObject != null)   repositoryObject.getProperty().eResource().unload();
  closeLockStrategy();
  return true;
}","/** 
 * DOC ocarbone Comment method ""performCancel"". Unlock the IRepositoryObject before the close of the wizard.
 * @param IRepositoryObject
 */
@Override public boolean performCancel(){
  if (repositoryObject != null && repositoryObject.getProperty().eResource() != null) {
    repositoryObject.getProperty().eResource().unload();
  }
  closeLockStrategy();
  return true;
}",0.8852941176470588
127101,"@Override protected void addFieldsListeners(){
  xmlXsdFilePath.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent event){
      if (xmlXsdFilePath.getResult() == null) {
        return;
      }
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        checkFieldsValue();
        if (!valid) {
          return;
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  xmlXsdFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent event){
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        getConnection().getRoot().clear();
        getConnection().getGroup().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(xmlXsdFilePath.getText()));
      StringBuilder fileContent=new StringBuilder();
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e) {
            ExceptionHandler.process(e);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (!XmlUtil.isXMLFile(file.getPath())) {
        setFileContent(file);
      }
      String str;
      try {
        Charset guessCharset=CharsetToolkit.guessEncoding(file,4096);
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessCharset.displayName()));
        while ((str=in.readLine()) != null) {
          fileContent.append(str + ""String_Node_Str"");
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
        fileContentText.setText(new String(fileContent));
      }
 catch (      Exception e) {
        String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + xmlXsdFilePath.getText().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        if (e instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        fileContentText.setText(msgError);
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception exception) {
          ExceptionHandler.process(exception);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !""String_Node_Str"".equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      valid=treePopulator.populateTree(text,treeNode);
      checkFieldsValue();
      isModifing=true;
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
      }
 else {
        treePopulator.setLimit(Integer.valueOf(str));
      }
      valid=treePopulator.populateTree(xmlXsdFilePath.getText(),treeNode);
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
    }
  }
);
  outputFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
      checkFieldsValue();
    }
  }
);
}","@Override protected void addFieldsListeners(){
  xmlXsdFilePath.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent event){
      if (xmlXsdFilePath.getResult() == null) {
        return;
      }
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        checkFieldsValue();
        if (!valid) {
          return;
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  xmlXsdFilePath.addFocusListener(new FocusListener(){
    @Override public void focusLost(    FocusEvent e){
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        getConnection().getRoot().clear();
        getConnection().getGroup().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(xmlXsdFilePath.getText()));
      StringBuilder fileContent=new StringBuilder();
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (!XmlUtil.isXMLFile(file.getPath())) {
        setFileContent(file);
      }
      String str;
      try {
        Charset guessCharset=CharsetToolkit.guessEncoding(file,4096);
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessCharset.displayName()));
        while ((str=in.readLine()) != null) {
          fileContent.append(str + ""String_Node_Str"");
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
        fileContentText.setText(new String(fileContent));
      }
 catch (      Exception e1) {
        String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + xmlXsdFilePath.getText().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        if (e1 instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e1 instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e1 instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        fileContentText.setText(msgError);
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception exception) {
          ExceptionHandler.process(exception);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !""String_Node_Str"".equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e1) {
            ExceptionHandler.process(e1);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        checkFieldsValue();
        if (!valid) {
          return;
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
      valid=treePopulator.populateTree(text,treeNode);
      checkFieldsValue();
      isModifing=true;
    }
    @Override public void focusGained(    FocusEvent e){
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
      }
 else {
        treePopulator.setLimit(Integer.valueOf(str));
      }
      valid=treePopulator.populateTree(xmlXsdFilePath.getText(),treeNode);
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
    }
  }
);
  outputFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
      checkFieldsValue();
    }
  }
);
}",0.9189155808065214
127102,"@Override protected void addFieldsListeners(){
  xmlXsdFilePath.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent event){
      if (xmlXsdFilePath.getResult() == null) {
        return;
      }
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        checkFieldsValue();
        if (!valid) {
          return;
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  xmlXsdFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent event){
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        getConnection().getRoot().clear();
        getConnection().getGroup().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(xmlXsdFilePath.getText()));
      StringBuilder fileContent=new StringBuilder();
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e) {
            ExceptionHandler.process(e);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (!XmlUtil.isXMLFile(file.getPath())) {
        setFileContent(file);
      }
      String str;
      try {
        Charset guessCharset=CharsetToolkit.guessEncoding(file,4096);
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessCharset.displayName()));
        while ((str=in.readLine()) != null) {
          fileContent.append(str + ""String_Node_Str"");
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
        fileContentText.setText(new String(fileContent));
      }
 catch (      Exception e) {
        String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + xmlXsdFilePath.getText().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        if (e instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        fileContentText.setText(msgError);
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception exception) {
          ExceptionHandler.process(exception);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !""String_Node_Str"".equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      valid=treePopulator.populateTree(text,treeNode);
      checkFieldsValue();
      isModifing=true;
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
      }
 else {
        treePopulator.setLimit(Integer.valueOf(str));
      }
      valid=treePopulator.populateTree(xmlXsdFilePath.getText(),treeNode);
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
    }
  }
);
  outputFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
      checkFieldsValue();
    }
  }
);
}","@Override protected void addFieldsListeners(){
  xmlXsdFilePath.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent event){
      if (xmlXsdFilePath.getResult() == null) {
        return;
      }
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        checkFieldsValue();
        if (!valid) {
          return;
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  xmlXsdFilePath.addFocusListener(new FocusListener(){
    @Override public void focusLost(    FocusEvent e){
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        getConnection().getRoot().clear();
        getConnection().getGroup().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(xmlXsdFilePath.getText()));
      StringBuilder fileContent=new StringBuilder();
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (!XmlUtil.isXMLFile(file.getPath())) {
        setFileContent(file);
      }
      String str;
      try {
        Charset guessCharset=CharsetToolkit.guessEncoding(file,4096);
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessCharset.displayName()));
        while ((str=in.readLine()) != null) {
          fileContent.append(str + ""String_Node_Str"");
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
        fileContentText.setText(new String(fileContent));
      }
 catch (      Exception e1) {
        String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + xmlXsdFilePath.getText().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        if (e1 instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e1 instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e1 instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        fileContentText.setText(msgError);
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception exception) {
          ExceptionHandler.process(exception);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !""String_Node_Str"".equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e1) {
            ExceptionHandler.process(e1);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        checkFieldsValue();
        if (!valid) {
          return;
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
      valid=treePopulator.populateTree(text,treeNode);
      checkFieldsValue();
      isModifing=true;
    }
    @Override public void focusGained(    FocusEvent e){
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
      }
 else {
        treePopulator.setLimit(Integer.valueOf(str));
      }
      valid=treePopulator.populateTree(xmlXsdFilePath.getText(),treeNode);
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
    }
  }
);
  outputFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
      checkFieldsValue();
    }
  }
);
}",0.9189155808065214
127103,"private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    if (particleToTreeNode.containsKey(xsdElementDeclarationParticle)) {
      ATreeNode originalTreeNode=particleToTreeNode.get(xsdElementDeclarationParticle);
      ATreeNode partNode=new ATreeNode();
      partNode.setCurrentNamespace(originalTreeNode.getCurrentNamespace());
      partNode.setValue(originalTreeNode.getValue());
      partNode.setType(ATreeNode.ELEMENT_TYPE);
      partNode.setDataType(originalTreeNode.getDataType());
      partNode.addChild(originalTreeNode.getChildren());
      parentNode.addChild(partNode);
      return;
    }
    ATreeNode partNode=new ATreeNode();
    particleToTreeNode.put(xsdElementDeclarationParticle,partNode);
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (!XSDConstants.isSchemaForSchemaNamespace(xsdElementDeclarationParticle.getTypeDefinition().getTargetNamespace()) && xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}","private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    if (particleToTreeNode.containsKey(xsdElementDeclarationParticle)) {
      ATreeNode originalTreeNode=particleToTreeNode.get(xsdElementDeclarationParticle);
      ATreeNode partNode=new ATreeNode();
      partNode.setCurrentNamespace(originalTreeNode.getCurrentNamespace());
      partNode.setValue(originalTreeNode.getValue());
      partNode.setType(ATreeNode.ELEMENT_TYPE);
      partNode.setDataType(originalTreeNode.getDataType());
      partNode.addChild(originalTreeNode.getChildren());
      parentNode.addChild(partNode);
      return;
    }
    ATreeNode partNode=new ATreeNode();
    particleToTreeNode.put(xsdElementDeclarationParticle,partNode);
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          boolean namespaceFoundInParent=false;
          ATreeNode node=parentNode;
          do {
            for (            Object child : node.getChildren()) {
              if (child instanceof ATreeNode) {
                ATreeNode childNode=(ATreeNode)child;
                if (childNode.getType() == ATreeNode.NAMESPACE_TYPE && namespace.equals(childNode.getValue())) {
                  namespaceFoundInParent=true;
                  break;
                }
              }
            }
            node=node.getParent();
          }
 while (node != null && !namespaceFoundInParent);
          if (!namespaceFoundInParent) {
            ATreeNode namespaceNode=new ATreeNode();
            namespaceNode.setDataType(""String_Node_Str"");
            namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
            namespaceNode.setValue(namespace);
            partNode.addChild(namespaceNode);
          }
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (!XSDConstants.isSchemaForSchemaNamespace(xsdElementDeclarationParticle.getTypeDefinition().getTargetNamespace()) && xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}",0.92670116629335
127104,"@Override public void syncAllRoutines() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    codeGenService.createRoutineSynchronizer().syncAllRoutines();
    codeGenService.createRoutineSynchronizer().syncAllPigudf();
  }
}","@Override public void syncAllRoutines() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    codeGenService.createRoutineSynchronizer().syncAllRoutinesForLogOn();
    codeGenService.createRoutineSynchronizer().syncAllPigudf();
  }
}",0.9908466819221968
127105,"@Override public void syncAllRoutines() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    codeGenService.createRoutineSynchronizer().syncAllRoutines();
    codeGenService.createRoutineSynchronizer().syncAllPigudf();
  }
}","@Override public void syncAllRoutines() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    codeGenService.createRoutineSynchronizer().syncAllRoutinesForLogOn();
    codeGenService.createRoutineSynchronizer().syncAllPigudf();
  }
}",0.9908466819221968
127106,"private boolean deleteElements(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final RepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  boolean needReturn=false;
  final boolean[] enableDeleting=new boolean[1];
  enableDeleting[0]=true;
  final IRepositoryViewObject objToDelete=currentJobNode.getObject();
  final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkContext.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
        int returnCode=dialog.open();
switch (returnCode) {
case Window.OK:
          enableDeleting[0]=true;
        break;
case Window.CANCEL:
      enableDeleting[0]=false;
    break;
}
}
}
);
}
if (!enableDeleting[0]) {
return true;
}
AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
ERepositoryObjectType nodeType=(ERepositoryObjectType)currentJobNode.getProperties(EProperties.CONTENT_TYPE);
if (nodeType != null && nodeType.isSubItem()) {
Display.getDefault().syncExec(new Runnable(){
@Override public void run(){
final DeleteTableAction deleteTableAction=new DeleteTableAction();
deleteTableAction.setWorkbenchPart(getWorkbenchPart());
deleteTableAction.run();
}
}
);
needReturn=true;
}
 else {
if (factory.getStatus(objToDelete) == ERepositoryStatus.DELETED) {
if (!confirmFromDialog && resChangeService != null) {
List<IRepositoryNode> dependentNodes=resChangeService.getDependentNodes(currentJobNode);
if (dependentNodes != null && !dependentNodes.isEmpty()) {
  resChangeService.openDependcesDialog(dependentNodes);
  return true;
}
}
if (confirm == null) {
if (confirmFromDialog) {
  confirm=confirmFromDialog;
}
 else {
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      String title=Messages.getString(""String_Node_Str"");
      String message=currentJobNode.getProperties(EProperties.LABEL) + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
      confirmFromDialog=MessageDialog.openQuestion(new Shell(),title,message);
    }
  }
);
  confirm=confirmFromDialog;
}
}
if (confirm) {
deleteActionCache.closeOpenedEditor(objToDelete);
if (currentJobNode.getType() == ENodeType.SIMPLE_FOLDER) {
  boolean success=true;
  for (  IRepositoryNode curNode : currentJobNode.getChildren()) {
    try {
      deleteElements(factory,deleteActionCache,(RepositoryNode)curNode,confirm);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (success) {
    if (currentJobNode.getObject() != null && currentJobNode.getObject().getProperty() != null && currentJobNode.getObject().getProperty().getItem() != null) {
      Item fitem=currentJobNode.getObject().getProperty().getItem();
      if ((fitem instanceof FolderItem) && (((FolderItem)fitem).getType().getValue() == FolderType.FOLDER)) {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentJobNode.getObject().getProperty().getItem()));
      }
 else {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
      }
    }
 else {
      factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
    }
  }
}
 else {
  if (resChangeService != null && objToDelete != null && objToDelete.getProperty() != null) {
    Item item=objToDelete.getProperty().getItem();
    if (item != null) {
      resChangeService.removeAllDependecies(item);
    }
  }
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    handler.deleteNode(objToDelete);
  }
  if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
    forceBuild=true;
  }
  if (!forceBuild) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
      ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
      if (nodeType == camelService.getBeansType()) {
        forceBuild=true;
      }
    }
  }
  factory.deleteObjectPhysical(objToDelete);
  ExpressionPersistance.getInstance().jobDeleted(objToDelete.getLabel());
}
}
}
 else {
factory.deleteObjectLogical(objToDelete);
updateRelatedViews();
removeConnFromSQLExplorer(currentJobNode);
}
}
return needReturn;
}","private boolean deleteElements(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final RepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  boolean needReturn=false;
  final boolean[] enableDeleting=new boolean[1];
  enableDeleting[0]=true;
  final IRepositoryViewObject objToDelete=currentJobNode.getObject();
  final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkContext.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
        int returnCode=dialog.open();
switch (returnCode) {
case Window.OK:
          enableDeleting[0]=true;
        break;
case Window.CANCEL:
      enableDeleting[0]=false;
    break;
}
}
}
);
}
if (!enableDeleting[0]) {
return true;
}
AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
ERepositoryObjectType nodeType=(ERepositoryObjectType)currentJobNode.getProperties(EProperties.CONTENT_TYPE);
if (nodeType != null && nodeType.isSubItem()) {
Display.getDefault().syncExec(new Runnable(){
@Override public void run(){
final DeleteTableAction deleteTableAction=new DeleteTableAction();
deleteTableAction.setWorkbenchPart(getWorkbenchPart());
deleteTableAction.run();
}
}
);
needReturn=true;
}
 else {
if (factory.getStatus(objToDelete) == ERepositoryStatus.DELETED) {
if (!confirmForDQ && resChangeService != null) {
List<IRepositoryNode> dependentNodes=resChangeService.getDependentNodes(currentJobNode);
if (dependentNodes != null && !dependentNodes.isEmpty()) {
  resChangeService.openDependcesDialog(dependentNodes);
  return true;
}
}
if (confirm == null) {
if (confirmForDQ) {
  confirm=confirmForDQ;
}
 else {
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      String title=Messages.getString(""String_Node_Str"");
      String message=currentJobNode.getProperties(EProperties.LABEL) + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
      confirmFromDialog=MessageDialog.openQuestion(new Shell(),title,message);
    }
  }
);
  confirm=confirmFromDialog;
}
}
if (confirm) {
deleteActionCache.closeOpenedEditor(objToDelete);
if (currentJobNode.getType() == ENodeType.SIMPLE_FOLDER) {
  boolean success=true;
  for (  IRepositoryNode curNode : currentJobNode.getChildren()) {
    try {
      deleteElements(factory,deleteActionCache,(RepositoryNode)curNode,confirm);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (success) {
    if (currentJobNode.getObject() != null && currentJobNode.getObject().getProperty() != null && currentJobNode.getObject().getProperty().getItem() != null) {
      Item fitem=currentJobNode.getObject().getProperty().getItem();
      if ((fitem instanceof FolderItem) && (((FolderItem)fitem).getType().getValue() == FolderType.FOLDER)) {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentJobNode.getObject().getProperty().getItem()));
      }
 else {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
      }
    }
 else {
      factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
    }
  }
}
 else {
  if (resChangeService != null && objToDelete != null && objToDelete.getProperty() != null) {
    Item item=objToDelete.getProperty().getItem();
    if (item != null) {
      resChangeService.removeAllDependecies(item);
    }
  }
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    handler.deleteNode(objToDelete);
  }
  if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
    forceBuild=true;
  }
  if (!forceBuild) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
      ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
      if (nodeType == camelService.getBeansType()) {
        forceBuild=true;
      }
    }
  }
  factory.deleteObjectPhysical(objToDelete);
  ExpressionPersistance.getInstance().jobDeleted(objToDelete.getLabel());
}
}
}
 else {
factory.deleteObjectLogical(objToDelete);
updateRelatedViews();
removeConnFromSQLExplorer(currentJobNode);
}
}
return needReturn;
}",0.9958873774122112
127107,"public static String getBundlePath(String bundleName){
  Bundle refBundle=Platform.getBundle(bundleName);
  if (refBundle != null) {
    String bundlePath=refBundle.getLocation();
    String prefix=""String_Node_Str"";
    int prefixPos=bundlePath.lastIndexOf(prefix);
    if (prefixPos >= 0) {
      bundlePath=bundlePath.substring(prefixPos + prefix.length(),bundlePath.length() - 1);
      return bundlePath;
    }
  }
  return ""String_Node_Str"";
}","public static String getBundlePath(String bundleName){
  String bundlePath=""String_Node_Str"";
  Bundle refBundle=Platform.getBundle(bundleName);
  if (refBundle != null) {
    try {
      URL resource=refBundle.getEntry(""String_Node_Str"");
      bundlePath=FileLocator.toFileURL(resource).getPath();
      bundlePath=bundlePath.substring(0,bundlePath.length() - 1);
    }
 catch (    IOException e) {
      log.error(e);
    }
  }
  return bundlePath;
}",0.2261640798226164
127108,"@Override public void syncBean(Item beanItem,boolean copyToTemp) throws SystemException {
  if (!isBeanUptodate(beanItem) || !getFile(beanItem).exists()) {
    doSyncBean(beanItem,copyToTemp);
    setBeanAsUptodate(beanItem);
  }
}","public void syncBean(Item beanItem,boolean copyToTemp,boolean forceUpdate) throws SystemException {
  if (beanItem != null && (forceUpdate || !isBeanUptodate(beanItem) || !getFile(beanItem).exists())) {
    doSyncBean(beanItem,copyToTemp);
    setBeanAsUptodate(beanItem);
  }
}",0.6679764243614931
127109,"@Override public void syncAllBeans() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    ITalendSynchronizer talendSynchronizer=codeGenService.createCamelBeanSynchronizer();
    if (talendSynchronizer != null) {
      talendSynchronizer.syncAllBeans();
    }
  }
}","@Override public void syncAllBeans() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    ITalendSynchronizer talendSynchronizer=codeGenService.createCamelBeanSynchronizer();
    if (talendSynchronizer != null) {
      talendSynchronizer.syncAllBeansForLogOn();
    }
  }
}",0.99163179916318
127110,"@Override public void syncAllRoutines() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    codeGenService.createRoutineSynchronizer().syncAllRoutinesForLogOn();
    codeGenService.createRoutineSynchronizer().syncAllPigudf();
  }
}","@Override public void syncAllRoutines() throws SystemException {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICodeGeneratorService.class)) {
    ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    codeGenService.createRoutineSynchronizer().syncAllRoutinesForLogOn();
    codeGenService.createRoutineSynchronizer().syncAllPigudfForLogOn();
  }
}",0.991011235955056
127111,"private boolean deleteElements(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final RepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  boolean needReturn=false;
  final boolean[] enableDeleting=new boolean[1];
  enableDeleting[0]=true;
  final IRepositoryViewObject objToDelete=currentJobNode.getObject();
  final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkContext.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
        int returnCode=dialog.open();
switch (returnCode) {
case Window.OK:
          enableDeleting[0]=true;
        break;
case Window.CANCEL:
      enableDeleting[0]=false;
    break;
}
}
}
);
}
if (!enableDeleting[0]) {
return true;
}
AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
ERepositoryObjectType nodeType=(ERepositoryObjectType)currentJobNode.getProperties(EProperties.CONTENT_TYPE);
if (nodeType != null && nodeType.isSubItem()) {
Display.getDefault().syncExec(new Runnable(){
@Override public void run(){
final DeleteTableAction deleteTableAction=new DeleteTableAction();
deleteTableAction.setWorkbenchPart(getWorkbenchPart());
deleteTableAction.run();
}
}
);
needReturn=true;
}
 else {
if (factory.getStatus(objToDelete) == ERepositoryStatus.DELETED) {
if (!confirmFromDialog && resChangeService != null) {
List<IRepositoryNode> dependentNodes=resChangeService.getDependentNodes(currentJobNode);
if (dependentNodes != null && !dependentNodes.isEmpty()) {
  resChangeService.openDependcesDialog(dependentNodes);
  return true;
}
}
if (confirm == null) {
if (confirmFromDialog) {
  confirm=confirmFromDialog;
}
 else {
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      String title=Messages.getString(""String_Node_Str"");
      String message=currentJobNode.getProperties(EProperties.LABEL) + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
      confirmFromDialog=MessageDialog.openQuestion(new Shell(),title,message);
    }
  }
);
  confirm=confirmFromDialog;
}
}
if (confirm) {
deleteActionCache.closeOpenedEditor(objToDelete);
if (currentJobNode.getType() == ENodeType.SIMPLE_FOLDER) {
  boolean success=true;
  for (  IRepositoryNode curNode : currentJobNode.getChildren()) {
    try {
      deleteElements(factory,deleteActionCache,(RepositoryNode)curNode,confirm);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (success) {
    if (currentJobNode.getObject() != null && currentJobNode.getObject().getProperty() != null && currentJobNode.getObject().getProperty().getItem() != null) {
      Item fitem=currentJobNode.getObject().getProperty().getItem();
      if ((fitem instanceof FolderItem) && (((FolderItem)fitem).getType().getValue() == FolderType.FOLDER)) {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentJobNode.getObject().getProperty().getItem()));
      }
 else {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
      }
    }
 else {
      factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
    }
  }
}
 else {
  if (resChangeService != null && objToDelete != null && objToDelete.getProperty() != null) {
    Item item=objToDelete.getProperty().getItem();
    if (item != null) {
      resChangeService.removeAllDependecies(item);
    }
  }
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    handler.deleteNode(objToDelete);
  }
  if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
    forceBuild=true;
  }
  if (!forceBuild) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
      ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
      if (nodeType == camelService.getBeansType()) {
        forceBuild=true;
      }
    }
  }
  factory.deleteObjectPhysical(objToDelete);
  ExpressionPersistance.getInstance().jobDeleted(objToDelete.getLabel());
}
}
}
 else {
factory.deleteObjectLogical(objToDelete);
updateRelatedViews();
removeConnFromSQLExplorer(currentJobNode);
}
}
return needReturn;
}","private boolean deleteElements(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final RepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  boolean needReturn=false;
  final boolean[] enableDeleting=new boolean[1];
  enableDeleting[0]=true;
  final IRepositoryViewObject objToDelete=currentJobNode.getObject();
  final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkContext.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
        int returnCode=dialog.open();
switch (returnCode) {
case Window.OK:
          enableDeleting[0]=true;
        break;
case Window.CANCEL:
      enableDeleting[0]=false;
    break;
}
}
}
);
}
if (!enableDeleting[0]) {
return true;
}
AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
ERepositoryObjectType nodeType=(ERepositoryObjectType)currentJobNode.getProperties(EProperties.CONTENT_TYPE);
if (nodeType != null && nodeType.isSubItem()) {
Display.getDefault().syncExec(new Runnable(){
@Override public void run(){
final DeleteTableAction deleteTableAction=new DeleteTableAction();
deleteTableAction.setWorkbenchPart(getWorkbenchPart());
deleteTableAction.run();
}
}
);
needReturn=true;
}
 else {
if (factory.getStatus(objToDelete) == ERepositoryStatus.DELETED) {
if (!confirmForDQ && resChangeService != null) {
List<IRepositoryNode> dependentNodes=resChangeService.getDependentNodes(currentJobNode);
if (dependentNodes != null && !dependentNodes.isEmpty()) {
  resChangeService.openDependcesDialog(dependentNodes);
  return true;
}
}
if (confirm == null) {
if (confirmForDQ) {
  confirm=confirmForDQ;
}
 else {
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      String title=Messages.getString(""String_Node_Str"");
      String message=currentJobNode.getProperties(EProperties.LABEL) + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
      confirmFromDialog=MessageDialog.openQuestion(new Shell(),title,message);
    }
  }
);
  confirm=confirmFromDialog;
}
}
if (confirm) {
deleteActionCache.closeOpenedEditor(objToDelete);
if (currentJobNode.getType() == ENodeType.SIMPLE_FOLDER) {
  boolean success=true;
  for (  IRepositoryNode curNode : currentJobNode.getChildren()) {
    try {
      deleteElements(factory,deleteActionCache,(RepositoryNode)curNode,confirm);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (success) {
    if (currentJobNode.getObject() != null && currentJobNode.getObject().getProperty() != null && currentJobNode.getObject().getProperty().getItem() != null) {
      Item fitem=currentJobNode.getObject().getProperty().getItem();
      if ((fitem instanceof FolderItem) && (((FolderItem)fitem).getType().getValue() == FolderType.FOLDER)) {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentJobNode.getObject().getProperty().getItem()));
      }
 else {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
      }
    }
 else {
      factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
    }
  }
}
 else {
  if (resChangeService != null && objToDelete != null && objToDelete.getProperty() != null) {
    Item item=objToDelete.getProperty().getItem();
    if (item != null) {
      resChangeService.removeAllDependecies(item);
    }
  }
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    handler.deleteNode(objToDelete);
  }
  if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
    forceBuild=true;
  }
  if (!forceBuild) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
      ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
      if (nodeType == camelService.getBeansType()) {
        forceBuild=true;
      }
    }
  }
  factory.deleteObjectPhysical(objToDelete);
  ExpressionPersistance.getInstance().jobDeleted(objToDelete.getLabel());
}
}
}
 else {
factory.deleteObjectLogical(objToDelete);
updateRelatedViews();
removeConnFromSQLExplorer(currentJobNode);
}
}
return needReturn;
}",0.9958873774122112
127112,"/** 
 * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()
 */
@Override public void initializeDefaultPreferences(){
  IEclipsePreferences node=new DefaultScope().getNode(CorePlugin.getDefault().getBundle().getSymbolicName());
  IPath tempPath=new Path(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"");
  File tempFile=tempPath.toFile();
  if (!tempFile.exists()) {
    tempFile.mkdirs();
  }
  node.put(ITalendCorePrefConstants.FILE_PATH_TEMP,tempPath.toOSString());
  String os=Platform.getOS();
  String javaPath=System.getProperty(""String_Node_Str"");
  if (os.equals(Platform.OS_WIN32)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_WIN32_INTERPRETER);
  }
 else   if (os.equals(Platform.OS_LINUX)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_LINUX_INTERPRETER_PATH);
  }
  node.put(ITalendCorePrefConstants.LANGUAGE_SELECTOR,Locale.getDefault().getLanguage());
  node.put(ITalendCorePrefConstants.PREVIEW_LIMIT,""String_Node_Str"");
  node.putBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME,true);
  initializeUpdatePreference();
  final String perlEditorBundleName=""String_Node_Str"";
  final String editorsBundleName=""String_Node_Str"";
  final String editorLineNumberRuler=""String_Node_Str"";
  if (!CommonsPlugin.isHeadless()) {
    IPreferenceStore store=new ScopedPreferenceStore(new InstanceScope(),perlEditorBundleName);
    store.setValue(editorLineNumberRuler,true);
    store=new ScopedPreferenceStore(new InstanceScope(),editorsBundleName);
    store.setValue(editorLineNumberRuler,true);
  }
  String languageType=Locale.getDefault().getLanguage();
  if (Locale.getDefault().equals(Locale.CHINA)) {
    languageType=Locale.SIMPLIFIED_CHINESE.toString();
  }
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.LANGUAGE_SELECTOR,languageType);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_QUOTE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.AS400_SQL_SEG,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATION,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.USE_CSS_TEMPLATE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.CONTEXT_GROUP_BY_SOURCE,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATESOURCECODE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.COMMAND_STR,ITalendCorePrefConstants.DEFAULT_COMMAND_STR);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_WARNING,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.FORBIDDEN_MAPPING_LENGTH_PREC_LOGIC,false);
}","/** 
 * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()
 */
@Override public void initializeDefaultPreferences(){
  IEclipsePreferences node=new DefaultScope().getNode(CorePlugin.getDefault().getBundle().getSymbolicName());
  IPath tempPath=new Path(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"");
  File tempFile=tempPath.toFile();
  if (!tempFile.exists()) {
    tempFile.mkdirs();
  }
  node.put(ITalendCorePrefConstants.FILE_PATH_TEMP,tempPath.toOSString());
  String os=Platform.getOS();
  String javaPath=System.getProperty(""String_Node_Str"");
  if (os.equals(Platform.OS_WIN32)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_WIN32_INTERPRETER);
  }
 else   if (os.equals(Platform.OS_LINUX)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_LINUX_INTERPRETER_PATH);
  }
  node.put(ITalendCorePrefConstants.LANGUAGE_SELECTOR,Locale.getDefault().getLanguage());
  node.put(ITalendCorePrefConstants.PREVIEW_LIMIT,""String_Node_Str"");
  node.putBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME,true);
  initializeUpdatePreference();
  final String perlEditorBundleName=""String_Node_Str"";
  final String editorsBundleName=""String_Node_Str"";
  final String editorLineNumberRuler=""String_Node_Str"";
  if (!CommonsPlugin.isHeadless()) {
    Display display=getDisplay();
    if (display != null) {
      display.syncExec(new Runnable(){
        @Override public void run(){
          initPreference(perlEditorBundleName,editorsBundleName,editorLineNumberRuler);
        }
      }
);
    }
 else {
      initPreference(perlEditorBundleName,editorsBundleName,editorLineNumberRuler);
    }
  }
  String languageType=Locale.getDefault().getLanguage();
  if (Locale.getDefault().equals(Locale.CHINA)) {
    languageType=Locale.SIMPLIFIED_CHINESE.toString();
  }
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.LANGUAGE_SELECTOR,languageType);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_QUOTE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.AS400_SQL_SEG,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATION,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.USE_CSS_TEMPLATE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.CONTEXT_GROUP_BY_SOURCE,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATESOURCECODE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.COMMAND_STR,ITalendCorePrefConstants.DEFAULT_COMMAND_STR);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_WARNING,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.FORBIDDEN_MAPPING_LENGTH_PREC_LOGIC,false);
}",0.9180933199060088
127113,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final RepositoryNode other=(RepositoryNode)obj;
  if (this.type != ENodeType.SIMPLE_FOLDER) {
    if (null != this.id && null != other.id && !this.id.equals(other.id)) {
      return false;
    }
  }
  if (this.properties == null) {
    if (other.properties != null) {
      return false;
    }
  }
 else   if (!this.properties.equals(other.properties)) {
    return false;
  }
  if (this.type == null) {
    if (other.type != null) {
      return false;
    }
  }
 else   if (!this.type.equals(other.type)) {
    return false;
  }
  if (this.parent == null) {
    if (other.parent != null) {
      return false;
    }
  }
 else   if (!this.parent.equals(other.parent)) {
    return false;
  }
  if (this.getLabel() == null) {
    if (other.getLabel() != null) {
      return false;
    }
  }
 else   if (!this.getLabel().equals(other.getLabel())) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final RepositoryNode other=(RepositoryNode)obj;
  if (this.type != ENodeType.SIMPLE_FOLDER) {
    if (null != this.id && null != other.id && !this.id.equals(other.id)) {
      return false;
    }
  }
  if (this.properties == null) {
    if (other.properties != null) {
      return false;
    }
  }
 else   if (!this.properties.equals(other.properties)) {
    return false;
  }
  if (this.type == null) {
    if (other.type != null) {
      return false;
    }
  }
 else   if (!this.type.equals(other.type)) {
    return false;
  }
  if (this.parent == null) {
    if (other.parent != null) {
      return false;
    }
  }
 else   if (!this.parent.equals(other.parent)) {
    return false;
  }
  if (this.object == null) {
    if (other.object != null) {
      return false;
    }
  }
 else {
    if (object.getVersion() == null) {
      if (other.object.getVersion() != null) {
        return false;
      }
    }
 else     if (!object.getVersion().equals(other.object.getVersion())) {
      return false;
    }
  }
  if (this.getLabel() == null) {
    if (other.getLabel() != null) {
      return false;
    }
  }
 else   if (!this.getLabel().equals(other.getLabel())) {
    return false;
  }
  return true;
}",0.8699154248892469
127114,"@Override public int hashCode(){
  int result=1;
  result=PRIME * result + ((this.id == null) ? 0 : this.id.hashCode());
  result=PRIME * result + ((this.properties == null) ? 0 : this.properties.hashCode());
  result=PRIME * result + ((this.type == null) ? 0 : this.type.hashCode());
  result=PRIME * result + ((this.parent == null) ? 0 : this.parent.hashCode());
  result=PRIME * result + ((this.object == null) ? 0 : this.object.hashCode());
  return result;
}","@Override public int hashCode(){
  int result=1;
  result=PRIME * result + ((this.id == null) ? 0 : this.id.hashCode());
  result=PRIME * result + ((this.properties == null) ? 0 : this.properties.hashCode());
  result=PRIME * result + ((this.type == null) ? 0 : this.type.hashCode());
  return result;
}",0.7911227154046997
127115,"/** 
 * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()
 */
@Override public void initializeDefaultPreferences(){
  IEclipsePreferences node=new DefaultScope().getNode(CorePlugin.getDefault().getBundle().getSymbolicName());
  IPath tempPath=new Path(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"");
  File tempFile=tempPath.toFile();
  if (!tempFile.exists()) {
    tempFile.mkdirs();
  }
  node.put(ITalendCorePrefConstants.FILE_PATH_TEMP,tempPath.toOSString());
  String os=Platform.getOS();
  String javaPath=System.getProperty(""String_Node_Str"");
  if (os.equals(Platform.OS_WIN32)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_WIN32_INTERPRETER);
  }
 else   if (os.equals(Platform.OS_LINUX)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_LINUX_INTERPRETER_PATH);
  }
  node.put(ITalendCorePrefConstants.LANGUAGE_SELECTOR,Locale.getDefault().getLanguage());
  node.put(ITalendCorePrefConstants.PREVIEW_LIMIT,""String_Node_Str"");
  node.putBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME,true);
  initializeUpdatePreference();
  final String perlEditorBundleName=""String_Node_Str"";
  final String editorsBundleName=""String_Node_Str"";
  final String editorLineNumberRuler=""String_Node_Str"";
  if (!CommonsPlugin.isHeadless()) {
    IPreferenceStore store=new ScopedPreferenceStore(new InstanceScope(),perlEditorBundleName);
    store.setValue(editorLineNumberRuler,true);
    store=new ScopedPreferenceStore(new InstanceScope(),editorsBundleName);
    store.setValue(editorLineNumberRuler,true);
  }
  String languageType=Locale.getDefault().getLanguage();
  if (Locale.getDefault().equals(Locale.CHINA)) {
    languageType=Locale.SIMPLIFIED_CHINESE.toString();
  }
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.LANGUAGE_SELECTOR,languageType);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_QUOTE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.AS400_SQL_SEG,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATION,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.USE_CSS_TEMPLATE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.CONTEXT_GROUP_BY_SOURCE,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATESOURCECODE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.COMMAND_STR,ITalendCorePrefConstants.DEFAULT_COMMAND_STR);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_WARNING,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.FORBIDDEN_MAPPING_LENGTH_PREC_LOGIC,false);
}","/** 
 * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()
 */
@Override public void initializeDefaultPreferences(){
  IEclipsePreferences node=new DefaultScope().getNode(CorePlugin.getDefault().getBundle().getSymbolicName());
  IPath tempPath=new Path(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"");
  File tempFile=tempPath.toFile();
  if (!tempFile.exists()) {
    tempFile.mkdirs();
  }
  node.put(ITalendCorePrefConstants.FILE_PATH_TEMP,tempPath.toOSString());
  String os=Platform.getOS();
  String javaPath=System.getProperty(""String_Node_Str"");
  if (os.equals(Platform.OS_WIN32)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_WIN32_INTERPRETER);
  }
 else   if (os.equals(Platform.OS_LINUX)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_LINUX_INTERPRETER_PATH);
  }
  node.put(ITalendCorePrefConstants.LANGUAGE_SELECTOR,Locale.getDefault().getLanguage());
  node.put(ITalendCorePrefConstants.PREVIEW_LIMIT,""String_Node_Str"");
  node.putBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME,true);
  initializeUpdatePreference();
  final String perlEditorBundleName=""String_Node_Str"";
  final String editorsBundleName=""String_Node_Str"";
  final String editorLineNumberRuler=""String_Node_Str"";
  if (!CommonsPlugin.isHeadless()) {
    Display display=getDisplay();
    if (display != null) {
      display.syncExec(new Runnable(){
        @Override public void run(){
          initPreference(perlEditorBundleName,editorsBundleName,editorLineNumberRuler);
        }
      }
);
    }
 else {
      initPreference(perlEditorBundleName,editorsBundleName,editorLineNumberRuler);
    }
  }
  String languageType=Locale.getDefault().getLanguage();
  if (Locale.getDefault().equals(Locale.CHINA)) {
    languageType=Locale.SIMPLIFIED_CHINESE.toString();
  }
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.LANGUAGE_SELECTOR,languageType);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_QUOTE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.AS400_SQL_SEG,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATION,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.USE_CSS_TEMPLATE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.CONTEXT_GROUP_BY_SOURCE,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATESOURCECODE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.COMMAND_STR,ITalendCorePrefConstants.DEFAULT_COMMAND_STR);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_WARNING,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.FORBIDDEN_MAPPING_LENGTH_PREC_LOGIC,false);
}",0.9180933199060088
127116,"public RepoViewLinkerRegistryReader(){
  super(FrameworkUtil.getBundle(RepoViewLinkerRegistryReader.class).getSymbolicName(),VIEW_LINKER_EXTENSION_POINT);
}","private RepoViewLinkerRegistryReader(){
  super(FrameworkUtil.getBundle(RepoViewLinkerRegistryReader.class).getSymbolicName(),VIEW_LINKER_EXTENSION_POINT);
}",0.9712460063897764
127117,"protected void deleteElements(final IProxyRepositoryFactory factory,final RepositoryNode currentNode) throws PersistenceException, BusinessException {
  if (!validElement(currentNode)) {
    return;
  }
  final IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      factory.save(item);
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          for (          IEditorReference editors : page.getEditorReferences()) {
            String nameInEditor=editors.getName();
            if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
              page.closeEditor(editors.getEditor(false),false);
            }
          }
          if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
            if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
              for (              IRepositoryNode curNode : currentNode.getChildren()) {
                deleteElements(factory,(RepositoryNode)curNode);
              }
              factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
            }
 else {
              for (              IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
                handler.deleteNode(objToDelete);
              }
              ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
              if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
                forceBuild=true;
              }
              if (!forceBuild) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
                  ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
                  if (nodeType == camelService.getBeansType()) {
                    forceBuild=true;
                  }
                }
              }
              factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
            }
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
}","protected void deleteElements(final IProxyRepositoryFactory factory,final RepositoryNode currentNode) throws PersistenceException, BusinessException {
  if (!validElement(currentNode)) {
    return;
  }
  final IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      factory.save(item);
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          for (          IEditorReference editors : page.getEditorReferences()) {
            IEditorInput nameInEditor=editors.getEditorInput();
            if (isRelation(nameInEditor,objToDelete.getId())) {
              page.closeEditor(editors.getEditor(false),false);
            }
          }
          if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
            if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
              for (              IRepositoryNode curNode : currentNode.getChildren()) {
                deleteElements(factory,(RepositoryNode)curNode);
              }
              factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
            }
 else {
              for (              IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
                handler.deleteNode(objToDelete);
              }
              ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
              if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
                forceBuild=true;
              }
              if (!forceBuild) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
                  ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
                  if (nodeType == camelService.getBeansType()) {
                    forceBuild=true;
                  }
                }
              }
              factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
            }
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
}",0.9708312257629405
127118,"@Override public void run(){
  try {
    IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    for (    IEditorReference editors : page.getEditorReferences()) {
      String nameInEditor=editors.getName();
      if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
        page.closeEditor(editors.getEditor(false),false);
      }
    }
    if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
      if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
        for (        IRepositoryNode curNode : currentNode.getChildren()) {
          deleteElements(factory,(RepositoryNode)curNode);
        }
        factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
      }
 else {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          handler.deleteNode(objToDelete);
        }
        ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
        if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
          forceBuild=true;
        }
        if (!forceBuild) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
            ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
            if (nodeType == camelService.getBeansType()) {
              forceBuild=true;
            }
          }
        }
        factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","@Override public void run(){
  try {
    IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    for (    IEditorReference editors : page.getEditorReferences()) {
      IEditorInput nameInEditor=editors.getEditorInput();
      if (isRelation(nameInEditor,objToDelete.getId())) {
        page.closeEditor(editors.getEditor(false),false);
      }
    }
    if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
      if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
        for (        IRepositoryNode curNode : currentNode.getChildren()) {
          deleteElements(factory,(RepositoryNode)curNode);
        }
        factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
      }
 else {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          handler.deleteNode(objToDelete);
        }
        ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
        if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
          forceBuild=true;
        }
        if (!forceBuild) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
            ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
            if (nodeType == camelService.getBeansType()) {
              forceBuild=true;
            }
          }
        }
        factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9593820084724644
127119,"public RepoViewLinkHelper(){
  this.repoViewLinkerReader=new RepoViewLinkerRegistryReader();
}","public RepoViewLinkHelper(){
  this.repoViewLinkerReader=RepoViewLinkerRegistryReader.getInstance();
}",0.9183673469387756
127120,"public static IRepositoryViewObject getRoutineFromName(Project tempProject,String name,boolean includeSystem){
  if (name == null)   return null;
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    List<IRepositoryViewObject> all=factory.getAll(tempProject,ERepositoryObjectType.ROUTINES);
    for (    IRepositoryViewObject obj : all) {
      if (obj != null && obj.getProperty() != null) {
        Item item=obj.getProperty().getItem();
        String label=obj.getProperty().getLabel();
        if (item != null && item instanceof RoutineItem) {
          RoutineItem routineItem=(RoutineItem)item;
          if (name.equals(label)) {
            if (!includeSystem && routineItem.isBuiltIn()) {
              continue;
            }
 else {
              return obj;
            }
          }
        }
      }
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  return null;
}","public static IRepositoryViewObject getRoutineFromName(Project tempProject,String name,boolean includeSystem){
  if (name == null) {
    return null;
  }
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    List<IRepositoryViewObject> all=factory.getAll(tempProject,ERepositoryObjectType.ROUTINES);
    for (    IRepositoryViewObject obj : all) {
      if (obj != null && obj.getProperty() != null) {
        Item item=obj.getProperty().getItem();
        String label=obj.getProperty().getLabel();
        if (item != null && item instanceof RoutineItem) {
          RoutineItem routineItem=(RoutineItem)item;
          if (name.equals(label)) {
            if (!includeSystem && routineItem.isBuiltIn()) {
              continue;
            }
 else {
              return obj;
            }
          }
        }
      }
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  return null;
}",0.9958890030832476
127121,"private static RepositoryNode getRepositoryNode(IRepositoryNode rootNode,IRepositoryViewObject curNode,IRepositoryView view,boolean expanded){
  if (rootNode == null || curNode == null || view == null) {
    return null;
  }
  if (expanded) {
    expandNode((RepositoryNode)rootNode,curNode,view);
  }
  final List<IRepositoryNode> children=rootNode.getChildren();
  if (children != null) {
    List<IRepositoryNode> folderChild=new ArrayList<IRepositoryNode>();
    for (    IRepositoryNode childNode : children) {
      RepositoryNode node=(RepositoryNode)childNode;
      if (isRepositoryFolder(node) || node.getType() == ENodeType.REFERENCED_PROJECT) {
        folderChild.add(node);
      }
 else       if (node.getId().equals(curNode.getId()) && node.getObjectType() == curNode.getRepositoryObjectType()) {
        return node;
      }
    }
    for (    IRepositoryNode folderNode : folderChild) {
      final RepositoryNode repositoryNode=getRepositoryNode((RepositoryNode)folderNode,curNode,view,expanded);
      if (repositoryNode != null) {
        return repositoryNode;
      }
    }
  }
  return null;
}","private static RepositoryNode getRepositoryNode(IRepositoryNode rootNode,IRepositoryViewObject curNode,IRepositoryView view,boolean expanded){
  if (rootNode == null || curNode == null || view == null) {
    return null;
  }
  if (expanded) {
    expandNode((RepositoryNode)rootNode,curNode,view);
  }
  final List<IRepositoryNode> children=rootNode.getChildren();
  if (children != null) {
    List<IRepositoryNode> folderChild=new ArrayList<IRepositoryNode>();
    for (    IRepositoryNode childNode : children) {
      RepositoryNode node=(RepositoryNode)childNode;
      if (isRepositoryFolder(node) || node.getType() == ENodeType.REFERENCED_PROJECT) {
        folderChild.add(node);
      }
 else       if (node.getId().equals(curNode.getId()) && node.getObjectType() == curNode.getRepositoryObjectType()) {
        return node;
      }
    }
    for (    IRepositoryNode folderNode : folderChild) {
      final RepositoryNode repositoryNode=getRepositoryNode(folderNode,curNode,view,expanded);
      if (repositoryNode != null) {
        return repositoryNode;
      }
    }
  }
  return null;
}",0.9927862939585212
127122,"public static String getBundlePath(String bundleName){
  Bundle refBundle=Platform.getBundle(bundleName);
  if (refBundle != null) {
    String bundlePath=refBundle.getLocation();
    String prefix=""String_Node_Str"";
    int prefixPos=bundlePath.lastIndexOf(prefix);
    if (prefixPos >= 0) {
      bundlePath=bundlePath.substring(prefixPos + prefix.length(),bundlePath.length() - 1);
      return bundlePath;
    }
  }
  return ""String_Node_Str"";
}","public static String getBundlePath(String bundleName){
  String bundlePath=""String_Node_Str"";
  Bundle refBundle=Platform.getBundle(bundleName);
  if (refBundle != null) {
    try {
      URL resource=refBundle.getEntry(""String_Node_Str"");
      bundlePath=FileLocator.toFileURL(resource).getPath();
      bundlePath=bundlePath.substring(0,bundlePath.length() - 1);
    }
 catch (    IOException e) {
      log.error(e);
    }
  }
  return bundlePath;
}",0.2261640798226164
127123,"@Override protected void addFieldsListeners(){
  webServiceUrlText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setWebServiceUrl(webServiceUrlText.getText());
        setCheckEnable();
      }
    }
  }
);
  userNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setUserName(userNameText.getText());
        setCheckEnable();
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setPassword(passwordText.getText());
        setCheckEnable();
      }
    }
  }
);
  batchSizeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setBatchSize(batchSizeText.getText());
        setCheckEnable();
      }
    }
  }
);
  timeOutText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        String timeOutStr=timeOutText.getText();
        if (!""String_Node_Str"".equals(timeOutStr)) {
          try {
            Integer.parseInt(timeOutStr);
            getConnection().setTimeOut(timeOutStr);
          }
 catch (          NumberFormatException e1) {
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
          }
        }
        setCheckEnable();
      }
    }
  }
);
  useProxyBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean selection=useProxyBtn.getSelection();
      checkFieldsValue();
      enableProxyParameters(selection);
      getConnection().setUseProxy(selection);
      if (selection && useHttpBtn.getSelection()) {
        getConnection().setUseHttpProxy(false);
        useHttpBtn.setSelection(false);
      }
    }
  }
);
  useHttpBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean selection=useHttpBtn.getSelection();
      checkFieldsValue();
      enableProxyParameters(selection);
      getConnection().setUseHttpProxy(selection);
      if (selection && useProxyBtn.getSelection()) {
        getConnection().setUseProxy(false);
        useProxyBtn.setSelection(false);
      }
    }
  }
);
  proxyHostText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyHost(proxyHostText.getText());
      }
    }
  }
);
  proxyPortText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyPort(proxyPortText.getText());
      }
    }
  }
);
  proxyUsernameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyUsername(proxyUsernameText.getText());
      }
    }
  }
);
  proxyPasswordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyPassword(proxyPasswordText.getText());
      }
    }
  }
);
  authBtn.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setLoginType(authBtn.getItem(authBtn.getSelectionIndex()));
        setCheckEnable();
      }
    }
  }
);
  webServiceUrlTextForOAuth.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setWebServiceUrlTextForOAuth(webServiceUrlTextForOAuth.getText());
        setCheckEnable();
      }
    }
  }
);
  consumeKeyText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setConsumeKey(consumeKeyText.getText());
        setCheckEnable();
      }
    }
  }
);
  consumeKeySecretText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setConsumeSecret(consumeKeySecretText.getText());
        setCheckEnable();
      }
    }
  }
);
  callbackHostText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setCallbackHost(callbackHostText.getText());
        setCheckEnable();
      }
    }
  }
);
  callbackPortText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setCallbackPort(callbackPortText.getText());
        setCheckEnable();
      }
    }
  }
);
  apiVersionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setSalesforceVersion(apiVersionText.getText());
        setCheckEnable();
      }
    }
  }
);
  tokenText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setToken(tokenText.getText());
        setCheckEnable();
      }
    }
  }
);
  checkButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
      }
      testSalesforceLogin();
      if (authBtn.getSelectionIndex() == 0) {
        String proxy=null;
        if (useProxyBtn.getSelection()) {
          proxy=SalesforceModuleParseAPI.USE_SOCKS_PROXY;
        }
 else         if (useHttpBtn.getSelection()) {
          proxy=SalesforceModuleParseAPI.USE_HTTP_PROXY;
        }
        SalesforceModuleParseAPI checkSalesfoceLogin=checkSalesfoceLogin(proxy,endPoint,username,pwd,timeOut,proxyHostText.getText(),proxyPortText.getText(),proxyUsernameText.getText(),proxyPasswordText.getText());
        if (checkSalesfoceLogin != null) {
          setSalesforceModuleParseAPI(checkSalesfoceLogin);
          loginOk=checkSalesfoceLogin.getCurrentAPI().isLogin();
        }
        if (loginOk) {
          checkFieldsValue();
        }
      }
 else {
        String errors=null;
        final OAuthClient client=new OAuthClient();
        client.setBaseOAuthURL(endPointForOAuth);
        client.setCallbackHost(callbackHost);
        client.setCallbackPort(Integer.parseInt(callbackPort));
        client.setClientID(consumeKey);
        client.setClientSecret(consumeKeySrcret);
        boolean result=false;
        try {
          client.startServer();
          Token token=null;
          if (TalendPropertiesUtil.isEnabledUseBrowser()) {
            Display.getDefault().syncExec(new Runnable(){
              @Override public void run(){
                BrowerDialog brower;
                try {
                  Shell shell=new Shell(Display.getDefault(),SWT.ON_TOP);
                  brower=new BrowerDialog(shell,client.getUrl());
                  if (Window.OK == brower.open()) {
                    code=client.getServer().getCode();
                  }
 else {
                    return;
                  }
                }
 catch (                Exception e2) {
                  ExceptionHandler.process(e2);
                }
              }
            }
);
          }
 else {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          client.stopServer();
          if (code != null && !code.equals(""String_Node_Str"")) {
            token=client.getTokenForWizard(code);
            org.talend.salesforce.SforceManagement sfMgr=new org.talend.salesforce.SforceManagementImpl();
            String endpoint=null;
            endpoint=client.getSOAPEndpoint(token,apiVersion);
            if (token != null) {
              java.util.Properties properties=new java.util.Properties();
              FileOutputStream outputStream=new FileOutputStream(tokenText.getText());
              properties.setProperty(""String_Node_Str"",token.getRefresh_token());
              FileWriter w=new FileWriter(tokenText.getText());
              properties.store(w,""String_Node_Str"");
              w.close();
              result=sfMgr.login(token.getAccess_token(),endpoint,Integer.parseInt(timeOut),false);
            }
            if (!result) {
              String mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
              new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,errors);
            }
 else {
              loginOk=true;
              MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            }
          }
 else {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
          }
        }
 catch (        Exception e1) {
          errors=e1.getMessage();
        }
        if (loginOk) {
          checkFieldsValue();
        }
      }
    }
  }
);
}","@Override protected void addFieldsListeners(){
  webServiceUrlText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setWebServiceUrl(webServiceUrlText.getText());
        setCheckEnable();
      }
    }
  }
);
  userNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setUserName(userNameText.getText());
        setCheckEnable();
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setPassword(passwordText.getText());
        setCheckEnable();
      }
    }
  }
);
  batchSizeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setBatchSize(batchSizeText.getText());
        setCheckEnable();
      }
    }
  }
);
  timeOutText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        String timeOutStr=timeOutText.getText();
        if (!""String_Node_Str"".equals(timeOutStr)) {
          try {
            Integer.parseInt(timeOutStr);
            getConnection().setTimeOut(timeOutStr);
          }
 catch (          NumberFormatException e1) {
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
          }
        }
        setCheckEnable();
      }
    }
  }
);
  useProxyBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean selection=useProxyBtn.getSelection();
      checkFieldsValue();
      enableProxyParameters(selection);
      getConnection().setUseProxy(selection);
      if (selection && useHttpBtn.getSelection()) {
        getConnection().setUseHttpProxy(false);
        useHttpBtn.setSelection(false);
      }
    }
  }
);
  useHttpBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean selection=useHttpBtn.getSelection();
      checkFieldsValue();
      enableProxyParameters(selection);
      getConnection().setUseHttpProxy(selection);
      if (selection && useProxyBtn.getSelection()) {
        getConnection().setUseProxy(false);
        useProxyBtn.setSelection(false);
      }
    }
  }
);
  proxyHostText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyHost(proxyHostText.getText());
      }
    }
  }
);
  proxyPortText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyPort(proxyPortText.getText());
      }
    }
  }
);
  proxyUsernameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyUsername(proxyUsernameText.getText());
      }
    }
  }
);
  proxyPasswordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyPassword(proxyPasswordText.getText());
      }
    }
  }
);
  authBtn.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setLoginType(authBtn.getItem(authBtn.getSelectionIndex()));
        setCheckEnable();
      }
    }
  }
);
  webServiceUrlTextForOAuth.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setWebServiceUrlTextForOAuth(webServiceUrlTextForOAuth.getText());
        setCheckEnable();
      }
    }
  }
);
  consumeKeyText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setConsumeKey(consumeKeyText.getText());
        setCheckEnable();
      }
    }
  }
);
  consumeKeySecretText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setConsumeSecret(consumeKeySecretText.getText());
        setCheckEnable();
      }
    }
  }
);
  callbackHostText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setCallbackHost(callbackHostText.getText());
        setCheckEnable();
      }
    }
  }
);
  callbackPortText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setCallbackPort(callbackPortText.getText());
        setCheckEnable();
      }
    }
  }
);
  apiVersionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setSalesforceVersion(apiVersionText.getText());
        setCheckEnable();
      }
    }
  }
);
  tokenText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setToken(tokenText.getText());
        setCheckEnable();
      }
    }
  }
);
  checkButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
      }
      testSalesforceLogin();
      if (authBtn.getSelectionIndex() == 0) {
        String proxy=null;
        if (useProxyBtn.getSelection()) {
          proxy=SalesforceModuleParseAPI.USE_SOCKS_PROXY;
        }
 else         if (useHttpBtn.getSelection()) {
          proxy=SalesforceModuleParseAPI.USE_HTTP_PROXY;
        }
        SalesforceModuleParseAPI checkSalesfoceLogin=checkSalesfoceLogin(proxy,endPoint,username,pwd,timeOut,proxyHostText.getText(),proxyPortText.getText(),proxyUsernameText.getText(),proxyPasswordText.getText());
        if (checkSalesfoceLogin != null) {
          setSalesforceModuleParseAPI(checkSalesfoceLogin);
          loginOk=checkSalesfoceLogin.getCurrentAPI().isLogin();
        }
        if (loginOk) {
          checkFieldsValue();
        }
      }
 else {
        String errors=null;
        final OAuthClient client=new OAuthClient();
        client.setBaseOAuthURL(endPointForOAuth);
        client.setCallbackHost(callbackHost);
        client.setCallbackPort(Integer.parseInt(callbackPort));
        client.setClientID(consumeKey);
        client.setClientSecret(consumeKeySrcret);
        boolean result=false;
        try {
          client.startServer();
          Token token=null;
          if (TalendPropertiesUtil.isEnabledUseBrowser()) {
            Display.getDefault().syncExec(new Runnable(){
              @Override public void run(){
                BrowerDialog brower;
                try {
                  Shell shell=new Shell(Display.getDefault(),SWT.ON_TOP);
                  brower=new BrowerDialog(shell,client.getUrl());
                  if (Window.OK == brower.open()) {
                    code=client.getServer().getCode();
                  }
 else {
                    return;
                  }
                }
 catch (                Exception e2) {
                  ExceptionHandler.process(e2);
                }
              }
            }
);
          }
 else {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          Thread.sleep(100);
          client.stopServer();
          if (code != null && !code.equals(""String_Node_Str"")) {
            token=client.getTokenForWizard(code);
            org.talend.salesforce.SforceManagement sfMgr=new org.talend.salesforce.SforceManagementImpl();
            String endpoint=null;
            endpoint=client.getSOAPEndpoint(token,apiVersion);
            if (token != null) {
              java.util.Properties properties=new java.util.Properties();
              FileOutputStream outputStream=new FileOutputStream(tokenText.getText());
              properties.setProperty(""String_Node_Str"",token.getRefresh_token());
              FileWriter w=new FileWriter(tokenText.getText());
              properties.store(w,""String_Node_Str"");
              w.close();
              result=sfMgr.login(token.getAccess_token(),endpoint,Integer.parseInt(timeOut),false);
            }
            if (!result) {
              String mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
              new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,errors);
            }
 else {
              loginOk=true;
              MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            }
          }
 else {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
          }
        }
 catch (        Exception e1) {
          errors=e1.getMessage();
        }
        if (loginOk) {
          checkFieldsValue();
        }
      }
    }
  }
);
}",0.9985678305101486
127124,"public static String getBundlePath(String bundleName){
  Bundle refBundle=Platform.getBundle(bundleName);
  if (refBundle != null) {
    String bundlePath=refBundle.getLocation();
    String prefix=""String_Node_Str"";
    int prefixPos=bundlePath.lastIndexOf(prefix);
    if (prefixPos >= 0) {
      bundlePath=bundlePath.substring(prefixPos + prefix.length(),bundlePath.length() - 1);
      return bundlePath;
    }
  }
  return ""String_Node_Str"";
}","public static String getBundlePath(String bundleName){
  String bundlePath=""String_Node_Str"";
  Bundle refBundle=Platform.getBundle(bundleName);
  if (refBundle != null) {
    try {
      URL resource=refBundle.getEntry(""String_Node_Str"");
      bundlePath=FileLocator.toFileURL(resource).getPath();
      bundlePath=bundlePath.substring(0,bundlePath.length() - 1);
    }
 catch (    IOException e) {
      log.error(e);
    }
  }
  return bundlePath;
}",0.2261640798226164
127125,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final RepositoryNode other=(RepositoryNode)obj;
  if (this.type != ENodeType.SIMPLE_FOLDER) {
    if (null != this.id && null != other.id && !this.id.equals(other.id)) {
      return false;
    }
  }
  if (this.properties == null) {
    if (other.properties != null) {
      return false;
    }
  }
 else   if (!this.properties.equals(other.properties)) {
    return false;
  }
  if (this.type == null) {
    if (other.type != null) {
      return false;
    }
  }
 else   if (!this.type.equals(other.type)) {
    return false;
  }
  if (this.parent == null) {
    if (other.parent != null) {
      return false;
    }
  }
 else   if (!this.parent.equals(other.parent)) {
    return false;
  }
  if (this.getLabel() == null) {
    if (other.getLabel() != null) {
      return false;
    }
  }
 else   if (!this.getLabel().equals(other.getLabel())) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final RepositoryNode other=(RepositoryNode)obj;
  if (this.type != ENodeType.SIMPLE_FOLDER) {
    if (null != this.id && null != other.id && !this.id.equals(other.id)) {
      return false;
    }
  }
  if (this.properties == null) {
    if (other.properties != null) {
      return false;
    }
  }
 else   if (!this.properties.equals(other.properties)) {
    return false;
  }
  if (this.type == null) {
    if (other.type != null) {
      return false;
    }
  }
 else   if (!this.type.equals(other.type)) {
    return false;
  }
  if (this.parent == null) {
    if (other.parent != null) {
      return false;
    }
  }
 else   if (!this.parent.equals(other.parent)) {
    return false;
  }
  if (this.object == null) {
    if (other.object != null) {
      return false;
    }
  }
 else {
    if (object.getVersion() == null) {
      if (other.object.getVersion() != null) {
        return false;
      }
    }
 else     if (!object.getVersion().equals(other.object.getVersion())) {
      return false;
    }
  }
  if (this.getLabel() == null) {
    if (other.getLabel() != null) {
      return false;
    }
  }
 else   if (!this.getLabel().equals(other.getLabel())) {
    return false;
  }
  return true;
}",0.8699154248892469
127126,"public void expandNode(TreeViewer viewer,IRepositoryNode repoNode,int expandLevel){
  if (repoNode != null) {
    RepositoryNode parent=repoNode.getParent();
    if (parent != null) {
      if (parent instanceof ProjectRepositoryNode && parent.getParent() == null) {
      }
 else {
        expandNode(viewer,parent,expandLevel);
      }
      viewer.expandToLevel(repoNode,expandLevel);
    }
  }
}","public void expandNode(TreeViewer viewer,IRepositoryNode repoNode,int expandLevel){
  if (repoNode != null && viewer != null) {
    RepositoryNode parent=repoNode.getParent();
    if (parent != null) {
      if (parent instanceof ProjectRepositoryNode && parent.getParent() == null) {
      }
 else {
        expandNode(viewer,parent,expandLevel);
      }
      viewer.expandToLevel(repoNode,expandLevel);
    }
  }
}",0.9779411764705882
127127,"@Override public void run(IProgressMonitor monitor) throws CoreException {
  DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
  EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
  EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
  if (PluginChecker.isTDQLoaded()) {
    saveMetaData();
    ITDQRepositoryService tdqRepositoryService=null;
    boolean needUpdateAnalysis=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
    }
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
        return;
      }
    }
    generateOriginalColumnsMap(dataPackageFromOrignalConnection);
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    replaceUUidsForColumnsAndTables(copyDataPackage);
    saveMetaData();
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
    }
  }
 else {
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    saveMetaData();
  }
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
  temConnection=null;
}","@Override public void run(IProgressMonitor monitor) throws CoreException {
  DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
  if (ExtractMetaDataUtils.getInstance().isUseAllSynonyms()) {
    EMap<String,String> map=connection.getParameters();
    if (map.containsKey(ISUSEDINDI)) {
      map.removeKey(ISUSEDINDI);
    }
    map.put(ISUSEDINDI,""String_Node_Str"");
  }
  EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
  EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
  if (PluginChecker.isTDQLoaded()) {
    saveMetaData();
    ITDQRepositoryService tdqRepositoryService=null;
    boolean needUpdateAnalysis=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
    }
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
        return;
      }
    }
    generateOriginalColumnsMap(dataPackageFromOrignalConnection);
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    replaceUUidsForColumnsAndTables(copyDataPackage);
    saveMetaData();
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
    }
  }
 else {
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    saveMetaData();
  }
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
  temConnection=null;
}",0.939152119700748
127128,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
        EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
        EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
        if (PluginChecker.isTDQLoaded()) {
          saveMetaData();
          ITDQRepositoryService tdqRepositoryService=null;
          boolean needUpdateAnalysis=false;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
          }
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
              return;
            }
          }
          generateOriginalColumnsMap(dataPackageFromOrignalConnection);
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          replaceUUidsForColumnsAndTables(copyDataPackage);
          saveMetaData();
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
          }
        }
 else {
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          saveMetaData();
        }
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
        list.add(repositoryObject);
        CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
        temConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
        if (ExtractMetaDataUtils.getInstance().isUseAllSynonyms()) {
          EMap<String,String> map=connection.getParameters();
          if (map.containsKey(ISUSEDINDI)) {
            map.removeKey(ISUSEDINDI);
          }
          map.put(ISUSEDINDI,""String_Node_Str"");
        }
        EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
        EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
        if (PluginChecker.isTDQLoaded()) {
          saveMetaData();
          ITDQRepositoryService tdqRepositoryService=null;
          boolean needUpdateAnalysis=false;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
          }
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
              return;
            }
          }
          generateOriginalColumnsMap(dataPackageFromOrignalConnection);
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          replaceUUidsForColumnsAndTables(copyDataPackage);
          saveMetaData();
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
          }
        }
 else {
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          saveMetaData();
        }
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
        list.add(repositoryObject);
        CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
        temConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    return true;
  }
 else {
    return false;
  }
}",0.949683321604504
127129,"@Override public void partVisible(IWorkbenchPartReference partRef){
  refreshRepViewDescription(partRef);
}","@Override public void partVisible(IWorkbenchPartReference partRef){
  refreshRepViewDescription(partRef);
  if (partRef != null && IRepositoryView.VIEW_ID.equals(partRef.getId())) {
    IViewPart viewPart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(IJobSettingsView.ID);
    if (viewPart != null && viewPart instanceof ISelectionChangedListener) {
      ISelectionChangedListener listener=(ISelectionChangedListener)viewPart;
      IWorkbenchPart part=partRef.getPart(false);
      if (part instanceof CommonNavigator) {
        CommonViewer repViewer=((CommonNavigator)part).getCommonViewer();
        if (((RepoViewCommonNavigator)repViewer.getCommonNavigator()).getViewer() != null) {
          ((RepoViewCommonNavigator)repViewer.getCommonNavigator()).getViewer().addSelectionChangedListener(listener);
        }
      }
    }
  }
}",0.2190378710337768
127130,"@Override public void partClosed(IWorkbenchPartReference partRef){
  if (IRepositoryView.VIEW_ID.equals(partRef.getId())) {
    PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().removePartListener(this);
  }
}","@Override public void partClosed(IWorkbenchPartReference partRef){
  if (partRef != null && IRepositoryView.VIEW_ID.equals(partRef.getId())) {
    PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().removePartListener(this);
    if (PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage() != null) {
      IViewPart viewPart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(IJobSettingsView.ID);
      if (viewPart != null && viewPart instanceof ISelectionChangedListener) {
        ISelectionChangedListener listener=(ISelectionChangedListener)viewPart;
        IWorkbenchPart part=partRef.getPart(false);
        if (part instanceof CommonNavigator) {
          CommonViewer repViewer=((CommonNavigator)part).getCommonViewer();
          if (((RepoViewCommonNavigator)repViewer.getCommonNavigator()).getViewer() != null) {
            ((RepoViewCommonNavigator)repViewer.getCommonNavigator()).getViewer().removeSelectionChangedListener(listener);
          }
        }
      }
    }
  }
}",0.3580922595777951
127131,"@Override public void importItemRecord(IProgressMonitor monitor,ResourcesManager resManager,ItemRecord selectedItemRecord,boolean overwrite,IPath destinationPath,Set<String> overwriteDeletedItems,Set<String> idDeletedBeforeImport){
  monitor.subTask(Messages.getString(""String_Node_Str"",selectedItemRecord.getItemName()));
  resolveItem(resManager,selectedItemRecord);
  final Item item=selectedItemRecord.getItem();
  if (item != null) {
    ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=checkAndCreatePath(selectedItemRecord,destinationPath);
    try {
      Item tmpItem=item;
      String id=selectedItemRecord.getProperty().getId();
      IRepositoryViewObject lastVersion=selectedItemRecord.getExistingItemWithSameId();
      if (lastVersion != null && overwrite && !selectedItemRecord.isLocked() && (selectedItemRecord.getState() == State.ID_EXISTED || selectedItemRecord.getState() == State.NAME_EXISTED || selectedItemRecord.getState() == State.NAME_AND_ID_EXISTED) && !ImportCacheHelper.getInstance().getDeletedItems().contains(id)) {
        if (overwriteDeletedItems != null && !overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (selectedItemRecord.getState().equals(ItemRecord.State.NAME_EXISTED) || selectedItemRecord.getState().equals(ItemRecord.State.NAME_AND_ID_EXISTED)) {
          if (idDeletedBeforeImport != null && !idDeletedBeforeImport.contains(id)) {
            List<IRepositoryViewObject> allVersionToDelete=repFactory.getAllVersion(ProjectManager.getInstance().getCurrentProject(),lastVersion.getId(),false);
            for (            IRepositoryViewObject currentVersion : allVersionToDelete) {
              repFactory.forceDeleteObjectPhysical(lastVersion,currentVersion.getVersion());
            }
            idDeletedBeforeImport.add(id);
          }
        }
        lastVersion=null;
      }
      User author=selectedItemRecord.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          tmpItem.getProperty().setAuthor(null);
        }
      }
      beforeCreatingItem(selectedItemRecord);
      final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
      if (lastVersion == null || selectedItemRecord.getState().equals(ItemRecord.State.ID_EXISTED)) {
        repFactory.create(tmpItem,path,true);
        afterCreatedItem(resManager,selectedItemRecord);
        selectedItemRecord.setImported(true);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        afterForceCreatedItem(resManager,selectedItemRecord);
        selectedItemRecord.setImported(true);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        selectedItemRecord.addError(e.getMessage());
        logError(e);
      }
      if (selectedItemRecord.isImported()) {
        selectedItemRecord.setImportPath(path.toPortableString());
        selectedItemRecord.setRepositoryType(itemType);
        selectedItemRecord.setItemId(selectedItemRecord.getProperty().getId());
        selectedItemRecord.setItemVersion(selectedItemRecord.getProperty().getVersion());
        repObjectcache.addToCache(tmpItem);
      }
      if (tmpItem.getState() != null && itemType != null) {
        final Set<String> folders=ImportCacheHelper.getInstance().getRestoreFolder().getFolders(itemType);
        if (folders != null) {
          for (          String folderPath : folders) {
            if (folderPath != null && folderPath.equals(path.toString())) {
              FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
              if (folderItem != null) {
                folderItem.getState().setDeleted(false);
                while (!(folderItem.getParent() instanceof Project)) {
                  folderItem=(FolderItem)folderItem.getParent();
                  if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                    break;
                  }
                  folderItem.getState().setDeleted(false);
                }
              }
              break;
            }
          }
        }
      }
    }
 catch (    Exception e) {
      selectedItemRecord.addError(e.getMessage());
      logError(e);
    }
  }
  String label=selectedItemRecord.getLabel();
  for (  Resource resource : selectedItemRecord.getResourceSet().getResources()) {
    if (!(resource instanceof ByteArrayResource)) {
      resource.unload();
    }
  }
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
  applyMigrationTasks(selectedItemRecord,monitor);
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
}","@Override public void importItemRecord(IProgressMonitor monitor,ResourcesManager resManager,ItemRecord selectedItemRecord,boolean overwrite,IPath destinationPath,Set<String> overwriteDeletedItems,Set<String> idDeletedBeforeImport){
  monitor.subTask(Messages.getString(""String_Node_Str"",selectedItemRecord.getItemName()));
  resolveItem(resManager,selectedItemRecord);
  final Item item=selectedItemRecord.getItem();
  if (item != null) {
    ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=checkAndCreatePath(selectedItemRecord,destinationPath);
    try {
      Item tmpItem=item;
      String id=selectedItemRecord.getProperty().getId();
      IRepositoryViewObject lastVersion=selectedItemRecord.getExistingItemWithSameId();
      if (lastVersion != null && overwrite && !selectedItemRecord.isLocked() && (selectedItemRecord.getState() == State.ID_EXISTED || selectedItemRecord.getState() == State.NAME_EXISTED || selectedItemRecord.getState() == State.NAME_AND_ID_EXISTED) && !ImportCacheHelper.getInstance().getDeletedItems().contains(id)) {
        if (overwriteDeletedItems != null && !overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (selectedItemRecord.getState().equals(ItemRecord.State.NAME_EXISTED) || selectedItemRecord.getState().equals(ItemRecord.State.NAME_AND_ID_EXISTED)) {
          if (idDeletedBeforeImport != null && !idDeletedBeforeImport.contains(id)) {
            List<IRepositoryViewObject> allVersionToDelete=repFactory.getAllVersion(ProjectManager.getInstance().getCurrentProject(),lastVersion.getId(),false);
            for (            IRepositoryViewObject currentVersion : allVersionToDelete) {
              repFactory.forceDeleteObjectPhysical(lastVersion,currentVersion.getVersion());
            }
            idDeletedBeforeImport.add(id);
          }
        }
        lastVersion=null;
      }
      User author=selectedItemRecord.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          tmpItem.getProperty().setAuthor(null);
        }
      }
      beforeCreatingItem(selectedItemRecord);
      final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
      if (lastVersion == null || selectedItemRecord.getState().equals(ItemRecord.State.ID_EXISTED)) {
        repFactory.create(tmpItem,path,true);
        afterCreatedItem(resManager,selectedItemRecord);
        selectedItemRecord.setImported(true);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        afterForceCreatedItem(resManager,selectedItemRecord);
        selectedItemRecord.setImported(true);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        selectedItemRecord.addError(e.getMessage());
        logError(e);
      }
      if (selectedItemRecord.isImported()) {
        selectedItemRecord.setImportPath(path.toPortableString());
        selectedItemRecord.setRepositoryType(itemType);
        selectedItemRecord.setItemId(selectedItemRecord.getProperty().getId());
        selectedItemRecord.setItemVersion(selectedItemRecord.getProperty().getVersion());
        repObjectcache.addToCache(tmpItem);
      }
      if (tmpItem.getState() != null && itemType != null) {
        final Set<String> folders=ImportCacheHelper.getInstance().getRestoreFolder().getFolders(itemType);
        if (folders != null) {
          for (          String folderPath : folders) {
            if (folderPath != null && folderPath.equals(path.toString())) {
              FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
              if (folderItem != null) {
                folderItem.getState().setDeleted(false);
                while (!(folderItem.getParent() instanceof Project)) {
                  folderItem=(FolderItem)folderItem.getParent();
                  if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                    break;
                  }
                  folderItem.getState().setDeleted(false);
                }
              }
              break;
            }
          }
        }
      }
    }
 catch (    Exception e) {
      selectedItemRecord.addError(e.getMessage());
      logError(e);
    }
  }
  EList<Resource> resources=selectedItemRecord.getResourceSet().getResources();
  Iterator<Resource> iterator=resources.iterator();
  while (iterator.hasNext()) {
    Resource res=iterator.next();
    if (res != null && !(res instanceof ByteArrayResource)) {
      res.unload();
      iterator.remove();
    }
  }
  String label=selectedItemRecord.getLabel();
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
  applyMigrationTasks(selectedItemRecord,monitor);
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
}",0.9605238185613968
127132,"@Override public void fillActionBars(IActionBars actionBars){
  super.fillActionBars(actionBars);
  CopyAction copyActionInstance=CopyAction.getInstance();
  PasteAction pasteActionInstance=PasteAction.getInstance();
  actionBars.setGlobalActionHandler(ActionFactory.COPY.getId(),copyActionInstance);
  actionBars.setGlobalActionHandler(ActionFactory.PASTE.getId(),pasteActionInstance);
  actionBars.setGlobalActionHandler(ActionFactory.DELETE.getId(),DeleteAction.getInstance());
  if (copyActionInstance != null && pasteActionInstance != null && getContext() != null && getContext().getSelection() instanceof IStructuredSelection) {
    IStructuredSelection sel=(IStructuredSelection)getContext().getSelection();
    if (sel != null) {
      copyActionInstance.init(null,sel);
    }
  }
  TextActionHandler textActionHandler=new TextActionHandler(actionBars);
  textActionHandler.setCopyAction(copyActionInstance);
  textActionHandler.setPasteAction(pasteActionInstance);
  textActionHandler.setDeleteAction(DeleteAction.getInstance());
}","@Override public void fillActionBars(IActionBars actionBars){
  super.fillActionBars(actionBars);
  ProxyRepositoryFactory proxy=ProxyRepositoryFactory.getInstance();
  if (!proxy.getRepositoryContext().isOffline()) {
    CopyAction copyActionInstance=CopyAction.getInstance();
    PasteAction pasteActionInstance=PasteAction.getInstance();
    actionBars.setGlobalActionHandler(ActionFactory.COPY.getId(),copyActionInstance);
    actionBars.setGlobalActionHandler(ActionFactory.PASTE.getId(),pasteActionInstance);
    actionBars.setGlobalActionHandler(ActionFactory.DELETE.getId(),DeleteAction.getInstance());
    if (copyActionInstance != null && pasteActionInstance != null && getContext() != null && getContext().getSelection() instanceof IStructuredSelection) {
      IStructuredSelection sel=(IStructuredSelection)getContext().getSelection();
      if (sel != null) {
        copyActionInstance.init(null,sel);
      }
    }
    TextActionHandler textActionHandler=new TextActionHandler(actionBars);
    textActionHandler.setCopyAction(copyActionInstance);
    textActionHandler.setPasteAction(pasteActionInstance);
    textActionHandler.setDeleteAction(DeleteAction.getInstance());
  }
}",0.9310653536257834
127133,"/** 
 * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()
 */
@Override public void initializeDefaultPreferences(){
  IEclipsePreferences node=new DefaultScope().getNode(CorePlugin.getDefault().getBundle().getSymbolicName());
  IPath tempPath=new Path(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"");
  File tempFile=tempPath.toFile();
  if (!tempFile.exists()) {
    tempFile.mkdirs();
  }
  node.put(ITalendCorePrefConstants.FILE_PATH_TEMP,tempPath.toOSString());
  String os=Platform.getOS();
  String javaPath=System.getProperty(""String_Node_Str"");
  if (os.equals(Platform.OS_WIN32)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_WIN32_INTERPRETER);
  }
 else   if (os.equals(Platform.OS_LINUX)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_LINUX_INTERPRETER_PATH);
  }
  node.put(ITalendCorePrefConstants.LANGUAGE_SELECTOR,Locale.getDefault().getLanguage());
  node.put(ITalendCorePrefConstants.PREVIEW_LIMIT,""String_Node_Str"");
  node.putBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME,true);
  initializeUpdatePreference();
  final String perlEditorBundleName=""String_Node_Str"";
  final String editorsBundleName=""String_Node_Str"";
  final String editorLineNumberRuler=""String_Node_Str"";
  if (!CommonsPlugin.isHeadless()) {
    IPreferenceStore store=new ScopedPreferenceStore(new InstanceScope(),perlEditorBundleName);
    store.setValue(editorLineNumberRuler,true);
    store=new ScopedPreferenceStore(new InstanceScope(),editorsBundleName);
    store.setValue(editorLineNumberRuler,true);
    ColorManager.initDefaultColors(CorePlugin.getDefault().getPreferenceStore());
  }
  String languageType=Locale.getDefault().getLanguage();
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.LANGUAGE_SELECTOR,languageType);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_QUOTE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.AS400_SQL_SEG,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE,""String_Node_Str"");
  CorePlugin.getDefault().getPreferenceStore().setDefault(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE,""String_Node_Str"");
  CorePlugin.getDefault().getPreferenceStore().setDefault(MetadataTypeLengthConstants.PERL_FIELD_DEFAULT_TYPE,""String_Node_Str"");
  CorePlugin.getDefault().getPreferenceStore().setDefault(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_TYPE,""String_Node_Str"");
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATION,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.USE_CSS_TEMPLATE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.CONTEXT_GROUP_BY_SOURCE,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATESOURCECODE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.COMMAND_STR,ITalendCorePrefConstants.DEFAULT_COMMAND_STR);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_WARNING,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.FORBIDDEN_MAPPING_LENGTH_PREC_LOGIC,false);
}","/** 
 * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()
 */
@Override public void initializeDefaultPreferences(){
  IEclipsePreferences node=new DefaultScope().getNode(CorePlugin.getDefault().getBundle().getSymbolicName());
  IPath tempPath=new Path(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"");
  File tempFile=tempPath.toFile();
  if (!tempFile.exists()) {
    tempFile.mkdirs();
  }
  node.put(ITalendCorePrefConstants.FILE_PATH_TEMP,tempPath.toOSString());
  String os=Platform.getOS();
  String javaPath=System.getProperty(""String_Node_Str"");
  if (os.equals(Platform.OS_WIN32)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_WIN32_INTERPRETER);
  }
 else   if (os.equals(Platform.OS_LINUX)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_LINUX_INTERPRETER_PATH);
  }
  node.put(ITalendCorePrefConstants.LANGUAGE_SELECTOR,Locale.getDefault().getLanguage());
  node.put(ITalendCorePrefConstants.PREVIEW_LIMIT,""String_Node_Str"");
  node.putBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME,true);
  initializeUpdatePreference();
  final String perlEditorBundleName=""String_Node_Str"";
  final String editorsBundleName=""String_Node_Str"";
  final String editorLineNumberRuler=""String_Node_Str"";
  if (!CommonsPlugin.isHeadless()) {
    Display display=DisplayUtils.getDisplay();
    if (display != null) {
      display.syncExec(new Runnable(){
        @Override public void run(){
          initPreference(perlEditorBundleName,editorsBundleName,editorLineNumberRuler);
        }
      }
);
    }
 else {
      initPreference(perlEditorBundleName,editorsBundleName,editorLineNumberRuler);
    }
  }
  String languageType=Locale.getDefault().getLanguage();
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.LANGUAGE_SELECTOR,languageType);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_QUOTE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.AS400_SQL_SEG,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE,""String_Node_Str"");
  CorePlugin.getDefault().getPreferenceStore().setDefault(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE,""String_Node_Str"");
  CorePlugin.getDefault().getPreferenceStore().setDefault(MetadataTypeLengthConstants.PERL_FIELD_DEFAULT_TYPE,""String_Node_Str"");
  CorePlugin.getDefault().getPreferenceStore().setDefault(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_TYPE,""String_Node_Str"");
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATION,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.USE_CSS_TEMPLATE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.CONTEXT_GROUP_BY_SOURCE,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATESOURCECODE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.COMMAND_STR,ITalendCorePrefConstants.DEFAULT_COMMAND_STR);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_WARNING,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.FORBIDDEN_MAPPING_LENGTH_PREC_LOGIC,false);
}",0.9235302371264208
127134,"/** 
 * DOC ocarbone Comment method ""performCancel"". Unlock the IRepositoryObject before the close of the wizard.
 * @param IRepositoryObject
 */
public boolean performCancel(){
  if (repositoryObject != null)   repositoryObject.getProperty().eResource().unload();
  closeLockStrategy();
  return true;
}","/** 
 * DOC ocarbone Comment method ""performCancel"". Unlock the IRepositoryObject before the close of the wizard.
 * @param IRepositoryObject
 */
@Override public boolean performCancel(){
  if (repositoryObject != null && repositoryObject.getProperty().eResource() != null) {
    repositoryObject.getProperty().eResource().unload();
  }
  closeLockStrategy();
  return true;
}",0.8852941176470588
127135,"public boolean isLastVersion(Item item){
  if (item.getProperty() != null) {
    try {
      List<IRepositoryViewObject> allVersion=ProxyRepositoryFactory.getInstance().getAllVersion(item.getProperty().getId());
      if (allVersion != null && !allVersion.isEmpty()) {
        String lastVersion=VersionUtils.DEFAULT_VERSION;
        for (        IRepositoryViewObject object : allVersion) {
          if (VersionUtils.compareTo(object.getVersion(),lastVersion) > 0) {
            lastVersion=object.getVersion();
          }
        }
        if (VersionUtils.compareTo(item.getProperty().getVersion(),lastVersion) == 0) {
          return true;
        }
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
  return false;
}","public boolean isLastVersion(Item item){
  if (item.getProperty() != null) {
    if (item.getProperty().getId() == null) {
      return true;
    }
    try {
      List<IRepositoryViewObject> allVersion=ProxyRepositoryFactory.getInstance().getAllVersion(item.getProperty().getId());
      if (allVersion != null && !allVersion.isEmpty()) {
        String lastVersion=VersionUtils.DEFAULT_VERSION;
        for (        IRepositoryViewObject object : allVersion) {
          if (VersionUtils.compareTo(object.getVersion(),lastVersion) > 0) {
            lastVersion=object.getVersion();
          }
        }
        if (VersionUtils.compareTo(item.getProperty().getVersion(),lastVersion) == 0) {
          return true;
        }
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
  return false;
}",0.9559826410415376
127136,"public void expandNode(TreeViewer viewer,IRepositoryNode repoNode,int expandLevel){
  if (repoNode != null) {
    RepositoryNode parent=repoNode.getParent();
    if (parent != null) {
      if (parent instanceof ProjectRepositoryNode && parent.getParent() == null) {
      }
 else {
        expandNode(viewer,parent,expandLevel);
      }
      viewer.expandToLevel(repoNode,expandLevel);
    }
  }
}","public void expandNode(TreeViewer viewer,IRepositoryNode repoNode,int expandLevel){
  if (repoNode != null && viewer != null) {
    RepositoryNode parent=repoNode.getParent();
    if (parent != null) {
      if (parent instanceof ProjectRepositoryNode && parent.getParent() == null) {
      }
 else {
        expandNode(viewer,parent,expandLevel);
      }
      viewer.expandToLevel(repoNode,expandLevel);
    }
  }
}",0.9779411764705882
127137,"@Override public void fillActionBars(IActionBars actionBars){
  super.fillActionBars(actionBars);
  CopyAction copyActionInstance=CopyAction.getInstance();
  PasteAction pasteActionInstance=PasteAction.getInstance();
  actionBars.setGlobalActionHandler(ActionFactory.COPY.getId(),copyActionInstance);
  actionBars.setGlobalActionHandler(ActionFactory.PASTE.getId(),pasteActionInstance);
  actionBars.setGlobalActionHandler(ActionFactory.DELETE.getId(),DeleteAction.getInstance());
  if (copyActionInstance != null && pasteActionInstance != null && getContext() != null && getContext().getSelection() instanceof IStructuredSelection) {
    IStructuredSelection sel=(IStructuredSelection)getContext().getSelection();
    if (sel != null) {
      copyActionInstance.init(null,sel);
    }
  }
  TextActionHandler textActionHandler=new TextActionHandler(actionBars);
  textActionHandler.setCopyAction(copyActionInstance);
  textActionHandler.setPasteAction(pasteActionInstance);
  textActionHandler.setDeleteAction(DeleteAction.getInstance());
}","@Override public void fillActionBars(IActionBars actionBars){
  super.fillActionBars(actionBars);
  ProxyRepositoryFactory proxy=ProxyRepositoryFactory.getInstance();
  if (!proxy.getRepositoryContext().isOffline()) {
    CopyAction copyActionInstance=CopyAction.getInstance();
    PasteAction pasteActionInstance=PasteAction.getInstance();
    actionBars.setGlobalActionHandler(ActionFactory.COPY.getId(),copyActionInstance);
    actionBars.setGlobalActionHandler(ActionFactory.PASTE.getId(),pasteActionInstance);
    actionBars.setGlobalActionHandler(ActionFactory.DELETE.getId(),DeleteAction.getInstance());
    if (copyActionInstance != null && pasteActionInstance != null && getContext() != null && getContext().getSelection() instanceof IStructuredSelection) {
      IStructuredSelection sel=(IStructuredSelection)getContext().getSelection();
      if (sel != null) {
        copyActionInstance.init(null,sel);
      }
    }
    TextActionHandler textActionHandler=new TextActionHandler(actionBars);
    textActionHandler.setCopyAction(copyActionInstance);
    textActionHandler.setPasteAction(pasteActionInstance);
    textActionHandler.setDeleteAction(DeleteAction.getInstance());
  }
}",0.9310653536257834
127138,"public RepoViewLinkHelper(){
  this.repoViewLinkerReader=new RepoViewLinkerRegistryReader();
}","public RepoViewLinkHelper(){
  this.repoViewLinkerReader=RepoViewLinkerRegistryReader.getInstance();
}",0.9183673469387756
127139,"public IRepoViewLinker[] getAllRepoViewLinkers(){
  if (this.allLinkerRecorder == null) {
    this.allLinkerRecorder=new ArrayList<LinkerRecorder>();
    readRegistry();
    Collections.sort(this.allLinkerRecorder,new Comparator<LinkerRecorder>(){
      @Override public int compare(      LinkerRecorder lr1,      LinkerRecorder lr2){
        return lr2.priority.compareTo(lr1.priority);
      }
    }
);
  }
  IRepoViewLinker[] linkers=new IRepoViewLinker[this.allLinkerRecorder.size()];
  int index=0;
  for (  LinkerRecorder recorder : this.allLinkerRecorder) {
    linkers[index++]=recorder.linker;
  }
  return linkers;
}","public synchronized IRepoViewLinker[] getAllRepoViewLinkers(){
  if (this.allLinkerRecorder == null) {
    this.allLinkerRecorder=new ArrayList<LinkerRecorder>();
    readRegistry();
    Collections.sort(this.allLinkerRecorder,new Comparator<LinkerRecorder>(){
      @Override public int compare(      LinkerRecorder lr1,      LinkerRecorder lr2){
        return lr2.priority.compareTo(lr1.priority);
      }
    }
);
  }
  IRepoViewLinker[] linkers=new IRepoViewLinker[this.allLinkerRecorder.size()];
  int index=0;
  for (  LinkerRecorder recorder : this.allLinkerRecorder) {
    linkers[index++]=recorder.linker;
  }
  return linkers;
}",0.9897233201581028
127140,"public RepoViewLinkerRegistryReader(){
  super(FrameworkUtil.getBundle(RepoViewLinkerRegistryReader.class).getSymbolicName(),VIEW_LINKER_EXTENSION_POINT);
}","private RepoViewLinkerRegistryReader(){
  super(FrameworkUtil.getBundle(RepoViewLinkerRegistryReader.class).getSymbolicName(),VIEW_LINKER_EXTENSION_POINT);
}",0.9712460063897764
127141,"protected void deleteElements(final IProxyRepositoryFactory factory,final RepositoryNode currentNode) throws PersistenceException, BusinessException {
  if (!validElement(currentNode)) {
    return;
  }
  final IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      factory.save(item);
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          for (          IEditorReference editors : page.getEditorReferences()) {
            String nameInEditor=editors.getName();
            if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
              page.closeEditor(editors.getEditor(false),false);
            }
          }
          if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
            if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
              for (              IRepositoryNode curNode : currentNode.getChildren()) {
                deleteElements(factory,(RepositoryNode)curNode);
              }
              factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
            }
 else {
              for (              IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
                handler.deleteNode(objToDelete);
              }
              ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
              if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
                forceBuild=true;
              }
              if (!forceBuild) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
                  ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
                  if (nodeType == camelService.getBeansType()) {
                    forceBuild=true;
                  }
                }
              }
              factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
            }
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
}","protected void deleteElements(final IProxyRepositoryFactory factory,final RepositoryNode currentNode) throws PersistenceException, BusinessException {
  if (!validElement(currentNode)) {
    return;
  }
  final IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      factory.save(item);
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          for (          IEditorReference editors : page.getEditorReferences()) {
            IEditorInput nameInEditor=editors.getEditorInput();
            if (isRelation(nameInEditor,objToDelete.getId())) {
              page.closeEditor(editors.getEditor(false),false);
            }
          }
          if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
            if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
              for (              IRepositoryNode curNode : currentNode.getChildren()) {
                deleteElements(factory,(RepositoryNode)curNode);
              }
              factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
            }
 else {
              for (              IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
                handler.deleteNode(objToDelete);
              }
              ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
              if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
                forceBuild=true;
              }
              if (!forceBuild) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
                  ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
                  if (nodeType == camelService.getBeansType()) {
                    forceBuild=true;
                  }
                }
              }
              factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
            }
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
}",0.9708312257629405
127142,"@Override public void run(){
  try {
    IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    for (    IEditorReference editors : page.getEditorReferences()) {
      String nameInEditor=editors.getName();
      if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
        page.closeEditor(editors.getEditor(false),false);
      }
    }
    if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
      if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
        for (        IRepositoryNode curNode : currentNode.getChildren()) {
          deleteElements(factory,(RepositoryNode)curNode);
        }
        factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
      }
 else {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          handler.deleteNode(objToDelete);
        }
        ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
        if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
          forceBuild=true;
        }
        if (!forceBuild) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
            ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
            if (nodeType == camelService.getBeansType()) {
              forceBuild=true;
            }
          }
        }
        factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","@Override public void run(){
  try {
    IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    for (    IEditorReference editors : page.getEditorReferences()) {
      IEditorInput nameInEditor=editors.getEditorInput();
      if (isRelation(nameInEditor,objToDelete.getId())) {
        page.closeEditor(editors.getEditor(false),false);
      }
    }
    if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
      if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
        for (        IRepositoryNode curNode : currentNode.getChildren()) {
          deleteElements(factory,(RepositoryNode)curNode);
        }
        factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
      }
 else {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          handler.deleteNode(objToDelete);
        }
        ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
        if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
          forceBuild=true;
        }
        if (!forceBuild) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
            ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
            if (nodeType == camelService.getBeansType()) {
              forceBuild=true;
            }
          }
        }
        factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9593820084724644
127143,"@Override protected void addFieldsListeners(){
  webServiceUrlText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setWebServiceUrl(webServiceUrlText.getText());
        setCheckEnable();
      }
    }
  }
);
  userNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setUserName(userNameText.getText());
        setCheckEnable();
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setPassword(passwordText.getText());
        setCheckEnable();
      }
    }
  }
);
  batchSizeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setBatchSize(batchSizeText.getText());
        setCheckEnable();
      }
    }
  }
);
  timeOutText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        String timeOutStr=timeOutText.getText();
        if (!""String_Node_Str"".equals(timeOutStr)) {
          try {
            Integer.parseInt(timeOutStr);
            getConnection().setTimeOut(timeOutStr);
          }
 catch (          NumberFormatException e1) {
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
          }
        }
        setCheckEnable();
      }
    }
  }
);
  useProxyBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean selection=useProxyBtn.getSelection();
      checkFieldsValue();
      enableProxyParameters(selection);
      getConnection().setUseProxy(selection);
      if (selection && useHttpBtn.getSelection()) {
        getConnection().setUseHttpProxy(false);
        useHttpBtn.setSelection(false);
      }
    }
  }
);
  useHttpBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean selection=useHttpBtn.getSelection();
      checkFieldsValue();
      enableProxyParameters(selection);
      getConnection().setUseHttpProxy(selection);
      if (selection && useProxyBtn.getSelection()) {
        getConnection().setUseProxy(false);
        useProxyBtn.setSelection(false);
      }
    }
  }
);
  proxyHostText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyHost(proxyHostText.getText());
      }
    }
  }
);
  proxyPortText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyPort(proxyPortText.getText());
      }
    }
  }
);
  proxyUsernameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyUsername(proxyUsernameText.getText());
      }
    }
  }
);
  proxyPasswordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyPassword(proxyPasswordText.getText());
      }
    }
  }
);
  authBtn.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setLoginType(authBtn.getItem(authBtn.getSelectionIndex()));
        setCheckEnable();
      }
    }
  }
);
  webServiceUrlTextForOAuth.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setWebServiceUrlTextForOAuth(webServiceUrlTextForOAuth.getText());
        setCheckEnable();
      }
    }
  }
);
  consumeKeyText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setConsumeKey(consumeKeyText.getText());
        setCheckEnable();
      }
    }
  }
);
  consumeKeySecretText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setConsumeSecret(consumeKeySecretText.getText());
        setCheckEnable();
      }
    }
  }
);
  callbackHostText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setCallbackHost(callbackHostText.getText());
        setCheckEnable();
      }
    }
  }
);
  callbackPortText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setCallbackPort(callbackPortText.getText());
        setCheckEnable();
      }
    }
  }
);
  apiVersionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setSalesforceVersion(apiVersionText.getText());
        setCheckEnable();
      }
    }
  }
);
  tokenText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setToken(tokenText.getText());
        setCheckEnable();
      }
    }
  }
);
  checkButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
      }
      testSalesforceLogin();
      if (authBtn.getSelectionIndex() == 0) {
        String proxy=null;
        if (useProxyBtn.getSelection()) {
          proxy=SalesforceModuleParseAPI.USE_SOCKS_PROXY;
        }
 else         if (useHttpBtn.getSelection()) {
          proxy=SalesforceModuleParseAPI.USE_HTTP_PROXY;
        }
        SalesforceModuleParseAPI checkSalesfoceLogin=checkSalesfoceLogin(proxy,endPoint,username,pwd,timeOut,proxyHostText.getText(),proxyPortText.getText(),proxyUsernameText.getText(),proxyPasswordText.getText());
        if (checkSalesfoceLogin != null) {
          setSalesforceModuleParseAPI(checkSalesfoceLogin);
          loginOk=checkSalesfoceLogin.getCurrentAPI().isLogin();
        }
        if (loginOk) {
          checkFieldsValue();
        }
      }
 else {
        String errors=null;
        final OAuthClient client=new OAuthClient();
        client.setBaseOAuthURL(endPointForOAuth);
        client.setCallbackHost(callbackHost);
        client.setCallbackPort(Integer.parseInt(callbackPort));
        client.setClientID(consumeKey);
        client.setClientSecret(consumeKeySrcret);
        boolean result=false;
        try {
          client.startServer();
          Token token=null;
          if (TalendPropertiesUtil.isEnabledUseBrowser()) {
            Display.getDefault().syncExec(new Runnable(){
              @Override public void run(){
                BrowerDialog brower;
                try {
                  Shell shell=new Shell(Display.getDefault(),SWT.ON_TOP);
                  brower=new BrowerDialog(shell,client.getUrl());
                  if (Window.OK == brower.open()) {
                    code=client.getServer().getCode();
                  }
 else {
                    return;
                  }
                }
 catch (                Exception e2) {
                  ExceptionHandler.process(e2);
                }
              }
            }
);
          }
 else {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          client.stopServer();
          if (code != null && !code.equals(""String_Node_Str"")) {
            token=client.getTokenForWizard(code);
            org.talend.salesforce.SforceManagement sfMgr=new org.talend.salesforce.SforceManagementImpl();
            String endpoint=null;
            endpoint=client.getSOAPEndpoint(token,apiVersion);
            if (token != null) {
              java.util.Properties properties=new java.util.Properties();
              FileOutputStream outputStream=new FileOutputStream(tokenText.getText());
              properties.setProperty(""String_Node_Str"",token.getRefresh_token());
              FileWriter w=new FileWriter(tokenText.getText());
              properties.store(w,""String_Node_Str"");
              w.close();
              result=sfMgr.login(token.getAccess_token(),endpoint,Integer.parseInt(timeOut),false);
            }
            if (!result) {
              String mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
              new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,errors);
            }
 else {
              loginOk=true;
              MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            }
          }
 else {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
          }
        }
 catch (        Exception e1) {
          errors=e1.getMessage();
        }
        if (loginOk) {
          checkFieldsValue();
        }
      }
    }
  }
);
}","@Override protected void addFieldsListeners(){
  webServiceUrlText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setWebServiceUrl(webServiceUrlText.getText());
        setCheckEnable();
      }
    }
  }
);
  userNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setUserName(userNameText.getText());
        setCheckEnable();
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setPassword(passwordText.getText());
        setCheckEnable();
      }
    }
  }
);
  batchSizeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setBatchSize(batchSizeText.getText());
        setCheckEnable();
      }
    }
  }
);
  timeOutText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        String timeOutStr=timeOutText.getText();
        if (!""String_Node_Str"".equals(timeOutStr)) {
          try {
            Integer.parseInt(timeOutStr);
            getConnection().setTimeOut(timeOutStr);
          }
 catch (          NumberFormatException e1) {
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
          }
        }
        setCheckEnable();
      }
    }
  }
);
  useProxyBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean selection=useProxyBtn.getSelection();
      checkFieldsValue();
      enableProxyParameters(selection);
      getConnection().setUseProxy(selection);
      if (selection && useHttpBtn.getSelection()) {
        getConnection().setUseHttpProxy(false);
        useHttpBtn.setSelection(false);
      }
    }
  }
);
  useHttpBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean selection=useHttpBtn.getSelection();
      checkFieldsValue();
      enableProxyParameters(selection);
      getConnection().setUseHttpProxy(selection);
      if (selection && useProxyBtn.getSelection()) {
        getConnection().setUseProxy(false);
        useProxyBtn.setSelection(false);
      }
    }
  }
);
  proxyHostText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyHost(proxyHostText.getText());
      }
    }
  }
);
  proxyPortText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyPort(proxyPortText.getText());
      }
    }
  }
);
  proxyUsernameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyUsername(proxyUsernameText.getText());
      }
    }
  }
);
  proxyPasswordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyPassword(proxyPasswordText.getText());
      }
    }
  }
);
  authBtn.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setLoginType(authBtn.getItem(authBtn.getSelectionIndex()));
        setCheckEnable();
      }
    }
  }
);
  webServiceUrlTextForOAuth.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setWebServiceUrlTextForOAuth(webServiceUrlTextForOAuth.getText());
        setCheckEnable();
      }
    }
  }
);
  consumeKeyText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setConsumeKey(consumeKeyText.getText());
        setCheckEnable();
      }
    }
  }
);
  consumeKeySecretText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setConsumeSecret(consumeKeySecretText.getText());
        setCheckEnable();
      }
    }
  }
);
  callbackHostText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setCallbackHost(callbackHostText.getText());
        setCheckEnable();
      }
    }
  }
);
  callbackPortText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setCallbackPort(callbackPortText.getText());
        setCheckEnable();
      }
    }
  }
);
  apiVersionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setSalesforceVersion(apiVersionText.getText());
        setCheckEnable();
      }
    }
  }
);
  tokenText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setToken(tokenText.getText());
        setCheckEnable();
      }
    }
  }
);
  checkButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
      }
      testSalesforceLogin();
      if (authBtn.getSelectionIndex() == 0) {
        String proxy=null;
        if (useProxyBtn.getSelection()) {
          proxy=SalesforceModuleParseAPI.USE_SOCKS_PROXY;
        }
 else         if (useHttpBtn.getSelection()) {
          proxy=SalesforceModuleParseAPI.USE_HTTP_PROXY;
        }
        SalesforceModuleParseAPI checkSalesfoceLogin=checkSalesfoceLogin(proxy,endPoint,username,pwd,timeOut,proxyHostText.getText(),proxyPortText.getText(),proxyUsernameText.getText(),proxyPasswordText.getText());
        if (checkSalesfoceLogin != null) {
          setSalesforceModuleParseAPI(checkSalesfoceLogin);
          loginOk=checkSalesfoceLogin.getCurrentAPI().isLogin();
        }
        if (loginOk) {
          checkFieldsValue();
        }
      }
 else {
        String errors=null;
        final OAuthClient client=new OAuthClient();
        client.setBaseOAuthURL(endPointForOAuth);
        client.setCallbackHost(callbackHost);
        client.setCallbackPort(Integer.parseInt(callbackPort));
        client.setClientID(consumeKey);
        client.setClientSecret(consumeKeySrcret);
        boolean result=false;
        try {
          client.startServer();
          Token token=null;
          if (TalendPropertiesUtil.isEnabledUseBrowser()) {
            Display.getDefault().syncExec(new Runnable(){
              @Override public void run(){
                BrowerDialog brower;
                try {
                  Shell shell=new Shell(Display.getDefault(),SWT.ON_TOP);
                  brower=new BrowerDialog(shell,client.getUrl());
                  if (Window.OK == brower.open()) {
                    code=client.getServer().getCode();
                  }
 else {
                    return;
                  }
                }
 catch (                Exception e2) {
                  ExceptionHandler.process(e2);
                }
              }
            }
);
          }
 else {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          Thread.sleep(100);
          client.stopServer();
          if (code != null && !code.equals(""String_Node_Str"")) {
            token=client.getTokenForWizard(code);
            org.talend.salesforce.SforceManagement sfMgr=new org.talend.salesforce.SforceManagementImpl();
            String endpoint=null;
            endpoint=client.getSOAPEndpoint(token,apiVersion);
            if (token != null) {
              java.util.Properties properties=new java.util.Properties();
              FileOutputStream outputStream=new FileOutputStream(tokenText.getText());
              properties.setProperty(""String_Node_Str"",token.getRefresh_token());
              FileWriter w=new FileWriter(tokenText.getText());
              properties.store(w,""String_Node_Str"");
              w.close();
              result=sfMgr.login(token.getAccess_token(),endpoint,Integer.parseInt(timeOut),false);
            }
            if (!result) {
              String mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
              new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,errors);
            }
 else {
              loginOk=true;
              MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            }
          }
 else {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
          }
        }
 catch (        Exception e1) {
          errors=e1.getMessage();
        }
        if (loginOk) {
          checkFieldsValue();
        }
      }
    }
  }
);
}",0.9985678305101486
127144,"private void downLoad(final IProgressMonitor monitor){
  SubMonitor subMonitor=SubMonitor.convert(monitor,Messages.getString(""String_Node_Str""),toDownload.size() + 1);
  final List<URL> downloadOk=new ArrayList<URL>();
  for (  final ModuleToInstall module : toDownload) {
    if (!monitor.isCanceled()) {
      monitor.subTask(module.getName());
      String librariesPath=LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA);
      File target=new File(librariesPath);
      boolean accepted;
      if (module.getUrl_download() != null && !""String_Node_Str"".equals(module.getUrl_download())) {
        try {
          boolean isLicenseAccepted=LibManagerUiPlugin.getDefault().getPreferenceStore().getBoolean(module.getLicenseType());
          accepted=isLicenseAccepted;
          if (!accepted) {
            subMonitor.worked(1);
            continue;
          }
          if (monitor.isCanceled()) {
            return;
          }
          File destination=new File(target.toString() + File.separator + module.getName());
          DownloadHelperWithProgress downloader=new DownloadHelperWithProgress();
          downloader.download(new URL(module.getUrl_download()),destination,subMonitor.newChild(1));
          downloadOk.add(destination.toURI().toURL());
          installedModules.add(module.getName());
        }
 catch (        Exception e) {
          downloadFailed.add(module.getName());
          ExceptionHandler.process(e);
          continue;
        }
      }
      accepted=false;
    }
 else {
      downloadFailed.add(module.getName());
    }
  }
  if (!downloadOk.isEmpty()) {
    try {
      LibManagerUiPlugin.getDefault().getLibrariesService().deployLibrarys(downloadOk.toArray(new URL[downloadOk.size()]));
    }
 catch (    IOException e) {
      ExceptionHandler.process(e);
    }
  }
  subMonitor.worked(1);
}","private void downLoad(final IProgressMonitor monitor){
  SubMonitor subMonitor=SubMonitor.convert(monitor,Messages.getString(""String_Node_Str""),toDownload.size() + 1);
  final List<URL> downloadOk=new ArrayList<URL>();
  for (  final ModuleToInstall module : toDownload) {
    if (!monitor.isCanceled()) {
      monitor.subTask(module.getName());
      String librariesPath=LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA);
      File target=new File(librariesPath);
      boolean accepted;
      if (module.getUrl_download() != null && !""String_Node_Str"".equals(module.getUrl_download())) {
        try {
          boolean isLicenseAccepted=LibManagerUiPlugin.getDefault().getPreferenceStore().getBoolean(module.getLicenseType());
          accepted=isLicenseAccepted;
          if (!accepted) {
            subMonitor.worked(1);
            continue;
          }
          if (monitor.isCanceled()) {
            return;
          }
          File destination=new File(target.toString() + File.separator + module.getName());
          File destinationTemp=target.createTempFile(destination.getName(),""String_Node_Str"");
          DownloadHelperWithProgress downloader=new DownloadHelperWithProgress();
          downloader.download(new URL(module.getUrl_download()),destinationTemp,subMonitor.newChild(1));
          if (!monitor.isCanceled()) {
            FilesUtils.copyFile(destinationTemp,destination);
            downloadOk.add(destination.toURI().toURL());
            installedModules.add(module.getName());
          }
          if (destinationTemp.exists()) {
            destinationTemp.delete();
          }
        }
 catch (        Exception e) {
          downloadFailed.add(module.getName());
          ExceptionHandler.process(e);
          continue;
        }
      }
      accepted=false;
    }
 else {
      downloadFailed.add(module.getName());
    }
  }
  if (!downloadOk.isEmpty()) {
    try {
      LibManagerUiPlugin.getDefault().getLibrariesService().deployLibrarys(downloadOk.toArray(new URL[downloadOk.size()]));
    }
 catch (    IOException e) {
      ExceptionHandler.process(e);
    }
  }
  subMonitor.worked(1);
}",0.9231920199501248
127145,"@Override public int hashCode(){
  int result=1;
  result=PRIME * result + ((this.id == null) ? 0 : this.id.hashCode());
  result=PRIME * result + ((this.properties == null) ? 0 : this.properties.hashCode());
  result=PRIME * result + ((this.type == null) ? 0 : this.type.hashCode());
  return result;
}","@Override public int hashCode(){
  int result=1;
  result=PRIME * result + ((this.id == null) ? 0 : this.id.hashCode());
  result=PRIME * result + ((this.properties == null) ? 0 : this.properties.hashCode());
  result=PRIME * result + ((this.type == null) ? 0 : this.type.hashCode());
  result=PRIME * result + ((this.parent == null) ? 0 : this.parent.hashCode());
  result=PRIME * result + ((this.object == null) ? 0 : this.object.hashCode());
  return result;
}",0.7911227154046997
127146,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final RepositoryNode other=(RepositoryNode)obj;
  if (this.type != ENodeType.SIMPLE_FOLDER) {
    if (null != this.id && null != other.id && !this.id.equals(other.id)) {
      return false;
    }
  }
  if (this.properties == null) {
    if (other.properties != null) {
      return false;
    }
  }
 else   if (!this.properties.equals(other.properties)) {
    return false;
  }
  if (this.type == null) {
    if (other.type != null) {
      return false;
    }
  }
 else   if (!this.type.equals(other.type)) {
    return false;
  }
  if (this.parent == null) {
    if (other.parent != null) {
      return false;
    }
  }
 else   if (!this.parent.equals(other.parent)) {
    return false;
  }
  if (this.getLabel() == null) {
    if (other.getLabel() != null) {
      return false;
    }
  }
 else   if (!this.getLabel().equals(other.getLabel())) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final RepositoryNode other=(RepositoryNode)obj;
  if (this.type != ENodeType.SIMPLE_FOLDER) {
    if (null != this.id && null != other.id && !this.id.equals(other.id)) {
      return false;
    }
  }
  if (this.properties == null) {
    if (other.properties != null) {
      return false;
    }
  }
 else   if (!this.properties.equals(other.properties)) {
    return false;
  }
  if (this.type == null) {
    if (other.type != null) {
      return false;
    }
  }
 else   if (!this.type.equals(other.type)) {
    return false;
  }
  if (this.parent == null) {
    if (other.parent != null) {
      return false;
    }
  }
 else   if (!this.parent.equals(other.parent)) {
    return false;
  }
  if (this.object == null) {
    if (other.object != null) {
      return false;
    }
  }
 else {
    if (object.getVersion() == null) {
      if (other.object.getVersion() != null) {
        return false;
      }
    }
 else     if (!object.getVersion().equals(other.object.getVersion())) {
      return false;
    }
  }
  if (this.getLabel() == null) {
    if (other.getLabel() != null) {
      return false;
    }
  }
 else   if (!this.getLabel().equals(other.getLabel())) {
    return false;
  }
  return true;
}",0.8699154248892469
127147,"protected void updateConnectionItem() throws CoreException {
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  IWorkspaceRunnable operation=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        factory.save(connectionItem);
        closeLockStrategy();
      }
 catch (      PersistenceException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
    }
  }
;
  ISchedulingRule schedulingRule=workspace.getRoot();
  workspace.run(operation,schedulingRule,IWorkspace.AVOID_UPDATE,new NullProgressMonitor());
}","protected void updateConnectionItem() throws CoreException {
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  IWorkspaceRunnable operation=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        factory.save(connectionItem);
        closeLockStrategy();
      }
 catch (      PersistenceException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
    }
  }
;
  ISchedulingRule schedulingRule=workspace.getRoot();
  workspace.run(operation,schedulingRule,IWorkspace.AVOID_UPDATE,new NullProgressMonitor());
}",0.9930747922437672
127148,"public void run(IProgressMonitor monitor) throws CoreException {
  try {
    factory.save(connectionItem);
    closeLockStrategy();
  }
 catch (  PersistenceException e) {
    throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
  }
}","@Override public void run(IProgressMonitor monitor) throws CoreException {
  try {
    factory.save(connectionItem);
    closeLockStrategy();
  }
 catch (  PersistenceException e) {
    throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
  }
}",0.9818840579710144
127149,"public void setLastVersion(Boolean lastVersion){
}","@Override public void setLastVersion(Boolean lastVersion){
}",0.9090909090909092
127150,"public boolean isLastVersion(Item item){
  if (item.getProperty() != null) {
    try {
      List<IRepositoryViewObject> allVersion=ProxyRepositoryFactory.getInstance().getAllVersion(item.getProperty().getId());
      if (allVersion != null && !allVersion.isEmpty()) {
        String lastVersion=VersionUtils.DEFAULT_VERSION;
        for (        IRepositoryViewObject object : allVersion) {
          if (VersionUtils.compareTo(object.getVersion(),lastVersion) > 0) {
            lastVersion=object.getVersion();
          }
        }
        if (VersionUtils.compareTo(item.getProperty().getVersion(),lastVersion) == 0) {
          return true;
        }
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
  return false;
}","@Override public boolean isLastVersion(Item item){
  if (item.getProperty() != null) {
    if (item.getProperty().getId() == null) {
      return true;
    }
    try {
      List<IRepositoryViewObject> allVersion=ProxyRepositoryFactory.getInstance().getAllVersion(item.getProperty().getId());
      if (allVersion != null && !allVersion.isEmpty()) {
        String lastVersion=VersionUtils.DEFAULT_VERSION;
        for (        IRepositoryViewObject object : allVersion) {
          if (VersionUtils.compareTo(object.getVersion(),lastVersion) > 0) {
            lastVersion=object.getVersion();
          }
        }
        if (VersionUtils.compareTo(item.getProperty().getVersion(),lastVersion) == 0) {
          return true;
        }
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
  return false;
}",0.9500924214417744
127151,"private boolean deleteElements(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final RepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  boolean needReturn=false;
  final boolean[] enableDeleting=new boolean[1];
  enableDeleting[0]=true;
  final IRepositoryViewObject objToDelete=currentJobNode.getObject();
  final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkContext.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
        int returnCode=dialog.open();
switch (returnCode) {
case Window.OK:
          enableDeleting[0]=true;
        break;
case Window.CANCEL:
      enableDeleting[0]=false;
    break;
}
}
}
);
}
if (!enableDeleting[0]) {
return true;
}
AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
ERepositoryObjectType nodeType=(ERepositoryObjectType)currentJobNode.getProperties(EProperties.CONTENT_TYPE);
if (nodeType != null && nodeType.isSubItem()) {
Display.getDefault().syncExec(new Runnable(){
@Override public void run(){
final DeleteTableAction deleteTableAction=new DeleteTableAction();
deleteTableAction.setWorkbenchPart(getWorkbenchPart());
deleteTableAction.run();
}
}
);
needReturn=true;
}
 else {
if (factory.getStatus(objToDelete) == ERepositoryStatus.DELETED) {
if (!confirmFromDialog && resChangeService != null) {
List<IRepositoryNode> dependentNodes=resChangeService.getDependentNodes(currentJobNode);
if (dependentNodes != null && !dependentNodes.isEmpty()) {
  resChangeService.openDependcesDialog(dependentNodes);
  return true;
}
}
if (confirm == null) {
if (confirmFromDialog) {
  confirm=confirmFromDialog;
}
 else {
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      String title=Messages.getString(""String_Node_Str"");
      String message=currentJobNode.getProperties(EProperties.LABEL) + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
      confirmFromDialog=MessageDialog.openQuestion(new Shell(),title,message);
    }
  }
);
  confirm=confirmFromDialog;
}
}
if (confirm) {
deleteActionCache.closeOpenedEditor(objToDelete);
if (currentJobNode.getType() == ENodeType.SIMPLE_FOLDER) {
  boolean success=true;
  for (  IRepositoryNode curNode : currentJobNode.getChildren()) {
    try {
      deleteElements(factory,deleteActionCache,(RepositoryNode)curNode,confirm);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (success) {
    if (currentJobNode.getObject() != null && currentJobNode.getObject().getProperty() != null && currentJobNode.getObject().getProperty().getItem() != null) {
      Item fitem=currentJobNode.getObject().getProperty().getItem();
      if ((fitem instanceof FolderItem) && (((FolderItem)fitem).getType().getValue() == FolderType.FOLDER)) {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentJobNode.getObject().getProperty().getItem()));
      }
 else {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
      }
    }
 else {
      factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
    }
  }
}
 else {
  if (resChangeService != null && objToDelete != null && objToDelete.getProperty() != null) {
    Item item=objToDelete.getProperty().getItem();
    if (item != null) {
      resChangeService.removeAllDependecies(item);
    }
  }
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    handler.deleteNode(objToDelete);
  }
  if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
    forceBuild=true;
  }
  if (!forceBuild) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
      ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
      if (nodeType == camelService.getBeansType()) {
        forceBuild=true;
      }
    }
  }
  factory.deleteObjectPhysical(objToDelete);
  ExpressionPersistance.getInstance().jobDeleted(objToDelete.getLabel());
}
}
}
 else {
factory.deleteObjectLogical(objToDelete);
updateRelatedViews();
removeConnFromSQLExplorer(currentJobNode);
}
}
return needReturn;
}","private boolean deleteElements(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final RepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  boolean needReturn=false;
  final boolean[] enableDeleting=new boolean[1];
  enableDeleting[0]=true;
  final IRepositoryViewObject objToDelete=currentJobNode.getObject();
  final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkContext.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
        int returnCode=dialog.open();
switch (returnCode) {
case Window.OK:
          enableDeleting[0]=true;
        break;
case Window.CANCEL:
      enableDeleting[0]=false;
    break;
}
}
}
);
}
if (!enableDeleting[0]) {
return true;
}
AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
ERepositoryObjectType nodeType=(ERepositoryObjectType)currentJobNode.getProperties(EProperties.CONTENT_TYPE);
if (nodeType != null && nodeType.isSubItem()) {
Display.getDefault().syncExec(new Runnable(){
@Override public void run(){
final DeleteTableAction deleteTableAction=new DeleteTableAction();
deleteTableAction.setWorkbenchPart(getWorkbenchPart());
deleteTableAction.run();
}
}
);
needReturn=true;
}
 else {
if (factory.getStatus(objToDelete) == ERepositoryStatus.DELETED) {
if (!confirmForDQ && resChangeService != null) {
List<IRepositoryNode> dependentNodes=resChangeService.getDependentNodes(currentJobNode);
if (dependentNodes != null && !dependentNodes.isEmpty()) {
  resChangeService.openDependcesDialog(dependentNodes);
  return true;
}
}
if (confirm == null) {
if (confirmForDQ) {
  confirm=confirmForDQ;
}
 else {
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      String title=Messages.getString(""String_Node_Str"");
      String message=currentJobNode.getProperties(EProperties.LABEL) + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
      confirmFromDialog=MessageDialog.openQuestion(new Shell(),title,message);
    }
  }
);
  confirm=confirmFromDialog;
}
}
if (confirm) {
deleteActionCache.closeOpenedEditor(objToDelete);
if (currentJobNode.getType() == ENodeType.SIMPLE_FOLDER) {
  boolean success=true;
  for (  IRepositoryNode curNode : currentJobNode.getChildren()) {
    try {
      deleteElements(factory,deleteActionCache,(RepositoryNode)curNode,confirm);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (success) {
    if (currentJobNode.getObject() != null && currentJobNode.getObject().getProperty() != null && currentJobNode.getObject().getProperty().getItem() != null) {
      Item fitem=currentJobNode.getObject().getProperty().getItem();
      if ((fitem instanceof FolderItem) && (((FolderItem)fitem).getType().getValue() == FolderType.FOLDER)) {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentJobNode.getObject().getProperty().getItem()));
      }
 else {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
      }
    }
 else {
      factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
    }
  }
}
 else {
  if (resChangeService != null && objToDelete != null && objToDelete.getProperty() != null) {
    Item item=objToDelete.getProperty().getItem();
    if (item != null) {
      resChangeService.removeAllDependecies(item);
    }
  }
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    handler.deleteNode(objToDelete);
  }
  if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
    forceBuild=true;
  }
  if (!forceBuild) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
      ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
      if (nodeType == camelService.getBeansType()) {
        forceBuild=true;
      }
    }
  }
  factory.deleteObjectPhysical(objToDelete);
  ExpressionPersistance.getInstance().jobDeleted(objToDelete.getLabel());
}
}
}
 else {
factory.deleteObjectLogical(objToDelete);
updateRelatedViews();
removeConnFromSQLExplorer(currentJobNode);
}
}
return needReturn;
}",0.9958873774122112
127152,"@Override public void partVisible(IWorkbenchPartReference partRef){
  refreshRepViewDescription(partRef);
}","@Override public void partVisible(IWorkbenchPartReference partRef){
  refreshRepViewDescription(partRef);
  if (partRef != null && IRepositoryView.VIEW_ID.equals(partRef.getId())) {
    IViewPart viewPart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(IJobSettingsView.ID);
    if (viewPart != null && viewPart instanceof ISelectionChangedListener) {
      ISelectionChangedListener listener=(ISelectionChangedListener)viewPart;
      IWorkbenchPart part=partRef.getPart(false);
      if (part instanceof CommonNavigator) {
        CommonViewer repViewer=((CommonNavigator)part).getCommonViewer();
        if (((RepoViewCommonNavigator)repViewer.getCommonNavigator()).getViewer() != null) {
          ((RepoViewCommonNavigator)repViewer.getCommonNavigator()).getViewer().addSelectionChangedListener(listener);
        }
      }
    }
  }
}",0.2190378710337768
127153,"@Override public void partClosed(IWorkbenchPartReference partRef){
  if (IRepositoryView.VIEW_ID.equals(partRef.getId())) {
    PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().removePartListener(this);
  }
}","@Override public void partClosed(IWorkbenchPartReference partRef){
  if (partRef != null && IRepositoryView.VIEW_ID.equals(partRef.getId())) {
    PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().removePartListener(this);
    if (PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage() != null) {
      IViewPart viewPart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(IJobSettingsView.ID);
      if (viewPart != null && viewPart instanceof ISelectionChangedListener) {
        ISelectionChangedListener listener=(ISelectionChangedListener)viewPart;
        IWorkbenchPart part=partRef.getPart(false);
        if (part instanceof CommonNavigator) {
          CommonViewer repViewer=((CommonNavigator)part).getCommonViewer();
          if (((RepoViewCommonNavigator)repViewer.getCommonNavigator()).getViewer() != null) {
            ((RepoViewCommonNavigator)repViewer.getCommonNavigator()).getViewer().removeSelectionChangedListener(listener);
          }
        }
      }
    }
  }
}",0.3580922595777951
127154,"@Override public void fillActionBars(IActionBars actionBars){
  super.fillActionBars(actionBars);
  CopyAction copyActionInstance=CopyAction.getInstance();
  PasteAction pasteActionInstance=PasteAction.getInstance();
  actionBars.setGlobalActionHandler(ActionFactory.COPY.getId(),copyActionInstance);
  actionBars.setGlobalActionHandler(ActionFactory.PASTE.getId(),pasteActionInstance);
  actionBars.setGlobalActionHandler(ActionFactory.DELETE.getId(),DeleteAction.getInstance());
  if (copyActionInstance != null && pasteActionInstance != null && getContext() != null && getContext().getSelection() instanceof IStructuredSelection) {
    IStructuredSelection sel=(IStructuredSelection)getContext().getSelection();
    if (sel != null) {
      copyActionInstance.init(null,sel);
    }
  }
  TextActionHandler textActionHandler=new TextActionHandler(actionBars);
  textActionHandler.setCopyAction(copyActionInstance);
  textActionHandler.setPasteAction(pasteActionInstance);
  textActionHandler.setDeleteAction(DeleteAction.getInstance());
}","@Override public void fillActionBars(IActionBars actionBars){
  super.fillActionBars(actionBars);
  ProxyRepositoryFactory proxy=ProxyRepositoryFactory.getInstance();
  if (!proxy.getRepositoryContext().isOffline()) {
    CopyAction copyActionInstance=CopyAction.getInstance();
    PasteAction pasteActionInstance=PasteAction.getInstance();
    actionBars.setGlobalActionHandler(ActionFactory.COPY.getId(),copyActionInstance);
    actionBars.setGlobalActionHandler(ActionFactory.PASTE.getId(),pasteActionInstance);
    actionBars.setGlobalActionHandler(ActionFactory.DELETE.getId(),DeleteAction.getInstance());
    if (copyActionInstance != null && pasteActionInstance != null && getContext() != null && getContext().getSelection() instanceof IStructuredSelection) {
      IStructuredSelection sel=(IStructuredSelection)getContext().getSelection();
      if (sel != null) {
        copyActionInstance.init(null,sel);
      }
    }
    TextActionHandler textActionHandler=new TextActionHandler(actionBars);
    textActionHandler.setCopyAction(copyActionInstance);
    textActionHandler.setPasteAction(pasteActionInstance);
    textActionHandler.setDeleteAction(DeleteAction.getInstance());
  }
}",0.9310653536257834
127155,"@Override public void run(IProgressMonitor monitor) throws CoreException {
  DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
  EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
  EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
  if (PluginChecker.isTDQLoaded()) {
    saveMetaData();
    ITDQRepositoryService tdqRepositoryService=null;
    boolean needUpdateAnalysis=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
    }
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
        return;
      }
    }
    generateOriginalColumnsMap(dataPackageFromOrignalConnection);
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    replaceUUidsForColumnsAndTables(copyDataPackage);
    saveMetaData();
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
    }
  }
 else {
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    saveMetaData();
  }
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
  temConnection=null;
}","@Override public void run(IProgressMonitor monitor) throws CoreException {
  DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
  if (ExtractMetaDataUtils.getInstance().isUseAllSynonyms()) {
    EMap<String,String> map=connection.getParameters();
    if (map.containsKey(ISUSEDINDI)) {
      map.removeKey(ISUSEDINDI);
    }
    map.put(ISUSEDINDI,""String_Node_Str"");
  }
  EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
  EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
  if (PluginChecker.isTDQLoaded()) {
    saveMetaData();
    ITDQRepositoryService tdqRepositoryService=null;
    boolean needUpdateAnalysis=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
    }
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
        return;
      }
    }
    generateOriginalColumnsMap(dataPackageFromOrignalConnection);
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    replaceUUidsForColumnsAndTables(copyDataPackage);
    saveMetaData();
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
    }
  }
 else {
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    saveMetaData();
  }
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
  temConnection=null;
}",0.939152119700748
127156,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
        EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
        EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
        if (PluginChecker.isTDQLoaded()) {
          saveMetaData();
          ITDQRepositoryService tdqRepositoryService=null;
          boolean needUpdateAnalysis=false;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
          }
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
              return;
            }
          }
          generateOriginalColumnsMap(dataPackageFromOrignalConnection);
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          replaceUUidsForColumnsAndTables(copyDataPackage);
          saveMetaData();
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
          }
        }
 else {
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          saveMetaData();
        }
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
        list.add(repositoryObject);
        CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
        temConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
        if (ExtractMetaDataUtils.getInstance().isUseAllSynonyms()) {
          EMap<String,String> map=connection.getParameters();
          if (map.containsKey(ISUSEDINDI)) {
            map.removeKey(ISUSEDINDI);
          }
          map.put(ISUSEDINDI,""String_Node_Str"");
        }
        EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
        EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
        if (PluginChecker.isTDQLoaded()) {
          saveMetaData();
          ITDQRepositoryService tdqRepositoryService=null;
          boolean needUpdateAnalysis=false;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
          }
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
              return;
            }
          }
          generateOriginalColumnsMap(dataPackageFromOrignalConnection);
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          replaceUUidsForColumnsAndTables(copyDataPackage);
          saveMetaData();
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
          }
        }
 else {
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          saveMetaData();
        }
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
        list.add(repositoryObject);
        CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
        temConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    return true;
  }
 else {
    return false;
  }
}",0.949683321604504
127157,"public static void setPropertiesForContextMode(ConnectionItem connectionItem,ContextItem contextItem,Set<IConnParamName> paramSet,Map<String,String> map){
  if (connectionItem == null || contextItem == null) {
    return;
  }
  final String label=contextItem.getProperty().getLabel();
  Connection conn=connectionItem.getConnection();
  if (conn instanceof DatabaseConnection) {
    DBConnectionContextUtils.setPropertiesForContextMode(label,(DatabaseConnection)conn,paramSet,map);
  }
 else   if (conn instanceof FileConnection) {
    FileConnectionContextUtils.setPropertiesForContextMode(label,(FileConnection)conn,paramSet);
  }
 else   if (conn instanceof LdifFileConnection) {
    OtherConnectionContextUtils.setLdifFilePropertiesForContextMode(label,(LdifFileConnection)conn);
  }
 else   if (conn instanceof XmlFileConnection) {
    OtherConnectionContextUtils.setXmlFilePropertiesForContextMode(label,(XmlFileConnection)conn);
  }
 else   if (conn instanceof LDAPSchemaConnection) {
    OtherConnectionContextUtils.setLDAPSchemaPropertiesForContextMode(label,(LDAPSchemaConnection)conn);
  }
 else   if (conn instanceof WSDLSchemaConnection) {
    OtherConnectionContextUtils.setWSDLSchemaPropertiesForContextMode(label,(WSDLSchemaConnection)conn);
  }
 else   if (conn instanceof SalesforceSchemaConnection) {
    OtherConnectionContextUtils.setSalesforcePropertiesForContextMode(label,(SalesforceSchemaConnection)conn);
  }
 else   if (conn instanceof GenericSchemaConnection) {
  }
  connectionItem.getConnection().setContextMode(true);
  connectionItem.getConnection().setContextId(contextItem.getProperty().getId());
  connectionItem.getConnection().setContextName(contextItem.getDefaultContext());
}","public static void setPropertiesForContextMode(ConnectionItem connectionItem,ContextItem contextItem,Set<IConnParamName> paramSet,Map<String,String> map){
  if (connectionItem == null || contextItem == null) {
    return;
  }
  final String label=contextItem.getProperty().getLabel();
  Connection conn=connectionItem.getConnection();
  if (conn instanceof DatabaseConnection) {
    DBConnectionContextUtils.setPropertiesForContextMode(label,(DatabaseConnection)conn,contextItem,paramSet,map);
  }
 else   if (conn instanceof FileConnection) {
    FileConnectionContextUtils.setPropertiesForContextMode(label,(FileConnection)conn,paramSet);
  }
 else   if (conn instanceof LdifFileConnection) {
    OtherConnectionContextUtils.setLdifFilePropertiesForContextMode(label,(LdifFileConnection)conn);
  }
 else   if (conn instanceof XmlFileConnection) {
    OtherConnectionContextUtils.setXmlFilePropertiesForContextMode(label,(XmlFileConnection)conn);
  }
 else   if (conn instanceof LDAPSchemaConnection) {
    OtherConnectionContextUtils.setLDAPSchemaPropertiesForContextMode(label,(LDAPSchemaConnection)conn);
  }
 else   if (conn instanceof WSDLSchemaConnection) {
    OtherConnectionContextUtils.setWSDLSchemaPropertiesForContextMode(label,(WSDLSchemaConnection)conn);
  }
 else   if (conn instanceof SalesforceSchemaConnection) {
    OtherConnectionContextUtils.setSalesforcePropertiesForContextMode(label,(SalesforceSchemaConnection)conn);
  }
 else   if (conn instanceof GenericSchemaConnection) {
  }
  connectionItem.getConnection().setContextMode(true);
  connectionItem.getConnection().setContextId(contextItem.getProperty().getId());
  connectionItem.getConnection().setContextName(contextItem.getDefaultContext());
}",0.9965116279069768
127158,"public void run(){
  setsDialog.open();
}","@Override public void run(){
  setsDialog.open();
}",0.8913043478260869
127159,"/** 
 * ggu Comment method ""getContextTypeForContextMode"". if connection is in context mode,choose the context. if return null, the connection is not in context mode. if canCancel is true, the selecting cotnext sets dialog will can be cancel.
 */
private static ContextType getContextTypeForContextMode(Shell shell,Connection connection,String selectedContext,boolean defaultContext,boolean canCancel){
  if (connection == null) {
    return null;
  }
  Shell sqlBuilderDialogShell=ContextUtils.getSqlBuilderDialogShell();
  if (sqlBuilderDialogShell != null && !sqlBuilderDialogShell.isDisposed() && shell == null) {
    shell=sqlBuilderDialogShell;
  }
  ContextItem contextItem=ContextUtils.getContextItemById2(connection.getContextId());
  if (contextItem != null && connection.isContextMode()) {
    if (defaultContext) {
      selectedContext=contextItem.getDefaultContext();
    }
 else     if (selectedContext == null) {
      if (contextItem.getContext().size() > 1) {
        final ContextSetsSelectionDialog setsDialog=new ContextSetsSelectionDialog(shell,contextItem,canCancel);
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            setsDialog.open();
          }
        }
);
        selectedContext=setsDialog.getSelectedContext();
        connection.setContextName(selectedContext);
      }
 else {
        selectedContext=contextItem.getDefaultContext();
      }
    }
    return ContextUtils.getContextTypeByName(contextItem,selectedContext,!canCancel);
  }
  return null;
}","/** 
 * ggu Comment method ""getContextTypeForContextMode"". if connection is in context mode,choose the context. if return null, the connection is not in context mode. if canCancel is true, the selecting cotnext sets dialog will can be cancel.
 */
private static ContextType getContextTypeForContextMode(Shell shell,Connection connection,String selectedContext,boolean defaultContext,boolean canCancel){
  if (connection == null) {
    return null;
  }
  Shell sqlBuilderDialogShell=ContextUtils.getSqlBuilderDialogShell();
  if (sqlBuilderDialogShell != null && !sqlBuilderDialogShell.isDisposed() && shell == null) {
    shell=sqlBuilderDialogShell;
  }
  ContextItem contextItem=ContextUtils.getContextItemById2(connection.getContextId());
  if (contextItem != null && connection.isContextMode()) {
    if (defaultContext) {
      selectedContext=contextItem.getDefaultContext();
    }
 else     if (selectedContext == null) {
      if (contextItem.getContext().size() > 1) {
        final ContextSetsSelectionDialog setsDialog=new ContextSetsSelectionDialog(shell,contextItem,canCancel);
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            setsDialog.open();
          }
        }
);
        selectedContext=setsDialog.getSelectedContext();
        connection.setContextName(selectedContext);
      }
 else {
        selectedContext=contextItem.getDefaultContext();
      }
    }
    return ContextUtils.getContextTypeByName(contextItem,selectedContext,!canCancel);
  }
  return null;
}",0.9967469095640858
127160,"static void setPropertiesForContextMode(String prefixName,DatabaseConnection conn,Set<IConnParamName> paramSet,Map<String,String> map){
  if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return;
  }
  prefixName=prefixName + ConnectionContextHelper.LINE;
  String originalVariableName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      originalVariableName=prefixName + dbParam;
      if (map != null && map.size() > 0) {
        for (        Map.Entry<String,String> entry : map.entrySet()) {
          if (originalVariableName.equals(entry.getValue())) {
            originalVariableName=entry.getKey();
            break;
          }
        }
      }
switch (dbParam) {
case AdditionalParams:
        conn.setAdditionalParams(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
      break;
case Datasource:
    conn.setDatasourceName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
  break;
case DBRootPath:
conn.setDBRootPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case File:
conn.setFileFieldName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Password:
conn.setPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JdbcUrl:
conn.setURL(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DriverJar:
conn.setDriverJarPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MappingFile:
conn.setDbmsId(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ClassName:
conn.setDriverClass(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Port:
conn.setPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Schema:
conn.setUiSchema(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Server:
conn.setServerName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Sid:
case Database:
case ServiceName:
conn.setSID(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Login:
conn.setUsername(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JobTracker:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case NameNode:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
default :
}
}
}
}","static void setPropertiesForContextMode(String prefixName,DatabaseConnection conn,ContextItem contextItem,Set<IConnParamName> paramSet,Map<String,String> map){
  if (conn == null || contextItem == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return;
  }
  prefixName=prefixName + ConnectionContextHelper.LINE;
  String originalVariableName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      originalVariableName=prefixName + dbParam;
      if (map != null && map.size() > 0) {
        for (        Map.Entry<String,String> entry : map.entrySet()) {
          if (originalVariableName.equals(entry.getValue())) {
            originalVariableName=entry.getKey();
            break;
          }
        }
      }
      originalVariableName=getCorrectVariableName(contextItem,originalVariableName,dbParam);
switch (dbParam) {
case AdditionalParams:
        conn.setAdditionalParams(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
      break;
case Datasource:
    conn.setDatasourceName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
  break;
case DBRootPath:
conn.setDBRootPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case File:
conn.setFileFieldName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Password:
conn.setPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JdbcUrl:
conn.setURL(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DriverJar:
conn.setDriverJarPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MappingFile:
conn.setDbmsId(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ClassName:
conn.setDriverClass(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Port:
conn.setPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Schema:
conn.setUiSchema(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Server:
conn.setServerName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Sid:
case Database:
case ServiceName:
conn.setSID(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Login:
conn.setUsername(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JobTracker:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case NameNode:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
default :
}
}
}
}",0.9754040758959944
127161,"public static void setPropertiesForContextMode(ConnectionItem connectionItem,ContextItem contextItem,Set<IConnParamName> paramSet,Map<String,String> map){
  if (connectionItem == null || contextItem == null) {
    return;
  }
  final String label=contextItem.getProperty().getLabel();
  Connection conn=connectionItem.getConnection();
  if (conn instanceof DatabaseConnection) {
    DBConnectionContextUtils.setPropertiesForContextMode(label,(DatabaseConnection)conn,paramSet,map);
  }
 else   if (conn instanceof FileConnection) {
    FileConnectionContextUtils.setPropertiesForContextMode(label,(FileConnection)conn,paramSet);
  }
 else   if (conn instanceof LdifFileConnection) {
    OtherConnectionContextUtils.setLdifFilePropertiesForContextMode(label,(LdifFileConnection)conn);
  }
 else   if (conn instanceof XmlFileConnection) {
    OtherConnectionContextUtils.setXmlFilePropertiesForContextMode(label,(XmlFileConnection)conn);
  }
 else   if (conn instanceof LDAPSchemaConnection) {
    OtherConnectionContextUtils.setLDAPSchemaPropertiesForContextMode(label,(LDAPSchemaConnection)conn);
  }
 else   if (conn instanceof WSDLSchemaConnection) {
    OtherConnectionContextUtils.setWSDLSchemaPropertiesForContextMode(label,(WSDLSchemaConnection)conn);
  }
 else   if (conn instanceof SalesforceSchemaConnection) {
    OtherConnectionContextUtils.setSalesforcePropertiesForContextMode(label,(SalesforceSchemaConnection)conn);
  }
 else   if (conn instanceof GenericSchemaConnection) {
  }
  connectionItem.getConnection().setContextMode(true);
  connectionItem.getConnection().setContextId(contextItem.getProperty().getId());
  connectionItem.getConnection().setContextName(contextItem.getDefaultContext());
}","public static void setPropertiesForContextMode(ConnectionItem connectionItem,ContextItem contextItem,Set<IConnParamName> paramSet,Map<String,String> map){
  if (connectionItem == null || contextItem == null) {
    return;
  }
  final String label=contextItem.getProperty().getLabel();
  Connection conn=connectionItem.getConnection();
  if (conn instanceof DatabaseConnection) {
    DBConnectionContextUtils.setPropertiesForContextMode(label,(DatabaseConnection)conn,contextItem,paramSet,map);
  }
 else   if (conn instanceof FileConnection) {
    FileConnectionContextUtils.setPropertiesForContextMode(label,(FileConnection)conn,paramSet);
  }
 else   if (conn instanceof LdifFileConnection) {
    OtherConnectionContextUtils.setLdifFilePropertiesForContextMode(label,(LdifFileConnection)conn);
  }
 else   if (conn instanceof XmlFileConnection) {
    OtherConnectionContextUtils.setXmlFilePropertiesForContextMode(label,(XmlFileConnection)conn);
  }
 else   if (conn instanceof LDAPSchemaConnection) {
    OtherConnectionContextUtils.setLDAPSchemaPropertiesForContextMode(label,(LDAPSchemaConnection)conn);
  }
 else   if (conn instanceof WSDLSchemaConnection) {
    OtherConnectionContextUtils.setWSDLSchemaPropertiesForContextMode(label,(WSDLSchemaConnection)conn);
  }
 else   if (conn instanceof SalesforceSchemaConnection) {
    OtherConnectionContextUtils.setSalesforcePropertiesForContextMode(label,(SalesforceSchemaConnection)conn);
  }
 else   if (conn instanceof GenericSchemaConnection) {
  }
  connectionItem.getConnection().setContextMode(true);
  connectionItem.getConnection().setContextId(contextItem.getProperty().getId());
  connectionItem.getConnection().setContextName(contextItem.getDefaultContext());
}",0.9965116279069768
127162,"static void setPropertiesForContextMode(String prefixName,DatabaseConnection conn,Set<IConnParamName> paramSet,Map<String,String> map){
  if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return;
  }
  prefixName=prefixName + ConnectionContextHelper.LINE;
  String originalVariableName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      originalVariableName=prefixName + dbParam;
      if (map != null && map.size() > 0) {
        for (        Map.Entry<String,String> entry : map.entrySet()) {
          if (originalVariableName.equals(entry.getValue())) {
            originalVariableName=entry.getKey();
            break;
          }
        }
      }
switch (dbParam) {
case AdditionalParams:
        conn.setAdditionalParams(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
      break;
case Datasource:
    conn.setDatasourceName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
  break;
case DBRootPath:
conn.setDBRootPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case File:
conn.setFileFieldName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Password:
conn.setPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JdbcUrl:
conn.setURL(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DriverJar:
conn.setDriverJarPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MappingFile:
conn.setDbmsId(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ClassName:
conn.setDriverClass(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Port:
conn.setPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Schema:
conn.setUiSchema(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Server:
conn.setServerName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Sid:
case Database:
case ServiceName:
conn.setSID(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Login:
conn.setUsername(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JobTracker:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case NameNode:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
default :
}
}
}
}","static void setPropertiesForContextMode(String prefixName,DatabaseConnection conn,ContextItem contextItem,Set<IConnParamName> paramSet,Map<String,String> map){
  if (conn == null || contextItem == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return;
  }
  prefixName=prefixName + ConnectionContextHelper.LINE;
  String originalVariableName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      originalVariableName=prefixName + dbParam;
      if (map != null && map.size() > 0) {
        for (        Map.Entry<String,String> entry : map.entrySet()) {
          if (originalVariableName.equals(entry.getValue())) {
            originalVariableName=entry.getKey();
            break;
          }
        }
      }
      originalVariableName=getCorrectVariableName(contextItem,originalVariableName,dbParam);
switch (dbParam) {
case AdditionalParams:
        conn.setAdditionalParams(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
      break;
case Datasource:
    conn.setDatasourceName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
  break;
case DBRootPath:
conn.setDBRootPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case File:
conn.setFileFieldName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Password:
conn.setPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JdbcUrl:
conn.setURL(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DriverJar:
conn.setDriverJarPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MappingFile:
conn.setDbmsId(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ClassName:
conn.setDriverClass(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Port:
conn.setPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Schema:
conn.setUiSchema(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Server:
conn.setServerName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Sid:
case Database:
case ServiceName:
conn.setSID(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Login:
conn.setUsername(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JobTracker:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case NameNode:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
default :
}
}
}
}",0.9754040758959944
127163,"/** 
 * getAsciiRandomString : Return a randomly generated String {talendTypes} String {Category} TalendString {param} int(6) length: length of the String to return {example} getAsciiRandomString(6) # Art34Z
 */
public static String getAsciiRandomString(int length){
  Random random=new Random(System.currentTimeMillis() + Thread.currentThread().getId() * 1000);
  int cnt=0;
  StringBuffer buffer=new StringBuffer();
  char ch;
  int end='z' + 1;
  int start=' ';
  while (cnt < length) {
    ch=(char)(random.nextInt(end - start) + start);
    if (Character.isLetterOrDigit(ch)) {
      buffer.append(ch);
      cnt++;
    }
  }
  return buffer.toString();
}","/** 
 * getAsciiRandomString : Return a randomly generated String {talendTypes} String {Category} TalendString {param} int(6) length: length of the String to return {example} getAsciiRandomString(6) # Art34Z
 */
public static String getAsciiRandomString(int length){
  Random random=new Random();
  int cnt=0;
  StringBuffer buffer=new StringBuffer();
  char ch;
  int end='z' + 1;
  int start=' ';
  while (cnt < length) {
    ch=(char)(random.nextInt(end - start) + start);
    if (Character.isLetterOrDigit(ch)) {
      buffer.append(ch);
      cnt++;
    }
  }
  return buffer.toString();
}",0.9473684210526316
127164,"@Override public Property getProperty(){
  IProxyRepositoryFactory factory=null;
  factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
  Project project=ProjectManager.getInstance().getProjectFromProjectLabel(this.projectLabel);
  FolderItem folderItem=factory.getFolderItem(project,type,new Path(StringUtils.join(new String[]{path,getLabel()},""String_Node_Str"")));
  if (folderItem == null) {
    return super.getProperty();
  }
  return folderItem.getProperty();
}","@Override public Property getProperty(){
  if (this.projectLabel == null) {
    return super.getProperty();
  }
  IProxyRepositoryFactory factory=null;
  factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
  Project project=ProjectManager.getInstance().getProjectFromProjectLabel(this.projectLabel);
  FolderItem folderItem=factory.getFolderItem(project,type,new Path(StringUtils.join(new String[]{path,getLabel()},""String_Node_Str"")));
  if (folderItem == null) {
    return super.getProperty();
  }
  return folderItem.getProperty();
}",0.9398814563928872
127165,"@Override public void run(IProgressMonitor monitor) throws CoreException {
  DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
  EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
  EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
  if (PluginChecker.isTDQLoaded()) {
    saveMetaData();
    ITDQRepositoryService tdqRepositoryService=null;
    boolean needUpdateAnalysis=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
    }
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
        return;
      }
    }
    generateOriginalColumnsMap(dataPackageFromOrignalConnection);
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    replaceUUidsForColumnsAndTables(copyDataPackage);
    saveMetaData();
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
    }
  }
 else {
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    saveMetaData();
  }
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
  temConnection=null;
}","@Override public void run(IProgressMonitor monitor) throws CoreException {
  DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
  if (ExtractMetaDataUtils.isUseAllSynonyms()) {
    EMap<String,String> map=connection.getParameters();
    if (map.containsKey(ISUSEDINDI)) {
      map.removeKey(ISUSEDINDI);
    }
    map.put(ISUSEDINDI,""String_Node_Str"");
  }
  EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
  EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
  if (PluginChecker.isTDQLoaded()) {
    saveMetaData();
    ITDQRepositoryService tdqRepositoryService=null;
    boolean needUpdateAnalysis=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
    }
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
        return;
      }
    }
    generateOriginalColumnsMap(dataPackageFromOrignalConnection);
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    replaceUUidsForColumnsAndTables(copyDataPackage);
    saveMetaData();
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
    }
  }
 else {
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    saveMetaData();
  }
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
  temConnection=null;
}",0.9424424424424424
127166,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
        EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
        EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
        if (PluginChecker.isTDQLoaded()) {
          saveMetaData();
          ITDQRepositoryService tdqRepositoryService=null;
          boolean needUpdateAnalysis=false;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
          }
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
              return;
            }
          }
          generateOriginalColumnsMap(dataPackageFromOrignalConnection);
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          replaceUUidsForColumnsAndTables(copyDataPackage);
          saveMetaData();
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
          }
        }
 else {
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          saveMetaData();
        }
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
        list.add(repositoryObject);
        CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
        temConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          EMap<String,String> map=connection.getParameters();
          if (map.containsKey(ISUSEDINDI)) {
            map.removeKey(ISUSEDINDI);
          }
          map.put(ISUSEDINDI,""String_Node_Str"");
        }
        EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
        EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
        if (PluginChecker.isTDQLoaded()) {
          saveMetaData();
          ITDQRepositoryService tdqRepositoryService=null;
          boolean needUpdateAnalysis=false;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
          }
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
              return;
            }
          }
          generateOriginalColumnsMap(dataPackageFromOrignalConnection);
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          replaceUUidsForColumnsAndTables(copyDataPackage);
          saveMetaData();
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
          }
        }
 else {
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          saveMetaData();
        }
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
        list.add(repositoryObject);
        CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
        temConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    return true;
  }
 else {
    return false;
  }
}",0.9520282186948854
127167,"@Override public void partVisible(IWorkbenchPartReference partRef){
  refreshRepViewDescription(partRef);
}","@Override public void partVisible(IWorkbenchPartReference partRef){
  refreshRepViewDescription(partRef);
  if (partRef != null && IRepositoryView.VIEW_ID.equals(partRef.getId())) {
    IViewPart viewPart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(IJobSettingsView.ID);
    if (viewPart != null && viewPart instanceof ISelectionChangedListener) {
      ISelectionChangedListener listener=(ISelectionChangedListener)viewPart;
      IWorkbenchPart part=partRef.getPart(false);
      if (part instanceof CommonNavigator) {
        CommonViewer repViewer=((CommonNavigator)part).getCommonViewer();
        if (((RepoViewCommonNavigator)repViewer.getCommonNavigator()).getViewer() != null) {
          ((RepoViewCommonNavigator)repViewer.getCommonNavigator()).getViewer().addSelectionChangedListener(listener);
        }
      }
    }
  }
}",0.2190378710337768
127168,"@Override public void partClosed(IWorkbenchPartReference partRef){
  if (IRepositoryView.VIEW_ID.equals(partRef.getId())) {
    PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().removePartListener(this);
  }
}","@Override public void partClosed(IWorkbenchPartReference partRef){
  if (partRef != null && IRepositoryView.VIEW_ID.equals(partRef.getId())) {
    PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().removePartListener(this);
    if (PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage() != null) {
      IViewPart viewPart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(IJobSettingsView.ID);
      if (viewPart != null && viewPart instanceof ISelectionChangedListener) {
        ISelectionChangedListener listener=(ISelectionChangedListener)viewPart;
        IWorkbenchPart part=partRef.getPart(false);
        if (part instanceof CommonNavigator) {
          CommonViewer repViewer=((CommonNavigator)part).getCommonViewer();
          if (((RepoViewCommonNavigator)repViewer.getCommonNavigator()).getViewer() != null) {
            ((RepoViewCommonNavigator)repViewer.getCommonNavigator()).getViewer().removeSelectionChangedListener(listener);
          }
        }
      }
    }
  }
}",0.3580922595777951
127169,"/** 
 * getAsciiRandomString : Return a randomly generated String {talendTypes} String {Category} TalendString {param} int(6) length: length of the String to return {example} getAsciiRandomString(6) # Art34Z
 */
public static String getAsciiRandomString(int length){
  Random random=new Random(System.currentTimeMillis() + Thread.currentThread().getId() * 1000);
  int cnt=0;
  StringBuffer buffer=new StringBuffer();
  char ch;
  int end='z' + 1;
  int start=' ';
  while (cnt < length) {
    ch=(char)(random.nextInt(end - start) + start);
    if (Character.isLetterOrDigit(ch)) {
      buffer.append(ch);
      cnt++;
    }
  }
  return buffer.toString();
}","/** 
 * getAsciiRandomString : Return a randomly generated String {talendTypes} String {Category} TalendString {param} int(6) length: length of the String to return {example} getAsciiRandomString(6) # Art34Z
 */
public static String getAsciiRandomString(int length){
  Random random=new Random();
  int cnt=0;
  StringBuffer buffer=new StringBuffer();
  char ch;
  int end='z' + 1;
  int start=' ';
  while (cnt < length) {
    ch=(char)(random.nextInt(end - start) + start);
    if (Character.isLetterOrDigit(ch)) {
      buffer.append(ch);
      cnt++;
    }
  }
  return buffer.toString();
}",0.9473684210526316
127170,"/** 
 * getAsciiRandomString : Return a randomly generated String {talendTypes} String {Category} TalendString {param} int(6) length: length of the String to return {example} getAsciiRandomString(6) # Art34Z
 */
public static String getAsciiRandomString(int length){
  Random random=new Random();
  int cnt=0;
  StringBuffer buffer=new StringBuffer();
  char ch;
  int end='z' + 1;
  int start=' ';
  while (cnt < length) {
    ch=(char)(random.nextInt(end - start) + start);
    if (Character.isLetterOrDigit(ch)) {
      buffer.append(ch);
      cnt++;
    }
  }
  return buffer.toString();
}","/** 
 * getAsciiRandomString : Return a randomly generated String {talendTypes} String {Category} TalendString {param} int(6) length: length of the String to return {example} getAsciiRandomString(6) # Art34Z
 */
public static String getAsciiRandomString(int length){
  Random random=new Random(System.currentTimeMillis() + Thread.currentThread().getId() * 1000);
  int cnt=0;
  StringBuffer buffer=new StringBuffer();
  char ch;
  int end='z' + 1;
  int start=' ';
  while (cnt < length) {
    ch=(char)(random.nextInt(end - start) + start);
    if (Character.isLetterOrDigit(ch)) {
      buffer.append(ch);
      cnt++;
    }
  }
  return buffer.toString();
}",0.9473684210526316
127171,"/** 
 * Wrap an object, if necessary. If the object is null, return the NULL object. If it is an array or collection, wrap it in a JSONArray. If it is a map, wrap it in a JSONObject. If it is a standard property (Double, String, et al) then it is already wrapped. Otherwise, if it comes from one of the java packages, turn it into a string. And if it doesn't, try to wrap it in a JSONObject. If the wrapping fails, then null is returned.
 * @param object The object to wrap
 * @return The wrapped value
 */
static Object wrap(Object object){
  try {
    if (object == null) {
      return NULL;
    }
    if (object instanceof JSONObject || object instanceof JSONArray || object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String|| NULL.equals(object)) {
      return object;
    }
    if (object instanceof Collection) {
      return new JSONArray((Collection)object);
    }
    if (object.getClass().isArray()) {
      return new JSONArray(object);
    }
    if (object instanceof Map) {
      return new JSONObject((Map)object);
    }
    Package objectPackage=object.getClass().getPackage();
    String objectPackageName=(objectPackage != null ? objectPackage.getName() : ""String_Node_Str"");
    if (objectPackageName.startsWith(""String_Node_Str"") || objectPackageName.startsWith(""String_Node_Str"") || object.getClass().getClassLoader() == null) {
      return object.toString();
    }
    return new JSONObject(object);
  }
 catch (  Exception exception) {
    return null;
  }
}","/** 
 * Wrap an object, if necessary. If the object is null, return the NULL object. If it is an array or collection, wrap it in a JSONArray. If it is a map, wrap it in a JSONObject. If it is a standard property (Double, String, et al) then it is already wrapped. Otherwise, if it comes from one of the java packages, turn it into a string. And if it doesn't, try to wrap it in a JSONObject. If the wrapping fails, then null is returned.
 * @param object The object to wrap
 * @return The wrapped value
 */
static Object wrap(Object object){
  try {
    if (object == null || object instanceof org.dom4j.Document) {
      return NULL;
    }
    if (object instanceof JSONObject || object instanceof JSONArray || object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String|| NULL.equals(object)) {
      return object;
    }
    if (object instanceof Collection) {
      return new JSONArray((Collection)object);
    }
    if (object.getClass().isArray()) {
      return new JSONArray(object);
    }
    if (object instanceof Map) {
      return new JSONObject((Map)object);
    }
    Package objectPackage=object.getClass().getPackage();
    String objectPackageName=(objectPackage != null ? objectPackage.getName() : ""String_Node_Str"");
    if (objectPackageName.startsWith(""String_Node_Str"") || objectPackageName.startsWith(""String_Node_Str"") || object.getClass().getClassLoader() == null) {
      return object.toString();
    }
    return new JSONObject(object);
  }
 catch (  Exception exception) {
    return null;
  }
}",0.9881376037959668
127172,"public String getProblemResource(){
  return this.type.getTypeName() + ""String_Node_Str"" + this.getName()+ ""String_Node_Str""+ this.getLineNumber()+ ""String_Node_Str"";
}","@Override public String getProblemResource(){
  return this.type.getTypeName() + ""String_Node_Str"" + this.getName()+ ""String_Node_Str""+ this.getLineNumber()+ ""String_Node_Str"";
}",0.9710982658959536
127173,"public TalendProblem(ProblemStatus status,String javaUnitName,IMarker marker,String markerErrorMessage,Integer lineNumber,String uniName,Integer charStart,Integer charEnd,ProblemType type,String version){
  super();
  setDescription(markerErrorMessage);
  setStatus(status);
  List<IProcess2> openedProcessList=CorePlugin.getDefault().getDesignerCoreService().getOpenedProcess(getEditors());
  for (  IProcess2 process : openedProcessList) {
    if (javaUnitName != null && javaUnitName.equals(process.getName())) {
      BasicJobInfo jobInfo=new BasicJobInfo(process.getId(),null,process.getVersion());
      jobInfo.setJobName(process.getName());
      setJobInfo(jobInfo);
    }
  }
  this.javaUnitName=javaUnitName;
  this.marker=marker;
  this.lineNumber=lineNumber;
  this.unitName=uniName;
  this.charStart=charStart;
  this.charEnd=charEnd;
  this.version=version;
  setType(type);
  setNodeName(uniName);
}","public TalendProblem(ProblemStatus status,Item item,IMarker marker,String markerErrorMessage,Integer lineNumber,String uniName,Integer charStart,Integer charEnd,ProblemType type){
  super();
  setDescription(markerErrorMessage);
  setStatus(status);
  if (item.getProperty().getId() != null) {
    BasicJobInfo jobInfo=new BasicJobInfo(item.getProperty().getId(),null,item.getProperty().getVersion());
    jobInfo.setJobName(item.getProperty().getLabel());
    setJobInfo(jobInfo);
  }
  this.javaUnitName=item.getProperty().getLabel();
  this.marker=marker;
  this.lineNumber=lineNumber;
  this.unitName=uniName;
  this.charStart=charStart;
  this.charEnd=charEnd;
  this.version=item.getProperty().getVersion();
  setType(type);
  setNodeName(uniName);
}",0.106523040095751
127174,"/** 
 * Wrap an object, if necessary. If the object is null, return the NULL object. If it is an array or collection, wrap it in a JSONArray. If it is a map, wrap it in a JSONObject. If it is a standard property (Double, String, et al) then it is already wrapped. Otherwise, if it comes from one of the java packages, turn it into a string. And if it doesn't, try to wrap it in a JSONObject. If the wrapping fails, then null is returned.
 * @param object The object to wrap
 * @return The wrapped value
 */
static Object wrap(Object object){
  try {
    if (object == null || object instanceof org.dom4j.Document) {
      return NULL;
    }
    if (object instanceof JSONObject || object instanceof JSONArray || object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String|| NULL.equals(object)) {
      return object;
    }
    if (object instanceof Collection) {
      return new JSONArray((Collection)object);
    }
    if (object.getClass().isArray()) {
      return new JSONArray(object);
    }
    if (object instanceof Map) {
      return new JSONObject((Map)object);
    }
    Package objectPackage=object.getClass().getPackage();
    String objectPackageName=(objectPackage != null ? objectPackage.getName() : ""String_Node_Str"");
    if (objectPackageName.startsWith(""String_Node_Str"") || objectPackageName.startsWith(""String_Node_Str"") || object.getClass().getClassLoader() == null) {
      return object.toString();
    }
    return new JSONObject(object);
  }
 catch (  Exception exception) {
    return null;
  }
}","/** 
 * Wrap an object, if necessary. If the object is null, return the NULL object. If it is an array or collection, wrap it in a JSONArray. If it is a map, wrap it in a JSONObject. If it is a standard property (Double, String, et al) then it is already wrapped. Otherwise, if it comes from one of the java packages, turn it into a string. And if it doesn't, try to wrap it in a JSONObject. If the wrapping fails, then null is returned.
 * @param object The object to wrap
 * @return The wrapped value
 */
static Object wrap(Object object){
  try {
    if (object == null) {
      return NULL;
    }
    if (object instanceof routines.system.Document || object instanceof JSONObject || object instanceof JSONArray|| object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String|| NULL.equals(object)) {
      return object;
    }
    if (object instanceof Collection) {
      return new JSONArray((Collection)object);
    }
    if (object.getClass().isArray()) {
      return new JSONArray(object);
    }
    if (object instanceof Map) {
      return new JSONObject((Map)object);
    }
    Package objectPackage=object.getClass().getPackage();
    String objectPackageName=(objectPackage != null ? objectPackage.getName() : ""String_Node_Str"");
    if (objectPackageName.startsWith(""String_Node_Str"") || objectPackageName.startsWith(""String_Node_Str"") || object.getClass().getClassLoader() == null) {
      return object.toString();
    }
    return new JSONObject(object);
  }
 catch (  Exception exception) {
    return null;
  }
}",0.974539069359087
127175,"/** 
 * Wrap an object, if necessary. If the object is null, return the NULL object. If it is an array or collection, wrap it in a JSONArray. If it is a map, wrap it in a JSONObject. If it is a standard property (Double, String, et al) then it is already wrapped. Otherwise, if it comes from one of the java packages, turn it into a string. And if it doesn't, try to wrap it in a JSONObject. If the wrapping fails, then null is returned.
 * @param object The object to wrap
 * @return The wrapped value
 */
static Object wrap(Object object){
  try {
    if (object == null) {
      return NULL;
    }
    if (object instanceof JSONObject || object instanceof JSONArray || object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String|| NULL.equals(object)) {
      return object;
    }
    if (object instanceof Collection) {
      return new JSONArray((Collection)object);
    }
    if (object.getClass().isArray()) {
      return new JSONArray(object);
    }
    if (object instanceof Map) {
      return new JSONObject((Map)object);
    }
    Package objectPackage=object.getClass().getPackage();
    String objectPackageName=(objectPackage != null ? objectPackage.getName() : ""String_Node_Str"");
    if (objectPackageName.startsWith(""String_Node_Str"") || objectPackageName.startsWith(""String_Node_Str"") || object.getClass().getClassLoader() == null) {
      return object.toString();
    }
    return new JSONObject(object);
  }
 catch (  Exception exception) {
    return null;
  }
}","/** 
 * Wrap an object, if necessary. If the object is null, return the NULL object. If it is an array or collection, wrap it in a JSONArray. If it is a map, wrap it in a JSONObject. If it is a standard property (Double, String, et al) then it is already wrapped. Otherwise, if it comes from one of the java packages, turn it into a string. And if it doesn't, try to wrap it in a JSONObject. If the wrapping fails, then null is returned.
 * @param object The object to wrap
 * @return The wrapped value
 */
static Object wrap(Object object){
  try {
    if (object == null || object instanceof org.dom4j.Document) {
      return NULL;
    }
    if (object instanceof JSONObject || object instanceof JSONArray || object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String|| NULL.equals(object)) {
      return object;
    }
    if (object instanceof Collection) {
      return new JSONArray((Collection)object);
    }
    if (object.getClass().isArray()) {
      return new JSONArray(object);
    }
    if (object instanceof Map) {
      return new JSONObject((Map)object);
    }
    Package objectPackage=object.getClass().getPackage();
    String objectPackageName=(objectPackage != null ? objectPackage.getName() : ""String_Node_Str"");
    if (objectPackageName.startsWith(""String_Node_Str"") || objectPackageName.startsWith(""String_Node_Str"") || object.getClass().getClassLoader() == null) {
      return object.toString();
    }
    return new JSONObject(object);
  }
 catch (  Exception exception) {
    return null;
  }
}",0.9881376037959668
127176,"/** 
 * Wrap an object, if necessary. If the object is null, return the NULL object. If it is an array or collection, wrap it in a JSONArray. If it is a map, wrap it in a JSONObject. If it is a standard property (Double, String, et al) then it is already wrapped. Otherwise, if it comes from one of the java packages, turn it into a string. And if it doesn't, try to wrap it in a JSONObject. If the wrapping fails, then null is returned.
 * @param object The object to wrap
 * @return The wrapped value
 */
static Object wrap(Object object){
  try {
    if (object == null || object instanceof org.dom4j.Document) {
      return NULL;
    }
    if (object instanceof JSONObject || object instanceof JSONArray || object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String|| NULL.equals(object)) {
      return object;
    }
    if (object instanceof Collection) {
      return new JSONArray((Collection)object);
    }
    if (object.getClass().isArray()) {
      return new JSONArray(object);
    }
    if (object instanceof Map) {
      return new JSONObject((Map)object);
    }
    Package objectPackage=object.getClass().getPackage();
    String objectPackageName=(objectPackage != null ? objectPackage.getName() : ""String_Node_Str"");
    if (objectPackageName.startsWith(""String_Node_Str"") || objectPackageName.startsWith(""String_Node_Str"") || object.getClass().getClassLoader() == null) {
      return object.toString();
    }
    return new JSONObject(object);
  }
 catch (  Exception exception) {
    return null;
  }
}","/** 
 * Wrap an object, if necessary. If the object is null, return the NULL object. If it is an array or collection, wrap it in a JSONArray. If it is a map, wrap it in a JSONObject. If it is a standard property (Double, String, et al) then it is already wrapped. Otherwise, if it comes from one of the java packages, turn it into a string. And if it doesn't, try to wrap it in a JSONObject. If the wrapping fails, then null is returned.
 * @param object The object to wrap
 * @return The wrapped value
 */
static Object wrap(Object object){
  try {
    if (object == null) {
      return NULL;
    }
    if (object instanceof routines.system.Document || object instanceof JSONObject || object instanceof JSONArray|| object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String|| NULL.equals(object)) {
      return object;
    }
    if (object instanceof Collection) {
      return new JSONArray((Collection)object);
    }
    if (object.getClass().isArray()) {
      return new JSONArray(object);
    }
    if (object instanceof Map) {
      return new JSONObject((Map)object);
    }
    Package objectPackage=object.getClass().getPackage();
    String objectPackageName=(objectPackage != null ? objectPackage.getName() : ""String_Node_Str"");
    if (objectPackageName.startsWith(""String_Node_Str"") || objectPackageName.startsWith(""String_Node_Str"") || object.getClass().getClassLoader() == null) {
      return object.toString();
    }
    return new JSONObject(object);
  }
 catch (  Exception exception) {
    return null;
  }
}",0.974539069359087
127177,"/** 
 * Wrap an object, if necessary. If the object is null, return the NULL object. If it is an array or collection, wrap it in a JSONArray. If it is a map, wrap it in a JSONObject. If it is a standard property (Double, String, et al) then it is already wrapped. Otherwise, if it comes from one of the java packages, turn it into a string. And if it doesn't, try to wrap it in a JSONObject. If the wrapping fails, then null is returned.
 * @param object The object to wrap
 * @return The wrapped value
 */
static Object wrap(Object object){
  try {
    if (object == null || object instanceof org.dom4j.Document) {
      return NULL;
    }
    if (object instanceof JSONObject || object instanceof JSONArray || object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String|| NULL.equals(object)) {
      return object;
    }
    if (object instanceof Collection) {
      return new JSONArray((Collection)object);
    }
    if (object.getClass().isArray()) {
      return new JSONArray(object);
    }
    if (object instanceof Map) {
      return new JSONObject((Map)object);
    }
    Package objectPackage=object.getClass().getPackage();
    String objectPackageName=(objectPackage != null ? objectPackage.getName() : ""String_Node_Str"");
    if (objectPackageName.startsWith(""String_Node_Str"") || objectPackageName.startsWith(""String_Node_Str"") || object.getClass().getClassLoader() == null) {
      return object.toString();
    }
    return new JSONObject(object);
  }
 catch (  Exception exception) {
    return null;
  }
}","/** 
 * Wrap an object, if necessary. If the object is null, return the NULL object. If it is an array or collection, wrap it in a JSONArray. If it is a map, wrap it in a JSONObject. If it is a standard property (Double, String, et al) then it is already wrapped. Otherwise, if it comes from one of the java packages, turn it into a string. And if it doesn't, try to wrap it in a JSONObject. If the wrapping fails, then null is returned.
 * @param object The object to wrap
 * @return The wrapped value
 */
static Object wrap(Object object){
  try {
    if (object == null) {
      return NULL;
    }
    if (object instanceof routines.system.Document || object instanceof JSONObject || object instanceof JSONArray|| object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String|| NULL.equals(object)) {
      return object;
    }
    if (object instanceof Collection) {
      return new JSONArray((Collection)object);
    }
    if (object.getClass().isArray()) {
      return new JSONArray(object);
    }
    if (object instanceof Map) {
      return new JSONObject((Map)object);
    }
    Package objectPackage=object.getClass().getPackage();
    String objectPackageName=(objectPackage != null ? objectPackage.getName() : ""String_Node_Str"");
    if (objectPackageName.startsWith(""String_Node_Str"") || objectPackageName.startsWith(""String_Node_Str"") || object.getClass().getClassLoader() == null) {
      return object.toString();
    }
    return new JSONObject(object);
  }
 catch (  Exception exception) {
    return null;
  }
}",0.974539069359087
127178,"@Override public void updateMigrationSystem(org.talend.core.model.properties.Project project,boolean persistence){
  MigrationUtil.removeMigrationTaskById(project.getMigrationTask(),MigrationUtil.ADAPT_NEW_MIGRATION_TASK_SYSTEM_ID);
  IProjectMigrationTask task=GetTasksHelper.getInstance().getProjectTask(MigrationUtil.ADAPT_NEW_MIGRATION_TASK_SYSTEM_ID);
  task.execute(new org.talend.core.model.general.Project(project),persistence);
  project.getMigrationTask().add(MigrationUtil.convertMigrationTask(task));
}","@Override public void updateMigrationSystem(org.talend.core.model.properties.Project project,boolean persistence){
  if (!MigrationUtil.containsTask(project.getMigrationTask(),MigrationUtil.ADAPT_NEW_MIGRATION_TASK_SYSTEM_ID)) {
    IProjectMigrationTask task=GetTasksHelper.getInstance().getProjectTask(MigrationUtil.ADAPT_NEW_MIGRATION_TASK_SYSTEM_ID);
    task.execute(new org.talend.core.model.general.Project(project),persistence);
  }
}",0.8723849372384938
127179,"/** 
 * getAsciiRandomString : Return a randomly generated String {talendTypes} String {Category} TalendString {param} int(6) length: length of the String to return {example} getAsciiRandomString(6) # Art34Z
 */
public static String getAsciiRandomString(int length){
  Random random=new Random();
  int cnt=0;
  StringBuffer buffer=new StringBuffer();
  char ch;
  int end='z' + 1;
  int start=' ';
  while (cnt < length) {
    ch=(char)(random.nextInt(end - start) + start);
    if (Character.isLetterOrDigit(ch)) {
      buffer.append(ch);
      cnt++;
    }
  }
  return buffer.toString();
}","/** 
 * getAsciiRandomString : Return a randomly generated String {talendTypes} String {Category} TalendString {param} int(6) length: length of the String to return {example} getAsciiRandomString(6) # Art34Z
 */
public static String getAsciiRandomString(int length){
  Random random=new Random(System.currentTimeMillis() + Thread.currentThread().getId() * 1000);
  int cnt=0;
  StringBuffer buffer=new StringBuffer();
  char ch;
  int end='z' + 1;
  int start=' ';
  while (cnt < length) {
    ch=(char)(random.nextInt(end - start) + start);
    if (Character.isLetterOrDigit(ch)) {
      buffer.append(ch);
      cnt++;
    }
  }
  return buffer.toString();
}",0.9473684210526316
127180,"/** 
 * getAsciiRandomString : Return a randomly generated String {talendTypes} String {Category} TalendString {param} int(6) length: length of the String to return {example} getAsciiRandomString(6) # Art34Z
 */
public static String getAsciiRandomString(int length){
  Random random=new Random();
  int cnt=0;
  StringBuffer buffer=new StringBuffer();
  char ch;
  int end='z' + 1;
  int start=' ';
  while (cnt < length) {
    ch=(char)(random.nextInt(end - start) + start);
    if (Character.isLetterOrDigit(ch)) {
      buffer.append(ch);
      cnt++;
    }
  }
  return buffer.toString();
}","/** 
 * getAsciiRandomString : Return a randomly generated String {talendTypes} String {Category} TalendString {param} int(6) length: length of the String to return {example} getAsciiRandomString(6) # Art34Z
 */
public static String getAsciiRandomString(int length){
  Random random=new Random(System.currentTimeMillis() + Thread.currentThread().getId() * 1000);
  int cnt=0;
  StringBuffer buffer=new StringBuffer();
  char ch;
  int end='z' + 1;
  int start=' ';
  while (cnt < length) {
    ch=(char)(random.nextInt(end - start) + start);
    if (Character.isLetterOrDigit(ch)) {
      buffer.append(ch);
      cnt++;
    }
  }
  return buffer.toString();
}",0.9473684210526316
127181,"private void resetAndRefreshLocal(final String names[]){
  resetModulesNeeded();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final String projectLabel=currentProject.getTechnicalLabel();
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProject eclipseProject=workspace.getRoot().getProject(projectLabel);
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    ISVNProviderServiceInCoreRuntime service=(ISVNProviderServiceInCoreRuntime)GlobalServiceRegister.getDefault().getService(ISVNProviderServiceInCoreRuntime.class);
    if (service != null) {
      File libFile=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA));
      if (service.isSvnLibSetupOnTAC() && service.isInSvn(libFile.getAbsolutePath()) && !getRepositoryContext().isOffline()) {
        List jars=new ArrayList();
        for (        String name : names) {
          jars.add(libFile.getAbsolutePath() + File.separatorChar + name);
        }
        service.depolyNewJar(jars);
        return;
      }
    }
  }
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(currentProject,""String_Node_Str""){
      @Override public void run() throws PersistenceException {
        try {
          for (          String name : names) {
            String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
            path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
            File libsTargetFile=new File(path);
            File source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
            FilesUtils.copyFile(source,libsTargetFile);
            synJavaLibs(source);
          }
          eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
        }
 catch (        IOException e) {
          CommonExceptionHandler.process(e);
        }
catch (        CoreException e) {
          CommonExceptionHandler.process(e);
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
    }
  }
}","private void resetAndRefreshLocal(final String names[]){
  resetModulesNeeded();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final String projectLabel=currentProject.getTechnicalLabel();
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProject eclipseProject=workspace.getRoot().getProject(projectLabel);
  try {
    for (    String name : names) {
      String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
      path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
      File libsTargetFile=new File(path);
      File source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
      synJavaLibs(source);
    }
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    ISVNProviderServiceInCoreRuntime service=(ISVNProviderServiceInCoreRuntime)GlobalServiceRegister.getDefault().getService(ISVNProviderServiceInCoreRuntime.class);
    if (service != null) {
      File libFile=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA));
      if (service.isSvnLibSetupOnTAC() && service.isInSvn(libFile.getAbsolutePath()) && !getRepositoryContext().isOffline()) {
        List jars=new ArrayList();
        for (        String name : names) {
          jars.add(libFile.getAbsolutePath() + File.separatorChar + name);
        }
        service.depolyNewJar(jars);
        return;
      }
    }
  }
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    final RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(currentProject,""String_Node_Str""){
      @Override public void run() throws PersistenceException {
        try {
          for (          String name : names) {
            String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
            path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
            File libsTargetFile=new File(path);
            File source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
            FilesUtils.copyFile(source,libsTargetFile);
          }
          eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
        }
 catch (        IOException e) {
          CommonExceptionHandler.process(e);
        }
catch (        CoreException e) {
          CommonExceptionHandler.process(e);
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      new Thread(){
        @Override public void run(){
          IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
          service.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
        }
      }
.start();
    }
  }
}",0.8768179428771684
127182,"@Override public void run() throws PersistenceException {
  try {
    for (    String name : names) {
      String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
      path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
      File libsTargetFile=new File(path);
      File source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
      FilesUtils.copyFile(source,libsTargetFile);
      synJavaLibs(source);
    }
    eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
catch (  CoreException e) {
    CommonExceptionHandler.process(e);
  }
}","@Override public void run(){
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  service.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
}",0.0801491146318732
127183,"/** 
 * Wrap an object, if necessary. If the object is null, return the NULL object. If it is an array or collection, wrap it in a JSONArray. If it is a map, wrap it in a JSONObject. If it is a standard property (Double, String, et al) then it is already wrapped. Otherwise, if it comes from one of the java packages, turn it into a string. And if it doesn't, try to wrap it in a JSONObject. If the wrapping fails, then null is returned.
 * @param object The object to wrap
 * @return The wrapped value
 */
static Object wrap(Object object){
  try {
    if (object == null) {
      return NULL;
    }
    if (object instanceof JSONObject || object instanceof JSONArray || object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String|| NULL.equals(object)) {
      return object;
    }
    if (object instanceof Collection) {
      return new JSONArray((Collection)object);
    }
    if (object.getClass().isArray()) {
      return new JSONArray(object);
    }
    if (object instanceof Map) {
      return new JSONObject((Map)object);
    }
    Package objectPackage=object.getClass().getPackage();
    String objectPackageName=(objectPackage != null ? objectPackage.getName() : ""String_Node_Str"");
    if (objectPackageName.startsWith(""String_Node_Str"") || objectPackageName.startsWith(""String_Node_Str"") || object.getClass().getClassLoader() == null) {
      return object.toString();
    }
    return new JSONObject(object);
  }
 catch (  Exception exception) {
    return null;
  }
}","/** 
 * Wrap an object, if necessary. If the object is null, return the NULL object. If it is an array or collection, wrap it in a JSONArray. If it is a map, wrap it in a JSONObject. If it is a standard property (Double, String, et al) then it is already wrapped. Otherwise, if it comes from one of the java packages, turn it into a string. And if it doesn't, try to wrap it in a JSONObject. If the wrapping fails, then null is returned.
 * @param object The object to wrap
 * @return The wrapped value
 */
static Object wrap(Object object){
  try {
    if (object == null || object instanceof org.dom4j.Document) {
      return NULL;
    }
    if (object instanceof JSONObject || object instanceof JSONArray || object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String|| NULL.equals(object)) {
      return object;
    }
    if (object instanceof Collection) {
      return new JSONArray((Collection)object);
    }
    if (object.getClass().isArray()) {
      return new JSONArray(object);
    }
    if (object instanceof Map) {
      return new JSONObject((Map)object);
    }
    Package objectPackage=object.getClass().getPackage();
    String objectPackageName=(objectPackage != null ? objectPackage.getName() : ""String_Node_Str"");
    if (objectPackageName.startsWith(""String_Node_Str"") || objectPackageName.startsWith(""String_Node_Str"") || object.getClass().getClassLoader() == null) {
      return object.toString();
    }
    return new JSONObject(object);
  }
 catch (  Exception exception) {
    return null;
  }
}",0.9881376037959668
127184,"private void resetAndRefreshLocal(final String names[]){
  resetModulesNeeded();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final String projectLabel=currentProject.getTechnicalLabel();
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProject eclipseProject=workspace.getRoot().getProject(projectLabel);
  try {
    for (    String name : names) {
      String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
      path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
      File libsTargetFile=new File(path);
      File source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
      synJavaLibs(source);
    }
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    ISVNProviderServiceInCoreRuntime service=(ISVNProviderServiceInCoreRuntime)GlobalServiceRegister.getDefault().getService(ISVNProviderServiceInCoreRuntime.class);
    if (service != null) {
      File libFile=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA));
      if (service.isSvnLibSetupOnTAC() && service.isInSvn(libFile.getAbsolutePath()) && !getRepositoryContext().isOffline()) {
        List jars=new ArrayList();
        for (        String name : names) {
          jars.add(libFile.getAbsolutePath() + File.separatorChar + name);
        }
        service.deployNewJar(jars);
        return;
      }
    }
  }
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    final RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(currentProject,""String_Node_Str""){
      @Override public void run() throws PersistenceException {
        try {
          for (          String name : names) {
            String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
            path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
            File libsTargetFile=new File(path);
            File source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
            FilesUtils.copyFile(source,libsTargetFile);
          }
          eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
        }
 catch (        IOException e) {
          CommonExceptionHandler.process(e);
        }
catch (        CoreException e) {
          CommonExceptionHandler.process(e);
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      new Thread(){
        @Override public void run(){
          IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
          service.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
        }
      }
.start();
    }
  }
}","private void resetAndRefreshLocal(final String names[]){
  resetModulesNeeded();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final String projectLabel=currentProject.getTechnicalLabel();
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProject eclipseProject=workspace.getRoot().getProject(projectLabel);
  try {
    for (    String name : names) {
      String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
      path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
      File libsTargetFile=new File(path);
      File source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
      synJavaLibs(source);
    }
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    ISVNProviderServiceInCoreRuntime service=(ISVNProviderServiceInCoreRuntime)GlobalServiceRegister.getDefault().getService(ISVNProviderServiceInCoreRuntime.class);
    if (service != null) {
      File libFile=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA));
      boolean localConnectionProvider=true;
      IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
      if (proxyRepositoryFactory != null) {
        try {
          localConnectionProvider=proxyRepositoryFactory.isLocalConnectionProvider();
        }
 catch (        PersistenceException e) {
        }
      }
      if (!localConnectionProvider && service.isSvnLibSetupOnTAC() && service.isInSvn(libFile.getAbsolutePath())&& !getRepositoryContext().isOffline()) {
        List jars=new ArrayList();
        for (        String name : names) {
          jars.add(libFile.getAbsolutePath() + File.separatorChar + name);
        }
        service.deployNewJar(jars);
        return;
      }
    }
    final RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(currentProject,""String_Node_Str""){
      @Override public void run() throws PersistenceException {
        try {
          for (          String name : names) {
            String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
            path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
            File libsTargetFile=new File(path);
            File source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
            FilesUtils.copyFile(source,libsTargetFile);
          }
          eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
        }
 catch (        IOException e) {
          CommonExceptionHandler.process(e);
        }
catch (        CoreException e) {
          CommonExceptionHandler.process(e);
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      new Thread(){
        @Override public void run(){
          IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
          service.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
        }
      }
.start();
    }
  }
}",0.9318181818181818
127185,"/** 
 * getAsciiRandomString : Return a randomly generated String {talendTypes} String {Category} TalendString {param} int(6) length: length of the String to return {example} getAsciiRandomString(6) # Art34Z
 */
public static String getAsciiRandomString(int length){
  Random random=new Random(System.currentTimeMillis() + Thread.currentThread().getId() * 1000);
  int cnt=0;
  StringBuffer buffer=new StringBuffer();
  char ch;
  int end='z' + 1;
  int start=' ';
  while (cnt < length) {
    ch=(char)(random.nextInt(end - start) + start);
    if (Character.isLetterOrDigit(ch)) {
      buffer.append(ch);
      cnt++;
    }
  }
  return buffer.toString();
}","/** 
 * getAsciiRandomString : Return a randomly generated String {talendTypes} String {Category} TalendString {param} int(6) length: length of the String to return {example} getAsciiRandomString(6) # Art34Z
 */
public static String getAsciiRandomString(int length){
  Random random=new Random();
  int cnt=0;
  StringBuffer buffer=new StringBuffer();
  char ch;
  int end='z' + 1;
  int start=' ';
  while (cnt < length) {
    ch=(char)(random.nextInt(end - start) + start);
    if (Character.isLetterOrDigit(ch)) {
      buffer.append(ch);
      cnt++;
    }
  }
  return buffer.toString();
}",0.9473684210526316
127186,"public String getProblemResource(){
  return this.type.getTypeName() + ""String_Node_Str"" + this.getName()+ ""String_Node_Str""+ this.getLineNumber()+ ""String_Node_Str"";
}","@Override public String getProblemResource(){
  return this.type.getTypeName() + ""String_Node_Str"" + this.getName()+ ""String_Node_Str""+ this.getLineNumber()+ ""String_Node_Str"";
}",0.9710982658959536
127187,"public TalendProblem(ProblemStatus status,String javaUnitName,IMarker marker,String markerErrorMessage,Integer lineNumber,String uniName,Integer charStart,Integer charEnd,ProblemType type,String version){
  super();
  setDescription(markerErrorMessage);
  setStatus(status);
  List<IProcess2> openedProcessList=CorePlugin.getDefault().getDesignerCoreService().getOpenedProcess(getEditors());
  for (  IProcess2 process : openedProcessList) {
    if (javaUnitName != null && javaUnitName.equals(process.getName())) {
      BasicJobInfo jobInfo=new BasicJobInfo(process.getId(),null,process.getVersion());
      jobInfo.setJobName(process.getName());
      setJobInfo(jobInfo);
    }
  }
  this.javaUnitName=javaUnitName;
  this.marker=marker;
  this.lineNumber=lineNumber;
  this.unitName=uniName;
  this.charStart=charStart;
  this.charEnd=charEnd;
  this.version=version;
  setType(type);
  setNodeName(uniName);
}","public TalendProblem(ProblemStatus status,Item item,IMarker marker,String markerErrorMessage,Integer lineNumber,String uniName,Integer charStart,Integer charEnd,ProblemType type){
  super();
  setDescription(markerErrorMessage);
  setStatus(status);
  if (item.getProperty().getId() != null) {
    BasicJobInfo jobInfo=new BasicJobInfo(item.getProperty().getId(),null,item.getProperty().getVersion());
    jobInfo.setJobName(item.getProperty().getLabel());
    setJobInfo(jobInfo);
  }
  this.javaUnitName=item.getProperty().getLabel();
  this.marker=marker;
  this.lineNumber=lineNumber;
  this.unitName=uniName;
  this.charStart=charStart;
  this.charEnd=charEnd;
  this.version=item.getProperty().getVersion();
  setType(type);
  setNodeName(uniName);
}",0.106523040095751
127188,"protected void addListeners(){
  installAllBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      List<ModuleToInstall> toInstall=getModulesToBeInstalled();
      final DownloadModuleJob job=new DownloadModuleJob(toInstall);
      job.addJobChangeListener(new JobChangeAdapter(){
        @Override public void done(        final IJobChangeEvent event){
          Display.getDefault().asyncExec(new Runnable(){
            @Override public void run(){
              if (event.getJob() instanceof DownloadModuleJob) {
                DownloadModuleJob theJob=(DownloadModuleJob)event.getJob();
                Set<String> downloadFialed=theJob.getDownloadFailed();
                Set<String> installedModule=theJob.getInstalledModule();
                jarsInstalledSuccuss.addAll(installedModule);
                int installedModules=installedModule.size();
                String success=installedModules + Messages.getString(""String_Node_Str"");
                String message=success;
                if (!downloadFialed.isEmpty()) {
                  String fail=Messages.getString(""String_Node_Str"");
                  String names=""String_Node_Str"";
                  for (                  String name : downloadFialed) {
                    if (names.length() > 0) {
                      names+=""String_Node_Str"" + name;
                    }
 else {
                      names+=name;
                    }
                  }
                  message=message + fail + names;
                }
                MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
                if (installedModules > 0) {
                  emptyLibs();
                }
              }
            }
          }
);
        }
      }
);
      job.setUser(true);
      job.setPriority(Job.INTERACTIVE);
      job.schedule();
      close();
    }
  }
);
}","protected void addListeners(){
  installAllBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      List<ModuleToInstall> toInstall=getModulesToBeInstalled();
      final DownloadModuleJob job=new DownloadModuleJob(toInstall);
      job.addJobChangeListener(new JobChangeAdapter(){
        @Override public void done(        final IJobChangeEvent event){
          Display.getDefault().asyncExec(new Runnable(){
            @Override public void run(){
              if (event.getJob() instanceof DownloadModuleJob) {
                DownloadModuleJob theJob=(DownloadModuleJob)event.getJob();
                Set<String> downloadFialed=theJob.getDownloadFailed();
                Set<String> installedModule=theJob.getInstalledModule();
                jarsInstalledSuccuss.addAll(installedModule);
                int installedModules=installedModule.size();
                String success=installedModules + Messages.getString(""String_Node_Str"");
                String message=success;
                if (!downloadFialed.isEmpty()) {
                  String fail=Messages.getString(""String_Node_Str"");
                  String names=""String_Node_Str"";
                  for (                  String name : downloadFialed) {
                    if (names.length() > 0) {
                      names+=""String_Node_Str"" + name;
                    }
 else {
                      names+=name;
                    }
                  }
                  message=message + fail + names;
                }
                MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
                if (installedModules > 0) {
                  emptyLibs();
                }
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
                  IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
                  if (service != null) {
                    service.refreshComponentView();
                  }
                }
              }
            }
          }
);
        }
      }
);
      job.setUser(true);
      job.setPriority(Job.INTERACTIVE);
      job.schedule();
      close();
    }
  }
);
}",0.910960504790839
127189,"public boolean getEnabledState(){
  return super.getEnabledState() && this.enableStateHandler.getEnabledState();
}","@Override public boolean getEnabledState(){
  return super.getEnabledState() && this.enableStateHandler.getEnabledState();
}",0.957983193277311
127190,"protected Command getCommandToExecute(){
  AbstractExtendedTableViewer extendedTableViewer=(AbstractExtendedTableViewer)extendedControlViewer;
  TableViewer tableViewer=extendedTableViewer.getTableViewerCreator().getTableViewer();
  ISelection selection=tableViewer.getSelection();
  StructuredSelection structuredSelection=(StructuredSelection)selection;
  Object[] objects=structuredSelection.toArray();
  return new ExtendedTableCopyCommand(Arrays.asList(objects));
}","@Override protected Command getCommandToExecute(){
  AbstractExtendedTableViewer extendedTableViewer=(AbstractExtendedTableViewer)extendedControlViewer;
  TableViewer tableViewer=extendedTableViewer.getTableViewerCreator().getTableViewer();
  ISelection selection=tableViewer.getSelection();
  StructuredSelection structuredSelection=(StructuredSelection)selection;
  Object[] objects=structuredSelection.toArray();
  colNum=getExtendedTableViewer().getTableViewerCreator().getTable().getColumnCount();
  return new ExtendedTableCopyCommand(Arrays.asList(objects));
}",0.9064609450337512
127191,"public boolean getEnabledState(){
  Object data=SimpleClipboard.getInstance().getData();
  return super.getEnabledState() && data != null && data instanceof List && !getExtendedControlViewer().isReadOnly();
}","@Override public boolean getEnabledState(){
  Object data=SimpleClipboard.getInstance().getData();
  boolean flag=true;
  int a=CopyPushButtonForExtendedTable.colNum;
  int colNum=getExtendedTableViewer().getTableViewerCreator().getTable().getColumnCount();
  if (data != null) {
    if (colNum == a) {
      flag=true;
    }
 else {
      flag=false;
    }
  }
  return super.getEnabledState() && data != null && data instanceof List && !getExtendedControlViewer().isReadOnly() && flag;
}",0.3558106169296987
127192,"/** 
 * look for all the required modules for a given bundle, and let the user decide to download it. this method is blocked until the dialog box is closed.
 * @param jarMissingEvent, must never be null
 */
protected void showMissingModuleDialog(final JarMissingEvent jarMissingEvent){
  if (allModulesNeededExtensionsForPlugin == null) {
    this.allModulesNeededExtensionsForPlugin=ModulesNeededProvider.getAllModulesNeededExtensionsForPlugin();
  }
  List<ModuleNeeded> requiredModulesForBundle=ModulesNeededProvider.filterRequiredModulesForBundle(jarMissingEvent.getBundleSymbolicName(),allModulesNeededExtensionsForPlugin);
  final List<String> requiredJars=new ArrayList<String>(requiredModulesForBundle.size());
  for (  ModuleNeeded module : requiredModulesForBundle) {
    String moduleName=module.getModuleName();
    if (!new File(jarMissingEvent.getExpectedLibFolder(),moduleName).exists()) {
      try {
        if (librariesService != null && (librariesService.getLibraryStatus(moduleName) == ELibraryInstallStatus.INSTALLED)) {
          List<ModuleNeeded> allModuleNeeded=ModulesNeededProvider.getModulesNeededForName(moduleName);
          for (          ModuleNeeded sameModule : allModuleNeeded) {
            String moduleLocation=sameModule.getModuleLocaion();
            if (sameModule.getStatus() == ELibraryInstallStatus.INSTALLED && moduleLocation != null && !moduleLocation.isEmpty()) {
              URI uri=new URI(moduleLocation);
              URL url=FileLocator.toFileURL(uri.toURL());
              if (""String_Node_Str"".equals(url.getProtocol())) {
                libraryManagerService.deploy(url.toURI(),null);
              }
              break;
            }
          }
        }
      }
 catch (      BusinessException e) {
        log.warn(""String_Node_Str"" + moduleName,e);
      }
catch (      URISyntaxException e) {
        log.warn(""String_Node_Str"" + moduleName,e);
      }
catch (      IOException e) {
        log.warn(""String_Node_Str"" + moduleName,e);
      }
    }
    if (!new File(jarMissingEvent.getExpectedLibFolder(),moduleName).exists()) {
      requiredJars.add(moduleName);
    }
  }
  if (!requiredJars.isEmpty()) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ExternalModulesInstallDialogWithProgress dialog=new ExternalModulesInstallDialogWithProgress(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),SWT.APPLICATION_MODAL);
        dialog.showDialog(true,requiredJars.toArray(new String[requiredJars.size()]));
      }
    }
);
  }
}","/** 
 * look for all the required modules for a given bundle, and let the user decide to download it. this method is blocked until the dialog box is closed.
 * @param jarMissingEvent, must never be null
 */
protected void showMissingModuleDialog(final JarMissingEvent jarMissingEvent){
  if (allModulesNeededExtensionsForPlugin == null) {
    this.allModulesNeededExtensionsForPlugin=ModulesNeededProvider.getAllModulesNeededExtensionsForPlugin();
  }
  List<ModuleNeeded> requiredModulesForBundle=ModulesNeededProvider.filterRequiredModulesForBundle(jarMissingEvent.getBundleSymbolicName(),allModulesNeededExtensionsForPlugin);
  final List<String> requiredJars=new ArrayList<String>(requiredModulesForBundle.size());
  for (  ModuleNeeded module : requiredModulesForBundle) {
    String moduleName=module.getModuleName();
    if (!new File(jarMissingEvent.getExpectedLibFolder(),moduleName).exists()) {
      try {
        if (librariesService != null && (librariesService.getLibraryStatus(moduleName) == ELibraryInstallStatus.INSTALLED)) {
          List<ModuleNeeded> allModuleNeeded=ModulesNeededProvider.getModulesNeededForName(moduleName);
          for (          ModuleNeeded sameModule : allModuleNeeded) {
            String moduleLocation=sameModule.getModuleLocaion();
            if (sameModule.getStatus() == ELibraryInstallStatus.INSTALLED && moduleLocation != null && !moduleLocation.isEmpty()) {
              URI uri=new URI(moduleLocation);
              URL url=FileLocator.toFileURL(uri.toURL());
              if (""String_Node_Str"".equals(url.getProtocol())) {
                libraryManagerService.deploy(url.toURI(),null);
              }
              break;
            }
          }
        }
      }
 catch (      BusinessException e) {
        log.warn(""String_Node_Str"" + moduleName,e);
      }
catch (      URISyntaxException e) {
        log.warn(""String_Node_Str"" + moduleName,e);
      }
catch (      IOException e) {
        log.warn(""String_Node_Str"" + moduleName,e);
      }
    }
    if (!new File(jarMissingEvent.getExpectedLibFolder(),moduleName).exists()) {
      requiredJars.add(moduleName);
    }
  }
  if (!requiredJars.isEmpty()) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        if (dialog == null) {
          dialog=new ExternalModulesInstallDialogWithProgress(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),SWT.APPLICATION_MODAL);
        }
        dialog.showDialog(true,requiredJars.toArray(new String[requiredJars.size()]));
      }
    }
);
  }
}",0.984650369528141
127193,"/** 
 * called when the jar loadingin hook has failed to find the jar this is never called in a GUI thread.
 */
@Override public void update(Observable o,Object arg){
  if (arg != null && arg instanceof JarMissingEvent) {
    final JarMissingEvent jarMissingEvent=(JarMissingEvent)arg;
    if (!bundlesAlreadyHandled.contains(jarMissingEvent.getBundleId())) {
      bundlesAlreadyHandled.add(jarMissingEvent.getBundleId());
      showMissingModuleDialog(jarMissingEvent);
    }
  }
 else {
    IllegalArgumentException illegalArgumentException=new IllegalArgumentException(""String_Node_Str"" + JarMissingEvent.class.getCanonicalName());
    illegalArgumentException.fillInStackTrace();
    log.error(""String_Node_Str"",illegalArgumentException);
  }
}","/** 
 * called when the jar loadingin hook has failed to find the jar this is never called in a GUI thread.
 */
@Override public void update(Observable o,Object arg){
  if (arg != null && arg instanceof JarMissingEvent) {
    final JarMissingEvent jarMissingEvent=(JarMissingEvent)arg;
    if (!bundlesAlreadyHandled.contains(jarMissingEvent.getBundleId())) {
      bundlesAlreadyHandled.add(jarMissingEvent.getBundleId());
      Display.getDefault().asyncExec(new Runnable(){
        @Override public void run(){
          showMissingModuleDialog(jarMissingEvent);
        }
      }
);
    }
  }
 else {
    IllegalArgumentException illegalArgumentException=new IllegalArgumentException(""String_Node_Str"" + JarMissingEvent.class.getCanonicalName());
    illegalArgumentException.fillInStackTrace();
    log.error(""String_Node_Str"",illegalArgumentException);
  }
}",0.9287042777433354
127194,"@Override public void run(){
  ExternalModulesInstallDialogWithProgress dialog=new ExternalModulesInstallDialogWithProgress(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),SWT.APPLICATION_MODAL);
  dialog.showDialog(true,requiredJars.toArray(new String[requiredJars.size()]));
}","@Override public void run(){
  if (dialog == null) {
    dialog=new ExternalModulesInstallDialogWithProgress(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),SWT.APPLICATION_MODAL);
  }
  dialog.showDialog(true,requiredJars.toArray(new String[requiredJars.size()]));
}",0.9053497942386832
127195,"protected Command getCommandToExecute(){
  AbstractExtendedTableViewer extendedTableViewer=(AbstractExtendedTableViewer)extendedControlViewer;
  TableViewer tableViewer=extendedTableViewer.getTableViewerCreator().getTableViewer();
  ISelection selection=tableViewer.getSelection();
  StructuredSelection structuredSelection=(StructuredSelection)selection;
  Object[] objects=structuredSelection.toArray();
  return new ExtendedTableCopyCommand(Arrays.asList(objects));
}","protected Command getCommandToExecute(){
  AbstractExtendedTableViewer extendedTableViewer=(AbstractExtendedTableViewer)extendedControlViewer;
  TableViewer tableViewer=extendedTableViewer.getTableViewerCreator().getTableViewer();
  ISelection selection=tableViewer.getSelection();
  StructuredSelection structuredSelection=(StructuredSelection)selection;
  Object[] objects=structuredSelection.toArray();
  colNum=getExtendedTableViewer().getTableViewerCreator().getTable().getColumnCount();
  return new ExtendedTableCopyCommand(Arrays.asList(objects));
}",0.9152872444011684
127196,"public boolean getEnabledState(){
  Object data=SimpleClipboard.getInstance().getData();
  return super.getEnabledState() && data != null && data instanceof List && !getExtendedControlViewer().isReadOnly();
}","public boolean getEnabledState(){
  Object data=SimpleClipboard.getInstance().getData();
  boolean flag=true;
  int a=CopyPushButtonForExtendedTable.colNum;
  int colNum=getExtendedTableViewer().getTableViewerCreator().getTable().getColumnCount();
  if (data != null) {
    if (colNum == a) {
      flag=true;
    }
 else {
      flag=false;
    }
  }
  return super.getEnabledState() && data != null && data instanceof List && !getExtendedControlViewer().isReadOnly() && flag;
}",0.3609898107714702
127197,"/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  if (contextType != null) {
    String encryptedPassword=null;
    try {
      encryptedPassword=PasswordEncryptUtil.encryptPassword(password);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    cloneConn.setPassword(encryptedPassword);
  }
 else {
    cloneConn.setPassword(password);
  }
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String template=null;
    if (dbConn.getURL() != null && dbConn.getURL().startsWith(DbConnStrForHive.URL_HIVE_2_TEMPLATE)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(dbConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}","/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  if (contextType != null) {
    String encryptedPassword=null;
    try {
      encryptedPassword=PasswordEncryptUtil.encryptPassword(password);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    cloneConn.setPassword(encryptedPassword);
  }
 else {
    cloneConn.setPassword(password);
  }
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String template=null;
    if (dbConn.getURL() != null && dbConn.getURL().startsWith(DbConnStrForHive.URL_HIVE_2_TEMPLATE)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(dbConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (EDatabaseTypeName.IBMDB2.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String cursorForDb2=""String_Node_Str"";
    String database=sidOrDatabase + cursorForDb2;
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,database,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}",0.955803228285934
127198,"public TalendProblem(ProblemStatus status,String javaUnitName,IMarker marker,String markerErrorMessage,Integer lineNumber,String uniName,Integer charStart,Integer charEnd,ProblemType type,String version){
  super();
  setDescription(markerErrorMessage);
  setStatus(status);
  List<IProcess2> openedProcessList=CorePlugin.getDefault().getDesignerCoreService().getOpenedProcess(getEditors());
  for (  IProcess2 process : openedProcessList) {
    if (javaUnitName != null && javaUnitName.equals(process.getName())) {
      BasicJobInfo jobInfo=new BasicJobInfo(process.getId(),null,process.getVersion());
      jobInfo.setJobName(process.getName());
      setJobInfo(jobInfo);
    }
  }
  this.javaUnitName=javaUnitName;
  this.marker=marker;
  this.lineNumber=lineNumber;
  this.unitName=uniName;
  this.charStart=charStart;
  this.charEnd=charEnd;
  this.version=version;
  setType(type);
  setNodeName(uniName);
}","public TalendProblem(ProblemStatus status,Item item,IMarker marker,String markerErrorMessage,Integer lineNumber,String uniName,Integer charStart,Integer charEnd,ProblemType type){
  super();
  setDescription(markerErrorMessage);
  setStatus(status);
  if (item.getProperty().getId() != null) {
    BasicJobInfo jobInfo=new BasicJobInfo(item.getProperty().getId(),null,item.getProperty().getVersion());
    jobInfo.setJobName(item.getProperty().getLabel());
    setJobInfo(jobInfo);
  }
  this.javaUnitName=item.getProperty().getLabel();
  this.marker=marker;
  this.lineNumber=lineNumber;
  this.unitName=uniName;
  this.charStart=charStart;
  this.charEnd=charEnd;
  this.version=item.getProperty().getVersion();
  setType(type);
  setNodeName(uniName);
}",0.106523040095751
127199,"/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  if (contextType != null) {
    String encryptedPassword=null;
    try {
      encryptedPassword=PasswordEncryptUtil.encryptPassword(password);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    cloneConn.setPassword(encryptedPassword);
  }
 else {
    cloneConn.setPassword(password);
  }
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String template=null;
    if (dbConn.getURL() != null && dbConn.getURL().startsWith(DbConnStrForHive.URL_HIVE_2_TEMPLATE)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(dbConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}","/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  if (contextType != null) {
    String encryptedPassword=null;
    try {
      encryptedPassword=PasswordEncryptUtil.encryptPassword(password);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    cloneConn.setPassword(encryptedPassword);
  }
 else {
    cloneConn.setPassword(password);
  }
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String template=null;
    if (dbConn.getURL() != null && dbConn.getURL().startsWith(DbConnStrForHive.URL_HIVE_2_TEMPLATE)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(dbConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (EDatabaseTypeName.IBMDB2.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String cursorForDb2=""String_Node_Str"";
    String database=sidOrDatabase + cursorForDb2;
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,database,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}",0.955803228285934
127200,"@Test public void testResultOK() throws TimeoutException, InterruptedException, ExecutionException {
  TimeoutTask<String> timoutTask=new TimeoutTask<String>(TEST_TASK);
  Callable<String> callable=new Callable<String>(){
    @Override public String call() throws Exception {
      Thread.sleep(10);
      return OK;
    }
  }
;
  Object result=timoutTask.run(callable,20,false);
  Assert.assertEquals(OK,result);
}","@Test public void testResultOK() throws TimeoutException, InterruptedException, ExecutionException {
  TimeoutTask<String> timoutTask=new TimeoutTask<String>(TEST_TASK);
  Callable<String> callable=new Callable<String>(){
    @Override public String call() throws Exception {
      Thread.sleep(10);
      return OK;
    }
  }
;
  FutureTask<String> futureTask=timoutTask.run(callable,20,false);
  Object result=futureTask.get();
  Assert.assertEquals(OK,result);
}",0.9136363636363636
127201,"/** 
 * ggu Comment method ""checkContextMode"". initialize and check context mode for the ConnectionItem.
 */
public static ContextItem checkContextMode(ConnectionItem connItem){
  if (connItem == null) {
    return null;
  }
  Connection connection=connItem.getConnection();
  if (connection == null) {
    return null;
  }
  String contextId=connection.getContextId();
  if (contextId == null || EMPTY.equals(contextId.trim()) || RepositoryNode.NO_ID.equals(contextId.trim())) {
    return null;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  try {
    IRepositoryViewObject context=factory.getLastVersion(contextId);
    if (context != null && factory.getStatus(context) != ERepositoryStatus.DELETED) {
      if (context.getProperty().getItem() instanceof ContextItem) {
        connection.setContextMode(true);
        return (ContextItem)context.getProperty().getItem();
      }
    }
  }
 catch (  PersistenceException e) {
  }
  connection.setContextMode(false);
  connection.setContextId(null);
  return null;
}","/** 
 * ggu Comment method ""checkContextMode"". initialize and check context mode for the ConnectionItem.
 */
public static ContextItem checkContextMode(ConnectionItem connItem){
  if (connItem == null) {
    return null;
  }
  Connection connection=connItem.getConnection();
  if (connection == null) {
    return null;
  }
  String contextId=connection.getContextId();
  if (contextId == null || EMPTY.equals(contextId.trim()) || RepositoryNode.NO_ID.equals(contextId.trim())) {
    connection.setContextMode(false);
    connection.setContextId(null);
    return null;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  try {
    IRepositoryViewObject context=factory.getLastVersion(contextId);
    if (context != null && factory.getStatus(context) != ERepositoryStatus.DELETED) {
      if (context.getProperty().getItem() instanceof ContextItem) {
        connection.setContextMode(true);
        return (ContextItem)context.getProperty().getItem();
      }
    }
  }
 catch (  PersistenceException e) {
  }
  connection.setContextMode(false);
  connection.setContextId(null);
  return null;
}",0.9663749424228466
127202,"/** 
 * ggu Comment method ""checkContextMode"". initialize and check context mode for the ConnectionItem.
 */
public static ContextItem checkContextMode(ConnectionItem connItem){
  if (connItem == null) {
    return null;
  }
  Connection connection=connItem.getConnection();
  if (connection == null) {
    return null;
  }
  String contextId=connection.getContextId();
  if (contextId == null || EMPTY.equals(contextId.trim()) || RepositoryNode.NO_ID.equals(contextId.trim())) {
    return null;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  try {
    IRepositoryViewObject context=factory.getLastVersion(contextId);
    if (context != null && factory.getStatus(context) != ERepositoryStatus.DELETED) {
      if (context.getProperty().getItem() instanceof ContextItem) {
        connection.setContextMode(true);
        return (ContextItem)context.getProperty().getItem();
      }
    }
  }
 catch (  PersistenceException e) {
  }
  connection.setContextMode(false);
  connection.setContextId(null);
  return null;
}","/** 
 * ggu Comment method ""checkContextMode"". initialize and check context mode for the ConnectionItem.
 */
public static ContextItem checkContextMode(ConnectionItem connItem){
  if (connItem == null) {
    return null;
  }
  Connection connection=connItem.getConnection();
  if (connection == null) {
    return null;
  }
  String contextId=connection.getContextId();
  if (contextId == null || EMPTY.equals(contextId.trim()) || RepositoryNode.NO_ID.equals(contextId.trim())) {
    connection.setContextMode(false);
    connection.setContextId(null);
    return null;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  try {
    IRepositoryViewObject context=factory.getLastVersion(contextId);
    if (context != null && factory.getStatus(context) != ERepositoryStatus.DELETED) {
      if (context.getProperty().getItem() instanceof ContextItem) {
        connection.setContextMode(true);
        return (ContextItem)context.getProperty().getItem();
      }
    }
  }
 catch (  PersistenceException e) {
  }
  connection.setContextMode(false);
  connection.setContextId(null);
  return null;
}",0.9663749424228466
127203,"@Override public void run(){
  MessageDialog.openError(Display.getDefault().getActiveShell(),""String_Node_Str"",Messages.getString(""String_Node_Str""));
}","@Override public void run(){
}",0.3296703296703296
127204,"/** 
 * When database connection is renamed, refresh the connection label in the component view of job.
 * @param item
 */
public void refreshComponentView(Item item);",public void refreshComponentView();,0.3465346534653465
127205,"@Override public void run(){
  String message=""String_Node_Str"";
  if (!job.getInstalledModule().isEmpty()) {
    message=Messages.getString(""String_Node_Str"",data.getName());
    emptyLibs();
  }
 else {
    message=Messages.getString(""String_Node_Str"",data.getName());
    ;
  }
  MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
}","@Override public void run(){
  String message=""String_Node_Str"";
  if (!job.getInstalledModule().isEmpty()) {
    message=Messages.getString(""String_Node_Str"",data.getName());
    emptyLibs();
  }
 else {
    message=Messages.getString(""String_Node_Str"",data.getName());
    ;
  }
  MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
  if (enabledButtonCount.get() == 0) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
      IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
      if (service != null) {
        service.refreshComponentView();
      }
    }
  }
}",0.6794171220400729
127206,"/** 
 * called when the user clicked on a indivual download button.
 * @param button, to make it disabled or enabled
 * @param enabledButtonCount, if 0 means that the last button has been clicked. This needs to maintained whenenabeling or disabeling the button
 * @param data, the data to install
 */
protected void launchIndividualDownload(final AtomicInteger enabledButtonCount,final ModuleToInstall data,Button button){
  button.setEnabled(false);
  enabledButtonCount.decrementAndGet();
  final DownloadModuleJob job=new DownloadModuleJob(Collections.singletonList(data));
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      Display.getDefault().asyncExec(new Runnable(){
        @Override public void run(){
          String message=""String_Node_Str"";
          if (!job.getInstalledModule().isEmpty()) {
            message=Messages.getString(""String_Node_Str"",data.getName());
            emptyLibs();
          }
 else {
            message=Messages.getString(""String_Node_Str"",data.getName());
            ;
          }
          MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
        }
      }
);
    }
  }
);
  job.setUser(true);
  job.setPriority(Job.INTERACTIVE);
  job.schedule();
  if (enabledButtonCount.get() == 0) {
    close();
  }
}","/** 
 * called when the user clicked on a indivual download button.
 * @param button, to make it disabled or enabled
 * @param enabledButtonCount, if 0 means that the last button has been clicked. This needs to maintained whenenabeling or disabeling the button
 * @param data, the data to install
 */
protected void launchIndividualDownload(final AtomicInteger enabledButtonCount,final ModuleToInstall data,Button button){
  button.setEnabled(false);
  enabledButtonCount.decrementAndGet();
  final DownloadModuleJob job=new DownloadModuleJob(Collections.singletonList(data));
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      Display.getDefault().asyncExec(new Runnable(){
        @Override public void run(){
          String message=""String_Node_Str"";
          if (!job.getInstalledModule().isEmpty()) {
            message=Messages.getString(""String_Node_Str"",data.getName());
            emptyLibs();
          }
 else {
            message=Messages.getString(""String_Node_Str"",data.getName());
            ;
          }
          MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
          if (enabledButtonCount.get() == 0) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              if (service != null) {
                service.refreshComponentView();
              }
            }
          }
        }
      }
);
    }
  }
);
  job.setUser(true);
  job.setPriority(Job.INTERACTIVE);
  job.schedule();
  if (enabledButtonCount.get() == 0) {
    close();
  }
}",0.8671775223499362
127207,"@Override public void done(IJobChangeEvent event){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      String message=""String_Node_Str"";
      if (!job.getInstalledModule().isEmpty()) {
        message=Messages.getString(""String_Node_Str"",data.getName());
        emptyLibs();
      }
 else {
        message=Messages.getString(""String_Node_Str"",data.getName());
        ;
      }
      MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
    }
  }
);
}","@Override public void done(IJobChangeEvent event){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      String message=""String_Node_Str"";
      if (!job.getInstalledModule().isEmpty()) {
        message=Messages.getString(""String_Node_Str"",data.getName());
        emptyLibs();
      }
 else {
        message=Messages.getString(""String_Node_Str"",data.getName());
        ;
      }
      MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
      if (enabledButtonCount.get() == 0) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
          IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
          if (service != null) {
            service.refreshComponentView();
          }
        }
      }
    }
  }
);
}",0.7325905292479109
127208,"/** 
 * ggu Comment method ""checkContextMode"". initialize and check context mode for the ConnectionItem.
 */
public static ContextItem checkContextMode(ConnectionItem connItem){
  if (connItem == null) {
    return null;
  }
  Connection connection=connItem.getConnection();
  if (connection == null) {
    return null;
  }
  String contextId=connection.getContextId();
  if (contextId == null || EMPTY.equals(contextId.trim()) || RepositoryNode.NO_ID.equals(contextId.trim())) {
    return null;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  try {
    IRepositoryViewObject context=factory.getLastVersion(contextId);
    if (context != null && factory.getStatus(context) != ERepositoryStatus.DELETED) {
      if (context.getProperty().getItem() instanceof ContextItem) {
        connection.setContextMode(true);
        return (ContextItem)context.getProperty().getItem();
      }
    }
  }
 catch (  PersistenceException e) {
  }
  connection.setContextMode(false);
  connection.setContextId(null);
  return null;
}","/** 
 * ggu Comment method ""checkContextMode"". initialize and check context mode for the ConnectionItem.
 */
public static ContextItem checkContextMode(ConnectionItem connItem){
  if (connItem == null) {
    return null;
  }
  Connection connection=connItem.getConnection();
  if (connection == null) {
    return null;
  }
  String contextId=connection.getContextId();
  if (contextId == null || EMPTY.equals(contextId.trim()) || RepositoryNode.NO_ID.equals(contextId.trim())) {
    connection.setContextMode(false);
    connection.setContextId(null);
    return null;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  try {
    IRepositoryViewObject context=factory.getLastVersion(contextId);
    if (context != null && factory.getStatus(context) != ERepositoryStatus.DELETED) {
      if (context.getProperty().getItem() instanceof ContextItem) {
        connection.setContextMode(true);
        return (ContextItem)context.getProperty().getItem();
      }
    }
  }
 catch (  PersistenceException e) {
  }
  connection.setContextMode(false);
  connection.setContextId(null);
  return null;
}",0.9663749424228466
127209,"private String cutStr(String str,int len){
  String s=""String_Node_Str"";
  if (str.length() < len) {
    s+=str;
  }
  for (int i=0; i < str.length(); i++) {
    int r=i % len;
    if (i != 0 && i <= len) {
      if (r == 0) {
        s+=str.substring(i - len,len) + ""String_Node_Str"";
      }
    }
 else     if (i > len) {
      String laststr=str.substring(i - 1);
      if (laststr.length() > len) {
        s+=cutStr(laststr,len);
      }
 else {
        s+=laststr;
      }
      break;
    }
  }
  return s;
}","private String cutStr(String str,int len){
  String s=""String_Node_Str"";
  if (str == null || ""String_Node_Str"".equals(str)) {
    return null;
  }
  if (str.length() < len) {
    s+=str;
  }
  for (int i=0; i < str.length(); i++) {
    int r=i % len;
    if (i != 0 && i <= len) {
      if (r == 0) {
        s+=str.substring(i - len,len) + ""String_Node_Str"";
      }
    }
 else     if (i > len) {
      String laststr=str.substring(i - 1);
      if (laststr.length() > len) {
        s+=cutStr(laststr,len);
      }
 else {
        s+=laststr;
      }
      break;
    }
  }
  return s;
}",0.5998193315266486
127210,"public void init(){
  keyListener=new Listener(){
    public void handleEvent(    Event event){
      Widget widget=event.widget;
      if (widget instanceof Control) {
        Control control=(Control)widget;
        if (refControlIsShell && control.getShell() == refComposite || !refControlIsShell && refControlIsParentOf(control)) {
          keyPressedExecute(event);
        }
      }
    }
  }
;
  this.refComposite.getDisplay().addFilter(SWT.KeyDown,keyListener);
}","public void init(){
  keyListener=new Listener(){
    public void handleEvent(    Event event){
      Widget widget=event.widget;
      if (widget instanceof Control) {
        Control control=(Control)widget;
        if (refControlIsShell && control.getShell() == refComposite || !refControlIsShell && refControlIsParentOf(control)) {
          keyPressedExecute(event);
        }
      }
    }
  }
;
  this.refComposite.getDisplay().addFilter(SWT.KeyDown,keyListener);
  this.refComposite.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      CommandStackForComposite.this.refComposite.getDisplay().removeFilter(SWT.KeyDown,keyListener);
      keyListener=null;
    }
  }
);
}",0.7892976588628763
127211,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
    Object property=node.getProperties(EProperties.CONTENT_TYPE);
switch (node.getType()) {
case REPOSITORY_ELEMENT:
case STABLE_SYSTEM_FOLDER:
      canWork=false;
    break;
case SYSTEM_FOLDER:
  if (ERepositoryObjectType.GENERATED.equals(property) || ERepositoryObjectType.JOBS.equals(property) || ERepositoryObjectType.JOBLETS.equals(property)|| ERepositoryObjectType.SQLPATTERNS.equals(property)|| ERepositoryObjectType.REFERENCED_PROJECTS.equals(property)|| ERepositoryObjectType.SVN_ROOT.equals(property)) {
    canWork=false;
  }
break;
case SIMPLE_FOLDER:
if (ERepositoryObjectType.JOB_DOC.equals(property) || ERepositoryObjectType.JOBLET_DOC.equals(property) || (ERepositoryObjectType.SQLPATTERNS.equals(property) && !isUnderUserDefined(node))) {
canWork=false;
}
if (node.getObject().getProperty().getItem().getState().isDeleted()) {
canWork=false;
}
break;
default :
}
if (canWork && !ProjectManager.getInstance().isInCurrentMainProject(node)) {
canWork=false;
}
}
setEnabled(canWork);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
    Object property=node.getProperties(EProperties.CONTENT_TYPE);
switch (node.getType()) {
case REPOSITORY_ELEMENT:
case STABLE_SYSTEM_FOLDER:
      canWork=false;
    break;
case SYSTEM_FOLDER:
  if (ERepositoryObjectType.GENERATED.equals(property) || ERepositoryObjectType.JOBS.equals(property) || ERepositoryObjectType.JOBLETS.equals(property)|| ERepositoryObjectType.SQLPATTERNS.equals(property)|| ERepositoryObjectType.REFERENCED_PROJECTS.equals(property)|| ERepositoryObjectType.SVN_ROOT.equals(property)) {
    canWork=false;
  }
break;
case SIMPLE_FOLDER:
if (ERepositoryObjectType.JOB_DOC.equals(property) || ERepositoryObjectType.JOBLET_DOC.equals(property) || (ERepositoryObjectType.SQLPATTERNS.equals(property) && !isUnderUserDefined(node))) {
canWork=false;
}
if (node.getObject().isDeleted()) {
canWork=false;
}
break;
default :
}
if (canWork && !ProjectManager.getInstance().isInCurrentMainProject(node)) {
canWork=false;
}
}
setEnabled(canWork);
}",0.9835345773874864
127212,"/** 
 * DOC qwei Comment method ""deleteFolder"".
 * @param deleteActionCache
 */
private void deleteFolder(final RepositoryNode node,final IProxyRepositoryFactory factory,final DeleteActionCache deleteActionCache){
  FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
  if (folderItem.getState().isDeleted()) {
    try {
      deleteElements(factory,deleteActionCache,node);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    return;
  }
  IPath path=RepositoryNodeUtilities.getPath(node);
  ERepositoryObjectType objectType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  List<IRepositoryNode> repositoryList=node.getChildren();
  boolean success=true;
  Exception bex=null;
  for (  IRepositoryNode repositoryNode : repositoryList) {
    try {
      deleteRepositoryNode(repositoryNode,factory);
    }
 catch (    Exception e) {
      bex=e;
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (bex != null) {
    final Shell shell=getShell();
    MessageDialog.openWarning(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  if (!success) {
    return;
  }
  folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
  folderItem.getState().setDeleted(true);
  String fullPath=""String_Node_Str"";
  FolderItem curItem=folderItem;
  while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem && ((FolderItem)((Item)curItem.getParent()).getParent()).getType().getValue() == FolderType.FOLDER) {
    FolderItem parentFolder=(FolderItem)curItem.getParent();
    if (""String_Node_Str"".equals(fullPath)) {
      fullPath=parentFolder.getProperty().getLabel() + fullPath;
    }
 else {
      fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
    }
    curItem=parentFolder;
  }
  if (!objectType.getKey().toString().startsWith(""String_Node_Str"") && objectType != ERepositoryObjectType.SQLPATTERNS && objectType != ERepositoryObjectType.ROUTINES && objectType != ERepositoryObjectType.JOB_SCRIPT && curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem && !objectType.isDQItemType()) {
    FolderItem parentFolder=(FolderItem)curItem.getParent();
    if (""String_Node_Str"".equals(fullPath)) {
      fullPath=parentFolder.getProperty().getLabel() + fullPath;
    }
 else {
      fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
    }
    curItem=parentFolder;
  }
  if (objectType.getKey().toString().startsWith(""String_Node_Str"")) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.ROUTINES) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.JOB_SCRIPT) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.SQLPATTERNS) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
    while (!((FolderItem)curItem.getParent()).getProperty().getLabel().equals(""String_Node_Str"")) {
      fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType.isDQItemType()) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  folderItem.getState().setPath(fullPath);
  this.setChildFolderPath(folderItem);
}","/** 
 * DOC qwei Comment method ""deleteFolder"".
 * @param deleteActionCache
 */
private void deleteFolder(final RepositoryNode node,final IProxyRepositoryFactory factory,final DeleteActionCache deleteActionCache){
  if (node.getObject().isDeleted()) {
    try {
      deleteElements(factory,deleteActionCache,node);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    return;
  }
  IPath path=RepositoryNodeUtilities.getPath(node);
  ERepositoryObjectType objectType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  List<IRepositoryNode> repositoryList=node.getChildren();
  boolean success=true;
  Exception bex=null;
  for (  IRepositoryNode repositoryNode : repositoryList) {
    try {
      deleteRepositoryNode(repositoryNode,factory);
    }
 catch (    Exception e) {
      bex=e;
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (bex != null) {
    final Shell shell=getShell();
    MessageDialog.openWarning(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  if (!success) {
    return;
  }
  FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
  folderItem.getState().setDeleted(true);
  String fullPath=""String_Node_Str"";
  FolderItem curItem=folderItem;
  while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem && ((FolderItem)((Item)curItem.getParent()).getParent()).getType().getValue() == FolderType.FOLDER) {
    FolderItem parentFolder=(FolderItem)curItem.getParent();
    if (""String_Node_Str"".equals(fullPath)) {
      fullPath=parentFolder.getProperty().getLabel() + fullPath;
    }
 else {
      fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
    }
    curItem=parentFolder;
  }
  if (!objectType.getKey().toString().startsWith(""String_Node_Str"") && objectType != ERepositoryObjectType.SQLPATTERNS && objectType != ERepositoryObjectType.ROUTINES && objectType != ERepositoryObjectType.JOB_SCRIPT && curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem && !objectType.isDQItemType()) {
    FolderItem parentFolder=(FolderItem)curItem.getParent();
    if (""String_Node_Str"".equals(fullPath)) {
      fullPath=parentFolder.getProperty().getLabel() + fullPath;
    }
 else {
      fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
    }
    curItem=parentFolder;
  }
  if (objectType.getKey().toString().startsWith(""String_Node_Str"")) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.ROUTINES) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.JOB_SCRIPT) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.SQLPATTERNS) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
    while (!((FolderItem)curItem.getParent()).getProperty().getLabel().equals(""String_Node_Str"")) {
      fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType.isDQItemType()) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  folderItem.getState().setPath(fullPath);
  this.setChildFolderPath(folderItem);
}",0.9903500473036896
127213,"@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          selectNodes.add((RepositoryNode)obj);
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      for (      RepositoryNode node : selectNodes) {
        try {
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    @Override public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              IRepositoryViewObject object=node.getObject();
              if (coreService != null && object != null && object.getProperty() != null) {
                Item item=object.getProperty().getItem();
                IProcess iProcess=coreService.getProcessFromItem(item);
                if (iProcess != null && iProcess instanceof IProcess2) {
                  IProcess2 process=(IProcess2)iProcess;
                  process.removeProblems4ProcessDeleted();
                }
              }
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            if (needReturn) {
              return;
            }
            types.add(node.getObjectType());
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
            if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      @Override public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            boolean isSqlTemplate=false;
            if (node.getObject() instanceof Folder) {
              Object label=node.getProperties(EProperties.LABEL);
              if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                isSqlTemplate=true;
              }
            }
            if (!isSqlTemplate) {
              types.add(node.getContentType());
              if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                types.add(ERepositoryObjectType.DOCUMENTATION);
              }
              deletedFolder.add(node);
              deleteFolder(node,factory,deleteActionCache);
            }
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
    if (forceBuild) {
      IRunProcessService service=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      service.buildJavaProject();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  synchUI(deleteActionCache);
}","@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          selectNodes.add((RepositoryNode)obj);
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      for (      RepositoryNode node : selectNodes) {
        try {
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    @Override public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              IRepositoryViewObject object=node.getObject();
              if (coreService != null && object != null && object.getProperty() != null) {
                Item item=object.getProperty().getItem();
                IProcess iProcess=coreService.getProcessFromItem(item);
                if (iProcess != null && iProcess instanceof IProcess2) {
                  IProcess2 process=(IProcess2)iProcess;
                  process.removeProblems4ProcessDeleted();
                }
              }
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            if (needReturn) {
              return;
            }
            types.add(node.getObjectType());
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            if (node.getChildren().size() > 0 && !node.getObject().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      @Override public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            boolean isSqlTemplate=false;
            if (node.getObject() instanceof Folder) {
              Object label=node.getProperties(EProperties.LABEL);
              if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                isSqlTemplate=true;
              }
            }
            if (!isSqlTemplate) {
              types.add(node.getContentType());
              if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                types.add(ERepositoryObjectType.DOCUMENTATION);
              }
              deletedFolder.add(node);
              deleteFolder(node,factory,deleteActionCache);
            }
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
    if (forceBuild) {
      IRunProcessService service=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      service.buildJavaProject();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  synchUI(deleteActionCache);
}",0.9901457485100608
127214,"/** 
 * cli Comment method ""clearRecords"". revert the original values.
 */
public void clearRecords(){
  List list=getOpenedProcessList();
  if (list != null) {
    list.clear();
  }
  list=getProcessList();
  if (list != null) {
    list.clear();
  }
  MultiKeyMap map=getOpenProcessMap();
  if (map != null) {
    map.clear();
  }
  map=getRepositoryObjectMap();
  if (map != null) {
    map.clear();
  }
}","/** 
 * cli Comment method ""clearRecords"". revert the original values.
 */
public void clearRecords(){
  List<IProcess2> list=getOpenedProcessList();
  if (list != null) {
    list.clear();
  }
  List<IRepositoryViewObject> listobj=getProcessList();
  if (listobj != null) {
    listobj.clear();
  }
  MultiKeyMap map=getOpenProcessMap();
  if (map != null) {
    map.clear();
  }
  map=getRepositoryObjectMap();
  if (map != null) {
    map.clear();
  }
}",0.9351851851851852
127215,"@Override protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=Messages.getString(""String_Node_Str"");
  String message=null;
  List<IRepositoryNode> originalChildren=node.getChildren();
  final List<IRepositoryNode> children=new ArrayList<IRepositoryNode>(originalChildren);
  if (children.size() == 0) {
    return;
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  if (resChangeService != null) {
    List<IRepositoryNode> dependentNodes=resChangeService.getDependentConnNodesInRecycleBin(children);
    if (dependentNodes != null && !dependentNodes.isEmpty()) {
      resChangeService.openDependcesDialog(dependentNodes);
      return;
    }
  }
  if (children.size() > 1) {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
 else {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
  final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(children,null);
  final Shell shell=getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    return;
  }
  for (  IRepositoryNode child : children) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      ITDQRepositoryService tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      if (!tdqRepService.removeAliasInSQLExplorer(child)) {
        MessageDialog.openWarning(shell,title,Messages.getString(""String_Node_Str""));
        try {
          IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
          factory.saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
        return;
      }
    }
  }
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      for (      IRepositoryNode child : children) {
        try {
          deleteElements(factory,(RepositoryNode)child);
        }
 catch (        Exception e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,iRunnableWithProgress);
    if (forceBuild) {
      IRunProcessService service=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      service.buildJavaProject();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  if (unDeleteItems.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
        dialog.open();
      }
    }
);
  }
}","@Override protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=Messages.getString(""String_Node_Str"");
  String message=null;
  List<IRepositoryNode> originalChildren=node.getChildren();
  final List<IRepositoryNode> children=new ArrayList<IRepositoryNode>(originalChildren);
  if (children.size() == 0) {
    return;
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  if (resChangeService != null) {
    List<IRepositoryNode> dependentNodes=resChangeService.getDependentConnNodesInRecycleBin(children);
    if (dependentNodes != null && !dependentNodes.isEmpty()) {
      resChangeService.openDependcesDialog(dependentNodes);
      return;
    }
  }
  if (children.size() > 1) {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
 else {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
  final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(children,null);
  final Shell shell=getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    DeleteActionCache.getInstance().revertParameters();
    return;
  }
  for (  IRepositoryNode child : children) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      ITDQRepositoryService tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      if (!tdqRepService.removeAliasInSQLExplorer(child)) {
        MessageDialog.openWarning(shell,title,Messages.getString(""String_Node_Str""));
        try {
          IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
          factory.saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
        return;
      }
    }
  }
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      for (      IRepositoryNode child : children) {
        try {
          deleteElements(factory,(RepositoryNode)child);
        }
 catch (        Exception e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,iRunnableWithProgress);
    if (forceBuild) {
      IRunProcessService service=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      service.buildJavaProject();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  if (unDeleteItems.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
        dialog.open();
      }
    }
);
  }
  DeleteActionCache.getInstance().revertParameters();
}",0.9861356188555584
127216,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
    Object obj=getLabelOfNode(node);
switch (node.getType()) {
case SIMPLE_FOLDER:
      String label=null;
    if (obj instanceof String) {
      label=(String)obj;
    }
  if (node.getContentType() == ERepositoryObjectType.JOB_DOC || node.getContentType() == ERepositoryObjectType.JOBLET_DOC || (node.getContentType() == ERepositoryObjectType.SQLPATTERNS && !isUnderUserDefined(node)) || RepositoryConstants.USER_DEFINED.equals(label)) {
    canWork=false;
  }
if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
  canWork=false;
}
break;
default :
canWork=false;
}
if (canWork && !ProjectManager.getInstance().isInCurrentMainProject(node)) {
canWork=false;
}
}
setEnabled(canWork);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
    Object obj=getLabelOfNode(node);
switch (node.getType()) {
case SIMPLE_FOLDER:
      String label=null;
    if (obj instanceof String) {
      label=(String)obj;
    }
  if (node.getContentType() == ERepositoryObjectType.JOB_DOC || node.getContentType() == ERepositoryObjectType.JOBLET_DOC || (node.getContentType() == ERepositoryObjectType.SQLPATTERNS && !isUnderUserDefined(node)) || RepositoryConstants.USER_DEFINED.equals(label)) {
    canWork=false;
  }
if (node.getObject() != null && node.getObject().isDeleted()) {
  canWork=false;
}
break;
default :
canWork=false;
}
if (canWork && !ProjectManager.getInstance().isInCurrentMainProject(node)) {
canWork=false;
}
}
setEnabled(canWork);
}",0.97955474784189
127217,"@Override public List<IRepositoryViewObject> getChildren(){
  List<IRepositoryViewObject> toReturn=new ArrayList<IRepositoryViewObject>();
  FolderItem folderItem=(FolderItem)getProperty().getItem();
  for (  Object current : folderItem.getChildren()) {
    IRepositoryObject currentChild=new Folder(((FolderItem)current).getProperty(),getContentType());
    toReturn.add(currentChild);
  }
  return toReturn;
}","@Override public List<IRepositoryViewObject> getChildren(){
  List<IRepositoryViewObject> toReturn=new ArrayList<IRepositoryViewObject>();
  return toReturn;
}",0.5578947368421052
127218,"/** 
 * Returns the type.
 * @return ERepositoryObjectType.FOLDER
 */
public ERepositoryObjectType getRepositoryObjectType(){
  return ERepositoryObjectType.FOLDER;
}","/** 
 * Returns the type.
 * @return ERepositoryObjectType.FOLDER
 */
@Override public ERepositoryObjectType getRepositoryObjectType(){
  return ERepositoryObjectType.FOLDER;
}",0.9707602339181286
127219,"public Folder(Property property,ERepositoryObjectType type){
  super(property);
  this.type=type;
}","public Folder(Property property,ERepositoryObjectType type){
  super(property.getId(),property.getLabel());
  FolderItem folderItem=PropertiesFactory.eINSTANCE.createFolderItem();
  folderItem.setProperty(super.getProperty());
  super.getProperty().setItem(folderItem);
  ItemState itemState=PropertiesFactory.eINSTANCE.createItemState();
  folderItem.setState(itemState);
  itemState.setDeleted(property.getItem().getState().isDeleted());
  path=property.getItem().getState().getPath();
  itemState.setPath(path);
  org.talend.core.model.properties.Project emfproject=ProjectManager.getInstance().getProject(property.getItem());
  this.projectLabel=emfproject.getLabel();
  this.type=type;
}",0.2199747155499367
127220,"@Override public boolean isDeleted(){
  return property.getItem().getState().isDeleted();
}","@Override public boolean isDeleted(){
  return getProperty().getItem().getState().isDeleted();
}",0.962566844919786
127221,"@Override public String getPath(){
  return property.getItem().getState().getPath();
}","@Override public String getPath(){
  return getProperty().getItem().getState().getPath();
}",0.96045197740113
127222,"/** 
 * Clear the data in this viewer.
 * @param jobContextManager2
 */
public void clear(){
  viewer.setInput(Collections.EMPTY_LIST);
}","/** 
 * Clear the data in this viewer.
 * @param jobContextManager2
 */
public void clear(){
  viewer.setInput(Collections.EMPTY_LIST);
  helper.initHelper(null);
}",0.9102990033222592
127223,"@Override protected void setTableViewerCreatorOptions(TableViewerCreator<IMetadataColumn> newTableViewerCreator){
  super.setTableViewerCreatorOptions(newTableViewerCreator);
}","@Override protected void setTableViewerCreatorOptions(TableViewerCreator<IMetadataColumn> newTableViewerCreator){
  super.setTableViewerCreatorOptions(newTableViewerCreator);
  newTableViewerCreator.setLazyLoad(true);
}",0.8911392405063291
127224,"@Override public boolean isPathValid(Project project,ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (path == null || type == null) {
    return false;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
 else   if (RepositoryConstants.isSystemFolder(label) || RepositoryConstants.isGeneratedFolder(label) || RepositoryConstants.isJobsFolder(label)|| RepositoryConstants.isJobletsFolder(label)) {
    return false;
  }
 else {
    IProject fsProject=ResourceModelUtils.getProject(project);
    String completePath=null;
    if (type.equals(ERepositoryObjectType.TDQ_PATTERN_REGEX)) {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label.toString();
    }
 else {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + path.toString();
      completePath=completePath + IPath.SEPARATOR + label;
    }
    IFolder existingFolder=ResourceUtils.getFolder(fsProject,completePath,false);
    return !existingFolder.exists();
  }
}","@Override public boolean isPathValid(Project project,ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (path == null || type == null) {
    return false;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
 else   if (RepositoryConstants.isSystemFolder(label) || RepositoryConstants.isGeneratedFolder(label) || RepositoryConstants.isJobsFolder(label)|| RepositoryConstants.isJobletsFolder(label)) {
    return false;
  }
 else {
    IProject fsProject=ResourceModelUtils.getProject(project);
    String completePath=null;
    if (type.equals(ERepositoryObjectType.TDQ_PATTERN_REGEX)) {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label.toString();
    }
 else {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + path.toString();
      completePath=completePath + IPath.SEPARATOR + label;
    }
    IFolder existingFolder=ResourceUtils.getFolder(fsProject,completePath,false);
    if (existingFolder.getLocation().toFile().exists()) {
      return false;
    }
    return !existingFolder.exists();
  }
}",0.9614678899082568
127225,"/** 
 * DOC ggu Comment method ""isKeywords"".
 * @param itemName
 * @return
 */
private boolean isKeywords(String itemName){
  if (property != null) {
    Item item=property.getItem();
    if (item instanceof ProcessItem || item instanceof JobletProcessItem || item instanceof RoutineItem) {
      return KeywordsValidator.isKeyword(itemName);
    }
  }
  return false;
}","/** 
 * DOC ggu Comment method ""isKeywords"".
 * @param itemName
 * @return
 */
protected boolean isKeywords(String itemName){
  if (property != null) {
    Item item=property.getItem();
    if (item instanceof ProcessItem || item instanceof JobletProcessItem || item instanceof RoutineItem) {
      return KeywordsValidator.isKeyword(itemName);
    }
  }
  return false;
}",0.9838274932614556
127226,"private Folder formdFolderTree(List<String> paths){
  Folder root=new Folder(Folder.ROOT_FOLDER);
  for (  String path : paths) {
    String[] splitedPaths=path.split(""String_Node_Str"");
    Folder lastFolder=null;
    for (int i=0; i < splitedPaths.length; i++) {
      String folderLabel=splitedPaths[i];
      if (i == 0) {
        lastFolder=new Folder(folderLabel);
        root.addChildFolder(lastFolder);
      }
 else {
        Folder newFolder=new Folder(folderLabel);
        lastFolder.addChildFolder(newFolder);
        lastFolder=newFolder;
      }
    }
  }
  return root;
}","private Folder formdFolderTree(List<String> paths){
  Folder root=new Folder(Folder.ROOT_FOLDER);
  for (  String path : paths) {
    String[] splitedPaths=path.split(""String_Node_Str"");
    Folder parentFolder=root;
    for (int i=0; i < splitedPaths.length; i++) {
      String parentLabel=root.getName();
      String folderLabel=splitedPaths[i];
      if (i > 0) {
        parentLabel=splitedPaths[i - 1];
        Folder findParent=findParentFolder(root,parentLabel,i);
        if (findParent != null) {
          parentFolder=findParent;
        }
      }
      boolean exist=false;
      for (      Folder children : parentFolder.getChildren()) {
        if (children.getName().equals(folderLabel)) {
          exist=true;
        }
      }
      if (!exist) {
        parentFolder.addChildFolder(new Folder(folderLabel));
      }
    }
  }
  return root;
}",0.4948311509303928
127227,"public Object[] getElements(Object inputElement){
  ERepositoryObjectType type=(ERepositoryObjectType)inputElement;
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    List<String> folders=factory.getFolders(type);
    List<String> fullPathList=new ArrayList<String>();
    List<String> finalFolders=new ArrayList<String>();
    for (int k=folders.size(); k > 0; k--) {
      fullPathList=getFullDirectoryPath(folders);
      finalFolders.add(fullPathList.get(0).trim());
      folders=getNewDirectoryPath(folders);
    }
    for (int i=0; i < finalFolders.size(); i++) {
      if (finalFolders.get(i).equals(""String_Node_Str"")) {
        finalFolders.remove(i);
        i--;
      }
    }
    Folder root=formdFolderTree(finalFolders);
    return new Folder[]{root};
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
    return new String[0];
  }
}","public Object[] getElements(Object inputElement){
  ERepositoryObjectType type=(ERepositoryObjectType)inputElement;
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    List<String> folders=factory.getFolders(type);
    Collections.sort(folders);
    Folder root=formdFolderTree(folders);
    return new Folder[]{root};
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
    return new String[0];
  }
}",0.6177935943060499
127228,"protected void evaluateTextField(){
  if (readOnly) {
    return;
  }
  if (nameText == null || nameText.isDisposed()) {
    return;
  }
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().startsWith(""String_Node_Str"") || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (isKeywords(nameText.getText()) || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(getPropertyLabel(StringUtils.trimToNull(nameText.getText())));
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
    property.setModificationDate(new Date());
  }
  updatePageStatus();
}","protected void evaluateTextField(){
  if (readOnly) {
    return;
  }
  if (nameText == null || nameText.isDisposed()) {
    return;
  }
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameText.getText().startsWith(""String_Node_Str"") || !Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (isKeywords(nameText.getText()) || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(getPropertyLabel(StringUtils.trimToNull(nameText.getText())));
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
    property.setModificationDate(new Date());
  }
  updatePageStatus();
}",0.964063579820318
127229,"private Folder formdFolderTree(List<String> paths){
  Folder root=new Folder(Folder.ROOT_FOLDER);
  String path=paths.get(paths.size() - 1);
  String[] splitedPaths=path.split(""String_Node_Str"");
  Folder lastFolder=null;
  for (int i=0; i < splitedPaths.length; i++) {
    String folderLabel=splitedPaths[i];
    if (i == 0) {
      lastFolder=new Folder(folderLabel);
      root.addChildFolder(lastFolder);
    }
 else {
      Folder newFolder=new Folder(folderLabel);
      lastFolder.addChildFolder(newFolder);
      lastFolder=newFolder;
    }
  }
  return root;
}","private Folder formdFolderTree(List<String> paths){
  Folder root=new Folder(Folder.ROOT_FOLDER);
  for (  String path : paths) {
    String[] splitedPaths=path.split(""String_Node_Str"");
    Folder lastFolder=null;
    for (int i=0; i < splitedPaths.length; i++) {
      String folderLabel=splitedPaths[i];
      if (i == 0) {
        lastFolder=new Folder(folderLabel);
        root.addChildFolder(lastFolder);
      }
 else {
        Folder newFolder=new Folder(folderLabel);
        lastFolder.addChildFolder(newFolder);
        lastFolder=newFolder;
      }
    }
  }
  return root;
}",0.9317199654278306
127230,"public Object[] getElements(Object inputElement){
  ERepositoryObjectType type=(ERepositoryObjectType)inputElement;
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    List<String> folders=factory.getFolders(type);
    Folder root=formdFolderTree(folders);
    return new Folder[]{root};
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
    return new String[0];
  }
}","public Object[] getElements(Object inputElement){
  ERepositoryObjectType type=(ERepositoryObjectType)inputElement;
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    List<String> folders=factory.getFolders(type);
    List<String> fullPathList=new ArrayList<String>();
    List<String> finalFolders=new ArrayList<String>();
    for (int k=folders.size(); k > 0; k--) {
      fullPathList=getFullDirectoryPath(folders);
      finalFolders.add(fullPathList.get(0).trim());
      folders=getNewDirectoryPath(folders);
    }
    for (int i=0; i < finalFolders.size(); i++) {
      if (finalFolders.get(i).equals(""String_Node_Str"")) {
        finalFolders.remove(i);
        i--;
      }
    }
    Folder root=formdFolderTree(finalFolders);
    return new Folder[]{root};
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
    return new String[0];
  }
}",0.6317321688500728
127231,"private Folder formdFolderTree(List<String> paths){
  Folder root=new Folder(Folder.ROOT_FOLDER);
  String path=paths.get(paths.size() - 1);
  String[] splitedPaths=path.split(""String_Node_Str"");
  Folder lastFolder=null;
  for (int i=0; i < splitedPaths.length; i++) {
    String folderLabel=splitedPaths[i];
    if (i == 0) {
      lastFolder=new Folder(folderLabel);
      root.addChildFolder(lastFolder);
    }
 else {
      Folder newFolder=new Folder(folderLabel);
      lastFolder.addChildFolder(newFolder);
      lastFolder=newFolder;
    }
  }
  return root;
}","private Folder formdFolderTree(List<String> paths){
  Folder root=new Folder(Folder.ROOT_FOLDER);
  for (  String path : paths) {
    String[] splitedPaths=path.split(""String_Node_Str"");
    Folder lastFolder=null;
    for (int i=0; i < splitedPaths.length; i++) {
      String folderLabel=splitedPaths[i];
      if (i == 0) {
        lastFolder=new Folder(folderLabel);
        root.addChildFolder(lastFolder);
      }
 else {
        Folder newFolder=new Folder(folderLabel);
        lastFolder.addChildFolder(newFolder);
        lastFolder=newFolder;
      }
    }
  }
  return root;
}",0.9317199654278306
127232,"public Object[] getElements(Object inputElement){
  ERepositoryObjectType type=(ERepositoryObjectType)inputElement;
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    List<String> folders=factory.getFolders(type);
    Folder root=formdFolderTree(folders);
    return new Folder[]{root};
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
    return new String[0];
  }
}","public Object[] getElements(Object inputElement){
  ERepositoryObjectType type=(ERepositoryObjectType)inputElement;
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    List<String> folders=factory.getFolders(type);
    List<String> fullPathList=new ArrayList<String>();
    List<String> finalFolders=new ArrayList<String>();
    for (int k=folders.size(); k > 0; k--) {
      fullPathList=getFullDirectoryPath(folders);
      finalFolders.add(fullPathList.get(0).trim());
      folders=getNewDirectoryPath(folders);
    }
    for (int i=0; i < finalFolders.size(); i++) {
      if (finalFolders.get(i).equals(""String_Node_Str"")) {
        finalFolders.remove(i);
        i--;
      }
    }
    Folder root=formdFolderTree(finalFolders);
    return new Folder[]{root};
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
    return new String[0];
  }
}",0.6317321688500728
127233,"private Folder formdFolderTree(List<String> paths){
  Folder root=new Folder(Folder.ROOT_FOLDER);
  for (  String path : paths) {
    String[] splitedPaths=path.split(""String_Node_Str"");
    Folder lastFolder=null;
    for (int i=0; i < splitedPaths.length; i++) {
      String folderLabel=splitedPaths[i];
      if (i == 0) {
        lastFolder=new Folder(folderLabel);
        root.addChildFolder(lastFolder);
      }
 else {
        Folder newFolder=new Folder(folderLabel);
        lastFolder.addChildFolder(newFolder);
        lastFolder=newFolder;
      }
    }
  }
  return root;
}","private Folder formdFolderTree(List<String> paths){
  Folder root=new Folder(Folder.ROOT_FOLDER);
  for (  String path : paths) {
    String[] splitedPaths=path.split(""String_Node_Str"");
    Folder parentFolder=root;
    for (int i=0; i < splitedPaths.length; i++) {
      String parentLabel=root.getName();
      String folderLabel=splitedPaths[i];
      if (i > 0) {
        parentLabel=splitedPaths[i - 1];
        Folder findParent=findParentFolder(root,parentLabel,i);
        if (findParent != null) {
          parentFolder=findParent;
        }
      }
      boolean exist=false;
      for (      Folder children : parentFolder.getChildren()) {
        if (children.getName().equals(folderLabel)) {
          exist=true;
        }
      }
      if (!exist) {
        parentFolder.addChildFolder(new Folder(folderLabel));
      }
    }
  }
  return root;
}",0.4948311509303928
127234,"public Object[] getElements(Object inputElement){
  ERepositoryObjectType type=(ERepositoryObjectType)inputElement;
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    List<String> folders=factory.getFolders(type);
    List<String> fullPathList=new ArrayList<String>();
    List<String> finalFolders=new ArrayList<String>();
    for (int k=folders.size(); k > 0; k--) {
      fullPathList=getFullDirectoryPath(folders);
      finalFolders.add(fullPathList.get(0).trim());
      folders=getNewDirectoryPath(folders);
    }
    for (int i=0; i < finalFolders.size(); i++) {
      if (finalFolders.get(i).equals(""String_Node_Str"")) {
        finalFolders.remove(i);
        i--;
      }
    }
    Folder root=formdFolderTree(finalFolders);
    return new Folder[]{root};
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
    return new String[0];
  }
}","public Object[] getElements(Object inputElement){
  ERepositoryObjectType type=(ERepositoryObjectType)inputElement;
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    List<String> folders=factory.getFolders(type);
    Collections.sort(folders);
    Folder root=formdFolderTree(folders);
    return new Folder[]{root};
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
    return new String[0];
  }
}",0.6177935943060499
127235,"/** 
 * DOC bqian Comment method ""initTableListener"".
 */
private void initTableListener(){
  tableListener=new Listener(){
    Shell tip=null;
    Label label=null;
    public void handleEvent(    Event event){
switch (event.type) {
case SWT.Dispose:
case SWT.KeyDown:
case SWT.MouseMove:
{
          if (tip == null) {
            break;
          }
          tip.dispose();
          tip=null;
          label=null;
          break;
        }
case SWT.MouseHover:
{
        TreeItem item=table.getItem(new Point(event.x,event.y));
        if (item != null) {
          if (tip != null && !tip.isDisposed()) {
            tip.dispose();
          }
          String content=getTooltipContent(item);
          content=PathUtils.cutStr(content,30);
          if (content == null) {
            return;
          }
          tip=new Shell(table.getShell(),SWT.ON_TOP | SWT.TOOL);
          tip.setLayout(new FillLayout());
          label=new Label(tip,SWT.NONE);
          label.setForeground(table.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_FOREGROUND));
          label.setBackground(table.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_BACKGROUND));
          label.setData(""String_Node_Str"",item);
          label.setText(content);
          label.addListener(SWT.MouseExit,labelListener);
          label.addListener(SWT.MouseDown,labelListener);
          checkShellBounds(tip,event);
          tip.setVisible(true);
        }
      }
  }
}
}
;
}","/** 
 * DOC bqian Comment method ""initTableListener"".
 */
private void initTableListener(){
  tableListener=new Listener(){
    Shell tip=null;
    Label label=null;
    public void handleEvent(    Event event){
switch (event.type) {
case SWT.Dispose:
case SWT.KeyDown:
case SWT.MouseMove:
{
          if (tip == null) {
            break;
          }
          tip.dispose();
          tip=null;
          label=null;
          break;
        }
case SWT.MouseHover:
{
        TreeItem item=table.getItem(new Point(event.x,event.y));
        if (item != null) {
          if (tip != null && !tip.isDisposed()) {
            tip.dispose();
          }
          String content=getTooltipContent(item);
          content=cutStr(content,30);
          if (content == null) {
            return;
          }
          tip=new Shell(table.getShell(),SWT.ON_TOP | SWT.TOOL);
          tip.setLayout(new FillLayout());
          label=new Label(tip,SWT.NONE);
          label.setForeground(table.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_FOREGROUND));
          label.setBackground(table.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_BACKGROUND));
          label.setData(""String_Node_Str"",item);
          label.setText(content);
          label.addListener(SWT.MouseExit,labelListener);
          label.addListener(SWT.MouseDown,labelListener);
          checkShellBounds(tip,event);
          tip.setVisible(true);
        }
      }
  }
}
}
;
}",0.9965870307167236
127236,"/** 
 * DOC bqian Comment method ""initTableListener"".
 */
private void initTableListener(){
  tableListener=new Listener(){
    Shell tip=null;
    Label label=null;
    public void handleEvent(    Event event){
switch (event.type) {
case SWT.Dispose:
case SWT.KeyDown:
case SWT.MouseMove:
{
          if (tip == null)           break;
          tip.dispose();
          tip=null;
          label=null;
          break;
        }
case SWT.MouseHover:
{
        TreeItem item=table.getItem(new Point(event.x,event.y));
        if (item != null) {
          if (tip != null && !tip.isDisposed()) {
            tip.dispose();
          }
          String content=getTooltipContent(item);
          content=PathUtils.cutStr(content,30);
          if (content == null) {
            return;
          }
          tip=new Shell(table.getShell(),SWT.ON_TOP | SWT.TOOL);
          tip.setLayout(new FillLayout());
          label=new Label(tip,SWT.NONE);
          label.setForeground(table.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_FOREGROUND));
          label.setBackground(table.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_BACKGROUND));
          label.setData(""String_Node_Str"",item);
          label.setText(content);
          label.addListener(SWT.MouseExit,labelListener);
          label.addListener(SWT.MouseDown,labelListener);
          checkShellBounds(tip,event);
          tip.setVisible(true);
        }
      }
  }
}
}
;
}","/** 
 * DOC bqian Comment method ""initTableListener"".
 */
private void initTableListener(){
  tableListener=new Listener(){
    Shell tip=null;
    Label label=null;
    public void handleEvent(    Event event){
switch (event.type) {
case SWT.Dispose:
case SWT.KeyDown:
case SWT.MouseMove:
{
          if (tip == null)           break;
          tip.dispose();
          tip=null;
          label=null;
          break;
        }
case SWT.MouseHover:
{
        TreeItem item=table.getItem(new Point(event.x,event.y));
        if (item != null) {
          if (tip != null && !tip.isDisposed()) {
            tip.dispose();
          }
          String content=getTooltipContent(item);
          content=cutStr(content,30);
          if (content == null) {
            return;
          }
          tip=new Shell(table.getShell(),SWT.ON_TOP | SWT.TOOL);
          tip.setLayout(new FillLayout());
          label=new Label(tip,SWT.NONE);
          label.setForeground(table.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_FOREGROUND));
          label.setBackground(table.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_BACKGROUND));
          label.setData(""String_Node_Str"",item);
          label.setText(content);
          label.addListener(SWT.MouseExit,labelListener);
          label.addListener(SWT.MouseDown,labelListener);
          checkShellBounds(tip,event);
          tip.setVisible(true);
        }
      }
  }
}
}
;
}",0.9965493443754312
127237,"public boolean exportFilter(Viewer viewer,Object parentElement,Object element);","public boolean exportFilter(Viewer viewer,Object parentElement,Object element,String[] filterTypeNames);",0.8633879781420765
127238,"@Override protected void addFieldsListeners(){
  xmlXsdFilePath.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent event){
      if (xmlXsdFilePath.getResult() == null) {
        return;
      }
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        checkFieldsValue();
        if (!valid) {
          return;
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  xmlXsdFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent event){
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        getConnection().getRoot().clear();
        getConnection().getGroup().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(xmlXsdFilePath.getText()));
      StringBuilder fileContent=new StringBuilder();
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e) {
            ExceptionHandler.process(e);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (!XmlUtil.isXMLFile(file.getPath())) {
        setFileContent(file);
      }
      String str;
      try {
        Charset guessCharset=CharsetToolkit.guessEncoding(file,4096);
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessCharset.displayName()));
        while ((str=in.readLine()) != null) {
          fileContent.append(str + ""String_Node_Str"");
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
        fileContentText.setText(new String(fileContent));
      }
 catch (      Exception e) {
        String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + xmlXsdFilePath.getText().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        if (e instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        fileContentText.setText(msgError);
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception exception) {
          ExceptionHandler.process(exception);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !""String_Node_Str"".equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      checkFieldsValue();
      isModifing=true;
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
      }
 else {
        treePopulator.setLimit(Integer.valueOf(str));
      }
      valid=treePopulator.populateTree(xmlXsdFilePath.getText(),treeNode);
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
    }
  }
);
  outputFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
      checkFieldsValue();
    }
  }
);
}","@Override protected void addFieldsListeners(){
  xmlXsdFilePath.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent event){
      if (xmlXsdFilePath.getResult() == null) {
        return;
      }
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        checkFieldsValue();
        if (!valid) {
          return;
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  xmlXsdFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent event){
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        getConnection().getRoot().clear();
        getConnection().getGroup().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(xmlXsdFilePath.getText()));
      StringBuilder fileContent=new StringBuilder();
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e) {
            ExceptionHandler.process(e);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (!XmlUtil.isXMLFile(file.getPath())) {
        setFileContent(file);
      }
      String str;
      try {
        Charset guessCharset=CharsetToolkit.guessEncoding(file,4096);
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessCharset.displayName()));
        while ((str=in.readLine()) != null) {
          fileContent.append(str + ""String_Node_Str"");
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
        fileContentText.setText(new String(fileContent));
      }
 catch (      Exception e) {
        String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + xmlXsdFilePath.getText().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        if (e instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        fileContentText.setText(msgError);
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception exception) {
          ExceptionHandler.process(exception);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !""String_Node_Str"".equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      valid=treePopulator.populateTree(text,treeNode);
      checkFieldsValue();
      isModifing=true;
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
      }
 else {
        treePopulator.setLimit(Integer.valueOf(str));
      }
      valid=treePopulator.populateTree(xmlXsdFilePath.getText(),treeNode);
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
    }
  }
);
  outputFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
      checkFieldsValue();
    }
  }
);
}",0.9963134258328308
127239,"@Test public void testGetDbTypeByClassNameAndDriverJar(){
  Assert.assertNull(extractMetaManger.getDbTypeByClassNameAndDriverJar(null,null));
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",null),EDatabaseTypeName.MYSQL.getXmlName());
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",null),EDatabaseTypeName.REDSHIFT.getXmlName());
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",""String_Node_Str""),EDatabaseTypeName.PSQL.getXmlName());
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",""String_Node_Str""),EDatabaseTypeName.ACCESS.getXmlName());
}","@Test public void testGetDbTypeByClassNameAndDriverJar(){
  Assert.assertNull(extractMetaManger.getDbTypeByClassNameAndDriverJar(null,null));
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",null),EDatabaseTypeName.MYSQL.getXmlName());
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",null),EDatabaseTypeName.PSQL.getXmlName());
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",""String_Node_Str""),EDatabaseTypeName.PSQL.getXmlName());
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",""String_Node_Str""),EDatabaseTypeName.ACCESS.getXmlName());
}",0.9915966386554622
127240,"private Folder formdFolderTree(List<String> paths){
  Folder root=new Folder(Folder.ROOT_FOLDER);
  for (  String path : paths) {
    String[] splitedPaths=path.split(""String_Node_Str"");
    Folder lastFolder=null;
    for (int i=0; i < splitedPaths.length; i++) {
      String folderLabel=splitedPaths[i];
      Folder existFolder=findFolder(root,folderLabel);
      if (existFolder == null) {
        if (i == 0) {
          lastFolder=new Folder(folderLabel);
          root.addChildFolder(lastFolder);
        }
 else {
          Folder newFolder=new Folder(folderLabel);
          lastFolder.addChildFolder(newFolder);
          lastFolder=newFolder;
        }
      }
 else {
        lastFolder=existFolder;
      }
    }
  }
  return root;
}","private Folder formdFolderTree(List<String> paths){
  Folder root=new Folder(Folder.ROOT_FOLDER);
  String path=paths.get(paths.size() - 1);
  String[] splitedPaths=path.split(""String_Node_Str"");
  Folder lastFolder=null;
  for (int i=0; i < splitedPaths.length; i++) {
    String folderLabel=splitedPaths[i];
    if (i == 0) {
      lastFolder=new Folder(folderLabel);
      root.addChildFolder(lastFolder);
    }
 else {
      Folder newFolder=new Folder(folderLabel);
      lastFolder.addChildFolder(newFolder);
      lastFolder=newFolder;
    }
  }
  return root;
}",0.4677296886864085
127241,"/** 
 * {@inheritDoc}
 */
@Override public void run(){
  ContextSetConfigurationDialog dialog=new ContextSetConfigurationDialog(shell,manager);
  if (dialog.open() == IDialogConstants.OK_ID) {
    List<IContext> result=dialog.getResultContexts();
    manager.getContextManager().setListContext(result);
    Command command=new Command(){
      @Override public void execute(){
        if (manager.getProcess() != null && manager.getProcess() instanceof IProcess2) {
          IUpdateManager updateManager=manager.getProcess().getUpdateManager();
          if (updateManager != null) {
            updateManager.update(EUpdateItemType.CONTEXT);
          }
        }
        manager.refreshTableTab();
        manager.refreshTreeTab();
      }
    }
;
    if (manager.getCommandStack() == null) {
      command.execute();
    }
 else {
      manager.getCommandStack().execute(command);
    }
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void run(){
  ContextSetConfigurationDialog dialog=new ContextSetConfigurationDialog(shell,manager);
  if (dialog.open() == IDialogConstants.OK_ID) {
    List<IContext> result=dialog.getResultContexts();
    manager.getContextManager().setListContext(result);
    Command command=new Command(){
      @Override public void execute(){
        if (manager.getProcess() != null && manager.getProcess() instanceof IProcess2) {
          IUpdateManager updateManager=manager.getProcess().getUpdateManager();
          if (updateManager != null) {
            updateManager.update(EUpdateItemType.CONTEXT);
          }
        }
 else {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITdqContextService.class)) {
            ITdqContextService tdqContextService=(ITdqContextService)GlobalServiceRegister.getDefault().getService(ITdqContextService.class);
            if (tdqContextService != null) {
              tdqContextService.setReportEditorDirty(manager);
            }
          }
        }
        manager.refreshTableTab();
        manager.refreshTreeTab();
      }
    }
;
    if (manager.getCommandStack() == null) {
      command.execute();
    }
 else {
      manager.getCommandStack().execute(command);
    }
  }
}",0.8205128205128205
127242,"@Override public void execute(){
  if (manager.getProcess() != null && manager.getProcess() instanceof IProcess2) {
    IUpdateManager updateManager=manager.getProcess().getUpdateManager();
    if (updateManager != null) {
      updateManager.update(EUpdateItemType.CONTEXT);
    }
  }
  manager.refreshTableTab();
  manager.refreshTreeTab();
}","@Override public void execute(){
  if (manager.getProcess() != null && manager.getProcess() instanceof IProcess2) {
    IUpdateManager updateManager=manager.getProcess().getUpdateManager();
    if (updateManager != null) {
      updateManager.update(EUpdateItemType.CONTEXT);
    }
  }
 else {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITdqContextService.class)) {
      ITdqContextService tdqContextService=(ITdqContextService)GlobalServiceRegister.getDefault().getService(ITdqContextService.class);
      if (tdqContextService != null) {
        tdqContextService.setReportEditorDirty(manager);
      }
    }
  }
  manager.refreshTableTab();
  manager.refreshTreeTab();
}",0.6608863198458574
127243,"public AcceptModuleLicensesWizardDialog(Shell parentShell,IWizard newWizard,List<ModuleToInstall> modulesToInstall){
  super(parentShell,newWizard);
  this.modulesToInstall=modulesToInstall;
}","public AcceptModuleLicensesWizardDialog(Shell parentShell,IWizard newWizard,List<ModuleToInstall> modulesToInstall,final IProgressMonitor monitor){
  super(parentShell,newWizard);
  this.monitor=monitor;
  this.modulesToInstall=modulesToInstall;
}",0.7471526195899773
127244,"@Override protected void cancelPressed(){
  boolean canceled=MessageDialog.openQuestion(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  if (canceled) {
    setReturnCode(Window.CANCEL);
    close();
  }
 else {
    setReturnCode(Window.OK);
  }
}","@Override protected void cancelPressed(){
  boolean canceled=MessageDialog.openQuestion(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  if (canceled) {
    setReturnCode(Window.CANCEL);
    monitor.setCanceled(true);
    close();
  }
 else {
    setReturnCode(Window.OK);
  }
}",0.9490968801313628
127245,"protected boolean checkAndAcceptLicenses(){
  final AtomicBoolean accepted=new AtomicBoolean(true);
  if (hasLicensesToAccept()) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        AcceptModuleLicensesWizard licensesWizard=new AcceptModuleLicensesWizard(toDownload);
        AcceptModuleLicensesWizardDialog wizardDialog=new AcceptModuleLicensesWizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),licensesWizard,toDownload);
        wizardDialog.setPageSize(700,380);
        wizardDialog.create();
        if (wizardDialog.open() != Window.OK) {
          accepted.set(false);
        }
      }
    }
);
  }
  return accepted.get();
}","protected boolean checkAndAcceptLicenses(final IProgressMonitor monitor){
  final AtomicBoolean accepted=new AtomicBoolean(true);
  if (hasLicensesToAccept()) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        AcceptModuleLicensesWizard licensesWizard=new AcceptModuleLicensesWizard(toDownload);
        AcceptModuleLicensesWizardDialog wizardDialog=new AcceptModuleLicensesWizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),licensesWizard,toDownload,monitor);
        wizardDialog.setPageSize(700,380);
        wizardDialog.create();
        if (wizardDialog.open() != Window.OK) {
          accepted.set(false);
        }
      }
    }
);
  }
  return accepted.get();
}",0.9736842105263158
127246,"@Override public void run(){
  AcceptModuleLicensesWizard licensesWizard=new AcceptModuleLicensesWizard(toDownload);
  AcceptModuleLicensesWizardDialog wizardDialog=new AcceptModuleLicensesWizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),licensesWizard,toDownload);
  wizardDialog.setPageSize(700,380);
  wizardDialog.create();
  if (wizardDialog.open() != Window.OK) {
    accepted.set(false);
  }
}","@Override public void run(){
  AcceptModuleLicensesWizard licensesWizard=new AcceptModuleLicensesWizard(toDownload);
  AcceptModuleLicensesWizardDialog wizardDialog=new AcceptModuleLicensesWizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),licensesWizard,toDownload,monitor);
  wizardDialog.setPageSize(700,380);
  wizardDialog.create();
  if (wizardDialog.open() != Window.OK) {
    accepted.set(false);
  }
}",0.9907407407407408
127247,"@Override public void run(){
  MessageDialog.openError(Display.getDefault().getActiveShell(),""String_Node_Str"",Messages.getString(""String_Node_Str""));
}","@Override public void run(){
}",0.3296703296703296
127248,"@Override protected void addFieldsListeners(){
  xmlXsdFilePath.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent event){
      if (xmlXsdFilePath.getResult() == null) {
        return;
      }
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        checkFieldsValue();
        if (!valid) {
          return;
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  xmlXsdFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent event){
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        getConnection().getRoot().clear();
        getConnection().getGroup().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(xmlXsdFilePath.getText()));
      StringBuilder fileContent=new StringBuilder();
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e) {
            ExceptionHandler.process(e);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (!XmlUtil.isXMLFile(file.getPath())) {
        setFileContent(file);
      }
      String str;
      try {
        Charset guessCharset=CharsetToolkit.guessEncoding(file,4096);
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessCharset.displayName()));
        while ((str=in.readLine()) != null) {
          fileContent.append(str + ""String_Node_Str"");
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
        fileContentText.setText(new String(fileContent));
      }
 catch (      Exception e) {
        String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + xmlXsdFilePath.getText().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        if (e instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        fileContentText.setText(msgError);
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception exception) {
          ExceptionHandler.process(exception);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !""String_Node_Str"".equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      checkFieldsValue();
      isModifing=true;
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
      }
 else {
        treePopulator.setLimit(Integer.valueOf(str));
      }
      valid=treePopulator.populateTree(xmlXsdFilePath.getText(),treeNode);
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
    }
  }
);
  outputFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
      checkFieldsValue();
    }
  }
);
}","@Override protected void addFieldsListeners(){
  xmlXsdFilePath.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent event){
      if (xmlXsdFilePath.getResult() == null) {
        return;
      }
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        checkFieldsValue();
        if (!valid) {
          return;
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  xmlXsdFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent event){
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        getConnection().getRoot().clear();
        getConnection().getGroup().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(xmlXsdFilePath.getText()));
      StringBuilder fileContent=new StringBuilder();
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e) {
            ExceptionHandler.process(e);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (!XmlUtil.isXMLFile(file.getPath())) {
        setFileContent(file);
      }
      String str;
      try {
        Charset guessCharset=CharsetToolkit.guessEncoding(file,4096);
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessCharset.displayName()));
        while ((str=in.readLine()) != null) {
          fileContent.append(str + ""String_Node_Str"");
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
        fileContentText.setText(new String(fileContent));
      }
 catch (      Exception e) {
        String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + xmlXsdFilePath.getText().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        if (e instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        fileContentText.setText(msgError);
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception exception) {
          ExceptionHandler.process(exception);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !""String_Node_Str"".equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      valid=treePopulator.populateTree(text,treeNode);
      checkFieldsValue();
      isModifing=true;
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
      }
 else {
        treePopulator.setLimit(Integer.valueOf(str));
      }
      valid=treePopulator.populateTree(xmlXsdFilePath.getText(),treeNode);
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
    }
  }
);
  outputFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
      checkFieldsValue();
    }
  }
);
}",0.9963134258328308
127249,"/** 
 * DOC bqian Comment method ""initTableListener"".
 */
private void initTableListener(){
  tableListener=new Listener(){
    Shell tip=null;
    Label label=null;
    public void handleEvent(    Event event){
switch (event.type) {
case SWT.Dispose:
case SWT.KeyDown:
case SWT.MouseMove:
{
          if (tip == null)           break;
          tip.dispose();
          tip=null;
          label=null;
          break;
        }
case SWT.MouseHover:
{
        TreeItem item=table.getItem(new Point(event.x,event.y));
        if (item != null) {
          if (tip != null && !tip.isDisposed()) {
            tip.dispose();
          }
          String content=getTooltipContent(item);
          if (content == null) {
            return;
          }
          tip=new Shell(table.getShell(),SWT.ON_TOP | SWT.TOOL);
          tip.setLayout(new FillLayout());
          label=new Label(tip,SWT.NONE);
          label.setForeground(table.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_FOREGROUND));
          label.setBackground(table.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_BACKGROUND));
          label.setData(""String_Node_Str"",item);
          label.setText(content);
          label.addListener(SWT.MouseExit,labelListener);
          label.addListener(SWT.MouseDown,labelListener);
          checkShellBounds(tip,event);
          tip.setVisible(true);
        }
      }
  }
}
}
;
}","/** 
 * DOC bqian Comment method ""initTableListener"".
 */
private void initTableListener(){
  tableListener=new Listener(){
    Shell tip=null;
    Label label=null;
    public void handleEvent(    Event event){
switch (event.type) {
case SWT.Dispose:
case SWT.KeyDown:
case SWT.MouseMove:
{
          if (tip == null) {
            break;
          }
          tip.dispose();
          tip=null;
          label=null;
          break;
        }
case SWT.MouseHover:
{
        TreeItem item=table.getItem(new Point(event.x,event.y));
        if (item != null) {
          if (tip != null && !tip.isDisposed()) {
            tip.dispose();
          }
          String content=getTooltipContent(item);
          content=PathUtils.cutStr(content,30);
          if (content == null) {
            return;
          }
          tip=new Shell(table.getShell(),SWT.ON_TOP | SWT.TOOL);
          tip.setLayout(new FillLayout());
          label=new Label(tip,SWT.NONE);
          label.setForeground(table.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_FOREGROUND));
          label.setBackground(table.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_BACKGROUND));
          label.setData(""String_Node_Str"",item);
          label.setText(content);
          label.addListener(SWT.MouseExit,labelListener);
          label.addListener(SWT.MouseDown,labelListener);
          checkShellBounds(tip,event);
          tip.setVisible(true);
        }
      }
  }
}
}
;
}",0.9777468706536856
127250,"@Test public void testMetadataColumn(){
  MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
  column.setLabel(""String_Node_Str"");
  column.setName(""String_Node_Str"");
  assertEquals(""String_Node_Str"",column.getName());
  assertEquals(""String_Node_Str"",column.getLabel());
  column.setName(""String_Node_Str"");
  column.setLabel(""String_Node_Str"");
  assertEquals(column.getLabel(),column.getName());
}","@Test public void testMetadataColumn(){
  MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
  column.setLabel(""String_Node_Str"");
  column.setName(""String_Node_Str"");
  assertEquals(""String_Node_Str"",column.getName());
  assertEquals(""String_Node_Str"",column.getLabel());
  column.setName(""String_Node_Str"");
  column.setLabel(""String_Node_Str"");
  assertNotSame(column.getLabel(),column.getName());
}",0.9846878680800942
127251,"@Test public void testGetDbTypeByClassNameAndDriverJar(){
  Assert.assertNull(extractMetaManger.getDbTypeByClassNameAndDriverJar(null,null));
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",null),EDatabaseTypeName.MYSQL.getXmlName());
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",null),EDatabaseTypeName.PSQL.getXmlName());
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",""String_Node_Str""),EDatabaseTypeName.PSQL.getXmlName());
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",""String_Node_Str""),EDatabaseTypeName.ACCESS.getXmlName());
}","@Test public void testGetDbTypeByClassNameAndDriverJar(){
  Assert.assertNull(extractMetaManger.getDbTypeByClassNameAndDriverJar(null,null));
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",null),EDatabaseTypeName.MYSQL.getXmlName());
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",null),EDatabaseTypeName.REDSHIFT.getXmlName());
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",""String_Node_Str""),EDatabaseTypeName.PSQL.getXmlName());
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",""String_Node_Str""),EDatabaseTypeName.ACCESS.getXmlName());
}",0.9915966386554622
127252,"/** 
 * DOC ggu Comment method ""testReturnColumns4reCreateConnection"". test when the dontCreateClose is true
 * @throws Exception
 */
@Test public void testReturnColumns4reCreateConnection() throws Exception {
  Assert.assertNotNull(getExtractManger());
  Connection conn=mockConnection4ReturnColumns4reCreateConnection();
  extractMeta.setConn(conn);
  IMetadataConnection metadataConn=mockMetadataConnection4ReturnColumns4reCreateConnection();
  DatabaseMetaData dbMetadata=mockDatabaseMetaData4ReturnColumns4reCreateConnection();
  when(conn.getMetaData()).thenReturn(dbMetadata);
  ResultSet getColumnsResultSet=mockGetColumnsResultSet4ReturnColumns4reCreateConnection();
  doReturn(getColumnsResultSet).when(dbMetadata).getColumns(anyString(),anyString(),anyString(),anyString());
  TableNode tableNode=mockTableNode4ReturnColumns4reCreateConnection();
  TdTable tdTable=mockTable4ReturnColumns4reCreateConnection();
  when(tableNode.getTable()).thenReturn(tdTable);
  List conList=new ArrayList();
  conList.add(conn);
  DriverShim wapperDriver=mock(DriverShim.class);
  conList.add(wapperDriver);
  when(extractMeta.getConnection(anyString(),anyString(),anyString(),anyString(),anyString(),anyString(),anyString(),anyString(),anyString(),anyString())).thenReturn(conList);
  when(extractMeta.getDatabaseMetaData(conn,metadataConn.getDbType(),metadataConn.isSqlMode(),metadataConn.getDatabase())).thenReturn(dbMetadata);
  List<TdColumn> columns=getExtractManger().returnColumns(metadataConn,tableNode,false);
  Assert.assertNotNull(columns);
  Assert.assertTrue(columns.isEmpty());
  extractMeta.setConn(null);
}","/** 
 * DOC ggu Comment method ""testReturnColumns4reCreateConnection"". test when the dontCreateClose is true
 * @throws Exception
 */
@Test public void testReturnColumns4reCreateConnection() throws Exception {
  Assert.assertNotNull(getExtractManger());
  Connection conn=mockConnection4ReturnColumns4reCreateConnection();
  extractMeta.setConn(conn);
  extractMeta.setReconnect(false);
  IMetadataConnection metadataConn=mockMetadataConnection4ReturnColumns4reCreateConnection();
  DatabaseMetaData dbMetadata=mockDatabaseMetaData4ReturnColumns4reCreateConnection();
  when(conn.getMetaData()).thenReturn(dbMetadata);
  ResultSet getColumnsResultSet=mockGetColumnsResultSet4ReturnColumns4reCreateConnection();
  doReturn(getColumnsResultSet).when(dbMetadata).getColumns(anyString(),anyString(),anyString(),anyString());
  TableNode tableNode=mockTableNode4ReturnColumns4reCreateConnection();
  TdTable tdTable=mockTable4ReturnColumns4reCreateConnection();
  when(tableNode.getTable()).thenReturn(tdTable);
  List list=extractMeta.getConnection(metadataConn.getDbType(),metadataConn.getUrl(),metadataConn.getUsername(),metadataConn.getPassword(),metadataConn.getDatabase(),metadataConn.getSchema(),metadataConn.getDriverClass(),metadataConn.getDriverJarPath(),metadataConn.getDbVersionString(),metadataConn.getAdditionalParams());
  assertTrue(list.size() == 0);
  list.add(conn);
  assertTrue(list.size() != 0);
  List conMockList=mock(List.class);
  conMockList.add(conn);
  DriverShim wapperDriver=mock(DriverShim.class);
  conMockList.add(wapperDriver);
  when(conMockList.get(0)).thenReturn(conn);
  when(conMockList.get(1)).thenReturn(wapperDriver);
  when(conMockList.get(2)).thenThrow(new RuntimeException());
  verify(conMockList,times(1)).add(conn);
  verify(conMockList,times(1)).add(wapperDriver);
  List<TdColumn> columns=getExtractManger().returnColumns(metadataConn,tableNode,false);
  Assert.assertNotNull(columns);
  Assert.assertTrue(columns.isEmpty());
  extractMeta.setConn(null);
}",0.7036730185031759
127253,"/** 
 * DOC zli Comment method ""readMetadataDetail"".
 */
public IMetadataTable readMetadataDetail(){
  String moduleName=getConnection().getModuleName();
  if (moduleName == null || moduleName.equals(""String_Node_Str"")) {
    return null;
  }
  String webServiceUrl=getConnection().getWebServiceUrl();
  String userName=getConnection().getUserName();
  String password=getConnection().getPassword();
  String timeOut=getConnection().getTimeOut();
  String betchSize=getConnection().getBatchSize();
  boolean useProxy=getConnection().isUseProxy();
  boolean useHttp=getConnection().isUseHttpProxy();
  String proxyHost=getConnection().getProxyHost();
  String proxyPort=getConnection().getProxyPort();
  String proxyUsername=getConnection().getProxyUsername();
  String proxyPassword=getConnection().getProxyPassword();
  if (isContextMode() && getContextModeManager() != null) {
    webServiceUrl=getContextModeManager().getOriginalValue(webServiceUrl);
    userName=getContextModeManager().getOriginalValue(userName);
    password=getContextModeManager().getOriginalValue(password);
    timeOut=getContextModeManager().getOriginalValue(timeOut);
    betchSize=getContextModeManager().getOriginalValue(betchSize);
    useProxy=Boolean.valueOf(getContextModeManager().getOriginalValue(String.valueOf(useProxy)));
    useHttp=Boolean.valueOf(getContextModeManager().getOriginalValue(String.valueOf(useHttp)));
    proxyHost=getContextModeManager().getOriginalValue(proxyHost);
    proxyPort=getContextModeManager().getOriginalValue(proxyPort);
    proxyUsername=getContextModeManager().getOriginalValue(proxyUsername);
    proxyPassword=getContextModeManager().getOriginalValue(proxyPassword);
  }
  metadataTableOrder=getMetadatasForSalesforce(webServiceUrl,userName,password,timeOut,moduleName,betchSize,useProxy,useHttp,proxyHost,proxyPort,proxyUsername,proxyPassword,true);
  return metadataTableOrder;
}","/** 
 * DOC zli Comment method ""readMetadataDetail"".
 */
public IMetadataTable readMetadataDetail(){
  String moduleName=getConnection().getModuleName();
  if (moduleName == null || moduleName.equals(""String_Node_Str"")) {
    return null;
  }
  String webServiceUrl=getConnection().getWebServiceUrl();
  String userName=getConnection().getUserName();
  String password=getConnection().getPassword();
  String timeOut=getConnection().getTimeOut();
  String betchSize=getConnection().getBatchSize();
  boolean useProxy=getConnection().isUseProxy();
  boolean useHttp=getConnection().isUseHttpProxy();
  String proxyHost=getConnection().getProxyHost();
  String proxyPort=getConnection().getProxyPort();
  String proxyUsername=getConnection().getProxyUsername();
  String proxyPassword=getConnection().getProxyPassword();
  String webServiceUrlForOauth=getConnection().getWebServiceUrlTextForOAuth();
  String comsumeKey=getConnection().getConsumeKey();
  String consumeSecret=getConnection().getConsumeSecret();
  String callbackHost=getConnection().getCallbackHost();
  String callbackPort=getConnection().getCallbackPort();
  String salesforceVersion=getConnection().getSalesforceVersion();
  String token=getConnection().getToken();
  String loginType=getConnection().getLoginType();
  if (isContextMode() && getContextModeManager() != null) {
    webServiceUrl=getContextModeManager().getOriginalValue(webServiceUrl);
    userName=getContextModeManager().getOriginalValue(userName);
    password=getContextModeManager().getOriginalValue(password);
    timeOut=getContextModeManager().getOriginalValue(timeOut);
    betchSize=getContextModeManager().getOriginalValue(betchSize);
    useProxy=Boolean.valueOf(getContextModeManager().getOriginalValue(String.valueOf(useProxy)));
    useHttp=Boolean.valueOf(getContextModeManager().getOriginalValue(String.valueOf(useHttp)));
    proxyHost=getContextModeManager().getOriginalValue(proxyHost);
    proxyPort=getContextModeManager().getOriginalValue(proxyPort);
    proxyUsername=getContextModeManager().getOriginalValue(proxyUsername);
    proxyPassword=getContextModeManager().getOriginalValue(proxyPassword);
    webServiceUrlForOauth=getContextModeManager().getOriginalValue(webServiceUrlForOauth);
    comsumeKey=getContextModeManager().getOriginalValue(comsumeKey);
    consumeSecret=getContextModeManager().getOriginalValue(consumeSecret);
    callbackHost=getContextModeManager().getOriginalValue(callbackHost);
    callbackPort=getContextModeManager().getOriginalValue(callbackPort);
    salesforceVersion=getContextModeManager().getOriginalValue(salesforceVersion);
    token=getContextModeManager().getOriginalValue(token);
    loginType=getContextModeManager().getOriginalValue(loginType);
  }
  if (loginType.equals(BASIC)) {
    metadataTableOrder=getMetadatasForSalesforce(webServiceUrl,userName,password,timeOut,moduleName,betchSize,useProxy,useHttp,proxyHost,proxyPort,proxyUsername,proxyPassword,true);
  }
 else {
    metadataTableOrder=getMetadataTableBySalesforceServerAPIForOauth(webServiceUrlForOauth,comsumeKey,consumeSecret,callbackHost,callbackPort,salesforceVersion,token,timeOut,moduleName);
    if (metadataTableOrder == null) {
      metadataTableOrder=getMetadataTableFromConfigFile(moduleName);
    }
  }
  return metadataTableOrder;
}",0.7273424027591493
127254,"/** 
 * DOC qzhang Comment method ""addTableListener"".
 */
private void addTableListener(){
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      if (e.detail == SWT.CHECK) {
        TableItem tableItem=(TableItem)e.item;
        boolean promptNeeded=tableItem.getChecked();
        if (promptNeeded) {
          tableItem.setText(2,""String_Node_Str"");
          tableItem.setText(3,Messages.getString(""String_Node_Str""));
          countPending++;
          parentWizardPage.setPageComplete(false);
          refreshTable(tableItem,-1);
          clearTableItem(tableItem);
        }
 else {
          clearTableItem(tableItem);
          if (tableItem.getText() != null && tableItem.getText().equals(Messages.getString(""String_Node_Str""))) {
            countPending--;
          }
        }
        if (forTemplate && (ConnectionHelper.getTables(getConnection()).size() <= 0)) {
          parentWizardPage.setPageComplete(false);
        }
      }
    }
  }
);
}","/** 
 * DOC qzhang Comment method ""addTableListener"".
 */
private void addTableListener(){
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      if (e.detail == SWT.CHECK) {
        TableItem tableItem=(TableItem)e.item;
        boolean promptNeeded=tableItem.getChecked();
        if (promptNeeded) {
          clearTableItem(tableItem);
          tableItem.setText(2,""String_Node_Str"");
          tableItem.setText(3,Messages.getString(""String_Node_Str""));
          countPending++;
          parentWizardPage.setPageComplete(false);
          refreshTable(tableItem,-1);
        }
 else {
          clearTableItem(tableItem);
          if (tableItem.getText() != null && tableItem.getText().equals(Messages.getString(""String_Node_Str""))) {
            countPending--;
          }
        }
        if (forTemplate && (ConnectionHelper.getTables(getConnection()).size() <= 0)) {
          parentWizardPage.setPageComplete(false);
        }
      }
    }
  }
);
}",0.9643888354186718
127255,"/** 
 * DOC hcw Comment method ""restoreCheckItems"".
 */
protected void restoreCheckItems(){
  Set<String> checkedItems=new HashSet<String>();
  for (  Object obj : ConnectionHelper.getTables(getConnection())) {
    if (obj == null) {
      continue;
    }
    MetadataTable table=(MetadataTable)obj;
    checkedItems.add(table.getLabel());
  }
  for (  TableItem tableItem : table.getItems()) {
    tableItem.setChecked(false);
    if (checkedItems.contains(tableItem.getText(0))) {
      tableItem.setChecked(true);
      Integer num=tableColumnNums.get(tableItem.getText(0));
      if (num != null) {
        tableItem.setText(2,num.toString());
        tableItem.setText(3,Messages.getString(""String_Node_Str""));
      }
 else {
        refreshTable(tableItem,-1);
      }
    }
  }
}","/** 
 * DOC hcw Comment method ""restoreCheckItems"".
 */
protected void restoreCheckItems(){
  Set<String> checkedItems=new HashSet<String>();
  if (isContextMode()) {
    for (    Object obj : ConnectionHelper.getTables(temConnection)) {
      if (obj == null) {
        continue;
      }
      MetadataTable table=(MetadataTable)obj;
      checkedItems.add(table.getLabel());
    }
    for (    TableItem tableItem : table.getItems()) {
      tableItem.setChecked(false);
      if (checkedItems.contains(tableItem.getText(0))) {
        tableItem.setChecked(true);
        Integer num=tableColumnNums.get(tableItem.getText(0));
        if (num != null) {
          tableItem.setText(2,num.toString());
          tableItem.setText(3,Messages.getString(""String_Node_Str""));
        }
 else {
          refreshTable(tableItem,-1);
        }
      }
    }
  }
 else {
    for (    Object obj : ConnectionHelper.getTables(getConnection())) {
      if (obj == null) {
        continue;
      }
      MetadataTable table=(MetadataTable)obj;
      checkedItems.add(table.getLabel());
    }
    for (    TableItem tableItem : table.getItems()) {
      tableItem.setChecked(false);
      if (checkedItems.contains(tableItem.getText(0))) {
        tableItem.setChecked(true);
        Integer num=tableColumnNums.get(tableItem.getText(0));
        if (num != null) {
          tableItem.setText(2,num.toString());
          tableItem.setText(3,Messages.getString(""String_Node_Str""));
        }
 else {
          refreshTable(tableItem,-1);
        }
      }
    }
  }
}",0.6550106609808103
127256,"@Override public void widgetSelected(final SelectionEvent e){
  if (e.detail == SWT.CHECK) {
    TableItem tableItem=(TableItem)e.item;
    boolean promptNeeded=tableItem.getChecked();
    if (promptNeeded) {
      tableItem.setText(2,""String_Node_Str"");
      tableItem.setText(3,Messages.getString(""String_Node_Str""));
      countPending++;
      parentWizardPage.setPageComplete(false);
      refreshTable(tableItem,-1);
      clearTableItem(tableItem);
    }
 else {
      clearTableItem(tableItem);
      if (tableItem.getText() != null && tableItem.getText().equals(Messages.getString(""String_Node_Str""))) {
        countPending--;
      }
    }
    if (forTemplate && (ConnectionHelper.getTables(getConnection()).size() <= 0)) {
      parentWizardPage.setPageComplete(false);
    }
  }
}","@Override public void widgetSelected(final SelectionEvent e){
  if (e.detail == SWT.CHECK) {
    TableItem tableItem=(TableItem)e.item;
    boolean promptNeeded=tableItem.getChecked();
    if (promptNeeded) {
      clearTableItem(tableItem);
      tableItem.setText(2,""String_Node_Str"");
      tableItem.setText(3,Messages.getString(""String_Node_Str""));
      countPending++;
      parentWizardPage.setPageComplete(false);
      refreshTable(tableItem,-1);
    }
 else {
      clearTableItem(tableItem);
      if (tableItem.getText() != null && tableItem.getText().equals(Messages.getString(""String_Node_Str""))) {
        countPending--;
      }
    }
    if (forTemplate && (ConnectionHelper.getTables(getConnection()).size() <= 0)) {
      parentWizardPage.setPageComplete(false);
    }
  }
}",0.9584382871536524
127257,"/** 
 * DOC bqian Comment method ""initTableListener"".
 */
private void initTableListener(){
  tableListener=new Listener(){
    Shell tip=null;
    Label label=null;
    public void handleEvent(    Event event){
switch (event.type) {
case SWT.Dispose:
case SWT.KeyDown:
case SWT.MouseMove:
{
          if (tip == null)           break;
          tip.dispose();
          tip=null;
          label=null;
          break;
        }
case SWT.MouseHover:
{
        TreeItem item=table.getItem(new Point(event.x,event.y));
        if (item != null) {
          if (tip != null && !tip.isDisposed()) {
            tip.dispose();
          }
          String content=getTooltipContent(item);
          if (content == null) {
            return;
          }
          tip=new Shell(table.getShell(),SWT.ON_TOP | SWT.TOOL);
          tip.setLayout(new FillLayout());
          label=new Label(tip,SWT.NONE);
          label.setForeground(table.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_FOREGROUND));
          label.setBackground(table.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_BACKGROUND));
          label.setData(""String_Node_Str"",item);
          label.setText(content);
          label.addListener(SWT.MouseExit,labelListener);
          label.addListener(SWT.MouseDown,labelListener);
          checkShellBounds(tip,event);
          tip.setVisible(true);
        }
      }
  }
}
}
;
}","/** 
 * DOC bqian Comment method ""initTableListener"".
 */
private void initTableListener(){
  tableListener=new Listener(){
    Shell tip=null;
    Label label=null;
    public void handleEvent(    Event event){
switch (event.type) {
case SWT.Dispose:
case SWT.KeyDown:
case SWT.MouseMove:
{
          if (tip == null)           break;
          tip.dispose();
          tip=null;
          label=null;
          break;
        }
case SWT.MouseHover:
{
        TreeItem item=table.getItem(new Point(event.x,event.y));
        if (item != null) {
          if (tip != null && !tip.isDisposed()) {
            tip.dispose();
          }
          String content=getTooltipContent(item);
          content=PathUtils.cutStr(content,30);
          if (content == null) {
            return;
          }
          tip=new Shell(table.getShell(),SWT.ON_TOP | SWT.TOOL);
          tip.setLayout(new FillLayout());
          label=new Label(tip,SWT.NONE);
          label.setForeground(table.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_FOREGROUND));
          label.setBackground(table.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_BACKGROUND));
          label.setData(""String_Node_Str"",item);
          label.setText(content);
          label.addListener(SWT.MouseExit,labelListener);
          label.addListener(SWT.MouseDown,labelListener);
          checkShellBounds(tip,event);
          tip.setVisible(true);
        }
      }
  }
}
}
;
}",0.9832167832167832
127258,"/** 
 * @author jyhu
 * @aim Get unique name of the graphica node from generating node.
 * @param node: Generated node
 * @return unique name of the graphica node.
 */
public static String getVirtualUniqueName(INode node){
  String uniqueName=node.getUniqueName();
  if (node.isVirtualGenerateNode()) {
    List<? extends INode> nodeList=node.getProcess().getGraphicalNodes();
    for (    INode graphicnode : nodeList) {
      if (graphicnode.isGeneratedAsVirtualComponent()) {
        String nodeUniqueName=graphicnode.getUniqueName();
        if (uniqueName.indexOf(nodeUniqueName) == 0) {
          uniqueName=nodeUniqueName;
          break;
        }
      }
    }
  }
  return uniqueName;
}","/** 
 * @author jyhu
 * @aim Get unique name of the graphica node from generating node.
 * @param node: Generated node
 * @return unique name of the graphica node.
 */
public static String getVirtualUniqueName(INode node){
  String uniqueName=node.getUniqueName();
  if (node.isVirtualGenerateNode()) {
    List<? extends INode> nodeList=node.getProcess().getGraphicalNodes();
    for (    INode graphicnode : nodeList) {
      if (graphicnode.isGeneratedAsVirtualComponent()) {
        String nodeUniqueName=graphicnode.getUniqueName();
        if (uniqueName.indexOf(nodeUniqueName + ""String_Node_Str"") == 0) {
          uniqueName=nodeUniqueName;
          break;
        }
      }
    }
  }
  return uniqueName;
}",0.9858557284299858
127259,"private boolean deleteElements(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final RepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  boolean needReturn=false;
  final boolean[] enableDeleting=new boolean[1];
  enableDeleting[0]=true;
  final IRepositoryViewObject objToDelete=currentJobNode.getObject();
  final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkContext.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
        int returnCode=dialog.open();
switch (returnCode) {
case Window.OK:
          enableDeleting[0]=true;
        break;
case Window.CANCEL:
      enableDeleting[0]=false;
    break;
}
}
}
);
}
if (!enableDeleting[0]) {
return true;
}
AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
ERepositoryObjectType nodeType=(ERepositoryObjectType)currentJobNode.getProperties(EProperties.CONTENT_TYPE);
if (nodeType != null && nodeType.isSubItem()) {
Display.getDefault().syncExec(new Runnable(){
@Override public void run(){
final DeleteTableAction deleteTableAction=new DeleteTableAction();
deleteTableAction.setWorkbenchPart(getWorkbenchPart());
deleteTableAction.run();
}
}
);
needReturn=true;
}
 else {
if (factory.getStatus(objToDelete) == ERepositoryStatus.DELETED) {
if (!confirmFromDialog && resChangeService != null) {
List<IRepositoryNode> dependentNodes=resChangeService.getDependentNodes(currentJobNode);
if (dependentNodes != null && !dependentNodes.isEmpty()) {
  resChangeService.openDependcesDialog(dependentNodes);
  return true;
}
}
if (confirm == null) {
if (confirmFromDialog) {
  confirm=confirmFromDialog;
}
 else {
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      String title=Messages.getString(""String_Node_Str"");
      String message=currentJobNode.getProperties(EProperties.LABEL) + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
      confirmFromDialog=MessageDialog.openQuestion(new Shell(),title,message);
    }
  }
);
  confirm=confirmFromDialog;
}
}
if (confirm) {
deleteActionCache.closeOpenedEditor(objToDelete);
if (currentJobNode.getType() == ENodeType.SIMPLE_FOLDER) {
  boolean success=true;
  for (  IRepositoryNode curNode : currentJobNode.getChildren()) {
    try {
      deleteElements(factory,deleteActionCache,(RepositoryNode)curNode,confirm);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (success) {
    if (currentJobNode.getObject() != null && currentJobNode.getObject().getProperty() != null && currentJobNode.getObject().getProperty().getItem() != null) {
      Item fitem=currentJobNode.getObject().getProperty().getItem();
      if ((fitem instanceof FolderItem) && (((FolderItem)fitem).getType().getValue() == FolderType.FOLDER)) {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentJobNode.getObject().getProperty().getItem()));
      }
 else {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
      }
    }
 else {
      factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
    }
  }
}
 else {
  if (resChangeService != null && objToDelete != null && objToDelete.getProperty() != null) {
    Item item=objToDelete.getProperty().getItem();
    if (item != null) {
      resChangeService.removeAllDependecies(item);
    }
  }
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    handler.deleteNode(objToDelete);
  }
  if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
    forceBuild=true;
  }
  factory.deleteObjectPhysical(objToDelete);
  ExpressionPersistance.getInstance().jobDeleted(objToDelete.getLabel());
}
}
}
 else {
factory.deleteObjectLogical(objToDelete);
updateRelatedViews();
removeConnFromSQLExplorer(currentJobNode);
}
}
return needReturn;
}","private boolean deleteElements(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final RepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  boolean needReturn=false;
  final boolean[] enableDeleting=new boolean[1];
  enableDeleting[0]=true;
  final IRepositoryViewObject objToDelete=currentJobNode.getObject();
  final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkContext.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
        int returnCode=dialog.open();
switch (returnCode) {
case Window.OK:
          enableDeleting[0]=true;
        break;
case Window.CANCEL:
      enableDeleting[0]=false;
    break;
}
}
}
);
}
if (!enableDeleting[0]) {
return true;
}
AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
ERepositoryObjectType nodeType=(ERepositoryObjectType)currentJobNode.getProperties(EProperties.CONTENT_TYPE);
if (nodeType != null && nodeType.isSubItem()) {
Display.getDefault().syncExec(new Runnable(){
@Override public void run(){
final DeleteTableAction deleteTableAction=new DeleteTableAction();
deleteTableAction.setWorkbenchPart(getWorkbenchPart());
deleteTableAction.run();
}
}
);
needReturn=true;
}
 else {
if (factory.getStatus(objToDelete) == ERepositoryStatus.DELETED) {
if (!confirmFromDialog && resChangeService != null) {
List<IRepositoryNode> dependentNodes=resChangeService.getDependentNodes(currentJobNode);
if (dependentNodes != null && !dependentNodes.isEmpty()) {
  resChangeService.openDependcesDialog(dependentNodes);
  return true;
}
}
if (confirm == null) {
if (confirmFromDialog) {
  confirm=confirmFromDialog;
}
 else {
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      String title=Messages.getString(""String_Node_Str"");
      String message=currentJobNode.getProperties(EProperties.LABEL) + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
      confirmFromDialog=MessageDialog.openQuestion(new Shell(),title,message);
    }
  }
);
  confirm=confirmFromDialog;
}
}
if (confirm) {
deleteActionCache.closeOpenedEditor(objToDelete);
if (currentJobNode.getType() == ENodeType.SIMPLE_FOLDER) {
  boolean success=true;
  for (  IRepositoryNode curNode : currentJobNode.getChildren()) {
    try {
      deleteElements(factory,deleteActionCache,(RepositoryNode)curNode,confirm);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (success) {
    if (currentJobNode.getObject() != null && currentJobNode.getObject().getProperty() != null && currentJobNode.getObject().getProperty().getItem() != null) {
      Item fitem=currentJobNode.getObject().getProperty().getItem();
      if ((fitem instanceof FolderItem) && (((FolderItem)fitem).getType().getValue() == FolderType.FOLDER)) {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentJobNode.getObject().getProperty().getItem()));
      }
 else {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
      }
    }
 else {
      factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
    }
  }
}
 else {
  if (resChangeService != null && objToDelete != null && objToDelete.getProperty() != null) {
    Item item=objToDelete.getProperty().getItem();
    if (item != null) {
      resChangeService.removeAllDependecies(item);
    }
  }
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    handler.deleteNode(objToDelete);
  }
  if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
    forceBuild=true;
  }
  if (!forceBuild) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
      ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
      if (nodeType == camelService.getBeansType()) {
        forceBuild=true;
      }
    }
  }
  factory.deleteObjectPhysical(objToDelete);
  ExpressionPersistance.getInstance().jobDeleted(objToDelete.getLabel());
}
}
}
 else {
factory.deleteObjectLogical(objToDelete);
updateRelatedViews();
removeConnFromSQLExplorer(currentJobNode);
}
}
return needReturn;
}",0.9596933187294632
127260,"protected void deleteElements(final IProxyRepositoryFactory factory,final RepositoryNode currentNode) throws PersistenceException, BusinessException {
  if (!validElement(currentNode)) {
    return;
  }
  final IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      factory.save(item);
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          for (          IEditorReference editors : page.getEditorReferences()) {
            String nameInEditor=editors.getName();
            if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
              page.closeEditor(editors.getEditor(false),false);
            }
          }
          if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
            if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
              for (              IRepositoryNode curNode : currentNode.getChildren()) {
                deleteElements(factory,(RepositoryNode)curNode);
              }
              factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
            }
 else {
              for (              IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
                handler.deleteNode(objToDelete);
              }
              ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
              if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
                forceBuild=true;
              }
              factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
            }
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
}","protected void deleteElements(final IProxyRepositoryFactory factory,final RepositoryNode currentNode) throws PersistenceException, BusinessException {
  if (!validElement(currentNode)) {
    return;
  }
  final IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      factory.save(item);
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          for (          IEditorReference editors : page.getEditorReferences()) {
            String nameInEditor=editors.getName();
            if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
              page.closeEditor(editors.getEditor(false),false);
            }
          }
          if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
            if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
              for (              IRepositoryNode curNode : currentNode.getChildren()) {
                deleteElements(factory,(RepositoryNode)curNode);
              }
              factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
            }
 else {
              for (              IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
                handler.deleteNode(objToDelete);
              }
              ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
              if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
                forceBuild=true;
              }
              if (!forceBuild) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
                  ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
                  if (nodeType == camelService.getBeansType()) {
                    forceBuild=true;
                  }
                }
              }
              factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
            }
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
}",0.915758896151053
127261,"@Override public void run(){
  try {
    IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    for (    IEditorReference editors : page.getEditorReferences()) {
      String nameInEditor=editors.getName();
      if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
        page.closeEditor(editors.getEditor(false),false);
      }
    }
    if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
      if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
        for (        IRepositoryNode curNode : currentNode.getChildren()) {
          deleteElements(factory,(RepositoryNode)curNode);
        }
        factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
      }
 else {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          handler.deleteNode(objToDelete);
        }
        ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
        if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
          forceBuild=true;
        }
        factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","@Override public void run(){
  try {
    IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    for (    IEditorReference editors : page.getEditorReferences()) {
      String nameInEditor=editors.getName();
      if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
        page.closeEditor(editors.getEditor(false),false);
      }
    }
    if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
      if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
        for (        IRepositoryNode curNode : currentNode.getChildren()) {
          deleteElements(factory,(RepositoryNode)curNode);
        }
        factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
      }
 else {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          handler.deleteNode(objToDelete);
        }
        ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
        if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
          forceBuild=true;
        }
        if (!forceBuild) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
            ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
            if (nodeType == camelService.getBeansType()) {
              forceBuild=true;
            }
          }
        }
        factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.88565145684442
127262,"private boolean deleteElements(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final RepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  boolean needReturn=false;
  final boolean[] enableDeleting=new boolean[1];
  enableDeleting[0]=true;
  final IRepositoryViewObject objToDelete=currentJobNode.getObject();
  final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkContext.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
        int returnCode=dialog.open();
switch (returnCode) {
case Window.OK:
          enableDeleting[0]=true;
        break;
case Window.CANCEL:
      enableDeleting[0]=false;
    break;
}
}
}
);
}
if (!enableDeleting[0]) {
return true;
}
AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
ERepositoryObjectType nodeType=(ERepositoryObjectType)currentJobNode.getProperties(EProperties.CONTENT_TYPE);
if (nodeType != null && nodeType.isSubItem()) {
Display.getDefault().syncExec(new Runnable(){
@Override public void run(){
final DeleteTableAction deleteTableAction=new DeleteTableAction();
deleteTableAction.setWorkbenchPart(getWorkbenchPart());
deleteTableAction.run();
}
}
);
needReturn=true;
}
 else {
if (factory.getStatus(objToDelete) == ERepositoryStatus.DELETED) {
if (!confirmFromDialog && resChangeService != null) {
List<IRepositoryNode> dependentNodes=resChangeService.getDependentNodes(currentJobNode);
if (dependentNodes != null && !dependentNodes.isEmpty()) {
  resChangeService.openDependcesDialog(dependentNodes);
  return true;
}
}
if (confirm == null) {
if (confirmFromDialog) {
  confirm=confirmFromDialog;
}
 else {
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      String title=Messages.getString(""String_Node_Str"");
      String message=currentJobNode.getProperties(EProperties.LABEL) + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
      confirmFromDialog=MessageDialog.openQuestion(new Shell(),title,message);
    }
  }
);
  confirm=confirmFromDialog;
}
}
if (confirm) {
deleteActionCache.closeOpenedEditor(objToDelete);
if (currentJobNode.getType() == ENodeType.SIMPLE_FOLDER) {
  boolean success=true;
  for (  IRepositoryNode curNode : currentJobNode.getChildren()) {
    try {
      deleteElements(factory,deleteActionCache,(RepositoryNode)curNode,confirm);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (success) {
    if (currentJobNode.getObject() != null && currentJobNode.getObject().getProperty() != null && currentJobNode.getObject().getProperty().getItem() != null) {
      Item fitem=currentJobNode.getObject().getProperty().getItem();
      if ((fitem instanceof FolderItem) && (((FolderItem)fitem).getType().getValue() == FolderType.FOLDER)) {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentJobNode.getObject().getProperty().getItem()));
      }
 else {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
      }
    }
 else {
      factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
    }
  }
}
 else {
  if (resChangeService != null && objToDelete != null && objToDelete.getProperty() != null) {
    Item item=objToDelete.getProperty().getItem();
    if (item != null) {
      resChangeService.removeAllDependecies(item);
    }
  }
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    handler.deleteNode(objToDelete);
  }
  factory.deleteObjectPhysical(objToDelete);
  ExpressionPersistance.getInstance().jobDeleted(objToDelete.getLabel());
}
}
}
 else {
factory.deleteObjectLogical(objToDelete);
updateRelatedViews();
removeConnFromSQLExplorer(currentJobNode);
}
}
return needReturn;
}","private boolean deleteElements(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final RepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  boolean needReturn=false;
  final boolean[] enableDeleting=new boolean[1];
  enableDeleting[0]=true;
  final IRepositoryViewObject objToDelete=currentJobNode.getObject();
  final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkContext.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
        int returnCode=dialog.open();
switch (returnCode) {
case Window.OK:
          enableDeleting[0]=true;
        break;
case Window.CANCEL:
      enableDeleting[0]=false;
    break;
}
}
}
);
}
if (!enableDeleting[0]) {
return true;
}
AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
ERepositoryObjectType nodeType=(ERepositoryObjectType)currentJobNode.getProperties(EProperties.CONTENT_TYPE);
if (nodeType != null && nodeType.isSubItem()) {
Display.getDefault().syncExec(new Runnable(){
@Override public void run(){
final DeleteTableAction deleteTableAction=new DeleteTableAction();
deleteTableAction.setWorkbenchPart(getWorkbenchPart());
deleteTableAction.run();
}
}
);
needReturn=true;
}
 else {
if (factory.getStatus(objToDelete) == ERepositoryStatus.DELETED) {
if (!confirmFromDialog && resChangeService != null) {
List<IRepositoryNode> dependentNodes=resChangeService.getDependentNodes(currentJobNode);
if (dependentNodes != null && !dependentNodes.isEmpty()) {
  resChangeService.openDependcesDialog(dependentNodes);
  return true;
}
}
if (confirm == null) {
if (confirmFromDialog) {
  confirm=confirmFromDialog;
}
 else {
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      String title=Messages.getString(""String_Node_Str"");
      String message=currentJobNode.getProperties(EProperties.LABEL) + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
      confirmFromDialog=MessageDialog.openQuestion(new Shell(),title,message);
    }
  }
);
  confirm=confirmFromDialog;
}
}
if (confirm) {
deleteActionCache.closeOpenedEditor(objToDelete);
if (currentJobNode.getType() == ENodeType.SIMPLE_FOLDER) {
  boolean success=true;
  for (  IRepositoryNode curNode : currentJobNode.getChildren()) {
    try {
      deleteElements(factory,deleteActionCache,(RepositoryNode)curNode,confirm);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (success) {
    if (currentJobNode.getObject() != null && currentJobNode.getObject().getProperty() != null && currentJobNode.getObject().getProperty().getItem() != null) {
      Item fitem=currentJobNode.getObject().getProperty().getItem();
      if ((fitem instanceof FolderItem) && (((FolderItem)fitem).getType().getValue() == FolderType.FOLDER)) {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentJobNode.getObject().getProperty().getItem()));
      }
 else {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
      }
    }
 else {
      factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
    }
  }
}
 else {
  if (resChangeService != null && objToDelete != null && objToDelete.getProperty() != null) {
    Item item=objToDelete.getProperty().getItem();
    if (item != null) {
      resChangeService.removeAllDependecies(item);
    }
  }
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    handler.deleteNode(objToDelete);
  }
  if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
    forceBuild=true;
  }
  factory.deleteObjectPhysical(objToDelete);
  ExpressionPersistance.getInstance().jobDeleted(objToDelete.getLabel());
}
}
}
 else {
factory.deleteObjectLogical(objToDelete);
updateRelatedViews();
removeConnFromSQLExplorer(currentJobNode);
}
}
return needReturn;
}",0.9858796296296296
127263,"@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          selectNodes.add((RepositoryNode)obj);
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      for (      RepositoryNode node : selectNodes) {
        try {
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    @Override public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              IRepositoryViewObject object=node.getObject();
              if (coreService != null && object != null && object.getProperty() != null) {
                Item item=object.getProperty().getItem();
                IProcess iProcess=coreService.getProcessFromItem(item);
                if (iProcess != null && iProcess instanceof IProcess2) {
                  IProcess2 process=(IProcess2)iProcess;
                  process.removeProblems4ProcessDeleted();
                }
              }
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            if (needReturn) {
              return;
            }
            types.add(node.getObjectType());
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
            if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      @Override public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            boolean isSqlTemplate=false;
            if (node.getObject() instanceof Folder) {
              Object label=node.getProperties(EProperties.LABEL);
              if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                isSqlTemplate=true;
              }
            }
            if (!isSqlTemplate) {
              types.add(node.getContentType());
              if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                types.add(ERepositoryObjectType.DOCUMENTATION);
              }
              deletedFolder.add(node);
              deleteFolder(node,factory,deleteActionCache);
            }
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  synchUI(deleteActionCache);
}","@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          selectNodes.add((RepositoryNode)obj);
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      for (      RepositoryNode node : selectNodes) {
        try {
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    @Override public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              IRepositoryViewObject object=node.getObject();
              if (coreService != null && object != null && object.getProperty() != null) {
                Item item=object.getProperty().getItem();
                IProcess iProcess=coreService.getProcessFromItem(item);
                if (iProcess != null && iProcess instanceof IProcess2) {
                  IProcess2 process=(IProcess2)iProcess;
                  process.removeProblems4ProcessDeleted();
                }
              }
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            if (needReturn) {
              return;
            }
            types.add(node.getObjectType());
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
            if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      @Override public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            boolean isSqlTemplate=false;
            if (node.getObject() instanceof Folder) {
              Object label=node.getProperties(EProperties.LABEL);
              if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                isSqlTemplate=true;
              }
            }
            if (!isSqlTemplate) {
              types.add(node.getContentType());
              if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                types.add(ERepositoryObjectType.DOCUMENTATION);
              }
              deletedFolder.add(node);
              deleteFolder(node,factory,deleteActionCache);
            }
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
    if (forceBuild) {
      IRunProcessService service=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      service.buildJavaProject();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  synchUI(deleteActionCache);
}",0.9888440541182056
127264,"protected void deleteElements(final IProxyRepositoryFactory factory,final RepositoryNode currentNode) throws PersistenceException, BusinessException {
  if (!validElement(currentNode)) {
    return;
  }
  final IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      factory.save(item);
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          for (          IEditorReference editors : page.getEditorReferences()) {
            String nameInEditor=editors.getName();
            if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
              page.closeEditor(editors.getEditor(false),false);
            }
          }
          if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
            if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
              for (              IRepositoryNode curNode : currentNode.getChildren()) {
                deleteElements(factory,(RepositoryNode)curNode);
              }
              factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
            }
 else {
              for (              IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
                handler.deleteNode(objToDelete);
              }
              factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
            }
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
}","protected void deleteElements(final IProxyRepositoryFactory factory,final RepositoryNode currentNode) throws PersistenceException, BusinessException {
  if (!validElement(currentNode)) {
    return;
  }
  final IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      factory.save(item);
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          for (          IEditorReference editors : page.getEditorReferences()) {
            String nameInEditor=editors.getName();
            if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
              page.closeEditor(editors.getEditor(false),false);
            }
          }
          if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
            if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
              for (              IRepositoryNode curNode : currentNode.getChildren()) {
                deleteElements(factory,(RepositoryNode)curNode);
              }
              factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
            }
 else {
              for (              IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
                handler.deleteNode(objToDelete);
              }
              ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
              if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
                forceBuild=true;
              }
              factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
            }
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
}",0.9414480587618048
127265,"@Override protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=Messages.getString(""String_Node_Str"");
  String message=null;
  List<IRepositoryNode> originalChildren=node.getChildren();
  final List<IRepositoryNode> children=new ArrayList<IRepositoryNode>(originalChildren);
  if (children.size() == 0) {
    return;
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  if (resChangeService != null) {
    List<IRepositoryNode> dependentNodes=resChangeService.getDependentConnNodesInRecycleBin(children);
    if (dependentNodes != null && !dependentNodes.isEmpty()) {
      resChangeService.openDependcesDialog(dependentNodes);
      return;
    }
  }
  if (children.size() > 1) {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
 else {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
  final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(children,null);
  final Shell shell=getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    return;
  }
  for (  IRepositoryNode child : children) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      ITDQRepositoryService tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      if (!tdqRepService.removeAliasInSQLExplorer(child)) {
        MessageDialog.openWarning(shell,title,Messages.getString(""String_Node_Str""));
        try {
          IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
          factory.saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
        return;
      }
    }
  }
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      for (      IRepositoryNode child : children) {
        try {
          deleteElements(factory,(RepositoryNode)child);
        }
 catch (        Exception e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  if (unDeleteItems.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
        dialog.open();
      }
    }
);
  }
}","@Override protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=Messages.getString(""String_Node_Str"");
  String message=null;
  List<IRepositoryNode> originalChildren=node.getChildren();
  final List<IRepositoryNode> children=new ArrayList<IRepositoryNode>(originalChildren);
  if (children.size() == 0) {
    return;
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  if (resChangeService != null) {
    List<IRepositoryNode> dependentNodes=resChangeService.getDependentConnNodesInRecycleBin(children);
    if (dependentNodes != null && !dependentNodes.isEmpty()) {
      resChangeService.openDependcesDialog(dependentNodes);
      return;
    }
  }
  if (children.size() > 1) {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
 else {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
  final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(children,null);
  final Shell shell=getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    return;
  }
  for (  IRepositoryNode child : children) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      ITDQRepositoryService tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      if (!tdqRepService.removeAliasInSQLExplorer(child)) {
        MessageDialog.openWarning(shell,title,Messages.getString(""String_Node_Str""));
        try {
          IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
          factory.saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
        return;
      }
    }
  }
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      for (      IRepositoryNode child : children) {
        try {
          deleteElements(factory,(RepositoryNode)child);
        }
 catch (        Exception e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,iRunnableWithProgress);
    if (forceBuild) {
      IRunProcessService service=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      service.buildJavaProject();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  if (unDeleteItems.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
        dialog.open();
      }
    }
);
  }
}",0.9753797799895232
127266,"@Override public void run(){
  try {
    IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    for (    IEditorReference editors : page.getEditorReferences()) {
      String nameInEditor=editors.getName();
      if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
        page.closeEditor(editors.getEditor(false),false);
      }
    }
    if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
      if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
        for (        IRepositoryNode curNode : currentNode.getChildren()) {
          deleteElements(factory,(RepositoryNode)curNode);
        }
        factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
      }
 else {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          handler.deleteNode(objToDelete);
        }
        factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","@Override public void run(){
  try {
    IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    for (    IEditorReference editors : page.getEditorReferences()) {
      String nameInEditor=editors.getName();
      if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
        page.closeEditor(editors.getEditor(false),false);
      }
    }
    if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
      if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
        for (        IRepositoryNode curNode : currentNode.getChildren()) {
          deleteElements(factory,(RepositoryNode)curNode);
        }
        factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
      }
 else {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          handler.deleteNode(objToDelete);
        }
        ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
        if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
          forceBuild=true;
        }
        factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9140546006066734
127267,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public void setName(String newName){
  String oldName=name;
  name=newName;
  if (eNotificationRequired())   eNotify(new ENotificationImpl(this,Notification.SET,PropertiesPackage.FILE_ITEM__NAME,oldName,name));
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public void setName(String newName){
  String oldName=name;
  name=newName;
  if (eNotificationRequired()) {
    eNotify(new ENotificationImpl(this,Notification.SET,PropertiesPackage.FILE_ITEM__NAME,oldName,name));
  }
}",0.9861111111111112
127268,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public void setContent(ByteArray newContent){
  ByteArray oldContent=content;
  content=newContent;
  if (eNotificationRequired())   eNotify(new ENotificationImpl(this,Notification.SET,PropertiesPackage.FILE_ITEM__CONTENT,oldContent,content));
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public void setContent(ByteArray newContent){
  ByteArray oldContent=content;
  content=newContent;
  if (eNotificationRequired()) {
    eNotify(new ENotificationImpl(this,Notification.SET,PropertiesPackage.FILE_ITEM__CONTENT,oldContent,content));
  }
}",0.9875389408099688
127269,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public void setExtension(String newExtension){
  String oldExtension=extension;
  extension=newExtension;
  if (eNotificationRequired())   eNotify(new ENotificationImpl(this,Notification.SET,PropertiesPackage.FILE_ITEM__EXTENSION,oldExtension,extension));
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public void setExtension(String newExtension){
  String oldExtension=extension;
  extension=newExtension;
  if (eNotificationRequired()) {
    eNotify(new ENotificationImpl(this,Notification.SET,PropertiesPackage.FILE_ITEM__EXTENSION,oldExtension,extension));
  }
}",0.987987987987988
127270,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public ByteArray getContent(){
  if (content != null && content.eIsProxy()) {
    InternalEObject oldContent=(InternalEObject)content;
    content=(ByteArray)eResolveProxy(oldContent);
    if (content != oldContent) {
      if (eNotificationRequired())       eNotify(new ENotificationImpl(this,Notification.RESOLVE,PropertiesPackage.FILE_ITEM__CONTENT,oldContent,content));
    }
  }
  return content;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public ByteArray getContent(){
  if (content != null && content.eIsProxy()) {
    InternalEObject oldContent=(InternalEObject)content;
    content=(ByteArray)eResolveProxy(oldContent);
    if (content != oldContent) {
      if (eNotificationRequired()) {
        eNotify(new ENotificationImpl(this,Notification.RESOLVE,PropertiesPackage.FILE_ITEM__CONTENT,oldContent,content));
      }
    }
  }
  return content;
}",0.9875259875259876
127271,"public EObject eResolveProxy(InternalEObject proxy){
  if (!proxy.eClass().equals(PropertiesPackage.eINSTANCE.getByteArray())) {
    return super.eResolveProxy(proxy);
  }
  URI proxyUri=proxy.eProxyURI();
  URI resourceUri=proxyUri.trimFragment();
  if (eResource() == null) {
    return super.eResolveProxy(proxy);
  }
  ResourceSet resourceSet=eResource().getResourceSet();
  ByteArrayResource byteArrayResource=null;
  URIConverter theURIConverter=resourceSet.getURIConverter();
  URI normalizedURI=theURIConverter.normalize(resourceUri);
  if (""String_Node_Str"".equals(proxyUri.scheme()) && proxyUri.segmentCount() > 1 && ""String_Node_Str"".equals(proxyUri.segment(0))) {
    for (Iterator i=resourceSet.getResources().iterator(); i.hasNext(); ) {
      Resource resource=(Resource)i.next();
      if (theURIConverter.normalize(resource.getURI()).equals(normalizedURI)) {
        byteArrayResource=(ByteArrayResource)resource;
      }
    }
    if (byteArrayResource == null) {
      byteArrayResource=new ByteArrayResource(resourceUri);
      resourceSet.getResources().add(byteArrayResource);
    }
    try {
      byteArrayResource.load(null);
    }
 catch (    IOException e) {
    }
  }
 else {
    for (Iterator i=resourceSet.getResources().iterator(); i.hasNext(); ) {
      Resource resource=(Resource)i.next();
      if (theURIConverter.normalize(resource.getURI()).equals(normalizedURI)) {
        byteArrayResource=(ByteArrayResource)resource;
      }
    }
  }
  if (byteArrayResource != null && byteArrayResource.isLoaded()) {
    EObject object=byteArrayResource.getEObject(proxyUri.fragment().toString());
    if (object != null) {
      return object;
    }
  }
  throw new UnsupportedOperationException();
}","@Override public EObject eResolveProxy(InternalEObject proxy){
  if (!proxy.eClass().equals(PropertiesPackage.eINSTANCE.getByteArray())) {
    return super.eResolveProxy(proxy);
  }
  URI proxyUri=proxy.eProxyURI();
  URI resourceUri=proxyUri.trimFragment();
  if (eResource() == null) {
    return super.eResolveProxy(proxy);
  }
  ResourceSet resourceSet=eResource().getResourceSet();
  ByteArrayResource byteArrayResource=null;
  URIConverter theURIConverter=resourceSet.getURIConverter();
  URI normalizedURI=theURIConverter.normalize(resourceUri);
  if (""String_Node_Str"".equals(proxyUri.scheme()) && proxyUri.segmentCount() > 1 && ""String_Node_Str"".equals(proxyUri.segment(0))) {
    List<Resource> resources=resourceSet.getResources();
synchronized (resources) {
      for (      Resource resource : resources) {
        if (theURIConverter.normalize(resource.getURI()).equals(normalizedURI)) {
          byteArrayResource=(ByteArrayResource)resource;
          break;
        }
      }
    }
    if (byteArrayResource == null) {
      byteArrayResource=new ByteArrayResource(resourceUri);
      resourceSet.getResources().add(byteArrayResource);
    }
    try {
      byteArrayResource.load(null);
    }
 catch (    IOException e) {
    }
  }
 else {
    List<Resource> resources=resourceSet.getResources();
synchronized (resources) {
      for (      Resource resource : resources) {
        if (theURIConverter.normalize(resource.getURI()).equals(normalizedURI)) {
          byteArrayResource=(ByteArrayResource)resource;
          break;
        }
      }
    }
  }
  if (byteArrayResource != null && byteArrayResource.isLoaded()) {
    EObject object=byteArrayResource.getEObject(proxyUri.fragment().toString());
    if (object != null) {
      return object;
    }
  }
  throw new UnsupportedOperationException();
}",0.8537682789651294
127272,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override public String toString(){
  if (eIsProxy())   return super.toString();
  StringBuffer result=new StringBuffer(super.toString());
  result.append(""String_Node_Str"");
  result.append(name);
  result.append(""String_Node_Str"");
  result.append(extension);
  result.append(')');
  return result.toString();
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override public String toString(){
  if (eIsProxy()) {
    return super.toString();
  }
  StringBuffer result=new StringBuffer(super.toString());
  result.append(""String_Node_Str"");
  result.append(name);
  result.append(""String_Node_Str"");
  result.append(extension);
  result.append(')');
  return result.toString();
}",0.922879177377892
127273,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override public Object eGet(int featureID,boolean resolve,boolean coreType){
switch (featureID) {
case PropertiesPackage.FILE_ITEM__NAME:
    return getName();
case PropertiesPackage.FILE_ITEM__EXTENSION:
  return getExtension();
case PropertiesPackage.FILE_ITEM__CONTENT:
if (resolve) return getContent();
return basicGetContent();
}
return super.eGet(featureID,resolve,coreType);
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override public Object eGet(int featureID,boolean resolve,boolean coreType){
switch (featureID) {
case PropertiesPackage.FILE_ITEM__NAME:
    return getName();
case PropertiesPackage.FILE_ITEM__EXTENSION:
  return getExtension();
case PropertiesPackage.FILE_ITEM__CONTENT:
if (resolve) {
  return getContent();
}
return basicGetContent();
}
return super.eGet(featureID,resolve,coreType);
}",0.9934640522875816
127274,"/** 
 * DOC qzhang Comment method ""addTableListener"".
 */
private void addTableListener(){
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      if (e.detail == SWT.CHECK) {
        TableItem tableItem=(TableItem)e.item;
        boolean promptNeeded=tableItem.getChecked();
        if (promptNeeded) {
          tableItem.setText(2,""String_Node_Str"");
          tableItem.setText(3,Messages.getString(""String_Node_Str""));
          countPending++;
          parentWizardPage.setPageComplete(false);
          refreshTable(tableItem,-1);
        }
 else {
          clearTableItem(tableItem);
          if (tableItem.getText() != null && tableItem.getText().equals(Messages.getString(""String_Node_Str""))) {
            countPending--;
          }
        }
        if (forTemplate && (ConnectionHelper.getTables(getConnection()).size() <= 0)) {
          parentWizardPage.setPageComplete(false);
        }
      }
    }
  }
);
}","/** 
 * DOC qzhang Comment method ""addTableListener"".
 */
private void addTableListener(){
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      if (e.detail == SWT.CHECK) {
        TableItem tableItem=(TableItem)e.item;
        boolean promptNeeded=tableItem.getChecked();
        if (promptNeeded) {
          tableItem.setText(2,""String_Node_Str"");
          tableItem.setText(3,Messages.getString(""String_Node_Str""));
          countPending++;
          parentWizardPage.setPageComplete(false);
          refreshTable(tableItem,-1);
          clearTableItem(tableItem);
        }
 else {
          clearTableItem(tableItem);
          if (tableItem.getText() != null && tableItem.getText().equals(Messages.getString(""String_Node_Str""))) {
            countPending--;
          }
        }
        if (forTemplate && (ConnectionHelper.getTables(getConnection()).size() <= 0)) {
          parentWizardPage.setPageComplete(false);
        }
      }
    }
  }
);
}",0.9818716315531604
127275,"/** 
 * deleteTable.
 * @param tableItem
 */
protected void deleteTable(TableItem tableItem){
  SalesforceSchemaConnection connection=getConnection();
  Iterator<MetadataTable> iterate=ConnectionHelper.getTables(getConnection()).iterator();
  while (iterate.hasNext()) {
    MetadataTable metadata=iterate.next();
    if (metadata != null && metadata.getLabel().equals(tableItem.getText(0)) && metadata.eContainer() instanceof SalesforceModuleUnit) {
      SalesforceModuleUnit moduleUnit=(SalesforceModuleUnit)metadata.eContainer();
      connection.getModules().remove(moduleUnit);
    }
  }
}","/** 
 * deleteTable.
 * @param tableItem
 */
protected void deleteTable(TableItem tableItem){
  SalesforceSchemaConnection connection=getConnection();
  Iterator<MetadataTable> iterate=ConnectionHelper.getTables(getConnection()).iterator();
  while (iterate.hasNext()) {
    MetadataTable metadata=iterate.next();
    if (metadata != null && metadata.getLabel().equals(tableItem.getText(0)) && metadata.eContainer() instanceof SalesforceModuleUnit) {
      SalesforceModuleUnit moduleUnit=(SalesforceModuleUnit)metadata.eContainer();
      connection.getModules().remove(moduleUnit);
    }
  }
  iterate=ConnectionHelper.getTables(temConnection).iterator();
  while (iterate.hasNext()) {
    MetadataTable metadata=iterate.next();
    if (metadata != null && metadata.getLabel().equals(tableItem.getText(0)) && metadata.eContainer() instanceof SalesforceModuleUnit) {
      SalesforceModuleUnit moduleUnit=(SalesforceModuleUnit)metadata.eContainer();
      temConnection.getModules().remove(moduleUnit);
    }
  }
}",0.7391304347826086
127276,"@Override public void widgetSelected(final SelectionEvent e){
  if (e.detail == SWT.CHECK) {
    TableItem tableItem=(TableItem)e.item;
    boolean promptNeeded=tableItem.getChecked();
    if (promptNeeded) {
      tableItem.setText(2,""String_Node_Str"");
      tableItem.setText(3,Messages.getString(""String_Node_Str""));
      countPending++;
      parentWizardPage.setPageComplete(false);
      refreshTable(tableItem,-1);
    }
 else {
      clearTableItem(tableItem);
      if (tableItem.getText() != null && tableItem.getText().equals(Messages.getString(""String_Node_Str""))) {
        countPending--;
      }
    }
    if (forTemplate && (ConnectionHelper.getTables(getConnection()).size() <= 0)) {
      parentWizardPage.setPageComplete(false);
    }
  }
}","@Override public void widgetSelected(final SelectionEvent e){
  if (e.detail == SWT.CHECK) {
    TableItem tableItem=(TableItem)e.item;
    boolean promptNeeded=tableItem.getChecked();
    if (promptNeeded) {
      tableItem.setText(2,""String_Node_Str"");
      tableItem.setText(3,Messages.getString(""String_Node_Str""));
      countPending++;
      parentWizardPage.setPageComplete(false);
      refreshTable(tableItem,-1);
      clearTableItem(tableItem);
    }
 else {
      clearTableItem(tableItem);
      if (tableItem.getText() != null && tableItem.getText().equals(Messages.getString(""String_Node_Str""))) {
        countPending--;
      }
    }
    if (forTemplate && (ConnectionHelper.getTables(getConnection()).size() <= 0)) {
      parentWizardPage.setPageComplete(false);
    }
  }
}",0.9787781350482316
127277,"/** 
 * check the item is valid or not。
 */
public boolean checkItem(ResourcesManager resManager,ItemRecord itemRecord,boolean overwrite){
  try {
    Item item=itemRecord.getItem();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    if (itemType == null) {
      itemRecord.addError(Messages.getString(""String_Node_Str""));
      return false;
    }
    if (item.getState() == null) {
      itemRecord.addError(Messages.getString(""String_Node_Str""));
      return false;
    }
    final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
    repObjectcache.initialize(itemType);
    IRepositoryViewObject itemWithSameIdObj=null;
    IRepositoryViewObject itemWithSameNameObj=null;
    for (    IRepositoryViewObject current : repObjectcache.getItemsFromRepository().get(itemType)) {
      final Property property=itemRecord.getProperty();
      if (property != null) {
        if (isSameName(itemRecord,current)) {
          itemWithSameNameObj=current;
        }
        if (property.getId() != null && property.getId().equals(current.getId())) {
          itemWithSameIdObj=current;
        }
      }
    }
    boolean nameAvailable=itemWithSameNameObj == null;
    boolean idAvailable=itemWithSameIdObj == null;
    if (nameAvailable) {
      if (!idAvailable) {
        itemRecord.setState(State.ID_EXISTED);
        itemRecord.setExistingItemWithSameId(itemWithSameIdObj);
        if (!overwrite) {
          itemRecord.addError(Messages.getString(""String_Node_Str""));
        }
      }
    }
 else {
      if (idAvailable) {
        itemRecord.setState(State.NAME_EXISTED);
        if (overwrite) {
          itemRecord.setExistingItemWithSameId(itemWithSameNameObj);
          if (itemWithSameNameObj != null) {
            ERepositoryStatus status=itemWithSameNameObj.getRepositoryStatus();
            if (status == ERepositoryStatus.LOCK_BY_OTHER || status == ERepositoryStatus.LOCK_BY_USER) {
              itemRecord.addError(Messages.getString(""String_Node_Str""));
            }
          }
        }
      }
 else {
        itemRecord.setState(State.NAME_AND_ID_EXISTED);
        if (overwrite) {
          if (itemWithSameNameObj != null && itemWithSameIdObj != null && !itemWithSameNameObj.getProperty().getLabel().equals(itemWithSameIdObj.getProperty().getLabel())) {
            itemRecord.setExistingItemWithSameId(itemWithSameNameObj);
          }
        }
      }
      if (!overwrite) {
        itemRecord.addError(Messages.getString(""String_Node_Str""));
      }
    }
    if (overwrite && itemRecord.getState() == State.NAME_AND_ID_EXISTED) {
      if (checkIfLocked(itemRecord)) {
        itemRecord.addError(Messages.getString(""String_Node_Str""));
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(""String_Node_Str"" + itemRecord.getPath(),e);
  }
  return true;
}","/** 
 * check the item is valid or not。
 */
public boolean checkItem(ResourcesManager resManager,ItemRecord itemRecord,boolean overwrite){
  try {
    Item item=itemRecord.getItem();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    if (itemType == null) {
      itemRecord.addError(Messages.getString(""String_Node_Str""));
      return false;
    }
    if (item.getState() == null) {
      itemRecord.addError(Messages.getString(""String_Node_Str""));
      return false;
    }
    final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
    repObjectcache.initialize(itemType);
    IRepositoryViewObject itemWithSameIdObj=null;
    IRepositoryViewObject itemWithSameNameObj=null;
    for (    IRepositoryViewObject current : repObjectcache.getItemsFromRepository().get(itemType)) {
      final Property property=itemRecord.getProperty();
      if (property != null) {
        if (isSameName(itemRecord,current)) {
          itemWithSameNameObj=current;
        }
        if (property.getId() != null && property.getId().equals(current.getId())) {
          itemWithSameIdObj=current;
        }
      }
    }
    boolean nameAvailable=itemWithSameNameObj == null;
    boolean idAvailable=itemWithSameIdObj == null;
    if (nameAvailable) {
      if (!idAvailable) {
        itemRecord.setState(State.ID_EXISTED);
        itemRecord.setExistingItemWithSameId(itemWithSameIdObj);
        if (!overwrite) {
          itemRecord.addError(Messages.getString(""String_Node_Str""));
        }
      }
    }
 else {
      if (idAvailable) {
        itemRecord.setState(State.NAME_EXISTED);
        if (overwrite) {
          itemRecord.setExistingItemWithSameId(itemWithSameNameObj);
          if (itemWithSameNameObj != null) {
            ERepositoryStatus status=itemWithSameNameObj.getRepositoryStatus();
            if (status == ERepositoryStatus.LOCK_BY_OTHER || status == ERepositoryStatus.LOCK_BY_USER) {
              itemRecord.addError(Messages.getString(""String_Node_Str""));
            }
          }
        }
      }
 else {
        itemRecord.setState(State.NAME_AND_ID_EXISTED);
        if (overwrite) {
          itemRecord.setExistingItemWithSameId(itemWithSameNameObj);
        }
      }
      if (!overwrite) {
        itemRecord.addError(Messages.getString(""String_Node_Str""));
      }
    }
    if (overwrite && itemRecord.getState() == State.NAME_AND_ID_EXISTED) {
      if (checkIfLocked(itemRecord)) {
        itemRecord.addError(Messages.getString(""String_Node_Str""));
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(""String_Node_Str"" + itemRecord.getPath(),e);
  }
  return true;
}",0.9521754764473211
127278,"/** 
 * different id with same name.
 */
protected boolean isSameName(ItemRecord itemRecord,IRepositoryViewObject repObject){
  final Property property=itemRecord.getProperty();
  if ((property.getLabel() != null && property.getLabel().equalsIgnoreCase(repObject.getLabel())) && (property.getId() != null && !property.getId().equals(repObject.getId()))) {
    return true;
  }
  return false;
}","/** 
 * item with same name.
 */
protected boolean isSameName(ItemRecord itemRecord,IRepositoryViewObject repObject){
  final Property property=itemRecord.getProperty();
  if ((property.getLabel() != null && property.getLabel().equalsIgnoreCase(repObject.getLabel()))) {
    return true;
  }
  return false;
}",0.8677098150782361
127279,"@Override public Item copy(Item sourceItem,IPath targetPath,String newItemLabel) throws PersistenceException, BusinessException {
  ICoreService coreService=getCoreService();
  if (coreService != null && sourceItem instanceof ProcessItem) {
    try {
      coreService.checkJob(sourceItem.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  Item targetItem=this.repositoryFactoryFromProvider.copy(sourceItem,targetPath,newItemLabel);
  return targetItem;
}","@Override public Item copy(Item sourceItem,IPath targetPath,String newItemLabel) throws PersistenceException, BusinessException {
  ICoreService coreService=getCoreService();
  if (coreService != null && sourceItem instanceof ProcessItem) {
    try {
      coreService.checkJob(sourceItem.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  Item targetItem=this.repositoryFactoryFromProvider.copy(sourceItem,targetPath,newItemLabel);
  fireRepositoryPropertyChange(ERepositoryActionName.COPY.getName(),sourceItem,targetItem);
  return targetItem;
}",0.8967213114754098
127280,"private boolean deleteElements(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final RepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  boolean needReturn=false;
  final boolean[] enableDeleting=new boolean[1];
  enableDeleting[0]=true;
  final IRepositoryViewObject objToDelete=currentJobNode.getObject();
  final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkContext.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
        int returnCode=dialog.open();
switch (returnCode) {
case Window.OK:
          enableDeleting[0]=true;
        break;
case Window.CANCEL:
      enableDeleting[0]=false;
    break;
}
}
}
);
}
if (!enableDeleting[0]) {
return true;
}
AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
ERepositoryObjectType nodeType=(ERepositoryObjectType)currentJobNode.getProperties(EProperties.CONTENT_TYPE);
if (nodeType != null && nodeType.isSubItem()) {
Display.getDefault().syncExec(new Runnable(){
@Override public void run(){
final DeleteTableAction deleteTableAction=new DeleteTableAction();
deleteTableAction.setWorkbenchPart(getWorkbenchPart());
deleteTableAction.run();
}
}
);
needReturn=true;
}
 else {
if (factory.getStatus(objToDelete) == ERepositoryStatus.DELETED) {
if (!confirmFromDialog && resChangeService != null) {
List<IRepositoryNode> dependentNodes=resChangeService.getDependentNodes(currentJobNode);
if (dependentNodes != null && !dependentNodes.isEmpty()) {
  resChangeService.openDependcesDialog(dependentNodes);
  return true;
}
}
if (confirm == null) {
if (confirmFromDialog) {
  confirm=confirmFromDialog;
}
 else {
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      String title=Messages.getString(""String_Node_Str"");
      String message=currentJobNode.getProperties(EProperties.LABEL) + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
      confirmFromDialog=MessageDialog.openQuestion(new Shell(),title,message);
    }
  }
);
  confirm=confirmFromDialog;
}
}
if (confirm) {
deleteActionCache.closeOpenedEditor(objToDelete);
if (currentJobNode.getType() == ENodeType.SIMPLE_FOLDER) {
  boolean success=true;
  for (  IRepositoryNode curNode : currentJobNode.getChildren()) {
    try {
      deleteElements(factory,deleteActionCache,(RepositoryNode)curNode,confirm);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (success) {
    if (currentJobNode.getObject() != null && currentJobNode.getObject().getProperty() != null && currentJobNode.getObject().getProperty().getItem() != null) {
      Item fitem=currentJobNode.getObject().getProperty().getItem();
      if ((fitem instanceof FolderItem) && (((FolderItem)fitem).getType().getValue() == FolderType.FOLDER)) {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentJobNode.getObject().getProperty().getItem()));
      }
 else {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
      }
    }
 else {
      factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
    }
  }
}
 else {
  if (resChangeService != null && objToDelete != null && objToDelete.getProperty() != null) {
    Item item=objToDelete.getProperty().getItem();
    if (item != null) {
      resChangeService.removeAllDependecies(item);
    }
  }
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    handler.deleteNode(objToDelete);
  }
  if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
    forceBuild=true;
  }
  factory.deleteObjectPhysical(objToDelete);
  ExpressionPersistance.getInstance().jobDeleted(objToDelete.getLabel());
}
}
}
 else {
factory.deleteObjectLogical(objToDelete);
updateRelatedViews();
removeConnFromSQLExplorer(currentJobNode);
}
}
return needReturn;
}","private boolean deleteElements(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final RepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  boolean needReturn=false;
  final boolean[] enableDeleting=new boolean[1];
  enableDeleting[0]=true;
  final IRepositoryViewObject objToDelete=currentJobNode.getObject();
  final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkContext.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
        int returnCode=dialog.open();
switch (returnCode) {
case Window.OK:
          enableDeleting[0]=true;
        break;
case Window.CANCEL:
      enableDeleting[0]=false;
    break;
}
}
}
);
}
if (!enableDeleting[0]) {
return true;
}
AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
ERepositoryObjectType nodeType=(ERepositoryObjectType)currentJobNode.getProperties(EProperties.CONTENT_TYPE);
if (nodeType != null && nodeType.isSubItem()) {
Display.getDefault().syncExec(new Runnable(){
@Override public void run(){
final DeleteTableAction deleteTableAction=new DeleteTableAction();
deleteTableAction.setWorkbenchPart(getWorkbenchPart());
deleteTableAction.run();
}
}
);
needReturn=true;
}
 else {
if (factory.getStatus(objToDelete) == ERepositoryStatus.DELETED) {
if (!confirmFromDialog && resChangeService != null) {
List<IRepositoryNode> dependentNodes=resChangeService.getDependentNodes(currentJobNode);
if (dependentNodes != null && !dependentNodes.isEmpty()) {
  resChangeService.openDependcesDialog(dependentNodes);
  return true;
}
}
if (confirm == null) {
if (confirmFromDialog) {
  confirm=confirmFromDialog;
}
 else {
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      String title=Messages.getString(""String_Node_Str"");
      String message=currentJobNode.getProperties(EProperties.LABEL) + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
      confirmFromDialog=MessageDialog.openQuestion(new Shell(),title,message);
    }
  }
);
  confirm=confirmFromDialog;
}
}
if (confirm) {
deleteActionCache.closeOpenedEditor(objToDelete);
if (currentJobNode.getType() == ENodeType.SIMPLE_FOLDER) {
  boolean success=true;
  for (  IRepositoryNode curNode : currentJobNode.getChildren()) {
    try {
      deleteElements(factory,deleteActionCache,(RepositoryNode)curNode,confirm);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (success) {
    if (currentJobNode.getObject() != null && currentJobNode.getObject().getProperty() != null && currentJobNode.getObject().getProperty().getItem() != null) {
      Item fitem=currentJobNode.getObject().getProperty().getItem();
      if ((fitem instanceof FolderItem) && (((FolderItem)fitem).getType().getValue() == FolderType.FOLDER)) {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentJobNode.getObject().getProperty().getItem()));
      }
 else {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
      }
    }
 else {
      factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
    }
  }
}
 else {
  if (resChangeService != null && objToDelete != null && objToDelete.getProperty() != null) {
    Item item=objToDelete.getProperty().getItem();
    if (item != null) {
      resChangeService.removeAllDependecies(item);
    }
  }
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    handler.deleteNode(objToDelete);
  }
  if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
    forceBuild=true;
  }
  if (!forceBuild) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
      ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
      if (nodeType == camelService.getBeansType()) {
        forceBuild=true;
      }
    }
  }
  factory.deleteObjectPhysical(objToDelete);
  ExpressionPersistance.getInstance().jobDeleted(objToDelete.getLabel());
}
}
}
 else {
factory.deleteObjectLogical(objToDelete);
updateRelatedViews();
removeConnFromSQLExplorer(currentJobNode);
}
}
return needReturn;
}",0.9596933187294632
127281,"protected void deleteElements(final IProxyRepositoryFactory factory,final RepositoryNode currentNode) throws PersistenceException, BusinessException {
  if (!validElement(currentNode)) {
    return;
  }
  final IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      factory.save(item);
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          for (          IEditorReference editors : page.getEditorReferences()) {
            String nameInEditor=editors.getName();
            if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
              page.closeEditor(editors.getEditor(false),false);
            }
          }
          if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
            if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
              for (              IRepositoryNode curNode : currentNode.getChildren()) {
                deleteElements(factory,(RepositoryNode)curNode);
              }
              factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
            }
 else {
              for (              IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
                handler.deleteNode(objToDelete);
              }
              ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
              if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
                forceBuild=true;
              }
              factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
            }
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
}","protected void deleteElements(final IProxyRepositoryFactory factory,final RepositoryNode currentNode) throws PersistenceException, BusinessException {
  if (!validElement(currentNode)) {
    return;
  }
  final IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      factory.save(item);
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          for (          IEditorReference editors : page.getEditorReferences()) {
            String nameInEditor=editors.getName();
            if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
              page.closeEditor(editors.getEditor(false),false);
            }
          }
          if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
            if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
              for (              IRepositoryNode curNode : currentNode.getChildren()) {
                deleteElements(factory,(RepositoryNode)curNode);
              }
              factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
            }
 else {
              for (              IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
                handler.deleteNode(objToDelete);
              }
              ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
              if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
                forceBuild=true;
              }
              if (!forceBuild) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
                  ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
                  if (nodeType == camelService.getBeansType()) {
                    forceBuild=true;
                  }
                }
              }
              factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
            }
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
}",0.915758896151053
127282,"@Override public void run(){
  try {
    IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    for (    IEditorReference editors : page.getEditorReferences()) {
      String nameInEditor=editors.getName();
      if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
        page.closeEditor(editors.getEditor(false),false);
      }
    }
    if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
      if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
        for (        IRepositoryNode curNode : currentNode.getChildren()) {
          deleteElements(factory,(RepositoryNode)curNode);
        }
        factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
      }
 else {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          handler.deleteNode(objToDelete);
        }
        ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
        if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
          forceBuild=true;
        }
        factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","@Override public void run(){
  try {
    IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    for (    IEditorReference editors : page.getEditorReferences()) {
      String nameInEditor=editors.getName();
      if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
        page.closeEditor(editors.getEditor(false),false);
      }
    }
    if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
      if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
        for (        IRepositoryNode curNode : currentNode.getChildren()) {
          deleteElements(factory,(RepositoryNode)curNode);
        }
        factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
      }
 else {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          handler.deleteNode(objToDelete);
        }
        ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
        if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
          forceBuild=true;
        }
        if (!forceBuild) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
            ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
            if (nodeType == camelService.getBeansType()) {
              forceBuild=true;
            }
          }
        }
        factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.88565145684442
127283,"private void set4AS400(boolean flag){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreUIService.class)) {
    ICoreUIService service=(ICoreUIService)GlobalServiceRegister.getDefault().getService(ICoreUIService.class);
    service.getPreferenceStore().setValue(ITalendCorePrefConstants.AS400_SQL_SEG,flag);
  }
}","private void set4AS400(boolean flag){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreUIService.class)) {
    CorePlugin.getDefault().getPreferenceStore().setValue(ITalendCorePrefConstants.AS400_SQL_SEG,flag);
  }
}",0.7935943060498221
127284,"@Test public void testGetDbTypeByClassNameAndDriverJar(){
  Assert.assertNull(extractMetaManger.getDbTypeByClassNameAndDriverJar(null,null));
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",null),EDatabaseTypeName.MYSQL.getXmlName());
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",null),EDatabaseTypeName.GREENPLUM.getXmlName());
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",""String_Node_Str""),EDatabaseTypeName.PSQL.getXmlName());
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",""String_Node_Str""),EDatabaseTypeName.ACCESS.getXmlName());
}","@Test public void testGetDbTypeByClassNameAndDriverJar(){
  Assert.assertNull(extractMetaManger.getDbTypeByClassNameAndDriverJar(null,null));
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",null),EDatabaseTypeName.MYSQL.getXmlName());
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",null),EDatabaseTypeName.PSQL.getXmlName());
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",""String_Node_Str""),EDatabaseTypeName.PSQL.getXmlName());
  Assert.assertEquals(extractMetaManger.getDbTypeByClassNameAndDriverJar(""String_Node_Str"",""String_Node_Str""),EDatabaseTypeName.ACCESS.getXmlName());
}",0.99370188943317
127285,"/** 
 * DOC amaumont Comment method ""setTableViewerCreatorOptions"".
 * @param newTableViewerCreator
 */
protected void setTableViewerCreatorOptions(TableViewerCreator<B> newTableViewerCreator){
  newTableViewerCreator.setShowLineSelection(SHOW_ROW_SELECTION.FULL);
  newTableViewerCreator.setLazyLoad(true);
}","/** 
 * DOC amaumont Comment method ""setTableViewerCreatorOptions"".
 * @param newTableViewerCreator
 */
protected void setTableViewerCreatorOptions(TableViewerCreator<B> newTableViewerCreator){
  newTableViewerCreator.setShowLineSelection(SHOW_ROW_SELECTION.FULL);
}",0.925217391304348
127286,"private boolean deleteElements(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final RepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  boolean needReturn=false;
  final boolean[] enableDeleting=new boolean[1];
  enableDeleting[0]=true;
  final IRepositoryViewObject objToDelete=currentJobNode.getObject();
  final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkContext.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
        int returnCode=dialog.open();
switch (returnCode) {
case Window.OK:
          enableDeleting[0]=true;
        break;
case Window.CANCEL:
      enableDeleting[0]=false;
    break;
}
}
}
);
}
if (!enableDeleting[0]) {
return true;
}
AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
ERepositoryObjectType nodeType=(ERepositoryObjectType)currentJobNode.getProperties(EProperties.CONTENT_TYPE);
if (nodeType != null && nodeType.isSubItem()) {
Display.getDefault().syncExec(new Runnable(){
@Override public void run(){
final DeleteTableAction deleteTableAction=new DeleteTableAction();
deleteTableAction.setWorkbenchPart(getWorkbenchPart());
deleteTableAction.run();
}
}
);
needReturn=true;
}
 else {
if (factory.getStatus(objToDelete) == ERepositoryStatus.DELETED) {
if (!confirmFromDialog && resChangeService != null) {
List<IRepositoryNode> dependentNodes=resChangeService.getDependentNodes(currentJobNode);
if (dependentNodes != null && !dependentNodes.isEmpty()) {
  resChangeService.openDependcesDialog(dependentNodes);
  return true;
}
}
if (confirm == null) {
if (confirmFromDialog) {
  confirm=confirmFromDialog;
}
 else {
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      String title=Messages.getString(""String_Node_Str"");
      String message=currentJobNode.getProperties(EProperties.LABEL) + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
      confirmFromDialog=MessageDialog.openQuestion(new Shell(),title,message);
    }
  }
);
  confirm=confirmFromDialog;
}
}
if (confirm) {
deleteActionCache.closeOpenedEditor(objToDelete);
if (currentJobNode.getType() == ENodeType.SIMPLE_FOLDER) {
  boolean success=true;
  for (  IRepositoryNode curNode : currentJobNode.getChildren()) {
    try {
      deleteElements(factory,deleteActionCache,(RepositoryNode)curNode,confirm);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (success) {
    if (currentJobNode.getObject() != null && currentJobNode.getObject().getProperty() != null && currentJobNode.getObject().getProperty().getItem() != null) {
      Item fitem=currentJobNode.getObject().getProperty().getItem();
      if ((fitem instanceof FolderItem) && (((FolderItem)fitem).getType().getValue() == FolderType.FOLDER)) {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentJobNode.getObject().getProperty().getItem()));
      }
 else {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
      }
    }
 else {
      factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
    }
  }
}
 else {
  if (resChangeService != null && objToDelete != null && objToDelete.getProperty() != null) {
    Item item=objToDelete.getProperty().getItem();
    if (item != null) {
      resChangeService.removeAllDependecies(item);
    }
  }
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    handler.deleteNode(objToDelete);
  }
  factory.deleteObjectPhysical(objToDelete);
  ExpressionPersistance.getInstance().jobDeleted(objToDelete.getLabel());
}
}
}
 else {
factory.deleteObjectLogical(objToDelete);
updateRelatedViews();
removeConnFromSQLExplorer(currentJobNode);
}
}
return needReturn;
}","private boolean deleteElements(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final RepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  boolean needReturn=false;
  final boolean[] enableDeleting=new boolean[1];
  enableDeleting[0]=true;
  final IRepositoryViewObject objToDelete=currentJobNode.getObject();
  final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkContext.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
        int returnCode=dialog.open();
switch (returnCode) {
case Window.OK:
          enableDeleting[0]=true;
        break;
case Window.CANCEL:
      enableDeleting[0]=false;
    break;
}
}
}
);
}
if (!enableDeleting[0]) {
return true;
}
AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
ERepositoryObjectType nodeType=(ERepositoryObjectType)currentJobNode.getProperties(EProperties.CONTENT_TYPE);
if (nodeType != null && nodeType.isSubItem()) {
Display.getDefault().syncExec(new Runnable(){
@Override public void run(){
final DeleteTableAction deleteTableAction=new DeleteTableAction();
deleteTableAction.setWorkbenchPart(getWorkbenchPart());
deleteTableAction.run();
}
}
);
needReturn=true;
}
 else {
if (factory.getStatus(objToDelete) == ERepositoryStatus.DELETED) {
if (!confirmFromDialog && resChangeService != null) {
List<IRepositoryNode> dependentNodes=resChangeService.getDependentNodes(currentJobNode);
if (dependentNodes != null && !dependentNodes.isEmpty()) {
  resChangeService.openDependcesDialog(dependentNodes);
  return true;
}
}
if (confirm == null) {
if (confirmFromDialog) {
  confirm=confirmFromDialog;
}
 else {
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      String title=Messages.getString(""String_Node_Str"");
      String message=currentJobNode.getProperties(EProperties.LABEL) + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
      confirmFromDialog=MessageDialog.openQuestion(new Shell(),title,message);
    }
  }
);
  confirm=confirmFromDialog;
}
}
if (confirm) {
deleteActionCache.closeOpenedEditor(objToDelete);
if (currentJobNode.getType() == ENodeType.SIMPLE_FOLDER) {
  boolean success=true;
  for (  IRepositoryNode curNode : currentJobNode.getChildren()) {
    try {
      deleteElements(factory,deleteActionCache,(RepositoryNode)curNode,confirm);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (success) {
    if (currentJobNode.getObject() != null && currentJobNode.getObject().getProperty() != null && currentJobNode.getObject().getProperty().getItem() != null) {
      Item fitem=currentJobNode.getObject().getProperty().getItem();
      if ((fitem instanceof FolderItem) && (((FolderItem)fitem).getType().getValue() == FolderType.FOLDER)) {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentJobNode.getObject().getProperty().getItem()));
      }
 else {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
      }
    }
 else {
      factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
    }
  }
}
 else {
  if (resChangeService != null && objToDelete != null && objToDelete.getProperty() != null) {
    Item item=objToDelete.getProperty().getItem();
    if (item != null) {
      resChangeService.removeAllDependecies(item);
    }
  }
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    handler.deleteNode(objToDelete);
  }
  if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
    forceBuild=true;
  }
  factory.deleteObjectPhysical(objToDelete);
  ExpressionPersistance.getInstance().jobDeleted(objToDelete.getLabel());
}
}
}
 else {
factory.deleteObjectLogical(objToDelete);
updateRelatedViews();
removeConnFromSQLExplorer(currentJobNode);
}
}
return needReturn;
}",0.9858796296296296
127287,"@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          selectNodes.add((RepositoryNode)obj);
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      for (      RepositoryNode node : selectNodes) {
        try {
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    @Override public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              IRepositoryViewObject object=node.getObject();
              if (coreService != null && object != null && object.getProperty() != null) {
                Item item=object.getProperty().getItem();
                IProcess iProcess=coreService.getProcessFromItem(item);
                if (iProcess != null && iProcess instanceof IProcess2) {
                  IProcess2 process=(IProcess2)iProcess;
                  process.removeProblems4ProcessDeleted();
                }
              }
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            if (needReturn) {
              return;
            }
            types.add(node.getObjectType());
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
            if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      @Override public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            boolean isSqlTemplate=false;
            if (node.getObject() instanceof Folder) {
              Object label=node.getProperties(EProperties.LABEL);
              if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                isSqlTemplate=true;
              }
            }
            if (!isSqlTemplate) {
              types.add(node.getContentType());
              if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                types.add(ERepositoryObjectType.DOCUMENTATION);
              }
              deletedFolder.add(node);
              deleteFolder(node,factory,deleteActionCache);
            }
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  synchUI(deleteActionCache);
}","@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          selectNodes.add((RepositoryNode)obj);
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      for (      RepositoryNode node : selectNodes) {
        try {
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    @Override public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              IRepositoryViewObject object=node.getObject();
              if (coreService != null && object != null && object.getProperty() != null) {
                Item item=object.getProperty().getItem();
                IProcess iProcess=coreService.getProcessFromItem(item);
                if (iProcess != null && iProcess instanceof IProcess2) {
                  IProcess2 process=(IProcess2)iProcess;
                  process.removeProblems4ProcessDeleted();
                }
              }
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            if (needReturn) {
              return;
            }
            types.add(node.getObjectType());
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
            if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      @Override public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            boolean isSqlTemplate=false;
            if (node.getObject() instanceof Folder) {
              Object label=node.getProperties(EProperties.LABEL);
              if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                isSqlTemplate=true;
              }
            }
            if (!isSqlTemplate) {
              types.add(node.getContentType());
              if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                types.add(ERepositoryObjectType.DOCUMENTATION);
              }
              deletedFolder.add(node);
              deleteFolder(node,factory,deleteActionCache);
            }
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
    if (forceBuild) {
      IRunProcessService service=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      service.buildJavaProject();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  synchUI(deleteActionCache);
}",0.9888440541182056
127288,"protected void deleteElements(final IProxyRepositoryFactory factory,final RepositoryNode currentNode) throws PersistenceException, BusinessException {
  if (!validElement(currentNode)) {
    return;
  }
  final IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      factory.save(item);
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          for (          IEditorReference editors : page.getEditorReferences()) {
            String nameInEditor=editors.getName();
            if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
              page.closeEditor(editors.getEditor(false),false);
            }
          }
          if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
            if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
              for (              IRepositoryNode curNode : currentNode.getChildren()) {
                deleteElements(factory,(RepositoryNode)curNode);
              }
              factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
            }
 else {
              for (              IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
                handler.deleteNode(objToDelete);
              }
              factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
            }
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
}","protected void deleteElements(final IProxyRepositoryFactory factory,final RepositoryNode currentNode) throws PersistenceException, BusinessException {
  if (!validElement(currentNode)) {
    return;
  }
  final IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      factory.save(item);
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          for (          IEditorReference editors : page.getEditorReferences()) {
            String nameInEditor=editors.getName();
            if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
              page.closeEditor(editors.getEditor(false),false);
            }
          }
          if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
            if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
              for (              IRepositoryNode curNode : currentNode.getChildren()) {
                deleteElements(factory,(RepositoryNode)curNode);
              }
              factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
            }
 else {
              for (              IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
                handler.deleteNode(objToDelete);
              }
              ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
              if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
                forceBuild=true;
              }
              factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
            }
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
}",0.9414480587618048
127289,"@Override protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=Messages.getString(""String_Node_Str"");
  String message=null;
  List<IRepositoryNode> originalChildren=node.getChildren();
  final List<IRepositoryNode> children=new ArrayList<IRepositoryNode>(originalChildren);
  if (children.size() == 0) {
    return;
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  if (resChangeService != null) {
    List<IRepositoryNode> dependentNodes=resChangeService.getDependentConnNodesInRecycleBin(children);
    if (dependentNodes != null && !dependentNodes.isEmpty()) {
      resChangeService.openDependcesDialog(dependentNodes);
      return;
    }
  }
  if (children.size() > 1) {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
 else {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
  final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(children,null);
  final Shell shell=getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    return;
  }
  for (  IRepositoryNode child : children) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      ITDQRepositoryService tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      if (!tdqRepService.removeAliasInSQLExplorer(child)) {
        MessageDialog.openWarning(shell,title,Messages.getString(""String_Node_Str""));
        try {
          IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
          factory.saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
        return;
      }
    }
  }
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      for (      IRepositoryNode child : children) {
        try {
          deleteElements(factory,(RepositoryNode)child);
        }
 catch (        Exception e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  if (unDeleteItems.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
        dialog.open();
      }
    }
);
  }
}","@Override protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=Messages.getString(""String_Node_Str"");
  String message=null;
  List<IRepositoryNode> originalChildren=node.getChildren();
  final List<IRepositoryNode> children=new ArrayList<IRepositoryNode>(originalChildren);
  if (children.size() == 0) {
    return;
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  if (resChangeService != null) {
    List<IRepositoryNode> dependentNodes=resChangeService.getDependentConnNodesInRecycleBin(children);
    if (dependentNodes != null && !dependentNodes.isEmpty()) {
      resChangeService.openDependcesDialog(dependentNodes);
      return;
    }
  }
  if (children.size() > 1) {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
 else {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
  final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(children,null);
  final Shell shell=getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    return;
  }
  for (  IRepositoryNode child : children) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      ITDQRepositoryService tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      if (!tdqRepService.removeAliasInSQLExplorer(child)) {
        MessageDialog.openWarning(shell,title,Messages.getString(""String_Node_Str""));
        try {
          IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
          factory.saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
        return;
      }
    }
  }
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      for (      IRepositoryNode child : children) {
        try {
          deleteElements(factory,(RepositoryNode)child);
        }
 catch (        Exception e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,iRunnableWithProgress);
    if (forceBuild) {
      IRunProcessService service=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      service.buildJavaProject();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  if (unDeleteItems.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
        dialog.open();
      }
    }
);
  }
}",0.9753797799895232
127290,"@Override public void run(){
  try {
    IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    for (    IEditorReference editors : page.getEditorReferences()) {
      String nameInEditor=editors.getName();
      if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
        page.closeEditor(editors.getEditor(false),false);
      }
    }
    if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
      if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
        for (        IRepositoryNode curNode : currentNode.getChildren()) {
          deleteElements(factory,(RepositoryNode)curNode);
        }
        factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
      }
 else {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          handler.deleteNode(objToDelete);
        }
        factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","@Override public void run(){
  try {
    IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    for (    IEditorReference editors : page.getEditorReferences()) {
      String nameInEditor=editors.getName();
      if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
        page.closeEditor(editors.getEditor(false),false);
      }
    }
    if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
      if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
        for (        IRepositoryNode curNode : currentNode.getChildren()) {
          deleteElements(factory,(RepositoryNode)curNode);
        }
        factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
      }
 else {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          handler.deleteNode(objToDelete);
        }
        ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
        if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
          forceBuild=true;
        }
        factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9140546006066734
127291,"private static List<ModuleNeeded> getModulesNeededForDBConnWizard(){
  List<ModuleNeeded> importNeedsList=new ArrayList<ModuleNeeded>();
  EDatabaseVersion4Drivers[] dbVersions=EDatabaseVersion4Drivers.values();
  for (  EDatabaseVersion4Drivers temp : dbVersions) {
    Set<String> drivers=temp.getProviderDrivers();
    for (    String driver : drivers) {
      String message=Messages.getString(""String_Node_Str"");
      importNeedsList.add(new ModuleNeeded(temp.name(),driver,message,true));
    }
  }
  return importNeedsList;
}","private static List<ModuleNeeded> getModulesNeededForDBConnWizard(){
  List<ModuleNeeded> importNeedsList=new ArrayList<ModuleNeeded>();
  EDatabaseVersion4Drivers[] dbVersions=EDatabaseVersion4Drivers.values();
  String message=Messages.getString(""String_Node_Str"");
  for (  EDatabaseVersion4Drivers temp : dbVersions) {
    Set<String> drivers=temp.getProviderDrivers();
    for (    String driver : drivers) {
      importNeedsList.add(new ModuleNeeded(temp.name(),driver,message,true));
    }
  }
  return importNeedsList;
}",0.7382297551789078
127292,"/** 
 * yzhang Comment method ""getExpressionStoreFolder"".
 * @return
 */
private String getExpressionStoreFolderPath(){
  if (rootFolderPath == null) {
    if (path == null) {
      IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
      RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
      Project project=repositoryContext.getProject();
      IProject p=root.getProject(project.getTechnicalLabel());
      IFolder configurationFolder=p.getFolder(CONFIGURATION_FOLDER_NAME);
      if (!configurationFolder.exists()) {
        try {
          configurationFolder.create(true,true,null);
        }
 catch (        CoreException e) {
          ExceptionHandler.process(e);
        }
      }
      IFolder expressionFolder=configurationFolder.getFolder(EXPRESSION_FOLDER_NAME);
      if (!expressionFolder.exists()) {
        try {
          expressionFolder.create(true,true,null);
        }
 catch (        CoreException e) {
          ExceptionHandler.process(e);
        }
      }
      path=expressionFolder.getLocation().toOSString();
    }
    int index=path.indexOf(EXPRESSION_FOLDER_NAME) + EXPRESSION_FOLDER_NAME.length();
    rootFolderPath=path.substring(0,index);
  }
  return rootFolderPath;
}","/** 
 * yzhang Comment method ""getExpressionStoreFolder"".
 * @return
 */
private String getExpressionStoreFolderPath(){
  if (rootFolderPath == null) {
    if (path == null) {
      IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
      RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
      Project project=repositoryContext.getProject();
      IProject p=root.getProject(project.getTechnicalLabel());
      String projectPath=p.getLocation().toPortableString();
      String configurationPath=projectPath + File.separator + ExpressionPersistance.CONFIGURATION_FOLDER_NAME;
      configurationPath=getValidFolderPath(configurationPath,1);
      String expressionPath=configurationPath + File.separator + ExpressionPersistance.EXPRESSION_FOLDER_NAME;
      expressionPath=getValidFolderPath(expressionPath,1);
      File expressionFolder=new File(expressionPath);
      path=expressionFolder.getAbsolutePath();
    }
    int index=path.indexOf(EXPRESSION_FOLDER_NAME) + EXPRESSION_FOLDER_NAME.length();
    rootFolderPath=path.substring(0,index);
  }
  return rootFolderPath;
}",0.6216
127293,"/** 
 * yzhang Comment method ""getExpressionStoreFolder"".
 * @return
 */
private String getExpressionStoreFolderPath(){
  if (rootFolderPath == null) {
    if (path == null) {
      IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
      RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
      Project project=repositoryContext.getProject();
      IProject p=root.getProject(project.getTechnicalLabel());
      IFolder configurationFolder=p.getFolder(CONFIGURATION_FOLDER_NAME);
      if (!configurationFolder.exists()) {
        try {
          configurationFolder.create(true,true,null);
        }
 catch (        CoreException e) {
          RuntimeExceptionHandler.process(e);
        }
      }
      IFolder expressionFolder=configurationFolder.getFolder(EXPRESSION_FOLDER_NAME);
      if (!expressionFolder.exists()) {
        try {
          expressionFolder.create(true,true,null);
        }
 catch (        CoreException e) {
          RuntimeExceptionHandler.process(e);
        }
      }
      path=expressionFolder.getLocation().toOSString();
    }
    int index=path.indexOf(EXPRESSION_FOLDER_NAME) + EXPRESSION_FOLDER_NAME.length();
    rootFolderPath=path.substring(0,index);
  }
  return rootFolderPath;
}","/** 
 * yzhang Comment method ""getExpressionStoreFolder"".
 * @return
 */
private String getExpressionStoreFolderPath(){
  if (rootFolderPath == null) {
    if (path == null) {
      IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
      RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
      Project project=repositoryContext.getProject();
      IProject p=root.getProject(project.getTechnicalLabel());
      String projectPath=p.getLocation().toPortableString() + File.separator + RepositoryConstants.TEMP_DIRECTORY;
      String configurationPath=projectPath + File.separator + ExpressionPersistance.CONFIGURATION_FOLDER_NAME;
      configurationPath=getValidFolderPath(configurationPath,1);
      String expressionPath=configurationPath + File.separator + ExpressionPersistance.EXPRESSION_FOLDER_NAME;
      expressionPath=getValidFolderPath(expressionPath,1);
      File expressionFolder=new File(expressionPath);
      path=expressionFolder.getAbsolutePath();
    }
    int index=path.indexOf(EXPRESSION_FOLDER_NAME) + EXPRESSION_FOLDER_NAME.length();
    rootFolderPath=path.substring(0,index);
  }
  return rootFolderPath;
}",0.6059190031152648
127294,"/** 
 * yzhang Comment method ""getExpressionStoreFolder"".
 * @return
 */
private String getExpressionStoreFolderPath(){
  if (rootFolderPath == null) {
    if (path == null) {
      IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
      RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
      Project project=repositoryContext.getProject();
      IProject p=root.getProject(project.getTechnicalLabel());
      String projectPath=p.getLocation().toPortableString();
      String configurationPath=projectPath + File.separator + ExpressionPersistance.CONFIGURATION_FOLDER_NAME;
      configurationPath=getValidFolderPath(configurationPath,1);
      String expressionPath=configurationPath + File.separator + ExpressionPersistance.EXPRESSION_FOLDER_NAME;
      expressionPath=getValidFolderPath(expressionPath,1);
      File expressionFolder=new File(expressionPath);
      path=expressionFolder.getAbsolutePath();
    }
    int index=path.indexOf(EXPRESSION_FOLDER_NAME) + EXPRESSION_FOLDER_NAME.length();
    rootFolderPath=path.substring(0,index);
  }
  return rootFolderPath;
}","/** 
 * yzhang Comment method ""getExpressionStoreFolder"".
 * @return
 */
private String getExpressionStoreFolderPath(){
  if (rootFolderPath == null) {
    if (path == null) {
      IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
      RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
      Project project=repositoryContext.getProject();
      IProject p=root.getProject(project.getTechnicalLabel());
      String projectPath=p.getLocation().toPortableString() + File.separator + RepositoryConstants.TEMP_DIRECTORY;
      String configurationPath=projectPath + File.separator + ExpressionPersistance.CONFIGURATION_FOLDER_NAME;
      configurationPath=getValidFolderPath(configurationPath,1);
      String expressionPath=configurationPath + File.separator + ExpressionPersistance.EXPRESSION_FOLDER_NAME;
      expressionPath=getValidFolderPath(expressionPath,1);
      File expressionFolder=new File(expressionPath);
      path=expressionFolder.getAbsolutePath();
    }
    int index=path.indexOf(EXPRESSION_FOLDER_NAME) + EXPRESSION_FOLDER_NAME.length();
    rootFolderPath=path.substring(0,index);
  }
  return rootFolderPath;
}",0.9777411376751854
127295,"@Override protected Control createDialogArea(Composite parent){
  ((GridData)parent.getLayoutData()).minimumWidth=600;
  ((GridData)parent.getLayoutData()).heightHint=500;
  GridData data=new GridData(GridData.FILL_BOTH);
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginTop=10;
  layout.marginLeft=5;
  layout.marginRight=5;
  container.setLayout(layout);
  container.setLayoutData(data);
  data=new GridData(GridData.FILL_HORIZONTAL);
  Label subTitleLabel=new Label(container,SWT.NONE);
  String desc=Messages.getString(""String_Node_Str"",name);
  subTitleLabel.setText(desc);
  subTitleLabel.setLayoutData(data);
  clufText=new Browser(container,SWT.MULTI | SWT.WRAP | SWT.LEFT| SWT.BORDER);
  clufText.setBackground(new Color(null,255,255,255));
  if (licenseUrl != null) {
    clufText.setUrl(licenseUrl);
  }
 else {
    clufText.setText(desc);
  }
  data=new GridData(GridData.FILL_BOTH);
  clufText.setLayoutData(data);
  return parent;
}","@Override protected Control createDialogArea(Composite parent){
  ((GridData)parent.getLayoutData()).minimumWidth=600;
  ((GridData)parent.getLayoutData()).heightHint=500;
  GridData data=new GridData(GridData.FILL_BOTH);
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginTop=10;
  layout.marginLeft=5;
  layout.marginRight=5;
  container.setLayout(layout);
  container.setLayoutData(data);
  data=new GridData(GridData.FILL_HORIZONTAL);
  Label subTitleLabel=new Label(container,SWT.NONE);
  String desc=Messages.getString(""String_Node_Str"",name);
  subTitleLabel.setText(desc);
  subTitleLabel.setLayoutData(data);
  Control culfTextControl=null;
  if (TalendPropertiesUtil.isEnabledUseBrowser()) {
    clufTextBrowser=new Browser(container,SWT.MULTI | SWT.WRAP | SWT.LEFT| SWT.BORDER);
    culfTextControl=clufTextBrowser;
    if (licenseUrl != null) {
      clufTextBrowser.setUrl(licenseUrl);
    }
 else {
      clufTextBrowser.setText(desc);
    }
  }
 else {
    clufText=new Text(container,SWT.MULTI | SWT.BORDER | SWT.READ_ONLY| SWT.V_SCROLL| SWT.H_SCROLL);
    culfTextControl=clufText;
    String licenseContent=RemoteModulesHelper.getInstance().getLicenseContentByUrl(licenseUrl);
    if (licenseUrl != null) {
      if (licenseContent != null) {
        clufText.setText(licenseContent);
      }
 else {
        clufText.setText(Messages.getString(""String_Node_Str""));
      }
    }
 else {
      clufText.setText(desc);
    }
  }
  if (culfTextControl != null) {
    culfTextControl.setBackground(new Color(null,255,255,255));
    culfTextControl.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  return parent;
}",0.6273199703043801
127296,"private void createLicenseContentSection(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginWidth=0;
  layout.marginHeight=0;
  composite.setLayout(layout);
  GridData gd=new GridData(GridData.FILL_BOTH);
  composite.setLayoutData(gd);
  Label label=new Label(composite,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  licenseTextBox=new Browser(composite,SWT.MULTI | SWT.BORDER | SWT.WRAP| SWT.READ_ONLY);
  licenseTextBox.setBackground(licenseTextBox.getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
  initializeDialogUnits(licenseTextBox);
  gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  licenseTextBox.setLayoutData(gd);
  createLicenseAcceptSection(composite);
  setControl(composite);
}","private void createLicenseContentSection(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginWidth=0;
  layout.marginHeight=0;
  composite.setLayout(layout);
  GridData gd=new GridData(GridData.FILL_BOTH);
  composite.setLayoutData(gd);
  Label label=new Label(composite,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  if (TalendPropertiesUtil.isEnabledUseBrowser()) {
    licenseTextBox=new Browser(composite,SWT.MULTI | SWT.BORDER | SWT.WRAP| SWT.READ_ONLY);
    licenseTextBox.setBackground(licenseTextBox.getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
    initializeDialogUnits(licenseTextBox);
    gd=new GridData(SWT.FILL,SWT.FILL,true,true);
    licenseTextBox.setLayoutData(gd);
  }
 else {
    licenseText=new Text(composite,SWT.MULTI | SWT.BORDER | SWT.READ_ONLY| SWT.V_SCROLL| SWT.H_SCROLL);
    initializeDialogUnits(licenseText);
    licenseText.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  createLicenseAcceptSection(composite);
  setControl(composite);
}",0.7432216905901117
127297,"private void handleSelectionChanged(){
  Element selected=getSelectedElement();
  if (selected != null) {
    License license=null;
    if (selected instanceof License) {
      license=(License)selected;
    }
 else     if (selected instanceof Module) {
      Module module=(Module)selected;
      Element parent=module.getParent();
      if (parent instanceof License) {
        license=(License)module.getParent();
      }
    }
    if (license != null) {
      String type=license.getType();
      Boolean licenseStatus=licenseTypeToStatus.get(type);
      boolean isLicenseAccepted=licenseStatus != null && licenseStatus;
      acceptButton.setSelection(isLicenseAccepted);
      declineButton.setSelection(!isLicenseAccepted);
      String url=license.getUrl();
      if (url != null) {
        licenseTextBox.setUrl(url);
      }
 else {
        licenseTextBox.setText(Messages.getString(""String_Node_Str""));
      }
    }
  }
}","private void handleSelectionChanged(){
  Element selected=getSelectedElement();
  if (selected != null) {
    License license=null;
    if (selected instanceof License) {
      license=(License)selected;
    }
 else     if (selected instanceof Module) {
      Module module=(Module)selected;
      Element parent=module.getParent();
      if (parent instanceof License) {
        license=(License)module.getParent();
      }
    }
    if (license != null) {
      String type=license.getType();
      Boolean licenseStatus=licenseTypeToStatus.get(type);
      boolean isLicenseAccepted=licenseStatus != null && licenseStatus;
      acceptButton.setSelection(isLicenseAccepted);
      declineButton.setSelection(!isLicenseAccepted);
      String url=license.getUrl();
      if (TalendPropertiesUtil.isEnabledUseBrowser() && licenseTextBox != null) {
        if (url != null) {
          licenseTextBox.setUrl(url);
        }
 else {
          licenseTextBox.setText(Messages.getString(""String_Node_Str""));
        }
      }
 else       if (licenseText != null) {
        String licenseContent=RemoteModulesHelper.getInstance().getLicenseContentByUrl(url);
        if (licenseContent != null) {
          licenseText.setText(licenseContent);
        }
 else {
          licenseText.setText(Messages.getString(""String_Node_Str""));
        }
      }
    }
  }
}",0.8127455259711917
127298,"/** 
 * return the folder where to find the missing libraries
 * @param context
 */
protected File getLibJavaFolderFile(BundleContext context) throws URISyntaxException {
  String libFolderSysProp=System.getProperty(ORG_TALEND_EXTERNAL_LIB_FOLDER_SYS_PROP);
  if (libFolderSysProp != null) {
    return new File(libFolderSysProp);
  }
 else {
    Location installLocation=getInstallLocation(context);
    File installFolder=new File(installLocation.getURL().toURI());
    return new File(installFolder,System.getProperty(""String_Node_Str"",LIB_JAVA_SUB_FOLDER));
  }
}","/** 
 * return the folder where to find the missing libraries
 * @param context
 */
protected File getLibJavaFolderFile(BundleContext context) throws URISyntaxException {
  String libFolderSysProp=System.getProperty(ORG_TALEND_EXTERNAL_LIB_FOLDER_SYS_PROP);
  if (libFolderSysProp != null) {
    return new File(libFolderSysProp);
  }
 else {
    Location installLocation=getInstallLocation(context);
    File installFolder=URIUtil.toFile(URIUtil.toURI(installLocation.getURL()));
    return new File(installFolder,System.getProperty(""String_Node_Str"",LIB_JAVA_SUB_FOLDER));
  }
}",0.932868352223191
127299,"/** 
 * look for all the required modules for a given bundle, and let the user decide to download it. this method is blocked until the dialog box is closed.
 * @param jarMissingEvent, must never be null
 */
protected void showMissingModuleDialog(final JarMissingEvent jarMissingEvent){
  if (allModulesNeededExtensionsForPlugin == null) {
    this.allModulesNeededExtensionsForPlugin=ModulesNeededProvider.getAllModulesNeededExtensionsForPlugin();
  }
  List<ModuleNeeded> requiredModulesForBundle=ModulesNeededProvider.filterRequiredModulesForBundle(jarMissingEvent.getBundleSymbolicName(),allModulesNeededExtensionsForPlugin);
  final List<String> requiredJars=new ArrayList<String>(requiredModulesForBundle.size());
  for (  ModuleNeeded module : requiredModulesForBundle) {
    String moduleName=module.getModuleName();
    if (!new File(jarMissingEvent.getExpectedLibFolder(),moduleName).exists()) {
      requiredJars.add(moduleName);
    }
  }
  if (!requiredJars.isEmpty()) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ExternalModulesInstallDialogWithProgress dialog=new ExternalModulesInstallDialogWithProgress(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),SWT.APPLICATION_MODAL);
        dialog.showDialog(true,requiredJars.toArray(new String[requiredJars.size()]));
      }
    }
);
  }
}","/** 
 * look for all the required modules for a given bundle, and let the user decide to download it. this method is blocked until the dialog box is closed.
 * @param jarMissingEvent, must never be null
 */
protected void showMissingModuleDialog(final JarMissingEvent jarMissingEvent){
  if (allModulesNeededExtensionsForPlugin == null) {
    this.allModulesNeededExtensionsForPlugin=ModulesNeededProvider.getAllModulesNeededExtensionsForPlugin();
  }
  List<ModuleNeeded> requiredModulesForBundle=ModulesNeededProvider.filterRequiredModulesForBundle(jarMissingEvent.getBundleSymbolicName(),allModulesNeededExtensionsForPlugin);
  final List<String> requiredJars=new ArrayList<String>(requiredModulesForBundle.size());
  for (  ModuleNeeded module : requiredModulesForBundle) {
    String moduleName=module.getModuleName();
    if (!new File(jarMissingEvent.getExpectedLibFolder(),moduleName).exists()) {
      try {
        if (librariesService != null && (librariesService.getLibraryStatus(moduleName) == ELibraryInstallStatus.INSTALLED)) {
          List<ModuleNeeded> allModuleNeeded=ModulesNeededProvider.getModulesNeededForName(moduleName);
          for (          ModuleNeeded sameModule : allModuleNeeded) {
            String moduleLocation=sameModule.getModuleLocaion();
            if (sameModule.getStatus() == ELibraryInstallStatus.INSTALLED && moduleLocation != null && !moduleLocation.isEmpty()) {
              URI uri=new URI(moduleLocation);
              URL url=FileLocator.toFileURL(uri.toURL());
              if (""String_Node_Str"".equals(url.getProtocol())) {
                libraryManagerService.deploy(url.toURI(),null);
              }
              break;
            }
          }
        }
      }
 catch (      BusinessException e) {
        log.warn(""String_Node_Str"" + moduleName,e);
      }
catch (      URISyntaxException e) {
        log.warn(""String_Node_Str"" + moduleName,e);
      }
catch (      IOException e) {
        log.warn(""String_Node_Str"" + moduleName,e);
      }
    }
    if (!new File(jarMissingEvent.getExpectedLibFolder(),moduleName).exists()) {
      requiredJars.add(moduleName);
    }
  }
  if (!requiredJars.isEmpty()) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ExternalModulesInstallDialogWithProgress dialog=new ExternalModulesInstallDialogWithProgress(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),SWT.APPLICATION_MODAL);
        dialog.showDialog(true,requiredJars.toArray(new String[requiredJars.size()]));
      }
    }
);
  }
}",0.7071796128399902
127300,"@Override public void earlyStartup(){
  setupMissingJarLoadingObserver();
}","@Override public void earlyStartup(){
  setupMissingJarLoadingObserver();
  librariesService=LibManagerUiPlugin.getDefault().getLibrariesService();
  libraryManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
}",0.4297994269340974
127301,"/** 
 * DOC sgandon Comment method ""createUnavailableModuleToInstall"".
 * @param unavailableModuleName
 * @param contextMap
 * @return
 */
private ModuleToInstall createUnavailableModuleToInstall(String unavailableModuleName,Map<String,List<ModuleNeeded>> contextMap){
  ModuleToInstall m=new ModuleToInstall();
  m.setName(unavailableModuleName);
  setContext(m,contextMap);
  m.setDescription(getFirstDescription(contextMap.get(unavailableModuleName)));
  return m;
}","/** 
 * DOC sgandon Comment method ""createUnavailableModuleToInstall"".
 * @param unavailableModuleName
 * @param contextMap, may be null
 * @return
 */
private ModuleToInstall createUnavailableModuleToInstall(String unavailableModuleName,Map<String,List<ModuleNeeded>> contextMap){
  ModuleToInstall m=new ModuleToInstall();
  m.setName(unavailableModuleName);
  setContext(m,contextMap);
  if (contextMap != null) {
    m.setDescription(getFirstDescription(contextMap.get(unavailableModuleName)));
  }
  return m;
}",0.9522842639593908
127302,"@Override protected Object openDialogBox(Control cellEditorWindow){
  String value=(String)getValue();
  ModuleListDialog dialog=new ModuleListDialog(cellEditorWindow.getShell(),value);
  if (dialog.open() == Window.OK) {
    String selecteModule=dialog.getSelecteModule();
    if (selecteModule != null && (value == null || !value.equals(selecteModule))) {
      int index=0;
      if (getTableViewer() != null) {
        index=getTableViewer().getTable().getSelectionIndex();
      }
      executeCommand(new ModelChangeCommand(tableParam,param.getName(),selecteModule,index));
      if (getTableViewer() != null) {
        getTableViewer().refresh(true);
      }
      return selecteModule;
    }
  }
  return null;
}","@Override protected Object openDialogBox(Control cellEditorWindow){
  String value=(String)getValue();
  ModuleListDialog dialog=new ModuleListDialog(cellEditorWindow.getShell(),value);
  if (dialog.open() == Window.OK) {
    String selecteModule=dialog.getSelecteModule();
    if (selecteModule != null && (value == null || !value.equals(selecteModule))) {
      int index=0;
      if (getTableViewer() != null) {
        index=getTableViewer().getTable().getSelectionIndex();
      }
      IElement element=this.tableParam.getElement();
      if (element != null) {
        IElementParameter updateComponentsParam=element.getElementParameter(""String_Node_Str"");
        if (updateComponentsParam != null) {
          updateComponentsParam.setValue(Boolean.TRUE);
        }
      }
      executeCommand(new ModelChangeCommand(tableParam,param.getName(),selecteModule,index));
      if (getTableViewer() != null) {
        getTableViewer().refresh(true);
      }
      return selecteModule;
    }
  }
  return null;
}",0.8290155440414507
127303,"public static List<MetadataColumn> guessSchemaFromArray(final CsvArray csvArray,boolean isFirstLineCaption,MetadataEmfTableEditorView tableEditorView,int header){
  List<MetadataColumn> columns=new ArrayList<MetadataColumn>();
  if (csvArray == null) {
    return columns;
  }
 else {
    List<String[]> csvRows=csvArray.getRows();
    if (csvRows.isEmpty()) {
      return columns;
    }
    String[] fields=csvRows.get(0);
    Integer numberOfCol=getRightFirstRow(csvRows);
    int firstRowToExtractMetadata=header;
    String[] label=new String[numberOfCol.intValue()];
    for (int i=0; i < numberOfCol; i++) {
      label[i]=DEFAULT_LABEL + i;
      if (isFirstLineCaption) {
        if (numberOfCol <= fields.length) {
          if (fields[i] != null && !(""String_Node_Str"").equals(fields[i])) {
            label[i]=fields[i].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
            label[i]=MetadataToolHelper.validateColumnName(label[i],i);
          }
 else {
            label[i]=DEFAULT_LABEL + i;
          }
        }
 else {
          if (i < fields.length) {
            if (fields[i] != null && !(""String_Node_Str"").equals(fields[i])) {
              label[i]=fields[i].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              label[i]=DEFAULT_LABEL + ""String_Node_Str"" + i;
            }
          }
 else {
            label[i]=DEFAULT_LABEL + ""String_Node_Str"" + i;
          }
        }
      }
    }
    ShadowProcessPreview.fixDuplicateNames(label);
    for (int i=0; i < numberOfCol.intValue(); i++) {
      String globalType=null;
      int lengthValue=0;
      int precisionValue=0;
      int current=firstRowToExtractMetadata;
      while (globalType == null) {
        if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
          if (current == csvRows.size()) {
            globalType=""String_Node_Str"";
            continue;
          }
 else           if (i >= csvRows.get(current).length) {
            globalType=""String_Node_Str"";
          }
 else {
            globalType=JavaDataTypeHelper.getTalendTypeOfValue(csvRows.get(current)[i]);
            current++;
          }
        }
 else {
          if (current == csvRows.size()) {
            globalType=""String_Node_Str"";
            continue;
          }
          if (i >= csvRows.get(current).length) {
            globalType=""String_Node_Str"";
          }
 else {
            globalType=PerlDataTypeHelper.getTalendTypeOfValue(csvRows.get(current)[i]);
            current++;
          }
        }
      }
      for (int f=firstRowToExtractMetadata; f < csvRows.size(); f++) {
        fields=csvRows.get(f);
        if (fields.length > i) {
          String value=fields[i];
          if (!value.equals(""String_Node_Str"")) {
            if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
              if (!JavaDataTypeHelper.getTalendTypeOfValue(value).equals(globalType)) {
                globalType=JavaDataTypeHelper.getCommonType(globalType,JavaDataTypeHelper.getTalendTypeOfValue(value));
              }
            }
 else {
              if (!PerlDataTypeHelper.getTalendTypeOfValue(value).equals(globalType)) {
                globalType=PerlDataTypeHelper.getCommonType(globalType,PerlDataTypeHelper.getTalendTypeOfValue(value));
              }
            }
            if (lengthValue < value.length()) {
              lengthValue=value.length();
            }
            int positionDecimal=0;
            if (value.indexOf(',') > -1) {
              positionDecimal=value.lastIndexOf(',');
              precisionValue=lengthValue - positionDecimal;
            }
 else             if (value.indexOf('.') > -1) {
              positionDecimal=value.lastIndexOf('.');
              precisionValue=lengthValue - positionDecimal;
            }
          }
 else {
            IPreferenceStore preferenceStore=null;
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreUIService.class)) {
              IDesignerCoreUIService designerCoreUiService=(IDesignerCoreUIService)GlobalServiceRegister.getDefault().getService(IDesignerCoreUIService.class);
              preferenceStore=designerCoreUiService.getPreferenceStore();
            }
            if (preferenceStore != null && preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE) != null && !preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE).equals(""String_Node_Str"")) {
              globalType=preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE);
              if (preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH) != null && !preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
                lengthValue=Integer.parseInt(preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH));
              }
            }
          }
        }
      }
      if (csvRows.size() <= 1 && firstRowToExtractMetadata == 1) {
        lengthValue=255;
      }
      MetadataColumn metadataColumn=ColumnHelper.createTdColumn(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(label[i]));
      metadataColumn.setPattern(""String_Node_Str"");
      String talendType=null;
      if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
        talendType=globalType;
        if (globalType.equals(JavaTypesManager.FLOAT.getId()) || globalType.equals(JavaTypesManager.DOUBLE.getId())) {
          metadataColumn.setPrecision(precisionValue);
        }
 else {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        talendType=PerlTypesManager.getNewTypeName(MetadataTalendType.loadTalendType(globalType,""String_Node_Str"",false));
        if (globalType.equals(""String_Node_Str"") || globalType.equals(""String_Node_Str"")) {
          metadataColumn.setPrecision(precisionValue);
        }
 else {
          metadataColumn.setPrecision(0);
        }
      }
      metadataColumn.setTalendType(talendType);
      metadataColumn.setLength(lengthValue);
      columns.add(i,metadataColumn);
    }
  }
  return columns;
}","private static List<MetadataColumn> guessSchemaFromArray(final CsvArray csvArray,boolean isFirstLineCaption,MetadataEmfTableEditorView tableEditorView,int header,boolean useTdColumn){
  List<MetadataColumn> columns=new ArrayList<MetadataColumn>();
  if (csvArray == null) {
    return columns;
  }
 else {
    List<String[]> csvRows=csvArray.getRows();
    if (csvRows.isEmpty()) {
      return columns;
    }
    String[] fields=csvRows.get(0);
    Integer numberOfCol=getRightFirstRow(csvRows);
    int firstRowToExtractMetadata=header;
    String[] label=new String[numberOfCol.intValue()];
    for (int i=0; i < numberOfCol; i++) {
      label[i]=DEFAULT_LABEL + i;
      if (isFirstLineCaption) {
        if (numberOfCol <= fields.length) {
          if (fields[i] != null && !(""String_Node_Str"").equals(fields[i])) {
            label[i]=fields[i].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
            label[i]=MetadataToolHelper.validateColumnName(label[i],i);
          }
 else {
            label[i]=DEFAULT_LABEL + i;
          }
        }
 else {
          if (i < fields.length) {
            if (fields[i] != null && !(""String_Node_Str"").equals(fields[i])) {
              label[i]=fields[i].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              label[i]=DEFAULT_LABEL + ""String_Node_Str"" + i;
            }
          }
 else {
            label[i]=DEFAULT_LABEL + ""String_Node_Str"" + i;
          }
        }
      }
    }
    ShadowProcessPreview.fixDuplicateNames(label);
    for (int i=0; i < numberOfCol.intValue(); i++) {
      String globalType=null;
      int lengthValue=0;
      int precisionValue=0;
      int current=firstRowToExtractMetadata;
      while (globalType == null) {
        if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
          if (current == csvRows.size()) {
            globalType=""String_Node_Str"";
            continue;
          }
 else           if (i >= csvRows.get(current).length) {
            globalType=""String_Node_Str"";
          }
 else {
            globalType=JavaDataTypeHelper.getTalendTypeOfValue(csvRows.get(current)[i]);
            current++;
          }
        }
 else {
          if (current == csvRows.size()) {
            globalType=""String_Node_Str"";
            continue;
          }
          if (i >= csvRows.get(current).length) {
            globalType=""String_Node_Str"";
          }
 else {
            globalType=PerlDataTypeHelper.getTalendTypeOfValue(csvRows.get(current)[i]);
            current++;
          }
        }
      }
      for (int f=firstRowToExtractMetadata; f < csvRows.size(); f++) {
        fields=csvRows.get(f);
        if (fields.length > i) {
          String value=fields[i];
          if (!value.equals(""String_Node_Str"")) {
            if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
              if (!JavaDataTypeHelper.getTalendTypeOfValue(value).equals(globalType)) {
                globalType=JavaDataTypeHelper.getCommonType(globalType,JavaDataTypeHelper.getTalendTypeOfValue(value));
              }
            }
 else {
              if (!PerlDataTypeHelper.getTalendTypeOfValue(value).equals(globalType)) {
                globalType=PerlDataTypeHelper.getCommonType(globalType,PerlDataTypeHelper.getTalendTypeOfValue(value));
              }
            }
            if (lengthValue < value.length()) {
              lengthValue=value.length();
            }
            int positionDecimal=0;
            if (value.indexOf(',') > -1) {
              positionDecimal=value.lastIndexOf(',');
              precisionValue=lengthValue - positionDecimal;
            }
 else             if (value.indexOf('.') > -1) {
              positionDecimal=value.lastIndexOf('.');
              precisionValue=lengthValue - positionDecimal;
            }
          }
 else {
            IPreferenceStore preferenceStore=null;
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreUIService.class)) {
              IDesignerCoreUIService designerCoreUiService=(IDesignerCoreUIService)GlobalServiceRegister.getDefault().getService(IDesignerCoreUIService.class);
              preferenceStore=designerCoreUiService.getPreferenceStore();
            }
            if (preferenceStore != null && preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE) != null && !preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE).equals(""String_Node_Str"")) {
              globalType=preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE);
              if (preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH) != null && !preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
                lengthValue=Integer.parseInt(preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH));
              }
            }
          }
        }
      }
      if (csvRows.size() <= 1 && firstRowToExtractMetadata == 1) {
        lengthValue=255;
      }
      MetadataColumn metadataColumn;
      if (useTdColumn) {
        metadataColumn=ColumnHelper.createTdColumn(label[i]);
      }
 else {
        metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      }
      metadataColumn.setPattern(""String_Node_Str"");
      String talendType=null;
      if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
        talendType=globalType;
        if (globalType.equals(JavaTypesManager.FLOAT.getId()) || globalType.equals(JavaTypesManager.DOUBLE.getId())) {
          metadataColumn.setPrecision(precisionValue);
        }
 else {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        talendType=PerlTypesManager.getNewTypeName(MetadataTalendType.loadTalendType(globalType,""String_Node_Str"",false));
        if (globalType.equals(""String_Node_Str"") || globalType.equals(""String_Node_Str"")) {
          metadataColumn.setPrecision(precisionValue);
        }
 else {
          metadataColumn.setPrecision(0);
        }
      }
      metadataColumn.setTalendType(talendType);
      metadataColumn.setLength(lengthValue);
      metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(label[i]));
      columns.add(i,metadataColumn);
    }
  }
  return columns;
}",0.9732228243544788
127304,"private void pressGuessSchemaButton(){
  IDesignerCoreService designerService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
  String tableName=tableCombo.getText();
  CsvArray array;
  try {
    if (tableCombo.isEnabled() && tableCombo.getCombo().indexOf(tableName) == -1) {
      MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      return;
    }
    array=designerService.convertNode(connectionItem,getIMetadataConnection(),tableName);
    tableEditorView.getMetadataEditor().removeAll();
    List<MetadataColumn> columns=new ArrayList<MetadataColumn>();
    columns=GuessSchemaUtil.guessSchemaFromArray(array,true,tableEditorView,5);
    List<String[]> schemaContent=array.getRows();
    if (schemaContent.size() <= 0) {
      return;
    }
    int numbOfColumn=schemaContent.get(0).length;
    for (int i=1; i <= numbOfColumn; i++) {
      MetadataColumn oneColum=columns.get(i - 1);
      String labelName=(schemaContent.get(0))[i - 1];
      if (!""String_Node_Str"".equals(labelName)) {
        oneColum.setOriginalField(labelName);
      }
      if (!""String_Node_Str"".equals(schemaContent.get(2)[i - 1])) {
        oneColum.setPrecision(Integer.parseInt(schemaContent.get(2)[i - 1]));
      }
      if (!""String_Node_Str"".equals(schemaContent.get(3)[i - 1])) {
        oneColum.setLength(Integer.parseInt(schemaContent.get(3)[i - 1]));
      }
      if (!""String_Node_Str"".equals(schemaContent.get(4)[i - 1])) {
        oneColum.setSourceType(schemaContent.get(4)[i - 1]);
        String talendType=MetadataTalendType.getMappingTypeRetriever(tableEditorView.getCurrentDbms()).getDefaultSelectedTalendType(schemaContent.get(4)[i - 1]);
        oneColum.setTalendType(talendType);
      }
      if (!""String_Node_Str"".equals(schemaContent.get(1)[i - 1])) {
        oneColum.setNullable((schemaContent.get(1))[i - 1].equals(Boolean.TRUE.toString()) ? true : false);
      }
    }
    tableEditorView.getMetadataEditor().addAll(columns);
  }
 catch (  ProcessorException e) {
    ExceptionHandler.process(e);
  }
}","private void pressGuessSchemaButton(){
  IDesignerCoreService designerService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
  String tableName=tableCombo.getText();
  CsvArray array;
  try {
    if (tableCombo.isEnabled() && tableCombo.getCombo().indexOf(tableName) == -1) {
      MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      return;
    }
    array=designerService.convertNode(connectionItem,getIMetadataConnection(),tableName);
    tableEditorView.getMetadataEditor().removeAll();
    List<MetadataColumn> columns=new ArrayList<MetadataColumn>();
    columns=GuessSchemaUtil.guessDbSchemaFromArray(array,true,tableEditorView,5);
    List<String[]> schemaContent=array.getRows();
    if (schemaContent.size() <= 0) {
      return;
    }
    int numbOfColumn=schemaContent.get(0).length;
    for (int i=1; i <= numbOfColumn; i++) {
      MetadataColumn oneColum=columns.get(i - 1);
      String labelName=(schemaContent.get(0))[i - 1];
      if (!""String_Node_Str"".equals(labelName)) {
        oneColum.setOriginalField(labelName);
      }
      if (!""String_Node_Str"".equals(schemaContent.get(2)[i - 1])) {
        oneColum.setPrecision(Integer.parseInt(schemaContent.get(2)[i - 1]));
      }
      if (!""String_Node_Str"".equals(schemaContent.get(3)[i - 1])) {
        oneColum.setLength(Integer.parseInt(schemaContent.get(3)[i - 1]));
      }
      if (!""String_Node_Str"".equals(schemaContent.get(4)[i - 1])) {
        oneColum.setSourceType(schemaContent.get(4)[i - 1]);
        String talendType=MetadataTalendType.getMappingTypeRetriever(tableEditorView.getCurrentDbms()).getDefaultSelectedTalendType(schemaContent.get(4)[i - 1]);
        oneColum.setTalendType(talendType);
      }
      if (!""String_Node_Str"".equals(schemaContent.get(1)[i - 1])) {
        oneColum.setNullable((schemaContent.get(1))[i - 1].equals(Boolean.TRUE.toString()) ? true : false);
      }
    }
    tableEditorView.getMetadataEditor().addAll(columns);
  }
 catch (  ProcessorException e) {
    ExceptionHandler.process(e);
  }
}",0.9995316159250586
127305,"public static List<MetadataColumn> guessSchemaFromArray(final CsvArray csvArray,boolean isFirstLineCaption,MetadataEmfTableEditorView tableEditorView,int header){
  List<MetadataColumn> columns=new ArrayList<MetadataColumn>();
  if (csvArray == null) {
    return columns;
  }
 else {
    List<String[]> csvRows=csvArray.getRows();
    if (csvRows.isEmpty()) {
      return columns;
    }
    String[] fields=csvRows.get(0);
    Integer numberOfCol=getRightFirstRow(csvRows);
    int firstRowToExtractMetadata=header;
    String[] label=new String[numberOfCol.intValue()];
    for (int i=0; i < numberOfCol; i++) {
      label[i]=DEFAULT_LABEL + i;
      if (isFirstLineCaption) {
        if (numberOfCol <= fields.length) {
          if (fields[i] != null && !(""String_Node_Str"").equals(fields[i])) {
            label[i]=fields[i].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
            label[i]=MetadataToolHelper.validateColumnName(label[i],i);
          }
 else {
            label[i]=DEFAULT_LABEL + i;
          }
        }
 else {
          if (i < fields.length) {
            if (fields[i] != null && !(""String_Node_Str"").equals(fields[i])) {
              label[i]=fields[i].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              label[i]=DEFAULT_LABEL + ""String_Node_Str"" + i;
            }
          }
 else {
            label[i]=DEFAULT_LABEL + ""String_Node_Str"" + i;
          }
        }
      }
    }
    ShadowProcessPreview.fixDuplicateNames(label);
    for (int i=0; i < numberOfCol.intValue(); i++) {
      String globalType=null;
      int lengthValue=0;
      int precisionValue=0;
      int current=firstRowToExtractMetadata;
      while (globalType == null) {
        if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
          if (current == csvRows.size()) {
            globalType=""String_Node_Str"";
            continue;
          }
 else           if (i >= csvRows.get(current).length) {
            globalType=""String_Node_Str"";
          }
 else {
            globalType=JavaDataTypeHelper.getTalendTypeOfValue(csvRows.get(current)[i]);
            current++;
          }
        }
 else {
          if (current == csvRows.size()) {
            globalType=""String_Node_Str"";
            continue;
          }
          if (i >= csvRows.get(current).length) {
            globalType=""String_Node_Str"";
          }
 else {
            globalType=PerlDataTypeHelper.getTalendTypeOfValue(csvRows.get(current)[i]);
            current++;
          }
        }
      }
      for (int f=firstRowToExtractMetadata; f < csvRows.size(); f++) {
        fields=csvRows.get(f);
        if (fields.length > i) {
          String value=fields[i];
          if (!value.equals(""String_Node_Str"")) {
            if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
              if (!JavaDataTypeHelper.getTalendTypeOfValue(value).equals(globalType)) {
                globalType=JavaDataTypeHelper.getCommonType(globalType,JavaDataTypeHelper.getTalendTypeOfValue(value));
              }
            }
 else {
              if (!PerlDataTypeHelper.getTalendTypeOfValue(value).equals(globalType)) {
                globalType=PerlDataTypeHelper.getCommonType(globalType,PerlDataTypeHelper.getTalendTypeOfValue(value));
              }
            }
            if (lengthValue < value.length()) {
              lengthValue=value.length();
            }
            int positionDecimal=0;
            if (value.indexOf(',') > -1) {
              positionDecimal=value.lastIndexOf(',');
              precisionValue=lengthValue - positionDecimal;
            }
 else             if (value.indexOf('.') > -1) {
              positionDecimal=value.lastIndexOf('.');
              precisionValue=lengthValue - positionDecimal;
            }
          }
 else {
            ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
            IPreferenceStore preferenceStore=coreService.getPreferenceStore();
            if (preferenceStore != null) {
              if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
                if (preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE) != null && !preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE).equals(""String_Node_Str"")) {
                  globalType=preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE);
                  if (preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH) != null && !preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
                    lengthValue=Integer.parseInt(preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH));
                  }
                }
              }
 else {
                if (preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_TYPE) != null && !preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_TYPE).equals(""String_Node_Str"")) {
                  globalType=preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_TYPE);
                  if (preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_LENGTH) != null && !preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
                    lengthValue=Integer.parseInt(preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_LENGTH));
                  }
                }
              }
            }
          }
        }
      }
      if (csvRows.size() <= 1 && firstRowToExtractMetadata == 1) {
        lengthValue=255;
      }
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setPattern(""String_Node_Str"");
      String talendType=null;
      if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
        talendType=globalType;
        if (globalType.equals(JavaTypesManager.FLOAT.getId()) || globalType.equals(JavaTypesManager.DOUBLE.getId())) {
          metadataColumn.setPrecision(precisionValue);
        }
 else {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        talendType=PerlTypesManager.getNewTypeName(MetadataTalendType.loadTalendType(globalType,""String_Node_Str"",false));
        if (globalType.equals(""String_Node_Str"") || globalType.equals(""String_Node_Str"")) {
          metadataColumn.setPrecision(precisionValue);
        }
 else {
          metadataColumn.setPrecision(0);
        }
      }
      metadataColumn.setTalendType(talendType);
      metadataColumn.setLength(lengthValue);
      metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(label[i]));
      columns.add(i,metadataColumn);
    }
  }
  return columns;
}","public static List<MetadataColumn> guessSchemaFromArray(final CsvArray csvArray,boolean isFirstLineCaption,MetadataEmfTableEditorView tableEditorView,int header){
  List<MetadataColumn> columns=new ArrayList<MetadataColumn>();
  if (csvArray == null) {
    return columns;
  }
 else {
    List<String[]> csvRows=csvArray.getRows();
    if (csvRows.isEmpty()) {
      return columns;
    }
    String[] fields=csvRows.get(0);
    Integer numberOfCol=getRightFirstRow(csvRows);
    int firstRowToExtractMetadata=header;
    String[] label=new String[numberOfCol.intValue()];
    for (int i=0; i < numberOfCol; i++) {
      label[i]=DEFAULT_LABEL + i;
      if (isFirstLineCaption) {
        if (numberOfCol <= fields.length) {
          if (fields[i] != null && !(""String_Node_Str"").equals(fields[i])) {
            label[i]=fields[i].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
            label[i]=MetadataToolHelper.validateColumnName(label[i],i);
          }
 else {
            label[i]=DEFAULT_LABEL + i;
          }
        }
 else {
          if (i < fields.length) {
            if (fields[i] != null && !(""String_Node_Str"").equals(fields[i])) {
              label[i]=fields[i].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              label[i]=DEFAULT_LABEL + ""String_Node_Str"" + i;
            }
          }
 else {
            label[i]=DEFAULT_LABEL + ""String_Node_Str"" + i;
          }
        }
      }
    }
    ShadowProcessPreview.fixDuplicateNames(label);
    for (int i=0; i < numberOfCol.intValue(); i++) {
      String globalType=null;
      int lengthValue=0;
      int precisionValue=0;
      int current=firstRowToExtractMetadata;
      while (globalType == null) {
        if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
          if (current == csvRows.size()) {
            globalType=""String_Node_Str"";
            continue;
          }
 else           if (i >= csvRows.get(current).length) {
            globalType=""String_Node_Str"";
          }
 else {
            globalType=JavaDataTypeHelper.getTalendTypeOfValue(csvRows.get(current)[i]);
            current++;
          }
        }
 else {
          if (current == csvRows.size()) {
            globalType=""String_Node_Str"";
            continue;
          }
          if (i >= csvRows.get(current).length) {
            globalType=""String_Node_Str"";
          }
 else {
            globalType=PerlDataTypeHelper.getTalendTypeOfValue(csvRows.get(current)[i]);
            current++;
          }
        }
      }
      for (int f=firstRowToExtractMetadata; f < csvRows.size(); f++) {
        fields=csvRows.get(f);
        if (fields.length > i) {
          String value=fields[i];
          if (!value.equals(""String_Node_Str"")) {
            if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
              if (!JavaDataTypeHelper.getTalendTypeOfValue(value).equals(globalType)) {
                globalType=JavaDataTypeHelper.getCommonType(globalType,JavaDataTypeHelper.getTalendTypeOfValue(value));
              }
            }
 else {
              if (!PerlDataTypeHelper.getTalendTypeOfValue(value).equals(globalType)) {
                globalType=PerlDataTypeHelper.getCommonType(globalType,PerlDataTypeHelper.getTalendTypeOfValue(value));
              }
            }
            if (lengthValue < value.length()) {
              lengthValue=value.length();
            }
            int positionDecimal=0;
            if (value.indexOf(',') > -1) {
              positionDecimal=value.lastIndexOf(',');
              precisionValue=lengthValue - positionDecimal;
            }
 else             if (value.indexOf('.') > -1) {
              positionDecimal=value.lastIndexOf('.');
              precisionValue=lengthValue - positionDecimal;
            }
          }
 else {
            ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
            IPreferenceStore preferenceStore=coreService.getPreferenceStore();
            if (preferenceStore != null) {
              if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
                if (preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE) != null && !preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE).equals(""String_Node_Str"")) {
                  globalType=preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE);
                  if (preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH) != null && !preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
                    lengthValue=Integer.parseInt(preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH));
                  }
                }
              }
 else {
                if (preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_TYPE) != null && !preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_TYPE).equals(""String_Node_Str"")) {
                  globalType=preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_TYPE);
                  if (preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_LENGTH) != null && !preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
                    lengthValue=Integer.parseInt(preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_LENGTH));
                  }
                }
              }
            }
          }
        }
      }
      if (csvRows.size() <= 1 && firstRowToExtractMetadata == 1) {
        lengthValue=255;
      }
      MetadataColumn metadataColumn=ColumnHelper.createTdColumn(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(label[i]));
      metadataColumn.setPattern(""String_Node_Str"");
      String talendType=null;
      if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
        talendType=globalType;
        if (globalType.equals(JavaTypesManager.FLOAT.getId()) || globalType.equals(JavaTypesManager.DOUBLE.getId())) {
          metadataColumn.setPrecision(precisionValue);
        }
 else {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        talendType=PerlTypesManager.getNewTypeName(MetadataTalendType.loadTalendType(globalType,""String_Node_Str"",false));
        if (globalType.equals(""String_Node_Str"") || globalType.equals(""String_Node_Str"")) {
          metadataColumn.setPrecision(precisionValue);
        }
 else {
          metadataColumn.setPrecision(0);
        }
      }
      metadataColumn.setTalendType(talendType);
      metadataColumn.setLength(lengthValue);
      columns.add(i,metadataColumn);
    }
  }
  return columns;
}",0.9822053675612602
127306,"private DatabaseMetaData createJtdsDatabaseMetaData(Connection conn){
  IService service=GlobalServiceRegister.getDefault().getService(IMetadataService.class);
  if (service == null) {
    try {
      return conn.getMetaData();
    }
 catch (    SQLException e) {
      log.error(e.toString());
      throw new RuntimeException(e);
    }
  }
  return ((IMetadataService)service).findCustomizedJTDSDBMetadata(conn);
}","private DatabaseMetaData createJtdsDatabaseMetaData(Connection conn){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IMetadataService.class)) {
    IService service=GlobalServiceRegister.getDefault().getService(IMetadataService.class);
    if (service != null) {
      return ((IMetadataService)service).findCustomizedJTDSDBMetadata(conn);
    }
  }
  try {
    return conn.getMetaData();
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
}",0.7086956521739131
127307,"/** 
 * this method checks if each required library is installed without any caching to be careful when using this. if monitor is canceled, then the return value will be empty
 * @return the list all extension implementing org.talend.core.runtime.librariesNeeded/libraryNeeded, that define abundle(plugin) required jar. they are defined using the ""context"" attribute that starts with the keyword ""plugin:"" and that also are not present in the java.lib library
 */
public static List<ModuleNeeded> getAllNoInstalledModulesNeededExtensionsForPlugin(IProgressMonitor monitor){
  List<ModuleNeeded> allPluginsRequiredModules=getAllModulesNeededExtensionsForPlugin();
  List<ModuleNeeded> allUninstalledModules=new ArrayList<ModuleNeeded>(allPluginsRequiredModules.size());
  SubMonitor subMonitor=SubMonitor.convert(monitor,allPluginsRequiredModules.size());
  String property=System.getProperty(TalendHookAdaptor.ORG_TALEND_EXTERNAL_LIB_FOLDER_SYS_PROP);
  if (property != null) {
    File javaLibFolder=new File(property);
    for (    ModuleNeeded module : allPluginsRequiredModules) {
      if (!new File(javaLibFolder,module.getModuleName()).exists()) {
        allUninstalledModules.add(module);
      }
      if (subMonitor.isCanceled()) {
        return Collections.EMPTY_LIST;
      }
      subMonitor.worked(1);
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return allUninstalledModules;
}","/** 
 * this method checks if each required library is installed without any caching to be careful when using this. if monitor is canceled, then the return value will be empty
 * @return the list all extension implementing org.talend.core.runtime.librariesNeeded/libraryNeeded, that define abundle(plugin) required jar. they are defined using the ""context"" attribute that starts with the keyword ""plugin:"" and that also are not present in the java.lib library
 */
public static List<ModuleNeeded> getAllNoInstalledModulesNeededExtensionsForPlugin(IProgressMonitor monitor){
  List<ModuleNeeded> allPluginsRequiredModules=getAllModulesNeededExtensionsForPlugin();
  List<ModuleNeeded> allUninstalledModules=new ArrayList<ModuleNeeded>(allPluginsRequiredModules.size());
  SubMonitor subMonitor=SubMonitor.convert(monitor,allPluginsRequiredModules.size());
  String property=System.getProperty(TalendHookAdaptor.ORG_TALEND_EXTERNAL_LIB_FOLDER_SYS_PROP);
  if (property != null) {
    File javaLibFolder=new File(property);
    for (    ModuleNeeded module : allPluginsRequiredModules) {
      if (!new File(javaLibFolder,module.getModuleName()).exists()) {
        allUninstalledModules.add(module);
      }
      if (subMonitor.isCanceled()) {
        return Collections.EMPTY_LIST;
      }
      subMonitor.worked(1);
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + TalendHookAdaptor.ORG_TALEND_EXTERNAL_LIB_FOLDER_SYS_PROP + ""String_Node_Str"");
  }
  return allUninstalledModules;
}",0.9727705922396188
127308,"/** 
 * DOC amaumont Comment method ""setTableViewerCreatorOptions"".
 * @param newTableViewerCreator
 */
protected void setTableViewerCreatorOptions(TableViewerCreator<B> newTableViewerCreator){
  newTableViewerCreator.setShowLineSelection(SHOW_ROW_SELECTION.FULL);
}","/** 
 * DOC amaumont Comment method ""setTableViewerCreatorOptions"".
 * @param newTableViewerCreator
 */
protected void setTableViewerCreatorOptions(TableViewerCreator<B> newTableViewerCreator){
  newTableViewerCreator.setShowLineSelection(SHOW_ROW_SELECTION.FULL);
  newTableViewerCreator.setLazyLoad(true);
}",0.925217391304348
127309,"public static List<MetadataColumn> guessSchemaFromArray(final CsvArray csvArray,boolean isFirstLineCaption,MetadataEmfTableEditorView tableEditorView,int header){
  List<MetadataColumn> columns=new ArrayList<MetadataColumn>();
  if (csvArray == null) {
    return columns;
  }
 else {
    List<String[]> csvRows=csvArray.getRows();
    if (csvRows.isEmpty()) {
      return columns;
    }
    String[] fields=csvRows.get(0);
    Integer numberOfCol=getRightFirstRow(csvRows);
    int firstRowToExtractMetadata=header;
    String[] label=new String[numberOfCol.intValue()];
    for (int i=0; i < numberOfCol; i++) {
      label[i]=DEFAULT_LABEL + i;
      if (isFirstLineCaption) {
        if (numberOfCol <= fields.length) {
          if (fields[i] != null && !(""String_Node_Str"").equals(fields[i])) {
            label[i]=fields[i].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
            label[i]=MetadataToolHelper.validateColumnName(label[i],i);
          }
 else {
            label[i]=DEFAULT_LABEL + i;
          }
        }
 else {
          if (i < fields.length) {
            if (fields[i] != null && !(""String_Node_Str"").equals(fields[i])) {
              label[i]=fields[i].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              label[i]=DEFAULT_LABEL + ""String_Node_Str"" + i;
            }
          }
 else {
            label[i]=DEFAULT_LABEL + ""String_Node_Str"" + i;
          }
        }
      }
    }
    ShadowProcessPreview.fixDuplicateNames(label);
    for (int i=0; i < numberOfCol.intValue(); i++) {
      String globalType=null;
      int lengthValue=0;
      int precisionValue=0;
      int current=firstRowToExtractMetadata;
      while (globalType == null) {
        if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
          if (current == csvRows.size()) {
            globalType=""String_Node_Str"";
            continue;
          }
 else           if (i >= csvRows.get(current).length) {
            globalType=""String_Node_Str"";
          }
 else {
            globalType=JavaDataTypeHelper.getTalendTypeOfValue(csvRows.get(current)[i]);
            current++;
          }
        }
 else {
          if (current == csvRows.size()) {
            globalType=""String_Node_Str"";
            continue;
          }
          if (i >= csvRows.get(current).length) {
            globalType=""String_Node_Str"";
          }
 else {
            globalType=PerlDataTypeHelper.getTalendTypeOfValue(csvRows.get(current)[i]);
            current++;
          }
        }
      }
      for (int f=firstRowToExtractMetadata; f < csvRows.size(); f++) {
        fields=csvRows.get(f);
        if (fields.length > i) {
          String value=fields[i];
          if (!value.equals(""String_Node_Str"")) {
            if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
              if (!JavaDataTypeHelper.getTalendTypeOfValue(value).equals(globalType)) {
                globalType=JavaDataTypeHelper.getCommonType(globalType,JavaDataTypeHelper.getTalendTypeOfValue(value));
              }
            }
 else {
              if (!PerlDataTypeHelper.getTalendTypeOfValue(value).equals(globalType)) {
                globalType=PerlDataTypeHelper.getCommonType(globalType,PerlDataTypeHelper.getTalendTypeOfValue(value));
              }
            }
            if (lengthValue < value.length()) {
              lengthValue=value.length();
            }
            int positionDecimal=0;
            if (value.indexOf(',') > -1) {
              positionDecimal=value.lastIndexOf(',');
              precisionValue=lengthValue - positionDecimal;
            }
 else             if (value.indexOf('.') > -1) {
              positionDecimal=value.lastIndexOf('.');
              precisionValue=lengthValue - positionDecimal;
            }
          }
 else {
            ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
            IPreferenceStore preferenceStore=coreService.getPreferenceStore();
            if (preferenceStore != null) {
              if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
                if (preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE) != null && !preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE).equals(""String_Node_Str"")) {
                  globalType=preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE);
                  if (preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH) != null && !preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
                    lengthValue=Integer.parseInt(preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH));
                  }
                }
              }
 else {
                if (preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_TYPE) != null && !preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_TYPE).equals(""String_Node_Str"")) {
                  globalType=preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_TYPE);
                  if (preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_LENGTH) != null && !preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
                    lengthValue=Integer.parseInt(preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_LENGTH));
                  }
                }
              }
            }
          }
        }
      }
      if (csvRows.size() <= 1 && firstRowToExtractMetadata == 1) {
        lengthValue=255;
      }
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setPattern(""String_Node_Str"");
      String talendType=null;
      if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
        talendType=globalType;
        if (globalType.equals(JavaTypesManager.FLOAT.getId()) || globalType.equals(JavaTypesManager.DOUBLE.getId())) {
          metadataColumn.setPrecision(precisionValue);
        }
 else {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        talendType=PerlTypesManager.getNewTypeName(MetadataTalendType.loadTalendType(globalType,""String_Node_Str"",false));
        if (globalType.equals(""String_Node_Str"") || globalType.equals(""String_Node_Str"")) {
          metadataColumn.setPrecision(precisionValue);
        }
 else {
          metadataColumn.setPrecision(0);
        }
      }
      metadataColumn.setTalendType(talendType);
      metadataColumn.setLength(lengthValue);
      metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(label[i]));
      columns.add(i,metadataColumn);
    }
  }
  return columns;
}","public static List<MetadataColumn> guessSchemaFromArray(final CsvArray csvArray,boolean isFirstLineCaption,MetadataEmfTableEditorView tableEditorView,int header){
  List<MetadataColumn> columns=new ArrayList<MetadataColumn>();
  if (csvArray == null) {
    return columns;
  }
 else {
    List<String[]> csvRows=csvArray.getRows();
    if (csvRows.isEmpty()) {
      return columns;
    }
    String[] fields=csvRows.get(0);
    Integer numberOfCol=getRightFirstRow(csvRows);
    int firstRowToExtractMetadata=header;
    String[] label=new String[numberOfCol.intValue()];
    for (int i=0; i < numberOfCol; i++) {
      label[i]=DEFAULT_LABEL + i;
      if (isFirstLineCaption) {
        if (numberOfCol <= fields.length) {
          if (fields[i] != null && !(""String_Node_Str"").equals(fields[i])) {
            label[i]=fields[i].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
            label[i]=MetadataToolHelper.validateColumnName(label[i],i);
          }
 else {
            label[i]=DEFAULT_LABEL + i;
          }
        }
 else {
          if (i < fields.length) {
            if (fields[i] != null && !(""String_Node_Str"").equals(fields[i])) {
              label[i]=fields[i].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              label[i]=DEFAULT_LABEL + ""String_Node_Str"" + i;
            }
          }
 else {
            label[i]=DEFAULT_LABEL + ""String_Node_Str"" + i;
          }
        }
      }
    }
    ShadowProcessPreview.fixDuplicateNames(label);
    for (int i=0; i < numberOfCol.intValue(); i++) {
      String globalType=null;
      int lengthValue=0;
      int precisionValue=0;
      int current=firstRowToExtractMetadata;
      while (globalType == null) {
        if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
          if (current == csvRows.size()) {
            globalType=""String_Node_Str"";
            continue;
          }
 else           if (i >= csvRows.get(current).length) {
            globalType=""String_Node_Str"";
          }
 else {
            globalType=JavaDataTypeHelper.getTalendTypeOfValue(csvRows.get(current)[i]);
            current++;
          }
        }
 else {
          if (current == csvRows.size()) {
            globalType=""String_Node_Str"";
            continue;
          }
          if (i >= csvRows.get(current).length) {
            globalType=""String_Node_Str"";
          }
 else {
            globalType=PerlDataTypeHelper.getTalendTypeOfValue(csvRows.get(current)[i]);
            current++;
          }
        }
      }
      for (int f=firstRowToExtractMetadata; f < csvRows.size(); f++) {
        fields=csvRows.get(f);
        if (fields.length > i) {
          String value=fields[i];
          if (!value.equals(""String_Node_Str"")) {
            if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
              if (!JavaDataTypeHelper.getTalendTypeOfValue(value).equals(globalType)) {
                globalType=JavaDataTypeHelper.getCommonType(globalType,JavaDataTypeHelper.getTalendTypeOfValue(value));
              }
            }
 else {
              if (!PerlDataTypeHelper.getTalendTypeOfValue(value).equals(globalType)) {
                globalType=PerlDataTypeHelper.getCommonType(globalType,PerlDataTypeHelper.getTalendTypeOfValue(value));
              }
            }
            if (lengthValue < value.length()) {
              lengthValue=value.length();
            }
            int positionDecimal=0;
            if (value.indexOf(',') > -1) {
              positionDecimal=value.lastIndexOf(',');
              precisionValue=lengthValue - positionDecimal;
            }
 else             if (value.indexOf('.') > -1) {
              positionDecimal=value.lastIndexOf('.');
              precisionValue=lengthValue - positionDecimal;
            }
          }
 else {
            ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
            IPreferenceStore preferenceStore=coreService.getPreferenceStore();
            if (preferenceStore != null) {
              if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
                if (preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE) != null && !preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE).equals(""String_Node_Str"")) {
                  globalType=preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE);
                  if (preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH) != null && !preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
                    lengthValue=Integer.parseInt(preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH));
                  }
                }
              }
 else {
                if (preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_TYPE) != null && !preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_TYPE).equals(""String_Node_Str"")) {
                  globalType=preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_TYPE);
                  if (preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_LENGTH) != null && !preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
                    lengthValue=Integer.parseInt(preferenceStore.getString(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_LENGTH));
                  }
                }
              }
            }
          }
        }
      }
      if (csvRows.size() <= 1 && firstRowToExtractMetadata == 1) {
        lengthValue=255;
      }
      MetadataColumn metadataColumn=ColumnHelper.createTdColumn(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(label[i]));
      metadataColumn.setPattern(""String_Node_Str"");
      String talendType=null;
      if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
        talendType=globalType;
        if (globalType.equals(JavaTypesManager.FLOAT.getId()) || globalType.equals(JavaTypesManager.DOUBLE.getId())) {
          metadataColumn.setPrecision(precisionValue);
        }
 else {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        talendType=PerlTypesManager.getNewTypeName(MetadataTalendType.loadTalendType(globalType,""String_Node_Str"",false));
        if (globalType.equals(""String_Node_Str"") || globalType.equals(""String_Node_Str"")) {
          metadataColumn.setPrecision(precisionValue);
        }
 else {
          metadataColumn.setPrecision(0);
        }
      }
      metadataColumn.setTalendType(talendType);
      metadataColumn.setLength(lengthValue);
      columns.add(i,metadataColumn);
    }
  }
  return columns;
}",0.9822053675612602
127310,"public static List<MetadataColumn> guessSchemaFromArray(final CsvArray csvArray,boolean isFirstLineCaption,MetadataEmfTableEditorView tableEditorView,int header){
  List<MetadataColumn> columns=new ArrayList<MetadataColumn>();
  if (csvArray == null) {
    return columns;
  }
 else {
    List<String[]> csvRows=csvArray.getRows();
    if (csvRows.isEmpty()) {
      return columns;
    }
    String[] fields=csvRows.get(0);
    Integer numberOfCol=getRightFirstRow(csvRows);
    int firstRowToExtractMetadata=header;
    String[] label=new String[numberOfCol.intValue()];
    for (int i=0; i < numberOfCol; i++) {
      label[i]=DEFAULT_LABEL + i;
      if (isFirstLineCaption) {
        if (numberOfCol <= fields.length) {
          if (fields[i] != null && !(""String_Node_Str"").equals(fields[i])) {
            label[i]=fields[i].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
            label[i]=MetadataToolHelper.validateColumnName(label[i],i);
          }
 else {
            label[i]=DEFAULT_LABEL + i;
          }
        }
 else {
          if (i < fields.length) {
            if (fields[i] != null && !(""String_Node_Str"").equals(fields[i])) {
              label[i]=fields[i].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              label[i]=DEFAULT_LABEL + ""String_Node_Str"" + i;
            }
          }
 else {
            label[i]=DEFAULT_LABEL + ""String_Node_Str"" + i;
          }
        }
      }
    }
    ShadowProcessPreview.fixDuplicateNames(label);
    for (int i=0; i < numberOfCol.intValue(); i++) {
      String globalType=null;
      int lengthValue=0;
      int precisionValue=0;
      int current=firstRowToExtractMetadata;
      while (globalType == null) {
        if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
          if (current == csvRows.size()) {
            globalType=""String_Node_Str"";
            continue;
          }
 else           if (i >= csvRows.get(current).length) {
            globalType=""String_Node_Str"";
          }
 else {
            globalType=JavaDataTypeHelper.getTalendTypeOfValue(csvRows.get(current)[i]);
            current++;
          }
        }
 else {
          if (current == csvRows.size()) {
            globalType=""String_Node_Str"";
            continue;
          }
          if (i >= csvRows.get(current).length) {
            globalType=""String_Node_Str"";
          }
 else {
            globalType=PerlDataTypeHelper.getTalendTypeOfValue(csvRows.get(current)[i]);
            current++;
          }
        }
      }
      for (int f=firstRowToExtractMetadata; f < csvRows.size(); f++) {
        fields=csvRows.get(f);
        if (fields.length > i) {
          String value=fields[i];
          if (!value.equals(""String_Node_Str"")) {
            if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
              if (!JavaDataTypeHelper.getTalendTypeOfValue(value).equals(globalType)) {
                globalType=JavaDataTypeHelper.getCommonType(globalType,JavaDataTypeHelper.getTalendTypeOfValue(value));
              }
            }
 else {
              if (!PerlDataTypeHelper.getTalendTypeOfValue(value).equals(globalType)) {
                globalType=PerlDataTypeHelper.getCommonType(globalType,PerlDataTypeHelper.getTalendTypeOfValue(value));
              }
            }
            if (lengthValue < value.length()) {
              lengthValue=value.length();
            }
            int positionDecimal=0;
            if (value.indexOf(',') > -1) {
              positionDecimal=value.lastIndexOf(',');
              precisionValue=lengthValue - positionDecimal;
            }
 else             if (value.indexOf('.') > -1) {
              positionDecimal=value.lastIndexOf('.');
              precisionValue=lengthValue - positionDecimal;
            }
          }
 else {
            IPreferenceStore preferenceStore=null;
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreUIService.class)) {
              IDesignerCoreUIService designerCoreUiService=(IDesignerCoreUIService)GlobalServiceRegister.getDefault().getService(IDesignerCoreUIService.class);
              preferenceStore=designerCoreUiService.getPreferenceStore();
            }
            if (preferenceStore != null && preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE) != null && !preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE).equals(""String_Node_Str"")) {
              globalType=preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE);
              if (preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH) != null && !preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
                lengthValue=Integer.parseInt(preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH));
              }
            }
          }
        }
      }
      if (csvRows.size() <= 1 && firstRowToExtractMetadata == 1) {
        lengthValue=255;
      }
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setPattern(""String_Node_Str"");
      String talendType=null;
      if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
        talendType=globalType;
        if (globalType.equals(JavaTypesManager.FLOAT.getId()) || globalType.equals(JavaTypesManager.DOUBLE.getId())) {
          metadataColumn.setPrecision(precisionValue);
        }
 else {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        talendType=PerlTypesManager.getNewTypeName(MetadataTalendType.loadTalendType(globalType,""String_Node_Str"",false));
        if (globalType.equals(""String_Node_Str"") || globalType.equals(""String_Node_Str"")) {
          metadataColumn.setPrecision(precisionValue);
        }
 else {
          metadataColumn.setPrecision(0);
        }
      }
      metadataColumn.setTalendType(talendType);
      metadataColumn.setLength(lengthValue);
      metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(label[i]));
      columns.add(i,metadataColumn);
    }
  }
  return columns;
}","public static List<MetadataColumn> guessSchemaFromArray(final CsvArray csvArray,boolean isFirstLineCaption,MetadataEmfTableEditorView tableEditorView,int header){
  List<MetadataColumn> columns=new ArrayList<MetadataColumn>();
  if (csvArray == null) {
    return columns;
  }
 else {
    List<String[]> csvRows=csvArray.getRows();
    if (csvRows.isEmpty()) {
      return columns;
    }
    String[] fields=csvRows.get(0);
    Integer numberOfCol=getRightFirstRow(csvRows);
    int firstRowToExtractMetadata=header;
    String[] label=new String[numberOfCol.intValue()];
    for (int i=0; i < numberOfCol; i++) {
      label[i]=DEFAULT_LABEL + i;
      if (isFirstLineCaption) {
        if (numberOfCol <= fields.length) {
          if (fields[i] != null && !(""String_Node_Str"").equals(fields[i])) {
            label[i]=fields[i].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
            label[i]=MetadataToolHelper.validateColumnName(label[i],i);
          }
 else {
            label[i]=DEFAULT_LABEL + i;
          }
        }
 else {
          if (i < fields.length) {
            if (fields[i] != null && !(""String_Node_Str"").equals(fields[i])) {
              label[i]=fields[i].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              label[i]=DEFAULT_LABEL + ""String_Node_Str"" + i;
            }
          }
 else {
            label[i]=DEFAULT_LABEL + ""String_Node_Str"" + i;
          }
        }
      }
    }
    ShadowProcessPreview.fixDuplicateNames(label);
    for (int i=0; i < numberOfCol.intValue(); i++) {
      String globalType=null;
      int lengthValue=0;
      int precisionValue=0;
      int current=firstRowToExtractMetadata;
      while (globalType == null) {
        if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
          if (current == csvRows.size()) {
            globalType=""String_Node_Str"";
            continue;
          }
 else           if (i >= csvRows.get(current).length) {
            globalType=""String_Node_Str"";
          }
 else {
            globalType=JavaDataTypeHelper.getTalendTypeOfValue(csvRows.get(current)[i]);
            current++;
          }
        }
 else {
          if (current == csvRows.size()) {
            globalType=""String_Node_Str"";
            continue;
          }
          if (i >= csvRows.get(current).length) {
            globalType=""String_Node_Str"";
          }
 else {
            globalType=PerlDataTypeHelper.getTalendTypeOfValue(csvRows.get(current)[i]);
            current++;
          }
        }
      }
      for (int f=firstRowToExtractMetadata; f < csvRows.size(); f++) {
        fields=csvRows.get(f);
        if (fields.length > i) {
          String value=fields[i];
          if (!value.equals(""String_Node_Str"")) {
            if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
              if (!JavaDataTypeHelper.getTalendTypeOfValue(value).equals(globalType)) {
                globalType=JavaDataTypeHelper.getCommonType(globalType,JavaDataTypeHelper.getTalendTypeOfValue(value));
              }
            }
 else {
              if (!PerlDataTypeHelper.getTalendTypeOfValue(value).equals(globalType)) {
                globalType=PerlDataTypeHelper.getCommonType(globalType,PerlDataTypeHelper.getTalendTypeOfValue(value));
              }
            }
            if (lengthValue < value.length()) {
              lengthValue=value.length();
            }
            int positionDecimal=0;
            if (value.indexOf(',') > -1) {
              positionDecimal=value.lastIndexOf(',');
              precisionValue=lengthValue - positionDecimal;
            }
 else             if (value.indexOf('.') > -1) {
              positionDecimal=value.lastIndexOf('.');
              precisionValue=lengthValue - positionDecimal;
            }
          }
 else {
            IPreferenceStore preferenceStore=null;
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreUIService.class)) {
              IDesignerCoreUIService designerCoreUiService=(IDesignerCoreUIService)GlobalServiceRegister.getDefault().getService(IDesignerCoreUIService.class);
              preferenceStore=designerCoreUiService.getPreferenceStore();
            }
            if (preferenceStore != null && preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE) != null && !preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE).equals(""String_Node_Str"")) {
              globalType=preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE);
              if (preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH) != null && !preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
                lengthValue=Integer.parseInt(preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH));
              }
            }
          }
        }
      }
      if (csvRows.size() <= 1 && firstRowToExtractMetadata == 1) {
        lengthValue=255;
      }
      MetadataColumn metadataColumn=ColumnHelper.createTdColumn(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(label[i]));
      metadataColumn.setPattern(""String_Node_Str"");
      String talendType=null;
      if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
        talendType=globalType;
        if (globalType.equals(JavaTypesManager.FLOAT.getId()) || globalType.equals(JavaTypesManager.DOUBLE.getId())) {
          metadataColumn.setPrecision(precisionValue);
        }
 else {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        talendType=PerlTypesManager.getNewTypeName(MetadataTalendType.loadTalendType(globalType,""String_Node_Str"",false));
        if (globalType.equals(""String_Node_Str"") || globalType.equals(""String_Node_Str"")) {
          metadataColumn.setPrecision(precisionValue);
        }
 else {
          metadataColumn.setPrecision(0);
        }
      }
      metadataColumn.setTalendType(talendType);
      metadataColumn.setLength(lengthValue);
      columns.add(i,metadataColumn);
    }
  }
  return columns;
}",0.9803098773402196
127311,"private void createHadoopPropertiesForHive(Composite parent){
  compositeTableForHive=Form.startNewDimensionnedGridLayout(parent,1,parent.getBorderWidth(),150);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.horizontalSpan=3;
  gridData.widthHint=200;
  compositeTableForHive.setLayoutData(gridData);
  CommandStackForComposite commandStack=new CommandStackForComposite(compositeTableForHive);
  properties=new ArrayList<HashMap<String,Object>>();
  initHadoopProperties();
  HadoopPropertiesFieldModel model=new HadoopPropertiesFieldModel(properties,""String_Node_Str"");
  propertiesTableViewForHive=new HadoopPropertiesTableView(model,compositeTableForHive);
  propertiesTableViewForHive.getExtendedTableViewer().setCommandStack(commandStack);
  final Composite fieldTableEditorComposite=propertiesTableViewForHive.getMainComposite();
  fieldTableEditorComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  fieldTableEditorComposite.setBackground(null);
  if (getConnection().getDatabaseType() != null && getConnection().getDatabaseType().equals(EDatabaseConnTemplate.HIVE.getDBDisplayName())) {
    setHidHadoopPropertiesForHive(false);
  }
 else {
    setHidHadoopPropertiesForHive(true);
  }
  addListenerForHive();
}","private void createHadoopPropertiesForHive(Composite parent){
  compositeTableForHive=Form.startNewDimensionnedGridLayout(parent,1,parent.getBorderWidth(),150);
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.horizontalSpan=3;
  gridData.widthHint=200;
  compositeTableForHive.setLayoutData(gridData);
  CommandStackForComposite commandStack=new CommandStackForComposite(compositeTableForHive);
  properties=new ArrayList<HashMap<String,Object>>();
  initHadoopProperties();
  HadoopPropertiesFieldModel model=new HadoopPropertiesFieldModel(properties,""String_Node_Str"");
  propertiesTableViewForHive=new HadoopPropertiesTableView(model,compositeTableForHive);
  propertiesTableViewForHive.getExtendedTableViewer().setCommandStack(commandStack);
  final Composite fieldTableEditorComposite=propertiesTableViewForHive.getMainComposite();
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  if (Platform.getOS().equals(Platform.OS_LINUX)) {
    gridData.heightHint=200;
  }
 else {
    gridData.heightHint=150;
  }
  fieldTableEditorComposite.setLayoutData(gridData);
  fieldTableEditorComposite.setBackground(null);
  if (getConnection().getDatabaseType() != null && getConnection().getDatabaseType().equals(EDatabaseConnTemplate.HIVE.getDBDisplayName())) {
    setHidHadoopPropertiesForHive(false);
  }
 else {
    setHidHadoopPropertiesForHive(true);
  }
  addListenerForHive();
}",0.9045643153526972
127312,"private static DatabaseMetaData createJtdsDatabaseMetaData(Connection conn){
  IService service=GlobalServiceRegister.getDefault().getService(IMetadataService.class);
  if (service == null) {
    try {
      return conn.getMetaData();
    }
 catch (    SQLException e) {
      log.error(e.toString());
      throw new RuntimeException(e);
    }
  }
  return ((IMetadataService)service).findCustomizedJTDSDBMetadata(conn);
}","private static DatabaseMetaData createJtdsDatabaseMetaData(Connection conn){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IMetadataService.class)) {
    IService service=GlobalServiceRegister.getDefault().getService(IMetadataService.class);
    if (service != null) {
      return ((IMetadataService)service).findCustomizedJTDSDBMetadata(conn);
    }
  }
  try {
    return conn.getMetaData();
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
}",0.7130620985010707
127313,"@Override protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  composite.setLayout(new FillLayout());
  broswer=new Browser(composite,SWT.NONE);
  broswer.setUrl(url);
  broswer.refresh();
  return parent;
}","@Override protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  composite.setLayout(new FillLayout());
  broswer=new Browser(composite,SWT.NONE);
  broswer.setUrl(url);
  broswer.refresh();
  composite.redraw();
  parent.redraw();
  return parent;
}",0.9306260575296108
127314,"@Override protected void addFields(){
  int width=getSize().x;
  GridLayout layout2;
  databaseSettingGroup=new Group(this,SWT.NONE);
  GridLayout gridLayout1=new GridLayout(1,false);
  databaseSettingGroup.setLayout(gridLayout1);
  GridData gridData1=new GridData(SWT.FILL,SWT.FILL,true,true);
  databaseSettingGroup.setLayoutData(gridData1);
  scrolledComposite=new ScrolledComposite(databaseSettingGroup,SWT.V_SCROLL | SWT.H_SCROLL);
  scrolledComposite.setExpandHorizontal(true);
  scrolledComposite.setExpandVertical(true);
  scrolledComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  newParent=new Composite(scrolledComposite,SWT.NONE);
  GridLayout gridLayout=new GridLayout();
  newParent.setLayout(gridLayout);
  scrolledComposite.setContent(newParent);
  compositeGroupDbSettings=Form.startNewGridLayout(newParent,1);
  layout2=(GridLayout)compositeGroupDbSettings.getLayout();
  layout2.marginHeight=0;
  layout2.marginTop=0;
  layout2.marginBottom=0;
  layout2.marginLeft=0;
  layout2.marginRight=0;
  layout2.marginWidth=0;
  compositeDbSettings=new Composite(compositeGroupDbSettings,SWT.NULL);
  compositeDbSettings.setLayout(new GridLayout(3,false));
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.minimumWidth=width;
  gridData.widthHint=width;
  compositeDbSettings.setLayoutData(gridData);
  layout2=(GridLayout)compositeDbSettings.getLayout();
  layout2.marginHeight=0;
  layout2.marginTop=0;
  layout2.marginBottom=0;
  addDBSelectCombo();
  Label label=new Label(compositeDbSettings,SWT.SEPARATOR | SWT.H_SCROLL);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=3;
  label.setLayoutData(data);
  addFieldsForTypeDB(compositeGroupDbSettings);
  addFieldsForGeneralDB(compositeGroupDbSettings);
  switchBetweenTypeandGeneralDB(true);
  addCheckAndStandardButtons(width,compositeGroupDbSettings);
  checkDBTypeAS400();
  scrolledComposite.addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      Rectangle r=scrolledComposite.getClientArea();
      if (getConnection().getDatabaseType() != null && getConnection().getDatabaseType().equals(EDatabaseConnTemplate.HIVE.getDBDisplayName())) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,820));
      }
 else {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,550));
      }
    }
  }
);
}","@Override protected void addFields(){
  int width=getSize().x;
  GridLayout layout2;
  databaseSettingGroup=new Group(this,SWT.NONE);
  GridLayout gridLayout1=new GridLayout(1,false);
  databaseSettingGroup.setLayout(gridLayout1);
  GridData gridData1=new GridData(SWT.FILL,SWT.FILL,true,true);
  databaseSettingGroup.setLayoutData(gridData1);
  scrolledComposite=new ScrolledComposite(databaseSettingGroup,SWT.V_SCROLL | SWT.H_SCROLL);
  scrolledComposite.setExpandHorizontal(true);
  scrolledComposite.setExpandVertical(true);
  scrolledComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  newParent=new Composite(scrolledComposite,SWT.NONE);
  GridLayout gridLayout=new GridLayout();
  newParent.setLayout(gridLayout);
  scrolledComposite.setContent(newParent);
  compositeGroupDbSettings=Form.startNewGridLayout(newParent,1);
  layout2=(GridLayout)compositeGroupDbSettings.getLayout();
  layout2.marginHeight=0;
  layout2.marginTop=0;
  layout2.marginBottom=0;
  layout2.marginLeft=0;
  layout2.marginRight=0;
  layout2.marginWidth=0;
  compositeDbSettings=new Composite(compositeGroupDbSettings,SWT.NULL);
  compositeDbSettings.setLayout(new GridLayout(3,false));
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.minimumWidth=width;
  gridData.widthHint=width;
  compositeDbSettings.setLayoutData(gridData);
  layout2=(GridLayout)compositeDbSettings.getLayout();
  layout2.marginHeight=0;
  layout2.marginTop=0;
  layout2.marginBottom=0;
  addDBSelectCombo();
  Label label=new Label(compositeDbSettings,SWT.SEPARATOR | SWT.H_SCROLL);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=3;
  label.setLayoutData(data);
  addFieldsForTypeDB(compositeGroupDbSettings);
  addFieldsForGeneralDB(compositeGroupDbSettings);
  switchBetweenTypeandGeneralDB(true);
  addCheckAndStandardButtons(width,compositeGroupDbSettings);
  checkDBTypeAS400();
  scrolledComposite.addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      Rectangle r=scrolledComposite.getClientArea();
      if (getConnection().getDatabaseType() != null && getConnection().getDatabaseType().equals(EDatabaseConnTemplate.HIVE.getDBDisplayName())) {
        if (Platform.getOS().equals(Platform.OS_LINUX)) {
          scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,900));
        }
 else {
          scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,820));
        }
      }
 else {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,550));
      }
    }
  }
);
}",0.9640287769784172
127315,"@Override public void controlResized(ControlEvent e){
  Rectangle r=scrolledComposite.getClientArea();
  if (getConnection().getDatabaseType() != null && getConnection().getDatabaseType().equals(EDatabaseConnTemplate.HIVE.getDBDisplayName())) {
    scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,820));
  }
 else {
    scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,550));
  }
}","@Override public void controlResized(ControlEvent e){
  Rectangle r=scrolledComposite.getClientArea();
  if (getConnection().getDatabaseType() != null && getConnection().getDatabaseType().equals(EDatabaseConnTemplate.HIVE.getDBDisplayName())) {
    if (Platform.getOS().equals(Platform.OS_LINUX)) {
      scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,900));
    }
 else {
      scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,820));
    }
  }
 else {
    scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,550));
  }
}",0.8395061728395061
127316,"private static List<ModuleNeeded> getModulesNeededForComponents(){
  initCache();
  if (isCreated) {
    List<ModuleNeeded> importNeedsList=new ArrayList<ModuleNeeded>();
    ComponentsCache cache=ComponentManager.getComponentCache();
    EMap<String,EList<ComponentInfo>> map=cache.getComponentEntryMap();
    Set<String> set=map.keySet();
    Iterator it=set.iterator();
    while (it.hasNext()) {
      String key=(String)it.next();
      EList<ComponentInfo> value=map.get(key);
      for (      ComponentInfo info : value) {
        EList emfImportList=info.getImportType();
        for (int i=0; i < emfImportList.size(); i++) {
          IMPORTType importType=(IMPORTType)emfImportList.get(i);
          String msg=importType.getMESSAGE();
          if (msg == null) {
            msg=Messages.getString(""String_Node_Str"");
          }
          List<String> list=getInstallURL(importType);
          ModuleNeeded componentImportNeeds=new ModuleNeeded(key,importType.getMODULE(),msg,importType.isREQUIRED(),list,importType.getREQUIREDIF());
          initBundleID(importType,componentImportNeeds);
          componentImportNeeds.setMrRequired(importType.isMRREQUIRED());
          componentImportNeeds.setShow(importType.isSHOW());
          componentImportNeeds.setModuleLocaion(importType.getUrlPath());
          importNeedsList.add(componentImportNeeds);
        }
      }
    }
    return importNeedsList;
  }
 else {
    List<ModuleNeeded> importNeedsList=new ArrayList<ModuleNeeded>();
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IComponentsService.class)) {
      IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
      IComponentsFactory compFac=service.getComponentsFactory();
      Set<IComponent> componentList=compFac.getComponents();
      for (      IComponent comp : componentList.toArray(new IComponent[0])) {
        importNeedsList.addAll(comp.getModulesNeeded());
      }
    }
    return importNeedsList;
  }
}","private static List<ModuleNeeded> getModulesNeededForComponents(){
  initCache();
  if (isCreated) {
    List<ModuleNeeded> importNeedsList=new ArrayList<ModuleNeeded>();
    ComponentsCache cache=ComponentManager.getComponentCache();
    EMap<String,EList<ComponentInfo>> map=cache.getComponentEntryMap();
    Set<String> set=map.keySet();
    Iterator it=set.iterator();
    Map<String,Boolean> bundlesAvailable=new HashMap<String,Boolean>();
    while (it.hasNext()) {
      String key=(String)it.next();
      EList<ComponentInfo> value=map.get(key);
      for (      ComponentInfo info : value) {
        Boolean available=bundlesAvailable.get(info.getSourceBundleName());
        if (available == null) {
          available=Platform.getBundle(info.getSourceBundleName()) != null;
          bundlesAvailable.put(info.getSourceBundleName(),available);
        }
        if (!available) {
          continue;
        }
        EList emfImportList=info.getImportType();
        for (int i=0; i < emfImportList.size(); i++) {
          IMPORTType importType=(IMPORTType)emfImportList.get(i);
          String msg=importType.getMESSAGE();
          if (msg == null) {
            msg=Messages.getString(""String_Node_Str"");
          }
          List<String> list=getInstallURL(importType);
          ModuleNeeded componentImportNeeds=new ModuleNeeded(key,importType.getMODULE(),msg,importType.isREQUIRED(),list,importType.getREQUIREDIF());
          initBundleID(importType,componentImportNeeds);
          componentImportNeeds.setMrRequired(importType.isMRREQUIRED());
          componentImportNeeds.setShow(importType.isSHOW());
          componentImportNeeds.setModuleLocaion(importType.getUrlPath());
          importNeedsList.add(componentImportNeeds);
        }
      }
    }
    return importNeedsList;
  }
 else {
    List<ModuleNeeded> importNeedsList=new ArrayList<ModuleNeeded>();
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IComponentsService.class)) {
      IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
      IComponentsFactory compFac=service.getComponentsFactory();
      Set<IComponent> componentList=compFac.getComponents();
      for (      IComponent comp : componentList.toArray(new IComponent[0])) {
        importNeedsList.addAll(comp.getModulesNeeded());
      }
    }
    return importNeedsList;
  }
}",0.9116258151562852
127317,"/** 
 * test TDQ-6569, it should be empty String even dbMetadata.getDatabaseProductName()/dbMetadata.getDatabaseProductName() is null .
 * @throws Exception
 */
@Test public void testfillUIConnParams_DB2ZOS() throws Exception {
  java.sql.Connection sqlConnection=mock(java.sql.Connection.class);
  IMetadataConnection metadataBean=mock(IMetadataConnection.class);
  DatabaseConnection connection=mock(DatabaseConnection.class);
  EList<TaggedValue> taggedValues=new BasicEList<TaggedValue>();
  when(connection.getTaggedValue()).thenReturn(taggedValues);
  when(connection.getDatabaseType()).thenReturn(""String_Node_Str"");
  when(connection.getDriverClass()).thenReturn(EDatabase4DriverClassName.IBMDB2ZOS.getDriverClass());
  when(connection.isContextMode()).thenReturn(Boolean.FALSE);
  TypedReturnCode<java.sql.Connection> rc=new TypedReturnCode<java.sql.Connection>();
  rc.setOk(true);
  PowerMockito.mockStatic(MetadataConnectionUtils.class);
  when(MetadataConnectionUtils.checkConnection(metadataBean)).thenReturn(rc);
  when(MetadataConnectionUtils.isDerbyRelatedDb(anyString(),anyString())).thenReturn(false);
  DatabaseMetaData dbMetadata=mock(DatabaseMetaData.class);
  when(dbMetadata.getDatabaseProductName()).thenReturn(null);
  when(dbMetadata.getDatabaseProductName()).thenReturn(null);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConnection,connection,false)).thenReturn(dbMetadata);
  when(ExtractMetaDataUtils.getDatabaseMetaData(null,connection,false)).thenReturn(dbMetadata);
  PowerMockito.mockStatic(ConnectionUtils.class);
  ReturnCode ret=new ReturnCode();
  ret.setOk(true);
  when(ConnectionUtils.closeConnection(sqlConnection)).thenReturn(ret);
  DBConnectionFillerImpl dBConnectionFillerImp_mock=PowerMockito.spy(dBConnectionFillerImpl);
  PowerMockito.doNothing().when(dBConnectionFillerImp_mock,""String_Node_Str"",metadataBean,connection);
  dBConnectionFillerImp_mock.fillUIConnParams(metadataBean,connection);
  String producetName=TaggedValueHelper.getValueString(TaggedValueHelper.DB_PRODUCT_NAME,connection);
  String version=TaggedValueHelper.getValueString(TaggedValueHelper.DB_PRODUCT_VERSION,connection);
  assertNotNull(producetName);
  assertNotNull(version);
  assertEquals(producetName,PluginConstant.EMPTY_STRING);
  assertEquals(version,PluginConstant.EMPTY_STRING);
}","/** 
 * test TDQ-6569, it should be empty String even dbMetadata.getDatabaseProductName()/dbMetadata.getDatabaseProductName() is null .
 * @throws Exception
 */
@Test public void testfillUIConnParams_DB2ZOS() throws Exception {
  java.sql.Connection sqlConnection=mock(java.sql.Connection.class);
  IMetadataConnection metadataBean=mock(IMetadataConnection.class);
  DatabaseConnection connection=mock(DatabaseConnection.class);
  EList<TaggedValue> taggedValues=new BasicEList<TaggedValue>();
  when(connection.getTaggedValue()).thenReturn(taggedValues);
  when(connection.getDatabaseType()).thenReturn(""String_Node_Str"");
  when(connection.getDriverClass()).thenReturn(EDatabase4DriverClassName.IBMDB2ZOS.getDriverClass());
  when(connection.isContextMode()).thenReturn(Boolean.FALSE);
  TypedReturnCode<java.sql.Connection> rc=new TypedReturnCode<java.sql.Connection>();
  rc.setOk(true);
  PowerMockito.mockStatic(MetadataConnectionUtils.class);
  when(MetadataConnectionUtils.checkConnection(metadataBean)).thenReturn(rc);
  when(MetadataConnectionUtils.isDerbyRelatedDb(anyString(),anyString())).thenReturn(false);
  DatabaseMetaData dbMetadata=mock(DatabaseMetaData.class);
  when(dbMetadata.getDatabaseProductName()).thenReturn(null);
  when(dbMetadata.getDatabaseProductName()).thenReturn(null);
  when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConnection,connection,false)).thenReturn(dbMetadata);
  when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(null,connection,false)).thenReturn(dbMetadata);
  PowerMockito.mockStatic(ConnectionUtils.class);
  ReturnCode ret=new ReturnCode();
  ret.setOk(true);
  when(ConnectionUtils.closeConnection(sqlConnection)).thenReturn(ret);
  DBConnectionFillerImpl dBConnectionFillerImp_mock=PowerMockito.spy(dBConnectionFillerImpl);
  PowerMockito.doNothing().when(dBConnectionFillerImp_mock,""String_Node_Str"",metadataBean,connection);
  dBConnectionFillerImp_mock.fillUIConnParams(metadataBean,connection);
  String producetName=TaggedValueHelper.getValueString(TaggedValueHelper.DB_PRODUCT_NAME,connection);
  String version=TaggedValueHelper.getValueString(TaggedValueHelper.DB_PRODUCT_VERSION,connection);
  assertNotNull(producetName);
  assertNotNull(version);
  assertEquals(producetName,PluginConstant.EMPTY_STRING);
  assertEquals(version,PluginConstant.EMPTY_STRING);
}",0.9515548973979268
127318,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getColumns(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.ColumnSet,java.lang.String,boolean)}.
 * @throws SQLException
 */
@Test public void testGetColumns(){
  ColumnSet columnSet=RelationalPackage.eINSTANCE.getRelationalFactory().createTdTable();
  TdColumn column1=RelationalPackage.eINSTANCE.getRelationalFactory().createTdColumn();
  column1.setName(""String_Node_Str"");
  ColumnSetHelper.addColumn(column1,columnSet);
  TdColumn column2=RelationalPackage.eINSTANCE.getRelationalFactory().createTdColumn();
  column2.setName(""String_Node_Str"");
  ColumnSetHelper.addColumn(column2,columnSet);
  String connFailedMessage=""String_Node_Str"";
  try {
    List<TdColumn> columns=DqRepositoryViewService.getColumns(null,columnSet,null,false);
    assertEquals(2,columns.size());
    DatabaseConnection dbConn=createDatabaseConn();
    TypedReturnCode<java.sql.Connection> retCode=new TypedReturnCode<java.sql.Connection>();
    retCode.setOk(Boolean.FALSE);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    when(MetadataConnectionUtils.checkConnection(dbConn)).thenReturn(retCode);
    retCode.setMessage(connFailedMessage);
    DqRepositoryViewService.getColumns(dbConn,columnSet,null,true);
    List<TdColumn> columnsExpected=new ArrayList<TdColumn>(3);
    java.sql.Connection sqlConn=null;
    DatabaseMetaData databaseMetaData=mock(DatabaseMetaData.class);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn)).thenReturn(databaseMetaData);
    MetadataFillFactory metadataFactory=mock(MetadataFillFactory.class);
    when(metadataFactory.fillColumns(columnSet,databaseMetaData,null,null)).thenReturn(columnsExpected);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    when(MetadataFillFactory.getDBInstance()).thenReturn(metadataFactory);
    List<TdColumn> columnsActual=DqRepositoryViewService.getColumns(dbConn,columnSet,null,true);
    assertEquals(columnsExpected.size(),columnsActual.size());
  }
 catch (  Exception e) {
    assertEquals(connFailedMessage,e.getMessage());
  }
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getColumns(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.ColumnSet,java.lang.String,boolean)}.
 * @throws SQLException
 */
@Test public void testGetColumns(){
  ColumnSet columnSet=RelationalPackage.eINSTANCE.getRelationalFactory().createTdTable();
  TdColumn column1=RelationalPackage.eINSTANCE.getRelationalFactory().createTdColumn();
  column1.setName(""String_Node_Str"");
  ColumnSetHelper.addColumn(column1,columnSet);
  TdColumn column2=RelationalPackage.eINSTANCE.getRelationalFactory().createTdColumn();
  column2.setName(""String_Node_Str"");
  ColumnSetHelper.addColumn(column2,columnSet);
  String connFailedMessage=""String_Node_Str"";
  try {
    List<TdColumn> columns=DqRepositoryViewService.getColumns(null,columnSet,null,false);
    assertEquals(2,columns.size());
    DatabaseConnection dbConn=createDatabaseConn();
    TypedReturnCode<java.sql.Connection> retCode=new TypedReturnCode<java.sql.Connection>();
    retCode.setOk(Boolean.FALSE);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    when(MetadataConnectionUtils.checkConnection(dbConn)).thenReturn(retCode);
    retCode.setMessage(connFailedMessage);
    DqRepositoryViewService.getColumns(dbConn,columnSet,null,true);
    List<TdColumn> columnsExpected=new ArrayList<TdColumn>(3);
    java.sql.Connection sqlConn=null;
    DatabaseMetaData databaseMetaData=mock(DatabaseMetaData.class);
    when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,dbConn)).thenReturn(databaseMetaData);
    MetadataFillFactory metadataFactory=mock(MetadataFillFactory.class);
    when(metadataFactory.fillColumns(columnSet,databaseMetaData,null,null)).thenReturn(columnsExpected);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    when(MetadataFillFactory.getDBInstance()).thenReturn(metadataFactory);
    List<TdColumn> columnsActual=DqRepositoryViewService.getColumns(dbConn,columnSet,null,true);
    assertEquals(columnsExpected.size(),columnsActual.size());
  }
 catch (  Exception e) {
    assertEquals(connFailedMessage,e.getMessage());
  }
}",0.9830508474576272
127319,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#isContainsView(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Schema,java.lang.String)}.
 */
@Test public void testIsContainsViewConnectionSchemaString(){
  String schemaName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Schema schema=null;
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(null,schemaName,tablePattern,DqRepositoryViewService.VIEW_TYPES)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    schema=Mockito.mock(Schema.class);
    Mockito.when(schema.getName()).thenReturn(schemaName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(schema)).thenReturn(schema);
    Mockito.when(PackageHelper.getParentPackage(schema)).thenReturn(null);
    containsTable=DqRepositoryViewService.isContainsView(dataProvider,schema,tablePattern);
    Mockito.verify(metaData).getTables(null,schemaName,tablePattern,DqRepositoryViewService.VIEW_TYPES);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(schema).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,schema);
  assertTrue(containsTable);
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#isContainsView(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Schema,java.lang.String)}.
 */
@Test public void testIsContainsViewConnectionSchemaString(){
  String schemaName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Schema schema=null;
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(null,schemaName,tablePattern,DqRepositoryViewService.VIEW_TYPES)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    schema=Mockito.mock(Schema.class);
    Mockito.when(schema.getName()).thenReturn(schemaName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    Mockito.when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(schema)).thenReturn(schema);
    Mockito.when(PackageHelper.getParentPackage(schema)).thenReturn(null);
    containsTable=DqRepositoryViewService.isContainsView(dataProvider,schema,tablePattern);
    Mockito.verify(metaData).getTables(null,schemaName,tablePattern,DqRepositoryViewService.VIEW_TYPES);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(schema).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,schema);
  assertTrue(containsTable);
}",0.9804090419806244
127320,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getTables(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String,boolean)}.
 */
@Test public void testGetTablesConnectionCatalogStringBoolean(){
  java.sql.Connection sqlConn=null;
  DatabaseMetaData metaData=null;
  String catalogName=""String_Node_Str"";
  List<TdTable> tableList=new ArrayList<TdTable>();
  List<TdTable> retableList=new ArrayList<TdTable>();
  List<TdTable> resultList1=null;
  List<TdTable> resultList2=null;
  List<TdTable> resultList3=null;
  String tablePattern=null;
  boolean loadFromDB=true;
  TdTable tableMock=Mockito.mock(TdTable.class);
  retableList.add(tableMock);
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Connection dataProvider=Mockito.mock(DatabaseConnection.class);
    Catalog catalog=Mockito.mock(Catalog.class);
    Mockito.when(catalog.getName()).thenReturn(catalogName);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    ReturnCode rc=new ReturnCode(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getTables(catalog)).thenReturn(tableList);
    MetadataFillFactory metadataMock=Mockito.mock(MetadataFillFactory.class);
    Mockito.when(metadataMock.fillTables((orgomg.cwm.objectmodel.core.Package)Mockito.eq(catalog),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),(String[])Mockito.any())).thenReturn(retableList);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(metadataMock);
    PowerMockito.mockStatic(ConnectionUtils.class);
    Mockito.when(ConnectionUtils.closeConnection(sqlConn)).thenReturn(rc);
    PowerMockito.mockStatic(CatalogHelper.class);
    Mockito.when(CatalogHelper.getTables(catalog)).thenReturn(retableList);
    resultList1=DqRepositoryViewService.getTables(dataProvider,catalog,tablePattern,loadFromDB);
    tableList.add(tableMock);
    resultList2=DqRepositoryViewService.getTables(dataProvider,catalog,tablePattern,loadFromDB);
    loadFromDB=false;
    resultList3=DqRepositoryViewService.getTables(dataProvider,catalog,tablePattern,loadFromDB);
    Mockito.verify(catalog,Mockito.times(2)).getName();
    Mockito.verify(metadataMock,Mockito.times(2)).fillTables((orgomg.cwm.objectmodel.core.Package)Mockito.eq(catalog),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),(String[])Mockito.any());
    Mockito.verify(metadataMock).setLinked(true);
    Mockito.verify(metadataMock).setLinked(false);
    Mockito.verifyZeroInteractions(tableMock,tables,dataProvider,catalog,sqlConn,metaData,metadataMock);
    assertTrue(resultList1.size() == 1);
    assertTrue(resultList2.size() == 1);
    assertTrue(resultList3.size() == 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getTables(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String,boolean)}.
 */
@Test public void testGetTablesConnectionCatalogStringBoolean(){
  java.sql.Connection sqlConn=null;
  DatabaseMetaData metaData=null;
  String catalogName=""String_Node_Str"";
  List<TdTable> tableList=new ArrayList<TdTable>();
  List<TdTable> retableList=new ArrayList<TdTable>();
  List<TdTable> resultList1=null;
  List<TdTable> resultList2=null;
  List<TdTable> resultList3=null;
  String tablePattern=null;
  boolean loadFromDB=true;
  TdTable tableMock=Mockito.mock(TdTable.class);
  retableList.add(tableMock);
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Connection dataProvider=Mockito.mock(DatabaseConnection.class);
    Catalog catalog=Mockito.mock(Catalog.class);
    Mockito.when(catalog.getName()).thenReturn(catalogName);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    ReturnCode rc=new ReturnCode(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    Mockito.when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getTables(catalog)).thenReturn(tableList);
    MetadataFillFactory metadataMock=Mockito.mock(MetadataFillFactory.class);
    Mockito.when(metadataMock.fillTables((orgomg.cwm.objectmodel.core.Package)Mockito.eq(catalog),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),(String[])Mockito.any())).thenReturn(retableList);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(metadataMock);
    PowerMockito.mockStatic(ConnectionUtils.class);
    Mockito.when(ConnectionUtils.closeConnection(sqlConn)).thenReturn(rc);
    PowerMockito.mockStatic(CatalogHelper.class);
    Mockito.when(CatalogHelper.getTables(catalog)).thenReturn(retableList);
    resultList1=DqRepositoryViewService.getTables(dataProvider,catalog,tablePattern,loadFromDB);
    tableList.add(tableMock);
    resultList2=DqRepositoryViewService.getTables(dataProvider,catalog,tablePattern,loadFromDB);
    loadFromDB=false;
    resultList3=DqRepositoryViewService.getTables(dataProvider,catalog,tablePattern,loadFromDB);
    Mockito.verify(catalog,Mockito.times(2)).getName();
    Mockito.verify(metadataMock,Mockito.times(2)).fillTables((orgomg.cwm.objectmodel.core.Package)Mockito.eq(catalog),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),(String[])Mockito.any());
    Mockito.verify(metadataMock).setLinked(true);
    Mockito.verify(metadataMock).setLinked(false);
    Mockito.verifyZeroInteractions(tableMock,tables,dataProvider,catalog,sqlConn,metaData,metadataMock);
    assertTrue(resultList1.size() == 1);
    assertTrue(resultList2.size() == 1);
    assertTrue(resultList3.size() == 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}",0.9868173258003766
127321,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getViews(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String,boolean)}.
 */
@Test public void testGetViewsConnectionCatalogStringBoolean(){
  java.sql.Connection sqlConn=null;
  DatabaseMetaData metaData=null;
  String catalogName=""String_Node_Str"";
  List<TdView> tableList=new ArrayList<TdView>();
  List<TdView> retableList=new ArrayList<TdView>();
  List<TdView> resultList1=null;
  List<TdView> resultList2=null;
  List<TdView> resultList3=null;
  String tablePattern=null;
  boolean loadFromDB=true;
  TdView tableMock=Mockito.mock(TdView.class);
  retableList.add(tableMock);
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Connection dataProvider=Mockito.mock(DatabaseConnection.class);
    Catalog catalog=Mockito.mock(Catalog.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    ReturnCode rc=new ReturnCode(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getViews(catalog)).thenReturn(tableList);
    MetadataFillFactory metadataMock=Mockito.mock(MetadataFillFactory.class);
    Mockito.when(metadataMock.fillViews(Mockito.eq(catalog),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),Mockito.eq(DqRepositoryViewService.VIEW_TYPES))).thenReturn(retableList).thenReturn(retableList);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(metadataMock);
    PowerMockito.mockStatic(ConnectionUtils.class);
    Mockito.when(ConnectionUtils.closeConnection(sqlConn)).thenReturn(rc);
    PowerMockito.mockStatic(CatalogHelper.class);
    Mockito.when(CatalogHelper.getViews(catalog)).thenReturn(retableList);
    resultList1=DqRepositoryViewService.getViews(dataProvider,catalog,tablePattern,loadFromDB);
    tableList.add(tableMock);
    resultList2=DqRepositoryViewService.getViews(dataProvider,catalog,tablePattern,loadFromDB);
    loadFromDB=false;
    resultList3=DqRepositoryViewService.getViews(dataProvider,catalog,tablePattern,loadFromDB);
    Mockito.verify(metadataMock,Mockito.times(2)).fillViews(Mockito.eq(catalog),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),Mockito.eq(DqRepositoryViewService.VIEW_TYPES));
    Mockito.verify(metadataMock).setLinked(true);
    Mockito.verify(metadataMock).setLinked(false);
    Mockito.verifyZeroInteractions(tableMock,tables,dataProvider,catalog,sqlConn,metaData,metadataMock);
    assertTrue(resultList1.size() == 1);
    assertTrue(resultList2.size() == 1);
    assertTrue(resultList3.size() == 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getViews(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String,boolean)}.
 */
@Test public void testGetViewsConnectionCatalogStringBoolean(){
  java.sql.Connection sqlConn=null;
  DatabaseMetaData metaData=null;
  String catalogName=""String_Node_Str"";
  List<TdView> tableList=new ArrayList<TdView>();
  List<TdView> retableList=new ArrayList<TdView>();
  List<TdView> resultList1=null;
  List<TdView> resultList2=null;
  List<TdView> resultList3=null;
  String tablePattern=null;
  boolean loadFromDB=true;
  TdView tableMock=Mockito.mock(TdView.class);
  retableList.add(tableMock);
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Connection dataProvider=Mockito.mock(DatabaseConnection.class);
    Catalog catalog=Mockito.mock(Catalog.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    ReturnCode rc=new ReturnCode(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    Mockito.when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getViews(catalog)).thenReturn(tableList);
    MetadataFillFactory metadataMock=Mockito.mock(MetadataFillFactory.class);
    Mockito.when(metadataMock.fillViews(Mockito.eq(catalog),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),Mockito.eq(DqRepositoryViewService.VIEW_TYPES))).thenReturn(retableList).thenReturn(retableList);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(metadataMock);
    PowerMockito.mockStatic(ConnectionUtils.class);
    Mockito.when(ConnectionUtils.closeConnection(sqlConn)).thenReturn(rc);
    PowerMockito.mockStatic(CatalogHelper.class);
    Mockito.when(CatalogHelper.getViews(catalog)).thenReturn(retableList);
    resultList1=DqRepositoryViewService.getViews(dataProvider,catalog,tablePattern,loadFromDB);
    tableList.add(tableMock);
    resultList2=DqRepositoryViewService.getViews(dataProvider,catalog,tablePattern,loadFromDB);
    loadFromDB=false;
    resultList3=DqRepositoryViewService.getViews(dataProvider,catalog,tablePattern,loadFromDB);
    Mockito.verify(metadataMock,Mockito.times(2)).fillViews(Mockito.eq(catalog),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),Mockito.eq(DqRepositoryViewService.VIEW_TYPES));
    Mockito.verify(metadataMock).setLinked(true);
    Mockito.verify(metadataMock).setLinked(false);
    Mockito.verifyZeroInteractions(tableMock,tables,dataProvider,catalog,sqlConn,metaData,metadataMock);
    assertTrue(resultList1.size() == 1);
    assertTrue(resultList2.size() == 1);
    assertTrue(resultList3.size() == 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}",0.9859622641509432
127322,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getTables(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Schema,java.lang.String,boolean)}.
 */
@Test public void testGetTablesConnectionSchemaStringBoolean(){
  java.sql.Connection sqlConn=null;
  DatabaseMetaData metaData=null;
  String schemaName=""String_Node_Str"";
  List<TdTable> tableList=new ArrayList<TdTable>();
  List<TdTable> retableList=new ArrayList<TdTable>();
  List<TdTable> resultList1=null;
  List<TdTable> resultList2=null;
  List<TdTable> resultList3=null;
  String tablePattern=null;
  boolean loadFromDB=true;
  TdTable tableMock=Mockito.mock(TdTable.class);
  retableList.add(tableMock);
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Connection dataProvider=Mockito.mock(DatabaseConnection.class);
    Catalog catalog=Mockito.mock(Catalog.class);
    Schema schema=Mockito.mock(Schema.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    ReturnCode rc=new ReturnCode(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getTables(schema)).thenReturn(tableList);
    MetadataFillFactory metadataMock=Mockito.mock(MetadataFillFactory.class);
    Mockito.when(metadataMock.fillTables((orgomg.cwm.objectmodel.core.Package)Mockito.eq(schema),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),(String[])Mockito.any())).thenReturn(retableList).thenReturn(retableList);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(metadataMock);
    PowerMockito.mockStatic(ConnectionUtils.class);
    Mockito.when(ConnectionUtils.closeConnection(sqlConn)).thenReturn(rc);
    PowerMockito.mockStatic(SchemaHelper.class);
    Mockito.when(SchemaHelper.getTables(schema)).thenReturn(retableList);
    PowerMockito.mockStatic(CatalogHelper.class);
    Mockito.when(CatalogHelper.getParentCatalog(schema)).thenReturn(catalog);
    resultList1=DqRepositoryViewService.getTables(dataProvider,schema,tablePattern,loadFromDB);
    tableList.add(tableMock);
    resultList2=DqRepositoryViewService.getTables(dataProvider,schema,tablePattern,loadFromDB);
    loadFromDB=false;
    resultList3=DqRepositoryViewService.getTables(dataProvider,schema,tablePattern,loadFromDB);
    Mockito.verify(metadataMock,Mockito.times(2)).fillTables((orgomg.cwm.objectmodel.core.Package)Mockito.eq(schema),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),(String[])Mockito.any());
    Mockito.verify(metadataMock).setLinked(true);
    Mockito.verify(metadataMock).setLinked(false);
    Mockito.verifyZeroInteractions(tableMock,tables,dataProvider,schema,sqlConn,metaData,metadataMock,catalog);
    assertTrue(resultList1.size() == 1);
    assertTrue(resultList2.size() == 1);
    assertTrue(resultList3.size() == 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getTables(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Schema,java.lang.String,boolean)}.
 */
@Test public void testGetTablesConnectionSchemaStringBoolean(){
  java.sql.Connection sqlConn=null;
  DatabaseMetaData metaData=null;
  String schemaName=""String_Node_Str"";
  List<TdTable> tableList=new ArrayList<TdTable>();
  List<TdTable> retableList=new ArrayList<TdTable>();
  List<TdTable> resultList1=null;
  List<TdTable> resultList2=null;
  List<TdTable> resultList3=null;
  String tablePattern=null;
  boolean loadFromDB=true;
  TdTable tableMock=Mockito.mock(TdTable.class);
  retableList.add(tableMock);
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Connection dataProvider=Mockito.mock(DatabaseConnection.class);
    Catalog catalog=Mockito.mock(Catalog.class);
    Schema schema=Mockito.mock(Schema.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    ReturnCode rc=new ReturnCode(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    Mockito.when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getTables(schema)).thenReturn(tableList);
    MetadataFillFactory metadataMock=Mockito.mock(MetadataFillFactory.class);
    Mockito.when(metadataMock.fillTables((orgomg.cwm.objectmodel.core.Package)Mockito.eq(schema),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),(String[])Mockito.any())).thenReturn(retableList).thenReturn(retableList);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(metadataMock);
    PowerMockito.mockStatic(ConnectionUtils.class);
    Mockito.when(ConnectionUtils.closeConnection(sqlConn)).thenReturn(rc);
    PowerMockito.mockStatic(SchemaHelper.class);
    Mockito.when(SchemaHelper.getTables(schema)).thenReturn(retableList);
    PowerMockito.mockStatic(CatalogHelper.class);
    Mockito.when(CatalogHelper.getParentCatalog(schema)).thenReturn(catalog);
    resultList1=DqRepositoryViewService.getTables(dataProvider,schema,tablePattern,loadFromDB);
    tableList.add(tableMock);
    resultList2=DqRepositoryViewService.getTables(dataProvider,schema,tablePattern,loadFromDB);
    loadFromDB=false;
    resultList3=DqRepositoryViewService.getTables(dataProvider,schema,tablePattern,loadFromDB);
    Mockito.verify(metadataMock,Mockito.times(2)).fillTables((orgomg.cwm.objectmodel.core.Package)Mockito.eq(schema),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),(String[])Mockito.any());
    Mockito.verify(metadataMock).setLinked(true);
    Mockito.verify(metadataMock).setLinked(false);
    Mockito.verifyZeroInteractions(tableMock,tables,dataProvider,schema,sqlConn,metaData,metadataMock,catalog);
    assertTrue(resultList1.size() == 1);
    assertTrue(resultList2.size() == 1);
    assertTrue(resultList3.size() == 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}",0.9871013465627216
127323,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#isContainsView(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String)}.
 */
@Test public void testIsContainsViewConnectionCatalogString(){
  String catalogName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Catalog catalog=null;
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(catalogName,null,tablePattern,DqRepositoryViewService.VIEW_TYPES)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    catalog=Mockito.mock(Catalog.class);
    Mockito.when(catalog.getName()).thenReturn(catalogName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(catalog)).thenReturn(catalog);
    containsTable=DqRepositoryViewService.isContainsView(dataProvider,catalog,tablePattern);
    Mockito.verify(metaData).getTables(catalogName,null,tablePattern,DqRepositoryViewService.VIEW_TYPES);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(catalog).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,catalog);
  assertTrue(containsTable);
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#isContainsView(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String)}.
 */
@Test public void testIsContainsViewConnectionCatalogString(){
  String catalogName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Catalog catalog=null;
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(catalogName,null,tablePattern,DqRepositoryViewService.VIEW_TYPES)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    catalog=Mockito.mock(Catalog.class);
    Mockito.when(catalog.getName()).thenReturn(catalogName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    Mockito.when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(catalog)).thenReturn(catalog);
    containsTable=DqRepositoryViewService.isContainsView(dataProvider,catalog,tablePattern);
    Mockito.verify(metaData).getTables(catalogName,null,tablePattern,DqRepositoryViewService.VIEW_TYPES);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(catalog).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,catalog);
  assertTrue(containsTable);
}",0.9798983874530596
127324,"@Test public void testIsContainsTableConnectionSchemaString(){
  String schemaName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Schema schema=null;
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(null,schemaName,tablePattern,DqRepositoryViewService.TABLE_TYPES)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    schema=Mockito.mock(Schema.class);
    Mockito.when(schema.getName()).thenReturn(schemaName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(schema)).thenReturn(schema);
    Mockito.when(PackageHelper.getParentPackage(schema)).thenReturn(null);
    containsTable=DqRepositoryViewService.isContainsTable(dataProvider,schema,tablePattern);
    Mockito.verify(metaData).getTables(null,schemaName,tablePattern,DqRepositoryViewService.TABLE_TYPES);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(schema).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,schema);
  assertTrue(containsTable);
}","@Test public void testIsContainsTableConnectionSchemaString(){
  String schemaName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Schema schema=null;
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(null,schemaName,tablePattern,DqRepositoryViewService.TABLE_TYPES)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    schema=Mockito.mock(Schema.class);
    Mockito.when(schema.getName()).thenReturn(schemaName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    Mockito.when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(schema)).thenReturn(schema);
    Mockito.when(PackageHelper.getParentPackage(schema)).thenReturn(null);
    containsTable=DqRepositoryViewService.isContainsTable(dataProvider,schema,tablePattern);
    Mockito.verify(metaData).getTables(null,schemaName,tablePattern,DqRepositoryViewService.TABLE_TYPES);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(schema).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,schema);
  assertTrue(containsTable);
}",0.9781722235548092
127325,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#isContainsTable(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String)}.
 */
@Test public void testIsContainsTableConnectionCatalogString(){
  String catalogName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Catalog catalog=null;
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(catalogName,null,tablePattern,DqRepositoryViewService.TABLE_TYPES)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    catalog=Mockito.mock(Catalog.class);
    Mockito.when(catalog.getName()).thenReturn(catalogName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(catalog)).thenReturn(catalog);
    containsTable=DqRepositoryViewService.isContainsTable(dataProvider,catalog,tablePattern);
    Mockito.verify(metaData).getTables(catalogName,null,tablePattern,DqRepositoryViewService.TABLE_TYPES);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(catalog).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,catalog);
  assertTrue(containsTable);
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#isContainsTable(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String)}.
 */
@Test public void testIsContainsTableConnectionCatalogString(){
  String catalogName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Catalog catalog=null;
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(catalogName,null,tablePattern,DqRepositoryViewService.TABLE_TYPES)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    catalog=Mockito.mock(Catalog.class);
    Mockito.when(catalog.getName()).thenReturn(catalogName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    Mockito.when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(catalog)).thenReturn(catalog);
    containsTable=DqRepositoryViewService.isContainsTable(dataProvider,catalog,tablePattern);
    Mockito.verify(metaData).getTables(catalogName,null,tablePattern,DqRepositoryViewService.TABLE_TYPES);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(catalog).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,catalog);
  assertTrue(containsTable);
}",0.9799426934097422
127326,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getViews(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Schema,java.lang.String,boolean)}.
 */
@Test public void testGetViewsConnectionSchemaStringBoolean(){
  java.sql.Connection sqlConn=null;
  DatabaseMetaData metaData=null;
  String schemaName=""String_Node_Str"";
  List<TdView> tableList=new ArrayList<TdView>();
  List<TdView> retableList=new ArrayList<TdView>();
  List<TdView> resultList1=null;
  List<TdView> resultList2=null;
  List<TdView> resultList3=null;
  String tablePattern=null;
  boolean loadFromDB=true;
  TdView tableMock=Mockito.mock(TdView.class);
  retableList.add(tableMock);
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Connection dataProvider=Mockito.mock(DatabaseConnection.class);
    Catalog catalog=Mockito.mock(Catalog.class);
    Schema schema=Mockito.mock(Schema.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    ReturnCode rc=new ReturnCode(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getViews(schema)).thenReturn(tableList);
    MetadataFillFactory metadataMock=Mockito.mock(MetadataFillFactory.class);
    Mockito.when(metadataMock.fillViews(Mockito.eq(schema),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),Mockito.eq(DqRepositoryViewService.VIEW_TYPES))).thenReturn(retableList).thenReturn(retableList);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(metadataMock);
    PowerMockito.mockStatic(ConnectionUtils.class);
    Mockito.when(ConnectionUtils.closeConnection(sqlConn)).thenReturn(rc);
    PowerMockito.mockStatic(SchemaHelper.class);
    Mockito.when(SchemaHelper.getViews(schema)).thenReturn(retableList);
    PowerMockito.mockStatic(CatalogHelper.class);
    Mockito.when(CatalogHelper.getParentCatalog(schema)).thenReturn(catalog);
    resultList1=DqRepositoryViewService.getViews(dataProvider,schema,tablePattern,loadFromDB);
    tableList.add(tableMock);
    resultList2=DqRepositoryViewService.getViews(dataProvider,schema,tablePattern,loadFromDB);
    loadFromDB=false;
    resultList3=DqRepositoryViewService.getViews(dataProvider,schema,tablePattern,loadFromDB);
    Mockito.verify(metadataMock,Mockito.times(2)).fillViews(Mockito.eq(schema),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),Mockito.eq(DqRepositoryViewService.VIEW_TYPES));
    Mockito.verify(metadataMock).setLinked(true);
    Mockito.verify(metadataMock).setLinked(false);
    Mockito.verifyZeroInteractions(tableMock,tables,dataProvider,schema,sqlConn,metaData,metadataMock,catalog);
    assertTrue(resultList1.size() == 1);
    assertTrue(resultList2.size() == 1);
    assertTrue(resultList3.size() == 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getViews(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Schema,java.lang.String,boolean)}.
 */
@Test public void testGetViewsConnectionSchemaStringBoolean(){
  java.sql.Connection sqlConn=null;
  DatabaseMetaData metaData=null;
  String schemaName=""String_Node_Str"";
  List<TdView> tableList=new ArrayList<TdView>();
  List<TdView> retableList=new ArrayList<TdView>();
  List<TdView> resultList1=null;
  List<TdView> resultList2=null;
  List<TdView> resultList3=null;
  String tablePattern=null;
  boolean loadFromDB=true;
  TdView tableMock=Mockito.mock(TdView.class);
  retableList.add(tableMock);
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Connection dataProvider=Mockito.mock(DatabaseConnection.class);
    Catalog catalog=Mockito.mock(Catalog.class);
    Schema schema=Mockito.mock(Schema.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    ReturnCode rc=new ReturnCode(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    Mockito.when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getViews(schema)).thenReturn(tableList);
    MetadataFillFactory metadataMock=Mockito.mock(MetadataFillFactory.class);
    Mockito.when(metadataMock.fillViews(Mockito.eq(schema),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),Mockito.eq(DqRepositoryViewService.VIEW_TYPES))).thenReturn(retableList).thenReturn(retableList);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(metadataMock);
    PowerMockito.mockStatic(ConnectionUtils.class);
    Mockito.when(ConnectionUtils.closeConnection(sqlConn)).thenReturn(rc);
    PowerMockito.mockStatic(SchemaHelper.class);
    Mockito.when(SchemaHelper.getViews(schema)).thenReturn(retableList);
    PowerMockito.mockStatic(CatalogHelper.class);
    Mockito.when(CatalogHelper.getParentCatalog(schema)).thenReturn(catalog);
    resultList1=DqRepositoryViewService.getViews(dataProvider,schema,tablePattern,loadFromDB);
    tableList.add(tableMock);
    resultList2=DqRepositoryViewService.getViews(dataProvider,schema,tablePattern,loadFromDB);
    loadFromDB=false;
    resultList3=DqRepositoryViewService.getViews(dataProvider,schema,tablePattern,loadFromDB);
    Mockito.verify(metadataMock,Mockito.times(2)).fillViews(Mockito.eq(schema),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),Mockito.eq(DqRepositoryViewService.VIEW_TYPES));
    Mockito.verify(metadataMock).setLinked(true);
    Mockito.verify(metadataMock).setLinked(false);
    Mockito.verifyZeroInteractions(tableMock,tables,dataProvider,schema,sqlConn,metaData,metadataMock,catalog);
    assertTrue(resultList1.size() == 1);
    assertTrue(resultList2.size() == 1);
    assertTrue(resultList3.size() == 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}",0.986643688065489
127327,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.ExtractMetaDataFromDataBase#getTableNamesFromQuery(java.sql.ResultSet)}.
 * @throws SQLException
 */
@Test public void testGetTableNamesFromQuery() throws SQLException {
  assertTrue(ExtractMetaDataFromDataBase.tableCommentsMap instanceof HashMap<?,?>);
  assertTrue(ExtractMetaDataFromDataBase.tableCommentsMap.isEmpty());
  ResultSet mockResultSet=mock(ResultSet.class);
  when(mockResultSet.getString(1)).thenReturn(""String_Node_Str"");
  String nameKey=mockResultSet.getString(1).trim();
  String tableComment=ExtractMetaDataFromDataBase.getTableComment(nameKey,mockResultSet,false,ExtractMetaDataUtils.conn);
  assertNotNull(tableComment);
  ExtractMetaDataFromDataBase.tableCommentsMap.put(nameKey,tableComment);
  assertNotNull(ExtractMetaDataFromDataBase.tableCommentsMap);
  assertNotNull(ExtractMetaDataFromDataBase.getTableNamesFromQuery(mockResultSet,ExtractMetaDataUtils.conn));
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.ExtractMetaDataFromDataBase#getTableNamesFromQuery(java.sql.ResultSet)}.
 * @throws SQLException
 */
@Test public void testGetTableNamesFromQuery() throws SQLException {
  assertTrue(ExtractMetaDataFromDataBase.tableCommentsMap instanceof HashMap<?,?>);
  assertTrue(ExtractMetaDataFromDataBase.tableCommentsMap.isEmpty());
  ResultSet mockResultSet=mock(ResultSet.class);
  when(mockResultSet.getString(1)).thenReturn(""String_Node_Str"");
  String nameKey=mockResultSet.getString(1).trim();
  String tableComment=ExtractMetaDataFromDataBase.getTableComment(nameKey,mockResultSet,false,ExtractMetaDataUtils.getInstance().getConn());
  assertNotNull(tableComment);
  ExtractMetaDataFromDataBase.tableCommentsMap.put(nameKey,tableComment);
  assertNotNull(ExtractMetaDataFromDataBase.tableCommentsMap);
  assertNotNull(ExtractMetaDataFromDataBase.getTableNamesFromQuery(mockResultSet,ExtractMetaDataUtils.getInstance().getConn()));
}",0.9727547931382442
127328,"@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  boolean visitChildren=false;
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      visitChildren=false;
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new TopLevelNodeRunnable(repoNode){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
      }
    }
  }
  return visitChildren;
}","@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  boolean visitChildren=true;
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      visitChildren=false;
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new TopLevelNodeRunnable(repoNode){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
      }
    }
  }
  return visitChildren;
}",0.9959183673469388
127329,"private boolean ingoreResource(IResourceDelta delta){
  IResource resource=delta.getResource();
  if (resource != null) {
    try {
      if (resource.getProject() != null && !resource.getProject().hasNature(TalendNature.ID)) {
        return false;
      }
    }
 catch (    CoreException e) {
      return false;
    }
    if (FilesUtils.isSVNFolder(resource)) {
      return true;
    }
  }
  return false;
}","private boolean ingoreResource(IResourceDelta delta){
  IResource resource=delta.getResource();
  if (resource != null) {
    try {
      if (resource.getProject() != null && !resource.getProject().hasNature(TalendNature.ID)) {
        return true;
      }
    }
 catch (    CoreException e) {
      return false;
    }
    if (FilesUtils.isSVNFolder(resource)) {
      return true;
    }
  }
  return false;
}",0.9914738124238732
127330,"@Override public boolean validateDrop(Object target,int operation,TransferData transferType){
  if (target == null) {
    return false;
  }
  super.validateDrop(target,operation,transferType);
  boolean isValid=true;
  for (  Object obj : ((StructuredSelection)getViewer().getSelection()).toArray()) {
    RepositoryNode sourceNode=(RepositoryNode)obj;
    if (sourceNode != null) {
      IRepositoryViewObject object=sourceNode.getObject();
      if (object == null) {
        return false;
      }
      if (object.getRepositoryObjectType() == ERepositoryObjectType.JOB_DOC || object.getRepositoryObjectType() == ERepositoryObjectType.JOBLET_DOC) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
          IDiagramModelService diagramModelService=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
          if (diagramModelService != null && BusinessType.SHAP == diagramModelService.getBusinessModelType(target)) {
            return true;
          }
        }
        return false;
      }
 else       if (object.getRepositoryObjectType() == ERepositoryObjectType.ROUTINES) {
        Property property=object.getProperty();
        RoutineItem item=(RoutineItem)property.getItem();
        if (item.isBuiltIn() && target instanceof RepositoryNode) {
          return false;
        }
      }
 else       if (object.getRepositoryObjectType() == ERepositoryObjectType.SQLPATTERNS) {
        Property property=object.getProperty();
        SQLPatternItem item=(SQLPatternItem)property.getItem();
        if (item.isSystem() && target instanceof RepositoryNode) {
          return false;
        }
      }
 else       if (object.getRepositoryObjectType() == ERepositoryObjectType.PROCESS_MR) {
        if (target instanceof RepositoryNode) {
          RepositoryNode targetRN=(RepositoryNode)target;
          if (ENodeType.SYSTEM_FOLDER == targetRN.getType() || ENodeType.SIMPLE_FOLDER == targetRN.getType()) {
            if (targetRN.getContentType() == ERepositoryObjectType.PROCESS) {
              return isValid=true;
            }
          }
        }
      }
 else       if (object.getRepositoryObjectType() == ERepositoryObjectType.PROCESS) {
        if (target instanceof RepositoryNode) {
          RepositoryNode targetRN=(RepositoryNode)target;
          if (ENodeType.SYSTEM_FOLDER == targetRN.getType() || ENodeType.SIMPLE_FOLDER == targetRN.getType()) {
            if (targetRN.getContentType() == ERepositoryObjectType.PROCESS_MR) {
              return isValid=true;
            }
          }
        }
      }
    }
switch (operation) {
case DND.DROP_COPY:
      isValid=CopyObjectAction.getInstance().validateAction(sourceNode,(RepositoryNode)target);
    break;
case DND.DROP_MOVE:
  isValid=MoveObjectAction.getInstance().validateAction(sourceNode,(RepositoryNode)target,true);
break;
case DND.DROP_DEFAULT:
case DND.Drop:
isValid=MoveObjectAction.getInstance().validateAction(sourceNode,(RepositoryNode)target,true);
break;
default :
isValid=false;
}
}
return isValid;
}","@Override public boolean validateDrop(Object target,int operation,TransferData transferType){
  if (target == null) {
    return false;
  }
  super.validateDrop(target,operation,transferType);
  boolean isValid=true;
  for (  Object obj : ((StructuredSelection)getViewer().getSelection()).toArray()) {
    if (!(obj instanceof RepositoryNode)) {
      return false;
    }
    RepositoryNode sourceNode=(RepositoryNode)obj;
    if (sourceNode != null) {
      IRepositoryViewObject object=sourceNode.getObject();
      if (object == null) {
        return false;
      }
      if (object.getRepositoryObjectType() == ERepositoryObjectType.JOB_DOC || object.getRepositoryObjectType() == ERepositoryObjectType.JOBLET_DOC) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
          IDiagramModelService diagramModelService=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
          if (diagramModelService != null && BusinessType.SHAP == diagramModelService.getBusinessModelType(target)) {
            return true;
          }
        }
        return false;
      }
 else       if (object.getRepositoryObjectType() == ERepositoryObjectType.ROUTINES) {
        Property property=object.getProperty();
        RoutineItem item=(RoutineItem)property.getItem();
        if (item.isBuiltIn() && target instanceof RepositoryNode) {
          return false;
        }
      }
 else       if (object.getRepositoryObjectType() == ERepositoryObjectType.SQLPATTERNS) {
        Property property=object.getProperty();
        SQLPatternItem item=(SQLPatternItem)property.getItem();
        if (item.isSystem() && target instanceof RepositoryNode) {
          return false;
        }
      }
 else       if (object.getRepositoryObjectType() == ERepositoryObjectType.PROCESS_MR) {
        if (target instanceof RepositoryNode) {
          RepositoryNode targetRN=(RepositoryNode)target;
          if (ENodeType.SYSTEM_FOLDER == targetRN.getType() || ENodeType.SIMPLE_FOLDER == targetRN.getType()) {
            if (targetRN.getContentType() == ERepositoryObjectType.PROCESS) {
              return isValid=true;
            }
          }
        }
      }
 else       if (object.getRepositoryObjectType() == ERepositoryObjectType.PROCESS) {
        if (target instanceof RepositoryNode) {
          RepositoryNode targetRN=(RepositoryNode)target;
          if (ENodeType.SYSTEM_FOLDER == targetRN.getType() || ENodeType.SIMPLE_FOLDER == targetRN.getType()) {
            if (targetRN.getContentType() == ERepositoryObjectType.PROCESS_MR) {
              return isValid=true;
            }
          }
        }
      }
    }
switch (operation) {
case DND.DROP_COPY:
      isValid=CopyObjectAction.getInstance().validateAction(sourceNode,(RepositoryNode)target);
    break;
case DND.DROP_MOVE:
  isValid=MoveObjectAction.getInstance().validateAction(sourceNode,(RepositoryNode)target,true);
break;
case DND.DROP_DEFAULT:
case DND.Drop:
isValid=MoveObjectAction.getInstance().validateAction(sourceNode,(RepositoryNode)target,true);
break;
default :
isValid=false;
}
}
return isValid;
}",0.988814317673378
127331,"@Override public void dragStart(DragSourceEvent event){
  ISelection selection=RepoViewCommonViewer.this.getSelection();
  for (  Object obj : ((StructuredSelection)selection).toArray()) {
    RepositoryNode sourceNode=(RepositoryNode)obj;
    event.doit=MoveObjectAction.getInstance().validateAction(sourceNode,null,true);
  }
  LocalSelectionTransfer.getTransfer().setSelection(selection);
  LocalSelectionTransfer.getTransfer().setSelectionSetTime(event.time & FFFFFFFFL);
}","@Override public void dragStart(DragSourceEvent event){
  ISelection selection=RepoViewCommonViewer.this.getSelection();
  for (  Object obj : ((StructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode sourceNode=(RepositoryNode)obj;
      event.doit=MoveObjectAction.getInstance().validateAction(sourceNode,null,true);
    }
  }
  LocalSelectionTransfer.getTransfer().setSelection(selection);
  LocalSelectionTransfer.getTransfer().setSelectionSetTime(event.time & FFFFFFFFL);
}",0.9492537313432836
127332,"@Override protected void initDragAndDrop(){
  int ops=DND.DROP_COPY | DND.DROP_MOVE | DND.DROP_LINK;
  Transfer[] transfers=new Transfer[]{LocalSelectionTransfer.getTransfer()};
  this.addDragSupport(ops,transfers,new DragSourceAdapter(){
    private static final long FFFFFFFFL=0xFFFFFFFFL;
    @Override public void dragSetData(    DragSourceEvent event){
      repViewCommonNavigator.setNoNeedUpdate(true);
      event.data=LocalSelectionTransfer.getTransfer().getSelection();
    }
    @Override public void dragStart(    DragSourceEvent event){
      ISelection selection=RepoViewCommonViewer.this.getSelection();
      for (      Object obj : ((StructuredSelection)selection).toArray()) {
        RepositoryNode sourceNode=(RepositoryNode)obj;
        event.doit=MoveObjectAction.getInstance().validateAction(sourceNode,null,true);
      }
      LocalSelectionTransfer.getTransfer().setSelection(selection);
      LocalSelectionTransfer.getTransfer().setSelectionSetTime(event.time & FFFFFFFFL);
    }
    @Override public void dragFinished(    DragSourceEvent event){
      repViewCommonNavigator.dragFinished();
    }
  }
);
  RepositoryDropAdapter adapter=new RepositoryDropAdapter(this);
  adapter.setFeedbackEnabled(false);
  this.addDropSupport(ops | DND.DROP_DEFAULT,transfers,adapter);
}","@Override protected void initDragAndDrop(){
  int ops=DND.DROP_COPY | DND.DROP_MOVE | DND.DROP_LINK;
  Transfer[] transfers=new Transfer[]{LocalSelectionTransfer.getTransfer()};
  this.addDragSupport(ops,transfers,new DragSourceAdapter(){
    private static final long FFFFFFFFL=0xFFFFFFFFL;
    @Override public void dragSetData(    DragSourceEvent event){
      repViewCommonNavigator.setNoNeedUpdate(true);
      event.data=LocalSelectionTransfer.getTransfer().getSelection();
    }
    @Override public void dragStart(    DragSourceEvent event){
      ISelection selection=RepoViewCommonViewer.this.getSelection();
      for (      Object obj : ((StructuredSelection)selection).toArray()) {
        if (obj instanceof RepositoryNode) {
          RepositoryNode sourceNode=(RepositoryNode)obj;
          event.doit=MoveObjectAction.getInstance().validateAction(sourceNode,null,true);
        }
      }
      LocalSelectionTransfer.getTransfer().setSelection(selection);
      LocalSelectionTransfer.getTransfer().setSelectionSetTime(event.time & FFFFFFFFL);
    }
    @Override public void dragFinished(    DragSourceEvent event){
      repViewCommonNavigator.dragFinished();
    }
  }
);
  RepositoryDropAdapter adapter=new RepositoryDropAdapter(this);
  adapter.setFeedbackEnabled(false);
  this.addDropSupport(ops | DND.DROP_DEFAULT,transfers,adapter);
}",0.9680571213829388
127333,"/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  Listener listener=new Listener(){
    @Override public void handleEvent(    final Event e){
      if (isContextMode()) {
      }
 else {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
        setPropertiesFormEditable(dbTypeCombo.getSelectionIndex() > -1);
        urlConnectionStringText.setEditable(false);
      }
    }
  }
;
  usernameText.addListener(SWT.FocusIn,listener);
  passwordText.addListener(SWT.FocusIn,listener);
  serverText.addListener(SWT.FocusIn,listener);
  portText.addListener(SWT.FocusIn,listener);
  sidOrDatabaseText.addListener(SWT.FocusIn,listener);
  datasourceText.addListener(SWT.FocusIn,listener);
  schemaText.addListener(SWT.FocusIn,listener);
  additionParamText.addListener(SWT.FocusIn,listener);
  urlConnectionStringText.addListener(SWT.FocusIn,listener);
  mappingFileText.addListener(SWT.FocusIn,listener);
  serverText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setServerName(serverText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setPort(portText.getText());
          modifyFieldValue();
        }
        boolean b=true;
        String databaseType=getConnection().getDatabaseType();
        if (databaseType != null) {
          if (databaseType.equals(""String_Node_Str"")) {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
 else {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
        }
        if (b) {
          b=portText.getText().length() <= 5;
        }
        evaluateTextField(b);
      }
    }
  }
);
  portText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (!Character.isLetterOrDigit(e.character) && !Character.isIdentifierIgnorable(e.character)) {
        e.doit=false;
      }
    }
  }
);
  usernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUsername(usernameText.getText());
        }
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          try {
            String password=PasswordEncryptUtil.encryptPassword(passwordText.getText());
            getConnection().setPassword(password);
          }
 catch (          Exception ex) {
            ExceptionHandler.process(ex);
          }
        }
      }
    }
  }
);
  sidOrDatabaseText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setSID(sidOrDatabaseText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  datasourceText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setDatasourceName(datasourceText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUiSchema(schemaText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      if (!isContextMode()) {
        if (originalUischema != null) {
          if (!originalUischema.equalsIgnoreCase(schemaText.getText())) {
            ConnectionHelper.setIsConnNeedReload(getConnection(),Boolean.TRUE);
          }
 else {
            checkURLIsChanged();
          }
        }
      }
    }
  }
);
  dbVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        if (version != null) {
          getConnection().setDbVersionString(version.getVersionValue());
        }
        urlConnectionStringText.setText(getStringConnection());
        checkFieldsValue();
      }
    }
  }
);
  hideDbVersion();
  additionParamText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setAdditionalParams(additionParamText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  standardButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  systemButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  button1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(button1.getSelection());
      }
    }
  }
);
  button2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(!button2.getSelection());
      }
    }
  }
);
  dbTypeCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().clear();
      boolean isGeneralJDBC=isGeneralJDBC();
      if (isGeneralJDBC) {
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(""String_Node_Str"");
        }
        if (generalJdbcUserText != null) {
          generalJdbcUserText.setText(""String_Node_Str"");
        }
        if (generalJdbcPasswordText != null) {
          generalJdbcPasswordText.setText(""String_Node_Str"");
        }
      }
 else       if (isHiveDBConnSelected()) {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
        initHiveInfo();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.HBASE)) {
        initHBaseSettings();
      }
 else {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
      }
      if (schemaText != null) {
        schemaText.setText(""String_Node_Str"");
      }
      if (serverText != null) {
        serverText.setText(""String_Node_Str"");
      }
      if (sidOrDatabaseText != null) {
        sidOrDatabaseText.setText(""String_Node_Str"");
      }
      if (portText != null && portText.getText() != null) {
        portText.setText(""String_Node_Str"");
      }
      if (fileField != null) {
        fileField.setText(""String_Node_Str"");
      }
      if (datasourceText != null) {
        datasourceText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (generalJdbcClassNameText != null) {
        generalJdbcClassNameText.setText(""String_Node_Str"");
      }
      if (generalJdbcDriverjarText != null) {
        generalJdbcDriverjarText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (mappingFileText != null) {
        mappingFileText.setText(""String_Node_Str"");
      }
      boolean hiddenGeneral=!isGeneralJDBC();
      switchBetweenTypeandGeneralDB(hiddenGeneral);
      if (!isContextMode()) {
        getConnection().setDatabaseType(dbTypeCombo.getText());
        EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
        if (template != null) {
          portText.setText(template.getDefaultPort());
        }
        final String product=EDatabaseTypeName.getTypeFromDisplayName(getConnection().getDatabaseType()).getProduct();
        getConnection().setProductId(product);
        String mapping=null;
        if (product == null || product.equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          mapping=generalMappingFileText.getText();
        }
 else {
          if (MetadataTalendType.getDefaultDbmsFromProduct(product) != null) {
            mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
          }
        }
        if (mapping == null) {
          mapping=""String_Node_Str"";
        }
        getConnection().setDbmsId(mapping);
        setPropertiesFormEditable(true);
        additionParamText.setText(EDatabaseConnTemplate.getAdditionProperty(dbTypeCombo.getText()));
        if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
          datasourceText.setLabelText(Messages.getString(""String_Node_Str""));
        }
        checkAndSetIniSQLModel();
        checkAS400SpecificCase();
        checkFieldsValue();
        hideDbVersion();
        if (!schemaText.getEditable()) {
          schemaText.setText(""String_Node_Str"");
        }
        if (isHiveDBConnSelected()) {
          doHiveDBTypeSelected();
        }
 else {
          doHiveDBTypeNotSelected();
        }
      }
      if (isHiveDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      }
 else {
        checkScrolledCompositeSize();
      }
      if (!isDBTypeSelected(EDatabaseConnTemplate.HBASE) && !isDBTypeSelected(EDatabaseConnTemplate.HIVE)) {
        clearHadoopRelatedParameters();
      }
    }
  }
);
  fileField.addListener(SWT.FocusIn,new Listener(){
    @Override public void handleEvent(    final Event e){
      if (!isContextMode()) {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
 else {
          EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
          EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(getConnection().getDbVersionString());
          if (template != null && template.getUrlTemplate(version).contains(EDatabaseConnVar.FILENAME.getVariable())) {
            setPropertiesFormEditable(true);
            urlConnectionStringText.setEditable(false);
          }
          getConnection().setFileFieldName(PathUtils.getPortablePath(fileField.getText()));
        }
      }
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setFileFieldName(fileField.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  directoryField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          String text=directoryField.getText();
          getConnection().setDBRootPath(text);
          checkFieldsValue();
        }
      }
    }
  }
);
  sqlSyntaxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setSqlSynthax(sqlSyntaxCombo.getText());
      }
    }
  }
);
  nullCharText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setNullChar(nullCharText.getText());
      }
    }
  }
);
  stringQuoteText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setStringQuote(stringQuoteText.getText());
      }
    }
  }
);
  addGeneralDbFieldsListeners();
  addHBaseSettingFieldsListeners();
  regHiveRelatedWidgetsListeners();
  if (canLinkToHadoopCluster()) {
    addHadoopClusterLinkListeners();
  }
}","/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  Listener listener=new Listener(){
    @Override public void handleEvent(    final Event e){
      if (isContextMode()) {
      }
 else {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
        setPropertiesFormEditable(dbTypeCombo.getSelectionIndex() > -1);
        urlConnectionStringText.setEditable(false);
      }
    }
  }
;
  usernameText.addListener(SWT.FocusIn,listener);
  passwordText.addListener(SWT.FocusIn,listener);
  serverText.addListener(SWT.FocusIn,listener);
  portText.addListener(SWT.FocusIn,listener);
  sidOrDatabaseText.addListener(SWT.FocusIn,listener);
  datasourceText.addListener(SWT.FocusIn,listener);
  schemaText.addListener(SWT.FocusIn,listener);
  additionParamText.addListener(SWT.FocusIn,listener);
  urlConnectionStringText.addListener(SWT.FocusIn,listener);
  mappingFileText.addListener(SWT.FocusIn,listener);
  serverText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setServerName(serverText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setPort(portText.getText());
          modifyFieldValue();
        }
        boolean b=true;
        String databaseType=getConnection().getDatabaseType();
        if (databaseType != null) {
          if (databaseType.equals(""String_Node_Str"")) {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
 else {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
        }
        if (b) {
          b=portText.getText().length() <= 5;
        }
        evaluateTextField(b);
      }
    }
  }
);
  portText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (!Character.isLetterOrDigit(e.character) && !Character.isIdentifierIgnorable(e.character)) {
        e.doit=false;
      }
    }
  }
);
  usernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUsername(usernameText.getText());
          getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,usernameText.getText());
        }
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          try {
            String password=PasswordEncryptUtil.encryptPassword(passwordText.getText());
            getConnection().setPassword(password);
          }
 catch (          Exception ex) {
            ExceptionHandler.process(ex);
          }
        }
      }
    }
  }
);
  sidOrDatabaseText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setSID(sidOrDatabaseText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  datasourceText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setDatasourceName(datasourceText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUiSchema(schemaText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      if (!isContextMode()) {
        if (originalUischema != null) {
          if (!originalUischema.equalsIgnoreCase(schemaText.getText())) {
            ConnectionHelper.setIsConnNeedReload(getConnection(),Boolean.TRUE);
          }
 else {
            checkURLIsChanged();
          }
        }
      }
    }
  }
);
  dbVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        if (version != null) {
          getConnection().setDbVersionString(version.getVersionValue());
        }
        urlConnectionStringText.setText(getStringConnection());
        checkFieldsValue();
      }
    }
  }
);
  hideDbVersion();
  additionParamText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setAdditionalParams(additionParamText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  standardButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  systemButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  button1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(button1.getSelection());
      }
    }
  }
);
  button2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(!button2.getSelection());
      }
    }
  }
);
  dbTypeCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().clear();
      boolean isGeneralJDBC=isGeneralJDBC();
      if (isGeneralJDBC) {
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(""String_Node_Str"");
        }
        if (generalJdbcUserText != null) {
          generalJdbcUserText.setText(""String_Node_Str"");
        }
        if (generalJdbcPasswordText != null) {
          generalJdbcPasswordText.setText(""String_Node_Str"");
        }
      }
 else       if (isHiveDBConnSelected()) {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
        initHiveInfo();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.HBASE)) {
        initHBaseSettings();
      }
 else {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
      }
      if (schemaText != null) {
        schemaText.setText(""String_Node_Str"");
      }
      if (serverText != null) {
        serverText.setText(""String_Node_Str"");
      }
      if (sidOrDatabaseText != null) {
        sidOrDatabaseText.setText(""String_Node_Str"");
      }
      if (portText != null && portText.getText() != null) {
        portText.setText(""String_Node_Str"");
      }
      if (fileField != null) {
        fileField.setText(""String_Node_Str"");
      }
      if (datasourceText != null) {
        datasourceText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (generalJdbcClassNameText != null) {
        generalJdbcClassNameText.setText(""String_Node_Str"");
      }
      if (generalJdbcDriverjarText != null) {
        generalJdbcDriverjarText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (mappingFileText != null) {
        mappingFileText.setText(""String_Node_Str"");
      }
      boolean hiddenGeneral=!isGeneralJDBC();
      switchBetweenTypeandGeneralDB(hiddenGeneral);
      if (!isContextMode()) {
        getConnection().setDatabaseType(dbTypeCombo.getText());
        EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
        if (template != null) {
          portText.setText(template.getDefaultPort());
        }
        final String product=EDatabaseTypeName.getTypeFromDisplayName(getConnection().getDatabaseType()).getProduct();
        getConnection().setProductId(product);
        String mapping=null;
        if (product == null || product.equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          mapping=generalMappingFileText.getText();
        }
 else {
          if (MetadataTalendType.getDefaultDbmsFromProduct(product) != null) {
            mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
          }
        }
        if (mapping == null) {
          mapping=""String_Node_Str"";
        }
        getConnection().setDbmsId(mapping);
        setPropertiesFormEditable(true);
        additionParamText.setText(EDatabaseConnTemplate.getAdditionProperty(dbTypeCombo.getText()));
        if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
          datasourceText.setLabelText(Messages.getString(""String_Node_Str""));
        }
        checkAndSetIniSQLModel();
        checkAS400SpecificCase();
        checkFieldsValue();
        hideDbVersion();
        if (!schemaText.getEditable()) {
          schemaText.setText(""String_Node_Str"");
        }
        if (isHiveDBConnSelected()) {
          doHiveDBTypeSelected();
        }
 else {
          doHiveDBTypeNotSelected();
        }
      }
      if (isHiveDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      }
 else {
        checkScrolledCompositeSize();
      }
      if (!isDBTypeSelected(EDatabaseConnTemplate.HBASE) && !isDBTypeSelected(EDatabaseConnTemplate.HIVE)) {
        clearHadoopRelatedParameters();
      }
    }
  }
);
  fileField.addListener(SWT.FocusIn,new Listener(){
    @Override public void handleEvent(    final Event e){
      if (!isContextMode()) {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
 else {
          EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
          EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(getConnection().getDbVersionString());
          if (template != null && template.getUrlTemplate(version).contains(EDatabaseConnVar.FILENAME.getVariable())) {
            setPropertiesFormEditable(true);
            urlConnectionStringText.setEditable(false);
          }
          getConnection().setFileFieldName(PathUtils.getPortablePath(fileField.getText()));
        }
      }
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setFileFieldName(fileField.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  directoryField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          String text=directoryField.getText();
          getConnection().setDBRootPath(text);
          checkFieldsValue();
        }
      }
    }
  }
);
  sqlSyntaxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setSqlSynthax(sqlSyntaxCombo.getText());
      }
    }
  }
);
  nullCharText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setNullChar(nullCharText.getText());
      }
    }
  }
);
  stringQuoteText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setStringQuote(stringQuoteText.getText());
      }
    }
  }
);
  addGeneralDbFieldsListeners();
  addHBaseSettingFieldsListeners();
  regHiveRelatedWidgetsListeners();
  if (canLinkToHadoopCluster()) {
    addHadoopClusterLinkListeners();
  }
}",0.9959043370145544
127334,"@Override public IRepositoryViewObject getLastVersion(Project project,String id,String relativeFolder,ERepositoryObjectType type) throws PersistenceException {
  List<IRepositoryViewObject> serializableAllVersion=null;
  Object fullFolder=getFullFolder(project,type,relativeFolder);
  serializableAllVersion=getSerializableFromFolder(project,fullFolder,id,type,false,false,false,true);
  if (serializableAllVersion.isEmpty()) {
    serializableAllVersion=getSerializable(project,id,true,false);
  }
  int size=serializableAllVersion.size();
  if (size > 1) {
    String message=getItemsMessages(serializableAllVersion,size);
    throw new PersistenceException(Messages.getString(""String_Node_Str"",message));
  }
 else   if (size == 1) {
    return serializableAllVersion.get(0);
  }
 else {
    return null;
  }
}","@Override public IRepositoryViewObject getLastVersion(Project project,String id,String relativeFolder,ERepositoryObjectType type) throws PersistenceException {
  List<IRepositoryViewObject> serializableAllVersion=null;
  Object fullFolder=getFullFolder(project,type,relativeFolder);
  serializableAllVersion=getSerializableFromFolder(project,fullFolder,id,type,false,false,true,true);
  if (serializableAllVersion.isEmpty()) {
    serializableAllVersion=getSerializable(project,id,false,false);
  }
  int size=serializableAllVersion.size();
  if (size > 1) {
    String message=getItemsMessages(serializableAllVersion,size);
    throw new PersistenceException(Messages.getString(""String_Node_Str"",message));
  }
 else   if (size == 1) {
    return serializableAllVersion.get(0);
  }
 else {
    return null;
  }
}",0.991389913899139
127335,"@Override protected void run() throws LoginException, PersistenceException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (!monitor.isCanceled()) {
    final ManagerConnection managerConnection=new ManagerConnection();
    DatabaseConnection connection=(DatabaseConnection)item.getConnection();
    String oldContextName=connection.getContextName();
    IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
    String newContextName=connection.getContextName();
    if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
      if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
        Item itemTemp=node.getObject().getProperty().getItem();
        if (itemTemp != null && itemTemp instanceof ConnectionItem) {
          ConnectionItem connItem=(ConnectionItem)itemTemp;
          SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
        }
      }
    }
    if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        metadataConnection.setUrl(connection.getURL());
        if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
          JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
        }
      }
 else {
        String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
        metadataConnection.setUrl(genUrl);
      }
    }
    if (connection != null) {
      EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
      Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
      ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
    }
    if (creation) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        try {
          HiveConnectionManager.getInstance().checkConnection(metadataConnection);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        managerConnection.check(metadataConnection);
      }
      ExtractMetaDataUtils.setUseAllSynonyms(false);
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      wizardDialog.setBlockOnOpen(true);
      handleWizard(node,wizardDialog);
    }
 else {
      final boolean skipStep=true;
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      databaseTableWizard.setSkipStep(skipStep);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      handleWizard(node,wizardDialog);
    }
  }
}","@Override protected void run() throws LoginException, PersistenceException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (!monitor.isCanceled()) {
    final ManagerConnection managerConnection=new ManagerConnection();
    DatabaseConnection connection=(DatabaseConnection)item.getConnection();
    String oldContextName=connection.getContextName();
    IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
    String newContextName=connection.getContextName();
    if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
      if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
        Item itemTemp=node.getObject().getProperty().getItem();
        if (itemTemp != null && itemTemp instanceof ConnectionItem) {
          ConnectionItem connItem=(ConnectionItem)itemTemp;
          SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
        }
      }
    }
    if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        metadataConnection.setUrl(connection.getURL());
        if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
          JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
        }
      }
 else {
        String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
        metadataConnection.setUrl(genUrl);
      }
    }
    if (connection != null) {
      EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
      Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
      ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
    }
    if (creation) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        try {
          HiveConnectionManager.getInstance().checkConnection(metadataConnection);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        managerConnection.check(metadataConnection);
      }
      ExtractMetaDataUtils.getInstance().setUseAllSynonyms(false);
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      wizardDialog.setBlockOnOpen(true);
      handleWizard(node,wizardDialog);
    }
 else {
      final boolean skipStep=true;
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      databaseTableWizard.setSkipStep(skipStep);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      handleWizard(node,wizardDialog);
    }
  }
}",0.9982686124165224
127336,"private void openDatabaseTableWizard(final DatabaseConnectionItem item,final MetadataTable metadataTable,final boolean forceReadOnly,final RepositoryNode node,final boolean creation){
  UIJob job=new UIJob(Messages.getString(""String_Node_Str"")){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      String name=""String_Node_Str"" + getText();
      RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
        @Override protected void run() throws LoginException, PersistenceException {
          monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
          if (!monitor.isCanceled()) {
            final ManagerConnection managerConnection=new ManagerConnection();
            DatabaseConnection connection=(DatabaseConnection)item.getConnection();
            String oldContextName=connection.getContextName();
            IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
            String newContextName=connection.getContextName();
            if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
              if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
                Item itemTemp=node.getObject().getProperty().getItem();
                if (itemTemp != null && itemTemp instanceof ConnectionItem) {
                  ConnectionItem connItem=(ConnectionItem)itemTemp;
                  SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
                }
              }
            }
            if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                metadataConnection.setUrl(connection.getURL());
                if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
                  JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
                }
              }
 else {
                String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
                metadataConnection.setUrl(genUrl);
              }
            }
            if (connection != null) {
              EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
              Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
              ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
            }
            if (creation) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                try {
                  HiveConnectionManager.getInstance().checkConnection(metadataConnection);
                }
 catch (                Exception e) {
                  e.printStackTrace();
                }
              }
 else {
                managerConnection.check(metadataConnection);
              }
              ExtractMetaDataUtils.setUseAllSynonyms(false);
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              wizardDialog.setBlockOnOpen(true);
              handleWizard(node,wizardDialog);
            }
 else {
              final boolean skipStep=true;
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              databaseTableWizard.setSkipStep(skipStep);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              handleWizard(node,wizardDialog);
            }
          }
        }
      }
;
      repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(true);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      if (!event.getResult().isOK()) {
        log.error(event.getResult().getMessage(),event.getResult().getException());
      }
    }
  }
);
  job.schedule();
}","private void openDatabaseTableWizard(final DatabaseConnectionItem item,final MetadataTable metadataTable,final boolean forceReadOnly,final RepositoryNode node,final boolean creation){
  UIJob job=new UIJob(Messages.getString(""String_Node_Str"")){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      String name=""String_Node_Str"" + getText();
      RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
        @Override protected void run() throws LoginException, PersistenceException {
          monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
          if (!monitor.isCanceled()) {
            final ManagerConnection managerConnection=new ManagerConnection();
            DatabaseConnection connection=(DatabaseConnection)item.getConnection();
            String oldContextName=connection.getContextName();
            IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
            String newContextName=connection.getContextName();
            if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
              if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
                Item itemTemp=node.getObject().getProperty().getItem();
                if (itemTemp != null && itemTemp instanceof ConnectionItem) {
                  ConnectionItem connItem=(ConnectionItem)itemTemp;
                  SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
                }
              }
            }
            if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                metadataConnection.setUrl(connection.getURL());
                if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
                  JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
                }
              }
 else {
                String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
                metadataConnection.setUrl(genUrl);
              }
            }
            if (connection != null) {
              EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
              Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
              ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
            }
            if (creation) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                try {
                  HiveConnectionManager.getInstance().checkConnection(metadataConnection);
                }
 catch (                Exception e) {
                  e.printStackTrace();
                }
              }
 else {
                managerConnection.check(metadataConnection);
              }
              ExtractMetaDataUtils.getInstance().setUseAllSynonyms(false);
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              wizardDialog.setBlockOnOpen(true);
              handleWizard(node,wizardDialog);
            }
 else {
              final boolean skipStep=true;
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              databaseTableWizard.setSkipStep(skipStep);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              handleWizard(node,wizardDialog);
            }
          }
        }
      }
;
      repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(true);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      if (!event.getResult().isOK()) {
        log.error(event.getResult().getMessage(),event.getResult().getException());
      }
    }
  }
);
  job.schedule();
}",0.9987663024321466
127337,"@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  String name=""String_Node_Str"" + getText();
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
    @Override protected void run() throws LoginException, PersistenceException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      if (!monitor.isCanceled()) {
        final ManagerConnection managerConnection=new ManagerConnection();
        DatabaseConnection connection=(DatabaseConnection)item.getConnection();
        String oldContextName=connection.getContextName();
        IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
        String newContextName=connection.getContextName();
        if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
          if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
            Item itemTemp=node.getObject().getProperty().getItem();
            if (itemTemp != null && itemTemp instanceof ConnectionItem) {
              ConnectionItem connItem=(ConnectionItem)itemTemp;
              SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
            }
          }
        }
        if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            metadataConnection.setUrl(connection.getURL());
            if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
              JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
            }
          }
 else {
            String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
            metadataConnection.setUrl(genUrl);
          }
        }
        if (connection != null) {
          EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
          Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
          ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (creation) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            try {
              HiveConnectionManager.getInstance().checkConnection(metadataConnection);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            managerConnection.check(metadataConnection);
          }
          ExtractMetaDataUtils.setUseAllSynonyms(false);
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          wizardDialog.setBlockOnOpen(true);
          handleWizard(node,wizardDialog);
        }
 else {
          final boolean skipStep=true;
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          databaseTableWizard.setSkipStep(skipStep);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          handleWizard(node,wizardDialog);
        }
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
  IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  monitor.done();
  return Status.OK_STATUS;
}","@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  String name=""String_Node_Str"" + getText();
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
    @Override protected void run() throws LoginException, PersistenceException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      if (!monitor.isCanceled()) {
        final ManagerConnection managerConnection=new ManagerConnection();
        DatabaseConnection connection=(DatabaseConnection)item.getConnection();
        String oldContextName=connection.getContextName();
        IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
        String newContextName=connection.getContextName();
        if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
          if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
            Item itemTemp=node.getObject().getProperty().getItem();
            if (itemTemp != null && itemTemp instanceof ConnectionItem) {
              ConnectionItem connItem=(ConnectionItem)itemTemp;
              SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
            }
          }
        }
        if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            metadataConnection.setUrl(connection.getURL());
            if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
              JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
            }
          }
 else {
            String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
            metadataConnection.setUrl(genUrl);
          }
        }
        if (connection != null) {
          EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
          Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
          ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (creation) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            try {
              HiveConnectionManager.getInstance().checkConnection(metadataConnection);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            managerConnection.check(metadataConnection);
          }
          ExtractMetaDataUtils.getInstance().setUseAllSynonyms(false);
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          wizardDialog.setBlockOnOpen(true);
          handleWizard(node,wizardDialog);
        }
 else {
          final boolean skipStep=true;
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          databaseTableWizard.setSkipStep(skipStep);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          handleWizard(node,wizardDialog);
        }
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
  IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  monitor.done();
  return Status.OK_STATUS;
}",0.9985546149081148
127338,"private String checkDBVersion(){
  String msg=null;
  EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
  DatabaseConnection connection=getConnection();
  List<EDatabaseVersion4Drivers> dbTypeList=EDatabaseVersion4Drivers.indexOfByDbType(connection.getDatabaseType());
  if (version != null && dbTypeList.size() > 1) {
    EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(getConnection().getDatabaseType());
    if (dbType == null || dbType.equals(EDatabaseTypeName.ACCESS) || dbType.equals(EDatabaseTypeName.PSQL) || dbType.equals(EDatabaseTypeName.PLUSPSQL)) {
      return null;
    }
    if (connection.getDriverClass() == null && dbType != EDatabaseTypeName.GENERAL_JDBC) {
      String driverClass=ExtractMetaDataUtils.getDriverClassByDbType(connection.getDatabaseType());
      connection.setDriverClass(driverClass);
    }
    java.sql.Connection sqlConn=MetadataConnectionUtils.checkConnection(connection).getObject();
    if (sqlConn != null) {
      try {
        DatabaseMetaData dm=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,connection);
        int versionNum=dm.getDatabaseMajorVersion();
        String[] strArray=version.getVersionValue().split(""String_Node_Str"");
        if (strArray.length > 1 && strArray[1].startsWith(Integer.toString(versionNum))) {
          msg=null;
        }
 else {
          msg=""String_Node_Str"" + strArray[0] + ""String_Node_Str""+ versionNum+ ""String_Node_Str"";
        }
      }
 catch (      SQLException exp) {
        ExceptionHandler.process(exp);
      }
 finally {
        ConnectionUtils.closeConnection(sqlConn);
      }
    }
  }
  return msg;
}","private String checkDBVersion(){
  String msg=null;
  EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  DatabaseConnection connection=getConnection();
  List<EDatabaseVersion4Drivers> dbTypeList=EDatabaseVersion4Drivers.indexOfByDbType(connection.getDatabaseType());
  if (version != null && dbTypeList.size() > 1) {
    EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(getConnection().getDatabaseType());
    if (dbType == null || dbType.equals(EDatabaseTypeName.ACCESS) || dbType.equals(EDatabaseTypeName.PSQL) || dbType.equals(EDatabaseTypeName.PLUSPSQL)) {
      return null;
    }
    if (connection.getDriverClass() == null && dbType != EDatabaseTypeName.GENERAL_JDBC) {
      String driverClass=extractMeta.getDriverClassByDbType(connection.getDatabaseType());
      connection.setDriverClass(driverClass);
    }
    java.sql.Connection sqlConn=MetadataConnectionUtils.checkConnection(connection).getObject();
    if (sqlConn != null) {
      try {
        DatabaseMetaData dm=extractMeta.getDatabaseMetaData(sqlConn,connection);
        int versionNum=dm.getDatabaseMajorVersion();
        String[] strArray=version.getVersionValue().split(""String_Node_Str"");
        if (strArray.length > 1 && strArray[1].startsWith(Integer.toString(versionNum))) {
          msg=null;
        }
 else {
          msg=""String_Node_Str"" + strArray[0] + ""String_Node_Str""+ versionNum+ ""String_Node_Str"";
        }
      }
 catch (      SQLException exp) {
        ExceptionHandler.process(exp);
      }
 finally {
        ConnectionUtils.closeConnection(sqlConn);
      }
    }
  }
  return msg;
}",0.8220463207270595
127339,"/** 
 * DOC Comment method ""updateConnectionInformation"".
 * @param dbConn
 * @throws SQLException
 * @throws IllegalAccessException
 * @throws InstantiationException
 * @throws ClassNotFoundException
 */
private void updateConnectionInformation(DatabaseConnection dbConn,IMetadataConnection metaConnection) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  java.sql.Connection sqlConn=null;
  String dbType=null;
  try {
    dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
    sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
    dbType=metaConnection.getDbType();
    if (sqlConn != null) {
      DatabaseMetaData dbMetaData=null;
      if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
        dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metaConnection);
      }
 else {
        dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbType,false,metaConnection.getDatabase());
      }
      MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,dbMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dbMetaData,true));
      MetadataFillFactory.getDBInstance().fillSchemas(dbConn,dbMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dbMetaData,false));
    }
  }
  finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    Driver driver=MetadataConnectionUtils.getDerbyDriver();
    if (driver != null) {
      try {
        driver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
}","/** 
 * DOC Comment method ""updateConnectionInformation"".
 * @param dbConn
 * @throws SQLException
 * @throws IllegalAccessException
 * @throws InstantiationException
 * @throws ClassNotFoundException
 */
private void updateConnectionInformation(DatabaseConnection dbConn,IMetadataConnection metaConnection) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  java.sql.Connection sqlConn=null;
  String dbType=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  try {
    dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
    sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
    dbType=metaConnection.getDbType();
    if (sqlConn != null) {
      DatabaseMetaData dbMetaData=null;
      if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
        dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metaConnection);
      }
 else {
        dbMetaData=extractMeta.getDatabaseMetaData(sqlConn,dbType,false,metaConnection.getDatabase());
      }
      MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,dbMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dbMetaData,true));
      MetadataFillFactory.getDBInstance().fillSchemas(dbConn,dbMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dbMetaData,false));
    }
  }
  finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      extractMeta.closeConnection();
    }
    Driver driver=MetadataConnectionUtils.getDerbyDriver();
    if (driver != null) {
      try {
        driver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
}",0.9765210805352184
127340,"/** 
 * This method is called when 'Finish' button is pressed in the wizard. Save metadata close Lock Strategy and close wizard.
 */
@Override public boolean performFinish(){
  if (databaseWizardPage.isPageComplete()) {
    DatabaseForm form=(DatabaseForm)databaseWizardPage.getControl();
    List<HashMap<String,Object>> properties=form.getProperties();
    try {
      connection.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_PROPERTIES,getHadoopPropertiesString(properties));
    }
 catch (    JSONException e1) {
      String detailError=e1.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(connection.getDatabaseType());
    if (dbType != EDatabaseTypeName.GENERAL_JDBC) {
      String driverClass=ExtractMetaDataUtils.getDriverClassByDbType(connection.getDatabaseType());
      if (EDatabaseTypeName.VERTICA.equals(dbType) && (EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(connection.getDbVersionString()) || EDatabaseVersion4Drivers.VERTICA_5_1.getVersionValue().equals(connection.getDbVersionString()))) {
        driverClass=EDatabase4DriverClassName.VERTICA2.getDriverClass();
      }
      ((DatabaseConnection)connectionItem.getConnection()).setDriverClass(driverClass);
    }
    String contextName=null;
    if (databaseWizardPage.getSelectedContextType() != null) {
      contextName=databaseWizardPage.getSelectedContextType().getName();
    }
    IMetadataConnection metadataConnection=null;
    if (contextName == null) {
      metadataConnection=ConvertionHelper.convert(connection,true);
    }
 else {
      metadataConnection=ConvertionHelper.convert(connection,false,contextName);
    }
    ITDQRepositoryService tdqRepService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    }
    try {
      if (creation) {
        handleCreation(connection,metadataConnection,tdqRepService);
      }
 else {
        Boolean isSuccess=handleUpdate(metadataConnection,tdqRepService);
        if (!isSuccess) {
          return false;
        }
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
    list.add(repositoryObject);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.notifySQLBuilder(list);
    }
    if (tdqRepService != null) {
      if (creation) {
        tdqRepService.notifySQLExplorer(connectionItem);
        tdqRepService.openConnectionEditor(connectionItem);
      }
 else {
        tdqRepService.removeAliasInSQLExplorer(node);
        tdqRepService.notifySQLExplorer(connectionItem);
        tdqRepService.refreshConnectionEditor(connectionItem);
      }
      if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
        tdqRepService.refresh(node.getParent());
      }
    }
    refreshHadoopCluster();
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method is called when 'Finish' button is pressed in the wizard. Save metadata close Lock Strategy and close wizard.
 */
@Override public boolean performFinish(){
  if (databaseWizardPage.isPageComplete()) {
    DatabaseForm form=(DatabaseForm)databaseWizardPage.getControl();
    List<HashMap<String,Object>> properties=form.getProperties();
    try {
      connection.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_PROPERTIES,getHadoopPropertiesString(properties));
    }
 catch (    JSONException e1) {
      String detailError=e1.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(connection.getDatabaseType());
    if (dbType != EDatabaseTypeName.GENERAL_JDBC) {
      String driverClass=ExtractMetaDataUtils.getInstance().getDriverClassByDbType(connection.getDatabaseType());
      if (EDatabaseTypeName.VERTICA.equals(dbType) && (EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(connection.getDbVersionString()) || EDatabaseVersion4Drivers.VERTICA_5_1.getVersionValue().equals(connection.getDbVersionString()))) {
        driverClass=EDatabase4DriverClassName.VERTICA2.getDriverClass();
      }
      ((DatabaseConnection)connectionItem.getConnection()).setDriverClass(driverClass);
    }
    String contextName=null;
    if (databaseWizardPage.getSelectedContextType() != null) {
      contextName=databaseWizardPage.getSelectedContextType().getName();
    }
    IMetadataConnection metadataConnection=null;
    if (contextName == null) {
      metadataConnection=ConvertionHelper.convert(connection,true);
    }
 else {
      metadataConnection=ConvertionHelper.convert(connection,false,contextName);
    }
    ITDQRepositoryService tdqRepService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    }
    try {
      if (creation) {
        handleCreation(connection,metadataConnection,tdqRepService);
      }
 else {
        Boolean isSuccess=handleUpdate(metadataConnection,tdqRepService);
        if (!isSuccess) {
          return false;
        }
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
    list.add(repositoryObject);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.notifySQLBuilder(list);
    }
    if (tdqRepService != null) {
      if (creation) {
        tdqRepService.notifySQLExplorer(connectionItem);
        tdqRepService.openConnectionEditor(connectionItem);
      }
 else {
        tdqRepService.removeAliasInSQLExplorer(node);
        tdqRepService.notifySQLExplorer(connectionItem);
        tdqRepService.refreshConnectionEditor(connectionItem);
      }
      if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
        tdqRepService.refresh(node.getParent());
      }
    }
    refreshHadoopCluster();
    return true;
  }
 else {
    return false;
  }
}",0.9980926430517711
127341,"@Override protected void processWhenDispose(){
  if (threadExecutor != null) {
    threadExecutor.clearThreads();
    ExtractMetaDataUtils.closeConnection();
  }
}","@Override protected void processWhenDispose(){
  if (threadExecutor != null) {
    threadExecutor.clearThreads();
    ExtractMetaDataUtils.getInstance().closeConnection();
  }
}",0.9588235294117649
127342,"private boolean isOracle(){
  if (this.connectionItem != null) {
    if (this.connectionItem instanceof DatabaseConnectionItem) {
      DatabaseConnectionItem dbConnItem=(DatabaseConnectionItem)this.connectionItem;
      DatabaseConnection dbConn=null;
      String dbtype=null;
      if (dbConnItem.getConnection() instanceof DatabaseConnection) {
        dbConn=(DatabaseConnection)dbConnItem.getConnection();
        dbtype=dbConn.getDatabaseType();
      }
      if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(dbtype) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(dbtype)) {
        return true;
      }
 else       if (EDatabaseTypeName.GENERAL_JDBC.getDisplayName().equals(dbtype)) {
        String driver=dbConn.getDriverClass();
        dbtype=ExtractMetaDataUtils.getDbTypeByClassName(driver);
        if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(dbtype) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(dbtype)) {
          return true;
        }
      }
    }
  }
  return false;
}","private boolean isOracle(){
  if (this.connectionItem != null) {
    if (this.connectionItem instanceof DatabaseConnectionItem) {
      DatabaseConnectionItem dbConnItem=(DatabaseConnectionItem)this.connectionItem;
      DatabaseConnection dbConn=null;
      String dbtype=null;
      if (dbConnItem.getConnection() instanceof DatabaseConnection) {
        dbConn=(DatabaseConnection)dbConnItem.getConnection();
        dbtype=dbConn.getDatabaseType();
      }
      if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(dbtype) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(dbtype)) {
        return true;
      }
 else       if (EDatabaseTypeName.GENERAL_JDBC.getDisplayName().equals(dbtype)) {
        String driver=dbConn.getDriverClass();
        dbtype=ExtractMetaDataUtils.getInstance().getDbTypeByClassName(driver);
        if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(dbtype) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(dbtype)) {
          return true;
        }
      }
    }
  }
  return false;
}",0.9932562620423891
127343,"/** 
 * DOC qzhang Comment method ""switchFilter"".
 */
private void switchFilter(){
  usedName.setSelection(getTableInfoParameters().isUsedName());
  usedSql.setSelection(!getTableInfoParameters().isUsedName());
  sqlFilter.setEnabled(!getTableInfoParameters().isUsedName());
  sqllabel.setEnabled(!getTableInfoParameters().isUsedName());
  tableCheck.setEnabled(getTableInfoParameters().isUsedName());
  viewCheck.setEnabled(getTableInfoParameters().isUsedName());
  synonymCheck.setEnabled(getTableInfoParameters().isUsedName());
  if (isOracle()) {
    publicSynonymCheck.setEnabled(getTableInfoParameters().isUsedName());
    ExtractMetaDataUtils.setUseAllSynonyms(publicSynonymCheck.getSelection());
  }
  removeButton.setEnabled(getTableInfoParameters().isUsedName());
  editButton.setEnabled(getTableInfoParameters().isUsedName());
  newButton.setEnabled(getTableInfoParameters().isUsedName());
  setNamelabel.setEnabled(getTableInfoParameters().isUsedName());
  nameFilter.setEnabled(getTableInfoParameters().isUsedName());
}","/** 
 * DOC qzhang Comment method ""switchFilter"".
 */
private void switchFilter(){
  usedName.setSelection(getTableInfoParameters().isUsedName());
  usedSql.setSelection(!getTableInfoParameters().isUsedName());
  sqlFilter.setEnabled(!getTableInfoParameters().isUsedName());
  sqllabel.setEnabled(!getTableInfoParameters().isUsedName());
  tableCheck.setEnabled(getTableInfoParameters().isUsedName());
  viewCheck.setEnabled(getTableInfoParameters().isUsedName());
  synonymCheck.setEnabled(getTableInfoParameters().isUsedName());
  if (isOracle()) {
    publicSynonymCheck.setEnabled(getTableInfoParameters().isUsedName());
    ExtractMetaDataUtils.getInstance().setUseAllSynonyms(publicSynonymCheck.getSelection());
  }
  removeButton.setEnabled(getTableInfoParameters().isUsedName());
  editButton.setEnabled(getTableInfoParameters().isUsedName());
  newButton.setEnabled(getTableInfoParameters().isUsedName());
  setNamelabel.setEnabled(getTableInfoParameters().isUsedName());
  nameFilter.setEnabled(getTableInfoParameters().isUsedName());
}",0.9932627526467758
127344,"/** 
 * addButtonControls.
 */
@Override protected void addUtilsButtonListeners(){
  tableCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_TABLE,tableCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_EXTERNAL_TABLE,tableCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.EXTERNAL_TABLE,tableCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.MANAGED_TABLE,tableCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.INDEX_TABLE,tableCheck.getSelection());
    }
  }
);
  viewCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_VIEW,viewCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.VIRTUAL_VIEW,viewCheck.getSelection());
    }
  }
);
  synonymCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_SYNONYM,synonymCheck.getSelection());
    }
  }
);
  if (isOracle()) {
    publicSynonymCheck.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        getTableInfoParameters().changeType(ETableTypes.TABLETYPE_ALL_SYNONYM,publicSynonymCheck.getSelection());
        ExtractMetaDataUtils.setUseAllSynonyms(publicSynonymCheck.getSelection());
        if (publicSynonymCheck.getSelection()) {
          tableCheck.setEnabled(false);
          viewCheck.setEnabled(false);
          synonymCheck.setEnabled(false);
        }
 else {
          tableCheck.setEnabled(true);
          viewCheck.setEnabled(true);
          synonymCheck.setEnabled(true);
        }
      }
    }
);
  }
  SelectionAdapter selectionAdapter=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      addName=""String_Node_Str"";
      Dialog dialog=new Dialog(getShell()){
        Text addText;
        @Override protected Control createDialogArea(        Composite parent){
          Composite createDialogArea=(Composite)super.createDialogArea(parent);
          Label addLabel=new Label(createDialogArea,SWT.NONE);
          addLabel.setText(Messages.getString(""String_Node_Str""));
          addText=new Text(createDialogArea,SWT.BORDER);
          GridData gridData=new GridData(GridData.FILL_BOTH);
          addText.setLayoutData(gridData);
          addText.setText(addName);
          return createDialogArea;
        }
        @Override protected void configureShell(        Shell newShell){
          super.configureShell(newShell);
          newShell.setText(Messages.getString(""String_Node_Str""));
        }
        @Override protected void okPressed(){
          addName=addText.getText();
          super.okPressed();
        }
      }
;
      if (dialog.open() == Dialog.OK) {
        nameFilter.add(addName,0);
        nameFilter.select(0);
        removeButton.setEnabled(true);
        editButton.setEnabled(true);
      }
    }
  }
;
  newButton.addSelectionListener(selectionAdapter);
  selectionAdapter=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      final int index=nameFilter.getSelectionIndex();
      if (nameFilter.getSelection().length > 0) {
        addName=nameFilter.getSelection()[0];
      }
      Dialog dialog=new Dialog(getShell()){
        Text addText;
        @Override protected Control createDialogArea(        Composite parent){
          Composite createDialogArea=(Composite)super.createDialogArea(parent);
          Label addLabel=new Label(createDialogArea,SWT.NONE);
          addLabel.setText(Messages.getString(""String_Node_Str""));
          addText=new Text(createDialogArea,SWT.BORDER);
          GridData gridData=new GridData(GridData.FILL_BOTH);
          addText.setLayoutData(gridData);
          addText.setText(addName);
          return createDialogArea;
        }
        @Override protected void configureShell(        Shell newShell){
          super.configureShell(newShell);
          newShell.setText(Messages.getString(""String_Node_Str""));
        }
        @Override protected void okPressed(){
          addName=addText.getText();
          super.okPressed();
        }
      }
;
      if (dialog.open() == Dialog.OK) {
        nameFilter.setItem(index,addName);
        nameFilter.select(index);
      }
    }
  }
;
  editButton.addSelectionListener(selectionAdapter);
  selectionAdapter=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (nameFilter.getSelection().length > 0) {
        addName=nameFilter.getSelection()[0];
        nameFilter.remove(addName);
      }
    }
  }
;
  removeButton.addSelectionListener(selectionAdapter);
}","/** 
 * addButtonControls.
 */
@Override protected void addUtilsButtonListeners(){
  tableCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_TABLE,tableCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_EXTERNAL_TABLE,tableCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.EXTERNAL_TABLE,tableCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.MANAGED_TABLE,tableCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.INDEX_TABLE,tableCheck.getSelection());
    }
  }
);
  viewCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_VIEW,viewCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.VIRTUAL_VIEW,viewCheck.getSelection());
    }
  }
);
  synonymCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_SYNONYM,synonymCheck.getSelection());
    }
  }
);
  if (isOracle()) {
    publicSynonymCheck.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        getTableInfoParameters().changeType(ETableTypes.TABLETYPE_ALL_SYNONYM,publicSynonymCheck.getSelection());
        ExtractMetaDataUtils.getInstance().setUseAllSynonyms(publicSynonymCheck.getSelection());
        if (publicSynonymCheck.getSelection()) {
          tableCheck.setEnabled(false);
          viewCheck.setEnabled(false);
          synonymCheck.setEnabled(false);
        }
 else {
          tableCheck.setEnabled(true);
          viewCheck.setEnabled(true);
          synonymCheck.setEnabled(true);
        }
      }
    }
);
  }
  SelectionAdapter selectionAdapter=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      addName=""String_Node_Str"";
      Dialog dialog=new Dialog(getShell()){
        Text addText;
        @Override protected Control createDialogArea(        Composite parent){
          Composite createDialogArea=(Composite)super.createDialogArea(parent);
          Label addLabel=new Label(createDialogArea,SWT.NONE);
          addLabel.setText(Messages.getString(""String_Node_Str""));
          addText=new Text(createDialogArea,SWT.BORDER);
          GridData gridData=new GridData(GridData.FILL_BOTH);
          addText.setLayoutData(gridData);
          addText.setText(addName);
          return createDialogArea;
        }
        @Override protected void configureShell(        Shell newShell){
          super.configureShell(newShell);
          newShell.setText(Messages.getString(""String_Node_Str""));
        }
        @Override protected void okPressed(){
          addName=addText.getText();
          super.okPressed();
        }
      }
;
      if (dialog.open() == Dialog.OK) {
        nameFilter.add(addName,0);
        nameFilter.select(0);
        removeButton.setEnabled(true);
        editButton.setEnabled(true);
      }
    }
  }
;
  newButton.addSelectionListener(selectionAdapter);
  selectionAdapter=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      final int index=nameFilter.getSelectionIndex();
      if (nameFilter.getSelection().length > 0) {
        addName=nameFilter.getSelection()[0];
      }
      Dialog dialog=new Dialog(getShell()){
        Text addText;
        @Override protected Control createDialogArea(        Composite parent){
          Composite createDialogArea=(Composite)super.createDialogArea(parent);
          Label addLabel=new Label(createDialogArea,SWT.NONE);
          addLabel.setText(Messages.getString(""String_Node_Str""));
          addText=new Text(createDialogArea,SWT.BORDER);
          GridData gridData=new GridData(GridData.FILL_BOTH);
          addText.setLayoutData(gridData);
          addText.setText(addName);
          return createDialogArea;
        }
        @Override protected void configureShell(        Shell newShell){
          super.configureShell(newShell);
          newShell.setText(Messages.getString(""String_Node_Str""));
        }
        @Override protected void okPressed(){
          addName=addText.getText();
          super.okPressed();
        }
      }
;
      if (dialog.open() == Dialog.OK) {
        nameFilter.setItem(index,addName);
        nameFilter.select(index);
      }
    }
  }
;
  editButton.addSelectionListener(selectionAdapter);
  selectionAdapter=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (nameFilter.getSelection().length > 0) {
        addName=nameFilter.getSelection()[0];
        nameFilter.remove(addName);
      }
    }
  }
;
  removeButton.addSelectionListener(selectionAdapter);
}",0.9985988791032826
127345,"/** 
 * checkConnection.
 * @param displayMessageBox
 */
protected void checkConnection(final boolean displayMessageBox){
  try {
    if (tree.getItemCount() > 0) {
      tree.removeAll();
    }
    parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataconnection.getDbType())) {
          String key=(String)metadataconnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          try {
            HiveConnectionManager.getInstance().checkConnection(metadataconnection);
            managerConnection.setValide(true);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
 else {
          managerConnection.check(metadataconnection,true);
        }
        if (managerConnection.getIsValide()) {
          if (useProvider()) {
            provider.updatePackage(metadataconnection);
          }
 else {
            updatePackage(metadataconnection);
          }
          if (ExtractMetaDataUtils.isUseAllSynonyms() || EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType())) {
            List<String> itemTableName=ExtractMetaDataFromDataBase.returnTablesFormConnection(metadataconnection,getTableInfoParameters());
            if (ExtractMetaDataUtils.isUseAllSynonyms()) {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,true);
            }
 else {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,false);
            }
          }
 else           if (useProvider()) {
            tableNodeList=provider.getTableNodeInfo(metadataconnection);
          }
 else {
            tableNodeList=getTableNodeInfo();
          }
          if (tableNodeList.isEmpty()) {
            if (displayMessageBox) {
              openInfoDialogInUIThread(getShell(),""String_Node_Str"",""String_Node_Str"",true);
            }
          }
 else {
            tableNodeList=filterItemContextSchema(tableNodeList);
            createAllItems(displayMessageBox,null);
          }
        }
 else         if (displayMessageBox) {
          parentWizardPage.getShell().getDisplay().asyncExec(new Runnable(){
            @Override public void run(){
              new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
            }
          }
);
        }
        monitor.done();
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","/** 
 * checkConnection.
 * @param displayMessageBox
 */
protected void checkConnection(final boolean displayMessageBox){
  try {
    if (tree.getItemCount() > 0) {
      tree.removeAll();
    }
    parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataconnection.getDbType())) {
          String key=(String)metadataconnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          try {
            HiveConnectionManager.getInstance().checkConnection(metadataconnection);
            managerConnection.setValide(true);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
 else {
          managerConnection.check(metadataconnection,true);
        }
        if (managerConnection.getIsValide()) {
          boolean useAllSyn=ExtractMetaDataUtils.getInstance().isUseAllSynonyms();
          if (useProvider()) {
            provider.updatePackage(metadataconnection);
          }
 else {
            updatePackage(metadataconnection);
          }
          if (useAllSyn || EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType())) {
            List<String> itemTableName=ExtractMetaDataFromDataBase.returnTablesFormConnection(metadataconnection,getTableInfoParameters());
            if (useAllSyn) {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,true);
            }
 else {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,false);
            }
          }
 else           if (useProvider()) {
            tableNodeList=provider.getTableNodeInfo(metadataconnection);
          }
 else {
            tableNodeList=getTableNodeInfo();
          }
          if (tableNodeList.isEmpty()) {
            if (displayMessageBox) {
              openInfoDialogInUIThread(getShell(),""String_Node_Str"",""String_Node_Str"",true);
            }
          }
 else {
            tableNodeList=filterItemContextSchema(tableNodeList);
            createAllItems(displayMessageBox,null);
          }
        }
 else         if (displayMessageBox) {
          parentWizardPage.getShell().getDisplay().asyncExec(new Runnable(){
            @Override public void run(){
              new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
            }
          }
);
        }
        monitor.done();
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9242451636232146
127346,"private void updatePackage(IMetadataConnection metadataConnection){
  if (metadataConnection == null) {
    return;
  }
  Driver derbyDriver=null;
  Connection sqlConn=null;
  String dbType=metadataconnection.getDbType();
  DatabaseConnection dbConn=(DatabaseConnection)metadataconnection.getCurrentConnection();
  if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
    DatabaseMetaData dm=null;
    try {
      dm=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConnection);
      MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,dm,metadataConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
      MetadataFillFactory.getDBInstance().fillSchemas(dbConn,dm,metadataConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    SQLException e) {
      e.printStackTrace();
    }
  }
 else {
    List list=MetadataConnectionUtils.getConnection(metadataconnection);
    for (int i=0; i < list.size(); i++) {
      if (list.get(i) instanceof Driver) {
        String driverClass=metadataconnection.getDriverClass();
        if (MetadataConnectionUtils.isDerbyRelatedDb(driverClass,dbType)) {
          derbyDriver=(Driver)list.get(i);
        }
      }
      if (list.get(i) instanceof java.sql.Connection) {
        sqlConn=(java.sql.Connection)list.get(i);
      }
    }
    try {
      if (sqlConn != null) {
        DatabaseMetaData dm=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbType,false,metadataconnection.getDatabase());
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
 finally {
      if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName())) || EDatabaseTypeName.HIVE.getDisplayName().equalsIgnoreCase(dbType)) {
        ExtractMetaDataUtils.closeConnection();
      }
      if (derbyDriver != null) {
        try {
          derbyDriver.connect(""String_Node_Str"",null);
        }
 catch (        SQLException e) {
        }
      }
    }
  }
}","private void updatePackage(IMetadataConnection metadataConnection){
  if (metadataConnection == null) {
    return;
  }
  Driver derbyDriver=null;
  Connection sqlConn=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  String dbType=metadataconnection.getDbType();
  DatabaseConnection dbConn=(DatabaseConnection)metadataconnection.getCurrentConnection();
  if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
    DatabaseMetaData dm=null;
    try {
      dm=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConnection);
      MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,dm,metadataConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
      MetadataFillFactory.getDBInstance().fillSchemas(dbConn,dm,metadataConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    SQLException e) {
      e.printStackTrace();
    }
  }
 else {
    List list=MetadataConnectionUtils.getConnection(metadataconnection);
    for (int i=0; i < list.size(); i++) {
      if (list.get(i) instanceof Driver) {
        String driverClass=metadataconnection.getDriverClass();
        if (MetadataConnectionUtils.isDerbyRelatedDb(driverClass,dbType)) {
          derbyDriver=(Driver)list.get(i);
        }
      }
      if (list.get(i) instanceof java.sql.Connection) {
        sqlConn=(java.sql.Connection)list.get(i);
      }
    }
    try {
      if (sqlConn != null) {
        DatabaseMetaData dm=extractMeta.getDatabaseMetaData(sqlConn,dbType,false,metadataconnection.getDatabase());
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
 finally {
      if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName())) || EDatabaseTypeName.HIVE.getDisplayName().equalsIgnoreCase(dbType)) {
        extractMeta.closeConnection();
      }
      if (derbyDriver != null) {
        try {
          derbyDriver.connect(""String_Node_Str"",null);
        }
 catch (        SQLException e) {
        }
      }
    }
  }
}",0.9828254847645428
127347,"protected void deleteTable(TableNode tableItem){
  Collection<MetadataTable> tables=new ArrayList<MetadataTable>();
  Iterator<MetadataTable> iterate=ConnectionHelper.getTables(getConnection()).iterator();
  while (iterate.hasNext()) {
    MetadataTable metadata=iterate.next();
    if (metadata != null && metadata.getLabel().equals(tableItem.getValue())) {
      tables.add(metadata);
    }
  }
  TableNode parent=tableItem.getParent();
  String catalog=""String_Node_Str"";
  String schema=""String_Node_Str"";
  if (parent != null) {
    if (parent.getType() == TableNode.CATALOG) {
      catalog=parent.getValue();
    }
 else     if (parent.getType() == TableNode.SCHEMA) {
      schema=parent.getValue();
      TableNode catalogNode=parent.getParent();
      if (catalogNode != null) {
        catalog=catalogNode.getValue();
      }
    }
  }
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType());
  if (isAccess) {
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,getConnection().getName(),getConnection(),tables);
  }
 else {
    if (""String_Node_Str"".equals(schema) && ExtractMetaDataUtils.useAllSynonyms) {
      schema=MetadataConnectionUtils.FAKE_SCHEMA_SYNONYMS;
    }
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,schema,getConnection(),tables);
  }
}","protected void deleteTable(TableNode tableItem){
  Collection<MetadataTable> tables=new ArrayList<MetadataTable>();
  Iterator<MetadataTable> iterate=ConnectionHelper.getTables(getConnection()).iterator();
  while (iterate.hasNext()) {
    MetadataTable metadata=iterate.next();
    if (metadata != null && metadata.getLabel().equals(tableItem.getValue())) {
      tables.add(metadata);
    }
  }
  TableNode parent=tableItem.getParent();
  String catalog=""String_Node_Str"";
  String schema=""String_Node_Str"";
  if (parent != null) {
    if (parent.getType() == TableNode.CATALOG) {
      catalog=parent.getValue();
    }
 else     if (parent.getType() == TableNode.SCHEMA) {
      schema=parent.getValue();
      TableNode catalogNode=parent.getParent();
      if (catalogNode != null) {
        catalog=catalogNode.getValue();
      }
    }
  }
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType());
  if (isAccess) {
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,getConnection().getName(),getConnection(),tables);
  }
 else {
    if (""String_Node_Str"".equals(schema) && ExtractMetaDataUtils.getInstance().isUseAllSynonyms()) {
      schema=MetadataConnectionUtils.FAKE_SCHEMA_SYNONYMS;
    }
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,schema,getConnection(),tables);
  }
}",0.9926524614254224
127348,"@Override protected void processWhenDispose(){
  if (threadExecutor != null) {
    threadExecutor.clearThreads();
    ExtractMetaDataUtils.closeConnection();
  }
}","@Override protected void processWhenDispose(){
  if (threadExecutor != null) {
    threadExecutor.clearThreads();
    ExtractMetaDataUtils.getInstance().closeConnection();
  }
}",0.9588235294117649
127349,"@Override public Object[] getChildren(Object parentElement){
  TableNode tableNode=(TableNode)parentElement;
  List<TableNode> child=tableNode.getChildren();
  boolean extended=false;
  if (!child.isEmpty()) {
    for (    TableNode node : child) {
      if (node.getType() == TableNode.TABLE) {
        extended=true;
        break;
      }
    }
  }
  if (extended) {
    return child.toArray();
  }
  IMetadataConnection metadataConn=tableNode.getMetadataConn();
  Connection conn=null;
  Driver driver=null;
  DatabaseMetaData dbMetaData=null;
  if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataConn.getDbType())) {
    try {
      dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConn);
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    SQLException e) {
      e.printStackTrace();
    }
  }
 else {
    List list=ExtractMetaDataUtils.getConnectionList(metadataConn);
    if (list != null && !list.isEmpty()) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          conn=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          driver=(DriverShim)list.get(i);
        }
      }
    }
    dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(conn,metadataConn.getDbType(),metadataConn.isSqlMode(),metadataConn.getDatabase());
  }
  int type=tableNode.getType();
  orgomg.cwm.objectmodel.core.Package pack=null;
  List<MetadataTable> tableList=new ArrayList<MetadataTable>();
  if (type == tableNode.CATALOG) {
    if (tableNode.getChildren().isEmpty()) {
      pack=tableNode.getCatalog();
    }
  }
 else   if (type == tableNode.SCHEMA) {
    pack=tableNode.getSchema();
  }
  try {
    if (pack != null) {
      TableInfoParameters paras=tableNode.getParas();
      List<ETableTypes> paraType=paras.getTypes();
      Set<String> availableTableTypes=new HashSet<String>();
      for (      ETableTypes tableType : paraType) {
        availableTableTypes.add(tableType.getName());
      }
      Set<String> tableNameFilter=null;
      if (!paras.isUsedName()) {
        tableNameFilter=new HashSet<String>();
        if (paras.getSqlFiter() != null && !""String_Node_Str"".equals(paras.getSqlFiter())) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          ResultSet rsTables=stmt.executeQuery(paras.getSqlFiter());
          while (rsTables.next()) {
            String nameKey=rsTables.getString(1).trim();
            tableNameFilter.add(nameKey);
          }
          rsTables.close();
          stmt.close();
        }
      }
 else {
        tableNameFilter=paras.getNameFilters();
      }
      List<MetadataTable> tempListTables=new ArrayList<MetadataTable>();
      for (      String filter : tableNameFilter) {
        tempListTables=MetadataFillFactory.getDBInstance().fillAll(pack,dbMetaData,metadataConn,null,filter,availableTableTypes.toArray(new String[]{}));
        for (        MetadataTable table : tempListTables) {
          boolean contains=false;
          for (          MetadataTable inListTable : tableList) {
            if (inListTable.getName().equals(table.getName())) {
              contains=true;
              break;
            }
          }
          if (!contains) {
            tableList.add(table);
          }
        }
      }
      if (tableNameFilter.isEmpty()) {
        tempListTables=MetadataFillFactory.getDBInstance().fillAll(pack,dbMetaData,metadataConn,null,null,availableTableTypes.toArray(new String[]{}));
        for (        MetadataTable table : tempListTables) {
          boolean contains=false;
          for (          MetadataTable inListTable : tableList) {
            if (inListTable.getName().equals(table.getName())) {
              contains=true;
              break;
            }
          }
          if (!contains) {
            tableList.add(table);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    String dbType=metadataConn.getDbType();
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (driver != null) {
      String driverClass=metadataConn.getDriverClass();
      if ((driverClass != null && driverClass.equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass())) || (dbType != null && (dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName())))) {
        try {
          driver.connect(""String_Node_Str"",null);
        }
 catch (        SQLException e) {
        }
      }
    }
  }
  transferToTableNode(tableList,tableNode);
  List<TableNode> children=tableNode.getChildren();
  return children.toArray();
}","@Override public Object[] getChildren(Object parentElement){
  TableNode tableNode=(TableNode)parentElement;
  List<TableNode> child=tableNode.getChildren();
  boolean extended=false;
  if (!child.isEmpty()) {
    for (    TableNode node : child) {
      if (node.getType() == TableNode.TABLE) {
        extended=true;
        break;
      }
    }
  }
  if (extended) {
    return child.toArray();
  }
  IMetadataConnection metadataConn=tableNode.getMetadataConn();
  Connection conn=null;
  Driver driver=null;
  DatabaseMetaData dbMetaData=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataConn.getDbType())) {
    try {
      dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConn);
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    SQLException e) {
      e.printStackTrace();
    }
  }
 else {
    List list=extractMeta.getConnectionList(metadataConn);
    if (list != null && !list.isEmpty()) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          conn=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          driver=(DriverShim)list.get(i);
        }
      }
    }
    dbMetaData=extractMeta.getDatabaseMetaData(conn,metadataConn.getDbType(),metadataConn.isSqlMode(),metadataConn.getDatabase());
  }
  int type=tableNode.getType();
  orgomg.cwm.objectmodel.core.Package pack=null;
  List<MetadataTable> tableList=new ArrayList<MetadataTable>();
  if (type == tableNode.CATALOG) {
    if (tableNode.getChildren().isEmpty()) {
      pack=tableNode.getCatalog();
    }
  }
 else   if (type == tableNode.SCHEMA) {
    pack=tableNode.getSchema();
  }
  try {
    if (pack != null) {
      TableInfoParameters paras=tableNode.getParas();
      List<ETableTypes> paraType=paras.getTypes();
      Set<String> availableTableTypes=new HashSet<String>();
      for (      ETableTypes tableType : paraType) {
        availableTableTypes.add(tableType.getName());
      }
      Set<String> tableNameFilter=null;
      if (!paras.isUsedName()) {
        tableNameFilter=new HashSet<String>();
        if (paras.getSqlFiter() != null && !""String_Node_Str"".equals(paras.getSqlFiter())) {
          Statement stmt=extractMeta.getConn().createStatement();
          extractMeta.setQueryStatementTimeout(stmt);
          ResultSet rsTables=stmt.executeQuery(paras.getSqlFiter());
          while (rsTables.next()) {
            String nameKey=rsTables.getString(1).trim();
            tableNameFilter.add(nameKey);
          }
          rsTables.close();
          stmt.close();
        }
      }
 else {
        tableNameFilter=paras.getNameFilters();
      }
      List<MetadataTable> tempListTables=new ArrayList<MetadataTable>();
      for (      String filter : tableNameFilter) {
        tempListTables=MetadataFillFactory.getDBInstance().fillAll(pack,dbMetaData,metadataConn,null,filter,availableTableTypes.toArray(new String[]{}));
        for (        MetadataTable table : tempListTables) {
          boolean contains=false;
          for (          MetadataTable inListTable : tableList) {
            if (inListTable.getName().equals(table.getName())) {
              contains=true;
              break;
            }
          }
          if (!contains) {
            tableList.add(table);
          }
        }
      }
      if (tableNameFilter.isEmpty()) {
        tempListTables=MetadataFillFactory.getDBInstance().fillAll(pack,dbMetaData,metadataConn,null,null,availableTableTypes.toArray(new String[]{}));
        for (        MetadataTable table : tempListTables) {
          boolean contains=false;
          for (          MetadataTable inListTable : tableList) {
            if (inListTable.getName().equals(table.getName())) {
              contains=true;
              break;
            }
          }
          if (!contains) {
            tableList.add(table);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    String dbType=metadataConn.getDbType();
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      extractMeta.closeConnection();
    }
    if (driver != null) {
      String driverClass=metadataConn.getDriverClass();
      if ((driverClass != null && driverClass.equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass())) || (dbType != null && (dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName())))) {
        try {
          driver.connect(""String_Node_Str"",null);
        }
 catch (        SQLException e) {
        }
      }
    }
  }
  transferToTableNode(tableList,tableNode);
  List<TableNode> children=tableNode.getChildren();
  return children.toArray();
}",0.986969780981425
127350,"@Override public boolean addClassPathEntry(ArrayList cpEntries,String cp,ClasspathManager hostmanager,BaseData sourcedata,ProtectionDomain sourcedomain){
  BundleEntry entry=sourcedata.getBundleFile().getEntry(cp);
  String bundleSymbolicName=sourcedata.getSymbolicName();
  if (entry == null && bundleSymbolicName.startsWith(""String_Node_Str"") && cp.endsWith(""String_Node_Str"")) {
    try {
      File libJavaFolderFile=getLibJavaFolderFile();
      String jarName=new File(cp).getName();
      File jarFile=new File(libJavaFolderFile,jarName);
      if (jarFile.exists()) {
        ClasspathEntry classPathEntry=createClassPathEntry(hostmanager,sourcedata,sourcedomain,jarFile);
        cpEntries.add(classPathEntry);
      }
 else {
        jarMissingObservable.notifyObservers(new JarMissingObservable.JarMissingEvent(jarName,bundleSymbolicName,libJavaFolderFile.getAbsolutePath()));
        if (jarFile.exists()) {
          ClasspathEntry classPathEntry=createClassPathEntry(hostmanager,sourcedata,sourcedomain,jarFile);
          cpEntries.add(classPathEntry);
        }
 else {
          sourcedata.getAdaptor().getEventPublisher().publishFrameworkEvent(FrameworkEvent.ERROR,sourcedata.getBundle(),new FileNotFoundException(""String_Node_Str"" + jarFile + ""String_Node_Str""+ sourcedata.getSymbolicName()+ ""String_Node_Str""+ libJavaFolderFile+ ""String_Node_Str""));
        }
      }
    }
 catch (    IOException e) {
      sourcedata.getAdaptor().getEventPublisher().publishFrameworkEvent(FrameworkEvent.ERROR,sourcedata.getBundle(),e);
    }
catch (    URISyntaxException e) {
      sourcedata.getAdaptor().getEventPublisher().publishFrameworkEvent(FrameworkEvent.ERROR,sourcedata.getBundle(),e);
    }
  }
  return false;
}","@Override public boolean addClassPathEntry(ArrayList cpEntries,String cp,ClasspathManager hostmanager,BaseData sourcedata,ProtectionDomain sourcedomain){
  BundleEntry entry=sourcedata.getBundleFile().getEntry(cp);
  String bundleSymbolicName=sourcedata.getSymbolicName();
  if (entry == null && bundleSymbolicName.startsWith(""String_Node_Str"") && cp.endsWith(""String_Node_Str"")) {
    try {
      File libJavaFolderFile=getLibJavaFolderFile();
      String jarName=new File(cp).getName();
      File jarFile=new File(libJavaFolderFile,jarName);
      if (jarFile.exists()) {
        ClasspathEntry classPathEntry=createClassPathEntry(hostmanager,sourcedata,sourcedomain,jarFile);
        cpEntries.add(classPathEntry);
      }
 else {
        jarMissingObservable.notifyObservers(new JarMissingObservable.JarMissingEvent(jarName,bundleSymbolicName,libJavaFolderFile.getAbsolutePath()));
        if (jarFile.exists()) {
          ClasspathEntry classPathEntry=createClassPathEntry(hostmanager,sourcedata,sourcedomain,jarFile);
          cpEntries.add(classPathEntry);
        }
 else {
          FrameworkLog frameworkLog=sourcedata.getAdaptor().getFrameworkLog();
          if (frameworkLog != null) {
            Bundle bundle=sourcedata.getBundle();
            String entryMessage=bundle.getSymbolicName() == null ? bundle.getLocation() : bundle.getSymbolicName();
            frameworkLog.log(new FrameworkLogEntry(entryMessage,""String_Node_Str"" + jarFile + ""String_Node_Str""+ sourcedata.getSymbolicName()+ ""String_Node_Str""+ libJavaFolderFile+ ""String_Node_Str"",0,null,null));
          }
        }
      }
    }
 catch (    IOException e) {
      sourcedata.getAdaptor().getEventPublisher().publishFrameworkEvent(FrameworkEvent.ERROR,sourcedata.getBundle(),e);
    }
catch (    URISyntaxException e) {
      sourcedata.getAdaptor().getEventPublisher().publishFrameworkEvent(FrameworkEvent.ERROR,sourcedata.getBundle(),e);
    }
  }
  return false;
}",0.7328451315432601
127351,"public Project getProjectFromProjectLabel(String label){
  if (currentProject.getLabel().equals(label)) {
    return currentProject;
  }
  for (  Project project : getReferencedProjects()) {
    if (project.getLabel().equals(label)) {
      return project;
    }
  }
  return null;
}","public Project getProjectFromProjectLabel(String label){
  if (currentProject.getLabel().equals(label)) {
    return currentProject;
  }
  for (  Project project : getAllReferencedProjects()) {
    if (project.getLabel().equals(label)) {
      return project;
    }
  }
  return null;
}",0.9947275922671354
127352,"/** 
 * add Field to Group File Viewer.
 * @param parent
 * @param form
 * @param width
 * @param height
 */
private void addGroupFileViewer(final Composite parent,final int width,int height){
  tabFolder=new CTabFolder(parent,SWT.BORDER);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  previewTabItem=new CTabItem(tabFolder,SWT.BORDER);
  previewTabItem.setText(Messages.getString(""String_Node_Str""));
  outputTabItem=new CTabItem(tabFolder,SWT.BORDER);
  outputTabItem.setText(Messages.getString(""String_Node_Str""));
  Composite previewComposite=Form.startNewGridLayout(tabFolder,1);
  outputComposite=Form.startNewGridLayout(tabFolder,1);
  Composite compositeDelimitedFilePreviewButton=Form.startNewDimensionnedGridLayout(previewComposite,4,width,HEIGHT_BUTTON_PIXEL);
  height=height - HEIGHT_BUTTON_PIXEL - 15;
  previewButton=new Button(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewButton.setText(Messages.getString(""String_Node_Str""));
  previewButton.setSize(WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  addadvancedWSDLExplorer(compositeDelimitedFilePreviewButton);
  new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel=new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel.setText(""String_Node_Str"");
  previewInformationLabel.setForeground(getDisplay().getSystemColor(SWT.COLOR_BLUE));
  Composite compositeDelimitedFilePreview=Form.startNewDimensionnedGridLayout(previewComposite,1,width,height);
  wsdlPreview=new ShadowProcessPreview(compositeDelimitedFilePreview,null,width,height - 10);
  wsdlPreview.newTablePreview();
  previewTabItem.setControl(previewComposite);
  outputTabItem.setControl(outputComposite);
  tabFolder.setSelection(previewTabItem);
  tabFolder.pack();
}","/** 
 * add Field to Group File Viewer.
 * @param parent
 * @param form
 * @param width
 * @param height
 */
private void addGroupFileViewer(final Composite parent,final int width,int height){
  tabFolder=new CTabFolder(parent,SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=height;
  tabFolder.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  previewTabItem=new CTabItem(tabFolder,SWT.BORDER);
  previewTabItem.setText(Messages.getString(""String_Node_Str""));
  outputTabItem=new CTabItem(tabFolder,SWT.BORDER);
  outputTabItem.setText(Messages.getString(""String_Node_Str""));
  Composite previewComposite=Form.startNewGridLayout(tabFolder,1);
  outputComposite=Form.startNewGridLayout(tabFolder,1);
  Composite compositeDelimitedFilePreviewButton=Form.startNewDimensionnedGridLayout(previewComposite,4,width,HEIGHT_BUTTON_PIXEL);
  height=height - HEIGHT_BUTTON_PIXEL - 15;
  previewButton=new Button(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewButton.setText(Messages.getString(""String_Node_Str""));
  previewButton.setSize(WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  addadvancedWSDLExplorer(compositeDelimitedFilePreviewButton);
  new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel=new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel.setText(""String_Node_Str"");
  previewInformationLabel.setForeground(getDisplay().getSystemColor(SWT.COLOR_BLUE));
  Composite compositeDelimitedFilePreview=Form.startNewDimensionnedGridLayout(previewComposite,1,width,height);
  wsdlPreview=new ShadowProcessPreview(compositeDelimitedFilePreview,null,width,height - 10);
  wsdlPreview.newTablePreview();
  previewTabItem.setControl(previewComposite);
  outputTabItem.setControl(outputComposite);
  tabFolder.setSelection(previewTabItem);
  tabFolder.pack();
}",0.9652892561983472
127353,"public static void addTableForSpecifiedDataPackage(DatabaseConnection dbconn,MetadataTable dbtable) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  IMetadataConnection imetadataConnection=ConvertionHelper.convert(dbconn);
  DatabaseConnection conn=(DatabaseConnection)imetadataConnection.getCurrentConnection();
  Collection<orgomg.cwm.objectmodel.core.Package> newDataPackage=EcoreUtil.copyAll(dbconn.getDataPackage());
  ConnectionHelper.addPackages(newDataPackage,conn);
  String catalog=imetadataConnection.getDatabase();
  String schema=""String_Node_Str"";
  EObject container=dbtable.eContainer();
  if (container != null) {
    if (container instanceof Schema) {
      schema=((Schema)container).getName();
      EObject c=container.eContainer();
      if (c != null && c instanceof Catalog) {
        catalog=((Catalog)c).getName();
      }
    }
 else     if (container instanceof Catalog) {
      catalog=((Catalog)container).getName();
    }
  }
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(imetadataConnection.getDbType());
  if (!isAccess) {
    schema=ExtractMetaDataUtils.getMeataConnectionSchema(imetadataConnection);
  }
  addTableForTemCatalogOrSchema(catalog,schema,dbconn,dbtable,imetadataConnection);
}","public static void addTableForSpecifiedDataPackage(DatabaseConnection dbconn,MetadataTable dbtable) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  IMetadataConnection imetadataConnection=ConvertionHelper.convert(dbconn);
  DatabaseConnection conn=(DatabaseConnection)imetadataConnection.getCurrentConnection();
  Collection<orgomg.cwm.objectmodel.core.Package> newDataPackage=EcoreUtil.copyAll(dbconn.getDataPackage());
  ConnectionHelper.addPackages(newDataPackage,conn);
  String catalog=imetadataConnection.getDatabase();
  String schema=""String_Node_Str"";
  EObject container=dbtable.eContainer();
  if (container != null) {
    if (container instanceof Schema) {
      schema=((Schema)container).getName();
      EObject c=container.eContainer();
      if (c != null && c instanceof Catalog) {
        catalog=((Catalog)c).getName();
      }
    }
 else     if (container instanceof Catalog) {
      catalog=((Catalog)container).getName();
    }
  }
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(imetadataConnection.getDbType());
  if (!isAccess) {
    schema=ExtractMetaDataUtils.getInstance().getMeataConnectionSchema(imetadataConnection);
  }
  addTableForTemCatalogOrSchema(catalog,schema,dbconn,dbtable,imetadataConnection);
}",0.9946153846153846
127354,"public static void fillCatalogAndSchemas(IMetadataConnection iMetadataConnection,DatabaseConnection temConnection) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  java.sql.Connection sqlConn=null;
  temConnection=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(iMetadataConnection,temConnection);
  sqlConn=MetadataConnectionUtils.checkConnection(iMetadataConnection).getObject();
  if (((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema() != null) {
    temConnection.setUiSchema(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema());
  }
  if (((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getSID() != null) {
    temConnection.setSID(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getSID());
  }
  String dbType=iMetadataConnection.getDbType();
  if (sqlConn != null) {
    DatabaseMetaData dbMetaData=null;
    if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
      dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(iMetadataConnection);
    }
 else {
      dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbType,false,iMetadataConnection.getDatabase());
    }
    MetadataFillFactory.getDBInstance().fillCatalogs(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,true));
    MetadataFillFactory.getDBInstance().fillSchemas(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,false));
  }
}","public static void fillCatalogAndSchemas(IMetadataConnection iMetadataConnection,DatabaseConnection temConnection) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  java.sql.Connection sqlConn=null;
  temConnection=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(iMetadataConnection,temConnection);
  sqlConn=MetadataConnectionUtils.checkConnection(iMetadataConnection).getObject();
  if (((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema() != null) {
    temConnection.setUiSchema(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema());
  }
  if (((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getSID() != null) {
    temConnection.setSID(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getSID());
  }
  String dbType=iMetadataConnection.getDbType();
  if (sqlConn != null) {
    DatabaseMetaData dbMetaData=null;
    if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
      dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(iMetadataConnection);
    }
 else {
      dbMetaData=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,dbType,false,iMetadataConnection.getDatabase());
    }
    MetadataFillFactory.getDBInstance().fillCatalogs(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,true));
    MetadataFillFactory.getDBInstance().fillSchemas(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,false));
  }
}",0.9957186544342508
127355,"/** 
 * wzhang Comment method ""addDefaultTableForSpecifiedDataPackage"". this function only for add metadataTable.
 * @param dbconn
 * @param dbtable
 * @throws SQLException
 * @throws IllegalAccessException
 * @throws InstantiationException
 * @throws ClassNotFoundException
 */
public static void addDefaultTableForSpecifiedDataPackage(DatabaseConnection dbconn,MetadataTable dbtable) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  IMetadataConnection imetadataConnection=ConvertionHelper.convert(dbconn);
  String schema=imetadataConnection.getSchema();
  String catalog=imetadataConnection.getDatabase();
  String databaseType=imetadataConnection.getDbType();
  EDatabaseTypeName currentType=EDatabaseTypeName.getTypeFromDbType(databaseType);
  EDatabaseSchemaOrCatalogMapping curCatalog=currentType.getCatalogMappingField();
  EDatabaseSchemaOrCatalogMapping curSchema=currentType.getSchemaMappingField();
  if (curCatalog != null && curSchema != null) {
switch (curCatalog) {
case Login:
      catalog=imetadataConnection.getUsername();
    break;
case None:
  catalog=""String_Node_Str"";
break;
}
switch (curSchema) {
case Login:
schema=imetadataConnection.getUsername();
break;
case Schema:
schema=imetadataConnection.getSchema();
break;
case None:
schema=""String_Node_Str"";
break;
case Default_Name:
schema=dbconn.getName();
break;
}
}
boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(imetadataConnection.getDbType());
if (!isAccess) {
schema=ExtractMetaDataUtils.getMeataConnectionSchema(imetadataConnection);
}
boolean isOlap=ExtractMetaDataUtils.isOLAPConnection(dbconn);
if (isOlap) {
List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbconn);
if (!catalogs.isEmpty()) {
Catalog c=catalogs.get(0);
catalog=c.getName();
if (!CatalogHelper.getSchemas(c).isEmpty()) {
Schema s=CatalogHelper.getSchemas(c).get(0);
schema=s.getName();
}
}
}
addTableForTemCatalogOrSchema(catalog,schema,dbconn,dbtable,imetadataConnection);
}","/** 
 * wzhang Comment method ""addDefaultTableForSpecifiedDataPackage"". this function only for add metadataTable.
 * @param dbconn
 * @param dbtable
 * @throws SQLException
 * @throws IllegalAccessException
 * @throws InstantiationException
 * @throws ClassNotFoundException
 */
public static void addDefaultTableForSpecifiedDataPackage(DatabaseConnection dbconn,MetadataTable dbtable) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  IMetadataConnection imetadataConnection=ConvertionHelper.convert(dbconn);
  String schema=imetadataConnection.getSchema();
  String catalog=imetadataConnection.getDatabase();
  String databaseType=imetadataConnection.getDbType();
  EDatabaseTypeName currentType=EDatabaseTypeName.getTypeFromDbType(databaseType);
  EDatabaseSchemaOrCatalogMapping curCatalog=currentType.getCatalogMappingField();
  EDatabaseSchemaOrCatalogMapping curSchema=currentType.getSchemaMappingField();
  if (curCatalog != null && curSchema != null) {
switch (curCatalog) {
case Login:
      catalog=imetadataConnection.getUsername();
    break;
case None:
  catalog=""String_Node_Str"";
break;
}
switch (curSchema) {
case Login:
schema=imetadataConnection.getUsername();
break;
case Schema:
schema=imetadataConnection.getSchema();
break;
case None:
schema=""String_Node_Str"";
break;
case Default_Name:
schema=dbconn.getName();
break;
}
}
boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(imetadataConnection.getDbType());
if (!isAccess) {
schema=extractMeta.getMeataConnectionSchema(imetadataConnection);
}
boolean isOlap=extractMeta.isOLAPConnection(dbconn);
if (isOlap) {
List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbconn);
if (!catalogs.isEmpty()) {
Catalog c=catalogs.get(0);
catalog=c.getName();
if (!CatalogHelper.getSchemas(c).isEmpty()) {
Schema s=CatalogHelper.getSchemas(c).get(0);
schema=s.getName();
}
}
}
addTableForTemCatalogOrSchema(catalog,schema,dbconn,dbtable,imetadataConnection);
}",0.9770313657693258
127356,"public static void addCatalogOrSchema(IMetadataConnection metadataConnection,DatabaseConnection dbconn){
  EDatabaseSchemaOrCatalogMapping catalog=null;
  EDatabaseSchemaOrCatalogMapping schema=null;
  EDatabaseTypeName type=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
  if (type.equals(EDatabaseTypeName.GENERAL_JDBC)) {
    String realtype=ExtractMetaDataUtils.getDbTypeByClassName(metadataConnection.getDriverClass());
    type=EDatabaseTypeName.getTypeFromDbType(realtype);
    catalog=type.getCatalogMappingField();
    schema=type.getSchemaMappingField();
  }
 else {
    catalog=type.getCatalogMappingField();
    schema=type.getSchemaMappingField();
  }
  fillValuesForSchemaOrCatalog(catalog,schema,metadataConnection,dbconn);
}","public static void addCatalogOrSchema(IMetadataConnection metadataConnection,DatabaseConnection dbconn){
  EDatabaseSchemaOrCatalogMapping catalog=null;
  EDatabaseSchemaOrCatalogMapping schema=null;
  EDatabaseTypeName type=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
  if (type.equals(EDatabaseTypeName.GENERAL_JDBC)) {
    String realtype=ExtractMetaDataUtils.getInstance().getDbTypeByClassName(metadataConnection.getDriverClass());
    type=EDatabaseTypeName.getTypeFromDbType(realtype);
    catalog=type.getCatalogMappingField();
    schema=type.getSchemaMappingField();
  }
 else {
    catalog=type.getCatalogMappingField();
    schema=type.getSchemaMappingField();
  }
  fillValuesForSchemaOrCatalog(catalog,schema,metadataConnection,dbconn);
}",0.9908972691807544
127357,"public static List<org.talend.core.model.metadata.builder.connection.MetadataTable> getTablesFromSpecifiedDataPackageWithOders(DatabaseConnection dbconn){
  IMetadataConnection iMetadataConnection=ConvertionHelper.convert(dbconn);
  String schema=dbconn.getUiSchema();
  String catalog=dbconn.getSID();
  String databaseType=dbconn.getDatabaseType();
  EDatabaseTypeName currentType=EDatabaseTypeName.getTypeFromDbType(databaseType);
  EDatabaseSchemaOrCatalogMapping curCatalog=currentType.getCatalogMappingField();
  EDatabaseSchemaOrCatalogMapping curSchema=currentType.getSchemaMappingField();
  if (curCatalog != null && curSchema != null) {
switch (curCatalog) {
case Login:
      catalog=dbconn.getUsername();
    break;
case None:
  catalog=""String_Node_Str"";
break;
}
switch (curSchema) {
case Login:
schema=dbconn.getUsername();
break;
case Schema:
schema=dbconn.getUiSchema();
break;
case None:
schema=""String_Node_Str"";
break;
case Default_Name:
schema=dbconn.getName();
break;
}
}
boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(iMetadataConnection.getDbType());
if (!isAccess) {
schema=ExtractMetaDataUtils.getDBConnectionSchema(dbconn);
}
return getTablesFromCurrentCatalogOrSchemaWithOrders(catalog,schema,dbconn);
}","public static List<org.talend.core.model.metadata.builder.connection.MetadataTable> getTablesFromSpecifiedDataPackageWithOders(DatabaseConnection dbconn){
  IMetadataConnection iMetadataConnection=ConvertionHelper.convert(dbconn);
  String schema=dbconn.getUiSchema();
  String catalog=dbconn.getSID();
  String databaseType=dbconn.getDatabaseType();
  EDatabaseTypeName currentType=EDatabaseTypeName.getTypeFromDbType(databaseType);
  EDatabaseSchemaOrCatalogMapping curCatalog=currentType.getCatalogMappingField();
  EDatabaseSchemaOrCatalogMapping curSchema=currentType.getSchemaMappingField();
  if (curCatalog != null && curSchema != null) {
switch (curCatalog) {
case Login:
      catalog=dbconn.getUsername();
    break;
case None:
  catalog=""String_Node_Str"";
break;
}
switch (curSchema) {
case Login:
schema=dbconn.getUsername();
break;
case Schema:
schema=dbconn.getUiSchema();
break;
case None:
schema=""String_Node_Str"";
break;
case Default_Name:
schema=dbconn.getName();
break;
}
}
boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(iMetadataConnection.getDbType());
if (!isAccess) {
schema=ExtractMetaDataUtils.getInstance().getDBConnectionSchema(dbconn);
}
return getTablesFromCurrentCatalogOrSchemaWithOrders(catalog,schema,dbconn);
}",0.994431185361973
127358,"public static Set<org.talend.core.model.metadata.builder.connection.MetadataTable> getTablesFromSpecifiedDataPackage(DatabaseConnection dbconn){
  IMetadataConnection iMetadataConnection=ConvertionHelper.convert(dbconn);
  String schema=dbconn.getUiSchema();
  String catalog=dbconn.getSID();
  String databaseType=dbconn.getDatabaseType();
  EDatabaseTypeName currentType=EDatabaseTypeName.getTypeFromDbType(databaseType);
  EDatabaseSchemaOrCatalogMapping curCatalog=currentType.getCatalogMappingField();
  EDatabaseSchemaOrCatalogMapping curSchema=currentType.getSchemaMappingField();
  if (curCatalog != null && curSchema != null) {
switch (curCatalog) {
case Login:
      catalog=dbconn.getUsername();
    break;
case None:
  catalog=""String_Node_Str"";
break;
}
switch (curSchema) {
case Login:
schema=dbconn.getUsername();
break;
case Schema:
schema=dbconn.getUiSchema();
break;
case None:
schema=""String_Node_Str"";
break;
case Default_Name:
schema=dbconn.getName();
break;
}
}
boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(iMetadataConnection.getDbType());
if (!isAccess) {
schema=ExtractMetaDataUtils.getDBConnectionSchema(dbconn);
}
return getTablesFromCurrentCatalogOrSchema(catalog,schema,dbconn);
}","public static Set<org.talend.core.model.metadata.builder.connection.MetadataTable> getTablesFromSpecifiedDataPackage(DatabaseConnection dbconn){
  IMetadataConnection iMetadataConnection=ConvertionHelper.convert(dbconn);
  String schema=dbconn.getUiSchema();
  String catalog=dbconn.getSID();
  String databaseType=dbconn.getDatabaseType();
  EDatabaseTypeName currentType=EDatabaseTypeName.getTypeFromDbType(databaseType);
  EDatabaseSchemaOrCatalogMapping curCatalog=currentType.getCatalogMappingField();
  EDatabaseSchemaOrCatalogMapping curSchema=currentType.getSchemaMappingField();
  if (curCatalog != null && curSchema != null) {
switch (curCatalog) {
case Login:
      catalog=dbconn.getUsername();
    break;
case None:
  catalog=""String_Node_Str"";
break;
}
switch (curSchema) {
case Login:
schema=dbconn.getUsername();
break;
case Schema:
schema=dbconn.getUiSchema();
break;
case None:
schema=""String_Node_Str"";
break;
case Default_Name:
schema=dbconn.getName();
break;
}
}
boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(iMetadataConnection.getDbType());
if (!isAccess) {
schema=ExtractMetaDataUtils.getInstance().getDBConnectionSchema(dbconn);
}
return getTablesFromCurrentCatalogOrSchema(catalog,schema,dbconn);
}",0.994341147938561
127359,"/** 
 * cli Comment method ""setDisposeListener"". (bug 6976)
 */
private void setDisposeListener(){
  this.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent event){
      try {
        processWhenDispose();
        ShadowProcessHelper.forceStopPreview();
        ExtractMetaDataUtils.closeConnection(true);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
);
}","/** 
 * cli Comment method ""setDisposeListener"". (bug 6976)
 */
private void setDisposeListener(){
  this.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent event){
      try {
        processWhenDispose();
        ShadowProcessHelper.forceStopPreview();
        ExtractMetaDataUtils.getInstance().closeConnection(true);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
);
}",0.9844097995545658
127360,"public void widgetDisposed(DisposeEvent event){
  try {
    processWhenDispose();
    ShadowProcessHelper.forceStopPreview();
    ExtractMetaDataUtils.closeConnection(true);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","public void widgetDisposed(DisposeEvent event){
  try {
    processWhenDispose();
    ShadowProcessHelper.forceStopPreview();
    ExtractMetaDataUtils.getInstance().closeConnection(true);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9717741935483872
127361,"@Override public Connection fillUIConnParams(IMetadataConnection metadataBean,Connection connection){
  Connection newConnection=null;
  if (connection == null) {
    newConnection=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  }
  if (super.fillUIConnParams(metadataBean,newConnection == null ? connection : newConnection) == null) {
    return null;
  }
  DatabaseConnection dbconn=null;
  if (newConnection != null) {
    dbconn=(DatabaseConnection)newConnection;
  }
 else {
    dbconn=(DatabaseConnection)connection;
  }
  if (newConnection != null) {
    dbconn.setDriverJarPath(metadataBean.getDriverJarPath());
    dbconn.setProductId(metadataBean.getProduct());
    dbconn.setDbmsId(metadataBean.getMapping());
    dbconn.setAdditionalParams(metadataBean.getAdditionalParams());
    dbconn.setDriverClass(metadataBean.getDriverClass());
    dbconn.setDatabaseType(metadataBean.getDbType());
    dbconn.setName(metadataBean.getLabel());
    dbconn.setLabel(metadataBean.getLabel());
    dbconn.setVersion(metadataBean.getVersion());
    dbconn.setUiSchema(metadataBean.getUiSchema());
    dbconn.setSQLMode(metadataBean.isSqlMode());
    dbconn.setSID(metadataBean.getDatabase());
    String distro=(String)metadataBean.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
    String distroVersion=(String)metadataBean.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
    String hiveModel=(String)metadataBean.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
    dbconn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION,distro);
    dbconn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION,distroVersion);
    dbconn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE,hiveModel);
  }
  try {
    if (sqlConnection == null || sqlConnection.isClosed()) {
      this.checkConnection(metadataBean);
    }
    if (newConnection != null) {
      fillMetadataParams(metadataBean,newConnection);
    }
    DatabaseMetaData dbMetadata=null;
    if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataBean.getDbType())) {
      dbMetadata=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataBean);
    }
 else {
      dbMetadata=ExtractMetaDataUtils.getDatabaseMetaData(sqlConnection,dbconn,false);
    }
    String productName=dbMetadata.getDatabaseProductName() == null ? PluginConstant.EMPTY_STRING : dbMetadata.getDatabaseProductName();
    String productVersion=dbMetadata.getDatabaseProductVersion() == null ? PluginConstant.EMPTY_STRING : dbMetadata.getDatabaseProductVersion();
    TaggedValueHelper.setTaggedValue(dbconn,TaggedValueHelper.DB_PRODUCT_NAME,productName);
    TaggedValueHelper.setTaggedValue(dbconn,TaggedValueHelper.DB_PRODUCT_VERSION,productVersion);
    boolean isHive=dbconn.getDatabaseType().equals(EDatabaseTypeName.HIVE.getDisplayName());
    boolean isHiveJdbc=dbconn.getDatabaseType().equals(EDatabaseTypeName.GENERAL_JDBC.getDisplayName()) && dbconn.getDriverClass() != null && dbconn.getDriverClass().equals(EDatabase4DriverClassName.HIVE.getDriverClass());
    if (!isHive && !isHiveJdbc) {
      String identifierQuote=dbMetadata.getIdentifierQuoteString();
      ConnectionHelper.setIdentifierQuoteString(identifierQuote == null ? ""String_Node_Str"" : identifierQuote,dbconn);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
catch (  ClassNotFoundException e) {
    CommonExceptionHandler.process(e);
  }
catch (  InstantiationException e) {
    CommonExceptionHandler.process(e);
  }
catch (  IllegalAccessException e) {
    CommonExceptionHandler.process(e);
  }
 finally {
    ConnectionUtils.closeConnection(sqlConnection);
    if (driver != null && MetadataConnectionUtils.isDerbyRelatedDb(metadataBean.getDriverClass(),metadataBean.getDbType())) {
      try {
        driver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  if (newConnection != null) {
    return newConnection;
  }
 else {
    return connection;
  }
}","@Override public Connection fillUIConnParams(IMetadataConnection metadataBean,Connection connection){
  Connection newConnection=null;
  if (connection == null) {
    newConnection=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  }
  if (super.fillUIConnParams(metadataBean,newConnection == null ? connection : newConnection) == null) {
    return null;
  }
  DatabaseConnection dbconn=null;
  if (newConnection != null) {
    dbconn=(DatabaseConnection)newConnection;
  }
 else {
    dbconn=(DatabaseConnection)connection;
  }
  if (newConnection != null) {
    dbconn.setDriverJarPath(metadataBean.getDriverJarPath());
    dbconn.setProductId(metadataBean.getProduct());
    dbconn.setDbmsId(metadataBean.getMapping());
    dbconn.setAdditionalParams(metadataBean.getAdditionalParams());
    dbconn.setDriverClass(metadataBean.getDriverClass());
    dbconn.setDatabaseType(metadataBean.getDbType());
    dbconn.setName(metadataBean.getLabel());
    dbconn.setLabel(metadataBean.getLabel());
    dbconn.setVersion(metadataBean.getVersion());
    dbconn.setUiSchema(metadataBean.getUiSchema());
    dbconn.setSQLMode(metadataBean.isSqlMode());
    dbconn.setSID(metadataBean.getDatabase());
    String distro=(String)metadataBean.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
    String distroVersion=(String)metadataBean.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
    String hiveModel=(String)metadataBean.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
    dbconn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION,distro);
    dbconn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION,distroVersion);
    dbconn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE,hiveModel);
  }
  try {
    if (sqlConnection == null || sqlConnection.isClosed()) {
      this.checkConnection(metadataBean);
    }
    if (newConnection != null) {
      fillMetadataParams(metadataBean,newConnection);
    }
    DatabaseMetaData dbMetadata=null;
    if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataBean.getDbType())) {
      dbMetadata=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataBean);
    }
 else {
      dbMetadata=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConnection,dbconn,false);
    }
    String productName=dbMetadata.getDatabaseProductName() == null ? PluginConstant.EMPTY_STRING : dbMetadata.getDatabaseProductName();
    String productVersion=dbMetadata.getDatabaseProductVersion() == null ? PluginConstant.EMPTY_STRING : dbMetadata.getDatabaseProductVersion();
    TaggedValueHelper.setTaggedValue(dbconn,TaggedValueHelper.DB_PRODUCT_NAME,productName);
    TaggedValueHelper.setTaggedValue(dbconn,TaggedValueHelper.DB_PRODUCT_VERSION,productVersion);
    boolean isHive=dbconn.getDatabaseType().equals(EDatabaseTypeName.HIVE.getDisplayName());
    boolean isHiveJdbc=dbconn.getDatabaseType().equals(EDatabaseTypeName.GENERAL_JDBC.getDisplayName()) && dbconn.getDriverClass() != null && dbconn.getDriverClass().equals(EDatabase4DriverClassName.HIVE.getDriverClass());
    if (!isHive && !isHiveJdbc) {
      String identifierQuote=dbMetadata.getIdentifierQuoteString();
      ConnectionHelper.setIdentifierQuoteString(identifierQuote == null ? ""String_Node_Str"" : identifierQuote,dbconn);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
catch (  ClassNotFoundException e) {
    CommonExceptionHandler.process(e);
  }
catch (  InstantiationException e) {
    CommonExceptionHandler.process(e);
  }
catch (  IllegalAccessException e) {
    CommonExceptionHandler.process(e);
  }
 finally {
    ConnectionUtils.closeConnection(sqlConnection);
    if (driver != null && MetadataConnectionUtils.isDerbyRelatedDb(metadataBean.getDriverClass(),metadataBean.getDbType())) {
      try {
        driver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  if (newConnection != null) {
    return newConnection;
  }
 else {
    return connection;
  }
}",0.9982664685487864
127362,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      extractMeta.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,extractMeta.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : extractMeta.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9908947644895816
127363,"private List<String> postFillCatalog(IMetadataConnection metaConnection,List<Catalog> catalogList,List<String> filterList,String catalogName,Connection dbConn){
  Catalog catalog=CatalogHelper.createCatalog(catalogName);
  catalogList.add(catalog);
  DatabaseConnection dbConnection=(DatabaseConnection)dbConn;
  if (dbConnection.getDatabaseType() != null && dbConnection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConnection);
    if (iMetadataCon != null) {
      if (!StringUtils.isEmpty(iMetadataCon.getDatabase()) && !filterList.contains(iMetadataCon.getDatabase())) {
        filterList.add(iMetadataCon.getDatabase());
      }
      String pattern=ExtractMetaDataUtils.retrieveSchemaPatternForAS400(iMetadataCon.getAdditionalParams());
      if (pattern != null && !""String_Node_Str"".equals(pattern)) {
        String[] multiSchems=ExtractMetaDataUtils.getMultiSchems(pattern);
        if (multiSchems != null) {
          for (          String s : multiSchems) {
            if (!StringUtils.isEmpty(s) && !filterList.contains(s)) {
              filterList.add(s);
            }
          }
        }
      }
    }
  }
 else {
    String uiSchema=dbConnection.getUiSchema();
    if (uiSchema != null) {
      uiSchema=TalendCWMService.getReadableName(dbConn,uiSchema);
    }
    if (!StringUtils.isBlank(uiSchema) && !filterList.contains(uiSchema)) {
      filterList.add(uiSchema);
    }
  }
  return filterList;
}","private List<String> postFillCatalog(IMetadataConnection metaConnection,List<Catalog> catalogList,List<String> filterList,String catalogName,Connection dbConn){
  Catalog catalog=CatalogHelper.createCatalog(catalogName);
  catalogList.add(catalog);
  DatabaseConnection dbConnection=(DatabaseConnection)dbConn;
  if (dbConnection.getDatabaseType() != null && dbConnection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConnection);
    if (iMetadataCon != null) {
      if (!StringUtils.isEmpty(iMetadataCon.getDatabase()) && !filterList.contains(iMetadataCon.getDatabase())) {
        filterList.add(iMetadataCon.getDatabase());
      }
      String pattern=ExtractMetaDataUtils.getInstance().retrieveSchemaPatternForAS400(iMetadataCon.getAdditionalParams());
      if (pattern != null && !""String_Node_Str"".equals(pattern)) {
        String[] multiSchems=ExtractMetaDataUtils.getInstance().getMultiSchems(pattern);
        if (multiSchems != null) {
          for (          String s : multiSchems) {
            if (!StringUtils.isEmpty(s) && !filterList.contains(s)) {
              filterList.add(s);
            }
          }
        }
      }
    }
  }
 else {
    String uiSchema=dbConnection.getUiSchema();
    if (uiSchema != null) {
      uiSchema=TalendCWMService.getReadableName(dbConn,uiSchema);
    }
    if (!StringUtils.isBlank(uiSchema) && !filterList.contains(uiSchema)) {
      filterList.add(uiSchema);
    }
  }
  return filterList;
}",0.9908436886854152
127364,"/** 
 * add Field to Group File Viewer.
 * @param parent
 * @param form
 * @param width
 * @param height
 */
private void addGroupFileViewer(final Composite parent,final int width,int height){
  tabFolder=new CTabFolder(parent,SWT.BORDER);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  previewTabItem=new CTabItem(tabFolder,SWT.BORDER);
  previewTabItem.setText(Messages.getString(""String_Node_Str""));
  outputTabItem=new CTabItem(tabFolder,SWT.BORDER);
  outputTabItem.setText(Messages.getString(""String_Node_Str""));
  Composite previewComposite=Form.startNewGridLayout(tabFolder,1);
  outputComposite=Form.startNewGridLayout(tabFolder,1);
  Composite compositeDelimitedFilePreviewButton=Form.startNewDimensionnedGridLayout(previewComposite,4,width,HEIGHT_BUTTON_PIXEL);
  height=height - HEIGHT_BUTTON_PIXEL - 15;
  previewButton=new Button(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewButton.setText(Messages.getString(""String_Node_Str""));
  previewButton.setSize(WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  addadvancedWSDLExplorer(compositeDelimitedFilePreviewButton);
  new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel=new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel.setText(""String_Node_Str"");
  previewInformationLabel.setForeground(getDisplay().getSystemColor(SWT.COLOR_BLUE));
  Composite compositeDelimitedFilePreview=Form.startNewDimensionnedGridLayout(previewComposite,1,width,height);
  wsdlPreview=new ShadowProcessPreview(compositeDelimitedFilePreview,null,width,height - 10);
  wsdlPreview.newTablePreview();
  previewTabItem.setControl(previewComposite);
  outputTabItem.setControl(outputComposite);
  tabFolder.setSelection(previewTabItem);
  tabFolder.pack();
}","/** 
 * add Field to Group File Viewer.
 * @param parent
 * @param form
 * @param width
 * @param height
 */
private void addGroupFileViewer(final Composite parent,final int width,int height){
  tabFolder=new CTabFolder(parent,SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=height;
  tabFolder.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  previewTabItem=new CTabItem(tabFolder,SWT.BORDER);
  previewTabItem.setText(Messages.getString(""String_Node_Str""));
  outputTabItem=new CTabItem(tabFolder,SWT.BORDER);
  outputTabItem.setText(Messages.getString(""String_Node_Str""));
  Composite previewComposite=Form.startNewGridLayout(tabFolder,1);
  outputComposite=Form.startNewGridLayout(tabFolder,1);
  Composite compositeDelimitedFilePreviewButton=Form.startNewDimensionnedGridLayout(previewComposite,4,width,HEIGHT_BUTTON_PIXEL);
  height=height - HEIGHT_BUTTON_PIXEL - 15;
  previewButton=new Button(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewButton.setText(Messages.getString(""String_Node_Str""));
  previewButton.setSize(WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  addadvancedWSDLExplorer(compositeDelimitedFilePreviewButton);
  new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel=new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel.setText(""String_Node_Str"");
  previewInformationLabel.setForeground(getDisplay().getSystemColor(SWT.COLOR_BLUE));
  Composite compositeDelimitedFilePreview=Form.startNewDimensionnedGridLayout(previewComposite,1,width,height);
  wsdlPreview=new ShadowProcessPreview(compositeDelimitedFilePreview,null,width,height - 10);
  wsdlPreview.newTablePreview();
  previewTabItem.setControl(previewComposite);
  outputTabItem.setControl(outputComposite);
  tabFolder.setSelection(previewTabItem);
  tabFolder.pack();
}",0.9652892561983472
127365,"/** 
 * add Field to Group File Viewer.
 * @param parent
 * @param form
 * @param width
 * @param height
 */
private void addGroupFileViewer(final Composite parent,final int width,int height){
  tabFolder=new CTabFolder(parent,SWT.BORDER);
  tabFolder.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  previewTabItem=new CTabItem(tabFolder,SWT.BORDER);
  previewTabItem.setText(Messages.getString(""String_Node_Str""));
  outputTabItem=new CTabItem(tabFolder,SWT.BORDER);
  outputTabItem.setText(Messages.getString(""String_Node_Str""));
  Composite previewComposite=Form.startNewGridLayout(tabFolder,1);
  outputComposite=Form.startNewGridLayout(tabFolder,1);
  Composite compositeDelimitedFilePreviewButton=Form.startNewDimensionnedGridLayout(previewComposite,4,width,HEIGHT_BUTTON_PIXEL);
  height=height - HEIGHT_BUTTON_PIXEL - 15;
  previewButton=new Button(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewButton.setText(Messages.getString(""String_Node_Str""));
  previewButton.setSize(WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  addadvancedWSDLExplorer(compositeDelimitedFilePreviewButton);
  new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel=new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel.setText(""String_Node_Str"");
  previewInformationLabel.setForeground(getDisplay().getSystemColor(SWT.COLOR_BLUE));
  Composite compositeDelimitedFilePreview=Form.startNewDimensionnedGridLayout(previewComposite,1,width,height);
  wsdlPreview=new ShadowProcessPreview(compositeDelimitedFilePreview,null,width,height - 10);
  wsdlPreview.newTablePreview();
  previewTabItem.setControl(previewComposite);
  outputTabItem.setControl(outputComposite);
  tabFolder.setSelection(previewTabItem);
  tabFolder.pack();
}","/** 
 * add Field to Group File Viewer.
 * @param parent
 * @param form
 * @param width
 * @param height
 */
private void addGroupFileViewer(final Composite parent,final int width,int height){
  tabFolder=new CTabFolder(parent,SWT.BORDER);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  previewTabItem=new CTabItem(tabFolder,SWT.BORDER);
  previewTabItem.setText(Messages.getString(""String_Node_Str""));
  outputTabItem=new CTabItem(tabFolder,SWT.BORDER);
  outputTabItem.setText(Messages.getString(""String_Node_Str""));
  Composite previewComposite=Form.startNewGridLayout(tabFolder,1);
  outputComposite=Form.startNewGridLayout(tabFolder,1);
  Composite compositeDelimitedFilePreviewButton=Form.startNewDimensionnedGridLayout(previewComposite,4,width,HEIGHT_BUTTON_PIXEL);
  height=height - HEIGHT_BUTTON_PIXEL - 15;
  previewButton=new Button(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewButton.setText(Messages.getString(""String_Node_Str""));
  previewButton.setSize(WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  addadvancedWSDLExplorer(compositeDelimitedFilePreviewButton);
  new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel=new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel.setText(""String_Node_Str"");
  previewInformationLabel.setForeground(getDisplay().getSystemColor(SWT.COLOR_BLUE));
  Composite compositeDelimitedFilePreview=Form.startNewDimensionnedGridLayout(previewComposite,1,width,height);
  wsdlPreview=new ShadowProcessPreview(compositeDelimitedFilePreview,null,width,height - 10);
  wsdlPreview.newTablePreview();
  previewTabItem.setControl(previewComposite);
  outputTabItem.setControl(outputComposite);
  tabFolder.setSelection(previewTabItem);
  tabFolder.pack();
}",0.9966273187183812
127366,"@Override protected void run() throws LoginException, PersistenceException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (!monitor.isCanceled()) {
    final ManagerConnection managerConnection=new ManagerConnection();
    DatabaseConnection connection=(DatabaseConnection)item.getConnection();
    IMetadataConnection metadataConnection=ConvertionHelper.convert(connection);
    if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        metadataConnection.setUrl(connection.getURL());
        if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
          JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
        }
      }
 else {
        String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
        metadataConnection.setUrl(genUrl);
      }
    }
    if (connection != null) {
      EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
      Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
      ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
    }
    if (creation) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        try {
          HiveConnectionManager.getInstance().checkConnection(metadataConnection);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        managerConnection.check(metadataConnection);
      }
      ExtractMetaDataUtils.setUseAllSynonyms(false);
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      wizardDialog.setBlockOnOpen(true);
      handleWizard(node,wizardDialog);
    }
 else {
      final boolean skipStep=true;
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      databaseTableWizard.setSkipStep(skipStep);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      handleWizard(node,wizardDialog);
    }
  }
}","@Override protected void run() throws LoginException, PersistenceException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (!monitor.isCanceled()) {
    final ManagerConnection managerConnection=new ManagerConnection();
    DatabaseConnection connection=(DatabaseConnection)item.getConnection();
    String oldContextName=connection.getContextName();
    IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
    String newContextName=connection.getContextName();
    if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
      if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
        Item itemTemp=node.getObject().getProperty().getItem();
        if (itemTemp != null && itemTemp instanceof ConnectionItem) {
          ConnectionItem connItem=(ConnectionItem)itemTemp;
          SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
        }
      }
    }
    if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        metadataConnection.setUrl(connection.getURL());
        if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
          JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
        }
      }
 else {
        String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
        metadataConnection.setUrl(genUrl);
      }
    }
    if (connection != null) {
      EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
      Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
      ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
    }
    if (creation) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        try {
          HiveConnectionManager.getInstance().checkConnection(metadataConnection);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        managerConnection.check(metadataConnection);
      }
      ExtractMetaDataUtils.setUseAllSynonyms(false);
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      wizardDialog.setBlockOnOpen(true);
      handleWizard(node,wizardDialog);
    }
 else {
      final boolean skipStep=true;
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      databaseTableWizard.setSkipStep(skipStep);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      handleWizard(node,wizardDialog);
    }
  }
}",0.9149079177308778
127367,"private void openDatabaseTableWizard(final DatabaseConnectionItem item,final MetadataTable metadataTable,final boolean forceReadOnly,final RepositoryNode node,final boolean creation){
  UIJob job=new UIJob(Messages.getString(""String_Node_Str"")){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      String name=""String_Node_Str"" + getText();
      RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
        @Override protected void run() throws LoginException, PersistenceException {
          monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
          if (!monitor.isCanceled()) {
            final ManagerConnection managerConnection=new ManagerConnection();
            DatabaseConnection connection=(DatabaseConnection)item.getConnection();
            IMetadataConnection metadataConnection=ConvertionHelper.convert(connection);
            if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                metadataConnection.setUrl(connection.getURL());
                if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
                  JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
                }
              }
 else {
                String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
                metadataConnection.setUrl(genUrl);
              }
            }
            if (connection != null) {
              EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
              Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
              ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
            }
            if (creation) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                try {
                  HiveConnectionManager.getInstance().checkConnection(metadataConnection);
                }
 catch (                Exception e) {
                  e.printStackTrace();
                }
              }
 else {
                managerConnection.check(metadataConnection);
              }
              ExtractMetaDataUtils.setUseAllSynonyms(false);
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              wizardDialog.setBlockOnOpen(true);
              handleWizard(node,wizardDialog);
            }
 else {
              final boolean skipStep=true;
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              databaseTableWizard.setSkipStep(skipStep);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              handleWizard(node,wizardDialog);
            }
          }
        }
      }
;
      repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(true);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      if (!event.getResult().isOK()) {
        log.error(event.getResult().getMessage(),event.getResult().getException());
      }
    }
  }
);
  job.schedule();
}","private void openDatabaseTableWizard(final DatabaseConnectionItem item,final MetadataTable metadataTable,final boolean forceReadOnly,final RepositoryNode node,final boolean creation){
  UIJob job=new UIJob(Messages.getString(""String_Node_Str"")){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      String name=""String_Node_Str"" + getText();
      RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
        @Override protected void run() throws LoginException, PersistenceException {
          monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
          if (!monitor.isCanceled()) {
            final ManagerConnection managerConnection=new ManagerConnection();
            DatabaseConnection connection=(DatabaseConnection)item.getConnection();
            String oldContextName=connection.getContextName();
            IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
            String newContextName=connection.getContextName();
            if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
              if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
                Item itemTemp=node.getObject().getProperty().getItem();
                if (itemTemp != null && itemTemp instanceof ConnectionItem) {
                  ConnectionItem connItem=(ConnectionItem)itemTemp;
                  SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
                }
              }
            }
            if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                metadataConnection.setUrl(connection.getURL());
                if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
                  JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
                }
              }
 else {
                String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
                metadataConnection.setUrl(genUrl);
              }
            }
            if (connection != null) {
              EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
              Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
              ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
            }
            if (creation) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                try {
                  HiveConnectionManager.getInstance().checkConnection(metadataConnection);
                }
 catch (                Exception e) {
                  e.printStackTrace();
                }
              }
 else {
                managerConnection.check(metadataConnection);
              }
              ExtractMetaDataUtils.setUseAllSynonyms(false);
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              wizardDialog.setBlockOnOpen(true);
              handleWizard(node,wizardDialog);
            }
 else {
              final boolean skipStep=true;
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              databaseTableWizard.setSkipStep(skipStep);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              handleWizard(node,wizardDialog);
            }
          }
        }
      }
;
      repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(true);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      if (!event.getResult().isOK()) {
        log.error(event.getResult().getMessage(),event.getResult().getException());
      }
    }
  }
);
  job.schedule();
}",0.932064449260341
127368,"@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  String name=""String_Node_Str"" + getText();
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
    @Override protected void run() throws LoginException, PersistenceException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      if (!monitor.isCanceled()) {
        final ManagerConnection managerConnection=new ManagerConnection();
        DatabaseConnection connection=(DatabaseConnection)item.getConnection();
        IMetadataConnection metadataConnection=ConvertionHelper.convert(connection);
        if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            metadataConnection.setUrl(connection.getURL());
            if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
              JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
            }
          }
 else {
            String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
            metadataConnection.setUrl(genUrl);
          }
        }
        if (connection != null) {
          EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
          Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
          ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (creation) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            try {
              HiveConnectionManager.getInstance().checkConnection(metadataConnection);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            managerConnection.check(metadataConnection);
          }
          ExtractMetaDataUtils.setUseAllSynonyms(false);
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          wizardDialog.setBlockOnOpen(true);
          handleWizard(node,wizardDialog);
        }
 else {
          final boolean skipStep=true;
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          databaseTableWizard.setSkipStep(skipStep);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          handleWizard(node,wizardDialog);
        }
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
  IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  monitor.done();
  return Status.OK_STATUS;
}","@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  String name=""String_Node_Str"" + getText();
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
    @Override protected void run() throws LoginException, PersistenceException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      if (!monitor.isCanceled()) {
        final ManagerConnection managerConnection=new ManagerConnection();
        DatabaseConnection connection=(DatabaseConnection)item.getConnection();
        String oldContextName=connection.getContextName();
        IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
        String newContextName=connection.getContextName();
        if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
          if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
            Item itemTemp=node.getObject().getProperty().getItem();
            if (itemTemp != null && itemTemp instanceof ConnectionItem) {
              ConnectionItem connItem=(ConnectionItem)itemTemp;
              SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
            }
          }
        }
        if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            metadataConnection.setUrl(connection.getURL());
            if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
              JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
            }
          }
 else {
            String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
            metadataConnection.setUrl(genUrl);
          }
        }
        if (connection != null) {
          EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
          Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
          ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (creation) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            try {
              HiveConnectionManager.getInstance().checkConnection(metadataConnection);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            managerConnection.check(metadataConnection);
          }
          ExtractMetaDataUtils.setUseAllSynonyms(false);
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          wizardDialog.setBlockOnOpen(true);
          handleWizard(node,wizardDialog);
        }
 else {
          final boolean skipStep=true;
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          databaseTableWizard.setSkipStep(skipStep);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          handleWizard(node,wizardDialog);
        }
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
  IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  monitor.done();
  return Status.OK_STATUS;
}",0.9247359644246804
127369,"@Override public List<TdView> fillViews(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> viewFilter,String viewPattern){
  List<TdView> viewList=new ArrayList<TdView>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  String[] tableType=new String[]{TableType.VIEW.toString()};
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
      if (MetadataConnectionUtils.isAS400(catalogOrSchema)) {
        return viewList;
      }
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,viewPattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    while (tables.next()) {
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String type=tables.getString(GetTable.TABLE_TYPE.name());
      if (!isCreateElement(viewFilter,tableName)) {
        continue;
      }
      String tableOwner=null;
      if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tables.getString(GetTable.TABLE_SCHEM.name());
      }
      boolean flag=true;
      String tableComment=null;
      if (pack != null) {
        Connection c=ConnectionHelper.getConnection(pack);
        flag=MetadataConnectionUtils.isOracle8i(c);
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      TdView table=RelationalFactory.eINSTANCE.createTdView();
      table.setName(tableName);
      table.setTableType(type);
      table.setLabel(table.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,table);
      }
      if (tableComment != null) {
        ColumnSetHelper.setComment(tableComment,table);
      }
      viewList.add(table);
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,viewList),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return viewList;
}","@Override public List<TdView> fillViews(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> viewFilter,String viewPattern,String[] tableType){
  List<TdView> viewList=new ArrayList<TdView>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
      if (MetadataConnectionUtils.isAS400(catalogOrSchema)) {
        return viewList;
      }
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,viewPattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    while (tables.next()) {
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String type=tables.getString(GetTable.TABLE_TYPE.name());
      if (!isCreateElement(viewFilter,tableName)) {
        continue;
      }
      String tableOwner=null;
      if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tables.getString(GetTable.TABLE_SCHEM.name());
      }
      boolean flag=true;
      String tableComment=null;
      if (pack != null) {
        Connection c=ConnectionHelper.getConnection(pack);
        flag=MetadataConnectionUtils.isOracle8i(c);
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      TdView table=RelationalFactory.eINSTANCE.createTdView();
      table.setName(tableName);
      table.setTableType(type);
      table.setLabel(table.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,table);
      }
      if (tableComment != null) {
        ColumnSetHelper.setComment(tableComment,table);
      }
      viewList.add(table);
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,viewList),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return viewList;
}",0.9845213070896236
127370,"/** 
 * zshen Comment method ""fillViews"".
 * @param pack the object(catalog or schema) which you want views to be filled.Can't be null if need to fill theviews into the object of package(catalog or schema).And if Linked is false everything is ok.
 * @param dbJDBCMetadata If it is null the method will do nothing and return null too.
 * @param viewFilter The list for filter views which you want to get.If it is null all of views which belong to thepackage will be return.
 * @param another method to filter the views.the table will be keep if it's name match to the viewFilter. And if youdon't want to use it null is ok.
 * @return The list of views after filter.Will return null only if dbJDBCMetadata isn't normal.
 */
public List<TdView> fillViews(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> viewFilter,String viewPattern);","/** 
 * zshen Comment method ""fillViews"".
 * @param pack the object(catalog or schema) which you want views to be filled.Can't be null if need to fill theviews into the object of package(catalog or schema).And if Linked is false everything is ok.
 * @param dbJDBCMetadata If it is null the method will do nothing and return null too.
 * @param viewFilter The list for filter views which you want to get.If it is null all of views which belong to thepackage will be return.
 * @param another method to filter the views.the table will be keep if it's name match to the viewFilter. And if youdon't want to use it null is ok.
 * @return The list of views after filter.Will return null only if dbJDBCMetadata isn't normal.
 */
public List<TdView> fillViews(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> viewFilter,String viewPattern,String[] tableType);",0.9888300999412112
127371,"/** 
 * zshen Comment method ""fillViews"".
 * @param pack the object(catalog or schema) which you want views to be filled.Can't be null if need to fill theviews into the object of package(catalog or schema).And if Linked is false everything is ok.
 * @param dbJDBCMetadata If it is null the method will do nothing and return null too.
 * @param viewFilter The list for filter views which you want to get.If it is null all of views which belong to thepackage will be return.
 * @param another method to filter the views.the table will be keep if it's name match to the viewFilter. And if youdon't want to use it null is ok.
 * @return The list of views after filter.Will return null only if dbJDBCMetadata isn't normal.
 */
public List<TdView> fillViews(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> viewFilter,String viewPattern){
  return metadataFiller.fillViews(pack,dbJDBCMetadata,viewFilter,viewPattern);
}","/** 
 * zshen Comment method ""fillViews"".
 * @param pack the object(catalog or schema) which you want views to be filled.Can't be null if need to fill theviews into the object of package(catalog or schema).And if Linked is false everything is ok.
 * @param dbJDBCMetadata If it is null the method will do nothing and return null too.
 * @param viewFilter The list for filter views which you want to get.If it is null all of views which belong to thepackage will be return.
 * @param another method to filter the views.the table will be keep if it's name match to the viewFilter. And if youdon't want to use it null is ok.
 * @return The list of views after filter.Will return null only if dbJDBCMetadata isn't normal.
 */
public List<TdView> fillViews(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> viewFilter,String viewPattern,String[] tableType){
  return metadataFiller.fillViews(pack,dbJDBCMetadata,viewFilter,viewPattern,tableType);
}",0.984516817939135
127372,"public List<TdView> fillViews(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> viewFilter,String viewPattern){
  return null;
}","public List<TdView> fillViews(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> viewFilter,String viewPattern,String[] tableTypes){
  return null;
}",0.9315068493150684
127373,"private static List<TdView> loadViews(Connection dataProvider,Catalog catalog,Schema schema,String viewPattern) throws Exception {
  List<TdView> views=new ArrayList<TdView>();
  TypedReturnCode<java.sql.Connection> rcConn=MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider);
  if (!rcConn.isOk()) {
    log.error(rcConn.getMessage());
    throw new Exception(rcConn.getMessage());
  }
  java.sql.Connection connection=rcConn.getObject();
  DatabaseConnection databaseConnection=(DatabaseConnection)dataProvider;
  DatabaseMetaData dm=ExtractMetaDataUtils.getDatabaseMetaData(connection,databaseConnection,false);
  try {
    if (schema != null) {
      if (PackageHelper.getViews(schema).size() == 0) {
        views=MetadataFillFactory.getDBInstance().fillViews(schema,dm,null,viewPattern);
      }
 else {
        MetadataFillFactory.getDBInstance().setLinked(false);
        views=MetadataFillFactory.getDBInstance().fillViews(schema,dm,null,viewPattern);
        MetadataFillFactory.getDBInstance().setLinked(true);
      }
    }
 else {
      if (PackageHelper.getViews(catalog).size() == 0) {
        views=MetadataFillFactory.getDBInstance().fillViews(catalog,dm,null,viewPattern);
      }
 else {
        MetadataFillFactory.getDBInstance().setLinked(false);
        views=MetadataFillFactory.getDBInstance().fillViews(catalog,dm,null,viewPattern);
        MetadataFillFactory.getDBInstance().setLinked(true);
      }
    }
  }
  finally {
    ConnectionUtils.closeConnection(connection);
  }
  return views;
}","private static List<TdView> loadViews(Connection dataProvider,Catalog catalog,Schema schema,String viewPattern) throws Exception {
  List<TdView> views=new ArrayList<TdView>();
  TypedReturnCode<java.sql.Connection> rcConn=MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider);
  if (!rcConn.isOk()) {
    log.error(rcConn.getMessage());
    throw new Exception(rcConn.getMessage());
  }
  java.sql.Connection connection=rcConn.getObject();
  DatabaseConnection databaseConnection=(DatabaseConnection)dataProvider;
  DatabaseMetaData dm=ExtractMetaDataUtils.getDatabaseMetaData(connection,databaseConnection,false);
  try {
    if (schema != null) {
      if (PackageHelper.getViews(schema).size() == 0) {
        views=MetadataFillFactory.getDBInstance().fillViews(schema,dm,null,viewPattern,VIEW_TYPES);
      }
 else {
        MetadataFillFactory.getDBInstance().setLinked(false);
        views=MetadataFillFactory.getDBInstance().fillViews(schema,dm,null,viewPattern,VIEW_TYPES);
        MetadataFillFactory.getDBInstance().setLinked(true);
      }
    }
 else {
      if (PackageHelper.getViews(catalog).size() == 0) {
        views=MetadataFillFactory.getDBInstance().fillViews(catalog,dm,null,viewPattern,VIEW_TYPES);
      }
 else {
        MetadataFillFactory.getDBInstance().setLinked(false);
        views=MetadataFillFactory.getDBInstance().fillViews(catalog,dm,null,viewPattern,VIEW_TYPES);
        MetadataFillFactory.getDBInstance().setLinked(true);
      }
    }
  }
  finally {
    ConnectionUtils.closeConnection(connection);
  }
  return views;
}",0.9859245041586692
127374,"private static List<TdTable> loadTables(Connection dataPloadTablesrovider,Catalog catalog,Schema schema,String tablePattern) throws Exception {
  List<TdTable> tables=new ArrayList<TdTable>();
  TypedReturnCode<java.sql.Connection> rcConn=MetadataConnectionUtils.checkConnection((DatabaseConnection)dataPloadTablesrovider);
  if (!rcConn.isOk()) {
    log.error(rcConn.getMessage());
    throw new Exception(rcConn.getMessage());
  }
  java.sql.Connection connection=rcConn.getObject();
  String[] tableType=new String[]{TableType.TABLE.toString()};
  try {
    DatabaseMetaData dm=ExtractMetaDataUtils.getDatabaseMetaData(connection,(DatabaseConnection)dataPloadTablesrovider,false);
    if (schema != null) {
      if (PackageHelper.getTables(schema).size() == 0) {
        tables=MetadataFillFactory.getDBInstance().fillTables(schema,dm,null,tablePattern,tableType);
      }
 else {
        MetadataFillFactory.getDBInstance().setLinked(false);
        tables=MetadataFillFactory.getDBInstance().fillTables(schema,dm,null,tablePattern,tableType);
        MetadataFillFactory.getDBInstance().setLinked(true);
      }
    }
 else {
      if (PackageHelper.getTables(catalog).size() == 0) {
        tables=MetadataFillFactory.getDBInstance().fillTables(catalog,dm,null,tablePattern,tableType);
      }
 else {
        MetadataFillFactory.getDBInstance().setLinked(false);
        tables=MetadataFillFactory.getDBInstance().fillTables(catalog,dm,null,tablePattern,tableType);
        MetadataFillFactory.getDBInstance().setLinked(true);
      }
    }
  }
  finally {
    ConnectionUtils.closeConnection(connection);
  }
  return tables;
}","private static List<TdTable> loadTables(Connection dataPloadTablesrovider,Catalog catalog,Schema schema,String tablePattern) throws Exception {
  List<TdTable> tables=new ArrayList<TdTable>();
  TypedReturnCode<java.sql.Connection> rcConn=MetadataConnectionUtils.checkConnection((DatabaseConnection)dataPloadTablesrovider);
  if (!rcConn.isOk()) {
    log.error(rcConn.getMessage());
    throw new Exception(rcConn.getMessage());
  }
  java.sql.Connection connection=rcConn.getObject();
  try {
    DatabaseMetaData dm=ExtractMetaDataUtils.getDatabaseMetaData(connection,(DatabaseConnection)dataPloadTablesrovider,false);
    if (schema != null) {
      if (PackageHelper.getTables(schema).size() == 0) {
        tables=MetadataFillFactory.getDBInstance().fillTables(schema,dm,null,tablePattern,TABLE_TYPES);
      }
 else {
        MetadataFillFactory.getDBInstance().setLinked(false);
        tables=MetadataFillFactory.getDBInstance().fillTables(schema,dm,null,tablePattern,TABLE_TYPES);
        MetadataFillFactory.getDBInstance().setLinked(true);
      }
    }
 else {
      if (PackageHelper.getTables(catalog).size() == 0) {
        tables=MetadataFillFactory.getDBInstance().fillTables(catalog,dm,null,tablePattern,TABLE_TYPES);
      }
 else {
        MetadataFillFactory.getDBInstance().setLinked(false);
        tables=MetadataFillFactory.getDBInstance().fillTables(catalog,dm,null,tablePattern,TABLE_TYPES);
        MetadataFillFactory.getDBInstance().setLinked(true);
      }
    }
  }
  finally {
    ConnectionUtils.closeConnection(connection);
  }
  return tables;
}",0.5243864554209382
127375,public boolean isModified(Property property);,public boolean isModified(Object property);,0.8863636363636364
127376,"@Override public boolean isModified(Property property){
  return repositoryFactoryFromProvider.isModified(property);
}","@Override public boolean isModified(Object property){
  return repositoryFactoryFromProvider.isModified(property);
}",0.9572649572649572
127377,public boolean isModified(Property property);,public boolean isModified(Object property);,0.8863636363636364
127378,"@Override public boolean isModified(Property property){
  return false;
}","@Override public boolean isModified(Object property){
  return false;
}",0.9305555555555556
127379,"private boolean validResourcePath(IResourceDelta delta,IPath topLevelNodeWorkspaceRelativePath,boolean refMerged){
  if (ingoreResource(delta)) {
    return false;
  }
  IResourceDelta[] affectedChildren=delta.getAffectedChildren();
  IResource res=delta.getResource();
  IPath path=delta.getFullPath();
  boolean noChild=(affectedChildren == null || (affectedChildren.length == 0));
  if (!noChild && affectedChildren != null && affectedChildren.length == 1 && FilesUtils.isSVNFolder(affectedChildren[0].getResource())) {
    noChild=true;
  }
  if (path != null && noChild && (FileConstants.PROPERTIES_EXTENSION.equals(path.getFileExtension()) || (res instanceof IContainer))) {
    if (isMatchedPath(topLevelNodeWorkspaceRelativePath,path)) {
      return true;
    }
 else     if (refMerged) {
      if (res != null) {
        path=res.getProjectRelativePath();
      }
 else {
        path=path.removeFirstSegments(1);
      }
      IPath relativePath=topLevelNodeWorkspaceRelativePath.removeFirstSegments(1);
      if (isMatchedPath(relativePath,path)) {
        return true;
      }
    }
  }
  if (affectedChildren != null) {
    for (    IResourceDelta child : affectedChildren) {
      if (validResourcePath(child,topLevelNodeWorkspaceRelativePath,refMerged)) {
        return true;
      }
    }
  }
  return false;
}","private boolean validResourcePath(IResourceDelta delta,IPath topLevelNodeWorkspaceRelativePath,boolean refMerged){
  if (ingoreResource(delta)) {
    return false;
  }
  IResourceDelta[] affectedChildren=delta.getAffectedChildren();
  IResource res=delta.getResource();
  IPath path=delta.getFullPath();
  boolean noChild=(affectedChildren == null || (affectedChildren.length == 0));
  if (!noChild && affectedChildren != null && affectedChildren.length == 1 && FilesUtils.isSVNFolder(affectedChildren[0].getResource())) {
    noChild=true;
  }
  if (path != null && noChild && (isValidFileResource(res) || (res instanceof IContainer))) {
    if (isMatchedPath(topLevelNodeWorkspaceRelativePath,path)) {
      return true;
    }
 else     if (refMerged) {
      if (res != null) {
        path=res.getProjectRelativePath();
      }
 else {
        path=path.removeFirstSegments(1);
      }
      IPath relativePath=topLevelNodeWorkspaceRelativePath.removeFirstSegments(1);
      if (isMatchedPath(relativePath,path)) {
        return true;
      }
    }
  }
  if (affectedChildren != null) {
    for (    IResourceDelta child : affectedChildren) {
      if (validResourcePath(child,topLevelNodeWorkspaceRelativePath,refMerged)) {
        return true;
      }
    }
  }
  return false;
}",0.8217291507268554
127380,"@Test public void testIsContainsTableConnectionSchemaString(){
  String schemaName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Schema schema=null;
  String[] tableType=new String[]{TableType.TABLE.toString()};
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(null,schemaName,tablePattern,tableType)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    schema=Mockito.mock(Schema.class);
    Mockito.when(schema.getName()).thenReturn(schemaName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(schema)).thenReturn(schema);
    Mockito.when(PackageHelper.getParentPackage(schema)).thenReturn(null);
    containsTable=DqRepositoryViewService.isContainsTable(dataProvider,schema,tablePattern);
    Mockito.verify(metaData).getTables(null,schemaName,tablePattern,tableType);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(schema).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,schema);
  assertTrue(containsTable);
}","@Test public void testIsContainsTableConnectionSchemaString(){
  String schemaName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Schema schema=null;
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(null,schemaName,tablePattern,DqRepositoryViewService.TABLE_TYPES)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    schema=Mockito.mock(Schema.class);
    Mockito.when(schema.getName()).thenReturn(schemaName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(schema)).thenReturn(schema);
    Mockito.when(PackageHelper.getParentPackage(schema)).thenReturn(null);
    containsTable=DqRepositoryViewService.isContainsTable(dataProvider,schema,tablePattern);
    Mockito.verify(metaData).getTables(null,schemaName,tablePattern,DqRepositoryViewService.TABLE_TYPES);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(schema).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,schema);
  assertTrue(containsTable);
}",0.8666824532322993
127381,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#isContainsView(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Schema,java.lang.String)}.
 */
@Test public void testIsContainsViewConnectionSchemaString(){
  String schemaName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Schema schema=null;
  String[] tableType=new String[]{TableType.VIEW.toString()};
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(null,schemaName,tablePattern,tableType)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    schema=Mockito.mock(Schema.class);
    Mockito.when(schema.getName()).thenReturn(schemaName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(schema)).thenReturn(schema);
    Mockito.when(PackageHelper.getParentPackage(schema)).thenReturn(null);
    containsTable=DqRepositoryViewService.isContainsView(dataProvider,schema,tablePattern);
    Mockito.verify(metaData).getTables(null,schemaName,tablePattern,tableType);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(schema).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,schema);
  assertTrue(containsTable);
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#isContainsView(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Schema,java.lang.String)}.
 */
@Test public void testIsContainsViewConnectionSchemaString(){
  String schemaName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Schema schema=null;
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(null,schemaName,tablePattern,DqRepositoryViewService.VIEW_TYPES)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    schema=Mockito.mock(Schema.class);
    Mockito.when(schema.getName()).thenReturn(schemaName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(schema)).thenReturn(schema);
    Mockito.when(PackageHelper.getParentPackage(schema)).thenReturn(null);
    containsTable=DqRepositoryViewService.isContainsView(dataProvider,schema,tablePattern);
    Mockito.verify(metaData).getTables(null,schemaName,tablePattern,DqRepositoryViewService.VIEW_TYPES);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(schema).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,schema);
  assertTrue(containsTable);
}",0.88
127382,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#isContainsTable(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String)}.
 */
@Test public void testIsContainsTableConnectionCatalogString(){
  String catalogName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Catalog catalog=null;
  String[] tableType=new String[]{TableType.TABLE.toString()};
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(catalogName,null,tablePattern,tableType)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    catalog=Mockito.mock(Catalog.class);
    Mockito.when(catalog.getName()).thenReturn(catalogName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(catalog)).thenReturn(catalog);
    containsTable=DqRepositoryViewService.isContainsTable(dataProvider,catalog,tablePattern);
    Mockito.verify(metaData).getTables(catalogName,null,tablePattern,tableType);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(catalog).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,catalog);
  assertTrue(containsTable);
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#isContainsTable(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String)}.
 */
@Test public void testIsContainsTableConnectionCatalogString(){
  String catalogName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Catalog catalog=null;
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(catalogName,null,tablePattern,DqRepositoryViewService.TABLE_TYPES)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    catalog=Mockito.mock(Catalog.class);
    Mockito.when(catalog.getName()).thenReturn(catalogName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(catalog)).thenReturn(catalog);
    containsTable=DqRepositoryViewService.isContainsTable(dataProvider,catalog,tablePattern);
    Mockito.verify(metaData).getTables(catalogName,null,tablePattern,DqRepositoryViewService.TABLE_TYPES);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(catalog).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,catalog);
  assertTrue(containsTable);
}",0.8764974950991069
127383,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getViews(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String,boolean)}.
 */
@Test public void testGetViewsConnectionCatalogStringBoolean(){
  java.sql.Connection sqlConn=null;
  DatabaseMetaData metaData=null;
  String catalogName=""String_Node_Str"";
  List<TdView> tableList=new ArrayList<TdView>();
  List<TdView> retableList=new ArrayList<TdView>();
  List<TdView> resultList1=null;
  List<TdView> resultList2=null;
  List<TdView> resultList3=null;
  String tablePattern=null;
  boolean loadFromDB=true;
  TdView tableMock=Mockito.mock(TdView.class);
  retableList.add(tableMock);
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Connection dataProvider=Mockito.mock(DatabaseConnection.class);
    Catalog catalog=Mockito.mock(Catalog.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    ReturnCode rc=new ReturnCode(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getViews(catalog)).thenReturn(tableList);
    MetadataFillFactory metadataMock=Mockito.mock(MetadataFillFactory.class);
    Mockito.when(metadataMock.fillViews(Mockito.eq(catalog),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern))).thenReturn(retableList).thenReturn(retableList);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(metadataMock);
    PowerMockito.mockStatic(ConnectionUtils.class);
    Mockito.when(ConnectionUtils.closeConnection(sqlConn)).thenReturn(rc);
    PowerMockito.mockStatic(CatalogHelper.class);
    Mockito.when(CatalogHelper.getViews(catalog)).thenReturn(retableList);
    resultList1=DqRepositoryViewService.getViews(dataProvider,catalog,tablePattern,loadFromDB);
    tableList.add(tableMock);
    resultList2=DqRepositoryViewService.getViews(dataProvider,catalog,tablePattern,loadFromDB);
    loadFromDB=false;
    resultList3=DqRepositoryViewService.getViews(dataProvider,catalog,tablePattern,loadFromDB);
    Mockito.verify(metadataMock,Mockito.times(2)).fillViews(Mockito.eq(catalog),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern));
    Mockito.verify(metadataMock).setLinked(true);
    Mockito.verify(metadataMock).setLinked(false);
    Mockito.verifyZeroInteractions(tableMock,tables,dataProvider,catalog,sqlConn,metaData,metadataMock);
    assertTrue(resultList1.size() == 1);
    assertTrue(resultList2.size() == 1);
    assertTrue(resultList3.size() == 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getViews(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String,boolean)}.
 */
@Test public void testGetViewsConnectionCatalogStringBoolean(){
  java.sql.Connection sqlConn=null;
  DatabaseMetaData metaData=null;
  String catalogName=""String_Node_Str"";
  List<TdView> tableList=new ArrayList<TdView>();
  List<TdView> retableList=new ArrayList<TdView>();
  List<TdView> resultList1=null;
  List<TdView> resultList2=null;
  List<TdView> resultList3=null;
  String tablePattern=null;
  boolean loadFromDB=true;
  TdView tableMock=Mockito.mock(TdView.class);
  retableList.add(tableMock);
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Connection dataProvider=Mockito.mock(DatabaseConnection.class);
    Catalog catalog=Mockito.mock(Catalog.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    ReturnCode rc=new ReturnCode(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getViews(catalog)).thenReturn(tableList);
    MetadataFillFactory metadataMock=Mockito.mock(MetadataFillFactory.class);
    Mockito.when(metadataMock.fillViews(Mockito.eq(catalog),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),Mockito.eq(DqRepositoryViewService.VIEW_TYPES))).thenReturn(retableList).thenReturn(retableList);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(metadataMock);
    PowerMockito.mockStatic(ConnectionUtils.class);
    Mockito.when(ConnectionUtils.closeConnection(sqlConn)).thenReturn(rc);
    PowerMockito.mockStatic(CatalogHelper.class);
    Mockito.when(CatalogHelper.getViews(catalog)).thenReturn(retableList);
    resultList1=DqRepositoryViewService.getViews(dataProvider,catalog,tablePattern,loadFromDB);
    tableList.add(tableMock);
    resultList2=DqRepositoryViewService.getViews(dataProvider,catalog,tablePattern,loadFromDB);
    loadFromDB=false;
    resultList3=DqRepositoryViewService.getViews(dataProvider,catalog,tablePattern,loadFromDB);
    Mockito.verify(metadataMock,Mockito.times(2)).fillViews(Mockito.eq(catalog),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),Mockito.eq(DqRepositoryViewService.VIEW_TYPES));
    Mockito.verify(metadataMock).setLinked(true);
    Mockito.verify(metadataMock).setLinked(false);
    Mockito.verifyZeroInteractions(tableMock,tables,dataProvider,catalog,sqlConn,metaData,metadataMock);
    assertTrue(resultList1.size() == 1);
    assertTrue(resultList2.size() == 1);
    assertTrue(resultList3.size() == 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}",0.985701247337998
127384,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getViews(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Schema,java.lang.String,boolean)}.
 */
@Test public void testGetViewsConnectionSchemaStringBoolean(){
  java.sql.Connection sqlConn=null;
  DatabaseMetaData metaData=null;
  String schemaName=""String_Node_Str"";
  List<TdView> tableList=new ArrayList<TdView>();
  List<TdView> retableList=new ArrayList<TdView>();
  List<TdView> resultList1=null;
  List<TdView> resultList2=null;
  List<TdView> resultList3=null;
  String tablePattern=null;
  boolean loadFromDB=true;
  TdView tableMock=Mockito.mock(TdView.class);
  retableList.add(tableMock);
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Connection dataProvider=Mockito.mock(DatabaseConnection.class);
    Catalog catalog=Mockito.mock(Catalog.class);
    Schema schema=Mockito.mock(Schema.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    ReturnCode rc=new ReturnCode(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getViews(schema)).thenReturn(tableList);
    MetadataFillFactory metadataMock=Mockito.mock(MetadataFillFactory.class);
    Mockito.when(metadataMock.fillViews(Mockito.eq(schema),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern))).thenReturn(retableList).thenReturn(retableList);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(metadataMock);
    PowerMockito.mockStatic(ConnectionUtils.class);
    Mockito.when(ConnectionUtils.closeConnection(sqlConn)).thenReturn(rc);
    PowerMockito.mockStatic(SchemaHelper.class);
    Mockito.when(SchemaHelper.getViews(schema)).thenReturn(retableList);
    PowerMockito.mockStatic(CatalogHelper.class);
    Mockito.when(CatalogHelper.getParentCatalog(schema)).thenReturn(catalog);
    resultList1=DqRepositoryViewService.getViews(dataProvider,schema,tablePattern,loadFromDB);
    tableList.add(tableMock);
    resultList2=DqRepositoryViewService.getViews(dataProvider,schema,tablePattern,loadFromDB);
    loadFromDB=false;
    resultList3=DqRepositoryViewService.getViews(dataProvider,schema,tablePattern,loadFromDB);
    Mockito.verify(metadataMock,Mockito.times(2)).fillViews(Mockito.eq(schema),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern));
    Mockito.verify(metadataMock).setLinked(true);
    Mockito.verify(metadataMock).setLinked(false);
    Mockito.verifyZeroInteractions(tableMock,tables,dataProvider,schema,sqlConn,metaData,metadataMock,catalog);
    assertTrue(resultList1.size() == 1);
    assertTrue(resultList2.size() == 1);
    assertTrue(resultList3.size() == 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getViews(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Schema,java.lang.String,boolean)}.
 */
@Test public void testGetViewsConnectionSchemaStringBoolean(){
  java.sql.Connection sqlConn=null;
  DatabaseMetaData metaData=null;
  String schemaName=""String_Node_Str"";
  List<TdView> tableList=new ArrayList<TdView>();
  List<TdView> retableList=new ArrayList<TdView>();
  List<TdView> resultList1=null;
  List<TdView> resultList2=null;
  List<TdView> resultList3=null;
  String tablePattern=null;
  boolean loadFromDB=true;
  TdView tableMock=Mockito.mock(TdView.class);
  retableList.add(tableMock);
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Connection dataProvider=Mockito.mock(DatabaseConnection.class);
    Catalog catalog=Mockito.mock(Catalog.class);
    Schema schema=Mockito.mock(Schema.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    ReturnCode rc=new ReturnCode(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getViews(schema)).thenReturn(tableList);
    MetadataFillFactory metadataMock=Mockito.mock(MetadataFillFactory.class);
    Mockito.when(metadataMock.fillViews(Mockito.eq(schema),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),Mockito.eq(DqRepositoryViewService.VIEW_TYPES))).thenReturn(retableList).thenReturn(retableList);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(metadataMock);
    PowerMockito.mockStatic(ConnectionUtils.class);
    Mockito.when(ConnectionUtils.closeConnection(sqlConn)).thenReturn(rc);
    PowerMockito.mockStatic(SchemaHelper.class);
    Mockito.when(SchemaHelper.getViews(schema)).thenReturn(retableList);
    PowerMockito.mockStatic(CatalogHelper.class);
    Mockito.when(CatalogHelper.getParentCatalog(schema)).thenReturn(catalog);
    resultList1=DqRepositoryViewService.getViews(dataProvider,schema,tablePattern,loadFromDB);
    tableList.add(tableMock);
    resultList2=DqRepositoryViewService.getViews(dataProvider,schema,tablePattern,loadFromDB);
    loadFromDB=false;
    resultList3=DqRepositoryViewService.getViews(dataProvider,schema,tablePattern,loadFromDB);
    Mockito.verify(metadataMock,Mockito.times(2)).fillViews(Mockito.eq(schema),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),Mockito.eq(DqRepositoryViewService.VIEW_TYPES));
    Mockito.verify(metadataMock).setLinked(true);
    Mockito.verify(metadataMock).setLinked(false);
    Mockito.verifyZeroInteractions(tableMock,tables,dataProvider,schema,sqlConn,metaData,metadataMock,catalog);
    assertTrue(resultList1.size() == 1);
    assertTrue(resultList2.size() == 1);
    assertTrue(resultList3.size() == 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}",0.9864004629629628
127385,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#isContainsView(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String)}.
 */
@Test public void testIsContainsViewConnectionCatalogString(){
  String catalogName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Catalog catalog=null;
  String[] tableType=new String[]{TableType.VIEW.toString()};
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(catalogName,null,tablePattern,tableType)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    catalog=Mockito.mock(Catalog.class);
    Mockito.when(catalog.getName()).thenReturn(catalogName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(catalog)).thenReturn(catalog);
    containsTable=DqRepositoryViewService.isContainsView(dataProvider,catalog,tablePattern);
    Mockito.verify(metaData).getTables(catalogName,null,tablePattern,tableType);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(catalog).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,catalog);
  assertTrue(containsTable);
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#isContainsView(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String)}.
 */
@Test public void testIsContainsViewConnectionCatalogString(){
  String catalogName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Catalog catalog=null;
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(catalogName,null,tablePattern,DqRepositoryViewService.VIEW_TYPES)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    catalog=Mockito.mock(Catalog.class);
    Mockito.when(catalog.getName()).thenReturn(catalogName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(catalog)).thenReturn(catalog);
    containsTable=DqRepositoryViewService.isContainsView(dataProvider,catalog,tablePattern);
    Mockito.verify(metaData).getTables(catalogName,null,tablePattern,DqRepositoryViewService.VIEW_TYPES);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(catalog).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,catalog);
  assertTrue(containsTable);
}",0.8764731558271497
127386,"/** 
 * add Field to Group File Viewer.
 * @param parent
 * @param form
 * @param width
 * @param height
 */
private void addGroupFileViewer(final Composite parent,final int width,int height){
  tabFolder=new CTabFolder(parent,SWT.BORDER);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  previewTabItem=new CTabItem(tabFolder,SWT.BORDER);
  previewTabItem.setText(Messages.getString(""String_Node_Str""));
  outputTabItem=new CTabItem(tabFolder,SWT.BORDER);
  outputTabItem.setText(Messages.getString(""String_Node_Str""));
  Composite previewComposite=Form.startNewGridLayout(tabFolder,1);
  outputComposite=Form.startNewGridLayout(tabFolder,1);
  Composite compositeDelimitedFilePreviewButton=Form.startNewDimensionnedGridLayout(previewComposite,4,width,HEIGHT_BUTTON_PIXEL);
  height=height - HEIGHT_BUTTON_PIXEL - 15;
  previewButton=new Button(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewButton.setText(Messages.getString(""String_Node_Str""));
  previewButton.setSize(WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  addadvancedWSDLExplorer(compositeDelimitedFilePreviewButton);
  new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel=new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel.setText(""String_Node_Str"");
  previewInformationLabel.setForeground(getDisplay().getSystemColor(SWT.COLOR_BLUE));
  Composite compositeDelimitedFilePreview=Form.startNewDimensionnedGridLayout(previewComposite,1,width,height);
  wsdlPreview=new ShadowProcessPreview(compositeDelimitedFilePreview,null,width,height - 10);
  wsdlPreview.newTablePreview();
  previewTabItem.setControl(previewComposite);
  outputTabItem.setControl(outputComposite);
  tabFolder.setSelection(previewTabItem);
  tabFolder.pack();
}","/** 
 * add Field to Group File Viewer.
 * @param parent
 * @param form
 * @param width
 * @param height
 */
private void addGroupFileViewer(final Composite parent,final int width,int height){
  tabFolder=new CTabFolder(parent,SWT.BORDER);
  tabFolder.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  previewTabItem=new CTabItem(tabFolder,SWT.BORDER);
  previewTabItem.setText(Messages.getString(""String_Node_Str""));
  outputTabItem=new CTabItem(tabFolder,SWT.BORDER);
  outputTabItem.setText(Messages.getString(""String_Node_Str""));
  Composite previewComposite=Form.startNewGridLayout(tabFolder,1);
  outputComposite=Form.startNewGridLayout(tabFolder,1);
  Composite compositeDelimitedFilePreviewButton=Form.startNewDimensionnedGridLayout(previewComposite,4,width,HEIGHT_BUTTON_PIXEL);
  height=height - HEIGHT_BUTTON_PIXEL - 15;
  previewButton=new Button(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewButton.setText(Messages.getString(""String_Node_Str""));
  previewButton.setSize(WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  addadvancedWSDLExplorer(compositeDelimitedFilePreviewButton);
  new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel=new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel.setText(""String_Node_Str"");
  previewInformationLabel.setForeground(getDisplay().getSystemColor(SWT.COLOR_BLUE));
  Composite compositeDelimitedFilePreview=Form.startNewDimensionnedGridLayout(previewComposite,1,width,height);
  wsdlPreview=new ShadowProcessPreview(compositeDelimitedFilePreview,null,width,height - 10);
  wsdlPreview.newTablePreview();
  previewTabItem.setControl(previewComposite);
  outputTabItem.setControl(outputComposite);
  tabFolder.setSelection(previewTabItem);
  tabFolder.pack();
}",0.9966273187183812
127387,"private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    if (particleToTreeNode.containsKey(xsdElementDeclarationParticle)) {
      ATreeNode originalTreeNode=particleToTreeNode.get(xsdElementDeclarationParticle);
      ATreeNode partNode=new ATreeNode();
      partNode.setCurrentNamespace(originalTreeNode.getCurrentNamespace());
      partNode.setValue(originalTreeNode.getValue());
      partNode.setType(ATreeNode.ELEMENT_TYPE);
      partNode.setDataType(originalTreeNode.getDataType());
      partNode.addChild(originalTreeNode.getChildren());
      parentNode.addChild(partNode);
      return;
    }
    ATreeNode partNode=new ATreeNode();
    particleToTreeNode.put(xsdElementDeclarationParticle,partNode);
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (dataType == null && xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}","private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    if (particleToTreeNode.containsKey(xsdElementDeclarationParticle)) {
      ATreeNode originalTreeNode=particleToTreeNode.get(xsdElementDeclarationParticle);
      ATreeNode partNode=new ATreeNode();
      partNode.setCurrentNamespace(originalTreeNode.getCurrentNamespace());
      partNode.setValue(originalTreeNode.getValue());
      partNode.setType(ATreeNode.ELEMENT_TYPE);
      partNode.setDataType(originalTreeNode.getDataType());
      partNode.addChild(originalTreeNode.getChildren());
      parentNode.addChild(partNode);
      return;
    }
    ATreeNode partNode=new ATreeNode();
    particleToTreeNode.put(xsdElementDeclarationParticle,partNode);
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (!XSDConstants.isSchemaForSchemaNamespace(xsdElementDeclarationParticle.getTypeDefinition().getTargetNamespace()) && xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}",0.9894995898277276
127388,"@Test public void testCreateItemResource(){
  URI uri=mock(URI.class);
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Resource resource=basicHandler.createItemResource(uri);
  Assert.assertNotNull(resource);
  Assert.assertEquals(CwmResource.class,resource.getClass());
}","@Test public void testCreateItemResource(){
  URI uri=URI.createURI(processPropPath1.toPortableString());
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Resource resource=basicHandler.createItemResource(uri);
  Assert.assertNotNull(resource);
  Assert.assertEquals(CwmResource.class,resource.getClass());
}",0.912685337726524
127389,"@Test public void testCheckAndSetProject4NoProject(){
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ItemRecord itemRecord=mock(ItemRecord.class);
  Property property=mock(Property.class);
  ProcessItem item=mock(ProcessItem.class);
  when(itemRecord.getProperty()).thenReturn(property);
  when(itemRecord.getItem()).thenReturn(item);
  when(itemRecord.getPath()).thenReturn(processPropPath1);
  ResourcesManager resManager=mock(ResourcesManager.class);
  basicHandler.checkAndSetProject(resManager,itemRecord);
  Assert.assertFalse(itemRecord.getErrors().isEmpty());
  Assert.assertFalse(itemRecord.isValid());
  Assert.assertTrue(itemRecord.getErrors().size() == 1);
}","@Test public void testCheckAndSetProject4NoProject(){
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ItemRecord itemRecord=new ItemRecord(processPropPath1);
  Property property=mock(Property.class);
  itemRecord.setProperty(property);
  ProcessItem item=PropertiesFactory.eINSTANCE.createProcessItem();
  when(property.getItem()).thenReturn(item);
  ResourcesManager resManager=mock(ResourcesManager.class);
  basicHandler.checkAndSetProject(resManager,itemRecord);
  Assert.assertFalse(itemRecord.getErrors().isEmpty());
  Assert.assertFalse(itemRecord.isValid());
  Assert.assertTrue(itemRecord.getErrors().size() == 1);
}",0.6827794561933535
127390,"@Test public void testGetItemPath(){
  Item item=mock(Item.class);
  Assert.assertEquals(itemPath,HandlerUtil.getItemPath(propPath,item));
  when(item.getFileExtension()).thenReturn(FileConstants.ITEM_EXTENSION);
  Assert.assertEquals(itemPath,HandlerUtil.getItemPath(propPath,item));
  when(item.getFileExtension()).thenReturn(FileConstants.SCREENSHOT_EXTENSION);
  Assert.assertEquals(new Path(""String_Node_Str""),HandlerUtil.getItemPath(propPath,item));
}","@Test public void testGetItemPath(){
  Item item=mock(Item.class);
  when(item.isNeedVersion()).thenReturn(true);
  Assert.assertEquals(itemPath,HandlerUtil.getItemPath(propPath,item));
  when(item.getFileExtension()).thenReturn(FileConstants.ITEM_EXTENSION);
  Assert.assertEquals(itemPath,HandlerUtil.getItemPath(propPath,item));
  when(item.getFileExtension()).thenReturn(FileConstants.SCREENSHOT_EXTENSION);
  Assert.assertEquals(new Path(""String_Node_Str""),HandlerUtil.getItemPath(propPath,item));
}",0.951092611862643
127391,"@Test public void testIsSameName4DiffId(){
  ItemRecord itemRecord1=mock(ItemRecord.class);
  Property property1=mock(Property.class);
  when(itemRecord1.getProperty()).thenReturn(property1);
  when(property1.getLabel()).thenReturn(""String_Node_Str"");
  when(property1.getId()).thenReturn(""String_Node_Str"");
  IRepositoryViewObject repViewObj=mock(IRepositoryViewObject.class);
  when(repViewObj.getLabel()).thenReturn(""String_Node_Str"");
  when(repViewObj.getId()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertFalse(basicHandler.isSameName(itemRecord1,repViewObj));
}","@Test public void testIsSameName4DiffId(){
  ItemRecord itemRecord1=mock(ItemRecord.class);
  Property property1=mock(Property.class);
  when(itemRecord1.getProperty()).thenReturn(property1);
  when(property1.getLabel()).thenReturn(""String_Node_Str"");
  when(property1.getId()).thenReturn(""String_Node_Str"");
  IRepositoryViewObject repViewObj=mock(IRepositoryViewObject.class);
  when(repViewObj.getLabel()).thenReturn(""String_Node_Str"");
  when(repViewObj.getId()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertTrue(basicHandler.isSameName(itemRecord1,repViewObj));
}",0.9944400317712472
127392,"@Test public void testIsSameName4DiffLabel(){
  ItemRecord itemRecord1=mock(ItemRecord.class);
  Property property1=mock(Property.class);
  when(itemRecord1.getProperty()).thenReturn(property1);
  when(property1.getLabel()).thenReturn(""String_Node_Str"");
  when(property1.getId()).thenReturn(""String_Node_Str"");
  IRepositoryViewObject repViewObj=mock(IRepositoryViewObject.class);
  when(repViewObj.getLabel()).thenReturn(""String_Node_Str"");
  when(repViewObj.getId()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertTrue(basicHandler.isSameName(itemRecord1,repViewObj));
}","@Test public void testIsSameName4DiffLabel(){
  ItemRecord itemRecord1=mock(ItemRecord.class);
  Property property1=mock(Property.class);
  when(itemRecord1.getProperty()).thenReturn(property1);
  when(property1.getLabel()).thenReturn(""String_Node_Str"");
  when(property1.getId()).thenReturn(""String_Node_Str"");
  IRepositoryViewObject repViewObj=mock(IRepositoryViewObject.class);
  when(repViewObj.getLabel()).thenReturn(""String_Node_Str"");
  when(repViewObj.getId()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertFalse(basicHandler.isSameName(itemRecord1,repViewObj));
}",0.9944664031620554
127393,"@Test public void testCheckAndSetProject4NoProject(){
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ItemRecord itemRecord=mock(ItemRecord.class);
  Property property=mock(Property.class);
  when(itemRecord.getProperty()).thenReturn(property);
  when(itemRecord.getPath()).thenReturn(processPropPath1);
  ResourcesManager resManager=mock(ResourcesManager.class);
  basicHandler.checkAndSetProject(resManager,itemRecord);
  Assert.assertFalse(itemRecord.getErrors().isEmpty());
  Assert.assertFalse(itemRecord.isValid());
  Assert.assertTrue(itemRecord.getErrors().size() == 1);
}","@Test public void testCheckAndSetProject4NoProject(){
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ItemRecord itemRecord=mock(ItemRecord.class);
  Property property=mock(Property.class);
  ProcessItem item=mock(ProcessItem.class);
  when(itemRecord.getProperty()).thenReturn(property);
  when(itemRecord.getItem()).thenReturn(item);
  when(itemRecord.getPath()).thenReturn(processPropPath1);
  ResourcesManager resManager=mock(ResourcesManager.class);
  basicHandler.checkAndSetProject(resManager,itemRecord);
  Assert.assertFalse(itemRecord.getErrors().isEmpty());
  Assert.assertFalse(itemRecord.isValid());
  Assert.assertTrue(itemRecord.getErrors().size() == 1);
}",0.9288506645817044
127394,"/** 
 * Test method for  {@link org.talend.core.model.metadata.MetadataToolHelper#validateColumnName(java.lang.String,int)}.
 */
@Test public void testValidateColumnName(){
  CoreRuntimePlugin.getInstance().getPreferenceStore().setValue(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS,false);
  String columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(""String_Node_Str"",columnName);
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(""String_Node_Str"",columnName);
  CoreRuntimePlugin.getInstance().getPreferenceStore().setValue(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS,true);
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(""String_Node_Str"",columnName);
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(""String_Node_Str"",columnName);
  CoreRuntimePlugin.getInstance().getPreferenceStore().setToDefault(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS);
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.MetadataToolHelper#validateColumnName(java.lang.String,int)}.
 */
@Test public void testValidateColumnName(){
  IEclipsePreferences preferences=new InstanceScope().getNode(ITalendCorePrefConstants.CoreUIPlugin_ID);
  preferences.putBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS,false);
  String columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(""String_Node_Str"",columnName);
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(""String_Node_Str"",columnName);
  preferences.putBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS,true);
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(""String_Node_Str"",columnName);
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(""String_Node_Str"",columnName);
}",0.9076183244748164
127395,"/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  return getDatabaseValue(connection,value,null);
}","/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  return getDatabaseValue(connection,value,null,null);
}",0.9898580121703854
127396,"/** 
 * DOC qiang.zhang Comment method ""getXMLMappingValue"".
 * @param repositoryConnection
 * @param metadataTable
 * @return
 */
public static List<Map<String,Object>> getXMLMappingValue(Connection connection,List<IMetadataTable> metadataTables){
  if (metadataTables == null || metadataTables.isEmpty()) {
    return new ArrayList<Map<String,Object>>();
  }
  if (connection instanceof XmlFileConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    XmlFileConnection xmlConnection=(XmlFileConnection)connection;
    EList objectList=xmlConnection.getSchema();
    XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)objectList.get(0);
    if (metadataTable != null) {
      if (xmlDesc != null) {
        List<SchemaTarget> schemaTargets=xmlDesc.getSchemaTargets();
        List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
        for (        IMetadataColumn col : metadataTable.getListColumns()) {
          Map<String,Object> map=new HashMap<String,Object>();
          map.put(""String_Node_Str"",null);
          for (int i=0; i < schemaTargets.size(); i++) {
            SchemaTarget sch=schemaTargets.get(i);
            if (col.getLabel().equals(sch.getTagName())) {
              map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(sch.getRelativeXPathQuery()));
            }
          }
          if (map.get(UpdatesConstants.QUERY) == null) {
            if (col.getLabel() != null && col.getLabel().startsWith(""String_Node_Str"")) {
              String temp=col.getLabel().substring(6,col.getLabel().length());
              if (temp != null) {
                char c[]=temp.toCharArray();
                boolean flag=true;
                for (int i=0; i < c.length; i++) {
                  if (c[i] < '0' || c[i] > '9') {
                    flag=false;
                    break;
                  }
                }
                if (flag) {
                  int j=Integer.parseInt(temp);
                  SchemaTarget schema=schemaTargets.get(j);
                  if (schema != null && KeywordsValidator.isKeyword(schema.getTagName())) {
                    map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(schema.getRelativeXPathQuery()));
                  }
                }
              }
            }
          }
          maps.add(map);
        }
        return maps;
      }
    }
  }
  if (connection instanceof MDMConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    MDMConnection xmlConnection=(MDMConnection)connection;
    EList objectList=xmlConnection.getSchemas();
    if (metadataTable != null) {
      for (      Concept concept : (List<Concept>)objectList) {
        if (concept != null && concept.getLabel() != null && concept.getLabel().equals(metadataTable.getLabel())) {
          List<ConceptTarget> conceptTargets=concept.getConceptTargets();
          List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
          for (          IMetadataColumn col : metadataTable.getListColumns()) {
            Map<String,Object> map=new HashMap<String,Object>();
            map.put(""String_Node_Str"",null);
            for (int i=0; i < conceptTargets.size(); i++) {
              ConceptTarget cpt=conceptTargets.get(i);
              if (col.getLabel().equals(cpt.getTargetName())) {
                map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(cpt.getRelativeLoopExpression()));
              }
            }
            maps.add(map);
          }
          return maps;
        }
      }
    }
  }
  if (connection instanceof HL7Connection) {
    HL7Connection hl7Connection=(HL7Connection)connection;
    Set objectList=ConnectionHelper.getTables(hl7Connection);
    List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
    for (    IMetadataTable tableOfNode : metadataTables) {
      Map<String,Object> map=new HashMap<String,Object>();
      for (      MetadataTable table : (Set<MetadataTable>)objectList) {
        if (table != null && (table.getLabel() == null || table.getLabel().equals(tableOfNode.getLabel()))) {
          String xpathValue=""String_Node_Str"";
          for (          MetadataColumn col : table.getColumns()) {
            String original=col.getOriginalField();
            if (original != null && !""String_Node_Str"".equals(original)) {
              if (original.indexOf(TalendQuoteUtils.LBRACKET) != -1) {
                original=original.substring(0,original.indexOf(TalendQuoteUtils.LBRACKET));
              }
              original=TalendQuoteUtils.addQuotes(original);
              xpathValue+=original;
            }
            if (table.getColumns().indexOf(col) < table.getColumns().size() - 1) {
              xpathValue+=""String_Node_Str"";
            }
          }
          map.put(""String_Node_Str"",xpathValue);
          map.put(""String_Node_Str"",tableOfNode.getTableName());
          maps.add(map);
        }
      }
    }
    return maps;
  }
  return null;
}","/** 
 * DOC qiang.zhang Comment method ""getXMLMappingValue"".
 * @param repositoryConnection
 * @param metadataTable
 * @return
 */
public static List<Map<String,Object>> getXMLMappingValue(Connection connection,List<IMetadataTable> metadataTables){
  if (metadataTables == null || metadataTables.isEmpty()) {
    return new ArrayList<Map<String,Object>>();
  }
  if (connection instanceof XmlFileConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    XmlFileConnection xmlConnection=(XmlFileConnection)connection;
    EList objectList=xmlConnection.getSchema();
    XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)objectList.get(0);
    if (metadataTable != null) {
      if (xmlDesc != null) {
        List<SchemaTarget> schemaTargets=xmlDesc.getSchemaTargets();
        List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
        for (        IMetadataColumn col : metadataTable.getListColumns()) {
          Map<String,Object> map=new HashMap<String,Object>();
          map.put(""String_Node_Str"",null);
          for (int i=0; i < schemaTargets.size(); i++) {
            SchemaTarget sch=schemaTargets.get(i);
            if (col.getLabel().equals(sch.getTagName())) {
              map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(sch.getRelativeXPathQuery()));
            }
          }
          if (map.get(UpdatesConstants.QUERY) == null) {
            if (col.getLabel() != null && col.getLabel().startsWith(""String_Node_Str"")) {
              String temp=col.getLabel().substring(6,col.getLabel().length());
              if (temp != null) {
                char c[]=temp.toCharArray();
                boolean flag=true;
                for (                char element : c) {
                  if (element < '0' || element > '9') {
                    flag=false;
                    break;
                  }
                }
                if (flag) {
                  int j=Integer.parseInt(temp);
                  SchemaTarget schema=schemaTargets.get(j);
                  if (schema != null && KeywordsValidator.isKeyword(schema.getTagName())) {
                    map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(schema.getRelativeXPathQuery()));
                  }
                }
              }
            }
          }
          maps.add(map);
        }
        return maps;
      }
    }
  }
  if (connection instanceof MDMConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    MDMConnection xmlConnection=(MDMConnection)connection;
    EList objectList=xmlConnection.getSchemas();
    if (metadataTable != null) {
      for (      Concept concept : (List<Concept>)objectList) {
        if (concept != null && concept.getLabel() != null && concept.getLabel().equals(metadataTable.getLabel())) {
          List<ConceptTarget> conceptTargets=concept.getConceptTargets();
          List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
          for (          IMetadataColumn col : metadataTable.getListColumns()) {
            Map<String,Object> map=new HashMap<String,Object>();
            map.put(""String_Node_Str"",null);
            for (int i=0; i < conceptTargets.size(); i++) {
              ConceptTarget cpt=conceptTargets.get(i);
              if (col.getLabel().equals(cpt.getTargetName())) {
                map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(cpt.getRelativeLoopExpression()));
              }
            }
            maps.add(map);
          }
          return maps;
        }
      }
    }
  }
  if (connection instanceof HL7Connection) {
    HL7Connection hl7Connection=(HL7Connection)connection;
    Set objectList=ConnectionHelper.getTables(hl7Connection);
    List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
    for (    IMetadataTable tableOfNode : metadataTables) {
      Map<String,Object> map=new HashMap<String,Object>();
      for (      MetadataTable table : (Set<MetadataTable>)objectList) {
        if (table != null && (table.getLabel() == null || table.getLabel().equals(tableOfNode.getLabel()))) {
          String xpathValue=""String_Node_Str"";
          for (          MetadataColumn col : table.getColumns()) {
            String original=col.getOriginalField();
            if (original != null && !""String_Node_Str"".equals(original)) {
              if (original.indexOf(TalendQuoteUtils.LBRACKET) != -1) {
                original=original.substring(0,original.indexOf(TalendQuoteUtils.LBRACKET));
              }
              original=TalendQuoteUtils.addQuotes(original);
              xpathValue+=original;
            }
            if (table.getColumns().indexOf(col) < table.getColumns().size() - 1) {
              xpathValue+=""String_Node_Str"";
            }
          }
          map.put(""String_Node_Str"",xpathValue);
          map.put(""String_Node_Str"",tableOfNode.getTableName());
          maps.add(map);
        }
      }
    }
    return maps;
  }
  return null;
}",0.992143432715552
127397,"protected boolean forceAddQuote(){
  return false;
}","@Override protected boolean forceAddQuote(){
  return false;
}",0.912280701754386
127398,"/** 
 * For Hive it does need dbName.
 */
protected String getTableNameWithDBAndSchema(final String dbName,final String schema,String tableName){
  return super.getTableNameWithDBAndSchema(null,schema,tableName);
}","/** 
 * For Hive it does need dbName.
 */
@Override protected String getTableNameWithDBAndSchema(final String dbName,final String schema,String tableName){
  return super.getTableNameWithDBAndSchema(dbName,schema,tableName);
}",0.9545454545454546
127399,"protected String addQuotesForSQL(String field){
  if (forceAddQuote()) {
    return super.addQuotesForSQL(field);
  }
  return field;
}","@Override protected String addQuotesForSQL(String field){
  if (forceAddQuote()) {
    return super.addQuotesForSQL(field);
  }
  return field;
}",0.9642857142857144
127400,"private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    if (particleToTreeNode.containsKey(xsdElementDeclarationParticle)) {
      ATreeNode originalTreeNode=particleToTreeNode.get(xsdElementDeclarationParticle);
      ATreeNode partNode=new ATreeNode();
      partNode.setCurrentNamespace(originalTreeNode.getCurrentNamespace());
      partNode.setValue(originalTreeNode.getValue());
      partNode.setType(ATreeNode.ELEMENT_TYPE);
      partNode.setDataType(originalTreeNode.getDataType());
      partNode.addChild(originalTreeNode.getChildren());
      parentNode.addChild(partNode);
      return;
    }
    ATreeNode partNode=new ATreeNode();
    particleToTreeNode.put(xsdElementDeclarationParticle,partNode);
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (dataType == null && !""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}","private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    if (particleToTreeNode.containsKey(xsdElementDeclarationParticle)) {
      ATreeNode originalTreeNode=particleToTreeNode.get(xsdElementDeclarationParticle);
      ATreeNode partNode=new ATreeNode();
      partNode.setCurrentNamespace(originalTreeNode.getCurrentNamespace());
      partNode.setValue(originalTreeNode.getValue());
      partNode.setType(ATreeNode.ELEMENT_TYPE);
      partNode.setDataType(originalTreeNode.getDataType());
      partNode.addChild(originalTreeNode.getChildren());
      parentNode.addChild(partNode);
      return;
    }
    ATreeNode partNode=new ATreeNode();
    particleToTreeNode.put(xsdElementDeclarationParticle,partNode);
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (!XSDConstants.isSchemaForSchemaNamespace(xsdElementDeclarationParticle.getTypeDefinition().getTargetNamespace()) && xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}",0.9888433141919606
127401,"@Override public void moveObject(IRepositoryViewObject objToMove,IPath newPath) throws PersistenceException {
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String folderName=ERepositoryObjectType.getFolderName(objToMove.getRepositoryObjectType()) + IPath.SEPARATOR + newPath;
  IFolder folder=ResourceUtils.getFolder(fsProject,folderName,true);
  ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(objToMove.getProperty().getItem());
  FolderItem folderItem=getFolderItem(project,itemType,newPath);
  List<IRepositoryViewObject> objects=getSerializableFromFolder(project,folderItem,null,itemType,false,false,true,true,false);
  for (  IRepositoryViewObject oject : objects) {
    if (oject.getLabel().equalsIgnoreCase(objToMove.getLabel())) {
      throw new PersistenceException(""String_Node_Str"" + oject.getLabel() + ""String_Node_Str""+ newPath.toPortableString());
    }
  }
  List<IRepositoryViewObject> allVersionToMove=getAllVersion(getRepositoryContext().getProject(),objToMove.getId(),false);
  for (  IRepositoryViewObject obj : allVersionToMove) {
    Item currentItem=obj.getProperty().getItem();
    if (currentItem.getParent() instanceof FolderItem) {
      ((FolderItem)currentItem.getParent()).getChildren().remove(currentItem);
    }
    FolderItem newFolderItem=getFolderItem(project,objToMove.getRepositoryObjectType(),newPath);
    newFolderItem.getChildren().add(currentItem);
    currentItem.setParent(newFolderItem);
    ItemState state=obj.getProperty().getItem().getState();
    state.setPath(newPath.toString());
    xmiResourceManager.saveResource(state.eResource());
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(obj.getProperty());
    for (    Resource resource : affectedResources) {
      xmiResourceManager.saveResource(resource);
    }
    IPath parentPath=folder.getFullPath();
    Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
    for (    Resource resource : affectedResources) {
      IPath path=folder.getFullPath().append(resource.getURI().lastSegment());
      resourceAndPathMap.put(resource,path);
      List<Resource> needSaves=findCrossReference(resource);
      moveResource(resource,path);
      saveCrossReference(needSaves);
    }
    svnMoveResource(affectedResources,parentPath,resourceAndPathMap);
    affectedResources=xmiResourceManager.getAffectedResources(obj.getProperty());
    for (    Resource resource : affectedResources) {
      xmiResourceManager.saveResource(resource);
    }
  }
  saveProject(project);
}","@Override public void moveObject(IRepositoryViewObject objToMove,IPath newPath) throws PersistenceException {
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String folderName=ERepositoryObjectType.getFolderName(objToMove.getRepositoryObjectType()) + IPath.SEPARATOR + newPath;
  IFolder folder=ResourceUtils.getFolder(fsProject,folderName,true);
  ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(objToMove.getProperty().getItem());
  FolderItem folderItem=getFolderItem(project,itemType,newPath);
  List<IRepositoryViewObject> objects=getSerializableFromFolder(project,folderItem,null,itemType,false,false,true,true,false);
  for (  IRepositoryViewObject oject : objects) {
    if (oject.getLabel().equalsIgnoreCase(objToMove.getLabel())) {
      throw new PersistenceException(""String_Node_Str"" + oject.getLabel() + ""String_Node_Str""+ newPath.toPortableString());
    }
  }
  List<IRepositoryViewObject> allVersionToMove=getAllVersion(getRepositoryContext().getProject(),objToMove.getId(),false);
  for (  IRepositoryViewObject obj : allVersionToMove) {
    Item currentItem=obj.getProperty().getItem();
    if (currentItem.getParent() instanceof FolderItem) {
      ((FolderItem)currentItem.getParent()).getChildren().remove(currentItem);
    }
    FolderItem newFolderItem=getFolderItem(project,objToMove.getRepositoryObjectType(),newPath);
    newFolderItem.getChildren().add(currentItem);
    currentItem.setParent(newFolderItem);
    ItemState state=obj.getProperty().getItem().getState();
    state.setPath(newPath.toString());
    xmiResourceManager.saveResource(state.eResource());
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(obj.getProperty());
    for (    Resource resource : affectedResources) {
      xmiResourceManager.saveResource(resource);
    }
    IPath parentPath=folder.getFullPath();
    Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
    List<Resource> crossReferences=new ArrayList<Resource>();
    for (    Resource resource : affectedResources) {
      IPath path=folder.getFullPath().append(resource.getURI().lastSegment());
      resourceAndPathMap.put(resource,path);
      crossReferences.addAll(findCrossReference(resource));
      moveResource(resource,path);
    }
    svnMoveResource(affectedResources,parentPath,resourceAndPathMap);
    saveCrossReference(crossReferences);
    affectedResources=xmiResourceManager.getAffectedResources(obj.getProperty());
    for (    Resource resource : affectedResources) {
      xmiResourceManager.saveResource(resource);
    }
  }
  saveProject(project);
}",0.9184175657770206
127402,"private void moveOldContentToNewFolder(Project project,String completeNewPath,FolderItem emfFolder,FolderItem newFolder,Item child) throws PersistenceException {
  emfFolder.getChildren().remove(child);
  newFolder.getChildren().add(child);
  child.setParent(newFolder);
  moveDQItemToNewFolder(project,completeNewPath,child);
  List<Resource> affectedResources=xmiResourceManager.getAffectedResources(child.getProperty());
  Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
  for (  Resource resource : affectedResources) {
    IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
    resourceAndPathMap.put(resource,path);
    List<Resource> needSaves=findCrossReference(resource);
    moveResource(resource,path);
    saveCrossReference(needSaves);
  }
  IPath parentPath=getPhysicalProject(project).getFullPath().append(completeNewPath);
  svnMoveResource(affectedResources,parentPath,resourceAndPathMap);
  affectedResources=xmiResourceManager.getAffectedResources(child.getProperty());
  for (  Resource resource : affectedResources) {
    xmiResourceManager.saveResource(resource);
  }
}","private void moveOldContentToNewFolder(Project project,String completeNewPath,FolderItem emfFolder,FolderItem newFolder,Item child) throws PersistenceException {
  emfFolder.getChildren().remove(child);
  newFolder.getChildren().add(child);
  child.setParent(newFolder);
  moveDQItemToNewFolder(project,completeNewPath,child);
  List<Resource> affectedResources=xmiResourceManager.getAffectedResources(child.getProperty());
  Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
  List<Resource> crossReferences=new ArrayList<Resource>();
  for (  Resource resource : affectedResources) {
    IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
    resourceAndPathMap.put(resource,path);
    crossReferences.addAll(findCrossReference(resource));
    moveResource(resource,path);
  }
  IPath parentPath=getPhysicalProject(project).getFullPath().append(completeNewPath);
  svnMoveResource(affectedResources,parentPath,resourceAndPathMap);
  saveCrossReference(crossReferences);
  affectedResources=xmiResourceManager.getAffectedResources(child.getProperty());
  for (  Resource resource : affectedResources) {
    xmiResourceManager.saveResource(resource);
  }
}",0.7593891869583161
127403,"@Override public void moveFolder(final ERepositoryObjectType type,final IPath sourcePath,final IPath targetPath) throws PersistenceException {
  if (type == null || RepositoryConstants.isSystemFolder(sourcePath.toString()) || RepositoryConstants.isSystemFolder(targetPath.toString())) {
    return;
  }
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toString();
  String completeNewPath;
  if (targetPath.equals(""String_Node_Str"")) {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.lastSegment();
  }
 else {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + (""String_Node_Str"".equals(targetPath.toString()) ? ""String_Node_Str"" : IPath.SEPARATOR + targetPath.toString()) + IPath.SEPARATOR+ sourcePath.lastSegment();
  }
  if (completeNewPath.equals(completeOldPath)) {
    return;
  }
  IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,true);
  FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
  FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
  if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
    IPath path=new Path(sourcePath.toString());
    ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
    emfFolder=folderHelper.getFolder(completeOldPath);
  }
  createFolder(getRepositoryContext().getProject(),type,targetPath,emfFolder.getProperty().getLabel());
  FolderItem newFolder=folderHelper.getFolder(completeNewPath);
  boolean isDel=emfFolder.getState().isDeleted();
  if (isDel) {
    newFolder.getState().setDeleted(isDel);
  }
  Item[] childrens=(Item[])emfFolder.getChildren().toArray();
  for (  Item children2 : childrens) {
    if (children2 instanceof FolderItem) {
      FolderItem children=(FolderItem)children2;
      moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(emfFolder.getProperty().getLabel()));
    }
 else {
      moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
    }
  }
  List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
  for (  IRepositoryViewObject object : serializableFromFolder) {
    dealTdqResourceMove(project,completeNewPath,object);
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
    for (    Resource resource : affectedResources) {
      IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
      resourceAndPathMap.put(resource,path);
      List<Resource> needSaves=findCrossReference(resource);
      moveResource(resource,path);
      saveCrossReference(needSaves);
    }
    IPath parentPath=getPhysicalProject(project).getFullPath().append(completeNewPath);
    svnMoveResource(affectedResources,parentPath,resourceAndPathMap);
    affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    for (    Resource resource : affectedResources) {
      xmiResourceManager.saveResource(resource);
    }
  }
  deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
  xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
}","@Override public void moveFolder(final ERepositoryObjectType type,final IPath sourcePath,final IPath targetPath) throws PersistenceException {
  if (type == null || RepositoryConstants.isSystemFolder(sourcePath.toString()) || RepositoryConstants.isSystemFolder(targetPath.toString())) {
    return;
  }
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toString();
  String completeNewPath;
  if (targetPath.equals(""String_Node_Str"")) {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.lastSegment();
  }
 else {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + (""String_Node_Str"".equals(targetPath.toString()) ? ""String_Node_Str"" : IPath.SEPARATOR + targetPath.toString()) + IPath.SEPARATOR+ sourcePath.lastSegment();
  }
  if (completeNewPath.equals(completeOldPath)) {
    return;
  }
  IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,true);
  FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
  FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
  if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
    IPath path=new Path(sourcePath.toString());
    ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
    emfFolder=folderHelper.getFolder(completeOldPath);
  }
  createFolder(getRepositoryContext().getProject(),type,targetPath,emfFolder.getProperty().getLabel());
  FolderItem newFolder=folderHelper.getFolder(completeNewPath);
  boolean isDel=emfFolder.getState().isDeleted();
  if (isDel) {
    newFolder.getState().setDeleted(isDel);
  }
  Item[] childrens=(Item[])emfFolder.getChildren().toArray();
  for (  Item children2 : childrens) {
    if (children2 instanceof FolderItem) {
      FolderItem children=(FolderItem)children2;
      moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(emfFolder.getProperty().getLabel()));
    }
 else {
      moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
    }
  }
  List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
  for (  IRepositoryViewObject object : serializableFromFolder) {
    dealTdqResourceMove(project,completeNewPath,object);
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
    List<Resource> crossReferences=new ArrayList<Resource>();
    for (    Resource resource : affectedResources) {
      IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
      resourceAndPathMap.put(resource,path);
      crossReferences.addAll(findCrossReference(resource));
      moveResource(resource,path);
    }
    IPath parentPath=getPhysicalProject(project).getFullPath().append(completeNewPath);
    svnMoveResource(affectedResources,parentPath,resourceAndPathMap);
    saveCrossReference(crossReferences);
    affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    for (    Resource resource : affectedResources) {
      xmiResourceManager.saveResource(resource);
    }
  }
  deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
  xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
}",0.9164710755211928
127404,"private void renameFolderExecute(final ERepositoryObjectType type,final IPath sourcePath,final String label) throws PersistenceException {
  if (type == null) {
    return;
  }
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        IPath targetPath=sourcePath.removeLastSegments(1);
        Project project=getRepositoryContext().getProject();
        IProject fsProject=ResourceModelUtils.getProject(project);
        String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toPortableString();
        String completeNewPath;
        if (targetPath.isEmpty()) {
          completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label;
        }
 else {
          completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ label;
        }
        if (completeNewPath.equals(completeOldPath)) {
          return;
        }
        IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,true);
        FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
        FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
        if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
          IPath path=new Path(sourcePath.toString());
          ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
          emfFolder=folderHelper.getFolder(completeOldPath);
        }
        createFolder(getRepositoryContext().getProject(),type,targetPath,label);
        FolderItem newFolder=folderHelper.getFolder(completeNewPath);
        Item[] childrens=(Item[])emfFolder.getChildren().toArray();
        for (        Item children2 : childrens) {
          if (children2 instanceof FolderItem) {
            FolderItem children=(FolderItem)children2;
            moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(newFolder.getProperty().getLabel()));
          }
 else {
            moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
          }
        }
        List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
        List<Resource> allResource=new ArrayList<Resource>();
        Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
        IPath parentPath=getPhysicalProject(project).getFullPath().append(completeNewPath);
        for (        IRepositoryViewObject object : serializableFromFolder) {
          List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
          for (          Resource resource : affectedResources) {
            allResource.add(resource);
            IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
            resourceAndPathMap.put(resource,path);
            List<Resource> needSaves=findCrossReference(resource);
            moveResource(resource,path);
            saveCrossReference(needSaves);
          }
        }
        svnMoveResource(allResource,parentPath,resourceAndPathMap);
        for (        IRepositoryViewObject object : serializableFromFolder) {
          List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
          for (          Resource resource : affectedResources) {
            xmiResourceManager.saveResource(resource);
          }
        }
        deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
        xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
      }
 catch (      PersistenceException e) {
        throw new CoreException(new org.eclipse.core.runtime.Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",e));
      }
    }
  }
;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,new NullProgressMonitor());
  }
 catch (  CoreException e) {
    throw new PersistenceException(e.getCause());
  }
}","private void renameFolderExecute(final ERepositoryObjectType type,final IPath sourcePath,final String label) throws PersistenceException {
  if (type == null) {
    return;
  }
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        IPath targetPath=sourcePath.removeLastSegments(1);
        Project project=getRepositoryContext().getProject();
        IProject fsProject=ResourceModelUtils.getProject(project);
        String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toPortableString();
        String completeNewPath;
        if (targetPath.isEmpty()) {
          completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label;
        }
 else {
          completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ label;
        }
        if (completeNewPath.equals(completeOldPath)) {
          return;
        }
        IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,true);
        FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
        FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
        if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
          IPath path=new Path(sourcePath.toString());
          ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
          emfFolder=folderHelper.getFolder(completeOldPath);
        }
        createFolder(getRepositoryContext().getProject(),type,targetPath,label);
        FolderItem newFolder=folderHelper.getFolder(completeNewPath);
        Item[] childrens=(Item[])emfFolder.getChildren().toArray();
        for (        Item children2 : childrens) {
          if (children2 instanceof FolderItem) {
            FolderItem children=(FolderItem)children2;
            moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(newFolder.getProperty().getLabel()));
          }
 else {
            moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
          }
        }
        List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
        List<Resource> allResource=new ArrayList<Resource>();
        Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
        IPath parentPath=getPhysicalProject(project).getFullPath().append(completeNewPath);
        List<Resource> crossReferences=new ArrayList<Resource>();
        for (        IRepositoryViewObject object : serializableFromFolder) {
          List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
          for (          Resource resource : affectedResources) {
            allResource.add(resource);
            IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
            resourceAndPathMap.put(resource,path);
            crossReferences.addAll(findCrossReference(resource));
            moveResource(resource,path);
          }
        }
        svnMoveResource(allResource,parentPath,resourceAndPathMap);
        saveCrossReference(crossReferences);
        for (        IRepositoryViewObject object : serializableFromFolder) {
          List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
          for (          Resource resource : affectedResources) {
            xmiResourceManager.saveResource(resource);
          }
        }
        deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
        xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
      }
 catch (      PersistenceException e) {
        throw new CoreException(new org.eclipse.core.runtime.Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",e));
      }
    }
  }
;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,new NullProgressMonitor());
  }
 catch (  CoreException e) {
    throw new PersistenceException(e.getCause());
  }
}",0.945339794883354
127405,"@Override public void moveObjectMulti(IRepositoryViewObject[] objToMoves,IPath newPath) throws PersistenceException {
  List<Resource> allResource=new ArrayList<Resource>();
  Map<Resource,IFolder> resourceFolderMap=new HashMap<Resource,IFolder>();
  IPath parentPath=null;
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  List<IRepositoryViewObject> allRepositoryViewObject=new ArrayList<IRepositoryViewObject>();
  for (  IRepositoryViewObject objToMove : objToMoves) {
    String folderName=ERepositoryObjectType.getFolderName(objToMove.getRepositoryObjectType()) + IPath.SEPARATOR + newPath;
    IFolder folder=ResourceUtils.getFolder(fsProject,folderName,true);
    parentPath=folder.getFullPath();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(objToMove.getProperty().getItem());
    FolderItem folderItem=getFolderItem(project,itemType,newPath);
    List<IRepositoryViewObject> objects=getSerializableFromFolder(project,folderItem,null,itemType,false,false,true,true,false);
    for (    IRepositoryViewObject oject : objects) {
      if (oject.getLabel().equalsIgnoreCase(objToMove.getLabel())) {
        throw new PersistenceException(""String_Node_Str"" + oject.getLabel() + ""String_Node_Str""+ newPath.toPortableString());
      }
    }
    List<IRepositoryViewObject> allVersionToMove=getAllVersion(getRepositoryContext().getProject(),objToMove.getId(),false);
    for (    IRepositoryViewObject obj : allVersionToMove) {
      allRepositoryViewObject.add(obj);
      Item currentItem=obj.getProperty().getItem();
      if (currentItem.getParent() instanceof FolderItem) {
        ((FolderItem)currentItem.getParent()).getChildren().remove(currentItem);
      }
      FolderItem newFolderItem=getFolderItem(project,objToMove.getRepositoryObjectType(),newPath);
      newFolderItem.getChildren().add(currentItem);
      currentItem.setParent(newFolderItem);
      ItemState state=obj.getProperty().getItem().getState();
      state.setPath(newPath.toString());
      xmiResourceManager.saveResource(state.eResource());
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(obj.getProperty());
      for (      Resource resource : affectedResources) {
        xmiResourceManager.saveResource(resource);
        allResource.add(resource);
        resourceFolderMap.put(resource,folder);
      }
    }
  }
  Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
  for (  Resource resource : allResource) {
    IFolder folder=resourceFolderMap.get(resource);
    IPath path=folder.getFullPath().append(resource.getURI().lastSegment());
    resourceAndPathMap.put(resource,path);
    List<Resource> needSaves=findCrossReference(resource);
    moveResource(resource,path);
    saveCrossReference(needSaves);
  }
  svnMoveResource(allResource,parentPath,resourceAndPathMap);
  for (  IRepositoryViewObject objToMove : objToMoves) {
    List<IRepositoryViewObject> allVersionToMove=getAllVersion(getRepositoryContext().getProject(),objToMove.getId(),false);
    for (    IRepositoryViewObject obj : allVersionToMove) {
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(obj.getProperty());
      for (      Resource resource : affectedResources) {
        xmiResourceManager.saveResource(resource);
      }
    }
  }
  saveProject(project);
}","@Override public void moveObjectMulti(IRepositoryViewObject[] objToMoves,IPath newPath) throws PersistenceException {
  List<Resource> allResource=new ArrayList<Resource>();
  Map<Resource,IFolder> resourceFolderMap=new HashMap<Resource,IFolder>();
  IPath parentPath=null;
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  List<IRepositoryViewObject> allRepositoryViewObject=new ArrayList<IRepositoryViewObject>();
  for (  IRepositoryViewObject objToMove : objToMoves) {
    String folderName=ERepositoryObjectType.getFolderName(objToMove.getRepositoryObjectType()) + IPath.SEPARATOR + newPath;
    IFolder folder=ResourceUtils.getFolder(fsProject,folderName,true);
    parentPath=folder.getFullPath();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(objToMove.getProperty().getItem());
    FolderItem folderItem=getFolderItem(project,itemType,newPath);
    List<IRepositoryViewObject> objects=getSerializableFromFolder(project,folderItem,null,itemType,false,false,true,true,false);
    for (    IRepositoryViewObject oject : objects) {
      if (oject.getLabel().equalsIgnoreCase(objToMove.getLabel())) {
        throw new PersistenceException(""String_Node_Str"" + oject.getLabel() + ""String_Node_Str""+ newPath.toPortableString());
      }
    }
    List<IRepositoryViewObject> allVersionToMove=getAllVersion(getRepositoryContext().getProject(),objToMove.getId(),false);
    for (    IRepositoryViewObject obj : allVersionToMove) {
      allRepositoryViewObject.add(obj);
      Item currentItem=obj.getProperty().getItem();
      if (currentItem.getParent() instanceof FolderItem) {
        ((FolderItem)currentItem.getParent()).getChildren().remove(currentItem);
      }
      FolderItem newFolderItem=getFolderItem(project,objToMove.getRepositoryObjectType(),newPath);
      newFolderItem.getChildren().add(currentItem);
      currentItem.setParent(newFolderItem);
      ItemState state=obj.getProperty().getItem().getState();
      state.setPath(newPath.toString());
      xmiResourceManager.saveResource(state.eResource());
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(obj.getProperty());
      for (      Resource resource : affectedResources) {
        xmiResourceManager.saveResource(resource);
        allResource.add(resource);
        resourceFolderMap.put(resource,folder);
      }
    }
  }
  Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
  List<Resource> crossReferences=new ArrayList<Resource>();
  for (  Resource resource : allResource) {
    IFolder folder=resourceFolderMap.get(resource);
    IPath path=folder.getFullPath().append(resource.getURI().lastSegment());
    resourceAndPathMap.put(resource,path);
    crossReferences.addAll(findCrossReference(resource));
    moveResource(resource,path);
  }
  svnMoveResource(allResource,parentPath,resourceAndPathMap);
  saveCrossReference(crossReferences);
  for (  IRepositoryViewObject objToMove : objToMoves) {
    List<IRepositoryViewObject> allVersionToMove=getAllVersion(getRepositoryContext().getProject(),objToMove.getId(),false);
    for (    IRepositoryViewObject obj : allVersionToMove) {
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(obj.getProperty());
      for (      Resource resource : affectedResources) {
        xmiResourceManager.saveResource(resource);
      }
    }
  }
  saveProject(project);
}",0.9628766923860824
127406,"private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (dataType == null && xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}","private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (!XSDConstants.isSchemaForSchemaNamespace(xsdElementDeclarationParticle.getTypeDefinition().getTargetNamespace()) && xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}",0.9883040935672516
127407,"/** 
 * DOC sizhaoliu Comment method ""cloneOriginalValueConnection"".
 * @param dbConn
 * @param contextProperties
 * @return
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,Properties contextProperties){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=null;
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=getOriginalValue(contextProperties,dbConn.getServerName());
  String username=getOriginalValue(contextProperties,dbConn.getUsername());
  String password=getOriginalValue(contextProperties,dbConn.getRawPassword());
  String port=getOriginalValue(contextProperties,dbConn.getPort());
  String sidOrDatabase=getOriginalValue(contextProperties,dbConn.getSID());
  String datasource=getOriginalValue(contextProperties,dbConn.getDatasourceName());
  String filePath=getOriginalValue(contextProperties,dbConn.getFileFieldName());
  String schemaOracle=getOriginalValue(contextProperties,dbConn.getUiSchema());
  String dbRootPath=getOriginalValue(contextProperties,dbConn.getDBRootPath());
  String additionParam=getOriginalValue(contextProperties,dbConn.getAdditionalParams());
  String url=getOriginalValue(contextProperties,dbConn.getURL());
  String className=getOriginalValue(contextProperties,dbConn.getDriverClass());
  String jarPath=getOriginalValue(contextProperties,dbConn.getDriverJarPath());
  String dbmsID=getOriginalValue(contextProperties,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  if (contextType != null) {
    String encryptedPassword=null;
    try {
      encryptedPassword=PasswordEncryptUtil.encryptPassword(password);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    cloneConn.setPassword(encryptedPassword);
  }
 else {
    cloneConn.setPassword(password);
  }
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}","public static FileConnection cloneOriginalValueConnection(FileConnection fileConn,Properties contextProperties){
  if (fileConn == null) {
    return null;
  }
  FileConnection cloneConn=null;
  if (fileConn instanceof DelimitedFileConnection) {
    cloneConn=ConnectionFactory.eINSTANCE.createDelimitedFileConnection();
  }
 else   if (fileConn instanceof PositionalFileConnection) {
    cloneConn=ConnectionFactory.eINSTANCE.createPositionalFileConnection();
  }
 else   if (fileConn instanceof RegexpFileConnection) {
    cloneConn=ConnectionFactory.eINSTANCE.createRegexpFileConnection();
  }
 else   if (fileConn instanceof FileExcelConnection) {
    cloneConn=ConnectionFactory.eINSTANCE.createFileExcelConnection();
  }
 else   if (fileConn instanceof HL7Connection) {
    cloneConn=ConnectionFactory.eINSTANCE.createHL7Connection();
  }
 else   if (fileConn instanceof EbcdicConnection) {
    cloneConn=ConnectionFactory.eINSTANCE.createEbcdicConnection();
  }
  if (cloneConn != null) {
    String filePath=getOriginalValue(contextProperties,fileConn.getFilePath());
    String encoding=getOriginalValue(contextProperties,fileConn.getEncoding());
    String headValue=getOriginalValue(contextProperties,fileConn.getHeaderValue());
    String footerValue=getOriginalValue(contextProperties,fileConn.getFooterValue());
    String limitValue=getOriginalValue(contextProperties,fileConn.getLimitValue());
    filePath=TalendQuoteUtils.removeQuotes(filePath);
    encoding=TalendQuoteUtils.removeQuotes(encoding);
    cloneConn.setFilePath(filePath);
    cloneConn.setEncoding(encoding);
    cloneConn.setHeaderValue(headValue);
    cloneConn.setFooterValue(footerValue);
    cloneConn.setLimitValue(limitValue);
    if (fileConn instanceof DelimitedFileConnection || fileConn instanceof PositionalFileConnection || fileConn instanceof RegexpFileConnection) {
      String fieldSeparatorValue=getOriginalValue(contextProperties,fileConn.getFieldSeparatorValue());
      String rowSeparatorValue=getOriginalValue(contextProperties,fileConn.getRowSeparatorValue());
      cloneConn.setFieldSeparatorValue(fieldSeparatorValue);
      cloneConn.setRowSeparatorValue(rowSeparatorValue);
      if (fileConn instanceof DelimitedFileConnection) {
        ((DelimitedFileConnection)cloneConn).setFieldSeparatorType(((DelimitedFileConnection)fileConn).getFieldSeparatorType());
      }
    }
    if (fileConn instanceof FileExcelConnection) {
      FileExcelConnection excelConnection=(FileExcelConnection)fileConn;
      FileExcelConnection cloneExcelConnection=(FileExcelConnection)cloneConn;
      String thousandSeparator=getOriginalValue(contextProperties,excelConnection.getThousandSeparator());
      String decimalSeparator=getOriginalValue(contextProperties,excelConnection.getDecimalSeparator());
      String firstColumn=getOriginalValue(contextProperties,excelConnection.getFirstColumn());
      String lastColumn=getOriginalValue(contextProperties,excelConnection.getLastColumn());
      cloneExcelConnection.setThousandSeparator(thousandSeparator);
      cloneExcelConnection.setDecimalSeparator(decimalSeparator);
      cloneExcelConnection.setFirstColumn(firstColumn);
      cloneExcelConnection.setLastColumn(lastColumn);
      cloneExcelConnection.setSelectAllSheets(excelConnection.isSelectAllSheets());
      cloneExcelConnection.setSheetName(excelConnection.getSheetName());
      ArrayList sheetList=excelConnection.getSheetList();
      cloneExcelConnection.setSheetList((ArrayList)sheetList.clone());
      EList sheetColumns=excelConnection.getSheetColumns();
      if (sheetColumns != null && sheetColumns instanceof BasicEList) {
        cloneExcelConnection.getSheetColumns().addAll((EList)((BasicEList)sheetColumns).clone());
      }
      cloneExcelConnection.setAdvancedSpearator(excelConnection.isAdvancedSpearator());
      cloneConn.setFieldSeparatorValue(fileConn.getFieldSeparatorValue());
      cloneConn.setRowSeparatorType(fileConn.getRowSeparatorType());
      cloneConn.setRowSeparatorValue(fileConn.getRowSeparatorValue());
    }
    cloneConn.setRowSeparatorType(fileConn.getRowSeparatorType());
    cloneConn.setCsvOption(fileConn.isCsvOption());
    cloneConn.setEscapeChar(fileConn.getEscapeChar());
    cloneConn.setEscapeType(fileConn.getEscapeType());
    cloneConn.setFirstLineCaption(fileConn.isFirstLineCaption());
    cloneConn.setFormat(fileConn.getFormat());
    cloneConn.setRemoveEmptyRow(fileConn.isRemoveEmptyRow());
    cloneConn.setServer(fileConn.getServer());
    cloneConn.setTextEnclosure(fileConn.getTextEnclosure());
    cloneConn.setTextIdentifier(fileConn.getTextIdentifier());
    cloneConn.setUseFooter(fileConn.isUseFooter());
    cloneConn.setUseHeader(fileConn.isUseHeader());
    cloneConn.setUseLimit(fileConn.isUseLimit());
    CloneConnectionUtils.cloneConnectionProperties(fileConn,cloneConn);
  }
  return cloneConn;
}",0.0869661921708185
127408,"private void updateCatalog(Property property){
}","/** 
 * update the Catalog object according to the Property, because when the connection has been reloaded, the catalog object should be changed, so need use the new catalog object.
 * @param property
 */
private void updateCatalog(Property property){
  if (catalog != null) {
    Item item=property.getItem();
    if (item != null && item instanceof ConnectionItem) {
      Connection connection=((ConnectionItem)item).getConnection();
      if (connection != null) {
        Catalog catalog2=CatalogHelper.getCatalog(connection,catalog.getName());
        if (catalog2 != null) {
          catalog=catalog2;
        }
      }
    }
  }
}",0.1397379912663755
127409,"@Override public Property getProperty(){
  Property property=viewObject.getProperty();
  updateCatalog(property);
  return property;
}","@Override public Property getProperty(){
  Property property=viewObject.getProperty();
  updateSchema(property);
  return property;
}",0.9588014981273408
127410,"@Override public Property getProperty(){
  exception=null;
  try {
    IProxyRepositoryFactory factory=null;
    if (!GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      return null;
    }
    factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
    IRepositoryViewObject object=factory.getLastVersion(id);
    if (object == null) {
      throw new PersistenceException(""String_Node_Str"" + label + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
    this.customImage=null;
    Property property=object.getProperty();
    modified=factory.isModified(property);
    this.id=property.getId();
    this.author=property.getAuthor();
    this.creationDate=property.getCreationDate();
    this.description=property.getDescription();
    this.modificationDate=property.getModificationDate();
    this.label=property.getDisplayName();
    this.purpose=property.getPurpose();
    this.statusCode=property.getStatusCode();
    this.version=property.getVersion();
    this.type=ERepositoryObjectType.getItemType(property.getItem());
    this.deleted=property.getItem().getState().isDeleted();
    this.path=property.getItem().getState().getPath();
    repositoryStatus=factory.getStatus(property.getItem());
    InformationLevel informationLevel=property.getMaxInformationLevel();
    informationStatus=factory.getStatus(informationLevel);
    if (type == ERepositoryObjectType.JOBLET) {
      JobletProcessItem item=(JobletProcessItem)property.getItem();
      if (item.getIcon() != null && item.getIcon().getInnerContent() != null && item.getIcon().getInnerContent().length != 0) {
        customImage=getJobletCustomIcon(property);
        customImage=ImageUtils.propertyLabelScale(property.getId(),customImage,ICON_SIZE.ICON_16);
      }
    }
 else     if (type == ERepositoryObjectType.DOCUMENTATION) {
      this.customImage=ImageProvider.getImage(RepositoryImageProvider.getIcon(type));
      Item item=property.getItem();
      if (item instanceof DocumentationItem) {
        customImage=coreSerivce.getImageWithDocExt(((DocumentationItem)item).getExtension());
      }
 else       if (item instanceof LinkDocumentationItem) {
        customImage=coreSerivce.getImageWithSpecial(customImage).createImage();
      }
    }
    return property;
  }
 catch (  PersistenceException e) {
    exception=e;
  }
  return null;
}","@Override public Property getProperty(){
  exception=null;
  try {
    IProxyRepositoryFactory factory=null;
    if (!GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      return null;
    }
    factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
    IRepositoryViewObject object=factory.getLastVersion(id);
    if (object == null) {
      throw new PersistenceException(""String_Node_Str"" + label + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
    this.customImage=null;
    Property property=object.getProperty();
    modified=factory.isModified(property);
    this.id=property.getId();
    this.author=property.getAuthor();
    this.creationDate=property.getCreationDate();
    this.description=property.getDescription();
    this.modificationDate=property.getModificationDate();
    this.label=property.getDisplayName();
    this.purpose=property.getPurpose();
    this.statusCode=property.getStatusCode();
    this.version=property.getVersion();
    this.type=ERepositoryObjectType.getItemType(property.getItem());
    this.deleted=property.getItem().getState().isDeleted();
    this.path=property.getItem().getState().getPath();
    repositoryStatus=factory.getStatus(property.getItem());
    InformationLevel informationLevel=property.getMaxInformationLevel();
    informationStatus=factory.getStatus(informationLevel);
    if (type == ERepositoryObjectType.JOBLET) {
      JobletProcessItem item=(JobletProcessItem)property.getItem();
      if (item.getIcon() != null && item.getIcon().getInnerContent() != null && item.getIcon().getInnerContent().length != 0) {
        customImage=getJobletCustomIcon(property);
        customImage=ImageUtils.propertyLabelScale(property.getId(),customImage,ICON_SIZE.ICON_16);
      }
      IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
      IJobletProviderService jobletservice=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
      if (service != null && jobletservice != null) {
        IComponentsFactory factorySingleton=service.getComponentsFactory();
        IComponent component=factorySingleton.get(property.getLabel(),DI);
        if (component != null) {
          try {
            Property tProperty=jobletservice.getJobletComponentItem(component);
            if (!tProperty.getId().equals(this.id)) {
              informationStatus=ERepositoryStatus.WARN;
              property.setDescription(TIP);
            }
          }
 catch (          Exception e) {
          }
        }
      }
    }
 else     if (type == ERepositoryObjectType.DOCUMENTATION) {
      this.customImage=ImageProvider.getImage(RepositoryImageProvider.getIcon(type));
      Item item=property.getItem();
      if (item instanceof DocumentationItem) {
        customImage=coreSerivce.getImageWithDocExt(((DocumentationItem)item).getExtension());
      }
 else       if (item instanceof LinkDocumentationItem) {
        customImage=coreSerivce.getImageWithSpecial(customImage).createImage();
      }
    }
    return property;
  }
 catch (  PersistenceException e) {
    exception=e;
  }
  return null;
}",0.8525674499564839
127411,"@Override public Property getProperty(){
  exception=null;
  try {
    IProxyRepositoryFactory factory=null;
    if (!GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      return null;
    }
    factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
    IRepositoryViewObject object=factory.getLastVersion(id);
    if (object == null) {
      throw new PersistenceException(""String_Node_Str"" + label + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
    this.customImage=null;
    Property property=object.getProperty();
    modified=factory.isModified(property);
    this.id=property.getId();
    this.author=property.getAuthor();
    this.creationDate=property.getCreationDate();
    this.description=property.getDescription();
    this.modificationDate=property.getModificationDate();
    this.label=property.getDisplayName();
    this.purpose=property.getPurpose();
    this.statusCode=property.getStatusCode();
    this.version=property.getVersion();
    this.type=ERepositoryObjectType.getItemType(property.getItem());
    this.deleted=property.getItem().getState().isDeleted();
    this.path=property.getItem().getState().getPath();
    repositoryStatus=factory.getStatus(property.getItem());
    InformationLevel informationLevel=property.getMaxInformationLevel();
    informationStatus=factory.getStatus(informationLevel);
    if (type == ERepositoryObjectType.JOBLET) {
      JobletProcessItem item=(JobletProcessItem)property.getItem();
      if (item.getIcon() != null && item.getIcon().getInnerContent() != null && item.getIcon().getInnerContent().length != 0) {
        customImage=getJobletCustomIcon(property);
        customImage=ImageUtils.propertyLabelScale(property.getId(),customImage,ICON_SIZE.ICON_16);
      }
    }
 else     if (type == ERepositoryObjectType.DOCUMENTATION) {
      this.customImage=ImageProvider.getImage(RepositoryImageProvider.getIcon(type));
      Item item=property.getItem();
      if (item instanceof DocumentationItem) {
        customImage=coreSerivce.getImageWithDocExt(((DocumentationItem)item).getExtension());
      }
 else       if (item instanceof LinkDocumentationItem) {
        customImage=coreSerivce.getImageWithSpecial(customImage).createImage();
      }
    }
    return property;
  }
 catch (  PersistenceException e) {
    exception=e;
  }
  return null;
}","@Override public Property getProperty(){
  exception=null;
  try {
    IProxyRepositoryFactory factory=null;
    if (!GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      return null;
    }
    factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
    IRepositoryViewObject object=factory.getLastVersion(id);
    if (object == null) {
      throw new PersistenceException(""String_Node_Str"" + label + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
    this.customImage=null;
    Property property=object.getProperty();
    modified=factory.isModified(property);
    this.id=property.getId();
    this.author=property.getAuthor();
    this.creationDate=property.getCreationDate();
    this.description=property.getDescription();
    this.modificationDate=property.getModificationDate();
    this.label=property.getDisplayName();
    this.purpose=property.getPurpose();
    this.statusCode=property.getStatusCode();
    this.version=property.getVersion();
    this.type=ERepositoryObjectType.getItemType(property.getItem());
    this.deleted=property.getItem().getState().isDeleted();
    this.path=property.getItem().getState().getPath();
    repositoryStatus=factory.getStatus(property.getItem());
    InformationLevel informationLevel=property.getMaxInformationLevel();
    informationStatus=factory.getStatus(informationLevel);
    if (type == ERepositoryObjectType.JOBLET) {
      JobletProcessItem item=(JobletProcessItem)property.getItem();
      if (item.getIcon() != null && item.getIcon().getInnerContent() != null && item.getIcon().getInnerContent().length != 0) {
        customImage=getJobletCustomIcon(property);
        customImage=ImageUtils.propertyLabelScale(property.getId(),customImage,ICON_SIZE.ICON_16);
      }
      IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
      IJobletProviderService jobletservice=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
      if (service != null && jobletservice != null) {
        IComponentsFactory factorySingleton=service.getComponentsFactory();
        IComponent component=factorySingleton.get(property.getLabel(),DI);
        if (component != null) {
          try {
            Property tProperty=jobletservice.getJobletComponentItem(component);
            if (!tProperty.getId().equals(this.id)) {
              informationStatus=ERepositoryStatus.WARN;
              property.setDescription(TIP);
            }
          }
 catch (          Exception e) {
          }
        }
      }
    }
 else     if (type == ERepositoryObjectType.DOCUMENTATION) {
      this.customImage=ImageProvider.getImage(RepositoryImageProvider.getIcon(type));
      Item item=property.getItem();
      if (item instanceof DocumentationItem) {
        customImage=coreSerivce.getImageWithDocExt(((DocumentationItem)item).getExtension());
      }
 else       if (item instanceof LinkDocumentationItem) {
        customImage=coreSerivce.getImageWithSpecial(customImage).createImage();
      }
    }
    return property;
  }
 catch (  PersistenceException e) {
    exception=e;
  }
  return null;
}",0.8525674499564839
127412,"private void testProcesspropagateFileName(IProject project,XmiResourceManager xrm) throws PersistenceException {
  ProcessItem processItem=createTempProcessItem();
  Resource processItemResource=xrm.createItemResource(project,processItem,new Path(""String_Node_Str""),ERepositoryObjectType.PROCESS,false);
  Resource propertyResource=xrm.createPropertyResource(processItemResource);
  propertyResource.getContents().add(processItem.getProperty());
  propertyResource.getContents().add(processItem.getState());
  propertyResource.getContents().add(processItem);
  processItemResource.getContents().add(processItem.getProcess());
  Resource screenshotsResource=xrm.createScreenshotResource(project,processItem,new Path(""String_Node_Str""),ERepositoryObjectType.PROCESS,false);
  screenshotsResource.getContents().addAll(processItem.getProcess().getScreenshots());
  xrm.saveResource(processItemResource);
  xrm.saveResource(propertyResource);
  xrm.saveResource(screenshotsResource);
  processItem.getProperty().setLabel(""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  xrm.propagateFileName(processItem.getProperty(),processItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  processItem.getProperty().setVersion(""String_Node_Str"");
  ((NodeType)processItem.getProcess().getNode().get(0)).setComponentVersion(""String_Node_Str"");
  xrm.propagateFileName(processItem.getProperty(),processItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  IFile file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.PROCESS) + ""String_Node_Str""));
  Property oldProperty=xrm.loadProperty(file);
  assertTrue(((NodeType)((ProcessItem)oldProperty.getItem()).getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  processItem.getProperty().setLabel(""String_Node_Str"");
  xrm.propagateFileName(processItem.getProperty(),processItem.getProperty());
  xrm.propagateFileName(processItem.getProperty(),oldProperty);
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  processItem.getProperty().setVersion(""String_Node_Str"");
  ((NodeType)processItem.getProcess().getNode().get(0)).setComponentVersion(""String_Node_Str"");
  xrm.propagateFileName(processItem.getProperty(),processItem.getProperty());
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.PROCESS) + ""String_Node_Str""));
  xrm.propagateFileName(processItem.getProperty(),xrm.loadProperty(file));
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.PROCESS) + ""String_Node_Str""));
  oldProperty=xrm.loadProperty(file);
  assertTrue(((NodeType)((ProcessItem)oldProperty.getItem()).getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.PROCESS) + ""String_Node_Str""));
  oldProperty=xrm.loadProperty(file);
  assertTrue(((NodeType)((ProcessItem)oldProperty.getItem()).getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  assertTrue(((NodeType)processItem.getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  processItem.getProperty().setVersion(""String_Node_Str"");
  processItem.getProperty().setLabel(""String_Node_Str"");
  ((NodeType)processItem.getProcess().getNode().get(0)).setComponentVersion(""String_Node_Str"");
  xrm.propagateFileName(processItem.getProperty(),processItem.getProperty());
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.PROCESS) + ""String_Node_Str""));
  xrm.propagateFileName(processItem.getProperty(),xrm.loadProperty(file));
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.PROCESS) + ""String_Node_Str""));
  xrm.propagateFileName(processItem.getProperty(),xrm.loadProperty(file));
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.PROCESS) + ""String_Node_Str""));
  oldProperty=xrm.loadProperty(file);
  assertTrue(((NodeType)((ProcessItem)oldProperty.getItem()).getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  List<Resource> resources=xrm.getAffectedResources(oldProperty);
  for (  Resource resource : resources) {
    xrm.deleteResource(resource);
  }
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.PROCESS) + ""String_Node_Str""));
  oldProperty=xrm.loadProperty(file);
  assertTrue(((NodeType)((ProcessItem)oldProperty.getItem()).getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  resources=xrm.getAffectedResources(oldProperty);
  for (  Resource resource : resources) {
    xrm.deleteResource(resource);
  }
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.PROCESS) + ""String_Node_Str""));
  oldProperty=xrm.loadProperty(file);
  assertTrue(((NodeType)((ProcessItem)oldProperty.getItem()).getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  resources=xrm.getAffectedResources(oldProperty);
  for (  Resource resource : resources) {
    xrm.deleteResource(resource);
  }
  assertTrue(((NodeType)processItem.getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  Property property=xrm.forceReloadProperty(processItem.getProperty());
  resources=xrm.getAffectedResources(property);
  for (  Resource resource : resources) {
    xrm.deleteResource(resource);
  }
}","private void testProcesspropagateFileName(IProject project,XmiResourceManager xrm) throws PersistenceException {
  ProcessItem processItem=createTempProcessItem();
  Resource processItemResource=xrm.createItemResource(project,processItem,new Path(""String_Node_Str""),ERepositoryObjectType.PROCESS,false);
  Resource propertyResource=xrm.createPropertyResource(processItemResource);
  propertyResource.getContents().add(processItem.getProperty());
  propertyResource.getContents().add(processItem.getState());
  propertyResource.getContents().add(processItem);
  processItemResource.getContents().add(processItem.getProcess());
  Resource screenshotsResource=xrm.createScreenshotResource(project,processItem,new Path(""String_Node_Str""),ERepositoryObjectType.PROCESS,false);
  screenshotsResource.getContents().addAll(processItem.getProcess().getScreenshots());
  xrm.saveResource(processItemResource);
  xrm.saveResource(propertyResource);
  xrm.saveResource(screenshotsResource);
  processItem.getProperty().setLabel(""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  xrm.propagateFileName(processItem.getProperty(),processItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  processItem.getProperty().setVersion(""String_Node_Str"");
  ((NodeType)processItem.getProcess().getNode().get(0)).setComponentVersion(""String_Node_Str"");
  xrm.propagateFileName(processItem.getProperty(),processItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  IFile file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.PROCESS) + ""String_Node_Str""));
  Property oldProperty=xrm.loadProperty(file);
  assertTrue(((NodeType)((ProcessItem)oldProperty.getItem()).getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  processItem.getProperty().setLabel(""String_Node_Str"");
  xrm.propagateFileName(processItem.getProperty(),processItem.getProperty());
  xrm.propagateFileName(processItem.getProperty(),oldProperty);
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  processItem.getProperty().setVersion(""String_Node_Str"");
  ((NodeType)processItem.getProcess().getNode().get(0)).setComponentVersion(""String_Node_Str"");
  xrm.propagateFileName(processItem.getProperty(),processItem.getProperty());
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.PROCESS) + ""String_Node_Str""));
  xrm.propagateFileName(processItem.getProperty(),xrm.loadProperty(file));
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.PROCESS) + ""String_Node_Str""));
  oldProperty=xrm.loadProperty(file);
  assertTrue(((NodeType)((ProcessItem)oldProperty.getItem()).getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.PROCESS) + ""String_Node_Str""));
  oldProperty=xrm.loadProperty(file);
  assertTrue(((NodeType)((ProcessItem)oldProperty.getItem()).getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  assertTrue(((NodeType)processItem.getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  processItem.getProperty().setVersion(""String_Node_Str"");
  processItem.getProperty().setLabel(""String_Node_Str"");
  ((NodeType)processItem.getProcess().getNode().get(0)).setComponentVersion(""String_Node_Str"");
  xrm.propagateFileName(processItem.getProperty(),processItem.getProperty());
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.PROCESS) + ""String_Node_Str""));
  xrm.propagateFileName(processItem.getProperty(),xrm.loadProperty(file));
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.PROCESS) + ""String_Node_Str""));
  xrm.propagateFileName(processItem.getProperty(),xrm.loadProperty(file));
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.PROCESS) + ""String_Node_Str""));
  xrm.propagateFileName(processItem.getProperty(),xrm.loadProperty(file));
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"");
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.PROCESS) + ""String_Node_Str""));
  oldProperty=xrm.loadProperty(file);
  assertTrue(((NodeType)((ProcessItem)oldProperty.getItem()).getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  List<Resource> resources=xrm.getAffectedResources(oldProperty);
  for (  Resource resource : resources) {
    xrm.deleteResource(resource);
  }
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.PROCESS) + ""String_Node_Str""));
  oldProperty=xrm.loadProperty(file);
  assertTrue(((NodeType)((ProcessItem)oldProperty.getItem()).getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  resources=xrm.getAffectedResources(oldProperty);
  for (  Resource resource : resources) {
    xrm.deleteResource(resource);
  }
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.PROCESS) + ""String_Node_Str""));
  oldProperty=xrm.loadProperty(file);
  assertTrue(((NodeType)((ProcessItem)oldProperty.getItem()).getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  resources=xrm.getAffectedResources(oldProperty);
  for (  Resource resource : resources) {
    xrm.deleteResource(resource);
  }
  assertTrue(((NodeType)processItem.getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  Property property=xrm.forceReloadProperty(processItem.getProperty());
  resources=xrm.getAffectedResources(property);
  for (  Resource resource : resources) {
    xrm.deleteResource(resource);
  }
}",0.9625993778085032
127413,"private void testRoutinepropagateFileName(IProject project,XmiResourceManager xrm) throws PersistenceException {
  RoutineItem routineItem=createTempRoutineItem();
  Resource routineItemResource=xrm.createItemResource(project,routineItem,new Path(""String_Node_Str""),ERepositoryObjectType.ROUTINES,true);
  Resource propertyResource=xrm.createPropertyResource(routineItemResource);
  routineItemResource.getContents().add(routineItem.getContent());
  propertyResource.getContents().add(routineItem.getProperty());
  propertyResource.getContents().add(routineItem.getState());
  propertyResource.getContents().add(routineItem);
  xrm.saveResource(routineItemResource);
  xrm.saveResource(propertyResource);
  routineItem.getProperty().setLabel(""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  xrm.propagateFileName(routineItem.getProperty(),routineItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  routineItem.getProperty().setVersion(""String_Node_Str"");
  routineItem.getContent().setInnerContent(""String_Node_Str"".getBytes());
  xrm.propagateFileName(routineItem.getProperty(),routineItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  IFile file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES) + ""String_Node_Str""));
  Property oldProperty=xrm.loadProperty(file);
  String content=new String(((RoutineItem)oldProperty.getItem()).getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  routineItem.getProperty().setLabel(""String_Node_Str"");
  xrm.propagateFileName(routineItem.getProperty(),routineItem.getProperty());
  xrm.propagateFileName(routineItem.getProperty(),oldProperty);
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  routineItem.getProperty().setVersion(""String_Node_Str"");
  routineItem.getContent().setInnerContent(""String_Node_Str"".getBytes());
  xrm.propagateFileName(routineItem.getProperty(),routineItem.getProperty());
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES) + ""String_Node_Str""));
  xrm.propagateFileName(routineItem.getProperty(),xrm.loadProperty(file));
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES) + ""String_Node_Str""));
  oldProperty=xrm.loadProperty(file);
  content=new String(((RoutineItem)oldProperty.getItem()).getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES) + ""String_Node_Str""));
  oldProperty=xrm.loadProperty(file);
  content=new String(((RoutineItem)oldProperty.getItem()).getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  content=new String(routineItem.getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  routineItem.getProperty().setVersion(""String_Node_Str"");
  routineItem.getProperty().setLabel(""String_Node_Str"");
  routineItem.getContent().setInnerContent(""String_Node_Str"".getBytes());
  xrm.propagateFileName(routineItem.getProperty(),routineItem.getProperty());
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES) + ""String_Node_Str""));
  xrm.propagateFileName(routineItem.getProperty(),xrm.loadProperty(file));
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES) + ""String_Node_Str""));
  xrm.propagateFileName(routineItem.getProperty(),xrm.loadProperty(file));
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES) + ""String_Node_Str""));
  oldProperty=xrm.loadProperty(file);
  content=new String(((RoutineItem)oldProperty.getItem()).getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  List<Resource> resources=xrm.getAffectedResources(oldProperty);
  for (  Resource resource : resources) {
    xrm.deleteResource(resource);
  }
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES) + ""String_Node_Str""));
  oldProperty=xrm.loadProperty(file);
  content=new String(((RoutineItem)oldProperty.getItem()).getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  resources=xrm.getAffectedResources(oldProperty);
  for (  Resource resource : resources) {
    xrm.deleteResource(resource);
  }
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES) + ""String_Node_Str""));
  oldProperty=xrm.loadProperty(file);
  content=new String(((RoutineItem)oldProperty.getItem()).getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  resources=xrm.getAffectedResources(oldProperty);
  for (  Resource resource : resources) {
    xrm.deleteResource(resource);
  }
  content=new String(routineItem.getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  Property property=xrm.forceReloadProperty(routineItem.getProperty());
  resources=xrm.getAffectedResources(property);
  for (  Resource resource : resources) {
    xrm.deleteResource(resource);
  }
}","private void testRoutinepropagateFileName(IProject project,XmiResourceManager xrm) throws PersistenceException {
  RoutineItem routineItem=createTempRoutineItem();
  Resource routineItemResource=xrm.createItemResource(project,routineItem,new Path(""String_Node_Str""),ERepositoryObjectType.ROUTINES,true);
  Resource propertyResource=xrm.createPropertyResource(routineItemResource);
  routineItemResource.getContents().add(routineItem.getContent());
  propertyResource.getContents().add(routineItem.getProperty());
  propertyResource.getContents().add(routineItem.getState());
  propertyResource.getContents().add(routineItem);
  xrm.saveResource(routineItemResource);
  xrm.saveResource(propertyResource);
  routineItem.getProperty().setLabel(""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  xrm.propagateFileName(routineItem.getProperty(),routineItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  routineItem.getProperty().setVersion(""String_Node_Str"");
  routineItem.getContent().setInnerContent(""String_Node_Str"".getBytes());
  xrm.propagateFileName(routineItem.getProperty(),routineItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  IFile file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES) + ""String_Node_Str""));
  Property oldProperty=xrm.loadProperty(file);
  String content=new String(((RoutineItem)oldProperty.getItem()).getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  routineItem.getProperty().setLabel(""String_Node_Str"");
  xrm.propagateFileName(routineItem.getProperty(),routineItem.getProperty());
  xrm.propagateFileName(routineItem.getProperty(),oldProperty);
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  routineItem.getProperty().setVersion(""String_Node_Str"");
  routineItem.getContent().setInnerContent(""String_Node_Str"".getBytes());
  xrm.propagateFileName(routineItem.getProperty(),routineItem.getProperty());
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES) + ""String_Node_Str""));
  xrm.propagateFileName(routineItem.getProperty(),xrm.loadProperty(file));
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES) + ""String_Node_Str""));
  oldProperty=xrm.loadProperty(file);
  content=new String(((RoutineItem)oldProperty.getItem()).getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES) + ""String_Node_Str""));
  oldProperty=xrm.loadProperty(file);
  content=new String(((RoutineItem)oldProperty.getItem()).getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  content=new String(routineItem.getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  routineItem.getProperty().setVersion(""String_Node_Str"");
  routineItem.getProperty().setLabel(""String_Node_Str"");
  routineItem.getContent().setInnerContent(""String_Node_Str"".getBytes());
  xrm.propagateFileName(routineItem.getProperty(),routineItem.getProperty());
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES) + ""String_Node_Str""));
  xrm.propagateFileName(routineItem.getProperty(),xrm.loadProperty(file));
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES) + ""String_Node_Str""));
  xrm.propagateFileName(routineItem.getProperty(),xrm.loadProperty(file));
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES) + ""String_Node_Str""));
  xrm.propagateFileName(routineItem.getProperty(),xrm.loadProperty(file));
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,""String_Node_Str"",""String_Node_Str"");
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES) + ""String_Node_Str""));
  oldProperty=xrm.loadProperty(file);
  content=new String(((RoutineItem)oldProperty.getItem()).getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  List<Resource> resources=xrm.getAffectedResources(oldProperty);
  for (  Resource resource : resources) {
    xrm.deleteResource(resource);
  }
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES) + ""String_Node_Str""));
  oldProperty=xrm.loadProperty(file);
  content=new String(((RoutineItem)oldProperty.getItem()).getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  resources=xrm.getAffectedResources(oldProperty);
  for (  Resource resource : resources) {
    xrm.deleteResource(resource);
  }
  file=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES) + ""String_Node_Str""));
  oldProperty=xrm.loadProperty(file);
  content=new String(((RoutineItem)oldProperty.getItem()).getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  resources=xrm.getAffectedResources(oldProperty);
  for (  Resource resource : resources) {
    xrm.deleteResource(resource);
  }
  content=new String(routineItem.getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  Property property=xrm.forceReloadProperty(routineItem.getProperty());
  resources=xrm.getAffectedResources(property);
  for (  Resource resource : resources) {
    xrm.deleteResource(resource);
  }
}",0.9856770833333334
127414,"public void propagateFileName(Property lastVersionProperty,Property resourceProperty) throws PersistenceException {
  ResourceFilenameHelper.FileName fileNameTest=ResourceFilenameHelper.create(resourceProperty.eResource(),resourceProperty,lastVersionProperty);
  if (!ResourceFilenameHelper.mustChangeVersion(fileNameTest) && !ResourceFilenameHelper.mustChangeLabel(fileNameTest)) {
    return;
  }
  List<Resource> affectedResources=getAffectedResources(resourceProperty);
  List<Resource> resourcesToSave=new ArrayList<Resource>();
  Property previousVersionProperty=null;
  IFile propertyFile=null;
  for (  Resource resource : affectedResources) {
    ResourceFilenameHelper.FileName fileName=ResourceFilenameHelper.create(resource,resourceProperty,lastVersionProperty);
    if (ResourceFilenameHelper.mustChangeVersion(fileName)) {
      IPath path=URIHelper.convert(resource.getURI());
      IPath bakPath=path.addFileExtension(""String_Node_Str"");
      copyResource(resource,bakPath);
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(bakPath);
      moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      resourcesToSave.add(resource);
      ResourceUtils.moveResource(file,path);
      file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (isPropertyFile(file)) {
        propertyFile=file;
      }
    }
 else     if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
      resourceProperty.setLabel(lastVersionProperty.getLabel());
      resourceProperty.setDisplayName(lastVersionProperty.getDisplayName());
      if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
        moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      }
      resourcesToSave.add(resource);
    }
  }
  if (propertyFile != null) {
    previousVersionProperty=loadProperty(propertyFile);
  }
  if (previousVersionProperty != null) {
    List<Resource> previousVersionResources=getAffectedResources(previousVersionProperty);
    for (    Resource resource : previousVersionResources) {
      FileName fileName=ResourceFilenameHelper.create(resource,previousVersionProperty,lastVersionProperty);
      if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
        IPath expectedFilePath=ResourceFilenameHelper.getExpectedFilePath(fileName,true);
        previousVersionProperty.setLabel(lastVersionProperty.getLabel());
        previousVersionProperty.setDisplayName(lastVersionProperty.getDisplayName());
        if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
          moveResource(resource,expectedFilePath);
        }
      }
      resourcesToSave.add(resource);
    }
    if (lastVersionProperty.getItem().getParent() instanceof FolderItem) {
      FolderItem folderItem=(FolderItem)lastVersionProperty.getItem().getParent();
      folderItem.getChildren().add(previousVersionProperty.getItem());
    }
  }
  for (  Resource resource : resourcesToSave) {
    saveResource(resource);
  }
  if (!resourceProperty.equals(lastVersionProperty)) {
    Item item=resourceProperty.getItem();
    if (item.getParent() != null && item.getParent() instanceof FolderItem) {
      ((FolderItem)item.getParent()).getChildren().remove(item);
      item.setParent(null);
    }
  }
}","public void propagateFileName(Property lastVersionProperty,Property resourceProperty) throws PersistenceException {
  ResourceFilenameHelper.FileName fileNameTest=ResourceFilenameHelper.create(resourceProperty.eResource(),resourceProperty,lastVersionProperty);
  if (!ResourceFilenameHelper.mustChangeVersion(fileNameTest) && ResourceFilenameHelper.hasSameNameButDifferentCase(fileNameTest)) {
    throw new PersistenceException(""String_Node_Str"");
  }
  if (!ResourceFilenameHelper.mustChangeVersion(fileNameTest) && !ResourceFilenameHelper.mustChangeLabel(fileNameTest)) {
    return;
  }
  List<Resource> affectedResources=getAffectedResources(resourceProperty);
  List<Resource> resourcesToSave=new ArrayList<Resource>();
  for (  Resource resource : affectedResources) {
    ResourceFilenameHelper.FileName fileName=ResourceFilenameHelper.create(resource,resourceProperty,lastVersionProperty);
    if (ResourceFilenameHelper.mustChangeVersion(fileName)) {
      IPath path=ResourceFilenameHelper.getExpectedFilePath(fileName,false);
      resource.setURI(URIHelper.convert(path));
      resourcesToSave.add(resource);
    }
 else     if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
      resourceProperty.setLabel(lastVersionProperty.getLabel());
      resourceProperty.setDisplayName(lastVersionProperty.getDisplayName());
      moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      resourcesToSave.add(resource);
    }
  }
  for (  Resource resource : resourcesToSave) {
    saveResource(resource);
    getResourceSet().getResources().remove(resource);
  }
  if (!resourceProperty.equals(lastVersionProperty)) {
    Item item=resourceProperty.getItem();
    if (item.getParent() != null && item.getParent() instanceof FolderItem) {
      ((FolderItem)item.getParent()).getChildren().remove(item);
      item.setParent(null);
    }
  }
}",0.3474069789859264
127415,"private void copyResource(Resource resource,IPath path) throws PersistenceException {
  IFile file=URIHelper.getFile(resource.getURI());
  try {
    file.copy(path,true,null);
  }
 catch (  CoreException e) {
    throw new PersistenceException(e);
  }
}","protected void copyResource(Resource resource,IPath path) throws PersistenceException {
  IFile srcFile=URIHelper.getFile(resource.getURI());
  try {
    srcFile.copy(path,true,null);
  }
 catch (  CoreException e) {
    throw new PersistenceException(e);
  }
}",0.9571984435797666
127416,"@Override public void run(IProgressMonitor monitor) throws CoreException {
  try {
    IPath targetPath=sourcePath.removeLastSegments(1);
    Project project=getRepositoryContext().getProject();
    IProject fsProject=ResourceModelUtils.getProject(project);
    String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toPortableString();
    String completeNewPath;
    if (targetPath.isEmpty()) {
      completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label;
    }
 else {
      completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ label;
    }
    if (completeNewPath.equals(completeOldPath)) {
      return;
    }
    IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,true);
    FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
    FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
    if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
      IPath path=new Path(sourcePath.toString());
      ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
      emfFolder=folderHelper.getFolder(completeOldPath);
    }
    createFolder(getRepositoryContext().getProject(),type,targetPath,label);
    FolderItem newFolder=folderHelper.getFolder(completeNewPath);
    Item[] childrens=(Item[])emfFolder.getChildren().toArray();
    for (    Item children2 : childrens) {
      if (children2 instanceof FolderItem) {
        FolderItem children=(FolderItem)children2;
        moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(newFolder.getProperty().getLabel()));
      }
 else {
        moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
      }
    }
    List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
    List<Resource> allResource=new ArrayList<Resource>();
    Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
    IPath parentPath=getPhysicalProject(project).getFullPath().append(completeNewPath);
    for (    IRepositoryViewObject object : serializableFromFolder) {
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
      for (      Resource resource : affectedResources) {
        allResource.add(resource);
        IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
        resourceAndPathMap.put(resource,path);
        List<Resource> needSaves=findCrossReference(resource);
        moveResource(resource,path);
        saveCrossReference(needSaves);
      }
    }
    svnMoveResource(allResource,parentPath,resourceAndPathMap);
    for (    IRepositoryViewObject object : serializableFromFolder) {
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
      for (      Resource resource : affectedResources) {
        xmiResourceManager.saveResource(resource);
      }
    }
    deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
    xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
  }
 catch (  PersistenceException e) {
    throw new CoreException(new org.eclipse.core.runtime.Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",e));
  }
}","@Override public void run() throws PersistenceException {
  String label=property.getLabel();
  String tmpLabel=label.concat(EcoreUtil.generateUUID());
  property.setLabel(tmpLabel);
  for (  IRepositoryViewObject object : allVersionToMove) {
    if (!mustChangeVersion || !object.getProperty().getVersion().equals(versionToSkip)) {
      xmiResourceManager.propagateFileName(property,object.getProperty());
    }
  }
  property.setLabel(label);
}",0.0589254766031195
127417,"private void propagateFileName(Project project,Property property) throws PersistenceException {
  String originalVersionText=null;
  URI uri=property.eResource().getURI();
  String fileNameString=uri.trimFileExtension().lastSegment();
  int index=fileNameString.lastIndexOf(""String_Node_Str"");
  originalVersionText=fileNameString.substring(index + 1);
  Version originalVersion=new Version(originalVersionText);
  List<IRepositoryViewObject> allVersionToMove=getAllVersion(project,property.getId(),false);
  int lastVersionCheck=0;
  for (  IRepositoryViewObject object : allVersionToMove) {
    if (originalVersion != null && new Version(object.getVersion()).compareTo(originalVersion) > 0) {
      lastVersionCheck++;
    }
  }
  if (lastVersionCheck > 1) {
    for (    IRepositoryViewObject object : allVersionToMove) {
      ResourceFilenameHelper.FileName fileNameTest=ResourceFilenameHelper.create(object.getProperty().eResource(),object.getProperty(),property);
      if (fileNameTest.getResourceVersion().equals(originalVersionText)) {
        if (ResourceFilenameHelper.mustChangeLabel(fileNameTest)) {
          throw new PersistenceException(""String_Node_Str"");
        }
        xmiResourceManager.propagateFileName(property,object.getProperty());
      }
    }
  }
 else {
    for (    IRepositoryViewObject object : allVersionToMove) {
      xmiResourceManager.propagateFileName(property,object.getProperty());
    }
  }
}","private void propagateFileName(Project project,final Property property) throws PersistenceException {
  final ResourceFilenameHelper.FileName fileNameTest=ResourceFilenameHelper.create(property.eResource(),property,property);
  final boolean mustChangeVersion=ResourceFilenameHelper.mustChangeVersion(fileNameTest);
  boolean mustChangeLabel=ResourceFilenameHelper.mustChangeLabel(fileNameTest);
  if (!mustChangeVersion && !mustChangeLabel) {
    return;
  }
  List<IRepositoryViewObject> versions=getAllVersion(project,property.getId(),true);
  VersionList latest=new VersionList(false);
  for (  IRepositoryViewObject object : versions) {
    latest.add(object);
  }
  if (!latest.get(0).getProperty().getVersion().equals(property.getVersion())) {
    if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileNameTest)) {
      xmiResourceManager.propagateFileName(latest.get(0).getProperty(),property);
    }
    return;
  }
  final String versionToSkip=property.getVersion();
  if (mustChangeVersion) {
    xmiResourceManager.propagateFileName(property,property);
  }
  if (mustChangeLabel) {
    final List<IRepositoryViewObject> allVersionToMove=getAllVersion(project,property.getId(),true);
    if (ResourceFilenameHelper.hasSameNameButDifferentCase(fileNameTest)) {
      RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(""String_Node_Str""){
        @Override public void run() throws PersistenceException {
          String label=property.getLabel();
          String tmpLabel=label.concat(EcoreUtil.generateUUID());
          property.setLabel(tmpLabel);
          for (          IRepositoryViewObject object : allVersionToMove) {
            if (!mustChangeVersion || !object.getProperty().getVersion().equals(versionToSkip)) {
              xmiResourceManager.propagateFileName(property,object.getProperty());
            }
          }
          property.setLabel(label);
        }
      }
;
      repositoryWorkUnit.setForceTransaction(true);
      repositoryWorkUnit.setRefreshRepository(false);
      executeRepositoryWorkUnit(repositoryWorkUnit);
      repositoryWorkUnit.throwPersistenceExceptionIfAny();
    }
    for (    IRepositoryViewObject object : allVersionToMove) {
      if (!mustChangeVersion || !object.getProperty().getVersion().equals(versionToSkip)) {
        xmiResourceManager.propagateFileName(property,object.getProperty());
      }
    }
  }
}",0.1737542394990869
127418,"/** 
 * Get all object in a folder recursively.
 * @param folder - the folder to search in
 * @param id - the id of the object searched. Specify <code>null</code> to get all objects.
 * @param type - the type searched
 * @param allVersion - <code>true</code> if all version of each object must be return or <code>false</code> if onlythe most recent version
 * @return a list (may be empty) of objects found
 * @throws PersistenceException
 */
@Override protected List<IRepositoryViewObject> getSerializableFromFolder(Project project,Object folder,String id,ERepositoryObjectType type,boolean allVersion,boolean searchInChildren,boolean withDeleted,boolean avoidSaveProject,boolean... recursiveCall) throws PersistenceException {
  List<IRepositoryViewObject> toReturn=new VersionList(allVersion);
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  if (folder != null) {
    IFolder physicalFolder;
    FolderItem currentFolderItem=null;
    if (folder instanceof IFolder) {
      if (!((IFolder)folder).getName().equals(BIN)) {
        currentFolderItem=folderHelper.getFolder(((IFolder)folder).getProjectRelativePath());
        if (((IFolder)folder).getLocation().toPortableString().contains(BIN)) {
        }
 else         if (currentFolderItem == null) {
          currentFolderItem=folderHelper.createFolder(((IFolder)folder).getProjectRelativePath().toPortableString());
        }
      }
      physicalFolder=(IFolder)folder;
    }
 else {
      currentFolderItem=(FolderItem)folder;
      physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
    }
    List<String> propertyFounds=new ArrayList<String>();
    List<String> folderNamesFounds=new ArrayList<String>();
    List<Item> toRemoveFromFolder=new ArrayList<Item>();
    if (currentFolderItem != null) {
      for (      Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
        Property property=curItem.getProperty();
        if (property != null) {
          if (curItem instanceof FolderItem && searchInChildren) {
            folderNamesFounds.add(curItem.getProperty().getLabel());
            toReturn.addAll(getSerializableFromFolder(project,curItem,id,type,allVersion,true,withDeleted,avoidSaveProject,true));
          }
 else           if (!(curItem instanceof FolderItem)) {
            if (property.eResource() != null) {
              if (id == null || property.getId().equals(id)) {
                if (withDeleted || !property.getItem().getState().isDeleted()) {
                  toReturn.add(new RepositoryObject(property));
                }
              }
              propertyFounds.add(property.eResource().getURI().lastSegment());
              property.getItem().setParent(currentFolderItem);
              addToHistory(id,type,property.getItem().getState().getPath());
            }
 else {
              toRemoveFromFolder.add(curItem);
            }
          }
        }
 else {
          toRemoveFromFolder.add(curItem);
        }
      }
      if (toRemoveFromFolder.size() != 0) {
        currentFolderItem.getChildren().removeAll(toRemoveFromFolder);
      }
    }
    if (physicalFolder.exists()) {
      List<String> physicalPropertyFounds=new ArrayList<String>();
      List<String> physicalDirectoryFounds=new ArrayList<String>();
      for (      IResource current : ResourceUtils.getMembers(physicalFolder)) {
        if (current instanceof IFile) {
          if (xmiResourceManager.isPropertyFile((IFile)current)) {
            String fileName=((IFile)current).getName();
            physicalPropertyFounds.add(fileName);
            if (!propertyFounds.contains(fileName)) {
              Property property=null;
              try {
                property=xmiResourceManager.loadProperty(current);
              }
 catch (              Exception e) {
              }
              if (property != null) {
                if (property.getItem() == null || property.getItem().getState() == null) {
                  if (type != null) {
                    log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                  }
 else {
                    log.error(""String_Node_Str"" + property.getLabel());
                  }
                  continue;
                }
                addToHistory(property.getId(),type,property.getItem().getState().getPath());
                if (id == null || property.getId().equals(id)) {
                  if (withDeleted || !property.getItem().getState().isDeleted()) {
                    toReturn.add(new RepositoryObject(property));
                  }
                }
                if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                  currentFolderItem.getChildren().add(property.getItem());
                  property.getItem().setParent(currentFolderItem);
                }
              }
 else {
                String curFile=current.getFullPath().toPortableString();
                if (!invalidFiles.contains(curFile)) {
                  invalidFiles.add(curFile);
                  log.error(Messages.getString(""String_Node_Str"") + current);
                }
              }
            }
          }
        }
 else         if (current instanceof IFolder) {
          if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current) && searchInChildren) {
            String fileName=((IFolder)current).getName();
            physicalDirectoryFounds.add(fileName);
            if (!folderNamesFounds.contains(((IFolder)current).getName())) {
              FolderItem parentFolder=folderHelper.getFolder(current.getProjectRelativePath());
              if (parentFolder == null) {
                parentFolder=folderHelper.createFolder(current.getProjectRelativePath().toString());
              }
              parentFolder.setParent(currentFolderItem);
              toReturn.addAll(getSerializableFromFolder(project,(IFolder)current,id,type,allVersion,true,withDeleted,avoidSaveProject,true));
            }
            if (((IFolder)current).getName().equals(BIN)) {
              IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
              if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
                try {
                  deleteResource(current);
                }
 catch (                PersistenceException e) {
                }
              }
            }
          }
        }
      }
      if (currentFolderItem != null) {
        List<Item> itemsDeleted=new ArrayList<Item>();
        for (        Item curItem : (List<Item>)currentFolderItem.getChildren()) {
          if (!(curItem instanceof FolderItem)) {
            String name;
            if (curItem.eResource() != null) {
              name=curItem.eResource().getURI().lastSegment();
            }
 else {
              name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
            }
            if (!physicalPropertyFounds.contains(name)) {
              itemsDeleted.add(curItem);
            }
          }
 else           if (searchInChildren && ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
            if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
              itemsDeleted.add(curItem);
            }
          }
        }
        for (        Item item : itemsDeleted) {
          item.setParent(null);
          Iterator<IRepositoryViewObject> it=toReturn.iterator();
          while (it.hasNext()) {
            IRepositoryViewObject object=it.next();
            if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
              it.remove();
            }
          }
        }
        currentFolderItem.getChildren().removeAll(itemsDeleted);
      }
    }
  }
  return toReturn;
}","/** 
 * Get all object in a folder recursively.
 * @param folder - the folder to search in
 * @param id - the id of the object searched. Specify <code>null</code> to get all objects.
 * @param type - the type searched
 * @param allVersion - <code>true</code> if all version of each object must be return or <code>false</code> if onlythe most recent version
 * @return a list (may be empty) of objects found
 * @throws PersistenceException
 */
@Override protected List<IRepositoryViewObject> getSerializableFromFolder(Project project,Object folder,String id,ERepositoryObjectType type,boolean allVersion,boolean searchInChildren,boolean withDeleted,boolean avoidSaveProject,boolean... recursiveCall) throws PersistenceException {
  List<IRepositoryViewObject> toReturn=new VersionList(allVersion);
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  if (folder != null) {
    IFolder physicalFolder;
    FolderItem currentFolderItem=null;
    if (folder instanceof IFolder) {
      if (!((IFolder)folder).getName().equals(BIN)) {
        currentFolderItem=folderHelper.getFolder(((IFolder)folder).getProjectRelativePath());
        if (((IFolder)folder).getLocation().toPortableString().contains(BIN)) {
        }
 else         if (currentFolderItem == null) {
          currentFolderItem=folderHelper.createFolder(((IFolder)folder).getProjectRelativePath().toPortableString());
        }
      }
      physicalFolder=(IFolder)folder;
    }
 else {
      currentFolderItem=(FolderItem)folder;
      physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
    }
    List<String> propertyFounds=new ArrayList<String>();
    List<String> folderNamesFounds=new ArrayList<String>();
    List<Item> toRemoveFromFolder=new ArrayList<Item>();
    if (currentFolderItem != null) {
      for (      Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
        Property property=curItem.getProperty();
        if (property != null) {
          if (curItem instanceof FolderItem && searchInChildren) {
            folderNamesFounds.add(curItem.getProperty().getLabel());
            toReturn.addAll(getSerializableFromFolder(project,curItem,id,type,allVersion,true,withDeleted,avoidSaveProject,true));
          }
 else           if (!(curItem instanceof FolderItem)) {
            if (property.eResource() != null) {
              if (id == null || property.getId().equals(id)) {
                if (withDeleted || !property.getItem().getState().isDeleted()) {
                  toReturn.add(new RepositoryObject(property));
                }
              }
              propertyFounds.add(property.eResource().getURI().lastSegment());
              property.getItem().setParent(currentFolderItem);
              addToHistory(id,type,property.getItem().getState().getPath());
            }
 else {
              toRemoveFromFolder.add(curItem);
            }
          }
        }
 else {
          toRemoveFromFolder.add(curItem);
        }
      }
      if (toRemoveFromFolder.size() != 0) {
        currentFolderItem.getChildren().removeAll(toRemoveFromFolder);
      }
    }
    if (physicalFolder.exists()) {
      List<String> physicalPropertyFounds=new ArrayList<String>();
      List<String> physicalDirectoryFounds=new ArrayList<String>();
      for (      IResource current : ResourceUtils.getMembers(physicalFolder)) {
        if (current instanceof IFile) {
          if (xmiResourceManager.isPropertyFile((IFile)current)) {
            String fileName=((IFile)current).getName();
            physicalPropertyFounds.add(fileName);
            if (!propertyFounds.contains(fileName)) {
              Property property=null;
              try {
                property=xmiResourceManager.loadProperty(current);
              }
 catch (              Exception e) {
              }
              if (property != null) {
                if (property.getItem() == null || property.getItem().getState() == null) {
                  if (type != null) {
                    log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                  }
 else {
                    log.error(""String_Node_Str"" + property.getLabel());
                  }
                  continue;
                }
                addToHistory(property.getId(),type,property.getItem().getState().getPath());
                if (id == null || property.getId().equals(id)) {
                  if (withDeleted || !property.getItem().getState().isDeleted()) {
                    toReturn.add(new RepositoryObject(property));
                  }
                }
                if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                  currentFolderItem.getChildren().add(property.getItem());
                  property.getItem().setParent(currentFolderItem);
                }
              }
 else {
                String curFile=current.getFullPath().toPortableString();
                if (!invalidFiles.contains(curFile)) {
                  invalidFiles.add(curFile);
                  log.error(Messages.getString(""String_Node_Str"") + current);
                }
              }
            }
          }
        }
 else         if (current instanceof IFolder) {
          if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current) && searchInChildren) {
            String fileName=((IFolder)current).getName();
            physicalDirectoryFounds.add(fileName);
            if (!folderNamesFounds.contains(((IFolder)current).getName())) {
              FolderItem parentFolder=folderHelper.getFolder(current.getProjectRelativePath());
              if (parentFolder == null) {
                parentFolder=folderHelper.createFolder(current.getProjectRelativePath().toString());
              }
              parentFolder.setParent(currentFolderItem);
              toReturn.addAll(getSerializableFromFolder(project,(IFolder)current,id,type,allVersion,true,withDeleted,avoidSaveProject,true));
            }
            if (((IFolder)current).getName().equals(BIN)) {
              IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
              if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
                try {
                  deleteResource(current);
                }
 catch (                PersistenceException e) {
                }
              }
            }
          }
        }
      }
      if (currentFolderItem != null) {
        List<Item> itemsDeleted=new ArrayList<Item>();
        for (        Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
          if (!(curItem instanceof FolderItem)) {
            String name;
            if (curItem.eResource() != null) {
              name=curItem.eResource().getURI().lastSegment();
            }
 else {
              name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
            }
            if (!physicalPropertyFounds.contains(name)) {
              itemsDeleted.add(curItem);
            }
          }
 else           if (searchInChildren && ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
            if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
              itemsDeleted.add(curItem);
            }
          }
        }
        for (        Item item : itemsDeleted) {
          item.setParent(null);
          Iterator<IRepositoryViewObject> it=toReturn.iterator();
          while (it.hasNext()) {
            IRepositoryViewObject object=it.next();
            if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
              it.remove();
            }
          }
        }
        currentFolderItem.getChildren().removeAll(itemsDeleted);
      }
    }
  }
  return toReturn;
}",0.9991981743045704
127419,"public XmiResourceManager(){
  setUseOldProjectFile(false);
  resourceSet.getLoadOptions().put(XMLResource.OPTION_DEFER_ATTACHMENT,Boolean.TRUE);
  resourceSet.getLoadOptions().put(XMLResource.OPTION_DEFER_IDREF_RESOLUTION,Boolean.TRUE);
  resourceSet.getLoadOptions().put(XMLResource.OPTION_USE_PARSER_POOL,new XMLParserPoolImpl());
  resourceSet.getLoadOptions().put(XMLResource.OPTION_USE_XML_NAME_TO_FEATURE_MAP,new HashMap<Object,Object>());
  resourceSet.getLoadOptions().put(XMLResource.OPTION_USE_DEPRECATED_METHODS,Boolean.FALSE);
}","public XmiResourceManager(){
  setUseOldProjectFile(false);
  resetResourceSet();
}",0.266025641025641
127420,"public void resetResourceSet(){
  resourceSet=new ResourceSetImpl();
  resourceSet.getLoadOptions().put(XMLResource.OPTION_DEFER_ATTACHMENT,Boolean.TRUE);
  resourceSet.getLoadOptions().put(XMLResource.OPTION_DEFER_IDREF_RESOLUTION,Boolean.TRUE);
  resourceSet.getLoadOptions().put(XMLResource.OPTION_USE_PARSER_POOL,new XMLParserPoolImpl());
  resourceSet.getLoadOptions().put(XMLResource.OPTION_USE_XML_NAME_TO_FEATURE_MAP,new HashMap<Object,Object>());
  resourceSet.getLoadOptions().put(XMLResource.OPTION_USE_DEPRECATED_METHODS,Boolean.FALSE);
}","public void resetResourceSet(){
  resourceSet=new TalendResourceSet();
  resourceSet.getLoadOptions().put(XMLResource.OPTION_DEFER_ATTACHMENT,Boolean.TRUE);
  resourceSet.getLoadOptions().put(XMLResource.OPTION_DEFER_IDREF_RESOLUTION,Boolean.TRUE);
  resourceSet.getLoadOptions().put(XMLResource.OPTION_USE_PARSER_POOL,new XMLParserPoolImpl());
  resourceSet.getLoadOptions().put(XMLResource.OPTION_USE_XML_NAME_TO_FEATURE_MAP,new HashMap<Object,Object>());
  resourceSet.getLoadOptions().put(XMLResource.OPTION_USE_DEPRECATED_METHODS,Boolean.FALSE);
}",0.970961887477314
127421,"@Override public ResultSet getTables(String catalog,String schema,String tableNamePattern,String[] types) throws SQLException {
  if (StringUtils.isBlank(catalog)) {
    catalog=HIVE_SCHEMA_DEFAULT;
  }
  ClassLoader currCL=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(classLoader);
  EmbeddedHiveResultSet tableResultSet=new EmbeddedHiveResultSet();
  tableResultSet.setMetadata(TABLE_META);
  List<String[]> list=new ArrayList<String[]>();
  tableResultSet.setData(list);
  if (hiveObject != null) {
    try {
      Class hiveClass=hiveObject.getClass();
      Method method=hiveClass.getDeclaredMethod(""String_Node_Str"");
      Object hiveConf=method.invoke(hiveObject);
      Class hiveConfClass=hiveConf.getClass();
      Class confVarClass=null;
      for (      Class curClass : hiveConfClass.getClasses()) {
        if (curClass.getSimpleName().equals(""String_Node_Str"")) {
          confVarClass=curClass;
          break;
        }
      }
      if (confVarClass != null) {
        Object confVar=null;
        for (        Object curConfVar : confVarClass.getEnumConstants()) {
          if (curConfVar.toString().equals(""String_Node_Str"")) {
            confVar=curConfVar;
            break;
          }
        }
        if (confVar != null) {
          Method setIntVarMethod=hiveConfClass.getDeclaredMethod(""String_Node_Str"",confVarClass,int.class);
          int timeout=15;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService designerService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            timeout=designerService.getDesignerCorePreferenceStore().getInt(ITalendCorePrefConstants.DB_CONNECTION_TIMEOUT);
          }
          setIntVarMethod.invoke(hiveConf,confVar,timeout);
        }
      }
      Object tables=ReflectionUtils.invokeMethod(hiveObject,""String_Node_Str"",new Object[]{catalog});
      if (tables instanceof List) {
        List<String> tableList=(List<String>)tables;
        for (        String tableName : tableList) {
          String tableType=getTableType(catalog,tableName);
          if (tableType != null) {
            String[] array=new String[]{""String_Node_Str"",catalog,tableName,tableType,""String_Node_Str""};
            list.add(array);
          }
        }
      }
    }
 catch (    Exception e) {
      throw new SQLException(e);
    }
 finally {
      Thread.currentThread().setContextClassLoader(currCL);
    }
  }
  return tableResultSet;
}","@Override public ResultSet getTables(String catalog,String schema,String tableNamePattern,String[] types) throws SQLException {
  String hiveCat=catalog;
  if (StringUtils.isBlank(hiveCat)) {
    hiveCat=HIVE_SCHEMA_DEFAULT;
  }
  String[] hiveTypes=types;
  if (hiveTypes == null) {
    hiveTypes=new String[0];
  }
  ClassLoader currCL=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(classLoader);
  EmbeddedHiveResultSet tableResultSet=new EmbeddedHiveResultSet();
  tableResultSet.setMetadata(TABLE_META);
  List<String[]> list=new ArrayList<String[]>();
  tableResultSet.setData(list);
  if (hiveObject != null) {
    try {
      Class hiveClass=hiveObject.getClass();
      Method method=hiveClass.getDeclaredMethod(""String_Node_Str"");
      Object hiveConf=method.invoke(hiveObject);
      Class hiveConfClass=hiveConf.getClass();
      Class confVarClass=null;
      for (      Class curClass : hiveConfClass.getClasses()) {
        if (curClass.getSimpleName().equals(""String_Node_Str"")) {
          confVarClass=curClass;
          break;
        }
      }
      if (confVarClass != null) {
        Object confVar=null;
        for (        Object curConfVar : confVarClass.getEnumConstants()) {
          if (curConfVar.toString().equals(""String_Node_Str"")) {
            confVar=curConfVar;
            break;
          }
        }
        if (confVar != null) {
          Method setIntVarMethod=hiveConfClass.getDeclaredMethod(""String_Node_Str"",confVarClass,int.class);
          int timeout=15;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService designerService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            timeout=designerService.getDesignerCorePreferenceStore().getInt(ITalendCorePrefConstants.DB_CONNECTION_TIMEOUT);
          }
          setIntVarMethod.invoke(hiveConf,confVar,timeout);
        }
      }
      Object tables=ReflectionUtils.invokeMethod(hiveObject,""String_Node_Str"",new Object[]{hiveCat});
      if (tables instanceof List) {
        List<String> tableList=(List<String>)tables;
        for (        String tableName : tableList) {
          String tableType=getTableType(hiveCat,tableName);
          if (tableType != null && ArrayUtils.contains(hiveTypes,tableType)) {
            String[] array=new String[]{""String_Node_Str"",hiveCat,tableName,tableType,""String_Node_Str""};
            list.add(array);
          }
        }
      }
    }
 catch (    Exception e) {
      throw new SQLException(e);
    }
 finally {
      Thread.currentThread().setContextClassLoader(currCL);
    }
  }
  return tableResultSet;
}",0.9572232645403376
127422,"/** 
 * addButtonControls.
 */
@Override protected void addUtilsButtonListeners(){
  tableCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_TABLE,tableCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_EXTERNAL_TABLE,tableCheck.getSelection());
    }
  }
);
  viewCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_VIEW,viewCheck.getSelection());
    }
  }
);
  synonymCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_SYNONYM,synonymCheck.getSelection());
    }
  }
);
  if (isOracle()) {
    publicSynonymCheck.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        getTableInfoParameters().changeType(ETableTypes.TABLETYPE_ALL_SYNONYM,publicSynonymCheck.getSelection());
        ExtractMetaDataUtils.setUseAllSynonyms(publicSynonymCheck.getSelection());
        if (publicSynonymCheck.getSelection()) {
          tableCheck.setEnabled(false);
          viewCheck.setEnabled(false);
          synonymCheck.setEnabled(false);
        }
 else {
          tableCheck.setEnabled(true);
          viewCheck.setEnabled(true);
          synonymCheck.setEnabled(true);
        }
      }
    }
);
  }
  SelectionAdapter selectionAdapter=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      addName=""String_Node_Str"";
      Dialog dialog=new Dialog(getShell()){
        Text addText;
        @Override protected Control createDialogArea(        Composite parent){
          Composite createDialogArea=(Composite)super.createDialogArea(parent);
          Label addLabel=new Label(createDialogArea,SWT.NONE);
          addLabel.setText(Messages.getString(""String_Node_Str""));
          addText=new Text(createDialogArea,SWT.BORDER);
          GridData gridData=new GridData(GridData.FILL_BOTH);
          addText.setLayoutData(gridData);
          addText.setText(addName);
          return createDialogArea;
        }
        @Override protected void configureShell(        Shell newShell){
          super.configureShell(newShell);
          newShell.setText(Messages.getString(""String_Node_Str""));
        }
        @Override protected void okPressed(){
          addName=addText.getText();
          super.okPressed();
        }
      }
;
      if (dialog.open() == Dialog.OK) {
        nameFilter.add(addName,0);
        nameFilter.select(0);
        removeButton.setEnabled(true);
        editButton.setEnabled(true);
      }
    }
  }
;
  newButton.addSelectionListener(selectionAdapter);
  selectionAdapter=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      final int index=nameFilter.getSelectionIndex();
      if (nameFilter.getSelection().length > 0) {
        addName=nameFilter.getSelection()[0];
      }
      Dialog dialog=new Dialog(getShell()){
        Text addText;
        @Override protected Control createDialogArea(        Composite parent){
          Composite createDialogArea=(Composite)super.createDialogArea(parent);
          Label addLabel=new Label(createDialogArea,SWT.NONE);
          addLabel.setText(Messages.getString(""String_Node_Str""));
          addText=new Text(createDialogArea,SWT.BORDER);
          GridData gridData=new GridData(GridData.FILL_BOTH);
          addText.setLayoutData(gridData);
          addText.setText(addName);
          return createDialogArea;
        }
        @Override protected void configureShell(        Shell newShell){
          super.configureShell(newShell);
          newShell.setText(Messages.getString(""String_Node_Str""));
        }
        @Override protected void okPressed(){
          addName=addText.getText();
          super.okPressed();
        }
      }
;
      if (dialog.open() == Dialog.OK) {
        nameFilter.setItem(index,addName);
        nameFilter.select(index);
      }
    }
  }
;
  editButton.addSelectionListener(selectionAdapter);
  selectionAdapter=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (nameFilter.getSelection().length > 0) {
        addName=nameFilter.getSelection()[0];
        nameFilter.remove(addName);
      }
    }
  }
;
  removeButton.addSelectionListener(selectionAdapter);
}","/** 
 * addButtonControls.
 */
@Override protected void addUtilsButtonListeners(){
  tableCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_TABLE,tableCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_EXTERNAL_TABLE,tableCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.EXTERNAL_TABLE,tableCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.MANAGED_TABLE,tableCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.INDEX_TABLE,tableCheck.getSelection());
    }
  }
);
  viewCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_VIEW,viewCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.VIRTUAL_VIEW,viewCheck.getSelection());
    }
  }
);
  synonymCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_SYNONYM,synonymCheck.getSelection());
    }
  }
);
  if (isOracle()) {
    publicSynonymCheck.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        getTableInfoParameters().changeType(ETableTypes.TABLETYPE_ALL_SYNONYM,publicSynonymCheck.getSelection());
        ExtractMetaDataUtils.setUseAllSynonyms(publicSynonymCheck.getSelection());
        if (publicSynonymCheck.getSelection()) {
          tableCheck.setEnabled(false);
          viewCheck.setEnabled(false);
          synonymCheck.setEnabled(false);
        }
 else {
          tableCheck.setEnabled(true);
          viewCheck.setEnabled(true);
          synonymCheck.setEnabled(true);
        }
      }
    }
);
  }
  SelectionAdapter selectionAdapter=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      addName=""String_Node_Str"";
      Dialog dialog=new Dialog(getShell()){
        Text addText;
        @Override protected Control createDialogArea(        Composite parent){
          Composite createDialogArea=(Composite)super.createDialogArea(parent);
          Label addLabel=new Label(createDialogArea,SWT.NONE);
          addLabel.setText(Messages.getString(""String_Node_Str""));
          addText=new Text(createDialogArea,SWT.BORDER);
          GridData gridData=new GridData(GridData.FILL_BOTH);
          addText.setLayoutData(gridData);
          addText.setText(addName);
          return createDialogArea;
        }
        @Override protected void configureShell(        Shell newShell){
          super.configureShell(newShell);
          newShell.setText(Messages.getString(""String_Node_Str""));
        }
        @Override protected void okPressed(){
          addName=addText.getText();
          super.okPressed();
        }
      }
;
      if (dialog.open() == Dialog.OK) {
        nameFilter.add(addName,0);
        nameFilter.select(0);
        removeButton.setEnabled(true);
        editButton.setEnabled(true);
      }
    }
  }
;
  newButton.addSelectionListener(selectionAdapter);
  selectionAdapter=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      final int index=nameFilter.getSelectionIndex();
      if (nameFilter.getSelection().length > 0) {
        addName=nameFilter.getSelection()[0];
      }
      Dialog dialog=new Dialog(getShell()){
        Text addText;
        @Override protected Control createDialogArea(        Composite parent){
          Composite createDialogArea=(Composite)super.createDialogArea(parent);
          Label addLabel=new Label(createDialogArea,SWT.NONE);
          addLabel.setText(Messages.getString(""String_Node_Str""));
          addText=new Text(createDialogArea,SWT.BORDER);
          GridData gridData=new GridData(GridData.FILL_BOTH);
          addText.setLayoutData(gridData);
          addText.setText(addName);
          return createDialogArea;
        }
        @Override protected void configureShell(        Shell newShell){
          super.configureShell(newShell);
          newShell.setText(Messages.getString(""String_Node_Str""));
        }
        @Override protected void okPressed(){
          addName=addText.getText();
          super.okPressed();
        }
      }
;
      if (dialog.open() == Dialog.OK) {
        nameFilter.setItem(index,addName);
        nameFilter.select(index);
      }
    }
  }
;
  editButton.addSelectionListener(selectionAdapter);
  selectionAdapter=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (nameFilter.getSelection().length > 0) {
        addName=nameFilter.getSelection()[0];
        nameFilter.remove(addName);
      }
    }
  }
;
  removeButton.addSelectionListener(selectionAdapter);
}",0.960300093779306
127423,"/** 
 * Initialize value, forceFocus first field for right Click (new Table).
 */
@Override public void initialize(){
  getTableInfoParameters().setSqlFiter(sqlFilter.getText());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_TABLE,tableCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_EXTERNAL_TABLE,tableCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_VIEW,viewCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_SYNONYM,synonymCheck.getSelection());
  if (HiveConnectionManager.getInstance().isCDHHive2(metadataconnection)) {
    getTableInfoParameters().changeType(ETableTypes.EXTERNAL_TABLE,tableCheck.getSelection());
    getTableInfoParameters().changeType(ETableTypes.MANAGED_TABLE,tableCheck.getSelection());
  }
  if (isOracle()) {
    getTableInfoParameters().changeType(ETableTypes.TABLETYPE_ALL_SYNONYM,publicSynonymCheck.getSelection());
  }
  switchFilter();
  IDBMetadataProviderObject providerObjectByDbType=ExtractMetaDataFromDataBase.getProviderObjectByDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider() && !providerObjectByDbType.isSupportJDBC()) {
    disableAllJDBCControls();
  }
}","/** 
 * Initialize value, forceFocus first field for right Click (new Table).
 */
@Override public void initialize(){
  getTableInfoParameters().setSqlFiter(sqlFilter.getText());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_TABLE,tableCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_EXTERNAL_TABLE,tableCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_VIEW,viewCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_SYNONYM,synonymCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.EXTERNAL_TABLE,tableCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.MANAGED_TABLE,tableCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.INDEX_TABLE,tableCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.VIRTUAL_VIEW,viewCheck.getSelection());
  if (isOracle()) {
    getTableInfoParameters().changeType(ETableTypes.TABLETYPE_ALL_SYNONYM,publicSynonymCheck.getSelection());
  }
  switchFilter();
  IDBMetadataProviderObject providerObjectByDbType=ExtractMetaDataFromDataBase.getProviderObjectByDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider() && !providerObjectByDbType.isSupportJDBC()) {
    disableAllJDBCControls();
  }
}",0.9011494252873564
127424,"@Override public void run(IProgressMonitor monitor) throws CoreException {
  if (!isMigrationOnNewProject() && beforeLogon) {
    appendToLogFile(project,""String_Node_Str"" + project.getLabel() + ""String_Node_Str"");
  }
  try {
    boolean needSave=false;
    if (!isMigrationOnNewProject()) {
      if (!beforeLogon) {
        ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
        Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
          @Override public int compare(          ERepositoryObjectType arg0,          ERepositoryObjectType arg1){
            if (arg0 == ERepositoryObjectType.PROCESS) {
              return 1;
            }
            if (arg0 == ERepositoryObjectType.JOBLET) {
              return 1;
            }
            return 0;
          }
        }
);
        for (        ERepositoryObjectType type : types) {
          if (!type.isResourceItem()) {
            continue;
          }
          List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
          for (          IRepositoryViewObject object : objects) {
            Item item=object.getProperty().getItem();
            monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
            boolean hadFailed=false;
            subProgressMonitor.worked(1);
            for (            IProjectMigrationTask task : toExecute) {
              if (monitorWrap.isCanceled()) {
                throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
              }
              MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
              if (mgTask == null && !task.isDeprecated()) {
                try {
                  ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                    if (task.getStatus() != ExecutionResult.FAILURE) {
                      task.setStatus(status);
                    }
case SUCCESS_NO_ALERT:
                  if (task.getStatus() != ExecutionResult.FAILURE) {
                    task.setStatus(status);
                  }
case NOTHING_TO_DO:
                if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                  task.setStatus(status);
                }
              break;
case SKIPPED:
            if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
              task.setStatus(status);
            }
          break;
case FAILURE:
        task.setStatus(status);
default :
      task.setStatus(status);
    if (!isMigrationOnNewProject()) {
      if (!hadFailed) {
        hadFailed=true;
        Property prop=object.getProperty();
        Resource resource=prop.eResource();
        String itemInfo=null;
        if (resource != null) {
          IPath path=URIHelper.convert(resource.getURI());
          if (path != null) {
            itemInfo=path.toPortableString();
          }
        }
        if (itemInfo == null) {
          itemInfo=prop.toString();
        }
        appendToLogFile(project,""String_Node_Str"" + itemInfo + ""String_Node_Str"");
      }
      appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
    }
  break;
}
}
 catch (Exception e) {
doneThisSession.add(task);
ExceptionHandler.process(e);
if (!isMigrationOnNewProject()) {
if (!hadFailed) {
  hadFailed=true;
  Property prop=object.getProperty();
  Resource resource=prop.eResource();
  String itemInfo=null;
  if (resource != null) {
    IPath path=URIHelper.convert(resource.getURI());
    if (path != null) {
      itemInfo=path.toPortableString();
    }
  }
  if (itemInfo == null) {
    itemInfo=prop.toString();
  }
  appendToLogFile(project,""String_Node_Str"" + itemInfo + ""String_Node_Str"");
}
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
}
if (object instanceof RepositoryObject) {
((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
if (mgTask == null && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
status=task.execute(project);
task.setStatus(status);
}
 else {
status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
if (!isMigrationOnNewProject()) {
doneThisSession.add(task);
}
case SUCCESS_NO_ALERT:
if (!isMigrationOnNewProject()) {
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
case NOTHING_TO_DO:
if (!isMigrationOnNewProject() && task.getStatus() == ExecutionResult.NOTHING_TO_DO) {
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
if (!isMigrationOnNewProject()) {
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
break;
case FAILURE:
doneThisSession.add(task);
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
doneThisSession.add(task);
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
done.add(MigrationUtil.convertMigrationTask(task));
needSave=true;
}
}
 else {
for (IProjectMigrationTask task : toExecute) {
task.setStatus(ExecutionResult.NOTHING_TO_DO);
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
if (!isMigrationOnNewProject()) {
RelationshipItemBuilder.getInstance().saveRelations();
}
}
 catch (PersistenceException e) {
throw new CoreException(new Status(Status.ERROR,""String_Node_Str"",e.getMessage(),e));
}
if (!isMigrationOnNewProject() && !beforeLogon) {
appendToLogFile(project,""String_Node_Str"");
}
}","@Override public void run(IProgressMonitor monitor) throws CoreException {
  if (!isMigrationOnNewProject() && beforeLogon) {
    appendToLogFile(project,""String_Node_Str"" + project.getLabel() + ""String_Node_Str"");
  }
  try {
    boolean needSave=false;
    if (!isMigrationOnNewProject()) {
      if (!beforeLogon) {
        ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
        Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
          @Override public int compare(          ERepositoryObjectType arg0,          ERepositoryObjectType arg1){
            if (arg0 == ERepositoryObjectType.PROCESS) {
              return 1;
            }
            if (arg0 == ERepositoryObjectType.JOBLET) {
              return 1;
            }
            return 0;
          }
        }
);
        for (        ERepositoryObjectType type : types) {
          if (!type.isResourceItem()) {
            continue;
          }
          List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
          for (          IRepositoryViewObject object : objects) {
            Item item=object.getProperty().getItem();
            monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
            boolean hadFailed=false;
            subProgressMonitor.worked(1);
            for (            IProjectMigrationTask task : toExecute) {
              if (monitorWrap.isCanceled()) {
                throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
              }
              MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
              if (mgTask == null && !task.isDeprecated()) {
                try {
                  ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                    if (task.getStatus() != ExecutionResult.FAILURE) {
                      task.setStatus(status);
                    }
case SUCCESS_NO_ALERT:
                  if (task.getStatus() != ExecutionResult.FAILURE) {
                    task.setStatus(status);
                  }
case NOTHING_TO_DO:
                if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                  task.setStatus(status);
                }
              break;
case SKIPPED:
            if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
              task.setStatus(status);
            }
          break;
case FAILURE:
        task.setStatus(status);
default :
      task.setStatus(status);
    if (!isMigrationOnNewProject()) {
      if (!hadFailed) {
        hadFailed=true;
        Property prop=object.getProperty();
        Resource resource=prop.eResource();
        String itemInfo=null;
        if (resource != null) {
          IPath path=URIHelper.convert(resource.getURI());
          if (path != null) {
            itemInfo=path.toPortableString();
          }
        }
        if (itemInfo == null) {
          itemInfo=prop.toString();
        }
        appendToLogFile(project,""String_Node_Str"" + itemInfo + ""String_Node_Str"");
      }
      appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
    }
  break;
}
}
 catch (Exception e) {
doneThisSession.add(task);
ExceptionHandler.process(e);
if (!isMigrationOnNewProject()) {
if (!hadFailed) {
  hadFailed=true;
  Property prop=object.getProperty();
  Resource resource=prop.eResource();
  String itemInfo=null;
  if (resource != null) {
    IPath path=URIHelper.convert(resource.getURI());
    if (path != null) {
      itemInfo=path.toPortableString();
    }
  }
  if (itemInfo == null) {
    itemInfo=prop.toString();
  }
  appendToLogFile(project,""String_Node_Str"" + itemInfo + ""String_Node_Str"");
}
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
}
if (object instanceof RepositoryObject) {
((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
if (mgTask == null && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
status=task.execute(project);
task.setStatus(status);
}
 else {
status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
if (!isMigrationOnNewProject()) {
doneThisSession.add(task);
}
case SUCCESS_NO_ALERT:
if (!isMigrationOnNewProject()) {
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
case NOTHING_TO_DO:
if (!isMigrationOnNewProject() && task.getStatus() == ExecutionResult.NOTHING_TO_DO) {
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
if (!isMigrationOnNewProject()) {
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
break;
case FAILURE:
doneThisSession.add(task);
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
doneThisSession.add(task);
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
}
 else {
for (IProjectMigrationTask task : toExecute) {
task.setStatus(ExecutionResult.NOTHING_TO_DO);
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
if (!isMigrationOnNewProject()) {
RelationshipItemBuilder.getInstance().saveRelations();
}
}
 catch (PersistenceException e) {
throw new CoreException(new Status(Status.ERROR,""String_Node_Str"",e.getMessage(),e));
}
if (!isMigrationOnNewProject() && !beforeLogon) {
appendToLogFile(project,""String_Node_Str"");
}
}",0.9918392969240428
127425,"@Override public void executeMigrationTasksForLogon(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<MigrationTask> done=new ArrayList<MigrationTask>(project.getEmfProject().getMigrationTask());
  if (beforeLogon) {
    boolean isNewProject=project.getEmfProject().getProductVersion() == null ? true : false;
    setMigrationOnNewProject(beforeLogon && isNewProject && done.isEmpty());
  }
  sortMigrationTasks(toExecute);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
    if (mgTask == null && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon && (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion()) || nbMigrationsToDo > 0)) {
    MigrationUtil.removeMigrationTaskById(done,RELATION_TASK);
    RelationshipItemBuilder.getInstance().unloadRelations();
    nbMigrationsToDo++;
  }
  if (nbMigrationsToDo == 0) {
    return;
  }
  MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    @Override public void run() throws PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          if (!isMigrationOnNewProject() && beforeLogon) {
            appendToLogFile(project,""String_Node_Str"" + project.getLabel() + ""String_Node_Str"");
          }
          try {
            boolean needSave=false;
            if (!isMigrationOnNewProject()) {
              if (!beforeLogon) {
                ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
                Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
                  @Override public int compare(                  ERepositoryObjectType arg0,                  ERepositoryObjectType arg1){
                    if (arg0 == ERepositoryObjectType.PROCESS) {
                      return 1;
                    }
                    if (arg0 == ERepositoryObjectType.JOBLET) {
                      return 1;
                    }
                    return 0;
                  }
                }
);
                for (                ERepositoryObjectType type : types) {
                  if (!type.isResourceItem()) {
                    continue;
                  }
                  List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
                  for (                  IRepositoryViewObject object : objects) {
                    Item item=object.getProperty().getItem();
                    monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
                    boolean hadFailed=false;
                    subProgressMonitor.worked(1);
                    for (                    IProjectMigrationTask task : toExecute) {
                      if (monitorWrap.isCanceled()) {
                        throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
                      }
                      MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
                      if (mgTask == null && !task.isDeprecated()) {
                        try {
                          ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                            if (task.getStatus() != ExecutionResult.FAILURE) {
                              task.setStatus(status);
                            }
case SUCCESS_NO_ALERT:
                          if (task.getStatus() != ExecutionResult.FAILURE) {
                            task.setStatus(status);
                          }
case NOTHING_TO_DO:
                        if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                          task.setStatus(status);
                        }
                      break;
case SKIPPED:
                    if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                      task.setStatus(status);
                    }
                  break;
case FAILURE:
                task.setStatus(status);
default :
              task.setStatus(status);
            if (!isMigrationOnNewProject()) {
              if (!hadFailed) {
                hadFailed=true;
                Property prop=object.getProperty();
                Resource resource=prop.eResource();
                String itemInfo=null;
                if (resource != null) {
                  IPath path=URIHelper.convert(resource.getURI());
                  if (path != null) {
                    itemInfo=path.toPortableString();
                  }
                }
                if (itemInfo == null) {
                  itemInfo=prop.toString();
                }
                appendToLogFile(project,""String_Node_Str"" + itemInfo + ""String_Node_Str"");
              }
              appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
            }
          break;
      }
    }
 catch (    Exception e) {
      doneThisSession.add(task);
      ExceptionHandler.process(e);
      if (!isMigrationOnNewProject()) {
        if (!hadFailed) {
          hadFailed=true;
          Property prop=object.getProperty();
          Resource resource=prop.eResource();
          String itemInfo=null;
          if (resource != null) {
            IPath path=URIHelper.convert(resource.getURI());
            if (path != null) {
              itemInfo=path.toPortableString();
            }
          }
          if (itemInfo == null) {
            itemInfo=prop.toString();
          }
          appendToLogFile(project,""String_Node_Str"" + itemInfo + ""String_Node_Str"");
        }
        appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
      }
      log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
    }
  }
}
if (object instanceof RepositoryObject) {
  ((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
if (mgTask == null && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
  status=task.execute(project);
  task.setStatus(status);
}
 else {
  status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
  if (!isMigrationOnNewProject()) {
    doneThisSession.add(task);
  }
case SUCCESS_NO_ALERT:
if (!isMigrationOnNewProject()) {
  log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
  appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
case NOTHING_TO_DO:
if (!isMigrationOnNewProject() && task.getStatus() == ExecutionResult.NOTHING_TO_DO) {
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
if (!isMigrationOnNewProject()) {
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
break;
case FAILURE:
doneThisSession.add(task);
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
doneThisSession.add(task);
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
done.add(MigrationUtil.convertMigrationTask(task));
needSave=true;
}
}
 else {
for (IProjectMigrationTask task : toExecute) {
task.setStatus(ExecutionResult.NOTHING_TO_DO);
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
if (!isMigrationOnNewProject()) {
RelationshipItemBuilder.getInstance().saveRelations();
}
}
 catch (PersistenceException e) {
throw new CoreException(new Status(Status.ERROR,""String_Node_Str"",e.getMessage(),e));
}
if (!isMigrationOnNewProject() && !beforeLogon) {
appendToLogFile(project,""String_Node_Str"");
}
}
}
;
try {
IWorkspace workspace1=ResourcesPlugin.getWorkspace();
ISchedulingRule schedulingRule=workspace1.getRoot();
workspace1.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitorWrap);
}
 catch (CoreException e) {
throw new PersistenceException(e);
}
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
if (!beforeLogon) {
setMigrationOnNewProject(false);
}
}","@Override public void executeMigrationTasksForLogon(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<MigrationTask> done=new ArrayList<MigrationTask>(project.getEmfProject().getMigrationTask());
  if (beforeLogon) {
    boolean isNewProject=project.getEmfProject().getProductVersion() == null ? true : false;
    setMigrationOnNewProject(beforeLogon && isNewProject && done.isEmpty());
  }
  sortMigrationTasks(toExecute);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
    if (mgTask == null && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon && (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion()) || nbMigrationsToDo > 0)) {
    MigrationUtil.removeMigrationTaskById(done,RELATION_TASK);
    RelationshipItemBuilder.getInstance().unloadRelations();
    nbMigrationsToDo++;
  }
  if (nbMigrationsToDo == 0) {
    return;
  }
  MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    @Override public void run() throws PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          if (!isMigrationOnNewProject() && beforeLogon) {
            appendToLogFile(project,""String_Node_Str"" + project.getLabel() + ""String_Node_Str"");
          }
          try {
            boolean needSave=false;
            if (!isMigrationOnNewProject()) {
              if (!beforeLogon) {
                ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
                Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
                  @Override public int compare(                  ERepositoryObjectType arg0,                  ERepositoryObjectType arg1){
                    if (arg0 == ERepositoryObjectType.PROCESS) {
                      return 1;
                    }
                    if (arg0 == ERepositoryObjectType.JOBLET) {
                      return 1;
                    }
                    return 0;
                  }
                }
);
                for (                ERepositoryObjectType type : types) {
                  if (!type.isResourceItem()) {
                    continue;
                  }
                  List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
                  for (                  IRepositoryViewObject object : objects) {
                    Item item=object.getProperty().getItem();
                    monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
                    boolean hadFailed=false;
                    subProgressMonitor.worked(1);
                    for (                    IProjectMigrationTask task : toExecute) {
                      if (monitorWrap.isCanceled()) {
                        throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
                      }
                      MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
                      if (mgTask == null && !task.isDeprecated()) {
                        try {
                          ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                            if (task.getStatus() != ExecutionResult.FAILURE) {
                              task.setStatus(status);
                            }
case SUCCESS_NO_ALERT:
                          if (task.getStatus() != ExecutionResult.FAILURE) {
                            task.setStatus(status);
                          }
case NOTHING_TO_DO:
                        if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                          task.setStatus(status);
                        }
                      break;
case SKIPPED:
                    if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                      task.setStatus(status);
                    }
                  break;
case FAILURE:
                task.setStatus(status);
default :
              task.setStatus(status);
            if (!isMigrationOnNewProject()) {
              if (!hadFailed) {
                hadFailed=true;
                Property prop=object.getProperty();
                Resource resource=prop.eResource();
                String itemInfo=null;
                if (resource != null) {
                  IPath path=URIHelper.convert(resource.getURI());
                  if (path != null) {
                    itemInfo=path.toPortableString();
                  }
                }
                if (itemInfo == null) {
                  itemInfo=prop.toString();
                }
                appendToLogFile(project,""String_Node_Str"" + itemInfo + ""String_Node_Str"");
              }
              appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
            }
          break;
      }
    }
 catch (    Exception e) {
      doneThisSession.add(task);
      ExceptionHandler.process(e);
      if (!isMigrationOnNewProject()) {
        if (!hadFailed) {
          hadFailed=true;
          Property prop=object.getProperty();
          Resource resource=prop.eResource();
          String itemInfo=null;
          if (resource != null) {
            IPath path=URIHelper.convert(resource.getURI());
            if (path != null) {
              itemInfo=path.toPortableString();
            }
          }
          if (itemInfo == null) {
            itemInfo=prop.toString();
          }
          appendToLogFile(project,""String_Node_Str"" + itemInfo + ""String_Node_Str"");
        }
        appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
      }
      log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
    }
  }
}
if (object instanceof RepositoryObject) {
  ((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
if (mgTask == null && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
  status=task.execute(project);
  task.setStatus(status);
}
 else {
  status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
  if (!isMigrationOnNewProject()) {
    doneThisSession.add(task);
  }
case SUCCESS_NO_ALERT:
if (!isMigrationOnNewProject()) {
  log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
  appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
case NOTHING_TO_DO:
if (!isMigrationOnNewProject() && task.getStatus() == ExecutionResult.NOTHING_TO_DO) {
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
if (!isMigrationOnNewProject()) {
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
break;
case FAILURE:
doneThisSession.add(task);
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
doneThisSession.add(task);
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
}
 else {
for (IProjectMigrationTask task : toExecute) {
task.setStatus(ExecutionResult.NOTHING_TO_DO);
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
if (!isMigrationOnNewProject()) {
RelationshipItemBuilder.getInstance().saveRelations();
}
}
 catch (PersistenceException e) {
throw new CoreException(new Status(Status.ERROR,""String_Node_Str"",e.getMessage(),e));
}
if (!isMigrationOnNewProject() && !beforeLogon) {
appendToLogFile(project,""String_Node_Str"");
}
}
}
;
try {
IWorkspace workspace1=ResourcesPlugin.getWorkspace();
ISchedulingRule schedulingRule=workspace1.getRoot();
workspace1.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitorWrap);
}
 catch (CoreException e) {
throw new PersistenceException(e);
}
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
if (!beforeLogon) {
setMigrationOnNewProject(false);
}
}",0.9949064550886472
127426,"@Override public ResultSet getTables(String catalog,String schema,String tableNamePattern,String[] types) throws SQLException {
  if (StringUtils.isBlank(catalog)) {
    catalog=HIVE_SCHEMA_DEFAULT;
  }
  ClassLoader currCL=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(classLoader);
  EmbeddedHiveResultSet tableResultSet=new EmbeddedHiveResultSet();
  tableResultSet.setMetadata(TABLE_META);
  List<String[]> list=new ArrayList<String[]>();
  tableResultSet.setData(list);
  if (hiveObject != null) {
    try {
      Class hiveClass=hiveObject.getClass();
      Method method=hiveClass.getDeclaredMethod(""String_Node_Str"");
      Object hiveConf=method.invoke(hiveObject);
      Class hiveConfClass=hiveConf.getClass();
      Class confVarClass=null;
      for (      Class curClass : hiveConfClass.getClasses()) {
        if (curClass.getSimpleName().equals(""String_Node_Str"")) {
          confVarClass=curClass;
          break;
        }
      }
      if (confVarClass != null) {
        Object confVar=null;
        for (        Object curConfVar : confVarClass.getEnumConstants()) {
          if (curConfVar.toString().equals(""String_Node_Str"")) {
            confVar=curConfVar;
            break;
          }
        }
        if (confVar != null) {
          Method setIntVarMethod=hiveConfClass.getDeclaredMethod(""String_Node_Str"",confVarClass,int.class);
          int timeout=15;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService designerService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            timeout=designerService.getDBConnectionTimeout();
          }
          setIntVarMethod.invoke(hiveConf,confVar,timeout);
        }
      }
      Object tables=ReflectionUtils.invokeMethod(hiveObject,""String_Node_Str"",new Object[]{catalog});
      if (tables instanceof List) {
        List<String> tableList=(List<String>)tables;
        for (        String tableName : tableList) {
          String tableType=getTableType(catalog,tableName);
          if (tableType != null) {
            String[] array=new String[]{""String_Node_Str"",catalog,tableName,tableType,""String_Node_Str""};
            list.add(array);
          }
        }
      }
    }
 catch (    Exception e) {
      throw new SQLException(e);
    }
 finally {
      Thread.currentThread().setContextClassLoader(currCL);
    }
  }
  return tableResultSet;
}","@Override public ResultSet getTables(String catalog,String schema,String tableNamePattern,String[] types) throws SQLException {
  String hiveCat=catalog;
  if (StringUtils.isBlank(hiveCat)) {
    hiveCat=HIVE_SCHEMA_DEFAULT;
  }
  String[] hiveTypes=types;
  if (hiveTypes == null) {
    hiveTypes=new String[0];
  }
  ClassLoader currCL=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(classLoader);
  EmbeddedHiveResultSet tableResultSet=new EmbeddedHiveResultSet();
  tableResultSet.setMetadata(TABLE_META);
  List<String[]> list=new ArrayList<String[]>();
  tableResultSet.setData(list);
  if (hiveObject != null) {
    try {
      Class hiveClass=hiveObject.getClass();
      Method method=hiveClass.getDeclaredMethod(""String_Node_Str"");
      Object hiveConf=method.invoke(hiveObject);
      Class hiveConfClass=hiveConf.getClass();
      Class confVarClass=null;
      for (      Class curClass : hiveConfClass.getClasses()) {
        if (curClass.getSimpleName().equals(""String_Node_Str"")) {
          confVarClass=curClass;
          break;
        }
      }
      if (confVarClass != null) {
        Object confVar=null;
        for (        Object curConfVar : confVarClass.getEnumConstants()) {
          if (curConfVar.toString().equals(""String_Node_Str"")) {
            confVar=curConfVar;
            break;
          }
        }
        if (confVar != null) {
          Method setIntVarMethod=hiveConfClass.getDeclaredMethod(""String_Node_Str"",confVarClass,int.class);
          int timeout=15;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService designerService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            timeout=designerService.getDBConnectionTimeout();
          }
          setIntVarMethod.invoke(hiveConf,confVar,timeout);
        }
      }
      Object tables=ReflectionUtils.invokeMethod(hiveObject,""String_Node_Str"",new Object[]{hiveCat});
      if (tables instanceof List) {
        List<String> tableList=(List<String>)tables;
        for (        String tableName : tableList) {
          String tableType=getTableType(hiveCat,tableName);
          if (tableType != null && ArrayUtils.contains(hiveTypes,tableType)) {
            String[] array=new String[]{""String_Node_Str"",hiveCat,tableName,tableType,""String_Node_Str""};
            list.add(array);
          }
        }
      }
    }
 catch (    Exception e) {
      throw new SQLException(e);
    }
 finally {
      Thread.currentThread().setContextClassLoader(currCL);
    }
  }
  return tableResultSet;
}",0.9561875480399692
127427,"/** 
 * addButtonControls.
 */
@Override protected void addUtilsButtonListeners(){
  tableCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_TABLE,tableCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_EXTERNAL_TABLE,tableCheck.getSelection());
    }
  }
);
  viewCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_VIEW,viewCheck.getSelection());
    }
  }
);
  synonymCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_SYNONYM,synonymCheck.getSelection());
    }
  }
);
  if (isOracle()) {
    publicSynonymCheck.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        getTableInfoParameters().changeType(ETableTypes.TABLETYPE_ALL_SYNONYM,publicSynonymCheck.getSelection());
        ExtractMetaDataUtils.setUseAllSynonyms(publicSynonymCheck.getSelection());
        if (publicSynonymCheck.getSelection()) {
          tableCheck.setEnabled(false);
          viewCheck.setEnabled(false);
          synonymCheck.setEnabled(false);
        }
 else {
          tableCheck.setEnabled(true);
          viewCheck.setEnabled(true);
          synonymCheck.setEnabled(true);
        }
      }
    }
);
  }
  SelectionAdapter selectionAdapter=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      addName=""String_Node_Str"";
      Dialog dialog=new Dialog(getShell()){
        Text addText;
        @Override protected Control createDialogArea(        Composite parent){
          Composite createDialogArea=(Composite)super.createDialogArea(parent);
          Label addLabel=new Label(createDialogArea,SWT.NONE);
          addLabel.setText(Messages.getString(""String_Node_Str""));
          addText=new Text(createDialogArea,SWT.BORDER);
          GridData gridData=new GridData(GridData.FILL_BOTH);
          addText.setLayoutData(gridData);
          addText.setText(addName);
          return createDialogArea;
        }
        @Override protected void configureShell(        Shell newShell){
          super.configureShell(newShell);
          newShell.setText(Messages.getString(""String_Node_Str""));
        }
        @Override protected void okPressed(){
          addName=addText.getText();
          super.okPressed();
        }
      }
;
      if (dialog.open() == Dialog.OK) {
        nameFilter.add(addName,0);
        nameFilter.select(0);
        removeButton.setEnabled(true);
        editButton.setEnabled(true);
      }
    }
  }
;
  newButton.addSelectionListener(selectionAdapter);
  selectionAdapter=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      final int index=nameFilter.getSelectionIndex();
      if (nameFilter.getSelection().length > 0) {
        addName=nameFilter.getSelection()[0];
      }
      Dialog dialog=new Dialog(getShell()){
        Text addText;
        @Override protected Control createDialogArea(        Composite parent){
          Composite createDialogArea=(Composite)super.createDialogArea(parent);
          Label addLabel=new Label(createDialogArea,SWT.NONE);
          addLabel.setText(Messages.getString(""String_Node_Str""));
          addText=new Text(createDialogArea,SWT.BORDER);
          GridData gridData=new GridData(GridData.FILL_BOTH);
          addText.setLayoutData(gridData);
          addText.setText(addName);
          return createDialogArea;
        }
        @Override protected void configureShell(        Shell newShell){
          super.configureShell(newShell);
          newShell.setText(Messages.getString(""String_Node_Str""));
        }
        @Override protected void okPressed(){
          addName=addText.getText();
          super.okPressed();
        }
      }
;
      if (dialog.open() == Dialog.OK) {
        nameFilter.setItem(index,addName);
        nameFilter.select(index);
      }
    }
  }
;
  editButton.addSelectionListener(selectionAdapter);
  selectionAdapter=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (nameFilter.getSelection().length > 0) {
        addName=nameFilter.getSelection()[0];
        nameFilter.remove(addName);
      }
    }
  }
;
  removeButton.addSelectionListener(selectionAdapter);
}","/** 
 * addButtonControls.
 */
@Override protected void addUtilsButtonListeners(){
  tableCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_TABLE,tableCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_EXTERNAL_TABLE,tableCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.EXTERNAL_TABLE,tableCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.MANAGED_TABLE,tableCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.INDEX_TABLE,tableCheck.getSelection());
    }
  }
);
  viewCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_VIEW,viewCheck.getSelection());
      getTableInfoParameters().changeType(ETableTypes.VIRTUAL_VIEW,viewCheck.getSelection());
    }
  }
);
  synonymCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getTableInfoParameters().changeType(ETableTypes.TABLETYPE_SYNONYM,synonymCheck.getSelection());
    }
  }
);
  if (isOracle()) {
    publicSynonymCheck.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        getTableInfoParameters().changeType(ETableTypes.TABLETYPE_ALL_SYNONYM,publicSynonymCheck.getSelection());
        ExtractMetaDataUtils.setUseAllSynonyms(publicSynonymCheck.getSelection());
        if (publicSynonymCheck.getSelection()) {
          tableCheck.setEnabled(false);
          viewCheck.setEnabled(false);
          synonymCheck.setEnabled(false);
        }
 else {
          tableCheck.setEnabled(true);
          viewCheck.setEnabled(true);
          synonymCheck.setEnabled(true);
        }
      }
    }
);
  }
  SelectionAdapter selectionAdapter=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      addName=""String_Node_Str"";
      Dialog dialog=new Dialog(getShell()){
        Text addText;
        @Override protected Control createDialogArea(        Composite parent){
          Composite createDialogArea=(Composite)super.createDialogArea(parent);
          Label addLabel=new Label(createDialogArea,SWT.NONE);
          addLabel.setText(Messages.getString(""String_Node_Str""));
          addText=new Text(createDialogArea,SWT.BORDER);
          GridData gridData=new GridData(GridData.FILL_BOTH);
          addText.setLayoutData(gridData);
          addText.setText(addName);
          return createDialogArea;
        }
        @Override protected void configureShell(        Shell newShell){
          super.configureShell(newShell);
          newShell.setText(Messages.getString(""String_Node_Str""));
        }
        @Override protected void okPressed(){
          addName=addText.getText();
          super.okPressed();
        }
      }
;
      if (dialog.open() == Dialog.OK) {
        nameFilter.add(addName,0);
        nameFilter.select(0);
        removeButton.setEnabled(true);
        editButton.setEnabled(true);
      }
    }
  }
;
  newButton.addSelectionListener(selectionAdapter);
  selectionAdapter=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      final int index=nameFilter.getSelectionIndex();
      if (nameFilter.getSelection().length > 0) {
        addName=nameFilter.getSelection()[0];
      }
      Dialog dialog=new Dialog(getShell()){
        Text addText;
        @Override protected Control createDialogArea(        Composite parent){
          Composite createDialogArea=(Composite)super.createDialogArea(parent);
          Label addLabel=new Label(createDialogArea,SWT.NONE);
          addLabel.setText(Messages.getString(""String_Node_Str""));
          addText=new Text(createDialogArea,SWT.BORDER);
          GridData gridData=new GridData(GridData.FILL_BOTH);
          addText.setLayoutData(gridData);
          addText.setText(addName);
          return createDialogArea;
        }
        @Override protected void configureShell(        Shell newShell){
          super.configureShell(newShell);
          newShell.setText(Messages.getString(""String_Node_Str""));
        }
        @Override protected void okPressed(){
          addName=addText.getText();
          super.okPressed();
        }
      }
;
      if (dialog.open() == Dialog.OK) {
        nameFilter.setItem(index,addName);
        nameFilter.select(index);
      }
    }
  }
;
  editButton.addSelectionListener(selectionAdapter);
  selectionAdapter=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (nameFilter.getSelection().length > 0) {
        addName=nameFilter.getSelection()[0];
        nameFilter.remove(addName);
      }
    }
  }
;
  removeButton.addSelectionListener(selectionAdapter);
}",0.960300093779306
127428,"/** 
 * Initialize value, forceFocus first field for right Click (new Table).
 */
@Override public void initialize(){
  getTableInfoParameters().setSqlFiter(sqlFilter.getText());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_TABLE,tableCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_EXTERNAL_TABLE,tableCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_VIEW,viewCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_SYNONYM,synonymCheck.getSelection());
  if (HiveConnectionManager.getInstance().isCDHHive2(metadataconnection)) {
    getTableInfoParameters().changeType(ETableTypes.EXTERNAL_TABLE,tableCheck.getSelection());
    getTableInfoParameters().changeType(ETableTypes.MANAGED_TABLE,tableCheck.getSelection());
  }
  if (isOracle()) {
    getTableInfoParameters().changeType(ETableTypes.TABLETYPE_ALL_SYNONYM,publicSynonymCheck.getSelection());
  }
  switchFilter();
  IDBMetadataProviderObject providerObjectByDbType=ExtractMetaDataFromDataBase.getProviderObjectByDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider() && !providerObjectByDbType.isSupportJDBC()) {
    disableAllJDBCControls();
  }
}","/** 
 * Initialize value, forceFocus first field for right Click (new Table).
 */
@Override public void initialize(){
  getTableInfoParameters().setSqlFiter(sqlFilter.getText());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_TABLE,tableCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_EXTERNAL_TABLE,tableCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_VIEW,viewCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_SYNONYM,synonymCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.EXTERNAL_TABLE,tableCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.MANAGED_TABLE,tableCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.INDEX_TABLE,tableCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.VIRTUAL_VIEW,viewCheck.getSelection());
  if (isOracle()) {
    getTableInfoParameters().changeType(ETableTypes.TABLETYPE_ALL_SYNONYM,publicSynonymCheck.getSelection());
  }
  switchFilter();
  IDBMetadataProviderObject providerObjectByDbType=ExtractMetaDataFromDataBase.getProviderObjectByDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider() && !providerObjectByDbType.isSupportJDBC()) {
    disableAllJDBCControls();
  }
}",0.9011494252873564
127429,"private void fillDbUrlMap(){
  supportDBUrlMap.put(SupportDBUrlType.ODBCDEFAULTURL.getDBKey(),SupportDBUrlType.ODBCDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.MYSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MYSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.ORACLEWITHSIDDEFAULTURL.getDBKey(),SupportDBUrlType.ORACLEWITHSIDDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL.getDBKey(),SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.MSSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MSSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.MSSQL2008URL.getDBKey(),SupportDBUrlType.MSSQL2008URL);
  supportDBUrlMap.put(SupportDBUrlType.DB2DEFAULTURL.getDBKey(),SupportDBUrlType.DB2DEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.DB2ZOSDEFAULTURL.getDBKey(),SupportDBUrlType.DB2ZOSDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.POSTGRESQLEFAULTURL.getDBKey(),SupportDBUrlType.POSTGRESQLEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.SYBASEDEFAULTURL.getDBKey(),SupportDBUrlType.SYBASEDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.INGRESDEFAULTURL.getDBKey(),SupportDBUrlType.INGRESDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.INFORMIXDEFAULTURL.getDBKey(),SupportDBUrlType.INFORMIXDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.SQLITE3DEFAULTURL.getDBKey(),SupportDBUrlType.SQLITE3DEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.GENERICJDBCDEFAULTURL.getDBKey(),SupportDBUrlType.GENERICJDBCDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.TERADATADEFAULTURL.getDBKey(),SupportDBUrlType.TERADATADEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.AS400DEFAULTURL.getDBKey(),SupportDBUrlType.AS400DEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.MDM.getDBKey(),SupportDBUrlType.MDM);
  supportDBUrlMap.put(SupportDBUrlType.NETEZZADEFAULTURL.getDBKey(),SupportDBUrlType.NETEZZADEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.HIVEDEFAULTURL.getDBKey(),SupportDBUrlType.HIVEDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.ODBCDEFAULTURL.getDbDriver(),SupportDBUrlType.ODBCDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.MYSQLDEFAULTURL.getDbDriver(),SupportDBUrlType.MYSQLDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.ORACLEWITHSIDDEFAULTURL.getDbDriver(),SupportDBUrlType.ORACLEWITHSIDDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL.getDbDriver(),SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.MSSQLDEFAULTURL.getDbDriver(),SupportDBUrlType.MSSQLDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.MSSQL2008URL.getDbDriver(),SupportDBUrlType.MSSQL2008URL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.DB2DEFAULTURL.getDbDriver(),SupportDBUrlType.DB2DEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.DB2ZOSDEFAULTURL.getDbDriver(),SupportDBUrlType.DB2ZOSDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.POSTGRESQLEFAULTURL.getDbDriver(),SupportDBUrlType.POSTGRESQLEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.SYBASEDEFAULTURL.getDbDriver(),SupportDBUrlType.SYBASEDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.INGRESDEFAULTURL.getDbDriver(),SupportDBUrlType.INGRESDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.INFORMIXDEFAULTURL.getDbDriver(),SupportDBUrlType.INFORMIXDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.SQLITE3DEFAULTURL.getDbDriver(),SupportDBUrlType.SQLITE3DEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.GENERICJDBCDEFAULTURL.getDbDriver(),SupportDBUrlType.GENERICJDBCDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.TERADATADEFAULTURL.getDbDriver(),SupportDBUrlType.TERADATADEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.AS400DEFAULTURL.getDbDriver(),SupportDBUrlType.AS400DEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.MDM.getDbDriver(),SupportDBUrlType.MDM);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.NETEZZADEFAULTURL.getDbDriver(),SupportDBUrlType.NETEZZADEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.HIVEDEFAULTURL.getDbDriver(),SupportDBUrlType.HIVEDEFAULTURL);
}","private void fillDbUrlMap(){
  supportDBUrlMap.put(SupportDBUrlType.ODBCDEFAULTURL.getDBKey(),SupportDBUrlType.ODBCDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.MYSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MYSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.ORACLEWITHSIDDEFAULTURL.getDBKey(),SupportDBUrlType.ORACLEWITHSIDDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL.getDBKey(),SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.MSSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MSSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.MSSQL2008URL.getDBKey(),SupportDBUrlType.MSSQL2008URL);
  supportDBUrlMap.put(SupportDBUrlType.DB2DEFAULTURL.getDBKey(),SupportDBUrlType.DB2DEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.DB2ZOSDEFAULTURL.getDBKey(),SupportDBUrlType.DB2ZOSDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.POSTGRESQLEFAULTURL.getDBKey(),SupportDBUrlType.POSTGRESQLEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.SYBASEDEFAULTURL.getDBKey(),SupportDBUrlType.SYBASEDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.INGRESDEFAULTURL.getDBKey(),SupportDBUrlType.INGRESDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.INFORMIXDEFAULTURL.getDBKey(),SupportDBUrlType.INFORMIXDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.SQLITE3DEFAULTURL.getDBKey(),SupportDBUrlType.SQLITE3DEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.GENERICJDBCDEFAULTURL.getDBKey(),SupportDBUrlType.GENERICJDBCDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.TERADATADEFAULTURL.getDBKey(),SupportDBUrlType.TERADATADEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.AS400DEFAULTURL.getDBKey(),SupportDBUrlType.AS400DEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.MDM.getDBKey(),SupportDBUrlType.MDM);
  supportDBUrlMap.put(SupportDBUrlType.NETEZZADEFAULTURL.getDBKey(),SupportDBUrlType.NETEZZADEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.HIVEDEFAULTURL.getDBKey(),SupportDBUrlType.HIVEDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.VERTICA.getDBKey(),SupportDBUrlType.VERTICA);
  supportDBUrlMap.put(SupportDBUrlType.VERTICA2.getDBKey(),SupportDBUrlType.VERTICA2);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.ODBCDEFAULTURL.getDbDriver(),SupportDBUrlType.ODBCDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.MYSQLDEFAULTURL.getDbDriver(),SupportDBUrlType.MYSQLDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.ORACLEWITHSIDDEFAULTURL.getDbDriver(),SupportDBUrlType.ORACLEWITHSIDDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL.getDbDriver(),SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.MSSQLDEFAULTURL.getDbDriver(),SupportDBUrlType.MSSQLDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.MSSQL2008URL.getDbDriver(),SupportDBUrlType.MSSQL2008URL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.DB2DEFAULTURL.getDbDriver(),SupportDBUrlType.DB2DEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.DB2ZOSDEFAULTURL.getDbDriver(),SupportDBUrlType.DB2ZOSDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.POSTGRESQLEFAULTURL.getDbDriver(),SupportDBUrlType.POSTGRESQLEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.SYBASEDEFAULTURL.getDbDriver(),SupportDBUrlType.SYBASEDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.INGRESDEFAULTURL.getDbDriver(),SupportDBUrlType.INGRESDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.INFORMIXDEFAULTURL.getDbDriver(),SupportDBUrlType.INFORMIXDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.SQLITE3DEFAULTURL.getDbDriver(),SupportDBUrlType.SQLITE3DEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.GENERICJDBCDEFAULTURL.getDbDriver(),SupportDBUrlType.GENERICJDBCDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.TERADATADEFAULTURL.getDbDriver(),SupportDBUrlType.TERADATADEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.AS400DEFAULTURL.getDbDriver(),SupportDBUrlType.AS400DEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.MDM.getDbDriver(),SupportDBUrlType.MDM);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.NETEZZADEFAULTURL.getDbDriver(),SupportDBUrlType.NETEZZADEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.HIVEDEFAULTURL.getDbDriver(),SupportDBUrlType.HIVEDEFAULTURL);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.VERTICA.getDbDriver(),SupportDBUrlType.VERTICA);
  supportDiverNameDBUrlMap.put(SupportDBUrlType.VERTICA2.getDbDriver(),SupportDBUrlType.VERTICA2);
}",0.9581056466302368
127430,"@Override public void moveFolder(final ERepositoryObjectType type,final IPath sourcePath,final IPath targetPath) throws PersistenceException {
  if (type == null || RepositoryConstants.isSystemFolder(sourcePath.toString()) || RepositoryConstants.isSystemFolder(targetPath.toString())) {
    return;
  }
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toString();
  String completeNewPath;
  if (targetPath.equals(""String_Node_Str"")) {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.lastSegment();
  }
 else {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + (""String_Node_Str"".equals(targetPath.toString()) ? ""String_Node_Str"" : IPath.SEPARATOR + targetPath.toString()) + IPath.SEPARATOR+ sourcePath.lastSegment();
  }
  if (completeNewPath.equals(completeOldPath)) {
    return;
  }
  IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,true);
  FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
  FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
  if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
    IPath path=new Path(sourcePath.toString());
    ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
    emfFolder=folderHelper.getFolder(completeOldPath);
  }
  createFolder(getRepositoryContext().getProject(),type,targetPath,emfFolder.getProperty().getLabel());
  FolderItem newFolder=folderHelper.getFolder(completeNewPath);
  Item[] childrens=(Item[])emfFolder.getChildren().toArray();
  for (  Item children2 : childrens) {
    if (children2 instanceof FolderItem) {
      FolderItem children=(FolderItem)children2;
      moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(emfFolder.getProperty().getLabel()));
    }
 else {
      moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
    }
  }
  List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
  for (  IRepositoryViewObject object : serializableFromFolder) {
    dealTdqResourceMove(project,completeNewPath,object);
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
    for (    Resource resource : affectedResources) {
      IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
      resourceAndPathMap.put(resource,path);
      List<Resource> needSaves=findCrossReference(resource);
      moveResource(resource,path);
      saveCrossReference(needSaves);
    }
    IPath parentPath=getPhysicalProject(project).getFullPath().append(completeNewPath);
    svnMoveResource(affectedResources,parentPath,resourceAndPathMap);
    affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    for (    Resource resource : affectedResources) {
      xmiResourceManager.saveResource(resource);
    }
  }
  deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
  xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
}","@Override public void moveFolder(final ERepositoryObjectType type,final IPath sourcePath,final IPath targetPath) throws PersistenceException {
  if (type == null || RepositoryConstants.isSystemFolder(sourcePath.toString()) || RepositoryConstants.isSystemFolder(targetPath.toString())) {
    return;
  }
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toString();
  String completeNewPath;
  if (targetPath.equals(""String_Node_Str"")) {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.lastSegment();
  }
 else {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + (""String_Node_Str"".equals(targetPath.toString()) ? ""String_Node_Str"" : IPath.SEPARATOR + targetPath.toString()) + IPath.SEPARATOR+ sourcePath.lastSegment();
  }
  if (completeNewPath.equals(completeOldPath)) {
    return;
  }
  IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,true);
  FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
  FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
  if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
    IPath path=new Path(sourcePath.toString());
    ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
    emfFolder=folderHelper.getFolder(completeOldPath);
  }
  createFolder(getRepositoryContext().getProject(),type,targetPath,emfFolder.getProperty().getLabel());
  FolderItem newFolder=folderHelper.getFolder(completeNewPath);
  boolean isDel=emfFolder.getState().isDeleted();
  if (isDel) {
    newFolder.getState().setDeleted(isDel);
  }
  Item[] childrens=(Item[])emfFolder.getChildren().toArray();
  for (  Item children2 : childrens) {
    if (children2 instanceof FolderItem) {
      FolderItem children=(FolderItem)children2;
      moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(emfFolder.getProperty().getLabel()));
    }
 else {
      moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
    }
  }
  List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
  for (  IRepositoryViewObject object : serializableFromFolder) {
    dealTdqResourceMove(project,completeNewPath,object);
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
    for (    Resource resource : affectedResources) {
      IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
      resourceAndPathMap.put(resource,path);
      List<Resource> needSaves=findCrossReference(resource);
      moveResource(resource,path);
      saveCrossReference(needSaves);
    }
    IPath parentPath=getPhysicalProject(project).getFullPath().append(completeNewPath);
    svnMoveResource(affectedResources,parentPath,resourceAndPathMap);
    affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    for (    Resource resource : affectedResources) {
      xmiResourceManager.saveResource(resource);
    }
  }
  deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
  xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
}",0.984005661712668
127431,"private void resetAndRefreshLocal(final String names[]){
  resetModulesNeeded();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final String projectLabel=currentProject.getTechnicalLabel();
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProject eclipseProject=workspace.getRoot().getProject(projectLabel);
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(currentProject,""String_Node_Str""){
      @Override public void run() throws PersistenceException {
        try {
          for (          String name : names) {
            String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
            path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
            File libsTargetFile=new File(path);
            File source=null;
            EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
            String relativePath=jarsToRelative.get(name);
            if (relativePath != null) {
              if (!relativePath.startsWith(""String_Node_Str"")) {
                relativePath=""String_Node_Str"" + relativePath;
              }
              try {
                URI uri=new URI(relativePath);
                URL url=FileLocator.toFileURL(uri.toURL());
                source=new File(url.getFile());
              }
 catch (              URISyntaxException e) {
                CommonExceptionHandler.process(e);
              }
            }
            if (source == null) {
              source=new File(PreferencesUtilities.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
            }
            FilesUtils.copyFile(source,libsTargetFile);
            synJavaLibs(source);
          }
          eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
        }
 catch (        IOException e) {
          ExceptionHandler.process(e);
        }
catch (        CoreException e) {
          ExceptionHandler.process(e);
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    CorePlugin.getDefault().getRepositoryService().getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  }
}","private void resetAndRefreshLocal(final String names[]){
  resetModulesNeeded();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final String projectLabel=currentProject.getTechnicalLabel();
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProject eclipseProject=workspace.getRoot().getProject(projectLabel);
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(currentProject,""String_Node_Str""){
      @Override public void run() throws PersistenceException {
        try {
          for (          String name : names) {
            String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
            path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
            File libsTargetFile=new File(path);
            File source=new File(PreferencesUtilities.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
            FilesUtils.copyFile(source,libsTargetFile);
            synJavaLibs(source);
          }
          eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
        }
 catch (        IOException e) {
          ExceptionHandler.process(e);
        }
catch (        CoreException e) {
          ExceptionHandler.process(e);
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    CorePlugin.getDefault().getRepositoryService().getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  }
}",0.813181367690783
127432,"@Override public void run() throws PersistenceException {
  try {
    for (    String name : names) {
      String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
      path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
      File libsTargetFile=new File(path);
      File source=null;
      EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
      String relativePath=jarsToRelative.get(name);
      if (relativePath != null) {
        if (!relativePath.startsWith(""String_Node_Str"")) {
          relativePath=""String_Node_Str"" + relativePath;
        }
        try {
          URI uri=new URI(relativePath);
          URL url=FileLocator.toFileURL(uri.toURL());
          source=new File(url.getFile());
        }
 catch (        URISyntaxException e) {
          CommonExceptionHandler.process(e);
        }
      }
      if (source == null) {
        source=new File(PreferencesUtilities.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
      }
      FilesUtils.copyFile(source,libsTargetFile);
      synJavaLibs(source);
    }
    eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
  }
catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
}","@Override public void run() throws PersistenceException {
  try {
    for (    String name : names) {
      String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
      path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
      File libsTargetFile=new File(path);
      File source=new File(PreferencesUtilities.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
      FilesUtils.copyFile(source,libsTargetFile);
      synJavaLibs(source);
    }
    eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
  }
catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
}",0.7181500872600349
127433,"@Override protected void run() throws LoginException, PersistenceException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (!monitor.isCanceled()) {
    final ManagerConnection managerConnection=new ManagerConnection();
    DatabaseConnection connection=(DatabaseConnection)item.getConnection();
    IMetadataConnection metadataConnection=ConvertionHelper.convert(connection);
    if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        metadataConnection.setUrl(connection.getURL());
        if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
          JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
        }
      }
 else {
        String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
        metadataConnection.setUrl(genUrl);
      }
    }
    if (connection != null) {
      EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
      Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
      ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
    }
    if (creation) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        try {
          HiveConnectionManager.getInstance().checkConnection(metadataConnection);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        managerConnection.check(metadataConnection);
      }
      ExtractMetaDataUtils.setUseAllSynonyms(false);
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      wizardDialog.setBlockOnOpen(true);
      handleWizard(node,wizardDialog);
    }
 else {
      final boolean skipStep=true;
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      databaseTableWizard.setSkipStep(skipStep);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      handleWizard(node,wizardDialog);
    }
  }
}","@Override protected void run() throws LoginException, PersistenceException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (!monitor.isCanceled()) {
    final ManagerConnection managerConnection=new ManagerConnection();
    DatabaseConnection connection=(DatabaseConnection)item.getConnection();
    String oldContextName=connection.getContextName();
    IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
    String newContextName=connection.getContextName();
    if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
      if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
        Item itemTemp=node.getObject().getProperty().getItem();
        if (itemTemp != null && itemTemp instanceof ConnectionItem) {
          ConnectionItem connItem=(ConnectionItem)itemTemp;
          SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
        }
      }
    }
    if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        metadataConnection.setUrl(connection.getURL());
        if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
          JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
        }
      }
 else {
        String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
        metadataConnection.setUrl(genUrl);
      }
    }
    if (connection != null) {
      EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
      Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
      ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
    }
    if (creation) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        try {
          HiveConnectionManager.getInstance().checkConnection(metadataConnection);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        managerConnection.check(metadataConnection);
      }
      ExtractMetaDataUtils.setUseAllSynonyms(false);
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      wizardDialog.setBlockOnOpen(true);
      handleWizard(node,wizardDialog);
    }
 else {
      final boolean skipStep=true;
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      databaseTableWizard.setSkipStep(skipStep);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      handleWizard(node,wizardDialog);
    }
  }
}",0.9149079177308778
127434,"private void openDatabaseTableWizard(final DatabaseConnectionItem item,final MetadataTable metadataTable,final boolean forceReadOnly,final RepositoryNode node,final boolean creation){
  UIJob job=new UIJob(Messages.getString(""String_Node_Str"")){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      String name=""String_Node_Str"" + getText();
      RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
        @Override protected void run() throws LoginException, PersistenceException {
          monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
          if (!monitor.isCanceled()) {
            final ManagerConnection managerConnection=new ManagerConnection();
            DatabaseConnection connection=(DatabaseConnection)item.getConnection();
            IMetadataConnection metadataConnection=ConvertionHelper.convert(connection);
            if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                metadataConnection.setUrl(connection.getURL());
                if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
                  JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
                }
              }
 else {
                String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
                metadataConnection.setUrl(genUrl);
              }
            }
            if (connection != null) {
              EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
              Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
              ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
            }
            if (creation) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                try {
                  HiveConnectionManager.getInstance().checkConnection(metadataConnection);
                }
 catch (                Exception e) {
                  e.printStackTrace();
                }
              }
 else {
                managerConnection.check(metadataConnection);
              }
              ExtractMetaDataUtils.setUseAllSynonyms(false);
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              wizardDialog.setBlockOnOpen(true);
              handleWizard(node,wizardDialog);
            }
 else {
              final boolean skipStep=true;
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              databaseTableWizard.setSkipStep(skipStep);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              handleWizard(node,wizardDialog);
            }
          }
        }
      }
;
      repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(true);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      if (!event.getResult().isOK()) {
        log.error(event.getResult().getMessage(),event.getResult().getException());
      }
    }
  }
);
  job.schedule();
}","private void openDatabaseTableWizard(final DatabaseConnectionItem item,final MetadataTable metadataTable,final boolean forceReadOnly,final RepositoryNode node,final boolean creation){
  UIJob job=new UIJob(Messages.getString(""String_Node_Str"")){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      String name=""String_Node_Str"" + getText();
      RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
        @Override protected void run() throws LoginException, PersistenceException {
          monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
          if (!monitor.isCanceled()) {
            final ManagerConnection managerConnection=new ManagerConnection();
            DatabaseConnection connection=(DatabaseConnection)item.getConnection();
            String oldContextName=connection.getContextName();
            IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
            String newContextName=connection.getContextName();
            if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
              if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
                Item itemTemp=node.getObject().getProperty().getItem();
                if (itemTemp != null && itemTemp instanceof ConnectionItem) {
                  ConnectionItem connItem=(ConnectionItem)itemTemp;
                  SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
                }
              }
            }
            if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                metadataConnection.setUrl(connection.getURL());
                if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
                  JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
                }
              }
 else {
                String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
                metadataConnection.setUrl(genUrl);
              }
            }
            if (connection != null) {
              EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
              Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
              ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
            }
            if (creation) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                try {
                  HiveConnectionManager.getInstance().checkConnection(metadataConnection);
                }
 catch (                Exception e) {
                  e.printStackTrace();
                }
              }
 else {
                managerConnection.check(metadataConnection);
              }
              ExtractMetaDataUtils.setUseAllSynonyms(false);
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              wizardDialog.setBlockOnOpen(true);
              handleWizard(node,wizardDialog);
            }
 else {
              final boolean skipStep=true;
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              databaseTableWizard.setSkipStep(skipStep);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              handleWizard(node,wizardDialog);
            }
          }
        }
      }
;
      repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(true);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      if (!event.getResult().isOK()) {
        log.error(event.getResult().getMessage(),event.getResult().getException());
      }
    }
  }
);
  job.schedule();
}",0.932064449260341
127435,"@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  String name=""String_Node_Str"" + getText();
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
    @Override protected void run() throws LoginException, PersistenceException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      if (!monitor.isCanceled()) {
        final ManagerConnection managerConnection=new ManagerConnection();
        DatabaseConnection connection=(DatabaseConnection)item.getConnection();
        IMetadataConnection metadataConnection=ConvertionHelper.convert(connection);
        if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            metadataConnection.setUrl(connection.getURL());
            if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
              JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
            }
          }
 else {
            String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
            metadataConnection.setUrl(genUrl);
          }
        }
        if (connection != null) {
          EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
          Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
          ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (creation) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            try {
              HiveConnectionManager.getInstance().checkConnection(metadataConnection);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            managerConnection.check(metadataConnection);
          }
          ExtractMetaDataUtils.setUseAllSynonyms(false);
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          wizardDialog.setBlockOnOpen(true);
          handleWizard(node,wizardDialog);
        }
 else {
          final boolean skipStep=true;
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          databaseTableWizard.setSkipStep(skipStep);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          handleWizard(node,wizardDialog);
        }
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
  IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  monitor.done();
  return Status.OK_STATUS;
}","@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  String name=""String_Node_Str"" + getText();
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
    @Override protected void run() throws LoginException, PersistenceException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      if (!monitor.isCanceled()) {
        final ManagerConnection managerConnection=new ManagerConnection();
        DatabaseConnection connection=(DatabaseConnection)item.getConnection();
        String oldContextName=connection.getContextName();
        IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
        String newContextName=connection.getContextName();
        if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
          if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
            Item itemTemp=node.getObject().getProperty().getItem();
            if (itemTemp != null && itemTemp instanceof ConnectionItem) {
              ConnectionItem connItem=(ConnectionItem)itemTemp;
              SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
            }
          }
        }
        if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            metadataConnection.setUrl(connection.getURL());
            if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
              JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
            }
          }
 else {
            String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
            metadataConnection.setUrl(genUrl);
          }
        }
        if (connection != null) {
          EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
          Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
          ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (creation) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            try {
              HiveConnectionManager.getInstance().checkConnection(metadataConnection);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            managerConnection.check(metadataConnection);
          }
          ExtractMetaDataUtils.setUseAllSynonyms(false);
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          wizardDialog.setBlockOnOpen(true);
          handleWizard(node,wizardDialog);
        }
 else {
          final boolean skipStep=true;
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          databaseTableWizard.setSkipStep(skipStep);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          handleWizard(node,wizardDialog);
        }
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
  IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  monitor.done();
  return Status.OK_STATUS;
}",0.9247359644246804
127436,"protected boolean isUnderDBConnection(RepositoryNode node){
  if (node == null) {
    return false;
  }
  if (node.getType() == ENodeType.SYSTEM_FOLDER && node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CONNECTIONS) {
    return true;
  }
  return isUnderDBConnection(node.getParent());
}","protected boolean isUnderDBConnection(RepositoryNode node){
  if (node == null) {
    return false;
  }
  if ((node.getType() == ENodeType.SYSTEM_FOLDER || node.getType() == ENodeType.STABLE_SYSTEM_FOLDER) && node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CONNECTIONS) {
    return true;
  }
  return isUnderDBConnection(node.getParent());
}",0.9219653179190752
127437,"public Property loadProperty(IResource iResource){
  Property property=null;
  URIConverter theURIConverter=resourceSet.getURIConverter();
  URI propertyUri=URIHelper.convert(iResource.getFullPath());
  URI itemResourceURI=theURIConverter.normalize(getItemResourceURI(propertyUri));
  URI screenshotResourceURI=theURIConverter.normalize(getScreenshotResourceURI(itemResourceURI));
  List<Resource> resources=resourceSet.getResources();
synchronized (resources) {
    for (    Resource res : new ArrayList<Resource>(resources)) {
      if (res != null && res.isLoaded()) {
        URI normalizedURI=theURIConverter.normalize(res.getURI());
        if (propertyUri.equals(normalizedURI)) {
          res.unload();
        }
        if (itemResourceURI.equals(normalizedURI)) {
          res.unload();
        }
        if (screenshotResourceURI.equals(normalizedURI)) {
          res.unload();
        }
      }
    }
  }
  Resource propertyResource=resourceSet.getResource(propertyUri,true);
  property=(Property)EcoreUtil.getObjectByType(propertyResource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
  return property;
}","public Property loadProperty(IResource iResource){
  Property property=null;
  URIConverter theURIConverter=resourceSet.getURIConverter();
  URI propertyUri=URIHelper.convert(iResource.getFullPath());
  URI itemResourceURI=theURIConverter.normalize(getItemResourceURI(propertyUri));
  URI screenshotResourceURI=theURIConverter.normalize(getScreenshotResourceURI(itemResourceURI));
  List<Resource> resources=resourceSet.getResources();
synchronized (resources) {
    for (    Resource res : new ArrayList<Resource>(resources)) {
      if (res != null && res.isLoaded()) {
        URI normalizedURI=theURIConverter.normalize(res.getURI());
        if (propertyUri.equals(normalizedURI)) {
          res.unload();
          resourceSet.getResources().remove(res);
        }
        if (itemResourceURI.equals(normalizedURI)) {
          res.unload();
          resourceSet.getResources().remove(res);
        }
        if (screenshotResourceURI.equals(normalizedURI)) {
          res.unload();
          resourceSet.getResources().remove(res);
        }
      }
    }
  }
  Resource propertyResource=resourceSet.getResource(propertyUri,true);
  property=(Property)EcoreUtil.getObjectByType(propertyResource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
  return property;
}",0.9379139072847682
127438,"/** 
 * return all the referenced projects of current project.
 */
public List<Project> getAllReferencedProjects(){
  allReferencedprojects.clear();
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    if (this.getCurrentProject() == null) {
      return allReferencedprojects;
    }
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
    if (factory != null) {
      List<org.talend.core.model.properties.Project> rProjects=factory.getReferencedProjects(this.getCurrentProject());
      if (rProjects != null) {
        for (        org.talend.core.model.properties.Project p : rProjects) {
          Project project=new Project(p);
          allReferencedprojects.add(project);
          resolveSubRefProject(p);
        }
      }
    }
  }
  return this.allReferencedprojects;
}","/** 
 * return all the referenced projects of current project.
 */
public List<Project> getAllReferencedProjects(){
  allReferencedprojects.clear();
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    if (this.getCurrentProject() == null) {
      return allReferencedprojects;
    }
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
    if (factory != null) {
      List<org.talend.core.model.properties.Project> rProjects=factory.getReferencedProjects(this.getCurrentProject());
      if (rProjects != null) {
        for (        org.talend.core.model.properties.Project p : rProjects) {
          Project project=new Project(p);
          allReferencedprojects.add(project);
          resolveSubRefProject(p);
        }
      }
    }
  }
  return new ArrayList<Project>(this.allReferencedprojects);
}",0.988
127439,"public void cleanTempProLib(){
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  IProject prj=root.getProject(JavaUtils.JAVA_PROJECT_NAME);
  IPath libPath=prj.getLocation().append(JavaUtils.JAVA_LIB_DIRECTORY);
  if (libPath.toFile().exists()) {
    FilesUtils.emptyFolder(libPath.toFile());
  }
}","public void cleanTempProLib(){
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  IProject prj=root.getProject(JavaUtils.JAVA_PROJECT_NAME);
  if (prj.exists()) {
    IPath libPath=prj.getLocation().append(JavaUtils.JAVA_LIB_DIRECTORY);
    if (libPath.toFile().exists()) {
      FilesUtils.emptyFolder(libPath.toFile());
    }
  }
}",0.9486404833836858
127440,"@Override public void moveFolder(final ERepositoryObjectType type,final IPath sourcePath,final IPath targetPath) throws PersistenceException {
  if (type == null || RepositoryConstants.isSystemFolder(sourcePath.toString()) || RepositoryConstants.isSystemFolder(targetPath.toString())) {
    return;
  }
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toString();
  String completeNewPath;
  if (targetPath.equals(""String_Node_Str"")) {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.lastSegment();
  }
 else {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + (""String_Node_Str"".equals(targetPath.toString()) ? ""String_Node_Str"" : IPath.SEPARATOR + targetPath.toString()) + IPath.SEPARATOR+ sourcePath.lastSegment();
  }
  if (completeNewPath.equals(completeOldPath)) {
    return;
  }
  IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,true);
  FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
  FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
  if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
    IPath path=new Path(sourcePath.toString());
    ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
    emfFolder=folderHelper.getFolder(completeOldPath);
  }
  createFolder(getRepositoryContext().getProject(),type,targetPath,emfFolder.getProperty().getLabel());
  FolderItem newFolder=folderHelper.getFolder(completeNewPath);
  Item[] childrens=(Item[])emfFolder.getChildren().toArray();
  for (  Item children2 : childrens) {
    if (children2 instanceof FolderItem) {
      FolderItem children=(FolderItem)children2;
      moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(emfFolder.getProperty().getLabel()));
    }
 else {
      moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
    }
  }
  List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
  for (  IRepositoryViewObject object : serializableFromFolder) {
    dealTdqResourceMove(project,completeNewPath,object);
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
    for (    Resource resource : affectedResources) {
      IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
      resourceAndPathMap.put(resource,path);
      List<Resource> needSaves=findCrossReference(resource);
      moveResource(resource,path);
      saveCrossReference(needSaves);
    }
    IPath parentPath=getPhysicalProject(project).getFullPath().append(completeNewPath);
    svnMoveResource(affectedResources,parentPath,resourceAndPathMap);
    affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    for (    Resource resource : affectedResources) {
      xmiResourceManager.saveResource(resource);
    }
  }
  deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
  xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
}","@Override public void moveFolder(final ERepositoryObjectType type,final IPath sourcePath,final IPath targetPath) throws PersistenceException {
  if (type == null || RepositoryConstants.isSystemFolder(sourcePath.toString()) || RepositoryConstants.isSystemFolder(targetPath.toString())) {
    return;
  }
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toString();
  String completeNewPath;
  if (targetPath.equals(""String_Node_Str"")) {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.lastSegment();
  }
 else {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + (""String_Node_Str"".equals(targetPath.toString()) ? ""String_Node_Str"" : IPath.SEPARATOR + targetPath.toString()) + IPath.SEPARATOR+ sourcePath.lastSegment();
  }
  if (completeNewPath.equals(completeOldPath)) {
    return;
  }
  IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,true);
  FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
  FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
  if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
    IPath path=new Path(sourcePath.toString());
    ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
    emfFolder=folderHelper.getFolder(completeOldPath);
  }
  createFolder(getRepositoryContext().getProject(),type,targetPath,emfFolder.getProperty().getLabel());
  FolderItem newFolder=folderHelper.getFolder(completeNewPath);
  boolean isDel=emfFolder.getState().isDeleted();
  if (isDel) {
    newFolder.getState().setDeleted(isDel);
  }
  Item[] childrens=(Item[])emfFolder.getChildren().toArray();
  for (  Item children2 : childrens) {
    if (children2 instanceof FolderItem) {
      FolderItem children=(FolderItem)children2;
      moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(emfFolder.getProperty().getLabel()));
    }
 else {
      moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
    }
  }
  List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
  for (  IRepositoryViewObject object : serializableFromFolder) {
    dealTdqResourceMove(project,completeNewPath,object);
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
    for (    Resource resource : affectedResources) {
      IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
      resourceAndPathMap.put(resource,path);
      List<Resource> needSaves=findCrossReference(resource);
      moveResource(resource,path);
      saveCrossReference(needSaves);
    }
    IPath parentPath=getPhysicalProject(project).getFullPath().append(completeNewPath);
    svnMoveResource(affectedResources,parentPath,resourceAndPathMap);
    affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    for (    Resource resource : affectedResources) {
      xmiResourceManager.saveResource(resource);
    }
  }
  deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
  xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
}",0.984005661712668
127441,"/** 
 * Method ""unloadResource"" unload and remove the specification resource from the resource set. MOD mzhao
 * @param uriString the uri sting of resource.
 */
public void unloadResource(String uriString){
  List<Resource> resources=new ArrayList<Resource>(getResourceSet().getResources());
  for (  Resource res : resources) {
    if (res != null && uriString.equals(res.getURI().toString())) {
      res.unload();
      getResourceSet().getResources().remove(res);
    }
  }
}","/** 
 * Method ""unloadResource"" unload and remove the specification resource from the resource set. MOD mzhao
 * @param uriString the uri sting of resource.
 */
public void unloadResource(String uriString){
  List<Resource> resources=getResourceSet().getResources();
synchronized (resources) {
    List<Resource> toRemove=new ArrayList<Resource>();
    for (    Resource res : resources) {
      if (res != null && uriString.equals(res.getURI().toString())) {
        res.unload();
        toRemove.add(res);
      }
    }
    resources.removeAll(toRemove);
  }
}",0.7965451055662188
127442,"public Property loadProperty(IResource iResource){
  Property property=null;
  URIConverter theURIConverter=resourceSet.getURIConverter();
  URI propertyUri=URIHelper.convert(iResource.getFullPath());
  URI itemResourceURI=theURIConverter.normalize(getItemResourceURI(propertyUri));
  URI screenshotResourceURI=theURIConverter.normalize(getScreenshotResourceURI(itemResourceURI));
  List<Resource> resources=resourceSet.getResources();
synchronized (resources) {
    for (    Resource res : new ArrayList<Resource>(resources)) {
      if (res != null && res.isLoaded()) {
        URI normalizedURI=theURIConverter.normalize(res.getURI());
        if (propertyUri.equals(normalizedURI)) {
          res.unload();
          resourceSet.getResources().remove(res);
        }
        if (itemResourceURI.equals(normalizedURI)) {
          res.unload();
          resourceSet.getResources().remove(res);
        }
        if (screenshotResourceURI.equals(normalizedURI)) {
          res.unload();
          resourceSet.getResources().remove(res);
        }
      }
    }
  }
  Resource propertyResource=resourceSet.getResource(propertyUri,true);
  property=(Property)EcoreUtil.getObjectByType(propertyResource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
  return property;
}","public Property loadProperty(IResource iResource){
  Property property=null;
  URIConverter theURIConverter=resourceSet.getURIConverter();
  URI propertyUri=URIHelper.convert(iResource.getFullPath());
  URI itemResourceURI=theURIConverter.normalize(getItemResourceURI(propertyUri));
  URI screenshotResourceURI=theURIConverter.normalize(getScreenshotResourceURI(itemResourceURI));
  List<Resource> resources=resourceSet.getResources();
synchronized (resources) {
    for (    Resource res : new ArrayList<Resource>(resources)) {
      if (res != null) {
        URI normalizedURI=theURIConverter.normalize(res.getURI());
        if (propertyUri.equals(normalizedURI)) {
          res.unload();
          resourceSet.getResources().remove(res);
        }
        if (itemResourceURI.equals(normalizedURI)) {
          res.unload();
          resourceSet.getResources().remove(res);
        }
        if (screenshotResourceURI.equals(normalizedURI)) {
          res.unload();
          resourceSet.getResources().remove(res);
        }
      }
    }
  }
  Resource propertyResource=resourceSet.getResource(propertyUri,true);
  property=(Property)EcoreUtil.getObjectByType(propertyResource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
  return property;
}",0.9929356357927788
127443,"public void cleanTempProLib(){
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  IProject prj=root.getProject(JavaUtils.JAVA_PROJECT_NAME);
  IPath libPath=prj.getLocation().append(JavaUtils.JAVA_LIB_DIRECTORY);
  if (libPath.toFile().exists()) {
    FilesUtils.emptyFolder(libPath.toFile());
  }
}","public void cleanTempProLib(){
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  IProject prj=root.getProject(JavaUtils.JAVA_PROJECT_NAME);
  if (prj.exists()) {
    IPath libPath=prj.getLocation().append(JavaUtils.JAVA_LIB_DIRECTORY);
    if (libPath.toFile().exists()) {
      FilesUtils.emptyFolder(libPath.toFile());
    }
  }
}",0.9486404833836858
127444,"protected boolean isUnderDBConnection(RepositoryNode node){
  if (node == null) {
    return false;
  }
  if (node.getType() == ENodeType.SYSTEM_FOLDER && node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CONNECTIONS) {
    return true;
  }
  return isUnderDBConnection(node.getParent());
}","protected boolean isUnderDBConnection(RepositoryNode node){
  if (node == null) {
    return false;
  }
  if ((node.getType() == ENodeType.SYSTEM_FOLDER || node.getType() == ENodeType.STABLE_SYSTEM_FOLDER) && node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CONNECTIONS) {
    return true;
  }
  return isUnderDBConnection(node.getParent());
}",0.9219653179190752
127445,"public static String generateNewQuery(final IMetadataTable repositoryMetadata,final String dbType,final String tableNameWithQuoteIfNeed,final String... realTableName){
  if (repositoryMetadata == null) {
    return ""String_Node_Str"";
  }
  List<IMetadataColumn> metaDataColumnList=repositoryMetadata.getListColumns();
  int index=metaDataColumnList.size();
  if (index == 0) {
    return ""String_Node_Str"";
  }
  isContextQuery=false;
  if (isContext(tableNameWithQuoteIfNeed)) {
    isContextQuery=true;
  }
  String columnsQuery=""String_Node_Str"";
  for (int i=0; i < metaDataColumnList.size(); i++) {
    IMetadataColumn metaDataColumn=metaDataColumnList.get(i);
    String columnName=quoteStringValue(metaDataColumn.getOriginalDbColumnName(),dbType);
    String columnStr=columnName;
    if (dbType != null && (dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()))) {
      columnStr=TalendQuoteUtils.addQuotesIfNotExist(metaDataColumn.getOriginalDbColumnName());
    }
    if (i != index - 1) {
      columnStr=checkAndConcatString(columnStr,TalendTextUtils.declareString(""String_Node_Str"" + SPACE));
    }
    columnStr=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),columnStr);
    columnStr=checkAndConcatString(tableNameWithQuoteIfNeed,columnStr);
    if (""String_Node_Str"".equals(columnsQuery.trim())) {
      columnsQuery=columnStr;
    }
 else {
      columnsQuery=checkAndConcatString(columnsQuery,columnStr);
    }
  }
  boolean isCheck=CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  String query=TalendTextUtils.declareString(""String_Node_Str"");
  if (isContextQuery) {
    String end=ENTER + CON + checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),tableNameWithQuoteIfNeed);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(query,columnsQuery) + end;
  }
 else   if (dbType != null && dbType.equals(EDatabaseTypeName.INFORMIX.getDisplayName())) {
    String declareString=TalendTextUtils.getStringDeclare();
    String end=""String_Node_Str"";
    if (!isCheck) {
      end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0] + declareString);
    }
 else {
      end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0].substring(2,realTableName[0].length() - 2) + declareString);
    }
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
 else   if (dbType != null && dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
    String declareString=TalendTextUtils.getStringDeclare();
    String end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0] + declareString);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
 else {
    String end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),tableNameWithQuoteIfNeed);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
  return query;
}","public static String generateNewQuery(final IMetadataTable repositoryMetadata,final String dbType,final String tableNameWithQuoteIfNeed,final String... realTableName){
  if (repositoryMetadata == null) {
    return ""String_Node_Str"";
  }
  List<IMetadataColumn> metaDataColumnList=repositoryMetadata.getListColumns();
  int index=metaDataColumnList.size();
  if (index == 0) {
    return ""String_Node_Str"";
  }
  isContextQuery=false;
  if (isContext(tableNameWithQuoteIfNeed)) {
    isContextQuery=true;
  }
  String columnsQuery=""String_Node_Str"";
  for (int i=0; i < metaDataColumnList.size(); i++) {
    IMetadataColumn metaDataColumn=metaDataColumnList.get(i);
    String columnName=quoteStringValue(metaDataColumn.getOriginalDbColumnName(),dbType);
    String columnStr=columnName;
    if (dbType != null && Pattern.matches(""String_Node_Str"",metaDataColumn.getOriginalDbColumnName()) && (dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()))) {
      columnStr=TalendQuoteUtils.addQuotesIfNotExist(metaDataColumn.getOriginalDbColumnName());
    }
    if (i != index - 1) {
      columnStr=checkAndConcatString(columnStr,TalendTextUtils.declareString(""String_Node_Str"" + SPACE));
    }
    columnStr=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),columnStr);
    columnStr=checkAndConcatString(tableNameWithQuoteIfNeed,columnStr);
    if (""String_Node_Str"".equals(columnsQuery.trim())) {
      columnsQuery=columnStr;
    }
 else {
      columnsQuery=checkAndConcatString(columnsQuery,columnStr);
    }
  }
  boolean isCheck=CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  String query=TalendTextUtils.declareString(""String_Node_Str"");
  if (isContextQuery) {
    String end=ENTER + CON + checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),tableNameWithQuoteIfNeed);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(query,columnsQuery) + end;
  }
 else   if (dbType != null && dbType.equals(EDatabaseTypeName.INFORMIX.getDisplayName())) {
    String declareString=TalendTextUtils.getStringDeclare();
    String end=""String_Node_Str"";
    if (!isCheck) {
      end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0] + declareString);
    }
 else {
      end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0].substring(2,realTableName[0].length() - 2) + declareString);
    }
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
 else   if (dbType != null && dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
    String declareString=TalendTextUtils.getStringDeclare();
    String end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0] + declareString);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
 else {
    String end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),tableNameWithQuoteIfNeed);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
  return query;
}",0.9879223360342456
127446,"protected void evaluateTextField(){
  if (readOnly) {
    return;
  }
  if (nameText == null || nameText.isDisposed()) {
    return;
  }
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (isKeywords(nameText.getText()) || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(getPropertyLabel(StringUtils.trimToNull(nameText.getText())));
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
    property.setModificationDate(new Date());
  }
  updatePageStatus();
}","protected void evaluateTextField(){
  if (readOnly) {
    return;
  }
  if (nameText == null || nameText.isDisposed()) {
    return;
  }
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameText.getText().startsWith(""String_Node_Str"") || !Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (isKeywords(nameText.getText()) || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(getPropertyLabel(StringUtils.trimToNull(nameText.getText())));
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
    property.setModificationDate(new Date());
  }
  updatePageStatus();
}",0.9817030260380014
127447,"@Override public Folder createFolder(Project project,ERepositoryObjectType type,IPath path,String label,boolean isImportItem) throws PersistenceException {
  if (type.isDQItemType()) {
    checkFileNameAndPath(project,label,RepositoryConstants.TDQ_ALL_ITEM_PATTERN,type,path,true);
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_XML) {
    checkFileNameAndPath(project,label,RepositoryConstants.SIMPLE_FOLDER_PATTERN,type,path,true);
  }
 else   if (type == ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"")) {
    if (org.eclipse.core.runtime.Status.OK_STATUS != ResourcesPlugin.getWorkspace().validateName(label,IResource.FOLDER)) {
      throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",label));
    }
  }
 else {
    checkFileNameAndPath(project,label,RepositoryConstants.FOLDER_PATTERN,type,path,true);
  }
  Folder createFolder=this.repositoryFactoryFromProvider.createFolder(project,type,path,label,isImportItem);
  fireRepositoryPropertyChange(ERepositoryActionName.FOLDER_CREATE.getName(),path,new Object[]{createFolder,type});
  return createFolder;
}","@Override public Folder createFolder(Project project,ERepositoryObjectType type,IPath path,String label,boolean isImportItem) throws PersistenceException {
  if (type.isDQItemType()) {
    checkFileNameAndPath(project,label,RepositoryConstants.TDQ_ALL_ITEM_PATTERN,type,path,true);
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_XML) {
    checkFileNameAndPath(project,label,RepositoryConstants.SIMPLE_FOLDER_PATTERN,type,path,true);
  }
 else   if (type == ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"")) {
    if (org.eclipse.core.runtime.Status.OK_STATUS != ResourcesPlugin.getWorkspace().validateName(label,IResource.FOLDER)) {
      throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",label));
    }
  }
 else {
    checkFileNameAndPath(project,label,RepositoryConstants.FOLDER_PATTERN,type,path,true);
  }
  Folder createFolder=this.repositoryFactoryFromProvider.createFolder(project,type,path,label);
  fireRepositoryPropertyChange(ERepositoryActionName.FOLDER_CREATE.getName(),path,new Object[]{createFolder,type});
  return createFolder;
}",0.9941834451901566
127448,"public static void initializeMetadataTableView(MetadataTableEditorView metaView,INode node,IMetadataTable metadataTable){
  boolean dbComponent=false;
  boolean hasMappingType=false;
  boolean eltComponent=false;
  boolean hasRepositoryDbSchema=false;
  boolean isEBCDIC=false;
  if (node != null && node.getComponent() != null) {
    eltComponent=node.isELTComponent();
    isEBCDIC=node.getComponent().getName().contains(""String_Node_Str"");
    if (node.getComponent().getOriginalFamilyName().startsWith(DATABASE_LABEL) || eltComponent || isEBCDIC) {
      dbComponent=true && !isEBCDIC;
      for (      IElementParameter currentParam : node.getElementParameters()) {
        if (currentParam.getFieldType().equals(EParameterFieldType.MAPPING_TYPE)) {
          metaView.setCurrentDbms((String)currentParam.getValue());
          hasMappingType=true;
        }
      }
      IElementParameter schemaParam=node.getElementParameter(""String_Node_Str"");
      if (!hasMappingType && schemaParam != null) {
        String schemaType=(String)schemaParam.getValue();
        if (schemaType.equals(""String_Node_Str"")) {
          String metaRepositoryName=(String)node.getElementParameter(""String_Node_Str"").getValue();
          Connection connection=MetadataToolHelper.getConnectionFromRepository(metaRepositoryName);
          boolean isDatabaseConnection=connection instanceof DatabaseConnection;
          boolean isGenericSchemaConnection=connection instanceof GenericSchemaConnection;
          if (isDatabaseConnection || isGenericSchemaConnection) {
            hasRepositoryDbSchema=true;
            for (            IMetadataColumn column : metadataTable.getListColumns()) {
              if ((column.getType() == ""String_Node_Str"") || (column.getType() == null)) {
                hasRepositoryDbSchema=false;
              }
            }
            String componentDbType=""String_Node_Str"";
            for (            IElementParameter param : (List<IElementParameter>)node.getElementParameters()) {
              if (param.getRepositoryValue() != null) {
                if (param.getRepositoryValue().equals(""String_Node_Str"")) {
                  componentDbType=(String)param.getValue();
                }
              }
            }
            if (!EDatabaseTypeName.supportDbType(componentDbType)) {
              hasRepositoryDbSchema=false;
            }
            String componentProduct=EDatabaseTypeName.getTypeFromDbType(componentDbType).getProduct();
            String connectionProduct=null;
            if (isDatabaseConnection) {
              connectionProduct=((DatabaseConnection)connection).getProductId();
              if (!componentProduct.equals(connectionProduct)) {
                hasRepositoryDbSchema=false;
              }
 else {
                metaView.setCurrentDbms(((DatabaseConnection)connection).getDbmsId());
              }
            }
 else             if (isGenericSchemaConnection) {
              String mappingTypeId=((GenericSchemaConnection)connection).getMappingTypeId();
              if (mappingTypeId != null) {
                connectionProduct=mappingTypeId;
                metaView.setCurrentDbms(connectionProduct);
              }
            }
          }
        }
      }
    }
  }
 else {
    eltComponent=false;
  }
  metaView.setShowDbTypeColumn(hasMappingType || eltComponent,false,hasMappingType || (dbComponent && !hasRepositoryDbSchema));
  metaView.setShowDbColumnName(dbComponent,hasMappingType || (dbComponent && !hasRepositoryDbSchema));
  metaView.setShowTalendTypeColumn(!eltComponent);
  metaView.setShowPatternColumn(!eltComponent);
  metaView.setShowOriginalLength(isEBCDIC);
  if (isEBCDIC) {
    metaView.setShowOriginalLength(true);
    List<String> fieldList=new ArrayList<String>();
    fieldList.add(""String_Node_Str"");
    fieldList.add(""String_Node_Str"");
    metaView.setAdditionalFields(fieldList);
  }
}","public static void initializeMetadataTableView(MetadataTableEditorView metaView,INode node,IMetadataTable metadataTable){
  boolean dbComponent=false;
  boolean hasMappingType=false;
  boolean eltComponent=false;
  boolean hasRepositoryDbSchema=false;
  boolean isEBCDIC=false;
  if (node != null && node.getComponent() != null) {
    eltComponent=node.isELTComponent();
    isEBCDIC=node.getComponent().getName().contains(""String_Node_Str"");
    if (node.getComponent().isSupportDbType() || node.getComponent().getOriginalFamilyName().startsWith(DATABASE_LABEL) || eltComponent|| isEBCDIC) {
      dbComponent=true && !isEBCDIC;
      for (      IElementParameter currentParam : node.getElementParameters()) {
        if (currentParam.getFieldType().equals(EParameterFieldType.MAPPING_TYPE)) {
          metaView.setCurrentDbms((String)currentParam.getValue());
          hasMappingType=true;
        }
      }
      IElementParameter schemaParam=node.getElementParameter(""String_Node_Str"");
      if (!hasMappingType && schemaParam != null) {
        String schemaType=(String)schemaParam.getValue();
        if (schemaType.equals(""String_Node_Str"")) {
          String metaRepositoryName=(String)node.getElementParameter(""String_Node_Str"").getValue();
          Connection connection=MetadataToolHelper.getConnectionFromRepository(metaRepositoryName);
          boolean isDatabaseConnection=connection instanceof DatabaseConnection;
          boolean isGenericSchemaConnection=connection instanceof GenericSchemaConnection;
          if (isDatabaseConnection || isGenericSchemaConnection) {
            hasRepositoryDbSchema=true;
            for (            IMetadataColumn column : metadataTable.getListColumns()) {
              if ((column.getType() == ""String_Node_Str"") || (column.getType() == null)) {
                hasRepositoryDbSchema=false;
              }
            }
            String componentDbType=""String_Node_Str"";
            for (            IElementParameter param : (List<IElementParameter>)node.getElementParameters()) {
              if (param.getRepositoryValue() != null) {
                if (param.getRepositoryValue().equals(""String_Node_Str"")) {
                  componentDbType=(String)param.getValue();
                }
              }
            }
            if (!EDatabaseTypeName.supportDbType(componentDbType)) {
              hasRepositoryDbSchema=false;
            }
            String componentProduct=EDatabaseTypeName.getTypeFromDbType(componentDbType).getProduct();
            String connectionProduct=null;
            if (isDatabaseConnection) {
              connectionProduct=((DatabaseConnection)connection).getProductId();
              if (!componentProduct.equals(connectionProduct)) {
                hasRepositoryDbSchema=false;
              }
 else {
                metaView.setCurrentDbms(((DatabaseConnection)connection).getDbmsId());
              }
            }
 else             if (isGenericSchemaConnection) {
              String mappingTypeId=((GenericSchemaConnection)connection).getMappingTypeId();
              if (mappingTypeId != null) {
                connectionProduct=mappingTypeId;
                metaView.setCurrentDbms(connectionProduct);
              }
            }
          }
        }
      }
    }
  }
 else {
    eltComponent=false;
  }
  metaView.setShowDbTypeColumn(hasMappingType || eltComponent,false,hasMappingType || (dbComponent && !hasRepositoryDbSchema));
  metaView.setShowDbColumnName(dbComponent,hasMappingType || (dbComponent && !hasRepositoryDbSchema));
  metaView.setShowTalendTypeColumn(!eltComponent);
  metaView.setShowPatternColumn(!eltComponent);
  metaView.setShowOriginalLength(isEBCDIC);
  if (isEBCDIC) {
    metaView.setShowOriginalLength(true);
    List<String> fieldList=new ArrayList<String>();
    fieldList.add(""String_Node_Str"");
    fieldList.add(""String_Node_Str"");
    metaView.setAdditionalFields(fieldList);
  }
}",0.9946578478758584
127449,"@Override public int category(Object element){
  if (element instanceof RepositoryNode) {
    RepositoryNode node=(RepositoryNode)element;
    if (ERepositoryObjectType.METADATA_CON_COLUMN.equals(node.getProperties(EProperties.CONTENT_TYPE))) {
      RepositoryNode parent=node.getParent().getParent();
      if (parent != null && ERepositoryObjectType.METADATA_CON_TABLE.equals(parent.getProperties(EProperties.CONTENT_TYPE)) && parent.getObject() instanceof MetadataTableRepositoryObject) {
        MetadataTableRepositoryObject tableObject=(MetadataTableRepositoryObject)parent.getObject();
        MetadataColumnRepositoryObject columnObject=(MetadataColumnRepositoryObject)((RepositoryNode)element).getObject();
        return tableObject.getTable().getColumns().indexOf(columnObject.getTdColumn());
      }
    }
  }
  return super.category(element);
}","@Override public int category(Object element){
  if (element instanceof RepositoryNode) {
    RepositoryNode node=(RepositoryNode)element;
    if (ERepositoryObjectType.METADATA_CON_COLUMN.equals(node.getProperties(EProperties.CONTENT_TYPE))) {
      RepositoryNode parent=node.getParent().getParent();
      if (parent != null && ERepositoryObjectType.METADATA_CON_TABLE.equals(parent.getProperties(EProperties.CONTENT_TYPE)) && parent.getObject() instanceof MetadataTableRepositoryObject) {
        MetadataTableRepositoryObject tableObject=(MetadataTableRepositoryObject)parent.getObject();
        MetadataColumnRepositoryObject columnObject=(MetadataColumnRepositoryObject)((RepositoryNode)element).getObject();
        MetadataColumn tColumn=columnObject.getTdColumn();
        EList<MetadataColumn> columns=tableObject.getTable().getColumns();
        for (int i=0; i < columns.size(); i++) {
          MetadataColumn column=columns.get(i);
          if (column.getName() != null && column.getName().equals(tColumn.getName())) {
            return i;
          }
        }
      }
    }
  }
  return super.category(element);
}",0.7835258663987946
127450,"@Override public void handleEvent(Event event){
  TreeItem treeItem=(TreeItem)event.item;
  boolean needUpdate=treeItem.getChecked();
  boolean firstExpandForSchema=false;
  if (!mapCheckState.isEmpty()) {
    firstExpandForSchema=mapCheckState.get(treeItem.getText());
  }
  for (  TreeItem item : treeItem.getItems()) {
    if (item.getData() != null) {
      TableNode node=(TableNode)item.getData();
      if (useProvider()) {
        if (node.getType() == provider.getRunnableAccessNodeType() || node.getType() == TableNode.COLUMN_FAMILY) {
          if (isExistTable(node)) {
            item.setChecked(true);
          }
 else {
            item.setChecked(false);
          }
        }
      }
 else       if (node.getType() == TableNode.TABLE) {
        if ((firstExpand || firstExpandForSchema) && needUpdate && item.getData() != null) {
          updateItem(item,true,true);
        }
 else         if (isExistTable(node)) {
          item.setChecked(true);
        }
 else {
          item.setChecked(false);
        }
      }
 else       if (firstExpand && needUpdate && node.getType() == TableNode.SCHEMA) {
        item.setChecked(true);
        mapCheckState.put(item.getText(),firstExpand);
      }
 else {
        item.setGrayed(item.getChecked());
      }
    }
  }
  if (firstExpandForSchema) {
    mapCheckState.put(treeItem.getText(),false);
  }
  if (firstExpand) {
    firstExpand=false;
  }
}","@Override public void handleEvent(Event event){
  TreeItem treeItem=(TreeItem)event.item;
  String itemText=treeItem.getText();
  boolean needUpdate=treeItem.getChecked();
  boolean firstExpand=false;
  if (mapCheckState.containsKey(itemText)) {
    firstExpand=mapCheckState.get(itemText);
  }
 else {
    firstExpand=true;
  }
  for (  TreeItem item : treeItem.getItems()) {
    if (item.getData() != null) {
      TableNode node=(TableNode)item.getData();
      if (useProvider()) {
        if (node.getType() == provider.getRunnableAccessNodeType() || node.getType() == TableNode.COLUMN_FAMILY) {
          if (isExistTable(node)) {
            item.setChecked(true);
          }
 else {
            item.setChecked(false);
          }
        }
      }
 else       if (node.getType() == TableNode.TABLE) {
        if (firstExpand && needUpdate && item.getData() != null) {
          updateItem(item,true,true);
        }
 else         if (isExistTable(node)) {
          item.setChecked(true);
        }
 else {
          item.setChecked(false);
        }
      }
 else       if (firstExpand && needUpdate && node.getType() == TableNode.SCHEMA) {
        item.setChecked(true);
        mapCheckState.put(item.getText(),firstExpand);
      }
 else {
        item.setGrayed(item.getChecked());
      }
    }
  }
  if (firstExpand) {
    mapCheckState.put(itemText,false);
  }
}",0.8842030021443888
127451,"private void resetAndRefreshLocal(final String names[]){
  resetModulesNeeded();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final String projectLabel=currentProject.getTechnicalLabel();
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProject eclipseProject=workspace.getRoot().getProject(projectLabel);
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(currentProject,""String_Node_Str""){
      @Override public void run() throws PersistenceException {
        try {
          for (          String name : names) {
            String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
            path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
            File libsTargetFile=new File(path);
            File source=null;
            EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
            String relativePath=jarsToRelative.get(name);
            if (relativePath != null) {
              if (relativePath.startsWith(""String_Node_Str"")) {
                try {
                  URI uri=new URI(relativePath);
                  URL url=FileLocator.toFileURL(uri.toURL());
                  source=new File(url.getFile());
                }
 catch (                URISyntaxException e) {
                  CommonExceptionHandler.process(e);
                }
              }
            }
            if (source == null) {
              source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
            }
            FilesUtils.copyFile(source,libsTargetFile);
            synJavaLibs(source);
          }
          eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
        }
 catch (        IOException e) {
          CommonExceptionHandler.process(e);
        }
catch (        CoreException e) {
          CommonExceptionHandler.process(e);
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
    }
  }
}","private void resetAndRefreshLocal(final String names[]){
  resetModulesNeeded();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final String projectLabel=currentProject.getTechnicalLabel();
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProject eclipseProject=workspace.getRoot().getProject(projectLabel);
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(currentProject,""String_Node_Str""){
      @Override public void run() throws PersistenceException {
        try {
          for (          String name : names) {
            String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
            path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
            File libsTargetFile=new File(path);
            File source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
            FilesUtils.copyFile(source,libsTargetFile);
            synJavaLibs(source);
          }
          eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
        }
 catch (        IOException e) {
          CommonExceptionHandler.process(e);
        }
catch (        CoreException e) {
          CommonExceptionHandler.process(e);
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
    }
  }
}",0.8391066545123063
127452,"@Override public void run() throws PersistenceException {
  try {
    for (    String name : names) {
      String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
      path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
      File libsTargetFile=new File(path);
      File source=null;
      EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
      String relativePath=jarsToRelative.get(name);
      if (relativePath != null) {
        if (relativePath.startsWith(""String_Node_Str"")) {
          try {
            URI uri=new URI(relativePath);
            URL url=FileLocator.toFileURL(uri.toURL());
            source=new File(url.getFile());
          }
 catch (          URISyntaxException e) {
            CommonExceptionHandler.process(e);
          }
        }
      }
      if (source == null) {
        source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
      }
      FilesUtils.copyFile(source,libsTargetFile);
      synJavaLibs(source);
    }
    eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
catch (  CoreException e) {
    CommonExceptionHandler.process(e);
  }
}","@Override public void run() throws PersistenceException {
  try {
    for (    String name : names) {
      String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
      path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
      File libsTargetFile=new File(path);
      File source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
      FilesUtils.copyFile(source,libsTargetFile);
      synJavaLibs(source);
    }
    eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
catch (  CoreException e) {
    CommonExceptionHandler.process(e);
  }
}",0.7346221441124781
127453,"@Override public int category(Object element){
  if (element instanceof RepositoryNode) {
    RepositoryNode node=(RepositoryNode)element;
    if (ERepositoryObjectType.METADATA_CON_COLUMN.equals(node.getProperties(EProperties.CONTENT_TYPE))) {
      RepositoryNode parent=node.getParent().getParent();
      if (parent != null && ERepositoryObjectType.METADATA_CON_TABLE.equals(parent.getProperties(EProperties.CONTENT_TYPE)) && parent.getObject() instanceof MetadataTableRepositoryObject) {
        MetadataTableRepositoryObject tableObject=(MetadataTableRepositoryObject)parent.getObject();
        MetadataColumnRepositoryObject columnObject=(MetadataColumnRepositoryObject)((RepositoryNode)element).getObject();
        return tableObject.getTable().getColumns().indexOf(columnObject.getTdColumn());
      }
    }
  }
  return super.category(element);
}","@Override public int category(Object element){
  if (element instanceof RepositoryNode) {
    RepositoryNode node=(RepositoryNode)element;
    if (ERepositoryObjectType.METADATA_CON_COLUMN.equals(node.getProperties(EProperties.CONTENT_TYPE))) {
      RepositoryNode parent=node.getParent().getParent();
      if (parent != null && ERepositoryObjectType.METADATA_CON_TABLE.equals(parent.getProperties(EProperties.CONTENT_TYPE)) && parent.getObject() instanceof MetadataTableRepositoryObject) {
        MetadataTableRepositoryObject tableObject=(MetadataTableRepositoryObject)parent.getObject();
        MetadataColumnRepositoryObject columnObject=(MetadataColumnRepositoryObject)((RepositoryNode)element).getObject();
        MetadataColumn tColumn=columnObject.getTdColumn();
        EList<MetadataColumn> columns=tableObject.getTable().getColumns();
        for (int i=0; i < columns.size(); i++) {
          MetadataColumn column=columns.get(i);
          if (column.getName() != null && column.getName().equals(tColumn.getName())) {
            return i;
          }
        }
      }
    }
  }
  return super.category(element);
}",0.7835258663987946
127454,"@Override public void handleEvent(Event event){
  TreeItem treeItem=(TreeItem)event.item;
  boolean needUpdate=treeItem.getChecked();
  boolean firstExpandForSchema=false;
  if (!mapCheckState.isEmpty()) {
    firstExpandForSchema=mapCheckState.get(treeItem.getText());
  }
  for (  TreeItem item : treeItem.getItems()) {
    if (item.getData() != null) {
      TableNode node=(TableNode)item.getData();
      if (useProvider()) {
        if (node.getType() == provider.getRunnableAccessNodeType() || node.getType() == TableNode.COLUMN_FAMILY) {
          if (isExistTable(node)) {
            item.setChecked(true);
          }
 else {
            item.setChecked(false);
          }
        }
      }
 else       if (node.getType() == TableNode.TABLE) {
        if ((firstExpand || firstExpandForSchema) && needUpdate && item.getData() != null) {
          updateItem(item,true,true);
        }
 else         if (isExistTable(node)) {
          item.setChecked(true);
        }
 else {
          item.setChecked(false);
        }
      }
 else       if (firstExpand && needUpdate && node.getType() == TableNode.SCHEMA) {
        item.setChecked(true);
        mapCheckState.put(item.getText(),firstExpand);
      }
 else {
        item.setGrayed(item.getChecked());
      }
    }
  }
  if (firstExpandForSchema) {
    mapCheckState.put(treeItem.getText(),false);
  }
  if (firstExpand) {
    firstExpand=false;
  }
}","@Override public void handleEvent(Event event){
  TreeItem treeItem=(TreeItem)event.item;
  String itemText=treeItem.getText();
  boolean needUpdate=treeItem.getChecked();
  boolean firstExpand=false;
  if (mapCheckState.containsKey(itemText)) {
    firstExpand=mapCheckState.get(itemText);
  }
 else {
    firstExpand=true;
  }
  for (  TreeItem item : treeItem.getItems()) {
    if (item.getData() != null) {
      TableNode node=(TableNode)item.getData();
      if (useProvider()) {
        if (node.getType() == provider.getRunnableAccessNodeType() || node.getType() == TableNode.COLUMN_FAMILY) {
          if (isExistTable(node)) {
            item.setChecked(true);
          }
 else {
            item.setChecked(false);
          }
        }
      }
 else       if (node.getType() == TableNode.TABLE) {
        if (firstExpand && needUpdate && item.getData() != null) {
          updateItem(item,true,true);
        }
 else         if (isExistTable(node)) {
          item.setChecked(true);
        }
 else {
          item.setChecked(false);
        }
      }
 else       if (firstExpand && needUpdate && node.getType() == TableNode.SCHEMA) {
        item.setChecked(true);
        mapCheckState.put(item.getText(),firstExpand);
      }
 else {
        item.setGrayed(item.getChecked());
      }
    }
  }
  if (firstExpand) {
    mapCheckState.put(itemText,false);
  }
}",0.8842030021443888
127455,"private void resetAndRefreshLocal(final String names[]){
  resetModulesNeeded();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final String projectLabel=currentProject.getTechnicalLabel();
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProject eclipseProject=workspace.getRoot().getProject(projectLabel);
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(currentProject,""String_Node_Str""){
      @Override public void run() throws PersistenceException {
        try {
          for (          String name : names) {
            String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
            path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
            File libsTargetFile=new File(path);
            File source=null;
            EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
            String relativePath=jarsToRelative.get(name);
            if (relativePath != null) {
              if (relativePath.startsWith(""String_Node_Str"")) {
                try {
                  URI uri=new URI(relativePath);
                  URL url=FileLocator.toFileURL(uri.toURL());
                  source=new File(url.getFile());
                }
 catch (                URISyntaxException e) {
                  CommonExceptionHandler.process(e);
                }
              }
            }
            if (source == null) {
              source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
            }
            FilesUtils.copyFile(source,libsTargetFile);
            synJavaLibs(source);
          }
          eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
        }
 catch (        IOException e) {
          CommonExceptionHandler.process(e);
        }
catch (        CoreException e) {
          CommonExceptionHandler.process(e);
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
    }
  }
}","private void resetAndRefreshLocal(final String names[]){
  resetModulesNeeded();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final String projectLabel=currentProject.getTechnicalLabel();
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProject eclipseProject=workspace.getRoot().getProject(projectLabel);
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(currentProject,""String_Node_Str""){
      @Override public void run() throws PersistenceException {
        try {
          for (          String name : names) {
            String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
            path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
            File libsTargetFile=new File(path);
            File source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
            FilesUtils.copyFile(source,libsTargetFile);
            synJavaLibs(source);
          }
          eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
        }
 catch (        IOException e) {
          CommonExceptionHandler.process(e);
        }
catch (        CoreException e) {
          CommonExceptionHandler.process(e);
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
    }
  }
}",0.8391066545123063
127456,"@Override public void run() throws PersistenceException {
  try {
    for (    String name : names) {
      String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
      path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
      File libsTargetFile=new File(path);
      File source=null;
      EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
      String relativePath=jarsToRelative.get(name);
      if (relativePath != null) {
        if (relativePath.startsWith(""String_Node_Str"")) {
          try {
            URI uri=new URI(relativePath);
            URL url=FileLocator.toFileURL(uri.toURL());
            source=new File(url.getFile());
          }
 catch (          URISyntaxException e) {
            CommonExceptionHandler.process(e);
          }
        }
      }
      if (source == null) {
        source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
      }
      FilesUtils.copyFile(source,libsTargetFile);
      synJavaLibs(source);
    }
    eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
catch (  CoreException e) {
    CommonExceptionHandler.process(e);
  }
}","@Override public void run() throws PersistenceException {
  try {
    for (    String name : names) {
      String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
      path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
      File libsTargetFile=new File(path);
      File source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
      FilesUtils.copyFile(source,libsTargetFile);
      synJavaLibs(source);
    }
    eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
catch (  CoreException e) {
    CommonExceptionHandler.process(e);
  }
}",0.7346221441124781
127457,"/** 
 * ggu Comment method ""isOpenedItemInEditor"". for jobs/joblets/business diagrams/routines/sql patterns
 */
public static boolean isOpenedItemInEditor(IRepositoryViewObject objectToMove){
  try {
    if (objectToMove != null) {
      IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      if (activeWorkbenchWindow != null) {
        IWorkbenchPage activePage=activeWorkbenchWindow.getActivePage();
        if (activePage != null) {
          IEditorReference[] editorReferences=activePage.getEditorReferences();
          if (editorReferences != null) {
            for (            IEditorReference editorReference : editorReferences) {
              IEditorInput editorInput=editorReference.getEditorInput();
              if ((editorInput != null && editorInput instanceof IRepositoryEditorInput)) {
                IRepositoryEditorInput rInput=(IRepositoryEditorInput)editorInput;
                Property openedProperty=rInput.getItem().getProperty();
                if (openedProperty.getId().equals(objectToMove.getId()) && VersionUtils.compareTo(openedProperty.getVersion(),objectToMove.getVersion()) == 0) {
                  return true;
                }
              }
 else               if (objectToMove.getProperty().getItem() instanceof BusinessProcessItem) {
                Object obj=editorInput.getAdapter(IRepositoryEditorInput.class);
                if (obj instanceof IRepositoryEditorInput) {
                  IRepositoryEditorInput rInput=(IRepositoryEditorInput)obj;
                  Property openedProperty=rInput.getItem().getProperty();
                  if (openedProperty.getId().equals(objectToMove.getId()) && VersionUtils.compareTo(openedProperty.getVersion(),objectToMove.getVersion()) == 0) {
                    return true;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
 catch (  PartInitException e) {
    ExceptionHandler.process(e);
  }
  return false;
}","/** 
 * ggu Comment method ""isOpenedItemInEditor"". for jobs/joblets/business diagrams/routines/sql patterns
 */
public static boolean isOpenedItemInEditor(IRepositoryViewObject objectToMove){
  try {
    if (objectToMove != null) {
      IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      if (activeWorkbenchWindow != null) {
        IWorkbenchPage activePage=activeWorkbenchWindow.getActivePage();
        if (activePage != null) {
          IEditorReference[] editorReferences=activePage.getEditorReferences();
          if (editorReferences != null) {
            for (            IEditorReference editorReference : editorReferences) {
              IEditorInput editorInput=editorReference.getEditorInput();
              if ((editorInput != null && editorInput instanceof IRepositoryEditorInput)) {
                IRepositoryEditorInput rInput=(IRepositoryEditorInput)editorInput;
                Property openedProperty=rInput.getItem().getProperty();
                if (openedProperty.getId().equals(objectToMove.getId()) && VersionUtils.compareTo(openedProperty.getVersion(),objectToMove.getVersion()) == 0) {
                  return true;
                }
              }
 else               if (objectToMove.getProperty().getItem() instanceof BusinessProcessItem) {
                Object obj=editorInput.getAdapter(IRepositoryEditorInput.class);
                if (obj instanceof IRepositoryEditorInput) {
                  IRepositoryEditorInput rInput=(IRepositoryEditorInput)obj;
                  Property openedProperty=rInput.getItem().getProperty();
                  if (openedProperty.getId().equals(objectToMove.getId()) && VersionUtils.compareTo(openedProperty.getVersion(),objectToMove.getVersion()) == 0) {
                    return true;
                  }
                }
              }
 else               if (objectToMove.getProperty().getItem() instanceof JobScriptItem && editorInput instanceof FileEditorInput) {
                FileEditorInput rInput=(FileEditorInput)editorInput;
                IPath path=rInput.getPath();
                String[] seg=path.lastSegment().split(""String_Node_Str"");
                if (objectToMove.getProperty().getItem().getProperty().getLabel().equals(seg[0])) {
                  return true;
                }
              }
            }
          }
        }
      }
    }
  }
 catch (  PartInitException e) {
    ExceptionHandler.process(e);
  }
  return false;
}",0.8926353149955635
127458,"@Override protected void fillSynonyms(IMetadataConnection metadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  if (metadataConnection == null || dbMetaData == null) {
    return;
  }
  if (dbMetaData.getDatabaseProductName().startsWith(DATABASE_PRODUCT_NAME)) {
    String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
    if (!(""String_Node_Str"").equals(metadataConnection.getSchema())) {
      synSQL+=""String_Node_Str"" + metadataConnection.getSchema() + ""String_Node_Str"";
    }
    synSQL+=""String_Node_Str"";
    Statement sta=ExtractMetaDataUtils.conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(sta);
    ResultSet columns=sta.executeQuery(synSQL);
    String typeName=null;
    int index=0;
    List<String> columnLabels=new ArrayList<String>();
    try {
      while (columns.next()) {
        long numPrecRadix=0;
        String columnName=columns.getString(""String_Node_Str"");
        TdColumn column=ColumnHelper.createTdColumn(columnName);
        String label=column.getLabel();
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
        }
        label=MetadataToolHelper.validateColumnName(label,index,columnLabels);
        column.setLabel(label);
        column.setOriginalField(label2);
        if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(metadataConnection)) {
          typeName=columns.getString(""String_Node_Str"");
        }
        try {
          int column_size=columns.getInt(""String_Node_Str"");
          column.setLength(column_size);
          numPrecRadix=columns.getLong(""String_Node_Str"");
          column.setPrecision(numPrecRadix);
        }
 catch (        Exception e1) {
          log.warn(e1,e1);
        }
        DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
        String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
        if (dbmsId != null) {
          MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
          String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
          column.setTalendType(talendType);
          String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
          column.setSourceType(defaultSelectedDbType);
        }
        try {
          column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
        }
 catch (        Exception e) {
          log.error(e);
        }
        metadataColumns.add(column);
        columnLabels.add(column.getLabel());
        index++;
      }
    }
  finally {
      columns.close();
    }
  }
}","@Override protected void fillSynonyms(IMetadataConnection metadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  if (metadataConnection == null || dbMetaData == null) {
    return;
  }
  if (dbMetaData.getDatabaseProductName().startsWith(DATABASE_PRODUCT_NAME)) {
    String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
    if (!(""String_Node_Str"").equals(metadataConnection.getSchema())) {
      synSQL+=""String_Node_Str"" + metadataConnection.getSchema() + ""String_Node_Str"";
    }
    synSQL+=""String_Node_Str"";
    Statement sta=ExtractMetaDataUtils.conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(sta);
    ResultSet columns=sta.executeQuery(synSQL);
    String typeName=null;
    int index=0;
    List<String> columnLabels=new ArrayList<String>();
    try {
      while (columns.next()) {
        long numPrecRadix=0;
        String columnName=columns.getString(""String_Node_Str"");
        TdColumn column=ColumnHelper.createTdColumn(columnName);
        String label=column.getLabel();
        label=ManagementTextUtils.filterSpecialChar(label);
        String label2=label;
        if (coreService != null && coreService.isKeyword(label)) {
          label=""String_Node_Str"" + label;
        }
        label=MetadataToolHelper.validateColumnName(label,index,columnLabels);
        column.setLabel(label);
        column.setOriginalField(label2);
        if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(metadataConnection)) {
          typeName=columns.getString(""String_Node_Str"");
        }
        try {
          int column_size=columns.getInt(""String_Node_Str"");
          column.setLength(column_size);
          numPrecRadix=columns.getLong(""String_Node_Str"");
          column.setPrecision(numPrecRadix);
        }
 catch (        Exception e1) {
          log.warn(e1,e1);
        }
        DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
        String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
        if (dbmsId != null) {
          MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
          String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
          column.setTalendType(talendType);
          String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
          column.setSourceType(defaultSelectedDbType);
        }
        try {
          column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
        }
 catch (        Exception e) {
          log.error(e);
        }
        metadataColumns.add(column);
        columnLabels.add(column.getLabel());
        index++;
      }
    }
  finally {
      columns.close();
    }
  }
}",0.9401429422275164
127459,"@Override protected void fillSynonyms(IMetadataConnection metadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  if (metadataConnection == null || dbMetaData == null) {
    return;
  }
  if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
    String str=tableName;
    String TABLE_SCHEMA=null;
    String TABLE_NAME=null;
    String splitstr=str;
    int position=0;
    int count=0;
    if (tableName != null) {
      while (str.contains(""String_Node_Str"")) {
        count++;
        splitstr=splitstr.substring(splitstr.indexOf(""String_Node_Str"") + 3,splitstr.length());
      }
      if (str.indexOf(""String_Node_Str"") == 0) {
        TABLE_NAME=str.substring(1,str.length() - 1);
      }
 else       if (str.indexOf(""String_Node_Str"") == -1) {
        TABLE_NAME=tableName;
      }
 else {
        if (count == 2) {
          str=str.substring(str.indexOf(""String_Node_Str"") + 3,str.length());
        }
        position=str.indexOf(""String_Node_Str"");
        TABLE_SCHEMA=str.substring(0,position);
        TABLE_NAME=str.substring(position + 3,str.length());
      }
    }
    String synSQL=""String_Node_Str"" + TABLE_NAME + ""String_Node_Str"";
    if (null != TABLE_SCHEMA) {
      synSQL+=""String_Node_Str"" + TABLE_SCHEMA + ""String_Node_Str"";
    }
    if (!(""String_Node_Str"").equals(metadataConnection.getDatabase())) {
      synSQL+=""String_Node_Str"" + metadataConnection.getDatabase() + ""String_Node_Str"";
    }
    Statement sta=ExtractMetaDataUtils.conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(sta);
    ResultSet columns=sta.executeQuery(synSQL);
    String typeName=null;
    int index=0;
    List<String> columnLabels=new ArrayList<String>();
    try {
      while (columns.next()) {
        int column_size=0;
        String lenString=null;
        long numPrecRadix=0;
        String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
        TdColumn column=ColumnHelper.createTdColumn(columnName);
        String label=column.getLabel();
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
        }
        label=MetadataToolHelper.validateColumnName(label,index,columnLabels);
        column.setLabel(label);
        column.setOriginalField(label2);
        typeName=columns.getString(GetColumn.DATA_TYPE.name());
        try {
          lenString=""String_Node_Str"";
          column_size=columns.getInt(""String_Node_Str"");
          if (columns.getString(""String_Node_Str"") != null) {
            column_size=columns.getInt(""String_Node_Str"");
            lenString=""String_Node_Str"";
          }
          column.setLength(column_size);
          numPrecRadix=columns.getLong(""String_Node_Str"");
          column.setPrecision(numPrecRadix);
        }
 catch (        Exception e1) {
          log.warn(e1,e1);
        }
        DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
        String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
        if (dbmsId != null) {
          MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
          String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,lenString),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
          column.setTalendType(talendType);
          String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
          column.setSourceType(defaultSelectedDbType);
        }
        try {
          column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
        }
 catch (        Exception e) {
          log.error(e);
        }
        metadataColumns.add(column);
        columnLabels.add(column.getLabel());
        index++;
      }
    }
  finally {
      columns.close();
    }
  }
}","@Override protected void fillSynonyms(IMetadataConnection metadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  if (metadataConnection == null || dbMetaData == null) {
    return;
  }
  if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
    String str=tableName;
    String TABLE_SCHEMA=null;
    String TABLE_NAME=null;
    String splitstr=str;
    int position=0;
    int count=0;
    if (tableName != null) {
      while (str.contains(""String_Node_Str"")) {
        count++;
        splitstr=splitstr.substring(splitstr.indexOf(""String_Node_Str"") + 3,splitstr.length());
      }
      if (str.indexOf(""String_Node_Str"") == 0) {
        TABLE_NAME=str.substring(1,str.length() - 1);
      }
 else       if (str.indexOf(""String_Node_Str"") == -1) {
        TABLE_NAME=tableName;
      }
 else {
        if (count == 2) {
          str=str.substring(str.indexOf(""String_Node_Str"") + 3,str.length());
        }
        position=str.indexOf(""String_Node_Str"");
        TABLE_SCHEMA=str.substring(0,position);
        TABLE_NAME=str.substring(position + 3,str.length());
      }
    }
    String synSQL=""String_Node_Str"" + TABLE_NAME + ""String_Node_Str"";
    if (null != TABLE_SCHEMA) {
      synSQL+=""String_Node_Str"" + TABLE_SCHEMA + ""String_Node_Str"";
    }
    if (!(""String_Node_Str"").equals(metadataConnection.getDatabase())) {
      synSQL+=""String_Node_Str"" + metadataConnection.getDatabase() + ""String_Node_Str"";
    }
    Statement sta=ExtractMetaDataUtils.conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(sta);
    ResultSet columns=sta.executeQuery(synSQL);
    String typeName=null;
    int index=0;
    List<String> columnLabels=new ArrayList<String>();
    try {
      while (columns.next()) {
        int column_size=0;
        String lenString=null;
        long numPrecRadix=0;
        String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
        TdColumn column=ColumnHelper.createTdColumn(columnName);
        String label=column.getLabel();
        label=ManagementTextUtils.filterSpecialChar(label);
        String label2=label;
        if (coreService != null && coreService.isKeyword(label)) {
          label=""String_Node_Str"" + label;
        }
        label=MetadataToolHelper.validateColumnName(label,index,columnLabels);
        column.setLabel(label);
        column.setOriginalField(label2);
        typeName=columns.getString(GetColumn.DATA_TYPE.name());
        try {
          lenString=""String_Node_Str"";
          column_size=columns.getInt(""String_Node_Str"");
          if (columns.getString(""String_Node_Str"") != null) {
            column_size=columns.getInt(""String_Node_Str"");
            lenString=""String_Node_Str"";
          }
          column.setLength(column_size);
          numPrecRadix=columns.getLong(""String_Node_Str"");
          column.setPrecision(numPrecRadix);
        }
 catch (        Exception e1) {
          log.warn(e1,e1);
        }
        DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
        String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
        if (dbmsId != null) {
          MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
          String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,lenString),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
          column.setTalendType(talendType);
          String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
          column.setSourceType(defaultSelectedDbType);
        }
        try {
          column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
        }
 catch (        Exception e) {
          log.error(e);
        }
        metadataColumns.add(column);
        columnLabels.add(column.getLabel());
        index++;
      }
    }
  finally {
      columns.close();
    }
  }
}",0.9539518900343644
127460,"@Override protected void fillSynonyms(IMetadataConnection metadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  if (metadataConnection == null || dbMetaData == null) {
    return;
  }
  if (dbMetaData.getDatabaseProductName().equals(OracleExtractManager.DATABASE_PRODUCT_NAME)) {
    String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
    if (!(""String_Node_Str"").equals(metadataConnection.getSchema())) {
      synSQL+=""String_Node_Str"" + metadataConnection.getSchema() + ""String_Node_Str"";
    }
 else     if (table.eContainer() instanceof Schema) {
      Schema schema=(Schema)table.eContainer();
      synSQL+=""String_Node_Str"" + schema.getName() + ""String_Node_Str"";
    }
    Statement sta=ExtractMetaDataUtils.conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(sta);
    ResultSet columns=sta.executeQuery(synSQL);
    String typeName=null;
    int index=0;
    List<String> columnLabels=new ArrayList<String>();
    try {
      while (columns.next()) {
        long numPrecRadix=0;
        String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
        TdColumn column=ColumnHelper.createTdColumn(columnName);
        String label=column.getLabel();
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
        }
        label=MetadataToolHelper.validateColumnName(label,index,columnLabels);
        column.setLabel(label);
        column.setOriginalField(label2);
        typeName=columns.getString(GetColumn.DATA_TYPE.name());
        try {
          int column_size=columns.getInt(""String_Node_Str"");
          column.setLength(column_size);
          numPrecRadix=columns.getLong(""String_Node_Str"");
          column.setPrecision(numPrecRadix);
        }
 catch (        Exception e1) {
          log.warn(e1,e1);
        }
        DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
        String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
        if (dbmsId != null) {
          MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
          String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
          column.setTalendType(talendType);
          String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
          column.setSourceType(defaultSelectedDbType);
        }
        try {
          column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
        }
 catch (        Exception e) {
          log.error(e);
        }
        metadataColumns.add(column);
        columnLabels.add(column.getLabel());
        index++;
      }
    }
  finally {
      columns.close();
    }
  }
}","@Override protected void fillSynonyms(IMetadataConnection metadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  if (metadataConnection == null || dbMetaData == null) {
    return;
  }
  if (dbMetaData.getDatabaseProductName().equals(OracleExtractManager.DATABASE_PRODUCT_NAME)) {
    String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
    if (!(""String_Node_Str"").equals(metadataConnection.getSchema())) {
      synSQL+=""String_Node_Str"" + metadataConnection.getSchema() + ""String_Node_Str"";
    }
 else     if (table.eContainer() instanceof Schema) {
      Schema schema=(Schema)table.eContainer();
      synSQL+=""String_Node_Str"" + schema.getName() + ""String_Node_Str"";
    }
    Statement sta=ExtractMetaDataUtils.conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(sta);
    ResultSet columns=sta.executeQuery(synSQL);
    String typeName=null;
    int index=0;
    List<String> columnLabels=new ArrayList<String>();
    try {
      while (columns.next()) {
        long numPrecRadix=0;
        String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
        TdColumn column=ColumnHelper.createTdColumn(columnName);
        String label=column.getLabel();
        label=ManagementTextUtils.filterSpecialChar(label);
        String label2=label;
        if (coreService != null && coreService.isKeyword(label)) {
          label=""String_Node_Str"" + label;
        }
        label=MetadataToolHelper.validateColumnName(label,index,columnLabels);
        column.setLabel(label);
        column.setOriginalField(label2);
        typeName=columns.getString(GetColumn.DATA_TYPE.name());
        try {
          int column_size=columns.getInt(""String_Node_Str"");
          column.setLength(column_size);
          numPrecRadix=columns.getLong(""String_Node_Str"");
          column.setPrecision(numPrecRadix);
        }
 catch (        Exception e1) {
          log.warn(e1,e1);
        }
        DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
        String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
        if (dbmsId != null) {
          MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
          String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
          column.setTalendType(talendType);
          String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
          column.setSourceType(defaultSelectedDbType);
        }
        try {
          column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
        }
 catch (        Exception e) {
          log.error(e);
        }
        metadataColumns.add(column);
        columnLabels.add(column.getLabel());
        index++;
      }
    }
  finally {
      columns.close();
    }
  }
}",0.941873915558126
127461,"/** 
 * DOC amaumont Comment method ""createNewMetadataColumn"".
 * @return
 */
public MetadataColumn createNewMetadataColumn(String dbmsId){
  MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
  String columnName=getNextGeneratedColumnName(defaultLabel);
  metadataColumn.setLabel(columnName);
  metadataColumn.setOriginalField(columnName);
  ECodeLanguage codeLanguage=LanguageManager.getCurrentLanguage();
  if (codeLanguage == ECodeLanguage.JAVA) {
    if (CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE) != null && !CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE).equals(""String_Node_Str"")) {
      metadataColumn.setTalendType(CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE));
      if (CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.FIELD_DEFAULT_LENGTH) != null && !CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.FIELD_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
        metadataColumn.setLength(Integer.parseInt(CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.FIELD_DEFAULT_LENGTH)));
      }
    }
 else {
      metadataColumn.setTalendType(JavaTypesManager.getDefaultJavaType().getId());
      if (dbmsId != null) {
        metadataColumn.setSourceType(TypesManager.getDBTypeFromTalendType(dbmsId,metadataColumn.getTalendType()));
      }
    }
  }
 else {
    if (CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.PERL_FIELD_DEFAULT_TYPE) != null && !CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.PERL_FIELD_DEFAULT_TYPE).equals(""String_Node_Str"")) {
      metadataColumn.setTalendType(CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.PERL_FIELD_DEFAULT_TYPE));
      if (CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.PERL_FIELD_DEFAULT_LENGTH) != null && !CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.PERL_FIELD_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
        metadataColumn.setLength(Integer.parseInt(CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.PERL_FIELD_DEFAULT_LENGTH)));
      }
    }
  }
  return metadataColumn;
}","/** 
 * DOC amaumont Comment method ""createNewMetadataColumn"".
 * @return
 */
public MetadataColumn createNewMetadataColumn(String dbmsId){
  MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
  String columnName=getNextGeneratedColumnName(defaultLabel);
  metadataColumn.setLabel(columnName);
  metadataColumn.setOriginalField(columnName);
  IPreferenceStore preferenceStore=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreUIService.class)) {
    IDesignerCoreUIService designerCoreUiService=(IDesignerCoreUIService)GlobalServiceRegister.getDefault().getService(IDesignerCoreUIService.class);
    preferenceStore=designerCoreUiService.getPreferenceStore();
  }
  if (preferenceStore != null && preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE) != null && !preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE).equals(""String_Node_Str"")) {
    metadataColumn.setTalendType(preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE));
    if (preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_LENGTH) != null && !preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
      metadataColumn.setLength(Integer.parseInt(preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_LENGTH)));
    }
  }
 else {
    metadataColumn.setTalendType(JavaTypesManager.getDefaultJavaType().getId());
    if (dbmsId != null) {
      metadataColumn.setSourceType(TypesManager.getDBTypeFromTalendType(dbmsId,metadataColumn.getTalendType()));
    }
  }
  return metadataColumn;
}",0.5297713380122255
127462,"public IMetadataColumn createNewMetadataColumn(){
  MetadataColumn metadataColumn=new MetadataColumn();
  String columnName=getNextGeneratedColumnName();
  metadataColumn.setLabel(columnName);
  metadataColumn.setNullable(true);
  metadataColumn.setOriginalDbColumnName(columnName);
  ECodeLanguage codeLanguage=LanguageManager.getCurrentLanguage();
  if (codeLanguage == ECodeLanguage.JAVA) {
    if (CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE) != null && !CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE).equals(""String_Node_Str"")) {
      metadataColumn.setTalendType(CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE));
      if (CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.FIELD_DEFAULT_LENGTH) != null && !CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.FIELD_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
        metadataColumn.setLength(Integer.parseInt(CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.FIELD_DEFAULT_LENGTH)));
      }
    }
 else {
      metadataColumn.setTalendType(JavaTypesManager.getDefaultJavaType().getId());
      if (metadataTable.getDbms() != null) {
        metadataColumn.setType(TypesManager.getDBTypeFromTalendType(metadataTable.getDbms(),metadataColumn.getTalendType()));
      }
    }
  }
 else {
    if (CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.PERL_FIELD_DEFAULT_TYPE) != null && !CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.PERL_FIELD_DEFAULT_TYPE).equals(""String_Node_Str"")) {
      metadataColumn.setTalendType(CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.PERL_FIELD_DEFAULT_TYPE));
      if (CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.PERL_FIELD_DEFAULT_LENGTH) != null && !CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.PERL_FIELD_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
        metadataColumn.setLength(Integer.parseInt(CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.PERL_FIELD_DEFAULT_LENGTH)));
      }
    }
  }
  return metadataColumn;
}","public IMetadataColumn createNewMetadataColumn(){
  MetadataColumn metadataColumn=new MetadataColumn();
  String columnName=getNextGeneratedColumnName();
  metadataColumn.setLabel(columnName);
  metadataColumn.setNullable(true);
  metadataColumn.setOriginalDbColumnName(columnName);
  IPreferenceStore preferenceStore=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreUIService.class)) {
    IDesignerCoreUIService designerCoreUiService=(IDesignerCoreUIService)GlobalServiceRegister.getDefault().getService(IDesignerCoreUIService.class);
    preferenceStore=designerCoreUiService.getPreferenceStore();
  }
  if (preferenceStore != null && preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE) != null && !preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE).equals(""String_Node_Str"")) {
    metadataColumn.setTalendType(preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE));
    if (preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_LENGTH) != null && !preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
      metadataColumn.setLength(Integer.parseInt(preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_LENGTH)));
    }
  }
 else {
    metadataColumn.setTalendType(JavaTypesManager.getDefaultJavaType().getId());
    if (metadataTable.getDbms() != null) {
      metadataColumn.setType(TypesManager.getDBTypeFromTalendType(metadataTable.getDbms(),metadataColumn.getTalendType()));
    }
  }
  return metadataColumn;
}",0.5164144353899883
127463,"/** 
 * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()
 */
@Override public void initializeDefaultPreferences(){
  IEclipsePreferences node=new DefaultScope().getNode(CorePlugin.getDefault().getBundle().getSymbolicName());
  IPath tempPath=new Path(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"");
  File tempFile=tempPath.toFile();
  if (!tempFile.exists()) {
    tempFile.mkdirs();
  }
  node.put(ITalendCorePrefConstants.FILE_PATH_TEMP,tempPath.toOSString());
  String os=Platform.getOS();
  String javaPath=System.getProperty(""String_Node_Str"");
  if (os.equals(Platform.OS_WIN32)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_WIN32_INTERPRETER);
  }
 else   if (os.equals(Platform.OS_LINUX)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_LINUX_INTERPRETER_PATH);
  }
  node.put(ITalendCorePrefConstants.LANGUAGE_SELECTOR,Locale.getDefault().getLanguage());
  node.put(ITalendCorePrefConstants.PREVIEW_LIMIT,""String_Node_Str"");
  node.putBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME,true);
  initializeUpdatePreference();
  final String perlEditorBundleName=""String_Node_Str"";
  final String editorsBundleName=""String_Node_Str"";
  final String editorLineNumberRuler=""String_Node_Str"";
  if (!CommonsPlugin.isHeadless()) {
    IPreferenceStore store=new ScopedPreferenceStore(new InstanceScope(),perlEditorBundleName);
    store.setValue(editorLineNumberRuler,true);
    store=new ScopedPreferenceStore(new InstanceScope(),editorsBundleName);
    store.setValue(editorLineNumberRuler,true);
  }
  String languageType=Locale.getDefault().getLanguage();
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.LANGUAGE_SELECTOR,languageType);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_QUOTE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.AS400_SQL_SEG,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE,""String_Node_Str"");
  CorePlugin.getDefault().getPreferenceStore().setDefault(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE,""String_Node_Str"");
  CorePlugin.getDefault().getPreferenceStore().setDefault(MetadataTypeLengthConstants.PERL_FIELD_DEFAULT_TYPE,""String_Node_Str"");
  CorePlugin.getDefault().getPreferenceStore().setDefault(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_TYPE,""String_Node_Str"");
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATION,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.USE_CSS_TEMPLATE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.CONTEXT_GROUP_BY_SOURCE,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATESOURCECODE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.COMMAND_STR,ITalendCorePrefConstants.DEFAULT_COMMAND_STR);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_WARNING,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.FORBIDDEN_MAPPING_LENGTH_PREC_LOGIC,false);
}","/** 
 * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()
 */
@Override public void initializeDefaultPreferences(){
  IEclipsePreferences node=new DefaultScope().getNode(CorePlugin.getDefault().getBundle().getSymbolicName());
  IPath tempPath=new Path(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"");
  File tempFile=tempPath.toFile();
  if (!tempFile.exists()) {
    tempFile.mkdirs();
  }
  node.put(ITalendCorePrefConstants.FILE_PATH_TEMP,tempPath.toOSString());
  String os=Platform.getOS();
  String javaPath=System.getProperty(""String_Node_Str"");
  if (os.equals(Platform.OS_WIN32)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_WIN32_INTERPRETER);
  }
 else   if (os.equals(Platform.OS_LINUX)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_LINUX_INTERPRETER_PATH);
  }
  node.put(ITalendCorePrefConstants.LANGUAGE_SELECTOR,Locale.getDefault().getLanguage());
  node.put(ITalendCorePrefConstants.PREVIEW_LIMIT,""String_Node_Str"");
  node.putBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME,true);
  initializeUpdatePreference();
  final String perlEditorBundleName=""String_Node_Str"";
  final String editorsBundleName=""String_Node_Str"";
  final String editorLineNumberRuler=""String_Node_Str"";
  if (!CommonsPlugin.isHeadless()) {
    IPreferenceStore store=new ScopedPreferenceStore(new InstanceScope(),perlEditorBundleName);
    store.setValue(editorLineNumberRuler,true);
    store=new ScopedPreferenceStore(new InstanceScope(),editorsBundleName);
    store.setValue(editorLineNumberRuler,true);
  }
  String languageType=Locale.getDefault().getLanguage();
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.LANGUAGE_SELECTOR,languageType);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_QUOTE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.AS400_SQL_SEG,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATION,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.USE_CSS_TEMPLATE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.CONTEXT_GROUP_BY_SOURCE,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATESOURCECODE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.COMMAND_STR,ITalendCorePrefConstants.DEFAULT_COMMAND_STR);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_WARNING,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.FORBIDDEN_MAPPING_LENGTH_PREC_LOGIC,false);
}",0.9208074534161492
127464,public boolean isSAPNode(final INode node);,public boolean isSAPNode(final RepositoryNode node);,0.8842105263157894
127465,"public static void initializeMetadataTableView(MetadataTableEditorView metaView,INode node,IMetadataTable metadataTable){
  boolean dbComponent=false;
  boolean hasMappingType=false;
  boolean eltComponent=false;
  boolean hasRepositoryDbSchema=false;
  boolean isEBCDIC=false;
  if (node != null && node.getComponent() != null) {
    eltComponent=node.isELTComponent();
    isEBCDIC=node.getComponent().getName().contains(""String_Node_Str"");
    if (node.getComponent().getOriginalFamilyName().startsWith(DATABASE_LABEL) || eltComponent || isEBCDIC) {
      dbComponent=true && !isEBCDIC;
      for (      IElementParameter currentParam : node.getElementParameters()) {
        if (currentParam.getFieldType().equals(EParameterFieldType.MAPPING_TYPE)) {
          metaView.setCurrentDbms((String)currentParam.getValue());
          hasMappingType=true;
        }
      }
      IElementParameter schemaParam=node.getElementParameter(""String_Node_Str"");
      if (!hasMappingType && schemaParam != null) {
        String schemaType=(String)schemaParam.getValue();
        if (schemaType.equals(""String_Node_Str"")) {
          String metaRepositoryName=(String)node.getElementParameter(""String_Node_Str"").getValue();
          Connection connection=MetadataToolHelper.getConnectionFromRepository(metaRepositoryName);
          boolean isDatabaseConnection=connection instanceof DatabaseConnection;
          boolean isGenericSchemaConnection=connection instanceof GenericSchemaConnection;
          if (isDatabaseConnection || isGenericSchemaConnection) {
            hasRepositoryDbSchema=true;
            for (            IMetadataColumn column : metadataTable.getListColumns()) {
              if ((column.getType() == ""String_Node_Str"") || (column.getType() == null)) {
                hasRepositoryDbSchema=false;
              }
            }
            String componentDbType=""String_Node_Str"";
            for (            IElementParameter param : (List<IElementParameter>)node.getElementParameters()) {
              if (param.getRepositoryValue() != null) {
                if (param.getRepositoryValue().equals(""String_Node_Str"")) {
                  componentDbType=(String)param.getValue();
                }
              }
            }
            if (!EDatabaseTypeName.supportDbType(componentDbType)) {
              hasRepositoryDbSchema=false;
            }
            String componentProduct=EDatabaseTypeName.getTypeFromDbType(componentDbType).getProduct();
            String connectionProduct=null;
            if (isDatabaseConnection) {
              connectionProduct=((DatabaseConnection)connection).getProductId();
              if (!componentProduct.equals(connectionProduct)) {
                hasRepositoryDbSchema=false;
              }
 else {
                metaView.setCurrentDbms(((DatabaseConnection)connection).getDbmsId());
              }
            }
 else             if (isGenericSchemaConnection) {
              String mappingTypeId=((GenericSchemaConnection)connection).getMappingTypeId();
              if (mappingTypeId != null) {
                connectionProduct=mappingTypeId;
                metaView.setCurrentDbms(connectionProduct);
              }
            }
          }
        }
      }
    }
  }
 else {
    eltComponent=false;
  }
  metaView.setShowDbTypeColumn(hasMappingType || eltComponent,false,hasMappingType || (dbComponent && !hasRepositoryDbSchema));
  metaView.setShowDbColumnName(dbComponent,hasMappingType || (dbComponent && !hasRepositoryDbSchema));
  metaView.setShowTalendTypeColumn(!eltComponent);
  metaView.setShowPatternColumn(!eltComponent);
  metaView.setShowOriginalLength(isEBCDIC);
  if (isEBCDIC) {
    metaView.setShowOriginalLength(true);
    List<String> fieldList=new ArrayList<String>();
    fieldList.add(""String_Node_Str"");
    fieldList.add(""String_Node_Str"");
    metaView.setAdditionalFields(fieldList);
  }
}","public static void initializeMetadataTableView(MetadataTableEditorView metaView,INode node,IMetadataTable metadataTable){
  boolean dbComponent=false;
  boolean hasMappingType=false;
  boolean eltComponent=false;
  boolean hasRepositoryDbSchema=false;
  boolean isEBCDIC=false;
  if (node != null && node.getComponent() != null) {
    eltComponent=node.isELTComponent();
    isEBCDIC=node.getComponent().getName().contains(""String_Node_Str"");
    if (node.getComponent().getOriginalFamilyName().startsWith(DATABASE_LABEL) || eltComponent || isEBCDIC) {
      dbComponent=true && !isEBCDIC;
      for (      IElementParameter currentParam : node.getElementParameters()) {
        if (currentParam.getFieldType().equals(EParameterFieldType.MAPPING_TYPE)) {
          metaView.setCurrentDbms((String)currentParam.getValue());
          hasMappingType=true;
        }
      }
      IElementParameter schemaParam=node.getElementParameter(""String_Node_Str"");
      if (!hasMappingType && schemaParam != null) {
        String schemaType=(String)schemaParam.getValue();
        if (schemaType.equals(""String_Node_Str"")) {
          String metaRepositoryName=(String)node.getElementParameter(""String_Node_Str"").getValue();
          Connection connection=MetadataToolHelper.getConnectionFromRepository(metaRepositoryName);
          boolean isDatabaseConnection=connection instanceof DatabaseConnection;
          boolean isGenericSchemaConnection=connection instanceof GenericSchemaConnection;
          if (isDatabaseConnection || isGenericSchemaConnection) {
            hasRepositoryDbSchema=true;
            for (            IMetadataColumn column : metadataTable.getListColumns()) {
              if ((column.getType() == ""String_Node_Str"") || (column.getType() == null)) {
                hasRepositoryDbSchema=false;
              }
            }
            String componentDbType=""String_Node_Str"";
            for (            IElementParameter param : (List<IElementParameter>)node.getElementParameters()) {
              if (param.getRepositoryValue() != null) {
                if (param.getRepositoryValue().equals(""String_Node_Str"")) {
                  componentDbType=(String)param.getValue();
                }
              }
            }
            if (!EDatabaseTypeName.supportDbType(componentDbType)) {
              hasRepositoryDbSchema=false;
            }
            String componentProduct=EDatabaseTypeName.getTypeFromDbType(componentDbType).getProduct();
            String connectionProduct=null;
            if (isDatabaseConnection) {
              connectionProduct=((DatabaseConnection)connection).getProductId();
              if (!componentProduct.equals(connectionProduct)) {
                hasRepositoryDbSchema=false;
              }
 else {
                metaView.setCurrentDbms(((DatabaseConnection)connection).getDbmsId());
              }
            }
 else             if (isGenericSchemaConnection) {
              String mappingTypeId=((GenericSchemaConnection)connection).getMappingTypeId();
              if (mappingTypeId != null) {
                connectionProduct=mappingTypeId;
                metaView.setCurrentDbms(connectionProduct);
              }
            }
          }
        }
      }
    }
  }
 else {
    eltComponent=false;
  }
  metaView.setShowDbTypeColumn(hasMappingType || eltComponent,false,hasMappingType || (dbComponent && !hasRepositoryDbSchema));
  metaView.setShowDbColumnName(dbComponent,hasMappingType || (dbComponent && !hasRepositoryDbSchema));
  metaView.setShowTalendTypeColumn(!eltComponent);
  metaView.setShowPatternColumn(!eltComponent);
  metaView.setShowOriginalLength(isEBCDIC);
  if (isEBCDIC) {
    metaView.setShowOriginalLength(true);
    List<String> fieldList=new ArrayList<String>();
    fieldList.add(""String_Node_Str"");
    fieldList.add(""String_Node_Str"");
    metaView.setAdditionalFields(fieldList);
  }
  if (node != null && metadataTable != null && metadataTable instanceof MetadataTable) {
    ((MetadataTable)metadataTable).setRepository(metaView.isRepository());
  }
}",0.978973717146433
127466,"public void setTableName(String tableName){
  this.tableName=tableName;
}","@Override public void setTableName(String tableName){
  this.tableName=tableName;
}",0.935897435897436
127467,"public String getLabel(){
  return label;
}","@Override public String getLabel(){
  return label;
}",0.8958333333333334
127468,"public String getId(){
  return id;
}","@Override public String getId(){
  return id;
}",0.8809523809523809
127469,"public void sortCustomColumns(){
  List<IMetadataColumn> customColumns=new ArrayList<IMetadataColumn>();
  List<IMetadataColumn> tempCustomColumns=new ArrayList<IMetadataColumn>();
  List<IMetadataColumn> noCustomColumns=new ArrayList<IMetadataColumn>();
  for (int i=0; i < listColumns.size(); i++) {
    IMetadataColumn column=listColumns.get(i);
    if (column.isCustom()) {
      tempCustomColumns.add(column);
    }
  }
  listColumns.removeAll(tempCustomColumns);
  noCustomColumns.addAll(listColumns);
  int nbDone=0;
  while (nbDone < tempCustomColumns.size()) {
    boolean found=false;
    for (int i=0; i < tempCustomColumns.size() && !found; i++) {
      IMetadataColumn column=tempCustomColumns.get(i);
      if (column.getCustomId() == nbDone) {
        customColumns.add(column);
        found=true;
      }
    }
    nbDone++;
  }
  listColumns.clear();
  if (this.readOnlyColumnPosition != null && this.readOnlyColumnPosition.equals(EReadOnlyComlumnPosition.TOP.getName())) {
    listColumns.addAll(customColumns);
    listColumns.addAll(noCustomColumns);
  }
 else {
    listColumns.addAll(noCustomColumns);
    listColumns.addAll(customColumns);
  }
}","@Override public void sortCustomColumns(){
  List<IMetadataColumn> customColumns=new ArrayList<IMetadataColumn>();
  List<IMetadataColumn> tempCustomColumns=new ArrayList<IMetadataColumn>();
  List<IMetadataColumn> noCustomColumns=new ArrayList<IMetadataColumn>();
  for (int i=0; i < listColumns.size(); i++) {
    IMetadataColumn column=listColumns.get(i);
    if (column.isCustom()) {
      tempCustomColumns.add(column);
    }
  }
  listColumns.removeAll(tempCustomColumns);
  noCustomColumns.addAll(listColumns);
  int nbDone=0;
  while (nbDone < tempCustomColumns.size()) {
    boolean found=false;
    for (int i=0; i < tempCustomColumns.size() && !found; i++) {
      IMetadataColumn column=tempCustomColumns.get(i);
      if (column.getCustomId() == nbDone) {
        customColumns.add(column);
        found=true;
      }
    }
    nbDone++;
  }
  listColumns.clear();
  if (this.readOnlyColumnPosition != null && this.readOnlyColumnPosition.equals(EReadOnlyComlumnPosition.TOP.getName())) {
    listColumns.addAll(customColumns);
    listColumns.addAll(noCustomColumns);
  }
 else {
    listColumns.addAll(noCustomColumns);
    listColumns.addAll(customColumns);
  }
}",0.995741056218058
127470,"public boolean isReadOnly(){
  return readOnly;
}","@Override public boolean isReadOnly(){
  return readOnly;
}",0.9074074074074074
127471,"public String getReadOnlyColumnPosition(){
  return this.readOnlyColumnPosition;
}","@Override public String getReadOnlyColumnPosition(){
  return this.readOnlyColumnPosition;
}",0.942528735632184
127472,"public List<IMetadataColumn> getListUnusedColumns(){
  return this.unusedColumns;
}","@Override public List<IMetadataColumn> getListUnusedColumns(){
  return this.unusedColumns;
}",0.9431818181818182
127473,"public List<IMetadataColumn> getListUsedColumns(){
  return this.listColumns;
}","@Override public List<IMetadataColumn> getListUsedColumns(){
  return this.listColumns;
}",0.9404761904761904
127474,"public IMetadataColumn getColumn(String columnName){
  for (int i=0; i < getListColumns(true).size(); i++) {
    IMetadataColumn column=getListColumns(true).get(i);
    if (column.getLabel().equals(columnName)) {
      return column;
    }
  }
  return null;
}","@Override public IMetadataColumn getColumn(String columnName){
  for (int i=0; i < getListColumns(true).size(); i++) {
    IMetadataColumn column=getListColumns(true).get(i);
    if (column.getLabel().equals(columnName)) {
      return column;
    }
  }
  return null;
}",0.981132075471698
127475,"public void setId(String id){
  this.id=id;
}","@Override public void setId(String id){
  this.id=id;
}",0.9
127476,"public String getComment(){
  return comment;
}","@Override public String getComment(){
  return comment;
}",0.903846153846154
127477,"/** 
 * Sets the parent.
 * @param parent the parent to set
 */
public void setParent(IMetadataConnection parent){
  this.parent=parent;
}","/** 
 * Sets the parent.
 * @param parent the parent to set
 */
@Override public void setParent(IMetadataConnection parent){
  this.parent=parent;
}",0.965034965034965
127478,"public void setAdditionalProperties(Map<String,String> additionalProperties){
  this.additionalProperties=additionalProperties;
}","@Override public void setAdditionalProperties(Map<String,String> additionalProperties){
  this.additionalProperties=additionalProperties;
}",0.9626865671641792
127479,"/** 
 * Getter for attachedConnector.
 * @return the attachedConnector
 */
public String getAttachedConnector(){
  return attachedConnector;
}","/** 
 * Getter for attachedConnector.
 * @return the attachedConnector
 */
@Override public String getAttachedConnector(){
  return attachedConnector;
}",0.9659863945578232
127480,"public void setUnusedColumns(List<IMetadataColumn> unusedColumns){
  this.unusedColumns=unusedColumns;
}","@Override public void setUnusedColumns(List<IMetadataColumn> unusedColumns){
  this.unusedColumns=unusedColumns;
}",0.9541284403669724
127481,"public synchronized List<IMetadataColumn> getListColumns(boolean withUnselected){
  Iterator<IMetadataColumn> it=this.listColumns.iterator();
  while (it.hasNext()) {
    IMetadataColumn column=it.next();
    if (!column.isUsefulColumn()) {
      this.unusedColumns.add(column);
      it.remove();
    }
  }
  Iterator<IMetadataColumn> it2=this.unusedColumns.iterator();
  while (it2.hasNext()) {
    IMetadataColumn column=it2.next();
    if (column.isUsefulColumn()) {
      this.listColumns.add(column);
      it2.remove();
    }
  }
  if (withUnselected) {
    List<IMetadataColumn> temp=new ArrayList<IMetadataColumn>();
    temp.addAll(this.listColumns);
    temp.addAll(this.unusedColumns);
    return temp;
  }
  return this.listColumns;
}","@Override public synchronized List<IMetadataColumn> getListColumns(boolean withUnselected){
  Iterator<IMetadataColumn> it=this.listColumns.iterator();
  while (it.hasNext()) {
    IMetadataColumn column=it.next();
    if (!column.isUsefulColumn()) {
      this.unusedColumns.add(column);
      it.remove();
    }
  }
  Iterator<IMetadataColumn> it2=this.unusedColumns.iterator();
  while (it2.hasNext()) {
    IMetadataColumn column=it2.next();
    if (column.isUsefulColumn()) {
      this.listColumns.add(column);
      it2.remove();
    }
  }
  if (withUnselected) {
    List<IMetadataColumn> temp=new ArrayList<IMetadataColumn>();
    temp.addAll(this.listColumns);
    temp.addAll(this.unusedColumns);
    return temp;
  }
  return this.listColumns;
}",0.9933510638297872
127482,"/** 
 * Getter for parent.
 * @return the parent
 */
public IMetadataConnection getParent(){
  return this.parent;
}","/** 
 * Getter for parent.
 * @return the parent
 */
@Override public IMetadataConnection getParent(){
  return this.parent;
}",0.9586776859504132
127483,"public String getDbms(){
  return dbms;
}","@Override public String getDbms(){
  return dbms;
}",0.8913043478260869
127484,"/** 
 * Sets the attachedConnector.
 * @param attachedConnector the attachedConnector to set
 */
public void setAttachedConnector(String attachedConnector){
  this.attachedConnector=attachedConnector;
}","/** 
 * Sets the attachedConnector.
 * @param attachedConnector the attachedConnector to set
 */
@Override public void setAttachedConnector(String attachedConnector){
  this.attachedConnector=attachedConnector;
}",0.9758454106280192
127485,"public void setReadOnlyColumnPosition(String readOnlyColumnPosition){
  this.readOnlyColumnPosition=readOnlyColumnPosition;
}","@Override public void setReadOnlyColumnPosition(String readOnlyColumnPosition){
  this.readOnlyColumnPosition=readOnlyColumnPosition;
}",0.9615384615384616
127486,"public String getTableName(){
  return this.tableName;
}","@Override public String getTableName(){
  return this.tableName;
}",0.918032786885246
127487,"public void setListColumns(List<IMetadataColumn> listColumns){
  this.listColumns=listColumns;
}","@Override public void setListColumns(List<IMetadataColumn> listColumns){
  this.listColumns=listColumns;
}",0.9504950495049505
127488,"public void setDbms(String dbms){
  this.dbms=dbms;
}","@Override public void setDbms(String dbms){
  this.dbms=dbms;
}",0.913793103448276
127489,"public boolean sameMetadataAs(IMetadataTable other){
  return sameMetadataAs(other,IMetadataColumn.OPTIONS_IGNORE_DBCOLUMNNAME | IMetadataColumn.OPTIONS_IGNORE_DEFAULT | IMetadataColumn.OPTIONS_IGNORE_COMMENT);
}","@Override public boolean sameMetadataAs(IMetadataTable other){
  return sameMetadataAs(other,IMetadataColumn.OPTIONS_IGNORE_DBCOLUMNNAME | IMetadataColumn.OPTIONS_IGNORE_DEFAULT | IMetadataColumn.OPTIONS_IGNORE_COMMENT);
}",0.976958525345622
127490,"public IMetadataColumn getDynamicColumn(){
  if (isDynamicSchema()) {
    for (int i=0; i < listColumns.size(); i++) {
      if (listColumns.get(i).getTalendType().equals(""String_Node_Str"")) {
        return listColumns.get(i);
      }
    }
  }
  return null;
}","@Override public IMetadataColumn getDynamicColumn(){
  if (isDynamicSchema()) {
    for (int i=0; i < listColumns.size(); i++) {
      if (listColumns.get(i).getTalendType().equals(""String_Node_Str"")) {
        return listColumns.get(i);
      }
    }
  }
  return null;
}",0.9812734082397004
127491,"public void setLabel(String label){
  this.label=label;
}","@Override public void setLabel(String label){
  this.label=label;
}",0.9193548387096774
127492,"public void setComment(String comment){
  this.comment=comment;
}","@Override public void setComment(String comment){
  this.comment=comment;
}",0.9285714285714286
127493,"public boolean isDynamicSchema(){
  int sizeListColumns=listColumns.size();
  boolean hasDynamic=false;
  for (int i=0; i < sizeListColumns; i++) {
    if (listColumns.get(i).getTalendType().equals(""String_Node_Str"")) {
      hasDynamic=true;
      break;
    }
  }
  return hasDynamic;
}","@Override public boolean isDynamicSchema(){
  int sizeListColumns=listColumns.size();
  boolean hasDynamic=false;
  for (int i=0; i < sizeListColumns; i++) {
    if (listColumns.get(i).getTalendType().equals(""String_Node_Str"")) {
      hasDynamic=true;
      break;
    }
  }
  return hasDynamic;
}",0.9829351535836176
127494,"public Map<String,String> getAdditionalProperties(){
  return this.additionalProperties;
}","@Override public Map<String,String> getAdditionalProperties(){
  return this.additionalProperties;
}",0.9473684210526316
127495,"public void setReadOnly(boolean readOnly){
  this.readOnly=readOnly;
}","@Override public void setReadOnly(boolean readOnly){
  this.readOnly=readOnly;
}",0.9333333333333332
127496,"public static void initializeMetadataTableView(MetadataTableEditorView metaView,INode node,IMetadataTable metadataTable){
  boolean dbComponent=false;
  boolean hasMappingType=false;
  boolean eltComponent=false;
  boolean hasRepositoryDbSchema=false;
  boolean isEBCDIC=false;
  if (node != null && node.getComponent() != null) {
    eltComponent=node.isELTComponent();
    isEBCDIC=node.getComponent().getName().contains(""String_Node_Str"");
    if (node.getComponent().getOriginalFamilyName().startsWith(DATABASE_LABEL) || eltComponent || isEBCDIC) {
      dbComponent=true && !isEBCDIC;
      for (      IElementParameter currentParam : node.getElementParameters()) {
        if (currentParam.getFieldType().equals(EParameterFieldType.MAPPING_TYPE)) {
          metaView.setCurrentDbms((String)currentParam.getValue());
          hasMappingType=true;
        }
      }
      IElementParameter schemaParam=node.getElementParameter(""String_Node_Str"");
      if (!hasMappingType && schemaParam != null) {
        String schemaType=(String)schemaParam.getValue();
        if (schemaType.equals(""String_Node_Str"")) {
          String metaRepositoryName=(String)node.getElementParameter(""String_Node_Str"").getValue();
          Connection connection=MetadataToolHelper.getConnectionFromRepository(metaRepositoryName);
          boolean isDatabaseConnection=connection instanceof DatabaseConnection;
          boolean isGenericSchemaConnection=connection instanceof GenericSchemaConnection;
          if (isDatabaseConnection || isGenericSchemaConnection) {
            hasRepositoryDbSchema=true;
            for (            IMetadataColumn column : metadataTable.getListColumns()) {
              if ((column.getType() == ""String_Node_Str"") || (column.getType() == null)) {
                hasRepositoryDbSchema=false;
              }
            }
            String componentDbType=""String_Node_Str"";
            for (            IElementParameter param : (List<IElementParameter>)node.getElementParameters()) {
              if (param.getRepositoryValue() != null) {
                if (param.getRepositoryValue().equals(""String_Node_Str"")) {
                  componentDbType=(String)param.getValue();
                }
              }
            }
            if (!EDatabaseTypeName.supportDbType(componentDbType)) {
              hasRepositoryDbSchema=false;
            }
            String componentProduct=EDatabaseTypeName.getTypeFromDbType(componentDbType).getProduct();
            String connectionProduct=null;
            if (isDatabaseConnection) {
              connectionProduct=((DatabaseConnection)connection).getProductId();
              if (!componentProduct.equals(connectionProduct)) {
                hasRepositoryDbSchema=false;
              }
 else {
                metaView.setCurrentDbms(((DatabaseConnection)connection).getDbmsId());
              }
            }
 else             if (isGenericSchemaConnection) {
              String mappingTypeId=((GenericSchemaConnection)connection).getMappingTypeId();
              if (mappingTypeId != null) {
                connectionProduct=mappingTypeId;
                metaView.setCurrentDbms(connectionProduct);
              }
            }
          }
        }
      }
    }
  }
 else {
    eltComponent=false;
  }
  metaView.setShowDbTypeColumn(hasMappingType || eltComponent,false,hasMappingType || (dbComponent && !hasRepositoryDbSchema));
  metaView.setShowDbColumnName(dbComponent,hasMappingType || (dbComponent && !hasRepositoryDbSchema));
  metaView.setShowTalendTypeColumn(!eltComponent);
  metaView.setShowPatternColumn(!eltComponent);
  metaView.setShowOriginalLength(isEBCDIC);
  if (isEBCDIC) {
    metaView.setShowOriginalLength(true);
    List<String> fieldList=new ArrayList<String>();
    fieldList.add(""String_Node_Str"");
    fieldList.add(""String_Node_Str"");
    metaView.setAdditionalFields(fieldList);
  }
}","public static void initializeMetadataTableView(MetadataTableEditorView metaView,INode node,IMetadataTable metadataTable){
  boolean dbComponent=false;
  boolean hasMappingType=false;
  boolean eltComponent=false;
  boolean hasRepositoryDbSchema=false;
  boolean isEBCDIC=false;
  if (node != null && node.getComponent() != null) {
    eltComponent=node.isELTComponent();
    isEBCDIC=node.getComponent().getName().contains(""String_Node_Str"");
    if (node.getComponent().getOriginalFamilyName().startsWith(DATABASE_LABEL) || eltComponent || isEBCDIC) {
      dbComponent=true && !isEBCDIC;
      for (      IElementParameter currentParam : node.getElementParameters()) {
        if (currentParam.getFieldType().equals(EParameterFieldType.MAPPING_TYPE)) {
          metaView.setCurrentDbms((String)currentParam.getValue());
          hasMappingType=true;
        }
      }
      IElementParameter schemaParam=node.getElementParameter(""String_Node_Str"");
      if (!hasMappingType && schemaParam != null) {
        String schemaType=(String)schemaParam.getValue();
        if (schemaType.equals(""String_Node_Str"")) {
          String metaRepositoryName=(String)node.getElementParameter(""String_Node_Str"").getValue();
          Connection connection=MetadataToolHelper.getConnectionFromRepository(metaRepositoryName);
          boolean isDatabaseConnection=connection instanceof DatabaseConnection;
          boolean isGenericSchemaConnection=connection instanceof GenericSchemaConnection;
          if (isDatabaseConnection || isGenericSchemaConnection) {
            hasRepositoryDbSchema=true;
            for (            IMetadataColumn column : metadataTable.getListColumns()) {
              if ((column.getType() == ""String_Node_Str"") || (column.getType() == null)) {
                hasRepositoryDbSchema=false;
              }
            }
            String componentDbType=""String_Node_Str"";
            for (            IElementParameter param : (List<IElementParameter>)node.getElementParameters()) {
              if (param.getRepositoryValue() != null) {
                if (param.getRepositoryValue().equals(""String_Node_Str"")) {
                  componentDbType=(String)param.getValue();
                }
              }
            }
            if (!EDatabaseTypeName.supportDbType(componentDbType)) {
              hasRepositoryDbSchema=false;
            }
            String componentProduct=EDatabaseTypeName.getTypeFromDbType(componentDbType).getProduct();
            String connectionProduct=null;
            if (isDatabaseConnection) {
              connectionProduct=((DatabaseConnection)connection).getProductId();
              if (!componentProduct.equals(connectionProduct)) {
                hasRepositoryDbSchema=false;
              }
 else {
                metaView.setCurrentDbms(((DatabaseConnection)connection).getDbmsId());
              }
            }
 else             if (isGenericSchemaConnection) {
              String mappingTypeId=((GenericSchemaConnection)connection).getMappingTypeId();
              if (mappingTypeId != null) {
                connectionProduct=mappingTypeId;
                metaView.setCurrentDbms(connectionProduct);
              }
            }
          }
        }
      }
    }
  }
 else {
    eltComponent=false;
  }
  metaView.setShowDbTypeColumn(hasMappingType || eltComponent,false,hasMappingType || (dbComponent && !hasRepositoryDbSchema));
  metaView.setShowDbColumnName(dbComponent,hasMappingType || (dbComponent && !hasRepositoryDbSchema));
  metaView.setShowTalendTypeColumn(!eltComponent);
  metaView.setShowPatternColumn(!eltComponent);
  metaView.setShowOriginalLength(isEBCDIC);
  if (isEBCDIC) {
    metaView.setShowOriginalLength(true);
    List<String> fieldList=new ArrayList<String>();
    fieldList.add(""String_Node_Str"");
    fieldList.add(""String_Node_Str"");
    metaView.setAdditionalFields(fieldList);
  }
  if (node != null && metadataTable != null && metadataTable instanceof MetadataTable) {
    ((MetadataTable)metadataTable).setRepository(metaView.isRepository());
  }
}",0.978973717146433
127497,"/** 
 * DOC ycbai Comment method ""isCurrentBeanHasType"".
 * @param element
 * @param typeId
 * @return
 */
public boolean isCurrentBeanHasType(Object element,String typeId){
  if (element == null || typeId == null)   return false;
  String talendType=getTalendTypeAccessor().get((B)element);
  return typeId.equals(talendType);
}","/** 
 * DOC ycbai Comment method ""isCurrentBeanHasType"".
 * @param element
 * @param typeId
 * @return
 */
public boolean isCurrentBeanHasType(Object element,String typeId){
  if (element == null || typeId == null) {
    return false;
  }
  String talendType=getTalendTypeAccessor().get((B)element);
  return typeId.equals(talendType);
}",0.987987987987988
127498,"/** 
 * DOC amaumont Comment method ""configurePatternColumn"".
 * @param tableViewerCreator
 */
protected void configurePatternColumn(TableViewerCreator<B> tableViewerCreator){
  if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA && showPatternColumn) {
    final TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
    String patternTitle=Messages.getString(""String_Node_Str"");
    column.setTitle(patternTitle);
    column.setToolTipHeader(patternTitle);
    column.setId(ID_COLUMN_PATTERN);
    column.setBeanPropertyAccessors(getPatternAccessor());
    column.setModifiable(!isReadOnly());
    column.setWeight(16);
    final ColumnCellModifier columnCellModifier=new ColumnCellModifier(column){
      public boolean canModify(      Object bean){
        boolean typeIsDate=currentBeanHasJavaDateType(bean) && !isReadOnly();
        boolean typeIsDynamic=isCurrentBeanHasType(bean,""String_Node_Str"") && !isReadOnly();
        return typeIsDate || typeIsDynamic;
      }
    }
;
    column.setColorProvider(new IColumnColorProvider(){
      public Color getBackgroundColor(      Object bean){
        if (!columnCellModifier.canModify(bean)) {
          return READONLY_CELL_BG_COLOR;
        }
        return null;
      }
      public Color getForegroundColor(      Object bean){
        return null;
      }
    }
);
    column.setLabelProvider(new IColumnLabelProvider(){
      public String getLabel(      Object bean){
        if (!currentBeanHasJavaDateType(bean) && !isCurrentBeanHasType(bean,""String_Node_Str"")) {
          return ""String_Node_Str"";
        }
        return null;
      }
    }
);
    column.setColumnCellModifier(columnCellModifier);
    JavaSimpleDateFormatProposalProvider proposalProvider=new JavaSimpleDateFormatProposalProvider();
    TextCellEditorWithProposal patternCellEditor=new TextCellEditorWithProposal(tableViewerCreator.getTable(),column);
    ContentProposalAdapterExtended contentProposalAdapter=patternCellEditor.getContentProposalAdapter();
    contentProposalAdapter.setFilterStyle(ContentProposalAdapterExtended.FILTER_NONE);
    contentProposalAdapter.setProposalAcceptanceStyle(ContentProposalAdapterExtended.PROPOSAL_INSERT);
    patternCellEditor.setContentProposalProvider(proposalProvider);
    column.setCellEditor(patternCellEditor,CellEditorValueAdapterFactory.getNullToEmptyStringTextAdapater());
  }
}","/** 
 * DOC amaumont Comment method ""configurePatternColumn"".
 * @param tableViewerCreator
 */
protected void configurePatternColumn(TableViewerCreator<B> tableViewerCreator){
  if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA && showPatternColumn) {
    final TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
    String patternTitle=Messages.getString(""String_Node_Str"");
    column.setTitle(patternTitle);
    column.setToolTipHeader(patternTitle);
    column.setId(ID_COLUMN_PATTERN);
    column.setBeanPropertyAccessors(getPatternAccessor());
    column.setModifiable(!isReadOnly());
    column.setWeight(16);
    final ColumnCellModifier columnCellModifier=new ColumnCellModifier(column){
      @Override public boolean canModify(      Object bean){
        boolean typeIsDate=currentBeanHasJavaDateType(bean) && !isReadOnly();
        boolean typeIsDynamic=isCurrentBeanHasType(bean,""String_Node_Str"") && !isReadOnly();
        return typeIsDate || typeIsDynamic;
      }
    }
;
    column.setColorProvider(new IColumnColorProvider(){
      public Color getBackgroundColor(      Object bean){
        if (!columnCellModifier.canModify(bean)) {
          return READONLY_CELL_BG_COLOR;
        }
        return null;
      }
      public Color getForegroundColor(      Object bean){
        return null;
      }
    }
);
    column.setLabelProvider(new IColumnLabelProvider(){
      public String getLabel(      Object bean){
        if (!currentBeanHasJavaDateType(bean) && !isCurrentBeanHasType(bean,""String_Node_Str"")) {
          return ""String_Node_Str"";
        }
        return null;
      }
    }
);
    column.setColumnCellModifier(columnCellModifier);
    JavaSimpleDateFormatProposalProvider proposalProvider=new JavaSimpleDateFormatProposalProvider();
    TextCellEditorWithProposal patternCellEditor=new TextCellEditorWithProposal(tableViewerCreator.getTable(),column);
    ContentProposalAdapterExtended contentProposalAdapter=patternCellEditor.getContentProposalAdapter();
    contentProposalAdapter.setFilterStyle(ContentProposalAdapterExtended.FILTER_NONE);
    contentProposalAdapter.setProposalAcceptanceStyle(ContentProposalAdapterExtended.PROPOSAL_INSERT);
    patternCellEditor.setContentProposalProvider(proposalProvider);
    column.setCellEditor(patternCellEditor,CellEditorValueAdapterFactory.getNullToEmptyStringTextAdapater());
  }
}",0.9979244499792445
127499,"/** 
 * DOC ocarbone Comment method ""setGridDataSize"".
 * @param minimumWidth
 * @param minimumHeight
 */
public void setGridDataSize(final int minimumWidth,final int minimumHeight){
  getMainComposite().setSize(minimumWidth,minimumHeight);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.minimumWidth=minimumWidth;
  gridData.minimumHeight=minimumHeight;
  getMainComposite().setLayoutData(gridData);
}","/** 
 * DOC ocarbone Comment method ""setGridDataSize"".
 * @param minimumWidth
 * @param minimumHeight
 */
@Override public void setGridDataSize(final int minimumWidth,final int minimumHeight){
  getMainComposite().setSize(minimumWidth,minimumHeight);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.minimumWidth=minimumWidth;
  gridData.minimumHeight=minimumHeight;
  getMainComposite().setLayoutData(gridData);
}",0.9882352941176472
127500,public boolean isSAPNode(final INode node);,public boolean isSAPNode(final RepositoryNode node);,0.8842105263157894
127501,"@Override public void handleEvent(Event event){
  TreeItem treeItem=(TreeItem)event.item;
  for (  TreeItem item : treeItem.getItems()) {
    if (item.getData() != null) {
      TableNode node=(TableNode)item.getData();
      if (useProvider()) {
        if (node.getType() == provider.getRunnableAccessNodeType() || node.getType() == TableNode.COLUMN_FAMILY) {
          if (isExistTable(node)) {
            item.setChecked(true);
          }
 else {
            item.setChecked(false);
          }
        }
      }
 else       if (node.getType() == TableNode.TABLE) {
        if (isExistTable(node)) {
          item.setChecked(true);
        }
 else {
          item.setChecked(false);
        }
      }
 else {
        item.setGrayed(item.getChecked());
      }
    }
  }
}","@Override public void handleEvent(Event event){
  TreeItem treeItem=(TreeItem)event.item;
  boolean needUpdate=treeItem.getChecked();
  boolean firstExpandForSchema=false;
  if (!mapCheckState.isEmpty()) {
    firstExpandForSchema=mapCheckState.get(treeItem.getText());
  }
  for (  TreeItem item : treeItem.getItems()) {
    if (item.getData() != null) {
      TableNode node=(TableNode)item.getData();
      if (useProvider()) {
        if (node.getType() == provider.getRunnableAccessNodeType() || node.getType() == TableNode.COLUMN_FAMILY) {
          if (isExistTable(node)) {
            item.setChecked(true);
          }
 else {
            item.setChecked(false);
          }
        }
      }
 else       if (node.getType() == TableNode.TABLE) {
        if ((firstExpand || firstExpandForSchema) && needUpdate && item.getData() != null) {
          updateItem(item,true,true);
        }
 else         if (isExistTable(node)) {
          item.setChecked(true);
        }
 else {
          item.setChecked(false);
        }
      }
 else       if (firstExpand && needUpdate && node.getType() == TableNode.SCHEMA) {
        item.setChecked(true);
        mapCheckState.put(item.getText(),firstExpand);
      }
 else {
        item.setGrayed(item.getChecked());
      }
    }
  }
  if (firstExpandForSchema) {
    mapCheckState.put(treeItem.getText(),false);
  }
  if (firstExpand) {
    firstExpand=false;
  }
}",0.706417842512517
127502,"/** 
 * DOC ggu Comment method ""isKeywords"".
 * @param itemName
 * @return
 */
private boolean isKeywords(String itemName){
  if (property != null) {
    Item item=property.getItem();
    if (item instanceof ProcessItem || item instanceof JobletProcessItem || item instanceof RoutineItem) {
      return KeywordsValidator.isKeyword(itemName);
    }
  }
  return false;
}","/** 
 * DOC ggu Comment method ""isKeywords"".
 * @param itemName
 * @return
 */
protected boolean isKeywords(String itemName){
  if (property != null) {
    Item item=property.getItem();
    if (item instanceof ProcessItem || item instanceof JobletProcessItem || item instanceof RoutineItem) {
      return KeywordsValidator.isKeyword(itemName);
    }
  }
  return false;
}",0.9838274932614556
127503,"protected void evaluateTextField(){
  ERepositoryObjectType type=ERepositoryObjectType.getItemType(this.property.getItem());
  if (readOnly) {
    return;
  }
  if (nameText == null || nameText.isDisposed()) {
    return;
  }
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().startsWith(""String_Node_Str"") || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (type != null && !type.getType().equals(""String_Node_Str"") && (isKeywords(nameText.getText()) || ""String_Node_Str"".equalsIgnoreCase(nameText.getText()))) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (type != null && type.getType().equals(""String_Node_Str"") && (JavaConventions.validateClassFileName(nameText.getText() + CLASS,JavaCore.getOption(JavaCore.COMPILER_SOURCE),JavaCore.getOption(JavaCore.COMPILER_COMPLIANCE)).getSeverity() == IStatus.ERROR || ""String_Node_Str"".equalsIgnoreCase(nameText.getText()))) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(getPropertyLabel(StringUtils.trimToNull(nameText.getText())));
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
    property.setModificationDate(new Date());
  }
  updatePageStatus();
}","protected void evaluateTextField(){
  if (readOnly) {
    return;
  }
  if (nameText == null || nameText.isDisposed()) {
    return;
  }
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (isKeywords(nameText.getText()) || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(getPropertyLabel(StringUtils.trimToNull(nameText.getText())));
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
    property.setModificationDate(new Date());
  }
  updatePageStatus();
}",0.6001174398120963
127504,"public static List<FOXTreeNode> getFoxTreeNodes(String filePath,String selectedEntity,boolean forMDM){
  if (selectedEntity == null || ""String_Node_Str"".equals(selectedEntity)) {
    return getFoxTreeNodes(filePath);
  }
 else {
    List<FOXTreeNode> list=new ArrayList<FOXTreeNode>();
    if (filePath == null) {
      return list;
    }
    List<String> attList=new ArrayList<String>();
    attList.add(selectedEntity);
    try {
      ATreeNode treeNode=SchemaPopulationUtil.getSchemaTree(filePath,true,forMDM,0,attList);
      ATreeNode selectedNode=null;
      if (treeNode != null) {
        if (forMDM) {
          if (selectedEntity.equals(treeNode.getValue())) {
            selectedNode=treeNode;
          }
        }
        for (        Object obj : treeNode.getChildren()) {
          if (obj instanceof ATreeNode) {
            ATreeNode node=(ATreeNode)obj;
            if (selectedEntity.equals(node.getValue())) {
              selectedNode=node;
              break;
            }
          }
        }
        if (selectedNode != null) {
          String rootName=""String_Node_Str"";
          if (treeNode.getValue() instanceof String) {
            rootName+=""String_Node_Str"" + treeNode.getValue();
          }
          FOXTreeNode root=cloneATreeNode(treeNode,rootName,XmlUtil.isXSDFile(filePath));
          if (root instanceof Element) {
            root.setParent(null);
            list.add(root);
          }
        }
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    return list;
  }
}","public static List<FOXTreeNode> getFoxTreeNodes(String filePath,String selectedEntity,boolean forMDM){
  List<String> attList=new ArrayList<String>();
  attList.add(selectedEntity);
  List<FOXTreeNode> list=new ArrayList<FOXTreeNode>();
  try {
    XSDSchema xsdSchema=TreeUtil.getXSDSchema(filePath);
    List<ATreeNode> rootNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
    ATreeNode selectedNode=null;
    if (!rootNodes.isEmpty()) {
      for (      Object obj : rootNodes) {
        ATreeNode node=(ATreeNode)obj;
        if (node.getValue() != null && node.getValue().equals(selectedEntity)) {
          selectedNode=node;
          break;
        }
      }
      if (selectedNode != null) {
        return TreeUtil.getFoxTreeNodesByRootNode(xsdSchema,selectedNode,false);
      }
    }
    if (filePath == null) {
      return list;
    }
    if (selectedEntity == null || ""String_Node_Str"".equals(selectedEntity)) {
      return getFoxTreeNodes(filePath);
    }
 else {
      ATreeNode treeNode=SchemaPopulationUtil.getSchemaTree(filePath,true,forMDM,0,attList);
      if (treeNode != null) {
        if (forMDM) {
          if (selectedEntity.equals(treeNode.getValue())) {
            selectedNode=treeNode;
          }
        }
        for (        Object obj : treeNode.getChildren()) {
          if (obj instanceof ATreeNode) {
            ATreeNode node=(ATreeNode)obj;
            if (selectedEntity.equals(node.getValue())) {
              selectedNode=node;
              break;
            }
          }
        }
        if (selectedNode != null) {
          String rootName=""String_Node_Str"";
          if (treeNode.getValue() instanceof String) {
            rootName+=""String_Node_Str"" + treeNode.getValue();
          }
          FOXTreeNode root=cloneATreeNode(treeNode,rootName,XmlUtil.isXSDFile(filePath));
          if (root instanceof Element) {
            root.setParent(null);
            list.add(root);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return list;
}",0.7110497237569061
127505,"public void applyEditorValue(){
  String text=getControl().getText();
  onValueChanged(text,true,property);
}","@Override public void applyEditorValue(){
  String text=getControl().getText();
  onValueChanged(text,true,property);
}",0.956140350877193
127506,"public List<FOXTreeNode> getTreeData(){
  return treeData;
}","@Override public List<FOXTreeNode> getTreeData(){
  return treeData;
}",0.9230769230769232
127507,"private void initLinker(TreeItem node,TableItem[] tableItems){
  FOXTreeNode treeNode=(FOXTreeNode)node.getData();
  IMetadataColumn column=treeNode.getColumn();
  if (column != null) {
    for (int i=0; i < tableItems.length; i++) {
      MetadataColumn metadataColumn=(MetadataColumn)tableItems[i].getData();
      if (metadataColumn.getLabel().equals(column.getLabel())) {
        linker.addLoopLink(tableItems[i],tableItems[i].getData(),xmlViewer.getTree(),treeNode,true);
        break;
      }
    }
  }
  TreeItem[] children=node.getItems();
  for (int i=0; i < children.length; i++) {
    initLinker(children[i],tableItems);
  }
}","private void initLinker(TreeItem node,TableItem[] tableItems){
  FOXTreeNode treeNode=(FOXTreeNode)node.getData();
  IMetadataColumn column=treeNode.getColumn();
  if (column != null) {
    for (    TableItem tableItem : tableItems) {
      MetadataColumn metadataColumn=(MetadataColumn)tableItem.getData();
      if (metadataColumn.getLabel().equals(column.getLabel())) {
        linker.addLoopLink(tableItem,tableItem.getData(),xmlViewer.getTree(),treeNode,true);
        break;
      }
    }
  }
  TreeItem[] children=node.getItems();
  for (  TreeItem element : children) {
    initLinker(element,tableItems);
  }
}",0.7557677008750995
127508,"private void guessInputSchemaColumns(FOXTreeNode node,boolean findFirstLoop){
  String currentUniqueName=""String_Node_Str"";
  for (  FOXTreeNode current : node.getChildren()) {
    MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    String label=current.getLabel();
    if (!exsitColumnNames.contains(label)) {
      this.exsitColumnNames.add(label);
      column.setLabel(label);
    }
 else {
      label=getStringIndexed(label);
      this.exsitColumnNames.add(label);
      column.setLabel(label);
    }
    column.setTalendType(CoreRuntimePlugin.getInstance().getCoreService().getPreferenceStore().getString(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE));
    tempMetadataTable.getColumns().add(column);
    IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn(column);
    List<String> uniqueNames=node.getUniqueNames();
    if (!uniqueNames.isEmpty()) {
      currentUniqueName=uniqueNames.get(0);
    }
    if (currentUniqueName != null && !findFirstLoop) {
      for (      FOXTreeNode subNode : node.getChildren()) {
        if (subNode.getLabel() != null && currentUniqueName.equals(subNode.getLabel())) {
          subNode.setLoop(true);
          findFirstLoop=true;
          break;
        }
      }
    }
    current.setColumn(metaColumn);
    current.setDataType(metaColumn.getTalendType());
    guessInputSchemaColumns(current,findFirstLoop);
  }
}","private void guessInputSchemaColumns(FOXTreeNode node,boolean findFirstLoop){
  for (  FOXTreeNode current : node.getChildren()) {
    MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    String label=current.getLabel();
    if (!exsitColumnNames.contains(label)) {
      this.exsitColumnNames.add(label);
      column.setLabel(label);
    }
 else {
      label=getStringIndexed(label);
      this.exsitColumnNames.add(label);
      column.setLabel(label);
    }
    column.setTalendType(current.getDataType());
    tempMetadataTable.getColumns().add(column);
    IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn(column);
    if (current instanceof Element && !findFirstLoop) {
      current.setLoop(true);
      findFirstLoop=true;
    }
    current.setColumn(metaColumn);
    guessInputSchemaColumns(current,findFirstLoop);
  }
}",0.6710411198600175
127509,"protected FOXTreeNode addElement(FOXTreeNode current,String currentPath,String newPath,String defaultValue){
  String name=newPath.substring(newPath.lastIndexOf(""String_Node_Str"") + 1);
  String parentPath=newPath.substring(0,newPath.lastIndexOf(""String_Node_Str""));
  FOXTreeNode temp=new Element(name,defaultValue);
  if (current == null) {
    return temp;
  }
  if (currentPath.equals(parentPath)) {
    current.addChild(temp);
  }
 else {
    String[] nods=currentPath.split(""String_Node_Str"");
    String[] newNods=parentPath.split(""String_Node_Str"");
    int parentLevel=0;
    int checkLength=nods.length < newNods.length ? nods.length : newNods.length;
    for (int i=1; i < checkLength; i++) {
      if (nods[i].equals(newNods[i])) {
        parentLevel=i;
      }
    }
    FOXTreeNode parent=current;
    for (int i=0; i < nods.length - (parentLevel + 1); i++) {
      FOXTreeNode tmpParent=parent.getParent();
      if (tmpParent == null) {
        break;
      }
      parent=tmpParent;
    }
    if (parent != null)     parent.addChild(temp);
  }
  return temp;
}","protected FOXTreeNode addElement(FOXTreeNode current,String currentPath,String newPath,String defaultValue){
  String name=newPath.substring(newPath.lastIndexOf(""String_Node_Str"") + 1);
  String parentPath=newPath.substring(0,newPath.lastIndexOf(""String_Node_Str""));
  FOXTreeNode temp=new Element(name,defaultValue);
  if (current == null) {
    return temp;
  }
  if (currentPath.equals(parentPath)) {
    current.addChild(temp);
  }
 else {
    String[] nods=currentPath.split(""String_Node_Str"");
    String[] newNods=parentPath.split(""String_Node_Str"");
    int parentLevel=0;
    int checkLength=nods.length < newNods.length ? nods.length : newNods.length;
    for (int i=1; i < checkLength; i++) {
      if (nods[i].equals(newNods[i])) {
        parentLevel=i;
      }
    }
    FOXTreeNode parent=current;
    for (int i=0; i < nods.length - (parentLevel + 1); i++) {
      FOXTreeNode tmpParent=parent.getParent();
      if (tmpParent == null) {
        break;
      }
      parent=tmpParent;
    }
    if (parent != null) {
      parent.addChild(temp);
    }
  }
  return temp;
}",0.9833795013850416
127510,"public void menuAboutToShow(IMenuManager manager){
  fillContextMenu(manager);
}","@Override public void menuAboutToShow(IMenuManager manager){
  fillContextMenu(manager);
}",0.9411764705882352
127511,"public MetadataTable getMetadataTable(){
  return tempMetadataTable;
}","@Override public MetadataTable getMetadataTable(){
  return tempMetadataTable;
}",0.9333333333333332
127512,"public void setSelectedText(String label){
  selectedText=label;
}","@Override public void setSelectedText(String label){
  selectedText=label;
}",0.9295774647887324
127513,"public void updateConnection(){
  ConnectionHelper.getTables(getConnection());
  EList root=concept.getRoot();
  EList loop=concept.getLoop();
  EList group=concept.getGroup();
  root.clear();
  loop.clear();
  group.clear();
  List<FOXTreeNode> node=(List<FOXTreeNode>)xmlViewer.getInput();
  FOXTreeNode foxTreeNode=node.get(0);
  if (foxTreeNode != null) {
    initNodeOrder(foxTreeNode);
    tableLoader((Element)foxTreeNode,""String_Node_Str"",root,foxTreeNode.getDefaultValue());
    Element loopNode=(Element)TreeUtil.getLoopNode(foxTreeNode);
    if (loopNode != null) {
      String path=TreeUtil.getPath(loopNode);
      tableLoader(loopNode,path.substring(0,path.lastIndexOf(""String_Node_Str"")),loop,loopNode.getDefaultValue());
    }
    Element groupNode=(Element)TreeUtil.getGroupNode(foxTreeNode);
    if (groupNode != null) {
      String path=TreeUtil.getPath(groupNode);
      tableLoader(groupNode,path.substring(0,path.lastIndexOf(""String_Node_Str"")),group,groupNode.getDefaultValue());
    }
  }
}","@Override public void updateConnection(){
  ConnectionHelper.getTables(getConnection());
  EList root=concept.getRoot();
  EList loop=concept.getLoop();
  EList group=concept.getGroup();
  root.clear();
  loop.clear();
  group.clear();
  List<FOXTreeNode> node=(List<FOXTreeNode>)xmlViewer.getInput();
  FOXTreeNode foxTreeNode=node.get(0);
  if (foxTreeNode != null) {
    initNodeOrder(foxTreeNode);
    tableLoader((Element)foxTreeNode,""String_Node_Str"",root,foxTreeNode.getDefaultValue());
    Element loopNode=(Element)TreeUtil.getLoopNode(foxTreeNode);
    if (loopNode != null) {
      String path=TreeUtil.getPath(loopNode);
      tableLoader(loopNode,path.substring(0,path.lastIndexOf(""String_Node_Str"")),loop,loopNode.getDefaultValue());
    }
    Element groupNode=(Element)TreeUtil.getGroupNode(foxTreeNode);
    if (groupNode != null) {
      String path=TreeUtil.getPath(groupNode);
      tableLoader(groupNode,path.substring(0,path.lastIndexOf(""String_Node_Str"")),group,groupNode.getDefaultValue());
    }
  }
}",0.9951028403525954
127514,"public void editorValueChanged(boolean oldValidState,boolean newValidState){
  onValueChanged(getControl().getText(),false,property);
}","@Override public void editorValueChanged(boolean oldValidState,boolean newValidState){
  onValueChanged(getControl().getText(),false,property);
}",0.9642857142857144
127515,"public void cancelEditor(){
}","@Override public void cancelEditor(){
}",0.8529411764705882
127516,"public TableViewer getSchemaViewer(){
  return this.schemaViewer;
}","@Override public TableViewer getSchemaViewer(){
  return this.schemaViewer;
}",0.9305555555555556
127517,"public void redrawLinkers(){
  linker.removeAllLinks();
  TreeItem root=xmlViewer.getTree().getItem(0);
  TableItem[] tableItems=schemaViewer.getTable().getItems();
  initLinker(root,tableItems);
  if (linker.linkSize() == 0) {
    linker.updateLinksStyleAndControlsSelection(xmlViewer.getTree(),true);
  }
}","@Override public void redrawLinkers(){
  linker.removeAllLinks();
  TreeItem root=xmlViewer.getTree().getItem(0);
  TableItem[] tableItems=schemaViewer.getTable().getItems();
  initLinker(root,tableItems);
  if (linker.linkSize() == 0) {
    linker.updateLinksStyleAndControlsSelection(xmlViewer.getTree(),true);
  }
}",0.9840255591054312
127518,"public void selectionChanged(SelectionChangedEvent event){
}","@Override public void selectionChanged(SelectionChangedEvent event){
}",0.9230769230769232
127519,"public void updateStatus(){
  checkFieldsValue();
}","@Override public void updateStatus(){
  checkFieldsValue();
}",0.9107142857142856
127520,"private void addXmlFileViewer(final Composite mainComposite,final int width,final int height){
  final Group group=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),height);
  GridData data=new GridData(GridData.FILL_BOTH);
  Composite composite=new Composite(group,SWT.NONE);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(data);
  xmlViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION| SWT.MULTI);
  xmlViewer.getControl().setLayoutData(data);
  xmlViewer.setUseHashlookup(true);
  Tree tree=xmlViewer.getTree();
  if (isReadOnly()) {
    tree.setEnabled(false);
  }
  tree.setLinesVisible(true);
  tree.setBackground(tree.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  TreeColumn column1=new TreeColumn(tree,SWT.LEFT);
  column1.setText(Messages.getString(""String_Node_Str""));
  column1.setWidth(120);
  TreeColumn column2=new TreeColumn(tree,SWT.CENTER);
  column2.setText(Messages.getString(""String_Node_Str""));
  column2.setWidth(100);
  TreeColumn column3=new TreeColumn(tree,SWT.CENTER);
  column3.setText(Messages.getString(""String_Node_Str""));
  column3.setWidth(100);
  TreeColumn column4=new TreeColumn(tree,SWT.CENTER);
  column4.setText(Messages.getString(""String_Node_Str""));
  column4.setWidth(100);
  tree.setHeaderVisible(true);
  XmlFileTreeViewerProvider provider=new XmlFileTreeViewerProvider();
  xmlViewer.setLabelProvider(provider);
  xmlViewer.setColumnProperties(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  xmlViewer.setContentProvider(provider);
  xmlViewer.expandAll();
  createAction();
  MenuManager menuMgr=new MenuManager(""String_Node_Str"");
  menuMgr.setRemoveAllWhenShown(true);
  menuMgr.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager manager){
      fillContextMenu(manager);
    }
  }
);
  Menu menu=menuMgr.createContextMenu(xmlViewer.getControl());
  xmlViewer.getControl().setMenu(menu);
  xmlViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
    }
  }
);
  initToolBar(composite);
}","private void addXmlFileViewer(final Composite mainComposite,final int width,final int height){
  final Group group=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),height);
  GridData data=new GridData(GridData.FILL_BOTH);
  Composite composite=new Composite(group,SWT.NONE);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(data);
  xmlViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION| SWT.MULTI);
  xmlViewer.getControl().setLayoutData(data);
  xmlViewer.setUseHashlookup(true);
  Tree tree=xmlViewer.getTree();
  if (isReadOnly()) {
    tree.setEnabled(false);
  }
  tree.setLinesVisible(true);
  tree.setBackground(tree.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  TreeColumn column1=new TreeColumn(tree,SWT.LEFT);
  column1.setText(Messages.getString(""String_Node_Str""));
  column1.setWidth(120);
  TreeColumn column2=new TreeColumn(tree,SWT.CENTER);
  column2.setText(Messages.getString(""String_Node_Str""));
  column2.setWidth(100);
  TreeColumn column3=new TreeColumn(tree,SWT.CENTER);
  column3.setText(Messages.getString(""String_Node_Str""));
  column3.setWidth(100);
  TreeColumn column4=new TreeColumn(tree,SWT.CENTER);
  column4.setText(Messages.getString(""String_Node_Str""));
  column4.setWidth(100);
  tree.setHeaderVisible(true);
  XmlFileTreeViewerProvider provider=new XmlFileTreeViewerProvider();
  xmlViewer.setLabelProvider(provider);
  xmlViewer.setColumnProperties(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  xmlViewer.setContentProvider(provider);
  xmlViewer.expandAll();
  createAction();
  MenuManager menuMgr=new MenuManager(""String_Node_Str"");
  menuMgr.setRemoveAllWhenShown(true);
  menuMgr.addMenuListener(new IMenuListener(){
    @Override public void menuAboutToShow(    IMenuManager manager){
      fillContextMenu(manager);
    }
  }
);
  Menu menu=menuMgr.createContextMenu(xmlViewer.getControl());
  xmlViewer.getControl().setMenu(menu);
  xmlViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
    }
  }
);
  initToolBar(composite);
}",0.9954296160877514
127521,"protected void createTable(){
  if (concept == null) {
    return;
  }
  if (metadataTable == null) {
    metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    metadataTable.setId(factory.getNextId());
  }
  metadataTable.setLabel(concept.getLabel());
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  List<ConceptTarget> targetList=concept.getConceptTargets();
  List<MetadataColumn> metadataColumns=new ArrayList<MetadataColumn>();
  for (  ConceptTarget target : targetList) {
    String relativeXpath=target.getRelativeLoopExpression();
    String fullPath=target.getSchema().getLoopExpression();
    if (fullPath.contains(""String_Node_Str"") && metadataTable.getSourceName() == null) {
      String source=fullPath.split(""String_Node_Str"")[1];
      metadataTable.setSourceName(source);
    }
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
      fullPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fullPath));
    }
    if (relativeXpath != null) {
      if (!""String_Node_Str"".equals(relativeXpath)) {
        String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
        if (relatedSplitedPaths.length > 1) {
          int pathsToRemove=relatedSplitedPaths.length - 1;
          String[] fullPathSplited=fullPath.split(""String_Node_Str"");
          fullPath=""String_Node_Str"";
          for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
            fullPath+=""String_Node_Str"" + fullPathSplited[i];
          }
          fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
        }
 else {
          fullPath+=""String_Node_Str"" + relativeXpath;
        }
      }
    }
    TreeItem treeItem=treePopulator.getTreeItem(fullPath);
    if (treeItem != null) {
      ATreeNode curNode=(ATreeNode)treeItem.getData();
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setLabel(target.getTargetName());
      if (curNode == null || retriever == null) {
        metadataColumn.setTalendType(MetadataTalendType.getDefaultTalendType());
      }
 else {
        metadataColumn.setTalendType(retriever.getDefaultSelectedTalendType(""String_Node_Str"" + curNode.getOriginalDataType()));
      }
      int index=removeOriginalColumn(target.getTargetName());
      if (index < 0)       metadataTable.getColumns().add(metadataColumn);
 else       metadataTable.getColumns().add(index,metadataColumn);
      metadataColumns.add(metadataColumn);
    }
  }
  if (!ConnectionHelper.getTables(getConnection()).contains(metadataTable)) {
    TdXmlSchema d=(TdXmlSchema)ConnectionHelper.getPackage(((MDMConnection)connectionItem.getConnection()).getDatacluster(),connectionItem.getConnection(),TdXmlSchema.class);
    if (d != null) {
      d.getOwnedElement().add(metadataTable);
    }
 else {
      TdXmlSchema newXmlDoc=XmlFactory.eINSTANCE.createTdXmlSchema();
      newXmlDoc.setName(((MDMConnection)connectionItem.getConnection()).getDatacluster());
      ConnectionHelper.addPackage(newXmlDoc,connectionItem.getConnection());
      PackageHelper.addMetadataTable(metadataTable,newXmlDoc);
    }
  }
}","@Override protected void createTable(){
  if (concept == null) {
    return;
  }
  if (metadataTable == null) {
    metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    metadataTable.setId(factory.getNextId());
  }
  metadataTable.setLabel(concept.getLabel());
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  List<ConceptTarget> targetList=concept.getConceptTargets();
  List<MetadataColumn> metadataColumns=new ArrayList<MetadataColumn>();
  for (  ConceptTarget target : targetList) {
    String relativeXpath=target.getRelativeLoopExpression();
    String fullPath=target.getSchema().getLoopExpression();
    if (fullPath.contains(""String_Node_Str"") && metadataTable.getSourceName() == null) {
      String source=fullPath.split(""String_Node_Str"")[1];
      metadataTable.setSourceName(source);
    }
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
      fullPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fullPath));
    }
    if (relativeXpath != null) {
      if (!""String_Node_Str"".equals(relativeXpath)) {
        String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
        if (relatedSplitedPaths.length > 1) {
          int pathsToRemove=relatedSplitedPaths.length - 1;
          String[] fullPathSplited=fullPath.split(""String_Node_Str"");
          fullPath=""String_Node_Str"";
          for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
            fullPath+=""String_Node_Str"" + fullPathSplited[i];
          }
          fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
        }
 else {
          fullPath+=""String_Node_Str"" + relativeXpath;
        }
      }
    }
    TreeItem treeItem=treePopulator.getTreeItem(fullPath);
    if (treeItem != null) {
      ATreeNode curNode=(ATreeNode)treeItem.getData();
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setLabel(target.getTargetName());
      if (curNode == null || retriever == null) {
        metadataColumn.setTalendType(MetadataTalendType.getDefaultTalendType());
      }
 else {
        String currentNodeType=curNode.getOriginalDataType();
        if (currentNodeType != null && !currentNodeType.startsWith(""String_Node_Str"")) {
          currentNodeType=""String_Node_Str"" + currentNodeType;
        }
        metadataColumn.setTalendType(retriever.getDefaultSelectedTalendType(currentNodeType));
      }
      int index=removeOriginalColumn(target.getTargetName());
      if (index < 0) {
        metadataTable.getColumns().add(metadataColumn);
      }
 else {
        metadataTable.getColumns().add(index,metadataColumn);
      }
      metadataColumns.add(metadataColumn);
    }
  }
  if (!ConnectionHelper.getTables(getConnection()).contains(metadataTable)) {
    TdXmlSchema d=(TdXmlSchema)ConnectionHelper.getPackage(((MDMConnection)connectionItem.getConnection()).getDatacluster(),connectionItem.getConnection(),TdXmlSchema.class);
    if (d != null) {
      d.getOwnedElement().add(metadataTable);
    }
 else {
      TdXmlSchema newXmlDoc=XmlFactory.eINSTANCE.createTdXmlSchema();
      newXmlDoc.setName(((MDMConnection)connectionItem.getConnection()).getDatacluster());
      ConnectionHelper.addPackage(newXmlDoc,connectionItem.getConnection());
      PackageHelper.addMetadataTable(metadataTable,newXmlDoc);
    }
  }
}",0.906689635371806
127522,"public void handleEvent(ModifiedBeanEvent<ConceptTarget> event){
  updateStatus(IStatus.OK,null);
  String msg=fieldsTableEditorView.checkColumnNames();
  if (!StringUtils.isEmpty(msg)) {
    updateStatus(IStatus.ERROR,msg);
  }
}","@Override public void handleEvent(ModifiedBeanEvent<ConceptTarget> event){
  updateStatus(IStatus.OK,null);
  String msg=fieldsTableEditorView.checkColumnNames();
  if (!StringUtils.isEmpty(msg)) {
    updateStatus(IStatus.ERROR,msg);
  }
}",0.9787234042553192
127523,"public void run(){
  handleErrorOutput(outputComposite,tabFolder,outputTabItem);
}","@Override public void run(){
  handleErrorOutput(outputComposite,tabFolder,outputTabItem);
}",0.942528735632184
127524,"public void refresh(){
  refreshPreview();
}","@Override public void refresh(){
  refreshPreview();
}",0.8979591836734694
127525,"/** 
 * addButtonControls.
 * @param cancelButton
 */
@Override protected void addUtilsButtonListeners(){
  previewButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      if (!previewButton.getText().equals(Messages.getString(""String_Node_Str""))) {
        previewButton.setText(Messages.getString(""String_Node_Str""));
        if (getConnection().getSchemas() != null && !getConnection().getSchemas().isEmpty() && ((Concept)getConnection().getSchemas().get(0)).getLoopExpression() != null && !(""String_Node_Str"").equals(((Concept)getConnection().getSchemas().get(0)).getLoopExpression()) && ((Concept)getConnection().getSchemas().get(0)).getConceptTargets() != null && !((Concept)getConnection().getSchemas().get(0)).getConceptTargets().isEmpty()) {
          refreshPreview();
        }
 else {
          previewButton.setText(Messages.getString(""String_Node_Str""));
          if (!previewButton.getEnabled()) {
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                handleErrorOutput(outputComposite,tabFolder,outputTabItem);
              }
            }
);
            log.error(Messages.getString(""String_Node_Str""));
            previewButton.setEnabled(true);
          }
 else {
            previewButton.setEnabled(false);
          }
        }
      }
 else {
        previewButton.setText(Messages.getString(""String_Node_Str""));
      }
    }
  }
);
  if (cancelButton != null) {
    cancelButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      final SelectionEvent e){
        getShell().close();
      }
    }
);
  }
}","/** 
 * addButtonControls.
 * @param cancelButton
 */
@Override protected void addUtilsButtonListeners(){
  previewButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      if (!previewButton.getText().equals(Messages.getString(""String_Node_Str""))) {
        previewButton.setText(Messages.getString(""String_Node_Str""));
        if (getConnection().getSchemas() != null && !getConnection().getSchemas().isEmpty() && getConnection().getSchemas().get(0).getLoopExpression() != null && !(""String_Node_Str"").equals(getConnection().getSchemas().get(0).getLoopExpression()) && getConnection().getSchemas().get(0).getConceptTargets() != null && !getConnection().getSchemas().get(0).getConceptTargets().isEmpty()) {
          refreshPreview();
        }
 else {
          previewButton.setText(Messages.getString(""String_Node_Str""));
          if (!previewButton.getEnabled()) {
            Display.getDefault().asyncExec(new Runnable(){
              @Override public void run(){
                handleErrorOutput(outputComposite,tabFolder,outputTabItem);
              }
            }
);
            log.error(Messages.getString(""String_Node_Str""));
            previewButton.setEnabled(true);
          }
 else {
            previewButton.setEnabled(false);
          }
        }
      }
 else {
        previewButton.setText(Messages.getString(""String_Node_Str""));
      }
    }
  }
);
  if (cancelButton != null) {
    cancelButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      final SelectionEvent e){
        getShell().close();
      }
    }
);
  }
}",0.9768545994065282
127526,"private void addGroupSchemaTarget(final Composite mainComposite,final int width,final int height){
  schemaTargetGroup=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),height);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    schemaTargetGroup.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),schemaTargetGroup,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
  schemaTargetGroup.setBackgroundMode(SWT.INHERIT_FORCE);
  CommandStackForComposite commandStack=new CommandStackForComposite(schemaTargetGroup);
  loopModel=new MDMXSDExtractorLoopModel(""String_Node_Str"");
  loopTableEditorView=new ExtractionLoopWithMDMEditorView(loopModel,schemaTargetGroup);
  loopTableEditorView.getExtendedTableViewer().setCommandStack(commandStack);
  GridData data2=new GridData(GridData.FILL_HORIZONTAL);
  data2.heightHint=90;
  final Composite loopTableEditorComposite=loopTableEditorView.getMainComposite();
  loopTableEditorComposite.setLayoutData(data2);
  loopTableEditorComposite.setBackground(null);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    loopTableEditorComposite.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),loopTableEditorComposite,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
  fieldsModel=new MDMXSDExtractorFieldModel(""String_Node_Str"");
  fieldsTableEditorView=new ExtractionFieldsWithMDMEditorView(fieldsModel,schemaTargetGroup);
  fieldsTableEditorView.getExtendedTableViewer().setCommandStack(commandStack);
  final Composite fieldTableEditorComposite=fieldsTableEditorView.getMainComposite();
  fieldTableEditorComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  fieldTableEditorComposite.setBackground(null);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    fieldTableEditorComposite.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),fieldTableEditorComposite,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
}","private void addGroupSchemaTarget(final Composite mainComposite,final int width,final int height){
  schemaTargetGroup=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),height);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    schemaTargetGroup.addListener(SWT.Paint,new Listener(){
      @Override public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),schemaTargetGroup,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
  schemaTargetGroup.setBackgroundMode(SWT.INHERIT_FORCE);
  CommandStackForComposite commandStack=new CommandStackForComposite(schemaTargetGroup);
  loopModel=new MDMXSDExtractorLoopModel(""String_Node_Str"");
  loopTableEditorView=new ExtractionLoopWithMDMEditorView(loopModel,schemaTargetGroup);
  loopTableEditorView.getExtendedTableViewer().setCommandStack(commandStack);
  GridData data2=new GridData(GridData.FILL_HORIZONTAL);
  data2.heightHint=90;
  final Composite loopTableEditorComposite=loopTableEditorView.getMainComposite();
  loopTableEditorComposite.setLayoutData(data2);
  loopTableEditorComposite.setBackground(null);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    loopTableEditorComposite.addListener(SWT.Paint,new Listener(){
      @Override public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),loopTableEditorComposite,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
  fieldsModel=new MDMXSDExtractorFieldModel(""String_Node_Str"");
  fieldsTableEditorView=new ExtractionFieldsWithMDMEditorView(fieldsModel,schemaTargetGroup);
  fieldsTableEditorView.getExtendedTableViewer().setCommandStack(commandStack);
  final Composite fieldTableEditorComposite=fieldsTableEditorView.getMainComposite();
  fieldTableEditorComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  fieldTableEditorComposite.setBackground(null);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    fieldTableEditorComposite.addListener(SWT.Paint,new Listener(){
      @Override public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),fieldTableEditorComposite,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
}",0.9940546967895364
127527,"/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  fieldsTableEditorView.getExtendedTableModel().addAfterOperationListListener(new IListenableListListener(){
    public void handleEvent(    ListenableListEvent event){
      checkFieldsValue();
    }
  }
);
  fieldsTableEditorView.getExtendedTableModel().addModifiedBeanListener(new IModifiedBeanListener<ConceptTarget>(){
    public void handleEvent(    ModifiedBeanEvent<ConceptTarget> event){
      updateStatus(IStatus.OK,null);
      String msg=fieldsTableEditorView.checkColumnNames();
      if (!StringUtils.isEmpty(msg)) {
        updateStatus(IStatus.ERROR,msg);
      }
    }
  }
);
}","/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  fieldsTableEditorView.getExtendedTableModel().addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      checkFieldsValue();
    }
  }
);
  fieldsTableEditorView.getExtendedTableModel().addModifiedBeanListener(new IModifiedBeanListener<ConceptTarget>(){
    @Override public void handleEvent(    ModifiedBeanEvent<ConceptTarget> event){
      updateStatus(IStatus.OK,null);
      String msg=fieldsTableEditorView.checkColumnNames();
      if (!StringUtils.isEmpty(msg)) {
        updateStatus(IStatus.ERROR,msg);
      }
    }
  }
);
}",0.9854862119013064
127528,"/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
    List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
    if (driverNames != null) {
      librairesManagerService.retrieve(driverNames,getJavaLibPath(),new NullProgressMonitor());
      for (      String jar : driverNames) {
        jarPathList.add(getJavaLibPath() + jar);
      }
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion)) {
        driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
      }
    }
  }
 else {
    Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
    if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        List<String> jarsToRetreive=new ArrayList<String>();
        for (        String jar : jars) {
          Path path=new Path(jar);
          if (jarsAvailable.contains(path.lastSegment())) {
            if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
              jarsToRetreive.add(path.lastSegment());
            }
            jarPathList.add(getJavaLibPath() + path.lastSegment());
          }
 else {
            jarsToRetreive.add(path.lastSegment());
            jarPathList.add(jar);
          }
        }
        librairesManagerService.retrieve(jarsToRetreive,getJavaLibPath(),new NullProgressMonitor());
      }
 else {
        Path path=new Path(driverJarPathArg);
        File driverFile=new File(driverJarPathArg);
        boolean isExist=driverFile.exists();
        if (!isExist) {
          jarPathList.add(""String_Node_Str"");
        }
 else         if (jarsAvailable.contains(path.lastSegment())) {
          String jarUnderLib=getJavaLibPath() + path.lastSegment();
          File file=new File(jarUnderLib);
          if (!file.exists()) {
            librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(jarUnderLib);
        }
 else {
          jarPathList.add(driverJarPathArg);
        }
      }
    }
 else {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        librairesManagerService.retrieve(Arrays.asList(jars),getJavaLibPath(),new NullProgressMonitor());
        for (        String jar : jars) {
          jarPathList.add(getJavaLibPath() + jar);
        }
      }
 else {
        if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
          librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
        }
        jarPathList.add(getJavaLibPath() + driverJarPathArg);
      }
    }
  }
  final String[] driverJarPath=jarPathList.toArray(new String[0]);
  if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
    driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
      ExtractMetaDataUtils.checkAccessDbq(url);
    }
  }
  List list=new ArrayList();
  ExtractMetaDataUtils.checkDBConnectionTimeout();
  if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else   if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
    if (DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass())) {
      wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
      Properties info=new Properties();
      username=username != null ? username : ""String_Node_Str"";
      pwd=pwd != null ? pwd : ""String_Node_Str"";
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      connection=wapperDriver.connect(url,info);
    }
 else {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
        DRIVER_CACHE.put(EDatabase4DriverClassName.MSSQL.getDriverClass(),wapperDriver);
      }
    }
  }
 else   if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
      loadJarRequiredByDriver(dbType,dbVersion);
    }
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else {
    try {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
 catch (    ClassNotFoundException e) {
      String errorMessage=Messages.getString(""String_Node_Str"") + driverClassName;
      if (driverJarPath != null && driverJarPath.length > 0) {
        errorMessage=errorMessage + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
        for (        String jarName : driverJarPath) {
          errorMessage=errorMessage + ""String_Node_Str"" + new Path(jarName).lastSegment();
        }
      }
      throw new MissingDriverException(errorMessage);
    }
  }
  if (connection == null) {
    throw new Exception(Messages.getString(""String_Node_Str""));
  }
  conList.add(connection);
  if (wapperDriver != null) {
    conList.add(wapperDriver);
  }
  return conList;
}","/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
    List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
    if (driverNames != null) {
      librairesManagerService.retrieve(driverNames,getJavaLibPath(),new NullProgressMonitor());
      for (      String jar : driverNames) {
        jarPathList.add(getJavaLibPath() + jar);
      }
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion)) {
        driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
      }
    }
  }
 else {
    Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
    if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        List<String> jarsToRetreive=new ArrayList<String>();
        for (        String jar : jars) {
          Path path=new Path(jar);
          if (jarsAvailable.contains(path.lastSegment())) {
            if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
              jarsToRetreive.add(path.lastSegment());
            }
            jarPathList.add(getJavaLibPath() + path.lastSegment());
          }
 else {
            jarsToRetreive.add(path.lastSegment());
            jarPathList.add(jar);
          }
        }
        librairesManagerService.retrieve(jarsToRetreive,getJavaLibPath(),new NullProgressMonitor());
      }
 else {
        Path path=new Path(driverJarPathArg);
        File driverFile=new File(driverJarPathArg);
        boolean isExist=driverFile.exists();
        if (!isExist) {
          jarPathList.add(""String_Node_Str"");
        }
 else {
          jarPathList.add(driverJarPathArg);
        }
      }
    }
 else {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        librairesManagerService.retrieve(Arrays.asList(jars),getJavaLibPath(),new NullProgressMonitor());
        for (        String jar : jars) {
          jarPathList.add(getJavaLibPath() + jar);
        }
      }
 else {
        if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
          librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
        }
        jarPathList.add(getJavaLibPath() + driverJarPathArg);
      }
    }
  }
  final String[] driverJarPath=jarPathList.toArray(new String[0]);
  if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
    driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
      ExtractMetaDataUtils.checkAccessDbq(url);
    }
  }
  List list=new ArrayList();
  ExtractMetaDataUtils.checkDBConnectionTimeout();
  if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else   if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
    if (DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass())) {
      wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
      Properties info=new Properties();
      username=username != null ? username : ""String_Node_Str"";
      pwd=pwd != null ? pwd : ""String_Node_Str"";
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      connection=wapperDriver.connect(url,info);
    }
 else {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
        DRIVER_CACHE.put(EDatabase4DriverClassName.MSSQL.getDriverClass(),wapperDriver);
      }
    }
  }
 else   if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
      loadJarRequiredByDriver(dbType,dbVersion);
    }
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else {
    try {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
 catch (    ClassNotFoundException e) {
      String errorMessage=Messages.getString(""String_Node_Str"") + driverClassName;
      if (driverJarPath != null && driverJarPath.length > 0) {
        errorMessage=errorMessage + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
        for (        String jarName : driverJarPath) {
          errorMessage=errorMessage + ""String_Node_Str"" + new Path(jarName).lastSegment();
        }
      }
      throw new MissingDriverException(errorMessage);
    }
  }
  if (connection == null) {
    throw new Exception(Messages.getString(""String_Node_Str""));
  }
  conList.add(connection);
  if (wapperDriver != null) {
    conList.add(wapperDriver);
  }
  return conList;
}",0.9760304375396324
127529,"@Override public void handleEvent(Event event){
  TreeItem treeItem=(TreeItem)event.item;
  for (  TreeItem item : treeItem.getItems()) {
    if (item.getData() != null) {
      TableNode node=(TableNode)item.getData();
      if (useProvider()) {
        if (node.getType() == provider.getRunnableAccessNodeType() || node.getType() == TableNode.COLUMN_FAMILY) {
          if (isExistTable(node)) {
            item.setChecked(true);
          }
 else {
            item.setChecked(false);
          }
        }
      }
 else       if (node.getType() == TableNode.TABLE) {
        if (isExistTable(node)) {
          item.setChecked(true);
        }
 else {
          item.setChecked(false);
        }
      }
 else {
        item.setGrayed(item.getChecked());
      }
    }
  }
}","@Override public void handleEvent(Event event){
  TreeItem treeItem=(TreeItem)event.item;
  boolean needUpdate=treeItem.getChecked();
  boolean firstExpandForSchema=false;
  if (!mapCheckState.isEmpty()) {
    firstExpandForSchema=mapCheckState.get(treeItem.getText());
  }
  for (  TreeItem item : treeItem.getItems()) {
    if (item.getData() != null) {
      TableNode node=(TableNode)item.getData();
      if (useProvider()) {
        if (node.getType() == provider.getRunnableAccessNodeType() || node.getType() == TableNode.COLUMN_FAMILY) {
          if (isExistTable(node)) {
            item.setChecked(true);
          }
 else {
            item.setChecked(false);
          }
        }
      }
 else       if (node.getType() == TableNode.TABLE) {
        if ((firstExpand || firstExpandForSchema) && needUpdate && item.getData() != null) {
          updateItem(item,true,true);
        }
 else         if (isExistTable(node)) {
          item.setChecked(true);
        }
 else {
          item.setChecked(false);
        }
      }
 else       if (firstExpand && needUpdate && node.getType() == TableNode.SCHEMA) {
        item.setChecked(true);
        mapCheckState.put(item.getText(),firstExpand);
      }
 else {
        item.setGrayed(item.getChecked());
      }
    }
  }
  if (firstExpandForSchema) {
    mapCheckState.put(treeItem.getText(),false);
  }
  if (firstExpand) {
    firstExpand=false;
  }
}",0.706417842512517
127530,"public static String copyToTemp(String oldFile) throws PersistenceException {
  Project project=ProjectManager.getInstance().getCurrentProject();
  IProject fsProject=null;
  try {
    fsProject=org.talend.core.repository.model.ResourceModelUtils.getProject(project);
  }
 catch (  PersistenceException e2) {
    ExceptionHandler.process(e2);
  }
  if (fsProject == null) {
    return oldFile;
  }
  String temPath=fsProject.getLocationURI().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
  String newFile;
  try {
    newFile=copyNeededFiles(oldFile,temPath);
    getImportFiles(oldFile,temPath);
  }
 catch (  IOException e) {
    throw new PersistenceException(e);
  }
catch (  URISyntaxException e) {
    throw new PersistenceException(e);
  }
  return newFile;
}","public static String copyToTemp(String oldFile) throws PersistenceException {
  Project project=ProjectManager.getInstance().getCurrentProject();
  IProject fsProject=null;
  try {
    fsProject=org.talend.core.repository.model.ResourceModelUtils.getProject(project);
  }
 catch (  PersistenceException e2) {
    ExceptionHandler.process(e2);
  }
  if (fsProject == null) {
    return oldFile;
  }
  String temPath=fsProject.getLocationURI().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
  String newFile;
  try {
    newFile=copyNeededFiles(oldFile,temPath);
    getImportFiles(oldFile,temPath,new HashSet<String>());
  }
 catch (  IOException e) {
    throw new PersistenceException(e);
  }
catch (  URISyntaxException e) {
    throw new PersistenceException(e);
  }
  return newFile;
}",0.9867469879518072
127531,"public static List<String> getComplexNodes(String xsdFile){
  List<String> attri=new ArrayList<String>();
  File file=new File(xsdFile);
  if (!file.exists()) {
    return attri;
  }
  SAXReader saxReader=new SAXReader();
  Document doc;
  try {
    URL url=file.toURI().toURL();
    saxReader.setFeature(""String_Node_Str"",false);
    saxReader.setEntityResolver(new EntityResolver(){
      String emptyDtd=""String_Node_Str"";
      ByteArrayInputStream bytes=new ByteArrayInputStream(emptyDtd.getBytes());
      public InputSource resolveEntity(      String publicId,      String systemId) throws SAXException, IOException {
        File file=new File(systemId);
        if (file.exists()) {
          return new InputSource(new FileInputStream(file));
        }
        return new InputSource(bytes);
      }
    }
);
    doc=saxReader.read(url.getFile());
    Element root=doc.getRootElement();
    List<Element> complexList=root.elements(""String_Node_Str"");
    if (complexList == null) {
      return attri;
    }
    for (    Element n : complexList) {
      Attribute attr=n.attribute(""String_Node_Str"");
      if (attr != null) {
        attri.add(attr.getValue());
      }
    }
  }
 catch (  DocumentException e) {
    ExceptionHandler.process(e);
  }
catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
catch (  SAXException e) {
    ExceptionHandler.process(e);
  }
  return attri;
}","public static List<String> getComplexNodes(String xsdFile){
  List<String> attri=new ArrayList<String>();
  File file=new File(xsdFile);
  if (!file.exists()) {
    return attri;
  }
  SAXReader saxReader=new SAXReader();
  Document doc;
  try {
    URL url=file.toURI().toURL();
    saxReader.setFeature(""String_Node_Str"",false);
    saxReader.setEntityResolver(new EntityResolver(){
      String emptyDtd=""String_Node_Str"";
      ByteArrayInputStream bytes=new ByteArrayInputStream(emptyDtd.getBytes());
      @Override public InputSource resolveEntity(      String publicId,      String systemId) throws SAXException, IOException {
        File file=new File(systemId);
        if (file.exists()) {
          return new InputSource(new FileInputStream(file));
        }
        return new InputSource(bytes);
      }
    }
);
    doc=saxReader.read(url.getFile());
    Element root=doc.getRootElement();
    List<Element> complexList=root.elements(""String_Node_Str"");
    if (complexList == null) {
      return attri;
    }
    for (    Element n : complexList) {
      Attribute attr=n.attribute(""String_Node_Str"");
      if (attr != null) {
        attri.add(attr.getValue());
      }
    }
  }
 catch (  DocumentException e) {
    ExceptionHandler.process(e);
  }
catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
catch (  SAXException e) {
    ExceptionHandler.process(e);
  }
  return attri;
}",0.9964788732394366
127532,"public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {
  File file=new File(systemId);
  if (file.exists()) {
    return new InputSource(new FileInputStream(file));
  }
  return new InputSource(bytes);
}","@Override public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {
  File file=new File(systemId);
  if (file.exists()) {
    return new InputSource(new FileInputStream(file));
  }
  return new InputSource(bytes);
}",0.9803149606299212
127533,"private static void getImportFiles(String xsdFile,String newPath){
  File file=new File(xsdFile);
  if (!file.exists()) {
    return;
  }
  String xsdFolder=file.getParent();
  SAXReader saxReader=new SAXReader();
  Document doc;
  try {
    URL url=file.toURI().toURL();
    doc=saxReader.read(url.getFile());
    Element root=doc.getRootElement();
    List<Element> elementsList=new ArrayList<Element>();
    List<Element> importList=root.elements(""String_Node_Str"");
    if (importList != null) {
      elementsList.addAll(importList);
    }
    List<Element> includeList=root.elements(""String_Node_Str"");
    if (includeList != null) {
      elementsList.addAll(includeList);
    }
    if (elementsList.size() <= 0) {
      return;
    }
    for (    Element n : elementsList) {
      Attribute attr=n.attribute(""String_Node_Str"");
      if (attr != null) {
        String importFile=xsdFolder + File.separator + attr.getValue();
        File f=new File(importFile);
        if (f.exists()) {
          File newFile=new File(newPath + attr.getValue());
          FilesUtils.copyFile(f,newFile);
          getImportFiles(importFile,newFile.getParent() + File.separator);
        }
      }
    }
  }
 catch (  DocumentException e) {
    ExceptionHandler.process(e);
  }
catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
catch (  IOException e) {
    ExceptionHandler.process(e);
  }
}","private static void getImportFiles(String xsdFile,String newPath,Set<String> filePaths){
  File file=new File(xsdFile);
  if (!file.exists()) {
    return;
  }
  String xsdFolder=file.getParent();
  SAXReader saxReader=new SAXReader();
  Document doc;
  try {
    URL url=file.toURI().toURL();
    doc=saxReader.read(url.getFile());
    Element root=doc.getRootElement();
    List<Element> elementsList=new ArrayList<Element>();
    List<Element> importList=root.elements(""String_Node_Str"");
    if (importList != null) {
      elementsList.addAll(importList);
    }
    List<Element> includeList=root.elements(""String_Node_Str"");
    if (includeList != null) {
      elementsList.addAll(includeList);
    }
    if (elementsList.size() <= 0) {
      return;
    }
    for (    Element n : elementsList) {
      Attribute attr=n.attribute(""String_Node_Str"");
      if (attr != null) {
        String importFile=xsdFolder + File.separator + attr.getValue();
        File f=new File(importFile);
        if (f.exists()) {
          File newFile=new File(newPath + attr.getValue());
          if (!filePaths.contains(newFile.getCanonicalPath())) {
            filePaths.add(newFile.getCanonicalPath());
            FilesUtils.copyFile(f,newFile);
            getImportFiles(importFile,newFile.getParent() + File.separator,filePaths);
          }
        }
      }
    }
  }
 catch (  DocumentException e) {
    ExceptionHandler.process(e);
  }
catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
catch (  IOException e) {
    ExceptionHandler.process(e);
  }
}",0.942397856664434
127534,"private void resetAndRefreshLocal(final String names[]){
  resetModulesNeeded();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final String projectLabel=currentProject.getTechnicalLabel();
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProject eclipseProject=workspace.getRoot().getProject(projectLabel);
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(currentProject,""String_Node_Str""){
      @Override public void run() throws PersistenceException {
        try {
          for (          String name : names) {
            String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
            path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
            File libsTargetFile=new File(path);
            File source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
            FilesUtils.copyFile(source,libsTargetFile);
            synJavaLibs(source);
          }
          eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
        }
 catch (        IOException e) {
          CommonExceptionHandler.process(e);
        }
catch (        CoreException e) {
          CommonExceptionHandler.process(e);
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
    }
  }
}","private void resetAndRefreshLocal(final String names[]){
  resetModulesNeeded();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final String projectLabel=currentProject.getTechnicalLabel();
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProject eclipseProject=workspace.getRoot().getProject(projectLabel);
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(currentProject,""String_Node_Str""){
      @Override public void run() throws PersistenceException {
        try {
          for (          String name : names) {
            String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
            path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
            File libsTargetFile=new File(path);
            File source=null;
            EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
            String relativePath=jarsToRelative.get(name);
            if (relativePath != null) {
              if (relativePath.startsWith(""String_Node_Str"")) {
                try {
                  URI uri=new URI(relativePath);
                  URL url=FileLocator.toFileURL(uri.toURL());
                  source=new File(url.getFile());
                }
 catch (                URISyntaxException e) {
                  CommonExceptionHandler.process(e);
                }
              }
            }
            if (source == null) {
              source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
            }
            FilesUtils.copyFile(source,libsTargetFile);
            synJavaLibs(source);
          }
          eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
        }
 catch (        IOException e) {
          CommonExceptionHandler.process(e);
        }
catch (        CoreException e) {
          CommonExceptionHandler.process(e);
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
    }
  }
}",0.8391066545123063
127535,"@Override public void run() throws PersistenceException {
  try {
    for (    String name : names) {
      String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
      path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
      File libsTargetFile=new File(path);
      File source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
      FilesUtils.copyFile(source,libsTargetFile);
      synJavaLibs(source);
    }
    eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
catch (  CoreException e) {
    CommonExceptionHandler.process(e);
  }
}","@Override public void run() throws PersistenceException {
  try {
    for (    String name : names) {
      String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
      path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
      File libsTargetFile=new File(path);
      File source=null;
      EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
      String relativePath=jarsToRelative.get(name);
      if (relativePath != null) {
        if (relativePath.startsWith(""String_Node_Str"")) {
          try {
            URI uri=new URI(relativePath);
            URL url=FileLocator.toFileURL(uri.toURL());
            source=new File(url.getFile());
          }
 catch (          URISyntaxException e) {
            CommonExceptionHandler.process(e);
          }
        }
      }
      if (source == null) {
        source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
      }
      FilesUtils.copyFile(source,libsTargetFile);
      synJavaLibs(source);
    }
    eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
catch (  CoreException e) {
    CommonExceptionHandler.process(e);
  }
}",0.7346221441124781
127536,"private void resetAndRefreshLocal(final String names[]){
  resetModulesNeeded();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final String projectLabel=currentProject.getTechnicalLabel();
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProject eclipseProject=workspace.getRoot().getProject(projectLabel);
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(currentProject,""String_Node_Str""){
      @Override public void run() throws PersistenceException {
        try {
          for (          String name : names) {
            String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
            path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
            File libsTargetFile=new File(path);
            File source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
            FilesUtils.copyFile(source,libsTargetFile);
            synJavaLibs(source);
          }
          eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
        }
 catch (        IOException e) {
          CommonExceptionHandler.process(e);
        }
catch (        CoreException e) {
          CommonExceptionHandler.process(e);
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
    }
  }
}","private void resetAndRefreshLocal(final String names[]){
  resetModulesNeeded();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final String projectLabel=currentProject.getTechnicalLabel();
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProject eclipseProject=workspace.getRoot().getProject(projectLabel);
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(currentProject,""String_Node_Str""){
      @Override public void run() throws PersistenceException {
        try {
          for (          String name : names) {
            String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
            path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
            File libsTargetFile=new File(path);
            File source=null;
            EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
            String relativePath=jarsToRelative.get(name);
            if (relativePath != null) {
              if (relativePath.startsWith(""String_Node_Str"")) {
                try {
                  URI uri=new URI(relativePath);
                  URL url=FileLocator.toFileURL(uri.toURL());
                  source=new File(url.getFile());
                }
 catch (                URISyntaxException e) {
                  CommonExceptionHandler.process(e);
                }
              }
            }
            if (source == null) {
              source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
            }
            FilesUtils.copyFile(source,libsTargetFile);
            synJavaLibs(source);
          }
          eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
        }
 catch (        IOException e) {
          CommonExceptionHandler.process(e);
        }
catch (        CoreException e) {
          CommonExceptionHandler.process(e);
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
    }
  }
}",0.8391066545123063
127537,"@Override public void run() throws PersistenceException {
  try {
    for (    String name : names) {
      String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
      path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
      File libsTargetFile=new File(path);
      File source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
      FilesUtils.copyFile(source,libsTargetFile);
      synJavaLibs(source);
    }
    eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
catch (  CoreException e) {
    CommonExceptionHandler.process(e);
  }
}","@Override public void run() throws PersistenceException {
  try {
    for (    String name : names) {
      String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
      path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
      File libsTargetFile=new File(path);
      File source=null;
      EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
      String relativePath=jarsToRelative.get(name);
      if (relativePath != null) {
        if (relativePath.startsWith(""String_Node_Str"")) {
          try {
            URI uri=new URI(relativePath);
            URL url=FileLocator.toFileURL(uri.toURL());
            source=new File(url.getFile());
          }
 catch (          URISyntaxException e) {
            CommonExceptionHandler.process(e);
          }
        }
      }
      if (source == null) {
        source=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
      }
      FilesUtils.copyFile(source,libsTargetFile);
      synJavaLibs(source);
    }
    eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
catch (  CoreException e) {
    CommonExceptionHandler.process(e);
  }
}",0.7346221441124781
127538,"/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
    List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
    if (driverNames != null) {
      librairesManagerService.retrieve(driverNames,getJavaLibPath(),new NullProgressMonitor());
      for (      String jar : driverNames) {
        jarPathList.add(getJavaLibPath() + jar);
      }
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion)) {
        driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
      }
    }
  }
 else {
    Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
    if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        List<String> jarsToRetreive=new ArrayList<String>();
        for (        String jar : jars) {
          Path path=new Path(jar);
          if (jarsAvailable.contains(path.lastSegment())) {
            if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
              jarsToRetreive.add(path.lastSegment());
            }
            jarPathList.add(getJavaLibPath() + path.lastSegment());
          }
 else {
            jarsToRetreive.add(path.lastSegment());
            jarPathList.add(jar);
          }
        }
        librairesManagerService.retrieve(jarsToRetreive,getJavaLibPath(),new NullProgressMonitor());
      }
 else {
        Path path=new Path(driverJarPathArg);
        File driverFile=new File(driverJarPathArg);
        boolean isExist=driverFile.exists();
        if (!isExist) {
          jarPathList.add(""String_Node_Str"");
        }
 else         if (jarsAvailable.contains(path.lastSegment())) {
          String jarUnderLib=getJavaLibPath() + path.lastSegment();
          File file=new File(jarUnderLib);
          if (!file.exists()) {
            librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(jarUnderLib);
        }
 else {
          jarPathList.add(driverJarPathArg);
        }
      }
    }
 else {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        librairesManagerService.retrieve(Arrays.asList(jars),getJavaLibPath(),new NullProgressMonitor());
        for (        String jar : jars) {
          jarPathList.add(getJavaLibPath() + jar);
        }
      }
 else {
        if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
          librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
        }
        jarPathList.add(getJavaLibPath() + driverJarPathArg);
      }
    }
  }
  final String[] driverJarPath=jarPathList.toArray(new String[0]);
  if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
    driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
      ExtractMetaDataUtils.checkAccessDbq(url);
    }
  }
  List list=new ArrayList();
  ExtractMetaDataUtils.checkDBConnectionTimeout();
  if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else   if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
    if (DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass())) {
      wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
      Properties info=new Properties();
      username=username != null ? username : ""String_Node_Str"";
      pwd=pwd != null ? pwd : ""String_Node_Str"";
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      connection=wapperDriver.connect(url,info);
    }
 else {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
        DRIVER_CACHE.put(EDatabase4DriverClassName.MSSQL.getDriverClass(),wapperDriver);
      }
    }
  }
 else   if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
      loadJarRequiredByDriver(dbType,dbVersion);
    }
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else {
    try {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
 catch (    ClassNotFoundException e) {
      String errorMessage=Messages.getString(""String_Node_Str"") + driverClassName;
      if (driverJarPath != null && driverJarPath.length > 0) {
        errorMessage=errorMessage + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
        for (        String jarName : driverJarPath) {
          errorMessage=errorMessage + ""String_Node_Str"" + new Path(jarName).lastSegment();
        }
      }
      throw new MissingDriverException(errorMessage);
    }
  }
  if (connection == null) {
    throw new Exception(Messages.getString(""String_Node_Str""));
  }
  conList.add(connection);
  if (wapperDriver != null) {
    conList.add(wapperDriver);
  }
  return conList;
}","/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
    List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
    if (driverNames != null) {
      librairesManagerService.retrieve(driverNames,getJavaLibPath(),new NullProgressMonitor());
      for (      String jar : driverNames) {
        jarPathList.add(getJavaLibPath() + jar);
      }
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion)) {
        driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
      }
    }
  }
 else {
    Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
    if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        List<String> jarsToRetreive=new ArrayList<String>();
        for (        String jar : jars) {
          Path path=new Path(jar);
          if (jarsAvailable.contains(path.lastSegment())) {
            if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
              jarsToRetreive.add(path.lastSegment());
            }
            jarPathList.add(getJavaLibPath() + path.lastSegment());
          }
 else {
            jarsToRetreive.add(path.lastSegment());
            jarPathList.add(jar);
          }
        }
        librairesManagerService.retrieve(jarsToRetreive,getJavaLibPath(),new NullProgressMonitor());
      }
 else {
        Path path=new Path(driverJarPathArg);
        File driverFile=new File(driverJarPathArg);
        boolean isExist=driverFile.exists();
        if (!isExist) {
          jarPathList.add(""String_Node_Str"");
        }
 else {
          jarPathList.add(driverJarPathArg);
        }
      }
    }
 else {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        librairesManagerService.retrieve(Arrays.asList(jars),getJavaLibPath(),new NullProgressMonitor());
        for (        String jar : jars) {
          jarPathList.add(getJavaLibPath() + jar);
        }
      }
 else {
        if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
          librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
        }
        jarPathList.add(getJavaLibPath() + driverJarPathArg);
      }
    }
  }
  final String[] driverJarPath=jarPathList.toArray(new String[0]);
  if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
    driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
      ExtractMetaDataUtils.checkAccessDbq(url);
    }
  }
  List list=new ArrayList();
  ExtractMetaDataUtils.checkDBConnectionTimeout();
  if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else   if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
    if (DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass())) {
      wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
      Properties info=new Properties();
      username=username != null ? username : ""String_Node_Str"";
      pwd=pwd != null ? pwd : ""String_Node_Str"";
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      connection=wapperDriver.connect(url,info);
    }
 else {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
        DRIVER_CACHE.put(EDatabase4DriverClassName.MSSQL.getDriverClass(),wapperDriver);
      }
    }
  }
 else   if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
      loadJarRequiredByDriver(dbType,dbVersion);
    }
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else {
    try {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
 catch (    ClassNotFoundException e) {
      String errorMessage=Messages.getString(""String_Node_Str"") + driverClassName;
      if (driverJarPath != null && driverJarPath.length > 0) {
        errorMessage=errorMessage + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
        for (        String jarName : driverJarPath) {
          errorMessage=errorMessage + ""String_Node_Str"" + new Path(jarName).lastSegment();
        }
      }
      throw new MissingDriverException(errorMessage);
    }
  }
  if (connection == null) {
    throw new Exception(Messages.getString(""String_Node_Str""));
  }
  conList.add(connection);
  if (wapperDriver != null) {
    conList.add(wapperDriver);
  }
  return conList;
}",0.9760304375396324
127539,"private void resetAndRefreshLocal(final String names[]){
  resetModulesNeeded();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final String projectLabel=currentProject.getTechnicalLabel();
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProject eclipseProject=workspace.getRoot().getProject(projectLabel);
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(currentProject,""String_Node_Str""){
      @Override public void run() throws PersistenceException {
        try {
          for (          String name : names) {
            String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
            path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
            File libsTargetFile=new File(path);
            File source=new File(PreferencesUtilities.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
            FilesUtils.copyFile(source,libsTargetFile);
            synJavaLibs(source);
          }
          eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
        }
 catch (        IOException e) {
          ExceptionHandler.process(e);
        }
catch (        CoreException e) {
          ExceptionHandler.process(e);
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    CorePlugin.getDefault().getRepositoryService().getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  }
}","private void resetAndRefreshLocal(final String names[]){
  resetModulesNeeded();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final String projectLabel=currentProject.getTechnicalLabel();
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProject eclipseProject=workspace.getRoot().getProject(projectLabel);
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(currentProject,""String_Node_Str""){
      @Override public void run() throws PersistenceException {
        try {
          for (          String name : names) {
            String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
            path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
            File libsTargetFile=new File(path);
            File source=null;
            EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
            String relativePath=jarsToRelative.get(name);
            if (relativePath != null) {
              if (!relativePath.startsWith(""String_Node_Str"")) {
                relativePath=""String_Node_Str"" + relativePath;
              }
              try {
                URI uri=new URI(relativePath);
                URL url=FileLocator.toFileURL(uri.toURL());
                source=new File(url.getFile());
              }
 catch (              URISyntaxException e) {
                CommonExceptionHandler.process(e);
              }
            }
            if (source == null) {
              source=new File(PreferencesUtilities.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
            }
            FilesUtils.copyFile(source,libsTargetFile);
            synJavaLibs(source);
          }
          eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
        }
 catch (        IOException e) {
          ExceptionHandler.process(e);
        }
catch (        CoreException e) {
          ExceptionHandler.process(e);
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    CorePlugin.getDefault().getRepositoryService().getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  }
}",0.813181367690783
127540,"@Override public void run() throws PersistenceException {
  try {
    for (    String name : names) {
      String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
      path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
      File libsTargetFile=new File(path);
      File source=new File(PreferencesUtilities.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
      FilesUtils.copyFile(source,libsTargetFile);
      synJavaLibs(source);
    }
    eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
  }
catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
}","@Override public void run() throws PersistenceException {
  try {
    for (    String name : names) {
      String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
      path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ name;
      File libsTargetFile=new File(path);
      File source=null;
      EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
      String relativePath=jarsToRelative.get(name);
      if (relativePath != null) {
        if (!relativePath.startsWith(""String_Node_Str"")) {
          relativePath=""String_Node_Str"" + relativePath;
        }
        try {
          URI uri=new URI(relativePath);
          URL url=FileLocator.toFileURL(uri.toURL());
          source=new File(url.getFile());
        }
 catch (        URISyntaxException e) {
          CommonExceptionHandler.process(e);
        }
      }
      if (source == null) {
        source=new File(PreferencesUtilities.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + name);
      }
      FilesUtils.copyFile(source,libsTargetFile);
      synJavaLibs(source);
    }
    eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
  }
catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
}",0.7181500872600349
127541,"/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      LanguageManager.reset();
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.beforeLogon(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      checkProjectCompatibility(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      executeMigrations(project,true,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.logOnProject(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ICoreUIService coreUiService=null;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreUIService.class)) {
        coreUiService=(ICoreUIService)GlobalServiceRegister.getDefault().getService(ICoreUIService.class);
      }
      if (coreUiService != null) {
        coreUiService.componentsReset();
        coreUiService.initializeComponents(currentMonitor);
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      executeMigrations(project,false,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      coreService.deleteAllJobs(false);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      try {
        coreService.syncAllRoutines();
        coreService.syncAllBeans();
      }
 catch (      SystemException e1) {
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      if (coreUiService != null && PluginChecker.isRulesPluginLoaded()) {
        coreUiService.syncAllRules();
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      fullLogonFinished=true;
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}","/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      LanguageManager.reset();
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.beforeLogon(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      checkProjectCompatibility(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      executeMigrations(project,true,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.logOnProject(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ICoreUIService coreUiService=null;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreUIService.class)) {
        coreUiService=(ICoreUIService)GlobalServiceRegister.getDefault().getService(ICoreUIService.class);
      }
      if (coreUiService != null) {
        coreUiService.componentsReset();
        coreUiService.initializeComponents(currentMonitor);
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      executeMigrations(project,false,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      ICoreService coreService=getCoreService();
      if (coreService != null) {
        coreService.deleteAllJobs(false);
        currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        try {
          coreService.syncAllRoutines();
          coreService.syncAllBeans();
        }
 catch (        SystemException e1) {
        }
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      if (coreUiService != null && PluginChecker.isRulesPluginLoaded()) {
        coreUiService.syncAllRules();
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      fullLogonFinished=true;
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}",0.986769304787106
127542,"@Override public void create(Project project,Item item,IPath path,boolean... isImportItem) throws PersistenceException {
  boolean isOherProcess=false;
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    isOherProcess=handler.isProcess(item);
    if (isOherProcess) {
      break;
    }
  }
  if (isOherProcess || item instanceof ProcessItem) {
    try {
      coreService.checkJob(item.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  checkFileNameAndPath(project,item,RepositoryConstants.getPattern(ERepositoryObjectType.getItemType(item)),path,false,isImportItem);
  this.repositoryFactoryFromProvider.create(project,item,path,isImportItem);
  if (isImportItem.length == 0 || !isImportItem[0]) {
    fireRepositoryPropertyChange(ERepositoryActionName.CREATE.getName(),null,item);
  }
  if (isImportItem.length > 0 && isImportItem[0]) {
    fireRepositoryPropertyChange(ERepositoryActionName.IMPORT.getName(),null,item);
  }
}","@Override public void create(Project project,Item item,IPath path,boolean... isImportItem) throws PersistenceException {
  boolean isOherProcess=false;
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    isOherProcess=handler.isProcess(item);
    if (isOherProcess) {
      break;
    }
  }
  ICoreService coreService=getCoreService();
  if (coreService != null && (isOherProcess || item instanceof ProcessItem)) {
    try {
      coreService.checkJob(item.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  checkFileNameAndPath(project,item,RepositoryConstants.getPattern(ERepositoryObjectType.getItemType(item)),path,false,isImportItem);
  this.repositoryFactoryFromProvider.create(project,item,path,isImportItem);
  if (isImportItem.length == 0 || !isImportItem[0]) {
    fireRepositoryPropertyChange(ERepositoryActionName.CREATE.getName(),null,item);
  }
  if (isImportItem.length > 0 && isImportItem[0]) {
    fireRepositoryPropertyChange(ERepositoryActionName.IMPORT.getName(),null,item);
  }
}",0.9685534591194968
127543,"@Override public void deleteObjectPhysical(Project project,IRepositoryViewObject objToDelete,String version,boolean fromEmptyRecycleBin) throws PersistenceException {
  if (project == null || objToDelete == null || objToDelete.getProperty() == null) {
    return;
  }
  IRepositoryViewObject object=new RepositoryObject(objToDelete.getProperty());
  boolean isExtendPoint=false;
  fireRepositoryPropertyChange(ERepositoryActionName.DELETE_FOREVER.getName(),null,object);
  ERepositoryObjectType repositoryObjectType=object.getRepositoryObjectType();
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    isExtendPoint=handler.isRepObjType(repositoryObjectType);
    if (isExtendPoint == true) {
      if (repositoryObjectType == handler.getProcessType()) {
        coreService.removeJobLaunch(object);
      }
      if (repositoryObjectType == handler.getCodeType()) {
        try {
          coreService.deleteBeanfile(object);
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
      break;
    }
  }
  if (repositoryObjectType == ERepositoryObjectType.PROCESS) {
    coreService.removeJobLaunch(object);
  }
  if (repositoryObjectType == ERepositoryObjectType.ROUTINES || repositoryObjectType == ERepositoryObjectType.PIG_UDF) {
    try {
      coreService.deleteRoutinefile(object);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  if (repositoryObjectType == ERepositoryObjectType.PROCESS) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
      IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
      if (service != null) {
        service.refreshOperationLabel(object.getProperty().getId());
      }
    }
  }
  this.repositoryFactoryFromProvider.deleteObjectPhysical(project,object,version,fromEmptyRecycleBin);
  String str[]=new String[]{object.toString(),getRepositoryContext().getUser().toString()};
  log.info(Messages.getString(""String_Node_Str"",str));
}","@Override public void deleteObjectPhysical(Project project,IRepositoryViewObject objToDelete,String version,boolean fromEmptyRecycleBin) throws PersistenceException {
  if (project == null || objToDelete == null || objToDelete.getProperty() == null) {
    return;
  }
  IRepositoryViewObject object=new RepositoryObject(objToDelete.getProperty());
  boolean isExtendPoint=false;
  fireRepositoryPropertyChange(ERepositoryActionName.DELETE_FOREVER.getName(),null,object);
  ERepositoryObjectType repositoryObjectType=object.getRepositoryObjectType();
  ICoreService coreService=getCoreService();
  if (coreService != null) {
    for (    IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
      isExtendPoint=handler.isRepObjType(repositoryObjectType);
      if (isExtendPoint == true) {
        if (repositoryObjectType == handler.getProcessType()) {
          coreService.removeJobLaunch(object);
        }
        if (repositoryObjectType == handler.getCodeType()) {
          try {
            coreService.deleteBeanfile(object);
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
        break;
      }
    }
    if (repositoryObjectType == ERepositoryObjectType.PROCESS) {
      coreService.removeJobLaunch(object);
    }
  }
  if (repositoryObjectType == ERepositoryObjectType.ROUTINES || repositoryObjectType == ERepositoryObjectType.PIG_UDF) {
    try {
      coreService.deleteRoutinefile(object);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  if (repositoryObjectType == ERepositoryObjectType.PROCESS) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
      IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
      if (service != null) {
        service.refreshOperationLabel(object.getProperty().getId());
      }
    }
  }
  this.repositoryFactoryFromProvider.deleteObjectPhysical(project,object,version,fromEmptyRecycleBin);
  String str[]=new String[]{object.toString(),getRepositoryContext().getUser().toString()};
  log.info(Messages.getString(""String_Node_Str"",str));
}",0.9699389384687648
127544,"@Override public Item copy(Item sourceItem,IPath targetPath,String newItemLabel) throws PersistenceException, BusinessException {
  if (sourceItem instanceof ProcessItem) {
    try {
      coreService.checkJob(sourceItem.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  Item targetItem=this.repositoryFactoryFromProvider.copy(sourceItem,targetPath,newItemLabel);
  return targetItem;
}","@Override public Item copy(Item sourceItem,IPath targetPath,String newItemLabel) throws PersistenceException, BusinessException {
  ICoreService coreService=getCoreService();
  if (coreService != null && sourceItem instanceof ProcessItem) {
    try {
      coreService.checkJob(sourceItem.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  Item targetItem=this.repositoryFactoryFromProvider.copy(sourceItem,targetPath,newItemLabel);
  return targetItem;
}",0.9358490566037736
127545,"@Override public void executeMigrationTasksForLogon(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<MigrationTask> done=new ArrayList<MigrationTask>(project.getEmfProject().getMigrationTask());
  if (beforeLogon) {
    boolean isNewProject=project.getEmfProject().getProductVersion() == null ? true : false;
    setMigrationOnNewProject(beforeLogon && isNewProject);
  }
  sortMigrationTasks(toExecute);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
    if (mgTask == null && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon && (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion()) || nbMigrationsToDo > 0)) {
    MigrationUtil.removeMigrationTaskById(done,RELATION_TASK);
    RelationshipItemBuilder.getInstance().unloadRelations();
    nbMigrationsToDo++;
  }
  if (nbMigrationsToDo == 0) {
    return;
  }
  MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    @Override public void run() throws PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          try {
            boolean needSave=false;
            if (!isMigrationOnNewProject()) {
              if (!beforeLogon) {
                ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
                Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
                  @Override public int compare(                  ERepositoryObjectType arg0,                  ERepositoryObjectType arg1){
                    if (arg0 == ERepositoryObjectType.PROCESS) {
                      return 1;
                    }
                    if (arg0 == ERepositoryObjectType.JOBLET) {
                      return 1;
                    }
                    return 0;
                  }
                }
);
                for (                ERepositoryObjectType type : types) {
                  if (!type.isResourceItem()) {
                    continue;
                  }
                  List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
                  for (                  IRepositoryViewObject object : objects) {
                    Item item=object.getProperty().getItem();
                    monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
                    subProgressMonitor.worked(1);
                    for (                    IProjectMigrationTask task : toExecute) {
                      if (monitorWrap.isCanceled()) {
                        throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
                      }
                      MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
                      if (mgTask == null && !task.isDeprecated()) {
                        ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                          if (task.getStatus() != ExecutionResult.FAILURE) {
                            task.setStatus(status);
                          }
case SUCCESS_NO_ALERT:
                        if (task.getStatus() != ExecutionResult.FAILURE) {
                          task.setStatus(status);
                        }
case NOTHING_TO_DO:
                      if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                        task.setStatus(status);
                      }
                    break;
case SKIPPED:
                  if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                    task.setStatus(status);
                  }
                break;
case FAILURE:
              task.setStatus(status);
default :
            task.setStatus(status);
          break;
      }
    }
  }
  if (object instanceof RepositoryObject) {
    ((RepositoryObject)object).unload();
  }
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
if (mgTask == null && !task.isDeprecated()) {
try {
  ExecutionResult status;
  if (beforeLogon) {
    status=task.execute(project);
    task.setStatus(status);
  }
 else {
    status=task.getStatus();
  }
switch (status) {
case SUCCESS_WITH_ALERT:
    if (!isMigrationOnNewProject()) {
      doneThisSession.add(task);
    }
case SUCCESS_NO_ALERT:
  log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
case NOTHING_TO_DO:
done.add(MigrationUtil.convertMigrationTask(task));
needSave=true;
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
case FAILURE:
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
 else if (mgTask == null && task.isDeprecated()) {
done.add(MigrationUtil.convertMigrationTask(task));
needSave=true;
}
}
}
 else {
for (IProjectMigrationTask task : toExecute) {
task.setStatus(ExecutionResult.NOTHING_TO_DO);
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
if (!isMigrationOnNewProject()) {
RelationshipItemBuilder.getInstance().saveRelations();
}
}
 catch (PersistenceException e) {
throw new CoreException(new Status(Status.ERROR,""String_Node_Str"",e.getMessage(),e));
}
}
}
;
try {
IWorkspace workspace1=ResourcesPlugin.getWorkspace();
ISchedulingRule schedulingRule=workspace1.getRoot();
workspace1.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitorWrap);
}
 catch (CoreException e) {
throw new PersistenceException(e);
}
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
if (!beforeLogon) {
setMigrationOnNewProject(false);
}
}","@Override public void executeMigrationTasksForLogon(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<MigrationTask> done=new ArrayList<MigrationTask>(project.getEmfProject().getMigrationTask());
  if (beforeLogon) {
    boolean isNewProject=project.getEmfProject().getProductVersion() == null ? true : false;
    setMigrationOnNewProject(beforeLogon && isNewProject && done.isEmpty());
    if (isNewProject && !RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
      project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
    }
  }
  sortMigrationTasks(toExecute);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
    if (mgTask == null && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon && (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion()) || nbMigrationsToDo > 0)) {
    MigrationUtil.removeMigrationTaskById(done,RELATION_TASK);
    RelationshipItemBuilder.getInstance().unloadRelations();
    nbMigrationsToDo++;
  }
  if (nbMigrationsToDo == 0) {
    return;
  }
  MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    @Override public void run() throws PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          try {
            boolean needSave=false;
            if (!isMigrationOnNewProject()) {
              if (!beforeLogon) {
                ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
                Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
                  @Override public int compare(                  ERepositoryObjectType arg0,                  ERepositoryObjectType arg1){
                    if (arg0 == ERepositoryObjectType.PROCESS) {
                      return 1;
                    }
                    if (arg0 == ERepositoryObjectType.JOBLET) {
                      return 1;
                    }
                    return 0;
                  }
                }
);
                for (                ERepositoryObjectType type : types) {
                  if (!type.isResourceItem()) {
                    continue;
                  }
                  List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
                  for (                  IRepositoryViewObject object : objects) {
                    Item item=object.getProperty().getItem();
                    monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
                    subProgressMonitor.worked(1);
                    for (                    IProjectMigrationTask task : toExecute) {
                      if (monitorWrap.isCanceled()) {
                        throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
                      }
                      MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
                      if (mgTask == null && !task.isDeprecated()) {
                        ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                          if (task.getStatus() != ExecutionResult.FAILURE) {
                            task.setStatus(status);
                          }
case SUCCESS_NO_ALERT:
                        if (task.getStatus() != ExecutionResult.FAILURE) {
                          task.setStatus(status);
                        }
case NOTHING_TO_DO:
                      if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                        task.setStatus(status);
                      }
                    break;
case SKIPPED:
                  if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                    task.setStatus(status);
                  }
                break;
case FAILURE:
              task.setStatus(status);
default :
            task.setStatus(status);
          break;
      }
    }
  }
  if (object instanceof RepositoryObject) {
    ((RepositoryObject)object).unload();
  }
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
if (mgTask == null && !task.isDeprecated()) {
try {
  ExecutionResult status;
  if (beforeLogon) {
    status=task.execute(project);
    task.setStatus(status);
  }
 else {
    status=task.getStatus();
  }
switch (status) {
case SUCCESS_WITH_ALERT:
    if (!isMigrationOnNewProject()) {
      doneThisSession.add(task);
    }
case SUCCESS_NO_ALERT:
  log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
case NOTHING_TO_DO:
done.add(MigrationUtil.convertMigrationTask(task));
needSave=true;
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
case FAILURE:
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
 else if (mgTask == null && task.isDeprecated()) {
done.add(MigrationUtil.convertMigrationTask(task));
needSave=true;
}
}
}
 else {
for (IProjectMigrationTask task : toExecute) {
task.setStatus(ExecutionResult.NOTHING_TO_DO);
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
if (!isMigrationOnNewProject()) {
RelationshipItemBuilder.getInstance().saveRelations();
}
}
 catch (PersistenceException e) {
throw new CoreException(new Status(Status.ERROR,""String_Node_Str"",e.getMessage(),e));
}
}
}
;
try {
IWorkspace workspace1=ResourcesPlugin.getWorkspace();
ISchedulingRule schedulingRule=workspace1.getRoot();
workspace1.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitorWrap);
}
 catch (CoreException e) {
throw new PersistenceException(e);
}
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
if (!beforeLogon) {
setMigrationOnNewProject(false);
}
}",0.9845263555164172
127546,"/** 
 * Constructs a new SwitchProjectAction.
 */
public SwitchProjectAction(){
  super(Messages.getString(""String_Node_Str""));
  setEnabled(false);
}","/** 
 * Constructs a new SwitchProjectAction.
 */
public SwitchProjectAction(){
  super(Messages.getString(""String_Node_Str""));
  setEnabled(true);
}",0.9765886287625418
127547,"@Override public void keyPressed(KeyEvent e){
  if (dbTypeCombo.getSelectionIndex() > -1) {
    if (Character.isLetterOrDigit(e.character)) {
      e.doit=false;
    }
  }
}","@Override public void keyPressed(KeyEvent e){
  if (!Character.isLetterOrDigit(e.character) && !Character.isIdentifierIgnorable(e.character)) {
    e.doit=false;
  }
}",0.6882352941176471
127548,"/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  Listener listener=new Listener(){
    @Override public void handleEvent(    final Event e){
      if (isContextMode()) {
      }
 else {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
        setPropertiesFormEditable(dbTypeCombo.getSelectionIndex() > -1);
        urlConnectionStringText.setEditable(false);
      }
    }
  }
;
  usernameText.addListener(SWT.FocusIn,listener);
  passwordText.addListener(SWT.FocusIn,listener);
  serverText.addListener(SWT.FocusIn,listener);
  portText.addListener(SWT.FocusIn,listener);
  sidOrDatabaseText.addListener(SWT.FocusIn,listener);
  datasourceText.addListener(SWT.FocusIn,listener);
  schemaText.addListener(SWT.FocusIn,listener);
  additionParamText.addListener(SWT.FocusIn,listener);
  urlConnectionStringText.addListener(SWT.FocusIn,listener);
  mappingFileText.addListener(SWT.FocusIn,listener);
  serverText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setServerName(serverText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setPort(portText.getText());
          modifyFieldValue();
        }
        boolean b=true;
        String databaseType=getConnection().getDatabaseType();
        if (databaseType != null) {
          if (databaseType.equals(""String_Node_Str"")) {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
 else {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
        }
        if (b) {
          b=portText.getText().length() <= 5;
        }
        evaluateTextField(b);
      }
    }
  }
);
  portText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (!Character.isLetterOrDigit(e.character) && !Character.isIdentifierIgnorable(e.character)) {
        e.doit=false;
      }
    }
  }
);
  usernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUsername(usernameText.getText());
        }
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          try {
            String password=PasswordEncryptUtil.encryptPassword(passwordText.getText());
            getConnection().setPassword(password);
          }
 catch (          Exception ex) {
            ExceptionHandler.process(ex);
          }
        }
      }
    }
  }
);
  sidOrDatabaseText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setSID(sidOrDatabaseText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  datasourceText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setDatasourceName(datasourceText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUiSchema(schemaText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      if (!isContextMode()) {
        if (originalUischema != null) {
          if (!originalUischema.equalsIgnoreCase(schemaText.getText())) {
            ConnectionHelper.setIsConnNeedReload(getConnection(),Boolean.TRUE);
          }
 else {
            checkURLIsChanged();
          }
        }
      }
    }
  }
);
  dbVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        if (version != null) {
          getConnection().setDbVersionString(version.getVersionValue());
        }
        urlConnectionStringText.setText(getStringConnection());
        checkFieldsValue();
      }
    }
  }
);
  hideDbVersion();
  additionParamText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setAdditionalParams(additionParamText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  standardButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  systemButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  button1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(button1.getSelection());
      }
    }
  }
);
  button2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(!button2.getSelection());
      }
    }
  }
);
  dbTypeCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().clear();
      boolean isGeneralJDBC=isGeneralJDBC();
      if (isGeneralJDBC) {
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(""String_Node_Str"");
        }
        if (generalJdbcUserText != null) {
          generalJdbcUserText.setText(""String_Node_Str"");
        }
        if (generalJdbcPasswordText != null) {
          generalJdbcPasswordText.setText(""String_Node_Str"");
        }
      }
 else       if (isHiveDBConnSelected()) {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
        initHiveInfo();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.HBASE)) {
        initHBaseSettings();
      }
 else {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
      }
      if (schemaText != null) {
        schemaText.setText(""String_Node_Str"");
      }
      if (serverText != null) {
        serverText.setText(""String_Node_Str"");
      }
      if (sidOrDatabaseText != null) {
        sidOrDatabaseText.setText(""String_Node_Str"");
      }
      if (portText != null && portText.getText() != null) {
        portText.setText(""String_Node_Str"");
      }
      if (fileField != null) {
        fileField.setText(""String_Node_Str"");
      }
      if (datasourceText != null) {
        datasourceText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (generalJdbcClassNameText != null) {
        generalJdbcClassNameText.setText(""String_Node_Str"");
      }
      if (generalJdbcDriverjarText != null) {
        generalJdbcDriverjarText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (mappingFileText != null) {
        mappingFileText.setText(""String_Node_Str"");
      }
      boolean hiddenGeneral=!isGeneralJDBC();
      switchBetweenTypeandGeneralDB(hiddenGeneral);
      if (!isContextMode()) {
        setPropertiesFormEditable(true);
        getConnection().setDatabaseType(dbTypeCombo.getText());
        EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
        if (template != null) {
          portText.setText(template.getDefaultPort());
        }
        final String product=EDatabaseTypeName.getTypeFromDisplayName(getConnection().getDatabaseType()).getProduct();
        getConnection().setProductId(product);
        String mapping=null;
        if (product == null || product.equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          mapping=generalMappingFileText.getText();
        }
 else {
          if (MetadataTalendType.getDefaultDbmsFromProduct(product) != null) {
            mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
          }
        }
        if (mapping == null) {
          mapping=""String_Node_Str"";
        }
        getConnection().setDbmsId(mapping);
        additionParamText.setText(EDatabaseConnTemplate.getAdditionProperty(dbTypeCombo.getText()));
        if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
          datasourceText.setLabelText(Messages.getString(""String_Node_Str""));
        }
        checkAndSetIniSQLModel();
        checkAS400SpecificCase();
        checkFieldsValue();
        hideDbVersion();
        if (!schemaText.getEditable()) {
          schemaText.setText(""String_Node_Str"");
        }
        if (isHiveDBConnSelected()) {
          doHiveDBTypeSelected();
        }
 else {
          doHiveDBTypeNotSelected();
        }
      }
      if (isHiveDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      }
 else {
        checkScrolledCompositeSize();
      }
    }
  }
);
  dbTypeCombo.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (dbTypeCombo.getSelectionIndex() > -1) {
        if (Character.isLetterOrDigit(e.character)) {
          e.doit=false;
        }
      }
    }
  }
);
  fileField.addListener(SWT.FocusIn,new Listener(){
    @Override public void handleEvent(    final Event e){
      if (!isContextMode()) {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
 else {
          EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
          EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(getConnection().getDbVersionString());
          if (template != null && template.getUrlTemplate(version).contains(EDatabaseConnVar.FILENAME.getVariable())) {
            setPropertiesFormEditable(true);
            urlConnectionStringText.setEditable(false);
          }
          getConnection().setFileFieldName(PathUtils.getPortablePath(fileField.getText()));
        }
      }
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setFileFieldName(fileField.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  directoryField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          String text=directoryField.getText();
          getConnection().setDBRootPath(text);
          checkFieldsValue();
        }
      }
    }
  }
);
  sqlSyntaxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setSqlSynthax(sqlSyntaxCombo.getText());
      }
    }
  }
);
  nullCharText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setNullChar(nullCharText.getText());
      }
    }
  }
);
  stringQuoteText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setStringQuote(stringQuoteText.getText());
      }
    }
  }
);
  addGeneralDbFieldsListeners();
  addHBaseSettingFieldsListeners();
  regHiveRelatedWidgetsListeners();
}","/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  Listener listener=new Listener(){
    @Override public void handleEvent(    final Event e){
      if (isContextMode()) {
      }
 else {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
        setPropertiesFormEditable(dbTypeCombo.getSelectionIndex() > -1);
        urlConnectionStringText.setEditable(false);
      }
    }
  }
;
  usernameText.addListener(SWT.FocusIn,listener);
  passwordText.addListener(SWT.FocusIn,listener);
  serverText.addListener(SWT.FocusIn,listener);
  portText.addListener(SWT.FocusIn,listener);
  sidOrDatabaseText.addListener(SWT.FocusIn,listener);
  datasourceText.addListener(SWT.FocusIn,listener);
  schemaText.addListener(SWT.FocusIn,listener);
  additionParamText.addListener(SWT.FocusIn,listener);
  urlConnectionStringText.addListener(SWT.FocusIn,listener);
  mappingFileText.addListener(SWT.FocusIn,listener);
  serverText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setServerName(serverText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setPort(portText.getText());
          modifyFieldValue();
        }
        boolean b=true;
        String databaseType=getConnection().getDatabaseType();
        if (databaseType != null) {
          if (databaseType.equals(""String_Node_Str"")) {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
 else {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
        }
        if (b) {
          b=portText.getText().length() <= 5;
        }
        evaluateTextField(b);
      }
    }
  }
);
  portText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (!Character.isLetterOrDigit(e.character) && !Character.isIdentifierIgnorable(e.character)) {
        e.doit=false;
      }
    }
  }
);
  usernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUsername(usernameText.getText());
        }
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          try {
            String password=PasswordEncryptUtil.encryptPassword(passwordText.getText());
            getConnection().setPassword(password);
          }
 catch (          Exception ex) {
            ExceptionHandler.process(ex);
          }
        }
      }
    }
  }
);
  sidOrDatabaseText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setSID(sidOrDatabaseText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  datasourceText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setDatasourceName(datasourceText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUiSchema(schemaText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      if (!isContextMode()) {
        if (originalUischema != null) {
          if (!originalUischema.equalsIgnoreCase(schemaText.getText())) {
            ConnectionHelper.setIsConnNeedReload(getConnection(),Boolean.TRUE);
          }
 else {
            checkURLIsChanged();
          }
        }
      }
    }
  }
);
  dbVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        if (version != null) {
          getConnection().setDbVersionString(version.getVersionValue());
        }
        urlConnectionStringText.setText(getStringConnection());
        checkFieldsValue();
      }
    }
  }
);
  hideDbVersion();
  additionParamText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setAdditionalParams(additionParamText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  standardButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  systemButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  button1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(button1.getSelection());
      }
    }
  }
);
  button2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(!button2.getSelection());
      }
    }
  }
);
  dbTypeCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().clear();
      boolean isGeneralJDBC=isGeneralJDBC();
      if (isGeneralJDBC) {
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(""String_Node_Str"");
        }
        if (generalJdbcUserText != null) {
          generalJdbcUserText.setText(""String_Node_Str"");
        }
        if (generalJdbcPasswordText != null) {
          generalJdbcPasswordText.setText(""String_Node_Str"");
        }
      }
 else       if (isHiveDBConnSelected()) {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
        initHiveInfo();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.HBASE)) {
        initHBaseSettings();
      }
 else {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
      }
      if (schemaText != null) {
        schemaText.setText(""String_Node_Str"");
      }
      if (serverText != null) {
        serverText.setText(""String_Node_Str"");
      }
      if (sidOrDatabaseText != null) {
        sidOrDatabaseText.setText(""String_Node_Str"");
      }
      if (portText != null && portText.getText() != null) {
        portText.setText(""String_Node_Str"");
      }
      if (fileField != null) {
        fileField.setText(""String_Node_Str"");
      }
      if (datasourceText != null) {
        datasourceText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (generalJdbcClassNameText != null) {
        generalJdbcClassNameText.setText(""String_Node_Str"");
      }
      if (generalJdbcDriverjarText != null) {
        generalJdbcDriverjarText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (mappingFileText != null) {
        mappingFileText.setText(""String_Node_Str"");
      }
      boolean hiddenGeneral=!isGeneralJDBC();
      switchBetweenTypeandGeneralDB(hiddenGeneral);
      if (!isContextMode()) {
        setPropertiesFormEditable(true);
        getConnection().setDatabaseType(dbTypeCombo.getText());
        EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
        if (template != null) {
          portText.setText(template.getDefaultPort());
        }
        final String product=EDatabaseTypeName.getTypeFromDisplayName(getConnection().getDatabaseType()).getProduct();
        getConnection().setProductId(product);
        String mapping=null;
        if (product == null || product.equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          mapping=generalMappingFileText.getText();
        }
 else {
          if (MetadataTalendType.getDefaultDbmsFromProduct(product) != null) {
            mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
          }
        }
        if (mapping == null) {
          mapping=""String_Node_Str"";
        }
        getConnection().setDbmsId(mapping);
        additionParamText.setText(EDatabaseConnTemplate.getAdditionProperty(dbTypeCombo.getText()));
        if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
          datasourceText.setLabelText(Messages.getString(""String_Node_Str""));
        }
        checkAndSetIniSQLModel();
        checkAS400SpecificCase();
        checkFieldsValue();
        hideDbVersion();
        if (!schemaText.getEditable()) {
          schemaText.setText(""String_Node_Str"");
        }
        if (isHiveDBConnSelected()) {
          doHiveDBTypeSelected();
        }
 else {
          doHiveDBTypeNotSelected();
        }
      }
      if (isHiveDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      }
 else {
        checkScrolledCompositeSize();
      }
    }
  }
);
  fileField.addListener(SWT.FocusIn,new Listener(){
    @Override public void handleEvent(    final Event e){
      if (!isContextMode()) {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
 else {
          EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
          EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(getConnection().getDbVersionString());
          if (template != null && template.getUrlTemplate(version).contains(EDatabaseConnVar.FILENAME.getVariable())) {
            setPropertiesFormEditable(true);
            urlConnectionStringText.setEditable(false);
          }
          getConnection().setFileFieldName(PathUtils.getPortablePath(fileField.getText()));
        }
      }
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setFileFieldName(fileField.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  directoryField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          String text=directoryField.getText();
          getConnection().setDBRootPath(text);
          checkFieldsValue();
        }
      }
    }
  }
);
  sqlSyntaxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setSqlSynthax(sqlSyntaxCombo.getText());
      }
    }
  }
);
  nullCharText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setNullChar(nullCharText.getText());
      }
    }
  }
);
  stringQuoteText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setStringQuote(stringQuoteText.getText());
      }
    }
  }
);
  addGeneralDbFieldsListeners();
  addHBaseSettingFieldsListeners();
  regHiveRelatedWidgetsListeners();
}",0.9903810580836108
127549,"@Override public void keyPressed(KeyEvent e){
  if (dbTypeCombo.getSelectionIndex() > -1) {
    if (Character.isLetterOrDigit(e.character)) {
      e.doit=false;
    }
  }
}","@Override public void keyPressed(KeyEvent e){
  if (!Character.isLetterOrDigit(e.character) && !Character.isIdentifierIgnorable(e.character)) {
    e.doit=false;
  }
}",0.6882352941176471
127550,"/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  Listener listener=new Listener(){
    @Override public void handleEvent(    final Event e){
      if (isContextMode()) {
      }
 else {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
        setPropertiesFormEditable(dbTypeCombo.getSelectionIndex() > -1);
        urlConnectionStringText.setEditable(false);
      }
    }
  }
;
  usernameText.addListener(SWT.FocusIn,listener);
  passwordText.addListener(SWT.FocusIn,listener);
  serverText.addListener(SWT.FocusIn,listener);
  portText.addListener(SWT.FocusIn,listener);
  sidOrDatabaseText.addListener(SWT.FocusIn,listener);
  datasourceText.addListener(SWT.FocusIn,listener);
  schemaText.addListener(SWT.FocusIn,listener);
  additionParamText.addListener(SWT.FocusIn,listener);
  urlConnectionStringText.addListener(SWT.FocusIn,listener);
  mappingFileText.addListener(SWT.FocusIn,listener);
  serverText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setServerName(serverText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setPort(portText.getText());
          modifyFieldValue();
        }
        boolean b=true;
        String databaseType=getConnection().getDatabaseType();
        if (databaseType != null) {
          if (databaseType.equals(""String_Node_Str"")) {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
 else {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
        }
        if (b) {
          b=portText.getText().length() <= 5;
        }
        evaluateTextField(b);
      }
    }
  }
);
  portText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (!Character.isLetterOrDigit(e.character) && !Character.isIdentifierIgnorable(e.character)) {
        e.doit=false;
      }
    }
  }
);
  usernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUsername(usernameText.getText());
        }
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          try {
            String password=PasswordEncryptUtil.encryptPassword(passwordText.getText());
            getConnection().setPassword(password);
          }
 catch (          Exception ex) {
            ExceptionHandler.process(ex);
          }
        }
      }
    }
  }
);
  sidOrDatabaseText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setSID(sidOrDatabaseText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  datasourceText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setDatasourceName(datasourceText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUiSchema(schemaText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      if (!isContextMode()) {
        if (originalUischema != null) {
          if (!originalUischema.equalsIgnoreCase(schemaText.getText())) {
            ConnectionHelper.setIsConnNeedReload(getConnection(),Boolean.TRUE);
          }
 else {
            checkURLIsChanged();
          }
        }
      }
    }
  }
);
  dbVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        if (version != null) {
          getConnection().setDbVersionString(version.getVersionValue());
        }
        urlConnectionStringText.setText(getStringConnection());
        checkFieldsValue();
      }
    }
  }
);
  hideDbVersion();
  additionParamText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setAdditionalParams(additionParamText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  standardButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  systemButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  button1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(button1.getSelection());
      }
    }
  }
);
  button2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(!button2.getSelection());
      }
    }
  }
);
  dbTypeCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().clear();
      boolean isGeneralJDBC=isGeneralJDBC();
      if (isGeneralJDBC) {
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(""String_Node_Str"");
        }
        if (generalJdbcUserText != null) {
          generalJdbcUserText.setText(""String_Node_Str"");
        }
        if (generalJdbcPasswordText != null) {
          generalJdbcPasswordText.setText(""String_Node_Str"");
        }
      }
 else       if (isHiveDBConnSelected()) {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
        initHiveInfo();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.HBASE)) {
        initHBaseSettings();
      }
 else {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
      }
      if (schemaText != null) {
        schemaText.setText(""String_Node_Str"");
      }
      if (serverText != null) {
        serverText.setText(""String_Node_Str"");
      }
      if (sidOrDatabaseText != null) {
        sidOrDatabaseText.setText(""String_Node_Str"");
      }
      if (portText != null && portText.getText() != null) {
        portText.setText(""String_Node_Str"");
      }
      if (fileField != null) {
        fileField.setText(""String_Node_Str"");
      }
      if (datasourceText != null) {
        datasourceText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (generalJdbcClassNameText != null) {
        generalJdbcClassNameText.setText(""String_Node_Str"");
      }
      if (generalJdbcDriverjarText != null) {
        generalJdbcDriverjarText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (mappingFileText != null) {
        mappingFileText.setText(""String_Node_Str"");
      }
      boolean hiddenGeneral=!isGeneralJDBC();
      switchBetweenTypeandGeneralDB(hiddenGeneral);
      if (!isContextMode()) {
        getConnection().setDatabaseType(dbTypeCombo.getText());
        EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
        if (template != null) {
          portText.setText(template.getDefaultPort());
        }
        final String product=EDatabaseTypeName.getTypeFromDisplayName(getConnection().getDatabaseType()).getProduct();
        getConnection().setProductId(product);
        String mapping=null;
        if (product == null || product.equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          mapping=generalMappingFileText.getText();
        }
 else {
          if (MetadataTalendType.getDefaultDbmsFromProduct(product) != null) {
            mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
          }
        }
        if (mapping == null) {
          mapping=""String_Node_Str"";
        }
        getConnection().setDbmsId(mapping);
        setPropertiesFormEditable(true);
        additionParamText.setText(EDatabaseConnTemplate.getAdditionProperty(dbTypeCombo.getText()));
        if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
          datasourceText.setLabelText(Messages.getString(""String_Node_Str""));
        }
        checkAndSetIniSQLModel();
        checkAS400SpecificCase();
        checkFieldsValue();
        hideDbVersion();
        if (!schemaText.getEditable()) {
          schemaText.setText(""String_Node_Str"");
        }
        if (isHiveDBConnSelected()) {
          doHiveDBTypeSelected();
        }
 else {
          doHiveDBTypeNotSelected();
        }
      }
      if (isHiveDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      }
 else {
        checkScrolledCompositeSize();
      }
      if (!isDBTypeSelected(EDatabaseConnTemplate.HBASE) && !isDBTypeSelected(EDatabaseConnTemplate.HIVE)) {
        clearHadoopRelatedParameters();
      }
    }
  }
);
  dbTypeCombo.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (dbTypeCombo.getSelectionIndex() > -1) {
        if (Character.isLetterOrDigit(e.character)) {
          e.doit=false;
        }
      }
    }
  }
);
  fileField.addListener(SWT.FocusIn,new Listener(){
    @Override public void handleEvent(    final Event e){
      if (!isContextMode()) {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
 else {
          EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
          EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(getConnection().getDbVersionString());
          if (template != null && template.getUrlTemplate(version).contains(EDatabaseConnVar.FILENAME.getVariable())) {
            setPropertiesFormEditable(true);
            urlConnectionStringText.setEditable(false);
          }
          getConnection().setFileFieldName(PathUtils.getPortablePath(fileField.getText()));
        }
      }
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setFileFieldName(fileField.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  directoryField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          String text=directoryField.getText();
          getConnection().setDBRootPath(text);
          checkFieldsValue();
        }
      }
    }
  }
);
  sqlSyntaxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setSqlSynthax(sqlSyntaxCombo.getText());
      }
    }
  }
);
  nullCharText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setNullChar(nullCharText.getText());
      }
    }
  }
);
  stringQuoteText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setStringQuote(stringQuoteText.getText());
      }
    }
  }
);
  addGeneralDbFieldsListeners();
  addHBaseSettingFieldsListeners();
  regHiveRelatedWidgetsListeners();
  if (canLinkToHadoopCluster()) {
    addHadoopClusterLinkListeners();
  }
}","/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  Listener listener=new Listener(){
    @Override public void handleEvent(    final Event e){
      if (isContextMode()) {
      }
 else {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
        setPropertiesFormEditable(dbTypeCombo.getSelectionIndex() > -1);
        urlConnectionStringText.setEditable(false);
      }
    }
  }
;
  usernameText.addListener(SWT.FocusIn,listener);
  passwordText.addListener(SWT.FocusIn,listener);
  serverText.addListener(SWT.FocusIn,listener);
  portText.addListener(SWT.FocusIn,listener);
  sidOrDatabaseText.addListener(SWT.FocusIn,listener);
  datasourceText.addListener(SWT.FocusIn,listener);
  schemaText.addListener(SWT.FocusIn,listener);
  additionParamText.addListener(SWT.FocusIn,listener);
  urlConnectionStringText.addListener(SWT.FocusIn,listener);
  mappingFileText.addListener(SWT.FocusIn,listener);
  serverText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setServerName(serverText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setPort(portText.getText());
          modifyFieldValue();
        }
        boolean b=true;
        String databaseType=getConnection().getDatabaseType();
        if (databaseType != null) {
          if (databaseType.equals(""String_Node_Str"")) {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
 else {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
        }
        if (b) {
          b=portText.getText().length() <= 5;
        }
        evaluateTextField(b);
      }
    }
  }
);
  portText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (!Character.isLetterOrDigit(e.character) && !Character.isIdentifierIgnorable(e.character)) {
        e.doit=false;
      }
    }
  }
);
  usernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUsername(usernameText.getText());
        }
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          try {
            String password=PasswordEncryptUtil.encryptPassword(passwordText.getText());
            getConnection().setPassword(password);
          }
 catch (          Exception ex) {
            ExceptionHandler.process(ex);
          }
        }
      }
    }
  }
);
  sidOrDatabaseText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setSID(sidOrDatabaseText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  datasourceText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setDatasourceName(datasourceText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUiSchema(schemaText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      if (!isContextMode()) {
        if (originalUischema != null) {
          if (!originalUischema.equalsIgnoreCase(schemaText.getText())) {
            ConnectionHelper.setIsConnNeedReload(getConnection(),Boolean.TRUE);
          }
 else {
            checkURLIsChanged();
          }
        }
      }
    }
  }
);
  dbVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        if (version != null) {
          getConnection().setDbVersionString(version.getVersionValue());
        }
        urlConnectionStringText.setText(getStringConnection());
        checkFieldsValue();
      }
    }
  }
);
  hideDbVersion();
  additionParamText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setAdditionalParams(additionParamText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  standardButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  systemButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  button1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(button1.getSelection());
      }
    }
  }
);
  button2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(!button2.getSelection());
      }
    }
  }
);
  dbTypeCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().clear();
      boolean isGeneralJDBC=isGeneralJDBC();
      if (isGeneralJDBC) {
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(""String_Node_Str"");
        }
        if (generalJdbcUserText != null) {
          generalJdbcUserText.setText(""String_Node_Str"");
        }
        if (generalJdbcPasswordText != null) {
          generalJdbcPasswordText.setText(""String_Node_Str"");
        }
      }
 else       if (isHiveDBConnSelected()) {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
        initHiveInfo();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.HBASE)) {
        initHBaseSettings();
      }
 else {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
      }
      if (schemaText != null) {
        schemaText.setText(""String_Node_Str"");
      }
      if (serverText != null) {
        serverText.setText(""String_Node_Str"");
      }
      if (sidOrDatabaseText != null) {
        sidOrDatabaseText.setText(""String_Node_Str"");
      }
      if (portText != null && portText.getText() != null) {
        portText.setText(""String_Node_Str"");
      }
      if (fileField != null) {
        fileField.setText(""String_Node_Str"");
      }
      if (datasourceText != null) {
        datasourceText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (generalJdbcClassNameText != null) {
        generalJdbcClassNameText.setText(""String_Node_Str"");
      }
      if (generalJdbcDriverjarText != null) {
        generalJdbcDriverjarText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (mappingFileText != null) {
        mappingFileText.setText(""String_Node_Str"");
      }
      boolean hiddenGeneral=!isGeneralJDBC();
      switchBetweenTypeandGeneralDB(hiddenGeneral);
      if (!isContextMode()) {
        getConnection().setDatabaseType(dbTypeCombo.getText());
        EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
        if (template != null) {
          portText.setText(template.getDefaultPort());
        }
        final String product=EDatabaseTypeName.getTypeFromDisplayName(getConnection().getDatabaseType()).getProduct();
        getConnection().setProductId(product);
        String mapping=null;
        if (product == null || product.equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          mapping=generalMappingFileText.getText();
        }
 else {
          if (MetadataTalendType.getDefaultDbmsFromProduct(product) != null) {
            mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
          }
        }
        if (mapping == null) {
          mapping=""String_Node_Str"";
        }
        getConnection().setDbmsId(mapping);
        setPropertiesFormEditable(true);
        additionParamText.setText(EDatabaseConnTemplate.getAdditionProperty(dbTypeCombo.getText()));
        if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
          datasourceText.setLabelText(Messages.getString(""String_Node_Str""));
        }
        checkAndSetIniSQLModel();
        checkAS400SpecificCase();
        checkFieldsValue();
        hideDbVersion();
        if (!schemaText.getEditable()) {
          schemaText.setText(""String_Node_Str"");
        }
        if (isHiveDBConnSelected()) {
          doHiveDBTypeSelected();
        }
 else {
          doHiveDBTypeNotSelected();
        }
      }
      if (isHiveDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      }
 else {
        checkScrolledCompositeSize();
      }
      if (!isDBTypeSelected(EDatabaseConnTemplate.HBASE) && !isDBTypeSelected(EDatabaseConnTemplate.HIVE)) {
        clearHadoopRelatedParameters();
      }
    }
  }
);
  fileField.addListener(SWT.FocusIn,new Listener(){
    @Override public void handleEvent(    final Event e){
      if (!isContextMode()) {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
 else {
          EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
          EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(getConnection().getDbVersionString());
          if (template != null && template.getUrlTemplate(version).contains(EDatabaseConnVar.FILENAME.getVariable())) {
            setPropertiesFormEditable(true);
            urlConnectionStringText.setEditable(false);
          }
          getConnection().setFileFieldName(PathUtils.getPortablePath(fileField.getText()));
        }
      }
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setFileFieldName(fileField.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  directoryField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          String text=directoryField.getText();
          getConnection().setDBRootPath(text);
          checkFieldsValue();
        }
      }
    }
  }
);
  sqlSyntaxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setSqlSynthax(sqlSyntaxCombo.getText());
      }
    }
  }
);
  nullCharText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setNullChar(nullCharText.getText());
      }
    }
  }
);
  stringQuoteText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setStringQuote(stringQuoteText.getText());
      }
    }
  }
);
  addGeneralDbFieldsListeners();
  addHBaseSettingFieldsListeners();
  regHiveRelatedWidgetsListeners();
  if (canLinkToHadoopCluster()) {
    addHadoopClusterLinkListeners();
  }
}",0.9905433912853714
127551,"public static Collection<IRepositoryViewObject> getAllProcessDependencies(Collection<Item> items,boolean withSystem){
  clearFakeProcesses();
  createFakeProcesses(items);
  Collection<IRepositoryViewObject> dependencies=getContextDependenciesOfProcess(items);
  dependencies.addAll(getMetadataDependenciesOfProcess(items));
  dependencies.addAll(getChildPorcessDependenciesOfProcess(items,false));
  dependencies.addAll(getJobletDependenciesOfProcess(items,false));
  dependencies.addAll(getSQLTemplatesDependenciesOfProcess(items,withSystem));
  dependencies.addAll(getRoutineDependenciesOfProcess(items,withSystem,false));
  if (org.talend.commons.utils.platform.PluginChecker.isTDQLoaded()) {
    ITDQItemService tdqItemService=(ITDQItemService)GlobalServiceRegister.getDefault().getService(ITDQItemService.class);
    if (tdqItemService != null && tdqItemService.hasProcessItemDependencies(items)) {
      dependencies.addAll(tdqItemService.getProcessItemDependencies(items));
    }
  }
  clearFakeProcesses();
  return dependencies;
}","public static Collection<IRepositoryViewObject> getAllProcessDependencies(Collection<Item> items,boolean withSystem){
  clearFakeProcesses();
  createFakeProcesses(items);
  Collection<IRepositoryViewObject> dependencies=getContextDependenciesOfProcess(items);
  dependencies.addAll(getMetadataDependenciesOfProcess(items));
  dependencies.addAll(getChildPorcessDependenciesOfProcess(items,false));
  dependencies.addAll(getJobletDependenciesOfProcess(items,false));
  dependencies.addAll(getSQLTemplatesDependenciesOfProcess(items,withSystem));
  dependencies.addAll(getRoutineDependenciesOfProcess(items,withSystem,false));
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQItemService.class)) {
    ITDQItemService tdqItemService=(ITDQItemService)GlobalServiceRegister.getDefault().getService(ITDQItemService.class);
    if (tdqItemService != null && tdqItemService.hasProcessItemDependencies(items)) {
      dependencies.addAll(tdqItemService.getProcessItemDependencies(items));
    }
  }
  clearFakeProcesses();
  return dependencies;
}",0.9389312977099236
127552,"@Override public void keyPressed(KeyEvent e){
  if (dbTypeCombo.getSelectionIndex() > -1) {
    if (Character.isLetterOrDigit(e.character)) {
      e.doit=false;
    }
  }
}","@Override public void keyPressed(KeyEvent e){
  if (!Character.isLetterOrDigit(e.character) && !Character.isIdentifierIgnorable(e.character)) {
    e.doit=false;
  }
}",0.6882352941176471
127553,"/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  Listener listener=new Listener(){
    @Override public void handleEvent(    final Event e){
      if (isContextMode()) {
      }
 else {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
        setPropertiesFormEditable(dbTypeCombo.getSelectionIndex() > -1);
        urlConnectionStringText.setEditable(false);
      }
    }
  }
;
  usernameText.addListener(SWT.FocusIn,listener);
  passwordText.addListener(SWT.FocusIn,listener);
  serverText.addListener(SWT.FocusIn,listener);
  portText.addListener(SWT.FocusIn,listener);
  sidOrDatabaseText.addListener(SWT.FocusIn,listener);
  datasourceText.addListener(SWT.FocusIn,listener);
  schemaText.addListener(SWT.FocusIn,listener);
  additionParamText.addListener(SWT.FocusIn,listener);
  urlConnectionStringText.addListener(SWT.FocusIn,listener);
  mappingFileText.addListener(SWT.FocusIn,listener);
  serverText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setServerName(serverText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setPort(portText.getText());
          modifyFieldValue();
        }
        boolean b=true;
        String databaseType=getConnection().getDatabaseType();
        if (databaseType != null) {
          if (databaseType.equals(""String_Node_Str"")) {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
 else {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
        }
        if (b) {
          b=portText.getText().length() <= 5;
        }
        evaluateTextField(b);
      }
    }
  }
);
  portText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (!Character.isLetterOrDigit(e.character) && !Character.isIdentifierIgnorable(e.character)) {
        e.doit=false;
      }
    }
  }
);
  usernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUsername(usernameText.getText());
        }
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          try {
            String password=PasswordEncryptUtil.encryptPassword(passwordText.getText());
            getConnection().setPassword(password);
          }
 catch (          Exception ex) {
            ExceptionHandler.process(ex);
          }
        }
      }
    }
  }
);
  sidOrDatabaseText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setSID(sidOrDatabaseText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  datasourceText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setDatasourceName(datasourceText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUiSchema(schemaText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      if (!isContextMode()) {
        if (originalUischema != null) {
          if (!originalUischema.equalsIgnoreCase(schemaText.getText())) {
            ConnectionHelper.setIsConnNeedReload(getConnection(),Boolean.TRUE);
          }
 else {
            checkURLIsChanged();
          }
        }
      }
    }
  }
);
  dbVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        if (version != null) {
          getConnection().setDbVersionString(version.getVersionValue());
        }
        urlConnectionStringText.setText(getStringConnection());
        checkFieldsValue();
      }
    }
  }
);
  hideDbVersion();
  additionParamText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setAdditionalParams(additionParamText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  standardButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  systemButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  button1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(button1.getSelection());
      }
    }
  }
);
  button2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(!button2.getSelection());
      }
    }
  }
);
  dbTypeCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().clear();
      boolean isGeneralJDBC=isGeneralJDBC();
      if (isGeneralJDBC) {
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(""String_Node_Str"");
        }
        if (generalJdbcUserText != null) {
          generalJdbcUserText.setText(""String_Node_Str"");
        }
        if (generalJdbcPasswordText != null) {
          generalJdbcPasswordText.setText(""String_Node_Str"");
        }
      }
 else       if (isHiveDBConnSelected()) {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
        initHiveInfo();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.HBASE)) {
        initHBaseSettings();
      }
 else {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
      }
      if (schemaText != null) {
        schemaText.setText(""String_Node_Str"");
      }
      if (serverText != null) {
        serverText.setText(""String_Node_Str"");
      }
      if (sidOrDatabaseText != null) {
        sidOrDatabaseText.setText(""String_Node_Str"");
      }
      if (portText != null && portText.getText() != null) {
        portText.setText(""String_Node_Str"");
      }
      if (fileField != null) {
        fileField.setText(""String_Node_Str"");
      }
      if (datasourceText != null) {
        datasourceText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (generalJdbcClassNameText != null) {
        generalJdbcClassNameText.setText(""String_Node_Str"");
      }
      if (generalJdbcDriverjarText != null) {
        generalJdbcDriverjarText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (mappingFileText != null) {
        mappingFileText.setText(""String_Node_Str"");
      }
      boolean hiddenGeneral=!isGeneralJDBC();
      switchBetweenTypeandGeneralDB(hiddenGeneral);
      if (!isContextMode()) {
        getConnection().setDatabaseType(dbTypeCombo.getText());
        EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
        if (template != null) {
          portText.setText(template.getDefaultPort());
        }
        final String product=EDatabaseTypeName.getTypeFromDisplayName(getConnection().getDatabaseType()).getProduct();
        getConnection().setProductId(product);
        String mapping=null;
        if (product == null || product.equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          mapping=generalMappingFileText.getText();
        }
 else {
          if (MetadataTalendType.getDefaultDbmsFromProduct(product) != null) {
            mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
          }
        }
        if (mapping == null) {
          mapping=""String_Node_Str"";
        }
        getConnection().setDbmsId(mapping);
        setPropertiesFormEditable(true);
        additionParamText.setText(EDatabaseConnTemplate.getAdditionProperty(dbTypeCombo.getText()));
        if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
          datasourceText.setLabelText(Messages.getString(""String_Node_Str""));
        }
        checkAndSetIniSQLModel();
        checkAS400SpecificCase();
        checkFieldsValue();
        hideDbVersion();
        if (!schemaText.getEditable()) {
          schemaText.setText(""String_Node_Str"");
        }
        if (isHiveDBConnSelected()) {
          doHiveDBTypeSelected();
        }
 else {
          doHiveDBTypeNotSelected();
        }
      }
      if (isHiveDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      }
 else {
        checkScrolledCompositeSize();
      }
      if (!isDBTypeSelected(EDatabaseConnTemplate.HBASE) && !isDBTypeSelected(EDatabaseConnTemplate.HIVE)) {
        clearHadoopRelatedParameters();
      }
    }
  }
);
  dbTypeCombo.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (dbTypeCombo.getSelectionIndex() > -1) {
        if (Character.isLetterOrDigit(e.character)) {
          e.doit=false;
        }
      }
    }
  }
);
  fileField.addListener(SWT.FocusIn,new Listener(){
    @Override public void handleEvent(    final Event e){
      if (!isContextMode()) {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
 else {
          EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
          EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(getConnection().getDbVersionString());
          if (template != null && template.getUrlTemplate(version).contains(EDatabaseConnVar.FILENAME.getVariable())) {
            setPropertiesFormEditable(true);
            urlConnectionStringText.setEditable(false);
          }
          getConnection().setFileFieldName(PathUtils.getPortablePath(fileField.getText()));
        }
      }
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setFileFieldName(fileField.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  directoryField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          String text=directoryField.getText();
          getConnection().setDBRootPath(text);
          checkFieldsValue();
        }
      }
    }
  }
);
  sqlSyntaxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setSqlSynthax(sqlSyntaxCombo.getText());
      }
    }
  }
);
  nullCharText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setNullChar(nullCharText.getText());
      }
    }
  }
);
  stringQuoteText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setStringQuote(stringQuoteText.getText());
      }
    }
  }
);
  addGeneralDbFieldsListeners();
  addHBaseSettingFieldsListeners();
  regHiveRelatedWidgetsListeners();
  if (canLinkToHadoopCluster()) {
    addHadoopClusterLinkListeners();
  }
}","/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  Listener listener=new Listener(){
    @Override public void handleEvent(    final Event e){
      if (isContextMode()) {
      }
 else {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
        setPropertiesFormEditable(dbTypeCombo.getSelectionIndex() > -1);
        urlConnectionStringText.setEditable(false);
      }
    }
  }
;
  usernameText.addListener(SWT.FocusIn,listener);
  passwordText.addListener(SWT.FocusIn,listener);
  serverText.addListener(SWT.FocusIn,listener);
  portText.addListener(SWT.FocusIn,listener);
  sidOrDatabaseText.addListener(SWT.FocusIn,listener);
  datasourceText.addListener(SWT.FocusIn,listener);
  schemaText.addListener(SWT.FocusIn,listener);
  additionParamText.addListener(SWT.FocusIn,listener);
  urlConnectionStringText.addListener(SWT.FocusIn,listener);
  mappingFileText.addListener(SWT.FocusIn,listener);
  serverText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setServerName(serverText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setPort(portText.getText());
          modifyFieldValue();
        }
        boolean b=true;
        String databaseType=getConnection().getDatabaseType();
        if (databaseType != null) {
          if (databaseType.equals(""String_Node_Str"")) {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
 else {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
        }
        if (b) {
          b=portText.getText().length() <= 5;
        }
        evaluateTextField(b);
      }
    }
  }
);
  portText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (!Character.isLetterOrDigit(e.character) && !Character.isIdentifierIgnorable(e.character)) {
        e.doit=false;
      }
    }
  }
);
  usernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUsername(usernameText.getText());
        }
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          try {
            String password=PasswordEncryptUtil.encryptPassword(passwordText.getText());
            getConnection().setPassword(password);
          }
 catch (          Exception ex) {
            ExceptionHandler.process(ex);
          }
        }
      }
    }
  }
);
  sidOrDatabaseText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setSID(sidOrDatabaseText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  datasourceText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setDatasourceName(datasourceText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUiSchema(schemaText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      if (!isContextMode()) {
        if (originalUischema != null) {
          if (!originalUischema.equalsIgnoreCase(schemaText.getText())) {
            ConnectionHelper.setIsConnNeedReload(getConnection(),Boolean.TRUE);
          }
 else {
            checkURLIsChanged();
          }
        }
      }
    }
  }
);
  dbVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        if (version != null) {
          getConnection().setDbVersionString(version.getVersionValue());
        }
        urlConnectionStringText.setText(getStringConnection());
        checkFieldsValue();
      }
    }
  }
);
  hideDbVersion();
  additionParamText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setAdditionalParams(additionParamText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  standardButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  systemButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  button1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(button1.getSelection());
      }
    }
  }
);
  button2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(!button2.getSelection());
      }
    }
  }
);
  dbTypeCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().clear();
      boolean isGeneralJDBC=isGeneralJDBC();
      if (isGeneralJDBC) {
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(""String_Node_Str"");
        }
        if (generalJdbcUserText != null) {
          generalJdbcUserText.setText(""String_Node_Str"");
        }
        if (generalJdbcPasswordText != null) {
          generalJdbcPasswordText.setText(""String_Node_Str"");
        }
      }
 else       if (isHiveDBConnSelected()) {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
        initHiveInfo();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.HBASE)) {
        initHBaseSettings();
      }
 else {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
      }
      if (schemaText != null) {
        schemaText.setText(""String_Node_Str"");
      }
      if (serverText != null) {
        serverText.setText(""String_Node_Str"");
      }
      if (sidOrDatabaseText != null) {
        sidOrDatabaseText.setText(""String_Node_Str"");
      }
      if (portText != null && portText.getText() != null) {
        portText.setText(""String_Node_Str"");
      }
      if (fileField != null) {
        fileField.setText(""String_Node_Str"");
      }
      if (datasourceText != null) {
        datasourceText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (generalJdbcClassNameText != null) {
        generalJdbcClassNameText.setText(""String_Node_Str"");
      }
      if (generalJdbcDriverjarText != null) {
        generalJdbcDriverjarText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (mappingFileText != null) {
        mappingFileText.setText(""String_Node_Str"");
      }
      boolean hiddenGeneral=!isGeneralJDBC();
      switchBetweenTypeandGeneralDB(hiddenGeneral);
      if (!isContextMode()) {
        getConnection().setDatabaseType(dbTypeCombo.getText());
        EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
        if (template != null) {
          portText.setText(template.getDefaultPort());
        }
        final String product=EDatabaseTypeName.getTypeFromDisplayName(getConnection().getDatabaseType()).getProduct();
        getConnection().setProductId(product);
        String mapping=null;
        if (product == null || product.equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          mapping=generalMappingFileText.getText();
        }
 else {
          if (MetadataTalendType.getDefaultDbmsFromProduct(product) != null) {
            mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
          }
        }
        if (mapping == null) {
          mapping=""String_Node_Str"";
        }
        getConnection().setDbmsId(mapping);
        setPropertiesFormEditable(true);
        additionParamText.setText(EDatabaseConnTemplate.getAdditionProperty(dbTypeCombo.getText()));
        if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
          datasourceText.setLabelText(Messages.getString(""String_Node_Str""));
        }
        checkAndSetIniSQLModel();
        checkAS400SpecificCase();
        checkFieldsValue();
        hideDbVersion();
        if (!schemaText.getEditable()) {
          schemaText.setText(""String_Node_Str"");
        }
        if (isHiveDBConnSelected()) {
          doHiveDBTypeSelected();
        }
 else {
          doHiveDBTypeNotSelected();
        }
      }
      if (isHiveDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      }
 else {
        checkScrolledCompositeSize();
      }
      if (!isDBTypeSelected(EDatabaseConnTemplate.HBASE) && !isDBTypeSelected(EDatabaseConnTemplate.HIVE)) {
        clearHadoopRelatedParameters();
      }
    }
  }
);
  fileField.addListener(SWT.FocusIn,new Listener(){
    @Override public void handleEvent(    final Event e){
      if (!isContextMode()) {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
 else {
          EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
          EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(getConnection().getDbVersionString());
          if (template != null && template.getUrlTemplate(version).contains(EDatabaseConnVar.FILENAME.getVariable())) {
            setPropertiesFormEditable(true);
            urlConnectionStringText.setEditable(false);
          }
          getConnection().setFileFieldName(PathUtils.getPortablePath(fileField.getText()));
        }
      }
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setFileFieldName(fileField.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  directoryField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          String text=directoryField.getText();
          getConnection().setDBRootPath(text);
          checkFieldsValue();
        }
      }
    }
  }
);
  sqlSyntaxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setSqlSynthax(sqlSyntaxCombo.getText());
      }
    }
  }
);
  nullCharText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setNullChar(nullCharText.getText());
      }
    }
  }
);
  stringQuoteText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setStringQuote(stringQuoteText.getText());
      }
    }
  }
);
  addGeneralDbFieldsListeners();
  addHBaseSettingFieldsListeners();
  regHiveRelatedWidgetsListeners();
  if (canLinkToHadoopCluster()) {
    addHadoopClusterLinkListeners();
  }
}",0.9905433912853714
127554,"@Override public void initNewProjectTasks(Project project){
  List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(true);
  toExecute.addAll(GetTasksHelper.getProjectTasks(false));
  List<MigrationTask> done=new ArrayList<MigrationTask>();
  for (  IProjectMigrationTask task : toExecute) {
    done.add(MigrationUtil.convertMigrationTask(task));
  }
  saveProjectMigrationTasksDone(project,done);
}","@Override public void initNewProjectTasks(Project project){
  List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(true);
  toExecute.addAll(GetTasksHelper.getProjectTasks(false));
  List<MigrationTask> done=new ArrayList<MigrationTask>();
  for (  IProjectMigrationTask task : toExecute) {
    done.add(MigrationUtil.convertMigrationTask(task));
  }
  project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
  saveProjectMigrationTasksDone(project,done);
}",0.9021739130434784
127555,"@Override public void executeMigrationTasksForLogon(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<MigrationTask> done=new ArrayList<MigrationTask>(project.getEmfProject().getMigrationTask());
  if (beforeLogon) {
    boolean isNewProject=project.getEmfProject().getProductVersion() == null ? true : false;
    setMigrationOnNewProject(beforeLogon && isNewProject && done.isEmpty());
    if (isNewProject && !RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
      project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
    }
  }
  sortMigrationTasks(toExecute);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
    if (mgTask == null && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon && (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion()) || nbMigrationsToDo > 0)) {
    MigrationUtil.removeMigrationTaskById(done,RELATION_TASK);
    RelationshipItemBuilder.getInstance().unloadRelations();
    nbMigrationsToDo++;
  }
  if (nbMigrationsToDo == 0) {
    return;
  }
  MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    @Override public void run() throws PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          try {
            boolean needSave=false;
            if (!isMigrationOnNewProject()) {
              if (!beforeLogon) {
                ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
                Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
                  @Override public int compare(                  ERepositoryObjectType arg0,                  ERepositoryObjectType arg1){
                    if (arg0 == ERepositoryObjectType.PROCESS) {
                      return 1;
                    }
                    if (arg0 == ERepositoryObjectType.JOBLET) {
                      return 1;
                    }
                    return 0;
                  }
                }
);
                for (                ERepositoryObjectType type : types) {
                  if (!type.isResourceItem()) {
                    continue;
                  }
                  List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
                  for (                  IRepositoryViewObject object : objects) {
                    Item item=object.getProperty().getItem();
                    monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
                    subProgressMonitor.worked(1);
                    for (                    IProjectMigrationTask task : toExecute) {
                      if (monitorWrap.isCanceled()) {
                        throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
                      }
                      MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
                      if (mgTask == null && !task.isDeprecated()) {
                        ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                          if (task.getStatus() != ExecutionResult.FAILURE) {
                            task.setStatus(status);
                          }
case SUCCESS_NO_ALERT:
                        if (task.getStatus() != ExecutionResult.FAILURE) {
                          task.setStatus(status);
                        }
case NOTHING_TO_DO:
                      if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                        task.setStatus(status);
                      }
                    break;
case SKIPPED:
                  if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                    task.setStatus(status);
                  }
                break;
case FAILURE:
              task.setStatus(status);
default :
            task.setStatus(status);
          break;
      }
    }
  }
  if (object instanceof RepositoryObject) {
    ((RepositoryObject)object).unload();
  }
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
if (mgTask == null && !task.isDeprecated()) {
try {
  ExecutionResult status;
  if (beforeLogon) {
    status=task.execute(project);
    task.setStatus(status);
  }
 else {
    status=task.getStatus();
  }
switch (status) {
case SUCCESS_WITH_ALERT:
    if (!isMigrationOnNewProject()) {
      doneThisSession.add(task);
    }
case SUCCESS_NO_ALERT:
  log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
case NOTHING_TO_DO:
done.add(MigrationUtil.convertMigrationTask(task));
needSave=true;
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
case FAILURE:
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
 else if (mgTask == null && task.isDeprecated()) {
done.add(MigrationUtil.convertMigrationTask(task));
needSave=true;
}
}
}
 else {
for (IProjectMigrationTask task : toExecute) {
task.setStatus(ExecutionResult.NOTHING_TO_DO);
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
if (!isMigrationOnNewProject()) {
RelationshipItemBuilder.getInstance().saveRelations();
}
}
 catch (PersistenceException e) {
throw new CoreException(new Status(Status.ERROR,""String_Node_Str"",e.getMessage(),e));
}
}
}
;
try {
IWorkspace workspace1=ResourcesPlugin.getWorkspace();
ISchedulingRule schedulingRule=workspace1.getRoot();
workspace1.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitorWrap);
}
 catch (CoreException e) {
throw new PersistenceException(e);
}
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
if (!beforeLogon) {
setMigrationOnNewProject(false);
}
}","@Override public void executeMigrationTasksForLogon(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<MigrationTask> done=new ArrayList<MigrationTask>(project.getEmfProject().getMigrationTask());
  if (beforeLogon) {
    boolean isNewProject=project.getEmfProject().getProductVersion() == null ? true : false;
    setMigrationOnNewProject(beforeLogon && isNewProject && done.isEmpty());
  }
  sortMigrationTasks(toExecute);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
    if (mgTask == null && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon && (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion()) || nbMigrationsToDo > 0)) {
    MigrationUtil.removeMigrationTaskById(done,RELATION_TASK);
    RelationshipItemBuilder.getInstance().unloadRelations();
    nbMigrationsToDo++;
  }
  if (nbMigrationsToDo == 0) {
    return;
  }
  MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    @Override public void run() throws PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          try {
            boolean needSave=false;
            if (!isMigrationOnNewProject()) {
              if (!beforeLogon) {
                ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
                Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
                  @Override public int compare(                  ERepositoryObjectType arg0,                  ERepositoryObjectType arg1){
                    if (arg0 == ERepositoryObjectType.PROCESS) {
                      return 1;
                    }
                    if (arg0 == ERepositoryObjectType.JOBLET) {
                      return 1;
                    }
                    return 0;
                  }
                }
);
                for (                ERepositoryObjectType type : types) {
                  if (!type.isResourceItem()) {
                    continue;
                  }
                  List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
                  for (                  IRepositoryViewObject object : objects) {
                    Item item=object.getProperty().getItem();
                    monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
                    subProgressMonitor.worked(1);
                    for (                    IProjectMigrationTask task : toExecute) {
                      if (monitorWrap.isCanceled()) {
                        throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
                      }
                      MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
                      if (mgTask == null && !task.isDeprecated()) {
                        ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                          if (task.getStatus() != ExecutionResult.FAILURE) {
                            task.setStatus(status);
                          }
case SUCCESS_NO_ALERT:
                        if (task.getStatus() != ExecutionResult.FAILURE) {
                          task.setStatus(status);
                        }
case NOTHING_TO_DO:
                      if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                        task.setStatus(status);
                      }
                    break;
case SKIPPED:
                  if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                    task.setStatus(status);
                  }
                break;
case FAILURE:
              task.setStatus(status);
default :
            task.setStatus(status);
          break;
      }
    }
  }
  if (object instanceof RepositoryObject) {
    ((RepositoryObject)object).unload();
  }
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
if (mgTask == null && !task.isDeprecated()) {
try {
  ExecutionResult status;
  if (beforeLogon) {
    status=task.execute(project);
    task.setStatus(status);
  }
 else {
    status=task.getStatus();
  }
switch (status) {
case SUCCESS_WITH_ALERT:
    if (!isMigrationOnNewProject()) {
      doneThisSession.add(task);
    }
case SUCCESS_NO_ALERT:
  log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
case NOTHING_TO_DO:
done.add(MigrationUtil.convertMigrationTask(task));
needSave=true;
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
case FAILURE:
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
 else if (mgTask == null && task.isDeprecated()) {
done.add(MigrationUtil.convertMigrationTask(task));
needSave=true;
}
}
}
 else {
for (IProjectMigrationTask task : toExecute) {
task.setStatus(ExecutionResult.NOTHING_TO_DO);
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
if (!isMigrationOnNewProject()) {
RelationshipItemBuilder.getInstance().saveRelations();
}
}
 catch (PersistenceException e) {
throw new CoreException(new Status(Status.ERROR,""String_Node_Str"",e.getMessage(),e));
}
}
}
;
try {
IWorkspace workspace1=ResourcesPlugin.getWorkspace();
ISchedulingRule schedulingRule=workspace1.getRoot();
workspace1.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitorWrap);
}
 catch (CoreException e) {
throw new PersistenceException(e);
}
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
if (!beforeLogon) {
setMigrationOnNewProject(false);
}
}",0.9859261120884644
127556,"protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}","protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    if (columns.getRow() == 0 && MetadataConnectionUtils.isMysql(dbMetaData)) {
      boolean check=!Pattern.matches(""String_Node_Str"",tableName);
      if (check) {
        columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,TalendQuoteUtils.addQuotes(tableName,TalendQuoteUtils.ANTI_QUOTE));
      }
    }
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}",0.9734380220514534
127557,"protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    if (columns.getRow() == 0 && MetadataConnectionUtils.isMysql(dbMetaData)) {
      boolean check=!Pattern.matches(""String_Node_Str"",tableName);
      if (check) {
        columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,TalendQuoteUtils.addQuotes(tableName,TalendQuoteUtils.ANTI_QUOTE));
      }
    }
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}","protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    if (MetadataConnectionUtils.isMysql(dbMetaData)) {
      boolean check=!Pattern.matches(""String_Node_Str"",tableName);
      if (check && !columns.next()) {
        columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,TalendQuoteUtils.addQuotes(tableName,TalendQuoteUtils.ANTI_QUOTE));
      }
      columns.beforeFirst();
    }
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}",0.9739299926906522
127558,"protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}","protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    if (MetadataConnectionUtils.isMysql(dbMetaData)) {
      boolean check=!Pattern.matches(""String_Node_Str"",tableName);
      if (check && !columns.next()) {
        columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,TalendQuoteUtils.addQuotes(tableName,TalendQuoteUtils.ANTI_QUOTE));
      }
      columns.beforeFirst();
    }
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}",0.97175983436853
127559,"public static String addQuotesWithSpaceField(String fieldName,String dbType){
  if (fieldName == null) {
    fieldName=""String_Node_Str"";
  }
  if (fieldName.startsWith(""String_Node_Str"") && fieldName.endsWith(""String_Node_Str"")) {
    return fieldName;
  }
  boolean b=true;
  for (int i=0; i < fieldName.length(); i++) {
    char c=fieldName.charAt(i);
    b=b && c >= '0' && c <= '9';
  }
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  if (name.equals(EDatabaseTypeName.MYSQL) && fieldName.contains(JAVA_END_STRING)) {
    String newFieldName=TalendQuoteUtils.addQuotes(fieldName);
    return newFieldName;
  }
  boolean isCheck=!CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  if (!b) {
    if (isCheck && isPSQLSimilar(name)) {
      return fieldName;
    }
  }
  String newFieldName=fieldName;
  String quote=getQuoteByDBType(name);
  if (!newFieldName.contains(quote)) {
    newFieldName=addQuotes(newFieldName,quote);
  }
  return newFieldName;
}","public static String addQuotesWithSpaceField(String fieldName,String dbType){
  if (fieldName == null) {
    fieldName=""String_Node_Str"";
  }
  if (fieldName.startsWith(""String_Node_Str"") && fieldName.endsWith(""String_Node_Str"")) {
    return fieldName;
  }
  boolean b=true;
  for (int i=0; i < fieldName.length(); i++) {
    char c=fieldName.charAt(i);
    b=b && c >= '0' && c <= '9';
  }
  boolean check=Pattern.matches(""String_Node_Str"",fieldName);
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  boolean isCheck=!CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  if (!b) {
    if (isCheck && isPSQLSimilar(name) && check) {
      return fieldName;
    }
  }
  String newFieldName=fieldName;
  String quote=getQuoteByDBType(name);
  if (!newFieldName.contains(quote)) {
    newFieldName=addQuotes(newFieldName,quote);
  }
  return newFieldName;
}",0.8730808597748209
127560,"/** 
 * DOC ocarbone Comment method ""initMetadataForm"".
 */
private void initMetadataForm(){
  metadataEditor.setMetadataTable(metadataTable);
  IPreferenceStore store=RepositoryManager.getPreferenceStore();
  Boolean flag=store.getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  removeDoubleQuotes(metadataEditor.getMetadataColumnList());
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  nameText.setText(metadataTable.getName());
  commentText.setText(metadataTable.getComment());
  if (metadataTable.getTableType() != null) {
    typeText.setText(Messages.getString(""String_Node_Str"",metadataTable.getTableType()));
  }
 else {
    typeText.setText(Messages.getString(""String_Node_Str""));
  }
  String sourceName=metadataTable.getName();
  tableCombo.setText(sourceName);
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}","/** 
 * DOC ocarbone Comment method ""initMetadataForm"".
 */
private void initMetadataForm(){
  metadataEditor.setMetadataTable(metadataTable);
  IPreferenceStore store=RepositoryManager.getPreferenceStore();
  Boolean flag=store.getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  removeDoubleQuotes(metadataEditor.getMetadataColumnList());
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  nameText.setText(MetadataToolHelper.validateValue(metadataTable.getLabel()));
  commentText.setText(metadataTable.getComment());
  if (metadataTable.getTableType() != null) {
    typeText.setText(Messages.getString(""String_Node_Str"",metadataTable.getTableType()));
  }
 else {
    typeText.setText(Messages.getString(""String_Node_Str""));
  }
  String sourceName=metadataTable.getName();
  tableCombo.setText(sourceName);
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}",0.9732656514382404
127561,"/** 
 * wzhang Comment method ""isExistTable"".
 * @param tableNode
 * @return
 */
private boolean isExistTable(TableNode tableNode){
  if (tableNode != null && tableNode.getType() == TableNode.TABLE) {
    TableNode parent=tableNode.getParent();
    if (parent == null) {
      for (      Object obj : ConnectionHelper.getTables(getConnection())) {
        if (obj == null) {
          continue;
        }
        MetadataTable table=(MetadataTable)obj;
        if (table.getLabel().equals(tableNode.getValue())) {
          return true;
        }
      }
    }
 else {
      int type=parent.getType();
      EList<ModelElement> ownedElement=null;
      if (type == TableNode.CATALOG) {
        Catalog c=(Catalog)ConnectionHelper.getPackage(parent.getValue(),getConnection(),Catalog.class);
        if (c != null) {
          ownedElement=c.getOwnedElement();
        }
      }
 else       if (type == TableNode.SCHEMA) {
        TableNode p=parent.getParent();
        Schema s=null;
        if (p == null) {
          s=(Schema)ConnectionHelper.getPackage(parent.getValue(),getConnection(),Schema.class);
        }
 else {
          Catalog c=(Catalog)ConnectionHelper.getPackage(p.getValue(),getConnection(),Catalog.class);
          if (c != null) {
            List<Schema> schemas=CatalogHelper.getSchemas(c);
            for (            Schema schema : schemas) {
              if (schema.getName().equals(parent.getValue())) {
                s=schema;
                break;
              }
            }
          }
        }
        if (s != null) {
          ownedElement=s.getOwnedElement();
        }
      }
      if (ownedElement != null) {
        for (        ModelElement m : ownedElement) {
          if (m instanceof MetadataTable) {
            String label=((MetadataTable)m).getLabel();
            if (label.equals(tableNode.getValue())) {
              return true;
            }
          }
        }
      }
 else {
        for (        Object obj : ConnectionHelper.getTables(getConnection())) {
          if (obj == null) {
            continue;
          }
          MetadataTable table=(MetadataTable)obj;
          if (table.getLabel().equals(tableNode.getValue())) {
            return true;
          }
        }
      }
    }
  }
 else   if (useProvider()) {
    return provider.isMetadataExsit(tableNode,getConnection());
  }
  return false;
}","/** 
 * wzhang Comment method ""isExistTable"".
 * @param tableNode
 * @return
 */
private boolean isExistTable(TableNode tableNode){
  if (tableNode != null && tableNode.getType() == TableNode.TABLE) {
    TableNode parent=tableNode.getParent();
    if (parent == null) {
      for (      Object obj : ConnectionHelper.getTables(getConnection())) {
        if (obj == null) {
          continue;
        }
        MetadataTable table=(MetadataTable)obj;
        if (table.getLabel().equals(tableNode.getValue())) {
          return true;
        }
      }
    }
 else {
      int type=parent.getType();
      EList<ModelElement> ownedElement=null;
      if (type == TableNode.CATALOG) {
        Catalog c=(Catalog)ConnectionHelper.getPackage(parent.getValue(),getConnection(),Catalog.class);
        if (c != null) {
          ownedElement=c.getOwnedElement();
        }
      }
 else       if (type == TableNode.SCHEMA) {
        TableNode p=parent.getParent();
        Schema s=null;
        if (p == null) {
          s=(Schema)ConnectionHelper.getPackage(parent.getValue(),getConnection(),Schema.class);
        }
 else {
          Catalog c=(Catalog)ConnectionHelper.getPackage(p.getValue(),getConnection(),Catalog.class);
          if (c != null) {
            List<Schema> schemas=CatalogHelper.getSchemas(c);
            for (            Schema schema : schemas) {
              if (schema.getName().equals(parent.getValue())) {
                s=schema;
                break;
              }
            }
          }
        }
        if (s != null) {
          ownedElement=s.getOwnedElement();
        }
      }
      if (ownedElement != null) {
        for (        ModelElement m : ownedElement) {
          if (m instanceof MetadataTable) {
            String label=((MetadataTable)m).getName();
            if (label.equals(tableNode.getValue())) {
              return true;
            }
          }
        }
      }
 else {
        for (        Object obj : ConnectionHelper.getTables(getConnection())) {
          if (obj == null) {
            continue;
          }
          MetadataTable table=(MetadataTable)obj;
          if (table.getLabel().equals(tableNode.getValue())) {
            return true;
          }
        }
      }
    }
  }
 else   if (useProvider()) {
    return provider.isMetadataExsit(tableNode,getConnection());
  }
  return false;
}",0.998109640831758
127562,"/** 
 * Test method for  {@link org.talend.core.model.metadata.MetadataToolHelper#validateColumnName(java.lang.String,int)}.
 */
@Test public void testValidateColumnName(){
  CoreRuntimePlugin.getInstance().getDesignerCoreService().getDesignerCorePreferenceStore().setValue(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS,false);
  String columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(""String_Node_Str"",columnName);
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(""String_Node_Str"",columnName);
  CoreRuntimePlugin.getInstance().getDesignerCoreService().getDesignerCorePreferenceStore().setValue(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS,true);
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(""String_Node_Str"",columnName);
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(""String_Node_Str"",columnName);
  CoreRuntimePlugin.getInstance().getDesignerCoreService().getDesignerCorePreferenceStore().setToDefault(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS);
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.MetadataToolHelper#validateColumnName(java.lang.String,int)}.
 */
@Test public void testValidateColumnName(){
  CoreRuntimePlugin.getInstance().getDesignerCoreService().setPreferenceStoreValue(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS,false);
  String columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(columnName,""String_Node_Str"");
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(""String_Node_Str"",columnName);
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(""String_Node_Str"",columnName);
  CoreRuntimePlugin.getInstance().getDesignerCoreService().setPreferenceStoreValue(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS,true);
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(""String_Node_Str"",columnName);
  columnName=MetadataToolHelper.validateColumnName(""String_Node_Str"",0);
  assertEquals(""String_Node_Str"",columnName);
  CoreRuntimePlugin.getInstance().getDesignerCoreService().setPreferenceStoreToDefault(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS);
}",0.9829867674858224
127563,"public static String addQuotesWithSpaceField(String fieldName,String dbType){
  if (fieldName == null) {
    fieldName=""String_Node_Str"";
  }
  if (fieldName.startsWith(""String_Node_Str"") && fieldName.endsWith(""String_Node_Str"")) {
    return fieldName;
  }
  boolean b=true;
  for (int i=0; i < fieldName.length(); i++) {
    char c=fieldName.charAt(i);
    b=b && c >= '0' && c <= '9';
  }
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  if (name.equals(EDatabaseTypeName.MYSQL) && fieldName.contains(JAVA_END_STRING)) {
    String newFieldName=TalendQuoteUtils.addQuotes(fieldName);
    return newFieldName;
  }
  boolean isCheck=!CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  if (!b) {
    if (isCheck && isPSQLSimilar(name)) {
      return fieldName;
    }
  }
  String newFieldName=fieldName;
  String quote=getQuoteByDBType(name);
  if (!newFieldName.contains(quote)) {
    newFieldName=addQuotes(newFieldName,quote);
  }
  return newFieldName;
}","public static String addQuotesWithSpaceField(String fieldName,String dbType){
  if (fieldName == null) {
    fieldName=""String_Node_Str"";
  }
  if (fieldName.startsWith(""String_Node_Str"") && fieldName.endsWith(""String_Node_Str"")) {
    return fieldName;
  }
  boolean b=true;
  for (int i=0; i < fieldName.length(); i++) {
    char c=fieldName.charAt(i);
    b=b && c >= '0' && c <= '9';
  }
  boolean check=Pattern.matches(""String_Node_Str"",fieldName);
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  boolean isCheck=!CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  if (!b) {
    if (isCheck && isPSQLSimilar(name) && check) {
      return fieldName;
    }
  }
  String newFieldName=fieldName;
  String quote=getQuoteByDBType(name);
  if (!newFieldName.contains(quote)) {
    newFieldName=addQuotes(newFieldName,quote);
  }
  return newFieldName;
}",0.8730808597748209
127564,"private static DynamicClassLoader createCustomClassLoader(String index,Set<String> libraries){
  DynamicClassLoader classLoader=new DynamicClassLoader();
  loadLibraries(classLoader,libraries.toArray(new String[0]));
  classLoadersMap.put(index,classLoader);
  return classLoader;
}","private static DynamicClassLoader createCustomClassLoader(String index,Set<String> libraries){
  DynamicClassLoader classLoader=new DynamicClassLoader();
  loadLibraries(classLoader,libraries.toArray(new String[0]),false);
  classLoadersMap.put(index,classLoader);
  return classLoader;
}",0.9894736842105264
127565,"private static DynamicClassLoader findLoader(String index){
  if (index != null && configurationElements != null) {
    for (    IConfigurationElement current : configurationElements) {
      String key=current.getAttribute(INDEX_ATTR);
      if (index.equals(key)) {
        String libraries=current.getAttribute(LIB_ATTR);
        if (StringUtils.isNotEmpty(index)) {
          DynamicClassLoader classLoader=new DynamicClassLoader();
          boolean putInCache=true;
          if (StringUtils.isNotEmpty(libraries)) {
            String[] librariesArray=libraries.split(SEPARATOR);
            putInCache=loadLibraries(classLoader,librariesArray);
          }
          if (putInCache) {
            classLoadersMap.put(index,classLoader);
          }
          return classLoader;
        }
      }
    }
  }
  return null;
}","private static DynamicClassLoader findLoader(String index,boolean showDownloadIfNotExist){
  if (index != null && configurationElements != null) {
    for (    IConfigurationElement current : configurationElements) {
      String key=current.getAttribute(INDEX_ATTR);
      if (index.equals(key)) {
        String libraries=current.getAttribute(LIB_ATTR);
        if (StringUtils.isNotEmpty(index)) {
          DynamicClassLoader classLoader=new DynamicClassLoader();
          boolean putInCache=true;
          if (StringUtils.isNotEmpty(libraries)) {
            String[] librariesArray=libraries.split(SEPARATOR);
            putInCache=loadLibraries(classLoader,librariesArray,showDownloadIfNotExist);
          }
          if (putInCache) {
            classLoadersMap.put(index,classLoader);
          }
          return classLoader;
        }
      }
    }
  }
  return null;
}",0.9685314685314684
127566,"/** 
 * DOC ycbai Comment method ""getClassLoader"".
 * @param index
 * @return the classLoader by index
 */
public static DynamicClassLoader getClassLoader(String index){
  if (classLoadersMap == null) {
    init();
  }
  DynamicClassLoader classLoader=classLoadersMap.get(index);
  if (classLoader == null) {
    classLoader=findLoader(index);
  }
  return classLoader;
}","public static DynamicClassLoader getClassLoader(String index,boolean showDownloadIfNotExist){
  if (classLoadersMap == null) {
    init();
  }
  DynamicClassLoader classLoader=classLoadersMap.get(index);
  if (classLoader == null) {
    classLoader=findLoader(index,showDownloadIfNotExist);
  }
  return classLoader;
}",0.7663280116110305
127567,"private static boolean loadLibraries(DynamicClassLoader classLoader,String[] driversArray){
  List<String> jarPathList=new ArrayList<String>();
  if (driversArray == null || driversArray.length == 0) {
    return true;
  }
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  String libPath=getLibPath();
  List<String> driverNotExist=new ArrayList<String>();
  for (  String driverName : driversArray) {
    String jarPath=libPath + PATH_SEPARATOR + driverName;
    File jarFile=new File(jarPath);
    if (!jarFile.exists()) {
      driverNotExist.add(driverName);
    }
    jarPathList.add(jarFile.getAbsolutePath());
  }
  boolean putInCache=false;
  if (!driverNotExist.isEmpty()) {
    putInCache=librairesManagerService.retrieve(driverNotExist,libPath,new NullProgressMonitor());
  }
  classLoader.setLibStorePath(libPath);
  classLoader.addLibraries(jarPathList);
  return putInCache;
}","private static boolean loadLibraries(DynamicClassLoader classLoader,String[] driversArray,boolean showDownloadIfNotExist){
  List<String> jarPathList=new ArrayList<String>();
  if (driversArray == null || driversArray.length == 0) {
    return true;
  }
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  String libPath=getLibPath();
  List<String> driverNotExist=new ArrayList<String>();
  for (  String driverName : driversArray) {
    String jarPath=libPath + PATH_SEPARATOR + driverName;
    File jarFile=new File(jarPath);
    if (!jarFile.exists()) {
      driverNotExist.add(driverName);
    }
    jarPathList.add(jarFile.getAbsolutePath());
  }
  boolean putInCache=false;
  if (!driverNotExist.isEmpty()) {
    putInCache=librairesManagerService.retrieve(driverNotExist,libPath,showDownloadIfNotExist,new NullProgressMonitor());
  }
  classLoader.setLibStorePath(libPath);
  classLoader.addLibraries(jarPathList);
  return putInCache;
}",0.9735034347399412
127568,"/** 
 * DOC ycbai Comment method ""getHadoopJars"".
 * @param distribution
 * @param version
 * @return jars which this hadoop distribution(and version) needed.
 */
public Set<String> getHadoopLibraries(String distribution,String version);","/** 
 * DOC ycbai Comment method ""getHadoopJars"".
 * @param distribution
 * @param version
 * @return jars which this hadoop distribution(and version) needed.
 */
public Set<String> getHadoopLibraries(String distribution,String version,boolean showDownloadIfNotExist);",0.9386138613861386
127569,"public String getLibDescription(String jarName){
  String desc=descMap.get(jarName);
  if (desc != null) {
    return desc;
  }
  String jarPath=tmpFolder + File.separator + jarName;
  try {
    boolean isOk=false;
    File jarFile=new File(jarPath);
    if (!jarFile.exists()) {
      isOk=librairesService.retrieve(jarName,tmpFolder,new NullProgressMonitor());
    }
    if (isOk) {
      desc=getJarDescFromManifest(jarFile);
      if (desc != null) {
        descMap.put(jarName,desc);
        return desc;
      }
      desc=getJarDescFromProperties(jarName);
      if (desc != null) {
        descMap.put(jarName,desc);
        return desc;
      }
      desc=getJarDescFromDefault(jarName);
      if (desc != null) {
        descMap.put(jarName,desc);
        return desc;
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return EMPTY_STRING;
}","public String getLibDescription(String jarName){
  String desc=descMap.get(jarName);
  if (desc != null) {
    return desc;
  }
  String jarPath=tmpFolder + File.separator + jarName;
  try {
    boolean isOk=false;
    File jarFile=new File(jarPath);
    if (!jarFile.exists()) {
      isOk=librairesService.retrieve(jarName,tmpFolder,false,new NullProgressMonitor());
    }
    if (isOk) {
      desc=getJarDescFromManifest(jarFile);
      if (desc != null) {
        descMap.put(jarName,desc);
        return desc;
      }
      desc=getJarDescFromProperties(jarName);
      if (desc != null) {
        descMap.put(jarName,desc);
        return desc;
      }
      desc=getJarDescFromDefault(jarName);
      if (desc != null) {
        descMap.put(jarName,desc);
        return desc;
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return EMPTY_STRING;
}",0.9966178128523112
127570,"@Override protected void doRun(){
  ISelection selection=getSelection();
  Boolean confirm=null;
  final List<IRepositoryViewObject> connections=new ArrayList<IRepositoryViewObject>();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  Map<String,Item> procItems=new HashMap<String,Item>();
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
      if (node.getType() == ENodeType.REPOSITORY_ELEMENT && nodeType.isSubItem()) {
        Connection connection=null;
        ERepositoryObjectType parentNodeType=(ERepositoryObjectType)node.getParent().getProperties(EProperties.CONTENT_TYPE);
        if (parentNodeType == null) {
          parentNodeType=node.getParent().getParent().getObjectType();
        }
        if (parentNodeType != null) {
          types.add(parentNodeType);
        }
        ConnectionItem item=(ConnectionItem)node.getObject().getProperty().getItem();
        connection=(item).getConnection();
        ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)node.getObject();
        AbstractMetadataObject abstractMetadataObject=subRepositoryObject.getAbstractMetadataObject();
        if (abstractMetadataObject instanceof SubscriberTable) {
          return;
        }
        if (abstractMetadataObject == null) {
          return;
        }
        boolean isSave=true;
        AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
        if (resChangeService != null) {
          List<IRepositoryNode> dependentNodes=resChangeService.getDependentNodes(node);
          if (dependentNodes != null && !dependentNodes.isEmpty()) {
            resChangeService.openDependcesDialog(dependentNodes);
            isSave=false;
          }
        }
        if (isSave) {
          String sfm=null;
          String sf=null;
          EObject eContainer=abstractMetadataObject.eContainer();
          if (eContainer != null && eContainer instanceof SalesforceModuleUnitImpl) {
            sfm=((SalesforceModuleUnitImpl)eContainer).getModuleName();
            sf=abstractMetadataObject.getLabel();
          }
          if (SubItemHelper.isDeleted(abstractMetadataObject) && isSave) {
            if (confirm == null) {
              String title=Messages.getString(""String_Node_Str"");
              String message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
              confirm=(MessageDialog.openQuestion(Display.getCurrent().getActiveShell(),title,message));
            }
            if (confirm) {
              subRepositoryObject.removeFromParent();
            }
          }
 else           if (item instanceof SalesforceSchemaConnectionItem && parentNodeType.getType() != null && parentNodeType.getType().equals(""String_Node_Str"") && sfm != null && sf != null && sfm.equals(sf)) {
          }
 else {
            SubItemHelper.setDeleted(abstractMetadataObject,true);
          }
          final String id=item.getProperty().getId();
          Item tmpItem=procItems.get(id);
          if (tmpItem == null) {
            procItems.put(id,item);
          }
          connections.add(node.getObject());
        }
      }
    }
  }
  try {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    for (    String id : procItems.keySet()) {
      Item item=procItems.get(id);
      factory.save(item);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  Display.getCurrent().syncExec(new Runnable(){
    @Override public void run(){
      RepositoryManager.refreshDeletedNode(types);
    }
  }
);
  notifySQLBuilder(connections);
}","@Override protected void doRun(){
  ISelection selection=getSelection();
  Boolean confirm=null;
  final List<IRepositoryViewObject> connections=new ArrayList<IRepositoryViewObject>();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  Map<String,Item> procItems=new HashMap<String,Item>();
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
      if (node.getType() == ENodeType.REPOSITORY_ELEMENT && nodeType.isSubItem()) {
        IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
        IRepositoryViewObject nodeObject=node.getObject();
        boolean locked=false;
        if (!factory.getRepositoryContext().isEditableAsReadOnly()) {
          if (nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_OTHER || nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_USER) {
            locked=true;
          }
        }
        if ((locked || RepositoryManager.isOpenedItemInEditor(nodeObject)) && !(DELETE_FOREVER_TITLE.equals(getText()))) {
          final String title=Messages.getString(""String_Node_Str"");
          String nodeName=nodeObject.getRepositoryObjectType().getLabel();
          final String message=Messages.getString(""String_Node_Str"",nodeName);
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              MessageDialog dialog=new MessageDialog(new Shell(),title,null,message,MessageDialog.ERROR,new String[]{IDialogConstants.OK_LABEL},0);
              dialog.open();
            }
          }
);
          return;
        }
        Connection connection=null;
        ERepositoryObjectType parentNodeType=(ERepositoryObjectType)node.getParent().getProperties(EProperties.CONTENT_TYPE);
        if (parentNodeType == null) {
          parentNodeType=node.getParent().getParent().getObjectType();
        }
        if (parentNodeType != null) {
          types.add(parentNodeType);
        }
        ConnectionItem item=(ConnectionItem)node.getObject().getProperty().getItem();
        connection=(item).getConnection();
        ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)node.getObject();
        AbstractMetadataObject abstractMetadataObject=subRepositoryObject.getAbstractMetadataObject();
        if (abstractMetadataObject instanceof SubscriberTable) {
          return;
        }
        if (abstractMetadataObject == null) {
          return;
        }
        boolean isSave=true;
        AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
        if (resChangeService != null) {
          List<IRepositoryNode> dependentNodes=resChangeService.getDependentNodes(node);
          if (dependentNodes != null && !dependentNodes.isEmpty()) {
            resChangeService.openDependcesDialog(dependentNodes);
            isSave=false;
          }
        }
        if (isSave) {
          String sfm=null;
          String sf=null;
          EObject eContainer=abstractMetadataObject.eContainer();
          if (eContainer != null && eContainer instanceof SalesforceModuleUnitImpl) {
            sfm=((SalesforceModuleUnitImpl)eContainer).getModuleName();
            sf=abstractMetadataObject.getLabel();
          }
          if (SubItemHelper.isDeleted(abstractMetadataObject) && isSave) {
            if (confirm == null) {
              String title=Messages.getString(""String_Node_Str"");
              String message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
              confirm=(MessageDialog.openQuestion(Display.getCurrent().getActiveShell(),title,message));
            }
            if (confirm) {
              subRepositoryObject.removeFromParent();
            }
          }
 else           if (item instanceof SalesforceSchemaConnectionItem && parentNodeType.getType() != null && parentNodeType.getType().equals(""String_Node_Str"") && sfm != null && sf != null && sfm.equals(sf)) {
          }
 else {
            SubItemHelper.setDeleted(abstractMetadataObject,true);
          }
          final String id=item.getProperty().getId();
          Item tmpItem=procItems.get(id);
          if (tmpItem == null) {
            procItems.put(id,item);
          }
          connections.add(node.getObject());
        }
      }
    }
  }
  try {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    for (    String id : procItems.keySet()) {
      Item item=procItems.get(id);
      factory.save(item);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  Display.getCurrent().syncExec(new Runnable(){
    @Override public void run(){
      RepositoryManager.refreshDeletedNode(types);
    }
  }
);
  notifySQLBuilder(connections);
}",0.8753493571827837
127571,"/** 
 * DOC ocarbone Comment method ""initMetadataForm"".
 */
private void initMetadataForm(){
  metadataEditor.setMetadataTable(metadataTable);
  IPreferenceStore store=RepositoryManager.getPreferenceStore();
  Boolean flag=store.getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  removeDoubleQuotes(metadataEditor.getMetadataColumnList());
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  nameText.setText(metadataTable.getName());
  commentText.setText(metadataTable.getComment());
  if (metadataTable.getTableType() != null) {
    typeText.setText(Messages.getString(""String_Node_Str"",metadataTable.getTableType()));
  }
 else {
    typeText.setText(Messages.getString(""String_Node_Str""));
  }
  String sourceName=metadataTable.getName();
  tableCombo.setText(sourceName);
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}","/** 
 * DOC ocarbone Comment method ""initMetadataForm"".
 */
private void initMetadataForm(){
  metadataEditor.setMetadataTable(metadataTable);
  IPreferenceStore store=RepositoryManager.getPreferenceStore();
  Boolean flag=store.getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  removeDoubleQuotes(metadataEditor.getMetadataColumnList());
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  nameText.setText(MetadataToolHelper.validateValue(metadataTable.getLabel()));
  commentText.setText(metadataTable.getComment());
  if (metadataTable.getTableType() != null) {
    typeText.setText(Messages.getString(""String_Node_Str"",metadataTable.getTableType()));
  }
 else {
    typeText.setText(Messages.getString(""String_Node_Str""));
  }
  String sourceName=metadataTable.getName();
  tableCombo.setText(sourceName);
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}",0.9732656514382404
127572,"/** 
 * wzhang Comment method ""isExistTable"".
 * @param tableNode
 * @return
 */
private boolean isExistTable(TableNode tableNode){
  if (tableNode != null && tableNode.getType() == TableNode.TABLE) {
    TableNode parent=tableNode.getParent();
    if (parent == null) {
      for (      Object obj : ConnectionHelper.getTables(getConnection())) {
        if (obj == null) {
          continue;
        }
        MetadataTable table=(MetadataTable)obj;
        if (table.getLabel().equals(tableNode.getValue())) {
          return true;
        }
      }
    }
 else {
      int type=parent.getType();
      EList<ModelElement> ownedElement=null;
      if (type == TableNode.CATALOG) {
        Catalog c=(Catalog)ConnectionHelper.getPackage(parent.getValue(),getConnection(),Catalog.class);
        if (c != null) {
          ownedElement=c.getOwnedElement();
        }
      }
 else       if (type == TableNode.SCHEMA) {
        TableNode p=parent.getParent();
        Schema s=null;
        if (p == null) {
          s=(Schema)ConnectionHelper.getPackage(parent.getValue(),getConnection(),Schema.class);
        }
 else {
          Catalog c=(Catalog)ConnectionHelper.getPackage(p.getValue(),getConnection(),Catalog.class);
          if (c != null) {
            List<Schema> schemas=CatalogHelper.getSchemas(c);
            for (            Schema schema : schemas) {
              if (schema.getName().equals(parent.getValue())) {
                s=schema;
                break;
              }
            }
          }
        }
        if (s != null) {
          ownedElement=s.getOwnedElement();
        }
      }
      if (ownedElement != null) {
        for (        ModelElement m : ownedElement) {
          if (m instanceof MetadataTable) {
            String label=((MetadataTable)m).getLabel();
            if (label.equals(tableNode.getValue())) {
              return true;
            }
          }
        }
      }
 else {
        for (        Object obj : ConnectionHelper.getTables(getConnection())) {
          if (obj == null) {
            continue;
          }
          MetadataTable table=(MetadataTable)obj;
          if (table.getLabel().equals(tableNode.getValue())) {
            return true;
          }
        }
      }
    }
  }
 else   if (useProvider()) {
    return provider.isMetadataExsit(tableNode,getConnection());
  }
  return false;
}","/** 
 * wzhang Comment method ""isExistTable"".
 * @param tableNode
 * @return
 */
private boolean isExistTable(TableNode tableNode){
  if (tableNode != null && tableNode.getType() == TableNode.TABLE) {
    TableNode parent=tableNode.getParent();
    if (parent == null) {
      for (      Object obj : ConnectionHelper.getTables(getConnection())) {
        if (obj == null) {
          continue;
        }
        MetadataTable table=(MetadataTable)obj;
        if (table.getLabel().equals(tableNode.getValue())) {
          return true;
        }
      }
    }
 else {
      int type=parent.getType();
      EList<ModelElement> ownedElement=null;
      if (type == TableNode.CATALOG) {
        Catalog c=(Catalog)ConnectionHelper.getPackage(parent.getValue(),getConnection(),Catalog.class);
        if (c != null) {
          ownedElement=c.getOwnedElement();
        }
      }
 else       if (type == TableNode.SCHEMA) {
        TableNode p=parent.getParent();
        Schema s=null;
        if (p == null) {
          s=(Schema)ConnectionHelper.getPackage(parent.getValue(),getConnection(),Schema.class);
        }
 else {
          Catalog c=(Catalog)ConnectionHelper.getPackage(p.getValue(),getConnection(),Catalog.class);
          if (c != null) {
            List<Schema> schemas=CatalogHelper.getSchemas(c);
            for (            Schema schema : schemas) {
              if (schema.getName().equals(parent.getValue())) {
                s=schema;
                break;
              }
            }
          }
        }
        if (s != null) {
          ownedElement=s.getOwnedElement();
        }
      }
      if (ownedElement != null) {
        for (        ModelElement m : ownedElement) {
          if (m instanceof MetadataTable) {
            String label=((MetadataTable)m).getName();
            if (label.equals(tableNode.getValue())) {
              return true;
            }
          }
        }
      }
 else {
        for (        Object obj : ConnectionHelper.getTables(getConnection())) {
          if (obj == null) {
            continue;
          }
          MetadataTable table=(MetadataTable)obj;
          if (table.getLabel().equals(tableNode.getValue())) {
            return true;
          }
        }
      }
    }
  }
 else   if (useProvider()) {
    return provider.isMetadataExsit(tableNode,getConnection());
  }
  return false;
}",0.998109640831758
127573,"/** 
 * DOC qiang.zhang Comment method ""getXMLMappingValue"".
 * @param repositoryConnection
 * @param metadataTable
 * @return
 */
public static List<Map<String,Object>> getXMLMappingValue(Connection connection,List<IMetadataTable> metadataTables){
  if (metadataTables == null || metadataTables.isEmpty()) {
    return new ArrayList<Map<String,Object>>();
  }
  if (connection instanceof XmlFileConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    XmlFileConnection xmlConnection=(XmlFileConnection)connection;
    EList objectList=xmlConnection.getSchema();
    XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)objectList.get(0);
    if (metadataTable != null) {
      if (xmlDesc != null) {
        List<SchemaTarget> schemaTargets=xmlDesc.getSchemaTargets();
        List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
        for (        IMetadataColumn col : metadataTable.getListColumns()) {
          Map<String,Object> map=new HashMap<String,Object>();
          map.put(""String_Node_Str"",null);
          for (int i=0; i < schemaTargets.size(); i++) {
            SchemaTarget sch=schemaTargets.get(i);
            if (col.getLabel().equals(sch.getTagName())) {
              map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(sch.getRelativeXPathQuery()));
            }
          }
          if (map.get(UpdatesConstants.QUERY) == null) {
            if (col.getLabel() != null && col.getLabel().startsWith(""String_Node_Str"")) {
              String temp=col.getLabel().substring(6,col.getLabel().length());
              if (temp != null) {
                char c[]=temp.toCharArray();
                boolean flag=true;
                for (int i=0; i < c.length; i++) {
                  if (c[i] < '0' || c[i] > '9') {
                    flag=false;
                    break;
                  }
                }
                if (flag) {
                  int j=Integer.parseInt(temp);
                  SchemaTarget schema=schemaTargets.get(j);
                  if (schema != null && KeywordsValidator.isKeyword(schema.getTagName())) {
                    map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(schema.getRelativeXPathQuery()));
                  }
                }
              }
            }
          }
          maps.add(map);
        }
        return maps;
      }
    }
  }
  if (connection instanceof MDMConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    MDMConnection xmlConnection=(MDMConnection)connection;
    EList objectList=xmlConnection.getSchemas();
    if (metadataTable != null) {
      for (      Concept concept : (List<Concept>)objectList) {
        if (concept != null && concept.getLabel() != null && concept.getLabel().equals(metadataTable.getLabel())) {
          List<ConceptTarget> conceptTargets=concept.getConceptTargets();
          List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
          for (          IMetadataColumn col : metadataTable.getListColumns()) {
            Map<String,Object> map=new HashMap<String,Object>();
            map.put(""String_Node_Str"",null);
            for (int i=0; i < conceptTargets.size(); i++) {
              ConceptTarget cpt=conceptTargets.get(i);
              if (col.getLabel().equals(cpt.getTargetName())) {
                map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(cpt.getRelativeLoopExpression()));
              }
            }
            maps.add(map);
          }
          return maps;
        }
      }
    }
  }
  if (connection instanceof HL7Connection) {
    HL7Connection hl7Connection=(HL7Connection)connection;
    Set objectList=ConnectionHelper.getTables(hl7Connection);
    List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
    for (    IMetadataTable tableOfNode : metadataTables) {
      Map<String,Object> map=new HashMap<String,Object>();
      for (      MetadataTable table : (Set<MetadataTable>)objectList) {
        if (table != null && (table.getLabel() == null || table.getLabel().equals(tableOfNode.getLabel()))) {
          String xpathValue=""String_Node_Str"";
          for (          MetadataColumn col : table.getColumns()) {
            String original=col.getOriginalField();
            if (original != null && !""String_Node_Str"".equals(original)) {
              if (original.indexOf(TalendQuoteUtils.LBRACKET) != -1) {
                original=original.substring(0,original.indexOf(TalendQuoteUtils.LBRACKET));
              }
              original=TalendQuoteUtils.addQuotes(original);
              xpathValue+=original;
            }
            if (table.getColumns().indexOf(col) < table.getColumns().size() - 1) {
              xpathValue+=""String_Node_Str"";
            }
          }
          map.put(""String_Node_Str"",xpathValue);
          map.put(""String_Node_Str"",tableOfNode.getTableName());
          maps.add(map);
        }
      }
    }
    return maps;
  }
  return null;
}","/** 
 * DOC qiang.zhang Comment method ""getXMLMappingValue"".
 * @param repositoryConnection
 * @param metadataTable
 * @return
 */
public static List<Map<String,Object>> getXMLMappingValue(Connection connection,List<IMetadataTable> metadataTables){
  if (metadataTables == null || metadataTables.isEmpty()) {
    return new ArrayList<Map<String,Object>>();
  }
  if (connection instanceof XmlFileConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    XmlFileConnection xmlConnection=(XmlFileConnection)connection;
    EList objectList=xmlConnection.getSchema();
    XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)objectList.get(0);
    if (metadataTable != null) {
      if (xmlDesc != null) {
        List<SchemaTarget> schemaTargets=xmlDesc.getSchemaTargets();
        List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
        for (        IMetadataColumn col : metadataTable.getListColumns()) {
          Map<String,Object> map=new HashMap<String,Object>();
          map.put(""String_Node_Str"",null);
          for (int i=0; i < schemaTargets.size(); i++) {
            SchemaTarget sch=schemaTargets.get(i);
            if (col.getLabel().equals(sch.getTagName())) {
              map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(sch.getRelativeXPathQuery()));
            }
          }
          if (map.get(UpdatesConstants.QUERY) == null) {
            if (col.getLabel() != null && col.getLabel().startsWith(""String_Node_Str"")) {
              String temp=col.getLabel().substring(6,col.getLabel().length());
              if (temp != null) {
                char c[]=temp.toCharArray();
                boolean flag=true;
                for (                char element : c) {
                  if (element < '0' || element > '9') {
                    flag=false;
                    break;
                  }
                }
                if (flag) {
                  int j=Integer.parseInt(temp);
                  SchemaTarget schema=schemaTargets.get(j);
                  if (schema != null && KeywordsValidator.isKeyword(schema.getTagName())) {
                    map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(schema.getRelativeXPathQuery()));
                  }
                }
              }
            }
          }
          maps.add(map);
        }
        return maps;
      }
    }
  }
  if (connection instanceof MDMConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    MDMConnection xmlConnection=(MDMConnection)connection;
    EList objectList=xmlConnection.getSchemas();
    if (metadataTable != null) {
      for (      Concept concept : (List<Concept>)objectList) {
        if (concept != null && concept.getLabel() != null && concept.getLabel().equals(metadataTable.getLabel())) {
          List<ConceptTarget> conceptTargets=concept.getConceptTargets();
          List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
          for (          IMetadataColumn col : metadataTable.getListColumns()) {
            Map<String,Object> map=new HashMap<String,Object>();
            map.put(""String_Node_Str"",null);
            for (int i=0; i < conceptTargets.size(); i++) {
              ConceptTarget cpt=conceptTargets.get(i);
              if (col.getLabel().equals(cpt.getTargetName())) {
                map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(cpt.getRelativeLoopExpression()));
              }
            }
            maps.add(map);
          }
          return maps;
        }
      }
    }
  }
  if (connection instanceof HL7Connection) {
    HL7Connection hl7Connection=(HL7Connection)connection;
    Set objectList=ConnectionHelper.getTables(hl7Connection);
    List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
    for (    IMetadataTable tableOfNode : metadataTables) {
      Map<String,Object> map=new HashMap<String,Object>();
      for (      MetadataTable table : (Set<MetadataTable>)objectList) {
        if (table != null && (table.getLabel() == null || table.getLabel().equals(tableOfNode.getLabel()))) {
          String xpathValue=""String_Node_Str"";
          for (          MetadataColumn col : table.getColumns()) {
            String original=col.getOriginalField();
            if (original != null && !""String_Node_Str"".equals(original)) {
              if (original.indexOf(TalendQuoteUtils.LBRACKET) != -1) {
                original=original.substring(0,original.indexOf(TalendQuoteUtils.LBRACKET));
              }
              original=TalendQuoteUtils.addQuotes(original);
              xpathValue+=original;
            }
            if (table.getColumns().indexOf(col) < table.getColumns().size() - 1) {
              xpathValue+=""String_Node_Str"";
            }
          }
          map.put(""String_Node_Str"",xpathValue);
          map.put(""String_Node_Str"",tableOfNode.getTableName());
          maps.add(map);
        }
      }
    }
    return maps;
  }
  return null;
}",0.992143432715552
127574,"/** 
 * DOC yexiaowei Comment method ""getExcelFileValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getExcelFileValue(FileExcelConnection connection,String value){
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFilePath())) {
      return connection.getFilePath();
    }
 else {
      Path p=new Path(connection.getFilePath());
      return TalendQuoteUtils.addQuotes(p.toPortableString());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return TalendQuoteUtils.addQuotes(connection.getSheetName());
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isSelectAllSheets();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFirstColumn())) {
      return connection.getFirstColumn();
    }
 else {
      if (isPerlProject()) {
        return TalendQuoteUtils.addQuotes(connection.getFirstColumn());
      }
 else {
        return connection.getFirstColumn();
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getLastColumn())) {
      return connection.getLastColumn();
    }
 else {
      if (isPerlProject()) {
        if (connection.getLastColumn() != null && !connection.getLastColumn().equals(""String_Node_Str"")) {
          return TalendQuoteUtils.addQuotes(connection.getLastColumn());
        }
      }
 else {
        return connection.getLastColumn();
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isAdvancedSpearator();
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getThousandSeparator();
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getDecimalSeparator();
  }
  if (value.equals(""String_Node_Str"")) {
    return getExcelSheetTableValue(connection);
  }
  return null;
}","/** 
 * DOC yexiaowei Comment method ""getExcelFileValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getExcelFileValue(FileExcelConnection connection,String value){
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFilePath())) {
      return connection.getFilePath();
    }
 else {
      Path p=new Path(connection.getFilePath());
      return TalendQuoteUtils.addQuotes(p.toPortableString());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return TalendQuoteUtils.addQuotes(connection.getSheetName());
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isSelectAllSheets();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFirstColumn())) {
      return connection.getFirstColumn();
    }
 else {
      if (isPerlProject()) {
        return TalendQuoteUtils.addQuotes(connection.getFirstColumn());
      }
 else {
        return connection.getFirstColumn();
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getLastColumn())) {
      return connection.getLastColumn();
    }
 else {
      if (isPerlProject()) {
        if (connection.getLastColumn() != null && !connection.getLastColumn().equals(""String_Node_Str"")) {
          return TalendQuoteUtils.addQuotes(connection.getLastColumn());
        }
      }
 else {
        return connection.getLastColumn();
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isAdvancedSpearator();
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getThousandSeparator();
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getDecimalSeparator();
  }
  if (value.equals(""String_Node_Str"")) {
    return getExcelSheetTableValue(connection);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getGenerationMode();
  }
  return null;
}",0.9704329461457232
127575,"/** 
 * DOC yexiaowei Comment method ""getExcelFileValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getExcelFileValue(FileExcelConnection connection,String value){
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFilePath())) {
      return connection.getFilePath();
    }
 else {
      Path p=new Path(connection.getFilePath());
      return TalendQuoteUtils.addQuotes(p.toPortableString());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return TalendQuoteUtils.addQuotes(connection.getSheetName());
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isSelectAllSheets();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFirstColumn())) {
      return connection.getFirstColumn();
    }
 else {
      if (isPerlProject()) {
        return TalendQuoteUtils.addQuotes(connection.getFirstColumn());
      }
 else {
        return connection.getFirstColumn();
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getLastColumn())) {
      return connection.getLastColumn();
    }
 else {
      if (isPerlProject()) {
        if (connection.getLastColumn() != null && !connection.getLastColumn().equals(""String_Node_Str"")) {
          return TalendQuoteUtils.addQuotes(connection.getLastColumn());
        }
      }
 else {
        return connection.getLastColumn();
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isAdvancedSpearator();
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getThousandSeparator();
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getDecimalSeparator();
  }
  if (value.equals(""String_Node_Str"")) {
    return getExcelSheetTableValue(connection);
  }
  return null;
}","/** 
 * DOC yexiaowei Comment method ""getExcelFileValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getExcelFileValue(FileExcelConnection connection,String value){
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFilePath())) {
      return connection.getFilePath();
    }
 else {
      Path p=new Path(connection.getFilePath());
      return TalendQuoteUtils.addQuotes(p.toPortableString());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return TalendQuoteUtils.addQuotes(connection.getSheetName());
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isSelectAllSheets();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFirstColumn())) {
      return connection.getFirstColumn();
    }
 else {
      if (isPerlProject()) {
        return TalendQuoteUtils.addQuotes(connection.getFirstColumn());
      }
 else {
        return connection.getFirstColumn();
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getLastColumn())) {
      return connection.getLastColumn();
    }
 else {
      if (isPerlProject()) {
        if (connection.getLastColumn() != null && !connection.getLastColumn().equals(""String_Node_Str"")) {
          return TalendQuoteUtils.addQuotes(connection.getLastColumn());
        }
      }
 else {
        return connection.getLastColumn();
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isAdvancedSpearator();
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getThousandSeparator();
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getDecimalSeparator();
  }
  if (value.equals(""String_Node_Str"")) {
    return getExcelSheetTableValue(connection);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getGenerationMode();
  }
  return null;
}",0.9704329461457232
127576,"protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}","protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    if (MetadataConnectionUtils.isMysql(dbMetaData)) {
      boolean check=!Pattern.matches(""String_Node_Str"",tableName);
      if (check && !columns.next()) {
        columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,TalendQuoteUtils.addQuotes(tableName,TalendQuoteUtils.ANTI_QUOTE));
      }
      columns.beforeFirst();
    }
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}",0.97157148812005
127577,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@SuppressWarnings(""String_Node_Str"") @Override public void eSet(int featureID,Object newValue){
switch (featureID) {
case ConnectionPackage.METADATA_COLUMN__OWNER_SCOPE:
    setOwnerScope((ScopeKind)newValue);
  return;
case ConnectionPackage.METADATA_COLUMN__OWNER:
setOwner((Classifier)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__FEATURE_NODE:
getFeatureNode().clear();
getFeatureNode().addAll((Collection<? extends FeatureNode>)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__FEATURE_MAP:
getFeatureMap().clear();
getFeatureMap().addAll((Collection<? extends FeatureMap>)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__CF_MAP:
getCfMap().clear();
getCfMap().addAll((Collection<? extends ClassifierFeatureMap>)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__CHANGEABILITY:
setChangeability((ChangeableKind)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__MULTIPLICITY:
setMultiplicity((Multiplicity)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__ORDERING:
setOrdering((OrderingKind)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__TARGET_SCOPE:
setTargetScope((ScopeKind)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__TYPE:
setType((Classifier)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__SLOT:
getSlot().clear();
getSlot().addAll((Collection<? extends Slot>)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__DISCRIMINATED_UNION:
getDiscriminatedUnion().clear();
getDiscriminatedUnion().addAll((Collection<? extends Union>)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__INDEXED_FEATURE:
getIndexedFeature().clear();
getIndexedFeature().addAll((Collection<? extends IndexedFeature>)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__KEY_RELATIONSHIP:
getKeyRelationship().clear();
getKeyRelationship().addAll((Collection<? extends KeyRelationship>)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__UNIQUE_KEY:
getUniqueKey().clear();
getUniqueKey().addAll((Collection<? extends UniqueKey>)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__DATA_ITEM:
getDataItem().clear();
getDataItem().addAll((Collection<? extends DataItem>)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__REMAP:
getRemap().clear();
getRemap().addAll((Collection<? extends Remap>)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__INITIAL_VALUE:
setInitialValue((Expression)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__LENGTH:
setLength((Long)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__PRECISION:
setPrecision((Long)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__SCALE:
setScale((Long)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__SOURCE_TYPE:
setSourceType((String)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__DEFAULT_VALUE:
setDefaultValue((String)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__TALEND_TYPE:
setTalendType((String)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__KEY:
setKey((Boolean)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__NULLABLE:
setNullable((Boolean)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__TABLE:
setTable((MetadataTable)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__ORIGINAL_FIELD:
setOriginalField((String)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__PATTERN:
setPattern((String)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__DISPLAY_FIELD:
setDisplayField((String)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__ORIGINAL_LENGTH:
setOriginalLength((Long)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__RELATED_ENTITY:
setRelatedEntity((String)newValue);
return;
case ConnectionPackage.METADATA_COLUMN__RELATIONSHIP_TYPE:
setRelationshipType((String)newValue);
return;
}
super.eSet(featureID,newValue);
}","/** 
 * overides the eSet to avoid name=label behaviour in super.setLabel to fix TDI-26322
 */
@Override public void eSet(int featureID,Object newValue){
  if (ConnectionPackage.ABSTRACT_METADATA_OBJECT__LABEL == featureID) {
    setLabelFix((String)newValue);
    return;
  }
  eSetGen(featureID,newValue);
}",0.0679245283018867
127578,"public boolean isReadOnly(){
  MetadataTable table=getTable();
  return table == null ? false : table.isReadOnly();
}","@Override public boolean isReadOnly(){
  MetadataTable table=getTable();
  return table == null ? false : table.isReadOnly();
}",0.9590163934426228
127579,"@Override public void dispose(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().removePerspectiveListener(getRepoViewPerspectiveListener());
  super.dispose();
}","@Override public void dispose(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().removePerspectiveListener(getRepoViewPerspectiveListener());
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  if (workspace != null) {
    workspace.removeResourceChangeListener(getResourcePostChangerRunnableListener());
  }
  super.dispose();
}",0.615686274509804
127580,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  viewer=getCommonViewer();
  if (viewer instanceof ITreeViewerListener) {
    viewer.addTreeListener((ITreeViewerListener)viewer);
  }
  getSite().setSelectionProvider(viewer);
  viewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
          TreeItem item=getObject(viewer.getTree(),event.getElement());
          if (item != null) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_CLOSE_ICON));
          }
        }
      }
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
          TreeItem item=getObject(viewer.getTree(),element);
          if (item != null) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_OPEN_ICON));
          }
        }
      }
    }
  }
);
  createTreeTooltip(viewer.getTree());
  viewer.getTree().addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      log.trace(""String_Node_Str"");
      IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
      ca=contextService.activateContext(""String_Node_Str"");
    }
    @Override public void focusLost(    FocusEvent e){
      log.trace(""String_Node_Str"");
      if (ca != null) {
        IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
        contextService.deactivateContext(ca);
      }
    }
  }
);
  if (listenersNeedTobeAddedIntoTreeviewer.size() > 0) {
    for (    ISelectionChangedListener listener : listenersNeedTobeAddedIntoTreeviewer) {
      viewer.addSelectionChangedListener(listener);
    }
    listenersNeedTobeAddedIntoTreeviewer.clear();
  }
  CoreRepositoryPlugin.getDefault().registerRepositoryChangedListenerAsFirst(this);
  if (!CoreRepositoryPlugin.getDefault().isRCPMode()) {
    boolean pluginModel=true;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IMigrationToolService.class)) {
      IMigrationToolService migrationService=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
      if (migrationService != null) {
        migrationService.executeMigration(pluginModel);
      }
    }
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
      IRunProcessService runProcessService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      if (runProcessService != null) {
        runProcessService.deleteAllJobs(pluginModel);
      }
    }
    final RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
    final Project project=repositoryContext.getProject();
    final IWorkbenchWindow activedWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    activedWorkbenchWindow.getPartService().addPartListener(new IPartListener(){
      @Override public void partActivated(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
      @Override public void partBroughtToTop(      IWorkbenchPart part){
      }
      @Override public void partClosed(      IWorkbenchPart part){
      }
      @Override public void partDeactivated(      IWorkbenchPart part){
      }
      @Override public void partOpened(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
    }
);
  }
  expandTreeRootIfOnlyOneRoot();
  viewer.setSorter(new CommonViewerSorter());
  refreshContentDescription();
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(getRepoViewPerspectiveListener());
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().addPartListener(getRepoViewPartListener());
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  viewer=getCommonViewer();
  if (viewer instanceof ITreeViewerListener) {
    viewer.addTreeListener((ITreeViewerListener)viewer);
  }
  getSite().setSelectionProvider(viewer);
  viewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
          TreeItem item=getObject(viewer.getTree(),event.getElement());
          if (item != null) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_CLOSE_ICON));
          }
        }
      }
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
          TreeItem item=getObject(viewer.getTree(),element);
          if (item != null) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_OPEN_ICON));
          }
        }
      }
    }
  }
);
  createTreeTooltip(viewer.getTree());
  viewer.getTree().addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      log.trace(""String_Node_Str"");
      IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
      ca=contextService.activateContext(""String_Node_Str"");
    }
    @Override public void focusLost(    FocusEvent e){
      log.trace(""String_Node_Str"");
      if (ca != null) {
        IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
        contextService.deactivateContext(ca);
      }
    }
  }
);
  if (listenersNeedTobeAddedIntoTreeviewer.size() > 0) {
    for (    ISelectionChangedListener listener : listenersNeedTobeAddedIntoTreeviewer) {
      viewer.addSelectionChangedListener(listener);
    }
    listenersNeedTobeAddedIntoTreeviewer.clear();
  }
  CoreRepositoryPlugin.getDefault().registerRepositoryChangedListenerAsFirst(this);
  if (!CoreRepositoryPlugin.getDefault().isRCPMode()) {
    boolean pluginModel=true;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IMigrationToolService.class)) {
      IMigrationToolService migrationService=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
      if (migrationService != null) {
        migrationService.executeMigration(pluginModel);
      }
    }
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
      IRunProcessService runProcessService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      if (runProcessService != null) {
        runProcessService.deleteAllJobs(pluginModel);
      }
    }
    final RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
    final Project project=repositoryContext.getProject();
    final IWorkbenchWindow activedWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    activedWorkbenchWindow.getPartService().addPartListener(new IPartListener(){
      @Override public void partActivated(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
      @Override public void partBroughtToTop(      IWorkbenchPart part){
      }
      @Override public void partClosed(      IWorkbenchPart part){
      }
      @Override public void partDeactivated(      IWorkbenchPart part){
      }
      @Override public void partOpened(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
    }
);
  }
  expandTreeRootIfOnlyOneRoot();
  viewer.setSorter(new CommonViewerSorter());
  refreshContentDescription();
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(getRepoViewPerspectiveListener());
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().addPartListener(getRepoViewPartListener());
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  if (workspace != null) {
    workspace.addResourceChangeListener(getResourcePostChangerRunnableListener(),IResourceChangeEvent.POST_CHANGE);
  }
}",0.9802154750244858
127581,"@Override public void dispose(){
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  if (workspace != null && resouceChangeVisitor != null) {
    workspace.removeResourceChangeListener(resouceChangeVisitor);
  }
  topLevelNodeToPathMap.clear();
  topLevelNodeToPathMap=null;
  super.dispose();
}","@Override public void dispose(){
  if (this.viewer != null && this.visitor != null && this.viewer instanceof RepoViewCommonViewer) {
    final Control control=this.viewer.getControl();
    if (control != null && !control.isDisposed()) {
      CommonNavigator commonNavigator=((RepoViewCommonViewer)this.viewer).getCommonNavigator();
      if (commonNavigator instanceof RepoViewCommonNavigator) {
        ((RepoViewCommonNavigator)commonNavigator).removeVisitor(this.visitor);
      }
    }
  }
  topLevelNodeToPathMap.clear();
  topLevelNodeToPathMap=null;
  super.dispose();
}",0.1845102505694761
127582,"@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  boolean visitChildren=false;
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      visitChildren=false;
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new Runnable(){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
      }
    }
  }
  return visitChildren;
}","@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  boolean visitChildren=false;
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      visitChildren=false;
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new TopLevelNodeRunnable(repoNode){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
      }
    }
  }
  return visitChildren;
}",0.9882075471698112
127583,"@Override public void inputChanged(Viewer arg0,Object arg1,Object arg2){
  if (arg0 instanceof CommonViewer) {
    this.viewer=(CommonViewer)arg0;
  }
  super.inputChanged(arg0,arg1,arg2);
  topLevelNodeToPathMap.clear();
  addResourceChangeListener();
}","@Override public void inputChanged(Viewer arg0,Object arg1,Object arg2){
  if (arg0 instanceof CommonViewer) {
    this.viewer=(CommonViewer)arg0;
  }
  super.inputChanged(arg0,arg1,arg2);
  topLevelNodeToPathMap.clear();
  addResourceVisitor(this.viewer);
}",0.93359375
127584,"/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
    List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
    if (driverNames != null) {
      for (      String jar : driverNames) {
        if (!new File(getJavaLibPath() + jar).exists()) {
          librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
        }
        jarPathList.add(getJavaLibPath() + jar);
      }
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion)) {
        driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
      }
    }
  }
 else {
    Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
    if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        for (        String jar : jars) {
          Path path=new Path(jar);
          if (jarsAvailable.contains(path.lastSegment())) {
            if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + path.lastSegment());
          }
 else {
            jarPathList.add(jar);
          }
        }
      }
 else {
        Path path=new Path(driverJarPathArg);
        File driverFile=new File(driverJarPathArg);
        boolean isExist=driverFile.exists();
        if (!isExist) {
          jarPathList.add(""String_Node_Str"");
        }
 else         if (jarsAvailable.contains(path.lastSegment())) {
          String jarUnderLib=getJavaLibPath() + path.lastSegment();
          File file=new File(jarUnderLib);
          if (!file.exists()) {
            librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(jarUnderLib);
        }
 else {
          jarPathList.add(driverJarPathArg);
        }
      }
    }
 else {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        for (int i=0; i < jars.length; i++) {
          if (!new File(getJavaLibPath() + jars[i]).exists()) {
            librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jars[i]);
        }
      }
 else {
        if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
          librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
        }
        jarPathList.add(getJavaLibPath() + driverJarPathArg);
      }
    }
  }
  final String[] driverJarPath=jarPathList.toArray(new String[0]);
  if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
    driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
      ExtractMetaDataUtils.checkAccessDbq(url);
    }
  }
  List list=new ArrayList();
  ExtractMetaDataUtils.checkDBConnectionTimeout();
  if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else   if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
    if (DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass())) {
      wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
      Properties info=new Properties();
      username=username != null ? username : ""String_Node_Str"";
      pwd=pwd != null ? pwd : ""String_Node_Str"";
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      connection=wapperDriver.connect(url,info);
    }
 else {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
        DRIVER_CACHE.put(EDatabase4DriverClassName.MSSQL.getDriverClass(),wapperDriver);
      }
    }
  }
 else   if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
      loadJarRequiredByDriver(dbType,dbVersion);
    }
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else {
    try {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
 catch (    ClassNotFoundException e) {
      String errorMessage=Messages.getString(""String_Node_Str"") + driverClassName;
      if (driverJarPath != null && driverJarPath.length > 0) {
        errorMessage=errorMessage + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
        for (        String jarName : driverJarPath) {
          errorMessage=errorMessage + ""String_Node_Str"" + new Path(jarName).lastSegment();
        }
      }
      throw new MissingDriverException(errorMessage);
    }
  }
  if (connection == null) {
    throw new Exception(Messages.getString(""String_Node_Str""));
  }
  conList.add(connection);
  if (wapperDriver != null) {
    conList.add(wapperDriver);
  }
  return conList;
}","/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
    List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
    if (driverNames != null) {
      librairesManagerService.retrieve(driverNames,getJavaLibPath(),new NullProgressMonitor());
      for (      String jar : driverNames) {
        jarPathList.add(getJavaLibPath() + jar);
      }
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion)) {
        driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
      }
    }
  }
 else {
    Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
    if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        List<String> jarsToRetreive=new ArrayList<String>();
        for (        String jar : jars) {
          Path path=new Path(jar);
          if (jarsAvailable.contains(path.lastSegment())) {
            if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
              jarsToRetreive.add(path.lastSegment());
            }
            jarPathList.add(getJavaLibPath() + path.lastSegment());
          }
 else {
            jarsToRetreive.add(path.lastSegment());
            jarPathList.add(jar);
          }
        }
        librairesManagerService.retrieve(jarsToRetreive,getJavaLibPath(),new NullProgressMonitor());
      }
 else {
        Path path=new Path(driverJarPathArg);
        File driverFile=new File(driverJarPathArg);
        boolean isExist=driverFile.exists();
        if (!isExist) {
          jarPathList.add(""String_Node_Str"");
        }
 else         if (jarsAvailable.contains(path.lastSegment())) {
          String jarUnderLib=getJavaLibPath() + path.lastSegment();
          File file=new File(jarUnderLib);
          if (!file.exists()) {
            librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(jarUnderLib);
        }
 else {
          jarPathList.add(driverJarPathArg);
        }
      }
    }
 else {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        librairesManagerService.retrieve(Arrays.asList(jars),getJavaLibPath(),new NullProgressMonitor());
        for (        String jar : jars) {
          jarPathList.add(getJavaLibPath() + jar);
        }
      }
 else {
        if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
          librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
        }
        jarPathList.add(getJavaLibPath() + driverJarPathArg);
      }
    }
  }
  final String[] driverJarPath=jarPathList.toArray(new String[0]);
  if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
    driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
      ExtractMetaDataUtils.checkAccessDbq(url);
    }
  }
  List list=new ArrayList();
  ExtractMetaDataUtils.checkDBConnectionTimeout();
  if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else   if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
    if (DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass())) {
      wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
      Properties info=new Properties();
      username=username != null ? username : ""String_Node_Str"";
      pwd=pwd != null ? pwd : ""String_Node_Str"";
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      connection=wapperDriver.connect(url,info);
    }
 else {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
        DRIVER_CACHE.put(EDatabase4DriverClassName.MSSQL.getDriverClass(),wapperDriver);
      }
    }
  }
 else   if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
      loadJarRequiredByDriver(dbType,dbVersion);
    }
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else {
    try {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
 catch (    ClassNotFoundException e) {
      String errorMessage=Messages.getString(""String_Node_Str"") + driverClassName;
      if (driverJarPath != null && driverJarPath.length > 0) {
        errorMessage=errorMessage + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
        for (        String jarName : driverJarPath) {
          errorMessage=errorMessage + ""String_Node_Str"" + new Path(jarName).lastSegment();
        }
      }
      throw new MissingDriverException(errorMessage);
    }
  }
  if (connection == null) {
    throw new Exception(Messages.getString(""String_Node_Str""));
  }
  conList.add(connection);
  if (wapperDriver != null) {
    conList.add(wapperDriver);
  }
  return conList;
}",0.9308784328311946
127585,"/** 
 * RetreiveShema connection width value of nameText, serverText, loginText, passwordText, tableCombo.
 */
private void pressRetreiveSchemaButton(){
  boolean checkConnectionIsDone=managerConnection.check(getIMetadataConnection());
  if (!checkConnectionIsDone) {
    adaptFormToCheckConnection();
    updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
    new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
  }
 else {
    boolean doit=true;
    if (tableEditorView.getMetadataEditor().getBeanCount() > 0) {
      doit=MessageDialog.openConfirm(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (doit) {
      tableString=tableCombo.getText();
      if (tableCombo.isEnabled() && tableCombo.getCombo().indexOf(tableString) == -1) {
        MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        return;
      }
      List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
      if (useProvider()) {
        metadataColumns=provider.returnMetadataColumnsFromTable(tableString,metadataconnection);
      }
 else {
        metadataColumns=ExtractMetaDataFromDataBase.returnMetadataColumnsFormTable(metadataconnection,tableString);
      }
      tableEditorView.getMetadataEditor().removeAll();
      List<MetadataColumn> metadataColumnsValid=new ArrayList<MetadataColumn>();
      Iterator iterate=metadataColumns.iterator();
      while (iterate.hasNext()) {
        MetadataColumn metadataColumn=(MetadataColumn)iterate.next();
        if (metadataColumn.getTalendType().equals(JavaTypesManager.DATE.getId()) || metadataColumn.getTalendType().equals(PerlTypesManager.DATE)) {
          if (""String_Node_Str"".equals(metadataColumn.getPattern())) {
            metadataColumn.setPattern(TalendQuoteUtils.addQuotes(""String_Node_Str""));
          }
        }
        String columnLabel=metadataColumn.getLabel();
        String columnName=metadataColumn.getName();
        metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(columnLabel));
        metadataColumn.setName(columnName);
        metadataColumnsValid.add(metadataColumn);
      }
      removeDoubleQuotes(metadataColumnsValid);
      tableEditorView.getMetadataEditor().addAll(metadataColumnsValid);
    }
  }
  updateRetreiveSchemaButton();
  changeTableNavigatorStatus(checkFieldsValue());
}","/** 
 * RetreiveShema connection width value of nameText, serverText, loginText, passwordText, tableCombo.
 */
private void pressRetreiveSchemaButton(){
  boolean checkConnectionIsDone=managerConnection.check(getIMetadataConnection());
  if (!checkConnectionIsDone) {
    adaptFormToCheckConnection();
    updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
    new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
  }
 else {
    boolean doit=true;
    if (tableEditorView.getMetadataEditor().getBeanCount() > 0) {
      doit=MessageDialog.openConfirm(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (doit) {
      tableString=tableCombo.getText();
      if (tableCombo.isEnabled() && tableCombo.getCombo().indexOf(tableString) == -1) {
        MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        return;
      }
      List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
      if (useProvider()) {
        metadataColumns=provider.returnMetadataColumnsFromTable(tableString,metadataconnection);
      }
 else {
        metadataColumns=ExtractMetaDataFromDataBase.returnMetadataColumnsFormTable(metadataconnection,tableString);
      }
      tableEditorView.getMetadataEditor().removeAll();
      List<MetadataColumn> metadataColumnsValid=new ArrayList<MetadataColumn>();
      Iterator iterate=metadataColumns.iterator();
      while (iterate.hasNext()) {
        MetadataColumn metadataColumn=(MetadataColumn)iterate.next();
        if (metadataColumn.getTalendType().equals(JavaTypesManager.DATE.getId()) || metadataColumn.getTalendType().equals(PerlTypesManager.DATE)) {
          if (""String_Node_Str"".equals(metadataColumn.getPattern())) {
            metadataColumn.setPattern(TalendQuoteUtils.addQuotes(""String_Node_Str""));
          }
        }
        String columnLabel=metadataColumn.getLabel();
        metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(columnLabel));
        metadataColumnsValid.add(metadataColumn);
      }
      removeDoubleQuotes(metadataColumnsValid);
      tableEditorView.getMetadataEditor().addAll(metadataColumnsValid);
    }
  }
  updateRetreiveSchemaButton();
  changeTableNavigatorStatus(checkFieldsValue());
}",0.9446254071661238
127586,"public static String addQuotesWithSpaceField(String fieldName,String dbType){
  if (fieldName == null) {
    fieldName=""String_Node_Str"";
  }
  if (fieldName.startsWith(""String_Node_Str"") && fieldName.endsWith(""String_Node_Str"")) {
    return fieldName;
  }
  boolean b=true;
  for (int i=0; i < fieldName.length(); i++) {
    char c=fieldName.charAt(i);
    b=b && c >= '0' && c <= '9';
  }
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  if (name.equals(EDatabaseTypeName.MYSQL) && fieldName.contains(JAVA_END_STRING)) {
    String newFieldName=""String_Node_Str"" + fieldName + ""String_Node_Str"";
    return newFieldName;
  }
  boolean isCheck=!CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  if (!b) {
    if (isCheck && isPSQLSimilar(name)) {
      return fieldName;
    }
  }
  String newFieldName=fieldName;
  String quote=getQuoteByDBType(name);
  if (!newFieldName.contains(quote)) {
    newFieldName=addQuotes(newFieldName,quote);
  }
  return newFieldName;
}","public static String addQuotesWithSpaceField(String fieldName,String dbType){
  if (fieldName == null) {
    fieldName=""String_Node_Str"";
  }
  if (fieldName.startsWith(""String_Node_Str"") && fieldName.endsWith(""String_Node_Str"")) {
    return fieldName;
  }
  boolean b=true;
  for (int i=0; i < fieldName.length(); i++) {
    char c=fieldName.charAt(i);
    b=b && c >= '0' && c <= '9';
  }
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  if (name.equals(EDatabaseTypeName.MYSQL) && fieldName.contains(JAVA_END_STRING)) {
    String newFieldName=TalendQuoteUtils.addQuotes(fieldName);
    return newFieldName;
  }
  boolean isCheck=!CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  if (!b) {
    if (isCheck && isPSQLSimilar(name)) {
      return fieldName;
    }
  }
  String newFieldName=fieldName;
  String quote=getQuoteByDBType(name);
  if (!newFieldName.contains(quote)) {
    newFieldName=addQuotes(newFieldName,quote);
  }
  return newFieldName;
}",0.9584942084942084
127587,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns;
    if (MetadataConnectionUtils.isMysql(dbJDBCMetadata)) {
      columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,""String_Node_Str"" + tablePattern + ""String_Node_Str"",columnPattern);
    }
 else {
      columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    }
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9702765572499352
127588,"protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  String tablePattern=tableName;
  try {
    if (MetadataConnectionUtils.isMysql(dbMetaData)) {
      tablePattern=""String_Node_Str"" + tablePattern + ""String_Node_Str"";
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tablePattern);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}","protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}",0.9850470430107529
127589,"public static String generateNewQuery(final IMetadataTable repositoryMetadata,final String dbType,final String tableNameWithQuoteIfNeed,final String... realTableName){
  if (repositoryMetadata == null) {
    return ""String_Node_Str"";
  }
  List<IMetadataColumn> metaDataColumnList=repositoryMetadata.getListColumns();
  int index=metaDataColumnList.size();
  if (index == 0) {
    return ""String_Node_Str"";
  }
  isContextQuery=false;
  if (isContext(tableNameWithQuoteIfNeed)) {
    isContextQuery=true;
  }
  String columnsQuery=""String_Node_Str"";
  for (int i=0; i < metaDataColumnList.size(); i++) {
    IMetadataColumn metaDataColumn=metaDataColumnList.get(i);
    String columnName=quoteStringValue(metaDataColumn.getOriginalDbColumnName(),dbType);
    String columnStr=columnName;
    if (dbType != null && (dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()))) {
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(columnStr);
      columnStr=TalendTextUtils.addQuotes(matcher.replaceAll(""String_Node_Str""));
    }
    if (i != index - 1) {
      columnStr=checkAndConcatString(columnStr,TalendTextUtils.declareString(""String_Node_Str"" + SPACE));
    }
    columnStr=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),columnStr);
    columnStr=checkAndConcatString(tableNameWithQuoteIfNeed,columnStr);
    if (""String_Node_Str"".equals(columnsQuery.trim())) {
      columnsQuery=columnStr;
    }
 else {
      columnsQuery=checkAndConcatString(columnsQuery,columnStr);
    }
  }
  boolean isCheck=CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  String query=TalendTextUtils.declareString(""String_Node_Str"");
  if (isContextQuery) {
    String end=ENTER + CON + checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),tableNameWithQuoteIfNeed);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(query,columnsQuery) + end;
  }
 else   if (dbType != null && dbType.equals(EDatabaseTypeName.INFORMIX.getDisplayName())) {
    String declareString=TalendTextUtils.getStringDeclare();
    String end=""String_Node_Str"";
    if (!isCheck) {
      end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0] + declareString);
    }
 else {
      end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0].substring(2,realTableName[0].length() - 2) + declareString);
    }
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
 else   if (dbType != null && dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
    String declareString=TalendTextUtils.getStringDeclare();
    String end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0] + declareString);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
 else {
    String end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),tableNameWithQuoteIfNeed);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
  return query;
}","public static String generateNewQuery(final IMetadataTable repositoryMetadata,final String dbType,final String tableNameWithQuoteIfNeed,final String... realTableName){
  if (repositoryMetadata == null) {
    return ""String_Node_Str"";
  }
  List<IMetadataColumn> metaDataColumnList=repositoryMetadata.getListColumns();
  int index=metaDataColumnList.size();
  if (index == 0) {
    return ""String_Node_Str"";
  }
  isContextQuery=false;
  if (isContext(tableNameWithQuoteIfNeed)) {
    isContextQuery=true;
  }
  String columnsQuery=""String_Node_Str"";
  for (int i=0; i < metaDataColumnList.size(); i++) {
    IMetadataColumn metaDataColumn=metaDataColumnList.get(i);
    String columnName=quoteStringValue(metaDataColumn.getOriginalDbColumnName(),dbType);
    String columnStr=columnName;
    if (dbType != null && (dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()))) {
      columnStr=TalendQuoteUtils.addQuotesIfNotExist(metaDataColumn.getOriginalDbColumnName());
    }
    if (i != index - 1) {
      columnStr=checkAndConcatString(columnStr,TalendTextUtils.declareString(""String_Node_Str"" + SPACE));
    }
    columnStr=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),columnStr);
    columnStr=checkAndConcatString(tableNameWithQuoteIfNeed,columnStr);
    if (""String_Node_Str"".equals(columnsQuery.trim())) {
      columnsQuery=columnStr;
    }
 else {
      columnsQuery=checkAndConcatString(columnsQuery,columnStr);
    }
  }
  boolean isCheck=CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  String query=TalendTextUtils.declareString(""String_Node_Str"");
  if (isContextQuery) {
    String end=ENTER + CON + checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),tableNameWithQuoteIfNeed);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(query,columnsQuery) + end;
  }
 else   if (dbType != null && dbType.equals(EDatabaseTypeName.INFORMIX.getDisplayName())) {
    String declareString=TalendTextUtils.getStringDeclare();
    String end=""String_Node_Str"";
    if (!isCheck) {
      end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0] + declareString);
    }
 else {
      end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0].substring(2,realTableName[0].length() - 2) + declareString);
    }
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
 else   if (dbType != null && dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
    String declareString=TalendTextUtils.getStringDeclare();
    String end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0] + declareString);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
 else {
    String end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),tableNameWithQuoteIfNeed);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
  return query;
}",0.959731543624161
127590,"@Override public void dispose(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().removePerspectiveListener(getRepoViewPerspectiveListener());
  super.dispose();
}","@Override public void dispose(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().removePerspectiveListener(getRepoViewPerspectiveListener());
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  if (workspace != null) {
    workspace.removeResourceChangeListener(getResourcePostChangerRunnableListener());
  }
  super.dispose();
}",0.615686274509804
127591,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  viewer=getCommonViewer();
  if (viewer instanceof ITreeViewerListener) {
    viewer.addTreeListener((ITreeViewerListener)viewer);
  }
  getSite().setSelectionProvider(viewer);
  viewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
          TreeItem item=getObject(viewer.getTree(),event.getElement());
          if (item != null) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_CLOSE_ICON));
          }
        }
      }
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
          TreeItem item=getObject(viewer.getTree(),element);
          if (item != null) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_OPEN_ICON));
          }
        }
      }
    }
  }
);
  createTreeTooltip(viewer.getTree());
  viewer.getTree().addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      log.trace(""String_Node_Str"");
      IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
      ca=contextService.activateContext(""String_Node_Str"");
    }
    @Override public void focusLost(    FocusEvent e){
      log.trace(""String_Node_Str"");
      if (ca != null) {
        IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
        contextService.deactivateContext(ca);
      }
    }
  }
);
  if (listenersNeedTobeAddedIntoTreeviewer.size() > 0) {
    for (    ISelectionChangedListener listener : listenersNeedTobeAddedIntoTreeviewer) {
      viewer.addSelectionChangedListener(listener);
    }
    listenersNeedTobeAddedIntoTreeviewer.clear();
  }
  CoreRepositoryPlugin.getDefault().registerRepositoryChangedListenerAsFirst(this);
  if (!CoreRepositoryPlugin.getDefault().isRCPMode()) {
    boolean pluginModel=true;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IMigrationToolService.class)) {
      IMigrationToolService migrationService=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
      if (migrationService != null) {
        migrationService.executeMigration(pluginModel);
      }
    }
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
      IRunProcessService runProcessService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      if (runProcessService != null) {
        runProcessService.deleteAllJobs(pluginModel);
      }
    }
    final RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
    final Project project=repositoryContext.getProject();
    final IWorkbenchWindow activedWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    activedWorkbenchWindow.getPartService().addPartListener(new IPartListener(){
      @Override public void partActivated(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
      @Override public void partBroughtToTop(      IWorkbenchPart part){
      }
      @Override public void partClosed(      IWorkbenchPart part){
      }
      @Override public void partDeactivated(      IWorkbenchPart part){
      }
      @Override public void partOpened(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
    }
);
  }
  expandTreeRootIfOnlyOneRoot();
  viewer.setSorter(new CommonViewerSorter());
  refreshContentDescription();
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(getRepoViewPerspectiveListener());
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().addPartListener(getRepoViewPartListener());
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  viewer=getCommonViewer();
  if (viewer instanceof ITreeViewerListener) {
    viewer.addTreeListener((ITreeViewerListener)viewer);
  }
  getSite().setSelectionProvider(viewer);
  viewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
          TreeItem item=getObject(viewer.getTree(),event.getElement());
          if (item != null) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_CLOSE_ICON));
          }
        }
      }
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
          TreeItem item=getObject(viewer.getTree(),element);
          if (item != null) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_OPEN_ICON));
          }
        }
      }
    }
  }
);
  createTreeTooltip(viewer.getTree());
  viewer.getTree().addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      log.trace(""String_Node_Str"");
      IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
      ca=contextService.activateContext(""String_Node_Str"");
    }
    @Override public void focusLost(    FocusEvent e){
      log.trace(""String_Node_Str"");
      if (ca != null) {
        IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
        contextService.deactivateContext(ca);
      }
    }
  }
);
  if (listenersNeedTobeAddedIntoTreeviewer.size() > 0) {
    for (    ISelectionChangedListener listener : listenersNeedTobeAddedIntoTreeviewer) {
      viewer.addSelectionChangedListener(listener);
    }
    listenersNeedTobeAddedIntoTreeviewer.clear();
  }
  CoreRepositoryPlugin.getDefault().registerRepositoryChangedListenerAsFirst(this);
  if (!CoreRepositoryPlugin.getDefault().isRCPMode()) {
    boolean pluginModel=true;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IMigrationToolService.class)) {
      IMigrationToolService migrationService=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
      if (migrationService != null) {
        migrationService.executeMigration(pluginModel);
      }
    }
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
      IRunProcessService runProcessService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      if (runProcessService != null) {
        runProcessService.deleteAllJobs(pluginModel);
      }
    }
    final RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
    final Project project=repositoryContext.getProject();
    final IWorkbenchWindow activedWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    activedWorkbenchWindow.getPartService().addPartListener(new IPartListener(){
      @Override public void partActivated(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
      @Override public void partBroughtToTop(      IWorkbenchPart part){
      }
      @Override public void partClosed(      IWorkbenchPart part){
      }
      @Override public void partDeactivated(      IWorkbenchPart part){
      }
      @Override public void partOpened(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
    }
);
  }
  expandTreeRootIfOnlyOneRoot();
  viewer.setSorter(new CommonViewerSorter());
  refreshContentDescription();
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(getRepoViewPerspectiveListener());
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().addPartListener(getRepoViewPartListener());
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  if (workspace != null) {
    workspace.addResourceChangeListener(getResourcePostChangerRunnableListener(),IResourceChangeEvent.POST_CHANGE);
  }
}",0.9802154750244858
127592,"@Override public void dispose(){
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  if (workspace != null && resouceChangeVisitor != null) {
    workspace.removeResourceChangeListener(resouceChangeVisitor);
  }
  topLevelNodeToPathMap.clear();
  topLevelNodeToPathMap=null;
  super.dispose();
}","@Override public void dispose(){
  if (this.viewer != null && this.visitor != null && this.viewer instanceof RepoViewCommonViewer) {
    final Control control=this.viewer.getControl();
    if (control != null && !control.isDisposed()) {
      CommonNavigator commonNavigator=((RepoViewCommonViewer)this.viewer).getCommonNavigator();
      if (commonNavigator instanceof RepoViewCommonNavigator) {
        ((RepoViewCommonNavigator)commonNavigator).removeVisitor(this.visitor);
      }
    }
  }
  topLevelNodeToPathMap.clear();
  topLevelNodeToPathMap=null;
  super.dispose();
}",0.1845102505694761
127593,"@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  boolean visitChildren=true;
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      visitChildren=false;
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new Runnable(){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
      }
    }
  }
  return visitChildren;
}","@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  boolean visitChildren=true;
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      visitChildren=false;
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new TopLevelNodeRunnable(repoNode){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
      }
    }
  }
  return visitChildren;
}",0.9881936245572608
127594,"@Override public void inputChanged(Viewer arg0,Object arg1,Object arg2){
  if (arg0 instanceof CommonViewer) {
    this.viewer=(CommonViewer)arg0;
  }
  super.inputChanged(arg0,arg1,arg2);
  topLevelNodeToPathMap.clear();
  addResourceChangeListener();
}","@Override public void inputChanged(Viewer arg0,Object arg1,Object arg2){
  if (arg0 instanceof CommonViewer) {
    this.viewer=(CommonViewer)arg0;
  }
  super.inputChanged(arg0,arg1,arg2);
  topLevelNodeToPathMap.clear();
  addResourceVisitor(this.viewer);
}",0.93359375
127595,"public static String addQuotesWithSpaceField(String fieldName,String dbType){
  if (fieldName == null) {
    fieldName=""String_Node_Str"";
  }
  if (fieldName.startsWith(""String_Node_Str"") && fieldName.endsWith(""String_Node_Str"")) {
    return fieldName;
  }
  boolean b=true;
  for (int i=0; i < fieldName.length(); i++) {
    char c=fieldName.charAt(i);
    b=b && c >= '0' && c <= '9';
  }
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  if (name.equals(EDatabaseTypeName.MYSQL) && fieldName.contains(JAVA_END_STRING)) {
    String newFieldName=""String_Node_Str"" + fieldName + ""String_Node_Str"";
    return newFieldName;
  }
  boolean isCheck=!CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  if (!b) {
    if (isCheck && isPSQLSimilar(name)) {
      return fieldName;
    }
  }
  String newFieldName=fieldName;
  String quote=getQuoteByDBType(name);
  if (!newFieldName.contains(quote)) {
    newFieldName=addQuotes(newFieldName,quote);
  }
  return newFieldName;
}","public static String addQuotesWithSpaceField(String fieldName,String dbType){
  if (fieldName == null) {
    fieldName=""String_Node_Str"";
  }
  if (fieldName.startsWith(""String_Node_Str"") && fieldName.endsWith(""String_Node_Str"")) {
    return fieldName;
  }
  boolean b=true;
  for (int i=0; i < fieldName.length(); i++) {
    char c=fieldName.charAt(i);
    b=b && c >= '0' && c <= '9';
  }
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  if (name.equals(EDatabaseTypeName.MYSQL) && fieldName.contains(JAVA_END_STRING)) {
    String newFieldName=TalendQuoteUtils.addQuotes(fieldName);
    return newFieldName;
  }
  boolean isCheck=!CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  if (!b) {
    if (isCheck && isPSQLSimilar(name)) {
      return fieldName;
    }
  }
  String newFieldName=fieldName;
  String quote=getQuoteByDBType(name);
  if (!newFieldName.contains(quote)) {
    newFieldName=addQuotes(newFieldName,quote);
  }
  return newFieldName;
}",0.9584942084942084
127596,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns;
    if (MetadataConnectionUtils.isMysql(dbJDBCMetadata)) {
      columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,""String_Node_Str"" + tablePattern + ""String_Node_Str"",columnPattern);
    }
 else {
      columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    }
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9702765572499352
127597,"protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  String tablePattern=tableName;
  try {
    if (MetadataConnectionUtils.isMysql(dbMetaData)) {
      tablePattern=""String_Node_Str"" + tablePattern + ""String_Node_Str"";
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tablePattern);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}","protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}",0.9849458728010826
127598,"protected void evaluateTextField(){
  if (readOnly) {
    return;
  }
  if (nameText == null || nameText.isDisposed()) {
    return;
  }
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().startsWith(""String_Node_Str"") || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (JavaConventions.validateClassFileName(nameText.getText() + CLASS,JavaCore.getOption(JavaCore.COMPILER_SOURCE),JavaCore.getOption(JavaCore.COMPILER_COMPLIANCE)).getSeverity() == IStatus.ERROR || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(getPropertyLabel(StringUtils.trimToNull(nameText.getText())));
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
    property.setModificationDate(new Date());
  }
  updatePageStatus();
}","protected void evaluateTextField(){
  ERepositoryObjectType type=ERepositoryObjectType.getItemType(this.property.getItem());
  if (readOnly) {
    return;
  }
  if (nameText == null || nameText.isDisposed()) {
    return;
  }
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().startsWith(""String_Node_Str"") || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (type != null && !type.getType().equals(""String_Node_Str"") && (isKeywords(nameText.getText()) || ""String_Node_Str"".equalsIgnoreCase(nameText.getText()))) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (type != null && type.getType().equals(""String_Node_Str"") && (JavaConventions.validateClassFileName(nameText.getText() + CLASS,JavaCore.getOption(JavaCore.COMPILER_SOURCE),JavaCore.getOption(JavaCore.COMPILER_COMPLIANCE)).getSeverity() == IStatus.ERROR || ""String_Node_Str"".equalsIgnoreCase(nameText.getText()))) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(getPropertyLabel(StringUtils.trimToNull(nameText.getText())));
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
    property.setModificationDate(new Date());
  }
  updatePageStatus();
}",0.7059148700939746
127599,"private void prepareColumnsFromXSD(String file,List<MetadataColumn> columns,List<SchemaTarget> schemaTarget){
  Composite composite=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
  composite.setVisible(false);
  TreeViewer treeViewer=new TreeViewer(new Tree(composite,SWT.VIRTUAL));
  treeViewer.setContentProvider(new VirtualXmlTreeNodeContentProvider(treeViewer));
  treeViewer.setLabelProvider(new VirtualXmlTreeLabelProvider());
  treeViewer.setUseHashlookup(true);
  TreePopulator treePopulator=new TreePopulator(treeViewer);
  XSDSchema xsdSchema=null;
  ATreeNode treeRootNode=null;
  if (getPage() == null) {
    try {
      xsdSchema=getXSDSchema(file);
      List<ATreeNode> rootNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
      if (rootNodes.size() > 0) {
        treeRootNode=getDefaultRootNode(rootNodes);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
 else {
    XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
    xsdSchema=updateXSDSchema(file);
    treeRootNode=wizard.getTreeRootNode();
  }
  if (treeRootNode == null) {
    return;
  }
  treePopulator.populateTree(xsdSchema,treeRootNode,null);
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  for (  SchemaTarget schema : schemaTarget) {
    String relativeXpath=schema.getRelativeXPathQuery();
    if (relativeXpath != null && relativeXpath.endsWith(""String_Node_Str"")) {
      relativeXpath=relativeXpath.substring(0,relativeXpath.lastIndexOf(""String_Node_Str""));
    }
    String fullPath=schema.getSchema().getAbsoluteXPathQuery();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
      fullPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fullPath));
    }
    String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
    if (relatedSplitedPaths.length > 1) {
      int pathsToRemove=relatedSplitedPaths.length - 1;
      String[] fullPathSplited=fullPath.split(""String_Node_Str"");
      fullPath=""String_Node_Str"";
      for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
        fullPath+=""String_Node_Str"" + fullPathSplited[i];
      }
      fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
    }
 else {
      fullPath+=""String_Node_Str"" + relativeXpath;
    }
    TreeItem treeItem=treePopulator.getTreeItem(fullPath);
    if (treeItem != null) {
      ATreeNode curNode=(ATreeNode)treeItem.getData();
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(schema.getTagName()));
      if (curNode == null || retriever == null) {
        metadataColumn.setTalendType(MetadataTalendType.getDefaultTalendType());
      }
 else {
        metadataColumn.setTalendType(retriever.getDefaultSelectedTalendType(""String_Node_Str"" + curNode.getOriginalDataType()));
      }
      columns.add(metadataColumn);
    }
  }
}","private void prepareColumnsFromXSD(String file,List<MetadataColumn> columns,List<SchemaTarget> schemaTarget){
  Composite composite=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
  composite.setVisible(false);
  TreeViewer treeViewer=new TreeViewer(new Tree(composite,SWT.VIRTUAL));
  treeViewer.setContentProvider(new VirtualXmlTreeNodeContentProvider(treeViewer));
  treeViewer.setLabelProvider(new VirtualXmlTreeLabelProvider());
  treeViewer.setUseHashlookup(true);
  TreePopulator treePopulator=new TreePopulator(treeViewer);
  XSDSchema xsdSchema=null;
  ATreeNode treeRootNode=null;
  if (getPage() == null) {
    try {
      xsdSchema=getXSDSchema(file);
      List<ATreeNode> rootNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
      if (rootNodes.size() > 0) {
        treeRootNode=getDefaultRootNode(rootNodes);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
 else {
    XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
    xsdSchema=updateXSDSchema(file);
    treeRootNode=wizard.getTreeRootNode();
  }
  if (treeRootNode == null) {
    return;
  }
  treePopulator.populateTree(xsdSchema,treeRootNode,null);
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  for (  SchemaTarget schema : schemaTarget) {
    String relativeXpath=schema.getRelativeXPathQuery();
    if (relativeXpath != null && relativeXpath.endsWith(""String_Node_Str"")) {
      relativeXpath=relativeXpath.substring(0,relativeXpath.lastIndexOf(""String_Node_Str""));
    }
    String fullPath=schema.getSchema().getAbsoluteXPathQuery();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
      fullPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fullPath));
    }
    String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
    if (relatedSplitedPaths.length > 1) {
      int pathsToRemove=relatedSplitedPaths.length - 1;
      String[] fullPathSplited=fullPath.split(""String_Node_Str"");
      fullPath=""String_Node_Str"";
      for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
        fullPath+=""String_Node_Str"" + fullPathSplited[i];
      }
      fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
    }
 else {
      fullPath+=""String_Node_Str"" + relativeXpath;
    }
    TreeItem treeItem=treePopulator.getTreeItem(fullPath);
    if (treeItem != null) {
      ATreeNode curNode=(ATreeNode)treeItem.getData();
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(schema.getTagName()));
      if (curNode == null || retriever == null) {
        metadataColumn.setTalendType(MetadataTalendType.getDefaultTalendType());
      }
 else {
        String originalDataType=curNode.getOriginalDataType();
        if (originalDataType != null && !originalDataType.startsWith(""String_Node_Str"")) {
          originalDataType=""String_Node_Str"" + originalDataType;
        }
        metadataColumn.setTalendType(retriever.getDefaultSelectedTalendType(originalDataType));
      }
      columns.add(metadataColumn);
    }
  }
}",0.9591078066914498
127600,"@Override public void propertyChange(PropertyChangeEvent event){
  if (!event.getPropertyName().equals(ERepositoryActionName.CREATE.getName())) {
    return;
  }
  if (!(event.getNewValue() instanceof ProcessItem) && !(event.getNewValue() instanceof JobletProcessItem)) {
    return;
  }
  final Item item=(Item)event.getNewValue();
  execute(item);
}","@Override public void propertyChange(PropertyChangeEvent event){
  if (!event.getPropertyName().equals(ERepositoryActionName.CREATE.getName()) && !event.getPropertyName().equals(ERepositoryActionName.IMPORT.getName())) {
    return;
  }
  if (!(event.getNewValue() instanceof ProcessItem) && !(event.getNewValue() instanceof JobletProcessItem)) {
    return;
  }
  final Item item=(Item)event.getNewValue();
  execute(item);
}",0.9034749034749034
127601,"protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  String tablePattern=tableName;
  try {
    if (MetadataConnectionUtils.isMysql(dbMetaData)) {
      tablePattern=""String_Node_Str"" + tablePattern + ""String_Node_Str"";
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tablePattern);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}","protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  String tablePattern=tableName;
  try {
    if (MetadataConnectionUtils.isMysql(dbMetaData)) {
      tablePattern=""String_Node_Str"" + tablePattern + ""String_Node_Str"";
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tablePattern);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}",0.9885324912747216
127602,"private static TdColumn addColumnAttribute(String label,String columnName,String typeName,int columnSize,int decimalDigits,String columnRemark,ResultSet resutSet,TdColumn column,java.sql.Connection conn,boolean isMssql) throws SQLException {
  boolean isIBMDB2ZOS=false;
  boolean isTeradataSqlModel=false;
  boolean isSAS=false;
  if (databaseconnection != null) {
    String dbMetaData=databaseconnection.getDatabaseType();
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.IBMDB2ZOS.getDisplayName())) {
      isIBMDB2ZOS=true;
    }
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.TERADATA.getDisplayName()) && databaseconnection.isSQLMode()) {
      isTeradataSqlModel=true;
    }
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.SAS.getDisplayName())) {
      isSAS=true;
    }
  }
  if (column == null) {
    column=RelationalFactory.eINSTANCE.createTdColumn();
  }
  Object defaultvalue=null;
  try {
    defaultvalue=resutSet.getObject(GetColumn.COLUMN_DEF.name());
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
  TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
  if (columnName == null || ""String_Node_Str"".equals(columnName)) {
    try {
      columnName=resutSet.getString(GetColumn.COLUMN_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
      if (columnName == null) {
        columnName=e1.getMessage();
      }
    }
  }
  column.setName(columnName);
  column.setLabel(label);
  int dataType=0;
  try {
    if (isIBMDB2ZOS || isTeradataSqlModel || isSAS) {
      dataType=resutSet.getInt(GetColumn.TYPE_NAME.name());
    }
 else {
      dataType=resutSet.getInt(GetColumn.DATA_TYPE.name());
    }
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
  if (typeName == null || ""String_Node_Str"".equals(typeName)) {
    try {
      typeName=resutSet.getString(GetColumn.TYPE_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
  }
  if (typeName != null && isMssql()) {
    if (typeName.toLowerCase().equals(""String_Node_Str"")) {
      dataType=91;
    }
 else     if (typeName.toLowerCase().equals(""String_Node_Str"")) {
      dataType=92;
    }
  }
  if (columnSize < 0) {
    try {
      columnSize=resutSet.getInt(GetColumn.COLUMN_SIZE.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
  }
  column.setLength(columnSize);
  if (decimalDigits < 0) {
    try {
      decimalDigits=resutSet.getInt(GetColumn.DECIMAL_DIGITS.name());
    }
 catch (    Exception e) {
      log.warn(e);
    }
  }
  int numPrecRadix=0;
  try {
    if (!isIBMDB2ZOS && !isTeradataSqlModel && !isSAS) {
      numPrecRadix=resutSet.getInt(GetColumn.NUM_PREC_RADIX.name());
    }
  }
 catch (  Exception e) {
    log.warn(e);
  }
  if (columnRemark == null || ""String_Node_Str"".equals(columnRemark)) {
    try {
      columnRemark=resutSet.getString(GetColumn.REMARKS.name());
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    if (columnRemark == null) {
      columnRemark=""String_Node_Str"";
    }
    columnRemark=ManagementTextUtils.filterSpecialChar(columnRemark);
  }
  ColumnHelper.setComment(columnRemark,column);
  TdSqlDataType sqlDataType=createDataType(dataType,typeName,decimalDigits,numPrecRadix);
  column.setSqlDataType(sqlDataType);
  try {
    if (isIBMDB2ZOS || isTeradataSqlModel || isSAS) {
      column.getSqlDataType().setNullable(NullableType.get(resutSet.getInt(GetColumn.IS_NULLABLE.name())));
    }
 else {
      column.getSqlDataType().setNullable(NullableType.get(resutSet.getInt(GetColumn.NULLABLE.name())));
    }
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  column.setInitialValue(defExpression);
  String mapping=databaseconnection == null ? null : databaseconnection.getDbmsId();
  if (databaseconnection != null && mapping != null) {
    MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(mapping);
    String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(resutSet,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(resutSet,""String_Node_Str""));
    column.setTalendType(talendType);
  }
  try {
    column.setNullable(""String_Node_Str"".equals(resutSet.getString(GetColumn.IS_NULLABLE.name())));
  }
 catch (  Exception e) {
    column.setNullable(false);
  }
  return column;
}","private static TdColumn addColumnAttribute(String label,String columnName,String typeName,int columnSize,int decimalDigits,String columnRemark,ResultSet resutSet,TdColumn column,java.sql.Connection conn,boolean isMssql) throws SQLException {
  boolean isIBMDB2ZOS=false;
  boolean isTeradataSqlModel=false;
  boolean isSAS=false;
  if (databaseconnection != null) {
    String dbMetaData=databaseconnection.getDatabaseType();
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.IBMDB2ZOS.getDisplayName())) {
      isIBMDB2ZOS=true;
    }
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.TERADATA.getDisplayName()) && databaseconnection.isSQLMode()) {
      isTeradataSqlModel=true;
    }
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.SAS.getDisplayName())) {
      isSAS=true;
    }
  }
  if (column == null) {
    column=RelationalFactory.eINSTANCE.createTdColumn();
  }
  Object defaultvalue=null;
  try {
    defaultvalue=resutSet.getObject(GetColumn.COLUMN_DEF.name());
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
  TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
  if (columnName == null || ""String_Node_Str"".equals(columnName)) {
    try {
      columnName=resutSet.getString(GetColumn.COLUMN_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
      if (columnName == null) {
        columnName=e1.getMessage();
      }
    }
  }
  column.setLabel(label);
  column.setName(columnName);
  int dataType=0;
  try {
    if (isIBMDB2ZOS || isTeradataSqlModel || isSAS) {
      dataType=resutSet.getInt(GetColumn.TYPE_NAME.name());
    }
 else {
      dataType=resutSet.getInt(GetColumn.DATA_TYPE.name());
    }
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
  if (typeName == null || ""String_Node_Str"".equals(typeName)) {
    try {
      typeName=resutSet.getString(GetColumn.TYPE_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
  }
  if (typeName != null && isMssql()) {
    if (typeName.toLowerCase().equals(""String_Node_Str"")) {
      dataType=91;
    }
 else     if (typeName.toLowerCase().equals(""String_Node_Str"")) {
      dataType=92;
    }
  }
  if (columnSize < 0) {
    try {
      columnSize=resutSet.getInt(GetColumn.COLUMN_SIZE.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
  }
  column.setLength(columnSize);
  if (decimalDigits < 0) {
    try {
      decimalDigits=resutSet.getInt(GetColumn.DECIMAL_DIGITS.name());
    }
 catch (    Exception e) {
      log.warn(e);
    }
  }
  int numPrecRadix=0;
  try {
    if (!isIBMDB2ZOS && !isTeradataSqlModel && !isSAS) {
      numPrecRadix=resutSet.getInt(GetColumn.NUM_PREC_RADIX.name());
    }
  }
 catch (  Exception e) {
    log.warn(e);
  }
  if (columnRemark == null || ""String_Node_Str"".equals(columnRemark)) {
    try {
      columnRemark=resutSet.getString(GetColumn.REMARKS.name());
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    if (columnRemark == null) {
      columnRemark=""String_Node_Str"";
    }
    columnRemark=ManagementTextUtils.filterSpecialChar(columnRemark);
  }
  ColumnHelper.setComment(columnRemark,column);
  TdSqlDataType sqlDataType=createDataType(dataType,typeName,decimalDigits,numPrecRadix);
  column.setSqlDataType(sqlDataType);
  try {
    if (isIBMDB2ZOS || isTeradataSqlModel || isSAS) {
      column.getSqlDataType().setNullable(NullableType.get(resutSet.getInt(GetColumn.IS_NULLABLE.name())));
    }
 else {
      column.getSqlDataType().setNullable(NullableType.get(resutSet.getInt(GetColumn.NULLABLE.name())));
    }
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  column.setInitialValue(defExpression);
  String mapping=databaseconnection == null ? null : databaseconnection.getDbmsId();
  if (databaseconnection != null && mapping != null) {
    MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(mapping);
    String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(resutSet,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(resutSet,""String_Node_Str""));
    column.setTalendType(talendType);
  }
  try {
    column.setNullable(""String_Node_Str"".equals(resutSet.getString(GetColumn.IS_NULLABLE.name())));
  }
 catch (  Exception e) {
    column.setNullable(false);
  }
  return column;
}",0.9933080526433192
127603,"/** 
 * RetreiveShema connection width value of nameText, serverText, loginText, passwordText, tableCombo.
 */
private void pressRetreiveSchemaButton(){
  boolean checkConnectionIsDone=managerConnection.check(getIMetadataConnection());
  if (!checkConnectionIsDone) {
    adaptFormToCheckConnection();
    updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
    new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
  }
 else {
    boolean doit=true;
    if (tableEditorView.getMetadataEditor().getBeanCount() > 0) {
      doit=MessageDialog.openConfirm(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (doit) {
      tableString=tableCombo.getText();
      if (tableCombo.isEnabled() && tableCombo.getCombo().indexOf(tableString) == -1) {
        MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        return;
      }
      List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
      if (useProvider()) {
        metadataColumns=provider.returnMetadataColumnsFromTable(tableString,metadataconnection);
      }
 else {
        metadataColumns=ExtractMetaDataFromDataBase.returnMetadataColumnsFormTable(metadataconnection,tableString);
      }
      tableEditorView.getMetadataEditor().removeAll();
      List<MetadataColumn> metadataColumnsValid=new ArrayList<MetadataColumn>();
      Iterator iterate=metadataColumns.iterator();
      while (iterate.hasNext()) {
        MetadataColumn metadataColumn=(MetadataColumn)iterate.next();
        if (metadataColumn.getTalendType().equals(JavaTypesManager.DATE.getId()) || metadataColumn.getTalendType().equals(PerlTypesManager.DATE)) {
          if (""String_Node_Str"".equals(metadataColumn.getPattern())) {
            metadataColumn.setPattern(TalendQuoteUtils.addQuotes(""String_Node_Str""));
          }
        }
        String columnLabel=metadataColumn.getLabel();
        metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(columnLabel));
        metadataColumnsValid.add(metadataColumn);
      }
      removeDoubleQuotes(metadataColumnsValid);
      tableEditorView.getMetadataEditor().addAll(metadataColumnsValid);
    }
  }
  updateRetreiveSchemaButton();
  changeTableNavigatorStatus(checkFieldsValue());
}","/** 
 * RetreiveShema connection width value of nameText, serverText, loginText, passwordText, tableCombo.
 */
private void pressRetreiveSchemaButton(){
  boolean checkConnectionIsDone=managerConnection.check(getIMetadataConnection());
  if (!checkConnectionIsDone) {
    adaptFormToCheckConnection();
    updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
    new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
  }
 else {
    boolean doit=true;
    if (tableEditorView.getMetadataEditor().getBeanCount() > 0) {
      doit=MessageDialog.openConfirm(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (doit) {
      tableString=tableCombo.getText();
      if (tableCombo.isEnabled() && tableCombo.getCombo().indexOf(tableString) == -1) {
        MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        return;
      }
      List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
      if (useProvider()) {
        metadataColumns=provider.returnMetadataColumnsFromTable(tableString,metadataconnection);
      }
 else {
        metadataColumns=ExtractMetaDataFromDataBase.returnMetadataColumnsFormTable(metadataconnection,tableString);
      }
      tableEditorView.getMetadataEditor().removeAll();
      List<MetadataColumn> metadataColumnsValid=new ArrayList<MetadataColumn>();
      Iterator iterate=metadataColumns.iterator();
      while (iterate.hasNext()) {
        MetadataColumn metadataColumn=(MetadataColumn)iterate.next();
        if (metadataColumn.getTalendType().equals(JavaTypesManager.DATE.getId()) || metadataColumn.getTalendType().equals(PerlTypesManager.DATE)) {
          if (""String_Node_Str"".equals(metadataColumn.getPattern())) {
            metadataColumn.setPattern(TalendQuoteUtils.addQuotes(""String_Node_Str""));
          }
        }
        String columnLabel=metadataColumn.getLabel();
        String columnName=metadataColumn.getName();
        metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(columnLabel));
        metadataColumn.setName(columnName);
        metadataColumnsValid.add(metadataColumn);
      }
      removeDoubleQuotes(metadataColumnsValid);
      tableEditorView.getMetadataEditor().addAll(metadataColumnsValid);
    }
  }
  updateRetreiveSchemaButton();
  changeTableNavigatorStatus(checkFieldsValue());
}",0.980456026058632
127604,"private void prepareColumnsFromXSD(String file,List<MetadataColumn> columns,List<SchemaTarget> schemaTarget){
  Composite composite=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
  composite.setVisible(false);
  TreeViewer treeViewer=new TreeViewer(new Tree(composite,SWT.VIRTUAL));
  treeViewer.setContentProvider(new VirtualXmlTreeNodeContentProvider(treeViewer));
  treeViewer.setLabelProvider(new VirtualXmlTreeLabelProvider());
  treeViewer.setUseHashlookup(true);
  TreePopulator treePopulator=new TreePopulator(treeViewer);
  XSDSchema xsdSchema=null;
  ATreeNode treeRootNode=null;
  if (getPage() == null) {
    try {
      xsdSchema=getXSDSchema(file);
      List<ATreeNode> rootNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
      if (rootNodes.size() > 0) {
        treeRootNode=getDefaultRootNode(rootNodes);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
 else {
    XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
    xsdSchema=updateXSDSchema(file);
    treeRootNode=wizard.getTreeRootNode();
  }
  if (treeRootNode == null) {
    return;
  }
  treePopulator.populateTree(xsdSchema,treeRootNode,null);
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  for (  SchemaTarget schema : schemaTarget) {
    String relativeXpath=schema.getRelativeXPathQuery();
    if (relativeXpath != null && relativeXpath.endsWith(""String_Node_Str"")) {
      relativeXpath=relativeXpath.substring(0,relativeXpath.lastIndexOf(""String_Node_Str""));
    }
    String fullPath=schema.getSchema().getAbsoluteXPathQuery();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
      fullPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fullPath));
    }
    String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
    if (relatedSplitedPaths.length > 1) {
      int pathsToRemove=relatedSplitedPaths.length - 1;
      String[] fullPathSplited=fullPath.split(""String_Node_Str"");
      fullPath=""String_Node_Str"";
      for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
        fullPath+=""String_Node_Str"" + fullPathSplited[i];
      }
      fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
    }
 else {
      fullPath+=""String_Node_Str"" + relativeXpath;
    }
    TreeItem treeItem=treePopulator.getTreeItem(fullPath);
    if (treeItem != null) {
      ATreeNode curNode=(ATreeNode)treeItem.getData();
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(schema.getTagName()));
      if (curNode == null || retriever == null) {
        metadataColumn.setTalendType(MetadataTalendType.getDefaultTalendType());
      }
 else {
        metadataColumn.setTalendType(retriever.getDefaultSelectedTalendType(""String_Node_Str"" + curNode.getOriginalDataType()));
      }
      columns.add(metadataColumn);
    }
  }
}","private void prepareColumnsFromXSD(String file,List<MetadataColumn> columns,List<SchemaTarget> schemaTarget){
  Composite composite=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
  composite.setVisible(false);
  TreeViewer treeViewer=new TreeViewer(new Tree(composite,SWT.VIRTUAL));
  treeViewer.setContentProvider(new VirtualXmlTreeNodeContentProvider(treeViewer));
  treeViewer.setLabelProvider(new VirtualXmlTreeLabelProvider());
  treeViewer.setUseHashlookup(true);
  TreePopulator treePopulator=new TreePopulator(treeViewer);
  XSDSchema xsdSchema=null;
  ATreeNode treeRootNode=null;
  if (getPage() == null) {
    try {
      xsdSchema=getXSDSchema(file);
      List<ATreeNode> rootNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
      if (rootNodes.size() > 0) {
        treeRootNode=getDefaultRootNode(rootNodes);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
 else {
    XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
    xsdSchema=updateXSDSchema(file);
    treeRootNode=wizard.getTreeRootNode();
  }
  if (treeRootNode == null) {
    return;
  }
  treePopulator.populateTree(xsdSchema,treeRootNode,null);
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  for (  SchemaTarget schema : schemaTarget) {
    String relativeXpath=schema.getRelativeXPathQuery();
    if (relativeXpath != null && relativeXpath.endsWith(""String_Node_Str"")) {
      relativeXpath=relativeXpath.substring(0,relativeXpath.lastIndexOf(""String_Node_Str""));
    }
    String fullPath=schema.getSchema().getAbsoluteXPathQuery();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
      fullPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fullPath));
    }
    String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
    if (relatedSplitedPaths.length > 1) {
      int pathsToRemove=relatedSplitedPaths.length - 1;
      String[] fullPathSplited=fullPath.split(""String_Node_Str"");
      fullPath=""String_Node_Str"";
      for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
        fullPath+=""String_Node_Str"" + fullPathSplited[i];
      }
      fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
    }
 else {
      fullPath+=""String_Node_Str"" + relativeXpath;
    }
    TreeItem treeItem=treePopulator.getTreeItem(fullPath);
    if (treeItem != null) {
      ATreeNode curNode=(ATreeNode)treeItem.getData();
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(schema.getTagName()));
      if (curNode == null || retriever == null) {
        metadataColumn.setTalendType(MetadataTalendType.getDefaultTalendType());
      }
 else {
        String originalDataType=curNode.getOriginalDataType();
        if (originalDataType != null && !originalDataType.startsWith(""String_Node_Str"")) {
          originalDataType=""String_Node_Str"" + originalDataType;
        }
        metadataColumn.setTalendType(retriever.getDefaultSelectedTalendType(originalDataType));
      }
      columns.add(metadataColumn);
    }
  }
}",0.9591078066914498
127605,"private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    if (particleToTreeNode.containsKey(xsdElementDeclarationParticle)) {
      ATreeNode originalTreeNode=particleToTreeNode.get(xsdElementDeclarationParticle);
      ATreeNode partNode=new ATreeNode();
      partNode.setCurrentNamespace(originalTreeNode.getCurrentNamespace());
      partNode.setValue(originalTreeNode.getValue());
      partNode.setType(ATreeNode.ELEMENT_TYPE);
      partNode.setDataType(originalTreeNode.getDataType());
      partNode.addChild(originalTreeNode.getChildren());
      parentNode.addChild(partNode);
      return;
    }
    ATreeNode partNode=new ATreeNode();
    particleToTreeNode.put(xsdElementDeclarationParticle,partNode);
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}","private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    if (particleToTreeNode.containsKey(xsdElementDeclarationParticle)) {
      ATreeNode originalTreeNode=particleToTreeNode.get(xsdElementDeclarationParticle);
      ATreeNode partNode=new ATreeNode();
      partNode.setCurrentNamespace(originalTreeNode.getCurrentNamespace());
      partNode.setValue(originalTreeNode.getValue());
      partNode.setType(ATreeNode.ELEMENT_TYPE);
      partNode.setDataType(originalTreeNode.getDataType());
      partNode.addChild(originalTreeNode.getChildren());
      parentNode.addChild(partNode);
      return;
    }
    ATreeNode partNode=new ATreeNode();
    particleToTreeNode.put(xsdElementDeclarationParticle,partNode);
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (dataType == null && xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}",0.9983435481199272
127606,"public static int getJavaTypeBySqlType(String sqlType){
  if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.DATE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.BIGINT;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.INTEGER;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.SMALLINT;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.FLOAT;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.CHAR;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.VARCHAR;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.DECIMAL;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.TIME;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.TIMESTAMP;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.BLOB;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.CLOB;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.DISTINCT;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.DOUBLE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.LONGVARCHAR;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.REAL;
  }
  return 0;
}","public static int getJavaTypeBySqlType(String sqlType){
  if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.DATE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.BIGINT;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.INTEGER;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.SMALLINT;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.FLOAT;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.CHAR;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.VARCHAR;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.DECIMAL;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.TIME;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.TIMESTAMP;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.TIMESTAMP;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.BLOB;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.CLOB;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.DISTINCT;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.DOUBLE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.LONGVARCHAR;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.LONGVARCHAR;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.REAL;
  }
  return 0;
}",0.941211401425178
127607,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    if (MetadataConnectionUtils.isMysql(dbJDBCMetadata)) {
      tablePattern=""String_Node_Str"" + tablePattern + ""String_Node_Str"";
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9880166724557138
127608,"public static int getJavaTypeBySqlType(String sqlType){
  if (sqlType.trim().equals(""String_Node_Str"")) {
    return Types.DATE;
  }
 else   if (sqlType.trim().equals(""String_Node_Str"")) {
    return Types.BIGINT;
  }
 else   if (sqlType.trim().equals(""String_Node_Str"")) {
    return Types.INTEGER;
  }
 else   if (sqlType.trim().equals(""String_Node_Str"")) {
    return Types.SMALLINT;
  }
 else   if (sqlType.trim().equals(""String_Node_Str"")) {
    return Types.FLOAT;
  }
 else   if (sqlType.trim().equals(""String_Node_Str"")) {
    return Types.CHAR;
  }
 else   if (sqlType.trim().equals(""String_Node_Str"")) {
    return Types.VARCHAR;
  }
 else   if (sqlType.trim().equals(""String_Node_Str"")) {
    return Types.DECIMAL;
  }
 else   if (sqlType.trim().equals(""String_Node_Str"")) {
    return Types.TIME;
  }
 else   if (sqlType.trim().equals(""String_Node_Str"")) {
    return Types.TIMESTAMP;
  }
 else   if (sqlType.trim().equals(""String_Node_Str"")) {
    return Types.BLOB;
  }
 else   if (sqlType.trim().equals(""String_Node_Str"")) {
    return Types.CLOB;
  }
 else   if (sqlType.trim().equals(""String_Node_Str"")) {
    return Types.DISTINCT;
  }
 else   if (sqlType.trim().equals(""String_Node_Str"")) {
    return Types.DOUBLE;
  }
 else   if (sqlType.trim().equals(""String_Node_Str"")) {
    return Types.LONGVARCHAR;
  }
 else   if (sqlType.trim().equals(""String_Node_Str"")) {
    return Types.REAL;
  }
  return 0;
}","public static int getJavaTypeBySqlType(String sqlType){
  if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.DATE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.BIGINT;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.INTEGER;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.SMALLINT;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.FLOAT;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.CHAR;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.VARCHAR;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.DECIMAL;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.TIME;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.TIMESTAMP;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.BLOB;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.CLOB;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.DISTINCT;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.DOUBLE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.LONGVARCHAR;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.REAL;
  }
  return 0;
}",0.6438538205980067
127609,"protected void editItem(ISelection sel){
  IStructuredSelection selection=(IStructuredSelection)sel;
  String existing=(String)selection.getFirstElement();
  String value=getExistingInputObject(existing);
  if (value != null) {
    int indexOf=list.indexOf(existing);
    list.remove(existing);
    list.add(indexOf,value);
    viewer.refresh();
  }
}","protected void editItem(ISelection sel){
  IStructuredSelection selection=(IStructuredSelection)sel;
  String existing=(String)selection.getFirstElement();
  String value=getExistingInputObject(existing.replace(""String_Node_Str"",""String_Node_Str""));
  if (value != null) {
    int indexOf=list.indexOf(existing);
    list.remove(existing);
    list.add(indexOf,value);
    viewer.refresh();
  }
}",0.9397590361445785
127610,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    if (MetadataConnectionUtils.isMysql(dbJDBCMetadata)) {
      tablePattern=""String_Node_Str"" + tablePattern + ""String_Node_Str"";
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns;
    if (MetadataConnectionUtils.isMysql(dbJDBCMetadata)) {
      columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,""String_Node_Str"" + tablePattern + ""String_Node_Str"",columnPattern);
    }
 else {
      columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    }
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9774372073222648
127611,"protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  String tablePattern=tableName;
  try {
    if (MetadataConnectionUtils.isMysql(dbMetaData)) {
      tablePattern=""String_Node_Str"" + tablePattern + ""String_Node_Str"";
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tablePattern);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tablePattern);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tablePattern);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}","protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  String tablePattern=tableName;
  try {
    if (MetadataConnectionUtils.isMysql(dbMetaData)) {
      tablePattern=""String_Node_Str"" + tablePattern + ""String_Node_Str"";
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tablePattern);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}",0.9910596026490066
127612,"public static String addQuotesWithSpaceField(String fieldName,String dbType){
  if (fieldName == null) {
    fieldName=""String_Node_Str"";
  }
  if (fieldName.startsWith(""String_Node_Str"") && fieldName.endsWith(""String_Node_Str"")) {
    return fieldName;
  }
  boolean b=true;
  for (int i=0; i < fieldName.length(); i++) {
    char c=fieldName.charAt(i);
    b=b && c >= '0' && c <= '9';
  }
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  if (name.equals(EDatabaseTypeName.MYSQL) && fieldName.contains(JAVA_END_STRING)) {
    String newFieldName=TalendQuoteUtils.addQuotes(fieldName);
    return newFieldName;
  }
  boolean isCheck=!CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  if (!b) {
    if (isCheck && isPSQLSimilar(name)) {
      return fieldName;
    }
  }
  String newFieldName=fieldName;
  String quote=getQuoteByDBType(name);
  if (!newFieldName.contains(quote)) {
    newFieldName=addQuotes(newFieldName,quote);
  }
  return newFieldName;
}","public static String addQuotesWithSpaceField(String fieldName,String dbType){
  if (fieldName == null) {
    fieldName=""String_Node_Str"";
  }
  if (fieldName.startsWith(""String_Node_Str"") && fieldName.endsWith(""String_Node_Str"")) {
    return fieldName;
  }
  boolean b=true;
  for (int i=0; i < fieldName.length(); i++) {
    char c=fieldName.charAt(i);
    b=b && c >= '0' && c <= '9';
  }
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  if (name.equals(EDatabaseTypeName.MYSQL) && fieldName.contains(JAVA_END_STRING)) {
    String newFieldName=""String_Node_Str"" + fieldName + ""String_Node_Str"";
    return newFieldName;
  }
  boolean isCheck=!CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  if (!b) {
    if (isCheck && isPSQLSimilar(name)) {
      return fieldName;
    }
  }
  String newFieldName=fieldName;
  String quote=getQuoteByDBType(name);
  if (!newFieldName.contains(quote)) {
    newFieldName=addQuotes(newFieldName,quote);
  }
  return newFieldName;
}",0.9584942084942084
127613,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    if (MetadataConnectionUtils.isMysql(dbJDBCMetadata)) {
      tablePattern=""String_Node_Str"" + tablePattern + ""String_Node_Str"";
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9880166724557138
127614,"protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}","protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  String tablePattern=tableName;
  try {
    if (MetadataConnectionUtils.isMysql(dbMetaData)) {
      tablePattern=""String_Node_Str"" + tablePattern + ""String_Node_Str"";
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tablePattern);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tablePattern);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tablePattern);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}",0.9566750629722922
127615,"/** 
 * DOC ocarbone Comment method ""initMetadataForm"".
 */
private void initMetadataForm(){
  metadataEditor.setMetadataTable(metadataTable);
  IPreferenceStore store=RepositoryManager.getPreferenceStore();
  Boolean flag=store.getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  removeDoubleQuotes(metadataEditor.getMetadataColumnList());
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  String label=MetadataToolHelper.validateValue(metadataTable.getLabel());
  if (getConnection().getDbVersionString() != null && getConnection().getDbVersionString().equals(EDatabaseVersion4Drivers.MYSQL_5.name()) && metadataTable.getName().contains(""String_Node_Str"")) {
    label=metadataTable.getName();
  }
  nameText.setText(label);
  commentText.setText(metadataTable.getComment());
  if (metadataTable.getTableType() != null) {
    typeText.setText(Messages.getString(""String_Node_Str"",metadataTable.getTableType()));
  }
 else {
    typeText.setText(Messages.getString(""String_Node_Str""));
  }
  String sourceName=metadataTable.getName();
  tableCombo.setText(sourceName);
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}","/** 
 * DOC ocarbone Comment method ""initMetadataForm"".
 */
private void initMetadataForm(){
  metadataEditor.setMetadataTable(metadataTable);
  IPreferenceStore store=RepositoryManager.getPreferenceStore();
  Boolean flag=store.getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  removeDoubleQuotes(metadataEditor.getMetadataColumnList());
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  nameText.setText(metadataTable.getName());
  commentText.setText(metadataTable.getComment());
  if (metadataTable.getTableType() != null) {
    typeText.setText(Messages.getString(""String_Node_Str"",metadataTable.getTableType()));
  }
 else {
    typeText.setText(Messages.getString(""String_Node_Str""));
  }
  String sourceName=metadataTable.getName();
  tableCombo.setText(sourceName);
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}",0.707749766573296
127616,"public static String addQuotesWithSpaceField(String fieldName,String dbType){
  if (fieldName == null) {
    fieldName=""String_Node_Str"";
  }
  if (fieldName.startsWith(""String_Node_Str"") && fieldName.endsWith(""String_Node_Str"")) {
    return fieldName;
  }
  boolean b=true;
  for (int i=0; i < fieldName.length(); i++) {
    char c=fieldName.charAt(i);
    b=b && c >= '0' && c <= '9';
  }
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  if (name.equals(EDatabaseTypeName.MYSQL) && fieldName.contains(JAVA_END_STRING)) {
    String newFieldName=TalendQuoteUtils.addQuotes(fieldName);
    return newFieldName;
  }
  boolean isCheck=!CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  if (!b) {
    if (isCheck && isPSQLSimilar(name)) {
      return fieldName;
    }
  }
  String newFieldName=fieldName;
  String quote=getQuoteByDBType(name);
  if (!newFieldName.contains(quote)) {
    newFieldName=addQuotes(newFieldName,quote);
  }
  return newFieldName;
}","public static String addQuotesWithSpaceField(String fieldName,String dbType){
  if (fieldName == null) {
    fieldName=""String_Node_Str"";
  }
  if (fieldName.startsWith(""String_Node_Str"") && fieldName.endsWith(""String_Node_Str"")) {
    return fieldName;
  }
  boolean b=true;
  for (int i=0; i < fieldName.length(); i++) {
    char c=fieldName.charAt(i);
    b=b && c >= '0' && c <= '9';
  }
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  if (name.equals(EDatabaseTypeName.MYSQL) && fieldName.contains(JAVA_END_STRING)) {
    String newFieldName=""String_Node_Str"" + fieldName + ""String_Node_Str"";
    return newFieldName;
  }
  if (name.equals(EDatabaseTypeName.MYSQL) && fieldName.contains(JAVA_END_STRING)) {
    String newFieldName=TalendQuoteUtils.addQuotes(fieldName);
    return newFieldName;
  }
  boolean isCheck=!CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  if (!b) {
    if (isCheck && isPSQLSimilar(name)) {
      return fieldName;
    }
  }
  String newFieldName=fieldName;
  String quote=getQuoteByDBType(name);
  if (!newFieldName.contains(quote)) {
    newFieldName=addQuotes(newFieldName,quote);
  }
  return newFieldName;
}",0.9159626500666964
127617,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    if (MetadataConnectionUtils.isMysql(dbJDBCMetadata)) {
      tablePattern=""String_Node_Str"" + tablePattern + ""String_Node_Str"";
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9880166724557138
127618,"protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}","protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  String tablePattern=tableName;
  try {
    if (MetadataConnectionUtils.isMysql(dbMetaData)) {
      tablePattern=""String_Node_Str"" + tablePattern + ""String_Node_Str"";
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tablePattern);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tablePattern);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tablePattern);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}",0.9566750629722922
127619,"/** 
 * DOC ocarbone Comment method ""initMetadataForm"".
 */
private void initMetadataForm(){
  metadataEditor.setMetadataTable(metadataTable);
  IPreferenceStore store=RepositoryManager.getPreferenceStore();
  Boolean flag=store.getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  removeDoubleQuotes(metadataEditor.getMetadataColumnList());
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  String label=MetadataToolHelper.validateValue(metadataTable.getLabel());
  if (getConnection().getDbVersionString() != null && getConnection().getDbVersionString().equals(EDatabaseVersion4Drivers.MYSQL_5.name()) && metadataTable.getName().contains(""String_Node_Str"")) {
    label=metadataTable.getName();
  }
  nameText.setText(label);
  commentText.setText(metadataTable.getComment());
  if (metadataTable.getTableType() != null) {
    typeText.setText(Messages.getString(""String_Node_Str"",metadataTable.getTableType()));
  }
 else {
    typeText.setText(Messages.getString(""String_Node_Str""));
  }
  String sourceName=metadataTable.getName();
  tableCombo.setText(sourceName);
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}","/** 
 * DOC ocarbone Comment method ""initMetadataForm"".
 */
private void initMetadataForm(){
  metadataEditor.setMetadataTable(metadataTable);
  IPreferenceStore store=RepositoryManager.getPreferenceStore();
  Boolean flag=store.getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  removeDoubleQuotes(metadataEditor.getMetadataColumnList());
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  nameText.setText(metadataTable.getName());
  commentText.setText(metadataTable.getComment());
  if (metadataTable.getTableType() != null) {
    typeText.setText(Messages.getString(""String_Node_Str"",metadataTable.getTableType()));
  }
 else {
    typeText.setText(Messages.getString(""String_Node_Str""));
  }
  String sourceName=metadataTable.getName();
  tableCombo.setText(sourceName);
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}",0.707749766573296
127620,"/** 
 * run a ShadowProcess to determined the Metadata.
 */
protected void runShadowProcess(Boolean flag){
  XmlFileConnection connection2=getConnection();
  String tempXmlFilePath=getContextXmlPath(connection2);
  if (tempXmlFilePath == null ? XmlUtil.isXSDFile(connection2.getXmlFilePath()) : XmlUtil.isXSDFile(connection2.getXmlFilePath()) || XmlUtil.isXSDFile(tempXmlFilePath)) {
    refreshMetaDataTable(null,((XmlXPathLoopDescriptor)connection2.getSchema().get(0)).getSchemaTargets(),flag);
    checkFieldsValue();
    return;
  }
  try {
    informationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    CsvArray csvArray=ShadowProcessHelper.getCsvArray(getProcessDescription(false),""String_Node_Str"");
    if (csvArray == null) {
      informationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    }
 else {
      refreshMetaDataTable(csvArray,((XmlXPathLoopDescriptor)connection2.getSchema().get(0)).getSchemaTargets(),flag);
    }
  }
 catch (  CoreException e) {
    if (getParent().getChildren().length == 1) {
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str""),e.getMessage());
    }
 else {
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),e.getMessage());
    }
    log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
  }
  checkFieldsValue();
}","/** 
 * run a ShadowProcess to determined the Metadata.
 */
protected void runShadowProcess(Boolean flag){
  XmlFileConnection connection2=getConnection();
  String tempXmlFilePath=getContextXmlPath(connection2);
  if (tempXmlFilePath == null ? XmlUtil.isXSDFile(connection2.getXmlFilePath()) : XmlUtil.isXSDFile(connection2.getXmlFilePath()) || XmlUtil.isXSDFile(tempXmlFilePath)) {
    refreshMetaDataTable(null,connection2.getSchema().get(0).getSchemaTargets(),flag);
    checkFieldsValue();
    return;
  }
  try {
    informationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    CsvArray csvArray=ShadowProcessHelper.getCsvArray(getProcessDescription(false),""String_Node_Str"");
    if (csvArray == null) {
      informationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    }
 else {
      refreshMetaDataTable(csvArray,connection2.getSchema().get(0).getSchemaTargets(),flag);
    }
  }
 catch (  CoreException e) {
    if (getParent().getChildren().length == 1) {
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str""),e.getMessage());
    }
 else {
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),e.getMessage());
    }
    log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
  }
  checkFieldsValue();
}",0.9822282980177716
127621,"public void handleEvent(ListenableListEvent event){
  checkFieldsValue();
}","@Override public void handleEvent(ListenableListEvent event){
  checkFieldsValue();
}",0.9375
127622,"/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  metadataNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      MetadataToolHelper.validateSchema(metadataNameText.getText());
      metadataTable.setLabel(metadataNameText.getText());
      checkFieldsValue();
    }
  }
);
  metadataNameText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      MetadataToolHelper.checkSchema(getShell(),e);
    }
  }
);
  metadataCommentText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      metadataTable.setComment(metadataCommentText.getText());
    }
  }
);
  tableEditorView.getMetadataEditor().addAfterOperationListListener(new IListenableListListener(){
    public void handleEvent(    ListenableListEvent event){
      checkFieldsValue();
    }
  }
);
}","/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  metadataNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      MetadataToolHelper.validateSchema(metadataNameText.getText());
      metadataTable.setLabel(metadataNameText.getText());
      checkFieldsValue();
    }
  }
);
  metadataNameText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      MetadataToolHelper.checkSchema(getShell(),e);
    }
  }
);
  metadataCommentText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      metadataTable.setComment(metadataCommentText.getText());
    }
  }
);
  tableEditorView.getMetadataEditor().addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      checkFieldsValue();
    }
  }
);
}",0.9840085287846482
127623,"public void modifyText(final ModifyEvent e){
  metadataTable.setComment(metadataCommentText.getText());
}","@Override public void modifyText(final ModifyEvent e){
  metadataTable.setComment(metadataCommentText.getText());
}",0.9545454545454546
127624,"private void prepareColumnsFromXSD(String file,List<MetadataColumn> columns,List<SchemaTarget> schemaTarget){
  Composite composite=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
  composite.setVisible(false);
  TreePopulator treePopulator=new TreePopulator(new Tree(composite,SWT.None));
  XSDSchema xsdSchema=null;
  ATreeNode treeRootNode=null;
  if (getPage() == null) {
    try {
      xsdSchema=getXSDSchema(file);
      List<ATreeNode> rootNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
      if (rootNodes.size() > 0) {
        treeRootNode=getDefaultRootNode(rootNodes);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
 else {
    XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
    xsdSchema=updateXSDSchema(file);
    treeRootNode=wizard.getTreeRootNode();
  }
  if (treeRootNode == null)   return;
  treePopulator.populateTree(xsdSchema,treeRootNode,null);
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  for (  SchemaTarget schema : schemaTarget) {
    String relativeXpath=schema.getRelativeXPathQuery();
    if (relativeXpath != null && relativeXpath.endsWith(""String_Node_Str"")) {
      relativeXpath=relativeXpath.substring(0,relativeXpath.lastIndexOf(""String_Node_Str""));
    }
    String fullPath=schema.getSchema().getAbsoluteXPathQuery();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
      fullPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fullPath));
    }
    String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
    if (relatedSplitedPaths.length > 1) {
      int pathsToRemove=relatedSplitedPaths.length - 1;
      String[] fullPathSplited=fullPath.split(""String_Node_Str"");
      fullPath=""String_Node_Str"";
      for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
        fullPath+=""String_Node_Str"" + fullPathSplited[i];
      }
      fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
    }
 else {
      fullPath+=""String_Node_Str"" + relativeXpath;
    }
    TreeItem treeItem=treePopulator.getTreeItem(fullPath);
    if (treeItem != null) {
      ATreeNode curNode=(ATreeNode)treeItem.getData();
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(schema.getTagName()));
      if (curNode == null || retriever == null) {
        metadataColumn.setTalendType(MetadataTalendType.getDefaultTalendType());
      }
 else {
        metadataColumn.setTalendType(retriever.getDefaultSelectedTalendType(""String_Node_Str"" + curNode.getOriginalDataType()));
      }
      columns.add(metadataColumn);
    }
  }
}","private void prepareColumnsFromXSD(String file,List<MetadataColumn> columns,List<SchemaTarget> schemaTarget){
  Composite composite=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
  composite.setVisible(false);
  TreePopulator treePopulator=new TreePopulator(new Tree(composite,SWT.None));
  XSDSchema xsdSchema=null;
  ATreeNode treeRootNode=null;
  if (getPage() == null) {
    try {
      xsdSchema=getXSDSchema(file);
      List<ATreeNode> rootNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
      if (rootNodes.size() > 0) {
        treeRootNode=getDefaultRootNode(rootNodes);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
 else {
    XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
    xsdSchema=updateXSDSchema(file);
    treeRootNode=wizard.getTreeRootNode();
  }
  if (treeRootNode == null) {
    return;
  }
  treePopulator.populateTree(xsdSchema,treeRootNode,null);
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  for (  SchemaTarget schema : schemaTarget) {
    String relativeXpath=schema.getRelativeXPathQuery();
    if (relativeXpath != null && relativeXpath.endsWith(""String_Node_Str"")) {
      relativeXpath=relativeXpath.substring(0,relativeXpath.lastIndexOf(""String_Node_Str""));
    }
    String fullPath=schema.getSchema().getAbsoluteXPathQuery();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
      fullPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fullPath));
    }
    String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
    if (relatedSplitedPaths.length > 1) {
      int pathsToRemove=relatedSplitedPaths.length - 1;
      String[] fullPathSplited=fullPath.split(""String_Node_Str"");
      fullPath=""String_Node_Str"";
      for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
        fullPath+=""String_Node_Str"" + fullPathSplited[i];
      }
      fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
    }
 else {
      fullPath+=""String_Node_Str"" + relativeXpath;
    }
    TreeItem treeItem=treePopulator.getTreeItem(fullPath);
    if (treeItem != null) {
      ATreeNode curNode=(ATreeNode)treeItem.getData();
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(schema.getTagName()));
      if (curNode == null || retriever == null) {
        metadataColumn.setTalendType(MetadataTalendType.getDefaultTalendType());
      }
 else {
        String originalDataType=curNode.getOriginalDataType();
        if (originalDataType != null && !originalDataType.startsWith(""String_Node_Str"")) {
          originalDataType=""String_Node_Str"" + originalDataType;
        }
        metadataColumn.setTalendType(retriever.getDefaultSelectedTalendType(originalDataType));
      }
      columns.add(metadataColumn);
    }
  }
}",0.9513749161636486
127625,"protected void editItem(ISelection sel){
  IStructuredSelection selection=(IStructuredSelection)sel;
  String existing=(String)selection.getFirstElement();
  String value=getExistingInputObject(existing);
  if (value != null) {
    int indexOf=list.indexOf(existing);
    list.remove(existing);
    list.add(indexOf,value);
    viewer.refresh();
  }
}","protected void editItem(ISelection sel){
  IStructuredSelection selection=(IStructuredSelection)sel;
  String existing=(String)selection.getFirstElement();
  String value=getExistingInputObject(existing.replace(""String_Node_Str"",""String_Node_Str""));
  if (value != null) {
    int indexOf=list.indexOf(existing);
    list.remove(existing);
    list.add(indexOf,value);
    viewer.refresh();
  }
}",0.9397590361445785
127626,"protected void doLoadDefault(){
  if (viewer != null) {
    list.clear();
    String s=getPreferenceStore().getDefaultString(getPreferenceName());
    if (s != null && !""String_Node_Str"".equals(s)) {
      for (      String tmp : readString(s)) {
        list.add(tmp);
      }
    }
    viewer.setInput(list);
  }
}","@Override protected void doLoadDefault(){
  if (viewer != null) {
    list.clear();
    String s=getPreferenceStore().getDefaultString(getPreferenceName());
    if (s != null && !""String_Node_Str"".equals(s)) {
      for (      String tmp : readString(s)) {
        list.add(tmp);
      }
    }
    viewer.setInput(list);
  }
}",0.9844236760124612
127627,"protected void doFillIntoGrid(Composite parent,int numColumns){
  Control control=getLabelControl(parent);
  GridData gd=new GridData();
  gd.horizontalSpan=numColumns;
  control.setLayoutData(gd);
  viewer=getTableControl(parent);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.verticalAlignment=GridData.FILL;
  gd.horizontalSpan=numColumns - 1;
  gd.grabExcessHorizontalSpace=true;
  viewer.getTable().setLayoutData(gd);
  buttonBox=getButtonBoxControl(parent);
  gd=new GridData();
  gd.verticalAlignment=GridData.BEGINNING;
  buttonBox.setLayoutData(gd);
}","@Override protected void doFillIntoGrid(Composite parent,int numColumns){
  Control control=getLabelControl(parent);
  GridData gd=new GridData();
  gd.horizontalSpan=numColumns;
  control.setLayoutData(gd);
  viewer=getTableControl(parent);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.verticalAlignment=GridData.FILL;
  gd.horizontalSpan=numColumns - 1;
  gd.grabExcessHorizontalSpace=true;
  viewer.getTable().setLayoutData(gd);
  buttonBox=getButtonBoxControl(parent);
  gd=new GridData();
  gd.verticalAlignment=GridData.BEGINNING;
  buttonBox.setLayoutData(gd);
}",0.9912126537785588
127628,"public int getNumberOfControls(){
  return 2;
}","@Override public int getNumberOfControls(){
  return 2;
}",0.903846153846154
127629,"public void widgetSelected(SelectionEvent event){
  Widget widget=event.widget;
  if (widget == addButton) {
    addPressed();
  }
 else   if (widget == removeButton) {
    removePressed();
  }
 else   if (widget == upButton) {
    upPressed();
  }
 else   if (widget == downButton) {
    downPressed();
  }
}","@Override public void widgetSelected(SelectionEvent event){
  Widget widget=event.widget;
  if (widget == addButton) {
    addPressed();
  }
 else   if (widget == removeButton) {
    removePressed();
  }
 else   if (widget == upButton) {
    upPressed();
  }
 else   if (widget == downButton) {
    downPressed();
  }
}",0.9840764331210192
127630,"public void setFocus(){
  if (viewer != null) {
    viewer.getTable().setFocus();
  }
}","@Override public void setFocus(){
  if (viewer != null) {
    viewer.getTable().setFocus();
  }
}",0.9456521739130436
127631,"/** 
 * Creates a selection listener.
 */
public void createSelectionListener(){
  selectionListener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      Widget widget=event.widget;
      if (widget == addButton) {
        addPressed();
      }
 else       if (widget == removeButton) {
        removePressed();
      }
 else       if (widget == upButton) {
        upPressed();
      }
 else       if (widget == downButton) {
        downPressed();
      }
    }
  }
;
}","/** 
 * Creates a selection listener.
 */
public void createSelectionListener(){
  selectionListener=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      Widget widget=event.widget;
      if (widget == addButton) {
        addPressed();
      }
 else       if (widget == removeButton) {
        removePressed();
      }
 else       if (widget == upButton) {
        upPressed();
      }
 else       if (widget == downButton) {
        downPressed();
      }
    }
  }
;
}",0.9902152641878668
127632,"public void setEnabled(boolean enabled,Composite parent){
  super.setEnabled(enabled,parent);
  setControlEnable(getTableControl(parent).getTable(),enabled);
  setControlEnable(addButton,enabled);
  setControlEnable(removeButton,enabled);
  setControlEnable(upButton,enabled);
  setControlEnable(downButton,enabled);
}","@Override public void setEnabled(boolean enabled,Composite parent){
  super.setEnabled(enabled,parent);
  setControlEnable(getTableControl(parent).getTable(),enabled);
  setControlEnable(addButton,enabled);
  setControlEnable(removeButton,enabled);
  setControlEnable(upButton,enabled);
  setControlEnable(downButton,enabled);
}",0.9845201238390092
127633,"protected void doLoad(){
  if (viewer != null) {
    String s=getPreferenceStore().getString(getPreferenceName());
    if (s != null && !""String_Node_Str"".equals(s)) {
      for (      String tmp : readString(s)) {
        list.add(tmp);
      }
    }
    viewer.setInput(list);
  }
}","@Override protected void doLoad(){
  if (viewer != null) {
    String s=getPreferenceStore().getString(getPreferenceName());
    if (s != null && !""String_Node_Str"".equals(s)) {
      for (      String tmp : readString(s)) {
        list.add(tmp);
      }
    }
    viewer.setInput(list);
  }
}",0.9826989619377162
127634,"protected void doStore(){
  String s=writeString(list);
  if (s != null) {
    getPreferenceStore().setValue(getPreferenceName(),s);
  }
}","@Override protected void doStore(){
  String s=writeString(list);
  if (s != null) {
    getPreferenceStore().setValue(getPreferenceName(),s);
  }
}",0.965034965034965
127635,"protected void adjustForNumColumns(int numColumns){
  Control control=getLabelControl();
  ((GridData)control.getLayoutData()).horizontalSpan=numColumns;
  ((GridData)viewer.getTable().getLayoutData()).horizontalSpan=numColumns - 1;
}","@Override protected void adjustForNumColumns(int numColumns){
  Control control=getLabelControl();
  ((GridData)control.getLayoutData()).horizontalSpan=numColumns;
  ((GridData)viewer.getTable().getLayoutData()).horizontalSpan=numColumns - 1;
}",0.9790794979079498
127636,"private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}","private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (dataType == null && xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}",0.9981529368304396
127637,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    if (MetadataConnectionUtils.isMysql(dbJDBCMetadata)) {
      tablePattern=""String_Node_Str"" + tablePattern + ""String_Node_Str"";
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns;
    if (MetadataConnectionUtils.isMysql(dbJDBCMetadata)) {
      columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,""String_Node_Str"" + tablePattern + ""String_Node_Str"",columnPattern);
    }
 else {
      columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    }
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9774372073222648
127638,"protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  String tablePattern=tableName;
  try {
    if (MetadataConnectionUtils.isMysql(dbMetaData)) {
      tablePattern=""String_Node_Str"" + tablePattern + ""String_Node_Str"";
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tablePattern);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tablePattern);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tablePattern);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}","protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  String tablePattern=tableName;
  try {
    if (MetadataConnectionUtils.isMysql(dbMetaData)) {
      tablePattern=""String_Node_Str"" + tablePattern + ""String_Node_Str"";
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tablePattern);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}",0.9910596026490066
127639,"public static int getJavaTypeBySqlType(String sqlType){
  if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.DATE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.BIGINT;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.INTEGER;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.SMALLINT;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.FLOAT;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.CHAR;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.VARCHAR;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.DECIMAL;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.TIME;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.TIMESTAMP;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.BLOB;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.CLOB;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.DISTINCT;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.DOUBLE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.LONGVARCHAR;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.REAL;
  }
  return 0;
}","public static int getJavaTypeBySqlType(String sqlType){
  if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.DATE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.BIGINT;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.INTEGER;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.SMALLINT;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.FLOAT;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.CHAR;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.VARCHAR;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.DECIMAL;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.TIME;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.TIMESTAMP;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.TIMESTAMP;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.BLOB;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.CLOB;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.DISTINCT;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.DOUBLE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.LONGVARCHAR;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.LONGVARCHAR;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(sqlType.trim())) {
    return Types.REAL;
  }
  return 0;
}",0.941211401425178
127640,"protected void editItem(ISelection sel){
  IStructuredSelection selection=(IStructuredSelection)sel;
  String existing=(String)selection.getFirstElement();
  String value=getExistingInputObject(existing);
  if (value != null) {
    int indexOf=list.indexOf(existing);
    list.remove(existing);
    list.add(indexOf,value);
    viewer.refresh();
  }
}","protected void editItem(ISelection sel){
  IStructuredSelection selection=(IStructuredSelection)sel;
  String existing=(String)selection.getFirstElement();
  String value=getExistingInputObject(existing.replace(""String_Node_Str"",""String_Node_Str""));
  if (value != null) {
    int indexOf=list.indexOf(existing);
    list.remove(existing);
    list.add(indexOf,value);
    viewer.refresh();
  }
}",0.9397590361445785
127641,"public static String addQuotesWithSpaceField(String fieldName,String dbType){
  if (fieldName == null) {
    fieldName=""String_Node_Str"";
  }
  if (fieldName.startsWith(""String_Node_Str"") && fieldName.endsWith(""String_Node_Str"")) {
    return fieldName;
  }
  boolean b=true;
  for (int i=0; i < fieldName.length(); i++) {
    char c=fieldName.charAt(i);
    b=b && c >= '0' && c <= '9';
  }
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  if (name.equals(EDatabaseTypeName.MYSQL) && fieldName.contains(JAVA_END_STRING)) {
    String newFieldName=TalendQuoteUtils.addQuotes(fieldName);
    return newFieldName;
  }
  boolean isCheck=!CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  if (!b) {
    if (isCheck && isPSQLSimilar(name)) {
      return fieldName;
    }
  }
  String newFieldName=fieldName;
  String quote=getQuoteByDBType(name);
  if (!newFieldName.contains(quote)) {
    newFieldName=addQuotes(newFieldName,quote);
  }
  return newFieldName;
}","public static String addQuotesWithSpaceField(String fieldName,String dbType){
  if (fieldName == null) {
    fieldName=""String_Node_Str"";
  }
  if (fieldName.startsWith(""String_Node_Str"") && fieldName.endsWith(""String_Node_Str"")) {
    return fieldName;
  }
  boolean b=true;
  for (int i=0; i < fieldName.length(); i++) {
    char c=fieldName.charAt(i);
    b=b && c >= '0' && c <= '9';
  }
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  if (name.equals(EDatabaseTypeName.MYSQL) && fieldName.contains(JAVA_END_STRING)) {
    String newFieldName=""String_Node_Str"" + fieldName + ""String_Node_Str"";
    return newFieldName;
  }
  boolean isCheck=!CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  if (!b) {
    if (isCheck && isPSQLSimilar(name)) {
      return fieldName;
    }
  }
  String newFieldName=fieldName;
  String quote=getQuoteByDBType(name);
  if (!newFieldName.contains(quote)) {
    newFieldName=addQuotes(newFieldName,quote);
  }
  return newFieldName;
}",0.9584942084942084
127642,"protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}","protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  String tablePattern=tableName;
  try {
    if (MetadataConnectionUtils.isMysql(dbMetaData)) {
      tablePattern=""String_Node_Str"" + tablePattern + ""String_Node_Str"";
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tablePattern);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tablePattern);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tablePattern);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}",0.9566750629722922
127643,"/** 
 * DOC ocarbone Comment method ""initMetadataForm"".
 */
private void initMetadataForm(){
  metadataEditor.setMetadataTable(metadataTable);
  IPreferenceStore store=RepositoryManager.getPreferenceStore();
  Boolean flag=store.getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  removeDoubleQuotes(metadataEditor.getMetadataColumnList());
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  String label=MetadataToolHelper.validateValue(metadataTable.getLabel());
  if (getConnection().getDbVersionString() != null && getConnection().getDbVersionString().equals(EDatabaseVersion4Drivers.MYSQL_5.name()) && metadataTable.getName().contains(""String_Node_Str"")) {
    label=metadataTable.getName();
  }
  nameText.setText(label);
  commentText.setText(metadataTable.getComment());
  if (metadataTable.getTableType() != null) {
    typeText.setText(Messages.getString(""String_Node_Str"",metadataTable.getTableType()));
  }
 else {
    typeText.setText(Messages.getString(""String_Node_Str""));
  }
  String sourceName=metadataTable.getName();
  tableCombo.setText(sourceName);
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}","/** 
 * DOC ocarbone Comment method ""initMetadataForm"".
 */
private void initMetadataForm(){
  metadataEditor.setMetadataTable(metadataTable);
  IPreferenceStore store=RepositoryManager.getPreferenceStore();
  Boolean flag=store.getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  removeDoubleQuotes(metadataEditor.getMetadataColumnList());
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  nameText.setText(metadataTable.getName());
  commentText.setText(metadataTable.getComment());
  if (metadataTable.getTableType() != null) {
    typeText.setText(Messages.getString(""String_Node_Str"",metadataTable.getTableType()));
  }
 else {
    typeText.setText(Messages.getString(""String_Node_Str""));
  }
  String sourceName=metadataTable.getName();
  tableCombo.setText(sourceName);
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}",0.707749766573296
127644,"private void updateXmlTreeViewer(List<MetadataColumn> metaColumns){
  List<String> cloumnNames=new ArrayList<String>();
  for (  MetadataColumn column : metaColumns) {
    cloumnNames.add(column.getName());
  }
  LinksManager<Item,Object,Tree,Object> linkManager=linker.getLinkManager();
  List<LinkDescriptor<Item,Object,Tree,Object>> links=linkManager.getLinks();
  for (int i=0; i < links.size(); i++) {
    LinkDescriptor<Item,Object,Tree,Object> linkDescriptor=links.get(i);
    IExtremityLink<Item,Object> ex1=linkDescriptor.getExtremity1();
    IExtremityLink<Tree,Object> ex2=linkDescriptor.getExtremity2();
    MetadataColumn metaColumn=(MetadataColumn)ex1.getDataItem();
    FOXTreeNode node=(FOXTreeNode)ex2.getDataItem();
    if (!cloumnNames.contains(metaColumn.getName())) {
      node.setColumn(null);
    }
    node.setDataType(metaColumn.getTalendType());
  }
  xmlViewer.refresh();
  updateConnection();
}","private void updateXmlTreeViewer(List<MetadataColumn> metaColumns){
  List<String> cloumnNames=new ArrayList<String>();
  for (  MetadataColumn column : metaColumns) {
    cloumnNames.add(column.getName());
  }
  LinksManager<Item,Object,Tree,Object> linkManager=linker.getLinkManager();
  List<LinkDescriptor<Item,Object,Tree,Object>> links=linkManager.getLinks();
  for (int i=0; i < links.size(); i++) {
    LinkDescriptor<Item,Object,Tree,Object> linkDescriptor=links.get(i);
    IExtremityLink<Item,Object> ex1=linkDescriptor.getExtremity1();
    IExtremityLink<Tree,Object> ex2=linkDescriptor.getExtremity2();
    MetadataColumn metaColumn=(MetadataColumn)ex1.getDataItem();
    FOXTreeNode node=(FOXTreeNode)ex2.getDataItem();
    if (!cloumnNames.contains(metaColumn.getName())) {
      node.setColumn(null);
    }
 else {
      node.setColumn(ConvertionHelper.convertToIMetaDataColumn(metaColumn));
    }
    node.setDataType(metaColumn.getTalendType());
  }
  xmlViewer.refresh();
  updateConnection();
}",0.953020134228188
127645,"private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    if (particleToTreeNode.containsKey(xsdElementDeclarationParticle)) {
      ATreeNode originalTreeNode=particleToTreeNode.get(xsdElementDeclarationParticle);
      ATreeNode partNode=new ATreeNode();
      partNode.setCurrentNamespace(originalTreeNode.getCurrentNamespace());
      partNode.setValue(originalTreeNode.getValue());
      partNode.setType(ATreeNode.ELEMENT_TYPE);
      partNode.setDataType(originalTreeNode.getDataType());
      partNode.addChild(originalTreeNode.getChildren());
      parentNode.addChild(partNode);
      return;
    }
    ATreeNode partNode=new ATreeNode();
    particleToTreeNode.put(xsdElementDeclarationParticle,partNode);
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}","private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    if (particleToTreeNode.containsKey(xsdElementDeclarationParticle)) {
      ATreeNode originalTreeNode=particleToTreeNode.get(xsdElementDeclarationParticle);
      ATreeNode partNode=new ATreeNode();
      partNode.setCurrentNamespace(originalTreeNode.getCurrentNamespace());
      partNode.setValue(originalTreeNode.getValue());
      partNode.setType(ATreeNode.ELEMENT_TYPE);
      partNode.setDataType(originalTreeNode.getDataType());
      partNode.addChild(originalTreeNode.getChildren());
      parentNode.addChild(partNode);
      return;
    }
    ATreeNode partNode=new ATreeNode();
    particleToTreeNode.put(xsdElementDeclarationParticle,partNode);
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (dataType == null && !""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}",0.9983435481199272
127646,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    if (MetadataConnectionUtils.isMysql(dbJDBCMetadata)) {
      tablePattern=""String_Node_Str"" + tablePattern + ""String_Node_Str"";
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns;
    if (MetadataConnectionUtils.isMysql(dbJDBCMetadata)) {
      columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,""String_Node_Str"" + tablePattern + ""String_Node_Str"",columnPattern);
    }
 else {
      columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    }
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9774372073222648
127647,"protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  String tablePattern=tableName;
  try {
    if (MetadataConnectionUtils.isMysql(dbMetaData)) {
      tablePattern=""String_Node_Str"" + tablePattern + ""String_Node_Str"";
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tablePattern);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tablePattern);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tablePattern);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}","protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  String tablePattern=tableName;
  try {
    if (MetadataConnectionUtils.isMysql(dbMetaData)) {
      tablePattern=""String_Node_Str"" + tablePattern + ""String_Node_Str"";
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tablePattern);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}",0.9910596026490066
127648,"@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  boolean valid=false;
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      valid=true;
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new Runnable(){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
      }
    }
  }
  return valid;
}","@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  boolean visitChildren=false;
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      visitChildren=false;
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new Runnable(){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
      }
    }
  }
  return visitChildren;
}",0.966686856450636
127649,"private void updateXmlTreeViewer(){
  LinksManager<Item,Object,Tree,Object> linkManager=linker.getLinkManager();
  List<LinkDescriptor<Item,Object,Tree,Object>> links=linkManager.getLinks();
  for (int i=0; i < links.size(); i++) {
    LinkDescriptor<Item,Object,Tree,Object> linkDescriptor=links.get(i);
    IExtremityLink<Item,Object> ex1=linkDescriptor.getExtremity1();
    IExtremityLink<Tree,Object> ex2=linkDescriptor.getExtremity2();
    MetadataColumn metaColumn=(MetadataColumn)ex1.getDataItem();
    FOXTreeNode node=(FOXTreeNode)ex2.getDataItem();
    if (ex1.getGraphicalObject() != null) {
      Item item=ex1.getGraphicalObject();
      if (!item.isDisposed() && metaColumn.equals(item.getData())) {
        node.setColumn(ConvertionHelper.convertToIMetaDataColumn(metaColumn));
      }
 else {
        node.setColumn(null);
      }
    }
    node.setDataType(metaColumn.getTalendType());
  }
  xmlViewer.refresh();
  updateConnection();
}","private void updateXmlTreeViewer(List<MetadataColumn> metaColumns){
  List<String> cloumnNames=new ArrayList<String>();
  for (  MetadataColumn column : metaColumns) {
    cloumnNames.add(column.getName());
  }
  LinksManager<Item,Object,Tree,Object> linkManager=linker.getLinkManager();
  List<LinkDescriptor<Item,Object,Tree,Object>> links=linkManager.getLinks();
  for (int i=0; i < links.size(); i++) {
    LinkDescriptor<Item,Object,Tree,Object> linkDescriptor=links.get(i);
    IExtremityLink<Item,Object> ex1=linkDescriptor.getExtremity1();
    IExtremityLink<Tree,Object> ex2=linkDescriptor.getExtremity2();
    MetadataColumn metaColumn=(MetadataColumn)ex1.getDataItem();
    FOXTreeNode node=(FOXTreeNode)ex2.getDataItem();
    if (!cloumnNames.contains(metaColumn.getName())) {
      node.setColumn(null);
    }
    node.setDataType(metaColumn.getTalendType());
  }
  xmlViewer.refresh();
  updateConnection();
}",0.7302771855010661
127650,"@Override public void widgetSelected(SelectionEvent e){
  XmlFileSchemaDialog dialog=new XmlFileSchemaDialog(mainSashFormComposite.getShell(),XmlFileOutputStep2Form.this);
  if (dialog != null && dialog.open() == XmlFileSchemaDialog.OK) {
    MetadataTable metadataTable=dialog.getMetadataTable();
    EList columns=metadataTable.getColumns();
    List<MetadataColumn> inputList=new ArrayList<MetadataColumn>();
    for (int i=0; i < columns.size(); i++) {
      MetadataColumn column=(MetadataColumn)columns.get(i);
      inputList.add(column);
    }
    schemaViewer.setInput(inputList);
    schemaViewer.refresh();
    EList columnList=ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0].getColumns();
    columnList.clear();
    columnList.addAll(inputList);
    updateXmlTreeViewer();
    redrawLinkers();
    checkFieldsValue();
  }
}","@Override public void widgetSelected(SelectionEvent e){
  XmlFileSchemaDialog dialog=new XmlFileSchemaDialog(mainSashFormComposite.getShell(),XmlFileOutputStep2Form.this);
  if (dialog != null && dialog.open() == XmlFileSchemaDialog.OK) {
    MetadataTable metadataTable=dialog.getMetadataTable();
    EList columns=metadataTable.getColumns();
    List<MetadataColumn> inputList=new ArrayList<MetadataColumn>();
    for (int i=0; i < columns.size(); i++) {
      MetadataColumn column=(MetadataColumn)columns.get(i);
      inputList.add(column);
    }
    schemaViewer.setInput(inputList);
    schemaViewer.refresh();
    EList columnList=ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0].getColumns();
    columnList.clear();
    columnList.addAll(inputList);
    updateXmlTreeViewer(inputList);
    redrawLinkers();
    checkFieldsValue();
  }
}",0.9948246118458884
127651,"@Override protected void addUtilsButtonListeners(){
  schemaButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      XmlFileSchemaDialog dialog=new XmlFileSchemaDialog(mainSashFormComposite.getShell(),XmlFileOutputStep2Form.this);
      if (dialog != null && dialog.open() == XmlFileSchemaDialog.OK) {
        MetadataTable metadataTable=dialog.getMetadataTable();
        EList columns=metadataTable.getColumns();
        List<MetadataColumn> inputList=new ArrayList<MetadataColumn>();
        for (int i=0; i < columns.size(); i++) {
          MetadataColumn column=(MetadataColumn)columns.get(i);
          inputList.add(column);
        }
        schemaViewer.setInput(inputList);
        schemaViewer.refresh();
        EList columnList=ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0].getColumns();
        columnList.clear();
        columnList.addAll(inputList);
        updateXmlTreeViewer();
        redrawLinkers();
        checkFieldsValue();
      }
    }
  }
);
}","@Override protected void addUtilsButtonListeners(){
  schemaButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      XmlFileSchemaDialog dialog=new XmlFileSchemaDialog(mainSashFormComposite.getShell(),XmlFileOutputStep2Form.this);
      if (dialog != null && dialog.open() == XmlFileSchemaDialog.OK) {
        MetadataTable metadataTable=dialog.getMetadataTable();
        EList columns=metadataTable.getColumns();
        List<MetadataColumn> inputList=new ArrayList<MetadataColumn>();
        for (int i=0; i < columns.size(); i++) {
          MetadataColumn column=(MetadataColumn)columns.get(i);
          inputList.add(column);
        }
        schemaViewer.setInput(inputList);
        schemaViewer.refresh();
        EList columnList=ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0].getColumns();
        columnList.clear();
        columnList.addAll(inputList);
        updateXmlTreeViewer(inputList);
        redrawLinkers();
        checkFieldsValue();
      }
    }
  }
);
}",0.9958120055839924
127652,"/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
public void init(final IWorkbench workbench,final IStructuredSelection selection2){
  this.selection=selection2;
}","/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
@Override public void init(final IWorkbench workbench,final IStructuredSelection selection2){
  this.selection=selection2;
}",0.9819494584837544
127653,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
  }
 catch (  CoreException e) {
    throw new InvocationTargetException(e);
  }
}","@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
  }
 catch (  CoreException e) {
    throw new InvocationTargetException(e);
  }
}",0.9866666666666668
127654,"/** 
 * clone a new DB connection
 */
private void cloneBaseConnection(SalesforceSchemaConnection connection){
  temConnection=(SalesforceSchemaConnection)EcoreUtil.copy(connection);
  EList<Package> dataPackage=connection.getDataPackage();
  Collection<Package> newDataPackage=EcoreUtil.copyAll(dataPackage);
  ConnectionHelper.addPackages(newDataPackage,temConnection);
}","/** 
 * clone a new DB connection
 */
private void cloneBaseConnection(SalesforceSchemaConnection connection){
  temConnection=EcoreUtil.copy(connection);
  EList<Package> dataPackage=connection.getDataPackage();
  Collection<Package> newDataPackage=EcoreUtil.copyAll(dataPackage);
  ConnectionHelper.addPackages(newDataPackage,temConnection);
}",0.9610027855153204
127655,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  formIsPerformed=true;
  connectionItem.setConnection((SalesforceSchemaConnection)EcoreUtil.copy(temConnection));
  if (formIsPerformed) {
    RepositoryUpdateManager.updateFileConnection(connectionItem);
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    final IWorkspaceRunnable op=new IWorkspaceRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
        try {
          factory.save(connectionItem);
          closeLockStrategy();
          ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        Exception e) {
          String detailError=e.toString();
          log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
        }
      }
    }
;
    IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
        }
 catch (        CoreException e) {
          throw new InvocationTargetException(e);
        }
      }
    }
;
    try {
      new ProgressMonitorDialog(getShell()).run(true,false,iRunnableWithProgress);
    }
 catch (    InvocationTargetException e) {
    }
catch (    InterruptedException e) {
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  formIsPerformed=true;
  connectionItem.setConnection(EcoreUtil.copy(temConnection));
  if (formIsPerformed) {
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    final IWorkspaceRunnable op=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        try {
          factory.save(connectionItem);
          closeLockStrategy();
          ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        Exception e) {
          String detailError=e.toString();
          log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
        }
      }
    }
;
    IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
        }
 catch (        CoreException e) {
          throw new InvocationTargetException(e);
        }
      }
    }
;
    try {
      new ProgressMonitorDialog(getShell()).run(true,false,iRunnableWithProgress);
    }
 catch (    InvocationTargetException e) {
    }
catch (    InterruptedException e) {
    }
    return true;
  }
 else {
    return false;
  }
}",0.9689034369885434
127656,"@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  boolean valid=false;
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      valid=true;
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new Runnable(){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
      }
    }
  }
  return valid;
}","@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  boolean visitChildren=true;
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      visitChildren=false;
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new Runnable(){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
      }
    }
  }
  return visitChildren;
}",0.9624242424242424
127657,"@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new Runnable(){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
      }
      return false;
    }
 else {
      return true;
    }
  }
  return false;
}","@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  boolean valid=false;
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      valid=true;
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new Runnable(){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
      }
    }
  }
  return valid;
}",0.9181929181929182
127658,"/** 
 * DOC ocarbone Comment method ""initMetadataForm"".
 */
private void initMetadataForm(){
  metadataEditor.setMetadataTable(metadataTable);
  IPreferenceStore store=RepositoryManager.getPreferenceStore();
  Boolean flag=store.getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  removeDoubleQuotes(metadataEditor.getMetadataColumnList());
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  String label=MetadataToolHelper.validateValue(metadataTable.getLabel());
  if (getConnection().getDbVersionString().equals(EDatabaseVersion4Drivers.MYSQL_5.name()) && metadataTable.getName().contains(""String_Node_Str"")) {
    label=metadataTable.getName();
  }
  nameText.setText(label);
  commentText.setText(metadataTable.getComment());
  if (metadataTable.getTableType() != null) {
    typeText.setText(Messages.getString(""String_Node_Str"",metadataTable.getTableType()));
  }
 else {
    typeText.setText(Messages.getString(""String_Node_Str""));
  }
  String sourceName=metadataTable.getName();
  tableCombo.setText(sourceName);
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}","/** 
 * DOC ocarbone Comment method ""initMetadataForm"".
 */
private void initMetadataForm(){
  metadataEditor.setMetadataTable(metadataTable);
  IPreferenceStore store=RepositoryManager.getPreferenceStore();
  Boolean flag=store.getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  removeDoubleQuotes(metadataEditor.getMetadataColumnList());
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  String label=MetadataToolHelper.validateValue(metadataTable.getLabel());
  if (getConnection().getDbVersionString() != null && getConnection().getDbVersionString().equals(EDatabaseVersion4Drivers.MYSQL_5.name()) && metadataTable.getName().contains(""String_Node_Str"")) {
    label=metadataTable.getName();
  }
  nameText.setText(label);
  commentText.setText(metadataTable.getComment());
  if (metadataTable.getTableType() != null) {
    typeText.setText(Messages.getString(""String_Node_Str"",metadataTable.getTableType()));
  }
 else {
    typeText.setText(Messages.getString(""String_Node_Str""));
  }
  String sourceName=metadataTable.getName();
  tableCombo.setText(sourceName);
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}",0.9861191440138808
127659,"@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  boolean valid=false;
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      valid=true;
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new Runnable(){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
      }
    }
  }
  return valid;
}","@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  boolean visitChildren=true;
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      visitChildren=false;
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new Runnable(){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
      }
    }
  }
  return visitChildren;
}",0.9624242424242424
127660,"private void updateXmlTreeViewer(){
  LinksManager<Item,Object,Tree,Object> linkManager=linker.getLinkManager();
  List<LinkDescriptor<Item,Object,Tree,Object>> links=linkManager.getLinks();
  for (int i=0; i < links.size(); i++) {
    LinkDescriptor<Item,Object,Tree,Object> linkDescriptor=links.get(i);
    IExtremityLink<Item,Object> ex1=linkDescriptor.getExtremity1();
    IExtremityLink<Tree,Object> ex2=linkDescriptor.getExtremity2();
    MetadataColumn metaColumn=(MetadataColumn)ex1.getDataItem();
    FOXTreeNode node=(FOXTreeNode)ex2.getDataItem();
    if (ex1.getGraphicalObject() != null) {
      Item item=ex1.getGraphicalObject();
      if (!item.isDisposed() && metaColumn.equals(item.getData())) {
        node.setColumn(ConvertionHelper.convertToIMetaDataColumn(metaColumn));
      }
 else {
        node.setColumn(null);
      }
    }
    node.setDataType(metaColumn.getTalendType());
  }
  xmlViewer.refresh();
  updateConnection();
}","private void updateXmlTreeViewer(List<MetadataColumn> metaColumns){
  List<String> cloumnNames=new ArrayList<String>();
  for (  MetadataColumn column : metaColumns) {
    cloumnNames.add(column.getName());
  }
  LinksManager<Item,Object,Tree,Object> linkManager=linker.getLinkManager();
  List<LinkDescriptor<Item,Object,Tree,Object>> links=linkManager.getLinks();
  for (int i=0; i < links.size(); i++) {
    LinkDescriptor<Item,Object,Tree,Object> linkDescriptor=links.get(i);
    IExtremityLink<Item,Object> ex1=linkDescriptor.getExtremity1();
    IExtremityLink<Tree,Object> ex2=linkDescriptor.getExtremity2();
    MetadataColumn metaColumn=(MetadataColumn)ex1.getDataItem();
    FOXTreeNode node=(FOXTreeNode)ex2.getDataItem();
    if (!cloumnNames.contains(metaColumn.getName())) {
      node.setColumn(null);
    }
    node.setDataType(metaColumn.getTalendType());
  }
  xmlViewer.refresh();
  updateConnection();
}",0.7302771855010661
127661,"@Override public void widgetSelected(SelectionEvent e){
  XmlFileSchemaDialog dialog=new XmlFileSchemaDialog(mainSashFormComposite.getShell(),XmlFileOutputStep2Form.this);
  if (dialog != null && dialog.open() == XmlFileSchemaDialog.OK) {
    MetadataTable metadataTable=dialog.getMetadataTable();
    EList columns=metadataTable.getColumns();
    List<MetadataColumn> inputList=new ArrayList<MetadataColumn>();
    for (int i=0; i < columns.size(); i++) {
      MetadataColumn column=(MetadataColumn)columns.get(i);
      inputList.add(column);
    }
    schemaViewer.setInput(inputList);
    schemaViewer.refresh();
    EList columnList=ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0].getColumns();
    columnList.clear();
    columnList.addAll(inputList);
    updateXmlTreeViewer();
    redrawLinkers();
    checkFieldsValue();
  }
}","@Override public void widgetSelected(SelectionEvent e){
  XmlFileSchemaDialog dialog=new XmlFileSchemaDialog(mainSashFormComposite.getShell(),XmlFileOutputStep2Form.this);
  if (dialog != null && dialog.open() == XmlFileSchemaDialog.OK) {
    MetadataTable metadataTable=dialog.getMetadataTable();
    EList columns=metadataTable.getColumns();
    List<MetadataColumn> inputList=new ArrayList<MetadataColumn>();
    for (int i=0; i < columns.size(); i++) {
      MetadataColumn column=(MetadataColumn)columns.get(i);
      inputList.add(column);
    }
    schemaViewer.setInput(inputList);
    schemaViewer.refresh();
    EList columnList=ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0].getColumns();
    columnList.clear();
    columnList.addAll(inputList);
    updateXmlTreeViewer(inputList);
    redrawLinkers();
    checkFieldsValue();
  }
}",0.9948246118458884
127662,"@Override protected void addUtilsButtonListeners(){
  schemaButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      XmlFileSchemaDialog dialog=new XmlFileSchemaDialog(mainSashFormComposite.getShell(),XmlFileOutputStep2Form.this);
      if (dialog != null && dialog.open() == XmlFileSchemaDialog.OK) {
        MetadataTable metadataTable=dialog.getMetadataTable();
        EList columns=metadataTable.getColumns();
        List<MetadataColumn> inputList=new ArrayList<MetadataColumn>();
        for (int i=0; i < columns.size(); i++) {
          MetadataColumn column=(MetadataColumn)columns.get(i);
          inputList.add(column);
        }
        schemaViewer.setInput(inputList);
        schemaViewer.refresh();
        EList columnList=ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0].getColumns();
        columnList.clear();
        columnList.addAll(inputList);
        updateXmlTreeViewer();
        redrawLinkers();
        checkFieldsValue();
      }
    }
  }
);
}","@Override protected void addUtilsButtonListeners(){
  schemaButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      XmlFileSchemaDialog dialog=new XmlFileSchemaDialog(mainSashFormComposite.getShell(),XmlFileOutputStep2Form.this);
      if (dialog != null && dialog.open() == XmlFileSchemaDialog.OK) {
        MetadataTable metadataTable=dialog.getMetadataTable();
        EList columns=metadataTable.getColumns();
        List<MetadataColumn> inputList=new ArrayList<MetadataColumn>();
        for (int i=0; i < columns.size(); i++) {
          MetadataColumn column=(MetadataColumn)columns.get(i);
          inputList.add(column);
        }
        schemaViewer.setInput(inputList);
        schemaViewer.refresh();
        EList columnList=ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0].getColumns();
        columnList.clear();
        columnList.addAll(inputList);
        updateXmlTreeViewer(inputList);
        redrawLinkers();
        checkFieldsValue();
      }
    }
  }
);
}",0.9958120055839924
127663,"@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new Runnable(){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
      }
      return false;
    }
 else {
      return true;
    }
  }
  return false;
}","@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  boolean valid=false;
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      valid=true;
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new Runnable(){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
      }
    }
  }
  return valid;
}",0.9181929181929182
127664,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public void setLabel(String newLabel){
  String oldLabel=label;
  label=newLabel;
  if (!StringUtils.isEmpty(newLabel)) {
    setName(newLabel);
  }
  if (eNotificationRequired()) {
    eNotify(new ENotificationImpl(this,Notification.SET,ConnectionPackage.ABSTRACT_METADATA_OBJECT__LABEL,oldLabel,label));
  }
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public void setLabel(String newLabel){
  String oldLabel=label;
  label=newLabel;
  String COLUMN_NAME_PATTERN=""String_Node_Str"";
  if (!StringUtils.isEmpty(newLabel) && name != null ? Pattern.matches(COLUMN_NAME_PATTERN,name) : true) {
    setName(newLabel);
  }
  if (eNotificationRequired()) {
    eNotify(new ENotificationImpl(this,Notification.SET,ConnectionPackage.ABSTRACT_METADATA_OBJECT__LABEL,oldLabel,label));
  }
}",0.8706411698537683
127665,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  formIsPerformed=true;
  connectionItem.setConnection((SalesforceSchemaConnection)EcoreUtil.copy(temConnection));
  if (formIsPerformed) {
    RepositoryUpdateManager.updateFileConnection(connectionItem);
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    final IWorkspaceRunnable op=new IWorkspaceRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
        try {
          factory.save(connectionItem);
          closeLockStrategy();
          ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        Exception e) {
          String detailError=e.toString();
          log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
        }
      }
    }
;
    IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
        }
 catch (        CoreException e) {
          throw new InvocationTargetException(e);
        }
      }
    }
;
    try {
      new ProgressMonitorDialog(getShell()).run(true,false,iRunnableWithProgress);
    }
 catch (    InvocationTargetException e) {
    }
catch (    InterruptedException e) {
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  formIsPerformed=true;
  connectionItem.setConnection((SalesforceSchemaConnection)EcoreUtil.copy(temConnection));
  if (formIsPerformed) {
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    final IWorkspaceRunnable op=new IWorkspaceRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
        try {
          factory.save(connectionItem);
          closeLockStrategy();
          ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        Exception e) {
          String detailError=e.toString();
          log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
        }
      }
    }
;
    IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
        }
 catch (        CoreException e) {
          throw new InvocationTargetException(e);
        }
      }
    }
;
    try {
      new ProgressMonitorDialog(getShell()).run(true,false,iRunnableWithProgress);
    }
 catch (    InvocationTargetException e) {
    }
catch (    InterruptedException e) {
    }
    return true;
  }
 else {
    return false;
  }
}",0.9820359281437124
127666,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  formIsPerformed=true;
  connectionItem.setConnection((SalesforceSchemaConnection)EcoreUtil.copy(temConnection));
  if (formIsPerformed) {
    RepositoryUpdateManager.updateFileConnection(connectionItem);
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    final IWorkspaceRunnable op=new IWorkspaceRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
        try {
          factory.save(connectionItem);
          closeLockStrategy();
          ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        Exception e) {
          String detailError=e.toString();
          log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
        }
      }
    }
;
    IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
        }
 catch (        CoreException e) {
          throw new InvocationTargetException(e);
        }
      }
    }
;
    try {
      new ProgressMonitorDialog(getShell()).run(true,false,iRunnableWithProgress);
    }
 catch (    InvocationTargetException e) {
    }
catch (    InterruptedException e) {
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  formIsPerformed=true;
  connectionItem.setConnection((SalesforceSchemaConnection)EcoreUtil.copy(temConnection));
  if (formIsPerformed) {
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    final IWorkspaceRunnable op=new IWorkspaceRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
        try {
          factory.save(connectionItem);
          closeLockStrategy();
          ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        Exception e) {
          String detailError=e.toString();
          log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
        }
      }
    }
;
    IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
        }
 catch (        CoreException e) {
          throw new InvocationTargetException(e);
        }
      }
    }
;
    try {
      new ProgressMonitorDialog(getShell()).run(true,false,iRunnableWithProgress);
    }
 catch (    InvocationTargetException e) {
    }
catch (    InterruptedException e) {
    }
    return true;
  }
 else {
    return false;
  }
}",0.9820359281437124
127667,"private void updateXmlTreeViewer(List<MetadataColumn> metaColumns){
  List<String> cloumnNames=new ArrayList<String>();
  for (  MetadataColumn column : metaColumns) {
    cloumnNames.add(column.getName());
  }
  LinksManager<Item,Object,Tree,Object> linkManager=linker.getLinkManager();
  List<LinkDescriptor<Item,Object,Tree,Object>> links=linkManager.getLinks();
  for (int i=0; i < links.size(); i++) {
    LinkDescriptor<Item,Object,Tree,Object> linkDescriptor=links.get(i);
    IExtremityLink<Item,Object> ex1=linkDescriptor.getExtremity1();
    IExtremityLink<Tree,Object> ex2=linkDescriptor.getExtremity2();
    MetadataColumn metaColumn=(MetadataColumn)ex1.getDataItem();
    FOXTreeNode node=(FOXTreeNode)ex2.getDataItem();
    if (!cloumnNames.contains(metaColumn.getName())) {
      node.setColumn(null);
    }
    node.setDataType(metaColumn.getTalendType());
  }
  xmlViewer.refresh();
  updateConnection();
}","private void updateXmlTreeViewer(List<MetadataColumn> metaColumns){
  List<String> cloumnNames=new ArrayList<String>();
  for (  MetadataColumn column : metaColumns) {
    cloumnNames.add(column.getName());
  }
  LinksManager<Item,Object,Tree,Object> linkManager=linker.getLinkManager();
  List<LinkDescriptor<Item,Object,Tree,Object>> links=linkManager.getLinks();
  for (int i=0; i < links.size(); i++) {
    LinkDescriptor<Item,Object,Tree,Object> linkDescriptor=links.get(i);
    IExtremityLink<Item,Object> ex1=linkDescriptor.getExtremity1();
    IExtremityLink<Tree,Object> ex2=linkDescriptor.getExtremity2();
    MetadataColumn metaColumn=(MetadataColumn)ex1.getDataItem();
    FOXTreeNode node=(FOXTreeNode)ex2.getDataItem();
    if (!cloumnNames.contains(metaColumn.getName())) {
      node.setColumn(null);
    }
 else {
      node.setColumn(ConvertionHelper.convertToIMetaDataColumn(metaColumn));
    }
    node.setDataType(metaColumn.getTalendType());
  }
  xmlViewer.refresh();
  updateConnection();
}",0.953020134228188
127668,"@Override public IMetadataTable getMetadataTable(String metaName){
  return null;
}","@Override public IMetadataTable getMetadataTable(String metaName){
  for (int i=0; i < metadataList.size(); i++) {
    String tableName=metadataList.get(i).getTableName();
    if (tableName != null && tableName.equals(metaName)) {
      return metadataList.get(i);
    }
  }
  return null;
}",0.374331550802139
127669,"@Override public IExternalData getExternalData(){
  return null;
}","@Override public IExternalData getExternalData(){
  if (externalNode != null) {
    return externalNode.getExternalData();
  }
  return null;
}",0.631578947368421
127670,"@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new Runnable(){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
      }
      return false;
    }
 else {
      return true;
    }
  }
  return false;
}","@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  boolean valid=false;
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      valid=true;
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new Runnable(){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
      }
    }
  }
  return valid;
}",0.9181929181929182
127671,"private void updateXmlTreeViewer(List<MetadataColumn> metaColumns){
  List<String> cloumnNames=new ArrayList<String>();
  for (  MetadataColumn column : metaColumns) {
    cloumnNames.add(column.getName());
  }
  LinksManager<Item,Object,Tree,Object> linkManager=linker.getLinkManager();
  List<LinkDescriptor<Item,Object,Tree,Object>> links=linkManager.getLinks();
  for (int i=0; i < links.size(); i++) {
    LinkDescriptor<Item,Object,Tree,Object> linkDescriptor=links.get(i);
    IExtremityLink<Item,Object> ex1=linkDescriptor.getExtremity1();
    IExtremityLink<Tree,Object> ex2=linkDescriptor.getExtremity2();
    MetadataColumn metaColumn=(MetadataColumn)ex1.getDataItem();
    FOXTreeNode node=(FOXTreeNode)ex2.getDataItem();
    if (!cloumnNames.contains(metaColumn.getName())) {
      node.setColumn(null);
    }
    node.setDataType(metaColumn.getTalendType());
  }
  xmlViewer.refresh();
  updateConnection();
}","private void updateXmlTreeViewer(List<MetadataColumn> metaColumns){
  List<String> cloumnNames=new ArrayList<String>();
  for (  MetadataColumn column : metaColumns) {
    cloumnNames.add(column.getName());
  }
  LinksManager<Item,Object,Tree,Object> linkManager=linker.getLinkManager();
  List<LinkDescriptor<Item,Object,Tree,Object>> links=linkManager.getLinks();
  for (int i=0; i < links.size(); i++) {
    LinkDescriptor<Item,Object,Tree,Object> linkDescriptor=links.get(i);
    IExtremityLink<Item,Object> ex1=linkDescriptor.getExtremity1();
    IExtremityLink<Tree,Object> ex2=linkDescriptor.getExtremity2();
    MetadataColumn metaColumn=(MetadataColumn)ex1.getDataItem();
    FOXTreeNode node=(FOXTreeNode)ex2.getDataItem();
    if (!cloumnNames.contains(metaColumn.getName())) {
      node.setColumn(null);
    }
 else {
      node.setColumn(ConvertionHelper.convertToIMetaDataColumn(metaColumn));
    }
    node.setDataType(metaColumn.getTalendType());
  }
  xmlViewer.refresh();
  updateConnection();
}",0.953020134228188
127672,"private void createOperation(final String newJobName,final RepositoryNode target,CopyObjectAction copyObjectAction,final TreeSelection selectionInClipboard){
  Object currentSource=selectionInClipboard.toArray()[0];
  try {
    final IPath path=RepositoryNodeUtilities.getPath(target);
    if (((RepositoryNode)currentSource).getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
      Item originalItem=((RepositoryNode)currentSource).getObject().getProperty().getItem();
      List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
      for (      IRepositoryViewObject obj : allVersion) {
        if (obj.getVersion().equals(originalItem.getProperty().getVersion())) {
          originalItem=obj.getProperty().getItem();
          break;
        }
      }
      if (allVersion.size() == 1) {
        duplicateSingleVersionItem(originalItem,path,newJobName);
      }
 else       if (allVersion.size() > 1) {
        final PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
        final Item item=originalItem;
        if (dialog.open() == Window.OK) {
          final IWorkspaceRunnable op=new IWorkspaceRunnable(){
            @Override public void run(            IProgressMonitor monitor) throws CoreException {
              Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
              String id=null;
              String label=null;
              boolean isfirst=true;
              boolean needSys=true;
              try {
                for (                IRepositoryViewObject object : selectedVersionItems) {
                  Item selectedItem=object.getProperty().getItem();
                  Item copy;
                  copy=factory.copy(selectedItem,path);
                  if (isfirst) {
                    id=copy.getProperty().getId();
                    label=copy.getProperty().getLabel();
                    isfirst=false;
                  }
                  copy.getProperty().setId(id);
                  copy.getProperty().setLabel(newJobName);
                  copy.getProperty().setDisplayName(newJobName);
                  if (needSys && item instanceof RoutineItem) {
                    String lastestVersion=getLastestVersion(selectedVersionItems);
                    if (lastestVersion.equals(copy.getProperty().getVersion())) {
                      synDuplicatedRoutine((RoutineItem)copy);
                      needSys=false;
                    }
                  }
                  if (copy instanceof ProcessItem) {
                    RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                  }
                  if (copy instanceof ConnectionItem) {
                    Connection connection=((ConnectionItem)copy).getConnection();
                    if (connection != null) {
                      connection.getSupplierDependency().clear();
                      connection.setLabel(newJobName);
                      connection.setName(newJobName);
                    }
                  }
                  factory.save(copy);
                  notifySQLExplorer(copy);
                }
              }
 catch (              PersistenceException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
catch (              BusinessException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
            }
          }
;
          IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
            @Override public void run(            IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
              IWorkspace workspace=ResourcesPlugin.getWorkspace();
              try {
                ISchedulingRule schedulingRule=workspace.getRoot();
                workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
              }
 catch (              CoreException e) {
                throw new InvocationTargetException(e);
              }
            }
          }
;
          try {
            new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
catch (          InterruptedException e) {
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","private void createOperation(final String newJobName,final RepositoryNode target,CopyObjectAction copyObjectAction,final TreeSelection selectionInClipboard){
  Object currentSource=selectionInClipboard.toArray()[0];
  try {
    final IPath path=RepositoryNodeUtilities.getPath(target);
    if (((RepositoryNode)currentSource).getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
      Item originalItem=((RepositoryNode)currentSource).getObject().getProperty().getItem();
      List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
      for (      IRepositoryViewObject obj : allVersion) {
        if (obj.getVersion().equals(originalItem.getProperty().getVersion())) {
          originalItem=obj.getProperty().getItem();
          break;
        }
      }
      if (allVersion.size() == 1) {
        duplicateSingleVersionItem(originalItem,path,newJobName);
      }
 else       if (allVersion.size() > 1) {
        final PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
        final Item item=originalItem;
        if (dialog.open() == Window.OK) {
          final IWorkspaceRunnable op=new IWorkspaceRunnable(){
            @Override public void run(            IProgressMonitor monitor) throws CoreException {
              Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
              String id=null;
              String label=null;
              boolean isfirst=true;
              boolean needSys=true;
              try {
                for (                IRepositoryViewObject object : selectedVersionItems) {
                  Item selectedItem=object.getProperty().getItem();
                  Item copy;
                  copy=factory.copy(selectedItem,path,newJobName);
                  if (isfirst) {
                    id=copy.getProperty().getId();
                    label=copy.getProperty().getLabel();
                    isfirst=false;
                  }
                  copy.getProperty().setId(id);
                  copy.getProperty().setLabel(newJobName);
                  copy.getProperty().setDisplayName(newJobName);
                  if (needSys && item instanceof RoutineItem) {
                    String lastestVersion=getLastestVersion(selectedVersionItems);
                    if (lastestVersion.equals(copy.getProperty().getVersion())) {
                      synDuplicatedRoutine((RoutineItem)copy);
                      needSys=false;
                    }
                  }
                  if (copy instanceof ProcessItem) {
                    RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                  }
                  if (copy instanceof ConnectionItem) {
                    Connection connection=((ConnectionItem)copy).getConnection();
                    if (connection != null) {
                      connection.getSupplierDependency().clear();
                      connection.setLabel(newJobName);
                      connection.setName(newJobName);
                    }
                  }
                  factory.save(copy);
                  notifySQLExplorer(copy);
                }
              }
 catch (              PersistenceException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
catch (              BusinessException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
            }
          }
;
          IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
            @Override public void run(            IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
              IWorkspace workspace=ResourcesPlugin.getWorkspace();
              try {
                ISchedulingRule schedulingRule=workspace.getRoot();
                workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
              }
 catch (              CoreException e) {
                throw new InvocationTargetException(e);
              }
            }
          }
;
          try {
            new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
catch (          InterruptedException e) {
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9987945205479452
127673,"private void duplicateSingleVersionItem(final Item item,final IPath path,final String newName){
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        final Item newItem=factory.copy(item,path,true);
        newItem.getProperty().setLabel(newName);
        newItem.getProperty().setDisplayName(newName);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem);
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
        }
        if (newItem instanceof ConnectionItem) {
          Connection connection=((ConnectionItem)newItem).getConnection();
          if (connection != null) {
            connection.setLabel(newName);
            connection.setName(newName);
            connection.getSupplierDependency().clear();
          }
        }
        factory.save(newItem);
        notifySQLExplorer(newItem);
      }
 catch (      PersistenceException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
catch (      BusinessException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}","private void duplicateSingleVersionItem(final Item item,final IPath path,final String newName){
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        final Item newItem=factory.copy(item,path,newName);
        newItem.getProperty().setLabel(newName);
        newItem.getProperty().setDisplayName(newName);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem);
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
        }
        if (newItem instanceof ConnectionItem) {
          Connection connection=((ConnectionItem)newItem).getConnection();
          if (connection != null) {
            connection.setLabel(newName);
            connection.setName(newName);
            connection.getSupplierDependency().clear();
          }
        }
        factory.save(newItem);
        notifySQLExplorer(newItem);
      }
 catch (      PersistenceException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
catch (      BusinessException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}",0.9981725888324872
127674,"private void updateXmlTreeViewer(){
  LinksManager<Item,Object,Tree,Object> linkManager=linker.getLinkManager();
  List<LinkDescriptor<Item,Object,Tree,Object>> links=linkManager.getLinks();
  for (int i=0; i < links.size(); i++) {
    LinkDescriptor<Item,Object,Tree,Object> linkDescriptor=links.get(i);
    IExtremityLink<Item,Object> ex1=linkDescriptor.getExtremity1();
    IExtremityLink<Tree,Object> ex2=linkDescriptor.getExtremity2();
    MetadataColumn metaColumn=(MetadataColumn)ex1.getDataItem();
    FOXTreeNode node=(FOXTreeNode)ex2.getDataItem();
    if (ex1.getGraphicalObject() != null) {
      Item item=ex1.getGraphicalObject();
      if (!item.isDisposed() && metaColumn.equals(item.getData())) {
        node.setColumn(ConvertionHelper.convertToIMetaDataColumn(metaColumn));
      }
 else {
        node.setColumn(null);
      }
    }
    node.setDataType(metaColumn.getTalendType());
  }
  xmlViewer.refresh();
  updateConnection();
}","private void updateXmlTreeViewer(List<MetadataColumn> metaColumns){
  List<String> cloumnNames=new ArrayList<String>();
  for (  MetadataColumn column : metaColumns) {
    cloumnNames.add(column.getName());
  }
  LinksManager<Item,Object,Tree,Object> linkManager=linker.getLinkManager();
  List<LinkDescriptor<Item,Object,Tree,Object>> links=linkManager.getLinks();
  for (int i=0; i < links.size(); i++) {
    LinkDescriptor<Item,Object,Tree,Object> linkDescriptor=links.get(i);
    IExtremityLink<Item,Object> ex1=linkDescriptor.getExtremity1();
    IExtremityLink<Tree,Object> ex2=linkDescriptor.getExtremity2();
    MetadataColumn metaColumn=(MetadataColumn)ex1.getDataItem();
    FOXTreeNode node=(FOXTreeNode)ex2.getDataItem();
    if (!cloumnNames.contains(metaColumn.getName())) {
      node.setColumn(null);
    }
    node.setDataType(metaColumn.getTalendType());
  }
  xmlViewer.refresh();
  updateConnection();
}",0.7302771855010661
127675,"@Override public void widgetSelected(SelectionEvent e){
  XmlFileSchemaDialog dialog=new XmlFileSchemaDialog(mainSashFormComposite.getShell(),XmlFileOutputStep2Form.this);
  if (dialog != null && dialog.open() == XmlFileSchemaDialog.OK) {
    MetadataTable metadataTable=dialog.getMetadataTable();
    EList columns=metadataTable.getColumns();
    List<MetadataColumn> inputList=new ArrayList<MetadataColumn>();
    for (int i=0; i < columns.size(); i++) {
      MetadataColumn column=(MetadataColumn)columns.get(i);
      inputList.add(column);
    }
    schemaViewer.setInput(inputList);
    schemaViewer.refresh();
    EList columnList=ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0].getColumns();
    columnList.clear();
    columnList.addAll(inputList);
    updateXmlTreeViewer();
    redrawLinkers();
    checkFieldsValue();
  }
}","@Override public void widgetSelected(SelectionEvent e){
  XmlFileSchemaDialog dialog=new XmlFileSchemaDialog(mainSashFormComposite.getShell(),XmlFileOutputStep2Form.this);
  if (dialog != null && dialog.open() == XmlFileSchemaDialog.OK) {
    MetadataTable metadataTable=dialog.getMetadataTable();
    EList columns=metadataTable.getColumns();
    List<MetadataColumn> inputList=new ArrayList<MetadataColumn>();
    for (int i=0; i < columns.size(); i++) {
      MetadataColumn column=(MetadataColumn)columns.get(i);
      inputList.add(column);
    }
    schemaViewer.setInput(inputList);
    schemaViewer.refresh();
    EList columnList=ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0].getColumns();
    columnList.clear();
    columnList.addAll(inputList);
    updateXmlTreeViewer(inputList);
    redrawLinkers();
    checkFieldsValue();
  }
}",0.9948246118458884
127676,"@Override protected void addUtilsButtonListeners(){
  schemaButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      XmlFileSchemaDialog dialog=new XmlFileSchemaDialog(mainSashFormComposite.getShell(),XmlFileOutputStep2Form.this);
      if (dialog != null && dialog.open() == XmlFileSchemaDialog.OK) {
        MetadataTable metadataTable=dialog.getMetadataTable();
        EList columns=metadataTable.getColumns();
        List<MetadataColumn> inputList=new ArrayList<MetadataColumn>();
        for (int i=0; i < columns.size(); i++) {
          MetadataColumn column=(MetadataColumn)columns.get(i);
          inputList.add(column);
        }
        schemaViewer.setInput(inputList);
        schemaViewer.refresh();
        EList columnList=ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0].getColumns();
        columnList.clear();
        columnList.addAll(inputList);
        updateXmlTreeViewer();
        redrawLinkers();
        checkFieldsValue();
      }
    }
  }
);
}","@Override protected void addUtilsButtonListeners(){
  schemaButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      XmlFileSchemaDialog dialog=new XmlFileSchemaDialog(mainSashFormComposite.getShell(),XmlFileOutputStep2Form.this);
      if (dialog != null && dialog.open() == XmlFileSchemaDialog.OK) {
        MetadataTable metadataTable=dialog.getMetadataTable();
        EList columns=metadataTable.getColumns();
        List<MetadataColumn> inputList=new ArrayList<MetadataColumn>();
        for (int i=0; i < columns.size(); i++) {
          MetadataColumn column=(MetadataColumn)columns.get(i);
          inputList.add(column);
        }
        schemaViewer.setInput(inputList);
        schemaViewer.refresh();
        EList columnList=ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0].getColumns();
        columnList.clear();
        columnList.addAll(inputList);
        updateXmlTreeViewer(inputList);
        redrawLinkers();
        checkFieldsValue();
      }
    }
  }
);
}",0.9958120055839924
127677,"@Override public IMetadataTable getMetadataTable(String metaName){
  return null;
}","@Override public IMetadataTable getMetadataTable(String metaName){
  for (int i=0; i < metadataList.size(); i++) {
    String tableName=metadataList.get(i).getTableName();
    if (tableName != null && tableName.equals(metaName)) {
      return metadataList.get(i);
    }
  }
  return null;
}",0.374331550802139
127678,"@Override public IExternalData getExternalData(){
  return null;
}","@Override public IExternalData getExternalData(){
  if (externalNode != null) {
    return externalNode.getExternalData();
  }
  return null;
}",0.631578947368421
127679,"protected void evaluateTextField(){
  if (readOnly) {
    return;
  }
  if (nameText == null || nameText.isDisposed()) {
    return;
  }
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().startsWith(""String_Node_Str"") || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (JavaConventions.validateClassFileName(nameText.getText() + CLASS,JavaCore.getOption(JavaCore.COMPILER_SOURCE),JavaCore.getOption(JavaCore.COMPILER_COMPLIANCE)).getSeverity() == IStatus.ERROR || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(getPropertyLabel(StringUtils.trimToNull(nameText.getText())));
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
    property.setModificationDate(new Date());
  }
  updatePageStatus();
}","protected void evaluateTextField(){
  ERepositoryObjectType type=ERepositoryObjectType.getItemType(this.property.getItem());
  if (readOnly) {
    return;
  }
  if (nameText == null || nameText.isDisposed()) {
    return;
  }
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().startsWith(""String_Node_Str"") || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (type != null && type.getType().equals(""String_Node_Str"")) {
    if (isKeywords(nameText.getText()) || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
      nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    }
    if (nameModifiedByUser) {
      if (retrieveNameFinished) {
        if (!isValid(nameText.getText())) {
          nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
        }
 else {
          nameStatus=createOkStatus();
        }
      }
 else {
        nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
      }
    }
  }
 else   if (JavaConventions.validateClassFileName(nameText.getText() + CLASS,JavaCore.getOption(JavaCore.COMPILER_SOURCE),JavaCore.getOption(JavaCore.COMPILER_COMPLIANCE)).getSeverity() == IStatus.ERROR || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(getPropertyLabel(StringUtils.trimToNull(nameText.getText())));
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
    property.setModificationDate(new Date());
  }
  updatePageStatus();
}",0.65020366598778
127680,"private boolean validResourcePath(IResourceDelta delta,IPath topLevelNodeWorkspaceRelativePath,boolean refMerged){
  if (ingoreResource(delta)) {
    return false;
  }
  IResourceDelta[] affectedChildren=delta.getAffectedChildren();
  IResource res=delta.getResource();
  IPath path=delta.getFullPath();
  boolean noChild=(affectedChildren == null || (affectedChildren.length == 0));
  if (path != null && noChild && (FileConstants.PROPERTIES_EXTENSION.equals(path.getFileExtension()) || (res instanceof IContainer))) {
    if (isMatchedPath(topLevelNodeWorkspaceRelativePath,path)) {
      return true;
    }
 else     if (refMerged) {
      if (res != null) {
        path=res.getProjectRelativePath();
      }
 else {
        path=path.removeFirstSegments(1);
      }
      IPath relativePath=topLevelNodeWorkspaceRelativePath.removeFirstSegments(1);
      if (isMatchedPath(relativePath,path)) {
        return true;
      }
    }
  }
  if (affectedChildren != null) {
    for (    IResourceDelta child : affectedChildren) {
      if (validResourcePath(child,topLevelNodeWorkspaceRelativePath,refMerged)) {
        return true;
      }
    }
  }
  return false;
}","private boolean validResourcePath(IResourceDelta delta,IPath topLevelNodeWorkspaceRelativePath,boolean refMerged){
  if (ingoreResource(delta)) {
    return false;
  }
  IResourceDelta[] affectedChildren=delta.getAffectedChildren();
  IResource res=delta.getResource();
  IPath path=delta.getFullPath();
  boolean noChild=(affectedChildren == null || (affectedChildren.length == 0));
  if (!noChild && affectedChildren != null && affectedChildren.length == 1 && FilesUtils.isSVNFolder(affectedChildren[0].getResource())) {
    noChild=true;
  }
  if (path != null && noChild && (FileConstants.PROPERTIES_EXTENSION.equals(path.getFileExtension()) || (res instanceof IContainer))) {
    if (isMatchedPath(topLevelNodeWorkspaceRelativePath,path)) {
      return true;
    }
 else     if (refMerged) {
      if (res != null) {
        path=res.getProjectRelativePath();
      }
 else {
        path=path.removeFirstSegments(1);
      }
      IPath relativePath=topLevelNodeWorkspaceRelativePath.removeFirstSegments(1);
      if (isMatchedPath(relativePath,path)) {
        return true;
      }
    }
  }
  if (affectedChildren != null) {
    for (    IResourceDelta child : affectedChildren) {
      if (validResourcePath(child,topLevelNodeWorkspaceRelativePath,refMerged)) {
        return true;
      }
    }
  }
  return false;
}",0.9354709418837676
127681,"/** 
 * Only accept nodes if their type is matching some enabled/visible content provider type
 */
@SuppressWarnings(""String_Node_Str"") @Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (viewer instanceof CommonViewer && element instanceof RepositoryNode) {
    final CommonViewer commonViewer=(CommonViewer)viewer;
    final INavigatorContentService navigatorContentService=commonViewer.getNavigatorContentService();
    final RepositoryNode node=(RepositoryNode)element;
    if (isUnderRecycleBinNode(node)) {
      ERepositoryObjectType contextType=findRealContextType(node);
      if (contextType != null) {
        IRepositoryNode contextNode=node.getRoot().getRootRepositoryNode(contextType);
        Set contentExtensions=navigatorContentService.findContentExtensionsByTriggerPoint(contextNode);
        if (contentExtensions.isEmpty()) {
          return false;
        }
      }
    }
  }
  return true;
}","/** 
 * Only accept nodes if their type is matching some enabled/visible content provider type
 */
@SuppressWarnings(""String_Node_Str"") @Override public boolean select(Viewer viewer,Object parentElement,Object element){
  INavigatorContentService navigatorContentService=null;
  if (viewer instanceof CommonViewer) {
    navigatorContentService=((CommonViewer)viewer).getNavigatorContentService();
  }
 else   if (viewer instanceof IRepoNavigatorContentService) {
    navigatorContentService=((IRepoNavigatorContentService)viewer).getNavigatorContentService();
  }
  if (navigatorContentService != null && element instanceof RepositoryNode) {
    final RepositoryNode node=(RepositoryNode)element;
    if (isUnderRecycleBinNode(node)) {
      ERepositoryObjectType contextType=findRealContextType(node);
      if (contextType != null) {
        IRepositoryNode contextNode=node.getRoot().getRootRepositoryNode(contextType);
        Set contentExtensions=navigatorContentService.findContentExtensionsByTriggerPoint(contextNode);
        if (contentExtensions.isEmpty()) {
          return false;
        }
      }
    }
  }
  return true;
}",0.7581261950286807
127682,"protected TreeViewer createTreeViewer(final Composite parent,final int style){
  return new RepoCommonViewer(getViewId(),parent,style);
}","@Override protected TreeViewer createTreeViewer(final Composite parent,final int style){
  return new RepoCommonViewer(getViewId(),parent,style);
}",0.9647887323943662
127683,"protected void checkSorter(TreeViewer treeViewer){
  treeViewer.setSorter(new CommonViewerSorter());
}","@Override protected void checkSorter(TreeViewer treeViewer){
  treeViewer.setSorter(new CommonViewerSorter());
}",0.9532710280373832
127684,"protected void doFilterForCommonViewer(TreeViewer treeViewer){
  if (treeViewer instanceof IRepoNavigatorContentService) {
    INavigatorContentService navigatorContentService=((IRepoNavigatorContentService)treeViewer).getNavigatorContentService();
    IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    if (activeWorkbenchWindow != null) {
      IWorkbenchPage activePage=activeWorkbenchWindow.getActivePage();
      if (activePage != null) {
        PerspectiveFilterHelper helper=new PerspectiveFilterHelper();
        helper.setTreeViewer(treeViewer);
        helper.setNavigatorContentService(navigatorContentService);
        helper.setActionProviderId(PerspectiveFilterActionProvider.ID);
        String perspectiveId=activePage.getPerspective().getId();
        helper.doFiltering(perspectiveId);
      }
    }
  }
}","protected void doFilterForCommonViewer(TreeViewer treeViewer){
  if (treeViewer instanceof IRepoNavigatorContentService) {
    INavigatorContentService navigatorContentService=((IRepoNavigatorContentService)treeViewer).getNavigatorContentService();
    IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    if (activeWorkbenchWindow != null) {
      IWorkbenchPage activePage=activeWorkbenchWindow.getActivePage();
      if (activePage != null) {
        PerspectiveFilterHelper helper=new PerspectiveFilterHelper();
        helper.setTreeViewer(treeViewer);
        helper.setNavigatorContentService(navigatorContentService);
        helper.setActionProviderId(PerspectiveFilterActionProvider.ID);
        String perspectiveId=activePage.getPerspective().getId();
        helper.doFiltering(perspectiveId);
      }
    }
    INavigatorFilterService filterService=navigatorContentService.getFilterService();
    ViewerFilter[] visibleFilters=filterService.getVisibleFilters(true);
    for (    ViewerFilter visibleFilter : visibleFilters) {
      treeViewer.addFilter(visibleFilter);
    }
  }
}",0.8665338645418327
127685,"public static String addQuotesWithSpaceField(String fieldName,String dbType){
  if (fieldName == null) {
    fieldName=""String_Node_Str"";
  }
  if (fieldName.startsWith(""String_Node_Str"") && fieldName.endsWith(""String_Node_Str"")) {
    return fieldName;
  }
  boolean b=true;
  for (int i=0; i < fieldName.length(); i++) {
    char c=fieldName.charAt(i);
    b=b && c >= '0' && c <= '9';
  }
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  boolean isCheck=!CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  if (!b) {
    if (isCheck && isPSQLSimilar(name)) {
      return fieldName;
    }
  }
  String newFieldName=fieldName;
  String quote=getQuoteByDBType(name);
  if (!newFieldName.contains(quote)) {
    newFieldName=addQuotes(newFieldName,quote);
  }
  return newFieldName;
}","public static String addQuotesWithSpaceField(String fieldName,String dbType){
  if (fieldName == null) {
    fieldName=""String_Node_Str"";
  }
  if (fieldName.startsWith(""String_Node_Str"") && fieldName.endsWith(""String_Node_Str"")) {
    return fieldName;
  }
  boolean b=true;
  for (int i=0; i < fieldName.length(); i++) {
    char c=fieldName.charAt(i);
    b=b && c >= '0' && c <= '9';
  }
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  if (name.equals(EDatabaseTypeName.MYSQL) && fieldName.contains(JAVA_END_STRING)) {
    String newFieldName=TalendQuoteUtils.addQuotes(fieldName);
    return newFieldName;
  }
  boolean isCheck=!CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  if (!b) {
    if (isCheck && isPSQLSimilar(name)) {
      return fieldName;
    }
  }
  String newFieldName=fieldName;
  String quote=getQuoteByDBType(name);
  if (!newFieldName.contains(quote)) {
    newFieldName=addQuotes(newFieldName,quote);
  }
  return newFieldName;
}",0.9060010621348912
127686,"/** 
 * DOC ocarbone Comment method ""initMetadataForm"".
 */
private void initMetadataForm(){
  metadataEditor.setMetadataTable(metadataTable);
  IPreferenceStore store=RepositoryManager.getPreferenceStore();
  Boolean flag=store.getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  removeDoubleQuotes(metadataEditor.getMetadataColumnList());
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  String label=MetadataToolHelper.validateValue(metadataTable.getLabel());
  nameText.setText(label);
  commentText.setText(metadataTable.getComment());
  if (metadataTable.getTableType() != null) {
    typeText.setText(Messages.getString(""String_Node_Str"",metadataTable.getTableType()));
  }
 else {
    typeText.setText(Messages.getString(""String_Node_Str""));
  }
  String sourceName=metadataTable.getName();
  tableCombo.setText(sourceName);
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}","/** 
 * DOC ocarbone Comment method ""initMetadataForm"".
 */
private void initMetadataForm(){
  metadataEditor.setMetadataTable(metadataTable);
  IPreferenceStore store=RepositoryManager.getPreferenceStore();
  Boolean flag=store.getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  removeDoubleQuotes(metadataEditor.getMetadataColumnList());
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  String label=MetadataToolHelper.validateValue(metadataTable.getLabel());
  if (getConnection().getDbVersionString().equals(EDatabaseVersion4Drivers.MYSQL_5.name()) && metadataTable.getName().contains(""String_Node_Str"")) {
    label=metadataTable.getName();
  }
  nameText.setText(label);
  commentText.setText(metadataTable.getComment());
  if (metadataTable.getTableType() != null) {
    typeText.setText(Messages.getString(""String_Node_Str"",metadataTable.getTableType()));
  }
 else {
    typeText.setText(Messages.getString(""String_Node_Str""));
  }
  String sourceName=metadataTable.getName();
  tableCombo.setText(sourceName);
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}",0.9416511483550588
127687,"private void initToolBar(Composite parent){
  Composite toolBarComp=new Composite(parent,SWT.BORDER);
  GridLayout layout=new GridLayout();
  layout.numColumns=4;
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  toolBarComp.setLayout(layout);
  toolBarComp.setLayoutData(data);
  AddTreeNodeButton addTreeNodeBtn=new AddTreeNodeButton(toolBarComp,this);
  RemoveTreeNodeButton removeNodeBtn=new RemoveTreeNodeButton(toolBarComp,this);
  MoveUpTreeNodeButton moveUpBtn=new MoveUpTreeNodeButton(toolBarComp,this);
  MoveDownTreeNodeButton moveDown=new MoveDownTreeNodeButton(toolBarComp,this);
}","private void initToolBar(Composite parent){
  Composite toolBarComp=new Composite(parent,SWT.BORDER);
  GridLayout layout=new GridLayout();
  layout.numColumns=4;
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  toolBarComp.setLayout(layout);
  toolBarComp.setLayoutData(data);
  addTreeNodeBtn=new AddTreeNodeButton(toolBarComp,this);
  removeNodeBtn=new RemoveTreeNodeButton(toolBarComp,this);
  moveUpBtn=new MoveUpTreeNodeButton(toolBarComp,this);
  moveDown=new MoveDownTreeNodeButton(toolBarComp,this);
}",0.776092774308653
127688,"private void addSchemaViewer(final Composite mainComposite,final int width,final int height){
  final Group group=Form.createGroup(mainComposite,1,""String_Node_Str"",height);
  schemaButton=new Button(group,SWT.PUSH);
  schemaButton.setText(""String_Node_Str"");
  schemaButton.setToolTipText(""String_Node_Str"");
  schemaViewer=new TableViewer(group);
  XmlFileTableViewerProvider provider=new XmlFileTableViewerProvider();
  schemaViewer.setContentProvider(provider);
  schemaViewer.setLabelProvider(provider);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  Table table=schemaViewer.getTable();
  if (isReadOnly()) {
    table.setEnabled(false);
  }
  table.setHeaderVisible(true);
  org.eclipse.swt.widgets.TableColumn column=new org.eclipse.swt.widgets.TableColumn(table,SWT.LEFT);
  column.setText(""String_Node_Str"");
  column.setWidth(100);
  table.setLayoutData(gridData);
}","private void addSchemaViewer(final Composite mainComposite,final int width,final int height){
  final Group group=Form.createGroup(mainComposite,1,""String_Node_Str"",height);
  schemaButton=new Button(group,SWT.PUSH);
  schemaButton.setText(""String_Node_Str"");
  schemaButton.setToolTipText(""String_Node_Str"");
  schemaViewer=new TableViewer(group);
  XmlFileTableViewerProvider provider=new XmlFileTableViewerProvider();
  schemaViewer.setContentProvider(provider);
  schemaViewer.setLabelProvider(provider);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  Table table=schemaViewer.getTable();
  if (isReadOnly()) {
    table.setEnabled(false);
  }
  table.setHeaderVisible(true);
  org.eclipse.swt.widgets.TableColumn column=new org.eclipse.swt.widgets.TableColumn(table,SWT.LEFT);
  column.setText(""String_Node_Str"");
  column.setWidth(100);
  table.setLayoutData(gridData);
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      addTreeNodeBtn.getButton().setEnabled(false);
      removeNodeBtn.getButton().setEnabled(false);
      moveUpBtn.getButton().setEnabled(false);
      moveDown.getButton().setEnabled(false);
    }
  }
);
}",0.8446139180171592
127689,"private void initToolBar(Composite parent){
  Composite toolBarComp=new Composite(parent,SWT.BORDER);
  GridLayout layout=new GridLayout();
  layout.numColumns=4;
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  toolBarComp.setLayout(layout);
  toolBarComp.setLayoutData(data);
  AddTreeNodeButton addTreeNodeBtn=new AddTreeNodeButton(toolBarComp,this);
  RemoveTreeNodeButton removeNodeBtn=new RemoveTreeNodeButton(toolBarComp,this);
  MoveUpTreeNodeButton moveUpBtn=new MoveUpTreeNodeButton(toolBarComp,this);
  MoveDownTreeNodeButton moveDown=new MoveDownTreeNodeButton(toolBarComp,this);
}","private void initToolBar(Composite parent){
  Composite toolBarComp=new Composite(parent,SWT.BORDER);
  GridLayout layout=new GridLayout();
  layout.numColumns=4;
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  toolBarComp.setLayout(layout);
  toolBarComp.setLayoutData(data);
  addTreeNodeBtn=new AddTreeNodeButton(toolBarComp,this);
  removeNodeBtn=new RemoveTreeNodeButton(toolBarComp,this);
  moveUpBtn=new MoveUpTreeNodeButton(toolBarComp,this);
  moveDown=new MoveDownTreeNodeButton(toolBarComp,this);
}",0.776092774308653
127690,"private void addSchemaViewer(final Composite mainComposite,final int width,final int height){
  final Group group=Form.createGroup(mainComposite,1,""String_Node_Str"",height);
  schemaButton=new Button(group,SWT.PUSH);
  schemaButton.setText(""String_Node_Str"");
  schemaButton.setToolTipText(""String_Node_Str"");
  schemaViewer=new TableViewer(group);
  XmlFileTableViewerProvider provider=new XmlFileTableViewerProvider();
  schemaViewer.setContentProvider(provider);
  schemaViewer.setLabelProvider(provider);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  Table table=schemaViewer.getTable();
  if (isReadOnly()) {
    table.setEnabled(false);
  }
  table.setHeaderVisible(true);
  org.eclipse.swt.widgets.TableColumn column=new org.eclipse.swt.widgets.TableColumn(table,SWT.LEFT);
  column.setText(""String_Node_Str"");
  column.setWidth(100);
  table.setLayoutData(gridData);
}","private void addSchemaViewer(final Composite mainComposite,final int width,final int height){
  final Group group=Form.createGroup(mainComposite,1,""String_Node_Str"",height);
  schemaButton=new Button(group,SWT.PUSH);
  schemaButton.setText(""String_Node_Str"");
  schemaButton.setToolTipText(""String_Node_Str"");
  schemaViewer=new TableViewer(group);
  XmlFileTableViewerProvider provider=new XmlFileTableViewerProvider();
  schemaViewer.setContentProvider(provider);
  schemaViewer.setLabelProvider(provider);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  Table table=schemaViewer.getTable();
  if (isReadOnly()) {
    table.setEnabled(false);
  }
  table.setHeaderVisible(true);
  org.eclipse.swt.widgets.TableColumn column=new org.eclipse.swt.widgets.TableColumn(table,SWT.LEFT);
  column.setText(""String_Node_Str"");
  column.setWidth(100);
  table.setLayoutData(gridData);
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      addTreeNodeBtn.getButton().setEnabled(false);
      removeNodeBtn.getButton().setEnabled(false);
      moveUpBtn.getButton().setEnabled(false);
      moveDown.getButton().setEnabled(false);
    }
  }
);
}",0.8446139180171592
127691,"private void createLogsRoot(Composite workArea){
  Composite projectGroup=new Composite(workArea,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  layout.makeColumnsEqualWidth=false;
  layout.marginWidth=0;
  projectGroup.setLayout(layout);
  projectGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  logsFromArchiveRadio=new Button(projectGroup,SWT.RADIO);
  logsFromArchiveRadio.setText(DataTransferMessages.WizardProjectsImportPage_ArchiveSelectTitle);
  archivePathField=new Text(projectGroup,SWT.BORDER);
  archivePathField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL));
  browseArchivesButton=new Button(projectGroup,SWT.PUSH);
  browseArchivesButton.setText(DataTransferMessages.DataTransfer_browse);
  setButtonLayoutData(browseArchivesButton);
  archivePathField.setEnabled(false);
  browseArchivesButton.setEnabled(false);
  browseArchivesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      handleLocationArchiveButtonPressed();
    }
  }
);
  archivePathField.addTraverseListener(new TraverseListener(){
    public void keyTraversed(    TraverseEvent e){
      if (e.detail == SWT.TRAVERSE_RETURN) {
        e.doit=false;
        lastPath=archivePathField.getText().trim();
      }
    }
  }
);
  archivePathField.addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    org.eclipse.swt.events.FocusEvent e){
      lastPath=archivePathField.getText().trim();
    }
  }
);
  logsFromArchiveRadio.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      archiveRadioSelected();
    }
  }
);
  label=new Label(workArea,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  addLogsButton=new Button(workArea,SWT.CHECK);
  addLogsButton.setText(Messages.getString(""String_Node_Str""));
  sysConfigButton=new Button(workArea,SWT.CHECK);
  sysConfigButton.setText(Messages.getString(""String_Node_Str""));
}","private void createLogsRoot(Composite workArea){
  Composite projectGroup=new Composite(workArea,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  layout.makeColumnsEqualWidth=false;
  layout.marginWidth=0;
  projectGroup.setLayout(layout);
  projectGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  logsFromArchiveRadio=new Button(projectGroup,SWT.RADIO);
  logsFromArchiveRadio.setText(DataTransferMessages.WizardProjectsImportPage_ArchiveSelectTitle);
  archivePathField=new Text(projectGroup,SWT.BORDER);
  archivePathField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL));
  browseArchivesButton=new Button(projectGroup,SWT.PUSH);
  browseArchivesButton.setText(DataTransferMessages.DataTransfer_browse);
  setButtonLayoutData(browseArchivesButton);
  archivePathField.setEnabled(false);
  browseArchivesButton.setEnabled(false);
  browseArchivesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      handleLocationArchiveButtonPressed();
    }
  }
);
  archivePathField.addTraverseListener(new TraverseListener(){
    public void keyTraversed(    TraverseEvent e){
      if (e.detail == SWT.TRAVERSE_RETURN) {
        e.doit=false;
        lastPath=archivePathField.getText().trim();
      }
    }
  }
);
  archivePathField.addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    org.eclipse.swt.events.FocusEvent e){
      lastPath=archivePathField.getText().trim();
    }
  }
);
  logsFromArchiveRadio.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      archiveRadioSelected();
    }
  }
);
  label=new Label(workArea,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  addLogsButton=new Button(workArea,SWT.CHECK);
  addLogsButton.setSelection(true);
  addLogsButton.setText(Messages.getString(""String_Node_Str""));
  sysConfigButton=new Button(workArea,SWT.CHECK);
  sysConfigButton.setSelection(true);
  sysConfigButton.setText(Messages.getString(""String_Node_Str""));
  addLogsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (addLogsButton.getSelection() == false && sysConfigButton.getSelection() == false) {
        setPageComplete(false);
      }
 else {
        setPageComplete(true);
      }
    }
  }
);
  sysConfigButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (addLogsButton.getSelection() == false && sysConfigButton.getSelection() == false) {
        setPageComplete(false);
      }
 else {
        setPageComplete(true);
      }
    }
  }
);
}",0.8511879949979158
127692,"@Override public void widgetSelected(SelectionEvent e){
  archiveRadioSelected();
}","@Override public void widgetSelected(SelectionEvent e){
  if (addLogsButton.getSelection() == false && sysConfigButton.getSelection() == false) {
    setPageComplete(false);
  }
 else {
    setPageComplete(true);
  }
}",0.4186046511627907
127693,"protected void evaluateTextField(){
  if (readOnly) {
    return;
  }
  if (nameText == null || nameText.isDisposed()) {
    return;
  }
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (JavaConventions.validateClassFileName(nameText.getText() + CLASS,JavaCore.getOption(JavaCore.COMPILER_SOURCE),JavaCore.getOption(JavaCore.COMPILER_COMPLIANCE)).getSeverity() == IStatus.ERROR || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(getPropertyLabel(StringUtils.trimToNull(nameText.getText())));
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
    property.setModificationDate(new Date());
  }
  updatePageStatus();
}","protected void evaluateTextField(){
  ERepositoryObjectType type=ERepositoryObjectType.getItemType(this.property.getItem());
  if (readOnly) {
    return;
  }
  if (nameText == null || nameText.isDisposed()) {
    return;
  }
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().startsWith(""String_Node_Str"") || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (type != null && type.getType().equals(""String_Node_Str"")) {
    if (isKeywords(nameText.getText()) || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
      nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    }
    if (nameModifiedByUser) {
      if (retrieveNameFinished) {
        if (!isValid(nameText.getText())) {
          nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
        }
 else {
          nameStatus=createOkStatus();
        }
      }
 else {
        nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
      }
    }
  }
 else   if (JavaConventions.validateClassFileName(nameText.getText() + CLASS,JavaCore.getOption(JavaCore.COMPILER_SOURCE),JavaCore.getOption(JavaCore.COMPILER_COMPLIANCE)).getSeverity() == IStatus.ERROR || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(getPropertyLabel(StringUtils.trimToNull(nameText.getText())));
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
    property.setModificationDate(new Date());
  }
  updatePageStatus();
}",0.6186790505675954
127694,"private boolean validResourcePath(IResourceDelta delta,IPath topLevelNodeWorkspaceRelativePath,boolean refMerged){
  if (ingoreResource(delta)) {
    return false;
  }
  IResourceDelta[] affectedChildren=delta.getAffectedChildren();
  IResource res=delta.getResource();
  IPath path=delta.getFullPath();
  boolean noChild=(affectedChildren == null || (affectedChildren.length == 0));
  if (path != null && noChild && (FileConstants.PROPERTIES_EXTENSION.equals(path.getFileExtension()) || (res instanceof IContainer))) {
    if (isMatchedPath(topLevelNodeWorkspaceRelativePath,path)) {
      return true;
    }
 else     if (refMerged) {
      if (res != null) {
        path=res.getProjectRelativePath();
      }
 else {
        path=path.removeFirstSegments(1);
      }
      IPath relativePath=topLevelNodeWorkspaceRelativePath.removeFirstSegments(1);
      if (isMatchedPath(relativePath,path)) {
        return true;
      }
    }
  }
  if (affectedChildren != null) {
    for (    IResourceDelta child : affectedChildren) {
      if (validResourcePath(child,topLevelNodeWorkspaceRelativePath,refMerged)) {
        return true;
      }
    }
  }
  return false;
}","private boolean validResourcePath(IResourceDelta delta,IPath topLevelNodeWorkspaceRelativePath,boolean refMerged){
  if (ingoreResource(delta)) {
    return false;
  }
  IResourceDelta[] affectedChildren=delta.getAffectedChildren();
  IResource res=delta.getResource();
  IPath path=delta.getFullPath();
  boolean noChild=(affectedChildren == null || (affectedChildren.length == 0));
  if (!noChild && affectedChildren != null && affectedChildren.length == 1 && FilesUtils.isSVNFolder(affectedChildren[0].getResource())) {
    noChild=true;
  }
  if (path != null && noChild && (FileConstants.PROPERTIES_EXTENSION.equals(path.getFileExtension()) || (res instanceof IContainer))) {
    if (isMatchedPath(topLevelNodeWorkspaceRelativePath,path)) {
      return true;
    }
 else     if (refMerged) {
      if (res != null) {
        path=res.getProjectRelativePath();
      }
 else {
        path=path.removeFirstSegments(1);
      }
      IPath relativePath=topLevelNodeWorkspaceRelativePath.removeFirstSegments(1);
      if (isMatchedPath(relativePath,path)) {
        return true;
      }
    }
  }
  if (affectedChildren != null) {
    for (    IResourceDelta child : affectedChildren) {
      if (validResourcePath(child,topLevelNodeWorkspaceRelativePath,refMerged)) {
        return true;
      }
    }
  }
  return false;
}",0.9354709418837676
127695,"@SuppressWarnings(""String_Node_Str"") @Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (viewer instanceof CommonViewer && element instanceof RepositoryNode) {
    final CommonViewer commonViewer=(CommonViewer)viewer;
    final INavigatorContentService navigatorContentService=commonViewer.getNavigatorContentService();
    final RepositoryNode node=(RepositoryNode)element;
    if (isUnderRecycleBinNode(node)) {
      ERepositoryObjectType contextType=findRealContextType(node);
      if (contextType != null) {
        IRepositoryNode contextNode=node.getRoot().getRootRepositoryNode(contextType);
        Set contentExtensions=navigatorContentService.findContentExtensionsByTriggerPoint(contextNode);
        if (contentExtensions.isEmpty()) {
          return false;
        }
      }
    }
  }
  return true;
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean select(Viewer viewer,Object parentElement,Object element){
  INavigatorContentService navigatorContentService=null;
  if (viewer instanceof CommonViewer) {
    navigatorContentService=((CommonViewer)viewer).getNavigatorContentService();
  }
 else   if (viewer instanceof IRepoNavigatorContentService) {
    navigatorContentService=((IRepoNavigatorContentService)viewer).getNavigatorContentService();
  }
  if (navigatorContentService != null && element instanceof RepositoryNode) {
    final RepositoryNode node=(RepositoryNode)element;
    if (isUnderRecycleBinNode(node)) {
      ERepositoryObjectType contextType=findRealContextType(node);
      if (contextType != null) {
        IRepositoryNode contextNode=node.getRoot().getRootRepositoryNode(contextType);
        Set contentExtensions=navigatorContentService.findContentExtensionsByTriggerPoint(contextNode);
        if (contentExtensions.isEmpty()) {
          return false;
        }
      }
    }
  }
  return true;
}",0.7328405491024287
127696,"protected TreeViewer createTreeViewer(final Composite parent,final int style){
  return new RepoCommonViewer(getViewId(),parent,style);
}","@Override protected TreeViewer createTreeViewer(final Composite parent,final int style){
  return new RepoCommonViewer(getViewId(),parent,style);
}",0.9647887323943662
127697,"protected void checkSorter(TreeViewer treeViewer){
  treeViewer.setSorter(new CommonViewerSorter());
}","@Override protected void checkSorter(TreeViewer treeViewer){
  treeViewer.setSorter(new CommonViewerSorter());
}",0.9532710280373832
127698,"protected void doFilterForCommonViewer(TreeViewer treeViewer){
  if (treeViewer instanceof IRepoNavigatorContentService) {
    INavigatorContentService navigatorContentService=((IRepoNavigatorContentService)treeViewer).getNavigatorContentService();
    IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    if (activeWorkbenchWindow != null) {
      IWorkbenchPage activePage=activeWorkbenchWindow.getActivePage();
      if (activePage != null) {
        PerspectiveFilterHelper helper=new PerspectiveFilterHelper();
        helper.setTreeViewer(treeViewer);
        helper.setNavigatorContentService(navigatorContentService);
        helper.setActionProviderId(PerspectiveFilterActionProvider.ID);
        String perspectiveId=activePage.getPerspective().getId();
        helper.doFiltering(perspectiveId);
      }
    }
  }
}","protected void doFilterForCommonViewer(TreeViewer treeViewer){
  if (treeViewer instanceof IRepoNavigatorContentService) {
    INavigatorContentService navigatorContentService=((IRepoNavigatorContentService)treeViewer).getNavigatorContentService();
    IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    if (activeWorkbenchWindow != null) {
      IWorkbenchPage activePage=activeWorkbenchWindow.getActivePage();
      if (activePage != null) {
        PerspectiveFilterHelper helper=new PerspectiveFilterHelper();
        helper.setTreeViewer(treeViewer);
        helper.setNavigatorContentService(navigatorContentService);
        helper.setActionProviderId(PerspectiveFilterActionProvider.ID);
        String perspectiveId=activePage.getPerspective().getId();
        helper.doFiltering(perspectiveId);
      }
    }
    INavigatorFilterService filterService=navigatorContentService.getFilterService();
    ViewerFilter[] visibleFilters=filterService.getVisibleFilters(true);
    for (    ViewerFilter visibleFilter : visibleFilters) {
      treeViewer.addFilter(visibleFilter);
    }
  }
}",0.8665338645418327
127699,"private void initToolBar(Composite parent){
  Composite toolBarComp=new Composite(parent,SWT.BORDER);
  GridLayout layout=new GridLayout();
  layout.numColumns=4;
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  toolBarComp.setLayout(layout);
  toolBarComp.setLayoutData(data);
  AddTreeNodeButton addTreeNodeBtn=new AddTreeNodeButton(toolBarComp,this);
  RemoveTreeNodeButton removeNodeBtn=new RemoveTreeNodeButton(toolBarComp,this);
  MoveUpTreeNodeButton moveUpBtn=new MoveUpTreeNodeButton(toolBarComp,this);
  MoveDownTreeNodeButton moveDown=new MoveDownTreeNodeButton(toolBarComp,this);
}","private void initToolBar(Composite parent){
  Composite toolBarComp=new Composite(parent,SWT.BORDER);
  GridLayout layout=new GridLayout();
  layout.numColumns=4;
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  toolBarComp.setLayout(layout);
  toolBarComp.setLayoutData(data);
  addTreeNodeBtn=new AddTreeNodeButton(toolBarComp,this);
  removeNodeBtn=new RemoveTreeNodeButton(toolBarComp,this);
  moveUpBtn=new MoveUpTreeNodeButton(toolBarComp,this);
  moveDown=new MoveDownTreeNodeButton(toolBarComp,this);
}",0.776092774308653
127700,"private void addSchemaViewer(final Composite mainComposite,final int width,final int height){
  final Group group=Form.createGroup(mainComposite,1,""String_Node_Str"",height);
  schemaButton=new Button(group,SWT.PUSH);
  schemaButton.setText(""String_Node_Str"");
  schemaButton.setToolTipText(""String_Node_Str"");
  schemaViewer=new TableViewer(group);
  XmlFileTableViewerProvider provider=new XmlFileTableViewerProvider();
  schemaViewer.setContentProvider(provider);
  schemaViewer.setLabelProvider(provider);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  Table table=schemaViewer.getTable();
  if (isReadOnly()) {
    table.setEnabled(false);
  }
  table.setHeaderVisible(true);
  org.eclipse.swt.widgets.TableColumn column=new org.eclipse.swt.widgets.TableColumn(table,SWT.LEFT);
  column.setText(""String_Node_Str"");
  column.setWidth(100);
  table.setLayoutData(gridData);
}","private void addSchemaViewer(final Composite mainComposite,final int width,final int height){
  final Group group=Form.createGroup(mainComposite,1,""String_Node_Str"",height);
  schemaButton=new Button(group,SWT.PUSH);
  schemaButton.setText(""String_Node_Str"");
  schemaButton.setToolTipText(""String_Node_Str"");
  schemaViewer=new TableViewer(group);
  XmlFileTableViewerProvider provider=new XmlFileTableViewerProvider();
  schemaViewer.setContentProvider(provider);
  schemaViewer.setLabelProvider(provider);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  Table table=schemaViewer.getTable();
  if (isReadOnly()) {
    table.setEnabled(false);
  }
  table.setHeaderVisible(true);
  org.eclipse.swt.widgets.TableColumn column=new org.eclipse.swt.widgets.TableColumn(table,SWT.LEFT);
  column.setText(""String_Node_Str"");
  column.setWidth(100);
  table.setLayoutData(gridData);
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      addTreeNodeBtn.getButton().setEnabled(false);
      removeNodeBtn.getButton().setEnabled(false);
      moveUpBtn.getButton().setEnabled(false);
      moveDown.getButton().setEnabled(false);
    }
  }
);
}",0.8446139180171592
127701,"private boolean validResourcePath(IResourceDelta delta,IPath topLevelNodeWorkspaceRelativePath,boolean refMerged){
  if (ingoreResource(delta)) {
    return false;
  }
  IResourceDelta[] affectedChildren=delta.getAffectedChildren();
  IResource res=delta.getResource();
  IPath path=delta.getFullPath();
  boolean noChild=(affectedChildren == null || (affectedChildren.length == 0));
  if (path != null && noChild && (FileConstants.PROPERTIES_EXTENSION.equals(path.getFileExtension()) || (res instanceof IContainer))) {
    if (isMatchedPath(topLevelNodeWorkspaceRelativePath,path)) {
      return true;
    }
 else     if (refMerged) {
      if (res != null) {
        path=res.getProjectRelativePath();
      }
 else {
        path=path.removeFirstSegments(1);
      }
      IPath relativePath=topLevelNodeWorkspaceRelativePath.removeFirstSegments(1);
      if (isMatchedPath(relativePath,path)) {
        return true;
      }
    }
  }
  if (affectedChildren != null) {
    for (    IResourceDelta child : affectedChildren) {
      if (validResourcePath(child,topLevelNodeWorkspaceRelativePath,refMerged)) {
        return true;
      }
    }
  }
  return false;
}","private boolean validResourcePath(IResourceDelta delta,IPath topLevelNodeWorkspaceRelativePath,boolean refMerged){
  if (ingoreResource(delta)) {
    return false;
  }
  IResourceDelta[] affectedChildren=delta.getAffectedChildren();
  IResource res=delta.getResource();
  IPath path=delta.getFullPath();
  boolean noChild=(affectedChildren == null || (affectedChildren.length == 0));
  if (!noChild && affectedChildren != null && affectedChildren.length == 1 && FilesUtils.isSVNFolder(affectedChildren[0].getResource())) {
    noChild=true;
  }
  if (path != null && noChild && (FileConstants.PROPERTIES_EXTENSION.equals(path.getFileExtension()) || (res instanceof IContainer))) {
    if (isMatchedPath(topLevelNodeWorkspaceRelativePath,path)) {
      return true;
    }
 else     if (refMerged) {
      if (res != null) {
        path=res.getProjectRelativePath();
      }
 else {
        path=path.removeFirstSegments(1);
      }
      IPath relativePath=topLevelNodeWorkspaceRelativePath.removeFirstSegments(1);
      if (isMatchedPath(relativePath,path)) {
        return true;
      }
    }
  }
  if (affectedChildren != null) {
    for (    IResourceDelta child : affectedChildren) {
      if (validResourcePath(child,topLevelNodeWorkspaceRelativePath,refMerged)) {
        return true;
      }
    }
  }
  return false;
}",0.9354709418837676
127702,"/** 
 * Only accept nodes if their type is matching some enabled/visible content provider type
 */
@SuppressWarnings(""String_Node_Str"") @Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (viewer instanceof CommonViewer && element instanceof RepositoryNode) {
    final CommonViewer commonViewer=(CommonViewer)viewer;
    final INavigatorContentService navigatorContentService=commonViewer.getNavigatorContentService();
    final RepositoryNode node=(RepositoryNode)element;
    if (isUnderRecycleBinNode(node)) {
      ERepositoryObjectType contextType=findRealContextType(node);
      if (contextType != null) {
        IRepositoryNode contextNode=node.getRoot().getRootRepositoryNode(contextType);
        Set contentExtensions=navigatorContentService.findContentExtensionsByTriggerPoint(contextNode);
        if (contentExtensions.isEmpty()) {
          return false;
        }
      }
    }
  }
  return true;
}","/** 
 * Only accept nodes if their type is matching some enabled/visible content provider type
 */
@SuppressWarnings(""String_Node_Str"") @Override public boolean select(Viewer viewer,Object parentElement,Object element){
  INavigatorContentService navigatorContentService=null;
  if (viewer instanceof CommonViewer) {
    navigatorContentService=((CommonViewer)viewer).getNavigatorContentService();
  }
 else   if (viewer instanceof IRepoNavigatorContentService) {
    navigatorContentService=((IRepoNavigatorContentService)viewer).getNavigatorContentService();
  }
  if (navigatorContentService != null && element instanceof RepositoryNode) {
    final RepositoryNode node=(RepositoryNode)element;
    if (isUnderRecycleBinNode(node)) {
      ERepositoryObjectType contextType=findRealContextType(node);
      if (contextType != null) {
        IRepositoryNode contextNode=node.getRoot().getRootRepositoryNode(contextType);
        Set contentExtensions=navigatorContentService.findContentExtensionsByTriggerPoint(contextNode);
        if (contentExtensions.isEmpty()) {
          return false;
        }
      }
    }
  }
  return true;
}",0.7581261950286807
127703,"protected TreeViewer createTreeViewer(final Composite parent,final int style){
  return new RepoCommonViewer(getViewId(),parent,style);
}","@Override protected TreeViewer createTreeViewer(final Composite parent,final int style){
  return new RepoCommonViewer(getViewId(),parent,style);
}",0.9647887323943662
127704,"protected void checkSorter(TreeViewer treeViewer){
  treeViewer.setSorter(new CommonViewerSorter());
}","@Override protected void checkSorter(TreeViewer treeViewer){
  treeViewer.setSorter(new CommonViewerSorter());
}",0.9532710280373832
127705,"protected void doFilterForCommonViewer(TreeViewer treeViewer){
  if (treeViewer instanceof IRepoNavigatorContentService) {
    INavigatorContentService navigatorContentService=((IRepoNavigatorContentService)treeViewer).getNavigatorContentService();
    IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    if (activeWorkbenchWindow != null) {
      IWorkbenchPage activePage=activeWorkbenchWindow.getActivePage();
      if (activePage != null) {
        PerspectiveFilterHelper helper=new PerspectiveFilterHelper();
        helper.setTreeViewer(treeViewer);
        helper.setNavigatorContentService(navigatorContentService);
        helper.setActionProviderId(PerspectiveFilterActionProvider.ID);
        String perspectiveId=activePage.getPerspective().getId();
        helper.doFiltering(perspectiveId);
      }
    }
  }
}","protected void doFilterForCommonViewer(TreeViewer treeViewer){
  if (treeViewer instanceof IRepoNavigatorContentService) {
    INavigatorContentService navigatorContentService=((IRepoNavigatorContentService)treeViewer).getNavigatorContentService();
    IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    if (activeWorkbenchWindow != null) {
      IWorkbenchPage activePage=activeWorkbenchWindow.getActivePage();
      if (activePage != null) {
        PerspectiveFilterHelper helper=new PerspectiveFilterHelper();
        helper.setTreeViewer(treeViewer);
        helper.setNavigatorContentService(navigatorContentService);
        helper.setActionProviderId(PerspectiveFilterActionProvider.ID);
        String perspectiveId=activePage.getPerspective().getId();
        helper.doFiltering(perspectiveId);
      }
    }
    INavigatorFilterService filterService=navigatorContentService.getFilterService();
    ViewerFilter[] visibleFilters=filterService.getVisibleFilters(true);
    for (    ViewerFilter visibleFilter : visibleFilters) {
      treeViewer.addFilter(visibleFilter);
    }
  }
}",0.8665338645418327
127706,"private void createLogsRoot(Composite workArea){
  Composite projectGroup=new Composite(workArea,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  layout.makeColumnsEqualWidth=false;
  layout.marginWidth=0;
  projectGroup.setLayout(layout);
  projectGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  logsFromArchiveRadio=new Button(projectGroup,SWT.RADIO);
  logsFromArchiveRadio.setText(DataTransferMessages.WizardProjectsImportPage_ArchiveSelectTitle);
  archivePathField=new Text(projectGroup,SWT.BORDER);
  archivePathField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL));
  browseArchivesButton=new Button(projectGroup,SWT.PUSH);
  browseArchivesButton.setText(DataTransferMessages.DataTransfer_browse);
  setButtonLayoutData(browseArchivesButton);
  archivePathField.setEnabled(false);
  browseArchivesButton.setEnabled(false);
  browseArchivesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      handleLocationArchiveButtonPressed();
    }
  }
);
  archivePathField.addTraverseListener(new TraverseListener(){
    public void keyTraversed(    TraverseEvent e){
      if (e.detail == SWT.TRAVERSE_RETURN) {
        e.doit=false;
        lastPath=archivePathField.getText().trim();
      }
    }
  }
);
  archivePathField.addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    org.eclipse.swt.events.FocusEvent e){
      lastPath=archivePathField.getText().trim();
    }
  }
);
  logsFromArchiveRadio.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      archiveRadioSelected();
    }
  }
);
  label=new Label(workArea,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  addLogsButton=new Button(workArea,SWT.CHECK);
  addLogsButton.setText(Messages.getString(""String_Node_Str""));
  sysConfigButton=new Button(workArea,SWT.CHECK);
  sysConfigButton.setText(Messages.getString(""String_Node_Str""));
}","private void createLogsRoot(Composite workArea){
  Composite projectGroup=new Composite(workArea,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  layout.makeColumnsEqualWidth=false;
  layout.marginWidth=0;
  projectGroup.setLayout(layout);
  projectGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  logsFromArchiveRadio=new Button(projectGroup,SWT.RADIO);
  logsFromArchiveRadio.setText(DataTransferMessages.WizardProjectsImportPage_ArchiveSelectTitle);
  archivePathField=new Text(projectGroup,SWT.BORDER);
  archivePathField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL));
  browseArchivesButton=new Button(projectGroup,SWT.PUSH);
  browseArchivesButton.setText(DataTransferMessages.DataTransfer_browse);
  setButtonLayoutData(browseArchivesButton);
  archivePathField.setEnabled(false);
  browseArchivesButton.setEnabled(false);
  browseArchivesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      handleLocationArchiveButtonPressed();
    }
  }
);
  archivePathField.addTraverseListener(new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (e.detail == SWT.TRAVERSE_RETURN) {
        e.doit=false;
        lastPath=archivePathField.getText().trim();
      }
    }
  }
);
  archivePathField.addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    org.eclipse.swt.events.FocusEvent e){
      lastPath=archivePathField.getText().trim();
    }
  }
);
  logsFromArchiveRadio.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      archiveRadioSelected();
    }
  }
);
  label=new Label(workArea,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  addLogsButton=new Button(workArea,SWT.CHECK);
  addLogsButton.setSelection(true);
  addLogsButton.setText(Messages.getString(""String_Node_Str""));
  sysConfigButton=new Button(workArea,SWT.CHECK);
  sysConfigButton.setSelection(true);
  sysConfigButton.setText(Messages.getString(""String_Node_Str""));
  addLogsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (addLogsButton.getSelection() == false && sysConfigButton.getSelection() == false) {
        setPageComplete(false);
      }
 else {
        setPageComplete(true);
      }
    }
  }
);
  sysConfigButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (addLogsButton.getSelection() == false && sysConfigButton.getSelection() == false) {
        setPageComplete(false);
      }
 else {
        setPageComplete(true);
      }
    }
  }
);
}",0.8494176372712147
127707,"@Override public void widgetSelected(SelectionEvent e){
  archiveRadioSelected();
}","@Override public void widgetSelected(SelectionEvent e){
  if (addLogsButton.getSelection() == false && sysConfigButton.getSelection() == false) {
    setPageComplete(false);
  }
 else {
    setPageComplete(true);
  }
}",0.4186046511627907
127708,"private void exportSysconfig(File dest){
  MemoryMXBean memoryMXBean=ManagementFactory.getMemoryMXBean();
  MemoryUsage memoryUsage=memoryMXBean.getHeapMemoryUsage();
  MemoryUsage memoryNoHeapUsage=memoryMXBean.getNonHeapMemoryUsage();
  long used=memoryUsage.getUsed() / (1024 * 1024);
  String usedMemo=String.valueOf(used) + ""String_Node_Str"";
  long max=memoryUsage.getMax() / (1024 * 1024);
  String maxMemo=String.valueOf(max) + ""String_Node_Str"";
  long committed=memoryUsage.getCommitted() / (1024 * 1024);
  String committedMemo=String.valueOf(committed) + ""String_Node_Str"";
  long noHeapUsed=memoryNoHeapUsage.getUsed() / (1024 * 1024);
  String noHeapUsedMemo=String.valueOf(noHeapUsed) + ""String_Node_Str"";
  long noHeapMaxUnUsed=memoryNoHeapUsage.getMax() / (1024 * 1024);
  String noHeapMaxUnUsedMemo=String.valueOf(noHeapMaxUnUsed) + ""String_Node_Str"";
  long noHeapCommitted=memoryNoHeapUsage.getCommitted() / (1024 * 1024);
  String noHeapCommittedMemo=String.valueOf(noHeapCommitted) + ""String_Node_Str"";
  OperatingSystemMXBean osmxb=(OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
  long totalPhysicalMemo=osmxb.getTotalPhysicalMemorySize() / (1024 * 1024);
  String totalPhysicalMemorySize=String.valueOf(totalPhysicalMemo) + ""String_Node_Str"";
  long freePhysicalMemo=osmxb.getFreePhysicalMemorySize() / (1024 * 1024);
  String freePhysicalMemorySize=String.valueOf(freePhysicalMemo) + ""String_Node_Str"";
  ThreadGroup parentThread;
  for (parentThread=Thread.currentThread().getThreadGroup(); parentThread.getParent() != null; parentThread=parentThread.getParent())   ;
  int totalThread=parentThread.activeCount();
  String totalThreadCount=String.valueOf(totalThread);
  String osName=System.getProperty(""String_Node_Str"");
  int cpuRatio=0;
  if (osName.toLowerCase().startsWith(""String_Node_Str"")) {
    cpuRatio=(int)this.getCpuRatioForWindows();
  }
  String cpuUsed=String.valueOf(cpuRatio) + ""String_Node_Str"";
  StringBuffer sb=new StringBuffer();
  Properties p=new Properties();
  p.putAll(System.getProperties());
  sb.append(""String_Node_Str"");
  for (  Entry<Object,Object> en : p.entrySet()) {
    sb.append(en.getKey() + ""String_Node_Str"" + en.getValue()+ ""String_Node_Str"");
  }
  p.clear();
  p.put(""String_Node_Str"",cpuUsed);
  p.put(""String_Node_Str"",totalThreadCount);
  p.put(""String_Node_Str"",totalPhysicalMemorySize);
  p.put(""String_Node_Str"",freePhysicalMemorySize);
  p.put(""String_Node_Str"",usedMemo);
  p.put(""String_Node_Str"",maxMemo);
  p.put(""String_Node_Str"",committedMemo);
  p.put(""String_Node_Str"",noHeapUsedMemo);
  p.put(""String_Node_Str"",noHeapMaxUnUsedMemo);
  p.put(""String_Node_Str"",noHeapCommittedMemo);
  sb.append(""String_Node_Str"");
  for (  Entry<Object,Object> en : p.entrySet()) {
    sb.append(en.getKey() + ""String_Node_Str"" + en.getValue()+ ""String_Node_Str"");
  }
  String zipFile=dest.getAbsolutePath();
  String tmpFolder=JavaJobExportReArchieveCreator.getTmpFolder();
  String destFile=new File(tmpFolder + File.separator + new File(""String_Node_Str"")).getAbsolutePath();
  FileOutputStream out=null;
  try {
    out=new FileOutputStream(destFile);
    out.write(sb.toString().getBytes());
    out.flush();
    if (!addLogsButton.getSelection()) {
      ZipToFile.zipFile(tmpFolder,zipFile);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    try {
      if (out != null)       out.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","private void exportSysconfig(File dest){
  MemoryMXBean memoryMXBean=ManagementFactory.getMemoryMXBean();
  MemoryUsage memoryUsage=memoryMXBean.getHeapMemoryUsage();
  MemoryUsage memoryNoHeapUsage=memoryMXBean.getNonHeapMemoryUsage();
  long used=memoryUsage.getUsed() / (1024 * 1024);
  String usedMemo=String.valueOf(used) + ""String_Node_Str"";
  long max=memoryUsage.getMax() / (1024 * 1024);
  String maxMemo=String.valueOf(max) + ""String_Node_Str"";
  long committed=memoryUsage.getCommitted() / (1024 * 1024);
  String committedMemo=String.valueOf(committed) + ""String_Node_Str"";
  long noHeapUsed=memoryNoHeapUsage.getUsed() / (1024 * 1024);
  String noHeapUsedMemo=String.valueOf(noHeapUsed) + ""String_Node_Str"";
  long noHeapMaxUnUsed=memoryNoHeapUsage.getMax() / (1024 * 1024);
  String noHeapMaxUnUsedMemo=String.valueOf(noHeapMaxUnUsed) + ""String_Node_Str"";
  long noHeapCommitted=memoryNoHeapUsage.getCommitted() / (1024 * 1024);
  String noHeapCommittedMemo=String.valueOf(noHeapCommitted) + ""String_Node_Str"";
  OperatingSystemMXBean osmxb=(OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
  long totalPhysicalMemo=osmxb.getTotalPhysicalMemorySize() / (1024 * 1024);
  String totalPhysicalMemorySize=String.valueOf(totalPhysicalMemo) + ""String_Node_Str"";
  long freePhysicalMemo=osmxb.getFreePhysicalMemorySize() / (1024 * 1024);
  String freePhysicalMemorySize=String.valueOf(freePhysicalMemo) + ""String_Node_Str"";
  ThreadGroup parentThread;
  for (parentThread=Thread.currentThread().getThreadGroup(); parentThread.getParent() != null; parentThread=parentThread.getParent()) {
    ;
  }
  int totalThread=parentThread.activeCount();
  String totalThreadCount=String.valueOf(totalThread);
  String osName=System.getProperty(""String_Node_Str"");
  int cpuRatio=0;
  if (osName.toLowerCase().startsWith(""String_Node_Str"")) {
    cpuRatio=(int)this.getCpuRatioForWindows();
  }
  String cpuUsed=String.valueOf(cpuRatio) + ""String_Node_Str"";
  StringBuffer sb=new StringBuffer();
  Properties p=new Properties();
  p.putAll(System.getProperties());
  sb.append(""String_Node_Str"");
  for (  Entry<Object,Object> en : p.entrySet()) {
    sb.append(en.getKey() + ""String_Node_Str"" + en.getValue()+ ""String_Node_Str"");
  }
  p.clear();
  p.put(""String_Node_Str"",cpuUsed);
  p.put(""String_Node_Str"",totalThreadCount);
  p.put(""String_Node_Str"",totalPhysicalMemorySize);
  p.put(""String_Node_Str"",freePhysicalMemorySize);
  p.put(""String_Node_Str"",usedMemo);
  p.put(""String_Node_Str"",maxMemo);
  p.put(""String_Node_Str"",committedMemo);
  p.put(""String_Node_Str"",noHeapUsedMemo);
  p.put(""String_Node_Str"",noHeapMaxUnUsedMemo);
  p.put(""String_Node_Str"",noHeapCommittedMemo);
  sb.append(""String_Node_Str"");
  for (  Entry<Object,Object> en : p.entrySet()) {
    sb.append(en.getKey() + ""String_Node_Str"" + en.getValue()+ ""String_Node_Str"");
  }
  String zipFile=dest.getAbsolutePath();
  String tmpFolder=JavaJobExportReArchieveCreator.getTmpFolder();
  String destFile=new File(tmpFolder + File.separator + new File(""String_Node_Str"")).getAbsolutePath();
  FileOutputStream out=null;
  try {
    out=new FileOutputStream(destFile);
    out.write(sb.toString().getBytes());
    out.flush();
    if (!addLogsButton.getSelection()) {
      ZipToFile.zipFile(tmpFolder,zipFile);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    try {
      if (out != null) {
        out.close();
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.9911529680365296
127709,"public void keyTraversed(TraverseEvent e){
  if (e.detail == SWT.TRAVERSE_RETURN) {
    e.doit=false;
    lastPath=archivePathField.getText().trim();
  }
}","@Override public void keyTraversed(TraverseEvent e){
  if (e.detail == SWT.TRAVERSE_RETURN) {
    e.doit=false;
    lastPath=archivePathField.getText().trim();
  }
}",0.96875
127710,"public void createControl(Composite parent){
  Composite workArea=new Composite(parent,SWT.NONE);
  setControl(workArea);
  workArea.setLayout(new GridLayout());
  workArea.setLayoutData(new GridData(GridData.FILL_BOTH | GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL));
  createLogsRoot(workArea);
}","@Override public void createControl(Composite parent){
  Composite workArea=new Composite(parent,SWT.NONE);
  setControl(workArea);
  workArea.setLayout(new GridLayout());
  workArea.setLayoutData(new GridData(GridData.FILL_BOTH | GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL));
  createLogsRoot(workArea);
}",0.9837662337662336
127711,"@Override public void createContent(String id,Element parent){
  String dBranding=""String_Node_Str"";
  String branding=System.getProperty(""String_Node_Str"");
  if (branding == null || ""String_Node_Str"".equals(branding)) {
    branding=dBranding;
  }
  Document dom=parent.getOwnerDocument();
  String imgBrandingPath=""String_Node_Str"";
  String imgCommonPath=""String_Node_Str"";
  String content=dom.getBaseURI();
  if (content != null && !""String_Node_Str"".equals(content)) {
    File file=new File(content);
    int index=content.indexOf(file.getName());
    imgBrandingPath=content.substring(0,index) + ""String_Node_Str"" + branding;
    imgCommonPath=content.substring(0,index);
  }
  List<IRepositoryViewObject> latestItems=new ArrayList<IRepositoryViewObject>();
  String url=""String_Node_Str"";
  if (""String_Node_Str"".equals(id)) {
    Element img=dom.createElement(""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",imgBrandingPath + ""String_Node_Str"");
    parent.appendChild(img);
  }
 else   if (""String_Node_Str"".equals(id)) {
    Element img=dom.createElement(""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",imgBrandingPath + ""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",""String_Node_Str"");
    parent.appendChild(img);
  }
 else   if (ERepositoryObjectType.PROCESS != null && ERepositoryObjectType.PROCESS.name().equals(id)) {
    Element span=dom.createElement(""String_Node_Str"");
    span.setAttribute(""String_Node_Str"",""String_Node_Str"");
    span.appendChild(dom.createTextNode(Messages.getString(""String_Node_Str"")));
    parent.appendChild(span);
    span.appendChild(dom.createElement(""String_Node_Str""));
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    latestItems=getLatestModifiedItems(ERepositoryObjectType.PROCESS,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (ERepositoryObjectType.BUSINESS_PROCESS != null && ERepositoryObjectType.BUSINESS_PROCESS.name().equals(id)) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    latestItems=getLatestModifiedItems(ERepositoryObjectType.BUSINESS_PROCESS,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id) && isItemShow(""String_Node_Str"")) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    latestItems=getLatestModifiedItems(ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id) && isItemShow(""String_Node_Str"")) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    ERepositoryObjectType repositoryServicesType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"");
    latestItems=getLatestModifiedItems(repositoryServicesType,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id) && isItemShow(""String_Node_Str"")) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    ERepositoryObjectType repositoryRoutesType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"");
    latestItems=getLatestModifiedItems(repositoryRoutesType,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id)) {
    IPreferenceStore store=CorePlugin.getDefault().getPreferenceStore();
    boolean showIntroConfig=store.getBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME);
    url=""String_Node_Str"" + ""String_Node_Str"";
    Element input=dom.createElement(""String_Node_Str"");
    input.setAttribute(""String_Node_Str"",""String_Node_Str"");
    if (!showIntroConfig) {
      input.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    input.setAttribute(""String_Node_Str"",url);
    input.appendChild(dom.createTextNode(Messages.getString(""String_Node_Str"")));
    parent.appendChild(input);
  }
 else   if (""String_Node_Str"".equals(id)) {
    createOnlinePage(dom,parent);
  }
 else   if (""String_Node_Str"".equals(id)) {
    Element td=dom.createElement(""String_Node_Str"");
    setTDStyle(td);
    parent.appendChild(td);
    Element divRight=dom.createElement(""String_Node_Str"");
    divRight.setAttribute(""String_Node_Str"",""String_Node_Str"");
    td.appendChild(divRight);
    parent=divRight;
    createTitlePart(dom,parent,Messages.getString(""String_Node_Str""));
    String text=Messages.getString(""String_Node_Str"");
    url=""String_Node_Str"";
    String title=""String_Node_Str"";
    createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    text=Messages.getString(""String_Node_Str"");
    url=""String_Node_Str"";
    title=""String_Node_Str"";
    createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    if (isItemShow(""String_Node_Str"")) {
      text=Messages.getString(""String_Node_Str"");
      url=""String_Node_Str"";
      title=""String_Node_Str"";
      createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    }
    if (isItemShow(""String_Node_Str"")) {
      text=Messages.getString(""String_Node_Str"");
      url=""String_Node_Str"";
      title=""String_Node_Str"";
      createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    }
    if (isItemShow(""String_Node_Str"")) {
      text=Messages.getString(""String_Node_Str"");
      url=""String_Node_Str"";
      title=""String_Node_Str"";
      createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    }
    title=Messages.getString(""String_Node_Str"");
    String talendHelpCenter=Messages.getString(""String_Node_Str"");
    String docForDownload=Messages.getString(""String_Node_Str"");
    String[] hyperlinkText=new String[]{talendHelpCenter,docForDownload};
    String[] urls=new String[]{BROWSER_URL + ""String_Node_Str"",BROWSER_URL + ""String_Node_Str""};
    String[] extTexts=new String[2];
    parent.appendChild(dom.createElement(""String_Node_Str""));
    createFixedPart(dom,parent,title,hyperlinkText,urls,extTexts);
    title=Messages.getString(""String_Node_Str"");
    String hTutorial=Messages.getString(""String_Node_Str"");
    String hforum=Messages.getString(""String_Node_Str"");
    String hTrainning=Messages.getString(""String_Node_Str"");
    hyperlinkText=new String[]{hTutorial,hforum,hTrainning};
    urls=new String[]{BROWSER_URL + ""String_Node_Str"",BROWSER_URL + ""String_Node_Str"",BROWSER_URL + ""String_Node_Str""};
    String extTutorial=""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    String extforum=""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    String extTrainning=""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    extTexts=new String[]{extTutorial,extforum,extTrainning};
    createFixedPart(dom,parent,title,hyperlinkText,urls,extTexts);
    Element imgP=dom.createElement(""String_Node_Str"");
    imgP.setAttribute(""String_Node_Str"",""String_Node_Str"");
    parent.appendChild(imgP);
    Element imgLink=dom.createElement(""String_Node_Str"");
    imgLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
    imgP.appendChild(imgLink);
    Element img=dom.createElement(""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",imgCommonPath + ""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",""String_Node_Str"");
    imgLink.appendChild(img);
  }
  for (int i=0; i < latestItems.size(); i++) {
    IRepositoryViewObject object=latestItems.get(i);
    Element hyperlink=dom.createElement(""String_Node_Str"");
    hyperlink.setAttribute(""String_Node_Str"",""String_Node_Str"");
    hyperlink.setAttribute(""String_Node_Str"",url + object.getId());
    hyperlink.setAttribute(""String_Node_Str"",""String_Node_Str"" + object.getModificationDate() + ""String_Node_Str""+ object.getAuthor()+ ""String_Node_Str""+ ""String_Node_Str""+ object.getCreationDate()+ ""String_Node_Str""+ object.getAuthor());
    hyperlink.appendChild(dom.createTextNode(object.getLabel() + ""String_Node_Str"" + object.getVersion()));
    parent.appendChild(hyperlink);
    if (i != latestItems.size() - 1) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
}","@Override public void createContent(String id,Element parent){
  String dBranding=""String_Node_Str"";
  String branding=System.getProperty(""String_Node_Str"");
  if (branding == null || ""String_Node_Str"".equals(branding)) {
    branding=dBranding;
  }
  Document dom=parent.getOwnerDocument();
  String imgBrandingPath=""String_Node_Str"";
  String imgCommonPath=""String_Node_Str"";
  String content=dom.getDocumentURI();
  if (content != null && !""String_Node_Str"".equals(content)) {
    File file=new File(content);
    int index=content.indexOf(file.getName());
    imgBrandingPath=content.substring(0,index) + ""String_Node_Str"" + branding;
    imgCommonPath=content.substring(0,index);
  }
  List<IRepositoryViewObject> latestItems=new ArrayList<IRepositoryViewObject>();
  String url=""String_Node_Str"";
  if (""String_Node_Str"".equals(id)) {
    Element img=dom.createElement(""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",imgBrandingPath + ""String_Node_Str"");
    parent.appendChild(img);
  }
 else   if (""String_Node_Str"".equals(id)) {
    Element img=dom.createElement(""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",imgBrandingPath + ""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",""String_Node_Str"");
    parent.appendChild(img);
  }
 else   if (ERepositoryObjectType.PROCESS != null && ERepositoryObjectType.PROCESS.name().equals(id)) {
    Element span=dom.createElement(""String_Node_Str"");
    span.setAttribute(""String_Node_Str"",""String_Node_Str"");
    span.appendChild(dom.createTextNode(Messages.getString(""String_Node_Str"")));
    parent.appendChild(span);
    span.appendChild(dom.createElement(""String_Node_Str""));
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    latestItems=getLatestModifiedItems(ERepositoryObjectType.PROCESS,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (ERepositoryObjectType.BUSINESS_PROCESS != null && ERepositoryObjectType.BUSINESS_PROCESS.name().equals(id)) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    latestItems=getLatestModifiedItems(ERepositoryObjectType.BUSINESS_PROCESS,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id) && isItemShow(""String_Node_Str"")) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    latestItems=getLatestModifiedItems(ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id) && isItemShow(""String_Node_Str"")) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    ERepositoryObjectType repositoryServicesType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"");
    latestItems=getLatestModifiedItems(repositoryServicesType,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id) && isItemShow(""String_Node_Str"")) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    ERepositoryObjectType repositoryRoutesType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"");
    latestItems=getLatestModifiedItems(repositoryRoutesType,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id)) {
    IPreferenceStore store=CorePlugin.getDefault().getPreferenceStore();
    boolean showIntroConfig=store.getBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME);
    url=""String_Node_Str"" + ""String_Node_Str"";
    Element input=dom.createElement(""String_Node_Str"");
    input.setAttribute(""String_Node_Str"",""String_Node_Str"");
    if (!showIntroConfig) {
      input.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    input.setAttribute(""String_Node_Str"",url);
    input.appendChild(dom.createTextNode(Messages.getString(""String_Node_Str"")));
    parent.appendChild(input);
  }
 else   if (""String_Node_Str"".equals(id)) {
    createOnlinePage(dom,parent);
  }
 else   if (""String_Node_Str"".equals(id)) {
    Element td=dom.createElement(""String_Node_Str"");
    setTDStyle(td);
    parent.appendChild(td);
    Element divRight=dom.createElement(""String_Node_Str"");
    divRight.setAttribute(""String_Node_Str"",""String_Node_Str"");
    td.appendChild(divRight);
    parent=divRight;
    createTitlePart(dom,parent,Messages.getString(""String_Node_Str""));
    String text=Messages.getString(""String_Node_Str"");
    url=""String_Node_Str"";
    String title=""String_Node_Str"";
    createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    text=Messages.getString(""String_Node_Str"");
    url=""String_Node_Str"";
    title=""String_Node_Str"";
    createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    if (isItemShow(""String_Node_Str"")) {
      text=Messages.getString(""String_Node_Str"");
      url=""String_Node_Str"";
      title=""String_Node_Str"";
      createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    }
    if (isItemShow(""String_Node_Str"")) {
      text=Messages.getString(""String_Node_Str"");
      url=""String_Node_Str"";
      title=""String_Node_Str"";
      createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    }
    if (isItemShow(""String_Node_Str"")) {
      text=Messages.getString(""String_Node_Str"");
      url=""String_Node_Str"";
      title=""String_Node_Str"";
      createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    }
    title=Messages.getString(""String_Node_Str"");
    String talendHelpCenter=Messages.getString(""String_Node_Str"");
    String docForDownload=Messages.getString(""String_Node_Str"");
    String[] hyperlinkText=new String[]{talendHelpCenter,docForDownload};
    String[] urls=new String[]{BROWSER_URL + ""String_Node_Str"",BROWSER_URL + ""String_Node_Str""};
    String[] extTexts=new String[2];
    parent.appendChild(dom.createElement(""String_Node_Str""));
    createFixedPart(dom,parent,title,hyperlinkText,urls,extTexts);
    title=Messages.getString(""String_Node_Str"");
    String hTutorial=Messages.getString(""String_Node_Str"");
    String hforum=Messages.getString(""String_Node_Str"");
    String hTrainning=Messages.getString(""String_Node_Str"");
    hyperlinkText=new String[]{hTutorial,hforum,hTrainning};
    urls=new String[]{BROWSER_URL + ""String_Node_Str"",BROWSER_URL + ""String_Node_Str"",BROWSER_URL + ""String_Node_Str""};
    String extTutorial=""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    String extforum=""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    String extTrainning=""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    extTexts=new String[]{extTutorial,extforum,extTrainning};
    createFixedPart(dom,parent,title,hyperlinkText,urls,extTexts);
    Element imgP=dom.createElement(""String_Node_Str"");
    imgP.setAttribute(""String_Node_Str"",""String_Node_Str"");
    parent.appendChild(imgP);
    Element imgLink=dom.createElement(""String_Node_Str"");
    imgLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
    imgP.appendChild(imgLink);
    Element img=dom.createElement(""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",imgCommonPath + ""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",""String_Node_Str"");
    imgLink.appendChild(img);
  }
  for (int i=0; i < latestItems.size(); i++) {
    IRepositoryViewObject object=latestItems.get(i);
    Element hyperlink=dom.createElement(""String_Node_Str"");
    hyperlink.setAttribute(""String_Node_Str"",""String_Node_Str"");
    hyperlink.setAttribute(""String_Node_Str"",url + object.getId());
    hyperlink.setAttribute(""String_Node_Str"",""String_Node_Str"" + object.getModificationDate() + ""String_Node_Str""+ object.getAuthor()+ ""String_Node_Str""+ ""String_Node_Str""+ object.getCreationDate()+ ""String_Node_Str""+ object.getAuthor());
    hyperlink.appendChild(dom.createTextNode(object.getLabel() + ""String_Node_Str"" + object.getVersion()));
    parent.appendChild(hyperlink);
    if (i != latestItems.size() - 1) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
}",0.9993393525655142
127712,"protected void deleteElements(final IProxyRepositoryFactory factory,final RepositoryNode currentNode) throws PersistenceException, BusinessException {
  final IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      factory.save(item);
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          for (          IEditorReference editors : page.getEditorReferences()) {
            String nameInEditor=editors.getName();
            if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
              page.closeEditor(editors.getEditor(false),false);
            }
          }
          if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
            if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
              for (              IRepositoryNode curNode : currentNode.getChildren()) {
                deleteElements(factory,(RepositoryNode)curNode);
              }
              factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
            }
 else {
              for (              IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
                handler.deleteNode(objToDelete);
              }
              factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
            }
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
}","protected void deleteElements(final IProxyRepositoryFactory factory,final RepositoryNode currentNode) throws PersistenceException, BusinessException {
  if (!validElement(currentNode)) {
    return;
  }
  final IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      factory.save(item);
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          for (          IEditorReference editors : page.getEditorReferences()) {
            String nameInEditor=editors.getName();
            if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
              page.closeEditor(editors.getEditor(false),false);
            }
          }
          if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
            if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
              for (              IRepositoryNode curNode : currentNode.getChildren()) {
                deleteElements(factory,(RepositoryNode)curNode);
              }
              factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
            }
 else {
              for (              IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
                handler.deleteNode(objToDelete);
              }
              factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
            }
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
}",0.9882724402345512
127713,"@Override public void run(){
  FOXTreeNode node=(FOXTreeNode)this.getStructuredSelection().getFirstElement();
  if (createChildNode(node)) {
    form.redrawLinkers();
  }
  form.updateConnection();
  form.updateStatus();
}","@Override public void run(){
  FOXTreeNode node=(FOXTreeNode)this.getStructuredSelection().getFirstElement();
  if (node != null && createChildNode(node)) {
    form.redrawLinkers();
  }
  form.updateConnection();
  form.updateStatus();
}",0.9652173913043478
127714,"@Override public Object getComponentValue(Connection connection,String value,IMetadataTable table){
  if (value != null && canHandle(connection)) {
    ExampleDemoConnection demoConn=(ExampleDemoConnection)connection;
    if (""String_Node_Str"".equals(value)) {
      return Boolean.TRUE;
    }
 else     if (""String_Node_Str"".equals(value)) {
      return ""String_Node_Str"";
    }
  }
  return null;
}","@Override public Object getComponentValue(Connection connection,String value,IMetadataTable table,String targetComponent){
  return null;
}",0.4814814814814814
127715,"@Override public void createContent(String id,Element parent){
  String dBranding=""String_Node_Str"";
  String branding=System.getProperty(""String_Node_Str"");
  if (branding == null || ""String_Node_Str"".equals(branding)) {
    branding=dBranding;
  }
  Document dom=parent.getOwnerDocument();
  String imgBrandingPath=""String_Node_Str"";
  String imgCommonPath=""String_Node_Str"";
  String content=dom.getBaseURI();
  if (content != null && !""String_Node_Str"".equals(content)) {
    File file=new File(content);
    int index=content.indexOf(file.getName());
    imgBrandingPath=content.substring(0,index) + ""String_Node_Str"" + branding;
    imgCommonPath=content.substring(0,index);
  }
  List<IRepositoryViewObject> latestItems=new ArrayList<IRepositoryViewObject>();
  String url=""String_Node_Str"";
  if (""String_Node_Str"".equals(id)) {
    Element img=dom.createElement(""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",imgBrandingPath + ""String_Node_Str"");
    parent.appendChild(img);
  }
 else   if (""String_Node_Str"".equals(id)) {
    Element img=dom.createElement(""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",imgBrandingPath + ""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",""String_Node_Str"");
    parent.appendChild(img);
  }
 else   if (ERepositoryObjectType.PROCESS.name().equals(id)) {
    Element span=dom.createElement(""String_Node_Str"");
    span.setAttribute(""String_Node_Str"",""String_Node_Str"");
    span.appendChild(dom.createTextNode(Messages.getString(""String_Node_Str"")));
    parent.appendChild(span);
    span.appendChild(dom.createElement(""String_Node_Str""));
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    latestItems=getLatestModifiedItems(ERepositoryObjectType.PROCESS,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (ERepositoryObjectType.BUSINESS_PROCESS.name().equals(id)) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    latestItems=getLatestModifiedItems(ERepositoryObjectType.BUSINESS_PROCESS,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id) && isItemShow(""String_Node_Str"")) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    latestItems=getLatestModifiedItems(ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id) && isItemShow(""String_Node_Str"")) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    latestItems=getLatestModifiedItems(ERepositoryObjectType.SERVICESPORT,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id) && isItemShow(""String_Node_Str"")) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    ERepositoryObjectType repositoryRoutesType=(ERepositoryObjectType)ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"");
    latestItems=getLatestModifiedItems(repositoryRoutesType,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id)) {
    IPreferenceStore store=CorePlugin.getDefault().getPreferenceStore();
    boolean showIntroConfig=store.getBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME);
    url=""String_Node_Str"" + ""String_Node_Str"";
    Element input=dom.createElement(""String_Node_Str"");
    input.setAttribute(""String_Node_Str"",""String_Node_Str"");
    if (!showIntroConfig) {
      input.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    input.setAttribute(""String_Node_Str"",url);
    input.appendChild(dom.createTextNode(Messages.getString(""String_Node_Str"")));
    parent.appendChild(input);
  }
 else   if (""String_Node_Str"".equals(id)) {
    createOnlinePage(dom,parent);
  }
 else   if (""String_Node_Str"".equals(id)) {
    Element td=dom.createElement(""String_Node_Str"");
    setTDStyle(td);
    parent.appendChild(td);
    Element divRight=dom.createElement(""String_Node_Str"");
    divRight.setAttribute(""String_Node_Str"",""String_Node_Str"");
    td.appendChild(divRight);
    parent=divRight;
    createTitlePart(dom,parent,Messages.getString(""String_Node_Str""));
    String text=Messages.getString(""String_Node_Str"");
    url=""String_Node_Str"";
    String title=""String_Node_Str"";
    createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    text=Messages.getString(""String_Node_Str"");
    url=""String_Node_Str"";
    title=""String_Node_Str"";
    createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    if (isItemShow(""String_Node_Str"")) {
      text=Messages.getString(""String_Node_Str"");
      url=""String_Node_Str"";
      title=""String_Node_Str"";
      createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    }
    if (isItemShow(""String_Node_Str"")) {
      text=Messages.getString(""String_Node_Str"");
      url=""String_Node_Str"";
      title=""String_Node_Str"";
      createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    }
    if (isItemShow(""String_Node_Str"")) {
      text=Messages.getString(""String_Node_Str"");
      url=""String_Node_Str"";
      title=""String_Node_Str"";
      createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    }
    title=Messages.getString(""String_Node_Str"");
    String userManuals=Messages.getString(""String_Node_Str"");
    String[] hyperlinkText=new String[]{userManuals};
    String[] urls=new String[]{BROWSER_URL + ""String_Node_Str""};
    String[] extTexts=new String[1];
    parent.appendChild(dom.createElement(""String_Node_Str""));
    createFixedPart(dom,parent,title,hyperlinkText,urls,extTexts);
    title=Messages.getString(""String_Node_Str"");
    String hTutorial=Messages.getString(""String_Node_Str"");
    String hforum=Messages.getString(""String_Node_Str"");
    String hExchange=Messages.getString(""String_Node_Str"");
    hyperlinkText=new String[]{hTutorial,hforum,hExchange};
    urls=new String[]{BROWSER_URL + ""String_Node_Str"",BROWSER_URL + ""String_Node_Str"",BROWSER_URL + ""String_Node_Str""};
    String extTutorial=""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    String extforum=""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    String extExchange=""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    extTexts=new String[]{extTutorial,extforum,extExchange};
    createFixedPart(dom,parent,title,hyperlinkText,urls,extTexts);
    Element imgP=dom.createElement(""String_Node_Str"");
    imgP.setAttribute(""String_Node_Str"",""String_Node_Str"");
    parent.appendChild(imgP);
    Element imgLink=dom.createElement(""String_Node_Str"");
    imgLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
    imgP.appendChild(imgLink);
    Element img=dom.createElement(""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",imgCommonPath + ""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",""String_Node_Str"");
    imgLink.appendChild(img);
  }
  for (int i=0; i < latestItems.size(); i++) {
    IRepositoryViewObject object=latestItems.get(i);
    Element hyperlink=dom.createElement(""String_Node_Str"");
    hyperlink.setAttribute(""String_Node_Str"",""String_Node_Str"");
    hyperlink.setAttribute(""String_Node_Str"",url + object.getId());
    hyperlink.setAttribute(""String_Node_Str"",""String_Node_Str"" + object.getModificationDate() + ""String_Node_Str""+ object.getAuthor()+ ""String_Node_Str""+ ""String_Node_Str""+ object.getCreationDate()+ ""String_Node_Str""+ object.getAuthor());
    hyperlink.appendChild(dom.createTextNode(object.getLabel() + ""String_Node_Str"" + object.getVersion()));
    parent.appendChild(hyperlink);
    if (i != latestItems.size() - 1) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
}","@Override public void createContent(String id,Element parent){
  String dBranding=""String_Node_Str"";
  String branding=System.getProperty(""String_Node_Str"");
  if (branding == null || ""String_Node_Str"".equals(branding)) {
    branding=dBranding;
  }
  Document dom=parent.getOwnerDocument();
  String imgBrandingPath=""String_Node_Str"";
  String imgCommonPath=""String_Node_Str"";
  String content=dom.getDocumentURI();
  if (content != null && !""String_Node_Str"".equals(content)) {
    File file=new File(content);
    int index=content.indexOf(file.getName());
    imgBrandingPath=content.substring(0,index) + ""String_Node_Str"" + branding;
    imgCommonPath=content.substring(0,index);
  }
  List<IRepositoryViewObject> latestItems=new ArrayList<IRepositoryViewObject>();
  String url=""String_Node_Str"";
  if (""String_Node_Str"".equals(id)) {
    Element img=dom.createElement(""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",imgBrandingPath + ""String_Node_Str"");
    parent.appendChild(img);
  }
 else   if (""String_Node_Str"".equals(id)) {
    Element img=dom.createElement(""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",imgBrandingPath + ""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",""String_Node_Str"");
    parent.appendChild(img);
  }
 else   if (ERepositoryObjectType.PROCESS.name().equals(id)) {
    Element span=dom.createElement(""String_Node_Str"");
    span.setAttribute(""String_Node_Str"",""String_Node_Str"");
    span.appendChild(dom.createTextNode(Messages.getString(""String_Node_Str"")));
    parent.appendChild(span);
    span.appendChild(dom.createElement(""String_Node_Str""));
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    latestItems=getLatestModifiedItems(ERepositoryObjectType.PROCESS,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (ERepositoryObjectType.BUSINESS_PROCESS.name().equals(id)) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    latestItems=getLatestModifiedItems(ERepositoryObjectType.BUSINESS_PROCESS,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id) && isItemShow(""String_Node_Str"")) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    latestItems=getLatestModifiedItems(ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id) && isItemShow(""String_Node_Str"")) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    latestItems=getLatestModifiedItems(ERepositoryObjectType.SERVICESPORT,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id) && isItemShow(""String_Node_Str"")) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    ERepositoryObjectType repositoryRoutesType=(ERepositoryObjectType)ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"");
    latestItems=getLatestModifiedItems(repositoryRoutesType,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id)) {
    IPreferenceStore store=CorePlugin.getDefault().getPreferenceStore();
    boolean showIntroConfig=store.getBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME);
    url=""String_Node_Str"" + ""String_Node_Str"";
    Element input=dom.createElement(""String_Node_Str"");
    input.setAttribute(""String_Node_Str"",""String_Node_Str"");
    if (!showIntroConfig) {
      input.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    input.setAttribute(""String_Node_Str"",url);
    input.appendChild(dom.createTextNode(Messages.getString(""String_Node_Str"")));
    parent.appendChild(input);
  }
 else   if (""String_Node_Str"".equals(id)) {
    createOnlinePage(dom,parent);
  }
 else   if (""String_Node_Str"".equals(id)) {
    Element td=dom.createElement(""String_Node_Str"");
    setTDStyle(td);
    parent.appendChild(td);
    Element divRight=dom.createElement(""String_Node_Str"");
    divRight.setAttribute(""String_Node_Str"",""String_Node_Str"");
    td.appendChild(divRight);
    parent=divRight;
    createTitlePart(dom,parent,Messages.getString(""String_Node_Str""));
    String text=Messages.getString(""String_Node_Str"");
    url=""String_Node_Str"";
    String title=""String_Node_Str"";
    createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    text=Messages.getString(""String_Node_Str"");
    url=""String_Node_Str"";
    title=""String_Node_Str"";
    createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    if (isItemShow(""String_Node_Str"")) {
      text=Messages.getString(""String_Node_Str"");
      url=""String_Node_Str"";
      title=""String_Node_Str"";
      createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    }
    if (isItemShow(""String_Node_Str"")) {
      text=Messages.getString(""String_Node_Str"");
      url=""String_Node_Str"";
      title=""String_Node_Str"";
      createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    }
    if (isItemShow(""String_Node_Str"")) {
      text=Messages.getString(""String_Node_Str"");
      url=""String_Node_Str"";
      title=""String_Node_Str"";
      createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    }
    title=Messages.getString(""String_Node_Str"");
    String userManuals=Messages.getString(""String_Node_Str"");
    String[] hyperlinkText=new String[]{userManuals};
    String[] urls=new String[]{BROWSER_URL + ""String_Node_Str""};
    String[] extTexts=new String[1];
    parent.appendChild(dom.createElement(""String_Node_Str""));
    createFixedPart(dom,parent,title,hyperlinkText,urls,extTexts);
    title=Messages.getString(""String_Node_Str"");
    String hTutorial=Messages.getString(""String_Node_Str"");
    String hforum=Messages.getString(""String_Node_Str"");
    String hExchange=Messages.getString(""String_Node_Str"");
    hyperlinkText=new String[]{hTutorial,hforum,hExchange};
    urls=new String[]{BROWSER_URL + ""String_Node_Str"",BROWSER_URL + ""String_Node_Str"",BROWSER_URL + ""String_Node_Str""};
    String extTutorial=""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    String extforum=""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    String extExchange=""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    extTexts=new String[]{extTutorial,extforum,extExchange};
    createFixedPart(dom,parent,title,hyperlinkText,urls,extTexts);
    Element imgP=dom.createElement(""String_Node_Str"");
    imgP.setAttribute(""String_Node_Str"",""String_Node_Str"");
    parent.appendChild(imgP);
    Element imgLink=dom.createElement(""String_Node_Str"");
    imgLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
    imgP.appendChild(imgLink);
    Element img=dom.createElement(""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",imgCommonPath + ""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",""String_Node_Str"");
    imgLink.appendChild(img);
  }
  for (int i=0; i < latestItems.size(); i++) {
    IRepositoryViewObject object=latestItems.get(i);
    Element hyperlink=dom.createElement(""String_Node_Str"");
    hyperlink.setAttribute(""String_Node_Str"",""String_Node_Str"");
    hyperlink.setAttribute(""String_Node_Str"",url + object.getId());
    hyperlink.setAttribute(""String_Node_Str"",""String_Node_Str"" + object.getModificationDate() + ""String_Node_Str""+ object.getAuthor()+ ""String_Node_Str""+ ""String_Node_Str""+ object.getCreationDate()+ ""String_Node_Str""+ object.getAuthor());
    hyperlink.appendChild(dom.createTextNode(object.getLabel() + ""String_Node_Str"" + object.getVersion()));
    parent.appendChild(hyperlink);
    if (i != latestItems.size() - 1) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
}",0.9993160834378206
127716,"@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=false;
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IProjectRepositoryNode root=repoNode.getRoot();
    if (!merged && root instanceof ProjectRepositoryNode) {
      merged=((ProjectRepositoryNode)root).getMergeRefProject();
    }
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new Runnable(){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
        return true;
      }
    }
  }
  return false;
}","@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new Runnable(){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
      }
      return false;
    }
 else {
      return true;
    }
  }
  return false;
}",0.8274285714285714
127717,"private boolean validResourcePath(IResourceDelta delta,IPath topLevelNodeWorkspaceRelativePath,boolean refMerged){
  if (ingoreResource(delta)) {
    return false;
  }
  IResourceDelta[] affectedChildren=delta.getAffectedChildren();
  IPath path=delta.getFullPath();
  if (path != null && (affectedChildren.length == 0) && (FileConstants.PROPERTIES_EXTENSION.equals(path.getFileExtension()) || (delta instanceof IContainer))) {
    if (isMatchedPath(topLevelNodeWorkspaceRelativePath,path)) {
      return true;
    }
 else     if (refMerged) {
      path=path.removeFirstSegments(1);
      IPath relativePath=topLevelNodeWorkspaceRelativePath.removeFirstSegments(1);
      if (isMatchedPath(relativePath,path)) {
        return true;
      }
    }
  }
  if (affectedChildren != null) {
    for (    IResourceDelta child : affectedChildren) {
      if (validResourcePath(child,topLevelNodeWorkspaceRelativePath,refMerged)) {
        return true;
      }
    }
  }
  return false;
}","private boolean validResourcePath(IResourceDelta delta,IPath topLevelNodeWorkspaceRelativePath,boolean refMerged){
  if (ingoreResource(delta)) {
    return false;
  }
  IResourceDelta[] affectedChildren=delta.getAffectedChildren();
  IResource res=delta.getResource();
  IPath path=delta.getFullPath();
  boolean noChild=(affectedChildren == null || (affectedChildren.length == 0));
  if (path != null && noChild && (FileConstants.PROPERTIES_EXTENSION.equals(path.getFileExtension()) || (res instanceof IContainer))) {
    if (isMatchedPath(topLevelNodeWorkspaceRelativePath,path)) {
      return true;
    }
 else     if (refMerged) {
      if (res != null) {
        path=res.getProjectRelativePath();
      }
 else {
        path=path.removeFirstSegments(1);
      }
      IPath relativePath=topLevelNodeWorkspaceRelativePath.removeFirstSegments(1);
      if (isMatchedPath(relativePath,path)) {
        return true;
      }
    }
  }
  if (affectedChildren != null) {
    for (    IResourceDelta child : affectedChildren) {
      if (validResourcePath(child,topLevelNodeWorkspaceRelativePath,refMerged)) {
        return true;
      }
    }
  }
  return false;
}",0.8770949720670391
127718,"@Override protected void doRun(){
  ISelection selection=getSelection();
  Boolean confirm=null;
  final List<IRepositoryViewObject> connections=new ArrayList<IRepositoryViewObject>();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  Map<String,Item> procItems=new HashMap<String,Item>();
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
      if (node.getType() == ENodeType.REPOSITORY_ELEMENT && nodeType.isSubItem()) {
        Connection connection=null;
        ERepositoryObjectType parentNodeType=(ERepositoryObjectType)node.getParent().getProperties(EProperties.CONTENT_TYPE);
        if (parentNodeType == null) {
          parentNodeType=node.getParent().getParent().getObjectType();
        }
        if (parentNodeType != null) {
          types.add(parentNodeType);
        }
        ConnectionItem item=(ConnectionItem)node.getObject().getProperty().getItem();
        connection=(item).getConnection();
        ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)node.getObject();
        AbstractMetadataObject abstractMetadataObject=subRepositoryObject.getAbstractMetadataObject();
        if (abstractMetadataObject instanceof SubscriberTable) {
          return;
        }
        if (abstractMetadataObject == null) {
          return;
        }
        boolean isSave=true;
        AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
        if (resChangeService != null) {
          List<IRepositoryNode> dependentNodes=resChangeService.getDependentNodes(node);
          if (dependentNodes != null && !dependentNodes.isEmpty()) {
            resChangeService.openDependcesDialog(dependentNodes);
            isSave=false;
          }
        }
        if (isSave) {
          String sfm=null;
          String sf=null;
          EObject eContainer=abstractMetadataObject.eContainer();
          if (eContainer != null && eContainer instanceof SalesforceModuleUnitImpl) {
            sfm=((SalesforceModuleUnitImpl)eContainer).getModuleName();
            sf=abstractMetadataObject.getLabel();
          }
          if (SubItemHelper.isDeleted(abstractMetadataObject) && isSave) {
            if (confirm == null) {
              String title=Messages.getString(""String_Node_Str"");
              String message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
              confirm=(MessageDialog.openQuestion(Display.getCurrent().getActiveShell(),title,message));
            }
            if (confirm) {
              subRepositoryObject.removeFromParent();
            }
          }
 else           if (item instanceof SalesforceSchemaConnectionItem && parentNodeType.getType() != null && parentNodeType.getType().equals(""String_Node_Str"") && sfm != null && sf != null && sfm.equals(sf)) {
          }
 else {
            SubItemHelper.setDeleted(abstractMetadataObject,true);
          }
          final String id=item.getProperty().getId();
          Item tmpItem=procItems.get(id);
          if (tmpItem == null) {
            procItems.put(id,item);
          }
          connections.add(node.getObject());
        }
      }
    }
  }
  try {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    for (    String id : procItems.keySet()) {
      Item item=procItems.get(id);
      factory.save(item);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  Display.getCurrent().syncExec(new Runnable(){
    @Override public void run(){
      RepositoryManager.refreshDeletedNode(types);
    }
  }
);
  notifySQLBuilder(connections);
}","@Override protected void doRun(){
  ISelection selection=getSelection();
  Boolean confirm=null;
  final List<IRepositoryViewObject> connections=new ArrayList<IRepositoryViewObject>();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  Map<String,Item> procItems=new HashMap<String,Item>();
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
      if (node.getType() == ENodeType.REPOSITORY_ELEMENT && nodeType.isSubItem()) {
        IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
        IRepositoryViewObject nodeObject=node.getObject();
        boolean locked=false;
        if (!factory.getRepositoryContext().isEditableAsReadOnly()) {
          if (nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_OTHER || nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_USER) {
            locked=true;
          }
        }
        if ((locked || RepositoryManager.isOpenedItemInEditor(nodeObject)) && !(DELETE_FOREVER_TITLE.equals(getText()))) {
          final String title=Messages.getString(""String_Node_Str"");
          String nodeName=nodeObject.getRepositoryObjectType().getLabel();
          final String message=Messages.getString(""String_Node_Str"",nodeName);
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              MessageDialog dialog=new MessageDialog(new Shell(),title,null,message,MessageDialog.ERROR,new String[]{IDialogConstants.OK_LABEL},0);
              dialog.open();
            }
          }
);
          return;
        }
        Connection connection=null;
        ERepositoryObjectType parentNodeType=(ERepositoryObjectType)node.getParent().getProperties(EProperties.CONTENT_TYPE);
        if (parentNodeType == null) {
          parentNodeType=node.getParent().getParent().getObjectType();
        }
        if (parentNodeType != null) {
          types.add(parentNodeType);
        }
        ConnectionItem item=(ConnectionItem)node.getObject().getProperty().getItem();
        connection=(item).getConnection();
        ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)node.getObject();
        AbstractMetadataObject abstractMetadataObject=subRepositoryObject.getAbstractMetadataObject();
        if (abstractMetadataObject instanceof SubscriberTable) {
          return;
        }
        if (abstractMetadataObject == null) {
          return;
        }
        boolean isSave=true;
        AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
        if (resChangeService != null) {
          List<IRepositoryNode> dependentNodes=resChangeService.getDependentNodes(node);
          if (dependentNodes != null && !dependentNodes.isEmpty()) {
            resChangeService.openDependcesDialog(dependentNodes);
            isSave=false;
          }
        }
        if (isSave) {
          String sfm=null;
          String sf=null;
          EObject eContainer=abstractMetadataObject.eContainer();
          if (eContainer != null && eContainer instanceof SalesforceModuleUnitImpl) {
            sfm=((SalesforceModuleUnitImpl)eContainer).getModuleName();
            sf=abstractMetadataObject.getLabel();
          }
          if (SubItemHelper.isDeleted(abstractMetadataObject) && isSave) {
            if (confirm == null) {
              String title=Messages.getString(""String_Node_Str"");
              String message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
              confirm=(MessageDialog.openQuestion(Display.getCurrent().getActiveShell(),title,message));
            }
            if (confirm) {
              subRepositoryObject.removeFromParent();
            }
          }
 else           if (item instanceof SalesforceSchemaConnectionItem && parentNodeType.getType() != null && parentNodeType.getType().equals(""String_Node_Str"") && sfm != null && sf != null && sfm.equals(sf)) {
          }
 else {
            SubItemHelper.setDeleted(abstractMetadataObject,true);
          }
          final String id=item.getProperty().getId();
          Item tmpItem=procItems.get(id);
          if (tmpItem == null) {
            procItems.put(id,item);
          }
          connections.add(node.getObject());
        }
      }
    }
  }
  try {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    for (    String id : procItems.keySet()) {
      Item item=procItems.get(id);
      factory.save(item);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  Display.getCurrent().syncExec(new Runnable(){
    @Override public void run(){
      RepositoryManager.refreshDeletedNode(types);
    }
  }
);
  notifySQLBuilder(connections);
}",0.8753493571827837
127719,"@Override protected void addFields(){
  Composite mainComposite=Form.startNewGridLayout(this,2);
  addGroupDelimitedFileSettings(mainComposite,400,100);
  addGroupRowsToSkip(mainComposite,300,100);
  addGroupEscapeChar(mainComposite,400,105);
  addGroupLimit(mainComposite,300,105);
  addGroupFileViewer(this,700,200);
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
}","@Override protected void addFields(){
  Composite mainComposite=Form.startNewGridLayout(this,2);
  addGroupDelimitedFileSettings(mainComposite,400,105);
  addGroupRowsToSkip(mainComposite,300,105);
  addGroupEscapeChar(mainComposite,400,110);
  addGroupLimit(mainComposite,300,110);
  addGroupFileViewer(this,700,200);
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
}",0.9896193771626296
127720,"@Override protected void addFields(){
  Composite mainComposite=Form.startNewGridLayout(this,2);
  addGroupDelimitedFileSettings(mainComposite,280,80);
  addGroupRowsToSkip(mainComposite,300,80);
  addGroupDieOnErrorSettings(mainComposite,280,60);
  addGroupLimit(mainComposite,300,60);
  Composite mainComposite2=Form.startNewGridLayout(this,1);
  addGroupFileViewer(mainComposite2,600,200);
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
}","@Override protected void addFields(){
  Composite mainComposite=Form.startNewGridLayout(this,2);
  addGroupDelimitedFileSettings(mainComposite,280,120);
  addGroupRowsToSkip(mainComposite,300,120);
  addGroupDieOnErrorSettings(mainComposite,280,67);
  addGroupLimit(mainComposite,300,67);
  Composite mainComposite2=Form.startNewGridLayout(this,1);
  addGroupFileViewer(mainComposite2,600,200);
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
}",0.8223583460949464
127721,"@Override public void createContent(String id,Element parent){
  String dBranding=""String_Node_Str"";
  String branding=System.getProperty(""String_Node_Str"");
  if (branding == null || ""String_Node_Str"".equals(branding)) {
    branding=dBranding;
  }
  Document dom=parent.getOwnerDocument();
  String imgBrandingPath=""String_Node_Str"";
  String imgCommonPath=""String_Node_Str"";
  String content=dom.getBaseURI();
  if (content != null && !""String_Node_Str"".equals(content)) {
    File file=new File(content);
    int index=content.indexOf(file.getName());
    imgBrandingPath=content.substring(0,index) + ""String_Node_Str"" + branding;
    imgCommonPath=content.substring(0,index);
  }
  List<IRepositoryViewObject> latestItems=new ArrayList<IRepositoryViewObject>();
  String url=""String_Node_Str"";
  if (""String_Node_Str"".equals(id)) {
    Element img=dom.createElement(""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",imgBrandingPath + ""String_Node_Str"");
    parent.appendChild(img);
  }
 else   if (""String_Node_Str"".equals(id)) {
    Element img=dom.createElement(""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",imgBrandingPath + ""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",""String_Node_Str"");
    parent.appendChild(img);
  }
 else   if (ERepositoryObjectType.PROCESS != null && ERepositoryObjectType.PROCESS.name().equals(id)) {
    Element span=dom.createElement(""String_Node_Str"");
    span.setAttribute(""String_Node_Str"",""String_Node_Str"");
    span.appendChild(dom.createTextNode(Messages.getString(""String_Node_Str"")));
    parent.appendChild(span);
    span.appendChild(dom.createElement(""String_Node_Str""));
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    latestItems=getLatestModifiedItems(ERepositoryObjectType.PROCESS,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (ERepositoryObjectType.BUSINESS_PROCESS != null && ERepositoryObjectType.BUSINESS_PROCESS.name().equals(id)) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    latestItems=getLatestModifiedItems(ERepositoryObjectType.BUSINESS_PROCESS,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id) && isItemShow(""String_Node_Str"")) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    latestItems=getLatestModifiedItems(ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id) && isItemShow(""String_Node_Str"")) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    ERepositoryObjectType repositoryServicesType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"");
    latestItems=getLatestModifiedItems(repositoryServicesType,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id) && isItemShow(""String_Node_Str"")) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    ERepositoryObjectType repositoryRoutesType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"");
    latestItems=getLatestModifiedItems(repositoryRoutesType,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id)) {
    IPreferenceStore store=CorePlugin.getDefault().getPreferenceStore();
    boolean showIntroConfig=store.getBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME);
    url=""String_Node_Str"" + ""String_Node_Str"";
    Element input=dom.createElement(""String_Node_Str"");
    input.setAttribute(""String_Node_Str"",""String_Node_Str"");
    if (!showIntroConfig) {
      input.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    input.setAttribute(""String_Node_Str"",url);
    input.appendChild(dom.createTextNode(Messages.getString(""String_Node_Str"")));
    parent.appendChild(input);
  }
 else   if (""String_Node_Str"".equals(id)) {
    createOnlinePage(dom,parent);
  }
 else   if (""String_Node_Str"".equals(id)) {
    Element td=dom.createElement(""String_Node_Str"");
    setTDStyle(td);
    parent.appendChild(td);
    Element divRight=dom.createElement(""String_Node_Str"");
    divRight.setAttribute(""String_Node_Str"",""String_Node_Str"");
    td.appendChild(divRight);
    parent=divRight;
    createTitlePart(dom,parent,Messages.getString(""String_Node_Str""));
    String text=Messages.getString(""String_Node_Str"");
    url=""String_Node_Str"";
    String title=""String_Node_Str"";
    createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    text=Messages.getString(""String_Node_Str"");
    url=""String_Node_Str"";
    title=""String_Node_Str"";
    createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    if (isItemShow(""String_Node_Str"")) {
      text=Messages.getString(""String_Node_Str"");
      url=""String_Node_Str"";
      title=""String_Node_Str"";
      createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    }
    if (isItemShow(""String_Node_Str"")) {
      text=Messages.getString(""String_Node_Str"");
      url=""String_Node_Str"";
      title=""String_Node_Str"";
      createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    }
    if (isItemShow(""String_Node_Str"")) {
      text=Messages.getString(""String_Node_Str"");
      url=""String_Node_Str"";
      title=""String_Node_Str"";
      createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    }
    title=Messages.getString(""String_Node_Str"");
    String talendHelpCenter=Messages.getString(""String_Node_Str"");
    String docForDownload=Messages.getString(""String_Node_Str"");
    String[] hyperlinkText=new String[]{talendHelpCenter,docForDownload};
    String[] urls=new String[]{BROWSER_URL + ""String_Node_Str"",BROWSER_URL + ""String_Node_Str""};
    String[] extTexts=new String[2];
    parent.appendChild(dom.createElement(""String_Node_Str""));
    createFixedPart(dom,parent,title,hyperlinkText,urls,extTexts);
    title=Messages.getString(""String_Node_Str"");
    String hTutorial=Messages.getString(""String_Node_Str"");
    String hforum=Messages.getString(""String_Node_Str"");
    String hTrainning=Messages.getString(""String_Node_Str"");
    hyperlinkText=new String[]{hTutorial,hforum,hTrainning};
    urls=new String[]{BROWSER_URL + ""String_Node_Str"",BROWSER_URL + ""String_Node_Str"",BROWSER_URL + ""String_Node_Str""};
    String extTutorial=""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    String extforum=""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    String extTrainning=""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    extTexts=new String[]{extTutorial,extforum,extTrainning};
    createFixedPart(dom,parent,title,hyperlinkText,urls,extTexts);
    Element imgP=dom.createElement(""String_Node_Str"");
    imgP.setAttribute(""String_Node_Str"",""String_Node_Str"");
    parent.appendChild(imgP);
    Element imgLink=dom.createElement(""String_Node_Str"");
    imgLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
    imgP.appendChild(imgLink);
    Element img=dom.createElement(""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",imgCommonPath + ""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",""String_Node_Str"");
    imgLink.appendChild(img);
  }
  for (int i=0; i < latestItems.size(); i++) {
    IRepositoryViewObject object=latestItems.get(i);
    Element hyperlink=dom.createElement(""String_Node_Str"");
    hyperlink.setAttribute(""String_Node_Str"",""String_Node_Str"");
    hyperlink.setAttribute(""String_Node_Str"",url + object.getId());
    hyperlink.setAttribute(""String_Node_Str"",""String_Node_Str"" + object.getModificationDate() + ""String_Node_Str""+ object.getAuthor()+ ""String_Node_Str""+ ""String_Node_Str""+ object.getCreationDate()+ ""String_Node_Str""+ object.getAuthor());
    hyperlink.appendChild(dom.createTextNode(object.getLabel() + ""String_Node_Str"" + object.getVersion()));
    parent.appendChild(hyperlink);
    if (i != latestItems.size() - 1) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
}","@Override public void createContent(String id,Element parent){
  String dBranding=""String_Node_Str"";
  String branding=System.getProperty(""String_Node_Str"");
  if (branding == null || ""String_Node_Str"".equals(branding)) {
    branding=dBranding;
  }
  Document dom=parent.getOwnerDocument();
  String imgBrandingPath=""String_Node_Str"";
  String imgCommonPath=""String_Node_Str"";
  String content=dom.getDocumentURI();
  if (content != null && !""String_Node_Str"".equals(content)) {
    File file=new File(content);
    int index=content.indexOf(file.getName());
    imgBrandingPath=content.substring(0,index) + ""String_Node_Str"" + branding;
    imgCommonPath=content.substring(0,index);
  }
  List<IRepositoryViewObject> latestItems=new ArrayList<IRepositoryViewObject>();
  String url=""String_Node_Str"";
  if (""String_Node_Str"".equals(id)) {
    Element img=dom.createElement(""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",imgBrandingPath + ""String_Node_Str"");
    parent.appendChild(img);
  }
 else   if (""String_Node_Str"".equals(id)) {
    Element img=dom.createElement(""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",imgBrandingPath + ""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",""String_Node_Str"");
    parent.appendChild(img);
  }
 else   if (ERepositoryObjectType.PROCESS != null && ERepositoryObjectType.PROCESS.name().equals(id)) {
    Element span=dom.createElement(""String_Node_Str"");
    span.setAttribute(""String_Node_Str"",""String_Node_Str"");
    span.appendChild(dom.createTextNode(Messages.getString(""String_Node_Str"")));
    parent.appendChild(span);
    span.appendChild(dom.createElement(""String_Node_Str""));
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    latestItems=getLatestModifiedItems(ERepositoryObjectType.PROCESS,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (ERepositoryObjectType.BUSINESS_PROCESS != null && ERepositoryObjectType.BUSINESS_PROCESS.name().equals(id)) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    latestItems=getLatestModifiedItems(ERepositoryObjectType.BUSINESS_PROCESS,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id) && isItemShow(""String_Node_Str"")) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    latestItems=getLatestModifiedItems(ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id) && isItemShow(""String_Node_Str"")) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    ERepositoryObjectType repositoryServicesType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"");
    latestItems=getLatestModifiedItems(repositoryServicesType,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id) && isItemShow(""String_Node_Str"")) {
    String title=Messages.getString(""String_Node_Str"");
    createLatestItemTitlePart(dom,parent,imgCommonPath + ""String_Node_Str"",title);
    ERepositoryObjectType repositoryRoutesType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"");
    latestItems=getLatestModifiedItems(repositoryRoutesType,8);
    url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if (latestItems.size() == 0) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(id)) {
    IPreferenceStore store=CorePlugin.getDefault().getPreferenceStore();
    boolean showIntroConfig=store.getBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME);
    url=""String_Node_Str"" + ""String_Node_Str"";
    Element input=dom.createElement(""String_Node_Str"");
    input.setAttribute(""String_Node_Str"",""String_Node_Str"");
    if (!showIntroConfig) {
      input.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    input.setAttribute(""String_Node_Str"",url);
    input.appendChild(dom.createTextNode(Messages.getString(""String_Node_Str"")));
    parent.appendChild(input);
  }
 else   if (""String_Node_Str"".equals(id)) {
    createOnlinePage(dom,parent);
  }
 else   if (""String_Node_Str"".equals(id)) {
    Element td=dom.createElement(""String_Node_Str"");
    setTDStyle(td);
    parent.appendChild(td);
    Element divRight=dom.createElement(""String_Node_Str"");
    divRight.setAttribute(""String_Node_Str"",""String_Node_Str"");
    td.appendChild(divRight);
    parent=divRight;
    createTitlePart(dom,parent,Messages.getString(""String_Node_Str""));
    String text=Messages.getString(""String_Node_Str"");
    url=""String_Node_Str"";
    String title=""String_Node_Str"";
    createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    text=Messages.getString(""String_Node_Str"");
    url=""String_Node_Str"";
    title=""String_Node_Str"";
    createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    if (isItemShow(""String_Node_Str"")) {
      text=Messages.getString(""String_Node_Str"");
      url=""String_Node_Str"";
      title=""String_Node_Str"";
      createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    }
    if (isItemShow(""String_Node_Str"")) {
      text=Messages.getString(""String_Node_Str"");
      url=""String_Node_Str"";
      title=""String_Node_Str"";
      createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    }
    if (isItemShow(""String_Node_Str"")) {
      text=Messages.getString(""String_Node_Str"");
      url=""String_Node_Str"";
      title=""String_Node_Str"";
      createANewItem(dom,parent,imgCommonPath + ""String_Node_Str"",text,title,url);
    }
    title=Messages.getString(""String_Node_Str"");
    String talendHelpCenter=Messages.getString(""String_Node_Str"");
    String docForDownload=Messages.getString(""String_Node_Str"");
    String[] hyperlinkText=new String[]{talendHelpCenter,docForDownload};
    String[] urls=new String[]{BROWSER_URL + ""String_Node_Str"",BROWSER_URL + ""String_Node_Str""};
    String[] extTexts=new String[2];
    parent.appendChild(dom.createElement(""String_Node_Str""));
    createFixedPart(dom,parent,title,hyperlinkText,urls,extTexts);
    title=Messages.getString(""String_Node_Str"");
    String hTutorial=Messages.getString(""String_Node_Str"");
    String hforum=Messages.getString(""String_Node_Str"");
    String hTrainning=Messages.getString(""String_Node_Str"");
    hyperlinkText=new String[]{hTutorial,hforum,hTrainning};
    urls=new String[]{BROWSER_URL + ""String_Node_Str"",BROWSER_URL + ""String_Node_Str"",BROWSER_URL + ""String_Node_Str""};
    String extTutorial=""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    String extforum=""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    String extTrainning=""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    extTexts=new String[]{extTutorial,extforum,extTrainning};
    createFixedPart(dom,parent,title,hyperlinkText,urls,extTexts);
    Element imgP=dom.createElement(""String_Node_Str"");
    imgP.setAttribute(""String_Node_Str"",""String_Node_Str"");
    parent.appendChild(imgP);
    Element imgLink=dom.createElement(""String_Node_Str"");
    imgLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
    imgP.appendChild(imgLink);
    Element img=dom.createElement(""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",imgCommonPath + ""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",""String_Node_Str"");
    img.setAttribute(""String_Node_Str"",""String_Node_Str"");
    imgLink.appendChild(img);
  }
  for (int i=0; i < latestItems.size(); i++) {
    IRepositoryViewObject object=latestItems.get(i);
    Element hyperlink=dom.createElement(""String_Node_Str"");
    hyperlink.setAttribute(""String_Node_Str"",""String_Node_Str"");
    hyperlink.setAttribute(""String_Node_Str"",url + object.getId());
    hyperlink.setAttribute(""String_Node_Str"",""String_Node_Str"" + object.getModificationDate() + ""String_Node_Str""+ object.getAuthor()+ ""String_Node_Str""+ ""String_Node_Str""+ object.getCreationDate()+ ""String_Node_Str""+ object.getAuthor());
    hyperlink.appendChild(dom.createTextNode(object.getLabel() + ""String_Node_Str"" + object.getVersion()));
    parent.appendChild(hyperlink);
    if (i != latestItems.size() - 1) {
      parent.appendChild(dom.createElement(""String_Node_Str""));
    }
  }
}",0.9993393525655142
127722,"private void convert(org.talend.core.model.general.Project newProject,Container fromModel,RepositoryNode parent,ERepositoryObjectType type,RepositoryNode recBinNode){
  if (parent == null || fromModel == null) {
    return;
  }
  for (  Object obj : fromModel.getSubContainer()) {
    Container container=(Container)obj;
    Folder oFolder=new Folder((Property)container.getProperty(),type);
    if (oFolder.getProperty() == null) {
      continue;
    }
    RepositoryNode folder=null;
    String label=container.getLabel();
    if (label.equals(""String_Node_Str"") || label.startsWith(""String_Node_Str"")) {
      continue;
    }
    boolean isJobDocRootFolder=((label.indexOf(""String_Node_Str"") != -1) && (label.indexOf(""String_Node_Str"") != -1));
    boolean isPicFolderName=label.equals(IHTMLDocConstants.PIC_FOLDER_NAME);
    if (isJobDocRootFolder || isPicFolderName) {
      continue;
    }
    if (RepositoryConstants.SYSTEM_DIRECTORY.equals(label)) {
      if (getMergeRefProject()) {
        parent.getChildren();
        boolean existSystemFolder=false;
        for (        IRepositoryNode node : parent.getChildren()) {
          if (RepositoryConstants.SYSTEM_DIRECTORY.equalsIgnoreCase(node.getLabel())) {
            existSystemFolder=true;
            break;
          }
        }
        IBrandingService breaningService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
        if (!existSystemFolder && !breaningService.isPoweredOnlyCamel()) {
          folder=new StableRepositoryNode(parent,RepositoryConstants.SYSTEM_DIRECTORY,ECoreImage.FOLDER_CLOSE_ICON);
          parent.getChildren().add(folder);
        }
 else {
          continue;
        }
      }
 else {
        folder=new StableRepositoryNode(parent,RepositoryConstants.SYSTEM_DIRECTORY,ECoreImage.FOLDER_CLOSE_ICON);
        parent.getChildren().add(folder);
      }
    }
 else     if (ERepositoryObjectType.GENERATED.name().equalsIgnoreCase(label)) {
      if (PluginChecker.isDocumentationPluginLoaded()) {
        convertDocumentation(newProject,container,parent,type,recBinNode);
      }
      continue;
    }
 else {
      if (getMergeRefProject()) {
        String a=parent.getProperties(EProperties.LABEL).toString();
        if (type == ERepositoryObjectType.SQLPATTERNS) {
          folder=getSQLPatternNode(a,label);
        }
        if (folder == null) {
          if (newProject != this.project && !hasTalendItems(container)) {
            continue;
          }
          folder=new RepositoryNode(oFolder,parent,ENodeType.SIMPLE_FOLDER);
          if (factory.getStatus(oFolder) != ERepositoryStatus.DELETED) {
            parent.getChildren().add(folder);
          }
        }
      }
 else {
        folder=new RepositoryNode(oFolder,parent,ENodeType.SIMPLE_FOLDER);
        if (factory.getStatus(oFolder) != ERepositoryStatus.DELETED) {
          parent.getChildren().add(folder);
        }
      }
    }
    folder.setProperties(EProperties.LABEL,label);
    folder.setProperties(EProperties.CONTENT_TYPE,type);
    convert(newProject,container,folder,type,recBinNode);
  }
  for (  Object obj : fromModel.getMembers()) {
    IRepositoryViewObject repositoryObject=(IRepositoryViewObject)obj;
    try {
      if (!repositoryObject.isDeleted()) {
        addNode(parent,type,recBinNode,repositoryObject);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      ExceptionHandler.log(Messages.getString(""String_Node_Str"",repositoryObject.getRepositoryObjectType(),repositoryObject.getLabel()));
    }
  }
}","private void convert(org.talend.core.model.general.Project newProject,Container fromModel,RepositoryNode parent,ERepositoryObjectType type,RepositoryNode recBinNode){
  if (parent == null || fromModel == null) {
    return;
  }
  if ((ERepositoryObjectType.DOCUMENTATION).equals(type)) {
    handleDelFolderItems(newProject,parent);
  }
  for (  Object obj : fromModel.getSubContainer()) {
    Container container=(Container)obj;
    Folder oFolder=new Folder((Property)container.getProperty(),type);
    boolean found=false;
    if (ERepositoryObjectType.JOB_DOC.equals(type) || ERepositoryObjectType.JOBLET_DOC.equals(type)) {
      for (      FolderItem delFolder : delFolderItems) {
        String parentName=((FolderItem)delFolder.getParent()).getProperty().getLabel();
        String oFolderPath=oFolder.getPath();
        String jobPath=""String_Node_Str"" + delFolder.getState().getPath();
        String jobPath1=""String_Node_Str"" + delFolder.getState().getPath();
        String jobletPath=""String_Node_Str"" + delFolder.getState().getPath();
        String jobletPath1=""String_Node_Str"" + delFolder.getState().getPath();
        if (oFolder.getLabel().equals(delFolder.getProperty().getLabel())) {
          if (""String_Node_Str"".equals(parentName) && oFolderPath.equals(jobPath)) {
            found=true;
          }
 else           if (""String_Node_Str"".equals(parentName) && oFolderPath.equals(jobletPath)) {
            found=true;
          }
 else           if (oFolderPath.equals(jobPath1) || oFolderPath.equals(jobletPath1)) {
            found=true;
          }
          break;
        }
      }
    }
    if (found) {
      continue;
    }
    if (oFolder.getProperty() == null) {
      continue;
    }
    RepositoryNode folder=null;
    String label=container.getLabel();
    if (label.equals(""String_Node_Str"") || label.startsWith(""String_Node_Str"")) {
      continue;
    }
    boolean isJobDocRootFolder=((label.indexOf(""String_Node_Str"") != -1) && (label.indexOf(""String_Node_Str"") != -1));
    boolean isPicFolderName=label.equals(IHTMLDocConstants.PIC_FOLDER_NAME);
    if (isJobDocRootFolder || isPicFolderName) {
      continue;
    }
    if (RepositoryConstants.SYSTEM_DIRECTORY.equals(label)) {
      if (getMergeRefProject()) {
        parent.getChildren();
        boolean existSystemFolder=false;
        for (        IRepositoryNode node : parent.getChildren()) {
          if (RepositoryConstants.SYSTEM_DIRECTORY.equalsIgnoreCase(node.getLabel())) {
            existSystemFolder=true;
            break;
          }
        }
        IBrandingService breaningService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
        if (!existSystemFolder && !breaningService.isPoweredOnlyCamel()) {
          folder=new StableRepositoryNode(parent,RepositoryConstants.SYSTEM_DIRECTORY,ECoreImage.FOLDER_CLOSE_ICON);
          parent.getChildren().add(folder);
        }
 else {
          continue;
        }
      }
 else {
        folder=new StableRepositoryNode(parent,RepositoryConstants.SYSTEM_DIRECTORY,ECoreImage.FOLDER_CLOSE_ICON);
        parent.getChildren().add(folder);
      }
    }
 else     if (ERepositoryObjectType.GENERATED.name().equalsIgnoreCase(label)) {
      if (PluginChecker.isDocumentationPluginLoaded()) {
        convertDocumentation(newProject,container,parent,type,recBinNode);
      }
      continue;
    }
 else {
      if (getMergeRefProject()) {
        String a=parent.getProperties(EProperties.LABEL).toString();
        if (type == ERepositoryObjectType.SQLPATTERNS) {
          folder=getSQLPatternNode(a,label);
        }
        if (folder == null) {
          if (newProject != this.project && !hasTalendItems(container)) {
            continue;
          }
          folder=new RepositoryNode(oFolder,parent,ENodeType.SIMPLE_FOLDER);
          if (factory.getStatus(oFolder) != ERepositoryStatus.DELETED) {
            parent.getChildren().add(folder);
          }
        }
      }
 else {
        folder=new RepositoryNode(oFolder,parent,ENodeType.SIMPLE_FOLDER);
        if (factory.getStatus(oFolder) != ERepositoryStatus.DELETED) {
          parent.getChildren().add(folder);
        }
      }
    }
    folder.setProperties(EProperties.LABEL,label);
    folder.setProperties(EProperties.CONTENT_TYPE,type);
    convert(newProject,container,folder,type,recBinNode);
  }
  for (  Object obj : fromModel.getMembers()) {
    IRepositoryViewObject repositoryObject=(IRepositoryViewObject)obj;
    try {
      if (!repositoryObject.isDeleted()) {
        addNode(parent,type,recBinNode,repositoryObject);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      ExceptionHandler.log(Messages.getString(""String_Node_Str"",repositoryObject.getRepositoryObjectType(),repositoryObject.getLabel()));
    }
  }
}",0.8493346007604563
127723,"/** 
 * yzhang Comment method ""filterPalette"".
 * @param filer
 */
public static void filterPalette(String filer){
  CorePlugin.getDefault().getDesignerCoreService().setPaletteFilter(filer);
  if (faState) {
    ComponentUtilities.updatePalette(true);
  }
 else   ComponentUtilities.updatePalette(false);
  markEmptyDrawer(paletteRoot);
  emptyEntry.clear();
  recordEmptyDrawer(paletteRoot);
  removeEmptyDrawer();
}","/** 
 * yzhang Comment method ""filterPalette"".
 * @param filer
 */
public static void filterPalette(String filer){
  CorePlugin.getDefault().getDesignerCoreService().setPaletteFilter(filer);
  if (faState) {
    ComponentUtilities.updatePalette(true);
  }
 else {
    ComponentUtilities.updatePalette(false);
  }
  markEmptyDrawer(paletteRoot);
  emptyEntry.clear();
  recordEmptyDrawer(paletteRoot);
  removeEmptyDrawer();
}",0.990498812351544
127724,"private static void addUsedComponents(Set<String> components,List<IRepositoryViewObject> allProcess){
  for (  IRepositoryViewObject object : allProcess) {
    Item item=object.getProperty().getItem();
    List parameters=null;
    ProcessType processType=null;
    if (item instanceof ProcessItem) {
      processType=((ProcessItem)item).getProcess();
    }
 else     if (item instanceof JobletProcessItem) {
      processType=((JobletProcessItem)item).getJobletProcess();
    }
    if (processType != null) {
      for (      Object oNode : processType.getNode()) {
        NodeType node=(NodeType)oNode;
        IComponent component=ComponentsFactoryProvider.getInstance().get(node.getComponentName());
        if (component != null) {
          String originalFamilyName=component.getOriginalFamilyName();
          String original[]=originalFamilyName.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
          for (int i=0; i < original.length; i++) {
            components.add(original[i] + FAMILY_SPEARATOR + component.getName());
          }
        }
      }
      if (processType.getParameters() != null) {
        parameters=processType.getParameters().getElementParameter();
      }
    }
    if (parameters != null) {
      Set<String> inStatsLogsAndImplicit=getComponentsInStatsLogsAndImplicit(parameters);
      if (inStatsLogsAndImplicit != null) {
        components.addAll(inStatsLogsAndImplicit);
      }
    }
  }
}","private static void addUsedComponents(Set<String> components,List<IRepositoryViewObject> allProcess){
  for (  IRepositoryViewObject object : allProcess) {
    Item item=object.getProperty().getItem();
    List parameters=null;
    ProcessType processType=null;
    if (item instanceof ProcessItem) {
      processType=((ProcessItem)item).getProcess();
    }
 else     if (item instanceof JobletProcessItem) {
      processType=((JobletProcessItem)item).getJobletProcess();
    }
    if (processType != null) {
      for (      Object oNode : processType.getNode()) {
        NodeType node=(NodeType)oNode;
        IComponent component=ComponentsFactoryProvider.getInstance().get(node.getComponentName());
        if (component != null) {
          String originalFamilyName=component.getOriginalFamilyName();
          String original[]=originalFamilyName.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
          for (          String element : original) {
            components.add(element + FAMILY_SPEARATOR + component.getName());
          }
        }
      }
      if (processType.getParameters() != null) {
        parameters=processType.getParameters().getElementParameter();
      }
    }
    if (parameters != null) {
      Set<String> inStatsLogsAndImplicit=getComponentsInStatsLogsAndImplicit(parameters);
      if (inStatsLogsAndImplicit != null) {
        components.addAll(inStatsLogsAndImplicit);
      }
    }
  }
}",0.9702216066481996
127725,"public static PaletteRoot createPaletteRootWithAllComponents(){
  Map<String,String> allComponentsCanBeProvided=ComponentsFactoryProvider.getInstance().getAllComponentsCanBeProvided();
  Set<String> components=allComponentsCanBeProvided.keySet();
  List<String> families=new ArrayList<String>();
  Hashtable<String,PaletteDrawer> ht=new Hashtable<String,PaletteDrawer>();
  PaletteRoot palette=new PaletteRoot();
  for (  String nameAndFamily : components) {
    String[] split=nameAndFamily.split(FAMILY_SPEARATOR);
    if (split.length != 2) {
      continue;
    }
    families.add(split[0]);
  }
  Collections.sort(families);
  for (Iterator iter=families.iterator(); iter.hasNext(); ) {
    String oraFam=(String)iter.next();
    String family=getTranslatedFamilyName(oraFam);
    PaletteDrawer componentsDrawer=ht.get(family);
    if (componentsDrawer == null) {
      componentsDrawer=createComponentDrawer(palette,ht,family,oraFam);
    }
  }
  for (  String nameAndFamily : components) {
    String[] split=nameAndFamily.split(FAMILY_SPEARATOR);
    if (split.length != 2) {
      continue;
    }
    String family=getTranslatedFamilyName(split[0]);
    String[] strings=family.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
    for (int j=0; j < strings.length; j++) {
      ImageDescriptor imageDescriptor=ComponentsFactoryProvider.getInstance().getComponentsImageRegistry().get(allComponentsCanBeProvided.get(nameAndFamily));
      CombinedTemplateCreationEntry component=new CombinedTemplateCreationEntry(split[1],split[1],null,null,imageDescriptor,imageDescriptor);
      PaletteDrawer componentsDrawer=ht.get(strings[j]);
      component.setParent(componentsDrawer);
      componentsDrawer.add(component);
    }
  }
  return palette;
}","public static PaletteRoot createPaletteRootWithAllComponents(){
  Set<IComponent> components=ComponentsFactoryProvider.getInstance().getComponents();
  List<String> families=new ArrayList<String>();
  Hashtable<String,PaletteDrawer> ht=new Hashtable<String,PaletteDrawer>();
  PaletteRoot palette=new PaletteRoot();
  for (  IComponent component : components) {
    if (component.isTechnical() || component.getComponentType() == EComponentType.JOBLET) {
      continue;
    }
    String family=component.getOriginalFamilyName();
    families.add(family);
  }
  Collections.sort(families);
  for (  String family : families) {
    String[] strings=family.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
    for (    String string : strings) {
      PaletteDrawer componentsDrawer=ht.get(string);
      if (componentsDrawer == null) {
        componentsDrawer=createComponentDrawer(palette,ht,string,family);
      }
    }
  }
  for (  IComponent component : components) {
    if (component.isTechnical() || component.getComponentType() == EComponentType.JOBLET) {
      continue;
    }
    String family=component.getOriginalFamilyName();
    String[] strings=family.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
    for (    String string : strings) {
      CombinedTemplateCreationEntry componentEntry=new CombinedTemplateCreationEntry(component.getName(),component.getName(),null,null,component.getIcon24(),component.getIcon32());
      PaletteDrawer componentsDrawer=ht.get(string);
      componentEntry.setParent(componentsDrawer);
      componentsDrawer.add(componentEntry);
    }
  }
  return palette;
}",0.3174977869578047
127726,"@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=false;
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IProjectRepositoryNode root=repoNode.getRoot();
    if (!merged && root instanceof ProjectRepositoryNode) {
      merged=((ProjectRepositoryNode)root).getMergeRefProject();
    }
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new Runnable(){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
        return true;
      }
    }
  }
  return false;
}","@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new Runnable(){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
      }
      return false;
    }
 else {
      return true;
    }
  }
  return false;
}",0.8274285714285714
127727,"private boolean validResourcePath(IResourceDelta delta,IPath topLevelNodeWorkspaceRelativePath,boolean refMerged){
  if (ingoreResource(delta)) {
    return false;
  }
  IResourceDelta[] affectedChildren=delta.getAffectedChildren();
  IPath path=delta.getFullPath();
  if (path != null && (affectedChildren.length == 0) && (FileConstants.PROPERTIES_EXTENSION.equals(path.getFileExtension()) || (delta instanceof IContainer))) {
    if (isMatchedPath(topLevelNodeWorkspaceRelativePath,path)) {
      return true;
    }
 else     if (refMerged) {
      path=path.removeFirstSegments(1);
      IPath relativePath=topLevelNodeWorkspaceRelativePath.removeFirstSegments(1);
      if (isMatchedPath(relativePath,path)) {
        return true;
      }
    }
  }
  if (affectedChildren != null) {
    for (    IResourceDelta child : affectedChildren) {
      if (validResourcePath(child,topLevelNodeWorkspaceRelativePath,refMerged)) {
        return true;
      }
    }
  }
  return false;
}","private boolean validResourcePath(IResourceDelta delta,IPath topLevelNodeWorkspaceRelativePath,boolean refMerged){
  if (ingoreResource(delta)) {
    return false;
  }
  IResourceDelta[] affectedChildren=delta.getAffectedChildren();
  IResource res=delta.getResource();
  IPath path=delta.getFullPath();
  boolean noChild=(affectedChildren == null || (affectedChildren.length == 0));
  if (path != null && noChild && (FileConstants.PROPERTIES_EXTENSION.equals(path.getFileExtension()) || (res instanceof IContainer))) {
    if (isMatchedPath(topLevelNodeWorkspaceRelativePath,path)) {
      return true;
    }
 else     if (refMerged) {
      if (res != null) {
        path=res.getProjectRelativePath();
      }
 else {
        path=path.removeFirstSegments(1);
      }
      IPath relativePath=topLevelNodeWorkspaceRelativePath.removeFirstSegments(1);
      if (isMatchedPath(relativePath,path)) {
        return true;
      }
    }
  }
  if (affectedChildren != null) {
    for (    IResourceDelta child : affectedChildren) {
      if (validResourcePath(child,topLevelNodeWorkspaceRelativePath,refMerged)) {
        return true;
      }
    }
  }
  return false;
}",0.8770949720670391
127728,"private void convert(org.talend.core.model.general.Project newProject,Container fromModel,RepositoryNode parent,ERepositoryObjectType type,RepositoryNode recBinNode){
  if (parent == null || fromModel == null) {
    return;
  }
  for (  Object obj : fromModel.getSubContainer()) {
    Container container=(Container)obj;
    Folder oFolder=new Folder((Property)container.getProperty(),type);
    if (oFolder.getProperty() == null) {
      continue;
    }
    RepositoryNode folder=null;
    String label=container.getLabel();
    if (label.equals(""String_Node_Str"") || label.startsWith(""String_Node_Str"")) {
      continue;
    }
    boolean isJobDocRootFolder=((label.indexOf(""String_Node_Str"") != -1) && (label.indexOf(""String_Node_Str"") != -1));
    boolean isPicFolderName=label.equals(IHTMLDocConstants.PIC_FOLDER_NAME);
    if (isJobDocRootFolder || isPicFolderName) {
      continue;
    }
    if (RepositoryConstants.SYSTEM_DIRECTORY.equals(label)) {
      if (getMergeRefProject()) {
        parent.getChildren();
        boolean existSystemFolder=false;
        for (        IRepositoryNode node : parent.getChildren()) {
          if (RepositoryConstants.SYSTEM_DIRECTORY.equalsIgnoreCase(node.getLabel())) {
            existSystemFolder=true;
            break;
          }
        }
        IBrandingService breaningService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
        if (!existSystemFolder && !breaningService.isPoweredOnlyCamel()) {
          folder=new StableRepositoryNode(parent,RepositoryConstants.SYSTEM_DIRECTORY,ECoreImage.FOLDER_CLOSE_ICON);
          parent.getChildren().add(folder);
        }
 else {
          continue;
        }
      }
 else {
        folder=new StableRepositoryNode(parent,RepositoryConstants.SYSTEM_DIRECTORY,ECoreImage.FOLDER_CLOSE_ICON);
        parent.getChildren().add(folder);
      }
    }
 else     if (ERepositoryObjectType.GENERATED.name().equalsIgnoreCase(label)) {
      if (PluginChecker.isDocumentationPluginLoaded()) {
        convertDocumentation(newProject,container,parent,type,recBinNode);
      }
      continue;
    }
 else {
      if (getMergeRefProject()) {
        String a=parent.getProperties(EProperties.LABEL).toString();
        if (type == ERepositoryObjectType.SQLPATTERNS) {
          folder=getSQLPatternNode(a,label);
        }
        if (folder == null) {
          if (newProject != this.project && !hasTalendItems(container)) {
            continue;
          }
          folder=new RepositoryNode(oFolder,parent,ENodeType.SIMPLE_FOLDER);
          if (factory.getStatus(oFolder) != ERepositoryStatus.DELETED) {
            parent.getChildren().add(folder);
          }
        }
      }
 else {
        folder=new RepositoryNode(oFolder,parent,ENodeType.SIMPLE_FOLDER);
        if (factory.getStatus(oFolder) != ERepositoryStatus.DELETED) {
          parent.getChildren().add(folder);
        }
      }
    }
    folder.setProperties(EProperties.LABEL,label);
    folder.setProperties(EProperties.CONTENT_TYPE,type);
    convert(newProject,container,folder,type,recBinNode);
  }
  for (  Object obj : fromModel.getMembers()) {
    IRepositoryViewObject repositoryObject=(IRepositoryViewObject)obj;
    try {
      if (!repositoryObject.isDeleted()) {
        addNode(parent,type,recBinNode,repositoryObject);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      ExceptionHandler.log(Messages.getString(""String_Node_Str"",repositoryObject.getRepositoryObjectType(),repositoryObject.getLabel()));
    }
  }
}","private void convert(org.talend.core.model.general.Project newProject,Container fromModel,RepositoryNode parent,ERepositoryObjectType type,RepositoryNode recBinNode){
  if (parent == null || fromModel == null) {
    return;
  }
  if ((ERepositoryObjectType.DOCUMENTATION).equals(type)) {
    handleDelFolderItems(newProject,parent);
  }
  for (  Object obj : fromModel.getSubContainer()) {
    Container container=(Container)obj;
    Folder oFolder=new Folder((Property)container.getProperty(),type);
    boolean found=false;
    if (ERepositoryObjectType.JOB_DOC.equals(type) || ERepositoryObjectType.JOBLET_DOC.equals(type)) {
      for (      FolderItem delFolder : delFolderItems) {
        String parentName=((FolderItem)delFolder.getParent()).getProperty().getLabel();
        String oFolderPath=oFolder.getPath();
        String jobPath=""String_Node_Str"" + delFolder.getState().getPath();
        String jobPath1=""String_Node_Str"" + delFolder.getState().getPath();
        String jobletPath=""String_Node_Str"" + delFolder.getState().getPath();
        String jobletPath1=""String_Node_Str"" + delFolder.getState().getPath();
        if (oFolder.getLabel().equals(delFolder.getProperty().getLabel())) {
          if (""String_Node_Str"".equals(parentName) && oFolderPath.equals(jobPath)) {
            found=true;
          }
 else           if (""String_Node_Str"".equals(parentName) && oFolderPath.equals(jobletPath)) {
            found=true;
          }
 else           if (oFolderPath.equals(jobPath1) || oFolderPath.equals(jobletPath1)) {
            found=true;
          }
          break;
        }
      }
    }
    if (found) {
      continue;
    }
    if (oFolder.getProperty() == null) {
      continue;
    }
    RepositoryNode folder=null;
    String label=container.getLabel();
    if (label.equals(""String_Node_Str"") || label.startsWith(""String_Node_Str"")) {
      continue;
    }
    boolean isJobDocRootFolder=((label.indexOf(""String_Node_Str"") != -1) && (label.indexOf(""String_Node_Str"") != -1));
    boolean isPicFolderName=label.equals(IHTMLDocConstants.PIC_FOLDER_NAME);
    if (isJobDocRootFolder || isPicFolderName) {
      continue;
    }
    if (RepositoryConstants.SYSTEM_DIRECTORY.equals(label)) {
      if (getMergeRefProject()) {
        parent.getChildren();
        boolean existSystemFolder=false;
        for (        IRepositoryNode node : parent.getChildren()) {
          if (RepositoryConstants.SYSTEM_DIRECTORY.equalsIgnoreCase(node.getLabel())) {
            existSystemFolder=true;
            break;
          }
        }
        IBrandingService breaningService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
        if (!existSystemFolder && !breaningService.isPoweredOnlyCamel()) {
          folder=new StableRepositoryNode(parent,RepositoryConstants.SYSTEM_DIRECTORY,ECoreImage.FOLDER_CLOSE_ICON);
          parent.getChildren().add(folder);
        }
 else {
          continue;
        }
      }
 else {
        folder=new StableRepositoryNode(parent,RepositoryConstants.SYSTEM_DIRECTORY,ECoreImage.FOLDER_CLOSE_ICON);
        parent.getChildren().add(folder);
      }
    }
 else     if (ERepositoryObjectType.GENERATED.name().equalsIgnoreCase(label)) {
      if (PluginChecker.isDocumentationPluginLoaded()) {
        convertDocumentation(newProject,container,parent,type,recBinNode);
      }
      continue;
    }
 else {
      if (getMergeRefProject()) {
        String a=parent.getProperties(EProperties.LABEL).toString();
        if (type == ERepositoryObjectType.SQLPATTERNS) {
          folder=getSQLPatternNode(a,label);
        }
        if (folder == null) {
          if (newProject != this.project && !hasTalendItems(container)) {
            continue;
          }
          folder=new RepositoryNode(oFolder,parent,ENodeType.SIMPLE_FOLDER);
          if (factory.getStatus(oFolder) != ERepositoryStatus.DELETED) {
            parent.getChildren().add(folder);
          }
        }
      }
 else {
        folder=new RepositoryNode(oFolder,parent,ENodeType.SIMPLE_FOLDER);
        if (factory.getStatus(oFolder) != ERepositoryStatus.DELETED) {
          parent.getChildren().add(folder);
        }
      }
    }
    folder.setProperties(EProperties.LABEL,label);
    folder.setProperties(EProperties.CONTENT_TYPE,type);
    convert(newProject,container,folder,type,recBinNode);
  }
  for (  Object obj : fromModel.getMembers()) {
    IRepositoryViewObject repositoryObject=(IRepositoryViewObject)obj;
    try {
      if (!repositoryObject.isDeleted()) {
        addNode(parent,type,recBinNode,repositoryObject);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      ExceptionHandler.log(Messages.getString(""String_Node_Str"",repositoryObject.getRepositoryObjectType(),repositoryObject.getLabel()));
    }
  }
}",0.8493346007604563
127729,"@Override public void run(){
  FOXTreeNode node=(FOXTreeNode)this.getStructuredSelection().getFirstElement();
  if (createChildNode(node)) {
    form.redrawLinkers();
  }
  form.updateConnection();
  form.updateStatus();
}","@Override public void run(){
  FOXTreeNode node=(FOXTreeNode)this.getStructuredSelection().getFirstElement();
  if (node != null && createChildNode(node)) {
    form.redrawLinkers();
  }
  form.updateConnection();
  form.updateStatus();
}",0.9652173913043478
127730,"/** 
 * add Controls to group Row To Skip and Limit.
 */
private void addFieldsListenersGroupsRowToSkipAndLimit(){
  ArrayList<LabelledCheckboxCombo> labelledCheckboxCombo2Control=new ArrayList<LabelledCheckboxCombo>();
  labelledCheckboxCombo2Control.add(rowsToSkipHeaderCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipLimitCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipFooterCheckboxCombo);
  Iterator<LabelledCheckboxCombo> iCheckboxCombo;
  LabelledCheckboxCombo labelledCheckboxCombo;
  for (iCheckboxCombo=labelledCheckboxCombo2Control.iterator(); iCheckboxCombo.hasNext(); ) {
    labelledCheckboxCombo=iCheckboxCombo.next();
    labelledCheckboxCombo.addKeyListener(new KeyAdapter(){
      @Override public void keyPressed(      KeyEvent e){
        if (!isContextMode()) {
          String string=String.valueOf(e.character);
          if (!(string.matches(""String_Node_Str"")) && e.keyCode != 8 && e.keyCode != SWT.DEL) {
            e.doit=false;
          }
        }
      }
    }
);
  }
  rowsToSkipHeaderCheckboxCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipHeaderCheckboxCombo.isEmpty()) {
          if (!rowsToSkipHeaderCheckboxCombo.isInteger() || rowsToSkipHeaderCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipHeaderCheckboxCombo.deselectAll();
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            getConnection().setHeaderValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipHeaderCheckboxCombo.getCombo().setFocus();
            firstRowIsCaptionCheckbox.setSelection(false);
            getConnection().setFirstLineCaption(false);
            return;
          }
 else {
            getConnection().setHeaderValue(rowsToSkipHeaderCheckboxCombo.getText().trim());
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            checkFieldsValue();
          }
        }
 else {
          getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
          getConnection().setHeaderValue(""String_Node_Str"" + 0);
          checkFieldsValue();
        }
      }
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipFooterCheckboxCombo.isEmpty()) {
          if (!rowsToSkipFooterCheckboxCombo.isInteger() || rowsToSkipFooterCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipFooterCheckboxCombo.deselectAll();
            getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
            getConnection().setFooterValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipFooterCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setFooterValue(rowsToSkipFooterCheckboxCombo.getText().trim());
          }
        }
 else {
          getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
          getConnection().setFooterValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipLimitCheckboxCombo.isEmpty()) {
          if (!rowsToSkipLimitCheckboxCombo.isInteger() || rowsToSkipLimitCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipLimitCheckboxCombo.deselectAll();
            getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
            getConnection().setLimitValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipLimitCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setLimitValue(rowsToSkipLimitCheckboxCombo.getText());
          }
        }
 else {
          getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
          getConnection().setLimitValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipHeaderCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      String text=rowsToSkipHeaderCheckboxCombo.getText();
      if (isContextMode() && getContextModeManager() != null) {
        text=getContextModeManager().getOriginalValue(text);
      }
      if ((!rowsToSkipHeaderCheckboxCombo.isChecked()) || text.trim().equals(""String_Node_Str"")) {
        firstRowIsCaptionCheckbox.setSelection(false);
        getConnection().setFirstLineCaption(false);
      }
      getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  emptyRowsToSkipCheckbox.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setRemoveEmptyRow(emptyRowsToSkipCheckbox.getSelection());
    }
  }
);
}","/** 
 * add Controls to group Row To Skip and Limit.
 */
private void addFieldsListenersGroupsRowToSkipAndLimit(){
  ArrayList<LabelledCheckboxCombo> labelledCheckboxCombo2Control=new ArrayList<LabelledCheckboxCombo>();
  labelledCheckboxCombo2Control.add(rowsToSkipHeaderCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipLimitCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipFooterCheckboxCombo);
  Iterator<LabelledCheckboxCombo> iCheckboxCombo;
  LabelledCheckboxCombo labelledCheckboxCombo;
  for (iCheckboxCombo=labelledCheckboxCombo2Control.iterator(); iCheckboxCombo.hasNext(); ) {
    labelledCheckboxCombo=iCheckboxCombo.next();
    labelledCheckboxCombo.addKeyListener(new KeyAdapter(){
      @Override public void keyPressed(      KeyEvent e){
        if (!isContextMode()) {
          String string=String.valueOf(e.character);
          if (!(string.matches(""String_Node_Str"")) && e.keyCode != 8 && e.keyCode != SWT.DEL) {
            e.doit=false;
          }
        }
      }
    }
);
  }
  rowsToSkipHeaderCheckboxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipHeaderCheckboxCombo.isEmpty()) {
          if (!rowsToSkipHeaderCheckboxCombo.isInteger() || rowsToSkipHeaderCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipHeaderCheckboxCombo.deselectAll();
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            getConnection().setHeaderValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipHeaderCheckboxCombo.getCombo().setFocus();
            firstRowIsCaptionCheckbox.setSelection(false);
            getConnection().setFirstLineCaption(false);
            return;
          }
 else {
            getConnection().setHeaderValue(rowsToSkipHeaderCheckboxCombo.getText().trim());
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            checkFieldsValue();
          }
        }
 else {
          getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
          getConnection().setHeaderValue(""String_Node_Str"" + 0);
          checkFieldsValue();
        }
      }
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipFooterCheckboxCombo.isEmpty()) {
          if (!rowsToSkipFooterCheckboxCombo.isInteger() || rowsToSkipFooterCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipFooterCheckboxCombo.deselectAll();
            getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
            getConnection().setFooterValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipFooterCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setFooterValue(rowsToSkipFooterCheckboxCombo.getText().trim());
          }
        }
 else {
          getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
          getConnection().setFooterValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipLimitCheckboxCombo.isEmpty()) {
          if (!rowsToSkipLimitCheckboxCombo.isInteger() || rowsToSkipLimitCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipLimitCheckboxCombo.deselectAll();
            getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
            getConnection().setLimitValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipLimitCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setLimitValue(rowsToSkipLimitCheckboxCombo.getText());
          }
        }
 else {
          getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
          getConnection().setLimitValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipHeaderCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      String text=rowsToSkipHeaderCheckboxCombo.getText();
      if (isContextMode() && getContextModeManager() != null) {
        text=getContextModeManager().getOriginalValue(text);
      }
      if ((!rowsToSkipHeaderCheckboxCombo.isChecked()) || text.trim().equals(""String_Node_Str"")) {
        firstRowIsCaptionCheckbox.setSelection(false);
        getConnection().setFirstLineCaption(false);
      }
      getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  emptyRowsToSkipCheckbox.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setRemoveEmptyRow(emptyRowsToSkipCheckbox.getSelection());
    }
  }
);
}",0.9974372116863148
127731,"@Override protected void addFields(){
  Composite mainComposite=Form.startNewGridLayout(this,2);
  addGroupDelimitedFileSettings(mainComposite,400,100);
  addGroupRowsToSkip(mainComposite,300,100);
  addGroupEscapeChar(mainComposite,400,105);
  addGroupLimit(mainComposite,300,105);
  addGroupFileViewer(this,700,200);
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
}","@Override protected void addFields(){
  Composite mainComposite=Form.startNewGridLayout(this,2);
  addGroupDelimitedFileSettings(mainComposite,400,105);
  addGroupRowsToSkip(mainComposite,300,105);
  addGroupEscapeChar(mainComposite,400,110);
  addGroupLimit(mainComposite,300,110);
  addGroupFileViewer(this,700,200);
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
}",0.9896193771626296
127732,"public void run(){
  handleErrorOutput(outputComposite,tabFolder,outputTabItem);
}","@Override public void run(){
  handleErrorOutput(outputComposite,tabFolder,outputTabItem);
}",0.942528735632184
127733,"public void widgetDefaultSelected(SelectionEvent e){
}","@Override public void widgetDefaultSelected(SelectionEvent e){
}",0.9152542372881356
127734,"/** 
 * add Controls to group Escape Char.
 */
private void addFieldsListenersGroupsEscapeChar(){
  ArrayList<Button> radio2Control=new ArrayList<Button>();
  radio2Control.add(csvRadio);
  radio2Control.add(delimitedRadio);
  Iterator<Button> iButton;
  Button button;
  for (iButton=radio2Control.iterator(); iButton.hasNext(); ) {
    button=iButton.next();
    button.addSelectionListener(new SelectionListener(){
      String escapeCharComboOldValue=""String_Node_Str"";
      String textEnclosureComboOldValue=""String_Node_Str"";
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        Boolean b=!(csvRadio.getSelection());
        getConnection().setEscapeType(b ? Escape.DELIMITED : Escape.CSV);
        textEnclosureCombo.setEnabled(!b);
        escapeCharCombo.setEnabled(!b);
        splitwayRecordForJavaFID.setEnabled(b);
        if (b) {
          escapeCharComboOldValue=escapeCharCombo.getText();
          textEnclosureComboOldValue=textEnclosureCombo.getText();
          textEnclosureCombo.select(0);
          escapeCharCombo.select(0);
          textEnclosureFlag.setText(""String_Node_Str"");
          escapeCharFlag.setText(""String_Node_Str"");
          checkFieldsValue();
        }
 else {
          if ((!""String_Node_Str"".equals(escapeCharComboOldValue)) && (!escapeCharComboOldValue.equals(EMPTY_VALUE))) {
            escapeCharCombo.setText(escapeCharComboOldValue);
            setCharFlag(escapeCharFlag,escapeCharCombo.getText());
          }
          if ((!""String_Node_Str"".equals(textEnclosureComboOldValue)) && (!textEnclosureComboOldValue.equals(EMPTY_VALUE))) {
            textEnclosureCombo.setText(textEnclosureComboOldValue);
            setCharFlag(textEnclosureFlag,textEnclosureCombo.getText());
          }
        }
      }
    }
);
  }
  emptyRowsToSkipCheckbox.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setRemoveEmptyRow(emptyRowsToSkipCheckbox.getSelection());
      checkFieldsValue();
    }
  }
);
  escapeCharCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (escapeCharCombo.getText() != null && !(""String_Node_Str"").equals(escapeCharCombo.getText()) && !(EMPTY_VALUE).equals(escapeCharCombo.getText())) {
        getConnection().setEscapeChar(escapeCharCombo.getText());
      }
 else {
        getConnection().setEscapeChar(null);
      }
      checkFieldsValue();
    }
  }
);
  textEnclosureCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (textEnclosureCombo.getText() != null && !(""String_Node_Str"").equals(textEnclosureCombo.getText()) && !(EMPTY_VALUE).equals(textEnclosureCombo.getText())) {
        getConnection().setTextEnclosure(textEnclosureCombo.getText());
      }
 else {
        getConnection().setTextEnclosure(null);
      }
      checkFieldsValue();
    }
  }
);
}","/** 
 * add Controls to group Escape Char.
 */
private void addFieldsListenersGroupsEscapeChar(){
  ArrayList<Button> radio2Control=new ArrayList<Button>();
  radio2Control.add(csvRadio);
  radio2Control.add(delimitedRadio);
  Iterator<Button> iButton;
  Button button;
  for (iButton=radio2Control.iterator(); iButton.hasNext(); ) {
    button=iButton.next();
    button.addSelectionListener(new SelectionListener(){
      String escapeCharComboOldValue=""String_Node_Str"";
      String textEnclosureComboOldValue=""String_Node_Str"";
      @Override public void widgetDefaultSelected(      SelectionEvent e){
      }
      @Override public void widgetSelected(      SelectionEvent e){
        Boolean b=!(csvRadio.getSelection());
        getConnection().setEscapeType(b ? Escape.DELIMITED : Escape.CSV);
        textEnclosureCombo.setEnabled(!b);
        escapeCharCombo.setEnabled(!b);
        splitwayRecordForJavaFID.setEnabled(b);
        if (b) {
          escapeCharComboOldValue=escapeCharCombo.getText();
          textEnclosureComboOldValue=textEnclosureCombo.getText();
          textEnclosureCombo.select(0);
          escapeCharCombo.select(0);
          textEnclosureFlag.setText(""String_Node_Str"");
          escapeCharFlag.setText(""String_Node_Str"");
          checkFieldsValue();
        }
 else {
          if ((!""String_Node_Str"".equals(escapeCharComboOldValue)) && (!escapeCharComboOldValue.equals(EMPTY_VALUE))) {
            escapeCharCombo.setText(escapeCharComboOldValue);
            setCharFlag(escapeCharFlag,escapeCharCombo.getText());
          }
          if ((!""String_Node_Str"".equals(textEnclosureComboOldValue)) && (!textEnclosureComboOldValue.equals(EMPTY_VALUE))) {
            textEnclosureCombo.setText(textEnclosureComboOldValue);
            setCharFlag(textEnclosureFlag,textEnclosureCombo.getText());
          }
        }
      }
    }
);
  }
  emptyRowsToSkipCheckbox.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setRemoveEmptyRow(emptyRowsToSkipCheckbox.getSelection());
      checkFieldsValue();
    }
  }
);
  escapeCharCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (escapeCharCombo.getText() != null && !(""String_Node_Str"").equals(escapeCharCombo.getText()) && !(EMPTY_VALUE).equals(escapeCharCombo.getText())) {
        getConnection().setEscapeChar(escapeCharCombo.getText());
      }
 else {
        getConnection().setEscapeChar(null);
      }
      checkFieldsValue();
    }
  }
);
  textEnclosureCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (textEnclosureCombo.getText() != null && !(""String_Node_Str"").equals(textEnclosureCombo.getText()) && !(EMPTY_VALUE).equals(textEnclosureCombo.getText())) {
        getConnection().setTextEnclosure(textEnclosureCombo.getText());
      }
 else {
        getConnection().setTextEnclosure(null);
      }
      checkFieldsValue();
    }
  }
);
}",0.9911359159553512
127735,"public void refresh(){
  refreshPreview();
}","@Override public void refresh(){
  refreshPreview();
}",0.8979591836734694
127736,"/** 
 * add Controls of Group Delimited File Settings.
 */
private void addFieldsListenersGroupDelimitedFileSettings(){
  encodingCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  fieldSeparatorCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      fieldSeparatorManager();
    }
  }
);
  rowSeparatorCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      rowSeparatorManager();
    }
  }
);
  fieldSeparatorText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setFieldSeparatorValue(fieldSeparatorText.getText());
      checkFieldsValue();
    }
  }
);
  fieldSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
    }
  }
);
  rowSeparatorText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setRowSeparatorValue(rowSeparatorText.getText());
      checkFieldsValue();
    }
  }
);
  rowSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
    }
  }
);
}","/** 
 * add Controls of Group Delimited File Settings.
 */
private void addFieldsListenersGroupDelimitedFileSettings(){
  encodingCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  fieldSeparatorCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      fieldSeparatorManager();
    }
  }
);
  rowSeparatorCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      rowSeparatorManager();
    }
  }
);
  fieldSeparatorText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setFieldSeparatorValue(fieldSeparatorText.getText());
      checkFieldsValue();
    }
  }
);
  fieldSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
    }
  }
);
  rowSeparatorText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setRowSeparatorValue(rowSeparatorText.getText());
      checkFieldsValue();
    }
  }
);
  rowSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
    }
  }
);
}",0.9816176470588236
127737,"public void modifyText(final ModifyEvent e){
  getConnection().setRowSeparatorValue(rowSeparatorText.getText());
  checkFieldsValue();
}","@Override public void modifyText(final ModifyEvent e){
  getConnection().setRowSeparatorValue(rowSeparatorText.getText());
  checkFieldsValue();
}",0.9645390070921984
127738,"@Override public void updateUIInThreadIfThreadIsNotCanceled(){
  if (previewInformationLabel.isDisposed()) {
    return;
  }
  previewInformationLabel.setText(previewInformationLabelMsg);
  if (getException() != null) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        handleErrorOutput(outputComposite,tabFolder,outputTabItem);
      }
    }
);
    return;
  }
  if (csvArray != null) {
    delimitedFilePreview.refreshTablePreview(csvArray,firstRowIsCatption);
  }
}","@Override public void updateUIInThreadIfThreadIsNotCanceled(){
  if (previewInformationLabel.isDisposed()) {
    return;
  }
  previewInformationLabel.setText(previewInformationLabelMsg);
  if (getException() != null) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        handleErrorOutput(outputComposite,tabFolder,outputTabItem);
      }
    }
);
    return;
  }
  if (csvArray != null) {
    delimitedFilePreview.refreshTablePreview(csvArray,firstRowIsCatption);
  }
}",0.9917081260364844
127739,"/** 
 * add Controls to group Row To Skip and Limit.
 */
private void addFieldsListenersGroupsRowToSkipAndLimit(){
  ArrayList<LabelledCheckboxCombo> labelledCheckboxCombo2Control=new ArrayList<LabelledCheckboxCombo>();
  labelledCheckboxCombo2Control.add(rowsToSkipHeaderCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipLimitCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipFooterCheckboxCombo);
  Iterator<LabelledCheckboxCombo> iCheckboxCombo;
  LabelledCheckboxCombo labelledCheckboxCombo;
  for (iCheckboxCombo=labelledCheckboxCombo2Control.iterator(); iCheckboxCombo.hasNext(); ) {
    labelledCheckboxCombo=iCheckboxCombo.next();
    labelledCheckboxCombo.addKeyListener(new KeyAdapter(){
      @Override public void keyPressed(      KeyEvent e){
        if (!isContextMode()) {
          String string=String.valueOf(e.character);
          if (!(string.matches(""String_Node_Str"")) && e.keyCode != 8 && e.keyCode != SWT.DEL) {
            e.doit=false;
          }
        }
      }
    }
);
  }
  rowsToSkipHeaderCheckboxCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipHeaderCheckboxCombo.isEmpty()) {
          if (!rowsToSkipHeaderCheckboxCombo.isInteger() || rowsToSkipHeaderCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipHeaderCheckboxCombo.deselectAll();
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            getConnection().setHeaderValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipHeaderCheckboxCombo.getCombo().setFocus();
            firstRowIsCaptionCheckbox.setSelection(false);
            getConnection().setFirstLineCaption(false);
            return;
          }
 else {
            getConnection().setHeaderValue(rowsToSkipHeaderCheckboxCombo.getText().trim());
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            checkFieldsValue();
          }
        }
 else {
          getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
          getConnection().setHeaderValue(""String_Node_Str"" + 0);
          checkFieldsValue();
        }
      }
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipFooterCheckboxCombo.isEmpty()) {
          if (!rowsToSkipFooterCheckboxCombo.isInteger() || rowsToSkipFooterCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipFooterCheckboxCombo.deselectAll();
            getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
            getConnection().setFooterValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipFooterCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setFooterValue(rowsToSkipFooterCheckboxCombo.getText().trim());
          }
        }
 else {
          getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
          getConnection().setFooterValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipLimitCheckboxCombo.isEmpty()) {
          if (!rowsToSkipLimitCheckboxCombo.isInteger() || rowsToSkipLimitCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipLimitCheckboxCombo.deselectAll();
            getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
            getConnection().setLimitValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipLimitCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setLimitValue(rowsToSkipLimitCheckboxCombo.getText());
          }
        }
 else {
          getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
          getConnection().setLimitValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipHeaderCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      String text=rowsToSkipHeaderCheckboxCombo.getText();
      if (isContextMode() && getContextModeManager() != null) {
        text=getContextModeManager().getOriginalValue(text);
      }
      if ((!rowsToSkipHeaderCheckboxCombo.isChecked()) || text.trim().equals(""String_Node_Str"")) {
        firstRowIsCaptionCheckbox.setSelection(false);
        getConnection().setFirstLineCaption(false);
      }
      getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
}","/** 
 * add Controls to group Row To Skip and Limit.
 */
private void addFieldsListenersGroupsRowToSkipAndLimit(){
  ArrayList<LabelledCheckboxCombo> labelledCheckboxCombo2Control=new ArrayList<LabelledCheckboxCombo>();
  labelledCheckboxCombo2Control.add(rowsToSkipHeaderCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipLimitCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipFooterCheckboxCombo);
  Iterator<LabelledCheckboxCombo> iCheckboxCombo;
  LabelledCheckboxCombo labelledCheckboxCombo;
  for (iCheckboxCombo=labelledCheckboxCombo2Control.iterator(); iCheckboxCombo.hasNext(); ) {
    labelledCheckboxCombo=iCheckboxCombo.next();
    labelledCheckboxCombo.addKeyListener(new KeyAdapter(){
      @Override public void keyPressed(      KeyEvent e){
        if (!isContextMode()) {
          String string=String.valueOf(e.character);
          if (!(string.matches(""String_Node_Str"")) && e.keyCode != 8 && e.keyCode != SWT.DEL) {
            e.doit=false;
          }
        }
      }
    }
);
  }
  rowsToSkipHeaderCheckboxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipHeaderCheckboxCombo.isEmpty()) {
          if (!rowsToSkipHeaderCheckboxCombo.isInteger() || rowsToSkipHeaderCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipHeaderCheckboxCombo.deselectAll();
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            getConnection().setHeaderValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipHeaderCheckboxCombo.getCombo().setFocus();
            firstRowIsCaptionCheckbox.setSelection(false);
            getConnection().setFirstLineCaption(false);
            return;
          }
 else {
            getConnection().setHeaderValue(rowsToSkipHeaderCheckboxCombo.getText().trim());
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            checkFieldsValue();
          }
        }
 else {
          getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
          getConnection().setHeaderValue(""String_Node_Str"" + 0);
          checkFieldsValue();
        }
      }
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipFooterCheckboxCombo.isEmpty()) {
          if (!rowsToSkipFooterCheckboxCombo.isInteger() || rowsToSkipFooterCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipFooterCheckboxCombo.deselectAll();
            getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
            getConnection().setFooterValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipFooterCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setFooterValue(rowsToSkipFooterCheckboxCombo.getText().trim());
          }
        }
 else {
          getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
          getConnection().setFooterValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipLimitCheckboxCombo.isEmpty()) {
          if (!rowsToSkipLimitCheckboxCombo.isInteger() || rowsToSkipLimitCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipLimitCheckboxCombo.deselectAll();
            getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
            getConnection().setLimitValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipLimitCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setLimitValue(rowsToSkipLimitCheckboxCombo.getText());
          }
        }
 else {
          getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
          getConnection().setLimitValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipHeaderCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      String text=rowsToSkipHeaderCheckboxCombo.getText();
      if (isContextMode() && getContextModeManager() != null) {
        text=getContextModeManager().getOriginalValue(text);
      }
      if ((!rowsToSkipHeaderCheckboxCombo.isChecked()) || text.trim().equals(""String_Node_Str"")) {
        firstRowIsCaptionCheckbox.setSelection(false);
        getConnection().setFirstLineCaption(false);
      }
      getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
}",0.9973300106799572
127740,"@Override protected void addFields(){
  Composite mainComposite=Form.startNewGridLayout(this,2);
  addGroupDelimitedFileSettings(mainComposite,280,80);
  addGroupRowsToSkip(mainComposite,300,80);
  addGroupDieOnErrorSettings(mainComposite,280,60);
  addGroupLimit(mainComposite,300,60);
  Composite mainComposite2=Form.startNewGridLayout(this,1);
  addGroupFileViewer(mainComposite2,600,200);
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
}","@Override protected void addFields(){
  Composite mainComposite=Form.startNewGridLayout(this,2);
  addGroupDelimitedFileSettings(mainComposite,280,120);
  addGroupRowsToSkip(mainComposite,300,120);
  addGroupDieOnErrorSettings(mainComposite,280,67);
  addGroupLimit(mainComposite,300,67);
  Composite mainComposite2=Form.startNewGridLayout(this,1);
  addGroupFileViewer(mainComposite2,600,200);
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
}",0.8223583460949464
127741,"public void run(){
  handleErrorOutput(outputComposite,tabFolder,outputTabItem);
}","@Override public void run(){
  handleErrorOutput(outputComposite,tabFolder,outputTabItem);
}",0.942528735632184
127742,"public void refresh(){
  refreshPreview();
}","@Override public void refresh(){
  refreshPreview();
}",0.8979591836734694
127743,"/** 
 * add Controls of Group Delimited File Settings.
 */
private void addFieldsListenersGroupDelimitedFileSettings(){
  encodingCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setEncoding(encodingCombo.getText());
        checkFieldsValue();
      }
    }
  }
);
  advanceSeparatorCheckbox.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean select=advanceSeparatorCheckbox.getSelection();
      getConnection().setAdvancedSpearator(select);
      if (!isContextMode()) {
        decimalSeparatorText.setEnabled(select);
        thousandSeparaotrText.setEnabled(select);
        getConnection().setThousandSeparator(thousandSeparaotrText.getText());
        getConnection().setDecimalSeparator(decimalSeparatorText.getText());
        checkFieldsValue();
      }
    }
  }
);
  decimalSeparatorText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setDecimalSeparator(decimalSeparatorText.getText());
        checkFieldsValue();
      }
    }
  }
);
  thousandSeparaotrText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setThousandSeparator(thousandSeparaotrText.getText());
        checkFieldsValue();
      }
    }
  }
);
}","/** 
 * add Controls of Group Delimited File Settings.
 */
private void addFieldsListenersGroupDelimitedFileSettings(){
  encodingCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setEncoding(encodingCombo.getText());
        checkFieldsValue();
      }
    }
  }
);
  advanceSeparatorCheckbox.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean select=advanceSeparatorCheckbox.getSelection();
      getConnection().setAdvancedSpearator(select);
      if (!isContextMode()) {
        decimalSeparatorText.setEnabled(select);
        thousandSeparaotrText.setEnabled(select);
        getConnection().setThousandSeparator(thousandSeparaotrText.getText());
        getConnection().setDecimalSeparator(decimalSeparatorText.getText());
        checkFieldsValue();
      }
    }
  }
);
  decimalSeparatorText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setDecimalSeparator(decimalSeparatorText.getText());
        checkFieldsValue();
      }
    }
  }
);
  thousandSeparaotrText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setThousandSeparator(thousandSeparaotrText.getText());
        checkFieldsValue();
      }
    }
  }
);
}",0.9900332225913622
127744,"public void modifyText(ModifyEvent e){
  if (!isContextMode()) {
    getConnection().setThousandSeparator(thousandSeparaotrText.getText());
    checkFieldsValue();
  }
}","@Override public void modifyText(ModifyEvent e){
  if (!isContextMode()) {
    getConnection().setThousandSeparator(thousandSeparaotrText.getText());
    checkFieldsValue();
  }
}",0.971264367816092
127745,"@Override public void updateUIInThreadIfThreadIsNotCanceled(){
  if (previewInformationLabel.isDisposed()) {
    return;
  }
  previewInformationLabel.setText(previewInformationLabelMsg);
  if (getException() != null) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        handleErrorOutput(outputComposite,tabFolder,outputTabItem);
      }
    }
);
    return;
  }
  if (csvArray == null) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  }
 else {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    excelProcessPreview.refreshTablePreview(csvArray,getConnection().isFirstLineCaption(),processDescription);
    previewInformationLabel.setText(""String_Node_Str"");
  }
}","@Override public void updateUIInThreadIfThreadIsNotCanceled(){
  if (previewInformationLabel.isDisposed()) {
    return;
  }
  previewInformationLabel.setText(previewInformationLabelMsg);
  if (getException() != null) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    Display.getDefault().asyncExec(new Runnable(){
      @Override public void run(){
        handleErrorOutput(outputComposite,tabFolder,outputTabItem);
      }
    }
);
    return;
  }
  if (csvArray == null) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  }
 else {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    excelProcessPreview.refreshTablePreview(csvArray,getConnection().isFirstLineCaption(),processDescription);
    previewInformationLabel.setText(""String_Node_Str"");
  }
}",0.9944444444444444
127746,"private void addFieldsListenersDieOnError(){
  firstColumnText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setFirstColumn(firstColumnText.getText());
        checkFieldsValue();
      }
    }
  }
);
  lastColumnText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setLastColumn(lastColumnText.getText());
        checkFieldsValue();
      }
    }
  }
);
}","private void addFieldsListenersDieOnError(){
  firstColumnText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setFirstColumn(firstColumnText.getText());
        checkFieldsValue();
      }
    }
  }
);
  lastColumnText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setLastColumn(lastColumnText.getText());
        checkFieldsValue();
      }
    }
  }
);
}",0.981981981981982
127747,"protected void deleteElements(final IProxyRepositoryFactory factory,final RepositoryNode currentNode) throws PersistenceException, BusinessException {
  final IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      factory.save(item);
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          for (          IEditorReference editors : page.getEditorReferences()) {
            String nameInEditor=editors.getName();
            if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
              page.closeEditor(editors.getEditor(false),false);
            }
          }
          if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
            if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
              for (              IRepositoryNode curNode : currentNode.getChildren()) {
                deleteElements(factory,(RepositoryNode)curNode);
              }
              factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
            }
 else {
              factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
            }
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
}","protected void deleteElements(final IProxyRepositoryFactory factory,final RepositoryNode currentNode) throws PersistenceException, BusinessException {
  if (!validElement(currentNode)) {
    return;
  }
  final IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      factory.save(item);
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          for (          IEditorReference editors : page.getEditorReferences()) {
            String nameInEditor=editors.getName();
            if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
              page.closeEditor(editors.getEditor(false),false);
            }
          }
          if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
            if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
              for (              IRepositoryNode curNode : currentNode.getChildren()) {
                deleteElements(factory,(RepositoryNode)curNode);
              }
              factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
            }
 else {
              factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
            }
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
}",0.9872611464968152
127748,"protected void deleteElements(final IProxyRepositoryFactory factory,final RepositoryNode currentNode) throws PersistenceException, BusinessException {
  final IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      factory.save(item);
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          for (          IEditorReference editors : page.getEditorReferences()) {
            String nameInEditor=editors.getName();
            if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
              page.closeEditor(editors.getEditor(false),false);
            }
          }
          if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
            if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
              for (              IRepositoryNode curNode : currentNode.getChildren()) {
                deleteElements(factory,(RepositoryNode)curNode);
              }
              factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
            }
 else {
              for (              IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
                handler.deleteNode(objToDelete);
              }
              factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
            }
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
}","protected void deleteElements(final IProxyRepositoryFactory factory,final RepositoryNode currentNode) throws PersistenceException, BusinessException {
  if (!validElement(currentNode)) {
    return;
  }
  final IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      factory.save(item);
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          for (          IEditorReference editors : page.getEditorReferences()) {
            String nameInEditor=editors.getName();
            if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
              page.closeEditor(editors.getEditor(false),false);
            }
          }
          if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
            if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
              for (              IRepositoryNode curNode : currentNode.getChildren()) {
                deleteElements(factory,(RepositoryNode)curNode);
              }
              factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
            }
 else {
              for (              IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
                handler.deleteNode(objToDelete);
              }
              factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
            }
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
}",0.9882724402345512
127749,"@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=false;
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IProjectRepositoryNode root=repoNode.getRoot();
    if (!merged && root instanceof ProjectRepositoryNode) {
      merged=((ProjectRepositoryNode)root).getMergeRefProject();
    }
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new Runnable(){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
        return true;
      }
    }
  }
  return false;
}","@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      if (viewer instanceof RepoViewCommonViewer) {
        runnables.add(new Runnable(){
          @Override public void run(){
            refreshTopLevelNode(repoNode);
          }
        }
);
      }
      return false;
    }
 else {
      return true;
    }
  }
  return false;
}",0.8274285714285714
127750,"private boolean validResourcePath(IResourceDelta delta,IPath topLevelNodeWorkspaceRelativePath,boolean refMerged){
  if (ingoreResource(delta)) {
    return false;
  }
  IResourceDelta[] affectedChildren=delta.getAffectedChildren();
  IPath path=delta.getFullPath();
  if (path != null && (affectedChildren.length == 0) && (FileConstants.PROPERTIES_EXTENSION.equals(path.getFileExtension()) || (delta instanceof IContainer))) {
    if (isMatchedPath(topLevelNodeWorkspaceRelativePath,path)) {
      return true;
    }
 else     if (refMerged) {
      path=path.removeFirstSegments(1);
      IPath relativePath=topLevelNodeWorkspaceRelativePath.removeFirstSegments(1);
      if (isMatchedPath(relativePath,path)) {
        return true;
      }
    }
  }
  if (affectedChildren != null) {
    for (    IResourceDelta child : affectedChildren) {
      if (validResourcePath(child,topLevelNodeWorkspaceRelativePath,refMerged)) {
        return true;
      }
    }
  }
  return false;
}","private boolean validResourcePath(IResourceDelta delta,IPath topLevelNodeWorkspaceRelativePath,boolean refMerged){
  if (ingoreResource(delta)) {
    return false;
  }
  IResourceDelta[] affectedChildren=delta.getAffectedChildren();
  IResource res=delta.getResource();
  IPath path=delta.getFullPath();
  boolean noChild=(affectedChildren == null || (affectedChildren.length == 0));
  if (path != null && noChild && (FileConstants.PROPERTIES_EXTENSION.equals(path.getFileExtension()) || (res instanceof IContainer))) {
    if (isMatchedPath(topLevelNodeWorkspaceRelativePath,path)) {
      return true;
    }
 else     if (refMerged) {
      if (res != null) {
        path=res.getProjectRelativePath();
      }
 else {
        path=path.removeFirstSegments(1);
      }
      IPath relativePath=topLevelNodeWorkspaceRelativePath.removeFirstSegments(1);
      if (isMatchedPath(relativePath,path)) {
        return true;
      }
    }
  }
  if (affectedChildren != null) {
    for (    IResourceDelta child : affectedChildren) {
      if (validResourcePath(child,topLevelNodeWorkspaceRelativePath,refMerged)) {
        return true;
      }
    }
  }
  return false;
}",0.8770949720670391
127751,"private void createLogsRoot(Composite workArea){
  Composite projectGroup=new Composite(workArea,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  layout.makeColumnsEqualWidth=false;
  layout.marginWidth=0;
  projectGroup.setLayout(layout);
  projectGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  logsFromArchiveRadio=new Button(projectGroup,SWT.RADIO);
  logsFromArchiveRadio.setText(DataTransferMessages.WizardProjectsImportPage_ArchiveSelectTitle);
  archivePathField=new Text(projectGroup,SWT.BORDER);
  archivePathField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL));
  browseArchivesButton=new Button(projectGroup,SWT.PUSH);
  browseArchivesButton.setText(DataTransferMessages.DataTransfer_browse);
  setButtonLayoutData(browseArchivesButton);
  archivePathField.setEnabled(false);
  browseArchivesButton.setEnabled(false);
  browseArchivesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      handleLocationArchiveButtonPressed();
    }
  }
);
  archivePathField.addTraverseListener(new TraverseListener(){
    public void keyTraversed(    TraverseEvent e){
      if (e.detail == SWT.TRAVERSE_RETURN) {
        e.doit=false;
        lastPath=archivePathField.getText().trim();
      }
    }
  }
);
  archivePathField.addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    org.eclipse.swt.events.FocusEvent e){
      lastPath=archivePathField.getText().trim();
    }
  }
);
  logsFromArchiveRadio.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      archiveRadioSelected();
    }
  }
);
  label=new Label(workArea,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  addLogsButton=new Button(workArea,SWT.CHECK);
  addLogsButton.setText(Messages.getString(""String_Node_Str""));
  sysConfigButton=new Button(workArea,SWT.CHECK);
  sysConfigButton.setText(Messages.getString(""String_Node_Str""));
}","private void createLogsRoot(Composite workArea){
  Composite projectGroup=new Composite(workArea,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  layout.makeColumnsEqualWidth=false;
  layout.marginWidth=0;
  projectGroup.setLayout(layout);
  projectGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  logsFromArchiveRadio=new Button(projectGroup,SWT.RADIO);
  logsFromArchiveRadio.setText(DataTransferMessages.WizardProjectsImportPage_ArchiveSelectTitle);
  archivePathField=new Text(projectGroup,SWT.BORDER);
  archivePathField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL));
  browseArchivesButton=new Button(projectGroup,SWT.PUSH);
  browseArchivesButton.setText(DataTransferMessages.DataTransfer_browse);
  setButtonLayoutData(browseArchivesButton);
  archivePathField.setEnabled(false);
  browseArchivesButton.setEnabled(false);
  browseArchivesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      handleLocationArchiveButtonPressed();
    }
  }
);
  archivePathField.addTraverseListener(new TraverseListener(){
    public void keyTraversed(    TraverseEvent e){
      if (e.detail == SWT.TRAVERSE_RETURN) {
        e.doit=false;
        lastPath=archivePathField.getText().trim();
      }
    }
  }
);
  archivePathField.addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    org.eclipse.swt.events.FocusEvent e){
      lastPath=archivePathField.getText().trim();
    }
  }
);
  logsFromArchiveRadio.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      archiveRadioSelected();
    }
  }
);
  label=new Label(workArea,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  addLogsButton=new Button(workArea,SWT.CHECK);
  addLogsButton.setSelection(true);
  addLogsButton.setText(Messages.getString(""String_Node_Str""));
  sysConfigButton=new Button(workArea,SWT.CHECK);
  sysConfigButton.setSelection(true);
  sysConfigButton.setText(Messages.getString(""String_Node_Str""));
  addLogsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (addLogsButton.getSelection() == false && sysConfigButton.getSelection() == false) {
        setPageComplete(false);
      }
 else {
        setPageComplete(true);
      }
    }
  }
);
  sysConfigButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (addLogsButton.getSelection() == false && sysConfigButton.getSelection() == false) {
        setPageComplete(false);
      }
 else {
        setPageComplete(true);
      }
    }
  }
);
}",0.8511879949979158
127752,"@Override public void widgetSelected(SelectionEvent e){
  archiveRadioSelected();
}","@Override public void widgetSelected(SelectionEvent e){
  if (addLogsButton.getSelection() == false && sysConfigButton.getSelection() == false) {
    setPageComplete(false);
  }
 else {
    setPageComplete(true);
  }
}",0.4186046511627907
127753,"@Before public void setUp(){
  allTypes=(ERepositoryObjectType[])ERepositoryObjectType.values();
  Arrays.sort(allTypes,new Comparator<ERepositoryObjectType>(){
    @Override public int compare(    ERepositoryObjectType o1,    ERepositoryObjectType o2){
      return o1.getType().compareToIgnoreCase(o2.getType());
    }
  }
);
}","@Before public void setUp(){
  allTypes=ERepositoryObjectType.values(ERepositoryObjectType.class);
  Arrays.sort(allTypes,new Comparator<ERepositoryObjectType>(){
    @Override public int compare(    ERepositoryObjectType o1,    ERepositoryObjectType o2){
      return o1.getType().compareToIgnoreCase(o2.getType());
    }
  }
);
  unusedTypes=new ArrayList<ERepositoryObjectType>();
  unusedTypes.add(ERepositoryObjectType.SVG_BUSINESS_PROCESS);
  unusedTypes.add(ERepositoryObjectType.SNIPPETS);
}",0.7342995169082126
127754,"@After public void tearDown() throws Exception {
  allTypes=null;
}","@After public void tearDown() throws Exception {
  allTypes=null;
  unusedTypes.clear();
  unusedTypes=null;
}",0.7570621468926554
127755,"/** 
 * ggu Comment method ""updateQuery"". if show is false, will work for context menu action.
 */
public static boolean updateFileConnection(ConnectionItem connectionItem,boolean show,boolean onlySimpleShow){
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  List<RelationshipItemBuilder.Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem.getConnection(),relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      types.add(EUpdateItemType.NODE_SCHEMA);
      types.add(EUpdateItemType.JOB_PROPERTY_HEADERFOOTER);
      types.add(EUpdateItemType.NODE_SAP_IDOC);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(show,onlySimpleShow);
}","/** 
 * ggu Comment method ""updateQuery"". if show is false, will work for context menu action.
 */
public static boolean updateFileConnection(ConnectionItem connectionItem,boolean show,boolean onlySimpleShow){
  List<RelationshipItemBuilder.Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem.getConnection(),relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      types.add(EUpdateItemType.NODE_SCHEMA);
      types.add(EUpdateItemType.JOB_PROPERTY_HEADERFOOTER);
      types.add(EUpdateItemType.NODE_SAP_IDOC);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(show,onlySimpleShow);
}",0.9171374764595104
127756,"@Override public void run(){
  FOXTreeNode node=(FOXTreeNode)this.getStructuredSelection().getFirstElement();
  if (createChildNode(node)) {
    form.redrawLinkers();
  }
  form.updateConnection();
  form.updateStatus();
}","@Override public void run(){
  FOXTreeNode node=(FOXTreeNode)this.getStructuredSelection().getFirstElement();
  if (node != null && createChildNode(node)) {
    form.redrawLinkers();
  }
  form.updateConnection();
  form.updateStatus();
}",0.9652173913043478
127757,"private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean properties,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (option != GENERATE_MAIN_ONLY) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str""))) {
        if (""String_Node_Str"".equals(componentName)) {
          IElementParameter fromExternal=node.getElementParameter(""String_Node_Str"");
          Object value=fromExternal.getValue();
          if (value != null && ""String_Node_Str"".equals(value.toString())) {
            continue;
          }
        }
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (option == GENERATE_WITH_FIRST_CHILD) {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
                currentProcess.setNeedRegenerateCode(true);
              }
            }
            LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (exportAsOSGI) {
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
              LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
            }
            LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
              LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            }
          }
        }
      }
    }
  }
}","private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean properties,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (option != GENERATE_MAIN_ONLY) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str""))) {
        if (""String_Node_Str"".equals(componentName)) {
          IElementParameter fromExternal=node.getElementParameter(""String_Node_Str"");
          Object value=fromExternal.getValue();
          if (value != null && ""String_Node_Str"".equals(value.toString())) {
            continue;
          }
        }
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (option == GENERATE_WITH_FIRST_CHILD) {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
                currentProcess.setNeedRegenerateCode(true);
              }
            }
            LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (exportAsOSGI) {
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
              LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
            }
            LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
              LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            }
          }
        }
      }
    }
  }
}",0.9636074270557028
127758,"/** 
 * DOC qiang.zhang Comment method ""getXMLMappingValue"".
 * @param repositoryConnection
 * @param metadataTable
 * @return
 */
public static List<Map<String,Object>> getXMLMappingValue(Connection connection,List<IMetadataTable> metadataTables){
  if (metadataTables == null || metadataTables.isEmpty()) {
    return new ArrayList<Map<String,Object>>();
  }
  if (connection instanceof XmlFileConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    XmlFileConnection xmlConnection=(XmlFileConnection)connection;
    EList objectList=xmlConnection.getSchema();
    XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)objectList.get(0);
    if (metadataTable != null) {
      if (xmlDesc != null) {
        List<SchemaTarget> schemaTargets=xmlDesc.getSchemaTargets();
        List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
        for (        IMetadataColumn col : metadataTable.getListColumns()) {
          Map<String,Object> map=new HashMap<String,Object>();
          map.put(""String_Node_Str"",null);
          for (int i=0; i < schemaTargets.size(); i++) {
            SchemaTarget sch=schemaTargets.get(i);
            if (col.getLabel().equals(sch.getTagName())) {
              map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(sch.getRelativeXPathQuery()));
            }
          }
          maps.add(map);
        }
        return maps;
      }
    }
  }
  if (connection instanceof MDMConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    MDMConnection xmlConnection=(MDMConnection)connection;
    EList objectList=xmlConnection.getSchemas();
    if (metadataTable != null) {
      for (      Concept concept : (List<Concept>)objectList) {
        if (concept != null && concept.getLabel() != null && concept.getLabel().equals(metadataTable.getLabel())) {
          List<ConceptTarget> conceptTargets=concept.getConceptTargets();
          List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
          for (          IMetadataColumn col : metadataTable.getListColumns()) {
            Map<String,Object> map=new HashMap<String,Object>();
            map.put(""String_Node_Str"",null);
            for (int i=0; i < conceptTargets.size(); i++) {
              ConceptTarget cpt=conceptTargets.get(i);
              if (col.getLabel().equals(cpt.getTargetName())) {
                map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(cpt.getRelativeLoopExpression()));
              }
            }
            maps.add(map);
          }
          return maps;
        }
      }
    }
  }
  if (connection instanceof HL7Connection) {
    HL7Connection hl7Connection=(HL7Connection)connection;
    Set objectList=ConnectionHelper.getTables(hl7Connection);
    List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
    for (    IMetadataTable tableOfNode : metadataTables) {
      Map<String,Object> map=new HashMap<String,Object>();
      for (      MetadataTable table : (Set<MetadataTable>)objectList) {
        if (table != null && (table.getLabel() == null || table.getLabel().equals(tableOfNode.getLabel()))) {
          String xpathValue=""String_Node_Str"";
          for (          MetadataColumn col : table.getColumns()) {
            String original=col.getOriginalField();
            if (original != null && !""String_Node_Str"".equals(original)) {
              if (original.indexOf(TalendQuoteUtils.LBRACKET) != -1) {
                original=original.substring(0,original.indexOf(TalendQuoteUtils.LBRACKET));
              }
              original=TalendQuoteUtils.addQuotes(original);
              xpathValue+=original;
            }
            if (table.getColumns().indexOf(col) < table.getColumns().size() - 1) {
              xpathValue+=""String_Node_Str"";
            }
          }
          map.put(""String_Node_Str"",xpathValue);
          map.put(""String_Node_Str"",tableOfNode.getTableName());
          maps.add(map);
        }
      }
    }
    return maps;
  }
  return null;
}","/** 
 * DOC qiang.zhang Comment method ""getXMLMappingValue"".
 * @param repositoryConnection
 * @param metadataTable
 * @return
 */
public static List<Map<String,Object>> getXMLMappingValue(Connection connection,List<IMetadataTable> metadataTables){
  if (metadataTables == null || metadataTables.isEmpty()) {
    return new ArrayList<Map<String,Object>>();
  }
  if (connection instanceof XmlFileConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    XmlFileConnection xmlConnection=(XmlFileConnection)connection;
    EList objectList=xmlConnection.getSchema();
    XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)objectList.get(0);
    if (metadataTable != null) {
      if (xmlDesc != null) {
        List<SchemaTarget> schemaTargets=xmlDesc.getSchemaTargets();
        List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
        for (        IMetadataColumn col : metadataTable.getListColumns()) {
          Map<String,Object> map=new HashMap<String,Object>();
          map.put(""String_Node_Str"",null);
          for (int i=0; i < schemaTargets.size(); i++) {
            SchemaTarget sch=schemaTargets.get(i);
            if (col.getLabel().equals(sch.getTagName())) {
              map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(sch.getRelativeXPathQuery()));
            }
          }
          if (map.get(UpdatesConstants.QUERY) == null) {
            if (col.getLabel() != null && col.getLabel().startsWith(""String_Node_Str"")) {
              String temp=col.getLabel().substring(6,col.getLabel().length());
              if (temp != null) {
                char c[]=temp.toCharArray();
                boolean flag=true;
                for (                char element : c) {
                  if (element < '0' || element > '9') {
                    flag=false;
                    break;
                  }
                }
                if (flag) {
                  int j=Integer.parseInt(temp);
                  SchemaTarget schema=schemaTargets.get(j);
                  if (schema != null && KeywordsValidator.isKeyword(schema.getTagName())) {
                    map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(schema.getRelativeXPathQuery()));
                  }
                }
              }
            }
          }
          maps.add(map);
        }
        return maps;
      }
    }
  }
  if (connection instanceof MDMConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    MDMConnection xmlConnection=(MDMConnection)connection;
    EList objectList=xmlConnection.getSchemas();
    if (metadataTable != null) {
      for (      Concept concept : (List<Concept>)objectList) {
        if (concept != null && concept.getLabel() != null && concept.getLabel().equals(metadataTable.getLabel())) {
          List<ConceptTarget> conceptTargets=concept.getConceptTargets();
          List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
          for (          IMetadataColumn col : metadataTable.getListColumns()) {
            Map<String,Object> map=new HashMap<String,Object>();
            map.put(""String_Node_Str"",null);
            for (int i=0; i < conceptTargets.size(); i++) {
              ConceptTarget cpt=conceptTargets.get(i);
              if (col.getLabel().equals(cpt.getTargetName())) {
                map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(cpt.getRelativeLoopExpression()));
              }
            }
            maps.add(map);
          }
          return maps;
        }
      }
    }
  }
  if (connection instanceof HL7Connection) {
    HL7Connection hl7Connection=(HL7Connection)connection;
    Set objectList=ConnectionHelper.getTables(hl7Connection);
    List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
    for (    IMetadataTable tableOfNode : metadataTables) {
      Map<String,Object> map=new HashMap<String,Object>();
      for (      MetadataTable table : (Set<MetadataTable>)objectList) {
        if (table != null && (table.getLabel() == null || table.getLabel().equals(tableOfNode.getLabel()))) {
          String xpathValue=""String_Node_Str"";
          for (          MetadataColumn col : table.getColumns()) {
            String original=col.getOriginalField();
            if (original != null && !""String_Node_Str"".equals(original)) {
              if (original.indexOf(TalendQuoteUtils.LBRACKET) != -1) {
                original=original.substring(0,original.indexOf(TalendQuoteUtils.LBRACKET));
              }
              original=TalendQuoteUtils.addQuotes(original);
              xpathValue+=original;
            }
            if (table.getColumns().indexOf(col) < table.getColumns().size() - 1) {
              xpathValue+=""String_Node_Str"";
            }
          }
          map.put(""String_Node_Str"",xpathValue);
          map.put(""String_Node_Str"",tableOfNode.getTableName());
          maps.add(map);
        }
      }
    }
    return maps;
  }
  return null;
}",0.8924791086350975
127759,"/** 
 * Load emf model from file.
 * @param pkg EPackage of your emf model.
 * @param file The file that contains your emf model.
 * @return A list of emf object.
 * @throws IOException
 */
@SuppressWarnings(""String_Node_Str"") public static <T>List<T> loadEmfModel(EPackage pkg,String file) throws IOException {
  ResourceSet resourceSet=new ResourceSetImpl();
  Resource.Factory.Registry registry=resourceSet.getResourceFactoryRegistry();
  registry.getExtensionToFactoryMap().put(""String_Node_Str"",new EcoreResourceFactoryImpl());
  registry.getExtensionToFactoryMap().put(""String_Node_Str"",new XMLResourceFactoryImpl());
  registry.getExtensionToFactoryMap().put(""String_Node_Str"",new XMIResourceFactoryImpl());
  EPackage.Registry reg=resourceSet.getPackageRegistry();
  reg.put(pkg.getNsURI(),pkg);
  List<T> list=new ArrayList<T>();
  URI uri=URI.createFileURI(file);
  Resource resource=resourceSet.getResource(uri,true);
  resource.load(null);
  for (  EObject obj : resource.getContents()) {
    list.add((T)obj);
  }
  return list;
}","/** 
 * Load emf model from file.
 * @param pkg EPackage of your emf model.
 * @param file The file that contains your emf model.
 * @return A list of emf object.
 * @throws IOException
 */
@SuppressWarnings(""String_Node_Str"") public static <T>List<T> loadEmfModel(EPackage pkg,String file) throws IOException {
  ResourceSet resourceSet=getResourceSet(pkg);
  List<T> list=new ArrayList<T>();
  URI uri=URI.createFileURI(file);
  Resource resource=resourceSet.getResource(uri,true);
  resource.load(null);
  for (  EObject obj : resource.getContents()) {
    list.add((T)obj);
  }
  return list;
}",0.7105423522242535
127760,"/** 
 * Save emf model to file.
 * @param pkg EPackage of your emf model.
 * @param models A list of emf object.
 * @param file The file that will store your emf model.
 * @throws IOException
 */
public static void saveEmfModel(EPackage pkg,List<? extends EObject> models,String file) throws IOException {
  ResourceSet resourceSet=new ResourceSetImpl();
  Resource.Factory.Registry registry=resourceSet.getResourceFactoryRegistry();
  registry.getExtensionToFactoryMap().put(""String_Node_Str"",new EcoreResourceFactoryImpl());
  registry.getExtensionToFactoryMap().put(""String_Node_Str"",new XMLResourceFactoryImpl());
  registry.getExtensionToFactoryMap().put(""String_Node_Str"",new XMIResourceFactoryImpl());
  EPackage.Registry reg=resourceSet.getPackageRegistry();
  reg.put(pkg.getNsURI(),pkg);
  URI uri=URI.createFileURI(file);
  Resource resource=resourceSet.createResource(uri);
  for (  EObject model : models) {
    resource.getContents().add(model);
  }
  resource.save(null);
}","/** 
 * Save emf model to file.
 * @param pkg EPackage of your emf model.
 * @param models A list of emf object.
 * @param file The file that will store your emf model.
 * @throws IOException
 */
public static void saveEmfModel(EPackage pkg,List<? extends EObject> models,String file) throws IOException {
  ResourceSet resourceSet=getResourceSet(pkg);
  URI uri=URI.createFileURI(file);
  Resource resource=resourceSet.createResource(uri);
  for (  EObject model : models) {
    resource.getContents().add(model);
  }
  resource.save(null);
}",0.7041149575440888
127761,"public static void saveResource(Resource resource) throws PersistenceException {
  if (resource == null) {
    return;
  }
  if (resource.getURI() == null) {
    return;
  }
  try {
    HashMap options=new HashMap(2);
    options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
    resource.save(options);
  }
 catch (  IOException e) {
    throw new PersistenceException(e);
  }
catch (  RuntimeException e) {
    log.warn(""String_Node_Str"" + resource.getURI() + ""String_Node_Str"",e);
    HashMap options=new HashMap(2);
    options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
    options.put(XMLResource.OPTION_XML_VERSION,""String_Node_Str"");
    try {
      resource.save(options);
    }
 catch (    IOException e1) {
      throw new PersistenceException(e);
    }
  }
}","public static void saveResource(Resource resource) throws PersistenceException {
  if (resource == null) {
    return;
  }
  if (resource.getURI() == null) {
    return;
  }
  HashMap options=new HashMap(2);
  options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
  options.put(XMLResource.OPTION_ESCAPE_USING_CDATA,Boolean.TRUE);
  try {
    resource.save(options);
  }
 catch (  IOException e) {
    throw new PersistenceException(e);
  }
catch (  RuntimeException e) {
    log.warn(""String_Node_Str"" + resource.getURI() + ""String_Node_Str"",e);
    options.put(XMLResource.OPTION_XML_VERSION,""String_Node_Str"");
    try {
      resource.save(options);
    }
 catch (    IOException e1) {
      throw new PersistenceException(e);
    }
  }
}",0.6810176125244618
127762,"@Override public Resource createResource(URI uri){
  String business=""String_Node_Str"";
  String context=""String_Node_Str"";
  String process=""String_Node_Str"";
  String joblet=""String_Node_Str"";
  if (uri.toString().contains(""String_Node_Str"" + business + ""String_Node_Str"") && uri.segmentCount() > 2 && uri.segments()[2].equals(business)) {
    return super.createResource(uri);
  }
 else   if (uri.toString().contains(""String_Node_Str"" + context + ""String_Node_Str"") && uri.segmentCount() > 2 && uri.segments()[2].equals(context)) {
    return super.createResource(uri);
  }
 else   if (uri.toString().contains(""String_Node_Str"" + process + ""String_Node_Str"") && uri.segmentCount() > 2 && uri.segments()[2].equals(process)) {
    return super.createResource(uri);
  }
 else   if (uri.toString().contains(""String_Node_Str"" + joblet + ""String_Node_Str"") && uri.segmentCount() > 2 && uri.segments()[2].equals(joblet)) {
    return super.createResource(uri);
  }
 else {
    return new CwmResource(uri);
  }
}","@Override public Resource createResource(URI uri){
  String business=""String_Node_Str"";
  String context=""String_Node_Str"";
  String process=""String_Node_Str"";
  String joblet=""String_Node_Str"";
  if (validUrl(uri,business) || validUrl(uri,context) || validUrl(uri,process)|| validUrl(uri,joblet)) {
    return new TalendXMIResource(uri);
  }
 else {
    return new CwmResource(uri);
  }
}",0.4040114613180516
127763,"protected void evaluateTextField(){
  if (readOnly) {
    return;
  }
  if (nameText == null || nameText.isDisposed()) {
    return;
  }
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (isKeywords(nameText.getText()) || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(getPropertyLabel(StringUtils.trimToNull(nameText.getText())));
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
    property.setModificationDate(new Date());
  }
  updatePageStatus();
}","protected void evaluateTextField(){
  if (readOnly) {
    return;
  }
  if (nameText == null || nameText.isDisposed()) {
    return;
  }
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (JavaConventions.validateClassFileName(nameText.getText() + CLASS).getSeverity() == IStatus.ERROR || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(getPropertyLabel(StringUtils.trimToNull(nameText.getText())));
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
    property.setModificationDate(new Date());
  }
  updatePageStatus();
}",0.9565826330532212
127764,"/** 
 * test string value as a date with right pattern. </br>examples: </br>TimeZone:+0100 </br>2011/03/27 02:00:00 begin to carry out the daylight saving time. So parse dateString ""20110327 021711"" with TimeZone is wrong </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",false)</code> return <code>false</code> </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",true)</code> return <code>true</code> </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",true)</code> return <code>false</code> </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",false)</code> return <code>false</code>
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @param ignoreTimeZone (if true ignore TimeZone when pare date with pattern)
 * @return the result whether the stringDate is a date string that with a right pattern
 */
public static boolean isDate(String stringDate,String pattern,boolean ignoreTimeZone){
  TimeZone tz=TimeZone.getDefault();
  if (ignoreTimeZone) {
    tz=TimeZone.getTimeZone(""String_Node_Str"");
  }
  if (stringDate == null) {
    return false;
  }
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
  java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
  sdf.setTimeZone(tz);
  sdf.setLenient(false);
  java.util.Date testDate=null;
  ParsePosition pos=new ParsePosition(0);
  testDate=sdf.parse(stringDate,pos);
  if (testDate == null) {
    return false;
  }
  String formatDate=sdf.format(testDate);
  if (formatDate.equalsIgnoreCase(stringDate) || pos.getIndex() == stringDate.length()) {
    return true;
  }
  return false;
}","/** 
 * test string value as a date with right pattern. </br>examples: </br>TimeZone:+0100 </br>2011/03/27 02:00:00 begin to carry out the daylight saving time. So parse dateString ""20110327 021711"" with TimeZone is wrong </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",false)</code> return <code>false</code> </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",true)</code> return <code>true</code> </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",true)</code> return <code>false</code> </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",false)</code> return <code>false</code>
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @param ignoreTimeZone (if true ignore TimeZone when pare date with pattern)
 * @return the result whether the stringDate is a date string that with a right pattern
 */
public static boolean isDate(String stringDate,String pattern,boolean ignoreTimeZone){
  TimeZone tz=TimeZone.getDefault();
  if (ignoreTimeZone) {
    tz=TimeZone.getTimeZone(""String_Node_Str"");
  }
  if (stringDate == null) {
    return false;
  }
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
  java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
  sdf.setTimeZone(tz);
  sdf.setLenient(false);
  java.util.Date testDate=null;
  try {
    testDate=sdf.parse(stringDate);
  }
 catch (  ParseException e) {
    return false;
  }
  String formatDate=sdf.format(testDate);
  if (formatDate.equalsIgnoreCase(stringDate) || formatDate.length() == stringDate.length()) {
    return true;
  }
  return false;
}",0.8570583012725659
127765,"/** 
 * Load emf model from file.
 * @param pkg EPackage of your emf model.
 * @param file The file that contains your emf model.
 * @return A list of emf object.
 * @throws IOException
 */
@SuppressWarnings(""String_Node_Str"") public static <T>List<T> loadEmfModel(EPackage pkg,String file) throws IOException {
  ResourceSet resourceSet=new ResourceSetImpl();
  Resource.Factory.Registry registry=resourceSet.getResourceFactoryRegistry();
  registry.getExtensionToFactoryMap().put(""String_Node_Str"",new EcoreResourceFactoryImpl());
  registry.getExtensionToFactoryMap().put(""String_Node_Str"",new XMLResourceFactoryImpl());
  registry.getExtensionToFactoryMap().put(""String_Node_Str"",new XMIResourceFactoryImpl());
  EPackage.Registry reg=resourceSet.getPackageRegistry();
  reg.put(pkg.getNsURI(),pkg);
  List<T> list=new ArrayList<T>();
  URI uri=URI.createFileURI(file);
  Resource resource=resourceSet.getResource(uri,true);
  resource.load(null);
  for (  EObject obj : resource.getContents()) {
    list.add((T)obj);
  }
  return list;
}","/** 
 * Load emf model from file.
 * @param pkg EPackage of your emf model.
 * @param file The file that contains your emf model.
 * @return A list of emf object.
 * @throws IOException
 */
@SuppressWarnings(""String_Node_Str"") public static <T>List<T> loadEmfModel(EPackage pkg,String file) throws IOException {
  ResourceSet resourceSet=getResourceSet(pkg);
  List<T> list=new ArrayList<T>();
  URI uri=URI.createFileURI(file);
  Resource resource=resourceSet.getResource(uri,true);
  resource.load(null);
  for (  EObject obj : resource.getContents()) {
    list.add((T)obj);
  }
  return list;
}",0.7105423522242535
127766,"/** 
 * Save emf model to file.
 * @param pkg EPackage of your emf model.
 * @param models A list of emf object.
 * @param file The file that will store your emf model.
 * @throws IOException
 */
public static void saveEmfModel(EPackage pkg,List<? extends EObject> models,String file) throws IOException {
  ResourceSet resourceSet=new ResourceSetImpl();
  Resource.Factory.Registry registry=resourceSet.getResourceFactoryRegistry();
  registry.getExtensionToFactoryMap().put(""String_Node_Str"",new EcoreResourceFactoryImpl());
  registry.getExtensionToFactoryMap().put(""String_Node_Str"",new XMLResourceFactoryImpl());
  registry.getExtensionToFactoryMap().put(""String_Node_Str"",new XMIResourceFactoryImpl());
  EPackage.Registry reg=resourceSet.getPackageRegistry();
  reg.put(pkg.getNsURI(),pkg);
  URI uri=URI.createFileURI(file);
  Resource resource=resourceSet.createResource(uri);
  for (  EObject model : models) {
    resource.getContents().add(model);
  }
  resource.save(null);
}","/** 
 * Save emf model to file.
 * @param pkg EPackage of your emf model.
 * @param models A list of emf object.
 * @param file The file that will store your emf model.
 * @throws IOException
 */
public static void saveEmfModel(EPackage pkg,List<? extends EObject> models,String file) throws IOException {
  ResourceSet resourceSet=getResourceSet(pkg);
  URI uri=URI.createFileURI(file);
  Resource resource=resourceSet.createResource(uri);
  for (  EObject model : models) {
    resource.getContents().add(model);
  }
  resource.save(null);
}",0.7041149575440888
127767,"public static void saveResource(Resource resource) throws PersistenceException {
  if (resource == null) {
    return;
  }
  if (resource.getURI() == null) {
    return;
  }
  try {
    HashMap options=new HashMap(2);
    options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
    resource.save(options);
  }
 catch (  IOException e) {
    throw new PersistenceException(e);
  }
catch (  RuntimeException e) {
    log.warn(""String_Node_Str"" + resource.getURI() + ""String_Node_Str"",e);
    HashMap options=new HashMap(2);
    options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
    options.put(XMLResource.OPTION_XML_VERSION,""String_Node_Str"");
    try {
      resource.save(options);
    }
 catch (    IOException e1) {
      throw new PersistenceException(e);
    }
  }
}","public static void saveResource(Resource resource) throws PersistenceException {
  if (resource == null) {
    return;
  }
  if (resource.getURI() == null) {
    return;
  }
  HashMap options=new HashMap(2);
  options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
  options.put(XMLResource.OPTION_ESCAPE_USING_CDATA,Boolean.TRUE);
  try {
    resource.save(options);
  }
 catch (  IOException e) {
    throw new PersistenceException(e);
  }
catch (  RuntimeException e) {
    log.warn(""String_Node_Str"" + resource.getURI() + ""String_Node_Str"",e);
    options.put(XMLResource.OPTION_XML_VERSION,""String_Node_Str"");
    try {
      resource.save(options);
    }
 catch (    IOException e1) {
      throw new PersistenceException(e);
    }
  }
}",0.6810176125244618
127768,"@Override public Resource createResource(URI uri){
  String business=""String_Node_Str"";
  String context=""String_Node_Str"";
  String process=""String_Node_Str"";
  String joblet=""String_Node_Str"";
  if (uri.toString().contains(""String_Node_Str"" + business + ""String_Node_Str"") && uri.segmentCount() > 2 && uri.segments()[2].equals(business)) {
    return super.createResource(uri);
  }
 else   if (uri.toString().contains(""String_Node_Str"" + context + ""String_Node_Str"") && uri.segmentCount() > 2 && uri.segments()[2].equals(context)) {
    return super.createResource(uri);
  }
 else   if (uri.toString().contains(""String_Node_Str"" + process + ""String_Node_Str"") && uri.segmentCount() > 2 && uri.segments()[2].equals(process)) {
    return super.createResource(uri);
  }
 else   if (uri.toString().contains(""String_Node_Str"" + joblet + ""String_Node_Str"") && uri.segmentCount() > 2 && uri.segments()[2].equals(joblet)) {
    return super.createResource(uri);
  }
 else {
    return new CwmResource(uri);
  }
}","@Override public Resource createResource(URI uri){
  String business=""String_Node_Str"";
  String context=""String_Node_Str"";
  String process=""String_Node_Str"";
  String joblet=""String_Node_Str"";
  if (validUrl(uri,business) || validUrl(uri,context) || validUrl(uri,process)|| validUrl(uri,joblet)) {
    return new TalendXMIResource(uri);
  }
 else {
    return new CwmResource(uri);
  }
}",0.4040114613180516
127769,"/** 
 * DOC cantoine : Check connexion from IMetadataConnection comment. Detailled comment.
 * @return isValide
 */
public boolean check(IMetadataConnection metadataConnection,boolean... onlyIfNeeded){
  messageException=null;
  ConnectionStatus testConnection=null;
  if (metadataConnection == null) {
    return false;
  }
  if (onlyIfNeeded != null && onlyIfNeeded.length > 0 && onlyIfNeeded[0] == true) {
    if (metadataConnection.equals(oldConnection)) {
      return true;
    }
  }
  if (metadataConnection.getDbRootPath() != null && !metadataConnection.getDbRootPath().equals(""String_Node_Str"")) {
    setDbRootPath(metadataConnection.getDbRootPath());
  }
  try {
    EDatabaseTypeName type=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
    if (type.isUseProvider()) {
      IDBMetadataProvider extractorToUse=ExtractMetaDataFromDataBase.getProviderByDbType(metadataConnection.getDbType());
      if (extractorToUse != null) {
        testConnection=extractorToUse.testConnection(metadataConnection);
      }
    }
 else {
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        String key=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
        if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(key)) {
          System.setProperty(""String_Node_Str"",""String_Node_Str"");
          System.setProperty(""String_Node_Str"",""String_Node_Str"" + metadataConnection.getServerName() + ""String_Node_Str""+ metadataConnection.getPort());
        }
      }
      testConnection=ExtractMetaDataFromDataBase.testConnection(metadataConnection.getDbType(),metadataConnection.getUrl(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getSchema(),metadataConnection.getDriverClass(),metadataConnection.getDriverJarPath(),metadataConnection.getDbVersionString(),metadataConnection.getAdditionalParams());
    }
    oldConnection=metadataConnection;
    isValide=testConnection.getResult();
    messageException=testConnection.getMessageException();
  }
 catch (  Exception e) {
    log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + e.toString());
  }
  return isValide;
}","/** 
 * DOC cantoine : Check connexion from IMetadataConnection comment. Detailled comment.
 * @return isValide
 */
public boolean check(IMetadataConnection metadataConnection,boolean... onlyIfNeeded){
  messageException=null;
  ConnectionStatus testConnection=null;
  if (metadataConnection == null) {
    return false;
  }
  if (onlyIfNeeded != null && onlyIfNeeded.length > 0 && onlyIfNeeded[0] == true) {
    if (metadataConnection.equals(oldConnection)) {
      return true;
    }
  }
  if (metadataConnection.getDbRootPath() != null && !metadataConnection.getDbRootPath().equals(""String_Node_Str"")) {
    setDbRootPath(metadataConnection.getDbRootPath());
  }
  try {
    EDatabaseTypeName type=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
    if (type.isUseProvider()) {
      IDBMetadataProvider extractorToUse=ExtractMetaDataFromDataBase.getProviderByDbType(metadataConnection.getDbType());
      if (extractorToUse != null) {
        testConnection=extractorToUse.testConnection(metadataConnection);
      }
    }
 else     if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
      String key=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      testConnection=new ConnectionStatus();
      testConnection.setResult(false);
      try {
        if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(key)) {
          JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        HiveConnectionManager.getInstance().checkConnection(metadataConnection);
        testConnection.setResult(true);
      }
 catch (      Exception e) {
        testConnection.setResult(false);
        log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + e.toString());
      }
    }
 else {
      testConnection=ExtractMetaDataFromDataBase.testConnection(metadataConnection.getDbType(),metadataConnection.getUrl(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getSchema(),metadataConnection.getDriverClass(),metadataConnection.getDriverJarPath(),metadataConnection.getDbVersionString(),metadataConnection.getAdditionalParams());
    }
    oldConnection=metadataConnection;
    isValide=testConnection.getResult();
    messageException=testConnection.getMessageException();
  }
 catch (  Exception e) {
    log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + e.toString());
  }
  return isValide;
}",0.8656084656084656
127770,"/** 
 * Just for hive pre-setup, some configurations are required to set up to the properties of system. It is just for Hive embedded mode.Added by Marvin Wang on Nov 22, 2012.(Just a reminder: TDQ-6462)
 * @param conn
 */
public static void doHivePreSetup(Connection connection){
  Connection conn=connection;
  if (conn instanceof DatabaseConnection) {
    IProject project=ProjectManager.getInstance().getResourceProject(ProjectManager.getInstance().getCurrentProject().getEmfProject());
    String fullPathTemp=project.getFolder(""String_Node_Str"").getLocation().append(""String_Node_Str"").append(connection.getId()).toPortableString();
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_JDO_CONNECTION_URL.getKey(),""String_Node_Str"" + fullPathTemp + ""String_Node_Str"");
    DatabaseConnection dbConn=(DatabaseConnection)conn;
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_LOCAL.getKey(),""String_Node_Str"");
    if (conn.isContextMode()) {
      IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
      if (repositoryService != null) {
        String contextName=conn.getContextName();
        conn=repositoryService.cloneOriginalValueConnection(dbConn,contextName == null ? true : false,contextName);
      }
    }
    String thriftURL=""String_Node_Str"" + dbConn.getServerName() + ""String_Node_Str""+ dbConn.getPort();
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_URI.getKey(),thriftURL);
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_EXECUTE_SETUGI.getKey(),""String_Node_Str"");
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_FS_DEFAULT_NAME.getKey(),dbConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL));
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_MAPRED_JOB_TRACKER.getKey(),dbConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL));
  }
}","/** 
 * Just for hive pre-setup, some configurations are required to set up to the properties of system. It is just for Hive embedded mode.Added by Marvin Wang on Nov 22, 2012.(Just a reminder: TDQ-6462)
 * @param conn
 */
public static void doHivePreSetup(Connection connection){
  Connection conn=connection;
  if (conn instanceof DatabaseConnection) {
    IProject project=ProjectManager.getInstance().getResourceProject(ProjectManager.getInstance().getCurrentProject().getEmfProject());
    String id=connection.getId();
    if (id == null) {
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      id=factory.getNextId();
    }
    String fullPathTemp=project.getFolder(""String_Node_Str"").getLocation().append(""String_Node_Str"").append(id).toPortableString();
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_JDO_CONNECTION_URL.getKey(),""String_Node_Str"" + fullPathTemp + ""String_Node_Str"");
    DatabaseConnection dbConn=(DatabaseConnection)conn;
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_LOCAL.getKey(),""String_Node_Str"");
    if (conn.isContextMode()) {
      IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
      if (repositoryService != null) {
        String contextName=conn.getContextName();
        conn=repositoryService.cloneOriginalValueConnection(dbConn,contextName == null ? true : false,contextName);
      }
    }
    String thriftURL=""String_Node_Str"" + dbConn.getServerName() + ""String_Node_Str""+ dbConn.getPort();
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_URI.getKey(),thriftURL);
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_EXECUTE_SETUGI.getKey(),""String_Node_Str"");
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_FS_DEFAULT_NAME.getKey(),dbConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL));
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_MAPRED_JOB_TRACKER.getKey(),dbConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL));
  }
}",0.9548727796447432
127771,"/** 
 * DOC ggu Comment method ""returnMetadataColumnsFormTable"".
 * @param metadataConnection
 * @param tableLabel
 * @param dontCreateClose
 * @return
 * @deprecated because still use it
 */
@Deprecated public synchronized List<TdColumn> returnMetadataColumnsFormTable(IMetadataConnection metadataConnection,String tableLabel,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(metadataConnection.getDbType(),metadataConnection.getUrl(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getDatabase(),metadataConnection.getSchema(),metadataConnection.getDriverClass(),metadataConnection.getDriverJarPath(),metadataConnection.getDbVersionString(),metadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=metadataConnection.getDbType();
    DatabaseMetaData dbMetaData=null;
    if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
      dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConnection);
    }
 else {
      dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType,metadataConnection.isSqlMode(),metadataConnection.getDatabase());
    }
    tableLabel=checkTableLabel(tableLabel);
    List<String> cataAndShema=getTableCatalogAndSchema((DatabaseConnection)metadataConnection.getCurrentConnection(),tableLabel);
    metadataColumns=extractColumns(dbMetaData,metadataConnection,dbType,cataAndShema.get(0),cataAndShema.get(1),tableLabel);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    closeConnection(metadataConnection,wapperDriver);
  }
  return metadataColumns;
}","/** 
 * DOC ggu Comment method ""returnMetadataColumnsFormTable"".
 * @param metadataConnection
 * @param tableLabel
 * @param dontCreateClose
 * @return
 * @deprecated because still use it
 */
@Deprecated public synchronized List<TdColumn> returnMetadataColumnsFormTable(IMetadataConnection metadataConnection,String tableLabel,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    dbType=metadataConnection.getDbType();
    boolean isHive=EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType);
    if (!isHive && (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed())) {
      List list=ExtractMetaDataUtils.getConnection(metadataConnection.getDbType(),metadataConnection.getUrl(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getDatabase(),metadataConnection.getSchema(),metadataConnection.getDriverClass(),metadataConnection.getDriverJarPath(),metadataConnection.getDbVersionString(),metadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    DatabaseMetaData dbMetaData=null;
    if (isHive) {
      dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConnection);
    }
 else {
      dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType,metadataConnection.isSqlMode(),metadataConnection.getDatabase());
    }
    tableLabel=checkTableLabel(tableLabel);
    List<String> cataAndShema=getTableCatalogAndSchema((DatabaseConnection)metadataConnection.getCurrentConnection(),tableLabel);
    metadataColumns=extractColumns(dbMetaData,metadataConnection,dbType,cataAndShema.get(0),cataAndShema.get(1),tableLabel);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    closeConnection(metadataConnection,wapperDriver);
  }
  return metadataColumns;
}",0.4750644883920894
127772,"protected void evaluateTextField(){
  if (readOnly) {
    return;
  }
  if (nameText == null || nameText.isDisposed()) {
    return;
  }
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (JavaConventions.validateClassFileName(nameText.getText() + CLASS).getSeverity() == IStatus.ERROR || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(getPropertyLabel(StringUtils.trimToNull(nameText.getText())));
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
    property.setModificationDate(new Date());
  }
  updatePageStatus();
}","protected void evaluateTextField(){
  if (readOnly) {
    return;
  }
  if (nameText == null || nameText.isDisposed()) {
    return;
  }
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (JavaConventions.validateClassFileName(nameText.getText() + CLASS,JavaCore.getOption(JavaCore.COMPILER_SOURCE),JavaCore.getOption(JavaCore.COMPILER_COMPLIANCE)).getSeverity() == IStatus.ERROR || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(getPropertyLabel(StringUtils.trimToNull(nameText.getText())));
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
    property.setModificationDate(new Date());
  }
  updatePageStatus();
}",0.9688328912466844
127773,"@Override protected void doRun(){
  ISelection selection=getSelection();
  Boolean confirm=null;
  final List<IRepositoryViewObject> connections=new ArrayList<IRepositoryViewObject>();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  Map<String,Item> procItems=new HashMap<String,Item>();
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
      if (node.getType() == ENodeType.REPOSITORY_ELEMENT && nodeType.isSubItem()) {
        Connection connection=null;
        ERepositoryObjectType parentNodeType=(ERepositoryObjectType)node.getParent().getProperties(EProperties.CONTENT_TYPE);
        if (parentNodeType == null) {
          parentNodeType=node.getParent().getParent().getObjectType();
        }
        if (parentNodeType != null) {
          types.add(parentNodeType);
        }
        ConnectionItem item=(ConnectionItem)node.getObject().getProperty().getItem();
        connection=(item).getConnection();
        ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)node.getObject();
        AbstractMetadataObject abstractMetadataObject=subRepositoryObject.getAbstractMetadataObject();
        if (abstractMetadataObject instanceof SubscriberTable) {
          return;
        }
        if (abstractMetadataObject == null) {
          return;
        }
        boolean isSave=true;
        AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
        if (resChangeService != null) {
          List<IRepositoryNode> dependentNodes=resChangeService.getDependentNodes(node);
          if (dependentNodes != null && !dependentNodes.isEmpty()) {
            resChangeService.openDependcesDialog(dependentNodes);
            isSave=false;
          }
        }
        if (isSave) {
          String sfm=null;
          String sf=null;
          EObject eContainer=abstractMetadataObject.eContainer();
          if (eContainer != null && eContainer instanceof SalesforceModuleUnitImpl) {
            sfm=((SalesforceModuleUnitImpl)eContainer).getModuleName();
            sf=abstractMetadataObject.getLabel();
          }
          if (SubItemHelper.isDeleted(abstractMetadataObject) && isSave) {
            if (confirm == null) {
              String title=Messages.getString(""String_Node_Str"");
              String message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
              confirm=(MessageDialog.openQuestion(Display.getCurrent().getActiveShell(),title,message));
            }
            if (confirm) {
              subRepositoryObject.removeFromParent();
            }
          }
 else           if (item instanceof SalesforceSchemaConnectionItem && parentNodeType.getType() != null && parentNodeType.getType().equals(""String_Node_Str"") && sfm != null && sf != null && sfm.equals(sf)) {
          }
 else {
            SubItemHelper.setDeleted(abstractMetadataObject,true);
          }
          final String id=item.getProperty().getId();
          Item tmpItem=procItems.get(id);
          if (tmpItem == null) {
            procItems.put(id,item);
          }
          connections.add(node.getObject());
        }
      }
    }
  }
  try {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    for (    String id : procItems.keySet()) {
      Item item=procItems.get(id);
      factory.save(item);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  Display.getCurrent().syncExec(new Runnable(){
    @Override public void run(){
      RepositoryManager.refreshDeletedNode(types);
    }
  }
);
  notifySQLBuilder(connections);
}","@Override protected void doRun(){
  ISelection selection=getSelection();
  Boolean confirm=null;
  final List<IRepositoryViewObject> connections=new ArrayList<IRepositoryViewObject>();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  Map<String,Item> procItems=new HashMap<String,Item>();
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
      if (node.getType() == ENodeType.REPOSITORY_ELEMENT && nodeType.isSubItem()) {
        IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
        IRepositoryViewObject nodeObject=node.getObject();
        boolean locked=false;
        if (!factory.getRepositoryContext().isEditableAsReadOnly()) {
          if (nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_OTHER || nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_USER) {
            locked=true;
          }
        }
        if ((locked || RepositoryManager.isOpenedItemInEditor(nodeObject)) && !(DELETE_FOREVER_TITLE.equals(getText()))) {
          final String title=Messages.getString(""String_Node_Str"");
          String nodeName=nodeObject.getRepositoryObjectType().toString();
          final String message=Messages.getString(""String_Node_Str"",nodeName);
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              MessageDialog dialog=new MessageDialog(new Shell(),title,null,message,MessageDialog.ERROR,new String[]{IDialogConstants.OK_LABEL},0);
              dialog.open();
            }
          }
);
          return;
        }
        Connection connection=null;
        ERepositoryObjectType parentNodeType=(ERepositoryObjectType)node.getParent().getProperties(EProperties.CONTENT_TYPE);
        if (parentNodeType == null) {
          parentNodeType=node.getParent().getParent().getObjectType();
        }
        if (parentNodeType != null) {
          types.add(parentNodeType);
        }
        ConnectionItem item=(ConnectionItem)node.getObject().getProperty().getItem();
        connection=(item).getConnection();
        ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)node.getObject();
        AbstractMetadataObject abstractMetadataObject=subRepositoryObject.getAbstractMetadataObject();
        if (abstractMetadataObject instanceof SubscriberTable) {
          return;
        }
        if (abstractMetadataObject == null) {
          return;
        }
        boolean isSave=true;
        AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
        if (resChangeService != null) {
          List<IRepositoryNode> dependentNodes=resChangeService.getDependentNodes(node);
          if (dependentNodes != null && !dependentNodes.isEmpty()) {
            resChangeService.openDependcesDialog(dependentNodes);
            isSave=false;
          }
        }
        if (isSave) {
          String sfm=null;
          String sf=null;
          EObject eContainer=abstractMetadataObject.eContainer();
          if (eContainer != null && eContainer instanceof SalesforceModuleUnitImpl) {
            sfm=((SalesforceModuleUnitImpl)eContainer).getModuleName();
            sf=abstractMetadataObject.getLabel();
          }
          if (SubItemHelper.isDeleted(abstractMetadataObject) && isSave) {
            if (confirm == null) {
              String title=Messages.getString(""String_Node_Str"");
              String message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
              confirm=(MessageDialog.openQuestion(Display.getCurrent().getActiveShell(),title,message));
            }
            if (confirm) {
              subRepositoryObject.removeFromParent();
            }
          }
 else           if (item instanceof SalesforceSchemaConnectionItem && parentNodeType.getType() != null && parentNodeType.getType().equals(""String_Node_Str"") && sfm != null && sf != null && sfm.equals(sf)) {
          }
 else {
            SubItemHelper.setDeleted(abstractMetadataObject,true);
          }
          final String id=item.getProperty().getId();
          Item tmpItem=procItems.get(id);
          if (tmpItem == null) {
            procItems.put(id,item);
          }
          connections.add(node.getObject());
        }
      }
    }
  }
  try {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    for (    String id : procItems.keySet()) {
      Item item=procItems.get(id);
      factory.save(item);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  Display.getCurrent().syncExec(new Runnable(){
    @Override public void run(){
      RepositoryManager.refreshDeletedNode(types);
    }
  }
);
  notifySQLBuilder(connections);
}",0.8753493571827837
127774,"/** 
 * Load emf model from file.
 * @param pkg EPackage of your emf model.
 * @param file The file that contains your emf model.
 * @return A list of emf object.
 * @throws IOException
 */
@SuppressWarnings(""String_Node_Str"") public static <T>List<T> loadEmfModel(EPackage pkg,String file) throws IOException {
  ResourceSet resourceSet=new ResourceSetImpl();
  Resource.Factory.Registry registry=resourceSet.getResourceFactoryRegistry();
  registry.getExtensionToFactoryMap().put(""String_Node_Str"",new EcoreResourceFactoryImpl());
  registry.getExtensionToFactoryMap().put(""String_Node_Str"",new XMLResourceFactoryImpl());
  registry.getExtensionToFactoryMap().put(""String_Node_Str"",new XMIResourceFactoryImpl());
  EPackage.Registry reg=resourceSet.getPackageRegistry();
  reg.put(pkg.getNsURI(),pkg);
  List<T> list=new ArrayList<T>();
  URI uri=URI.createFileURI(file);
  Resource resource=resourceSet.getResource(uri,true);
  resource.load(null);
  for (  EObject obj : resource.getContents()) {
    list.add((T)obj);
  }
  return list;
}","/** 
 * Load emf model from file.
 * @param pkg EPackage of your emf model.
 * @param file The file that contains your emf model.
 * @return A list of emf object.
 * @throws IOException
 */
@SuppressWarnings(""String_Node_Str"") public static <T>List<T> loadEmfModel(EPackage pkg,String file) throws IOException {
  ResourceSet resourceSet=getResourceSet(pkg);
  List<T> list=new ArrayList<T>();
  URI uri=URI.createFileURI(file);
  Resource resource=resourceSet.getResource(uri,true);
  resource.load(null);
  for (  EObject obj : resource.getContents()) {
    list.add((T)obj);
  }
  return list;
}",0.7105423522242535
127775,"/** 
 * Save emf model to file.
 * @param pkg EPackage of your emf model.
 * @param models A list of emf object.
 * @param file The file that will store your emf model.
 * @throws IOException
 */
public static void saveEmfModel(EPackage pkg,List<? extends EObject> models,String file) throws IOException {
  ResourceSet resourceSet=new ResourceSetImpl();
  Resource.Factory.Registry registry=resourceSet.getResourceFactoryRegistry();
  registry.getExtensionToFactoryMap().put(""String_Node_Str"",new EcoreResourceFactoryImpl());
  registry.getExtensionToFactoryMap().put(""String_Node_Str"",new XMLResourceFactoryImpl());
  registry.getExtensionToFactoryMap().put(""String_Node_Str"",new XMIResourceFactoryImpl());
  EPackage.Registry reg=resourceSet.getPackageRegistry();
  reg.put(pkg.getNsURI(),pkg);
  URI uri=URI.createFileURI(file);
  Resource resource=resourceSet.createResource(uri);
  for (  EObject model : models) {
    resource.getContents().add(model);
  }
  resource.save(null);
}","/** 
 * Save emf model to file.
 * @param pkg EPackage of your emf model.
 * @param models A list of emf object.
 * @param file The file that will store your emf model.
 * @throws IOException
 */
public static void saveEmfModel(EPackage pkg,List<? extends EObject> models,String file) throws IOException {
  ResourceSet resourceSet=getResourceSet(pkg);
  URI uri=URI.createFileURI(file);
  Resource resource=resourceSet.createResource(uri);
  for (  EObject model : models) {
    resource.getContents().add(model);
  }
  resource.save(null);
}",0.7041149575440888
127776,"public static void saveResource(Resource resource) throws PersistenceException {
  if (resource == null) {
    return;
  }
  if (resource.getURI() == null) {
    return;
  }
  try {
    HashMap options=new HashMap(2);
    options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
    resource.save(options);
  }
 catch (  IOException e) {
    throw new PersistenceException(e);
  }
catch (  RuntimeException e) {
    log.warn(""String_Node_Str"" + resource.getURI() + ""String_Node_Str"",e);
    HashMap options=new HashMap(2);
    options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
    options.put(XMLResource.OPTION_XML_VERSION,""String_Node_Str"");
    try {
      resource.save(options);
    }
 catch (    IOException e1) {
      throw new PersistenceException(e);
    }
  }
}","public static void saveResource(Resource resource) throws PersistenceException {
  if (resource == null) {
    return;
  }
  if (resource.getURI() == null) {
    return;
  }
  HashMap options=new HashMap(2);
  options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
  options.put(XMLResource.OPTION_ESCAPE_USING_CDATA,Boolean.TRUE);
  try {
    resource.save(options);
  }
 catch (  IOException e) {
    throw new PersistenceException(e);
  }
catch (  RuntimeException e) {
    log.warn(""String_Node_Str"" + resource.getURI() + ""String_Node_Str"",e);
    options.put(XMLResource.OPTION_XML_VERSION,""String_Node_Str"");
    try {
      resource.save(options);
    }
 catch (    IOException e1) {
      throw new PersistenceException(e);
    }
  }
}",0.6810176125244618
127777,"@Override public Resource createResource(URI uri){
  String business=""String_Node_Str"";
  String context=""String_Node_Str"";
  String process=""String_Node_Str"";
  String joblet=""String_Node_Str"";
  if (uri.toString().contains(""String_Node_Str"" + business + ""String_Node_Str"") && uri.segmentCount() > 2 && uri.segments()[2].equals(business)) {
    return super.createResource(uri);
  }
 else   if (uri.toString().contains(""String_Node_Str"" + context + ""String_Node_Str"") && uri.segmentCount() > 2 && uri.segments()[2].equals(context)) {
    return super.createResource(uri);
  }
 else   if (uri.toString().contains(""String_Node_Str"" + process + ""String_Node_Str"") && uri.segmentCount() > 2 && uri.segments()[2].equals(process)) {
    return super.createResource(uri);
  }
 else   if (uri.toString().contains(""String_Node_Str"" + joblet + ""String_Node_Str"") && uri.segmentCount() > 2 && uri.segments()[2].equals(joblet)) {
    return super.createResource(uri);
  }
 else {
    return new CwmResource(uri);
  }
}","@Override public Resource createResource(URI uri){
  String business=""String_Node_Str"";
  String context=""String_Node_Str"";
  String process=""String_Node_Str"";
  String joblet=""String_Node_Str"";
  if (validUrl(uri,business) || validUrl(uri,context) || validUrl(uri,process)|| validUrl(uri,joblet)) {
    return new TalendXMIResource(uri);
  }
 else {
    return new CwmResource(uri);
  }
}",0.4040114613180516
127778,"private void convert(org.talend.core.model.general.Project newProject,Container fromModel,RepositoryNode parent,ERepositoryObjectType type,RepositoryNode recBinNode){
  if (parent == null || fromModel == null) {
    return;
  }
  for (  Object obj : fromModel.getSubContainer()) {
    Container container=(Container)obj;
    Folder oFolder=new Folder((Property)container.getProperty(),type);
    if (oFolder.getProperty() == null) {
      continue;
    }
    RepositoryNode folder=null;
    String label=container.getLabel();
    if (label.equals(""String_Node_Str"") || label.startsWith(""String_Node_Str"")) {
      continue;
    }
    boolean isJobDocRootFolder=((label.indexOf(""String_Node_Str"") != -1) && (label.indexOf(""String_Node_Str"") != -1));
    boolean isPicFolderName=label.equals(IHTMLDocConstants.PIC_FOLDER_NAME);
    if (isJobDocRootFolder || isPicFolderName) {
      continue;
    }
    if (RepositoryConstants.SYSTEM_DIRECTORY.equals(label)) {
      if (getMergeRefProject()) {
        parent.getChildren();
        boolean existSystemFolder=false;
        for (        IRepositoryNode node : parent.getChildren()) {
          if (RepositoryConstants.SYSTEM_DIRECTORY.equalsIgnoreCase(node.getLabel())) {
            existSystemFolder=true;
            break;
          }
        }
        IBrandingService breaningService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
        if (!existSystemFolder && !breaningService.isPoweredOnlyCamel()) {
          folder=new StableRepositoryNode(parent,RepositoryConstants.SYSTEM_DIRECTORY,ECoreImage.FOLDER_CLOSE_ICON);
          parent.getChildren().add(folder);
        }
 else {
          continue;
        }
      }
 else {
        folder=new StableRepositoryNode(parent,RepositoryConstants.SYSTEM_DIRECTORY,ECoreImage.FOLDER_CLOSE_ICON);
        parent.getChildren().add(folder);
      }
    }
 else     if (ERepositoryObjectType.GENERATED.name().equalsIgnoreCase(label)) {
      if (PluginChecker.isDocumentationPluginLoaded()) {
        convertDocumentation(newProject,container,parent,type,recBinNode);
      }
      continue;
    }
 else {
      if (getMergeRefProject()) {
        String a=parent.getProperties(EProperties.LABEL).toString();
        if (type == ERepositoryObjectType.SQLPATTERNS) {
          folder=getSQLPatternNode(a,label);
        }
        if (folder == null) {
          if (newProject != this.project && !hasTalendItems(container)) {
            continue;
          }
          folder=new RepositoryNode(oFolder,parent,ENodeType.SIMPLE_FOLDER);
          if (factory.getStatus(oFolder) != ERepositoryStatus.DELETED) {
            parent.getChildren().add(folder);
          }
        }
      }
 else {
        folder=new RepositoryNode(oFolder,parent,ENodeType.SIMPLE_FOLDER);
        if (factory.getStatus(oFolder) != ERepositoryStatus.DELETED) {
          parent.getChildren().add(folder);
        }
      }
    }
    folder.setProperties(EProperties.LABEL,label);
    folder.setProperties(EProperties.CONTENT_TYPE,type);
    convert(newProject,container,folder,type,recBinNode);
  }
  for (  Object obj : fromModel.getMembers()) {
    IRepositoryViewObject repositoryObject=(IRepositoryViewObject)obj;
    try {
      if (!repositoryObject.isDeleted()) {
        addNode(parent,type,recBinNode,repositoryObject);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.log(Messages.getString(""String_Node_Str"",repositoryObject.getRepositoryObjectType(),repositoryObject.getLabel()));
      if (repositoryObject.getProperty() != null && repositoryObject.getProperty().getInformations().isEmpty()) {
        Information info=PropertiesFactory.eINSTANCE.createInformation();
        info.setLevel(InformationLevel.ERROR_LITERAL);
        info.setText(Messages.getString(""String_Node_Str""));
        Property property=repositoryObject.getProperty();
        property.getInformations().add(info);
        try {
          factory.save(project,property);
        }
 catch (        PersistenceException e1) {
          ExceptionHandler.process(e1);
        }
        repositoryObject.getProperty();
      }
    }
  }
}","private void convert(org.talend.core.model.general.Project newProject,Container fromModel,RepositoryNode parent,ERepositoryObjectType type,RepositoryNode recBinNode){
  if (parent == null || fromModel == null) {
    return;
  }
  if ((ERepositoryObjectType.DOCUMENTATION).equals(type)) {
    handleDelFolderItems(newProject,parent);
  }
  for (  Object obj : fromModel.getSubContainer()) {
    Container container=(Container)obj;
    Folder oFolder=new Folder((Property)container.getProperty(),type);
    boolean found=false;
    if (ERepositoryObjectType.JOB_DOC.equals(type) || ERepositoryObjectType.JOBLET_DOC.equals(type)) {
      for (      FolderItem delFolder : delFolderItems) {
        String parentName=((FolderItem)delFolder.getParent()).getProperty().getLabel();
        String oFolderPath=oFolder.getPath();
        String jobPath=""String_Node_Str"" + delFolder.getState().getPath();
        String jobPath1=""String_Node_Str"" + delFolder.getState().getPath();
        String jobletPath=""String_Node_Str"" + delFolder.getState().getPath();
        String jobletPath1=""String_Node_Str"" + delFolder.getState().getPath();
        if (oFolder.getLabel().equals(delFolder.getProperty().getLabel())) {
          if (""String_Node_Str"".equals(parentName) && oFolderPath.equals(jobPath)) {
            found=true;
          }
 else           if (""String_Node_Str"".equals(parentName) && oFolderPath.equals(jobletPath)) {
            found=true;
          }
 else           if (oFolderPath.equals(jobPath1) || oFolderPath.equals(jobletPath1)) {
            found=true;
          }
          break;
        }
      }
    }
    if (found) {
      continue;
    }
    if (oFolder.getProperty() == null) {
      continue;
    }
    RepositoryNode folder=null;
    String label=container.getLabel();
    if (label.equals(""String_Node_Str"") || label.startsWith(""String_Node_Str"")) {
      continue;
    }
    boolean isJobDocRootFolder=((label.indexOf(""String_Node_Str"") != -1) && (label.indexOf(""String_Node_Str"") != -1));
    boolean isPicFolderName=label.equals(IHTMLDocConstants.PIC_FOLDER_NAME);
    if (isJobDocRootFolder || isPicFolderName) {
      continue;
    }
    if (RepositoryConstants.SYSTEM_DIRECTORY.equals(label)) {
      if (getMergeRefProject()) {
        parent.getChildren();
        boolean existSystemFolder=false;
        for (        IRepositoryNode node : parent.getChildren()) {
          if (RepositoryConstants.SYSTEM_DIRECTORY.equalsIgnoreCase(node.getLabel())) {
            existSystemFolder=true;
            break;
          }
        }
        IBrandingService breaningService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
        if (!existSystemFolder && !breaningService.isPoweredOnlyCamel()) {
          folder=new StableRepositoryNode(parent,RepositoryConstants.SYSTEM_DIRECTORY,ECoreImage.FOLDER_CLOSE_ICON);
          parent.getChildren().add(folder);
        }
 else {
          continue;
        }
      }
 else {
        folder=new StableRepositoryNode(parent,RepositoryConstants.SYSTEM_DIRECTORY,ECoreImage.FOLDER_CLOSE_ICON);
        parent.getChildren().add(folder);
      }
    }
 else     if (ERepositoryObjectType.GENERATED.name().equalsIgnoreCase(label)) {
      if (PluginChecker.isDocumentationPluginLoaded()) {
        convertDocumentation(newProject,container,parent,type,recBinNode);
      }
      continue;
    }
 else {
      if (getMergeRefProject()) {
        String a=parent.getProperties(EProperties.LABEL).toString();
        if (type == ERepositoryObjectType.SQLPATTERNS) {
          folder=getSQLPatternNode(a,label);
        }
        if (folder == null) {
          if (newProject != this.project && !hasTalendItems(container)) {
            continue;
          }
          folder=new RepositoryNode(oFolder,parent,ENodeType.SIMPLE_FOLDER);
          if (factory.getStatus(oFolder) != ERepositoryStatus.DELETED) {
            parent.getChildren().add(folder);
          }
        }
      }
 else {
        folder=new RepositoryNode(oFolder,parent,ENodeType.SIMPLE_FOLDER);
        if (factory.getStatus(oFolder) != ERepositoryStatus.DELETED) {
          parent.getChildren().add(folder);
        }
      }
    }
    folder.setProperties(EProperties.LABEL,label);
    folder.setProperties(EProperties.CONTENT_TYPE,type);
    convert(newProject,container,folder,type,recBinNode);
  }
  for (  Object obj : fromModel.getMembers()) {
    IRepositoryViewObject repositoryObject=(IRepositoryViewObject)obj;
    try {
      if (!repositoryObject.isDeleted()) {
        addNode(parent,type,recBinNode,repositoryObject);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.log(Messages.getString(""String_Node_Str"",repositoryObject.getRepositoryObjectType(),repositoryObject.getLabel()));
      if (repositoryObject.getProperty() != null && repositoryObject.getProperty().getInformations().isEmpty()) {
        Information info=PropertiesFactory.eINSTANCE.createInformation();
        info.setLevel(InformationLevel.ERROR_LITERAL);
        info.setText(Messages.getString(""String_Node_Str""));
        Property property=repositoryObject.getProperty();
        property.getInformations().add(info);
        try {
          factory.save(project,property);
        }
 catch (        PersistenceException e1) {
          ExceptionHandler.process(e1);
        }
        repositoryObject.getProperty();
      }
    }
  }
}",0.8675856307435255
127779,"/** 
 * DOC qiang.zhang Comment method ""getXMLMappingValue"".
 * @param repositoryConnection
 * @param metadataTable
 * @return
 */
public static List<Map<String,Object>> getXMLMappingValue(Connection connection,List<IMetadataTable> metadataTables){
  if (metadataTables == null || metadataTables.isEmpty()) {
    return new ArrayList<Map<String,Object>>();
  }
  if (connection instanceof XmlFileConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    XmlFileConnection xmlConnection=(XmlFileConnection)connection;
    EList objectList=xmlConnection.getSchema();
    XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)objectList.get(0);
    if (metadataTable != null) {
      if (xmlDesc != null) {
        List<SchemaTarget> schemaTargets=xmlDesc.getSchemaTargets();
        List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
        for (        IMetadataColumn col : metadataTable.getListColumns()) {
          Map<String,Object> map=new HashMap<String,Object>();
          map.put(""String_Node_Str"",null);
          for (int i=0; i < schemaTargets.size(); i++) {
            SchemaTarget sch=schemaTargets.get(i);
            if (col.getLabel().equals(sch.getTagName())) {
              map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(sch.getRelativeXPathQuery()));
            }
          }
          maps.add(map);
        }
        return maps;
      }
    }
  }
  if (connection instanceof MDMConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    MDMConnection xmlConnection=(MDMConnection)connection;
    EList objectList=xmlConnection.getSchemas();
    if (metadataTable != null) {
      for (      Concept concept : (List<Concept>)objectList) {
        if (concept != null && concept.getLabel() != null && concept.getLabel().equals(metadataTable.getLabel())) {
          List<ConceptTarget> conceptTargets=concept.getConceptTargets();
          List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
          for (          IMetadataColumn col : metadataTable.getListColumns()) {
            Map<String,Object> map=new HashMap<String,Object>();
            map.put(""String_Node_Str"",null);
            for (int i=0; i < conceptTargets.size(); i++) {
              ConceptTarget cpt=conceptTargets.get(i);
              if (col.getLabel().equals(cpt.getTargetName())) {
                map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(cpt.getRelativeLoopExpression()));
              }
            }
            maps.add(map);
          }
          return maps;
        }
      }
    }
  }
  if (connection instanceof HL7Connection) {
    HL7Connection hl7Connection=(HL7Connection)connection;
    Set objectList=ConnectionHelper.getTables(hl7Connection);
    List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
    for (    IMetadataTable tableOfNode : metadataTables) {
      Map<String,Object> map=new HashMap<String,Object>();
      for (      MetadataTable table : (Set<MetadataTable>)objectList) {
        if (table != null && (table.getLabel() == null || table.getLabel().equals(tableOfNode.getLabel()))) {
          String xpathValue=""String_Node_Str"";
          for (          MetadataColumn col : table.getColumns()) {
            String original=col.getOriginalField();
            if (original != null && !""String_Node_Str"".equals(original)) {
              if (original.indexOf(TalendQuoteUtils.LBRACKET) != -1) {
                original=original.substring(0,original.indexOf(TalendQuoteUtils.LBRACKET));
              }
              original=TalendQuoteUtils.addQuotes(original);
              xpathValue+=original;
            }
            if (table.getColumns().indexOf(col) < table.getColumns().size() - 1) {
              xpathValue+=""String_Node_Str"";
            }
          }
          map.put(""String_Node_Str"",xpathValue);
          map.put(""String_Node_Str"",tableOfNode.getTableName());
          maps.add(map);
        }
      }
    }
    return maps;
  }
  return null;
}","/** 
 * DOC qiang.zhang Comment method ""getXMLMappingValue"".
 * @param repositoryConnection
 * @param metadataTable
 * @return
 */
public static List<Map<String,Object>> getXMLMappingValue(Connection connection,List<IMetadataTable> metadataTables){
  if (metadataTables == null || metadataTables.isEmpty()) {
    return new ArrayList<Map<String,Object>>();
  }
  if (connection instanceof XmlFileConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    XmlFileConnection xmlConnection=(XmlFileConnection)connection;
    EList objectList=xmlConnection.getSchema();
    XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)objectList.get(0);
    if (metadataTable != null) {
      if (xmlDesc != null) {
        List<SchemaTarget> schemaTargets=xmlDesc.getSchemaTargets();
        List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
        for (        IMetadataColumn col : metadataTable.getListColumns()) {
          Map<String,Object> map=new HashMap<String,Object>();
          map.put(""String_Node_Str"",null);
          for (int i=0; i < schemaTargets.size(); i++) {
            SchemaTarget sch=schemaTargets.get(i);
            if (col.getLabel().equals(sch.getTagName())) {
              map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(sch.getRelativeXPathQuery()));
            }
          }
          if (map.get(UpdatesConstants.QUERY) == null) {
            if (col.getLabel() != null && col.getLabel().startsWith(""String_Node_Str"")) {
              String temp=col.getLabel().substring(6,col.getLabel().length());
              if (temp != null) {
                char c[]=temp.toCharArray();
                boolean flag=true;
                for (int i=0; i < c.length; i++) {
                  if (c[i] < '0' || c[i] > '9') {
                    flag=false;
                    break;
                  }
                }
                if (flag) {
                  int j=Integer.parseInt(temp);
                  SchemaTarget schema=schemaTargets.get(j);
                  if (schema != null && KeywordsValidator.isKeyword(schema.getTagName())) {
                    map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(schema.getRelativeXPathQuery()));
                  }
                }
              }
            }
          }
          maps.add(map);
        }
        return maps;
      }
    }
  }
  if (connection instanceof MDMConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    MDMConnection xmlConnection=(MDMConnection)connection;
    EList objectList=xmlConnection.getSchemas();
    if (metadataTable != null) {
      for (      Concept concept : (List<Concept>)objectList) {
        if (concept != null && concept.getLabel() != null && concept.getLabel().equals(metadataTable.getLabel())) {
          List<ConceptTarget> conceptTargets=concept.getConceptTargets();
          List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
          for (          IMetadataColumn col : metadataTable.getListColumns()) {
            Map<String,Object> map=new HashMap<String,Object>();
            map.put(""String_Node_Str"",null);
            for (int i=0; i < conceptTargets.size(); i++) {
              ConceptTarget cpt=conceptTargets.get(i);
              if (col.getLabel().equals(cpt.getTargetName())) {
                map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(cpt.getRelativeLoopExpression()));
              }
            }
            maps.add(map);
          }
          return maps;
        }
      }
    }
  }
  if (connection instanceof HL7Connection) {
    HL7Connection hl7Connection=(HL7Connection)connection;
    Set objectList=ConnectionHelper.getTables(hl7Connection);
    List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
    for (    IMetadataTable tableOfNode : metadataTables) {
      Map<String,Object> map=new HashMap<String,Object>();
      for (      MetadataTable table : (Set<MetadataTable>)objectList) {
        if (table != null && (table.getLabel() == null || table.getLabel().equals(tableOfNode.getLabel()))) {
          String xpathValue=""String_Node_Str"";
          for (          MetadataColumn col : table.getColumns()) {
            String original=col.getOriginalField();
            if (original != null && !""String_Node_Str"".equals(original)) {
              if (original.indexOf(TalendQuoteUtils.LBRACKET) != -1) {
                original=original.substring(0,original.indexOf(TalendQuoteUtils.LBRACKET));
              }
              original=TalendQuoteUtils.addQuotes(original);
              xpathValue+=original;
            }
            if (table.getColumns().indexOf(col) < table.getColumns().size() - 1) {
              xpathValue+=""String_Node_Str"";
            }
          }
          map.put(""String_Node_Str"",xpathValue);
          map.put(""String_Node_Str"",tableOfNode.getTableName());
          maps.add(map);
        }
      }
    }
    return maps;
  }
  return null;
}",0.8936739930826733
127780,"private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean properties,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (option != GENERATE_MAIN_ONLY) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str""))) {
        if (""String_Node_Str"".equals(componentName)) {
          IElementParameter fromExternal=node.getElementParameter(""String_Node_Str"");
          Object value=fromExternal.getValue();
          if (value != null && ""String_Node_Str"".equals(value.toString())) {
            continue;
          }
        }
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (option == GENERATE_WITH_FIRST_CHILD) {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
                currentProcess.setNeedRegenerateCode(true);
              }
            }
            LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (exportAsOSGI) {
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
              LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
            }
            LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
              LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            }
          }
        }
      }
    }
  }
}","private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean properties,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (option != GENERATE_MAIN_ONLY) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str""))) {
        if (""String_Node_Str"".equals(componentName)) {
          IElementParameter fromExternal=node.getElementParameter(""String_Node_Str"");
          Object value=fromExternal.getValue();
          if (value != null && ""String_Node_Str"".equals(value.toString())) {
            continue;
          }
        }
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (option == GENERATE_WITH_FIRST_CHILD) {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
                currentProcess.setNeedRegenerateCode(true);
              }
            }
            LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (exportAsOSGI) {
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
              LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
            }
            LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
              LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            }
          }
        }
      }
    }
  }
}",0.9636074270557028
127781,"/** 
 * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()
 */
@Override public void initializeDefaultPreferences(){
  IEclipsePreferences node=new DefaultScope().getNode(CorePlugin.getDefault().getBundle().getSymbolicName());
  IPath tempPath=new Path(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"");
  File tempFile=tempPath.toFile();
  if (!tempFile.exists()) {
    tempFile.mkdirs();
  }
  node.put(ITalendCorePrefConstants.FILE_PATH_TEMP,tempPath.toOSString());
  String os=Platform.getOS();
  String javaPath=System.getProperty(""String_Node_Str"");
  if (os.equals(Platform.OS_WIN32)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_WIN32_INTERPRETER);
  }
 else   if (os.equals(Platform.OS_LINUX)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_LINUX_INTERPRETER_PATH);
  }
  node.put(ITalendCorePrefConstants.LANGUAGE_SELECTOR,Locale.getDefault().getLanguage());
  node.put(ITalendCorePrefConstants.PREVIEW_LIMIT,""String_Node_Str"");
  node.putBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME,true);
  initializeUpdatePreference();
  final String perlEditorBundleName=""String_Node_Str"";
  final String editorsBundleName=""String_Node_Str"";
  final String editorLineNumberRuler=""String_Node_Str"";
  if (!CommonsPlugin.isHeadless()) {
    IPreferenceStore store=new ScopedPreferenceStore(new InstanceScope(),perlEditorBundleName);
    store.setValue(editorLineNumberRuler,true);
    store=new ScopedPreferenceStore(new InstanceScope(),editorsBundleName);
    store.setValue(editorLineNumberRuler,true);
    ColorManager.initDefaultColors(CorePlugin.getDefault().getPreferenceStore());
  }
  String languageType=Locale.getDefault().getLanguage();
  CorePlugin.getDefault().getPreferenceStore().setValue(ITalendCorePrefConstants.LANGUAGE_SELECTOR,languageType);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_QUOTE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.AS400_SQL_SEG,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE,""String_Node_Str"");
  CorePlugin.getDefault().getPreferenceStore().setDefault(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE,""String_Node_Str"");
  CorePlugin.getDefault().getPreferenceStore().setDefault(MetadataTypeLengthConstants.PERL_FIELD_DEFAULT_TYPE,""String_Node_Str"");
  CorePlugin.getDefault().getPreferenceStore().setDefault(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_TYPE,""String_Node_Str"");
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATION,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.USE_CSS_TEMPLATE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.CONTEXT_GROUP_BY_SOURCE,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATESOURCECODE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.COMMAND_STR,ITalendCorePrefConstants.DEFAULT_COMMAND_STR);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_WARNING,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.FORBIDDEN_MAPPING_LENGTH_PREC_LOGIC,false);
}","/** 
 * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()
 */
@Override public void initializeDefaultPreferences(){
  IEclipsePreferences node=new DefaultScope().getNode(CorePlugin.getDefault().getBundle().getSymbolicName());
  IPath tempPath=new Path(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"");
  File tempFile=tempPath.toFile();
  if (!tempFile.exists()) {
    tempFile.mkdirs();
  }
  node.put(ITalendCorePrefConstants.FILE_PATH_TEMP,tempPath.toOSString());
  String os=Platform.getOS();
  String javaPath=System.getProperty(""String_Node_Str"");
  if (os.equals(Platform.OS_WIN32)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_WIN32_INTERPRETER);
  }
 else   if (os.equals(Platform.OS_LINUX)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_LINUX_INTERPRETER_PATH);
  }
  node.put(ITalendCorePrefConstants.LANGUAGE_SELECTOR,Locale.getDefault().getLanguage());
  node.put(ITalendCorePrefConstants.PREVIEW_LIMIT,""String_Node_Str"");
  node.putBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME,true);
  initializeUpdatePreference();
  final String perlEditorBundleName=""String_Node_Str"";
  final String editorsBundleName=""String_Node_Str"";
  final String editorLineNumberRuler=""String_Node_Str"";
  if (!CommonsPlugin.isHeadless()) {
    IPreferenceStore store=new ScopedPreferenceStore(new InstanceScope(),perlEditorBundleName);
    store.setValue(editorLineNumberRuler,true);
    store=new ScopedPreferenceStore(new InstanceScope(),editorsBundleName);
    store.setValue(editorLineNumberRuler,true);
    ColorManager.initDefaultColors(CorePlugin.getDefault().getPreferenceStore());
  }
  String languageType=Locale.getDefault().getLanguage();
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.LANGUAGE_SELECTOR,languageType);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_QUOTE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.AS400_SQL_SEG,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE,""String_Node_Str"");
  CorePlugin.getDefault().getPreferenceStore().setDefault(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE,""String_Node_Str"");
  CorePlugin.getDefault().getPreferenceStore().setDefault(MetadataTypeLengthConstants.PERL_FIELD_DEFAULT_TYPE,""String_Node_Str"");
  CorePlugin.getDefault().getPreferenceStore().setDefault(MetadataTypeLengthConstants.PERL_VALUE_DEFAULT_TYPE,""String_Node_Str"");
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATION,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.USE_CSS_TEMPLATE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.CONTEXT_GROUP_BY_SOURCE,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATESOURCECODE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.COMMAND_STR,ITalendCorePrefConstants.DEFAULT_COMMAND_STR);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_WARNING,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.FORBIDDEN_MAPPING_LENGTH_PREC_LOGIC,false);
}",0.9983127109111362
127782,"public static IRepositoryViewObject getRoutineFromName(Project tempProject,String name,boolean includeSystem){
  if (name == null) {
    return null;
  }
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    List<IRepositoryViewObject> all=factory.getAll(tempProject,ERepositoryObjectType.ROUTINES);
    for (    IRepositoryViewObject obj : all) {
      if (obj != null && obj.getProperty() != null) {
        Item item=obj.getProperty().getItem();
        String label=obj.getProperty().getLabel();
        if (item != null && item instanceof RoutineItem) {
          RoutineItem routineItem=(RoutineItem)item;
          if (name.equals(label)) {
            if (!includeSystem && routineItem.isBuiltIn()) {
              continue;
            }
 else {
              return obj;
            }
          }
        }
      }
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  return null;
}","public static IRepositoryViewObject getRoutineFromName(Project tempProject,String name,boolean includeSystem){
  if (name == null) {
    return null;
  }
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    List<IRepositoryViewObject> all=factory.getAll(tempProject,ERepositoryObjectType.ROUTINES);
    if (PluginChecker.isPigudfPluginLoaded()) {
      all.addAll(factory.getAll(tempProject,ERepositoryObjectType.PIG_UDF));
    }
    for (    IRepositoryViewObject obj : all) {
      if (obj != null && obj.getProperty() != null) {
        Item item=obj.getProperty().getItem();
        String label=obj.getProperty().getLabel();
        if (item != null && item instanceof RoutineItem) {
          RoutineItem routineItem=(RoutineItem)item;
          if (name.equals(label)) {
            if (!includeSystem && routineItem.isBuiltIn()) {
              continue;
            }
 else {
              return obj;
            }
          }
        }
      }
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  return null;
}",0.9371702637889688
127783,"/** 
 * test string value as a date with right pattern. </br>examples: </br>TimeZone:+0100 </br>2011/03/27 02:00:00 begin to carry out the daylight saving time. So parse dateString ""20110327 021711"" with TimeZone is wrong </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",false)</code> return <code>false</code> </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",true)</code> return <code>true</code> </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",true)</code> return <code>false</code>  </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",false)</code> return <code>false</code>
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @param ignoreTimeZone (if true ignore TimeZone when pare date with pattern)
 * @return the result whether the stringDate is a date string that with a right pattern
 */
public static boolean isDate(String stringDate,String pattern,boolean ignoreTimeZone){
  TimeZone tz=TimeZone.getDefault();
  if (ignoreTimeZone) {
    tz=TimeZone.getTimeZone(""String_Node_Str"");
  }
  if (stringDate == null) {
    return false;
  }
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
  java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
  sdf.setTimeZone(tz);
  sdf.setLenient(false);
  java.util.Date testDate=null;
  ParsePosition pos=new ParsePosition(0);
  testDate=sdf.parse(stringDate,pos);
  if (testDate == null) {
    return false;
  }
  String formatDate=sdf.format(testDate);
  if (formatDate.equalsIgnoreCase(stringDate) || pos.getIndex() == stringDate.length()) {
    return true;
  }
  return false;
}","/** 
 * test string value as a date with right pattern. </br>examples: </br>TimeZone:+0100 </br>2011/03/27 02:00:00 begin to carry out the daylight saving time. So parse dateString ""20110327 021711"" with TimeZone is wrong </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",false)</code> return <code>false</code> </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",true)</code> return <code>true</code> </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",true)</code> return <code>false</code>  </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",false)</code> return <code>false</code>
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @param ignoreTimeZone (if true ignore TimeZone when pare date with pattern)
 * @return the result whether the stringDate is a date string that with a right pattern
 */
public static boolean isDate(String stringDate,String pattern,boolean ignoreTimeZone){
  TimeZone tz=TimeZone.getDefault();
  if (ignoreTimeZone) {
    tz=TimeZone.getTimeZone(""String_Node_Str"");
  }
  if (stringDate == null) {
    return false;
  }
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
  java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
  sdf.setTimeZone(tz);
  sdf.setLenient(false);
  java.util.Date testDate=null;
  try {
    testDate=sdf.parse(stringDate);
  }
 catch (  ParseException e) {
    return false;
  }
  String formatDate=sdf.format(testDate);
  if (formatDate.equalsIgnoreCase(stringDate) || formatDate.length() == stringDate.length()) {
    return true;
  }
  return false;
}",0.8571428571428571
127784,"/** 
 * test string value as a date with right pattern. </br>examples: </br>TimeZone:+0100 </br>2011/03/27 01:00:00 begin to carry out the daylight saving time. So parse dateString ""20110327 021711"" with TimeZone is wrong </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",false)</code> return <code>false</code> </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",true)</code> return <code>true</code> </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",true)</code> return <code>false</code>  </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",false)</code> return <code>false</code>
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @param ignoreTimeZone (if true ignore TimeZone when pare date with pattern)
 * @return the result whether the stringDate is a date string that with a right pattern
 */
public static boolean isDate(String stringDate,String pattern,boolean ignoreTimeZone){
  TimeZone tz=TimeZone.getDefault();
  if (ignoreTimeZone) {
    tz=TimeZone.getTimeZone(""String_Node_Str"");
  }
  if (stringDate == null) {
    return false;
  }
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
  java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
  sdf.setTimeZone(tz);
  sdf.setLenient(false);
  java.util.Date testDate=null;
  ParsePosition pos=new ParsePosition(0);
  testDate=sdf.parse(stringDate,pos);
  if (testDate == null) {
    return false;
  }
  String formatDate=sdf.format(testDate);
  if (formatDate.equalsIgnoreCase(stringDate) || pos.getIndex() == stringDate.length()) {
    return true;
  }
  return false;
}","/** 
 * test string value as a date with right pattern. </br>examples: </br>TimeZone:+0100 </br>2011/03/27 01:00:00 begin to carry out the daylight saving time. So parse dateString ""20110327 021711"" with TimeZone is wrong </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",false)</code> return <code>false</code> </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",true)</code> return <code>true</code> </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",true)</code> return <code>false</code>  </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",false)</code> return <code>false</code>
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @param ignoreTimeZone (if true ignore TimeZone when pare date with pattern)
 * @return the result whether the stringDate is a date string that with a right pattern
 */
public static boolean isDate(String stringDate,String pattern,boolean ignoreTimeZone){
  TimeZone tz=TimeZone.getDefault();
  if (ignoreTimeZone) {
    tz=TimeZone.getTimeZone(""String_Node_Str"");
  }
  if (stringDate == null) {
    return false;
  }
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
  java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
  sdf.setTimeZone(tz);
  sdf.setLenient(false);
  java.util.Date testDate=null;
  try {
    testDate=sdf.parse(stringDate);
  }
 catch (  ParseException e) {
    return false;
  }
  String formatDate=sdf.format(testDate);
  if (formatDate.equalsIgnoreCase(stringDate) || formatDate.length() == stringDate.length()) {
    return true;
  }
  return false;
}",0.8571428571428571
127785,"/** 
 * DOC ocarbone Comment method ""setupForm"".
 */
protected void setupForm(boolean hasContextBtn){
  this.hasContextBtn=hasContextBtn;
  setDisposeListener();
  addComponents();
  if (!isInWizard) {
    statusLabel=new Label(this,SWT.LEFT);
    statusLabel.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
    statusLabel.setForeground(getDisplay().getSystemColor(SWT.COLOR_RED));
  }
  addFields();
  addExportContextButton();
  initialize();
  addUtilsButtonListeners();
  addFieldsListeners();
  if (this instanceof IRefreshable) {
    addAllKeyListener(getShell(),(IRefreshable)this);
  }
}","/** 
 * DOC ocarbone Comment method ""setupForm"".
 */
protected void setupForm(boolean hasContextBtn){
  this.hasContextBtn=hasContextBtn;
  setDisposeListener();
  addComponents();
  if (!isInWizard) {
    statusLabel=new Label(this,SWT.LEFT);
    statusLabel.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
    statusLabel.setForeground(getDisplay().getSystemColor(SWT.COLOR_RED));
  }
  addFields();
  addExportContextButton();
  addHelpInfoFields();
  initialize();
  addUtilsButtonListeners();
  addFieldsListeners();
  if (this instanceof IRefreshable) {
    addAllKeyListener(getShell(),(IRefreshable)this);
  }
}",0.9814665592264304
127786,"/** 
 * DOC Comment method ""refreshAll"".
 */
private static void refreshAll(){
  diViewList.clear();
  dqViewList.clear();
  mdmViewList.clear();
  setPerspectiveReviewUtil();
  IWorkbenchWindow workBenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (workBenchWindow != null) {
    IWorkbenchPage page=workBenchWindow.getActivePage();
    if (page != null) {
      String perId=page.getPerspective().getId();
      if ((!""String_Node_Str"".equals(perId) && null != perId)) {
        if (perId.equalsIgnoreCase(IBrandingConfiguration.PERSPECTIVE_DI_ID)) {
          for (          String strId : dqViewList) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
          for (          String strId : mdmViewList) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
        }
 else         if (perId.equalsIgnoreCase(IBrandingConfiguration.PERSPECTIVE_DQ_ID)) {
          for (          String strId : diViewList) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
          for (          String strId : mdmViewList) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
        }
 else         if (perId.equalsIgnoreCase(IBrandingConfiguration.PERSPECTIVE_MDM_ID)) {
          for (          String strId : diViewList) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
          for (          String strId : dqViewList) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
        }
      }
    }
  }
}","/** 
 * DOC Comment method ""refreshAll"".
 */
private static void refreshAll(){
  diViewList.clear();
  dqViewList.clear();
  mdmViewList.clear();
  setPerspectiveReviewUtil();
  IWorkbenchWindow workBenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (workBenchWindow != null) {
    IWorkbenchPage page=workBenchWindow.getActivePage();
    if (page != null) {
      String perId=page.getPerspective().getId();
      if ((!""String_Node_Str"".equals(perId) && null != perId)) {
        if (perId.equalsIgnoreCase(IBrandingConfiguration.PERSPECTIVE_DI_ID)) {
          for (          String strId : dqViewList.toArray(new String[0])) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
          for (          String strId : mdmViewList.toArray(new String[0])) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
        }
 else         if (perId.equalsIgnoreCase(IBrandingConfiguration.PERSPECTIVE_DQ_ID)) {
          for (          String strId : diViewList.toArray(new String[0])) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
          for (          String strId : mdmViewList.toArray(new String[0])) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
        }
 else         if (perId.equalsIgnoreCase(IBrandingConfiguration.PERSPECTIVE_MDM_ID)) {
          for (          String strId : diViewList.toArray(new String[0])) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
          for (          String strId : dqViewList.toArray(new String[0])) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
        }
      }
    }
  }
}",0.9673758865248226
127787,"public static void resetPerspective(){
  boolean reset=false;
  IPath path=WorkbenchPlugin.getDefault().getDataLocation();
  if (path == null) {
    return;
  }
  final File stateFile=path.append(""String_Node_Str"").toFile();
  final boolean stateExist=stateFile.exists();
  if (stateFile == null || !stateExist) {
    reset=true;
  }
  FileInputStream input=null;
  final IPerspectiveRegistry perspectiveRegistry=WorkbenchPlugin.getDefault().getPerspectiveRegistry();
  if (stateFile != null && stateExist) {
    try {
      input=new FileInputStream(stateFile);
      BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
      IMemento memento=XMLMemento.createReadRoot(reader);
      IMemento[] windowArray=memento.getChildren(IWorkbenchConstants.TAG_WINDOW);
      for (int cw=0; windowArray != null && cw < windowArray.length; cw++) {
        final IMemento windowMem=windowArray[cw];
        IMemento[] pageArray=windowMem.getChildren(IWorkbenchConstants.TAG_PAGE);
        for (int i=0; pageArray != null && i < pageArray.length; i++) {
          final IMemento pageMem=pageArray[i];
          IMemento pespectiveMem=pageMem.getChild(IWorkbenchConstants.TAG_PERSPECTIVES);
          if (pespectiveMem != null) {
            String activePerspectiveID=pespectiveMem.getString(IWorkbenchConstants.TAG_ACTIVE_PERSPECTIVE);
            IPerspectiveDescriptor perspectiveDesc=perspectiveRegistry.findPerspectiveWithId(activePerspectiveID);
            if (perspectiveDesc != null && perspectiveDesc instanceof PerspectiveDescriptor) {
              String originalId=((PerspectiveDescriptor)perspectiveDesc).getOriginalId();
              perspectiveDesc=perspectiveRegistry.findPerspectiveWithId(originalId);
            }
            if (perspectiveDesc == null) {
              stateFile.delete();
              reset=true;
              break;
            }
          }
        }
      }
    }
 catch (    FileNotFoundException e) {
    }
catch (    UnsupportedEncodingException e) {
    }
catch (    WorkbenchException e) {
    }
 finally {
      if (input != null) {
        try {
          input.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
  for (  IPerspectiveDescriptor pd : perspectiveRegistry.getPerspectives()) {
    if (pd instanceof PerspectiveDescriptor) {
      PerspectiveDescriptor descriptor=(PerspectiveDescriptor)pd;
      if (descriptor.getOriginalId() != null) {
        IPerspectiveDescriptor findPerspective=perspectiveRegistry.findPerspectiveWithId(descriptor.getOriginalId());
        if (findPerspective == null) {
          perspectiveRegistry.deletePerspective(pd);
        }
      }
    }
  }
  if (reset) {
    IPreferenceStore store=WorkbenchPlugin.getDefault().getPreferenceStore();
    String customPerspectives=store.getString(IPreferenceConstants.PERSPECTIVES);
    String[] perspectivesList=StringConverter.asArray(customPerspectives);
    for (int i=0; i < perspectivesList.length; i++) {
      store.setValue(perspectivesList[i] + ""String_Node_Str"",""String_Node_Str"");
    }
    store.setValue(IPreferenceConstants.PERSPECTIVES,""String_Node_Str"");
    if (store.needsSaving() && store instanceof IPersistentPreferenceStore) {
      try {
        ((IPersistentPreferenceStore)store).save();
      }
 catch (      IOException e) {
      }
    }
    File folder=path.toFile();
    if (folder.isDirectory()) {
      File[] fileList=folder.listFiles();
      for (int nX=0; nX < fileList.length; nX++) {
        File file=fileList[nX];
        if (file.getName().endsWith(""String_Node_Str"")) {
          file.delete();
        }
      }
    }
  }
}","public static void resetPerspective(){
  boolean reset=false;
  IPath path=WorkbenchPlugin.getDefault().getDataLocation();
  if (path == null) {
    return;
  }
  final File stateFile=path.append(""String_Node_Str"").toFile();
  final boolean stateExist=stateFile.exists();
  if (stateFile == null || !stateExist) {
    reset=true;
  }
  FileInputStream input=null;
  final IPerspectiveRegistry perspectiveRegistry=WorkbenchPlugin.getDefault().getPerspectiveRegistry();
  if (stateFile != null && stateExist) {
    try {
      input=new FileInputStream(stateFile);
      BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
      IMemento memento=XMLMemento.createReadRoot(reader);
      IMemento[] windowArray=memento.getChildren(IWorkbenchConstants.TAG_WINDOW);
      for (int cw=0; windowArray != null && cw < windowArray.length; cw++) {
        final IMemento windowMem=windowArray[cw];
        IMemento[] pageArray=windowMem.getChildren(IWorkbenchConstants.TAG_PAGE);
        for (int i=0; pageArray != null && i < pageArray.length; i++) {
          final IMemento pageMem=pageArray[i];
          IMemento pespectiveMem=pageMem.getChild(IWorkbenchConstants.TAG_PERSPECTIVES);
          if (pespectiveMem != null) {
            String activePerspectiveID=pespectiveMem.getString(IWorkbenchConstants.TAG_ACTIVE_PERSPECTIVE);
            IPerspectiveDescriptor perspectiveDesc=perspectiveRegistry.findPerspectiveWithId(activePerspectiveID);
            if (perspectiveDesc != null && perspectiveDesc instanceof PerspectiveDescriptor) {
              String originalId=((PerspectiveDescriptor)perspectiveDesc).getOriginalId();
              perspectiveDesc=perspectiveRegistry.findPerspectiveWithId(originalId);
            }
            if (perspectiveDesc == null) {
              stateFile.delete();
              reset=true;
              break;
            }
          }
        }
      }
    }
 catch (    FileNotFoundException e) {
    }
catch (    UnsupportedEncodingException e) {
    }
catch (    WorkbenchException e) {
    }
 finally {
      if (input != null) {
        try {
          input.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
  for (  IPerspectiveDescriptor pd : perspectiveRegistry.getPerspectives()) {
    if (pd instanceof PerspectiveDescriptor) {
      PerspectiveDescriptor descriptor=(PerspectiveDescriptor)pd;
      if (descriptor.getOriginalId() != null) {
        IPerspectiveDescriptor findPerspective=perspectiveRegistry.findPerspectiveWithId(descriptor.getOriginalId());
        if (findPerspective == null) {
          perspectiveRegistry.deletePerspective(pd);
        }
      }
    }
  }
  if (reset) {
    IPreferenceStore store=WorkbenchPlugin.getDefault().getPreferenceStore();
    String customPerspectives=store.getString(IPreferenceConstants.PERSPECTIVES);
    String[] perspectivesList=StringConverter.asArray(customPerspectives);
    for (    String element : perspectivesList) {
      store.setValue(element + ""String_Node_Str"",""String_Node_Str"");
    }
    store.setValue(IPreferenceConstants.PERSPECTIVES,""String_Node_Str"");
    if (store.needsSaving() && store instanceof IPersistentPreferenceStore) {
      try {
        ((IPersistentPreferenceStore)store).save();
      }
 catch (      IOException e) {
      }
    }
    File folder=path.toFile();
    if (folder.isDirectory()) {
      File[] fileList=folder.listFiles();
      for (      File file : fileList) {
        if (file.getName().endsWith(""String_Node_Str"")) {
          file.delete();
        }
      }
    }
  }
}",0.9798787210584344
127788,"@Override protected void addFields(){
  Composite mainComposite=Form.startNewGridLayout(this,2);
  addGroupDelimitedFileSettings(mainComposite,400,100);
  addGroupRowsToSkip(mainComposite,300,100);
  addGroupEscapeChar(mainComposite,400,105);
  addGroupLimit(mainComposite,300,105);
  addGroupFileViewer(this,700,200);
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
}","@Override protected void addFields(){
  Composite mainComposite=Form.startNewGridLayout(this,2);
  addGroupDelimitedFileSettings(mainComposite,400,105);
  addGroupRowsToSkip(mainComposite,300,105);
  addGroupEscapeChar(mainComposite,400,110);
  addGroupLimit(mainComposite,300,110);
  addGroupFileViewer(this,700,200);
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
}",0.9896193771626296
127789,"@Override protected void addFields(){
  Composite mainComposite=Form.startNewGridLayout(this,2);
  addGroupDelimitedFileSettings(mainComposite,280,80);
  addGroupRowsToSkip(mainComposite,300,80);
  addGroupDieOnErrorSettings(mainComposite,280,60);
  addGroupLimit(mainComposite,300,60);
  Composite mainComposite2=Form.startNewGridLayout(this,1);
  addGroupFileViewer(mainComposite2,600,200);
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
}","@Override protected void addFields(){
  Composite mainComposite=Form.startNewGridLayout(this,2);
  addGroupDelimitedFileSettings(mainComposite,280,120);
  addGroupRowsToSkip(mainComposite,300,120);
  addGroupDieOnErrorSettings(mainComposite,280,67);
  addGroupLimit(mainComposite,300,67);
  Composite mainComposite2=Form.startNewGridLayout(this,1);
  addGroupFileViewer(mainComposite2,600,200);
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
}",0.8223583460949464
127790,"private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean properties,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (option != GENERATE_MAIN_ONLY) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str""))) {
        if (""String_Node_Str"".equals(componentName)) {
          IElementParameter fromExternal=node.getElementParameter(""String_Node_Str"");
          Object value=fromExternal.getValue();
          if (value != null && ""String_Node_Str"".equals(value.toString())) {
            continue;
          }
        }
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (option == GENERATE_WITH_FIRST_CHILD) {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
                currentProcess.setNeedRegenerateCode(true);
              }
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (exportAsOSGI) {
                LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
              }
              LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
                LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              }
            }
          }
        }
      }
    }
  }
}","private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean properties,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (option != GENERATE_MAIN_ONLY) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str""))) {
        if (""String_Node_Str"".equals(componentName)) {
          IElementParameter fromExternal=node.getElementParameter(""String_Node_Str"");
          Object value=fromExternal.getValue();
          if (value != null && ""String_Node_Str"".equals(value.toString())) {
            continue;
          }
        }
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (option == GENERATE_WITH_FIRST_CHILD) {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
                currentProcess.setNeedRegenerateCode(true);
              }
            }
            LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (exportAsOSGI) {
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
            }
            LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
              LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            }
          }
        }
      }
    }
  }
}",0.9950811608460404
127791,"private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean properties,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (option != GENERATE_MAIN_ONLY) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str""))) {
        if (""String_Node_Str"".equals(componentName)) {
          IElementParameter fromExternal=node.getElementParameter(""String_Node_Str"");
          Object value=fromExternal.getValue();
          if (value != null && ""String_Node_Str"".equals(value.toString())) {
            continue;
          }
        }
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (option == GENERATE_WITH_FIRST_CHILD) {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
                currentProcess.setNeedRegenerateCode(true);
              }
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (exportAsOSGI) {
                LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
                LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
              }
              LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
                LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              }
            }
          }
        }
      }
    }
  }
}","private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean properties,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (option != GENERATE_MAIN_ONLY) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str""))) {
        if (""String_Node_Str"".equals(componentName)) {
          IElementParameter fromExternal=node.getElementParameter(""String_Node_Str"");
          Object value=fromExternal.getValue();
          if (value != null && ""String_Node_Str"".equals(value.toString())) {
            continue;
          }
        }
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (option == GENERATE_WITH_FIRST_CHILD) {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
                currentProcess.setNeedRegenerateCode(true);
              }
            }
            LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (exportAsOSGI) {
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
              LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
            }
            LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
              LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            }
          }
        }
      }
    }
  }
}",0.9952538175815104
127792,"/** 
 * fieldSeparator : Adapt Custom Label and set the field Text.
 */
protected void fieldSeparatorManager(){
  if (isContextMode()) {
    return;
  }
  FieldSeparator seperator=FieldSeparator.getByName(fieldSeparatorCombo.getText());
  getConnection().setFieldSeparatorType(seperator);
  if (fieldSeparatorCombo.getSelectionIndex() >= 5) {
    fieldSeparatorText.setLabelText(fieldSeparatorCombo.getText());
    fieldSeparatorText.setEditable(true);
    fieldSeparatorText.setText(getConnection().getFieldSeparatorValue());
    fieldSeparatorText.forceFocus();
  }
 else {
switch (fieldSeparatorCombo.getSelectionIndex()) {
case 0:
      fieldSeparatorText.setText(TalendQuoteUtils.addQuotes(""String_Node_Str""));
    break;
case 1:
  fieldSeparatorText.setText(TalendQuoteUtils.addQuotes(""String_Node_Str""));
break;
case 2:
fieldSeparatorText.setText(TalendQuoteUtils.addQuotes(""String_Node_Str""));
break;
case 3:
fieldSeparatorText.setText(TalendQuoteUtils.addQuotes(""String_Node_Str""));
break;
case 4:
fieldSeparatorText.setText(TalendQuoteUtils.addQuotes(""String_Node_Str""));
break;
default :
break;
}
getConnection().setFieldSeparatorValue(fieldSeparatorText.getText());
fieldSeparatorText.setLabelText(Messages.getString(""String_Node_Str""));
fieldSeparatorText.setEditable(true);
}
}","/** 
 * fieldSeparator : Adapt Custom Label and set the field Text.
 */
protected void fieldSeparatorManager(){
  if (isContextMode()) {
    return;
  }
  FieldSeparator seperator=FieldSeparator.getByName(fieldSeparatorCombo.getText());
  getConnection().setFieldSeparatorType(seperator);
  if (fieldSeparatorCombo.getSelectionIndex() >= 5) {
    fieldSeparatorText.setLabelText(fieldSeparatorCombo.getText());
    fieldSeparatorText.setEditable(true);
    fieldSeparatorText.setText(getConnection().getFieldSeparatorValue());
    fieldSeparatorText.forceFocus();
    fieldSeparatorText.setReadOnly(false);
  }
 else {
switch (fieldSeparatorCombo.getSelectionIndex()) {
case 0:
      fieldSeparatorText.setText(TalendQuoteUtils.addQuotes(""String_Node_Str""));
    break;
case 1:
  fieldSeparatorText.setText(TalendQuoteUtils.addQuotes(""String_Node_Str""));
break;
case 2:
fieldSeparatorText.setText(TalendQuoteUtils.addQuotes(""String_Node_Str""));
break;
case 3:
fieldSeparatorText.setText(TalendQuoteUtils.addQuotes(""String_Node_Str""));
break;
case 4:
fieldSeparatorText.setText(TalendQuoteUtils.addQuotes(""String_Node_Str""));
break;
default :
break;
}
getConnection().setFieldSeparatorValue(fieldSeparatorText.getText());
fieldSeparatorText.setLabelText(Messages.getString(""String_Node_Str""));
fieldSeparatorText.setReadOnly(true);
}
}",0.9775238095238096
127793,"/** 
 * rowSeparator : Adapt Custom Label and set the field Text.
 */
protected void rowSeparatorManager(){
  if (isContextMode()) {
    return;
  }
  RowSeparator separator=RowSeparator.getByName(rowSeparatorCombo.getText());
  getConnection().setRowSeparatorType(separator);
  if (rowSeparatorCombo.getSelectionIndex() == 1) {
    rowSeparatorText.setLabelText(rowSeparatorCombo.getText());
    rowSeparatorText.setEditable(true);
    rowSeparatorText.forceFocus();
  }
 else {
    if (rowSeparatorCombo.getSelectionIndex() == 0) {
      if (getConnection().getFormat().toString().equals(FileFormat.MAC_LITERAL.getName())) {
        rowSeparatorText.setText(TalendQuoteUtils.QUOTATION_MARK + ""String_Node_Str"" + TalendQuoteUtils.QUOTATION_MARK);
      }
 else {
        rowSeparatorText.setText(TalendQuoteUtils.QUOTATION_MARK + ""String_Node_Str"" + TalendQuoteUtils.QUOTATION_MARK);
      }
    }
    rowSeparatorText.setLabelText(Messages.getString(""String_Node_Str""));
    getConnection().setRowSeparatorValue(rowSeparatorText.getText());
    rowSeparatorText.setEditable(true);
  }
}","/** 
 * rowSeparator : Adapt Custom Label and set the field Text.
 */
protected void rowSeparatorManager(){
  if (isContextMode()) {
    return;
  }
  RowSeparator separator=RowSeparator.getByName(rowSeparatorCombo.getText());
  getConnection().setRowSeparatorType(separator);
  if (rowSeparatorCombo.getSelectionIndex() == 1) {
    rowSeparatorText.setLabelText(rowSeparatorCombo.getText());
    rowSeparatorText.setEditable(true);
    rowSeparatorText.forceFocus();
    rowSeparatorText.setReadOnly(false);
  }
 else {
    if (rowSeparatorCombo.getSelectionIndex() == 0) {
      if (getConnection().getFormat().toString().equals(FileFormat.MAC_LITERAL.getName())) {
        rowSeparatorText.setText(TalendQuoteUtils.QUOTATION_MARK + ""String_Node_Str"" + TalendQuoteUtils.QUOTATION_MARK);
      }
 else {
        rowSeparatorText.setText(TalendQuoteUtils.QUOTATION_MARK + ""String_Node_Str"" + TalendQuoteUtils.QUOTATION_MARK);
      }
    }
    rowSeparatorText.setLabelText(Messages.getString(""String_Node_Str""));
    getConnection().setRowSeparatorValue(rowSeparatorText.getText());
    rowSeparatorText.setEditable(true);
    rowSeparatorText.setReadOnly(true);
  }
}",0.9641116526362428
127794,"/** 
 * rowSeparator : Adapt Custom Label and set the field Text.
 */
protected void rowSeparatorManager(){
  if (isContextMode()) {
    return;
  }
  RowSeparator separator=RowSeparator.getByName(rowSeparatorCombo.getText());
  getConnection().setRowSeparatorType(separator);
  if (rowSeparatorCombo.getSelectionIndex() == 1) {
    rowSeparatorText.setLabelText(rowSeparatorCombo.getText());
    rowSeparatorText.setEditable(true);
    rowSeparatorText.forceFocus();
  }
 else {
    if (rowSeparatorCombo.getSelectionIndex() == 0) {
      if (getConnection().getFormat().toString().equals(FileFormat.MAC_LITERAL.getName())) {
        rowSeparatorText.setText(TalendQuoteUtils.QUOTATION_MARK + ""String_Node_Str"" + TalendQuoteUtils.QUOTATION_MARK);
      }
 else {
        rowSeparatorText.setText(TalendQuoteUtils.QUOTATION_MARK + ""String_Node_Str"" + TalendQuoteUtils.QUOTATION_MARK);
      }
    }
    rowSeparatorText.setLabelText(Messages.getString(""String_Node_Str""));
    getConnection().setRowSeparatorValue(rowSeparatorText.getText());
    rowSeparatorText.setEditable(true);
  }
}","/** 
 * rowSeparator : Adapt Custom Label and set the field Text.
 */
protected void rowSeparatorManager(){
  if (isContextMode()) {
    return;
  }
  RowSeparator separator=RowSeparator.getByName(rowSeparatorCombo.getText());
  getConnection().setRowSeparatorType(separator);
  if (rowSeparatorCombo.getSelectionIndex() == 1) {
    rowSeparatorText.setLabelText(rowSeparatorCombo.getText());
    rowSeparatorText.setEditable(true);
    rowSeparatorText.forceFocus();
    rowSeparatorText.setReadOnly(false);
  }
 else {
    if (rowSeparatorCombo.getSelectionIndex() == 0) {
      if (getConnection().getFormat().toString().equals(FileFormat.MAC_LITERAL.getName())) {
        rowSeparatorText.setText(TalendQuoteUtils.QUOTATION_MARK + ""String_Node_Str"" + TalendQuoteUtils.QUOTATION_MARK);
      }
 else {
        rowSeparatorText.setText(TalendQuoteUtils.QUOTATION_MARK + ""String_Node_Str"" + TalendQuoteUtils.QUOTATION_MARK);
      }
    }
    rowSeparatorText.setLabelText(Messages.getString(""String_Node_Str""));
    getConnection().setRowSeparatorValue(rowSeparatorText.getText());
    rowSeparatorText.setEditable(true);
    rowSeparatorText.setReadOnly(true);
  }
}",0.9641116526362428
127795,"/** 
 * DOC qiang.zhang Comment method ""getXMLMappingValue"".
 * @param repositoryConnection
 * @param metadataTable
 * @return
 */
public static List<Map<String,Object>> getXMLMappingValue(Connection connection,List<IMetadataTable> metadataTables){
  if (metadataTables == null || metadataTables.isEmpty()) {
    return new ArrayList<Map<String,Object>>();
  }
  if (connection instanceof XmlFileConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    XmlFileConnection xmlConnection=(XmlFileConnection)connection;
    EList objectList=xmlConnection.getSchema();
    XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)objectList.get(0);
    if (metadataTable != null) {
      if (xmlDesc != null) {
        List<SchemaTarget> schemaTargets=xmlDesc.getSchemaTargets();
        List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
        for (int i=0; i < schemaTargets.size(); i++) {
          Map<String,Object> map=new HashMap<String,Object>();
          SchemaTarget sch=schemaTargets.get(i);
          map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(sch.getRelativeXPathQuery()));
          maps.add(map);
        }
        return maps;
      }
    }
  }
  if (connection instanceof MDMConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    MDMConnection xmlConnection=(MDMConnection)connection;
    EList objectList=xmlConnection.getSchemas();
    if (metadataTable != null) {
      for (      Concept concept : (List<Concept>)objectList) {
        if (concept != null && concept.getLabel() != null && concept.getLabel().equals(metadataTable.getLabel())) {
          List<ConceptTarget> conceptTargets=concept.getConceptTargets();
          List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
          for (          IMetadataColumn col : metadataTable.getListColumns()) {
            Map<String,Object> map=new HashMap<String,Object>();
            map.put(""String_Node_Str"",null);
            for (int i=0; i < conceptTargets.size(); i++) {
              ConceptTarget cpt=conceptTargets.get(i);
              if (col.getLabel().equals(cpt.getTargetName())) {
                map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(cpt.getRelativeLoopExpression()));
              }
            }
            maps.add(map);
          }
          return maps;
        }
      }
    }
  }
  if (connection instanceof HL7Connection) {
    HL7Connection hl7Connection=(HL7Connection)connection;
    Set objectList=ConnectionHelper.getTables(hl7Connection);
    List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
    for (    IMetadataTable tableOfNode : metadataTables) {
      Map<String,Object> map=new HashMap<String,Object>();
      for (      MetadataTable table : (Set<MetadataTable>)objectList) {
        if (table != null && (table.getLabel() == null || table.getLabel().equals(tableOfNode.getLabel()))) {
          String xpathValue=""String_Node_Str"";
          for (          MetadataColumn col : table.getColumns()) {
            String original=col.getOriginalField();
            if (original != null && !""String_Node_Str"".equals(original)) {
              if (original.indexOf(TalendQuoteUtils.LBRACKET) != -1) {
                original=original.substring(0,original.indexOf(TalendQuoteUtils.LBRACKET));
              }
              original=TalendQuoteUtils.addQuotes(original);
              xpathValue+=original;
            }
            if (table.getColumns().indexOf(col) < table.getColumns().size() - 1) {
              xpathValue+=""String_Node_Str"";
            }
          }
          map.put(""String_Node_Str"",xpathValue);
          map.put(""String_Node_Str"",tableOfNode.getTableName());
          maps.add(map);
        }
      }
    }
    return maps;
  }
  return null;
}","/** 
 * DOC qiang.zhang Comment method ""getXMLMappingValue"".
 * @param repositoryConnection
 * @param metadataTable
 * @return
 */
public static List<Map<String,Object>> getXMLMappingValue(Connection connection,List<IMetadataTable> metadataTables){
  if (metadataTables == null || metadataTables.isEmpty()) {
    return new ArrayList<Map<String,Object>>();
  }
  if (connection instanceof XmlFileConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    XmlFileConnection xmlConnection=(XmlFileConnection)connection;
    EList objectList=xmlConnection.getSchema();
    XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)objectList.get(0);
    if (metadataTable != null) {
      if (xmlDesc != null) {
        List<SchemaTarget> schemaTargets=xmlDesc.getSchemaTargets();
        List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
        for (        IMetadataColumn col : metadataTable.getListColumns()) {
          Map<String,Object> map=new HashMap<String,Object>();
          map.put(""String_Node_Str"",null);
          for (int i=0; i < schemaTargets.size(); i++) {
            SchemaTarget sch=schemaTargets.get(i);
            if (col.getLabel().equals(sch.getTagName())) {
              map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(sch.getRelativeXPathQuery()));
            }
          }
          maps.add(map);
        }
        return maps;
      }
    }
  }
  if (connection instanceof MDMConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    MDMConnection xmlConnection=(MDMConnection)connection;
    EList objectList=xmlConnection.getSchemas();
    if (metadataTable != null) {
      for (      Concept concept : (List<Concept>)objectList) {
        if (concept != null && concept.getLabel() != null && concept.getLabel().equals(metadataTable.getLabel())) {
          List<ConceptTarget> conceptTargets=concept.getConceptTargets();
          List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
          for (          IMetadataColumn col : metadataTable.getListColumns()) {
            Map<String,Object> map=new HashMap<String,Object>();
            map.put(""String_Node_Str"",null);
            for (int i=0; i < conceptTargets.size(); i++) {
              ConceptTarget cpt=conceptTargets.get(i);
              if (col.getLabel().equals(cpt.getTargetName())) {
                map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(cpt.getRelativeLoopExpression()));
              }
            }
            maps.add(map);
          }
          return maps;
        }
      }
    }
  }
  if (connection instanceof HL7Connection) {
    HL7Connection hl7Connection=(HL7Connection)connection;
    Set objectList=ConnectionHelper.getTables(hl7Connection);
    List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
    for (    IMetadataTable tableOfNode : metadataTables) {
      Map<String,Object> map=new HashMap<String,Object>();
      for (      MetadataTable table : (Set<MetadataTable>)objectList) {
        if (table != null && (table.getLabel() == null || table.getLabel().equals(tableOfNode.getLabel()))) {
          String xpathValue=""String_Node_Str"";
          for (          MetadataColumn col : table.getColumns()) {
            String original=col.getOriginalField();
            if (original != null && !""String_Node_Str"".equals(original)) {
              if (original.indexOf(TalendQuoteUtils.LBRACKET) != -1) {
                original=original.substring(0,original.indexOf(TalendQuoteUtils.LBRACKET));
              }
              original=TalendQuoteUtils.addQuotes(original);
              xpathValue+=original;
            }
            if (table.getColumns().indexOf(col) < table.getColumns().size() - 1) {
              xpathValue+=""String_Node_Str"";
            }
          }
          map.put(""String_Node_Str"",xpathValue);
          map.put(""String_Node_Str"",tableOfNode.getTableName());
          maps.add(map);
        }
      }
    }
    return maps;
  }
  return null;
}",0.9570347569578044
127796,"@Override public int compare(Viewer viewer,TreePath parentPath,Object e1,Object e2){
  if (e1 instanceof RepositoryNode && e2 instanceof RepositoryNode) {
    final RepositoryNode node1=(RepositoryNode)e1;
    final RepositoryNode node2=(RepositoryNode)e2;
    if (node1.isBin() || node1.getType().equals(ENodeType.REFERENCED_PROJECT)) {
      return 1;
    }
    if (node2.isBin() || node2.getType().equals(ENodeType.REFERENCED_PROJECT)) {
      return -1;
    }
    if (node1.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER || node2.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER) {
      return e1.toString().compareTo(e2.toString());
    }
 else     if (viewerSorter != null) {
      if (viewerSorter instanceof TreePathViewerSorter) {
        return ((TreePathViewerSorter)viewerSorter).compare(viewer,parentPath,e1,e2);
      }
 else {
        return viewerSorter.compare(viewer,e1,e2);
      }
    }
  }
  return super.compare(viewer,parentPath,e1,e2);
}","@Override public int compare(Viewer viewer,TreePath parentPath,Object e1,Object e2){
  if (e1 instanceof RepositoryNode && e2 instanceof RepositoryNode) {
    final RepositoryNode node1=(RepositoryNode)e1;
    final RepositoryNode node2=(RepositoryNode)e2;
    if (node1.isBin() || node1.getType().equals(ENodeType.REFERENCED_PROJECT)) {
      return 1;
    }
    if (node2.isBin() || node2.getType().equals(ENodeType.REFERENCED_PROJECT)) {
      return -1;
    }
    if (node1.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER || node2.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER) {
      return e1.toString().compareTo(e2.toString());
    }
 else     if (viewerSorter != null) {
      if (viewerSorter instanceof TreePathViewerSorter) {
        if (!node1.isInitialized() && !node2.isInitialized()) {
          return viewerSorter.compare(viewer,e1,e2);
        }
        return ((TreePathViewerSorter)viewerSorter).compare(viewer,parentPath,e1,e2);
      }
 else {
        return viewerSorter.compare(viewer,e1,e2);
      }
    }
  }
  return super.compare(viewer,parentPath,e1,e2);
}",0.938676967648479
127797,"@Override protected void checkSorter(TreeViewer treeViewer){
  ViewerSorter sorter=null;
  if (getRepView() != null) {
    final StructuredViewer viewer=getRepView().getViewer();
    sorter=viewer.getSorter();
  }
  final ViewerSorter viewerSorter=sorter;
  treeViewer.setSorter(new TreePathViewerSorter(){
    @Override public int compare(    Viewer viewer,    TreePath parentPath,    Object e1,    Object e2){
      if (e1 instanceof RepositoryNode && e2 instanceof RepositoryNode) {
        final RepositoryNode node1=(RepositoryNode)e1;
        final RepositoryNode node2=(RepositoryNode)e2;
        if (node1.isBin() || node1.getType().equals(ENodeType.REFERENCED_PROJECT)) {
          return 1;
        }
        if (node2.isBin() || node2.getType().equals(ENodeType.REFERENCED_PROJECT)) {
          return -1;
        }
        if (node1.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER || node2.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER) {
          return e1.toString().compareTo(e2.toString());
        }
 else         if (viewerSorter != null) {
          if (viewerSorter instanceof TreePathViewerSorter) {
            return ((TreePathViewerSorter)viewerSorter).compare(viewer,parentPath,e1,e2);
          }
 else {
            return viewerSorter.compare(viewer,e1,e2);
          }
        }
      }
      return super.compare(viewer,parentPath,e1,e2);
    }
  }
);
}","@Override protected void checkSorter(TreeViewer treeViewer){
  ViewerSorter sorter=null;
  if (getRepView() != null) {
    final StructuredViewer viewer=getRepView().getViewer();
    sorter=viewer.getSorter();
  }
  final ViewerSorter viewerSorter=sorter;
  treeViewer.setSorter(new TreePathViewerSorter(){
    @Override public int compare(    Viewer viewer,    TreePath parentPath,    Object e1,    Object e2){
      if (e1 instanceof RepositoryNode && e2 instanceof RepositoryNode) {
        final RepositoryNode node1=(RepositoryNode)e1;
        final RepositoryNode node2=(RepositoryNode)e2;
        if (node1.isBin() || node1.getType().equals(ENodeType.REFERENCED_PROJECT)) {
          return 1;
        }
        if (node2.isBin() || node2.getType().equals(ENodeType.REFERENCED_PROJECT)) {
          return -1;
        }
        if (node1.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER || node2.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER) {
          return e1.toString().compareTo(e2.toString());
        }
 else         if (viewerSorter != null) {
          if (viewerSorter instanceof TreePathViewerSorter) {
            if (!node1.isInitialized() && !node2.isInitialized()) {
              return viewerSorter.compare(viewer,e1,e2);
            }
            return ((TreePathViewerSorter)viewerSorter).compare(viewer,parentPath,e1,e2);
          }
 else {
            return viewerSorter.compare(viewer,e1,e2);
          }
        }
      }
      return super.compare(viewer,parentPath,e1,e2);
    }
  }
);
}",0.952575912657796
127798,"/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn,IMetadataConnection metadataConnection){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=metadataConnection;
      if (metadataConnection == null) {
        metaConnection=ConvertionHelper.convert(dbConn);
      }
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      DatabaseMetaData databaseMetaData=null;
      if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metaConnection.getDbType())) {
        databaseMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metaConnection);
      }
 else {
        databaseMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn,false);
      }
      if (sqlConn != null) {
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return dbConn;
}","/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn,IMetadataConnection metadataConnection){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=metadataConnection;
      if (metadataConnection == null) {
        metaConnection=ConvertionHelper.convert(dbConn);
      }
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      if (sqlConn != null) {
        DatabaseMetaData databaseMetaData=null;
        if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metaConnection.getDbType())) {
          databaseMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metaConnection);
        }
 else {
          databaseMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn,false);
        }
        if (sqlConn != null) {
          MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
          MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return dbConn;
}",0.9655944055944056
127799,"/** 
 * zshen Method ""createConnection"".
 * @param url the database url
 * @param driver Driver of database and can't be null
 * @param props properties passed to the driver manager for getting the connection (normally at least a ""user"" and""password"" property should be included)
 * @return the connection,it is can be null when the driver is null
 * @throws SQLException
 * @throws InstantiationException
 * @throws IllegalAccessException
 * @throws ClassNotFoundException
 */
public static Connection createConnection(String url,Driver driver,Properties props) throws SQLException, InstantiationException, IllegalAccessException, ClassNotFoundException {
  Connection connection=null;
  if (driver != null) {
    try {
      DriverManager.registerDriver(driver);
      Class.forName(driver.getClass().getName());
      if (isMsSqlServer(url) || isSybase(url) || isHiveServer(url)) {
        connection=driver.connect(url,props);
      }
 else {
        connection=DriverManager.getConnection(url,props);
      }
    }
 catch (    ClassNotFoundException e) {
      try {
        connection=driver.connect(url,props);
      }
 catch (      Exception exception) {
        log.info(exception);
      }
    }
  }
  return connection;
}","/** 
 * zshen Method ""createConnection"".
 * @param url the database url
 * @param driver Driver of database and can't be null
 * @param props properties passed to the driver manager for getting the connection (normally at least a ""user"" and""password"" property should be included)
 * @return the connection,it is can be null when the driver is null
 * @throws SQLException
 * @throws InstantiationException
 * @throws IllegalAccessException
 * @throws ClassNotFoundException
 */
public static Connection createConnection(String url,Driver driver,Properties props) throws SQLException, InstantiationException, IllegalAccessException, ClassNotFoundException {
  Connection connection=null;
  if (driver != null) {
    try {
      DriverManager.registerDriver(driver);
      Class.forName(driver.getClass().getName());
      if (isMsSqlServer(url) || isSybase(url) || isHiveServer(url)) {
        connection=driver.connect(url,props);
      }
 else {
        connection=DriverManager.getConnection(url,props);
      }
    }
 catch (    ClassNotFoundException e) {
      try {
        connection=driver.connect(url,props);
      }
 catch (      Exception exception) {
        log.info(exception);
      }
    }
  }
 else {
    if (isODBCServer(url)) {
      connection=DriverManager.getConnection(url,props);
    }
  }
  return connection;
}",0.9454828660436138
127800,"public Map<ECustomVersionGroup,Set<LibraryFile>> getImportLibLibraries(){
  Map<ECustomVersionGroup,Set<LibraryFile>> libMap=new HashMap<ECustomVersionGroup,Set<LibraryFile>>();
  if (isFromExistVersion) {
    IHadoopService hadoopService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopService.class)) {
      hadoopService=(IHadoopService)GlobalServiceRegister.getDefault().getService(IHadoopService.class);
    }
    if (hadoopService != null) {
      for (      ECustomVersionGroup group : existVersionSelectionMap.keySet()) {
        if (existVersionSelectionMap.get(group)) {
          if (types != null) {
            HashSet libInSameGroup=new HashSet<LibraryFile>();
            boolean commonGroupCalculated=false;
            for (            ECustomVersionType type : types) {
              if (type.getGroup() == group) {
                Set<String> hadoopLibraries=new HashSet<String>();
                if (ECustomVersionType.PIG == type) {
                  hadoopLibraries=getLibrariesForPig();
                }
 else {
                  if (!commonGroupCalculated && (ECustomVersionType.HCATALOG == type || ECustomVersionType.OOZIE == type)) {
                    type=ECustomVersionType.HDFS;
                  }
                  if (type == ECustomVersionType.HDFS) {
                    commonGroupCalculated=true;
                  }
                  hadoopLibraries=hadoopService.getHadoopLibrariesByType(type,getDistribution(),getVersion());
                }
                Set<LibraryFile> convertToLibraryFile=customLibUtil.convertToLibraryFile(hadoopLibraries);
                libInSameGroup.addAll(convertToLibraryFile);
              }
            }
            libMap.put(group,libInSameGroup);
          }
        }
      }
    }
  }
 else   if (isFromZip) {
    Set<ECustomVersionGroup> groups=new HashSet<ECustomVersionGroup>();
    for (    ECustomVersionGroup group : fromZipSelectionMap.keySet()) {
      if (fromZipSelectionMap.get(group)) {
        groups.add(group);
      }
    }
    return customLibUtil.readZipFile(zipLocation,groups);
  }
  return libMap;
}","public Map<ECustomVersionGroup,Set<LibraryFile>> getImportLibLibraries(){
  Map<ECustomVersionGroup,Set<LibraryFile>> libMap=new HashMap<ECustomVersionGroup,Set<LibraryFile>>();
  if (isFromExistVersion) {
    IHadoopService hadoopService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopService.class)) {
      hadoopService=(IHadoopService)GlobalServiceRegister.getDefault().getService(IHadoopService.class);
    }
    if (hadoopService != null) {
      for (      ECustomVersionGroup group : existVersionSelectionMap.keySet()) {
        if (existVersionSelectionMap.get(group)) {
          if (types != null) {
            HashSet libInSameGroup=new HashSet<LibraryFile>();
            boolean commonGroupCalculated=false;
            for (            ECustomVersionType type : types) {
              if (type.getGroup() == group) {
                Set<String> hadoopLibraries=new HashSet<String>();
                if (ECustomVersionType.PIG == type || ECustomVersionType.PIG_HBASE == type || ECustomVersionType.PIG_HCATALOG == type) {
                  hadoopLibraries=getLibrariesForPig(type);
                }
 else {
                  if (!commonGroupCalculated && (ECustomVersionType.HCATALOG == type || ECustomVersionType.OOZIE == type)) {
                    type=ECustomVersionType.HDFS;
                  }
                  if (type == ECustomVersionType.HDFS) {
                    commonGroupCalculated=true;
                  }
                  hadoopLibraries=hadoopService.getHadoopLibrariesByType(type,getDistribution(),getVersion());
                }
                Set<LibraryFile> convertToLibraryFile=customLibUtil.convertToLibraryFile(hadoopLibraries);
                libInSameGroup.addAll(convertToLibraryFile);
              }
            }
            libMap.put(group,libInSameGroup);
          }
        }
      }
    }
  }
 else   if (isFromZip) {
    Set<ECustomVersionGroup> groups=new HashSet<ECustomVersionGroup>();
    for (    ECustomVersionGroup group : fromZipSelectionMap.keySet()) {
      if (fromZipSelectionMap.get(group)) {
        groups.add(group);
      }
    }
    return customLibUtil.readZipFile(zipLocation,groups);
  }
  return libMap;
}",0.9180252583237658
127801,"private Set<String> getLibrariesForPig(){
  Set<String> neededLibraries=new HashSet<String>();
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  INode node=CoreRuntimePlugin.getInstance().getDesignerCoreService().getRefrenceNode(""String_Node_Str"");
  IElementParameter elementParameter=node.getElementParameter(""String_Node_Str"");
  if (elementParameter != null) {
    elementParameter.setValue(true);
  }
  elementParameter=node.getElementParameter(""String_Node_Str"");
  if (elementParameter != null) {
    elementParameter.setValue(distribution);
  }
  elementParameter=node.getElementParameter(""String_Node_Str"");
  if (elementParameter != null) {
    elementParameter.setValue(version);
  }
  List<ModuleNeeded> modulesNeeded=node.getModulesNeeded();
  for (  ModuleNeeded module : modulesNeeded) {
    if (module.isRequired(node.getElementParameters())) {
      neededLibraries.add(module.getModuleName());
    }
  }
  return neededLibraries;
}","private Set<String> getLibrariesForPig(ECustomVersionType type){
  Set<String> neededLibraries=new HashSet<String>();
  INode node=CoreRuntimePlugin.getInstance().getDesignerCoreService().getRefrenceNode(""String_Node_Str"");
  IElementParameter elementParameter=node.getElementParameter(""String_Node_Str"");
  if (elementParameter != null) {
    elementParameter.setValue(true);
  }
  elementParameter=node.getElementParameter(""String_Node_Str"");
  if (elementParameter != null) {
    elementParameter.setValue(distribution);
  }
  elementParameter=node.getElementParameter(""String_Node_Str"");
  if (elementParameter != null) {
    elementParameter.setValue(version);
  }
  elementParameter=node.getElementParameter(""String_Node_Str"");
  if (elementParameter != null) {
    if (ECustomVersionType.PIG_HBASE == type) {
      elementParameter.setValue(""String_Node_Str"");
    }
 else     if (ECustomVersionType.PIG_HCATALOG == type) {
      elementParameter.setValue(""String_Node_Str"");
    }
  }
  List<ModuleNeeded> modulesNeeded=node.getModulesNeeded();
  for (  ModuleNeeded module : modulesNeeded) {
    if (module.isRequired(node.getElementParameters())) {
      neededLibraries.add(module.getModuleName());
    }
  }
  return neededLibraries;
}",0.7938325991189428
127802,"@Override protected void configureShell(Shell newShell){
  super.configureShell(newShell);
  newShell.setText(Messages.getString(""String_Node_Str""));
  newShell.setSize(500,450);
  setHelpAvailable(false);
}","@Override protected void configureShell(Shell newShell){
  super.configureShell(newShell);
  newShell.setText(Messages.getString(""String_Node_Str""));
  newShell.setSize(580,450);
  setHelpAvailable(false);
}",0.9951690821256038
127803,"/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else     if (EDatabaseConnTemplate.MYSQL.getDBDisplayName().equals(databaseType)) {
      if (dbVersionString != null) {
        return dbVersionString.toUpperCase();
      }
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (EDatabaseConnTemplate.ORACLE_OCI.getDBDisplayName().equals(databaseType) || EDatabaseConnTemplate.ORACLE_RAC.getDBDisplayName().equals(databaseType) || EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName().equals(databaseType)|| EDatabaseConnTemplate.ORACLESN.getDBDisplayName().equals(databaseType)) {
        if (dbVersionString != null) {
          driverValue=dbVersionString.toUpperCase();
        }
      }
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else       if (EDatabaseTypeName.VERTICA.getXmlName().equals(databaseType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersionString)) {
        return ""String_Node_Str"";
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      if (url != null) {
        String h2Prefix=""String_Node_Str"";
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          if (path.split(""String_Node_Str"").length > 2) {
            int startIndex=path.lastIndexOf(""String_Node_Str"") - 1;
            String filePath=path.substring(startIndex);
            h2Prefix+=path.substring(0,startIndex);
            path=filePath;
          }
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
        }
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((databaseType).equals(EDatabaseTypeName.HBASE.getDisplayName())) {
      return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
    }
 else {
      return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.HIVE_SERVER_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CUSTOM_JARS);
  }
  if (value.equals(EParameterNameForComponent.PARA_NAME_FS_DEFAULT_NAME.getName())) {
    String nameNodeURL=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    if (nameNodeURL == null && (databaseType).equals(EDatabaseTypeName.HBASE.getDisplayName())) {
      return nameNodeURL;
    }
 else     if (isContextMode(connection,nameNodeURL)) {
      return nameNodeURL;
    }
 else {
      return TalendQuoteUtils.addQuotes(nameNodeURL);
    }
  }
  if (value.equals(EParameterNameForComponent.PARA_NAME_MAPRED_JT.getName())) {
    String jobTrackerURL=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    if (isContextMode(connection,jobTrackerURL)) {
      return jobTrackerURL;
    }
 else {
      return TalendQuoteUtils.addQuotes(jobTrackerURL);
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return false;
  }
  if (value.equals(""String_Node_Str"")) {
    return true;
  }
  if (value.equals(""String_Node_Str"") || value.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    String useKrbValue=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_KRB);
    if (useKrbValue == null) {
      return useKrbValue;
    }
 else {
      return Boolean.parseBoolean(useKrbValue);
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String mapredJobTracker=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    if (mapredJobTracker == null) {
      return mapredJobTracker;
    }
 else {
      return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(mapredJobTracker));
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String nameNodePrincipal=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_PRINCIPAL);
    if (nameNodePrincipal == null) {
      return nameNodePrincipal;
    }
 else {
      return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(nameNodePrincipal));
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String jobTrackerPrincipal=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_PRINCIPAL);
    if (jobTrackerPrincipal == null) {
      return jobTrackerPrincipal;
    }
 else {
      return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(jobTrackerPrincipal));
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  return null;
}","/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  return getDatabaseValue(connection,value,null);
}",0.0256165169183712
127804,"public static Object getValue(Connection connection,String value,IMetadataTable table){
  if (connection instanceof HL7Connection) {
    return getHL7Value((HL7Connection)connection,value);
  }
  if (connection instanceof FileConnection) {
    return getFileValue((FileConnection)connection,value);
  }
  if (connection instanceof XmlFileConnection) {
    return getXmlFileValue((XmlFileConnection)connection,value);
  }
  if (connection instanceof DatabaseConnection) {
    return getDatabaseValue((DatabaseConnection)connection,value);
  }
  if (connection instanceof FTPConnection) {
    return getFTPValue((FTPConnection)connection,value);
  }
  if (connection instanceof BRMSConnection) {
    return getBRMSValue((BRMSConnection)connection,value);
  }
  if (connection instanceof LDAPSchemaConnection) {
    return getLDAPValue((LDAPSchemaConnection)connection,value);
  }
  if (connection instanceof WSDLSchemaConnection) {
    return getWSDLValue((WSDLSchemaConnection)connection,value);
  }
  if (connection instanceof LdifFileConnection) {
    return getLdifFileValue((LdifFileConnection)connection,value);
  }
  if (connection instanceof FileExcelConnection) {
    return getExcelFileValue((FileExcelConnection)connection,value);
  }
  if (connection instanceof MDMConnection) {
    return getMDMValue((MDMConnection)connection,value,table);
  }
  if (connection instanceof SAPConnection) {
    return getSAPValue((SAPConnection)connection,value);
  }
  if (connection instanceof SalesforceSchemaConnection) {
    return getSalesforceSchemaValue((SalesforceSchemaConnection)connection,value);
  }
  if (connection instanceof EDIFACTConnection) {
    return getEDIFACTSchemaValue((EDIFACTConnection)connection,value);
  }
  for (  IDragAndDropServiceHandler handler : DragAndDropManager.getHandlers()) {
    if (handler.canHandle(connection)) {
      return handler.getComponentValue(connection,value,table);
    }
  }
  return null;
}","public static Object getValue(Connection connection,String value,IMetadataTable table){
  return getValue(connection,value,table,null);
}",0.1297453147525228
127805,"/** 
 * DOC hwang Comment method ""getComponentValue"". get parameter value of the connection
 * @param connection - connection
 * @param value - parameter name
 */
public Object getComponentValue(Connection connection,String value,IMetadataTable table);","public Object getComponentValue(Connection connection,String value,IMetadataTable table,String targetComponent);",0.489010989010989
127806,"/** 
 * @see org.eclipse.jface.preference.FieldEditorPreferencePage#createFieldEditors()
 */
@Override protected void createFieldEditors(){
  DirectoryFieldEditor filePathTemp=new DirectoryFieldEditor(ITalendCorePrefConstants.FILE_PATH_TEMP,Messages.getString(""String_Node_Str""),getFieldEditorParent());
  addField(filePathTemp);
  FileFieldEditor javaInterpreter=new FileFieldEditor(ITalendCorePrefConstants.JAVA_INTERPRETER,Messages.getString(""String_Node_Str""),true,getFieldEditorParent()){
    @Override protected boolean checkState(){
      return super.checkState();
    }
  }
;
  addField(javaInterpreter);
  IntegerFieldEditor previewLimit=new IntegerFieldEditor(ITalendCorePrefConstants.PREVIEW_LIMIT,Messages.getString(""String_Node_Str""),getFieldEditorParent(),9);
  previewLimit.setEmptyStringAllowed(false);
  previewLimit.setValidRange(1,999999999);
  addField(previewLimit);
  BooleanFieldEditor runInMultiThread=new BooleanFieldEditor(ITalendCorePrefConstants.RUN_IN_MULTI_THREAD,Messages.getString(""String_Node_Str""),getFieldEditorParent());
  addField(runInMultiThread);
  DirectoryFieldEditor ireportPath=new DirectoryFieldEditor(ITalendCorePrefConstants.IREPORT_PATH,Messages.getString(""String_Node_Str""),getFieldEditorParent());
  addField(ireportPath);
  BooleanFieldEditor alwaysWelcome=new BooleanFieldEditor(ITalendCorePrefConstants.ALWAYS_WELCOME,Messages.getString(""String_Node_Str""),getFieldEditorParent());
  addField(alwaysWelcome);
}","/** 
 * @see org.eclipse.jface.preference.FieldEditorPreferencePage#createFieldEditors()
 */
@Override protected void createFieldEditors(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
    ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
    service.createTalendCorePreference(this,getFieldEditorParent());
  }
}",0.1799678628816282
127807,"@Override protected void addField(FieldEditor editor){
  super.addField(editor);
  fields.add(editor);
}","@Override public void addField(FieldEditor editor){
  super.addField(editor);
  fields.add(editor);
}",0.946341463414634
127808,"/** 
 * if the url include ""odbc"", return true, else return false
 * @param url
 * @return
 */
private static boolean isODBCServer(String url){
  return url.indexOf(""String_Node_Str"") > -1;
}","/** 
 * if the url include ""odbc"", return true, else return false
 * @param url
 * @return
 */
private static boolean isODBCServer(String url){
  return url.startsWith(""String_Node_Str"");
}",0.9473684210526316
127809,"public static void resetPerspective(){
  boolean reset=false;
  IPath path=WorkbenchPlugin.getDefault().getDataLocation();
  if (path == null) {
    return;
  }
  final File stateFile=path.append(""String_Node_Str"").toFile();
  final boolean stateExist=stateFile.exists();
  if (stateFile == null || !stateExist) {
    reset=true;
  }
  FileInputStream input=null;
  final IPerspectiveRegistry perspectiveRegistry=WorkbenchPlugin.getDefault().getPerspectiveRegistry();
  if (stateFile != null && stateExist) {
    try {
      input=new FileInputStream(stateFile);
      BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
      IMemento memento=XMLMemento.createReadRoot(reader);
      IMemento[] windowArray=memento.getChildren(IWorkbenchConstants.TAG_WINDOW);
      for (int cw=0; windowArray != null && cw < windowArray.length; cw++) {
        final IMemento windowMem=windowArray[cw];
        IMemento[] pageArray=windowMem.getChildren(IWorkbenchConstants.TAG_PAGE);
        for (int i=0; pageArray != null && i < pageArray.length; i++) {
          final IMemento pageMem=pageArray[i];
          IMemento pespectiveMem=pageMem.getChild(IWorkbenchConstants.TAG_PERSPECTIVES);
          if (pespectiveMem != null) {
            String activePerspectiveID=pespectiveMem.getString(IWorkbenchConstants.TAG_ACTIVE_PERSPECTIVE);
            IPerspectiveDescriptor perspectiveDesc=perspectiveRegistry.findPerspectiveWithId(activePerspectiveID);
            if (perspectiveDesc != null && perspectiveDesc instanceof PerspectiveDescriptor) {
              String originalId=((PerspectiveDescriptor)perspectiveDesc).getOriginalId();
              perspectiveDesc=perspectiveRegistry.findPerspectiveWithId(originalId);
            }
            if (perspectiveDesc == null) {
              stateFile.delete();
              reset=true;
              break;
            }
          }
        }
      }
    }
 catch (    FileNotFoundException e) {
    }
catch (    UnsupportedEncodingException e) {
    }
catch (    WorkbenchException e) {
    }
 finally {
      if (input != null) {
        try {
          input.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
  for (  IPerspectiveDescriptor pd : perspectiveRegistry.getPerspectives()) {
    if (pd instanceof PerspectiveDescriptor) {
      PerspectiveDescriptor descriptor=(PerspectiveDescriptor)pd;
      if (descriptor.getOriginalId() != null) {
        IPerspectiveDescriptor findPerspective=perspectiveRegistry.findPerspectiveWithId(descriptor.getOriginalId());
        if (findPerspective == null) {
          perspectiveRegistry.deletePerspective(pd);
        }
      }
    }
  }
  if (reset) {
    IPreferenceStore store=WorkbenchPlugin.getDefault().getPreferenceStore();
    String customPerspectives=store.getString(IPreferenceConstants.PERSPECTIVES);
    String[] perspectivesList=StringConverter.asArray(customPerspectives);
    for (int i=0; i < perspectivesList.length; i++) {
      store.setValue(perspectivesList[i] + ""String_Node_Str"",""String_Node_Str"");
    }
    store.setValue(IPreferenceConstants.PERSPECTIVES,""String_Node_Str"");
    if (store.needsSaving() && store instanceof IPersistentPreferenceStore) {
      try {
        ((IPersistentPreferenceStore)store).save();
      }
 catch (      IOException e) {
      }
    }
    File folder=path.toFile();
    if (folder.isDirectory()) {
      File[] fileList=folder.listFiles();
      for (int nX=0; nX < fileList.length; nX++) {
        File file=fileList[nX];
        if (file.getName().endsWith(""String_Node_Str"")) {
          file.delete();
        }
      }
    }
  }
}","public static void resetPerspective(){
  boolean reset=false;
  IPath path=WorkbenchPlugin.getDefault().getDataLocation();
  if (path == null) {
    return;
  }
  final File stateFile=path.append(""String_Node_Str"").toFile();
  final boolean stateExist=stateFile.exists();
  if (stateFile == null || !stateExist) {
    reset=true;
  }
  FileInputStream input=null;
  final IPerspectiveRegistry perspectiveRegistry=WorkbenchPlugin.getDefault().getPerspectiveRegistry();
  if (stateFile != null && stateExist) {
    try {
      input=new FileInputStream(stateFile);
      BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
      IMemento memento=XMLMemento.createReadRoot(reader);
      IMemento[] windowArray=memento.getChildren(IWorkbenchConstants.TAG_WINDOW);
      for (int cw=0; windowArray != null && cw < windowArray.length; cw++) {
        final IMemento windowMem=windowArray[cw];
        IMemento[] pageArray=windowMem.getChildren(IWorkbenchConstants.TAG_PAGE);
        for (int i=0; pageArray != null && i < pageArray.length; i++) {
          final IMemento pageMem=pageArray[i];
          IMemento pespectiveMem=pageMem.getChild(IWorkbenchConstants.TAG_PERSPECTIVES);
          if (pespectiveMem != null) {
            String activePerspectiveID=pespectiveMem.getString(IWorkbenchConstants.TAG_ACTIVE_PERSPECTIVE);
            IPerspectiveDescriptor perspectiveDesc=perspectiveRegistry.findPerspectiveWithId(activePerspectiveID);
            if (perspectiveDesc != null && perspectiveDesc instanceof PerspectiveDescriptor) {
              String originalId=((PerspectiveDescriptor)perspectiveDesc).getOriginalId();
              perspectiveDesc=perspectiveRegistry.findPerspectiveWithId(originalId);
            }
            if (perspectiveDesc == null) {
              stateFile.delete();
              reset=true;
              break;
            }
          }
        }
      }
      if (!reset) {
        if (PluginChecker.isBPMloaded()) {
          IMemento[] hideMenuArray=memento.getChildren(IWorkbenchConstants.TAG_HIDE_MENU);
          if (hideMenuArray.length == 0) {
            stateFile.delete();
            reset=true;
          }
 else {
            String bonitaMenues=""String_Node_Str"";
            boolean isBPMFilterWork=false;
            for (int i=0; hideMenuArray != null && i < hideMenuArray.length; i++) {
              IMemento hideMenu=hideMenuArray[i];
              String string=hideMenu.getString(IWorkbenchConstants.TAG_ID);
              if (string != null && string.startsWith(bonitaMenues)) {
                isBPMFilterWork=true;
                break;
              }
            }
            if (!isBPMFilterWork) {
              stateFile.delete();
              reset=true;
            }
          }
        }
      }
    }
 catch (    FileNotFoundException e) {
    }
catch (    UnsupportedEncodingException e) {
    }
catch (    WorkbenchException e) {
    }
 finally {
      if (input != null) {
        try {
          input.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
  for (  IPerspectiveDescriptor pd : perspectiveRegistry.getPerspectives()) {
    if (pd instanceof PerspectiveDescriptor) {
      PerspectiveDescriptor descriptor=(PerspectiveDescriptor)pd;
      if (descriptor.getOriginalId() != null) {
        IPerspectiveDescriptor findPerspective=perspectiveRegistry.findPerspectiveWithId(descriptor.getOriginalId());
        if (findPerspective == null) {
          perspectiveRegistry.deletePerspective(pd);
        }
      }
    }
  }
  if (reset) {
    IPreferenceStore store=WorkbenchPlugin.getDefault().getPreferenceStore();
    String customPerspectives=store.getString(IPreferenceConstants.PERSPECTIVES);
    String[] perspectivesList=StringConverter.asArray(customPerspectives);
    for (    String element : perspectivesList) {
      store.setValue(element + ""String_Node_Str"",""String_Node_Str"");
    }
    store.setValue(IPreferenceConstants.PERSPECTIVES,""String_Node_Str"");
    if (store.needsSaving() && store instanceof IPersistentPreferenceStore) {
      try {
        ((IPersistentPreferenceStore)store).save();
      }
 catch (      IOException e) {
      }
    }
    File folder=path.toFile();
    if (folder.isDirectory()) {
      File[] fileList=folder.listFiles();
      for (      File file : fileList) {
        if (file.getName().endsWith(""String_Node_Str"")) {
          file.delete();
        }
      }
    }
  }
}",0.8740012292563
127810,"protected void evaluateTextField(){
  if (readOnly) {
    return;
  }
  if (nameText == null || nameText.isDisposed()) {
    return;
  }
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (isKeywords(nameText.getText()) || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(getPropertyLabel(StringUtils.trimToNull(nameText.getText())));
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
    property.setModificationDate(new Date());
  }
  updatePageStatus();
}","protected void evaluateTextField(){
  if (readOnly) {
    return;
  }
  if (nameText == null || nameText.isDisposed()) {
    return;
  }
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().startsWith(""String_Node_Str"") || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (isKeywords(nameText.getText()) || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(getPropertyLabel(StringUtils.trimToNull(nameText.getText())));
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
    property.setModificationDate(new Date());
  }
  updatePageStatus();
}",0.9817030260380014
127811,"/** 
 * Checks if Hive can be connected, if yes, then return <code>true</code> for {  {@link #isValide} with successfulmessage  {@link #messageException}. Otherwise, return <code>false</code>. In fact, in this method it invokes  {@link HiveConnectionManager#checkHiveConnection(IMetadataConnection)} to check hive connection. Added by MarvinWang on Mar 18, 2013.
 * @param metadataConn
 * @return
 */
public boolean checkHiveConnection(IMetadataConnection metadataConn){
  try {
    HiveConnectionManager.getInstance().checkConnection(metadataConn);
    isValide=true;
    messageException=Messages.getString(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    isValide=false;
    messageException=Messages.getString(""String_Node_Str"");
    CommonExceptionHandler.process(e);
  }
catch (  InstantiationException e) {
    isValide=false;
    messageException=Messages.getString(""String_Node_Str"");
    CommonExceptionHandler.process(e);
  }
catch (  IllegalAccessException e) {
    isValide=false;
    messageException=Messages.getString(""String_Node_Str"");
    CommonExceptionHandler.process(e);
  }
catch (  SQLException e) {
    isValide=false;
    messageException=Messages.getString(""String_Node_Str"");
    CommonExceptionHandler.process(e);
  }
  return isValide;
}","/** 
 * Checks if Hive can be connected, if yes, then return <code>true</code> for {  {@link #isValide} with successfulmessage  {@link #messageException}. Otherwise, return <code>false</code>. In fact, in this method it invokes  {@link HiveConnectionManager#checkHiveConnection(IMetadataConnection)} to check hive connection. Added by MarvinWang on Mar 18, 2013.
 * @param metadataConn
 * @return
 */
public boolean checkHiveConnection(IMetadataConnection metadataConn){
  try {
    HiveConnectionManager.getInstance().checkConnection(metadataConn);
    isValide=true;
    messageException=Messages.getString(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    isValide=false;
    if (metadataConn.getCurrentConnection() instanceof DatabaseConnection) {
      DatabaseConnection connection=(DatabaseConnection)metadataConn.getCurrentConnection();
      String hiveDistribution=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
      String hiveDVersion=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
      if (hiveDistribution.equals(EHadoopDistributions.MAPR.getName())) {
        Set<String> jars=new HashSet<String>();
        String missJarMsg=""String_Node_Str"";
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopService.class)) {
          IHadoopService hadoopService=(IHadoopService)GlobalServiceRegister.getDefault().getService(IHadoopService.class);
          jars=hadoopService.getMissingLibraries(hiveDistribution,hiveDVersion);
          if (jars.size() > 0) {
            missJarMsg=""String_Node_Str"" + jars.toString() + ""String_Node_Str""+ ""String_Node_Str"";
            messageException=messageException + ""String_Node_Str"" + missJarMsg;
          }
        }
      }
    }
    messageException=Messages.getString(""String_Node_Str"");
    CommonExceptionHandler.process(e);
  }
catch (  InstantiationException e) {
    isValide=false;
    messageException=Messages.getString(""String_Node_Str"");
    CommonExceptionHandler.process(e);
  }
catch (  IllegalAccessException e) {
    isValide=false;
    messageException=Messages.getString(""String_Node_Str"");
    CommonExceptionHandler.process(e);
  }
catch (  SQLException e) {
    isValide=false;
    messageException=Messages.getString(""String_Node_Str"");
    CommonExceptionHandler.process(e);
  }
  return isValide;
}",0.7002999727297519
127812,"public Map<ECustomVersionGroup,Set<LibraryFile>> getImportLibLibraries(){
  Map<ECustomVersionGroup,Set<LibraryFile>> libMap=new HashMap<ECustomVersionGroup,Set<LibraryFile>>();
  if (isFromExistVersion) {
    IHadoopService hadoopService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopService.class)) {
      hadoopService=(IHadoopService)GlobalServiceRegister.getDefault().getService(IHadoopService.class);
    }
    if (hadoopService != null) {
      for (      ECustomVersionGroup group : existVersionSelectionMap.keySet()) {
        if (existVersionSelectionMap.get(group)) {
          if (types != null) {
            HashSet libInSameGroup=new HashSet<LibraryFile>();
            for (            ECustomVersionType type : types) {
              if (type.getGroup() == group) {
                Set<String> hadoopLibraries=new HashSet<String>();
                if (ECustomVersionType.PIG == type) {
                  hadoopLibraries=getLibrariesForPig();
                }
 else {
                  if (ECustomVersionType.HCATALOG == type || ECustomVersionType.OOZIE == type) {
                    type=ECustomVersionType.HDFS;
                  }
                  hadoopLibraries=hadoopService.getHadoopLibrariesByType(type,getDistribution(),getVersion());
                }
                Set<LibraryFile> convertToLibraryFile=customLibUtil.convertToLibraryFile(hadoopLibraries);
                libInSameGroup.addAll(convertToLibraryFile);
              }
            }
            libMap.put(group,libInSameGroup);
          }
        }
      }
    }
  }
 else   if (isFromZip) {
    Set<ECustomVersionGroup> groups=new HashSet<ECustomVersionGroup>();
    for (    ECustomVersionGroup group : fromZipSelectionMap.keySet()) {
      if (fromZipSelectionMap.get(group)) {
        groups.add(group);
      }
    }
    return customLibUtil.readZipFile(zipLocation,groups);
  }
  return libMap;
}","public Map<ECustomVersionGroup,Set<LibraryFile>> getImportLibLibraries(){
  Map<ECustomVersionGroup,Set<LibraryFile>> libMap=new HashMap<ECustomVersionGroup,Set<LibraryFile>>();
  if (isFromExistVersion) {
    IHadoopService hadoopService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopService.class)) {
      hadoopService=(IHadoopService)GlobalServiceRegister.getDefault().getService(IHadoopService.class);
    }
    if (hadoopService != null) {
      for (      ECustomVersionGroup group : existVersionSelectionMap.keySet()) {
        if (existVersionSelectionMap.get(group)) {
          if (types != null) {
            HashSet libInSameGroup=new HashSet<LibraryFile>();
            boolean commonGroupCalculated=false;
            for (            ECustomVersionType type : types) {
              if (type.getGroup() == group) {
                Set<String> hadoopLibraries=new HashSet<String>();
                if (ECustomVersionType.PIG == type) {
                  hadoopLibraries=getLibrariesForPig();
                }
 else {
                  if (!commonGroupCalculated && (ECustomVersionType.HCATALOG == type || ECustomVersionType.OOZIE == type)) {
                    type=ECustomVersionType.HDFS;
                  }
                  if (type == ECustomVersionType.HDFS) {
                    commonGroupCalculated=true;
                  }
                  hadoopLibraries=hadoopService.getHadoopLibrariesByType(type,getDistribution(),getVersion());
                }
                Set<LibraryFile> convertToLibraryFile=customLibUtil.convertToLibraryFile(hadoopLibraries);
                libInSameGroup.addAll(convertToLibraryFile);
              }
            }
            libMap.put(group,libInSameGroup);
          }
        }
      }
    }
  }
 else   if (isFromZip) {
    Set<ECustomVersionGroup> groups=new HashSet<ECustomVersionGroup>();
    for (    ECustomVersionGroup group : fromZipSelectionMap.keySet()) {
      if (fromZipSelectionMap.get(group)) {
        groups.add(group);
      }
    }
    return customLibUtil.readZipFile(zipLocation,groups);
  }
  return libMap;
}",0.9503197245450072
127813,"/** 
 * Initialize value, forceFocus first field.
 */
@Override protected void initialize(){
  treeViewer=new TreeViewer(availableXmlTree);
  treeViewer.setContentProvider(new VirtualXmlTreeNodeContentProvider(treeViewer));
  treeViewer.setLabelProvider(new VirtualXmlTreeLabelProvider());
  treeViewer.setUseHashlookup(true);
  this.treePopulator=new TreePopulator(treeViewer);
  checkFieldsValue();
  if (xmlXPathLoopDescriptor == null) {
    if (getConnection().getSchema() != null && !getConnection().getSchema().isEmpty()) {
      xmlXPathLoopDescriptor=getConnection().getSchema().get(0);
      xmlFilePath=getConnection().getXmlFilePath();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),connectionItem.getConnection().getContextName());
        xmlFilePath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlFilePath));
      }
    }
 else {
      xmlXPathLoopDescriptor=ConnectionFactory.eINSTANCE.createXmlXPathLoopDescriptor();
      getConnection().getSchema().add(xmlXPathLoopDescriptor);
    }
  }
  loopModel.setXmlXPathLoopDescriptor(xmlXPathLoopDescriptor);
  if (xmlXPathLoopDescriptor.getLimitBoucle() == null) {
    xmlXPathLoopDescriptor.setLimitBoucle(-1);
    XmlArray.setLimitToDefault();
    xmlXPathLoopDescriptor.setLimitBoucle(XmlArray.getRowLimit());
  }
  fieldsModel.setXmlXPathLoopDescriptor(xmlXPathLoopDescriptor.getSchemaTargets());
  fieldsTableEditorView.getTableViewerCreator().layout();
  if (isContextMode()) {
    adaptFormToEditable();
  }
}","/** 
 * Initialize value, forceFocus first field.
 */
@Override protected void initialize(){
  if (treeViewer == null) {
    treeViewer=new TreeViewer(availableXmlTree);
    treeViewer.setContentProvider(new VirtualXmlTreeNodeContentProvider(treeViewer));
    treeViewer.setLabelProvider(new VirtualXmlTreeLabelProvider());
    treeViewer.setUseHashlookup(true);
    this.treePopulator=new TreePopulator(treeViewer);
  }
  checkFieldsValue();
  if (xmlXPathLoopDescriptor == null) {
    if (getConnection().getSchema() != null && !getConnection().getSchema().isEmpty()) {
      xmlXPathLoopDescriptor=getConnection().getSchema().get(0);
      xmlFilePath=getConnection().getXmlFilePath();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),connectionItem.getConnection().getContextName());
        xmlFilePath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlFilePath));
      }
    }
 else {
      xmlXPathLoopDescriptor=ConnectionFactory.eINSTANCE.createXmlXPathLoopDescriptor();
      getConnection().getSchema().add(xmlXPathLoopDescriptor);
    }
  }
  loopModel.setXmlXPathLoopDescriptor(xmlXPathLoopDescriptor);
  if (xmlXPathLoopDescriptor.getLimitBoucle() == null) {
    xmlXPathLoopDescriptor.setLimitBoucle(-1);
    XmlArray.setLimitToDefault();
    xmlXPathLoopDescriptor.setLimitBoucle(XmlArray.getRowLimit());
  }
  fieldsModel.setXmlXPathLoopDescriptor(xmlXPathLoopDescriptor.getSchemaTargets());
  fieldsTableEditorView.getTableViewerCreator().layout();
  if (isContextMode()) {
    adaptFormToEditable();
  }
}",0.9865525672371638
127814,"public TreeItem getTreeItem(String absoluteXPath){
  TreeItem[] items=availableXmlTree.getTree().getItems();
  String path=absoluteXPath;
  TreeItem item=null;
  while (!path.isEmpty()) {
    for (    TreeItem curItem : items) {
      if (path.startsWith(""String_Node_Str"" + curItem.getText())) {
        item=curItem;
        path=path.replaceFirst(""String_Node_Str"" + curItem.getText(),""String_Node_Str"");
        break;
      }
    }
    if (!path.isEmpty()) {
      items=item.getItems();
    }
  }
  return item;
}","public TreeItem getTreeItem(String absoluteXPath){
  TreeItem[] items=availableXmlTree.getTree().getItems();
  String path=absoluteXPath;
  TreeItem item=null;
  while (!path.isEmpty()) {
    boolean flag=false;
    for (    TreeItem curItem : items) {
      if (path.startsWith(""String_Node_Str"" + curItem.getText())) {
        flag=true;
        item=curItem;
        path=path.replaceFirst(""String_Node_Str"" + curItem.getText(),""String_Node_Str"");
        break;
      }
    }
    if (!path.isEmpty()) {
      items=item.getItems();
    }
    if (!flag) {
      break;
    }
  }
  return item;
}",0.9059982094897046
127815,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public void setLabel(String newLabel){
  String oldLabel=label;
  label=newLabel;
  setLabel(newLabel);
  if (eNotificationRequired()) {
    eNotify(new ENotificationImpl(this,Notification.SET,ConnectionPackage.ABSTRACT_METADATA_OBJECT__LABEL,oldLabel,label));
  }
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public void setLabel(String newLabel){
  String oldLabel=label;
  label=newLabel;
  if (!StringUtils.isEmpty(newLabel)) {
    setName(newLabel);
  }
  if (eNotificationRequired()) {
    eNotify(new ENotificationImpl(this,Notification.SET,ConnectionPackage.ABSTRACT_METADATA_OBJECT__LABEL,oldLabel,label));
  }
}",0.916323731138546
127816,"@Override public int compare(Viewer viewer,TreePath parentPath,Object e1,Object e2){
  if (e1 instanceof RepositoryNode && e2 instanceof RepositoryNode) {
    final RepositoryNode node1=(RepositoryNode)e1;
    final RepositoryNode node2=(RepositoryNode)e2;
    if (node1.isBin()) {
      return 1;
    }
    if (node2.isBin()) {
      return -1;
    }
    if (node1.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER || node2.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER) {
      return e1.toString().compareTo(e2.toString());
    }
 else     if (viewerSorter != null) {
      if (viewerSorter instanceof TreePathViewerSorter) {
        return ((TreePathViewerSorter)viewerSorter).compare(viewer,parentPath,e1,e2);
      }
 else {
        return viewerSorter.compare(viewer,e1,e2);
      }
    }
  }
  return super.compare(viewer,parentPath,e1,e2);
}","@Override public int compare(Viewer viewer,TreePath parentPath,Object e1,Object e2){
  if (e1 instanceof RepositoryNode && e2 instanceof RepositoryNode) {
    final RepositoryNode node1=(RepositoryNode)e1;
    final RepositoryNode node2=(RepositoryNode)e2;
    if (node1.isBin() || node1.getType().equals(ENodeType.REFERENCED_PROJECT)) {
      return 1;
    }
    if (node2.isBin() || node2.getType().equals(ENodeType.REFERENCED_PROJECT)) {
      return -1;
    }
    if (node1.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER || node2.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER) {
      return e1.toString().compareTo(e2.toString());
    }
 else     if (viewerSorter != null) {
      if (viewerSorter instanceof TreePathViewerSorter) {
        return ((TreePathViewerSorter)viewerSorter).compare(viewer,parentPath,e1,e2);
      }
 else {
        return viewerSorter.compare(viewer,e1,e2);
      }
    }
  }
  return super.compare(viewer,parentPath,e1,e2);
}",0.9388646288209608
127817,"@Override protected void checkSorter(TreeViewer treeViewer){
  ViewerSorter sorter=null;
  if (getRepView() != null) {
    final StructuredViewer viewer=getRepView().getViewer();
    sorter=viewer.getSorter();
  }
  final ViewerSorter viewerSorter=sorter;
  treeViewer.setSorter(new TreePathViewerSorter(){
    @Override public int compare(    Viewer viewer,    TreePath parentPath,    Object e1,    Object e2){
      if (e1 instanceof RepositoryNode && e2 instanceof RepositoryNode) {
        final RepositoryNode node1=(RepositoryNode)e1;
        final RepositoryNode node2=(RepositoryNode)e2;
        if (node1.isBin()) {
          return 1;
        }
        if (node2.isBin()) {
          return -1;
        }
        if (node1.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER || node2.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER) {
          return e1.toString().compareTo(e2.toString());
        }
 else         if (viewerSorter != null) {
          if (viewerSorter instanceof TreePathViewerSorter) {
            return ((TreePathViewerSorter)viewerSorter).compare(viewer,parentPath,e1,e2);
          }
 else {
            return viewerSorter.compare(viewer,e1,e2);
          }
        }
      }
      return super.compare(viewer,parentPath,e1,e2);
    }
  }
);
}","@Override protected void checkSorter(TreeViewer treeViewer){
  ViewerSorter sorter=null;
  if (getRepView() != null) {
    final StructuredViewer viewer=getRepView().getViewer();
    sorter=viewer.getSorter();
  }
  final ViewerSorter viewerSorter=sorter;
  treeViewer.setSorter(new TreePathViewerSorter(){
    @Override public int compare(    Viewer viewer,    TreePath parentPath,    Object e1,    Object e2){
      if (e1 instanceof RepositoryNode && e2 instanceof RepositoryNode) {
        final RepositoryNode node1=(RepositoryNode)e1;
        final RepositoryNode node2=(RepositoryNode)e2;
        if (node1.isBin() || node1.getType().equals(ENodeType.REFERENCED_PROJECT)) {
          return 1;
        }
        if (node2.isBin() || node2.getType().equals(ENodeType.REFERENCED_PROJECT)) {
          return -1;
        }
        if (node1.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER || node2.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER) {
          return e1.toString().compareTo(e2.toString());
        }
 else         if (viewerSorter != null) {
          if (viewerSorter instanceof TreePathViewerSorter) {
            return ((TreePathViewerSorter)viewerSorter).compare(viewer,parentPath,e1,e2);
          }
 else {
            return viewerSorter.compare(viewer,e1,e2);
          }
        }
      }
      return super.compare(viewer,parentPath,e1,e2);
    }
  }
);
}",0.9582089552238806
127818,"@Override public int compare(Viewer viewer,Object e1,Object e2){
  if (e1 instanceof RepositoryNode && e2 instanceof RepositoryNode) {
    final RepositoryNode node1=(RepositoryNode)e1;
    final RepositoryNode node2=(RepositoryNode)e2;
    if (node1.isBin()) {
      return 1;
    }
    if (node2.isBin()) {
      return -1;
    }
    if (node1.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER || node2.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER) {
      return e1.toString().compareTo(e2.toString());
    }
 else {
      return viewerSorter.compare(viewer,e1,e2);
    }
  }
  return super.compare(viewer,e1,e2);
}","@Override public int compare(Viewer viewer,Object e1,Object e2){
  if (e1 instanceof RepositoryNode && e2 instanceof RepositoryNode) {
    final RepositoryNode node1=(RepositoryNode)e1;
    final RepositoryNode node2=(RepositoryNode)e2;
    if (node1.isBin() || node1.getType().equals(ENodeType.REFERENCED_PROJECT)) {
      return 1;
    }
    if (node2.isBin() || node2.getType().equals(ENodeType.REFERENCED_PROJECT)) {
      return -1;
    }
    if (node1.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER || node2.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER) {
      return e1.toString().compareTo(e2.toString());
    }
 else {
      return viewerSorter.compare(viewer,e1,e2);
    }
  }
  return super.compare(viewer,e1,e2);
}",0.9182481751824818
127819,"protected void checkSorter(TreeViewer treeViewer){
  ViewerSorter sorter=null;
  if (getRepView() != null) {
    final StructuredViewer viewer=getRepView().getViewer();
    sorter=viewer.getSorter();
  }
  if (sorter == null) {
    sorter=new RepositoryNameSorter();
  }
  if (sorter != null) {
    final ViewerSorter viewerSorter=sorter;
    treeViewer.setSorter(new ViewerSorter(){
      @Override public int compare(      Viewer viewer,      Object e1,      Object e2){
        if (e1 instanceof RepositoryNode && e2 instanceof RepositoryNode) {
          final RepositoryNode node1=(RepositoryNode)e1;
          final RepositoryNode node2=(RepositoryNode)e2;
          if (node1.isBin()) {
            return 1;
          }
          if (node2.isBin()) {
            return -1;
          }
          if (node1.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER || node2.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER) {
            return e1.toString().compareTo(e2.toString());
          }
 else {
            return viewerSorter.compare(viewer,e1,e2);
          }
        }
        return super.compare(viewer,e1,e2);
      }
    }
);
  }
}","protected void checkSorter(TreeViewer treeViewer){
  ViewerSorter sorter=null;
  if (getRepView() != null) {
    final StructuredViewer viewer=getRepView().getViewer();
    sorter=viewer.getSorter();
  }
  if (sorter == null) {
    sorter=new RepositoryNameSorter();
  }
  if (sorter != null) {
    final ViewerSorter viewerSorter=sorter;
    treeViewer.setSorter(new ViewerSorter(){
      @Override public int compare(      Viewer viewer,      Object e1,      Object e2){
        if (e1 instanceof RepositoryNode && e2 instanceof RepositoryNode) {
          final RepositoryNode node1=(RepositoryNode)e1;
          final RepositoryNode node2=(RepositoryNode)e2;
          if (node1.isBin() || node1.getType().equals(ENodeType.REFERENCED_PROJECT)) {
            return 1;
          }
          if (node2.isBin() || node2.getType().equals(ENodeType.REFERENCED_PROJECT)) {
            return -1;
          }
          if (node1.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER || node2.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER) {
            return e1.toString().compareTo(e2.toString());
          }
 else {
            return viewerSorter.compare(viewer,e1,e2);
          }
        }
        return super.compare(viewer,e1,e2);
      }
    }
);
  }
}",0.9537190082644628
127820,"private void createValidationRules(RepositoryNode recBinNode,RepositoryNode node,final IRepositoryViewObject repObj,org.talend.core.model.metadata.builder.connection.MetadataTable metadataTable,ERepositoryObjectType repositoryObjectType){
  IRepositoryViewObject vo=node.getObject();
  if (vo != null && vo.getProperty() != null) {
    String schema=vo.getProperty().getId();
    schema=schema + ""String_Node_Str"" + metadataTable.getLabel();
    List<IRepositoryViewObject> objs=getValidationRuleObjsFromSchema(schema);
    if (objs.size() > 0) {
      int num=objs.size();
      StringBuffer floderName=new StringBuffer();
      floderName.append(Messages.getString(""String_Node_Str""));
      floderName.append(""String_Node_Str"");
      floderName.append(num);
      floderName.append(""String_Node_Str"");
      RepositoryNode validationRulesNode=new StableRepositoryNode(node,floderName.toString(),ECoreImage.FOLDER_CLOSE_ICON);
      validationRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_VALIDATIONS_RULES_FOLDER);
      node.getChildren().add(validationRulesNode);
      for (      IRepositoryViewObject obj : objs) {
        addNode(validationRulesNode,ERepositoryObjectType.METADATA_VALIDATION_RULES,recBinNode,obj);
      }
    }
  }
}","private void createValidationRules(RepositoryNode recBinNode,RepositoryNode node,final IRepositoryViewObject repObj,org.talend.core.model.metadata.builder.connection.MetadataTable metadataTable,ERepositoryObjectType repositoryObjectType){
  IRepositoryViewObject vo=node.getObject();
  if (vo instanceof MetadataTableRepositoryObject) {
    vo=((MetadataTableRepositoryObject)vo).getViewObject();
  }
  if (vo != null && vo.getProperty() != null) {
    String schema=vo.getProperty().getId();
    schema=schema + ""String_Node_Str"" + metadataTable.getLabel();
    List<IRepositoryViewObject> objs=getValidationRuleObjsFromSchema(schema);
    if (objs.size() > 0) {
      int num=objs.size();
      StringBuffer floderName=new StringBuffer();
      floderName.append(Messages.getString(""String_Node_Str""));
      floderName.append(""String_Node_Str"");
      floderName.append(num);
      floderName.append(""String_Node_Str"");
      RepositoryNode validationRulesNode=new StableRepositoryNode(node,floderName.toString(),ECoreImage.FOLDER_CLOSE_ICON);
      validationRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_VALIDATIONS_RULES_FOLDER);
      node.getChildren().add(validationRulesNode);
      for (      IRepositoryViewObject obj : objs) {
        addNode(validationRulesNode,ERepositoryObjectType.METADATA_VALIDATION_RULES,recBinNode,obj);
      }
    }
  }
}",0.956196181205541
127821,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public void setLabel(String newLabel){
  String oldLabel=label;
  label=newLabel;
  setName(newLabel);
  if (eNotificationRequired()) {
    eNotify(new ENotificationImpl(this,Notification.SET,ConnectionPackage.ABSTRACT_METADATA_OBJECT__LABEL,oldLabel,label));
  }
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public void setLabel(String newLabel){
  String oldLabel=label;
  label=newLabel;
  if (!StringUtils.isEmpty(newLabel)) {
    setName(newLabel);
  }
  if (eNotificationRequired()) {
    eNotify(new ENotificationImpl(this,Notification.SET,ConnectionPackage.ABSTRACT_METADATA_OBJECT__LABEL,oldLabel,label));
  }
}",0.9230769230769232
127822,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public void setLabel(String newLabel){
  String oldLabel=label;
  label=newLabel;
  setName(newLabel);
  if (eNotificationRequired()) {
    eNotify(new ENotificationImpl(this,Notification.SET,ConnectionPackage.ABSTRACT_METADATA_OBJECT__LABEL,oldLabel,label));
  }
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public void setLabel(String newLabel){
  String oldLabel=label;
  label=newLabel;
  if (!StringUtils.isEmpty(newLabel)) {
    setName(newLabel);
  }
  if (eNotificationRequired()) {
    eNotify(new ENotificationImpl(this,Notification.SET,ConnectionPackage.ABSTRACT_METADATA_OBJECT__LABEL,oldLabel,label));
  }
}",0.9230769230769232
127823,"private TableEditor addTableEditor(TableViewerCreatorColumnNotModifiable column,TableEditorContentNotModifiable tableEditorContent,String idProperty,TableItem tableItem){
  if (tableItem.getData() == null) {
    return null;
  }
  tableEditorContent.setLayoutEnabled(true);
  TableEditor tableEditor=tableEditorContent.createTableEditor(tableItem.getParent());
  tableEditorList.add(tableEditor);
  dataToMultipleDataEditor.put(tableItem.getData(),tableEditor);
  Object currentRowObject=tableItem.getData();
  Object value=null;
  if (column.getBeanPropertyAccessors() != null) {
    value=column.getBeanPropertyAccessors().get(tableItem.getData());
  }
 else {
    value=tableViewerCreator.getCellModifier().getValue(currentRowObject,idProperty);
  }
  Control control=tableEditorContent.initialize(tableItem.getParent(),tableEditor,column,currentRowObject,value);
  if (tableItem != null && !tableItem.isDisposed()) {
    tableEditor.setEditor(control,tableItem,column.getIndex());
    fireEvent(new TableEditorManagerEvent(EVENT_TYPE.CONTROL_CREATED,tableEditor));
  }
  return tableEditor;
}","private TableEditor addTableEditor(TableViewerCreatorColumnNotModifiable column,TableEditorContentNotModifiable tableEditorContent,String idProperty,TableItem tableItem){
  if (tableItem.getData() == null) {
    return null;
  }
  if (tableEditorContent == null) {
    return null;
  }
  tableEditorContent.setLayoutEnabled(true);
  TableEditor tableEditor=tableEditorContent.createTableEditor(tableItem.getParent());
  tableEditorList.add(tableEditor);
  dataToMultipleDataEditor.put(tableItem.getData(),tableEditor);
  Object currentRowObject=tableItem.getData();
  Object value=null;
  if (column.getBeanPropertyAccessors() != null) {
    value=column.getBeanPropertyAccessors().get(tableItem.getData());
  }
 else {
    value=tableViewerCreator.getCellModifier().getValue(currentRowObject,idProperty);
  }
  Control control=tableEditorContent.initialize(tableItem.getParent(),tableEditor,column,currentRowObject,value);
  if (tableItem != null && !tableItem.isDisposed()) {
    tableEditor.setEditor(control,tableItem,column.getIndex());
    fireEvent(new TableEditorManagerEvent(EVENT_TYPE.CONTROL_CREATED,tableEditor));
  }
  return tableEditor;
}",0.9746554024010672
127824,"@Override public void updateChildCount(Object element,int currentChildCount){
  int length=0;
  if (element instanceof ATreeNode) {
    ATreeNode node=(ATreeNode)element;
    length=node.getChildren().length;
  }
 else   if (element == elements) {
    length=elements.length;
  }
  viewer.setChildCount(element,length);
}","@Override public void updateChildCount(Object element,int currentChildCount){
  int length=0;
  if (element instanceof ATreeNode) {
    ATreeNode node=(ATreeNode)element;
    length=node.getChildren().length;
  }
 else   if (element == elements) {
    length=elements.length;
  }
  if (length != currentChildCount) {
    viewer.setChildCount(element,length);
  }
}",0.9372262773722628
127825,"/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      LanguageManager.reset();
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.beforeLogon(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      checkProjectCompatibility(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      executeMigrations(project,true,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.logOnProject(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.componentsReset();
      coreService.initializeComponents(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      executeMigrations(project,false,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      coreService.deleteAllJobs(false);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      try {
        coreService.syncAllRoutines();
        coreService.syncAllBeans();
      }
 catch (      SystemException e1) {
      }
      if (PluginChecker.isRulesPluginLoaded()) {
        coreService.syncAllRules();
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.syncLibraries(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        coreService.synchronizeSapLib();
      }
      coreService.resetUniservLibraries();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      description.setAutoBuilding(false);
      try {
        workspace.setDescription(description);
      }
 catch (      CoreException e) {
      }
      coreService.createStatsLogAndImplicitParamter(project);
      coreService.synchronizeMapptingXML();
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      fullLogonFinished=true;
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}","/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      LanguageManager.reset();
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.beforeLogon(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      checkProjectCompatibility(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      executeMigrations(project,true,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.logOnProject(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.componentsReset();
      coreService.initializeComponents(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      executeMigrations(project,false,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      coreService.deleteAllJobs(false);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      try {
        coreService.syncAllRoutines();
        coreService.syncAllBeans();
      }
 catch (      SystemException e1) {
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      if (PluginChecker.isRulesPluginLoaded()) {
        coreService.syncAllRules();
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.syncLibraries(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        coreService.synchronizeSapLib();
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      coreService.resetUniservLibraries();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      description.setAutoBuilding(false);
      try {
        workspace.setDescription(description);
      }
 catch (      CoreException e) {
      }
      coreService.createStatsLogAndImplicitParamter(project);
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      coreService.synchronizeMapptingXML();
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      fullLogonFinished=true;
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}",0.9083160083160084
127826,"@Override public void installModules(String[] jarNames){
  Shell shell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
  ModulesInstaller.installModules(new Shell(shell),jarNames);
}","@Override public void installModules(final String[] jarNames){
  PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
    @Override public void run(){
      Shell shell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
      ModulesInstaller.installModules(new Shell(shell),jarNames);
    }
  }
);
}",0.7047244094488189
127827,"/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      LanguageManager.reset();
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.beforeLogon(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      checkProjectCompatibility(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      executeMigrations(project,true,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.logOnProject(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.componentsReset();
      coreService.initializeComponents(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      executeMigrations(project,false,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      coreService.deleteAllJobs(false);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      try {
        coreService.syncAllRoutines();
        coreService.syncAllBeans();
      }
 catch (      SystemException e1) {
      }
      if (PluginChecker.isRulesPluginLoaded()) {
        coreService.syncAllRules();
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.syncLibraries(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        coreService.synchronizeSapLib();
      }
      coreService.resetUniservLibraries();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      description.setAutoBuilding(false);
      try {
        workspace.setDescription(description);
      }
 catch (      CoreException e) {
      }
      coreService.createStatsLogAndImplicitParamter(project);
      coreService.synchronizeMapptingXML();
      fullLogonFinished=true;
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}","/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      LanguageManager.reset();
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.beforeLogon(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      checkProjectCompatibility(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      executeMigrations(project,true,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.logOnProject(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.componentsReset();
      coreService.initializeComponents(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      executeMigrations(project,false,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      coreService.deleteAllJobs(false);
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      try {
        coreService.syncAllRoutines();
        coreService.syncAllBeans();
      }
 catch (      SystemException e1) {
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      if (PluginChecker.isRulesPluginLoaded()) {
        coreService.syncAllRules();
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.syncLibraries(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        coreService.synchronizeSapLib();
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      coreService.resetUniservLibraries();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      description.setAutoBuilding(false);
      try {
        workspace.setDescription(description);
      }
 catch (      CoreException e) {
      }
      coreService.createStatsLogAndImplicitParamter(project);
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      coreService.synchronizeMapptingXML();
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      fullLogonFinished=true;
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}",0.8821205821205821
127828,"/** 
 * DOC qwei Comment method ""saveProjectf"".
 * @param author
 * @param prj
 * @param project
 * @throws PersistenceException
 */
private void saveProject(IProject prj,Project project) throws PersistenceException {
  Resource projectResource=xmiResourceManager.createProjectResource(prj);
  projectResource.getContents().add(project.getEmfProject());
  projectResource.getContents().add(project.getAuthor());
  projectResource.getContents().add(project.getExchangeUser());
  xmiResourceManager.saveResource(projectResource);
}","/** 
 * DOC qwei Comment method ""saveProjectf"".
 * @param author
 * @param prj
 * @param project
 * @throws PersistenceException
 */
private void saveProject(IProject prj,Project project) throws PersistenceException {
  Resource projectResource=xmiResourceManager.createProjectResource(prj);
  projectResource.getContents().add(project.getEmfProject());
  projectResource.getContents().add(project.getAuthor());
  xmiResourceManager.saveResource(projectResource);
}",0.8430583501006036
127829,"public StartingBrowser(){
}","public StartingBrowser(){
  Image[] images=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell().getImages();
  if (images.length > 0) {
    this.setTitleImage(images[0]);
  }
}",0.2523364485981308
127830,"public StartingBrowser(){
}","public StartingBrowser(){
  Image[] images=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell().getImages();
  if (images.length > 0) {
    this.setTitleImage(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell().getImages()[0]);
  }
}",0.1908127208480565
127831,"@Override public void create(Project project,Item item,IPath path,boolean... isImportItem) throws PersistenceException {
  boolean isOherProcess=false;
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    isOherProcess=handler.isProcess(item);
    if (isOherProcess) {
      break;
    }
  }
  if (isOherProcess || item instanceof ProcessItem) {
    try {
      coreService.checkJob(item.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  checkFileNameAndPath(project,item,RepositoryConstants.getPattern(ERepositoryObjectType.getItemType(item)),path,false,isImportItem);
  this.repositoryFactoryFromProvider.create(project,item,path,isImportItem);
  if (isImportItem.length == 0) {
    fireRepositoryPropertyChange(ERepositoryActionName.CREATE.getName(),null,item);
  }
  if (isImportItem.length > 0 && item instanceof ProcessItem) {
    fireRepositoryPropertyChange(ERepositoryActionName.IMPORT.getName(),null,item);
  }
}","@Override public void create(Project project,Item item,IPath path,boolean... isImportItem) throws PersistenceException {
  boolean isOherProcess=false;
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    isOherProcess=handler.isProcess(item);
    if (isOherProcess) {
      break;
    }
  }
  if (isOherProcess || item instanceof ProcessItem) {
    try {
      coreService.checkJob(item.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  checkFileNameAndPath(project,item,RepositoryConstants.getPattern(ERepositoryObjectType.getItemType(item)),path,false,isImportItem);
  this.repositoryFactoryFromProvider.create(project,item,path,isImportItem);
  if (isImportItem.length == 0) {
    fireRepositoryPropertyChange(ERepositoryActionName.CREATE.getName(),null,item);
  }
  if (isImportItem.length > 0 && isImportItem[0]) {
    fireRepositoryPropertyChange(ERepositoryActionName.IMPORT.getName(),null,item);
  }
}",0.981203007518797
127832,"public StartingBrowser(){
}","public StartingBrowser(){
  Image[] images=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell().getImages();
  if (images.length > 0) {
    this.setTitleImage(images[0]);
  }
}",0.2523364485981308
127833,"@Override public void create(Project project,Item item,IPath path,boolean... isImportItem) throws PersistenceException {
  boolean isOherProcess=false;
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    isOherProcess=handler.isProcess(item);
    if (isOherProcess) {
      break;
    }
  }
  if (isOherProcess || item instanceof ProcessItem) {
    try {
      coreService.checkJob(item.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  checkFileNameAndPath(project,item,RepositoryConstants.getPattern(ERepositoryObjectType.getItemType(item)),path,false,isImportItem);
  this.repositoryFactoryFromProvider.create(project,item,path,isImportItem);
  if (isImportItem.length == 0) {
    fireRepositoryPropertyChange(ERepositoryActionName.CREATE.getName(),null,item);
  }
}","@Override public void create(Project project,Item item,IPath path,boolean... isImportItem) throws PersistenceException {
  boolean isOherProcess=false;
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    isOherProcess=handler.isProcess(item);
    if (isOherProcess) {
      break;
    }
  }
  if (isOherProcess || item instanceof ProcessItem) {
    try {
      coreService.checkJob(item.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  checkFileNameAndPath(project,item,RepositoryConstants.getPattern(ERepositoryObjectType.getItemType(item)),path,false,isImportItem);
  this.repositoryFactoryFromProvider.create(project,item,path,isImportItem);
  if (isImportItem.length == 0) {
    fireRepositoryPropertyChange(ERepositoryActionName.CREATE.getName(),null,item);
  }
  if (isImportItem.length > 0 && item instanceof ProcessItem) {
    fireRepositoryPropertyChange(ERepositoryActionName.IMPORT.getName(),null,item);
  }
}",0.9235412474849096
127834,"/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else     if (EDatabaseConnTemplate.MYSQL.getDBDisplayName().equals(databaseType)) {
      if (dbVersionString != null) {
        return dbVersionString.toUpperCase();
      }
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (EDatabaseConnTemplate.ORACLE_OCI.getDBDisplayName().equals(databaseType) || EDatabaseConnTemplate.ORACLE_RAC.getDBDisplayName().equals(databaseType) || EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName().equals(databaseType)|| EDatabaseConnTemplate.ORACLESN.getDBDisplayName().equals(databaseType)) {
        if (dbVersionString != null) {
          driverValue=dbVersionString.toUpperCase();
        }
      }
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else       if (EDatabaseTypeName.VERTICA.getXmlName().equals(databaseType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersionString)) {
        return ""String_Node_Str"";
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      if (url != null) {
        String h2Prefix=""String_Node_Str"";
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          if (path.split(""String_Node_Str"").length > 2) {
            int startIndex=path.lastIndexOf(""String_Node_Str"") - 1;
            String filePath=path.substring(startIndex);
            h2Prefix+=path.substring(0,startIndex);
            path=filePath;
          }
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
        }
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((databaseType).equals(EDatabaseTypeName.HBASE.getDisplayName())) {
      return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
    }
 else {
      return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.HIVE_SERVER_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CUSTOM_JARS);
  }
  if (value.equals(EParameterNameForComponent.PARA_NAME_FS_DEFAULT_NAME.getName())) {
    String nameNodeURL=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    if (nameNodeURL == null && (databaseType).equals(EDatabaseTypeName.HBASE.getDisplayName())) {
      return nameNodeURL;
    }
 else     if (isContextMode(connection,nameNodeURL)) {
      return nameNodeURL;
    }
 else {
      return TalendQuoteUtils.addQuotes(nameNodeURL);
    }
  }
  if (value.equals(EParameterNameForComponent.PARA_NAME_MAPRED_JT.getName())) {
    String jobTrackerURL=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    if (isContextMode(connection,jobTrackerURL)) {
      return jobTrackerURL;
    }
 else {
      return TalendQuoteUtils.addQuotes(jobTrackerURL);
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return false;
  }
  if (value.equals(""String_Node_Str"")) {
    return true;
  }
  if (value.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    String useKrbValue=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_KRB);
    if (useKrbValue == null) {
      return useKrbValue;
    }
 else {
      return Boolean.parseBoolean(useKrbValue);
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String mapredJobTracker=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    if (mapredJobTracker == null) {
      return mapredJobTracker;
    }
 else {
      return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(mapredJobTracker));
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String nameNodePrincipal=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_PRINCIPAL);
    if (nameNodePrincipal == null) {
      return nameNodePrincipal;
    }
 else {
      return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(nameNodePrincipal));
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String jobTrackerPrincipal=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_PRINCIPAL);
    if (jobTrackerPrincipal == null) {
      return jobTrackerPrincipal;
    }
 else {
      return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(jobTrackerPrincipal));
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  return null;
}","/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else     if (EDatabaseConnTemplate.MYSQL.getDBDisplayName().equals(databaseType)) {
      if (dbVersionString != null) {
        return dbVersionString.toUpperCase();
      }
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (EDatabaseConnTemplate.ORACLE_OCI.getDBDisplayName().equals(databaseType) || EDatabaseConnTemplate.ORACLE_RAC.getDBDisplayName().equals(databaseType) || EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName().equals(databaseType)|| EDatabaseConnTemplate.ORACLESN.getDBDisplayName().equals(databaseType)) {
        if (dbVersionString != null) {
          driverValue=dbVersionString.toUpperCase();
        }
      }
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else       if (EDatabaseTypeName.VERTICA.getXmlName().equals(databaseType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersionString)) {
        return ""String_Node_Str"";
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      if (url != null) {
        String h2Prefix=""String_Node_Str"";
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          if (path.split(""String_Node_Str"").length > 2) {
            int startIndex=path.lastIndexOf(""String_Node_Str"") - 1;
            String filePath=path.substring(startIndex);
            h2Prefix+=path.substring(0,startIndex);
            path=filePath;
          }
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
        }
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((databaseType).equals(EDatabaseTypeName.HBASE.getDisplayName())) {
      return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
    }
 else {
      return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.HIVE_SERVER_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CUSTOM_JARS);
  }
  if (value.equals(EParameterNameForComponent.PARA_NAME_FS_DEFAULT_NAME.getName())) {
    String nameNodeURL=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    if (nameNodeURL == null && (databaseType).equals(EDatabaseTypeName.HBASE.getDisplayName())) {
      return nameNodeURL;
    }
 else     if (isContextMode(connection,nameNodeURL)) {
      return nameNodeURL;
    }
 else {
      return TalendQuoteUtils.addQuotes(nameNodeURL);
    }
  }
  if (value.equals(EParameterNameForComponent.PARA_NAME_MAPRED_JT.getName())) {
    String jobTrackerURL=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    if (isContextMode(connection,jobTrackerURL)) {
      return jobTrackerURL;
    }
 else {
      return TalendQuoteUtils.addQuotes(jobTrackerURL);
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return false;
  }
  if (value.equals(""String_Node_Str"")) {
    return true;
  }
  if (value.equals(""String_Node_Str"") || value.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    String useKrbValue=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_KRB);
    if (useKrbValue == null) {
      return useKrbValue;
    }
 else {
      return Boolean.parseBoolean(useKrbValue);
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String mapredJobTracker=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    if (mapredJobTracker == null) {
      return mapredJobTracker;
    }
 else {
      return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(mapredJobTracker));
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String nameNodePrincipal=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_PRINCIPAL);
    if (nameNodePrincipal == null) {
      return nameNodePrincipal;
    }
 else {
      return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(nameNodePrincipal));
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String jobTrackerPrincipal=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_PRINCIPAL);
    if (jobTrackerPrincipal == null) {
      return jobTrackerPrincipal;
    }
 else {
      return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(jobTrackerPrincipal));
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  return null;
}",0.9988659559990928
127835,"public void execute(RepositoryNode sourceNode,RepositoryNode targetNode) throws Exception {
  if (!validateAction(sourceNode,targetNode)) {
    return;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
    targetNode=targetNode.getParent();
  }
  final IPath path=RepositoryNodeUtilities.getPath(targetNode);
  if (sourceNode.getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
    final Item originalItem=sourceNode.getObject().getProperty().getItem();
    List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
    if (allVersion.size() == 1) {
      copySingleVersionItem(originalItem,path);
    }
 else     if (allVersion.size() > 1) {
      PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
      if (dialog.open() == Window.OK) {
        final Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          IProgressMonitor monitor) throws CoreException {
            String id=null;
            String label=null;
            boolean isfirst=true;
            boolean needSys=true;
            for (            IRepositoryViewObject object : selectedVersionItems) {
              Item selectedItem=object.getProperty().getItem();
              try {
                Item copy=null;
                if (isfirst) {
                  copy=factory.copy(selectedItem,path);
                  id=copy.getProperty().getId();
                  label=copy.getProperty().getLabel();
                  isfirst=false;
                }
 else {
                  copy=factory.copy(selectedItem,path,label);
                }
                copy.getProperty().setId(id);
                if (needSys && originalItem instanceof RoutineItem) {
                  String lastestVersion=getLastestVersion(selectedVersionItems);
                  if (lastestVersion.equals(copy.getProperty().getVersion())) {
                    synDuplicatedRoutine((RoutineItem)copy,selectedItem.getProperty().getLabel());
                    needSys=false;
                  }
                }
                if (copy instanceof ProcessItem) {
                  RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                }
                factory.save(copy);
              }
 catch (              PersistenceException e) {
                ExceptionHandler.process(e);
              }
catch (              BusinessException e) {
                ExceptionHandler.process(e);
              }
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          @Override public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
      }
    }
  }
}","public void execute(RepositoryNode sourceNode,RepositoryNode targetNode) throws Exception {
  if (!validateAction(sourceNode,targetNode)) {
    return;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
    targetNode=targetNode.getParent();
  }
  final IPath path=RepositoryNodeUtilities.getPath(targetNode);
  if (sourceNode.getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
    final Item originalItem=sourceNode.getObject().getProperty().getItem();
    List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
    if (allVersion.size() == 1) {
      copySingleVersionItem(originalItem,path);
    }
 else     if (allVersion.size() > 1) {
      PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
      if (dialog.open() == Window.OK) {
        final Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          IProgressMonitor monitor) throws CoreException {
            try {
              Iterator<IRepositoryViewObject> iterator=selectedVersionItems.iterator();
              while (iterator.hasNext()) {
                IRepositoryViewObject repObj=iterator.next();
                Item selectedItem=repObj.getProperty().getItem();
                if (!iterator.hasNext() && isHadoopClusterItem(selectedItem)) {
                  copyHadoopClusterItem(selectedItem,path);
                  return;
                }
              }
              String id=null;
              String label=null;
              boolean isfirst=true;
              boolean needSys=true;
              for (              IRepositoryViewObject object : selectedVersionItems) {
                Item selectedItem=object.getProperty().getItem();
                Item copy=null;
                if (isfirst) {
                  copy=factory.copy(selectedItem,path);
                  id=copy.getProperty().getId();
                  label=copy.getProperty().getLabel();
                  isfirst=false;
                }
 else {
                  copy=factory.copy(selectedItem,path,label);
                }
                copy.getProperty().setId(id);
                if (needSys && originalItem instanceof RoutineItem) {
                  String lastestVersion=getLastestVersion(selectedVersionItems);
                  if (lastestVersion.equals(copy.getProperty().getVersion())) {
                    synDuplicatedRoutine((RoutineItem)copy,selectedItem.getProperty().getLabel());
                    needSys=false;
                  }
                }
                if (copy instanceof ProcessItem) {
                  RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                }
                factory.save(copy);
              }
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
catch (            BusinessException e) {
              ExceptionHandler.process(e);
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          @Override public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
      }
    }
  }
}",0.8840869681205815
127836,"private void copySingleVersionItem(final Item item,final IPath path){
  final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
    @Override protected void run() throws LoginException, PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          try {
            Item newItem=factory.copy(item,path,true);
            if (newItem instanceof RoutineItem) {
              synDuplicatedRoutine((RoutineItem)newItem,item.getProperty().getLabel());
            }
            ICamelDesignerCoreService service=null;
            if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
              service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
            }
            if (service != null && service.isInstanceofCamelBeans(item)) {
              synDuplicatedBean(newItem);
            }
            if (newItem instanceof ProcessItem || newItem instanceof JobletProcessItem) {
              RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
            }
            if (newItem instanceof ConnectionItem) {
              ConnectionItem connectionItem=(ConnectionItem)newItem;
              connectionItem.getConnection().getSupplierDependency().clear();
            }
            factory.save(newItem);
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
      }
;
      IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
        @Override public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          IWorkspace workspace=ResourcesPlugin.getWorkspace();
          try {
            ISchedulingRule schedulingRule=workspace.getRoot();
            workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
          }
 catch (          CoreException e) {
            throw new InvocationTargetException(e);
          }
        }
      }
;
      try {
        new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
      }
 catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
catch (      InterruptedException e) {
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  factory.executeRepositoryWorkUnit(workUnit);
}","private void copySingleVersionItem(final Item item,final IPath path){
  final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
    @Override protected void run() throws LoginException, PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          try {
            if (isHadoopClusterItem(item)) {
              copyHadoopClusterItem(item,path);
              return;
            }
            Item newItem=factory.copy(item,path,true);
            if (newItem instanceof RoutineItem) {
              synDuplicatedRoutine((RoutineItem)newItem,item.getProperty().getLabel());
            }
            ICamelDesignerCoreService service=null;
            if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
              service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
            }
            if (service != null && service.isInstanceofCamelBeans(item)) {
              synDuplicatedBean(newItem);
            }
            if (newItem instanceof ProcessItem || newItem instanceof JobletProcessItem) {
              RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
            }
            if (newItem instanceof ConnectionItem) {
              ConnectionItem connectionItem=(ConnectionItem)newItem;
              connectionItem.getConnection().getSupplierDependency().clear();
            }
            factory.save(newItem);
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
      }
;
      IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
        @Override public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          IWorkspace workspace=ResourcesPlugin.getWorkspace();
          try {
            ISchedulingRule schedulingRule=workspace.getRoot();
            workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
          }
 catch (          CoreException e) {
            throw new InvocationTargetException(e);
          }
        }
      }
;
      try {
        new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
      }
 catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
catch (      InterruptedException e) {
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  factory.executeRepositoryWorkUnit(workUnit);
}",0.9748684979544128
127837,"private void createOperation(final String newJobName,final RepositoryNode target,CopyObjectAction copyObjectAction,final TreeSelection selectionInClipboard){
  Object currentSource=selectionInClipboard.toArray()[0];
  try {
    final IPath path=RepositoryNodeUtilities.getPath(target);
    if (((RepositoryNode)currentSource).getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
      Item originalItem=((RepositoryNode)currentSource).getObject().getProperty().getItem();
      List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
      for (      IRepositoryViewObject obj : allVersion) {
        if (obj.getVersion().equals(originalItem.getProperty().getVersion())) {
          originalItem=obj.getProperty().getItem();
          break;
        }
      }
      if (allVersion.size() == 1) {
        duplicateSingleVersionItem(originalItem,path,newJobName);
      }
 else       if (allVersion.size() > 1) {
        final PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
        final Item item=originalItem;
        if (dialog.open() == Window.OK) {
          final IWorkspaceRunnable op=new IWorkspaceRunnable(){
            @Override public void run(            IProgressMonitor monitor) throws CoreException {
              Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
              String id=null;
              boolean isfirst=true;
              boolean needSys=true;
              try {
                for (                IRepositoryViewObject object : selectedVersionItems) {
                  Item selectedItem=object.getProperty().getItem();
                  Item copy;
                  copy=factory.copy(selectedItem,path,newJobName);
                  if (isfirst) {
                    id=copy.getProperty().getId();
                    isfirst=false;
                  }
                  copy.getProperty().setId(id);
                  if (needSys && item instanceof RoutineItem) {
                    String lastestVersion=getLastestVersion(selectedVersionItems);
                    if (lastestVersion.equals(copy.getProperty().getVersion())) {
                      synDuplicatedRoutine((RoutineItem)copy,selectedItem.getProperty().getLabel());
                      needSys=false;
                    }
                  }
                  if (copy instanceof ProcessItem) {
                    RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                  }
                  if (copy instanceof ConnectionItem) {
                    Connection connection=((ConnectionItem)copy).getConnection();
                    if (connection != null) {
                      connection.getSupplierDependency().clear();
                      connection.setLabel(newJobName);
                      connection.setName(newJobName);
                    }
                  }
                  factory.save(copy);
                  notifySQLExplorer(copy);
                }
              }
 catch (              PersistenceException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
catch (              BusinessException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
            }
          }
;
          IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
            @Override public void run(            IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
              IWorkspace workspace=ResourcesPlugin.getWorkspace();
              try {
                ISchedulingRule schedulingRule=workspace.getRoot();
                workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
              }
 catch (              CoreException e) {
                throw new InvocationTargetException(e);
              }
            }
          }
;
          try {
            new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
catch (          InterruptedException e) {
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","private void createOperation(final String newJobName,final RepositoryNode target,CopyObjectAction copyObjectAction,final TreeSelection selectionInClipboard){
  Object currentSource=selectionInClipboard.toArray()[0];
  try {
    final IPath path=RepositoryNodeUtilities.getPath(target);
    if (((RepositoryNode)currentSource).getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
      Item originalItem=((RepositoryNode)currentSource).getObject().getProperty().getItem();
      List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
      for (      IRepositoryViewObject obj : allVersion) {
        if (obj.getVersion().equals(originalItem.getProperty().getVersion())) {
          originalItem=obj.getProperty().getItem();
          break;
        }
      }
      if (allVersion.size() == 1) {
        duplicateSingleVersionItem(originalItem,path,newJobName);
      }
 else       if (allVersion.size() > 1) {
        final PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
        final Item item=originalItem;
        if (dialog.open() == Window.OK) {
          final Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
          final IWorkspaceRunnable op=new IWorkspaceRunnable(){
            @Override public void run(            IProgressMonitor monitor) throws CoreException {
              try {
                Iterator<IRepositoryViewObject> iterator=selectedVersionItems.iterator();
                while (iterator.hasNext()) {
                  IRepositoryViewObject repObj=iterator.next();
                  Item selectedItem=repObj.getProperty().getItem();
                  if (!iterator.hasNext() && isHadoopClusterItem(selectedItem)) {
                    copyHadoopClusterItem(selectedItem,path,newJobName);
                    return;
                  }
                }
                String id=null;
                boolean isfirst=true;
                boolean needSys=true;
                for (                IRepositoryViewObject object : selectedVersionItems) {
                  Item selectedItem=object.getProperty().getItem();
                  Item copy;
                  copy=factory.copy(selectedItem,path,newJobName);
                  if (isfirst) {
                    id=copy.getProperty().getId();
                    isfirst=false;
                  }
                  copy.getProperty().setId(id);
                  if (needSys && item instanceof RoutineItem) {
                    String lastestVersion=getLastestVersion(selectedVersionItems);
                    if (lastestVersion.equals(copy.getProperty().getVersion())) {
                      synDuplicatedRoutine((RoutineItem)copy,selectedItem.getProperty().getLabel());
                      needSys=false;
                    }
                  }
                  if (copy instanceof ProcessItem) {
                    RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                  }
                  if (copy instanceof ConnectionItem) {
                    Connection connection=((ConnectionItem)copy).getConnection();
                    if (connection != null) {
                      connection.getSupplierDependency().clear();
                      connection.setLabel(newJobName);
                      connection.setName(newJobName);
                    }
                  }
                  factory.save(copy);
                  notifySQLExplorer(copy);
                }
              }
 catch (              PersistenceException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
catch (              BusinessException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
            }
          }
;
          IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
            @Override public void run(            IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
              IWorkspace workspace=ResourcesPlugin.getWorkspace();
              try {
                ISchedulingRule schedulingRule=workspace.getRoot();
                workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
              }
 catch (              CoreException e) {
                throw new InvocationTargetException(e);
              }
            }
          }
;
          try {
            new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
catch (          InterruptedException e) {
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9075431034482758
127838,"private void duplicateSingleVersionItem(final Item item,final IPath path,final String newName){
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        final Item newItem=factory.copy(item,path,newName);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem,item.getProperty().getLabel());
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
        }
        if (newItem instanceof ConnectionItem) {
          Connection connection=((ConnectionItem)newItem).getConnection();
          if (connection != null) {
            connection.setLabel(newName);
            connection.setName(newName);
            connection.getSupplierDependency().clear();
          }
        }
        factory.save(newItem);
        notifySQLExplorer(newItem);
      }
 catch (      PersistenceException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
catch (      BusinessException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}","private void duplicateSingleVersionItem(final Item item,final IPath path,final String newName){
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        if (isHadoopClusterItem(item)) {
          copyHadoopClusterItem(item,path,newName);
          return;
        }
        final Item newItem=factory.copy(item,path,newName);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem,item.getProperty().getLabel());
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
        }
        if (newItem instanceof ConnectionItem) {
          Connection connection=((ConnectionItem)newItem).getConnection();
          if (connection != null) {
            connection.setLabel(newName);
            connection.setName(newName);
            connection.getSupplierDependency().clear();
          }
        }
        factory.save(newItem);
        notifySQLExplorer(newItem);
      }
 catch (      PersistenceException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
catch (      BusinessException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}",0.9753111609875535
127839,public void removeHadoopDbParameters(DatabaseConnection connection);,"/** 
 * DOC ycbai Comment method ""removeHadoopDbParameters"".
 * @param connection
 */
public void removeHadoopDbParameters(DatabaseConnection connection);",0.6126126126126126
127840,"@Override public void create(Project project,Item item,IPath path,boolean... isImportItem) throws PersistenceException {
  boolean isOherProcess=false;
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    isOherProcess=handler.isProcess(item);
    if (isOherProcess) {
      break;
    }
  }
  if (isOherProcess || item instanceof ProcessItem) {
    try {
      coreService.checkJob(item.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  checkFileNameAndPath(project,item,RepositoryConstants.getPattern(ERepositoryObjectType.getItemType(item)),path,false,isImportItem);
  this.repositoryFactoryFromProvider.create(project,item,path,isImportItem);
  if (isImportItem.length == 0) {
    fireRepositoryPropertyChange(ERepositoryActionName.CREATE.getName(),null,item);
  }
  if (isImportItem.length > 0 && isImportItem[0]) {
    fireRepositoryPropertyChange(ERepositoryActionName.IMPORT.getName(),null,item);
  }
}","@Override public void create(Project project,Item item,IPath path,boolean... isImportItem) throws PersistenceException {
  boolean isOherProcess=false;
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    isOherProcess=handler.isProcess(item);
    if (isOherProcess) {
      break;
    }
  }
  if (isOherProcess || item instanceof ProcessItem) {
    try {
      coreService.checkJob(item.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  checkFileNameAndPath(project,item,RepositoryConstants.getPattern(ERepositoryObjectType.getItemType(item)),path,false,isImportItem);
  this.repositoryFactoryFromProvider.create(project,item,path,isImportItem);
  if (isImportItem.length == 0 || !isImportItem[0]) {
    fireRepositoryPropertyChange(ERepositoryActionName.CREATE.getName(),null,item);
  }
  if (isImportItem.length > 0 && isImportItem[0]) {
    fireRepositoryPropertyChange(ERepositoryActionName.IMPORT.getName(),null,item);
  }
}",0.9906367041198502
127841,"private static IMetadataTable convert(MetadataTable old){
  ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
  IMetadataTable result=new org.talend.core.model.metadata.MetadataTable();
  result.setComment(old.getComment());
  result.setId(old.getId());
  result.setLabel(old.getLabel());
  String sourceName=old.getName();
  if (sourceName == null) {
    sourceName=old.getLabel();
  }
  result.setTableName(sourceName);
  List<IMetadataColumn> columns=new ArrayList<IMetadataColumn>(old.getColumns().size());
  for (  Object o : old.getColumns()) {
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=(org.talend.core.model.metadata.builder.connection.MetadataColumn)o;
    IMetadataColumn newColumn=new org.talend.core.model.metadata.MetadataColumn();
    columns.add(newColumn);
    newColumn.setComment(column.getComment());
    newColumn.setDefault(column.getDefaultValue());
    newColumn.setKey(column.isKey());
    String label2=column.getLabel();
    if (coreService != null) {
      if (coreService.isKeyword(label2)) {
        label2=""String_Node_Str"" + label2;
      }
    }
    newColumn.setLabel(label2);
    newColumn.setPattern(column.getPattern());
    if (column.getLength() < 0) {
      newColumn.setLength(null);
    }
 else {
      newColumn.setLength(Long.valueOf(column.getLength()).intValue());
    }
    if (column.getOriginalLength() < 0) {
      newColumn.setOriginalLength(null);
    }
 else {
      newColumn.setOriginalLength(Long.valueOf(column.getOriginalLength()).intValue());
    }
    if (column.getTaggedValue().size() > 0) {
      for (      TaggedValue tv : column.getTaggedValue()) {
        String additionalTag=tv.getTag();
        if (additionalTag.startsWith(""String_Node_Str"")) {
          String[] splits=additionalTag.split(""String_Node_Str"");
          additionalTag=splits[1];
        }
        newColumn.getAdditionalField().put(additionalTag,tv.getValue());
      }
    }
    newColumn.setNullable(column.isNullable());
    if (column.getPrecision() < 0) {
      newColumn.setPrecision(null);
    }
 else {
      newColumn.setPrecision(Long.valueOf(column.getPrecision()).intValue());
    }
    newColumn.setTalendType(column.getTalendType());
    newColumn.setType(column.getSourceType());
    if (column.getName() == null || column.getName().equals(""String_Node_Str"")) {
      String label=label2;
      if (label != null && label.length() > 0) {
        String substring=label.substring(1);
        if (coreService != null) {
          if (label.startsWith(""String_Node_Str"") && coreService.isKeyword(substring)) {
            label=substring;
          }
        }
      }
      newColumn.setOriginalDbColumnName(label);
    }
 else {
      newColumn.setOriginalDbColumnName(column.getName());
    }
  }
  result.setListColumns(columns);
  Map<String,String> newProperties=result.getAdditionalProperties();
  EMap<String,String> oldProperties=old.getAdditionalProperties();
  for (Iterator<Entry<String,String>> iterator=oldProperties.iterator(); iterator.hasNext(); ) {
    Entry<String,String> entry=iterator.next();
    newProperties.put(entry.getKey(),entry.getValue());
  }
  return result;
}","private static IMetadataTable convert(MetadataTable old){
  ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
  IMetadataTable result=new org.talend.core.model.metadata.MetadataTable();
  result.setComment(old.getComment());
  result.setId(old.getId());
  result.setLabel(old.getLabel());
  String sourceName=old.getName();
  if (sourceName == null) {
    sourceName=old.getLabel();
  }
  result.setTableName(sourceName);
  List<IMetadataColumn> columns=new ArrayList<IMetadataColumn>(old.getColumns().size());
  for (  Object o : old.getColumns()) {
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=(org.talend.core.model.metadata.builder.connection.MetadataColumn)o;
    IMetadataColumn newColumn=new org.talend.core.model.metadata.MetadataColumn();
    columns.add(newColumn);
    newColumn.setComment(column.getComment());
    newColumn.setDefault(column.getDefaultValue());
    newColumn.setKey(column.isKey());
    String label2=column.getLabel();
    if (coreService != null) {
      if (coreService.isKeyword(label2)) {
        label2=""String_Node_Str"" + label2;
      }
    }
    newColumn.setLabel(label2);
    newColumn.setPattern(column.getPattern());
    if (column.getLength() < 0) {
      newColumn.setLength(null);
    }
 else {
      newColumn.setLength(Long.valueOf(column.getLength()).intValue());
    }
    if (column.getOriginalLength() < 0) {
      newColumn.setOriginalLength(null);
    }
 else {
      newColumn.setOriginalLength(Long.valueOf(column.getOriginalLength()).intValue());
    }
    if (column.getTaggedValue().size() > 0) {
      for (      TaggedValue tv : column.getTaggedValue()) {
        String additionalTag=tv.getTag();
        if (additionalTag.startsWith(""String_Node_Str"")) {
          String[] splits=additionalTag.split(""String_Node_Str"");
          additionalTag=splits[1];
        }
        newColumn.getAdditionalField().put(additionalTag,tv.getValue());
      }
    }
    newColumn.setNullable(column.isNullable());
    if (column.getPrecision() < 0) {
      newColumn.setPrecision(null);
    }
 else {
      newColumn.setPrecision(Long.valueOf(column.getPrecision()).intValue());
    }
    newColumn.setTalendType(column.getTalendType());
    newColumn.setType(column.getSourceType());
    if (column.getName() == null || column.getName().equals(""String_Node_Str"")) {
      String label=label2;
      if (label != null && label.length() > 0) {
        String substring=label.substring(1);
        if (coreService != null) {
          if (label.startsWith(""String_Node_Str"") && coreService.isKeyword(substring)) {
            label=substring;
          }
        }
      }
      newColumn.setOriginalDbColumnName(label);
    }
 else {
      newColumn.setOriginalDbColumnName(column.getName());
    }
  }
  result.setListColumns(columns);
  Map<String,String> newProperties=result.getAdditionalProperties();
  EMap<String,String> oldProperties=old.getAdditionalProperties();
  for (  Entry<String,String> entry : oldProperties) {
    newProperties.put(entry.getKey(),entry.getValue());
  }
  return result;
}",0.98242861625353
127842,"public void handleEvent(ModifiedBeanEvent<IMetadataColumn> event){
  if ((inputMetaTable != null) && outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
    MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
    outputMetaView.getTableViewerCreator().refresh();
  }
  if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
    IMetadataColumn modifiedObject=event.bean;
    if (modifiedObject != null) {
      String originalLabel=changedNameColumns.get(modifiedObject);
      if (originalLabel == null) {
        changedNameColumns.put(modifiedObject,(String)event.previousValue);
        changeNameInColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
      }
    }
  }
  if (AbstractMetadataTableEditorView.ID_COLUMN_USEFUL.equals(event.column.getId())) {
    isUsefulChange=true;
  }
}","@Override public void handleEvent(ModifiedBeanEvent<IMetadataColumn> event){
  if ((inputMetaTable != null) && outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
    MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
    outputMetaView.getTableViewerCreator().refresh();
  }
  if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
    IMetadataColumn modifiedObject=event.bean;
    if (modifiedObject != null) {
      String originalLabel=changedNameColumns.get(modifiedObject);
      if (originalLabel == null) {
        changedNameColumns.put(modifiedObject,(String)event.previousValue);
        changeNameInColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
      }
    }
  }
  if (AbstractMetadataTableEditorView.ID_COLUMN_USEFUL.equals(event.column.getId())) {
    isUsefulChange=true;
  }
}",0.9943374858437146
127843,"@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  MetadataTableEditor metadataTableEditor;
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    if (isRepository(outputNode)) {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput,true);
    }
 else {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput);
    }
    outputMetaView=new DialogMetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    if (outputNode != null && outputNode.getComponent() != null && outputNode.getComponent().getPaletteType() != null && outputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      outputMetaView.setMapreduce(true);
    }
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    metadataTableEditor=new MetadataTableEditor(inputMetaTable,titleInput);
    inputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getLeftComposite(),SWT.NONE,metadataTableEditor,inputReadOnly,true,true,false);
    if (inputNode != null && inputNode.getComponent() != null && inputNode.getComponent().getPaletteType() != null && inputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      inputMetaView.setMapreduce(true);
    }
    initializeMetadataTableView(inputMetaView,inputNode,inputMetaTable);
    inputMetaView.initGraphicComponents();
    inputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    inputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,36).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getInputMetaData(),getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    Button copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getOutputMetaData(),getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    MetadataTableEditor metadataTableEditorForOutput;
    if (isRepository(outputNode)) {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"",true);
    }
 else {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"");
    }
    outputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getRightComposite(),SWT.NONE,metadataTableEditorForOutput,outputReadOnly,true,true,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    outputMetaView.getMetadataTableEditor().addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
      public void handleEvent(      ModifiedBeanEvent<IMetadataColumn> event){
        if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
          IMetadataColumn modifiedObject=event.bean;
          if (modifiedObject != null) {
            String originalLabel=changeNameOutColumns.get(modifiedObject);
            if (originalLabel == null) {
              changeNameOutColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
            }
          }
        }
      }
    }
);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      copyToOutput.setEnabled(false);
      copySelectionToOutput.setEnabled(false);
    }
    compositesSachForm.setGridDatas();
    CustomTableManager.addCustomManagementToTable(inputMetaView,inputReadOnly);
    CustomTableManager.addCustomManagementToToolBar(inputMetaView,inputMetaTable,inputReadOnly,outputMetaView,outputMetaTable,outputNode.getComponent().isSchemaAutoPropagated());
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,inputMetaView,inputMetaTable,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if ((inputMetaTable != null) && outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
            changeNameInColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
          }
        }
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_USEFUL.equals(event.column.getId())) {
        isUsefulChange=true;
      }
    }
  }
);
  return composite;
}","@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  MetadataTableEditor metadataTableEditor;
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    if (isRepository(outputNode)) {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput,true);
    }
 else {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput);
    }
    outputMetaView=new DialogMetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    if (outputNode != null && outputNode.getComponent() != null && outputNode.getComponent().getPaletteType() != null && outputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      outputMetaView.setMapreduce(true);
    }
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    metadataTableEditor=new MetadataTableEditor(inputMetaTable,titleInput);
    inputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getLeftComposite(),SWT.NONE,metadataTableEditor,inputReadOnly,true,true,false);
    if (inputNode != null && inputNode.getComponent() != null && inputNode.getComponent().getPaletteType() != null && inputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      inputMetaView.setMapreduce(true);
    }
    initializeMetadataTableView(inputMetaView,inputNode,inputMetaTable);
    inputMetaView.initGraphicComponents();
    inputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    inputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,36).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getInputMetaData(),getOutputMetaData(),true);
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    Button copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getOutputMetaData(),getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    MetadataTableEditor metadataTableEditorForOutput;
    if (isRepository(outputNode)) {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"",true);
    }
 else {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"");
    }
    outputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getRightComposite(),SWT.NONE,metadataTableEditorForOutput,outputReadOnly,true,true,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    outputMetaView.getMetadataTableEditor().addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
      @Override public void handleEvent(      ModifiedBeanEvent<IMetadataColumn> event){
        if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
          IMetadataColumn modifiedObject=event.bean;
          if (modifiedObject != null) {
            String originalLabel=changeNameOutColumns.get(modifiedObject);
            if (originalLabel == null) {
              changeNameOutColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
            }
          }
        }
      }
    }
);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      copyToOutput.setEnabled(false);
      copySelectionToOutput.setEnabled(false);
    }
    compositesSachForm.setGridDatas();
    CustomTableManager.addCustomManagementToTable(inputMetaView,inputReadOnly);
    CustomTableManager.addCustomManagementToToolBar(inputMetaView,inputMetaTable,inputReadOnly,outputMetaView,outputMetaTable,outputNode.getComponent().isSchemaAutoPropagated());
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,inputMetaView,inputMetaTable,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    @Override public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if ((inputMetaTable != null) && outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
            changeNameInColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
          }
        }
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_USEFUL.equals(event.column.getId())) {
        isUsefulChange=true;
      }
    }
  }
);
  return composite;
}",0.996930342384888
127844,"public void widgetSelected(SelectionEvent e){
  CTabFolder source=(CTabFolder)e.getSource();
  CTabItem tabItem=source.getSelection();
  inputNode=(INode)tabItem.getData(INPUTNODE_KEY);
  inputMetaTable=(IMetadataTable)tabItem.getData(INPUTMETATABLE_KEY);
  inputMetaView=(MetadataTableEditorView)tabItem.getData(INPUTMETAVIEW_KEY);
  inputFamily=inputNode.getComponent().getOriginalFamilyName();
  inputReadOnly=(Boolean)tabItem.getData(INPUTREADONLY_KEY);
  if (inputReadOnly || inputMetaTable.isReadOnly()) {
    copyToInput.setEnabled(false);
    copySelectionToInput.setEnabled(false);
  }
 else {
    copyToInput.setEnabled(true);
    copySelectionToInput.setEnabled(true);
  }
}","@Override public void widgetSelected(SelectionEvent e){
  CTabFolder source=(CTabFolder)e.getSource();
  CTabItem tabItem=source.getSelection();
  inputNode=(INode)tabItem.getData(INPUTNODE_KEY);
  inputMetaTable=(IMetadataTable)tabItem.getData(INPUTMETATABLE_KEY);
  inputMetaView=(MetadataTableEditorView)tabItem.getData(INPUTMETAVIEW_KEY);
  inputFamily=inputNode.getComponent().getOriginalFamilyName();
  inputReadOnly=(Boolean)tabItem.getData(INPUTREADONLY_KEY);
  if (inputReadOnly || inputMetaTable.isReadOnly()) {
    copyToInput.setEnabled(false);
    copySelectionToInput.setEnabled(false);
  }
 else {
    copyToInput.setEnabled(true);
    copySelectionToInput.setEnabled(true);
  }
}",0.9927536231884058
127845,"public void handleEvent(ModifiedBeanEvent<IMetadataColumn> event){
  if (outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
    MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
    outputMetaView.getTableViewerCreator().getTableViewer().refresh();
  }
  if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
    IMetadataColumn modifiedObject=event.bean;
    if (modifiedObject != null) {
      String originalLabel=changedNameColumns.get(modifiedObject);
      if (originalLabel == null) {
        changedNameColumns.put(modifiedObject,(String)event.previousValue);
      }
    }
  }
}","@Override public void handleEvent(ModifiedBeanEvent<IMetadataColumn> event){
  if (outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
    MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
    outputMetaView.getTableViewerCreator().getTableViewer().refresh();
  }
  if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
    IMetadataColumn modifiedObject=event.bean;
    if (modifiedObject != null) {
      String originalLabel=changedNameColumns.get(modifiedObject);
      if (originalLabel == null) {
        changedNameColumns.put(modifiedObject,(String)event.previousValue);
      }
    }
  }
}",0.9925149700598802
127846,"@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  boolean showTalendTypeColumnForInput=!(inputFamily != null && inputFamily.startsWith(ELT_LABEL));
  boolean showTalendTypeColumnForOutput=!outputFamily.startsWith(ELT_LABEL);
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput,true);
    outputMetaView=new MetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    MetadataDialog.initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.setShowTalendTypeColumn(showTalendTypeColumnForOutput);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    final CTabFolder folderInput=new CTabFolder(compositesSachForm.getLeftComposite(),SWT.BORDER);
    folderInput.setLayoutData(new GridData(GridData.FILL_BOTH));
    folderInput.setSimple(false);
    folderInput.setUnselectedImageVisible(false);
    folderInput.setUnselectedCloseVisible(false);
    Set<INode> inputNodeskey=inputInfos.keySet();
    INode mainNode=null;
    for (    INode inputNode : inputNodeskey) {
      List<? extends IConnection> outgoingConnections=inputNode.getOutgoingConnections();
      if (outgoingConnections.size() > 0) {
        EConnectionType lineStyle=outgoingConnections.get(0).getLineStyle();
        if (lineStyle.equals(EConnectionType.FLOW_MAIN)) {
          mainNode=inputNode;
          createTabItem(inputNode,folderInput,showTalendTypeColumnForInput);
        }
      }
    }
    for (    INode inputNode : inputNodeskey) {
      if (inputNode != mainNode) {
        createTabItem(inputNode,folderInput,showTalendTypeColumnForInput);
      }
    }
    folderInput.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        CTabFolder source=(CTabFolder)e.getSource();
        CTabItem tabItem=source.getSelection();
        inputNode=(INode)tabItem.getData(INPUTNODE_KEY);
        inputMetaTable=(IMetadataTable)tabItem.getData(INPUTMETATABLE_KEY);
        inputMetaView=(MetadataTableEditorView)tabItem.getData(INPUTMETAVIEW_KEY);
        inputFamily=inputNode.getComponent().getOriginalFamilyName();
        inputReadOnly=(Boolean)tabItem.getData(INPUTREADONLY_KEY);
        if (inputReadOnly || inputMetaTable.isReadOnly()) {
          copyToInput.setEnabled(false);
          copySelectionToInput.setEnabled(false);
        }
 else {
          copyToInput.setEnabled(true);
          copySelectionToInput.setEnabled(true);
        }
      }
    }
);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,0).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getInputMetaData(),getOutputMetaData());
          outputMetaView.getTableViewerCreator().getTableViewer().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData=new GridData();
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getOutputMetaData(),getInputMetaData());
          inputMetaView.getTableViewerCreator().getTableViewer().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    final CTabFolder folderOutput=new CTabFolder(compositesSachForm.getRightComposite(),SWT.BORDER);
    folderOutput.setLayoutData(new GridData(GridData.FILL_BOTH));
    folderOutput.setSimple(false);
    folderOutput.setUnselectedImageVisible(false);
    folderOutput.setUnselectedCloseVisible(false);
    CTabItem item=new CTabItem(folderOutput,SWT.NONE);
    item.setText(titleOutput);
    Composite compositeRight=new Composite(folderOutput,SWT.NONE);
    compositeRight.setLayoutData(new GridData(GridData.FILL_BOTH));
    compositeRight.setLayout(new GridLayout());
    MetadataTableEditor metadataTableEditorForOutput;
    if (isRepository(outputNode)) {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"",true);
    }
 else {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"");
    }
    outputMetaView=new MetadataTableEditorView(compositeRight,SWT.NONE,metadataTableEditorForOutput,outputReadOnly,true,false,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    MetadataDialog.initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.setShowTalendTypeColumn(showTalendTypeColumnForOutput);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    item.setControl(compositeRight);
    folderOutput.setSelection(item);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      copyToOutput.setEnabled(false);
      copySelectionToOutput.setEnabled(false);
    }
    compositesSachForm.setGridDatas();
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,null,null,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if (outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().getTableViewer().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
          }
        }
      }
    }
  }
);
  return composite;
}","@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  boolean showTalendTypeColumnForInput=!(inputFamily != null && inputFamily.startsWith(ELT_LABEL));
  boolean showTalendTypeColumnForOutput=!outputFamily.startsWith(ELT_LABEL);
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput,true);
    outputMetaView=new MetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    MetadataDialog.initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.setShowTalendTypeColumn(showTalendTypeColumnForOutput);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    final CTabFolder folderInput=new CTabFolder(compositesSachForm.getLeftComposite(),SWT.BORDER);
    folderInput.setLayoutData(new GridData(GridData.FILL_BOTH));
    folderInput.setSimple(false);
    folderInput.setUnselectedImageVisible(false);
    folderInput.setUnselectedCloseVisible(false);
    Set<INode> inputNodeskey=inputInfos.keySet();
    INode mainNode=null;
    for (    INode inputNode : inputNodeskey) {
      List<? extends IConnection> outgoingConnections=inputNode.getOutgoingConnections();
      if (outgoingConnections.size() > 0) {
        EConnectionType lineStyle=outgoingConnections.get(0).getLineStyle();
        if (lineStyle.equals(EConnectionType.FLOW_MAIN)) {
          mainNode=inputNode;
          createTabItem(inputNode,folderInput,showTalendTypeColumnForInput);
        }
      }
    }
    for (    INode inputNode : inputNodeskey) {
      if (inputNode != mainNode) {
        createTabItem(inputNode,folderInput,showTalendTypeColumnForInput);
      }
    }
    folderInput.addSelectionListener(new SelectionListener(){
      @Override public void widgetDefaultSelected(      SelectionEvent e){
      }
      @Override public void widgetSelected(      SelectionEvent e){
        CTabFolder source=(CTabFolder)e.getSource();
        CTabItem tabItem=source.getSelection();
        inputNode=(INode)tabItem.getData(INPUTNODE_KEY);
        inputMetaTable=(IMetadataTable)tabItem.getData(INPUTMETATABLE_KEY);
        inputMetaView=(MetadataTableEditorView)tabItem.getData(INPUTMETAVIEW_KEY);
        inputFamily=inputNode.getComponent().getOriginalFamilyName();
        inputReadOnly=(Boolean)tabItem.getData(INPUTREADONLY_KEY);
        if (inputReadOnly || inputMetaTable.isReadOnly()) {
          copyToInput.setEnabled(false);
          copySelectionToInput.setEnabled(false);
        }
 else {
          copyToInput.setEnabled(true);
          copySelectionToInput.setEnabled(true);
        }
      }
    }
);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,0).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getInputMetaData(),getOutputMetaData(),true);
          outputMetaView.getTableViewerCreator().getTableViewer().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData=new GridData();
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getOutputMetaData(),getInputMetaData());
          inputMetaView.getTableViewerCreator().getTableViewer().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    final CTabFolder folderOutput=new CTabFolder(compositesSachForm.getRightComposite(),SWT.BORDER);
    folderOutput.setLayoutData(new GridData(GridData.FILL_BOTH));
    folderOutput.setSimple(false);
    folderOutput.setUnselectedImageVisible(false);
    folderOutput.setUnselectedCloseVisible(false);
    CTabItem item=new CTabItem(folderOutput,SWT.NONE);
    item.setText(titleOutput);
    Composite compositeRight=new Composite(folderOutput,SWT.NONE);
    compositeRight.setLayoutData(new GridData(GridData.FILL_BOTH));
    compositeRight.setLayout(new GridLayout());
    MetadataTableEditor metadataTableEditorForOutput;
    if (isRepository(outputNode)) {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"",true);
    }
 else {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"");
    }
    outputMetaView=new MetadataTableEditorView(compositeRight,SWT.NONE,metadataTableEditorForOutput,outputReadOnly,true,false,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    MetadataDialog.initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.setShowTalendTypeColumn(showTalendTypeColumnForOutput);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    item.setControl(compositeRight);
    folderOutput.setSelection(item);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      copyToOutput.setEnabled(false);
      copySelectionToOutput.setEnabled(false);
    }
    compositesSachForm.setGridDatas();
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,null,null,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    @Override public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if (outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().getTableViewer().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
          }
        }
      }
    }
  }
);
  return composite;
}",0.996662958843159
127847,"public void widgetDefaultSelected(SelectionEvent e){
}","@Override public void widgetDefaultSelected(SelectionEvent e){
}",0.9152542372881356
127848,"public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0) || ConnectionUtils.isSybase(dbJDBCMetadata)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    boolean iscdhhive2=HiveConnectionManager.getInstance().isCDHHive2(metaConnection);
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata) && !iscdhhive2) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        String uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
        if (iscdhhive2) {
          uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getSID();
        }
        if ((!isEmptyString(uiSchemaOnConnWizard) || !isNullUiSchema(dbConn)) && dbConn != null) {
          Schema schema=SchemaHelper.createSchema(TalendCWMService.getReadableName(dbConn,uiSchemaOnConnWizard));
          returnSchemas.add(schema);
          returnSchemas.add(schema);
          break;
        }
 else         if (isCreateElement(schemaFilter,schemaName)) {
          Schema schema=SchemaHelper.createSchema(schemaName);
          returnSchemas.add(schema);
        }
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}","public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0) || ConnectionUtils.isSybase(dbJDBCMetadata)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    boolean iscdhhive2=HiveConnectionManager.getInstance().isCDHHive2(metaConnection);
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata) && !iscdhhive2) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        String uiSchemaOnConnWizard=null;
        if (dbConn != null) {
          uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
          if (iscdhhive2) {
            uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getSID();
          }
        }
        if ((!isEmptyString(uiSchemaOnConnWizard) || !isNullUiSchema(dbConn)) && dbConn != null) {
          Schema schema=SchemaHelper.createSchema(TalendCWMService.getReadableName(dbConn,uiSchemaOnConnWizard));
          returnSchemas.add(schema);
          returnSchemas.add(schema);
          break;
        }
 else         if (isCreateElement(schemaFilter,schemaName)) {
          Schema schema=SchemaHelper.createSchema(schemaName);
          returnSchemas.add(schema);
        }
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}",0.9907231474237176
127849,"/** 
 * DOC zshen check whether the file is exist
 */
private boolean isSqliteFileFieldInvalidate(){
  String fileFullPath=null;
  String urlText=null;
  if (isGeneralJDBC()) {
    urlText=generalJdbcUrlText.getText();
  }
 else   if (isSqlite()) {
    urlText=DBConnectionContextUtils.getUrlConnectionString(connectionItem,false);
  }
  String[] analyseURL=DatabaseConnStrUtil.analyseURL(dbTypeCombo.getText(),""String_Node_Str"",urlText);
  if (analyseURL[1] != null && analyseURL.length > 1) {
    fileFullPath=getSqliteFileFullPath(analyseURL[0],analyseURL[1]);
  }
  if (fileFullPath != null) {
    File file=new File(fileFullPath);
    if (file.exists()) {
      return false;
    }
    MessageDialog.openWarning(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",fileFullPath));
    return true;
  }
  return false;
}","/** 
 * DOC zshen check whether the file is exist
 */
private boolean isSqliteFileFieldInvalidate(){
  String fileFullPath=null;
  String urlText=null;
  if (isGeneralJDBCSqlite()) {
    urlText=generalJdbcUrlText.getText();
  }
 else   if (isSqlite()) {
    urlText=DBConnectionContextUtils.getUrlConnectionString(connectionItem,false);
  }
 else {
    return false;
  }
  String[] analyseURL=DatabaseConnStrUtil.analyseURL(dbTypeCombo.getText(),""String_Node_Str"",urlText);
  if (analyseURL[1] != null && analyseURL.length > 1) {
    fileFullPath=getSqliteFileFullPath(analyseURL[0],analyseURL[1]);
  }
  if (fileFullPath != null) {
    File file=new File(fileFullPath);
    if (file.exists()) {
      return false;
    }
    MessageDialog.openWarning(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",fileFullPath));
    return true;
  }
  return false;
}",0.9794285714285714
127850,"/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  Listener listener=new Listener(){
    @Override public void handleEvent(    final Event e){
      if (isContextMode()) {
      }
 else {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
        setPropertiesFormEditable(dbTypeCombo.getSelectionIndex() > -1);
        urlConnectionStringText.setEditable(false);
      }
    }
  }
;
  usernameText.addListener(SWT.FocusIn,listener);
  passwordText.addListener(SWT.FocusIn,listener);
  serverText.addListener(SWT.FocusIn,listener);
  portText.addListener(SWT.FocusIn,listener);
  sidOrDatabaseText.addListener(SWT.FocusIn,listener);
  datasourceText.addListener(SWT.FocusIn,listener);
  schemaText.addListener(SWT.FocusIn,listener);
  additionParamText.addListener(SWT.FocusIn,listener);
  urlConnectionStringText.addListener(SWT.FocusIn,listener);
  mappingFileText.addListener(SWT.FocusIn,listener);
  serverText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setServerName(serverText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setPort(portText.getText());
          modifyFieldValue();
        }
        boolean b=true;
        String databaseType=getConnection().getDatabaseType();
        if (databaseType != null) {
          if (databaseType.equals(""String_Node_Str"")) {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
 else {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
        }
        if (b) {
          b=portText.getText().length() <= 5;
        }
        evaluateTextField(b);
      }
    }
  }
);
  portText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (!Character.isLetterOrDigit(e.character) && !Character.isIdentifierIgnorable(e.character)) {
        e.doit=false;
      }
    }
  }
);
  usernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUsername(usernameText.getText());
        }
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          try {
            String password=PasswordEncryptUtil.encryptPassword(passwordText.getText());
            getConnection().setPassword(password);
          }
 catch (          Exception ex) {
            ExceptionHandler.process(ex);
          }
        }
      }
    }
  }
);
  sidOrDatabaseText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setSID(sidOrDatabaseText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  datasourceText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setDatasourceName(datasourceText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUiSchema(schemaText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      if (!isContextMode()) {
        if (originalUischema != null) {
          if (!originalUischema.equalsIgnoreCase(schemaText.getText())) {
            ConnectionHelper.setIsConnNeedReload(getConnection(),Boolean.TRUE);
          }
 else {
            checkURLIsChanged();
          }
        }
      }
    }
  }
);
  dbVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        if (version != null) {
          getConnection().setDbVersionString(version.getVersionValue());
        }
        urlConnectionStringText.setText(getStringConnection());
        checkFieldsValue();
      }
    }
  }
);
  hideDbVersion();
  additionParamText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setAdditionalParams(additionParamText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  standardButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  systemButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  button1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(button1.getSelection());
      }
    }
  }
);
  button2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(!button2.getSelection());
      }
    }
  }
);
  dbTypeCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().clear();
      boolean isGeneralJDBC=isGeneralJDBC();
      if (isGeneralJDBC) {
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(""String_Node_Str"");
        }
        if (generalJdbcUserText != null) {
          generalJdbcUserText.setText(""String_Node_Str"");
        }
        if (generalJdbcPasswordText != null) {
          generalJdbcPasswordText.setText(""String_Node_Str"");
        }
      }
 else       if (isHiveDBConnSelected()) {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
        initHiveInfo();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.HBASE)) {
        initHBaseSettings();
      }
 else {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
      }
      if (schemaText != null) {
        schemaText.setText(""String_Node_Str"");
      }
      if (serverText != null) {
        serverText.setText(""String_Node_Str"");
      }
      if (sidOrDatabaseText != null) {
        sidOrDatabaseText.setText(""String_Node_Str"");
      }
      if (portText != null && portText.getText() != null) {
        portText.setText(""String_Node_Str"");
      }
      if (fileField != null) {
        fileField.setText(""String_Node_Str"");
      }
      if (datasourceText != null) {
        datasourceText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (generalJdbcClassNameText != null) {
        generalJdbcClassNameText.setText(""String_Node_Str"");
      }
      if (generalJdbcDriverjarText != null) {
        generalJdbcDriverjarText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (mappingFileText != null) {
        mappingFileText.setText(""String_Node_Str"");
      }
      boolean hiddenGeneral=!isGeneralJDBC();
      switchBetweenTypeandGeneralDB(hiddenGeneral);
      if (!isContextMode()) {
        getConnection().setDatabaseType(dbTypeCombo.getText());
        setPropertiesFormEditable(true);
        EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
        if (template != null) {
          portText.setText(template.getDefaultPort());
        }
        final String product=EDatabaseTypeName.getTypeFromDisplayName(getConnection().getDatabaseType()).getProduct();
        getConnection().setProductId(product);
        String mapping=null;
        if (product == null || product.equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          mapping=generalMappingFileText.getText();
        }
 else {
          if (MetadataTalendType.getDefaultDbmsFromProduct(product) != null) {
            mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
          }
        }
        if (mapping == null) {
          mapping=""String_Node_Str"";
        }
        getConnection().setDbmsId(mapping);
        additionParamText.setText(EDatabaseConnTemplate.getAdditionProperty(dbTypeCombo.getText()));
        if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
          datasourceText.setLabelText(Messages.getString(""String_Node_Str""));
        }
        checkAndSetIniSQLModel();
        checkAS400SpecificCase();
        checkFieldsValue();
        hideDbVersion();
        if (!schemaText.getEditable()) {
          schemaText.setText(""String_Node_Str"");
        }
        if (isHiveDBConnSelected()) {
          doHiveDBTypeSelected();
        }
 else {
          doHiveDBTypeNotSelected();
        }
      }
      if (isHiveDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      }
 else {
        checkScrolledCompositeSize();
      }
      if (!isDBTypeSelected(EDatabaseConnTemplate.HBASE) && !isDBTypeSelected(EDatabaseConnTemplate.HIVE)) {
        clearHadoopRelatedParameters();
      }
    }
  }
);
  dbTypeCombo.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (dbTypeCombo.getSelectionIndex() > -1) {
        if (Character.isLetterOrDigit(e.character)) {
          e.doit=false;
        }
      }
    }
  }
);
  fileField.addListener(SWT.FocusIn,new Listener(){
    @Override public void handleEvent(    final Event e){
      if (!isContextMode()) {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
 else {
          EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
          EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(getConnection().getDbVersionString());
          if (template != null && template.getUrlTemplate(version).contains(EDatabaseConnVar.FILENAME.getVariable())) {
            setPropertiesFormEditable(true);
            urlConnectionStringText.setEditable(false);
          }
          getConnection().setFileFieldName(PathUtils.getPortablePath(fileField.getText()));
        }
      }
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setFileFieldName(fileField.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  directoryField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          String text=directoryField.getText();
          getConnection().setDBRootPath(text);
          checkFieldsValue();
        }
      }
    }
  }
);
  sqlSyntaxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setSqlSynthax(sqlSyntaxCombo.getText());
      }
    }
  }
);
  nullCharText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setNullChar(nullCharText.getText());
      }
    }
  }
);
  stringQuoteText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setStringQuote(stringQuoteText.getText());
      }
    }
  }
);
  addGeneralDbFieldsListeners();
  addHBaseSettingFieldsListeners();
  regHiveRelatedWidgetsListeners();
  if (canLinkToHadoopCluster()) {
    addHadoopClusterLinkListeners();
  }
}","/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  Listener listener=new Listener(){
    @Override public void handleEvent(    final Event e){
      if (isContextMode()) {
      }
 else {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
        setPropertiesFormEditable(dbTypeCombo.getSelectionIndex() > -1);
        urlConnectionStringText.setEditable(false);
      }
    }
  }
;
  usernameText.addListener(SWT.FocusIn,listener);
  passwordText.addListener(SWT.FocusIn,listener);
  serverText.addListener(SWT.FocusIn,listener);
  portText.addListener(SWT.FocusIn,listener);
  sidOrDatabaseText.addListener(SWT.FocusIn,listener);
  datasourceText.addListener(SWT.FocusIn,listener);
  schemaText.addListener(SWT.FocusIn,listener);
  additionParamText.addListener(SWT.FocusIn,listener);
  urlConnectionStringText.addListener(SWT.FocusIn,listener);
  mappingFileText.addListener(SWT.FocusIn,listener);
  serverText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setServerName(serverText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setPort(portText.getText());
          modifyFieldValue();
        }
        boolean b=true;
        String databaseType=getConnection().getDatabaseType();
        if (databaseType != null) {
          if (databaseType.equals(""String_Node_Str"")) {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
 else {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
        }
        if (b) {
          b=portText.getText().length() <= 5;
        }
        evaluateTextField(b);
      }
    }
  }
);
  portText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (!Character.isLetterOrDigit(e.character) && !Character.isIdentifierIgnorable(e.character)) {
        e.doit=false;
      }
    }
  }
);
  usernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUsername(usernameText.getText());
        }
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          try {
            String password=PasswordEncryptUtil.encryptPassword(passwordText.getText());
            getConnection().setPassword(password);
          }
 catch (          Exception ex) {
            ExceptionHandler.process(ex);
          }
        }
      }
    }
  }
);
  sidOrDatabaseText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setSID(sidOrDatabaseText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  datasourceText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setDatasourceName(datasourceText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUiSchema(schemaText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      if (!isContextMode()) {
        if (originalUischema != null) {
          if (!originalUischema.equalsIgnoreCase(schemaText.getText())) {
            ConnectionHelper.setIsConnNeedReload(getConnection(),Boolean.TRUE);
          }
 else {
            checkURLIsChanged();
          }
        }
      }
    }
  }
);
  dbVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        if (version != null) {
          getConnection().setDbVersionString(version.getVersionValue());
        }
        urlConnectionStringText.setText(getStringConnection());
        checkFieldsValue();
      }
    }
  }
);
  hideDbVersion();
  additionParamText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setAdditionalParams(additionParamText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  standardButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  systemButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  button1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(button1.getSelection());
      }
    }
  }
);
  button2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(!button2.getSelection());
      }
    }
  }
);
  dbTypeCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().clear();
      boolean isGeneralJDBC=isGeneralJDBC();
      if (isGeneralJDBC) {
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(""String_Node_Str"");
        }
        if (generalJdbcUserText != null) {
          generalJdbcUserText.setText(""String_Node_Str"");
        }
        if (generalJdbcPasswordText != null) {
          generalJdbcPasswordText.setText(""String_Node_Str"");
        }
      }
 else       if (isHiveDBConnSelected()) {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
        initHiveInfo();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.HBASE)) {
        initHBaseSettings();
      }
 else {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
      }
      if (schemaText != null) {
        schemaText.setText(""String_Node_Str"");
      }
      if (serverText != null) {
        serverText.setText(""String_Node_Str"");
      }
      if (sidOrDatabaseText != null) {
        sidOrDatabaseText.setText(""String_Node_Str"");
      }
      if (portText != null && portText.getText() != null) {
        portText.setText(""String_Node_Str"");
      }
      if (fileField != null) {
        fileField.setText(""String_Node_Str"");
      }
      if (datasourceText != null) {
        datasourceText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (generalJdbcClassNameText != null) {
        generalJdbcClassNameText.setText(""String_Node_Str"");
      }
      if (generalJdbcDriverjarText != null) {
        generalJdbcDriverjarText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (mappingFileText != null) {
        mappingFileText.setText(""String_Node_Str"");
      }
      boolean hiddenGeneral=!isGeneralJDBC();
      switchBetweenTypeandGeneralDB(hiddenGeneral);
      if (!isContextMode()) {
        getConnection().setDatabaseType(dbTypeCombo.getText());
        EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
        if (template != null) {
          portText.setText(template.getDefaultPort());
        }
        final String product=EDatabaseTypeName.getTypeFromDisplayName(getConnection().getDatabaseType()).getProduct();
        getConnection().setProductId(product);
        String mapping=null;
        if (product == null || product.equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          mapping=generalMappingFileText.getText();
        }
 else {
          if (MetadataTalendType.getDefaultDbmsFromProduct(product) != null) {
            mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
          }
        }
        if (mapping == null) {
          mapping=""String_Node_Str"";
        }
        getConnection().setDbmsId(mapping);
        setPropertiesFormEditable(true);
        additionParamText.setText(EDatabaseConnTemplate.getAdditionProperty(dbTypeCombo.getText()));
        if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
          datasourceText.setLabelText(Messages.getString(""String_Node_Str""));
        }
        checkAndSetIniSQLModel();
        checkAS400SpecificCase();
        checkFieldsValue();
        hideDbVersion();
        if (!schemaText.getEditable()) {
          schemaText.setText(""String_Node_Str"");
        }
        if (isHiveDBConnSelected()) {
          doHiveDBTypeSelected();
        }
 else {
          doHiveDBTypeNotSelected();
        }
      }
      if (isHiveDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      }
 else {
        checkScrolledCompositeSize();
      }
      if (!isDBTypeSelected(EDatabaseConnTemplate.HBASE) && !isDBTypeSelected(EDatabaseConnTemplate.HIVE)) {
        clearHadoopRelatedParameters();
      }
    }
  }
);
  dbTypeCombo.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (dbTypeCombo.getSelectionIndex() > -1) {
        if (Character.isLetterOrDigit(e.character)) {
          e.doit=false;
        }
      }
    }
  }
);
  fileField.addListener(SWT.FocusIn,new Listener(){
    @Override public void handleEvent(    final Event e){
      if (!isContextMode()) {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
 else {
          EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
          EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(getConnection().getDbVersionString());
          if (template != null && template.getUrlTemplate(version).contains(EDatabaseConnVar.FILENAME.getVariable())) {
            setPropertiesFormEditable(true);
            urlConnectionStringText.setEditable(false);
          }
          getConnection().setFileFieldName(PathUtils.getPortablePath(fileField.getText()));
        }
      }
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setFileFieldName(fileField.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  directoryField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          String text=directoryField.getText();
          getConnection().setDBRootPath(text);
          checkFieldsValue();
        }
      }
    }
  }
);
  sqlSyntaxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setSqlSynthax(sqlSyntaxCombo.getText());
      }
    }
  }
);
  nullCharText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setNullChar(nullCharText.getText());
      }
    }
  }
);
  stringQuoteText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setStringQuote(stringQuoteText.getText());
      }
    }
  }
);
  addGeneralDbFieldsListeners();
  addHBaseSettingFieldsListeners();
  regHiveRelatedWidgetsListeners();
  if (canLinkToHadoopCluster()) {
    addHadoopClusterLinkListeners();
  }
}",0.99704547092311
127851,"public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracleJdbc || isOracle) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables,dbJDBCMetadata.getConnection());
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!isCreateElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      if (ETableTypes.TABLETYPE_EXTERNAL_TABLE.getName().equals(temptableType)) {
        metadatatable.setTableType(ETableTypes.TABLETYPE_TABLE.getName());
      }
 else {
        metadatatable.setTableType(temptableType);
      }
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=schemaPattern + ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          if (""String_Node_Str"".equalsIgnoreCase(schemaPattern)) {
            ResultSet rsTables=stmt.executeQuery(sql);
            while (rsTables.next()) {
              String nameKey=rsTables.getString(""String_Node_Str"").trim();
              MetadataTable metadatatable=null;
              metadatatable=RelationalFactory.eINSTANCE.createTdTable();
              metadatatable.setName(nameKey);
              metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
              metadatatable.setLabel(metadatatable.getName());
              if (schemaPattern != null) {
                ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
              }
              list.add(metadatatable);
            }
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().startsWith(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}","public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  return fillAll(pack,dbJDBCMetadata,null,tableFilter,tablePattern,tableType);
}",0.043076923076923
127852,"public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0) || ConnectionUtils.isSybase(dbJDBCMetadata)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!isNullUiSchema(dbConn) && dbConn != null) {
          String uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
          Schema schema=SchemaHelper.createSchema(TalendCWMService.getReadableName(dbConn,uiSchemaOnConnWizard));
          returnSchemas.add(schema);
          returnSchemas.add(schema);
          break;
        }
 else         if (isCreateElement(schemaFilter,schemaName)) {
          Schema schema=SchemaHelper.createSchema(schemaName);
          returnSchemas.add(schema);
        }
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}","public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0) || ConnectionUtils.isSybase(dbJDBCMetadata)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    boolean iscdhhive2=HiveConnectionManager.getInstance().isCDHHive2(metaConnection);
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata) && !iscdhhive2) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        String uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
        if (iscdhhive2) {
          uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getSID();
        }
        if ((!isEmptyString(uiSchemaOnConnWizard) || !isNullUiSchema(dbConn)) && dbConn != null) {
          Schema schema=SchemaHelper.createSchema(TalendCWMService.getReadableName(dbConn,uiSchemaOnConnWizard));
          returnSchemas.add(schema);
          returnSchemas.add(schema);
          break;
        }
 else         if (isCreateElement(schemaFilter,schemaName)) {
          Schema schema=SchemaHelper.createSchema(schemaName);
          returnSchemas.add(schema);
        }
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}",0.9521819870009284
127853,"/** 
 * wzhang Comment method ""fillAll"".
 * @param pack the object(catalog or schema) which you want tables to be filled.Can't be null if need to fill thetables into the object of package(catalog or schema).And if Linked is false everything is ok.
 * @param dbJDBCMetadata If it is null the method will do nothing and return null too.
 * @param tableFilter The list for filter tables which you want to get.If it is null all of tables which belong tothe package will be return.
 * @param tablePattern another method to filter the tables.the table will be keep if it's name match to thetablePattern.And if you don't want to use it null is ok.
 * @param tableType the type of Table which you want to fill.It should be the one of TableType enum.
 * @return The list of tables/views/sysnonyms after filter.Will return null only if dbJDBCMetadata isn't normal.
 */
public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType);","public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> tableFilter,String tablePattern,String[] tableType);",0.2449324324324324
127854,"public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  return null;
}","public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> tableFilter,String tablePattern,String[] tableType){
  return null;
}",0.9025069637883008
127855,"/** 
 * wzhang Comment method ""fillAll"".
 * @param pack the object(catalog or schema) which you want tables to be filled.Can't be null if need to fill thetables into the object of package(catalog or schema).And if Linked is false everything is ok.
 * @param dbJDBCMetadata If it is null the method will do nothing and return null too.
 * @param tableFilter The list for filter tables which you want to get.If it is null all of tables which belong tothe package will be return.
 * @param tablePattern another method to filter the tables.the table will be keep if it's name match to thetablePattern.And if you don't want to use it null is ok.
 * @param tableType the type of Table which you want to fill.It should be the one of TableType enum.
 * @return The list of tables/views/sysnonyms after filter.Will return null only if dbJDBCMetadata isn't normal.
 */
public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  return metadataFiller.fillAll(pack,dbJDBCMetadata,tableFilter,tablePattern,tableType);
}","public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> tableFilter,String tablePattern,String[] tableType){
  return metadataFiller.fillAll(pack,dbJDBCMetadata,metaConnection,tableFilter,tablePattern,tableType);
}",0.3417813178855901
127856,"/** 
 * Initialize value, forceFocus first field for right Click (new Table).
 */
@Override public void initialize(){
  getTableInfoParameters().setSqlFiter(sqlFilter.getText());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_TABLE,tableCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_EXTERNAL_TABLE,tableCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_VIEW,viewCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_SYNONYM,synonymCheck.getSelection());
  if (isOracle()) {
    getTableInfoParameters().changeType(ETableTypes.TABLETYPE_ALL_SYNONYM,publicSynonymCheck.getSelection());
  }
  switchFilter();
  IDBMetadataProviderObject providerObjectByDbType=ExtractMetaDataFromDataBase.getProviderObjectByDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider() && !providerObjectByDbType.isSupportJDBC()) {
    disableAllJDBCControls();
  }
}","/** 
 * Initialize value, forceFocus first field for right Click (new Table).
 */
@Override public void initialize(){
  getTableInfoParameters().setSqlFiter(sqlFilter.getText());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_TABLE,tableCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_EXTERNAL_TABLE,tableCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_VIEW,viewCheck.getSelection());
  getTableInfoParameters().changeType(ETableTypes.TABLETYPE_SYNONYM,synonymCheck.getSelection());
  if (HiveConnectionManager.getInstance().isCDHHive2(metadataconnection)) {
    getTableInfoParameters().changeType(ETableTypes.EXTERNAL_TABLE,tableCheck.getSelection());
    getTableInfoParameters().changeType(ETableTypes.MANAGED_TABLE,tableCheck.getSelection());
  }
  if (isOracle()) {
    getTableInfoParameters().changeType(ETableTypes.TABLETYPE_ALL_SYNONYM,publicSynonymCheck.getSelection());
  }
  switchFilter();
  IDBMetadataProviderObject providerObjectByDbType=ExtractMetaDataFromDataBase.getProviderObjectByDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider() && !providerObjectByDbType.isSupportJDBC()) {
    disableAllJDBCControls();
  }
}",0.8801781737193763
127857,"private void updatePackage(IMetadataConnection metadataConnection){
  if (metadataConnection == null) {
    return;
  }
  Driver derbyDriver=null;
  Connection sqlConn=null;
  String dbType=metadataconnection.getDbType();
  DatabaseConnection dbConn=(DatabaseConnection)metadataconnection.getCurrentConnection();
  if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
    DatabaseMetaData dm=null;
    try {
      dm=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConnection);
      MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
      MetadataFillFactory.getDBInstance().fillSchemas(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    SQLException e) {
      e.printStackTrace();
    }
  }
 else {
    List list=MetadataConnectionUtils.getConnection(metadataconnection);
    for (int i=0; i < list.size(); i++) {
      if (list.get(i) instanceof Driver) {
        String driverClass=metadataconnection.getDriverClass();
        if (MetadataConnectionUtils.isDerbyRelatedDb(driverClass,dbType)) {
          derbyDriver=(Driver)list.get(i);
        }
      }
      if (list.get(i) instanceof java.sql.Connection) {
        sqlConn=(java.sql.Connection)list.get(i);
      }
    }
    try {
      if (sqlConn != null) {
        DatabaseMetaData dm=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbType,false,metadataconnection.getDatabase());
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
 finally {
      if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName())) || EDatabaseTypeName.HIVE.getDisplayName().equalsIgnoreCase(dbType)) {
        ExtractMetaDataUtils.closeConnection();
      }
      if (derbyDriver != null) {
        try {
          derbyDriver.connect(""String_Node_Str"",null);
        }
 catch (        SQLException e) {
        }
      }
    }
  }
}","private void updatePackage(IMetadataConnection metadataConnection){
  if (metadataConnection == null) {
    return;
  }
  Driver derbyDriver=null;
  Connection sqlConn=null;
  String dbType=metadataconnection.getDbType();
  DatabaseConnection dbConn=(DatabaseConnection)metadataconnection.getCurrentConnection();
  if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
    DatabaseMetaData dm=null;
    try {
      dm=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConnection);
      MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,dm,metadataConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
      MetadataFillFactory.getDBInstance().fillSchemas(dbConn,dm,metadataConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    SQLException e) {
      e.printStackTrace();
    }
  }
 else {
    List list=MetadataConnectionUtils.getConnection(metadataconnection);
    for (int i=0; i < list.size(); i++) {
      if (list.get(i) instanceof Driver) {
        String driverClass=metadataconnection.getDriverClass();
        if (MetadataConnectionUtils.isDerbyRelatedDb(driverClass,dbType)) {
          derbyDriver=(Driver)list.get(i);
        }
      }
      if (list.get(i) instanceof java.sql.Connection) {
        sqlConn=(java.sql.Connection)list.get(i);
      }
    }
    try {
      if (sqlConn != null) {
        DatabaseMetaData dm=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbType,false,metadataconnection.getDatabase());
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
 finally {
      if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName())) || EDatabaseTypeName.HIVE.getDisplayName().equalsIgnoreCase(dbType)) {
        ExtractMetaDataUtils.closeConnection();
      }
      if (derbyDriver != null) {
        try {
          derbyDriver.connect(""String_Node_Str"",null);
        }
 catch (        SQLException e) {
        }
      }
    }
  }
}",0.992862509391435
127858,"@Override public Object[] getChildren(Object parentElement){
  TableNode tableNode=(TableNode)parentElement;
  List<TableNode> child=tableNode.getChildren();
  boolean extended=false;
  if (!child.isEmpty()) {
    for (    TableNode node : child) {
      if (node.getType() == TableNode.TABLE) {
        extended=true;
        break;
      }
    }
  }
  if (extended) {
    return child.toArray();
  }
  IMetadataConnection metadataConn=tableNode.getMetadataConn();
  Connection conn=null;
  Driver driver=null;
  DatabaseMetaData dbMetaData=null;
  if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataConn.getDbType())) {
    try {
      dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConn);
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    SQLException e) {
      e.printStackTrace();
    }
  }
 else {
    List list=ExtractMetaDataUtils.getConnectionList(metadataConn);
    if (list != null && !list.isEmpty()) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          conn=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          driver=(DriverShim)list.get(i);
        }
      }
    }
    dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(conn,metadataConn.getDbType(),metadataConn.isSqlMode(),metadataConn.getDatabase());
  }
  int type=tableNode.getType();
  orgomg.cwm.objectmodel.core.Package pack=null;
  List<MetadataTable> tableList=new ArrayList<MetadataTable>();
  if (type == tableNode.CATALOG) {
    if (tableNode.getChildren().isEmpty()) {
      pack=tableNode.getCatalog();
    }
  }
 else   if (type == tableNode.SCHEMA) {
    pack=tableNode.getSchema();
  }
  try {
    if (pack != null) {
      TableInfoParameters paras=tableNode.getParas();
      List<ETableTypes> paraType=paras.getTypes();
      Set<String> availableTableTypes=new HashSet<String>();
      for (      ETableTypes tableType : paraType) {
        availableTableTypes.add(tableType.getName());
      }
      Set<String> tableNameFilter=null;
      if (!paras.isUsedName()) {
        tableNameFilter=new HashSet<String>();
        if (paras.getSqlFiter() != null && !""String_Node_Str"".equals(paras.getSqlFiter())) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          ResultSet rsTables=stmt.executeQuery(paras.getSqlFiter());
          while (rsTables.next()) {
            String nameKey=rsTables.getString(1).trim();
            tableNameFilter.add(nameKey);
          }
          rsTables.close();
          stmt.close();
        }
      }
 else {
        tableNameFilter=paras.getNameFilters();
      }
      List<MetadataTable> tempListTables=new ArrayList<MetadataTable>();
      for (      String filter : tableNameFilter) {
        tempListTables=MetadataFillFactory.getDBInstance().fillAll(pack,dbMetaData,null,filter,availableTableTypes.toArray(new String[]{}));
        for (        MetadataTable table : tempListTables) {
          boolean contains=false;
          for (          MetadataTable inListTable : tableList) {
            if (inListTable.getName().equals(table.getName())) {
              contains=true;
              break;
            }
          }
          if (!contains) {
            tableList.add(table);
          }
        }
      }
      if (tableNameFilter.isEmpty()) {
        tempListTables=MetadataFillFactory.getDBInstance().fillAll(pack,dbMetaData,null,null,availableTableTypes.toArray(new String[]{}));
        for (        MetadataTable table : tempListTables) {
          boolean contains=false;
          for (          MetadataTable inListTable : tableList) {
            if (inListTable.getName().equals(table.getName())) {
              contains=true;
              break;
            }
          }
          if (!contains) {
            tableList.add(table);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    String dbType=metadataConn.getDbType();
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (driver != null) {
      String driverClass=metadataConn.getDriverClass();
      if ((driverClass != null && driverClass.equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass())) || (dbType != null && (dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName())))) {
        try {
          driver.connect(""String_Node_Str"",null);
        }
 catch (        SQLException e) {
        }
      }
    }
  }
  transferToTableNode(tableList,tableNode);
  List<TableNode> children=tableNode.getChildren();
  return children.toArray();
}","@Override public Object[] getChildren(Object parentElement){
  TableNode tableNode=(TableNode)parentElement;
  List<TableNode> child=tableNode.getChildren();
  boolean extended=false;
  if (!child.isEmpty()) {
    for (    TableNode node : child) {
      if (node.getType() == TableNode.TABLE) {
        extended=true;
        break;
      }
    }
  }
  if (extended) {
    return child.toArray();
  }
  IMetadataConnection metadataConn=tableNode.getMetadataConn();
  Connection conn=null;
  Driver driver=null;
  DatabaseMetaData dbMetaData=null;
  if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataConn.getDbType())) {
    try {
      dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConn);
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    SQLException e) {
      e.printStackTrace();
    }
  }
 else {
    List list=ExtractMetaDataUtils.getConnectionList(metadataConn);
    if (list != null && !list.isEmpty()) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          conn=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          driver=(DriverShim)list.get(i);
        }
      }
    }
    dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(conn,metadataConn.getDbType(),metadataConn.isSqlMode(),metadataConn.getDatabase());
  }
  int type=tableNode.getType();
  orgomg.cwm.objectmodel.core.Package pack=null;
  List<MetadataTable> tableList=new ArrayList<MetadataTable>();
  if (type == tableNode.CATALOG) {
    if (tableNode.getChildren().isEmpty()) {
      pack=tableNode.getCatalog();
    }
  }
 else   if (type == tableNode.SCHEMA) {
    pack=tableNode.getSchema();
  }
  try {
    if (pack != null) {
      TableInfoParameters paras=tableNode.getParas();
      List<ETableTypes> paraType=paras.getTypes();
      Set<String> availableTableTypes=new HashSet<String>();
      for (      ETableTypes tableType : paraType) {
        availableTableTypes.add(tableType.getName());
      }
      Set<String> tableNameFilter=null;
      if (!paras.isUsedName()) {
        tableNameFilter=new HashSet<String>();
        if (paras.getSqlFiter() != null && !""String_Node_Str"".equals(paras.getSqlFiter())) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          ResultSet rsTables=stmt.executeQuery(paras.getSqlFiter());
          while (rsTables.next()) {
            String nameKey=rsTables.getString(1).trim();
            tableNameFilter.add(nameKey);
          }
          rsTables.close();
          stmt.close();
        }
      }
 else {
        tableNameFilter=paras.getNameFilters();
      }
      List<MetadataTable> tempListTables=new ArrayList<MetadataTable>();
      for (      String filter : tableNameFilter) {
        tempListTables=MetadataFillFactory.getDBInstance().fillAll(pack,dbMetaData,metadataConn,null,filter,availableTableTypes.toArray(new String[]{}));
        for (        MetadataTable table : tempListTables) {
          boolean contains=false;
          for (          MetadataTable inListTable : tableList) {
            if (inListTable.getName().equals(table.getName())) {
              contains=true;
              break;
            }
          }
          if (!contains) {
            tableList.add(table);
          }
        }
      }
      if (tableNameFilter.isEmpty()) {
        tempListTables=MetadataFillFactory.getDBInstance().fillAll(pack,dbMetaData,metadataConn,null,null,availableTableTypes.toArray(new String[]{}));
        for (        MetadataTable table : tempListTables) {
          boolean contains=false;
          for (          MetadataTable inListTable : tableList) {
            if (inListTable.getName().equals(table.getName())) {
              contains=true;
              break;
            }
          }
          if (!contains) {
            tableList.add(table);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    String dbType=metadataConn.getDbType();
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (driver != null) {
      String driverClass=metadataConn.getDriverClass();
      if ((driverClass != null && driverClass.equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass())) || (dbType != null && (dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName())))) {
        try {
          driver.connect(""String_Node_Str"",null);
        }
 catch (        SQLException e) {
        }
      }
    }
  }
  transferToTableNode(tableList,tableNode);
  List<TableNode> children=tableNode.getChildren();
  return children.toArray();
}",0.997584541062802
127859,"@Override public void deploy(List<ModuleNeeded> modules,IProgressMonitor... monitorWrap){
  String installLocation=getStorageDirectory().getAbsolutePath();
  File indexFile=new File(installLocation + JAR_INDEX);
  if (indexFile.exists()) {
    LibrariesIndexManager.getInstance().loadResource();
  }
  boolean modified=false;
  LibrariesIndex index=LibrariesIndexManager.getInstance().getIndex();
  EMap<String,String> jarsToRelativePath=index.getJarsToRelativePath();
  for (  ModuleNeeded module : modules) {
    if (module.getModuleLocaion() != null && !""String_Node_Str"".equals(module.getModuleLocaion())) {
      if (!jarsToRelativePath.keySet().contains(module.getModuleName())) {
        jarsToRelativePath.put(module.getModuleName(),module.getModuleLocaion());
        modified=true;
      }
    }
  }
  if (modified) {
    LibrariesIndexManager.getInstance().saveResource();
  }
}","@Override public void deploy(List<ModuleNeeded> modules,IProgressMonitor... monitorWrap){
  String installLocation=getStorageDirectory().getAbsolutePath();
  File indexFile=new File(installLocation + JAR_INDEX);
  if (indexFile.exists()) {
    LibrariesIndexManager.getInstance().loadResource();
  }
  boolean modified=false;
  LibrariesIndex index=LibrariesIndexManager.getInstance().getIndex();
  EMap<String,String> jarsToRelativePath=index.getJarsToRelativePath();
  for (  ModuleNeeded module : modules) {
    String moduleLocaion=module.getModuleLocaion();
    if (moduleLocaion != null && !""String_Node_Str"".equals(moduleLocaion)) {
      if (!jarsToRelativePath.keySet().contains(module.getModuleName())) {
        jarsToRelativePath.put(module.getModuleName(),moduleLocaion);
        modified=true;
      }
 else {
        boolean jarFound=false;
        String existePath=jarsToRelativePath.get(module.getModuleName());
        if (existePath != null && existePath.startsWith(""String_Node_Str"")) {
          try {
            URI uri=new URI(existePath);
            URL url=FileLocator.toFileURL(uri.toURL());
            File file=new File(url.getFile());
            if (file.exists()) {
              jarFound=true;
            }
          }
 catch (          Exception e) {
          }
        }
        if (!jarFound) {
          jarsToRelativePath.put(module.getModuleName(),moduleLocaion);
          modified=true;
        }
      }
    }
  }
  if (modified) {
    LibrariesIndexManager.getInstance().saveResource();
  }
}",0.6751749691230959
127860,"@Override public void installModules(String[] jarNames){
  Shell shell=Display.getCurrent().getActiveShell();
  ModulesInstaller.installModules(new Shell(shell),jarNames);
}","@Override public void installModules(String[] jarNames){
  Shell shell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
  ModulesInstaller.installModules(new Shell(shell),jarNames);
}",0.8901098901098901
127861,"public ExternalModulesInstallDialog(Shell shell,String text,String title){
  super(shell);
  setShellStyle(SWT.CLOSE | SWT.MIN | SWT.MAX| SWT.TITLE| SWT.BORDER| SWT.RESIZE| getDefaultOrientation());
  if (osName.contains(""String_Node_Str"")) {
    font=fontMac;
  }
  this.text=text;
  this.title=title;
}","public ExternalModulesInstallDialog(Shell shell,String text,String title){
  super(shell);
  setShellStyle(SWT.DIALOG_TRIM | SWT.MAX | SWT.RESIZE| SWT.SYSTEM_MODAL| getDefaultOrientation());
  if (osName.contains(""String_Node_Str"")) {
    font=fontMac;
  }
  this.text=text;
  this.title=title;
}",0.8166666666666667
127862,"/** 
 * DOC zshen check whether the file is exist
 */
private boolean isSqliteFileFieldInvalidate(){
  String fileFullPath=null;
  String urlText=null;
  if (isGeneralJDBC()) {
    urlText=generalJdbcUrlText.getText();
  }
 else   if (isSqlite()) {
    urlText=DBConnectionContextUtils.getUrlConnectionString(connectionItem,false);
  }
  String[] analyseURL=DatabaseConnStrUtil.analyseURL(dbTypeCombo.getText(),""String_Node_Str"",urlText);
  if (analyseURL[1] != null && analyseURL.length > 1) {
    fileFullPath=getSqliteFileFullPath(analyseURL[0],analyseURL[1]);
  }
  if (fileFullPath != null) {
    File file=new File(fileFullPath);
    if (file.exists()) {
      return false;
    }
    MessageDialog.openWarning(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",fileFullPath));
    return true;
  }
  return false;
}","/** 
 * DOC zshen check whether the file is exist
 */
private boolean isSqliteFileFieldInvalidate(){
  String fileFullPath=null;
  String urlText=null;
  if (isGeneralJDBCSqlite()) {
    urlText=generalJdbcUrlText.getText();
  }
 else   if (isSqlite()) {
    urlText=DBConnectionContextUtils.getUrlConnectionString(connectionItem,false);
  }
 else {
    return false;
  }
  String[] analyseURL=DatabaseConnStrUtil.analyseURL(dbTypeCombo.getText(),""String_Node_Str"",urlText);
  if (analyseURL[1] != null && analyseURL.length > 1) {
    fileFullPath=getSqliteFileFullPath(analyseURL[0],analyseURL[1]);
  }
  if (fileFullPath != null) {
    File file=new File(fileFullPath);
    if (file.exists()) {
      return false;
    }
    MessageDialog.openWarning(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",fileFullPath));
    return true;
  }
  return false;
}",0.9794285714285714
127863,"/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
        if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion)) {
          driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
        }
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (          String jar : jars) {
            Path path=new Path(jar);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jar);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          File driverFile=new File(driverJarPathArg);
          boolean isExist=driverFile.exists();
          if (!isExist || !driverJarPathArg.contains(""String_Node_Str"")) {
            jarPathList.add(""String_Node_Str"");
          }
 else           if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
      if (DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass())) {
        wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
        Properties info=new Properties();
        username=username != null ? username : ""String_Node_Str"";
        pwd=pwd != null ? pwd : ""String_Node_Str"";
        info.put(""String_Node_Str"",username);
        info.put(""String_Node_Str"",pwd);
        connection=wapperDriver.connect(url,info);
      }
 else {
        JDBCDriverLoader loader=new JDBCDriverLoader();
        list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
        if (list != null && list.size() > 0) {
          for (int i=0; i < list.size(); i++) {
            if (list.get(i) instanceof Connection) {
              connection=(Connection)list.get(i);
            }
            if (list.get(i) instanceof DriverShim) {
              wapperDriver=(DriverShim)list.get(i);
            }
          }
          DRIVER_CACHE.put(EDatabase4DriverClassName.MSSQL.getDriverClass(),wapperDriver);
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
        loadJarRequiredByDriver(dbType,dbVersion);
      }
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}","/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
        if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion)) {
          driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
        }
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (          String jar : jars) {
            Path path=new Path(jar);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jar);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          File driverFile=new File(driverJarPathArg);
          boolean isExist=driverFile.exists();
          if (!isExist) {
            jarPathList.add(""String_Node_Str"");
          }
 else           if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
      if (DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass())) {
        wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
        Properties info=new Properties();
        username=username != null ? username : ""String_Node_Str"";
        pwd=pwd != null ? pwd : ""String_Node_Str"";
        info.put(""String_Node_Str"",username);
        info.put(""String_Node_Str"",pwd);
        connection=wapperDriver.connect(url,info);
      }
 else {
        JDBCDriverLoader loader=new JDBCDriverLoader();
        list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
        if (list != null && list.size() > 0) {
          for (int i=0; i < list.size(); i++) {
            if (list.get(i) instanceof Connection) {
              connection=(Connection)list.get(i);
            }
            if (list.get(i) instanceof DriverShim) {
              wapperDriver=(DriverShim)list.get(i);
            }
          }
          DRIVER_CACHE.put(EDatabase4DriverClassName.MSSQL.getDriverClass(),wapperDriver);
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
        loadJarRequiredByDriver(dbType,dbVersion);
      }
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}",0.9971615594045068
127864,"/** 
 * DOC zshen check whether the file is exist
 */
private boolean isSqliteFileFieldInvalidate(){
  String fileFullPath=null;
  String urlText=null;
  if (isGeneralJDBC()) {
    urlText=generalJdbcUrlText.getText();
  }
 else   if (isSqlite()) {
    urlText=DBConnectionContextUtils.getUrlConnectionString(connectionItem,false);
  }
  String[] analyseURL=DatabaseConnStrUtil.analyseURL(dbTypeCombo.getText(),""String_Node_Str"",urlText);
  if (analyseURL[1] != null && analyseURL.length > 1) {
    fileFullPath=getSqliteFileFullPath(analyseURL[0],analyseURL[1]);
  }
  if (fileFullPath != null) {
    File file=new File(fileFullPath);
    if (file.exists()) {
      return false;
    }
    MessageDialog.openWarning(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",fileFullPath));
    return true;
  }
  return false;
}","/** 
 * DOC zshen check whether the file is exist
 */
private boolean isSqliteFileFieldInvalidate(){
  String fileFullPath=null;
  String urlText=null;
  if (isGeneralJDBCSqlite()) {
    urlText=generalJdbcUrlText.getText();
  }
 else   if (isSqlite()) {
    urlText=DBConnectionContextUtils.getUrlConnectionString(connectionItem,false);
  }
 else {
    return false;
  }
  String[] analyseURL=DatabaseConnStrUtil.analyseURL(dbTypeCombo.getText(),""String_Node_Str"",urlText);
  if (analyseURL[1] != null && analyseURL.length > 1) {
    fileFullPath=getSqliteFileFullPath(analyseURL[0],analyseURL[1]);
  }
  if (fileFullPath != null) {
    File file=new File(fileFullPath);
    if (file.exists()) {
      return false;
    }
    MessageDialog.openWarning(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",fileFullPath));
    return true;
  }
  return false;
}",0.9794285714285714
127865,"public ExternalModulesInstallDialog(Shell shell,String text,String title){
  super(shell);
  setShellStyle(SWT.DIALOG_TRIM | SWT.MAX | SWT.RESIZE| SWT.SYSTEM_MODAL| getDefaultOrientation());
  if (osName.contains(""String_Node_Str"")) {
    font=fontMac;
  }
  this.text=text;
  this.title=title;
}","public ExternalModulesInstallDialog(Shell shell,String text,String title){
  super(shell);
  setShellStyle(SWT.DIALOG_TRIM | SWT.MIN | SWT.MAX| SWT.RESIZE| getDefaultOrientation());
  if (osName.contains(""String_Node_Str"")) {
    font=fontMac;
  }
  this.text=text;
  this.title=title;
}",0.9502572898799314
127866,"public void initialize(String currentPerspective){
  this.currentPerspective=currentPerspective;
  nodeAndProject=new HashMap<Object,List<Project>>();
  IRepositoryNode curParentNode=null;
  String urlBranch=null;
  if (ProjectManager.getInstance().getCurrentBranchURL(project) != null) {
    urlBranch=showSVNRoot();
  }
  if (""String_Node_Str"".equals(urlBranch) || urlBranch == null) {
    curParentNode=this;
  }
 else {
    List<IRepositoryNode> root=getChildren();
    svnRootNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    svnRootNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SVN_ROOT + ""String_Node_Str"" + urlBranch+ ""String_Node_Str"");
    svnRootNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SVN_ROOT);
    if (root.contains(svnRootNode)) {
      return;
    }
    root.add(svnRootNode);
    curParentNode=svnRootNode;
  }
  List<IRepositoryNode> nodes=curParentNode.getChildren();
  recBinNode=new BinRepositoryNode(this);
  nodes.add(recBinNode);
  sqlPatternNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  sqlPatternNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SQLPATTERNS);
  sqlPatternNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SQLPATTERNS);
  nodes.add(sqlPatternNode);
  docNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  docNode.setProperties(EProperties.LABEL,ERepositoryObjectType.DOCUMENTATION);
  docNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.DOCUMENTATION);
  nodes.add(docNode);
  metadataNode=new RepositoryNode(null,this,ENodeType.STABLE_SYSTEM_FOLDER);
  metadataNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA);
  metadataNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA);
  nodes.add(metadataNode);
  if (PluginChecker.isSurvivorshipPluginLoaded() || PluginChecker.isRulesPluginLoaded() || PluginChecker.isBRMSPluginLoaded()) {
    StableRepositoryNode baseRulesNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.METADATA_RULES_ICON);
    baseRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_RULES_MANAGEMENT);
    metadataNode.getChildren().add(baseRulesNode);
    if (PluginChecker.isBRMSPluginLoaded()) {
      metadataBRMSConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataBRMSConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_BRMS);
      metadataBRMSConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_BRMS);
      baseRulesNode.getChildren().add(metadataBRMSConnectionNode);
    }
    if (PluginChecker.isRulesPluginLoaded()) {
      metadataRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_RULES);
      metadataRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_RULES);
      baseRulesNode.getChildren().add(metadataRulesNode);
    }
  }
  if (PluginChecker.isEDIFACTPluginLoaded()) {
    metadataEDIFactConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEDIFactConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_EDIFACT);
    metadataEDIFactConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_EDIFACT);
    metadataNode.getChildren().add(metadataEDIFactConnectionNode);
  }
  if (PluginChecker.isRefProjectLoaded() && getParent() != this && project != null && project.getEmfProject().getReferencedProjects().size() > 0) {
    refProject=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    refProject.setProperties(EProperties.LABEL,ERepositoryObjectType.REFERENCED_PROJECTS);
    refProject.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
    nodes.add(refProject);
  }
  initExtensionRepositoryNodes(curParentNode);
  deleteHiddenNodes(nodes);
  try {
    hideHiddenNodesDependsUserRight();
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  collectRepositoryNodes(curParentNode);
}","public void initialize(String currentPerspective){
  this.currentPerspective=currentPerspective;
  nodeAndProject=new HashMap<Object,List<Project>>();
  IRepositoryNode curParentNode=null;
  String urlBranch=null;
  if (ProjectManager.getInstance().getCurrentBranchURL(project) != null) {
    urlBranch=showSVNRoot();
  }
  if (""String_Node_Str"".equals(urlBranch) || urlBranch == null) {
    curParentNode=this;
  }
 else {
    List<IRepositoryNode> root=getChildren();
    svnRootNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    svnRootNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SVN_ROOT + ""String_Node_Str"" + urlBranch+ ""String_Node_Str"");
    svnRootNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SVN_ROOT);
    if (root.contains(svnRootNode)) {
      return;
    }
    root.add(svnRootNode);
    curParentNode=svnRootNode;
  }
  List<IRepositoryNode> nodes=curParentNode.getChildren();
  recBinNode=new BinRepositoryNode(this);
  nodes.add(recBinNode);
  sqlPatternNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  sqlPatternNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SQLPATTERNS);
  sqlPatternNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SQLPATTERNS);
  nodes.add(sqlPatternNode);
  docNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  docNode.setProperties(EProperties.LABEL,ERepositoryObjectType.DOCUMENTATION);
  docNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.DOCUMENTATION);
  nodes.add(docNode);
  metadataNode=new RepositoryNode(null,this,ENodeType.STABLE_SYSTEM_FOLDER);
  metadataNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA);
  metadataNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA);
  nodes.add(metadataNode);
  if (PluginChecker.isSurvivorshipPluginLoaded() || PluginChecker.isRulesPluginLoaded() || PluginChecker.isBRMSPluginLoaded()) {
    StableRepositoryNode baseRulesNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.METADATA_RULES_ICON);
    baseRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_RULES_MANAGEMENT);
    metadataNode.getChildren().add(baseRulesNode);
    if (PluginChecker.isBRMSPluginLoaded()) {
      metadataBRMSConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataBRMSConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_BRMS);
      metadataBRMSConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_BRMS);
      baseRulesNode.getChildren().add(metadataBRMSConnectionNode);
    }
    if (PluginChecker.isRulesPluginLoaded()) {
      metadataRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_RULES);
      metadataRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_RULES);
      baseRulesNode.getChildren().add(metadataRulesNode);
    }
  }
  if (PluginChecker.isRefProjectLoaded() && getParent() != this && project != null && project.getEmfProject().getReferencedProjects().size() > 0) {
    refProject=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    refProject.setProperties(EProperties.LABEL,ERepositoryObjectType.REFERENCED_PROJECTS);
    refProject.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
    nodes.add(refProject);
  }
  initExtensionRepositoryNodes(curParentNode);
  deleteHiddenNodes(nodes);
  try {
    hideHiddenNodesDependsUserRight();
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  collectRepositoryNodes(curParentNode);
}",0.8846737481031867
127867,"/** 
 * Sets the name.
 * @param name the name to set
 */
public void setName(String name){
  this.name=name;
}","/** 
 * Sets the name.
 * @param name the name to set
 */
@Override public void setName(String name){
  this.name=name;
}",0.956896551724138
127868,"/** 
 * Getter for name.
 * @return the name
 */
public String getName(){
  return this.name;
}","/** 
 * Getter for name.
 * @return the name
 */
@Override public String getName(){
  return this.name;
}",0.95
127869,"public List<ContextItem> getContextItem(Project project) throws PersistenceException {
  List<ContextItem> result=new ArrayList<ContextItem>();
  for (  IRepositoryViewObject repositoryObject : getMetadata(project,ERepositoryObjectType.CONTEXT).getAbsoluteMembers().objects()) {
    ContextItem contextItem=(ContextItem)repositoryObject.getProperty().getItem();
    if (getStatus(contextItem) != ERepositoryStatus.DELETED) {
      result.add(contextItem);
    }
  }
  return result;
}","@Override public List<ContextItem> getContextItem(Project project) throws PersistenceException {
  List<ContextItem> result=new ArrayList<ContextItem>();
  for (  IRepositoryViewObject repositoryObject : getMetadata(project,ERepositoryObjectType.CONTEXT).getAbsoluteMembers().objects()) {
    ContextItem contextItem=(ContextItem)repositoryObject.getProperty().getItem();
    if (getStatus(contextItem) != ERepositoryStatus.DELETED) {
      result.add(contextItem);
    }
  }
  return result;
}",0.9897750511247444
127870,"public String getId(){
  return this.id;
}","@Override public String getId(){
  return this.id;
}",0.8936170212765957
127871,"@SuppressWarnings(""String_Node_Str"") public void executeRepositoryWorkUnit(RepositoryWorkUnit workUnit){
  workUnit.executeRun();
}","@Override @SuppressWarnings(""String_Node_Str"") public void executeRepositoryWorkUnit(RepositoryWorkUnit workUnit){
  workUnit.executeRun();
}",0.9632352941176472
127872,"public void logOffProject(){
  loggedOnProject=false;
  listeners.clear();
}","@Override public void logOffProject(){
  ProjectManager.getInstance().clearAll();
  unloadResources();
  loggedOnProject=false;
  listeners.clear();
}",0.672566371681416
127873,"/** 
 * Sets the authenticationNeeded.
 * @param authenticationNeeded the authenticationNeeded to set
 */
public void setAuthenticationNeeded(boolean authenticationNeeded){
  this.authenticationNeeded=authenticationNeeded;
}","/** 
 * Sets the authenticationNeeded.
 * @param authenticationNeeded the authenticationNeeded to set
 */
@Override public void setAuthenticationNeeded(boolean authenticationNeeded){
  this.authenticationNeeded=authenticationNeeded;
}",0.9781659388646288
127874,"/** 
 * Getter for authenticationNeeded.
 * @return the authenticationNeeded
 */
public boolean isAuthenticationNeeded(){
  return this.authenticationNeeded;
}","/** 
 * Getter for authenticationNeeded.
 * @return the authenticationNeeded
 */
@Override public boolean isAuthenticationNeeded(){
  return this.authenticationNeeded;
}",0.9695121951219512
127875,"public void setId(String id){
  this.id=id;
}","@Override public void setId(String id){
  this.id=id;
}",0.9
127876,"public void addRepositoryWorkUnitListener(IRepositoryWorkUnitListener listener){
synchronized (lock) {
    listeners.add(listener);
  }
}","@Override public void addRepositoryWorkUnitListener(IRepositoryWorkUnitListener listener){
synchronized (lock) {
    listeners.add(listener);
  }
}",0.9647887323943662
127877,"public Project[] readProject(boolean unloadResource) throws PersistenceException, BusinessException {
  return readProject();
}","@Override public Project[] readProject(boolean unloadResource) throws PersistenceException, BusinessException {
  return readProject();
}",0.9621212121212122
127878,"public List<DynamicButtonBean> getButtons(){
  return buttons;
}","@Override public List<DynamicButtonBean> getButtons(){
  return buttons;
}",0.927536231884058
127879,"public List<DynamicChoiceBean> getChoices(){
  return choices;
}","@Override public List<DynamicChoiceBean> getChoices(){
  return choices;
}",0.927536231884058
127880,"public void setFields(List<DynamicFieldBean> fields){
  this.fields=fields;
}","@Override public void setFields(List<DynamicFieldBean> fields){
  this.fields=fields;
}",0.9390243902439024
127881,"public void checkAvailability(){
}","@Override public void checkAvailability(){
}",0.8717948717948718
127882,"public List<ConnectionItem> getMetadataConnectionsItem(Project project) throws PersistenceException {
  List<ConnectionItem> result=new ArrayList<ConnectionItem>();
  collect(getMetadata(project,ERepositoryObjectType.METADATA_FILE_DELIMITED),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_FILE_POSITIONAL),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_FILE_REGEXP),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_FILE_XML),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_FILE_EXCEL),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_FILE_LDIF),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_CONNECTIONS),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_SAPCONNECTIONS),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_HEADER_FOOTER),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_LDAP_SCHEMA),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_GENERIC_SCHEMA),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_WSDL_SCHEMA),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA),result);
  return result;
}","@Override public List<ConnectionItem> getMetadataConnectionsItem(Project project) throws PersistenceException {
  List<ConnectionItem> result=new ArrayList<ConnectionItem>();
  collect(getMetadata(project,ERepositoryObjectType.METADATA_FILE_DELIMITED),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_FILE_POSITIONAL),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_FILE_REGEXP),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_FILE_XML),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_FILE_EXCEL),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_FILE_LDIF),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_CONNECTIONS),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_SAPCONNECTIONS),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_HEADER_FOOTER),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_LDAP_SCHEMA),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_GENERIC_SCHEMA),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_WSDL_SCHEMA),result);
  collect(getMetadata(project,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA),result);
  return result;
}",0.9960998439937596
127883,"public List<DynamicFieldBean> getFields(){
  return this.fields;
}","@Override public List<DynamicFieldBean> getFields(){
  return this.fields;
}",0.9295774647887324
127884,"public boolean isUserReadOnlyOnCurrentProject(){
  return false;
}","@Override public boolean isUserReadOnlyOnCurrentProject(){
  return false;
}",0.9295774647887324
127885,"/** 
 * Generates the next id for serializable. If no serializable returns 0.
 * @param project the project to scan
 * @return the next id for the project
 * @throws PersistenceException
 * @throws PersistenceException if processes cannot be retrieved
 */
public String getNextId(){
  return EcoreUtil.generateUUID();
}","/** 
 * Generates the next id for serializable. If no serializable returns 0.
 * @param project the project to scan
 * @return the next id for the project
 * @throws PersistenceException
 * @throws PersistenceException if processes cannot be retrieved
 */
@Override public String getNextId(){
  return EcoreUtil.generateUUID();
}",0.984567901234568
127886,"public boolean isDisplayToUser(){
  return displayToUser;
}","@Override public boolean isDisplayToUser(){
  return displayToUser;
}",0.921875
127887,"public void setDisplayToUser(boolean displayToUser){
  this.displayToUser=displayToUser;
}","@Override public void setDisplayToUser(boolean displayToUser){
  this.displayToUser=displayToUser;
}",0.9473684210526316
127888,"/** 
 * return all the referenced projects of current project.
 */
public List<Project> getAllReferencedProjects(){
  allReferencedprojects.clear();
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
    if (factory != null) {
      List<org.talend.core.model.properties.Project> rProjects=factory.getReferencedProjects(this.getCurrentProject());
      if (rProjects != null) {
        for (        org.talend.core.model.properties.Project p : rProjects) {
          Project project=new Project(p);
          allReferencedprojects.add(project);
          resolveSubRefProject(p);
        }
      }
    }
  }
  return this.allReferencedprojects;
}","/** 
 * return all the referenced projects of current project.
 */
public List<Project> getAllReferencedProjects(){
  allReferencedprojects.clear();
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    if (this.getCurrentProject() == null) {
      return allReferencedprojects;
    }
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
    if (factory != null) {
      List<org.talend.core.model.properties.Project> rProjects=factory.getReferencedProjects(this.getCurrentProject());
      if (rProjects != null) {
        for (        org.talend.core.model.properties.Project p : rProjects) {
          Project project=new Project(p);
          allReferencedprojects.add(project);
          resolveSubRefProject(p);
        }
      }
    }
  }
  return this.allReferencedprojects;
}",0.9544973544973544
127889,"public static String getHiveURLString(DatabaseConnection dbConn,String server,String port,String sidOrDatabase){
  String hiveModel=dbConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  String url=dbConn.getURL();
  if (url != null) {
    if (url.startsWith(DbConnStrForHive.URL_HIVE_2_TEMPLATE)) {
      if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equalsIgnoreCase(hiveModel)) {
        url=getHive2EmbeddedURLString();
      }
 else {
        url=getHive2StandaloneURLString(false,server,port,sidOrDatabase);
      }
    }
 else     if (url.startsWith(DbConnStrForHive.URL_HIVE_1_TEMPLATE)) {
      if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equalsIgnoreCase(hiveModel)) {
        url=getHive1EmbeddedURLString();
      }
 else {
        url=getHive1StandaloneURLString(false,server,port,sidOrDatabase);
      }
    }
 else {
      url=getHive1EmbeddedURLString();
    }
  }
 else {
    url=getHive1EmbeddedURLString();
  }
  return url;
}","public static String getHiveURLString(DatabaseConnection dbConn,String server,String port,String sidOrDatabase,String template){
  String hiveModel=dbConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  String url=null;
  if (template.startsWith(DbConnStrForHive.URL_HIVE_2_TEMPLATE)) {
    if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equalsIgnoreCase(hiveModel)) {
      url=getHive2EmbeddedURLString();
    }
 else {
      url=getHive2StandaloneURLString(false,server,port,sidOrDatabase);
    }
  }
 else   if (template.startsWith(DbConnStrForHive.URL_HIVE_1_TEMPLATE)) {
    if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equalsIgnoreCase(hiveModel)) {
      url=getHive1EmbeddedURLString();
    }
 else {
      url=getHive1StandaloneURLString(false,server,port,sidOrDatabase);
    }
  }
  if (url == null) {
    url=getHive1EmbeddedURLString();
  }
  return url;
}",0.5323275862068966
127890,"/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  if (contextType != null) {
    String encryptedPassword=null;
    try {
      encryptedPassword=PasswordEncryptUtil.encryptPassword(password);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    cloneConn.setPassword(encryptedPassword);
  }
 else {
    cloneConn.setPassword(password);
  }
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURl=DatabaseConnStrUtil.getHiveURLString(dbConn,server,port,sidOrDatabase);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}","/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  if (contextType != null) {
    String encryptedPassword=null;
    try {
      encryptedPassword=PasswordEncryptUtil.encryptPassword(password);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    cloneConn.setPassword(encryptedPassword);
  }
 else {
    cloneConn.setPassword(password);
  }
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String template=null;
    if (dbConn.getURL() != null && dbConn.getURL().startsWith(DbConnStrForHive.URL_HIVE_2_TEMPLATE)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(dbConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}",0.9727385377943
127891,"/** 
 * ggu Comment method ""getUrlConnectionString"". if display is false, the string connection will be returned by default context.
 */
public static String getUrlConnectionString(ConnectionItem connectionItem,boolean defaultContext){
  if (connectionItem == null) {
    return null;
  }
  DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(dbConn,defaultContext);
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String jdbcUrl=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String driverJar=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  String mappingFile=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    return DatabaseConnStrUtil.getHiveURLString(dbConn,server,port,sidOrDatabase);
  }
  String newUrl=DatabaseConnStrUtil.getURLString(dbConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam,jdbcUrl,driverJar,className,mappingFile);
  return newUrl;
}","/** 
 * ggu Comment method ""getUrlConnectionString"". if display is false, the string connection will be returned by default context.
 */
public static String getUrlConnectionString(ConnectionItem connectionItem,boolean defaultContext){
  if (connectionItem == null) {
    return null;
  }
  DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(dbConn,defaultContext);
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String jdbcUrl=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String driverJar=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  String mappingFile=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String template=null;
    if (dbConn.getURL() != null && dbConn.getURL().startsWith(DbConnStrForHive.URL_HIVE_2_TEMPLATE)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    return DatabaseConnStrUtil.getHiveURLString(dbConn,server,port,sidOrDatabase,template);
  }
  String newUrl=DatabaseConnStrUtil.getURLString(dbConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam,jdbcUrl,driverJar,className,mappingFile);
  return newUrl;
}",0.8302186878727634
127892,"/** 
 * Set up the URL by checking the current hive mode. Added by Marvin Wang on Sep 4, 2012.
 * @return
 */
private String getStringConnection(){
  String s=null;
  String versionStr=dbVersionCombo.getText();
  if (isContextMode()) {
    s=DBConnectionContextUtils.getUrlConnectionString(connectionItem,true);
  }
 else {
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      s=DatabaseConnStrUtil.getHiveURLString(getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID());
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
      s=DatabaseConnStrUtil.getURLString(dbTypeCombo.getText(),versionStr,serverText.getText(),usernameText.getText(),passwordText.getText(),portText.getText(),sidOrDatabaseText.getText(),fileField.getText(),datasourceText.getText(),directoryField.getText(),additionParamText.getText());
    }
  }
  return s;
}","/** 
 * Set up the URL by checking the current hive mode. Added by Marvin Wang on Sep 4, 2012.
 * @return
 */
private String getStringConnection(){
  String s=null;
  String versionStr=dbVersionCombo.getText();
  if (isContextMode()) {
    s=DBConnectionContextUtils.getUrlConnectionString(connectionItem,true);
  }
 else {
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      String template=null;
      if (HiveServerVersionInfo.HIVE_SERVER_2.getDisplayName().equals(hiveServerVersionCombo.getText())) {
        template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
      }
 else {
        template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
      }
      s=DatabaseConnStrUtil.getHiveURLString(getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID(),template);
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
      s=DatabaseConnStrUtil.getURLString(dbTypeCombo.getText(),versionStr,serverText.getText(),usernameText.getText(),passwordText.getText(),portText.getText(),sidOrDatabaseText.getText(),fileField.getText(),datasourceText.getText(),directoryField.getText(),additionParamText.getText());
    }
  }
  return s;
}",0.8640533778148457
127893,"public static String getHiveURLString(DatabaseConnection dbConn,String server,String port,String sidOrDatabase){
  String hiveModel=dbConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  String url=dbConn.getURL();
  if (url != null) {
    if (url.startsWith(DbConnStrForHive.URL_HIVE_2_TEMPLATE)) {
      if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equalsIgnoreCase(hiveModel)) {
        url=getHive2EmbeddedURLString();
      }
 else {
        url=getHive2StandaloneURLString(false,server,port,sidOrDatabase);
      }
    }
 else     if (url.startsWith(DbConnStrForHive.URL_HIVE_1_TEMPLATE)) {
      if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equalsIgnoreCase(hiveModel)) {
        url=getHive1EmbeddedURLString();
      }
 else {
        url=getHive1StandaloneURLString(false,server,port,sidOrDatabase);
      }
    }
  }
 else {
    url=getHive1EmbeddedURLString();
  }
  return url;
}","public static String getHiveURLString(DatabaseConnection dbConn,String server,String port,String sidOrDatabase){
  String hiveModel=dbConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  String url=dbConn.getURL();
  if (url != null) {
    if (url.startsWith(DbConnStrForHive.URL_HIVE_2_TEMPLATE)) {
      if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equalsIgnoreCase(hiveModel)) {
        url=getHive2EmbeddedURLString();
      }
 else {
        url=getHive2StandaloneURLString(false,server,port,sidOrDatabase);
      }
    }
 else     if (url.startsWith(DbConnStrForHive.URL_HIVE_1_TEMPLATE)) {
      if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equalsIgnoreCase(hiveModel)) {
        url=getHive1EmbeddedURLString();
      }
 else {
        url=getHive1StandaloneURLString(false,server,port,sidOrDatabase);
      }
    }
 else {
      url=getHive1EmbeddedURLString();
    }
  }
 else {
    url=getHive1EmbeddedURLString();
  }
  return url;
}",0.9718234981392876
127894,"@Override public void doRun(){
  if (this.repositoryNode == null) {
    repositoryNode=getCurrentRepositoryNode();
  }
  if (isToolbar()) {
    if (repositoryNode != null && repositoryNode.getContentType() != ERepositoryObjectType.METADATA_CONNECTIONS) {
      repositoryNode=null;
    }
    if (repositoryNode == null) {
      repositoryNode=getRepositoryNodeForDefault(ERepositoryObjectType.METADATA_CONNECTIONS);
    }
  }
  RepositoryNode metadataNode=repositoryNode.getParent();
  if (metadataNode != null) {
    IRepositoryView viewPart=getViewPart();
    if (viewPart != null) {
      viewPart.setFocus();
      viewPart.expand(metadataNode,true);
      viewPart.expand(repositoryNode,true);
    }
  }
  DatabaseConnection connection=null;
  IPath pathToSave=null;
  if (repositoryNode.getObject() != null && repositoryNode.getObject().getClass().equals(RepositoryObject.class)) {
    try {
      ((RepositoryObject)repositoryNode.getObject()).setProperty(ProxyRepositoryFactory.getInstance().getUptodateProperty(repositoryNode.getObject().getProperty()));
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
  RepositoryNode node=repositoryNode;
  boolean creation=false;
switch (node.getType()) {
case REPOSITORY_ELEMENT:
    connection=(DatabaseConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
  creation=false;
break;
case SIMPLE_FOLDER:
pathToSave=RepositoryNodeUtilities.getPath(node);
connection=ConnectionFactory.eINSTANCE.createDatabaseConnection();
creation=true;
break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
connection=ConnectionFactory.eINSTANCE.createDatabaseConnection();
creation=true;
break;
}
if (!creation) {
Property property=node.getObject().getProperty();
Property updatedProperty=null;
if (getNeededVersion() == null) {
}
 else {
try {
updatedProperty=ProxyRepositoryFactory.getInstance().getUptodateProperty(new Project(ProjectManager.getInstance().getProject(property.getItem())),property);
}
 catch (PersistenceException e) {
ExceptionHandler.process(e);
}
}
}
DatabaseWizard databaseWizard;
if (isToolbar()) {
databaseWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,node,getExistingNames());
databaseWizard.setToolBar(true);
}
 else {
databaseWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,node,getExistingNames());
}
if (!creation) {
RepositoryManager.refreshSavedNode(node);
}
WizardDialog wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),databaseWizard);
wizardDialog.setPageSize(600,540);
wizardDialog.create();
wizardDialog.open();
connItem=databaseWizard.getConnectionItem();
RepositoryManager.refreshSavedNode(node);
}","@Override public void doRun(){
  if (this.repositoryNode == null) {
    repositoryNode=getCurrentRepositoryNode();
  }
  if (isToolbar()) {
    if (repositoryNode != null && repositoryNode.getContentType() != ERepositoryObjectType.METADATA_CONNECTIONS) {
      repositoryNode=null;
    }
    if (repositoryNode == null) {
      repositoryNode=getRepositoryNodeForDefault(ERepositoryObjectType.METADATA_CONNECTIONS);
    }
  }
  RepositoryNode metadataNode=repositoryNode.getParent();
  if (metadataNode != null) {
    IRepositoryView viewPart=getViewPart();
    if (viewPart != null) {
      viewPart.setFocus();
      viewPart.expand(metadataNode,true);
      viewPart.expand(repositoryNode,true);
    }
  }
  DatabaseConnection connection=null;
  IPath pathToSave=null;
  if (repositoryNode.getObject() != null && repositoryNode.getObject().getClass().equals(RepositoryObject.class)) {
    try {
      ((RepositoryObject)repositoryNode.getObject()).setProperty(ProxyRepositoryFactory.getInstance().getUptodateProperty(repositoryNode.getObject().getProperty()));
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
  RepositoryNode node=repositoryNode;
  boolean creation=false;
switch (node.getType()) {
case REPOSITORY_ELEMENT:
    connection=(DatabaseConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
  creation=false;
break;
case SIMPLE_FOLDER:
pathToSave=RepositoryNodeUtilities.getPath(node);
connection=ConnectionFactory.eINSTANCE.createDatabaseConnection();
creation=true;
break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
connection=ConnectionFactory.eINSTANCE.createDatabaseConnection();
creation=true;
break;
}
if (!creation) {
Property property=node.getObject().getProperty();
Property updatedProperty=null;
if (getNeededVersion() == null) {
}
 else {
try {
updatedProperty=ProxyRepositoryFactory.getInstance().getUptodateProperty(new Project(ProjectManager.getInstance().getProject(property.getItem())),property);
}
 catch (PersistenceException e) {
ExceptionHandler.process(e);
}
}
}
DatabaseWizard databaseWizard;
if (isToolbar()) {
databaseWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,node,getExistingNames());
databaseWizard.setToolBar(true);
}
 else {
databaseWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,node,getExistingNames());
}
if (!creation) {
RepositoryManager.refreshSavedNode(node);
}
WizardDialog wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),databaseWizard);
wizardDialog.setPageSize(780,540);
wizardDialog.create();
wizardDialog.open();
connItem=databaseWizard.getConnectionItem();
RepositoryManager.refreshSavedNode(node);
}",0.9992595335061089
127895,"/** 
 * The contents only show up when the current db type is hive and hive mode is embedded. Contents include name node url and job tracker url. Added by Marvin Wang on Oct. 15, 2012.
 * @param parent
 */
private void createHadoopUIContentsForHiveEmbedded(Composite parent){
  GridLayout layout2=(GridLayout)parent.getLayout();
  hadoopPropGrp=new Group(parent,SWT.NONE);
  hadoopPropGrp.setText(Messages.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(layout2.numColumns,1).applyTo(hadoopPropGrp);
  hadoopPropGrp.setLayout(new GridLayout(2,false));
  nameNodeURLTxt=new LabelledText(hadoopPropGrp,Messages.getString(""String_Node_Str""),1);
  jobTrackerURLTxt=new LabelledText(hadoopPropGrp,Messages.getString(""String_Node_Str""),1);
  setHideHadoopInfoWidgets(true);
}","/** 
 * The contents only show up when the current db type is hive and hive mode is embedded. Contents include name node url and job tracker url. Added by Marvin Wang on Oct. 15, 2012.
 * @param parent
 */
private void createHadoopUIContentsForHiveEmbedded(Composite parent){
  GridLayout layout2=(GridLayout)parent.getLayout();
  hadoopPropGrp=new Group(parent,SWT.NONE);
  hadoopPropGrp.setText(Messages.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(layout2.numColumns,1).applyTo(hadoopPropGrp);
  GridLayout layout=new GridLayout(2,false);
  layout.marginHeight=0;
  hadoopPropGrp.setLayout(layout);
  nameNodeURLTxt=new LabelledText(hadoopPropGrp,Messages.getString(""String_Node_Str""),1);
  jobTrackerURLTxt=new LabelledText(hadoopPropGrp,Messages.getString(""String_Node_Str""),1);
  setHideHadoopInfoWidgets(true);
}",0.9381506429883648
127896,"/** 
 * Ensures that fields are set. Update checkEnable / use to checkConnection().
 */
@Override public boolean checkFieldsValue(){
  boolean checkGeneralDB=isGeneralJDBC();
  if (!checkGeneralDB || dbTypeCombo.getText().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName())) {
    getConnection().setURL(getStringConnection());
  }
  boolean isTeradata=EDatabaseTypeName.TERADATA.getDisplayName().equals(dbTypeCombo.getText());
  sqlModeLabel.setVisible(isTeradata);
  button1.setVisible(isTeradata);
  button2.setVisible(isTeradata);
  if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
    if (!isSupportByTDQ()) {
      updateStatus(IStatus.WARNING,""String_Node_Str"");
      return false;
    }
  }
  if (isContextMode()) {
    return true;
  }
  databaseSettingIsValide=false;
  urlConnectionStringText.setText(getStringConnection());
  checkURLIsChanged();
  EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
  if (template != null) {
    EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersion(getConnection().getDbVersionString());
    urlConnectionStringText.setToolTipText(template.getUrlTemplate(version));
  }
  updateCheckButton();
  if (!isModify) {
    setPropertiesFormEditable(false);
  }
  if (dbTypeCombo.getSelectionIndex() < 0) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str"",dbTypeCombo.getLabel()));
    return false;
  }
  if (!isModify) {
    setPropertiesFormEditable(true);
  }
  if (!checkGeneralDB) {
    if (!checkTypeDBFieldValues()) {
      return false;
    }
  }
 else {
    if (!checkGeneralDBFieldValues()) {
      return false;
    }
  }
  if (isDBTypeSelected(EDatabaseConnTemplate.HBASE) && !checkHBaseSettings()) {
    return false;
  }
  if (!databaseSettingIsValide) {
    updateStatus(IStatus.INFO,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (sqlSyntaxCombo.getSelectionIndex() == -1) {
    updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str"",sqlSyntaxCombo.getLabel()));
    return false;
  }
  if (nullCharText.getCharCount() == 0) {
    updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str"",nullCharText.getLabelText()));
    return false;
  }
  if (stringQuoteText.getCharCount() == 0) {
    updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str"",stringQuoteText.getLabelText()));
    return false;
  }
  updateStatus(IStatus.OK,null);
  return true;
}","/** 
 * Ensures that fields are set. Update checkEnable / use to checkConnection().
 */
@Override public boolean checkFieldsValue(){
  boolean checkGeneralDB=isGeneralJDBC();
  if (!checkGeneralDB || dbTypeCombo.getText().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName())) {
    getConnection().setURL(getStringConnection());
  }
  boolean isTeradata=EDatabaseTypeName.TERADATA.getDisplayName().equals(dbTypeCombo.getText());
  sqlModeLabel.setVisible(isTeradata);
  button1.setVisible(isTeradata);
  button2.setVisible(isTeradata);
  if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
    if (!isSupportByTDQ()) {
      updateStatus(IStatus.WARNING,""String_Node_Str"");
      return false;
    }
  }
  if (isContextMode()) {
    return true;
  }
  databaseSettingIsValide=false;
  urlConnectionStringText.setText(getStringConnection());
  checkURLIsChanged();
  EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
  if (template != null) {
    EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersion(getConnection().getDbVersionString());
    urlConnectionStringText.setToolTipText(template.getUrlTemplate(version));
  }
  updateCheckButton();
  if (dbTypeCombo.getSelectionIndex() < 0) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str"",dbTypeCombo.getLabel()));
    return false;
  }
  if (!checkGeneralDB) {
    if (!checkTypeDBFieldValues()) {
      return false;
    }
  }
 else {
    if (!checkGeneralDBFieldValues()) {
      return false;
    }
  }
  if (isDBTypeSelected(EDatabaseConnTemplate.HBASE) && !checkHBaseSettings()) {
    return false;
  }
  if (!databaseSettingIsValide) {
    updateStatus(IStatus.INFO,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (sqlSyntaxCombo.getSelectionIndex() == -1) {
    updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str"",sqlSyntaxCombo.getLabel()));
    return false;
  }
  if (nullCharText.getCharCount() == 0) {
    updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str"",nullCharText.getLabelText()));
    return false;
  }
  if (stringQuoteText.getCharCount() == 0) {
    updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str"",stringQuoteText.getLabelText()));
    return false;
  }
  updateStatus(IStatus.OK,null);
  return true;
}",0.975005164222268
127897,"/** 
 * Check DBType is AS400,set systemButton and stardardButton visible.a
 */
private void checkDBTypeAS400(){
  if (dbTypeCombo.getSelectionIndex() == 16 || dbTypeCombo.getSelectionIndex() == 25 || dbTypeCombo.getSelectionIndex() == 26) {
    standardButton.setVisible(true);
    systemButton.setVisible(true);
  }
 else {
    standardButton.setVisible(false);
    systemButton.setVisible(false);
  }
}","/** 
 * Check DBType is AS400,set systemButton and stardardButton visible.a
 */
private void checkDBTypeAS400(){
  if (isDBTypeSelected(EDatabaseConnTemplate.AS400)) {
    standardButton.setVisible(true);
    systemButton.setVisible(true);
  }
 else {
    standardButton.setVisible(false);
    systemButton.setVisible(false);
  }
}",0.4239130434782608
127898,"/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  Listener listener=new Listener(){
    @Override public void handleEvent(    final Event e){
      if (isContextMode()) {
      }
 else {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
        setPropertiesFormEditable(dbTypeCombo.getSelectionIndex() > -1);
        urlConnectionStringText.setEditable(false);
      }
    }
  }
;
  usernameText.addListener(SWT.FocusIn,listener);
  passwordText.addListener(SWT.FocusIn,listener);
  serverText.addListener(SWT.FocusIn,listener);
  portText.addListener(SWT.FocusIn,listener);
  sidOrDatabaseText.addListener(SWT.FocusIn,listener);
  datasourceText.addListener(SWT.FocusIn,listener);
  schemaText.addListener(SWT.FocusIn,listener);
  additionParamText.addListener(SWT.FocusIn,listener);
  urlConnectionStringText.addListener(SWT.FocusIn,listener);
  mappingFileText.addListener(SWT.FocusIn,listener);
  serverText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setServerName(serverText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setPort(portText.getText());
          modifyFieldValue();
        }
        boolean b=true;
        String databaseType=getConnection().getDatabaseType();
        if (databaseType != null) {
          if (databaseType.equals(""String_Node_Str"")) {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
 else {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
        }
        if (b) {
          b=portText.getText().length() <= 5;
        }
        evaluateTextField(b);
      }
    }
  }
);
  portText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (!Character.isLetterOrDigit(e.character) && !Character.isIdentifierIgnorable(e.character)) {
        e.doit=false;
      }
    }
  }
);
  usernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUsername(usernameText.getText());
        }
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          try {
            String password=PasswordEncryptUtil.encryptPassword(passwordText.getText());
            getConnection().setPassword(password);
          }
 catch (          Exception ex) {
            ExceptionHandler.process(ex);
          }
        }
      }
    }
  }
);
  sidOrDatabaseText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setSID(sidOrDatabaseText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  datasourceText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setDatasourceName(datasourceText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUiSchema(schemaText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      if (!isContextMode()) {
        if (originalUischema != null) {
          if (!originalUischema.equalsIgnoreCase(schemaText.getText())) {
            ConnectionHelper.setIsConnNeedReload(getConnection(),Boolean.TRUE);
          }
 else {
            checkURLIsChanged();
          }
        }
      }
    }
  }
);
  dbVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        if (version != null) {
          getConnection().setDbVersionString(version.getVersionValue());
        }
        urlConnectionStringText.setText(getStringConnection());
        checkFieldsValue();
      }
    }
  }
);
  hideDbVersion();
  additionParamText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setAdditionalParams(additionParamText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  standardButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  systemButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  button1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(button1.getSelection());
      }
    }
  }
);
  button2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(!button2.getSelection());
      }
    }
  }
);
  dbTypeCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().clear();
      boolean isGeneralJDBC=isGeneralJDBC();
      if (isGeneralJDBC) {
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(""String_Node_Str"");
        }
        if (generalJdbcUserText != null) {
          generalJdbcUserText.setText(""String_Node_Str"");
        }
        if (generalJdbcPasswordText != null) {
          generalJdbcPasswordText.setText(""String_Node_Str"");
        }
      }
 else       if (isHiveDBConnSelected()) {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
        initHiveInfo();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.HBASE)) {
        initHBaseSettings();
      }
 else {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
      }
      if (schemaText != null) {
        schemaText.setText(""String_Node_Str"");
      }
      if (serverText != null) {
        serverText.setText(""String_Node_Str"");
      }
      if (sidOrDatabaseText != null) {
        sidOrDatabaseText.setText(""String_Node_Str"");
      }
      if (portText != null && portText.getText() != null) {
        portText.setText(""String_Node_Str"");
      }
      if (fileField != null) {
        fileField.setText(""String_Node_Str"");
      }
      if (datasourceText != null) {
        datasourceText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (generalJdbcClassNameText != null) {
        generalJdbcClassNameText.setText(""String_Node_Str"");
      }
      if (generalJdbcDriverjarText != null) {
        generalJdbcDriverjarText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (mappingFileText != null) {
        mappingFileText.setText(""String_Node_Str"");
      }
      boolean hiddenGeneral=!isGeneralJDBC();
      switchBetweenTypeandGeneralDB(hiddenGeneral);
      if (!isContextMode()) {
        setPropertiesFormEditable(true);
        getConnection().setDatabaseType(dbTypeCombo.getText());
        EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
        if (template != null) {
          portText.setText(template.getDefaultPort());
        }
        final String product=EDatabaseTypeName.getTypeFromDisplayName(getConnection().getDatabaseType()).getProduct();
        getConnection().setProductId(product);
        String mapping=null;
        if (product == null || product.equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          mapping=generalMappingFileText.getText();
        }
 else {
          if (MetadataTalendType.getDefaultDbmsFromProduct(product) != null) {
            mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
          }
        }
        if (mapping == null) {
          mapping=""String_Node_Str"";
        }
        getConnection().setDbmsId(mapping);
        additionParamText.setText(EDatabaseConnTemplate.getAdditionProperty(dbTypeCombo.getText()));
        if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
          datasourceText.setLabelText(Messages.getString(""String_Node_Str""));
        }
        checkAndSetIniSQLModel();
        checkAS400SpecificCase();
        checkFieldsValue();
        hideDbVersion();
        if (!schemaText.getEditable()) {
          schemaText.setText(""String_Node_Str"");
        }
        if (isHiveDBConnSelected()) {
          doHiveDBTypeSelected();
        }
 else {
          doHiveDBTypeNotSelected();
        }
      }
      if (isHiveDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      }
 else {
        checkScrolledCompositeSize();
      }
      if (!isDBTypeSelected(EDatabaseConnTemplate.HBASE) && !isDBTypeSelected(EDatabaseConnTemplate.HIVE)) {
        clearHadoopRelatedParameters();
      }
    }
  }
);
  dbTypeCombo.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (dbTypeCombo.getSelectionIndex() > -1) {
        if (Character.isLetterOrDigit(e.character)) {
          e.doit=false;
        }
      }
    }
  }
);
  fileField.addListener(SWT.FocusIn,new Listener(){
    @Override public void handleEvent(    final Event e){
      if (!isContextMode()) {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
 else {
          EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
          EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(getConnection().getDbVersionString());
          if (template != null && template.getUrlTemplate(version).contains(EDatabaseConnVar.FILENAME.getVariable())) {
            setPropertiesFormEditable(true);
            urlConnectionStringText.setEditable(false);
          }
          getConnection().setFileFieldName(PathUtils.getPortablePath(fileField.getText()));
        }
      }
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setFileFieldName(fileField.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  directoryField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          String text=directoryField.getText();
          getConnection().setDBRootPath(text);
          checkFieldsValue();
        }
      }
    }
  }
);
  sqlSyntaxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setSqlSynthax(sqlSyntaxCombo.getText());
      }
    }
  }
);
  nullCharText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setNullChar(nullCharText.getText());
      }
    }
  }
);
  stringQuoteText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setStringQuote(stringQuoteText.getText());
      }
    }
  }
);
  addGeneralDbFieldsListeners();
  addHBaseSettingFieldsListeners();
  regHiveRelatedWidgetsListeners();
  if (canLinkToHadoopCluster()) {
    addHadoopClusterLinkListeners();
  }
}","/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  Listener listener=new Listener(){
    @Override public void handleEvent(    final Event e){
      if (isContextMode()) {
      }
 else {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
        setPropertiesFormEditable(dbTypeCombo.getSelectionIndex() > -1);
        urlConnectionStringText.setEditable(false);
      }
    }
  }
;
  usernameText.addListener(SWT.FocusIn,listener);
  passwordText.addListener(SWT.FocusIn,listener);
  serverText.addListener(SWT.FocusIn,listener);
  portText.addListener(SWT.FocusIn,listener);
  sidOrDatabaseText.addListener(SWT.FocusIn,listener);
  datasourceText.addListener(SWT.FocusIn,listener);
  schemaText.addListener(SWT.FocusIn,listener);
  additionParamText.addListener(SWT.FocusIn,listener);
  urlConnectionStringText.addListener(SWT.FocusIn,listener);
  mappingFileText.addListener(SWT.FocusIn,listener);
  serverText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setServerName(serverText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setPort(portText.getText());
          modifyFieldValue();
        }
        boolean b=true;
        String databaseType=getConnection().getDatabaseType();
        if (databaseType != null) {
          if (databaseType.equals(""String_Node_Str"")) {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
 else {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
        }
        if (b) {
          b=portText.getText().length() <= 5;
        }
        evaluateTextField(b);
      }
    }
  }
);
  portText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (!Character.isLetterOrDigit(e.character) && !Character.isIdentifierIgnorable(e.character)) {
        e.doit=false;
      }
    }
  }
);
  usernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUsername(usernameText.getText());
        }
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          try {
            String password=PasswordEncryptUtil.encryptPassword(passwordText.getText());
            getConnection().setPassword(password);
          }
 catch (          Exception ex) {
            ExceptionHandler.process(ex);
          }
        }
      }
    }
  }
);
  sidOrDatabaseText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setSID(sidOrDatabaseText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  datasourceText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setDatasourceName(datasourceText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUiSchema(schemaText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      if (!isContextMode()) {
        if (originalUischema != null) {
          if (!originalUischema.equalsIgnoreCase(schemaText.getText())) {
            ConnectionHelper.setIsConnNeedReload(getConnection(),Boolean.TRUE);
          }
 else {
            checkURLIsChanged();
          }
        }
      }
    }
  }
);
  dbVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        if (version != null) {
          getConnection().setDbVersionString(version.getVersionValue());
        }
        urlConnectionStringText.setText(getStringConnection());
        checkFieldsValue();
      }
    }
  }
);
  hideDbVersion();
  additionParamText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setAdditionalParams(additionParamText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  standardButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  systemButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  button1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(button1.getSelection());
      }
    }
  }
);
  button2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(!button2.getSelection());
      }
    }
  }
);
  dbTypeCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().clear();
      boolean isGeneralJDBC=isGeneralJDBC();
      if (isGeneralJDBC) {
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(""String_Node_Str"");
        }
        if (generalJdbcUserText != null) {
          generalJdbcUserText.setText(""String_Node_Str"");
        }
        if (generalJdbcPasswordText != null) {
          generalJdbcPasswordText.setText(""String_Node_Str"");
        }
      }
 else       if (isHiveDBConnSelected()) {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
        initHiveInfo();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.HBASE)) {
        initHBaseSettings();
      }
 else {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
      }
      if (schemaText != null) {
        schemaText.setText(""String_Node_Str"");
      }
      if (serverText != null) {
        serverText.setText(""String_Node_Str"");
      }
      if (sidOrDatabaseText != null) {
        sidOrDatabaseText.setText(""String_Node_Str"");
      }
      if (portText != null && portText.getText() != null) {
        portText.setText(""String_Node_Str"");
      }
      if (fileField != null) {
        fileField.setText(""String_Node_Str"");
      }
      if (datasourceText != null) {
        datasourceText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (generalJdbcClassNameText != null) {
        generalJdbcClassNameText.setText(""String_Node_Str"");
      }
      if (generalJdbcDriverjarText != null) {
        generalJdbcDriverjarText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (mappingFileText != null) {
        mappingFileText.setText(""String_Node_Str"");
      }
      boolean hiddenGeneral=!isGeneralJDBC();
      switchBetweenTypeandGeneralDB(hiddenGeneral);
      if (!isContextMode()) {
        getConnection().setDatabaseType(dbTypeCombo.getText());
        setPropertiesFormEditable(true);
        EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
        if (template != null) {
          portText.setText(template.getDefaultPort());
        }
        final String product=EDatabaseTypeName.getTypeFromDisplayName(getConnection().getDatabaseType()).getProduct();
        getConnection().setProductId(product);
        String mapping=null;
        if (product == null || product.equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          mapping=generalMappingFileText.getText();
        }
 else {
          if (MetadataTalendType.getDefaultDbmsFromProduct(product) != null) {
            mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
          }
        }
        if (mapping == null) {
          mapping=""String_Node_Str"";
        }
        getConnection().setDbmsId(mapping);
        additionParamText.setText(EDatabaseConnTemplate.getAdditionProperty(dbTypeCombo.getText()));
        if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
          datasourceText.setLabelText(Messages.getString(""String_Node_Str""));
        }
        checkAndSetIniSQLModel();
        checkAS400SpecificCase();
        checkFieldsValue();
        hideDbVersion();
        if (!schemaText.getEditable()) {
          schemaText.setText(""String_Node_Str"");
        }
        if (isHiveDBConnSelected()) {
          doHiveDBTypeSelected();
        }
 else {
          doHiveDBTypeNotSelected();
        }
      }
      if (isHiveDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      }
 else {
        checkScrolledCompositeSize();
      }
      if (!isDBTypeSelected(EDatabaseConnTemplate.HBASE) && !isDBTypeSelected(EDatabaseConnTemplate.HIVE)) {
        clearHadoopRelatedParameters();
      }
    }
  }
);
  dbTypeCombo.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (dbTypeCombo.getSelectionIndex() > -1) {
        if (Character.isLetterOrDigit(e.character)) {
          e.doit=false;
        }
      }
    }
  }
);
  fileField.addListener(SWT.FocusIn,new Listener(){
    @Override public void handleEvent(    final Event e){
      if (!isContextMode()) {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
 else {
          EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
          EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(getConnection().getDbVersionString());
          if (template != null && template.getUrlTemplate(version).contains(EDatabaseConnVar.FILENAME.getVariable())) {
            setPropertiesFormEditable(true);
            urlConnectionStringText.setEditable(false);
          }
          getConnection().setFileFieldName(PathUtils.getPortablePath(fileField.getText()));
        }
      }
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setFileFieldName(fileField.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  directoryField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          String text=directoryField.getText();
          getConnection().setDBRootPath(text);
          checkFieldsValue();
        }
      }
    }
  }
);
  sqlSyntaxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setSqlSynthax(sqlSyntaxCombo.getText());
      }
    }
  }
);
  nullCharText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setNullChar(nullCharText.getText());
      }
    }
  }
);
  stringQuoteText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setStringQuote(stringQuoteText.getText());
      }
    }
  }
);
  addGeneralDbFieldsListeners();
  addHBaseSettingFieldsListeners();
  regHiveRelatedWidgetsListeners();
  if (canLinkToHadoopCluster()) {
    addHadoopClusterLinkListeners();
  }
}",0.9953880521726598
127899,"public String getLabel(){
  return this.label;
}","public String getLabel(){
  if (this.label == null) {
    if (isStaticNode()) {
      return super.toString();
    }
 else {
      return getType();
    }
  }
  return this.label;
}",0.4192139737991266
127900,"public int compare(IConnection connection1,IConnection connection2){
  EConnectionType lineStyle=connection1.getLineStyle();
  EConnectionType lineStyle2=connection2.getLineStyle();
  if (""String_Node_Str"".equals(connection1.getConnectorName())) {
    return -1;
  }
  if (""String_Node_Str"".equals(connection2.getConnectorName())) {
    return 1;
  }
  if (lineStyle == EConnectionType.FLOW_MAIN || lineStyle == EConnectionType.FLOW_MERGE) {
    return -1;
  }
  if (lineStyle2 == EConnectionType.FLOW_MAIN || lineStyle2 == EConnectionType.FLOW_MERGE) {
    return 1;
  }
  return 0;
}","@Override public int compare(IConnection connection1,IConnection connection2){
  EConnectionType lineStyle=connection1.getLineStyle();
  EConnectionType lineStyle2=connection2.getLineStyle();
  if (""String_Node_Str"".equals(connection1.getConnectorName())) {
    return -1;
  }
  if (""String_Node_Str"".equals(connection2.getConnectorName())) {
    return 1;
  }
  if (lineStyle == EConnectionType.FLOW_MAIN || lineStyle == EConnectionType.FLOW_MERGE) {
    return -1;
  }
  if (lineStyle2 == EConnectionType.FLOW_MAIN || lineStyle2 == EConnectionType.FLOW_MERGE) {
    return 1;
  }
  return 0;
}",0.9915254237288136
127901,"/** 
 * DOC jyhu <p> function:get the node from generating nodes by unique name. aim:to get the property value from any node. </p> Notice: It is used to get property values from the pointed node.
 * @param node:node from the job @param uniqueName:the unique name of the pointed node.
 * @return 
 */
public static INode getNodeByUniqueName(final IProcess process,String uniqueName){
  List<INode> nodes=(List<INode>)process.getGeneratingNodes();
  INode return_node=null;
  for (  INode current_node : nodes) {
    if (uniqueName.equals(current_node.getUniqueName())) {
      return_node=current_node;
    }
  }
  return return_node;
}","/** 
 * DOC jyhu <p> function:get the node from generating nodes by unique name. aim:to get the property value from any node. </p> Notice: It is used to get property values from the pointed node.
 * @param node:node from the job @param uniqueName:the unique name of the pointed node.
 * @return
 */
public static INode getNodeByUniqueName(final IProcess process,String uniqueName){
  List<INode> nodes=(List<INode>)process.getGeneratingNodes();
  INode return_node=null;
  for (  INode current_node : nodes) {
    if (uniqueName.equals(current_node.getUniqueName())) {
      return_node=current_node;
    }
  }
  return return_node;
}",0.9992119779353822
127902,"/** 
 * DOC sort the outgoingconnections to make sure the first connection is EConnectionType.FLOW_MAIN or EConnectionType.FLOW_REF<br/> <p> bug:9363, if a component have 2 output links, <li>""EConnectionType.FLOW_MAIN(FLOW), EConnectionType.FLOW_REF(REJECT)""</li> <li>""EConnectionType.FLOW_MAIN(REJECT), EConnectionType.FLOW_REF(FLOW)""</li>, make FLOW before ""REJECT"" </p>
 * @param node
 * @return List<? extends IConnection>
 */
public static List<? extends IConnection> getOutgoingCamelSortedConnections(INode node){
  List<IConnection> conns=null;
  List<? extends IConnection> outgoingConnections=node.getOutgoingConnections();
  if (outgoingConnections != null) {
    conns=new ArrayList<IConnection>(outgoingConnections);
    Collections.sort(conns,new Comparator<IConnection>(){
      public int compare(      IConnection o1,      IConnection o2){
        if (o1.getLineStyle() == o2.getLineStyle()) {
          if (o1.getOutputId() > o2.getOutputId()) {
            return 1;
          }
 else {
            return -1;
          }
        }
        if (EConnectionType.ROUTE_WHEN == o1.getLineStyle()) {
          if (EConnectionType.ROUTE == o2.getLineStyle()) {
            return 1;
          }
          return -1;
        }
        if (EConnectionType.ROUTE_OTHER == o1.getLineStyle())         if (EConnectionType.ROUTE_WHEN == o2.getLineStyle())         return 1;
        if (EConnectionType.ROUTE_ENDBLOCK == o1.getLineStyle()) {
          if (EConnectionType.ROUTE_WHEN == o2.getLineStyle() || EConnectionType.ROUTE_OTHER == o2.getLineStyle())           return 2;
          if (EConnectionType.ROUTE_TRY == o2.getLineStyle() || EConnectionType.ROUTE_CATCH == o2.getLineStyle() || EConnectionType.ROUTE_FINALLY == o2.getLineStyle())           return 3;
          if (EConnectionType.ROUTE == o2.getLineStyle()) {
            return 4;
          }
        }
        if (EConnectionType.ROUTE_TRY == o1.getLineStyle())         return -1;
        if (EConnectionType.ROUTE_CATCH == o1.getLineStyle())         if (EConnectionType.ROUTE_TRY == o2.getLineStyle())         return 1;
        if (EConnectionType.ROUTE_FINALLY == o1.getLineStyle())         if (EConnectionType.ROUTE_TRY == o2.getLineStyle() || EConnectionType.ROUTE_CATCH == o2.getLineStyle())         return 2;
        return 0;
      }
    }
);
  }
  return conns;
}","/** 
 * DOC sort the outgoingconnections to make sure the first connection is EConnectionType.FLOW_MAIN or EConnectionType.FLOW_REF<br/> <p> bug:9363, if a component have 2 output links, <li>""EConnectionType.FLOW_MAIN(FLOW), EConnectionType.FLOW_REF(REJECT)""</li> <li>""EConnectionType.FLOW_MAIN(REJECT), EConnectionType.FLOW_REF(FLOW)""</li>, make FLOW before ""REJECT"" </p>
 * @param node
 * @return List<? extends IConnection>
 */
public static List<? extends IConnection> getOutgoingCamelSortedConnections(INode node){
  List<IConnection> conns=null;
  List<? extends IConnection> outgoingConnections=node.getOutgoingConnections();
  if (outgoingConnections != null) {
    conns=new ArrayList<IConnection>(outgoingConnections);
    Collections.sort(conns,new Comparator<IConnection>(){
      @Override public int compare(      IConnection o1,      IConnection o2){
        if (o1.getLineStyle() == o2.getLineStyle()) {
          if (o1.getOutputId() > o2.getOutputId()) {
            return 1;
          }
 else {
            return -1;
          }
        }
        if (EConnectionType.ROUTE_WHEN == o1.getLineStyle()) {
          if (EConnectionType.ROUTE == o2.getLineStyle()) {
            return 1;
          }
          return -1;
        }
        if (EConnectionType.ROUTE_OTHER == o1.getLineStyle()) {
          if (EConnectionType.ROUTE_WHEN == o2.getLineStyle()) {
            return 1;
          }
        }
        if (EConnectionType.ROUTE_ENDBLOCK == o1.getLineStyle()) {
          if (EConnectionType.ROUTE_WHEN == o2.getLineStyle() || EConnectionType.ROUTE_OTHER == o2.getLineStyle()) {
            return 2;
          }
          if (EConnectionType.ROUTE_TRY == o2.getLineStyle() || EConnectionType.ROUTE_CATCH == o2.getLineStyle() || EConnectionType.ROUTE_FINALLY == o2.getLineStyle()) {
            return 3;
          }
          if (EConnectionType.ROUTE == o2.getLineStyle()) {
            return 4;
          }
        }
        if (EConnectionType.ROUTE_TRY == o1.getLineStyle()) {
          return -1;
        }
        if (EConnectionType.ROUTE_CATCH == o1.getLineStyle()) {
          if (EConnectionType.ROUTE_TRY == o2.getLineStyle()) {
            return 1;
          }
        }
        if (EConnectionType.ROUTE_FINALLY == o1.getLineStyle()) {
          if (EConnectionType.ROUTE_TRY == o2.getLineStyle() || EConnectionType.ROUTE_CATCH == o2.getLineStyle()) {
            return 2;
          }
        }
        return 0;
      }
    }
);
  }
  return conns;
}",0.9685690653432588
127903,"public static List<? extends IConnection> getOutgoingSortedConnections(INode node){
  List<IConnection> conns=null;
  List<? extends IConnection> outgoingConnections=node.getOutgoingConnections();
  if (outgoingConnections != null) {
    conns=new ArrayList<IConnection>(outgoingConnections);
    Collections.sort(conns,new Comparator<IConnection>(){
      public int compare(      IConnection connection1,      IConnection connection2){
        EConnectionType lineStyle=connection1.getLineStyle();
        EConnectionType lineStyle2=connection2.getLineStyle();
        if (""String_Node_Str"".equals(connection1.getConnectorName())) {
          return -1;
        }
        if (""String_Node_Str"".equals(connection2.getConnectorName())) {
          return 1;
        }
        if (lineStyle == EConnectionType.FLOW_MAIN || lineStyle == EConnectionType.FLOW_MERGE) {
          return -1;
        }
        if (lineStyle2 == EConnectionType.FLOW_MAIN || lineStyle2 == EConnectionType.FLOW_MERGE) {
          return 1;
        }
        return 0;
      }
    }
);
  }
  return conns;
}","public static List<? extends IConnection> getOutgoingSortedConnections(INode node){
  List<IConnection> conns=null;
  List<? extends IConnection> outgoingConnections=node.getOutgoingConnections();
  if (outgoingConnections != null) {
    conns=new ArrayList<IConnection>(outgoingConnections);
    Collections.sort(conns,new Comparator<IConnection>(){
      @Override public int compare(      IConnection connection1,      IConnection connection2){
        EConnectionType lineStyle=connection1.getLineStyle();
        EConnectionType lineStyle2=connection2.getLineStyle();
        if (""String_Node_Str"".equals(connection1.getConnectorName())) {
          return -1;
        }
        if (""String_Node_Str"".equals(connection2.getConnectorName())) {
          return 1;
        }
        if (lineStyle == EConnectionType.FLOW_MAIN || lineStyle == EConnectionType.FLOW_MERGE) {
          return -1;
        }
        if (lineStyle2 == EConnectionType.FLOW_MAIN || lineStyle2 == EConnectionType.FLOW_MERGE) {
          return 1;
        }
        return 0;
      }
    }
);
  }
  return conns;
}",0.9953959484346224
127904,"public void initialize(String currentPerspective){
  this.currentPerspective=currentPerspective;
  nodeAndProject=new HashMap<Object,List<Project>>();
  IRepositoryNode curParentNode=null;
  String urlBranch=null;
  if (ProjectManager.getInstance().getCurrentBranchURL(project) != null) {
    urlBranch=showSVNRoot();
  }
  if (""String_Node_Str"".equals(urlBranch) || urlBranch == null) {
    curParentNode=this;
  }
 else {
    List<IRepositoryNode> root=getChildren();
    svnRootNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    svnRootNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SVN_ROOT + ""String_Node_Str"" + urlBranch+ ""String_Node_Str"");
    svnRootNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SVN_ROOT);
    if (root.contains(svnRootNode)) {
      return;
    }
    root.add(svnRootNode);
    curParentNode=svnRootNode;
  }
  List<IRepositoryNode> nodes=curParentNode.getChildren();
  recBinNode=new BinRepositoryNode(this);
  nodes.add(recBinNode);
  sqlPatternNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  sqlPatternNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SQLPATTERNS);
  sqlPatternNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SQLPATTERNS);
  nodes.add(sqlPatternNode);
  docNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  docNode.setProperties(EProperties.LABEL,ERepositoryObjectType.DOCUMENTATION);
  docNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.DOCUMENTATION);
  nodes.add(docNode);
  metadataNode=new RepositoryNode(null,this,ENodeType.STABLE_SYSTEM_FOLDER);
  metadataNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA);
  metadataNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA);
  nodes.add(metadataNode);
  metadataConNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataConNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataConNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataNode.getChildren().add(metadataConNode);
  metadataFileNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataFileNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataNode.getChildren().add(metadataFileNode);
  if (PluginChecker.isSAPWizardPluginLoaded() && LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
    metadataSAPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSAPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataSAPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataNode.getChildren().add(metadataSAPConnectionNode);
  }
  if (PluginChecker.isHL7PluginLoaded()) {
    metadataHL7ConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataHL7ConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataHL7ConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataNode.getChildren().add(metadataHL7ConnectionNode);
  }
  if (PluginChecker.isFTPPluginLoaded()) {
    metadataFTPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataFTPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataFTPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataNode.getChildren().add(metadataFTPConnectionNode);
  }
  if (PluginChecker.isEBCDICPluginLoaded()) {
    metadataEbcdicConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEbcdicConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataEbcdicConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataNode.getChildren().add(metadataEbcdicConnectionNode);
  }
  if (PluginChecker.isSurvivorshipPluginLoaded() || PluginChecker.isRulesPluginLoaded() || PluginChecker.isBRMSPluginLoaded()) {
    StableRepositoryNode baseRulesNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.METADATA_RULES_ICON);
    baseRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_RULES_MANAGEMENT);
    metadataNode.getChildren().add(baseRulesNode);
    if (PluginChecker.isBRMSPluginLoaded()) {
      metadataBRMSConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataBRMSConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_BRMS);
      metadataBRMSConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_BRMS);
      baseRulesNode.getChildren().add(metadataBRMSConnectionNode);
    }
    if (PluginChecker.isRulesPluginLoaded()) {
      metadataRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_RULES);
      metadataRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_RULES);
      baseRulesNode.getChildren().add(metadataRulesNode);
    }
  }
  if (PluginChecker.isValidationrulesPluginLoaded()) {
    metadataValidationRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataValidationRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataValidationRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataNode.getChildren().add(metadataValidationRulesNode);
  }
  if (PluginChecker.isEDIFACTPluginLoaded()) {
    metadataEDIFactConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEDIFactConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_EDIFACT);
    metadataEDIFactConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_EDIFACT);
    metadataNode.getChildren().add(metadataEDIFactConnectionNode);
  }
  if (PluginChecker.isRefProjectLoaded() && getParent() != this && project != null && project.getEmfProject().getReferencedProjects().size() > 0) {
    refProject=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    refProject.setProperties(EProperties.LABEL,ERepositoryObjectType.REFERENCED_PROJECTS);
    refProject.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
    nodes.add(refProject);
  }
  initExtensionRepositoryNodes(curParentNode);
  deleteHiddenNodes(nodes);
  try {
    hideHiddenNodesDependsUserRight();
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  collectRepositoryNodes(curParentNode);
}","public void initialize(String currentPerspective){
  this.currentPerspective=currentPerspective;
  nodeAndProject=new HashMap<Object,List<Project>>();
  IRepositoryNode curParentNode=null;
  String urlBranch=null;
  if (ProjectManager.getInstance().getCurrentBranchURL(project) != null) {
    urlBranch=showSVNRoot();
  }
  if (""String_Node_Str"".equals(urlBranch) || urlBranch == null) {
    curParentNode=this;
  }
 else {
    List<IRepositoryNode> root=getChildren();
    svnRootNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    svnRootNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SVN_ROOT + ""String_Node_Str"" + urlBranch+ ""String_Node_Str"");
    svnRootNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SVN_ROOT);
    if (root.contains(svnRootNode)) {
      return;
    }
    root.add(svnRootNode);
    curParentNode=svnRootNode;
  }
  List<IRepositoryNode> nodes=curParentNode.getChildren();
  recBinNode=new BinRepositoryNode(this);
  nodes.add(recBinNode);
  sqlPatternNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  sqlPatternNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SQLPATTERNS);
  sqlPatternNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SQLPATTERNS);
  nodes.add(sqlPatternNode);
  docNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  docNode.setProperties(EProperties.LABEL,ERepositoryObjectType.DOCUMENTATION);
  docNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.DOCUMENTATION);
  nodes.add(docNode);
  metadataNode=new RepositoryNode(null,this,ENodeType.STABLE_SYSTEM_FOLDER);
  metadataNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA);
  metadataNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA);
  nodes.add(metadataNode);
  if (PluginChecker.isSurvivorshipPluginLoaded() || PluginChecker.isRulesPluginLoaded() || PluginChecker.isBRMSPluginLoaded()) {
    StableRepositoryNode baseRulesNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.METADATA_RULES_ICON);
    baseRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_RULES_MANAGEMENT);
    metadataNode.getChildren().add(baseRulesNode);
    if (PluginChecker.isBRMSPluginLoaded()) {
      metadataBRMSConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataBRMSConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_BRMS);
      metadataBRMSConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_BRMS);
      baseRulesNode.getChildren().add(metadataBRMSConnectionNode);
    }
    if (PluginChecker.isRulesPluginLoaded()) {
      metadataRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_RULES);
      metadataRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_RULES);
      baseRulesNode.getChildren().add(metadataRulesNode);
    }
  }
  if (PluginChecker.isEDIFACTPluginLoaded()) {
    metadataEDIFactConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEDIFactConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_EDIFACT);
    metadataEDIFactConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_EDIFACT);
    metadataNode.getChildren().add(metadataEDIFactConnectionNode);
  }
  if (PluginChecker.isRefProjectLoaded() && getParent() != this && project != null && project.getEmfProject().getReferencedProjects().size() > 0) {
    refProject=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    refProject.setProperties(EProperties.LABEL,ERepositoryObjectType.REFERENCED_PROJECTS);
    refProject.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
    nodes.add(refProject);
  }
  initExtensionRepositoryNodes(curParentNode);
  deleteHiddenNodes(nodes);
  try {
    hideHiddenNodesDependsUserRight();
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  collectRepositoryNodes(curParentNode);
}",0.5839821029082775
127905,"/** 
 * Returns the distribution <code>HiveConnVersionInfo</code> object by the given <code>index</code> from level 0. Added by Marvin Wang on Aug 13, 2012.
 * @param index
 * @return
 */
public static HiveConnVersionInfo getDistributionObj(int index){
  List<HiveConnVersionInfo> distributions=getObjectsByLevel(0);
  if (distributions != null && distributions.size() > 0) {
    return distributions.get(index);
  }
  return null;
}","/** 
 * Returns the distribution <code>HiveConnVersionInfo</code> object by the given <code>index</code> from level 0. Added by Marvin Wang on Aug 13, 2012.
 * @param index
 * @return
 */
public static HiveConnVersionInfo getDistributionObj(int index){
  List<HiveConnVersionInfo> distributions=getObjectsByLevel(0);
  if (distributions != null && distributions.size() > 0 && index != -1) {
    return distributions.get(index);
  }
  return null;
}",0.9829738933030648
127906,"/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      LanguageManager.reset();
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.beforeLogon(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      checkProjectCompatibility(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      executeMigrations(project,true,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.logOnProject(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.componentsReset();
      coreService.initializeComponents(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      executeMigrations(project,false,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      coreService.deleteAllJobs(false);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      try {
        coreService.syncAllRoutines();
        coreService.syncAllBeans();
      }
 catch (      SystemException e1) {
      }
      if (PluginChecker.isRulesPluginLoaded()) {
        coreService.syncAllRules();
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.syncLibraries(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        coreService.synchronizeSapLib();
      }
      coreService.resetUniservLibraries();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      description.setAutoBuilding(false);
      try {
        workspace.setDescription(description);
      }
 catch (      CoreException e) {
      }
      coreService.createStatsLogAndImplicitParamter(project);
      coreService.synchronizeMapptingXML();
      fullLogonFinished=true;
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}","/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      LanguageManager.reset();
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.beforeLogon(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      checkProjectCompatibility(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      executeMigrations(project,true,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.logOnProject(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.componentsReset();
      coreService.initializeComponents(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      executeMigrations(project,false,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      coreService.deleteAllJobs(false);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      try {
        coreService.syncAllRoutines();
        coreService.syncAllBeans();
      }
 catch (      SystemException e1) {
      }
      if (PluginChecker.isRulesPluginLoaded()) {
        coreService.syncAllRules();
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.syncLibraries(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        coreService.synchronizeSapLib();
      }
      coreService.resetUniservLibraries();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      description.setAutoBuilding(false);
      try {
        workspace.setDescription(description);
      }
 catch (      CoreException e) {
      }
      coreService.createStatsLogAndImplicitParamter(project);
      coreService.synchronizeMapptingXML();
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      fullLogonFinished=true;
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}",0.9853692522062238
127907,"public void addOrUpdateItem(Item item,boolean fromMigration){
  if (!loaded) {
    loadRelations();
  }
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
  if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  if (processType != null) {
    boolean relationsModified=true;
    Relation relation=new Relation();
    relation.setId(item.getProperty().getId());
    relation.setType(getTypeFromItem(item));
    relation.setVersion(item.getProperty().getVersion());
    Set<Relation> oldProjectRelations=null;
    if (currentProjectItemsRelations.containsKey(relation)) {
      oldProjectRelations=new HashSet<Relation>(currentProjectItemsRelations.get(relation));
      currentProjectItemsRelations.get(relation).clear();
    }
    clearItemsRelations(item);
    Boolean builtIn=null;
    String currentValue=null;
    String relationType=null;
    for (    Object o : processType.getContext()) {
      ContextType context=(ContextType)o;
      for (      Object o2 : context.getContextParameter()) {
        ContextParameterType contextParam=(ContextParameterType)o2;
        if (!StringUtils.isEmpty(contextParam.getRepositoryContextId())) {
          addRelationShip(item,contextParam.getRepositoryContextId(),LATEST_VERSION,CONTEXT_RELATION);
        }
      }
    }
    if (processType.getParameters() != null) {
      if (processType.getParameters().getRoutinesParameter() != null) {
        for (        Object o : processType.getParameters().getRoutinesParameter()) {
          RoutinesParameterType itemInfor=(RoutinesParameterType)o;
          addRelationShip(item,itemInfor.getName(),LATEST_VERSION,ROUTINE_RELATION);
        }
      }
      for (      Object o : processType.getParameters().getElementParameter()) {
        if (o instanceof ElementParameterType) {
          ElementParameterType param=(ElementParameterType)o;
          if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=SCHEMA_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=PROPERTY_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=VALIDATION_RULE_RELATION;
          }
 else {
            builtIn=null;
            currentValue=null;
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            builtIn=true;
            if (param.getValue().equals(""String_Node_Str"")) {
              builtIn=false;
            }
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            currentValue=param.getValue();
          }
          if (builtIn != null && currentValue != null) {
            if (!builtIn) {
              addRelationShip(item,currentValue,LATEST_VERSION,relationType);
            }
            builtIn=null;
            currentValue=null;
          }
        }
      }
    }
    List<String> jobletsComponentsList=new ArrayList<String>();
    IComponentsService compService=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
    for (    IComponent component : compService.getComponentsFactory().getComponents()) {
      if (component.getComponentType() == EComponentType.JOBLET) {
        jobletsComponentsList.add(component.getName());
      }
    }
    builtIn=null;
    currentValue=null;
    for (    Object o : processType.getNode()) {
      if (o instanceof NodeType) {
        NodeType currentNode=(NodeType)o;
        for (        Object o2 : currentNode.getElementParameter()) {
          if (o2 instanceof ElementParameterType) {
            ElementParameterType param=(ElementParameterType)o2;
            if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=QUERY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"") || param.getName().startsWith(""String_Node_Str"")) {
              relationType=SCHEMA_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=PROPERTY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=VALIDATION_RULE_RELATION;
            }
 else {
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              builtIn=true;
              if (param.getValue().equals(""String_Node_Str"")) {
                builtIn=false;
              }
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              currentValue=param.getValue();
            }
            if (builtIn != null && currentValue != null) {
              if (!builtIn) {
                addRelationShip(item,currentValue,LATEST_VERSION,relationType);
              }
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().equals(""String_Node_Str"")) {
              for (              Object o3 : param.getElementValue()) {
                if (o3 instanceof ElementValueType && ""String_Node_Str"".equals(((ElementValueType)o3).getElementRef())) {
                  addRelationShip(item,((ElementValueType)o3).getValue(),LATEST_VERSION,SQLPATTERN_RELATION);
                }
              }
            }
            if (param.getField() != null && param.getField().equals(EParameterFieldType.SURVIVOR_RELATION.getName())) {
              String relatedID=param.getValue();
              addRelationShip(item,relatedID,LATEST_VERSION,SURVIVOR_RELATION);
            }
          }
        }
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerMapperService.class)) {
          IDesignerMapperService service=(IDesignerMapperService)GlobalServiceRegister.getDefault().getService(IDesignerMapperService.class);
          AbstractExternalData nodeData=currentNode.getNodeData();
          List<String> schemaIds=service.getRepositorySchemaIds(nodeData);
          if (schemaIds.size() > 0) {
            for (            String schemaId : schemaIds) {
              addRelationShip(item,schemaId,LATEST_VERSION,SCHEMA_RELATION);
            }
          }
        }
        if (jobletsComponentsList.contains(currentNode.getComponentName())) {
          String version=LATEST_VERSION;
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"")) {
                version=param.getValue();
              }
            }
          }
          IComponent cc=compService.getComponentsFactory().get(currentNode.getComponentName(),ComponentCategory.CATEGORY_4_DI.getName());
          IJobletProviderService service=null;
          if (PluginChecker.isJobLetPluginLoaded()) {
            service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
          }
          Property property=service.getJobletComponentItem(cc);
          if (property != null) {
            addRelationShip(item,property.getId(),version,JOBLET_RELATION);
          }
        }
        if (""String_Node_Str"".equals(currentNode.getComponentName())) {
          String jobVersion=LATEST_VERSION;
          Set<String> jobIdSet=new HashSet<String>();
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                String jobIds=param.getValue();
                String[] jobsArr=jobIds.split(RelationshipItemBuilder.COMMA);
                for (                String jobId : jobsArr) {
                  if (StringUtils.isNotEmpty(jobId)) {
                    jobIdSet.add(jobId);
                  }
                }
              }
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                jobVersion=param.getValue();
              }
            }
          }
          for (          String jobId : jobIdSet) {
            addRelationShip(item,jobId,jobVersion,JOB_RELATION);
          }
        }
      }
    }
    if (oldProjectRelations != null) {
      Set<Relation> newProjectRelations=currentProjectItemsRelations.get(relation);
      if (oldProjectRelations.size() == newProjectRelations.size()) {
        relationsModified=false;
        for (        Relation newRelation : newProjectRelations) {
          if (!oldProjectRelations.contains(newRelation)) {
            relationsModified=true;
            break;
          }
        }
      }
      if (!relationsModified) {
        currentProjectItemsRelations.get(relation).addAll(oldProjectRelations);
      }
    }
    if (relationsModified && !modified) {
      modified=true;
    }
    if (!fromMigration && modified) {
      saveRelations();
    }
  }
}","public void addOrUpdateItem(Item item,boolean fromMigration){
  if (!loaded) {
    loadRelations();
  }
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
  if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  if (processType != null) {
    boolean relationsModified=true;
    Relation relation=new Relation();
    relation.setId(item.getProperty().getId());
    relation.setType(getTypeFromItem(item));
    relation.setVersion(item.getProperty().getVersion());
    Set<Relation> oldProjectRelations=null;
    if (currentProjectItemsRelations.containsKey(relation)) {
      oldProjectRelations=new HashSet<Relation>(currentProjectItemsRelations.get(relation));
      currentProjectItemsRelations.get(relation).clear();
    }
    clearItemsRelations(item);
    Boolean builtIn=null;
    String currentValue=null;
    String relationType=null;
    for (    Object o : processType.getContext()) {
      ContextType context=(ContextType)o;
      for (      Object o2 : context.getContextParameter()) {
        ContextParameterType contextParam=(ContextParameterType)o2;
        if (!StringUtils.isEmpty(contextParam.getRepositoryContextId())) {
          addRelationShip(item,contextParam.getRepositoryContextId(),LATEST_VERSION,CONTEXT_RELATION);
        }
      }
    }
    if (processType.getParameters() != null) {
      if (processType.getParameters().getRoutinesParameter() != null) {
        for (        Object o : processType.getParameters().getRoutinesParameter()) {
          RoutinesParameterType itemInfor=(RoutinesParameterType)o;
          addRelationShip(item,itemInfor.getName(),LATEST_VERSION,ROUTINE_RELATION);
        }
      }
      for (      Object o : processType.getParameters().getElementParameter()) {
        if (o instanceof ElementParameterType) {
          ElementParameterType param=(ElementParameterType)o;
          if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=SCHEMA_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=PROPERTY_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=VALIDATION_RULE_RELATION;
          }
 else {
            builtIn=null;
            currentValue=null;
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            builtIn=true;
            if (param.getValue().equals(""String_Node_Str"")) {
              builtIn=false;
            }
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            currentValue=param.getValue();
          }
          if (builtIn != null && currentValue != null) {
            if (!builtIn) {
              addRelationShip(item,currentValue,LATEST_VERSION,relationType);
            }
            builtIn=null;
            currentValue=null;
          }
        }
      }
    }
    List<String> jobletsComponentsList=new ArrayList<String>();
    IComponentsService compService=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
    for (    IComponent component : compService.getComponentsFactory().getComponents()) {
      if (component.getComponentType() == EComponentType.JOBLET) {
        jobletsComponentsList.add(component.getName());
      }
    }
    builtIn=null;
    currentValue=null;
    for (    Object o : processType.getNode()) {
      if (o instanceof NodeType) {
        NodeType currentNode=(NodeType)o;
        for (        Object o2 : currentNode.getElementParameter()) {
          if (o2 instanceof ElementParameterType) {
            ElementParameterType param=(ElementParameterType)o2;
            if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=QUERY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"") || param.getName().startsWith(""String_Node_Str"")) {
              relationType=SCHEMA_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=PROPERTY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=VALIDATION_RULE_RELATION;
            }
 else {
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              builtIn=true;
              if (param.getValue().equals(""String_Node_Str"")) {
                builtIn=false;
              }
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              currentValue=param.getValue();
            }
            if (builtIn != null && currentValue != null) {
              if (!builtIn) {
                addRelationShip(item,currentValue,LATEST_VERSION,relationType);
                if (PROPERTY_RELATION.equals(relationType)) {
                  addHadoopClusterRelationShips(item,currentValue,LATEST_VERSION);
                }
              }
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().equals(""String_Node_Str"")) {
              for (              Object o3 : param.getElementValue()) {
                if (o3 instanceof ElementValueType && ""String_Node_Str"".equals(((ElementValueType)o3).getElementRef())) {
                  addRelationShip(item,((ElementValueType)o3).getValue(),LATEST_VERSION,SQLPATTERN_RELATION);
                }
              }
            }
            if (param.getField() != null && param.getField().equals(EParameterFieldType.SURVIVOR_RELATION.getName())) {
              String relatedID=param.getValue();
              addRelationShip(item,relatedID,LATEST_VERSION,SURVIVOR_RELATION);
            }
          }
        }
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerMapperService.class)) {
          IDesignerMapperService service=(IDesignerMapperService)GlobalServiceRegister.getDefault().getService(IDesignerMapperService.class);
          AbstractExternalData nodeData=currentNode.getNodeData();
          List<String> schemaIds=service.getRepositorySchemaIds(nodeData);
          if (schemaIds.size() > 0) {
            for (            String schemaId : schemaIds) {
              addRelationShip(item,schemaId,LATEST_VERSION,SCHEMA_RELATION);
            }
          }
        }
        if (jobletsComponentsList.contains(currentNode.getComponentName())) {
          String version=LATEST_VERSION;
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"")) {
                version=param.getValue();
              }
            }
          }
          IComponent cc=compService.getComponentsFactory().get(currentNode.getComponentName(),ComponentCategory.CATEGORY_4_DI.getName());
          IJobletProviderService service=null;
          if (PluginChecker.isJobLetPluginLoaded()) {
            service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
          }
          Property property=service.getJobletComponentItem(cc);
          if (property != null) {
            addRelationShip(item,property.getId(),version,JOBLET_RELATION);
          }
        }
        if (""String_Node_Str"".equals(currentNode.getComponentName())) {
          String jobVersion=LATEST_VERSION;
          Set<String> jobIdSet=new HashSet<String>();
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                String jobIds=param.getValue();
                String[] jobsArr=jobIds.split(RelationshipItemBuilder.COMMA);
                for (                String jobId : jobsArr) {
                  if (StringUtils.isNotEmpty(jobId)) {
                    jobIdSet.add(jobId);
                  }
                }
              }
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                jobVersion=param.getValue();
              }
            }
          }
          for (          String jobId : jobIdSet) {
            addRelationShip(item,jobId,jobVersion,JOB_RELATION);
          }
        }
      }
    }
    if (oldProjectRelations != null) {
      Set<Relation> newProjectRelations=currentProjectItemsRelations.get(relation);
      if (oldProjectRelations.size() == newProjectRelations.size()) {
        relationsModified=false;
        for (        Relation newRelation : newProjectRelations) {
          if (!oldProjectRelations.contains(newRelation)) {
            relationsModified=true;
            break;
          }
        }
      }
      if (!relationsModified) {
        currentProjectItemsRelations.get(relation).addAll(oldProjectRelations);
      }
    }
    if (relationsModified && !modified) {
      modified=true;
    }
    if (!fromMigration && modified) {
      saveRelations();
    }
  }
}",0.9916534384761124
127908,"/** 
 * ggu Comment method ""isLinkCDCNode"". for cdc
 */
private boolean isLinkCDCNode(RepositoryNode node){
  if (node != null) {
    if (ENodeType.STABLE_SYSTEM_FOLDER.equals(node.getType())) {
      if (node.getParent() != null) {
        RepositoryNode pNode=node.getParent().getParent();
        if (pNode != null) {
          ERepositoryObjectType nodeType=(ERepositoryObjectType)pNode.getProperties(EProperties.CONTENT_TYPE);
          if (ERepositoryObjectType.METADATA_CONNECTIONS.equals(nodeType) && pNode.getObject() != null && pNode.getObject().getProperty().getItem() instanceof DatabaseConnectionItem) {
            DatabaseConnection connection=(DatabaseConnection)((DatabaseConnectionItem)pNode.getObject().getProperty().getItem()).getConnection();
            if (connection != null) {
              CDCConnection cdcConns=connection.getCdcConns();
              return cdcConns != null;
            }
          }
        }
      }
    }
  }
  return false;
}","/** 
 * ggu Comment method ""isLinkCDCNode"". for cdc
 */
private boolean isLinkCDCNode(RepositoryNode node){
  if (node != null) {
    if (ENodeType.STABLE_SYSTEM_FOLDER.equals(node.getType())) {
      if (node.getParent() != null) {
        RepositoryNode pNode=node.getParent().getParent();
        if (pNode != null) {
          ERepositoryObjectType nodeType=(ERepositoryObjectType)pNode.getProperties(EProperties.CONTENT_TYPE);
          if (nodeType.equals(ERepositoryObjectType.METADATA_CONNECTIONS) && pNode.getObject() != null && pNode.getObject().getProperty().getItem() instanceof DatabaseConnectionItem) {
            DatabaseConnection connection=(DatabaseConnection)((DatabaseConnectionItem)pNode.getObject().getProperty().getItem()).getConnection();
            if (connection != null) {
              CDCConnection cdcConns=connection.getCdcConns();
              return cdcConns != null;
            }
          }
        }
      }
    }
  }
  return false;
}",0.9835897435897436
127909,"@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!ERepositoryObjectType.METADATA_FILE_DELIMITED.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
    if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
      setEnabled(false);
      return;
    }
case SYSTEM_FOLDER:
  if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
    setEnabled(false);
    return;
  }
this.setText(CREATE_LABEL);
collectChildNames(node);
this.setImageDescriptor(createImage);
creation=true;
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(EDIT_LABEL);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(OPEN_LABEL);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
default :
return;
}
setEnabled(true);
}","@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (ERepositoryObjectType.METADATA_FILE_DELIMITED != null && !ERepositoryObjectType.METADATA_FILE_DELIMITED.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
    if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
      setEnabled(false);
      return;
    }
case SYSTEM_FOLDER:
  if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
    setEnabled(false);
    return;
  }
this.setText(CREATE_LABEL);
collectChildNames(node);
this.setImageDescriptor(createImage);
creation=true;
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(EDIT_LABEL);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(OPEN_LABEL);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
default :
return;
}
setEnabled(true);
}",0.9745579991375592
127910,"public void addOrUpdateItem(Item item,boolean fromMigration){
  if (!loaded) {
    loadRelations();
  }
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
  if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  if (processType != null) {
    boolean relationsModified=true;
    Relation relation=new Relation();
    relation.setId(item.getProperty().getId());
    relation.setType(getTypeFromItem(item));
    relation.setVersion(item.getProperty().getVersion());
    Set<Relation> oldProjectRelations=null;
    if (currentProjectItemsRelations.containsKey(relation)) {
      oldProjectRelations=new HashSet<Relation>(currentProjectItemsRelations.get(relation));
      currentProjectItemsRelations.get(relation).clear();
    }
    clearItemsRelations(item);
    Boolean builtIn=null;
    String currentValue=null;
    String relationType=null;
    for (    Object o : processType.getContext()) {
      ContextType context=(ContextType)o;
      for (      Object o2 : context.getContextParameter()) {
        ContextParameterType contextParam=(ContextParameterType)o2;
        if (!StringUtils.isEmpty(contextParam.getRepositoryContextId())) {
          addRelationShip(item,contextParam.getRepositoryContextId(),LATEST_VERSION,CONTEXT_RELATION);
        }
      }
    }
    if (processType.getParameters() != null) {
      if (processType.getParameters().getRoutinesParameter() != null) {
        for (        Object o : processType.getParameters().getRoutinesParameter()) {
          RoutinesParameterType itemInfor=(RoutinesParameterType)o;
          addRelationShip(item,itemInfor.getName(),LATEST_VERSION,ROUTINE_RELATION);
        }
      }
      for (      Object o : processType.getParameters().getElementParameter()) {
        if (o instanceof ElementParameterType) {
          ElementParameterType param=(ElementParameterType)o;
          if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=SCHEMA_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=PROPERTY_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=VALIDATION_RULE_RELATION;
          }
 else {
            builtIn=null;
            currentValue=null;
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            builtIn=true;
            if (param.getValue().equals(""String_Node_Str"")) {
              builtIn=false;
            }
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            currentValue=param.getValue();
          }
          if (builtIn != null && currentValue != null) {
            if (!builtIn) {
              addRelationShip(item,currentValue,LATEST_VERSION,relationType);
            }
            builtIn=null;
            currentValue=null;
          }
        }
      }
    }
    List<String> jobletsComponentsList=new ArrayList<String>();
    IComponentsService compService=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
    for (    IComponent component : compService.getComponentsFactory().getComponents()) {
      if (component.getComponentType() == EComponentType.JOBLET) {
        jobletsComponentsList.add(component.getName());
      }
    }
    builtIn=null;
    currentValue=null;
    for (    Object o : processType.getNode()) {
      if (o instanceof NodeType) {
        NodeType currentNode=(NodeType)o;
        for (        Object o2 : currentNode.getElementParameter()) {
          if (o2 instanceof ElementParameterType) {
            ElementParameterType param=(ElementParameterType)o2;
            if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=QUERY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"") || param.getName().startsWith(""String_Node_Str"")) {
              relationType=SCHEMA_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=PROPERTY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=VALIDATION_RULE_RELATION;
            }
 else {
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              builtIn=true;
              if (param.getValue().equals(""String_Node_Str"")) {
                builtIn=false;
              }
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              currentValue=param.getValue();
            }
            if (builtIn != null && currentValue != null) {
              if (!builtIn) {
                addRelationShip(item,currentValue,LATEST_VERSION,relationType);
                if (PROPERTY_RELATION.equals(relationType)) {
                  addHadoopClusterRelationShips(item,currentValue,LATEST_VERSION);
                }
              }
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().equals(""String_Node_Str"")) {
              for (              Object o3 : param.getElementValue()) {
                if (o3 instanceof ElementValueType && ""String_Node_Str"".equals(((ElementValueType)o3).getElementRef())) {
                  addRelationShip(item,((ElementValueType)o3).getValue(),LATEST_VERSION,SQLPATTERN_RELATION);
                }
              }
            }
            if (param.getField() != null && param.getField().equals(EParameterFieldType.SURVIVOR_RELATION.getName())) {
              String relatedID=param.getValue();
              addRelationShip(item,relatedID,LATEST_VERSION,SURVIVOR_RELATION);
            }
          }
        }
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerMapperService.class)) {
          IDesignerMapperService service=(IDesignerMapperService)GlobalServiceRegister.getDefault().getService(IDesignerMapperService.class);
          AbstractExternalData nodeData=currentNode.getNodeData();
          List<String> schemaIds=service.getRepositorySchemaIds(nodeData);
          if (schemaIds.size() > 0) {
            for (            String schemaId : schemaIds) {
              addRelationShip(item,schemaId,LATEST_VERSION,SCHEMA_RELATION);
            }
          }
        }
        if (jobletsComponentsList.contains(currentNode.getComponentName())) {
          String version=LATEST_VERSION;
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"")) {
                version=param.getValue();
              }
            }
          }
          IComponent cc=compService.getComponentsFactory().get(currentNode.getComponentName(),ComponentCategory.CATEGORY_4_DI.getName());
          IJobletProviderService service=null;
          if (PluginChecker.isJobLetPluginLoaded()) {
            service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
          }
          Property property=service.getJobletComponentItem(cc);
          if (property != null) {
            addRelationShip(item,property.getId(),version,JOBLET_RELATION);
          }
        }
        if (""String_Node_Str"".equals(currentNode.getComponentName())) {
          String jobVersion=LATEST_VERSION;
          Set<String> jobIdSet=new HashSet<String>();
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                String jobIds=param.getValue();
                String[] jobsArr=jobIds.split(RelationshipItemBuilder.COMMA);
                for (                String jobId : jobsArr) {
                  if (StringUtils.isNotEmpty(jobId)) {
                    jobIdSet.add(jobId);
                  }
                }
              }
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                jobVersion=param.getValue();
              }
            }
          }
          for (          String jobId : jobIdSet) {
            addRelationShip(item,jobId,jobVersion,JOB_RELATION);
          }
        }
      }
    }
    if (oldProjectRelations != null) {
      Set<Relation> newProjectRelations=currentProjectItemsRelations.get(relation);
      if (oldProjectRelations.size() == newProjectRelations.size()) {
        relationsModified=false;
        for (        Relation newRelation : newProjectRelations) {
          if (!oldProjectRelations.contains(newRelation)) {
            relationsModified=true;
            break;
          }
        }
      }
      if (!relationsModified) {
        currentProjectItemsRelations.get(relation).addAll(oldProjectRelations);
      }
    }
    if (relationsModified && !modified) {
      modified=true;
    }
    if (!fromMigration && modified) {
      saveRelations();
    }
  }
}","public void addOrUpdateItem(Item item,boolean fromMigration){
  if (!loaded) {
    loadRelations();
  }
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
  if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  if (processType != null) {
    boolean relationsModified=true;
    Relation relation=new Relation();
    relation.setId(item.getProperty().getId());
    relation.setType(getTypeFromItem(item));
    relation.setVersion(item.getProperty().getVersion());
    Set<Relation> oldProjectRelations=null;
    if (currentProjectItemsRelations.containsKey(relation)) {
      oldProjectRelations=new HashSet<Relation>(currentProjectItemsRelations.get(relation));
      currentProjectItemsRelations.get(relation).clear();
    }
    clearItemsRelations(item);
    Boolean builtIn=null;
    String currentValue=null;
    String relationType=null;
    for (    Object o : processType.getContext()) {
      ContextType context=(ContextType)o;
      for (      Object o2 : context.getContextParameter()) {
        ContextParameterType contextParam=(ContextParameterType)o2;
        if (!StringUtils.isEmpty(contextParam.getRepositoryContextId())) {
          addRelationShip(item,contextParam.getRepositoryContextId(),LATEST_VERSION,CONTEXT_RELATION);
        }
      }
    }
    if (processType.getParameters() != null) {
      if (processType.getParameters().getRoutinesParameter() != null) {
        for (        Object o : processType.getParameters().getRoutinesParameter()) {
          RoutinesParameterType itemInfor=(RoutinesParameterType)o;
          addRelationShip(item,itemInfor.getName(),LATEST_VERSION,ROUTINE_RELATION);
        }
      }
      for (      Object o : processType.getParameters().getElementParameter()) {
        if (o instanceof ElementParameterType) {
          ElementParameterType param=(ElementParameterType)o;
          if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=SCHEMA_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"") || param.getName().startsWith(""String_Node_Str"")) {
            relationType=PROPERTY_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=VALIDATION_RULE_RELATION;
          }
 else {
            builtIn=null;
            currentValue=null;
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            builtIn=true;
            if (param.getValue().equals(""String_Node_Str"")) {
              builtIn=false;
            }
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            currentValue=param.getValue();
          }
          if (builtIn != null && currentValue != null) {
            if (!builtIn) {
              addRelationShip(item,currentValue,LATEST_VERSION,relationType);
            }
            builtIn=null;
            currentValue=null;
          }
        }
      }
    }
    List<String> jobletsComponentsList=new ArrayList<String>();
    IComponentsService compService=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
    for (    IComponent component : compService.getComponentsFactory().getComponents()) {
      if (component.getComponentType() == EComponentType.JOBLET) {
        jobletsComponentsList.add(component.getName());
      }
    }
    builtIn=null;
    currentValue=null;
    for (    Object o : processType.getNode()) {
      if (o instanceof NodeType) {
        NodeType currentNode=(NodeType)o;
        for (        Object o2 : currentNode.getElementParameter()) {
          if (o2 instanceof ElementParameterType) {
            ElementParameterType param=(ElementParameterType)o2;
            if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=QUERY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"") || param.getName().startsWith(""String_Node_Str"")) {
              relationType=SCHEMA_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=PROPERTY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=VALIDATION_RULE_RELATION;
            }
 else {
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              builtIn=true;
              if (param.getValue().equals(""String_Node_Str"")) {
                builtIn=false;
              }
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              currentValue=param.getValue();
            }
            if (builtIn != null && currentValue != null) {
              if (!builtIn) {
                addRelationShip(item,currentValue,LATEST_VERSION,relationType);
                if (PROPERTY_RELATION.equals(relationType)) {
                  addHadoopClusterRelationShips(item,currentValue,LATEST_VERSION);
                }
              }
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().equals(""String_Node_Str"")) {
              for (              Object o3 : param.getElementValue()) {
                if (o3 instanceof ElementValueType && ""String_Node_Str"".equals(((ElementValueType)o3).getElementRef())) {
                  addRelationShip(item,((ElementValueType)o3).getValue(),LATEST_VERSION,SQLPATTERN_RELATION);
                }
              }
            }
            if (param.getField() != null && param.getField().equals(EParameterFieldType.SURVIVOR_RELATION.getName())) {
              String relatedID=param.getValue();
              addRelationShip(item,relatedID,LATEST_VERSION,SURVIVOR_RELATION);
            }
          }
        }
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerMapperService.class)) {
          IDesignerMapperService service=(IDesignerMapperService)GlobalServiceRegister.getDefault().getService(IDesignerMapperService.class);
          AbstractExternalData nodeData=currentNode.getNodeData();
          List<String> schemaIds=service.getRepositorySchemaIds(nodeData);
          if (schemaIds.size() > 0) {
            for (            String schemaId : schemaIds) {
              addRelationShip(item,schemaId,LATEST_VERSION,SCHEMA_RELATION);
            }
          }
        }
        if (jobletsComponentsList.contains(currentNode.getComponentName())) {
          String version=LATEST_VERSION;
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"")) {
                version=param.getValue();
              }
            }
          }
          IComponent cc=compService.getComponentsFactory().get(currentNode.getComponentName(),ComponentCategory.CATEGORY_4_DI.getName());
          IJobletProviderService service=null;
          if (PluginChecker.isJobLetPluginLoaded()) {
            service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
          }
          Property property=service.getJobletComponentItem(cc);
          if (property != null) {
            addRelationShip(item,property.getId(),version,JOBLET_RELATION);
          }
        }
        if (""String_Node_Str"".equals(currentNode.getComponentName())) {
          String jobVersion=LATEST_VERSION;
          Set<String> jobIdSet=new HashSet<String>();
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                String jobIds=param.getValue();
                String[] jobsArr=jobIds.split(RelationshipItemBuilder.COMMA);
                for (                String jobId : jobsArr) {
                  if (StringUtils.isNotEmpty(jobId)) {
                    jobIdSet.add(jobId);
                  }
                }
              }
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                jobVersion=param.getValue();
              }
            }
          }
          for (          String jobId : jobIdSet) {
            addRelationShip(item,jobId,jobVersion,JOB_RELATION);
          }
        }
      }
    }
    if (oldProjectRelations != null) {
      Set<Relation> newProjectRelations=currentProjectItemsRelations.get(relation);
      if (oldProjectRelations.size() == newProjectRelations.size()) {
        relationsModified=false;
        for (        Relation newRelation : newProjectRelations) {
          if (!oldProjectRelations.contains(newRelation)) {
            relationsModified=true;
            break;
          }
        }
      }
      if (!relationsModified) {
        currentProjectItemsRelations.get(relation).addAll(oldProjectRelations);
      }
    }
    if (relationsModified && !modified) {
      modified=true;
    }
    if (!fromMigration && modified) {
      saveRelations();
    }
  }
}",0.9975178562382858
127911,"@Override public boolean isDeleted(){
  return repObj.isDeleted();
}","@Override public boolean isDeleted(){
  return SubItemHelper.isDeleted(query);
}",0.8513513513513513
127912,"public Map<ECustomVersionGroup,Set<LibraryFile>> getImportLibLibraries(){
  Map<ECustomVersionGroup,Set<LibraryFile>> libMap=new HashMap<ECustomVersionGroup,Set<LibraryFile>>();
  if (isFromExistVersion) {
    IHadoopService hadoopService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopService.class)) {
      hadoopService=(IHadoopService)GlobalServiceRegister.getDefault().getService(IHadoopService.class);
    }
    if (hadoopService != null) {
      for (      ECustomVersionGroup group : existVersionSelectionMap.keySet()) {
        if (existVersionSelectionMap.get(group)) {
          if (types != null) {
            HashSet libInSameGroup=new HashSet<LibraryFile>();
            for (            ECustomVersionType type : types) {
              if (type.getGroup() == group) {
                Set<String> hadoopLibraries=hadoopService.getHadoopLibrariesByType(type,getDistribution(),getVersion());
                Set<LibraryFile> convertToLibraryFile=customLibUtil.convertToLibraryFile(hadoopLibraries);
                libInSameGroup.addAll(convertToLibraryFile);
              }
            }
            libMap.put(group,libInSameGroup);
          }
        }
      }
    }
  }
 else   if (isFromZip) {
    Set<ECustomVersionGroup> groups=new HashSet<ECustomVersionGroup>();
    for (    ECustomVersionGroup group : fromZipSelectionMap.keySet()) {
      if (fromZipSelectionMap.get(group)) {
        groups.add(group);
      }
    }
    return customLibUtil.readZipFile(zipLocation,groups);
  }
  return libMap;
}","public Map<ECustomVersionGroup,Set<LibraryFile>> getImportLibLibraries(){
  Map<ECustomVersionGroup,Set<LibraryFile>> libMap=new HashMap<ECustomVersionGroup,Set<LibraryFile>>();
  if (isFromExistVersion) {
    IHadoopService hadoopService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopService.class)) {
      hadoopService=(IHadoopService)GlobalServiceRegister.getDefault().getService(IHadoopService.class);
    }
    if (hadoopService != null) {
      for (      ECustomVersionGroup group : existVersionSelectionMap.keySet()) {
        if (existVersionSelectionMap.get(group)) {
          if (types != null) {
            HashSet libInSameGroup=new HashSet<LibraryFile>();
            for (            ECustomVersionType type : types) {
              if (type.getGroup() == group) {
                if (ECustomVersionType.HCATALOG == type || ECustomVersionType.OOZIE == type) {
                  type=ECustomVersionType.HDFS;
                }
                Set<String> hadoopLibraries=hadoopService.getHadoopLibrariesByType(type,getDistribution(),getVersion());
                Set<LibraryFile> convertToLibraryFile=customLibUtil.convertToLibraryFile(hadoopLibraries);
                libInSameGroup.addAll(convertToLibraryFile);
              }
            }
            libMap.put(group,libInSameGroup);
          }
        }
      }
    }
  }
 else   if (isFromZip) {
    Set<ECustomVersionGroup> groups=new HashSet<ECustomVersionGroup>();
    for (    ECustomVersionGroup group : fromZipSelectionMap.keySet()) {
      if (fromZipSelectionMap.get(group)) {
        groups.add(group);
      }
    }
    return customLibUtil.readZipFile(zipLocation,groups);
  }
  return libMap;
}",0.9507494646680942
127913,"@Override public boolean isDeleted(){
  return repObj.isDeleted();
}","@Override public boolean isDeleted(){
  return SubItemHelper.isDeleted(query);
}",0.8513513513513513
127914,"public Map<ECustomVersionGroup,Set<LibraryFile>> getImportLibLibraries(){
  Map<ECustomVersionGroup,Set<LibraryFile>> libMap=new HashMap<ECustomVersionGroup,Set<LibraryFile>>();
  if (isFromExistVersion) {
    IHadoopService hadoopService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopService.class)) {
      hadoopService=(IHadoopService)GlobalServiceRegister.getDefault().getService(IHadoopService.class);
    }
    if (hadoopService != null) {
      for (      ECustomVersionGroup group : existVersionSelectionMap.keySet()) {
        if (existVersionSelectionMap.get(group)) {
          if (types != null) {
            HashSet libInSameGroup=new HashSet<LibraryFile>();
            for (            ECustomVersionType type : types) {
              if (type.getGroup() == group) {
                if (ECustomVersionType.HCATALOG == type || ECustomVersionType.OOZIE == type) {
                  type=ECustomVersionType.HDFS;
                }
                Set<String> hadoopLibraries=hadoopService.getHadoopLibrariesByType(type,getDistribution(),getVersion());
                Set<LibraryFile> convertToLibraryFile=customLibUtil.convertToLibraryFile(hadoopLibraries);
                libInSameGroup.addAll(convertToLibraryFile);
              }
            }
            libMap.put(group,libInSameGroup);
          }
        }
      }
    }
  }
 else   if (isFromZip) {
    Set<ECustomVersionGroup> groups=new HashSet<ECustomVersionGroup>();
    for (    ECustomVersionGroup group : fromZipSelectionMap.keySet()) {
      if (fromZipSelectionMap.get(group)) {
        groups.add(group);
      }
    }
    return customLibUtil.readZipFile(zipLocation,groups);
  }
  return libMap;
}","public Map<ECustomVersionGroup,Set<LibraryFile>> getImportLibLibraries(){
  Map<ECustomVersionGroup,Set<LibraryFile>> libMap=new HashMap<ECustomVersionGroup,Set<LibraryFile>>();
  if (isFromExistVersion) {
    IHadoopService hadoopService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopService.class)) {
      hadoopService=(IHadoopService)GlobalServiceRegister.getDefault().getService(IHadoopService.class);
    }
    if (hadoopService != null) {
      for (      ECustomVersionGroup group : existVersionSelectionMap.keySet()) {
        if (existVersionSelectionMap.get(group)) {
          if (types != null) {
            HashSet libInSameGroup=new HashSet<LibraryFile>();
            for (            ECustomVersionType type : types) {
              if (type.getGroup() == group) {
                Set<String> hadoopLibraries=new HashSet<String>();
                if (ECustomVersionType.PIG == type) {
                  hadoopLibraries=getLibrariesForPig();
                }
 else {
                  if (ECustomVersionType.HCATALOG == type || ECustomVersionType.OOZIE == type) {
                    type=ECustomVersionType.HDFS;
                  }
                  hadoopLibraries=hadoopService.getHadoopLibrariesByType(type,getDistribution(),getVersion());
                }
                Set<LibraryFile> convertToLibraryFile=customLibUtil.convertToLibraryFile(hadoopLibraries);
                libInSameGroup.addAll(convertToLibraryFile);
              }
            }
            libMap.put(group,libInSameGroup);
          }
        }
      }
    }
  }
 else   if (isFromZip) {
    Set<ECustomVersionGroup> groups=new HashSet<ECustomVersionGroup>();
    for (    ECustomVersionGroup group : fromZipSelectionMap.keySet()) {
      if (fromZipSelectionMap.get(group)) {
        groups.add(group);
      }
    }
    return customLibUtil.readZipFile(zipLocation,groups);
  }
  return libMap;
}",0.9344666849465314
127915,"/** 
 * DOC ycbai Comment method ""invokeMethod"". Returns the value of a method.
 * @param owner
 * @param methodName
 * @param args
 * @param argTypes
 * @return
 * @throws NoSuchMethodException
 * @throws SecurityException
 * @throws InvocationTargetException
 * @throws IllegalAccessException
 * @throws IllegalArgumentException
 */
public static Object invokeMethod(Object owner,String methodName,Object[] args,Class... argTypes) throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  Object returnValue=null;
  Class ownerClass=owner.getClass();
  Class[] argsClass=new Class[args.length];
  if (argTypes != null && argTypes.length == args.length) {
    argsClass=argTypes;
  }
 else {
    for (int i=0, j=args.length; i < j; i++) {
      argsClass[i]=args[i].getClass();
    }
  }
  Method method=ownerClass.getMethod(methodName,argsClass);
  method.setAccessible(true);
  returnValue=method.invoke(owner,args);
  return returnValue;
}","/** 
 * DOC ycbai Comment method ""invokeMethod"". Returns the value of a method.
 * @param owner
 * @param methodName
 * @param args
 * @param argTypes
 * @return
 * @throws NoSuchMethodException
 * @throws SecurityException
 * @throws InvocationTargetException
 * @throws IllegalAccessException
 * @throws IllegalArgumentException
 */
public static Object invokeMethod(Object owner,String methodName,Object[] args,Class... argTypes) throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  Object returnValue=null;
  Class ownerClass=owner.getClass();
  Class[] argsClass=new Class[args.length];
  if (argTypes.length > 0 && argTypes.length == args.length) {
    argsClass=argTypes;
  }
 else {
    for (int i=0, j=args.length; i < j; i++) {
      argsClass[i]=args[i].getClass();
    }
  }
  Method method=ownerClass.getMethod(methodName,argsClass);
  method.setAccessible(true);
  returnValue=method.invoke(owner,args);
  return returnValue;
}",0.9906450024618416
127916,"/** 
 * DOC xqliu Comment method ""addTypesToSql"".
 * @param sql
 * @param types
 * @param and
 * @return
 */
private String addTypesToSql(String sql,String[] types,String and){
  String result=sql;
  boolean checkContainTable=checkContainTable(types);
  String typeClause=""String_Node_Str"";
  if (checkContainTable && types.length > 1) {
    typeClause+=""String_Node_Str"";
  }
  if (types != null && types.length > 0) {
    typeClause+=""String_Node_Str"";
    int len=types.length;
    String comma=""String_Node_Str"";
    for (int i=0; i < len; ++i) {
      if (TABLE.equals(types[i])) {
        continue;
      }
      typeClause=typeClause + comma + ""String_Node_Str""+ getDb2zosTypeName(types[i])+ ""String_Node_Str"";
      comma=""String_Node_Str"";
    }
    if (checkContainTable && types.length == 1) {
      typeClause=typeClause + ""String_Node_Str"" + getDb2zosTypeName(types[0])+ ""String_Node_Str""+ ""String_Node_Str"";
    }
 else {
      typeClause=typeClause + ""String_Node_Str"";
    }
    result=sql + and + typeClause;
    if (checkContainTable && types.length > 1) {
      result=result + ""String_Node_Str"";
    }
  }
  return result;
}","/** 
 * DOC xqliu Comment method ""addTypesToSql"".
 * @param sql
 * @param types
 * @param and
 * @return
 */
private String addTypesToSql(String sql,String[] types,String and){
  String result=sql;
  if (types != null && types.length > 0) {
    String typeClause=""String_Node_Str"";
    int len=types.length;
    for (int i=0; i < len; ++i) {
      String comma=""String_Node_Str"";
      if (i > 0) {
        comma=""String_Node_Str"";
      }
      typeClause=typeClause + comma + ""String_Node_Str""+ getDb2zosTypeName(types[i])+ ""String_Node_Str"";
    }
    typeClause=typeClause + ""String_Node_Str"";
    result=sql + and + typeClause;
  }
  return result;
}",0.5403001667593107
127917,"public static String getHive1EmbeddedURLString(DatabaseConnection dbConn,boolean supportContext){
  return EDatabaseConnTemplate.HIVE.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_EMBEDDED);
}","private static String getHive1EmbeddedURLString(){
  return EDatabaseConnTemplate.HIVE.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_EMBEDDED);
}",0.8298507462686567
127918,"private static String searchGoodRegex(String currentDbType,String dbVersion,String stringConnection){
  String startStringConnection;
  String startTemplateString;
  EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersion(dbVersion);
  for (  EDatabaseConnTemplate template : EDatabaseConnTemplate.values()) {
    String urlTemplate=template.getUrlTemplate(version);
    startTemplateString=urlTemplate.substring(0,urlTemplate.indexOf(""String_Node_Str""));
    if (startTemplateString.length() <= stringConnection.length()) {
      startStringConnection=stringConnection.substring(0,startTemplateString.length());
      if (stringConnection.contains(""String_Node_Str"")) {
        return EDatabaseConnTemplate.ORACLESN.getDBDisplayName();
      }
 else       if (!startTemplateString.equals(""String_Node_Str"") && startTemplateString.equals(startStringConnection)) {
        return template.getDBDisplayName();
      }
    }
  }
  return currentDbType;
}","private static String searchGoodRegex(String currentDbType,String dbVersion,String stringConnection){
  String startStringConnection;
  String startTemplateString;
  EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersion(dbVersion);
  for (  EDatabaseConnTemplate template : EDatabaseConnTemplate.values()) {
    String urlTemplate=template.getUrlTemplate(version);
    if (urlTemplate.indexOf(""String_Node_Str"") != -1) {
      startTemplateString=urlTemplate.substring(0,urlTemplate.indexOf(""String_Node_Str""));
      if (startTemplateString.length() <= stringConnection.length()) {
        startStringConnection=stringConnection.substring(0,startTemplateString.length());
        if (stringConnection.contains(""String_Node_Str"")) {
          return EDatabaseConnTemplate.ORACLESN.getDBDisplayName();
        }
 else         if (!startTemplateString.equals(""String_Node_Str"") && startTemplateString.equals(startStringConnection)) {
          return template.getDBDisplayName();
        }
      }
    }
  }
  return currentDbType;
}",0.9159248269040554
127919,"public static String getHive2StandaloneURLString(DatabaseConnection dbConn,boolean supportContext){
  String s=EDatabaseConnTemplate.HIVE.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_2_STANDALONE);
  if (s != null) {
    if (supportContext) {
      s=TalendQuoteUtils.addQuotes(s);
    }
    s=getStringReplace(s,EDatabaseConnVar.LOGIN.getVariable(),dbConn.getUsername(),supportContext);
    s=getStringReplace(s,EDatabaseConnVar.PASSWORD.getVariable(),dbConn.getPassword(),supportContext,true);
    s=getStringReplace(s,EDatabaseConnVar.HOST.getVariable(),dbConn.getServerName(),supportContext);
    s=getStringReplace(s,EDatabaseConnVar.PORT.getVariable(),dbConn.getPort(),supportContext);
    s=getStringReplace(s,EDatabaseConnVar.SID.getVariable(),dbConn.getSID(),supportContext);
    s=getStringReplace(s,EDatabaseConnVar.SERVICE_NAME.getVariable(),dbConn.getSID(),supportContext);
    s=getStringReplace(s,EDatabaseConnVar.DATASOURCE.getVariable(),dbConn.getDatasourceName(),supportContext);
    s=getStringReplace(s,EDatabaseConnVar.FILENAME.getVariable(),dbConn.getFileFieldName(),supportContext);
  }
  return s;
}","private static String getHive2StandaloneURLString(boolean supportContext,String server,String port,String sid){
  String s=EDatabaseConnTemplate.HIVE.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_2_STANDALONE);
  return getHiveStandaloneURlString(s,supportContext,server,port,sid);
}",0.2476868327402135
127920,"public static String getHive2EmbeddedURLString(DatabaseConnection dbConn,boolean supportContext){
  return EDatabaseConnTemplate.HIVE.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_2_EMBEDDED);
}","private static String getHive2EmbeddedURLString(){
  return EDatabaseConnTemplate.HIVE.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_2_EMBEDDED);
}",0.831858407079646
127921,"public static String getHive1StandaloneURLString(DatabaseConnection dbConn,boolean supportContext){
  String s=EDatabaseConnTemplate.HIVE.getUrlTemplate(EDatabaseVersion4Drivers.HIVE);
  if (s != null) {
    if (supportContext) {
      s=TalendQuoteUtils.addQuotes(s);
    }
    s=getStringReplace(s,EDatabaseConnVar.LOGIN.getVariable(),dbConn.getUsername(),supportContext);
    s=getStringReplace(s,EDatabaseConnVar.PASSWORD.getVariable(),dbConn.getPassword(),supportContext,true);
    s=getStringReplace(s,EDatabaseConnVar.HOST.getVariable(),dbConn.getServerName(),supportContext);
    s=getStringReplace(s,EDatabaseConnVar.PORT.getVariable(),dbConn.getPort(),supportContext);
    s=getStringReplace(s,EDatabaseConnVar.SID.getVariable(),dbConn.getSID(),supportContext);
    s=getStringReplace(s,EDatabaseConnVar.SERVICE_NAME.getVariable(),dbConn.getSID(),supportContext);
    s=getStringReplace(s,EDatabaseConnVar.DATASOURCE.getVariable(),dbConn.getDatasourceName(),supportContext);
    s=getStringReplace(s,EDatabaseConnVar.FILENAME.getVariable(),dbConn.getFileFieldName(),supportContext);
  }
  return s;
}","private static String getHive1StandaloneURLString(boolean supportContext,String server,String port,String sid){
  String s=EDatabaseConnTemplate.HIVE.getUrlTemplate(EDatabaseVersion4Drivers.HIVE);
  return getHiveStandaloneURlString(s,supportContext,server,port,sid);
}",0.233502538071066
127922,"@Override String getUrlTemplate(EDatabaseVersion4Drivers version){
switch (version) {
case HIVE:
    return URL_HIVE_1_STANDALONE;
case HIVE_EMBEDDED:
  return URL_HIVE_1_EMBEDDED;
case HIVE_2_EMBEDDED:
return URL_HIVE_2_EMBEDDED;
case HIVE_2_STANDALONE:
return URL_HIVE_2_STANDALONE;
default :
return super.getUrlTemplate(version);
}
}","@Override String getUrlTemplate(EDatabaseVersion4Drivers version){
switch (version) {
case HIVE:
    return URL_HIVE_1_STANDALONE;
case HIVE_EMBEDDED:
  return URL_HIVE_1_TEMPLATE;
case HIVE_2_EMBEDDED:
return URL_HIVE_2_TEMPLATE;
case HIVE_2_STANDALONE:
return URL_HIVE_2_STANDALONE;
default :
return super.getUrlTemplate(version);
}
}",0.8779761904761905
127923,"@Override String getUrlPattern(EDatabaseVersion4Drivers version){
switch (version) {
case HIVE:
    return calcPattern(URL_HIVE_1_STANDALONE);
case HIVE_EMBEDDED:
  return calcPattern(URL_HIVE_1_EMBEDDED);
case HIVE_2_EMBEDDED:
return calcPattern(URL_HIVE_2_EMBEDDED);
case HIVE_2_STANDALONE:
return calcPattern(URL_HIVE_2_STANDALONE);
default :
return super.getUrlPattern(version);
}
}","@Override String getUrlPattern(EDatabaseVersion4Drivers version){
switch (version) {
case HIVE:
    return calcPattern(URL_HIVE_1_STANDALONE);
case HIVE_EMBEDDED:
  return calcPattern(URL_HIVE_1_TEMPLATE);
case HIVE_2_EMBEDDED:
return calcPattern(URL_HIVE_2_TEMPLATE);
case HIVE_2_STANDALONE:
return calcPattern(URL_HIVE_2_STANDALONE);
default :
return super.getUrlPattern(version);
}
}",0.8601036269430051
127924,"static List<IContextParameter> getDBVariables(String prefixName,DatabaseConnection conn,Set<IConnParamName> paramSet){
  if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return Collections.emptyList();
  }
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  prefixName=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      paramName=prefixName + dbParam;
switch (dbParam) {
case AdditionalParams:
        ConnectionContextHelper.createParameters(varList,paramName,conn.getAdditionalParams());
      break;
case Datasource:
    ConnectionContextHelper.createParameters(varList,paramName,conn.getDatasourceName());
  break;
case DBRootPath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDBRootPath(),JavaTypesManager.DIRECTORY);
break;
case File:
ConnectionContextHelper.createParameters(varList,paramName,conn.getFileFieldName(),JavaTypesManager.FILE);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPassword(),JavaTypesManager.PASSWORD);
break;
case JdbcUrl:
String url=conn.getURL();
String h2Prefix=""String_Node_Str"";
if (url.startsWith(h2Prefix)) {
String path=url.substring(h2Prefix.length(),url.length());
path=PathUtils.getPortablePath(path);
url=h2Prefix + path;
}
ConnectionContextHelper.createParameters(varList,paramName,url);
break;
case DriverJar:
String path=conn.getDriverJarPath();
PathUtils.getOSPath(path);
if (path.contains(""String_Node_Str"")) {
Path p=new Path(path);
String newPath=p.getDevice();
for (int i=0; i < p.segmentCount(); i++) {
newPath=newPath + ""String_Node_Str"" + p.segment(i);
}
path=newPath;
}
ConnectionContextHelper.createParameters(varList,paramName,path);
break;
case MappingFile:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDbmsId());
break;
case ClassName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDriverClass());
break;
case Port:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPort(),JavaTypesManager.STRING);
break;
case Schema:
if (conn.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct())) {
String schema=conn.getUiSchema();
if (schema != null) {
conn.setUiSchema(schema.toUpperCase());
}
}
ConnectionContextHelper.createParameters(varList,paramName,conn.getUiSchema());
break;
case Server:
ConnectionContextHelper.createParameters(varList,paramName,conn.getServerName());
break;
case Sid:
case Database:
case ServiceName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getSID());
break;
case Login:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUsername());
break;
default :
}
}
}
return varList;
}","static List<IContextParameter> getDBVariables(String prefixName,DatabaseConnection conn,Set<IConnParamName> paramSet){
  if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return Collections.emptyList();
  }
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  prefixName=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      paramName=prefixName + dbParam;
switch (dbParam) {
case AdditionalParams:
        ConnectionContextHelper.createParameters(varList,paramName,conn.getAdditionalParams());
      break;
case Datasource:
    ConnectionContextHelper.createParameters(varList,paramName,conn.getDatasourceName());
  break;
case DBRootPath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDBRootPath(),JavaTypesManager.DIRECTORY);
break;
case File:
ConnectionContextHelper.createParameters(varList,paramName,conn.getFileFieldName(),JavaTypesManager.FILE);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPassword(),JavaTypesManager.PASSWORD);
break;
case JdbcUrl:
String url=conn.getURL();
String h2Prefix=""String_Node_Str"";
if (url.startsWith(h2Prefix)) {
String path=url.substring(h2Prefix.length(),url.length());
path=PathUtils.getPortablePath(path);
url=h2Prefix + path;
}
ConnectionContextHelper.createParameters(varList,paramName,url);
break;
case DriverJar:
String path=conn.getDriverJarPath();
PathUtils.getOSPath(path);
if (path.contains(""String_Node_Str"")) {
Path p=new Path(path);
String newPath=p.getDevice();
for (int i=0; i < p.segmentCount(); i++) {
newPath=newPath + ""String_Node_Str"" + p.segment(i);
}
path=newPath;
}
ConnectionContextHelper.createParameters(varList,paramName,path);
break;
case MappingFile:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDbmsId());
break;
case ClassName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDriverClass());
break;
case Port:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPort(),JavaTypesManager.STRING);
break;
case Schema:
if (conn.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct())) {
String schema=conn.getUiSchema();
if (schema != null) {
conn.setUiSchema(schema.toUpperCase());
}
}
ConnectionContextHelper.createParameters(varList,paramName,conn.getUiSchema());
break;
case Server:
ConnectionContextHelper.createParameters(varList,paramName,conn.getServerName());
break;
case Sid:
case Database:
case ServiceName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getSID());
break;
case Login:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUsername());
break;
case JobTracker:
String value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case NameNode:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
default :
}
}
}
return varList;
}",0.9424830101110558
127925,"static void revertPropertiesForContextMode(DatabaseConnection conn,ContextType contextType){
  if (conn == null || contextType == null) {
    return;
  }
  String server=ConnectionContextHelper.getOriginalValue(contextType,conn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,conn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,conn.getPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,conn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,conn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,conn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,conn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,conn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,conn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,conn.getAdditionalParams());
  String jdbcUrl=ConnectionContextHelper.getOriginalValue(contextType,conn.getURL());
  String driverJar=ConnectionContextHelper.getOriginalValue(contextType,conn.getDriverJarPath());
  String className=ConnectionContextHelper.getOriginalValue(contextType,conn.getDriverClass());
  String mappingFile=ConnectionContextHelper.getOriginalValue(contextType,conn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  conn.setAdditionalParams(additionParam);
  conn.setDatasourceName(datasource);
  conn.setDBRootPath(dbRootPath);
  conn.setFileFieldName(filePath);
  try {
    conn.setPassword(PasswordEncryptUtil.encryptPassword(password));
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  conn.setPort(port);
  conn.setUiSchema(schemaOracle);
  conn.setServerName(server);
  if (conn.getDataPackage() != null) {
    for (    orgomg.cwm.objectmodel.core.Package dataPackage : conn.getDataPackage()) {
      if (dataPackage instanceof ModelElement) {
        ModelElement element=dataPackage;
        if (conn.getSID() != null && conn.getSID().equals(element.getName())) {
          element.setName(sidOrDatabase);
        }
      }
    }
  }
  conn.setSID(sidOrDatabase);
  conn.setUsername(username);
  conn.setURL(jdbcUrl);
  conn.setDriverJarPath(driverJar);
  conn.setDriverClass(className);
  conn.setDbmsId(mappingFile);
  revertConnSubElement(conn,contextType);
}","static void revertPropertiesForContextMode(DatabaseConnection conn,ContextType contextType){
  if (conn == null || contextType == null) {
    return;
  }
  String server=ConnectionContextHelper.getOriginalValue(contextType,conn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,conn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,conn.getPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,conn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,conn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,conn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,conn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,conn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,conn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,conn.getAdditionalParams());
  String jdbcUrl=ConnectionContextHelper.getOriginalValue(contextType,conn.getURL());
  String driverJar=ConnectionContextHelper.getOriginalValue(contextType,conn.getDriverJarPath());
  String className=ConnectionContextHelper.getOriginalValue(contextType,conn.getDriverClass());
  String mappingFile=ConnectionContextHelper.getOriginalValue(contextType,conn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  conn.setAdditionalParams(additionParam);
  conn.setDatasourceName(datasource);
  conn.setDBRootPath(dbRootPath);
  conn.setFileFieldName(filePath);
  try {
    conn.setPassword(PasswordEncryptUtil.encryptPassword(password));
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  conn.setPort(port);
  conn.setUiSchema(schemaOracle);
  conn.setServerName(server);
  if (conn.getDataPackage() != null) {
    for (    orgomg.cwm.objectmodel.core.Package dataPackage : conn.getDataPackage()) {
      if (dataPackage instanceof ModelElement) {
        ModelElement element=dataPackage;
        if (conn.getSID() != null && conn.getSID().equals(element.getName())) {
          element.setName(sidOrDatabase);
        }
      }
    }
  }
  conn.setSID(sidOrDatabase);
  conn.setUsername(username);
  conn.setURL(jdbcUrl);
  conn.setDriverJarPath(driverJar);
  conn.setDriverClass(className);
  conn.setDbmsId(mappingFile);
  revertConnSubElement(conn,contextType);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String jobTracker=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ConnectionContextHelper.getOriginalValue(contextType,jobTracker));
    String nameNode=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ConnectionContextHelper.getOriginalValue(contextType,nameNode));
  }
}",0.8984182776801406
127926,"static void setPropertiesForContextMode(String prefixName,DatabaseConnection conn,Set<IConnParamName> paramSet,Map<String,String> map){
  if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return;
  }
  prefixName=prefixName + ConnectionContextHelper.LINE;
  String originalVariableName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      originalVariableName=prefixName + dbParam;
      if (map != null && map.size() > 0) {
        for (        Map.Entry<String,String> entry : map.entrySet()) {
          if (originalVariableName.equals(entry.getValue())) {
            originalVariableName=entry.getKey();
            break;
          }
        }
      }
switch (dbParam) {
case AdditionalParams:
        conn.setAdditionalParams(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
      break;
case Datasource:
    conn.setDatasourceName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
  break;
case DBRootPath:
conn.setDBRootPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case File:
conn.setFileFieldName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Password:
conn.setPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JdbcUrl:
conn.setURL(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DriverJar:
conn.setDriverJarPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MappingFile:
conn.setDbmsId(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ClassName:
conn.setDriverClass(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Port:
conn.setPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Schema:
conn.setUiSchema(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Server:
conn.setServerName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Sid:
case Database:
case ServiceName:
conn.setSID(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Login:
conn.setUsername(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
default :
}
}
}
}","static void setPropertiesForContextMode(String prefixName,DatabaseConnection conn,Set<IConnParamName> paramSet,Map<String,String> map){
  if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return;
  }
  prefixName=prefixName + ConnectionContextHelper.LINE;
  String originalVariableName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      originalVariableName=prefixName + dbParam;
      if (map != null && map.size() > 0) {
        for (        Map.Entry<String,String> entry : map.entrySet()) {
          if (originalVariableName.equals(entry.getValue())) {
            originalVariableName=entry.getKey();
            break;
          }
        }
      }
switch (dbParam) {
case AdditionalParams:
        conn.setAdditionalParams(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
      break;
case Datasource:
    conn.setDatasourceName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
  break;
case DBRootPath:
conn.setDBRootPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case File:
conn.setFileFieldName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Password:
conn.setPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JdbcUrl:
conn.setURL(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DriverJar:
conn.setDriverJarPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MappingFile:
conn.setDbmsId(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ClassName:
conn.setDriverClass(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Port:
conn.setPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Schema:
conn.setUiSchema(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Server:
conn.setServerName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Sid:
case Database:
case ServiceName:
conn.setSID(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Login:
conn.setUsername(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JobTracker:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case NameNode:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
default :
}
}
}
}",0.935990801073208
127927,"/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  if (contextType != null) {
    String encryptedPassword=null;
    try {
      encryptedPassword=PasswordEncryptUtil.encryptPassword(password);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    cloneConn.setPassword(encryptedPassword);
  }
 else {
    cloneConn.setPassword(password);
  }
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}","/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  if (contextType != null) {
    String encryptedPassword=null;
    try {
      encryptedPassword=PasswordEncryptUtil.encryptPassword(password);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    cloneConn.setPassword(encryptedPassword);
  }
 else {
    cloneConn.setPassword(password);
  }
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURl=DatabaseConnStrUtil.getHiveURLString(dbConn,server,port,sidOrDatabase);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}",0.9729611862189272
127928,"/** 
 * ggu Comment method ""getUrlConnectionString"". if display is false, the string connection will be returned by default context.
 */
public static String getUrlConnectionString(ConnectionItem connectionItem,boolean defaultContext){
  if (connectionItem == null) {
    return null;
  }
  DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(dbConn,defaultContext);
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String jdbcUrl=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String driverJar=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  String mappingFile=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  String newUrl=DatabaseConnStrUtil.getURLString(dbConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam,jdbcUrl,driverJar,className,mappingFile);
  return newUrl;
}","/** 
 * ggu Comment method ""getUrlConnectionString"". if display is false, the string connection will be returned by default context.
 */
public static String getUrlConnectionString(ConnectionItem connectionItem,boolean defaultContext){
  if (connectionItem == null) {
    return null;
  }
  DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(dbConn,defaultContext);
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String jdbcUrl=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String driverJar=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  String mappingFile=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    return DatabaseConnStrUtil.getHiveURLString(dbConn,server,port,sidOrDatabase);
  }
  String newUrl=DatabaseConnStrUtil.getURLString(dbConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam,jdbcUrl,driverJar,className,mappingFile);
  return newUrl;
}",0.8612628359187241
127929,"/** 
 * Just for hive pre-setup, some configurations are required to set up to the properties of system. It is just for Hive embedded mode.Added by Marvin Wang on Nov 22, 2012.(Just a reminder: TDQ-6462)
 * @param conn
 */
public static void doHivePreSetup(Connection conn){
  if (conn instanceof DatabaseConnection) {
    IProject project=ProjectManager.getInstance().getResourceProject(ProjectManager.getInstance().getCurrentProject().getEmfProject());
    String fullPathTemp=project.getFolder(""String_Node_Str"").getLocation().append(""String_Node_Str"").toPortableString();
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_JDO_CONNECTION_URL.getKey(),""String_Node_Str"" + fullPathTemp + ""String_Node_Str"");
    DatabaseConnection dbConn=(DatabaseConnection)conn;
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_LOCAL.getKey(),""String_Node_Str"");
    String thriftURL=""String_Node_Str"" + dbConn.getServerName() + ""String_Node_Str""+ dbConn.getPort();
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_URI.getKey(),thriftURL);
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_EXECUTE_SETUGI.getKey(),""String_Node_Str"");
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_FS_DEFAULT_NAME.getKey(),dbConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL));
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_MAPRED_JOB_TRACKER.getKey(),dbConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL));
  }
}","/** 
 * Just for hive pre-setup, some configurations are required to set up to the properties of system. It is just for Hive embedded mode.Added by Marvin Wang on Nov 22, 2012.(Just a reminder: TDQ-6462)
 * @param conn
 */
public static void doHivePreSetup(Connection connection){
  Connection conn=connection;
  if (conn instanceof DatabaseConnection) {
    IProject project=ProjectManager.getInstance().getResourceProject(ProjectManager.getInstance().getCurrentProject().getEmfProject());
    String fullPathTemp=project.getFolder(""String_Node_Str"").getLocation().append(""String_Node_Str"").toPortableString();
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_JDO_CONNECTION_URL.getKey(),""String_Node_Str"" + fullPathTemp + ""String_Node_Str"");
    DatabaseConnection dbConn=(DatabaseConnection)conn;
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_LOCAL.getKey(),""String_Node_Str"");
    if (conn.isContextMode()) {
      IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
      if (repositoryService != null) {
        String contextName=conn.getContextName();
        conn=repositoryService.cloneOriginalValueConnection(dbConn,contextName == null ? true : false,contextName);
      }
    }
    String thriftURL=""String_Node_Str"" + dbConn.getServerName() + ""String_Node_Str""+ dbConn.getPort();
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_URI.getKey(),thriftURL);
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_EXECUTE_SETUGI.getKey(),""String_Node_Str"");
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_FS_DEFAULT_NAME.getKey(),dbConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL));
    System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_MAPRED_JOB_TRACKER.getKey(),dbConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL));
  }
}",0.8919977616116396
127930,"@Override protected void run() throws LoginException, PersistenceException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (!monitor.isCanceled()) {
    final ManagerConnection managerConnection=new ManagerConnection();
    DatabaseConnection connection=(DatabaseConnection)item.getConnection();
    IMetadataConnection metadataConnection=ConvertionHelper.convert(connection);
    if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        metadataConnection.setUrl(connection.getURL());
        if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
          JavaSqlFactory.doHivePreSetup(connection);
        }
      }
 else {
        String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
        metadataConnection.setUrl(genUrl);
      }
    }
    if (connection != null) {
      EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
      Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
      ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
    }
    if (creation) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        try {
          HiveConnectionManager.getInstance().checkConnection(metadataConnection);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        managerConnection.check(metadataConnection);
      }
      ExtractMetaDataUtils.setUseAllSynonyms(false);
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      wizardDialog.setBlockOnOpen(true);
      handleWizard(node,wizardDialog);
    }
 else {
      final boolean skipStep=true;
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      databaseTableWizard.setSkipStep(skipStep);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      handleWizard(node,wizardDialog);
    }
  }
}","@Override protected void run() throws LoginException, PersistenceException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (!monitor.isCanceled()) {
    final ManagerConnection managerConnection=new ManagerConnection();
    DatabaseConnection connection=(DatabaseConnection)item.getConnection();
    IMetadataConnection metadataConnection=ConvertionHelper.convert(connection);
    if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        metadataConnection.setUrl(connection.getURL());
        if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
          JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
        }
      }
 else {
        String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
        metadataConnection.setUrl(genUrl);
      }
    }
    if (connection != null) {
      EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
      Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
      ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
    }
    if (creation) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        try {
          HiveConnectionManager.getInstance().checkConnection(metadataConnection);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        managerConnection.check(metadataConnection);
      }
      ExtractMetaDataUtils.setUseAllSynonyms(false);
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      wizardDialog.setBlockOnOpen(true);
      handleWizard(node,wizardDialog);
    }
 else {
      final boolean skipStep=true;
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      databaseTableWizard.setSkipStep(skipStep);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      handleWizard(node,wizardDialog);
    }
  }
}",0.9894892672094744
127931,"private void openDatabaseTableWizard(final DatabaseConnectionItem item,final MetadataTable metadataTable,final boolean forceReadOnly,final RepositoryNode node,final boolean creation){
  UIJob job=new UIJob(Messages.getString(""String_Node_Str"")){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      String name=""String_Node_Str"" + getText();
      RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
        @Override protected void run() throws LoginException, PersistenceException {
          monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
          if (!monitor.isCanceled()) {
            final ManagerConnection managerConnection=new ManagerConnection();
            DatabaseConnection connection=(DatabaseConnection)item.getConnection();
            IMetadataConnection metadataConnection=ConvertionHelper.convert(connection);
            if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                metadataConnection.setUrl(connection.getURL());
                if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
                  JavaSqlFactory.doHivePreSetup(connection);
                }
              }
 else {
                String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
                metadataConnection.setUrl(genUrl);
              }
            }
            if (connection != null) {
              EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
              Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
              ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
            }
            if (creation) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                try {
                  HiveConnectionManager.getInstance().checkConnection(metadataConnection);
                }
 catch (                Exception e) {
                  e.printStackTrace();
                }
              }
 else {
                managerConnection.check(metadataConnection);
              }
              ExtractMetaDataUtils.setUseAllSynonyms(false);
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              wizardDialog.setBlockOnOpen(true);
              handleWizard(node,wizardDialog);
            }
 else {
              final boolean skipStep=true;
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              databaseTableWizard.setSkipStep(skipStep);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              handleWizard(node,wizardDialog);
            }
          }
        }
      }
;
      repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(true);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      if (!event.getResult().isOK()) {
        log.error(event.getResult().getMessage(),event.getResult().getException());
      }
    }
  }
);
  job.schedule();
}","private void openDatabaseTableWizard(final DatabaseConnectionItem item,final MetadataTable metadataTable,final boolean forceReadOnly,final RepositoryNode node,final boolean creation){
  UIJob job=new UIJob(Messages.getString(""String_Node_Str"")){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      String name=""String_Node_Str"" + getText();
      RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
        @Override protected void run() throws LoginException, PersistenceException {
          monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
          if (!monitor.isCanceled()) {
            final ManagerConnection managerConnection=new ManagerConnection();
            DatabaseConnection connection=(DatabaseConnection)item.getConnection();
            IMetadataConnection metadataConnection=ConvertionHelper.convert(connection);
            if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                metadataConnection.setUrl(connection.getURL());
                if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
                  JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
                }
              }
 else {
                String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
                metadataConnection.setUrl(genUrl);
              }
            }
            if (connection != null) {
              EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
              Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
              ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
            }
            if (creation) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                try {
                  HiveConnectionManager.getInstance().checkConnection(metadataConnection);
                }
 catch (                Exception e) {
                  e.printStackTrace();
                }
              }
 else {
                managerConnection.check(metadataConnection);
              }
              ExtractMetaDataUtils.setUseAllSynonyms(false);
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              wizardDialog.setBlockOnOpen(true);
              handleWizard(node,wizardDialog);
            }
 else {
              final boolean skipStep=true;
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              databaseTableWizard.setSkipStep(skipStep);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              handleWizard(node,wizardDialog);
            }
          }
        }
      }
;
      repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(true);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      if (!event.getResult().isOK()) {
        log.error(event.getResult().getMessage(),event.getResult().getException());
      }
    }
  }
);
  job.schedule();
}",0.9927852860481658
127932,"@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  String name=""String_Node_Str"" + getText();
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
    @Override protected void run() throws LoginException, PersistenceException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      if (!monitor.isCanceled()) {
        final ManagerConnection managerConnection=new ManagerConnection();
        DatabaseConnection connection=(DatabaseConnection)item.getConnection();
        IMetadataConnection metadataConnection=ConvertionHelper.convert(connection);
        if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            metadataConnection.setUrl(connection.getURL());
            if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
              JavaSqlFactory.doHivePreSetup(connection);
            }
          }
 else {
            String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
            metadataConnection.setUrl(genUrl);
          }
        }
        if (connection != null) {
          EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
          Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
          ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (creation) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            try {
              HiveConnectionManager.getInstance().checkConnection(metadataConnection);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            managerConnection.check(metadataConnection);
          }
          ExtractMetaDataUtils.setUseAllSynonyms(false);
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          wizardDialog.setBlockOnOpen(true);
          handleWizard(node,wizardDialog);
        }
 else {
          final boolean skipStep=true;
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          databaseTableWizard.setSkipStep(skipStep);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          handleWizard(node,wizardDialog);
        }
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
  IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  monitor.done();
  return Status.OK_STATUS;
}","@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  String name=""String_Node_Str"" + getText();
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
    @Override protected void run() throws LoginException, PersistenceException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      if (!monitor.isCanceled()) {
        final ManagerConnection managerConnection=new ManagerConnection();
        DatabaseConnection connection=(DatabaseConnection)item.getConnection();
        IMetadataConnection metadataConnection=ConvertionHelper.convert(connection);
        if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            metadataConnection.setUrl(connection.getURL());
            if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
              JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
            }
          }
 else {
            String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
            metadataConnection.setUrl(genUrl);
          }
        }
        if (connection != null) {
          EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
          Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
          ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (creation) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            try {
              HiveConnectionManager.getInstance().checkConnection(metadataConnection);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            managerConnection.check(metadataConnection);
          }
          ExtractMetaDataUtils.setUseAllSynonyms(false);
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          wizardDialog.setBlockOnOpen(true);
          handleWizard(node,wizardDialog);
        }
 else {
          final boolean skipStep=true;
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          databaseTableWizard.setSkipStep(skipStep);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          handleWizard(node,wizardDialog);
        }
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
  IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  monitor.done();
  return Status.OK_STATUS;
}",0.9914116366275554
127933,"/** 
 * DOC xqliu Comment method ""addTypesToSql"".
 * @param sql
 * @param types
 * @param and
 * @return
 */
private String addTypesToSql(String sql,String[] types,String and){
  String result=sql;
  boolean checkContainTable=checkContainTable(types);
  String typeClause=""String_Node_Str"";
  if (checkContainTable && types.length > 1) {
    typeClause+=""String_Node_Str"";
  }
  if (types != null && types.length > 0) {
    typeClause+=""String_Node_Str"";
    int len=types.length;
    String comma=""String_Node_Str"";
    for (int i=0; i < len; ++i) {
      if (TABLE.equals(types[i])) {
        continue;
      }
      typeClause=typeClause + comma + ""String_Node_Str""+ getDb2zosTypeName(types[i])+ ""String_Node_Str"";
      comma=""String_Node_Str"";
    }
    if (checkContainTable && types.length == 1) {
      typeClause=typeClause + ""String_Node_Str"" + getDb2zosTypeName(types[0])+ ""String_Node_Str""+ ""String_Node_Str"";
    }
 else {
      typeClause=typeClause + ""String_Node_Str"";
    }
    result=sql + and + typeClause;
    if (checkContainTable && types.length > 1) {
      result=result + ""String_Node_Str"";
    }
  }
  return result;
}","/** 
 * DOC xqliu Comment method ""addTypesToSql"".
 * @param sql
 * @param types
 * @param and
 * @return
 */
private String addTypesToSql(String sql,String[] types,String and){
  String result=sql;
  if (types != null && types.length > 0) {
    String typeClause=""String_Node_Str"";
    int len=types.length;
    for (int i=0; i < len; ++i) {
      String comma=""String_Node_Str"";
      if (i > 0) {
        comma=""String_Node_Str"";
      }
      typeClause=typeClause + comma + ""String_Node_Str""+ getDb2zosTypeName(types[i])+ ""String_Node_Str"";
    }
    typeClause=typeClause + ""String_Node_Str"";
    result=sql + and + typeClause;
  }
  return result;
}",0.5403001667593107
127934,"public static boolean addSchemas(Collection<Schema> schemas,Catalog catalog){
  return addPackages(schemas,catalog);
}","public static boolean addSchemas(Schema schema,Catalog catalog){
  return addPackage(schema,catalog);
}",0.9321266968325792
127935,"public void validateRegistration(){
  if (registNumber == null) {
    return;
  }
  URL registURL=null;
  try {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    registURL=new URL(""String_Node_Str"" + DefaultTokenCollector.calcUniqueId() + ""String_Node_Str""+ brandingService.getAcronym());
    PlatformUI.getWorkbench().getBrowserSupport().getExternalBrowser().openURL(registURL);
  }
 catch (  PartInitException e) {
    try {
      Runtime.getRuntime().exec(""String_Node_Str"" + registURL.toString());
    }
 catch (    IOException e2) {
      if (PlatformUI.getWorkbench().getBrowserSupport().isInternalWebBrowserAvailable()) {
        IWebBrowser browser;
        try {
          browser=PlatformUI.getWorkbench().getBrowserSupport().createBrowser(""String_Node_Str"");
          browser.openURL(registURL);
        }
 catch (        PartInitException e1) {
          ExceptionHandler.process(e);
        }
      }
 else {
        ExceptionHandler.process(e);
      }
    }
  }
catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
}","public void validateRegistration(){
  if (registNumber == null) {
    return;
  }
  URL registURL=null;
  try {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    String uniqueId=DefaultTokenCollector.calcUniqueId();
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    registURL=new URL(""String_Node_Str"" + uniqueId + ""String_Node_Str""+ brandingService.getAcronym());
    PlatformUI.getWorkbench().getBrowserSupport().getExternalBrowser().openURL(registURL);
  }
 catch (  PartInitException e) {
    try {
      Runtime.getRuntime().exec(""String_Node_Str"" + registURL.toString());
    }
 catch (    IOException e2) {
      if (PlatformUI.getWorkbench().getBrowserSupport().isInternalWebBrowserAvailable()) {
        IWebBrowser browser;
        try {
          browser=PlatformUI.getWorkbench().getBrowserSupport().createBrowser(""String_Node_Str"");
          browser.openURL(registURL);
        }
 catch (        PartInitException e1) {
          ExceptionHandler.process(e);
        }
      }
 else {
        ExceptionHandler.process(e);
      }
    }
  }
catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
}",0.7370544720914594
127936,"@Override protected Control createDialogArea(Composite parent){
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  Composite composite=new Composite(parent,SWT.BORDER);
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  composite.setLayoutData(layoutData);
  tableViewerCreator=new TableViewerCreator(composite);
  tableViewerCreator.setCheckboxInFirstColumn(false);
  tableViewerCreator.setColumnsResizableByDefault(true);
  tableViewerCreator.setLinesVisible(true);
  tableViewerCreator.setLayoutMode(LAYOUT_MODE.CONTINUOUS);
  tableViewerCreator.createTable();
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getName();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setSortable(true);
  tableViewerCreator.setDefaultSort(column,SORT.ASC);
  column.setWeight(5);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getDescription();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setWeight(4);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setSortable(true);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getContext();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(5);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setDisplayedValue(""String_Node_Str"");
  column.setSortable(true);
  column.setImageProvider(new IColumnImageProvider<ModuleToInstall>(){
    @Override public Image getImage(    ModuleToInstall bean){
      if (bean.isRequired()) {
        return ImageProvider.getImage(EImage.CHECKED_ICON);
      }
 else {
        return ImageProvider.getImage(EImage.UNCHECKED_ICON);
      }
    }
  }
);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,Boolean>(){
    @Override public Boolean get(    ModuleToInstall bean){
      return bean.isRequired();
    }
    @Override public void set(    ModuleToInstall bean,    Boolean value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(2);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getLicenseType();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(3);
  TableViewerCreatorColumn urlcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  urlcolumn.setTitle(Messages.getString(""String_Node_Str""));
  urlcolumn.setToolTipHeader(Messages.getString(""String_Node_Str""));
  urlcolumn.setModifiable(false);
  urlcolumn.setSortable(true);
  urlcolumn.setWeight(7);
  TableViewerCreatorColumn installcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  installcolumn.setTitle(Messages.getString(""String_Node_Str""));
  installcolumn.setToolTipHeader(Messages.getString(""String_Node_Str""));
  installcolumn.setModifiable(false);
  installcolumn.setSortable(true);
  installcolumn.setWeight(5);
  tableViewerCreator.init(inputList);
  addInstallButtons(installcolumn,urlcolumn);
  layoutData=new GridData(GridData.FILL_BOTH);
  tableViewerCreator.getTable().setLayoutData(layoutData);
  tableViewerCreator.getTable().pack();
  Composite footComposite=new Composite(composite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  footComposite.setLayoutData(layoutData);
  layout=new GridLayout();
  layout.numColumns=2;
  footComposite.setLayout(layout);
  final Link moreInfor=new Link(footComposite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.widthHint=200;
  moreInfor.setText(Messages.getString(""String_Node_Str""));
  moreInfor.setLayoutData(layoutData);
  moreInfor.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Program.launch(HELP_CONTENT);
    }
  }
);
  installAllBtn=new Button(footComposite,SWT.NONE);
  installAllBtn.setText(Messages.getString(""String_Node_Str""));
  createFooter(composite);
  setTitle(title);
  addListeners();
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  Composite composite=new Composite(parent,SWT.BORDER);
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  composite.setLayoutData(layoutData);
  tableViewerCreator=new TableViewerCreator(composite);
  tableViewerCreator.setCheckboxInFirstColumn(false);
  tableViewerCreator.setColumnsResizableByDefault(true);
  tableViewerCreator.setLinesVisible(true);
  tableViewerCreator.setLayoutMode(LAYOUT_MODE.CONTINUOUS);
  tableViewerCreator.createTable();
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getName();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setSortable(true);
  tableViewerCreator.setDefaultSort(column,SORT.ASC);
  column.setWeight(5);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getDescription();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setWeight(4);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setSortable(true);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getContext();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(5);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setDisplayedValue(""String_Node_Str"");
  column.setSortable(true);
  column.setImageProvider(new IColumnImageProvider<ModuleToInstall>(){
    @Override public Image getImage(    ModuleToInstall bean){
      if (bean.isRequired()) {
        return ImageProvider.getImage(EImage.CHECKED_ICON);
      }
 else {
        return ImageProvider.getImage(EImage.UNCHECKED_ICON);
      }
    }
  }
);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,Boolean>(){
    @Override public Boolean get(    ModuleToInstall bean){
      return bean.isRequired();
    }
    @Override public void set(    ModuleToInstall bean,    Boolean value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(2);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getLicenseType();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(3);
  TableViewerCreatorColumn urlcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  urlcolumn.setTitle(Messages.getString(""String_Node_Str""));
  urlcolumn.setToolTipHeader(Messages.getString(""String_Node_Str""));
  urlcolumn.setModifiable(false);
  urlcolumn.setSortable(true);
  urlcolumn.setWeight(7);
  TableViewerCreatorColumn installcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  installcolumn.setTitle(Messages.getString(""String_Node_Str""));
  installcolumn.setToolTipHeader(Messages.getString(""String_Node_Str""));
  installcolumn.setModifiable(false);
  installcolumn.setSortable(true);
  installcolumn.setWeight(5);
  tableViewerCreator.init(inputList);
  addInstallButtons(installcolumn,urlcolumn);
  layoutData=new GridData(GridData.FILL_BOTH);
  tableViewerCreator.getTable().setLayoutData(layoutData);
  tableViewerCreator.getTable().pack();
  Composite footComposite=new Composite(composite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  footComposite.setLayoutData(layoutData);
  layout=new GridLayout();
  layout.numColumns=2;
  footComposite.setLayout(layout);
  final Link moreInfor=new Link(footComposite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.widthHint=200;
  moreInfor.setText(Messages.getString(""String_Node_Str""));
  moreInfor.setLayoutData(layoutData);
  moreInfor.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Program.launch(HELP_CONTENT);
    }
  }
);
  installAllBtn=new Button(footComposite,SWT.NONE);
  installAllBtn.setText(Messages.getString(""String_Node_Str""));
  List<ModuleToInstall> inputList=tableViewerCreator.getInputList();
  boolean isEnable=false;
  if (!jarsInstalledSuccuss.isEmpty()) {
    for (    ModuleToInstall module : inputList) {
      if (!jarsInstalledSuccuss.contains(module.getName()) && module.isRequired()) {
        isEnable=true;
        break;
      }
    }
  }
 else {
    for (    ModuleToInstall module : inputList) {
      if (module.isRequired()) {
        isEnable=true;
        break;
      }
    }
  }
  installAllBtn.setEnabled(isEnable);
  createFooter(composite);
  setTitle(title);
  addListeners();
  return composite;
}",0.9549991244965856
127937,"@Override protected Control createDialogArea(Composite parent){
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  Composite composite=new Composite(parent,SWT.BORDER);
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  composite.setLayoutData(layoutData);
  tableViewerCreator=new TableViewerCreator(composite);
  tableViewerCreator.setCheckboxInFirstColumn(false);
  tableViewerCreator.setColumnsResizableByDefault(true);
  tableViewerCreator.setLinesVisible(true);
  tableViewerCreator.setLayoutMode(LAYOUT_MODE.CONTINUOUS);
  tableViewerCreator.createTable();
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getName();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setSortable(true);
  tableViewerCreator.setDefaultSort(column,SORT.ASC);
  column.setWeight(5);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getDescription();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setWeight(4);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setSortable(true);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getContext();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(5);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setDisplayedValue(""String_Node_Str"");
  column.setSortable(true);
  column.setImageProvider(new IColumnImageProvider<ModuleToInstall>(){
    @Override public Image getImage(    ModuleToInstall bean){
      if (bean.isRequired()) {
        return ImageProvider.getImage(EImage.CHECKED_ICON);
      }
 else {
        return ImageProvider.getImage(EImage.UNCHECKED_ICON);
      }
    }
  }
);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,Boolean>(){
    @Override public Boolean get(    ModuleToInstall bean){
      return bean.isRequired();
    }
    @Override public void set(    ModuleToInstall bean,    Boolean value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(2);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getLicenseType();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(3);
  TableViewerCreatorColumn urlcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  urlcolumn.setTitle(Messages.getString(""String_Node_Str""));
  urlcolumn.setToolTipHeader(Messages.getString(""String_Node_Str""));
  urlcolumn.setModifiable(false);
  urlcolumn.setSortable(true);
  urlcolumn.setWeight(7);
  TableViewerCreatorColumn installcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  installcolumn.setTitle(Messages.getString(""String_Node_Str""));
  installcolumn.setToolTipHeader(Messages.getString(""String_Node_Str""));
  installcolumn.setModifiable(false);
  installcolumn.setSortable(true);
  installcolumn.setWeight(5);
  tableViewerCreator.init(inputList);
  addInstallButtons(installcolumn,urlcolumn);
  layoutData=new GridData(GridData.FILL_BOTH);
  tableViewerCreator.getTable().setLayoutData(layoutData);
  tableViewerCreator.getTable().pack();
  Composite footComposite=new Composite(composite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  footComposite.setLayoutData(layoutData);
  layout=new GridLayout();
  layout.numColumns=2;
  footComposite.setLayout(layout);
  final Link moreInfor=new Link(footComposite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.widthHint=200;
  moreInfor.setText(Messages.getString(""String_Node_Str""));
  moreInfor.setLayoutData(layoutData);
  moreInfor.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Program.launch(HELP_CONTENT);
    }
  }
);
  installAllBtn=new Button(footComposite,SWT.NONE);
  installAllBtn.setText(Messages.getString(""String_Node_Str""));
  createFooter(composite);
  setTitle(title);
  addListeners();
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  Composite composite=new Composite(parent,SWT.BORDER);
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  composite.setLayoutData(layoutData);
  tableViewerCreator=new TableViewerCreator(composite);
  tableViewerCreator.setCheckboxInFirstColumn(false);
  tableViewerCreator.setColumnsResizableByDefault(true);
  tableViewerCreator.setLinesVisible(true);
  tableViewerCreator.setLayoutMode(LAYOUT_MODE.CONTINUOUS);
  tableViewerCreator.createTable();
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getName();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setSortable(true);
  tableViewerCreator.setDefaultSort(column,SORT.ASC);
  column.setWeight(5);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getDescription();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setWeight(4);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setSortable(true);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getContext();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(5);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setDisplayedValue(""String_Node_Str"");
  column.setSortable(true);
  column.setImageProvider(new IColumnImageProvider<ModuleToInstall>(){
    @Override public Image getImage(    ModuleToInstall bean){
      if (bean.isRequired()) {
        return ImageProvider.getImage(EImage.CHECKED_ICON);
      }
 else {
        return ImageProvider.getImage(EImage.UNCHECKED_ICON);
      }
    }
  }
);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,Boolean>(){
    @Override public Boolean get(    ModuleToInstall bean){
      return bean.isRequired();
    }
    @Override public void set(    ModuleToInstall bean,    Boolean value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(2);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getLicenseType();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(3);
  TableViewerCreatorColumn urlcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  urlcolumn.setTitle(Messages.getString(""String_Node_Str""));
  urlcolumn.setToolTipHeader(Messages.getString(""String_Node_Str""));
  urlcolumn.setModifiable(false);
  urlcolumn.setSortable(true);
  urlcolumn.setWeight(7);
  TableViewerCreatorColumn installcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  installcolumn.setTitle(Messages.getString(""String_Node_Str""));
  installcolumn.setToolTipHeader(Messages.getString(""String_Node_Str""));
  installcolumn.setModifiable(false);
  installcolumn.setSortable(true);
  installcolumn.setWeight(5);
  tableViewerCreator.init(inputList);
  addInstallButtons(installcolumn,urlcolumn);
  layoutData=new GridData(GridData.FILL_BOTH);
  tableViewerCreator.getTable().setLayoutData(layoutData);
  tableViewerCreator.getTable().pack();
  Composite footComposite=new Composite(composite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  footComposite.setLayoutData(layoutData);
  layout=new GridLayout();
  layout.numColumns=2;
  footComposite.setLayout(layout);
  final Link moreInfor=new Link(footComposite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.widthHint=200;
  moreInfor.setText(Messages.getString(""String_Node_Str""));
  moreInfor.setLayoutData(layoutData);
  moreInfor.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Program.launch(HELP_CONTENT);
    }
  }
);
  installAllBtn=new Button(footComposite,SWT.NONE);
  installAllBtn.setText(Messages.getString(""String_Node_Str""));
  List<ModuleToInstall> inputList=tableViewerCreator.getInputList();
  boolean isEnable=false;
  if (!jarsInstalledSuccuss.isEmpty()) {
    for (    ModuleToInstall module : inputList) {
      if (!jarsInstalledSuccuss.contains(module.getName()) && module.isRequired()) {
        isEnable=true;
        break;
      }
    }
  }
 else {
    for (    ModuleToInstall module : inputList) {
      if (module.isRequired()) {
        isEnable=true;
        break;
      }
    }
  }
  installAllBtn.setEnabled(isEnable);
  createFooter(composite);
  setTitle(title);
  addListeners();
  return composite;
}",0.9549991244965856
127938,"protected void createOnlinePage(Document dom,Element parent){
  HttpURLConnection urlConnection=null;
  try {
    URL url=new URL(getOnlinePageURL());
    urlConnection=(HttpURLConnection)url.openConnection();
    urlConnection.setRequestMethod(""String_Node_Str"");
    urlConnection.setDoOutput(true);
    urlConnection.setDoInput(true);
    urlConnection.setUseCaches(false);
    urlConnection.setReadTimeout(1000);
    urlConnection.getInputStream();
    setDIVStyle(dom,true);
  }
 catch (  Exception e) {
    setDIVStyle(dom,false);
    return;
  }
 finally {
    urlConnection.disconnect();
  }
  Element tdElem=dom.createElement(""String_Node_Str"");
  setTDAttribute(tdElem);
  parent.appendChild(tdElem);
  Element div=dom.createElement(""String_Node_Str"");
  div.setAttribute(""String_Node_Str"",""String_Node_Str"");
  tdElem.appendChild(div);
  Element spanElem=dom.createElement(""String_Node_Str"");
  spanElem.setAttribute(""String_Node_Str"",""String_Node_Str"");
  spanElem.appendChild(dom.createTextNode(Messages.getString(""String_Node_Str"")));
  div.appendChild(spanElem);
  div.appendChild(dom.createElement(""String_Node_Str""));
  Element iFrame=dom.createElement(""String_Node_Str"");
  iFrame.setAttribute(""String_Node_Str"",getOnlinePageURL());
  iFrame.setAttribute(""String_Node_Str"",""String_Node_Str"");
  iFrame.setAttribute(""String_Node_Str"",""String_Node_Str"");
  iFrame.setAttribute(""String_Node_Str"",""String_Node_Str"");
  iFrame.appendChild(dom.createTextNode(""String_Node_Str""));
  div.appendChild(iFrame);
}","protected void createOnlinePage(Document dom,Element parent){
  HttpURLConnection urlConnection=null;
  try {
    URL url=new URL(getOnlinePageURL());
    urlConnection=(HttpURLConnection)url.openConnection();
    urlConnection.setRequestMethod(""String_Node_Str"");
    urlConnection.setDoOutput(true);
    urlConnection.setDoInput(true);
    urlConnection.setUseCaches(false);
    urlConnection.setReadTimeout(2000);
    urlConnection.getInputStream();
    setDIVStyle(dom,true);
  }
 catch (  Exception e) {
    setDIVStyle(dom,false);
    return;
  }
 finally {
    urlConnection.disconnect();
  }
  Element tdElem=dom.createElement(""String_Node_Str"");
  setTDAttribute(tdElem);
  parent.appendChild(tdElem);
  Element div=dom.createElement(""String_Node_Str"");
  div.setAttribute(""String_Node_Str"",""String_Node_Str"");
  tdElem.appendChild(div);
  Element spanElem=dom.createElement(""String_Node_Str"");
  spanElem.setAttribute(""String_Node_Str"",""String_Node_Str"");
  spanElem.appendChild(dom.createTextNode(Messages.getString(""String_Node_Str"")));
  div.appendChild(spanElem);
  div.appendChild(dom.createElement(""String_Node_Str""));
  Element iFrame=dom.createElement(""String_Node_Str"");
  iFrame.setAttribute(""String_Node_Str"",getOnlinePageURL());
  iFrame.setAttribute(""String_Node_Str"",""String_Node_Str"");
  iFrame.setAttribute(""String_Node_Str"",""String_Node_Str"");
  iFrame.setAttribute(""String_Node_Str"",""String_Node_Str"");
  iFrame.appendChild(dom.createTextNode(""String_Node_Str""));
  div.appendChild(iFrame);
}",0.999342105263158
127939,"/** 
 * Set up the URL by checking the current hive mode. Added by Marvin Wang on Sep 4, 2012.
 * @return
 */
private String getStringConnection(){
  String s=null;
  String versionStr=dbVersionCombo.getText();
  if (isContextMode()) {
    s=DBConnectionContextUtils.getUrlConnectionString(connectionItem,true);
  }
 else {
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      int distributionIndex=distributionCombo.getSelectionIndex();
      int hiveVersionIndex=hiveVersionCombo.getSelectionIndex();
      int hiveModeIndex=hiveModeCombo.getSelectionIndex();
      versionStr=HiveConnUtils.getHiveModeObj(distributionIndex,hiveVersionIndex,hiveModeIndex).getKey();
      if (HiveConnUtils.isSupportHiveServer2(distributionIndex,hiveVersionIndex)) {
        if (HiveServerVersionInfo.HIVE_SERVER_2.getDisplayName().equals(hiveServerVersionCombo.getText())) {
          if (HiveConnUtils.isEmbeddedMode(distributionIndex,hiveVersionIndex,hiveModeIndex)) {
            s=DatabaseConnStrUtil.getHive2EmbeddedURLString(getConnection(),false);
          }
 else {
            s=DatabaseConnStrUtil.getHive2StandaloneURLString(getConnection(),false);
          }
        }
 else         if (HiveServerVersionInfo.HIVE_SERVER_1.getDisplayName().equals(hiveServerVersionCombo.getText())) {
          if (HiveConnUtils.isEmbeddedMode(distributionIndex,hiveVersionIndex,hiveModeIndex)) {
            s=DatabaseConnStrUtil.getHive1EmbeddedURLString(getConnection(),false);
          }
 else {
            s=DatabaseConnStrUtil.getHive1StandaloneURLString(getConnection(),false);
          }
        }
      }
 else {
        if (HiveConnUtils.isEmbeddedMode(distributionIndex,hiveVersionIndex,hiveModeIndex)) {
          s=DatabaseConnStrUtil.getHive1EmbeddedURLString(getConnection(),false);
        }
 else {
          s=DatabaseConnStrUtil.getHive1StandaloneURLString(getConnection(),false);
        }
      }
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
      s=DatabaseConnStrUtil.getURLString(dbTypeCombo.getText(),versionStr,serverText.getText(),usernameText.getText(),passwordText.getText(),portText.getText(),sidOrDatabaseText.getText(),fileField.getText().toLowerCase(),datasourceText.getText(),directoryField.getText(),additionParamText.getText());
    }
  }
  return s;
}","/** 
 * Set up the URL by checking the current hive mode. Added by Marvin Wang on Sep 4, 2012.
 * @return
 */
private String getStringConnection(){
  String s=null;
  String versionStr=dbVersionCombo.getText();
  if (isContextMode()) {
    s=DBConnectionContextUtils.getUrlConnectionString(connectionItem,true);
  }
 else {
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      int distributionIndex=distributionCombo.getSelectionIndex();
      int hiveVersionIndex=hiveVersionCombo.getSelectionIndex();
      int hiveModeIndex=hiveModeCombo.getSelectionIndex();
      versionStr=HiveConnUtils.getHiveModeObj(distributionIndex,hiveVersionIndex,hiveModeIndex).getKey();
      if (HiveConnUtils.isSupportHiveServer2(distributionIndex,hiveVersionIndex)) {
        if (HiveServerVersionInfo.HIVE_SERVER_2.getDisplayName().equals(hiveServerVersionCombo.getText())) {
          if (HiveConnUtils.isEmbeddedMode(distributionIndex,hiveVersionIndex,hiveModeIndex)) {
            s=DatabaseConnStrUtil.getHive2EmbeddedURLString(getConnection(),false);
          }
 else {
            s=DatabaseConnStrUtil.getHive2StandaloneURLString(getConnection(),false);
          }
        }
 else         if (HiveServerVersionInfo.HIVE_SERVER_1.getDisplayName().equals(hiveServerVersionCombo.getText())) {
          if (HiveConnUtils.isEmbeddedMode(distributionIndex,hiveVersionIndex,hiveModeIndex)) {
            s=DatabaseConnStrUtil.getHive1EmbeddedURLString(getConnection(),false);
          }
 else {
            s=DatabaseConnStrUtil.getHive1StandaloneURLString(getConnection(),false);
          }
        }
      }
 else {
        if (HiveConnUtils.isEmbeddedMode(distributionIndex,hiveVersionIndex,hiveModeIndex)) {
          s=DatabaseConnStrUtil.getHive1EmbeddedURLString(getConnection(),false);
        }
 else {
          s=DatabaseConnStrUtil.getHive1StandaloneURLString(getConnection(),false);
        }
      }
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
      s=DatabaseConnStrUtil.getURLString(dbTypeCombo.getText(),versionStr,serverText.getText(),usernameText.getText(),passwordText.getText(),portText.getText(),sidOrDatabaseText.getText(),fileField.getText(),datasourceText.getText(),directoryField.getText(),additionParamText.getText());
    }
  }
  return s;
}",0.9971475142624286
127940,"public void validateRegistration(){
  if (isProductRegistered()) {
    return;
  }
  URL registURL=null;
  try {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    String uniqueId=DefaultTokenCollector.calcUniqueId();
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    registURL=new URL(""String_Node_Str"" + uniqueId + ""String_Node_Str""+ brandingService.getAcronym());
    PlatformUI.getWorkbench().getBrowserSupport().getExternalBrowser().openURL(registURL);
  }
 catch (  PartInitException e) {
    try {
      Runtime.getRuntime().exec(""String_Node_Str"" + registURL.toString());
    }
 catch (    IOException e2) {
      if (PlatformUI.getWorkbench().getBrowserSupport().isInternalWebBrowserAvailable()) {
        IWebBrowser browser;
        try {
          browser=PlatformUI.getWorkbench().getBrowserSupport().createBrowser(""String_Node_Str"");
          browser.openURL(registURL);
        }
 catch (        PartInitException e1) {
          ExceptionHandler.process(e);
        }
      }
 else {
        ExceptionHandler.process(e);
      }
    }
  }
catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
}","public void validateRegistration(){
  IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  if (!brandingService.getBrandingConfiguration().isUseProductRegistration()) {
    return;
  }
  ConnectionUserPerReader read=ConnectionUserPerReader.getInstance();
  boolean install_done=read.isInstallDone();
  if (install_done) {
    return;
  }
  read.setInstallDone();
  URL registURL=null;
  try {
    String uniqueId=DefaultTokenCollector.calcUniqueId();
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    registURL=new URL(""String_Node_Str"" + uniqueId + ""String_Node_Str""+ brandingService.getAcronym());
    PlatformUI.getWorkbench().getBrowserSupport().getExternalBrowser().openURL(registURL);
  }
 catch (  PartInitException e) {
    try {
      Runtime.getRuntime().exec(""String_Node_Str"" + registURL.toString());
    }
 catch (    IOException e2) {
      if (PlatformUI.getWorkbench().getBrowserSupport().isInternalWebBrowserAvailable()) {
        IWebBrowser browser;
        try {
          browser=PlatformUI.getWorkbench().getBrowserSupport().createBrowser(""String_Node_Str"");
          browser.openURL(registURL);
        }
 catch (        PartInitException e1) {
          ExceptionHandler.process(e);
        }
      }
 else {
        ExceptionHandler.process(e);
      }
    }
  }
catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
}",0.8734339043722833
127941,"public boolean createUser(String pseudo,String password,String firstname,String lastname,String country,boolean isProxyEnabled,String proxyHost,String proxyPort,String proxyUser,String proxyPassword) throws BusinessException {
  BigInteger result=BigInteger.valueOf(-1);
  registNumber=null;
  if (isProxyEnabled) {
    Properties properties=System.getProperties();
    properties.put(""String_Node_Str"",""String_Node_Str"");
    properties.put(""String_Node_Str"",proxyHost);
    properties.put(""String_Node_Str"",proxyPort);
    properties.put(""String_Node_Str"",proxyUser);
    properties.put(""String_Node_Str"",proxyPassword);
  }
  String osName=System.getProperty(""String_Node_Str"");
  String osVersion=System.getProperty(""String_Node_Str"");
  String javaVersion=System.getProperty(""String_Node_Str"");
  long totalMemory=Runtime.getRuntime().totalMemory();
  com.sun.management.OperatingSystemMXBean composantSystem=(com.sun.management.OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
  Long memRAM=new Long(composantSystem.getTotalPhysicalMemorySize() / 1024);
  int nbProc=Runtime.getRuntime().availableProcessors();
  String version=VersionUtils.getVersion();
  RegisterUserPortTypeProxy proxy=new RegisterUserPortTypeProxy();
  proxy.setEndpoint(""String_Node_Str"");
  try {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    result=proxy.createUser50(pseudo,password,firstname,lastname,country,version,brandingService.getAcronym(),osName,osVersion,javaVersion,totalMemory + ""String_Node_Str"",memRAM + ""String_Node_Str"",nbProc + ""String_Node_Str"");
    if (result.intValue() != -110 && result.signum() < 0) {
      checkErrors(result.intValue());
    }
  }
 catch (  RemoteException e) {
    throw new BusinessException(e);
  }
  return result.intValue() == -110;
}","public boolean createUser(String pseudo,String password,String firstname,String lastname,String country,boolean isProxyEnabled,String proxyHost,String proxyPort,String proxyUser,String proxyPassword) throws BusinessException {
  BigInteger result=BigInteger.valueOf(-1);
  registNumber=null;
  if (isProxyEnabled) {
    Properties properties=System.getProperties();
    properties.put(""String_Node_Str"",""String_Node_Str"");
    properties.put(""String_Node_Str"",proxyHost);
    properties.put(""String_Node_Str"",proxyPort);
    properties.put(""String_Node_Str"",proxyUser);
    properties.put(""String_Node_Str"",proxyPassword);
  }
  String osName=System.getProperty(""String_Node_Str"");
  String osVersion=System.getProperty(""String_Node_Str"");
  String javaVersion=System.getProperty(""String_Node_Str"");
  long totalMemory=Runtime.getRuntime().totalMemory();
  com.sun.management.OperatingSystemMXBean composantSystem=(com.sun.management.OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
  Long memRAM=new Long(composantSystem.getTotalPhysicalMemorySize() / 1024);
  int nbProc=Runtime.getRuntime().availableProcessors();
  String version=VersionUtils.getVersion();
  String uniqueId=DefaultTokenCollector.calcUniqueId();
  RegisterUserPortTypeProxy proxy=new RegisterUserPortTypeProxy();
  proxy.setEndpoint(""String_Node_Str"");
  try {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    result=proxy.updateUser53(pseudo,password,firstname,lastname,country,version,brandingService.getAcronym(),osName,osVersion,javaVersion,totalMemory + ""String_Node_Str"",memRAM + ""String_Node_Str"",nbProc + ""String_Node_Str"",uniqueId);
    if (result.intValue() != -110 && result.signum() < 0) {
      checkErrors(result.intValue());
    }
  }
 catch (  RemoteException e) {
    throw new BusinessException(e);
  }
  return result.intValue() == -110;
}",0.9807540205641972
127942,"private static void _initOperationDesc1(){
  org.apache.axis.description.OperationDesc oper;
  org.apache.axis.description.ParameterDesc param;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(boolean.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[0]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(boolean.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[1]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(boolean.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[2]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(java.math.BigInteger.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[3]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(java.math.BigInteger.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[4]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(org.talend.repository.registeruser.proxy.UserRegistration[].class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[5]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(java.lang.String.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[6]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(java.math.BigInteger.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[7]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(java.math.BigInteger.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[8]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(java.math.BigInteger.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[9]=oper;
}","private static void _initOperationDesc1(){
  org.apache.axis.description.OperationDesc oper;
  org.apache.axis.description.ParameterDesc param;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(boolean.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[0]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(boolean.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[1]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(boolean.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[2]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(java.math.BigInteger.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[3]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(java.math.BigInteger.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[4]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(org.talend.repository.registeruser.proxy.UserRegistration[].class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[5]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(java.lang.String.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[6]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(java.math.BigInteger.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[7]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(java.math.BigInteger.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[8]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(java.math.BigInteger.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[9]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(java.math.BigInteger.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[10]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(java.math.BigInteger.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[11]=oper;
}",0.8615210646872916
127943,"/** 
 * DOC cantoine. Method to return DatabaseMetaData of a DB connection.
 * @param Connection conn
 * @param isSqlMode whether is sqlMode
 * @param String dbType
 * @return DatabaseMetaData
 */
public static DatabaseMetaData getDatabaseMetaData(Connection conn,String dbType,boolean isSqlMode,String database){
  DatabaseMetaData dbMetaData=null;
  if (conn != null) {
    try {
      if (MSSQL_CONN_CLASS.equals(conn.getClass().getName())) {
        dbMetaData=createJtdsDatabaseMetaData(conn);
      }
 else       if (EDatabaseTypeName.IBMDB2ZOS.getXmlName().equals(dbType)) {
        dbMetaData=createDB2ForZosFakeDatabaseMetaData(conn);
      }
 else       if (EDatabaseTypeName.TERADATA.getXmlName().equals(dbType) && isSqlMode) {
        dbMetaData=createTeradataFakeDatabaseMetaData(conn);
        TeradataDataBaseMetadata teraDbmeta=(TeradataDataBaseMetadata)dbMetaData;
        teraDbmeta.setDatabaseName(database);
      }
 else       if (EDatabaseTypeName.SAS.getXmlName().equals(dbType)) {
        dbMetaData=createSASFakeDatabaseMetaData(conn);
      }
 else       if (EDatabaseTypeName.SYBASEASE.getDisplayName().equals(dbType) || SYBASE_DATABASE_PRODUCT_NAME.equals(dbType)) {
        dbMetaData=createSybaseFakeDatabaseMetaData(conn);
      }
 else       if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && isHiveEmbeddedConn(conn)) {
        dbMetaData=new EmbeddedHiveDataBaseMetadata(conn);
      }
 else {
        dbMetaData=conn.getMetaData();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
      throw new RuntimeException(e);
    }
catch (    Exception e) {
      log.error(e.toString());
      throw new RuntimeException(e);
    }
  }
  return dbMetaData;
}","/** 
 * DOC cantoine. Method to return DatabaseMetaData of a DB connection.
 * @param Connection conn
 * @param isSqlMode whether is sqlMode
 * @param String dbType
 * @return DatabaseMetaData
 */
public static DatabaseMetaData getDatabaseMetaData(Connection conn,String dbType,boolean isSqlMode,String database){
  DatabaseMetaData dbMetaData=null;
  if (conn != null) {
    try {
      if (MSSQL_CONN_CLASS.equals(conn.getClass().getName())) {
        dbMetaData=createJtdsDatabaseMetaData(conn);
      }
 else       if (EDatabaseTypeName.IBMDB2ZOS.getXmlName().equals(dbType)) {
        dbMetaData=createDB2ForZosFakeDatabaseMetaData(conn);
      }
 else       if (EDatabaseTypeName.TERADATA.getXmlName().equals(dbType) && isSqlMode) {
        dbMetaData=createTeradataFakeDatabaseMetaData(conn);
        TeradataDataBaseMetadata teraDbmeta=(TeradataDataBaseMetadata)dbMetaData;
        teraDbmeta.setDatabaseName(database);
      }
 else       if (EDatabaseTypeName.SAS.getXmlName().equals(dbType)) {
        dbMetaData=createSASFakeDatabaseMetaData(conn);
      }
 else       if (EDatabaseTypeName.SYBASEASE.getDisplayName().equals(dbType) || SYBASE_DATABASE_PRODUCT_NAME.equals(dbType)) {
        dbMetaData=createSybaseFakeDatabaseMetaData(conn);
      }
 else       if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && isHiveEmbeddedConn(conn)) {
        dbMetaData=new EmbeddedHiveDataBaseMetadata(conn);
      }
 else       if (EDatabaseTypeName.AS400.getXmlName().equals(dbType)) {
        dbMetaData=createAS400FakeDatabaseMetaData(conn);
      }
 else {
        dbMetaData=conn.getMetaData();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
      throw new RuntimeException(e);
    }
catch (    Exception e) {
      log.error(e.toString());
      throw new RuntimeException(e);
    }
  }
  return dbMetaData;
}",0.9617425300195476
127944,"@Override public void initialize(IWorkbenchConfigurer configurer){
  super.initialize(configurer);
  configurer.setSaveAndRestore(true);
  PlatformUI.getPreferenceStore().setValue(IWorkbenchPreferenceConstants.CLOSE_EDITORS_ON_EXIT,true);
  PlatformUI.getPreferenceStore().setDefault(IWorkbenchPreferenceConstants.SHOW_TRADITIONAL_STYLE_TABS,false);
  PlatformUI.getPreferenceStore().setDefault(IWorkbenchPreferenceConstants.DOCK_PERSPECTIVE_BAR,IWorkbenchPreferenceConstants.TOP_RIGHT);
}","@Override public void initialize(IWorkbenchConfigurer configurer){
  super.initialize(configurer);
  configurer.setSaveAndRestore(true);
  TrayDialog.setDialogHelpAvailable(false);
  PlatformUI.getPreferenceStore().setValue(IWorkbenchPreferenceConstants.CLOSE_EDITORS_ON_EXIT,true);
  PlatformUI.getPreferenceStore().setDefault(IWorkbenchPreferenceConstants.SHOW_TRADITIONAL_STYLE_TABS,false);
  PlatformUI.getPreferenceStore().setDefault(IWorkbenchPreferenceConstants.DOCK_PERSPECTIVE_BAR,IWorkbenchPreferenceConstants.TOP_RIGHT);
}",0.9569471624266144
127945,"@Override protected Control createDialogArea(Composite parent){
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  Composite composite=new Composite(parent,SWT.BORDER);
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  composite.setLayoutData(layoutData);
  tableViewerCreator=new TableViewerCreator(composite);
  tableViewerCreator.setCheckboxInFirstColumn(false);
  tableViewerCreator.setColumnsResizableByDefault(true);
  tableViewerCreator.setLinesVisible(true);
  tableViewerCreator.setLayoutMode(LAYOUT_MODE.CONTINUOUS);
  tableViewerCreator.createTable();
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getName();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setSortable(true);
  tableViewerCreator.setDefaultSort(column,SORT.ASC);
  column.setWeight(5);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getDescription();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setWeight(4);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setSortable(true);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getContext();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(5);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setDisplayedValue(""String_Node_Str"");
  column.setSortable(true);
  column.setImageProvider(new IColumnImageProvider<ModuleToInstall>(){
    @Override public Image getImage(    ModuleToInstall bean){
      if (bean.isRequired()) {
        return ImageProvider.getImage(EImage.CHECKED_ICON);
      }
 else {
        return ImageProvider.getImage(EImage.UNCHECKED_ICON);
      }
    }
  }
);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,Boolean>(){
    @Override public Boolean get(    ModuleToInstall bean){
      return bean.isRequired();
    }
    @Override public void set(    ModuleToInstall bean,    Boolean value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(2);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getLicenseType();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(3);
  TableViewerCreatorColumn urlcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  urlcolumn.setTitle(Messages.getString(""String_Node_Str""));
  urlcolumn.setToolTipHeader(Messages.getString(""String_Node_Str""));
  urlcolumn.setModifiable(false);
  urlcolumn.setSortable(true);
  urlcolumn.setWeight(7);
  TableViewerCreatorColumn installcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  installcolumn.setTitle(Messages.getString(""String_Node_Str""));
  installcolumn.setToolTipHeader(Messages.getString(""String_Node_Str""));
  installcolumn.setModifiable(false);
  installcolumn.setSortable(true);
  installcolumn.setWeight(5);
  tableViewerCreator.init(inputList);
  addInstallButtons(installcolumn,urlcolumn);
  layoutData=new GridData(GridData.FILL_BOTH);
  tableViewerCreator.getTable().setLayoutData(layoutData);
  tableViewerCreator.getTable().pack();
  Composite footComposite=new Composite(composite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  footComposite.setLayoutData(layoutData);
  layout=new GridLayout();
  layout.numColumns=2;
  footComposite.setLayout(layout);
  final Link moreInfor=new Link(footComposite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.widthHint=200;
  moreInfor.setText(Messages.getString(""String_Node_Str""));
  moreInfor.setLayoutData(layoutData);
  moreInfor.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Program.launch(HELP_CONTENT);
    }
  }
);
  installAllBtn=new Button(footComposite,SWT.NONE);
  installAllBtn.setText(Messages.getString(""String_Node_Str""));
  List<ModuleToInstall> inputList=tableViewerCreator.getInputList();
  boolean isEnable=false;
  if (!jarsInstalledSuccuss.isEmpty()) {
    for (    ModuleToInstall module : inputList) {
      if (!jarsInstalledSuccuss.contains(module.getName()) && module.isRequired()) {
        isEnable=true;
        break;
      }
    }
  }
 else {
    for (    ModuleToInstall module : inputList) {
      if (module.isRequired()) {
        isEnable=true;
        break;
      }
    }
  }
  installAllBtn.setEnabled(isEnable);
  createFooter(composite);
  setTitle(title);
  addListeners();
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  Composite composite=new Composite(parent,SWT.BORDER);
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  composite.setLayoutData(layoutData);
  tableViewerCreator=new TableViewerCreator(composite);
  tableViewerCreator.setCheckboxInFirstColumn(false);
  tableViewerCreator.setColumnsResizableByDefault(true);
  tableViewerCreator.setLinesVisible(true);
  tableViewerCreator.setLayoutMode(LAYOUT_MODE.CONTINUOUS);
  tableViewerCreator.createTable();
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getName();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setSortable(true);
  tableViewerCreator.setDefaultSort(column,SORT.ASC);
  column.setWeight(5);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getDescription();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setWeight(4);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setSortable(true);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getContext();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(5);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setDisplayedValue(""String_Node_Str"");
  column.setSortable(true);
  column.setImageProvider(new IColumnImageProvider<ModuleToInstall>(){
    @Override public Image getImage(    ModuleToInstall bean){
      if (bean.isRequired()) {
        return ImageProvider.getImage(EImage.CHECKED_ICON);
      }
 else {
        return ImageProvider.getImage(EImage.UNCHECKED_ICON);
      }
    }
  }
);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,Boolean>(){
    @Override public Boolean get(    ModuleToInstall bean){
      return bean.isRequired();
    }
    @Override public void set(    ModuleToInstall bean,    Boolean value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(2);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getLicenseType();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(3);
  TableViewerCreatorColumn urlcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  urlcolumn.setTitle(Messages.getString(""String_Node_Str""));
  urlcolumn.setToolTipHeader(Messages.getString(""String_Node_Str""));
  urlcolumn.setModifiable(false);
  urlcolumn.setSortable(true);
  urlcolumn.setWeight(7);
  TableViewerCreatorColumn installcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  installcolumn.setTitle(Messages.getString(""String_Node_Str""));
  installcolumn.setToolTipHeader(Messages.getString(""String_Node_Str""));
  installcolumn.setModifiable(false);
  installcolumn.setSortable(true);
  installcolumn.setWeight(5);
  tableViewerCreator.init(inputList);
  addInstallButtons(installcolumn,urlcolumn);
  layoutData=new GridData(GridData.FILL_BOTH);
  tableViewerCreator.getTable().setLayoutData(layoutData);
  tableViewerCreator.getTable().pack();
  Composite footComposite=new Composite(composite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  footComposite.setLayoutData(layoutData);
  layout=new GridLayout();
  layout.numColumns=2;
  footComposite.setLayout(layout);
  final Link moreInfor=new Link(footComposite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.widthHint=200;
  moreInfor.setText(Messages.getString(""String_Node_Str""));
  moreInfor.setLayoutData(layoutData);
  moreInfor.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Program.launch(HELP_CONTENT);
    }
  }
);
  installAllBtn=new Button(footComposite,SWT.NONE);
  installAllBtn.setText(Messages.getString(""String_Node_Str""));
  List<ModuleToInstall> inputList=tableViewerCreator.getInputList();
  boolean isEnable=false;
  if (!inputList.isEmpty()) {
    for (    ModuleToInstall module : inputList) {
      if (module.getUrl_download() != null) {
        isEnable=true;
        break;
      }
    }
  }
  installAllBtn.setEnabled(isEnable);
  createFooter(composite);
  setTitle(title);
  addListeners();
  return composite;
}",0.9347418640313512
127946,"public void validateRegistration(){
  if (registNumber == null) {
    return;
  }
  URL registURL=null;
  try {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    String uniqueId=DefaultTokenCollector.calcUniqueId();
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    registURL=new URL(""String_Node_Str"" + uniqueId + ""String_Node_Str""+ brandingService.getAcronym());
    PlatformUI.getWorkbench().getBrowserSupport().getExternalBrowser().openURL(registURL);
  }
 catch (  PartInitException e) {
    try {
      Runtime.getRuntime().exec(""String_Node_Str"" + registURL.toString());
    }
 catch (    IOException e2) {
      if (PlatformUI.getWorkbench().getBrowserSupport().isInternalWebBrowserAvailable()) {
        IWebBrowser browser;
        try {
          browser=PlatformUI.getWorkbench().getBrowserSupport().createBrowser(""String_Node_Str"");
          browser.openURL(registURL);
        }
 catch (        PartInitException e1) {
          ExceptionHandler.process(e);
        }
      }
 else {
        ExceptionHandler.process(e);
      }
    }
  }
catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
}","public void validateRegistration(){
  if (isProductRegistered()) {
    return;
  }
  URL registURL=null;
  try {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    String uniqueId=DefaultTokenCollector.calcUniqueId();
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    uniqueId=uniqueId.replace(""String_Node_Str"",""String_Node_Str"");
    registURL=new URL(""String_Node_Str"" + uniqueId + ""String_Node_Str""+ brandingService.getAcronym());
    PlatformUI.getWorkbench().getBrowserSupport().getExternalBrowser().openURL(registURL);
  }
 catch (  PartInitException e) {
    try {
      Runtime.getRuntime().exec(""String_Node_Str"" + registURL.toString());
    }
 catch (    IOException e2) {
      if (PlatformUI.getWorkbench().getBrowserSupport().isInternalWebBrowserAvailable()) {
        IWebBrowser browser;
        try {
          browser=PlatformUI.getWorkbench().getBrowserSupport().createBrowser(""String_Node_Str"");
          browser.openURL(registURL);
        }
 catch (        PartInitException e1) {
          ExceptionHandler.process(e);
        }
      }
 else {
        ExceptionHandler.process(e);
      }
    }
  }
catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
}",0.9888738127544098
127947,"public static boolean isBrandingChanged(){
  if (!initialized) {
    if (CommonUIPlugin.isFullyHeadless()) {
      isBrandingChanged=false;
    }
 else {
      IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
      if (brandingService instanceof AbstractBrandingService) {
        isBrandingChanged=false;
      }
 else {
        final String fullProductName=brandingService.getFullProductName();
        Display display=Display.getDefault();
        if (display == null) {
          display=Display.getCurrent();
        }
        display.syncExec(new Runnable(){
          @Override public void run(){
            IPreferenceStore preferenceStore=CoreRuntimePlugin.getInstance().getPreferenceStore();
            String oldBrandingName=preferenceStore.getString(LAST_STARTED_PRODUCT);
            if (oldBrandingName == null || oldBrandingName.equals(""String_Node_Str"") || !oldBrandingName.equals(fullProductName)) {
              isBrandingChanged=true;
              preferenceStore.setValue(LAST_STARTED_PRODUCT,fullProductName);
            }
          }
        }
);
      }
    }
    initialized=true;
  }
  return isBrandingChanged;
}","public static boolean isBrandingChanged(){
  if (!initialized) {
    if (CommonUIPlugin.isFullyHeadless()) {
      isBrandingChanged=false;
    }
 else {
      IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
      final String fullProductName=brandingService.getFullProductName();
      Display display=Display.getDefault();
      if (display == null) {
        display=Display.getCurrent();
      }
      display.syncExec(new Runnable(){
        @Override public void run(){
          IPreferenceStore preferenceStore=CoreRuntimePlugin.getInstance().getPreferenceStore();
          String oldBrandingName=preferenceStore.getString(LAST_STARTED_PRODUCT);
          if (oldBrandingName == null || oldBrandingName.equals(""String_Node_Str"") || !oldBrandingName.equals(fullProductName)) {
            isBrandingChanged=true;
            preferenceStore.setValue(LAST_STARTED_PRODUCT,fullProductName);
          }
        }
      }
);
    }
    initialized=true;
  }
  return isBrandingChanged;
}",0.8040333187198597
127948,"@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  boolean showTalendTypeColumnForInput=!(inputFamily != null && inputFamily.startsWith(ELT_LABEL));
  boolean showTalendTypeColumnForOutput=!outputFamily.startsWith(ELT_LABEL);
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput,true);
    outputMetaView=new MetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    MetadataDialog.initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.setShowTalendTypeColumn(showTalendTypeColumnForOutput);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    final CTabFolder folderInput=new CTabFolder(compositesSachForm.getLeftComposite(),SWT.BORDER);
    folderInput.setLayoutData(new GridData(GridData.FILL_BOTH));
    folderInput.setSimple(false);
    folderInput.setUnselectedImageVisible(false);
    folderInput.setUnselectedCloseVisible(false);
    Set<INode> inputNodeskey=inputInfos.keySet();
    INode mainNode=null;
    for (    INode inputNode : inputNodeskey) {
      List<? extends IConnection> outgoingConnections=inputNode.getOutgoingConnections();
      if (outgoingConnections.size() > 0) {
        EConnectionType lineStyle=outgoingConnections.get(0).getLineStyle();
        if (lineStyle.equals(EConnectionType.FLOW_MAIN)) {
          mainNode=inputNode;
          createTabItem(inputNode,folderInput,showTalendTypeColumnForInput);
        }
      }
    }
    for (    INode inputNode : inputNodeskey) {
      if (inputNode != mainNode) {
        createTabItem(inputNode,folderInput,showTalendTypeColumnForInput);
      }
    }
    folderInput.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        CTabFolder source=(CTabFolder)e.getSource();
        CTabItem tabItem=source.getSelection();
        inputNode=(INode)tabItem.getData(INPUTNODE_KEY);
        inputMetaTable=(IMetadataTable)tabItem.getData(INPUTMETATABLE_KEY);
        inputMetaView=(MetadataTableEditorView)tabItem.getData(INPUTMETAVIEW_KEY);
        inputFamily=inputNode.getComponent().getOriginalFamilyName();
        inputReadOnly=(Boolean)tabItem.getData(INPUTREADONLY_KEY);
        if (inputReadOnly || inputMetaTable.isReadOnly()) {
          copyToInput.setEnabled(false);
          copySelectionToInput.setEnabled(false);
        }
 else {
          copyToInput.setEnabled(true);
          copySelectionToInput.setEnabled(true);
        }
      }
    }
);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,0).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getInputMetaData(),getOutputMetaData());
          outputMetaView.getTableViewerCreator().getTableViewer().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData=new GridData();
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getOutputMetaData(),getInputMetaData());
          inputMetaView.getTableViewerCreator().getTableViewer().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    final CTabFolder folderOutput=new CTabFolder(compositesSachForm.getRightComposite(),SWT.BORDER);
    folderOutput.setLayoutData(new GridData(GridData.FILL_BOTH));
    folderOutput.setSimple(false);
    folderOutput.setUnselectedImageVisible(false);
    folderOutput.setUnselectedCloseVisible(false);
    CTabItem item=new CTabItem(folderOutput,SWT.NONE);
    item.setText(titleOutput);
    Composite compositeRight=new Composite(folderOutput,SWT.NONE);
    compositeRight.setLayoutData(new GridData(GridData.FILL_BOTH));
    compositeRight.setLayout(new GridLayout());
    outputMetaView=new MetadataTableEditorView(compositeRight,SWT.NONE,new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"",true),outputReadOnly,true,false,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    MetadataDialog.initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.setShowTalendTypeColumn(showTalendTypeColumnForOutput);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    item.setControl(compositeRight);
    folderOutput.setSelection(item);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      copyToOutput.setEnabled(false);
      copySelectionToOutput.setEnabled(false);
    }
    compositesSachForm.setGridDatas();
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,null,null,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if (outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().getTableViewer().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
          }
        }
      }
    }
  }
);
  return composite;
}","@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  boolean showTalendTypeColumnForInput=!(inputFamily != null && inputFamily.startsWith(ELT_LABEL));
  boolean showTalendTypeColumnForOutput=!outputFamily.startsWith(ELT_LABEL);
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput,true);
    outputMetaView=new MetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    MetadataDialog.initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.setShowTalendTypeColumn(showTalendTypeColumnForOutput);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    final CTabFolder folderInput=new CTabFolder(compositesSachForm.getLeftComposite(),SWT.BORDER);
    folderInput.setLayoutData(new GridData(GridData.FILL_BOTH));
    folderInput.setSimple(false);
    folderInput.setUnselectedImageVisible(false);
    folderInput.setUnselectedCloseVisible(false);
    Set<INode> inputNodeskey=inputInfos.keySet();
    INode mainNode=null;
    for (    INode inputNode : inputNodeskey) {
      List<? extends IConnection> outgoingConnections=inputNode.getOutgoingConnections();
      if (outgoingConnections.size() > 0) {
        EConnectionType lineStyle=outgoingConnections.get(0).getLineStyle();
        if (lineStyle.equals(EConnectionType.FLOW_MAIN)) {
          mainNode=inputNode;
          createTabItem(inputNode,folderInput,showTalendTypeColumnForInput);
        }
      }
    }
    for (    INode inputNode : inputNodeskey) {
      if (inputNode != mainNode) {
        createTabItem(inputNode,folderInput,showTalendTypeColumnForInput);
      }
    }
    folderInput.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        CTabFolder source=(CTabFolder)e.getSource();
        CTabItem tabItem=source.getSelection();
        inputNode=(INode)tabItem.getData(INPUTNODE_KEY);
        inputMetaTable=(IMetadataTable)tabItem.getData(INPUTMETATABLE_KEY);
        inputMetaView=(MetadataTableEditorView)tabItem.getData(INPUTMETAVIEW_KEY);
        inputFamily=inputNode.getComponent().getOriginalFamilyName();
        inputReadOnly=(Boolean)tabItem.getData(INPUTREADONLY_KEY);
        if (inputReadOnly || inputMetaTable.isReadOnly()) {
          copyToInput.setEnabled(false);
          copySelectionToInput.setEnabled(false);
        }
 else {
          copyToInput.setEnabled(true);
          copySelectionToInput.setEnabled(true);
        }
      }
    }
);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,0).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getInputMetaData(),getOutputMetaData());
          outputMetaView.getTableViewerCreator().getTableViewer().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData=new GridData();
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getOutputMetaData(),getInputMetaData());
          inputMetaView.getTableViewerCreator().getTableViewer().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    final CTabFolder folderOutput=new CTabFolder(compositesSachForm.getRightComposite(),SWT.BORDER);
    folderOutput.setLayoutData(new GridData(GridData.FILL_BOTH));
    folderOutput.setSimple(false);
    folderOutput.setUnselectedImageVisible(false);
    folderOutput.setUnselectedCloseVisible(false);
    CTabItem item=new CTabItem(folderOutput,SWT.NONE);
    item.setText(titleOutput);
    Composite compositeRight=new Composite(folderOutput,SWT.NONE);
    compositeRight.setLayoutData(new GridData(GridData.FILL_BOTH));
    compositeRight.setLayout(new GridLayout());
    MetadataTableEditor metadataTableEditorForOutput;
    if (isRepository(outputNode)) {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"",true);
    }
 else {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"");
    }
    outputMetaView=new MetadataTableEditorView(compositeRight,SWT.NONE,metadataTableEditorForOutput,outputReadOnly,true,false,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    MetadataDialog.initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.setShowTalendTypeColumn(showTalendTypeColumnForOutput);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    item.setControl(compositeRight);
    folderOutput.setSelection(item);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      copyToOutput.setEnabled(false);
      copySelectionToOutput.setEnabled(false);
    }
    compositesSachForm.setGridDatas();
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,null,null,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if (outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().getTableViewer().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
          }
        }
      }
    }
  }
);
  return composite;
}",0.9823657080846446
127949,"@Override protected Control createDialogArea(Composite parent){
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  Composite composite=new Composite(parent,SWT.BORDER);
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  composite.setLayoutData(layoutData);
  tableViewerCreator=new TableViewerCreator(composite);
  tableViewerCreator.setCheckboxInFirstColumn(false);
  tableViewerCreator.setColumnsResizableByDefault(true);
  tableViewerCreator.setLinesVisible(true);
  tableViewerCreator.setLayoutMode(LAYOUT_MODE.CONTINUOUS);
  tableViewerCreator.createTable();
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getName();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setSortable(true);
  tableViewerCreator.setDefaultSort(column,SORT.ASC);
  column.setWeight(5);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getDescription();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setWeight(4);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setSortable(true);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getContext();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(5);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setDisplayedValue(""String_Node_Str"");
  column.setSortable(true);
  column.setImageProvider(new IColumnImageProvider<ModuleToInstall>(){
    @Override public Image getImage(    ModuleToInstall bean){
      if (bean.isRequired()) {
        return ImageProvider.getImage(EImage.CHECKED_ICON);
      }
 else {
        return ImageProvider.getImage(EImage.UNCHECKED_ICON);
      }
    }
  }
);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,Boolean>(){
    @Override public Boolean get(    ModuleToInstall bean){
      return bean.isRequired();
    }
    @Override public void set(    ModuleToInstall bean,    Boolean value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(2);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getLicenseType();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(3);
  TableViewerCreatorColumn urlcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  urlcolumn.setTitle(Messages.getString(""String_Node_Str""));
  urlcolumn.setToolTipHeader(Messages.getString(""String_Node_Str""));
  urlcolumn.setModifiable(false);
  urlcolumn.setSortable(true);
  urlcolumn.setWeight(7);
  TableViewerCreatorColumn installcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  installcolumn.setTitle(Messages.getString(""String_Node_Str""));
  installcolumn.setToolTipHeader(Messages.getString(""String_Node_Str""));
  installcolumn.setModifiable(false);
  installcolumn.setSortable(true);
  installcolumn.setWeight(5);
  tableViewerCreator.init(inputList);
  addInstallButtons(installcolumn,urlcolumn);
  layoutData=new GridData(GridData.FILL_BOTH);
  tableViewerCreator.getTable().setLayoutData(layoutData);
  tableViewerCreator.getTable().pack();
  Composite footComposite=new Composite(composite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  footComposite.setLayoutData(layoutData);
  layout=new GridLayout();
  layout.numColumns=2;
  footComposite.setLayout(layout);
  final Link moreInfor=new Link(footComposite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.widthHint=200;
  moreInfor.setText(Messages.getString(""String_Node_Str""));
  moreInfor.setLayoutData(layoutData);
  moreInfor.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Program.launch(HELP_CONTENT);
    }
  }
);
  installAllBtn=new Button(footComposite,SWT.NONE);
  installAllBtn.setText(Messages.getString(""String_Node_Str""));
  List<ModuleToInstall> inputList=tableViewerCreator.getInputList();
  boolean isEnable=false;
  if (!jarsInstalledSuccuss.isEmpty()) {
    for (    ModuleToInstall module : inputList) {
      if (!jarsInstalledSuccuss.contains(module.getName()) && module.isRequired()) {
        isEnable=true;
        break;
      }
    }
  }
 else {
    for (    ModuleToInstall module : inputList) {
      if (module.isRequired()) {
        isEnable=true;
        break;
      }
    }
  }
  installAllBtn.setEnabled(isEnable);
  createFooter(composite);
  setTitle(title);
  addListeners();
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  Composite composite=new Composite(parent,SWT.BORDER);
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  composite.setLayoutData(layoutData);
  tableViewerCreator=new TableViewerCreator(composite);
  tableViewerCreator.setCheckboxInFirstColumn(false);
  tableViewerCreator.setColumnsResizableByDefault(true);
  tableViewerCreator.setLinesVisible(true);
  tableViewerCreator.setLayoutMode(LAYOUT_MODE.CONTINUOUS);
  tableViewerCreator.createTable();
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getName();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setSortable(true);
  tableViewerCreator.setDefaultSort(column,SORT.ASC);
  column.setWeight(5);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getDescription();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setWeight(4);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setSortable(true);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getContext();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(5);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setDisplayedValue(""String_Node_Str"");
  column.setSortable(true);
  column.setImageProvider(new IColumnImageProvider<ModuleToInstall>(){
    @Override public Image getImage(    ModuleToInstall bean){
      if (bean.isRequired()) {
        return ImageProvider.getImage(EImage.CHECKED_ICON);
      }
 else {
        return ImageProvider.getImage(EImage.UNCHECKED_ICON);
      }
    }
  }
);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,Boolean>(){
    @Override public Boolean get(    ModuleToInstall bean){
      return bean.isRequired();
    }
    @Override public void set(    ModuleToInstall bean,    Boolean value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(2);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getLicenseType();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(3);
  TableViewerCreatorColumn urlcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  urlcolumn.setTitle(Messages.getString(""String_Node_Str""));
  urlcolumn.setToolTipHeader(Messages.getString(""String_Node_Str""));
  urlcolumn.setModifiable(false);
  urlcolumn.setSortable(true);
  urlcolumn.setWeight(7);
  TableViewerCreatorColumn installcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  installcolumn.setTitle(Messages.getString(""String_Node_Str""));
  installcolumn.setToolTipHeader(Messages.getString(""String_Node_Str""));
  installcolumn.setModifiable(false);
  installcolumn.setSortable(true);
  installcolumn.setWeight(5);
  tableViewerCreator.init(inputList);
  addInstallButtons(installcolumn,urlcolumn);
  layoutData=new GridData(GridData.FILL_BOTH);
  tableViewerCreator.getTable().setLayoutData(layoutData);
  tableViewerCreator.getTable().pack();
  Composite footComposite=new Composite(composite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  footComposite.setLayoutData(layoutData);
  layout=new GridLayout();
  layout.numColumns=2;
  footComposite.setLayout(layout);
  final Link moreInfor=new Link(footComposite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.widthHint=200;
  moreInfor.setText(Messages.getString(""String_Node_Str""));
  moreInfor.setLayoutData(layoutData);
  moreInfor.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Program.launch(HELP_CONTENT);
    }
  }
);
  installAllBtn=new Button(footComposite,SWT.NONE);
  installAllBtn.setText(Messages.getString(""String_Node_Str""));
  List<ModuleToInstall> inputList=tableViewerCreator.getInputList();
  boolean isEnable=false;
  if (!inputList.isEmpty()) {
    for (    ModuleToInstall module : inputList) {
      if (module.getUrl_download() != null) {
        isEnable=true;
        break;
      }
    }
  }
  installAllBtn.setEnabled(isEnable);
  createFooter(composite);
  setTitle(title);
  addListeners();
  return composite;
}",0.9347418640313512
127950,"public List<Status> getStatusList(Property property) throws PersistenceException {
  List<Status> status=null;
  Item item=property.getItem();
  if (item != null) {
    EClass propertyEClass=item.eClass();
    int i=propertyEClass.getClassifierID();
switch (propertyEClass.getClassifierID()) {
case PropertiesPackage.CSV_FILE_CONNECTION_ITEM:
case PropertiesPackage.DATABASE_CONNECTION_ITEM:
case PropertiesPackage.SAP_CONNECTION_ITEM:
case PropertiesPackage.DELIMITED_FILE_CONNECTION_ITEM:
case PropertiesPackage.POSITIONAL_FILE_CONNECTION_ITEM:
case PropertiesPackage.CONTEXT_ITEM:
case PropertiesPackage.PROCESS_ITEM:
case PropertiesPackage.JOBLET_PROCESS_ITEM:
case PropertiesPackage.ROUTINE_ITEM:
case PropertiesPackage.REG_EX_FILE_CONNECTION_ITEM:
case PropertiesPackage.GENERIC_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.LDAP_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.LDIF_FILE_CONNECTION_ITEM:
case PropertiesPackage.XML_FILE_CONNECTION_ITEM:
case PropertiesPackage.EXCEL_FILE_CONNECTION_ITEM:
case PropertiesPackage.SALESFORCE_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.WSDL_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.EBCDIC_CONNECTION_ITEM:
case PropertiesPackage.HL7_CONNECTION_ITEM:
case PropertiesPackage.FTP_CONNECTION_ITEM:
case PropertiesPackage.BRMS_CONNECTION_ITEM:
case PropertiesPackage.MDM_CONNECTION_ITEM:
case PropertiesPackage.JOB_SCRIPT_ITEM:
case PropertiesPackage.SQL_PATTERN_ITEM:
case PropertiesPackage.EDIFACT_CONNECTION_ITEM:
case PropertiesPackage.VALIDATION_RULES_CONNECTION_ITEM:
      status=repositoryFactory.getTechnicalStatus();
    break;
case PropertiesPackage.RULES_ITEM:
  status=repositoryFactory.getTechnicalStatus();
break;
case PropertiesPackage.LINK_RULES_ITEM:
status=repositoryFactory.getTechnicalStatus();
break;
case PropertiesPackage.BUSINESS_PROCESS_ITEM:
case PropertiesPackage.SVG_BUSINESS_PROCESS_ITEM:
case PropertiesPackage.DOCUMENTATION_ITEM:
status=repositoryFactory.getDocumentationStatus();
break;
}
if (status == null) {
if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
if (service != null) {
boolean flag=service.isServiceItem(i);
if (flag) {
status=repositoryFactory.getTechnicalStatus();
}
}
}
for (IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
List<Status> propertyStatus=handler.getPropertyStatus(item);
if (propertyStatus != null && propertyStatus.size() > 0) {
status=propertyStatus;
break;
}
}
}
}
if (status == null) {
status=new ArrayList<Status>();
}
toMaps(status);
return status;
}","public List<Status> getStatusList(Property property) throws PersistenceException {
  List<Status> status=null;
  Item item=property.getItem();
  if (item != null) {
    EClass propertyEClass=item.eClass();
    int i=propertyEClass.getClassifierID();
switch (propertyEClass.getClassifierID()) {
case PropertiesPackage.CSV_FILE_CONNECTION_ITEM:
case PropertiesPackage.DATABASE_CONNECTION_ITEM:
case PropertiesPackage.SAP_CONNECTION_ITEM:
case PropertiesPackage.DELIMITED_FILE_CONNECTION_ITEM:
case PropertiesPackage.POSITIONAL_FILE_CONNECTION_ITEM:
case PropertiesPackage.CONTEXT_ITEM:
case PropertiesPackage.PROCESS_ITEM:
case PropertiesPackage.JOBLET_PROCESS_ITEM:
case PropertiesPackage.ROUTINE_ITEM:
case PropertiesPackage.PIGUDF_ITEM:
case PropertiesPackage.REG_EX_FILE_CONNECTION_ITEM:
case PropertiesPackage.GENERIC_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.LDAP_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.LDIF_FILE_CONNECTION_ITEM:
case PropertiesPackage.XML_FILE_CONNECTION_ITEM:
case PropertiesPackage.EXCEL_FILE_CONNECTION_ITEM:
case PropertiesPackage.SALESFORCE_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.WSDL_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.EBCDIC_CONNECTION_ITEM:
case PropertiesPackage.HL7_CONNECTION_ITEM:
case PropertiesPackage.FTP_CONNECTION_ITEM:
case PropertiesPackage.BRMS_CONNECTION_ITEM:
case PropertiesPackage.MDM_CONNECTION_ITEM:
case PropertiesPackage.JOB_SCRIPT_ITEM:
case PropertiesPackage.SQL_PATTERN_ITEM:
case PropertiesPackage.EDIFACT_CONNECTION_ITEM:
case PropertiesPackage.VALIDATION_RULES_CONNECTION_ITEM:
      status=repositoryFactory.getTechnicalStatus();
    break;
case PropertiesPackage.RULES_ITEM:
  status=repositoryFactory.getTechnicalStatus();
break;
case PropertiesPackage.LINK_RULES_ITEM:
status=repositoryFactory.getTechnicalStatus();
break;
case PropertiesPackage.BUSINESS_PROCESS_ITEM:
case PropertiesPackage.SVG_BUSINESS_PROCESS_ITEM:
case PropertiesPackage.DOCUMENTATION_ITEM:
status=repositoryFactory.getDocumentationStatus();
break;
}
if (status == null) {
if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
if (service != null) {
boolean flag=service.isServiceItem(i);
if (flag) {
status=repositoryFactory.getTechnicalStatus();
}
}
}
for (IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
List<Status> propertyStatus=handler.getPropertyStatus(item);
if (propertyStatus != null && propertyStatus.size() > 0) {
status=propertyStatus;
break;
}
}
}
}
if (status == null) {
status=new ArrayList<Status>();
}
toMaps(status);
return status;
}",0.9932203389830508
127951,"public void validateRegistration(){
  if (registNumber == null) {
    return;
  }
  URL registURL=null;
  try {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    registURL=new URL(""String_Node_Str"" + brandingService.getAcronym() + ""String_Node_Str""+ registNumber);
    PlatformUI.getWorkbench().getBrowserSupport().getExternalBrowser().openURL(registURL);
  }
 catch (  PartInitException e) {
    try {
      Runtime.getRuntime().exec(""String_Node_Str"" + registURL.toString());
    }
 catch (    IOException e2) {
      if (PlatformUI.getWorkbench().getBrowserSupport().isInternalWebBrowserAvailable()) {
        IWebBrowser browser;
        try {
          browser=PlatformUI.getWorkbench().getBrowserSupport().createBrowser(""String_Node_Str"");
          browser.openURL(registURL);
        }
 catch (        PartInitException e1) {
          ExceptionHandler.process(e);
        }
      }
 else {
        ExceptionHandler.process(e);
      }
    }
  }
catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
}","public void validateRegistration(){
  if (registNumber == null) {
    return;
  }
  URL registURL=null;
  try {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    registURL=new URL(""String_Node_Str"" + DefaultTokenCollector.calcUniqueId() + ""String_Node_Str""+ brandingService.getAcronym());
    PlatformUI.getWorkbench().getBrowserSupport().getExternalBrowser().openURL(registURL);
  }
 catch (  PartInitException e) {
    try {
      Runtime.getRuntime().exec(""String_Node_Str"" + registURL.toString());
    }
 catch (    IOException e2) {
      if (PlatformUI.getWorkbench().getBrowserSupport().isInternalWebBrowserAvailable()) {
        IWebBrowser browser;
        try {
          browser=PlatformUI.getWorkbench().getBrowserSupport().createBrowser(""String_Node_Str"");
          browser.openURL(registURL);
        }
 catch (        PartInitException e1) {
          ExceptionHandler.process(e);
        }
      }
 else {
        ExceptionHandler.process(e);
      }
    }
  }
catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
}",0.9589285714285716
127952,"/** 
 * DOC Comment method ""refreshAll"".
 */
private static void refreshAll(){
  diViewList.clear();
  dqViewList.clear();
  mdmViewList.clear();
  setPerspectiveReviewUtil();
  IWorkbenchWindow workBenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (workBenchWindow != null) {
    IWorkbenchPage page=workBenchWindow.getActivePage();
    if (page != null) {
      String perId=page.getPerspective().getId();
      if ((!""String_Node_Str"".equals(perId) && null != perId)) {
        if (perId.equalsIgnoreCase(IBrandingConfiguration.PERSPECTIVE_DI_ID)) {
          for (          String strId : dqViewList) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
          for (          String strId : mdmViewList) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
        }
 else         if (perId.equalsIgnoreCase(IBrandingConfiguration.PERSPECTIVE_DQ_ID)) {
          for (          String strId : diViewList) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
          for (          String strId : mdmViewList) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
        }
 else         if (perId.equalsIgnoreCase(IBrandingConfiguration.PERSPECTIVE_MDM_ID)) {
          for (          String strId : diViewList) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
          for (          String strId : dqViewList) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
        }
      }
    }
  }
}","/** 
 * DOC Comment method ""refreshAll"".
 */
private static void refreshAll(){
  diViewList.clear();
  dqViewList.clear();
  mdmViewList.clear();
  setPerspectiveReviewUtil();
  IWorkbenchWindow workBenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (workBenchWindow != null) {
    IWorkbenchPage page=workBenchWindow.getActivePage();
    if (page != null) {
      String perId=page.getPerspective().getId();
      if ((!""String_Node_Str"".equals(perId) && null != perId)) {
        if (perId.equalsIgnoreCase(IBrandingConfiguration.PERSPECTIVE_DI_ID)) {
          for (          String strId : dqViewList.toArray(new String[0])) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
          for (          String strId : mdmViewList.toArray(new String[0])) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
        }
 else         if (perId.equalsIgnoreCase(IBrandingConfiguration.PERSPECTIVE_DQ_ID)) {
          for (          String strId : diViewList.toArray(new String[0])) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
          for (          String strId : mdmViewList.toArray(new String[0])) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
        }
 else         if (perId.equalsIgnoreCase(IBrandingConfiguration.PERSPECTIVE_MDM_ID)) {
          for (          String strId : diViewList.toArray(new String[0])) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
          for (          String strId : dqViewList.toArray(new String[0])) {
            IViewPart viewPart=page.findView(strId);
            if (viewPart != null) {
              page.hideView(viewPart);
            }
          }
        }
      }
    }
  }
}",0.9673758865248226
127953,"@Override protected void run() throws LoginException, PersistenceException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (!monitor.isCanceled()) {
    final ManagerConnection managerConnection=new ManagerConnection();
    DatabaseConnection connection=(DatabaseConnection)item.getConnection();
    IMetadataConnection metadataConnection=ConvertionHelper.convert(connection);
    if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType()) && HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
        metadataConnection.setUrl(connection.getURL());
        JavaSqlFactory.doHivePreSetup(connection);
      }
 else {
        String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
        metadataConnection.setUrl(genUrl);
      }
    }
    if (connection != null) {
      EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
      Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
      ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
    }
    if (creation) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType()) && HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
        try {
          HiveConnectionManager.getInstance().checkConnection(metadataConnection);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        managerConnection.check(metadataConnection);
      }
      ExtractMetaDataUtils.setUseAllSynonyms(false);
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      wizardDialog.setBlockOnOpen(true);
      handleWizard(node,wizardDialog);
    }
 else {
      final boolean skipStep=true;
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      databaseTableWizard.setSkipStep(skipStep);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      handleWizard(node,wizardDialog);
    }
  }
}","@Override protected void run() throws LoginException, PersistenceException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (!monitor.isCanceled()) {
    final ManagerConnection managerConnection=new ManagerConnection();
    DatabaseConnection connection=(DatabaseConnection)item.getConnection();
    IMetadataConnection metadataConnection=ConvertionHelper.convert(connection);
    if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        metadataConnection.setUrl(connection.getURL());
        if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
          JavaSqlFactory.doHivePreSetup(connection);
        }
      }
 else {
        String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
        metadataConnection.setUrl(genUrl);
      }
    }
    if (connection != null) {
      EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
      Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
      ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
    }
    if (creation) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        try {
          HiveConnectionManager.getInstance().checkConnection(metadataConnection);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        managerConnection.check(metadataConnection);
      }
      ExtractMetaDataUtils.setUseAllSynonyms(false);
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      wizardDialog.setBlockOnOpen(true);
      handleWizard(node,wizardDialog);
    }
 else {
      final boolean skipStep=true;
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      databaseTableWizard.setSkipStep(skipStep);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      handleWizard(node,wizardDialog);
    }
  }
}",0.9698947056206436
127954,"private void openDatabaseTableWizard(final DatabaseConnectionItem item,final MetadataTable metadataTable,final boolean forceReadOnly,final RepositoryNode node,final boolean creation){
  UIJob job=new UIJob(Messages.getString(""String_Node_Str"")){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      String name=""String_Node_Str"" + getText();
      RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
        @Override protected void run() throws LoginException, PersistenceException {
          monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
          if (!monitor.isCanceled()) {
            final ManagerConnection managerConnection=new ManagerConnection();
            DatabaseConnection connection=(DatabaseConnection)item.getConnection();
            IMetadataConnection metadataConnection=ConvertionHelper.convert(connection);
            if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType()) && HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
                metadataConnection.setUrl(connection.getURL());
                JavaSqlFactory.doHivePreSetup(connection);
              }
 else {
                String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
                metadataConnection.setUrl(genUrl);
              }
            }
            if (connection != null) {
              EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
              Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
              ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
            }
            if (creation) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType()) && HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
                try {
                  HiveConnectionManager.getInstance().checkConnection(metadataConnection);
                }
 catch (                Exception e) {
                  e.printStackTrace();
                }
              }
 else {
                managerConnection.check(metadataConnection);
              }
              ExtractMetaDataUtils.setUseAllSynonyms(false);
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              wizardDialog.setBlockOnOpen(true);
              handleWizard(node,wizardDialog);
            }
 else {
              final boolean skipStep=true;
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              databaseTableWizard.setSkipStep(skipStep);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              handleWizard(node,wizardDialog);
            }
          }
        }
      }
;
      repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(true);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      if (!event.getResult().isOK()) {
        log.error(event.getResult().getMessage(),event.getResult().getException());
      }
    }
  }
);
  job.schedule();
}","private void openDatabaseTableWizard(final DatabaseConnectionItem item,final MetadataTable metadataTable,final boolean forceReadOnly,final RepositoryNode node,final boolean creation){
  UIJob job=new UIJob(Messages.getString(""String_Node_Str"")){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      String name=""String_Node_Str"" + getText();
      RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
        @Override protected void run() throws LoginException, PersistenceException {
          monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
          if (!monitor.isCanceled()) {
            final ManagerConnection managerConnection=new ManagerConnection();
            DatabaseConnection connection=(DatabaseConnection)item.getConnection();
            IMetadataConnection metadataConnection=ConvertionHelper.convert(connection);
            if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                metadataConnection.setUrl(connection.getURL());
                if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
                  JavaSqlFactory.doHivePreSetup(connection);
                }
              }
 else {
                String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
                metadataConnection.setUrl(genUrl);
              }
            }
            if (connection != null) {
              EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
              Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
              ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
            }
            if (creation) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                try {
                  HiveConnectionManager.getInstance().checkConnection(metadataConnection);
                }
 catch (                Exception e) {
                  e.printStackTrace();
                }
              }
 else {
                managerConnection.check(metadataConnection);
              }
              ExtractMetaDataUtils.setUseAllSynonyms(false);
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              wizardDialog.setBlockOnOpen(true);
              handleWizard(node,wizardDialog);
            }
 else {
              final boolean skipStep=true;
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              databaseTableWizard.setSkipStep(skipStep);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              handleWizard(node,wizardDialog);
            }
          }
        }
      }
;
      repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(true);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      if (!event.getResult().isOK()) {
        log.error(event.getResult().getMessage(),event.getResult().getException());
      }
    }
  }
);
  job.schedule();
}",0.9760521756853154
127955,"@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  String name=""String_Node_Str"" + getText();
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
    @Override protected void run() throws LoginException, PersistenceException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      if (!monitor.isCanceled()) {
        final ManagerConnection managerConnection=new ManagerConnection();
        DatabaseConnection connection=(DatabaseConnection)item.getConnection();
        IMetadataConnection metadataConnection=ConvertionHelper.convert(connection);
        if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType()) && HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
            metadataConnection.setUrl(connection.getURL());
            JavaSqlFactory.doHivePreSetup(connection);
          }
 else {
            String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
            metadataConnection.setUrl(genUrl);
          }
        }
        if (connection != null) {
          EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
          Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
          ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (creation) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType()) && HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
            try {
              HiveConnectionManager.getInstance().checkConnection(metadataConnection);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            managerConnection.check(metadataConnection);
          }
          ExtractMetaDataUtils.setUseAllSynonyms(false);
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          wizardDialog.setBlockOnOpen(true);
          handleWizard(node,wizardDialog);
        }
 else {
          final boolean skipStep=true;
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          databaseTableWizard.setSkipStep(skipStep);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          handleWizard(node,wizardDialog);
        }
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
  IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  monitor.done();
  return Status.OK_STATUS;
}","@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  String name=""String_Node_Str"" + getText();
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
    @Override protected void run() throws LoginException, PersistenceException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      if (!monitor.isCanceled()) {
        final ManagerConnection managerConnection=new ManagerConnection();
        DatabaseConnection connection=(DatabaseConnection)item.getConnection();
        IMetadataConnection metadataConnection=ConvertionHelper.convert(connection);
        if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            metadataConnection.setUrl(connection.getURL());
            if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
              JavaSqlFactory.doHivePreSetup(connection);
            }
          }
 else {
            String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
            metadataConnection.setUrl(genUrl);
          }
        }
        if (connection != null) {
          EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
          Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
          ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (creation) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            try {
              HiveConnectionManager.getInstance().checkConnection(metadataConnection);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            managerConnection.check(metadataConnection);
          }
          ExtractMetaDataUtils.setUseAllSynonyms(false);
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          wizardDialog.setBlockOnOpen(true);
          handleWizard(node,wizardDialog);
        }
 else {
          final boolean skipStep=true;
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          databaseTableWizard.setSkipStep(skipStep);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          handleWizard(node,wizardDialog);
        }
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
  IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  monitor.done();
  return Status.OK_STATUS;
}",0.9734448890505638
127956,"/** 
 * checkConnection.
 * @param displayMessageBox
 */
protected void checkConnection(final boolean displayMessageBox){
  try {
    if (tree.getItemCount() > 0) {
      tree.removeAll();
    }
    parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataconnection.getDbType())) {
          String key=(String)metadataconnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(key)) {
            try {
              HiveConnectionManager.getInstance().checkConnection(metadataconnection);
              managerConnection.setValide(true);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else           if (HiveConnVersionInfo.MODE_STANDALONE.getKey().equals(key)) {
            managerConnection.check(metadataconnection,true);
          }
        }
 else {
          managerConnection.check(metadataconnection,true);
        }
        if (managerConnection.getIsValide()) {
          if (useProvider()) {
            provider.updatePackage(metadataconnection);
          }
 else {
            updatePackage(metadataconnection);
          }
          if (ExtractMetaDataUtils.isUseAllSynonyms() || EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType())) {
            List<String> itemTableName=ExtractMetaDataFromDataBase.returnTablesFormConnection(metadataconnection,getTableInfoParameters());
            if (ExtractMetaDataUtils.isUseAllSynonyms()) {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,true);
            }
 else {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,false);
            }
          }
 else           if (useProvider()) {
            tableNodeList=provider.getTableNodeInfo(metadataconnection);
          }
 else {
            tableNodeList=getTableNodeInfo();
          }
          if (tableNodeList.isEmpty()) {
            if (displayMessageBox) {
              openInfoDialogInUIThread(getShell(),""String_Node_Str"",""String_Node_Str"",true);
            }
          }
 else {
            tableNodeList=filterItemContextSchema(tableNodeList);
            createAllItems(displayMessageBox,null);
          }
        }
 else         if (displayMessageBox) {
          parentWizardPage.getShell().getDisplay().asyncExec(new Runnable(){
            @Override public void run(){
              new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
            }
          }
);
        }
        monitor.done();
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","/** 
 * checkConnection.
 * @param displayMessageBox
 */
protected void checkConnection(final boolean displayMessageBox){
  try {
    if (tree.getItemCount() > 0) {
      tree.removeAll();
    }
    parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataconnection.getDbType())) {
          String key=(String)metadataconnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          try {
            HiveConnectionManager.getInstance().checkConnection(metadataconnection);
            managerConnection.setValide(true);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
 else {
          managerConnection.check(metadataconnection,true);
        }
        if (managerConnection.getIsValide()) {
          if (useProvider()) {
            provider.updatePackage(metadataconnection);
          }
 else {
            updatePackage(metadataconnection);
          }
          if (ExtractMetaDataUtils.isUseAllSynonyms() || EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType())) {
            List<String> itemTableName=ExtractMetaDataFromDataBase.returnTablesFormConnection(metadataconnection,getTableInfoParameters());
            if (ExtractMetaDataUtils.isUseAllSynonyms()) {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,true);
            }
 else {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,false);
            }
          }
 else           if (useProvider()) {
            tableNodeList=provider.getTableNodeInfo(metadataconnection);
          }
 else {
            tableNodeList=getTableNodeInfo();
          }
          if (tableNodeList.isEmpty()) {
            if (displayMessageBox) {
              openInfoDialogInUIThread(getShell(),""String_Node_Str"",""String_Node_Str"",true);
            }
          }
 else {
            tableNodeList=filterItemContextSchema(tableNodeList);
            createAllItems(displayMessageBox,null);
          }
        }
 else         if (displayMessageBox) {
          parentWizardPage.getShell().getDisplay().asyncExec(new Runnable(){
            @Override public void run(){
              new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
            }
          }
);
        }
        monitor.done();
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9555555555555556
127957,"@Override protected void createBottomPart(Composite parent){
  convertBtn=new Button(parent,SWT.PUSH);
  convertBtn.setText(Messages.getString(""String_Node_Str""));
  GridDataFactory.swtDefaults().span(2,1).align(SWT.CENTER,SWT.CENTER).grab(false,false).applyTo(convertBtn);
  convertBtn.setEnabled(!isReadOnly());
}","@Override protected void createBottomPart(Composite parent){
  convertBtn=new Button(parent,SWT.PUSH);
  convertBtn.setText(Messages.getString(""String_Node_Str""));
  GridDataFactory.swtDefaults().span(2,1).align(SWT.CENTER,SWT.CENTER).grab(false,false).applyTo(convertBtn);
  convertBtn.setEnabled(!isReadOnly());
  convertBtn.setVisible(PluginChecker.isMapReducePluginLoader());
}",0.9051724137931034
127958,"public void getNotInstalledModules(String[] names,List<ModuleToInstall> toInstall,IModulesListener listener){
  StringBuffer jars=new StringBuffer();
  if (names != null && names.length > 0) {
    for (    String module : names) {
      String moduleName=module.trim();
      ModuleToInstall moduleToInstall=cache.get(moduleName);
      if (moduleToInstall != null) {
        moduleToInstall.setContext(""String_Node_Str"");
        toInstall.add(moduleToInstall);
      }
 else {
        if (jars.length() != 0) {
          jars.append(SEPARATOR);
        }
 else {
          jars.append(moduleName);
        }
      }
    }
  }
  String jarNames=jars.toString();
  if (jarNames.isEmpty()) {
    listener.listModulesDone();
    return;
  }
  getModuleUrlsFromWebService(jarNames,toInstall,null,listener,false);
}","public void getNotInstalledModules(String[] names,List<ModuleToInstall> toInstall,IModulesListener listener){
  StringBuffer jars=new StringBuffer();
  if (names != null && names.length > 0) {
    for (    String module : names) {
      String moduleName=module.trim();
      ModuleToInstall moduleToInstall=cache.get(moduleName);
      if (moduleToInstall != null) {
        moduleToInstall.setContext(""String_Node_Str"");
        toInstall.add(moduleToInstall);
      }
 else {
        if (jars.length() != 0) {
          jars.append(SEPARATOR);
          jars.append(moduleName);
        }
 else {
          jars.append(moduleName);
        }
      }
    }
  }
  String jarNames=jars.toString();
  if (jarNames.isEmpty()) {
    listener.listModulesDone();
    return;
  }
  getModuleUrlsFromWebService(jarNames,toInstall,null,listener,false);
}",0.9571514785757392
127959,"private void initializeByConnectionParameters(){
  DatabaseConnection connection=getConnection();
  EMap<String,String> parameters=connection.getParameters();
  if (connection.getDatabaseType() == null) {
    connection.setDatabaseType(parameters.get(ConnParameterKeys.CONN_PARA_KEY_DB_TYPE));
  }
  if (connection.getProductId() == null) {
    connection.setProductId(parameters.get(ConnParameterKeys.CONN_PARA_KEY_DB_PRODUCT));
  }
  if (connection.getServerName() == null) {
    connection.setServerName(parameters.get(ConnParameterKeys.CONN_PARA_KEY_DB_SERVER));
  }
  if (connection.getPort() == null) {
    connection.setPort(parameters.get(ConnParameterKeys.CONN_PARA_KEY_DB_PORT));
  }
}","private void initializeByConnectionParameters(){
  DatabaseConnection connection=getConnection();
  EMap<String,String> parameters=connection.getParameters();
  if (connection.getDatabaseType() == null) {
    connection.setDatabaseType(parameters.get(ConnParameterKeys.CONN_PARA_KEY_DB_TYPE));
  }
  String productId=connection.getProductId();
  if (productId == null) {
    connection.setProductId(productId=parameters.get(ConnParameterKeys.CONN_PARA_KEY_DB_PRODUCT));
    String mapping=null;
    if (productId == null || productId.equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
      mapping=generalMappingFileText.getText();
    }
 else {
      if (MetadataTalendType.getDefaultDbmsFromProduct(productId) != null) {
        mapping=MetadataTalendType.getDefaultDbmsFromProduct(productId).getId();
      }
    }
    if (mapping == null) {
      mapping=""String_Node_Str"";
    }
    connection.setDbmsId(mapping);
  }
  if (connection.getServerName() == null) {
    connection.setServerName(parameters.get(ConnParameterKeys.CONN_PARA_KEY_DB_SERVER));
  }
  if (connection.getPort() == null) {
    connection.setPort(parameters.get(ConnParameterKeys.CONN_PARA_KEY_DB_PORT));
  }
}",0.7159450897571278
127960,"public void initialize(String currentPerspective){
  this.currentPerspective=currentPerspective;
  nodeAndProject=new HashMap<Object,List<Project>>();
  IRepositoryNode curParentNode=null;
  String urlBranch=null;
  if (ProjectManager.getInstance().getCurrentBranchURL(project) != null) {
    urlBranch=showSVNRoot();
  }
  if (""String_Node_Str"".equals(urlBranch) || urlBranch == null) {
    curParentNode=this;
  }
 else {
    List<IRepositoryNode> root=getChildren();
    svnRootNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    svnRootNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SVN_ROOT + ""String_Node_Str"" + urlBranch+ ""String_Node_Str"");
    svnRootNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SVN_ROOT);
    if (root.contains(svnRootNode)) {
      return;
    }
    root.add(svnRootNode);
    curParentNode=svnRootNode;
  }
  List<IRepositoryNode> nodes=curParentNode.getChildren();
  recBinNode=new BinRepositoryNode(this);
  nodes.add(recBinNode);
  businessProcessNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  businessProcessNode.setProperties(EProperties.LABEL,ERepositoryObjectType.BUSINESS_PROCESS);
  businessProcessNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.BUSINESS_PROCESS);
  nodes.add(businessProcessNode);
  processNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  processNode.setProperties(EProperties.LABEL,ERepositoryObjectType.PROCESS);
  processNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.PROCESS);
  nodes.add(processNode);
  if (PluginChecker.isJobLetPluginLoaded()) {
    jobletNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    jobletNode.setProperties(EProperties.LABEL,ERepositoryObjectType.JOBLET);
    jobletNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.JOBLET);
    nodes.add(jobletNode);
  }
  contextNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  contextNode.setProperties(EProperties.LABEL,ERepositoryObjectType.CONTEXT);
  contextNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.CONTEXT);
  nodes.add(contextNode);
  codeNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.CODE_ICON);
  codeNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.CODE);
  nodes.add(codeNode);
  routineNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  routineNode.setProperties(EProperties.LABEL,ERepositoryObjectType.ROUTINES);
  routineNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.ROUTINES);
  codeNode.getChildren().add(routineNode);
  if (PluginChecker.isMetalanguagePluginLoaded()) {
    jobscriptsNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    jobscriptsNode.setProperties(EProperties.LABEL,ERepositoryObjectType.JOB_SCRIPT);
    jobscriptsNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.JOB_SCRIPT);
    codeNode.getChildren().add(jobscriptsNode);
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
    IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
    if (service.isVisible()) {
      metadataHeaderFooterConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataHeaderFooterConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_HEADER_FOOTER);
      metadataHeaderFooterConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_HEADER_FOOTER);
      codeNode.getChildren().add(metadataHeaderFooterConnectionNode);
    }
  }
  sqlPatternNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  sqlPatternNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SQLPATTERNS);
  sqlPatternNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SQLPATTERNS);
  nodes.add(sqlPatternNode);
  docNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  docNode.setProperties(EProperties.LABEL,ERepositoryObjectType.DOCUMENTATION);
  docNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.DOCUMENTATION);
  nodes.add(docNode);
  metadataNode=new RepositoryNode(null,this,ENodeType.STABLE_SYSTEM_FOLDER);
  metadataNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA);
  metadataNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA);
  nodes.add(metadataNode);
  metadataConNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataConNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataConNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataNode.getChildren().add(metadataConNode);
  metadataFileNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataFileNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataNode.getChildren().add(metadataFileNode);
  metadataFilePositionalNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFilePositionalNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
  metadataFilePositionalNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
  metadataNode.getChildren().add(metadataFilePositionalNode);
  metadataFileRegexpNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileRegexpNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_REGEXP);
  metadataFileRegexpNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_REGEXP);
  metadataNode.getChildren().add(metadataFileRegexpNode);
  metadataFileXmlNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileXmlNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_XML);
  metadataFileXmlNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_XML);
  metadataNode.getChildren().add(metadataFileXmlNode);
  metadataFileLdifNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileLdifNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_LDIF);
  metadataFileLdifNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_LDIF);
  metadataNode.getChildren().add(metadataFileLdifNode);
  metadataFileExcelNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileExcelNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EXCEL);
  metadataFileExcelNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EXCEL);
  metadataNode.getChildren().add(metadataFileExcelNode);
  ECodeLanguage codeLanguage=LanguageManager.getCurrentLanguage();
  if (codeLanguage != ECodeLanguage.PERL) {
    metadataLDAPSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataLDAPSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    metadataLDAPSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    metadataNode.getChildren().add(metadataLDAPSchemaNode);
  }
  metadataGenericSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataGenericSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
  metadataGenericSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
  metadataNode.getChildren().add(metadataGenericSchemaNode);
  metadataWSDLSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataWSDLSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
  metadataWSDLSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
  metadataNode.getChildren().add(metadataWSDLSchemaNode);
  if (codeLanguage != ECodeLanguage.PERL) {
    metadataSalesforceSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSalesforceSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
    metadataSalesforceSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
    metadataNode.getChildren().add(metadataSalesforceSchemaNode);
  }
  if (PluginChecker.isSAPWizardPluginLoaded() && LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
    metadataSAPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSAPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataSAPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataNode.getChildren().add(metadataSAPConnectionNode);
  }
  if (PluginChecker.isHL7PluginLoaded()) {
    metadataHL7ConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataHL7ConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataHL7ConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataNode.getChildren().add(metadataHL7ConnectionNode);
  }
  if (PluginChecker.isFTPPluginLoaded()) {
    metadataFTPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataFTPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataFTPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataNode.getChildren().add(metadataFTPConnectionNode);
  }
  if (PluginChecker.isEBCDICPluginLoaded()) {
    metadataEbcdicConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEbcdicConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataEbcdicConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataNode.getChildren().add(metadataEbcdicConnectionNode);
  }
  if (PluginChecker.isMDMPluginLoaded()) {
    metadataMDMConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataMDMConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_MDMCONNECTION);
    metadataMDMConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_MDMCONNECTION);
    metadataNode.getChildren().add(metadataMDMConnectionNode);
  }
  if (PluginChecker.isSurvivorshipPluginLoaded() || PluginChecker.isRulesPluginLoaded() || PluginChecker.isBRMSPluginLoaded()) {
    StableRepositoryNode baseRulesNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.METADATA_RULES_ICON);
    baseRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_RULES_MANAGEMENT);
    metadataNode.getChildren().add(baseRulesNode);
    if (PluginChecker.isBRMSPluginLoaded()) {
      metadataBRMSConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataBRMSConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_BRMS);
      metadataBRMSConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_BRMS);
      baseRulesNode.getChildren().add(metadataBRMSConnectionNode);
    }
    if (PluginChecker.isRulesPluginLoaded() && codeLanguage != ECodeLanguage.PERL) {
      metadataRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_RULES);
      metadataRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_RULES);
      baseRulesNode.getChildren().add(metadataRulesNode);
    }
  }
  if (PluginChecker.isValidationrulesPluginLoaded()) {
    metadataValidationRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataValidationRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataValidationRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataNode.getChildren().add(metadataValidationRulesNode);
  }
  if (PluginChecker.isEDIFACTPluginLoaded()) {
    metadataEDIFactConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEDIFactConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_EDIFACT);
    metadataEDIFactConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_EDIFACT);
    metadataNode.getChildren().add(metadataEDIFactConnectionNode);
  }
  if (PluginChecker.isRefProjectLoaded() && getParent() != this && project != null && project.getEmfProject().getReferencedProjects().size() > 0) {
    refProject=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    refProject.setProperties(EProperties.LABEL,ERepositoryObjectType.REFERENCED_PROJECTS);
    refProject.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
    nodes.add(refProject);
  }
  deleteHiddenNodes(nodes);
  initExtensionRepositoryNodes(curParentNode);
  try {
    hideHiddenNodesDependsUserRight();
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  collectRepositoryNodes(curParentNode);
}","public void initialize(String currentPerspective){
  this.currentPerspective=currentPerspective;
  nodeAndProject=new HashMap<Object,List<Project>>();
  IRepositoryNode curParentNode=null;
  String urlBranch=null;
  if (ProjectManager.getInstance().getCurrentBranchURL(project) != null) {
    urlBranch=showSVNRoot();
  }
  if (""String_Node_Str"".equals(urlBranch) || urlBranch == null) {
    curParentNode=this;
  }
 else {
    List<IRepositoryNode> root=getChildren();
    svnRootNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    svnRootNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SVN_ROOT + ""String_Node_Str"" + urlBranch+ ""String_Node_Str"");
    svnRootNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SVN_ROOT);
    if (root.contains(svnRootNode)) {
      return;
    }
    root.add(svnRootNode);
    curParentNode=svnRootNode;
  }
  List<IRepositoryNode> nodes=curParentNode.getChildren();
  recBinNode=new BinRepositoryNode(this);
  nodes.add(recBinNode);
  businessProcessNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  businessProcessNode.setProperties(EProperties.LABEL,ERepositoryObjectType.BUSINESS_PROCESS);
  businessProcessNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.BUSINESS_PROCESS);
  nodes.add(businessProcessNode);
  processNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  processNode.setProperties(EProperties.LABEL,ERepositoryObjectType.PROCESS);
  processNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.PROCESS);
  nodes.add(processNode);
  if (PluginChecker.isJobLetPluginLoaded()) {
    jobletNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    jobletNode.setProperties(EProperties.LABEL,ERepositoryObjectType.JOBLET);
    jobletNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.JOBLET);
    nodes.add(jobletNode);
  }
  contextNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  contextNode.setProperties(EProperties.LABEL,ERepositoryObjectType.CONTEXT);
  contextNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.CONTEXT);
  nodes.add(contextNode);
  codeNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.CODE_ICON);
  codeNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.CODE);
  nodes.add(codeNode);
  routineNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  routineNode.setProperties(EProperties.LABEL,ERepositoryObjectType.ROUTINES);
  routineNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.ROUTINES);
  codeNode.getChildren().add(routineNode);
  if (PluginChecker.isMetalanguagePluginLoaded()) {
    jobscriptsNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    jobscriptsNode.setProperties(EProperties.LABEL,ERepositoryObjectType.JOB_SCRIPT);
    jobscriptsNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.JOB_SCRIPT);
    codeNode.getChildren().add(jobscriptsNode);
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
    IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
    if (service.isVisible()) {
      metadataHeaderFooterConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataHeaderFooterConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_HEADER_FOOTER);
      metadataHeaderFooterConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_HEADER_FOOTER);
      codeNode.getChildren().add(metadataHeaderFooterConnectionNode);
    }
  }
  sqlPatternNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  sqlPatternNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SQLPATTERNS);
  sqlPatternNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SQLPATTERNS);
  nodes.add(sqlPatternNode);
  docNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  docNode.setProperties(EProperties.LABEL,ERepositoryObjectType.DOCUMENTATION);
  docNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.DOCUMENTATION);
  nodes.add(docNode);
  metadataNode=new RepositoryNode(null,this,ENodeType.STABLE_SYSTEM_FOLDER);
  metadataNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA);
  metadataNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA);
  nodes.add(metadataNode);
  metadataConNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataConNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataConNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataNode.getChildren().add(metadataConNode);
  metadataFileNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataFileNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataNode.getChildren().add(metadataFileNode);
  metadataFilePositionalNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFilePositionalNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
  metadataFilePositionalNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
  metadataNode.getChildren().add(metadataFilePositionalNode);
  metadataFileRegexpNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileRegexpNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_REGEXP);
  metadataFileRegexpNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_REGEXP);
  metadataNode.getChildren().add(metadataFileRegexpNode);
  metadataFileXmlNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileXmlNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_XML);
  metadataFileXmlNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_XML);
  metadataNode.getChildren().add(metadataFileXmlNode);
  metadataFileLdifNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileLdifNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_LDIF);
  metadataFileLdifNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_LDIF);
  metadataNode.getChildren().add(metadataFileLdifNode);
  metadataFileExcelNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileExcelNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EXCEL);
  metadataFileExcelNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EXCEL);
  metadataNode.getChildren().add(metadataFileExcelNode);
  ECodeLanguage codeLanguage=LanguageManager.getCurrentLanguage();
  if (codeLanguage != ECodeLanguage.PERL) {
    metadataLDAPSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataLDAPSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    metadataLDAPSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    metadataNode.getChildren().add(metadataLDAPSchemaNode);
  }
  metadataGenericSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataGenericSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
  metadataGenericSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
  metadataNode.getChildren().add(metadataGenericSchemaNode);
  metadataWSDLSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataWSDLSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
  metadataWSDLSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
  metadataNode.getChildren().add(metadataWSDLSchemaNode);
  if (codeLanguage != ECodeLanguage.PERL) {
    metadataSalesforceSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSalesforceSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
    metadataSalesforceSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
    metadataNode.getChildren().add(metadataSalesforceSchemaNode);
  }
  if (PluginChecker.isSAPWizardPluginLoaded() && LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
    metadataSAPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSAPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataSAPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataNode.getChildren().add(metadataSAPConnectionNode);
  }
  if (PluginChecker.isHL7PluginLoaded()) {
    metadataHL7ConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataHL7ConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataHL7ConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataNode.getChildren().add(metadataHL7ConnectionNode);
  }
  if (PluginChecker.isFTPPluginLoaded()) {
    metadataFTPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataFTPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataFTPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataNode.getChildren().add(metadataFTPConnectionNode);
  }
  if (PluginChecker.isEBCDICPluginLoaded()) {
    metadataEbcdicConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEbcdicConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataEbcdicConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataNode.getChildren().add(metadataEbcdicConnectionNode);
  }
  if (PluginChecker.isMDMPluginLoaded()) {
    metadataMDMConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataMDMConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_MDMCONNECTION);
    metadataMDMConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_MDMCONNECTION);
    metadataNode.getChildren().add(metadataMDMConnectionNode);
  }
  if (PluginChecker.isSurvivorshipPluginLoaded() || PluginChecker.isRulesPluginLoaded() || PluginChecker.isBRMSPluginLoaded()) {
    StableRepositoryNode baseRulesNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.METADATA_RULES_ICON);
    baseRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_RULES_MANAGEMENT);
    metadataNode.getChildren().add(baseRulesNode);
    if (PluginChecker.isBRMSPluginLoaded()) {
      metadataBRMSConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataBRMSConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_BRMS);
      metadataBRMSConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_BRMS);
      baseRulesNode.getChildren().add(metadataBRMSConnectionNode);
    }
    if (PluginChecker.isRulesPluginLoaded() && codeLanguage != ECodeLanguage.PERL) {
      metadataRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_RULES);
      metadataRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_RULES);
      baseRulesNode.getChildren().add(metadataRulesNode);
    }
  }
  if (PluginChecker.isValidationrulesPluginLoaded()) {
    metadataValidationRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataValidationRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataValidationRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataNode.getChildren().add(metadataValidationRulesNode);
  }
  if (PluginChecker.isEDIFACTPluginLoaded()) {
    metadataEDIFactConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEDIFactConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_EDIFACT);
    metadataEDIFactConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_EDIFACT);
    metadataNode.getChildren().add(metadataEDIFactConnectionNode);
  }
  if (PluginChecker.isRefProjectLoaded() && getParent() != this && project != null && project.getEmfProject().getReferencedProjects().size() > 0) {
    refProject=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    refProject.setProperties(EProperties.LABEL,ERepositoryObjectType.REFERENCED_PROJECTS);
    refProject.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
    nodes.add(refProject);
  }
  initExtensionRepositoryNodes(curParentNode);
  deleteHiddenNodes(nodes);
  try {
    hideHiddenNodesDependsUserRight();
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  collectRepositoryNodes(curParentNode);
}",0.9965203227955874
127961,"public void initialize(String currentPerspective){
  this.currentPerspective=currentPerspective;
  nodeAndProject=new HashMap<Object,List<Project>>();
  IRepositoryNode curParentNode=null;
  String urlBranch=null;
  if (ProjectManager.getInstance().getCurrentBranchURL(project) != null) {
    urlBranch=showSVNRoot();
  }
  if (""String_Node_Str"".equals(urlBranch) || urlBranch == null) {
    curParentNode=this;
  }
 else {
    List<IRepositoryNode> root=getChildren();
    svnRootNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    svnRootNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SVN_ROOT + ""String_Node_Str"" + urlBranch+ ""String_Node_Str"");
    svnRootNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SVN_ROOT);
    if (root.contains(svnRootNode)) {
      return;
    }
    root.add(svnRootNode);
    curParentNode=svnRootNode;
  }
  List<IRepositoryNode> nodes=curParentNode.getChildren();
  recBinNode=new BinRepositoryNode(this);
  nodes.add(recBinNode);
  businessProcessNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  businessProcessNode.setProperties(EProperties.LABEL,ERepositoryObjectType.BUSINESS_PROCESS);
  businessProcessNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.BUSINESS_PROCESS);
  nodes.add(businessProcessNode);
  processNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  processNode.setProperties(EProperties.LABEL,ERepositoryObjectType.PROCESS);
  processNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.PROCESS);
  nodes.add(processNode);
  if (PluginChecker.isJobLetPluginLoaded()) {
    jobletNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    jobletNode.setProperties(EProperties.LABEL,ERepositoryObjectType.JOBLET);
    jobletNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.JOBLET);
    nodes.add(jobletNode);
  }
  contextNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  contextNode.setProperties(EProperties.LABEL,ERepositoryObjectType.CONTEXT);
  contextNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.CONTEXT);
  nodes.add(contextNode);
  codeNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.CODE_ICON);
  codeNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.CODE);
  nodes.add(codeNode);
  routineNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  routineNode.setProperties(EProperties.LABEL,ERepositoryObjectType.ROUTINES);
  routineNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.ROUTINES);
  codeNode.getChildren().add(routineNode);
  if (PluginChecker.isMetalanguagePluginLoaded()) {
    jobscriptsNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    jobscriptsNode.setProperties(EProperties.LABEL,ERepositoryObjectType.JOB_SCRIPT);
    jobscriptsNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.JOB_SCRIPT);
    codeNode.getChildren().add(jobscriptsNode);
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
    IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
    if (service.isVisible()) {
      metadataHeaderFooterConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataHeaderFooterConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_HEADER_FOOTER);
      metadataHeaderFooterConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_HEADER_FOOTER);
      codeNode.getChildren().add(metadataHeaderFooterConnectionNode);
    }
  }
  sqlPatternNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  sqlPatternNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SQLPATTERNS);
  sqlPatternNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SQLPATTERNS);
  nodes.add(sqlPatternNode);
  docNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  docNode.setProperties(EProperties.LABEL,ERepositoryObjectType.DOCUMENTATION);
  docNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.DOCUMENTATION);
  nodes.add(docNode);
  metadataNode=new RepositoryNode(null,this,ENodeType.STABLE_SYSTEM_FOLDER);
  metadataNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA);
  metadataNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA);
  nodes.add(metadataNode);
  metadataConNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataConNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataConNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataNode.getChildren().add(metadataConNode);
  metadataFileNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataFileNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataNode.getChildren().add(metadataFileNode);
  metadataFilePositionalNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFilePositionalNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
  metadataFilePositionalNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
  metadataNode.getChildren().add(metadataFilePositionalNode);
  metadataFileRegexpNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileRegexpNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_REGEXP);
  metadataFileRegexpNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_REGEXP);
  metadataNode.getChildren().add(metadataFileRegexpNode);
  metadataFileXmlNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileXmlNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_XML);
  metadataFileXmlNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_XML);
  metadataNode.getChildren().add(metadataFileXmlNode);
  metadataFileLdifNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileLdifNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_LDIF);
  metadataFileLdifNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_LDIF);
  metadataNode.getChildren().add(metadataFileLdifNode);
  metadataFileExcelNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileExcelNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EXCEL);
  metadataFileExcelNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EXCEL);
  metadataNode.getChildren().add(metadataFileExcelNode);
  ECodeLanguage codeLanguage=LanguageManager.getCurrentLanguage();
  if (codeLanguage != ECodeLanguage.PERL) {
    metadataLDAPSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataLDAPSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    metadataLDAPSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    metadataNode.getChildren().add(metadataLDAPSchemaNode);
  }
  metadataGenericSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataGenericSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
  metadataGenericSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
  metadataNode.getChildren().add(metadataGenericSchemaNode);
  metadataWSDLSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataWSDLSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
  metadataWSDLSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
  metadataNode.getChildren().add(metadataWSDLSchemaNode);
  if (codeLanguage != ECodeLanguage.PERL) {
    metadataSalesforceSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSalesforceSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
    metadataSalesforceSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
    metadataNode.getChildren().add(metadataSalesforceSchemaNode);
  }
  if (PluginChecker.isSAPWizardPluginLoaded() && LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
    metadataSAPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSAPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataSAPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataNode.getChildren().add(metadataSAPConnectionNode);
  }
  if (PluginChecker.isHL7PluginLoaded()) {
    metadataHL7ConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataHL7ConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataHL7ConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataNode.getChildren().add(metadataHL7ConnectionNode);
  }
  if (PluginChecker.isFTPPluginLoaded()) {
    metadataFTPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataFTPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataFTPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataNode.getChildren().add(metadataFTPConnectionNode);
  }
  if (PluginChecker.isEBCDICPluginLoaded()) {
    metadataEbcdicConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEbcdicConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataEbcdicConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataNode.getChildren().add(metadataEbcdicConnectionNode);
  }
  if (PluginChecker.isMDMPluginLoaded()) {
    metadataMDMConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataMDMConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_MDMCONNECTION);
    metadataMDMConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_MDMCONNECTION);
    metadataNode.getChildren().add(metadataMDMConnectionNode);
  }
  if (PluginChecker.isSurvivorshipPluginLoaded() || PluginChecker.isRulesPluginLoaded() || PluginChecker.isBRMSPluginLoaded()) {
    StableRepositoryNode baseRulesNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.METADATA_RULES_ICON);
    baseRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_RULES_MANAGEMENT);
    metadataNode.getChildren().add(baseRulesNode);
    if (PluginChecker.isBRMSPluginLoaded()) {
      metadataBRMSConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataBRMSConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_BRMS);
      metadataBRMSConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_BRMS);
      baseRulesNode.getChildren().add(metadataBRMSConnectionNode);
    }
    if (PluginChecker.isRulesPluginLoaded() && codeLanguage != ECodeLanguage.PERL) {
      metadataRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_RULES);
      metadataRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_RULES);
      baseRulesNode.getChildren().add(metadataRulesNode);
    }
  }
  if (PluginChecker.isValidationrulesPluginLoaded()) {
    metadataValidationRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataValidationRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataValidationRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataNode.getChildren().add(metadataValidationRulesNode);
  }
  if (PluginChecker.isEDIFACTPluginLoaded()) {
    metadataEDIFactConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEDIFactConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_EDIFACT);
    metadataEDIFactConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_EDIFACT);
    metadataNode.getChildren().add(metadataEDIFactConnectionNode);
  }
  if (PluginChecker.isRefProjectLoaded() && getParent() != this && project != null && project.getEmfProject().getReferencedProjects().size() > 0) {
    refProject=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    refProject.setProperties(EProperties.LABEL,ERepositoryObjectType.REFERENCED_PROJECTS);
    refProject.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
    nodes.add(refProject);
  }
  deleteHiddenNodes(nodes);
  initExtensionRepositoryNodes(curParentNode);
  try {
    hideHiddenNodesDependsUserRight();
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  collectRepositoryNodes(curParentNode);
}","public void initialize(String currentPerspective){
  this.currentPerspective=currentPerspective;
  nodeAndProject=new HashMap<Object,List<Project>>();
  IRepositoryNode curParentNode=null;
  String urlBranch=null;
  if (ProjectManager.getInstance().getCurrentBranchURL(project) != null) {
    urlBranch=showSVNRoot();
  }
  if (""String_Node_Str"".equals(urlBranch) || urlBranch == null) {
    curParentNode=this;
  }
 else {
    List<IRepositoryNode> root=getChildren();
    svnRootNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    svnRootNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SVN_ROOT + ""String_Node_Str"" + urlBranch+ ""String_Node_Str"");
    svnRootNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SVN_ROOT);
    if (root.contains(svnRootNode)) {
      return;
    }
    root.add(svnRootNode);
    curParentNode=svnRootNode;
  }
  List<IRepositoryNode> nodes=curParentNode.getChildren();
  recBinNode=new BinRepositoryNode(this);
  nodes.add(recBinNode);
  businessProcessNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  businessProcessNode.setProperties(EProperties.LABEL,ERepositoryObjectType.BUSINESS_PROCESS);
  businessProcessNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.BUSINESS_PROCESS);
  nodes.add(businessProcessNode);
  processNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  processNode.setProperties(EProperties.LABEL,ERepositoryObjectType.PROCESS);
  processNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.PROCESS);
  nodes.add(processNode);
  if (PluginChecker.isJobLetPluginLoaded()) {
    jobletNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    jobletNode.setProperties(EProperties.LABEL,ERepositoryObjectType.JOBLET);
    jobletNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.JOBLET);
    nodes.add(jobletNode);
  }
  contextNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  contextNode.setProperties(EProperties.LABEL,ERepositoryObjectType.CONTEXT);
  contextNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.CONTEXT);
  nodes.add(contextNode);
  codeNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.CODE_ICON);
  codeNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.CODE);
  nodes.add(codeNode);
  routineNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  routineNode.setProperties(EProperties.LABEL,ERepositoryObjectType.ROUTINES);
  routineNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.ROUTINES);
  codeNode.getChildren().add(routineNode);
  if (PluginChecker.isMetalanguagePluginLoaded()) {
    jobscriptsNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    jobscriptsNode.setProperties(EProperties.LABEL,ERepositoryObjectType.JOB_SCRIPT);
    jobscriptsNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.JOB_SCRIPT);
    codeNode.getChildren().add(jobscriptsNode);
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
    IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
    if (service.isVisible()) {
      metadataHeaderFooterConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataHeaderFooterConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_HEADER_FOOTER);
      metadataHeaderFooterConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_HEADER_FOOTER);
      codeNode.getChildren().add(metadataHeaderFooterConnectionNode);
    }
  }
  sqlPatternNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  sqlPatternNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SQLPATTERNS);
  sqlPatternNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SQLPATTERNS);
  nodes.add(sqlPatternNode);
  docNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  docNode.setProperties(EProperties.LABEL,ERepositoryObjectType.DOCUMENTATION);
  docNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.DOCUMENTATION);
  nodes.add(docNode);
  metadataNode=new RepositoryNode(null,this,ENodeType.STABLE_SYSTEM_FOLDER);
  metadataNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA);
  metadataNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA);
  nodes.add(metadataNode);
  metadataConNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataConNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataConNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataNode.getChildren().add(metadataConNode);
  metadataFileNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataFileNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataNode.getChildren().add(metadataFileNode);
  metadataFilePositionalNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFilePositionalNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
  metadataFilePositionalNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
  metadataNode.getChildren().add(metadataFilePositionalNode);
  metadataFileRegexpNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileRegexpNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_REGEXP);
  metadataFileRegexpNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_REGEXP);
  metadataNode.getChildren().add(metadataFileRegexpNode);
  metadataFileXmlNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileXmlNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_XML);
  metadataFileXmlNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_XML);
  metadataNode.getChildren().add(metadataFileXmlNode);
  metadataFileLdifNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileLdifNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_LDIF);
  metadataFileLdifNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_LDIF);
  metadataNode.getChildren().add(metadataFileLdifNode);
  metadataFileExcelNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileExcelNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EXCEL);
  metadataFileExcelNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EXCEL);
  metadataNode.getChildren().add(metadataFileExcelNode);
  ECodeLanguage codeLanguage=LanguageManager.getCurrentLanguage();
  if (codeLanguage != ECodeLanguage.PERL) {
    metadataLDAPSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataLDAPSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    metadataLDAPSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    metadataNode.getChildren().add(metadataLDAPSchemaNode);
  }
  metadataGenericSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataGenericSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
  metadataGenericSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
  metadataNode.getChildren().add(metadataGenericSchemaNode);
  metadataWSDLSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataWSDLSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
  metadataWSDLSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
  metadataNode.getChildren().add(metadataWSDLSchemaNode);
  if (codeLanguage != ECodeLanguage.PERL) {
    metadataSalesforceSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSalesforceSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
    metadataSalesforceSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
    metadataNode.getChildren().add(metadataSalesforceSchemaNode);
  }
  if (PluginChecker.isSAPWizardPluginLoaded() && LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
    metadataSAPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSAPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataSAPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataNode.getChildren().add(metadataSAPConnectionNode);
  }
  if (PluginChecker.isHL7PluginLoaded()) {
    metadataHL7ConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataHL7ConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataHL7ConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataNode.getChildren().add(metadataHL7ConnectionNode);
  }
  if (PluginChecker.isFTPPluginLoaded()) {
    metadataFTPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataFTPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataFTPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataNode.getChildren().add(metadataFTPConnectionNode);
  }
  if (PluginChecker.isEBCDICPluginLoaded()) {
    metadataEbcdicConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEbcdicConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataEbcdicConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataNode.getChildren().add(metadataEbcdicConnectionNode);
  }
  if (PluginChecker.isMDMPluginLoaded()) {
    metadataMDMConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataMDMConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_MDMCONNECTION);
    metadataMDMConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_MDMCONNECTION);
    metadataNode.getChildren().add(metadataMDMConnectionNode);
  }
  if (PluginChecker.isSurvivorshipPluginLoaded() || PluginChecker.isRulesPluginLoaded() || PluginChecker.isBRMSPluginLoaded()) {
    StableRepositoryNode baseRulesNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.METADATA_RULES_ICON);
    baseRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_RULES_MANAGEMENT);
    metadataNode.getChildren().add(baseRulesNode);
    if (PluginChecker.isBRMSPluginLoaded()) {
      metadataBRMSConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataBRMSConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_BRMS);
      metadataBRMSConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_BRMS);
      baseRulesNode.getChildren().add(metadataBRMSConnectionNode);
    }
    if (PluginChecker.isRulesPluginLoaded() && codeLanguage != ECodeLanguage.PERL) {
      metadataRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_RULES);
      metadataRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_RULES);
      baseRulesNode.getChildren().add(metadataRulesNode);
    }
  }
  if (PluginChecker.isValidationrulesPluginLoaded()) {
    metadataValidationRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataValidationRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataValidationRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataNode.getChildren().add(metadataValidationRulesNode);
  }
  if (PluginChecker.isEDIFACTPluginLoaded()) {
    metadataEDIFactConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEDIFactConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_EDIFACT);
    metadataEDIFactConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_EDIFACT);
    metadataNode.getChildren().add(metadataEDIFactConnectionNode);
  }
  if (PluginChecker.isRefProjectLoaded() && getParent() != this && project != null && project.getEmfProject().getReferencedProjects().size() > 0) {
    refProject=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    refProject.setProperties(EProperties.LABEL,ERepositoryObjectType.REFERENCED_PROJECTS);
    refProject.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
    nodes.add(refProject);
  }
  initExtensionRepositoryNodes(curParentNode);
  deleteHiddenNodes(nodes);
  try {
    hideHiddenNodesDependsUserRight();
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  collectRepositoryNodes(curParentNode);
}",0.9965203227955874
127962,"/** 
 * Adding the page to the wizard.
 */
@Override public void addPages(){
  if (isToolbar) {
    pathToSave=null;
  }
  propertiesWizardPage=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_FILE_XML,!isRepositoryObjectEditable(),creation);
  xmlFileSelectPage=new XmlFileSelectWizardPage(creation,connectionItem,isRepositoryObjectEditable(),existingNames);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_XML_WIZ));
  if (connection != null) {
    List schemas=connection.getSchema();
    if (!schemas.isEmpty()) {
      XmlXPathLoopDescriptor currentSchema=(XmlXPathLoopDescriptor)schemas.get(0);
      oldAbstractQueryPath=currentSchema.getAbsoluteXPathQuery();
    }
  }
  if (creation) {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    propertiesWizardPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    propertiesWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    addPage(propertiesWizardPage);
    propertiesWizardPage.setPageComplete(false);
    xmlFileSelectPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    xmlFileSelectPage.setDescription(""String_Node_Str"");
    addPage(xmlFileSelectPage);
    xmlFileSelectPage.setPageComplete(true);
  }
 else {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    propertiesWizardPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    propertiesWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    addPage(propertiesWizardPage);
    xmlFileSelectPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    xmlFileSelectPage.setDescription(""String_Node_Str"");
    addPage(xmlFileSelectPage);
    xmlFileSelectPage.setPageComplete(true);
  }
}","/** 
 * Adding the page to the wizard.
 */
@Override public void addPages(){
  if (isToolbar) {
    pathToSave=null;
  }
  propertiesWizardPage=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_FILE_XML,!isRepositoryObjectEditable(),creation);
  xmlFileSelectPage=new XmlFileSelectWizardPage(creation,connectionItem,isRepositoryObjectEditable(),existingNames);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_XML_WIZ));
  if (connection != null) {
    List schemas=connection.getSchema();
    if (!schemas.isEmpty()) {
      XmlXPathLoopDescriptor currentSchema=(XmlXPathLoopDescriptor)schemas.get(0);
      oldAbstractQueryPath=currentSchema.getAbsoluteXPathQuery();
    }
  }
  if (creation) {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    propertiesWizardPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    propertiesWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    addPage(propertiesWizardPage);
    propertiesWizardPage.setPageComplete(false);
    xmlFileSelectPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    xmlFileSelectPage.setDescription(""String_Node_Str"");
    addPage(xmlFileSelectPage);
    xmlFileSelectPage.setPageComplete(true);
  }
 else {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    propertiesWizardPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    propertiesWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    addPage(propertiesWizardPage);
    xmlFileSelectPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    xmlFileSelectPage.setDescription(""String_Node_Str"");
    addPage(xmlFileSelectPage);
    xmlFileSelectPage.setPageComplete(true);
    if (!isRepositoryObjectEditable()) {
      creation=true;
    }
  }
}",0.9836930455635492
127963,"/** 
 * Initialize value, forceFocus first field.
 */
@Override protected void initialize(){
  if (getConnection().getEncoding() != null && !getConnection().getEncoding().equals(""String_Node_Str"")) {
    encodingCombo.setText(getConnection().getEncoding());
  }
 else {
    encodingCombo.select(0);
  }
  fieldSeparatorCombo.setText(getConnection().getFieldSeparatorType().getName());
  fieldSeparatorText.setText(getConnection().getFieldSeparatorValue());
  fieldSeparatorText.setEditable(false);
  rowSeparatorCombo.setText(getConnection().getRowSeparatorType().getLiteral());
  rowSeparatorText.setText(getConnection().getRowSeparatorValue());
  rowSeparatorText.setEditable(false);
  if (!isContextMode()) {
    fieldSeparatorManager();
    rowSeparatorManager();
  }
  boolean flag=false;
  getConnection().setUseHeader(flag);
  flag=initRowsToSkip(rowsToSkipFooterCheckboxCombo,getConnection().getFooterValue());
  getConnection().setUseFooter(flag);
  flag=initRowsToSkip(rowsToSkipLimitCheckboxCombo,getConnection().getLimitValue());
  getConnection().setUseLimit(flag);
  emptyRowsToSkipCheckbox.setSelection(getConnection().isRemoveEmptyRow());
  firstRowIsCaptionCheckbox.setSelection(false);
  String textEnclosure=getConnection().getTextEnclosure();
  String textEnclosureValue=ShadowProcessHelper.getValueFromArray(textEnclosure,TEXT_ENCLOSURE_DATA);
  if (textEnclosureValue == null) {
    textEnclosureCombo.select(0);
  }
 else {
    textEnclosureCombo.setText(textEnclosureValue);
  }
  String escapeChar=getConnection().getEscapeChar();
  String escapeCharValue=ShadowProcessHelper.getValueFromArray(escapeChar,ESCAPE_CHAR_DATA);
  if (escapeCharValue == null) {
    escapeCharCombo.select(0);
  }
 else {
    escapeCharCombo.setText(escapeCharValue);
  }
  splitwayRecordForJavaFID.setSelection(getConnection().isSplitRecord());
  if (Escape.DELIMITED.equals(getConnection().getEscapeType())) {
    csvRadio.setSelection(false);
    delimitedRadio.setSelection(true);
    textEnclosureCombo.setEnabled(false);
    escapeCharCombo.setEnabled(false);
    splitwayRecordForJavaFID.setEnabled(true);
  }
  if (Escape.CSV.equals(getConnection().getEscapeType())) {
    csvRadio.setSelection(true);
    delimitedRadio.setSelection(false);
    splitwayRecordForJavaFID.setEnabled(false);
  }
  String s=getConnection().getEscapeChar();
  if (!(s == null) && !s.equals(""String_Node_Str"") && !s.equals(EMPTY_VALUE)) {
    escapeCharCombo.setText(s);
  }
  s=getConnection().getTextEnclosure();
  if (!(s == null) && !s.equals(""String_Node_Str"") && !s.equals(EMPTY_VALUE)) {
    textEnclosureCombo.setText(s);
  }
  encodingCombo.clearSelection();
  fieldSeparatorCombo.clearSelection();
  rowSeparatorCombo.clearSelection();
  escapeCharCombo.clearSelection();
  textEnclosureCombo.clearSelection();
  emptyRowsToSkipCheckbox.setSelection(getConnection().isRemoveEmptyRow());
  checkFieldsValue();
  if (isContextMode()) {
    adaptFormToEditable();
  }
}","/** 
 * Initialize value, forceFocus first field.
 */
@Override protected void initialize(){
  if (getConnection().getEncoding() != null && !getConnection().getEncoding().equals(""String_Node_Str"")) {
    encodingCombo.setText(getConnection().getEncoding());
  }
 else {
    encodingCombo.select(0);
  }
  fieldSeparatorCombo.setText(getConnection().getFieldSeparatorType().getName());
  fieldSeparatorText.setText(getConnection().getFieldSeparatorValue());
  fieldSeparatorText.setEditable(false);
  rowSeparatorCombo.setText(getConnection().getRowSeparatorType().getLiteral());
  rowSeparatorText.setText(getConnection().getRowSeparatorValue());
  rowSeparatorText.setEditable(false);
  if (!isContextMode()) {
    fieldSeparatorManager();
    rowSeparatorManager();
  }
  boolean flag=false;
  flag=initRowsToSkip(rowsToSkipHeaderCheckboxCombo,getConnection().getHeaderValue());
  getConnection().setUseHeader(flag);
  flag=initRowsToSkip(rowsToSkipFooterCheckboxCombo,getConnection().getFooterValue());
  getConnection().setUseFooter(flag);
  flag=initRowsToSkip(rowsToSkipLimitCheckboxCombo,getConnection().getLimitValue());
  getConnection().setUseLimit(flag);
  emptyRowsToSkipCheckbox.setSelection(getConnection().isRemoveEmptyRow());
  firstRowIsCaptionCheckbox.setSelection(getConnection().isFirstLineCaption());
  String textEnclosure=getConnection().getTextEnclosure();
  String textEnclosureValue=ShadowProcessHelper.getValueFromArray(textEnclosure,TEXT_ENCLOSURE_DATA);
  if (textEnclosureValue == null) {
    textEnclosureCombo.select(0);
  }
 else {
    textEnclosureCombo.setText(textEnclosureValue);
  }
  String escapeChar=getConnection().getEscapeChar();
  String escapeCharValue=ShadowProcessHelper.getValueFromArray(escapeChar,ESCAPE_CHAR_DATA);
  if (escapeCharValue == null) {
    escapeCharCombo.select(0);
  }
 else {
    escapeCharCombo.setText(escapeCharValue);
  }
  splitwayRecordForJavaFID.setSelection(getConnection().isSplitRecord());
  if (Escape.DELIMITED.equals(getConnection().getEscapeType())) {
    csvRadio.setSelection(false);
    delimitedRadio.setSelection(true);
    textEnclosureCombo.setEnabled(false);
    escapeCharCombo.setEnabled(false);
    splitwayRecordForJavaFID.setEnabled(true);
  }
  if (Escape.CSV.equals(getConnection().getEscapeType())) {
    csvRadio.setSelection(true);
    delimitedRadio.setSelection(false);
    splitwayRecordForJavaFID.setEnabled(false);
  }
  String s=getConnection().getEscapeChar();
  if (!(s == null) && !s.equals(""String_Node_Str"") && !s.equals(EMPTY_VALUE)) {
    escapeCharCombo.setText(s);
  }
  s=getConnection().getTextEnclosure();
  if (!(s == null) && !s.equals(""String_Node_Str"") && !s.equals(EMPTY_VALUE)) {
    textEnclosureCombo.setText(s);
  }
  encodingCombo.clearSelection();
  fieldSeparatorCombo.clearSelection();
  rowSeparatorCombo.clearSelection();
  escapeCharCombo.clearSelection();
  textEnclosureCombo.clearSelection();
  emptyRowsToSkipCheckbox.setSelection(getConnection().isRemoveEmptyRow());
  checkFieldsValue();
  if (isContextMode()) {
    adaptFormToEditable();
  }
}",0.9788429752066116
127964,"private static DynamicClassLoader findLoader(String index){
  if (index != null && configurationElements != null) {
    for (    IConfigurationElement current : configurationElements) {
      String key=current.getAttribute(INDEX_ATTR);
      if (index.equals(key)) {
        String libraries=current.getAttribute(LIB_ATTR);
        if (StringUtils.isNotEmpty(index)) {
          DynamicClassLoader classLoader=new DynamicClassLoader();
          if (StringUtils.isNotEmpty(libraries)) {
            String[] librariesArray=libraries.split(SEPARATOR);
            loadLibraries(classLoader,librariesArray);
          }
          return classLoader;
        }
      }
    }
  }
  return null;
}","private static DynamicClassLoader findLoader(String index){
  if (index != null && configurationElements != null) {
    for (    IConfigurationElement current : configurationElements) {
      String key=current.getAttribute(INDEX_ATTR);
      if (index.equals(key)) {
        String libraries=current.getAttribute(LIB_ATTR);
        if (StringUtils.isNotEmpty(index)) {
          DynamicClassLoader classLoader=new DynamicClassLoader();
          boolean putInCache=true;
          if (StringUtils.isNotEmpty(libraries)) {
            String[] librariesArray=libraries.split(SEPARATOR);
            putInCache=loadLibraries(classLoader,librariesArray);
          }
          if (putInCache) {
            classLoadersMap.put(index,classLoader);
          }
          return classLoader;
        }
      }
    }
  }
  return null;
}",0.8858267716535433
127965,"/** 
 * DOC ycbai Comment method ""getClassLoader"".
 * @param index
 * @return the classLoader by index
 */
public static DynamicClassLoader getClassLoader(String index){
  if (classLoadersMap == null) {
    init();
  }
  DynamicClassLoader classLoader=classLoadersMap.get(index);
  if (classLoader == null) {
    classLoader=findLoader(index);
  }
  if (classLoader != null) {
    classLoadersMap.put(index,classLoader);
  }
  return classLoader;
}","/** 
 * DOC ycbai Comment method ""getClassLoader"".
 * @param index
 * @return the classLoader by index
 */
public static DynamicClassLoader getClassLoader(String index){
  if (classLoadersMap == null) {
    init();
  }
  DynamicClassLoader classLoader=classLoadersMap.get(index);
  if (classLoader == null) {
    classLoader=findLoader(index);
  }
  return classLoader;
}",0.8620268620268621
127966,"private static void loadLibraries(DynamicClassLoader classLoader,String[] driversArray){
  List<String> jarPathList=new ArrayList<String>();
  if (driversArray == null || driversArray.length == 0) {
    return;
  }
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  String libPath=getLibPath();
  for (  String driverName : driversArray) {
    String jarPath=libPath + PATH_SEPARATOR + driverName;
    File jarFile=new File(jarPath);
    if (!jarFile.exists()) {
      librairesManagerService.retrieve(driverName,libPath,new NullProgressMonitor());
    }
    jarPathList.add(jarFile.getAbsolutePath());
  }
  classLoader.setLibStorePath(libPath);
  classLoader.addLibraries(jarPathList);
}","private static boolean loadLibraries(DynamicClassLoader classLoader,String[] driversArray){
  List<String> jarPathList=new ArrayList<String>();
  if (driversArray == null || driversArray.length == 0) {
    return true;
  }
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  String libPath=getLibPath();
  List<String> driverNotExist=new ArrayList<String>();
  for (  String driverName : driversArray) {
    String jarPath=libPath + PATH_SEPARATOR + driverName;
    File jarFile=new File(jarPath);
    if (!jarFile.exists()) {
      driverNotExist.add(driverName);
    }
    jarPathList.add(jarFile.getAbsolutePath());
  }
  boolean putInCache=false;
  if (!driverNotExist.isEmpty()) {
    putInCache=librairesManagerService.retrieve(driverNotExist,libPath,new NullProgressMonitor());
  }
  classLoader.setLibStorePath(libPath);
  classLoader.addLibraries(jarPathList);
  return putInCache;
}",0.7429854096520763
127967,"public void getNotInstalledModules(String[] names,List<ModuleToInstall> toInstall,IModulesListener listener){
  StringBuffer jars=new StringBuffer();
  if (names != null && names.length > 0) {
    for (    String module : names) {
      String moduleName=module.trim();
      ModuleToInstall moduleToInstall=cache.get(moduleName);
      if (moduleToInstall != null) {
        moduleToInstall.setContext(""String_Node_Str"");
        toInstall.add(moduleToInstall);
      }
 else {
        if (jars.length() != 0) {
          jars.append(SEPARATOR);
        }
 else {
          jars.append(moduleName);
        }
      }
    }
  }
  String jarNames=jars.toString();
  if (jarNames.isEmpty()) {
    listener.listModulesDone();
    return;
  }
  getModuleUrlsFromWebService(jarNames,toInstall,null,listener,false);
}","public void getNotInstalledModules(String[] names,List<ModuleToInstall> toInstall,IModulesListener listener){
  StringBuffer jars=new StringBuffer();
  if (names != null && names.length > 0) {
    for (    String module : names) {
      String moduleName=module.trim();
      ModuleToInstall moduleToInstall=cache.get(moduleName);
      if (moduleToInstall != null) {
        moduleToInstall.setContext(""String_Node_Str"");
        toInstall.add(moduleToInstall);
      }
 else {
        if (jars.length() != 0) {
          jars.append(SEPARATOR);
          jars.append(moduleName);
        }
 else {
          jars.append(moduleName);
        }
      }
    }
  }
  String jarNames=jars.toString();
  if (jarNames.isEmpty()) {
    listener.listModulesDone();
    return;
  }
  getModuleUrlsFromWebService(jarNames,toInstall,null,listener,false);
}",0.9571514785757392
127968,"@Override public Set<String> list(IProgressMonitor... monitorWrap){
  Set<String> names=new HashSet<String>();
  try {
    List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),null);
    if (jarFiles.size() > 0) {
      for (      File file : jarFiles) {
        names.add(file.getName());
      }
    }
 else {
    }
  }
 catch (  MalformedURLException e) {
    CommonExceptionHandler.process(e);
  }
  LibrariesIndexManager.getInstance().loadResource();
  EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
  names.addAll(jarsToRelative.keySet());
  return names;
}","@Override public Set<String> list(IProgressMonitor... monitorWrap){
  Set<String> names=new HashSet<String>();
  try {
    List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),null);
    if (jarFiles.size() > 0) {
      for (      File file : jarFiles) {
        names.add(file.getName());
      }
    }
 else {
    }
  }
 catch (  MalformedURLException e) {
    CommonExceptionHandler.process(e);
  }
  LibrariesIndexManager.getInstance().loadResource();
  EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
  Map<String,File> componentsFolders=null;
  Set<String> contributeIdSet=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IComponentsService.class)) {
    IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
    componentsFolders=service.getComponentsFactory().getComponentsProvidersFolder();
    contributeIdSet=componentsFolders.keySet();
  }
  for (  String jarName : jarsToRelative.keySet()) {
    String relativePath=jarsToRelative.get(jarName);
    boolean jarFound=false;
    if (relativePath != null) {
      if (relativePath.startsWith(""String_Node_Str"")) {
        URI uri;
        try {
          uri=new URI(relativePath);
          URL url=FileLocator.toFileURL(uri.toURL());
          File file=new File(url.getFile());
          if (file.exists()) {
            jarFound=true;
          }
        }
 catch (        Exception e) {
          continue;
        }
      }
 else {
        if (componentsFolders != null && contributeIdSet != null) {
          for (          String contributor : contributeIdSet) {
            if (relativePath.contains(contributor)) {
              String bundleLocation=componentsFolders.get(contributor).getAbsolutePath();
              int index=bundleLocation.indexOf(contributor);
              String jarLocation=new Path(bundleLocation.substring(0,index)).append(relativePath).toPortableString();
              File file=new File(jarLocation);
              if (file.exists()) {
                jarFound=true;
              }
              break;
            }
          }
        }
      }
    }
    if (jarFound) {
      names.add(jarName);
    }
  }
  return names;
}",0.4099421178072863
127969,"public void initialize(String currentPerspective){
  this.currentPerspective=currentPerspective;
  nodeAndProject=new HashMap<Object,List<Project>>();
  IRepositoryNode curParentNode=null;
  String urlBranch=null;
  if (ProjectManager.getInstance().getCurrentBranchURL(project) != null) {
    urlBranch=showSVNRoot();
  }
  if (""String_Node_Str"".equals(urlBranch) || urlBranch == null) {
    curParentNode=this;
  }
 else {
    List<IRepositoryNode> root=getChildren();
    svnRootNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    svnRootNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SVN_ROOT + ""String_Node_Str"" + urlBranch+ ""String_Node_Str"");
    svnRootNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SVN_ROOT);
    if (root.contains(svnRootNode)) {
      return;
    }
    root.add(svnRootNode);
    curParentNode=svnRootNode;
  }
  List<IRepositoryNode> nodes=curParentNode.getChildren();
  recBinNode=new BinRepositoryNode(this);
  nodes.add(recBinNode);
  sqlPatternNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  sqlPatternNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SQLPATTERNS);
  sqlPatternNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SQLPATTERNS);
  nodes.add(sqlPatternNode);
  docNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  docNode.setProperties(EProperties.LABEL,ERepositoryObjectType.DOCUMENTATION);
  docNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.DOCUMENTATION);
  nodes.add(docNode);
  metadataNode=new RepositoryNode(null,this,ENodeType.STABLE_SYSTEM_FOLDER);
  metadataNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA);
  metadataNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA);
  nodes.add(metadataNode);
  metadataConNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataConNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataConNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataNode.getChildren().add(metadataConNode);
  metadataFileNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataFileNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataNode.getChildren().add(metadataFileNode);
  if (PluginChecker.isSAPWizardPluginLoaded() && LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
    metadataSAPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSAPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataSAPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataNode.getChildren().add(metadataSAPConnectionNode);
  }
  if (PluginChecker.isHL7PluginLoaded()) {
    metadataHL7ConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataHL7ConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataHL7ConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataNode.getChildren().add(metadataHL7ConnectionNode);
  }
  if (PluginChecker.isFTPPluginLoaded()) {
    metadataFTPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataFTPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataFTPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataNode.getChildren().add(metadataFTPConnectionNode);
  }
  if (PluginChecker.isEBCDICPluginLoaded()) {
    metadataEbcdicConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEbcdicConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataEbcdicConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataNode.getChildren().add(metadataEbcdicConnectionNode);
  }
  if (PluginChecker.isSurvivorshipPluginLoaded() || PluginChecker.isRulesPluginLoaded() || PluginChecker.isBRMSPluginLoaded()) {
    StableRepositoryNode baseRulesNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.METADATA_RULES_ICON);
    baseRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_RULES_MANAGEMENT);
    metadataNode.getChildren().add(baseRulesNode);
    if (PluginChecker.isBRMSPluginLoaded()) {
      metadataBRMSConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataBRMSConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_BRMS);
      metadataBRMSConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_BRMS);
      baseRulesNode.getChildren().add(metadataBRMSConnectionNode);
    }
    if (PluginChecker.isRulesPluginLoaded()) {
      metadataRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_RULES);
      metadataRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_RULES);
      baseRulesNode.getChildren().add(metadataRulesNode);
    }
  }
  if (PluginChecker.isValidationrulesPluginLoaded()) {
    metadataValidationRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataValidationRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataValidationRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataNode.getChildren().add(metadataValidationRulesNode);
  }
  if (PluginChecker.isEDIFACTPluginLoaded()) {
    metadataEDIFactConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEDIFactConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_EDIFACT);
    metadataEDIFactConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_EDIFACT);
    metadataNode.getChildren().add(metadataEDIFactConnectionNode);
  }
  if (PluginChecker.isRefProjectLoaded() && getParent() != this && project != null && project.getEmfProject().getReferencedProjects().size() > 0) {
    refProject=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    refProject.setProperties(EProperties.LABEL,ERepositoryObjectType.REFERENCED_PROJECTS);
    refProject.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
    nodes.add(refProject);
  }
  deleteHiddenNodes(nodes);
  initExtensionRepositoryNodes(curParentNode);
  try {
    hideHiddenNodesDependsUserRight();
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  collectRepositoryNodes(curParentNode);
}","public void initialize(String currentPerspective){
  this.currentPerspective=currentPerspective;
  nodeAndProject=new HashMap<Object,List<Project>>();
  IRepositoryNode curParentNode=null;
  String urlBranch=null;
  if (ProjectManager.getInstance().getCurrentBranchURL(project) != null) {
    urlBranch=showSVNRoot();
  }
  if (""String_Node_Str"".equals(urlBranch) || urlBranch == null) {
    curParentNode=this;
  }
 else {
    List<IRepositoryNode> root=getChildren();
    svnRootNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    svnRootNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SVN_ROOT + ""String_Node_Str"" + urlBranch+ ""String_Node_Str"");
    svnRootNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SVN_ROOT);
    if (root.contains(svnRootNode)) {
      return;
    }
    root.add(svnRootNode);
    curParentNode=svnRootNode;
  }
  List<IRepositoryNode> nodes=curParentNode.getChildren();
  recBinNode=new BinRepositoryNode(this);
  nodes.add(recBinNode);
  sqlPatternNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  sqlPatternNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SQLPATTERNS);
  sqlPatternNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SQLPATTERNS);
  nodes.add(sqlPatternNode);
  docNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  docNode.setProperties(EProperties.LABEL,ERepositoryObjectType.DOCUMENTATION);
  docNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.DOCUMENTATION);
  nodes.add(docNode);
  metadataNode=new RepositoryNode(null,this,ENodeType.STABLE_SYSTEM_FOLDER);
  metadataNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA);
  metadataNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA);
  nodes.add(metadataNode);
  metadataConNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataConNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataConNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataNode.getChildren().add(metadataConNode);
  metadataFileNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataFileNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataNode.getChildren().add(metadataFileNode);
  if (PluginChecker.isSAPWizardPluginLoaded() && LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
    metadataSAPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSAPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataSAPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataNode.getChildren().add(metadataSAPConnectionNode);
  }
  if (PluginChecker.isHL7PluginLoaded()) {
    metadataHL7ConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataHL7ConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataHL7ConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataNode.getChildren().add(metadataHL7ConnectionNode);
  }
  if (PluginChecker.isFTPPluginLoaded()) {
    metadataFTPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataFTPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataFTPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataNode.getChildren().add(metadataFTPConnectionNode);
  }
  if (PluginChecker.isEBCDICPluginLoaded()) {
    metadataEbcdicConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEbcdicConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataEbcdicConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataNode.getChildren().add(metadataEbcdicConnectionNode);
  }
  if (PluginChecker.isSurvivorshipPluginLoaded() || PluginChecker.isRulesPluginLoaded() || PluginChecker.isBRMSPluginLoaded()) {
    StableRepositoryNode baseRulesNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.METADATA_RULES_ICON);
    baseRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_RULES_MANAGEMENT);
    metadataNode.getChildren().add(baseRulesNode);
    if (PluginChecker.isBRMSPluginLoaded()) {
      metadataBRMSConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataBRMSConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_BRMS);
      metadataBRMSConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_BRMS);
      baseRulesNode.getChildren().add(metadataBRMSConnectionNode);
    }
    if (PluginChecker.isRulesPluginLoaded()) {
      metadataRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_RULES);
      metadataRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_RULES);
      baseRulesNode.getChildren().add(metadataRulesNode);
    }
  }
  if (PluginChecker.isValidationrulesPluginLoaded()) {
    metadataValidationRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataValidationRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataValidationRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataNode.getChildren().add(metadataValidationRulesNode);
  }
  if (PluginChecker.isEDIFACTPluginLoaded()) {
    metadataEDIFactConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEDIFactConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_EDIFACT);
    metadataEDIFactConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_EDIFACT);
    metadataNode.getChildren().add(metadataEDIFactConnectionNode);
  }
  if (PluginChecker.isRefProjectLoaded() && getParent() != this && project != null && project.getEmfProject().getReferencedProjects().size() > 0) {
    refProject=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    refProject.setProperties(EProperties.LABEL,ERepositoryObjectType.REFERENCED_PROJECTS);
    refProject.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
    nodes.add(refProject);
  }
  initExtensionRepositoryNodes(curParentNode);
  deleteHiddenNodes(nodes);
  try {
    hideHiddenNodesDependsUserRight();
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  collectRepositoryNodes(curParentNode);
}",0.9932924218638504
127970,"/** 
 * get the repositorynode you want to hide in repositoryview.
 * @return
 */
public List<IRepositoryNode> getHiddenRepositoryCategory(IRepositoryNode parent,String type);","/** 
 * get the repositorynode you want to hide in repositoryview.
 * @return
 * @deprecated try to remove this hidden function by CNF in extension point.
 * @see point=""org.eclipse.ui.navigator.navigatorContent""
 */
public List<IRepositoryNode> getHiddenRepositoryCategory(IRepositoryNode parent,String type);",0.7216494845360825
127971,"/** 
 * Added by Marvin Wang on Mar 27, 2013.
 * @param metadataConn
 * @return
 */
protected ClassLoader getHive2ClassLoader(IMetadataConnection metadataConn){
  ClassLoader loader=null;
  String distroKey=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  String distroVersion=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  String hiveModel=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  if (HiveConnUtils.isCustomDistro(distroKey)) {
    String jarsStr=(String)metadataConn.getParameter(ECustomVersionGroup.HIVE.getName());
    String index=""String_Node_Str"" + metadataConn.getId();
    loader=ClassLoaderFactory.getCustomClassLoader(index,jarsStr);
  }
 else {
    String index=""String_Node_Str"" + ""String_Node_Str"" + distroKey + ""String_Node_Str""+ distroVersion+ ""String_Node_Str""+ hiveModel;
    loader=ClassLoaderFactory.getClassLoader(index);
    if (loader == null) {
      loader=HiveClassLoaderFactory.class.getClassLoader();
    }
  }
  return loader;
}","/** 
 * Added by Marvin Wang on Mar 27, 2013.
 * @param metadataConn
 * @return
 */
protected ClassLoader getHive2ClassLoader(IMetadataConnection metadataConn){
  ClassLoader loader=null;
  String distroKey=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  String distroVersion=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  String hiveModel=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  if (HiveConnUtils.isCustomDistro(distroKey)) {
    String jarsStr=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CUSTOM_JARS);
    String index=""String_Node_Str"" + metadataConn.getId();
    loader=ClassLoaderFactory.getCustomClassLoader(index,jarsStr);
  }
 else {
    String index=""String_Node_Str"" + ""String_Node_Str"" + distroKey + ""String_Node_Str""+ distroVersion+ ""String_Node_Str""+ hiveModel;
    loader=ClassLoaderFactory.getClassLoader(index);
    if (loader == null) {
      loader=HiveClassLoaderFactory.class.getClassLoader();
    }
  }
  return loader;
}",0.9629286376274327
127972,"/** 
 * Gets the class loader for different version by the given parameters for hive1 server. Added by Marvin Wang on Mar 12, 2013.
 * @param metadataConn
 * @return
 */
protected ClassLoader getHive1ClassLoader(IMetadataConnection metadataConn){
  ClassLoader loader=null;
  String distroKey=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  String distroVersion=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  String hiveModel=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  if (HiveConnUtils.isCustomDistro(distroKey)) {
    String jarsStr=(String)metadataConn.getParameter(ECustomVersionGroup.HIVE.getName());
    String index=""String_Node_Str"" + metadataConn.getId();
    loader=ClassLoaderFactory.getCustomClassLoader(index,jarsStr);
  }
 else {
    String index=""String_Node_Str"" + ""String_Node_Str"" + distroKey + ""String_Node_Str""+ distroVersion+ ""String_Node_Str""+ hiveModel;
    loader=ClassLoaderFactory.getClassLoader(index);
    if (loader == null) {
      loader=HiveClassLoaderFactory.class.getClassLoader();
    }
  }
  return loader;
}","/** 
 * Gets the class loader for different version by the given parameters for hive1 server. Added by Marvin Wang on Mar 12, 2013.
 * @param metadataConn
 * @return
 */
protected ClassLoader getHive1ClassLoader(IMetadataConnection metadataConn){
  ClassLoader loader=null;
  String distroKey=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  String distroVersion=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  String hiveModel=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  if (HiveConnUtils.isCustomDistro(distroKey)) {
    String jarsStr=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CUSTOM_JARS);
    String index=""String_Node_Str"" + metadataConn.getId();
    loader=ClassLoaderFactory.getCustomClassLoader(index,jarsStr);
  }
 else {
    String index=""String_Node_Str"" + ""String_Node_Str"" + distroKey + ""String_Node_Str""+ distroVersion+ ""String_Node_Str""+ hiveModel;
    loader=ClassLoaderFactory.getClassLoader(index);
    if (loader == null) {
      loader=HiveClassLoaderFactory.class.getClassLoader();
    }
  }
  return loader;
}",0.965665236051502
127973,"public void lock(Item item) throws PersistenceException, LoginException ;","public boolean lock(Item item) throws PersistenceException, LoginException ;",0.9395973154362416
127974,"public void unlock(Item item) throws PersistenceException, LoginException ;","public boolean unlock(Item item) throws PersistenceException, LoginException ;",0.9411764705882352
127975,"@Override public void lock(Item item) throws PersistenceException, LoginException {
  if (getStatus(item).isPotentiallyEditable()) {
    this.repositoryFactoryFromProvider.lock(item);
    notifyLock(item,true);
    String str[]=new String[]{item.toString(),getRepositoryContext().getUser().toString()};
    log.debug(Messages.getString(""String_Node_Str"",str));
  }
}","@Override public void lock(Item item) throws PersistenceException, LoginException {
  if (getStatus(item).isPotentiallyEditable()) {
    boolean locked=this.repositoryFactoryFromProvider.lock(item);
    if (locked) {
      notifyLock(item,true);
    }
    String str[]=new String[]{item.toString(),getRepositoryContext().getUser().toString()};
    log.debug(Messages.getString(""String_Node_Str"",str));
  }
}",0.9469598965071152
127976,"@Override public void unlock(Item obj) throws PersistenceException, LoginException {
  if (!(obj instanceof FolderItem) && (obj.eResource() == null || obj.getProperty().eResource() == null)) {
    obj=getUptodateProperty(obj.getProperty()).getItem();
  }
  if (getStatus(obj) == ERepositoryStatus.LOCK_BY_USER || obj instanceof JobletDocumentationItem || obj instanceof JobDocumentationItem) {
    Date commitDate=obj.getState().getCommitDate();
    Date modificationDate=obj.getProperty().getModificationDate();
    if (modificationDate == null || commitDate == null || modificationDate.before(commitDate)) {
      this.repositoryFactoryFromProvider.unlock(obj);
      notifyLock(obj,false);
      String str[]=new String[]{obj.toString(),getRepositoryContext().getUser().toString()};
      log.debug(Messages.getString(""String_Node_Str"",str));
    }
  }
}","@Override public void unlock(Item obj) throws PersistenceException, LoginException {
  if (!(obj instanceof FolderItem) && (obj.eResource() == null || obj.getProperty().eResource() == null)) {
    obj=getUptodateProperty(obj.getProperty()).getItem();
  }
  if (getStatus(obj) == ERepositoryStatus.LOCK_BY_USER || obj instanceof JobletDocumentationItem || obj instanceof JobDocumentationItem) {
    Date commitDate=obj.getState().getCommitDate();
    Date modificationDate=obj.getProperty().getModificationDate();
    if (modificationDate == null || commitDate == null || modificationDate.before(commitDate)) {
      boolean unlocked=this.repositoryFactoryFromProvider.unlock(obj);
      if (unlocked) {
        notifyLock(obj,false);
      }
      String str[]=new String[]{obj.toString(),getRepositoryContext().getUser().toString()};
      log.debug(Messages.getString(""String_Node_Str"",str));
    }
  }
}",0.9722064662507092
127977,"@Override public void lock(Item item) throws PersistenceException {
  if (getStatus(item) == ERepositoryStatus.DEFAULT) {
    item.getState().setLockDate(new Date());
    item.getState().setLocker(getRepositoryContext().getUser());
    item.getState().setLocked(true);
    xmiResourceManager.saveResource(item.getProperty().eResource());
  }
}","@Override public boolean lock(Item item) throws PersistenceException {
  if (getStatus(item) == ERepositoryStatus.DEFAULT) {
    item.getState().setLockDate(new Date());
    item.getState().setLocker(getRepositoryContext().getUser());
    item.getState().setLocked(true);
    xmiResourceManager.saveResource(item.getProperty().eResource());
    return true;
  }
  return false;
}",0.9390581717451524
127978,"@Override public void unlock(Item item) throws PersistenceException {
  if (getStatus(item) == ERepositoryStatus.LOCK_BY_USER || item instanceof JobletDocumentationItem || item instanceof JobDocumentationItem) {
    item.getState().setLocker(null);
    item.getState().setLockDate(null);
    item.getState().setLocked(false);
    xmiResourceManager.saveResource(item.getProperty().eResource());
  }
}","@Override public boolean unlock(Item item) throws PersistenceException {
  if (getStatus(item) == ERepositoryStatus.LOCK_BY_USER || item instanceof JobletDocumentationItem || item instanceof JobDocumentationItem) {
    item.getState().setLocker(null);
    item.getState().setLockDate(null);
    item.getState().setLocked(false);
    xmiResourceManager.saveResource(item.getProperty().eResource());
    return true;
  }
  return false;
}",0.9473684210526316
127979,"public static String checkStringQuotationMarks(String str){
  String newStr=str;
  if (str == null) {
    return ""String_Node_Str"";
  }
  if (newStr.contains(""String_Node_Str"")) {
    newStr=newStr.replace(""String_Node_Str"",""String_Node_Str"");
  }
  if (newStr.contains(""String_Node_Str"")) {
    newStr=newStr.replace(""String_Node_Str"",""String_Node_Str"");
  }
  return newStr;
}","public static String checkStringQuotationMarks(String str){
  String newStr=str;
  if (str == null) {
    return ""String_Node_Str"";
  }
  if (newStr.contains(""String_Node_Str"")) {
    newStr=newStr.replace(""String_Node_Str"",""String_Node_Str"");
  }
  return newStr;
}",0.7795031055900621
127980,"/** 
 * Adding the page to the wizard.
 */
@Override public void addPages(){
  if (isToolbar) {
    pathToSave=null;
  }
  propertiesWizardPage=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_FILE_XML,!isRepositoryObjectEditable(),creation);
  xmlFileSelectPage=new XmlFileSelectWizardPage(creation,connectionItem,isRepositoryObjectEditable(),existingNames);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_XML_WIZ));
  if (connection != null) {
    List schemas=connection.getSchema();
    if (!schemas.isEmpty()) {
      XmlXPathLoopDescriptor currentSchema=(XmlXPathLoopDescriptor)schemas.get(0);
      oldAbstractQueryPath=currentSchema.getAbsoluteXPathQuery();
    }
  }
  if (creation) {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    propertiesWizardPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    propertiesWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    addPage(propertiesWizardPage);
    propertiesWizardPage.setPageComplete(false);
    xmlFileSelectPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    xmlFileSelectPage.setDescription(""String_Node_Str"");
    addPage(xmlFileSelectPage);
    xmlFileSelectPage.setPageComplete(true);
  }
 else {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    propertiesWizardPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    propertiesWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    addPage(propertiesWizardPage);
    xmlFileSelectPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    xmlFileSelectPage.setDescription(""String_Node_Str"");
    addPage(xmlFileSelectPage);
    xmlFileSelectPage.setPageComplete(true);
  }
}","/** 
 * Adding the page to the wizard.
 */
@Override public void addPages(){
  if (isToolbar) {
    pathToSave=null;
  }
  propertiesWizardPage=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_FILE_XML,!isRepositoryObjectEditable(),creation);
  xmlFileSelectPage=new XmlFileSelectWizardPage(creation,connectionItem,isRepositoryObjectEditable(),existingNames);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_XML_WIZ));
  if (connection != null) {
    List schemas=connection.getSchema();
    if (!schemas.isEmpty()) {
      XmlXPathLoopDescriptor currentSchema=(XmlXPathLoopDescriptor)schemas.get(0);
      oldAbstractQueryPath=currentSchema.getAbsoluteXPathQuery();
    }
  }
  if (creation) {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    propertiesWizardPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    propertiesWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    addPage(propertiesWizardPage);
    propertiesWizardPage.setPageComplete(false);
    xmlFileSelectPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    xmlFileSelectPage.setDescription(""String_Node_Str"");
    addPage(xmlFileSelectPage);
    xmlFileSelectPage.setPageComplete(true);
  }
 else {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    propertiesWizardPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    propertiesWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    addPage(propertiesWizardPage);
    xmlFileSelectPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    xmlFileSelectPage.setDescription(""String_Node_Str"");
    addPage(xmlFileSelectPage);
    xmlFileSelectPage.setPageComplete(true);
    if (!isRepositoryObjectEditable()) {
      creation=true;
    }
  }
}",0.9836930455635492
127981,"public static Map<String,Set<String>> getCustomVersionMap(DatabaseConnection connection){
  Map<String,Set<String>> map=new HashMap<String,Set<String>>();
  if (connection == null) {
    return map;
  }
  EMap<String,String> parameters=connection.getParameters();
  if (parameters.size() == 0) {
    return map;
  }
  ECustomVersionGroup[] values=ECustomVersionGroup.values();
  for (  ECustomVersionGroup group : values) {
    String groupName=group.getName();
    String jarString=parameters.get(groupName);
    if (jarString != null) {
      Set<String> jarSet=new HashSet<String>();
      String[] jarArray=jarString.split(JAR_SEPARATOR);
      for (      String jar : jarArray) {
        jarSet.add(jar);
      }
      map.put(groupName,jarSet);
    }
  }
  return map;
}","public static Map<String,Set<String>> getCustomVersionMap(DatabaseConnection connection){
  Map<String,Set<String>> map=new HashMap<String,Set<String>>();
  if (connection == null) {
    return map;
  }
  EMap<String,String> parameters=connection.getParameters();
  if (parameters.size() == 0) {
    return map;
  }
  ECustomVersionGroup[] values=ECustomVersionGroup.values();
  for (  ECustomVersionGroup group : values) {
    String groupName=group.getName();
    String jarString=parameters.get(groupName);
    if (jarString != null && !jarString.isEmpty()) {
      Set<String> jarSet=new HashSet<String>();
      String[] jarArray=jarString.split(JAR_SEPARATOR);
      for (      String jar : jarArray) {
        jarSet.add(jar);
      }
      map.put(groupName,jarSet);
    }
  }
  return map;
}",0.9847715736040608
127982,"public static PaletteRoot createPaletteRootWithAllComponents(){
  Set<IComponent> components=ComponentsFactoryProvider.getInstance().getComponents();
  List<String> families=new ArrayList<String>();
  Hashtable<String,PaletteDrawer> ht=new Hashtable<String,PaletteDrawer>();
  PaletteRoot palette=new PaletteRoot();
  for (  IComponent component : components) {
    if (component.getComponentType() == EComponentType.JOBLET) {
      continue;
    }
    String family=component.getOriginalFamilyName();
    families.add(family);
  }
  Collections.sort(families);
  for (  String family : families) {
    String[] strings=family.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
    for (    String string : strings) {
      PaletteDrawer componentsDrawer=ht.get(string);
      if (componentsDrawer == null) {
        componentsDrawer=createComponentDrawer(palette,ht,string,family);
      }
    }
  }
  for (  IComponent component : components) {
    if (component.getComponentType() == EComponentType.JOBLET) {
      continue;
    }
    String family=component.getOriginalFamilyName();
    String[] strings=family.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
    for (    String string : strings) {
      CombinedTemplateCreationEntry componentEntry=new CombinedTemplateCreationEntry(component.getName(),component.getName(),null,null,component.getIcon24(),component.getIcon32());
      PaletteDrawer componentsDrawer=ht.get(string);
      componentEntry.setParent(componentsDrawer);
      componentsDrawer.add(componentEntry);
    }
  }
  return palette;
}","public static PaletteRoot createPaletteRootWithAllComponents(){
  Set<IComponent> components=ComponentsFactoryProvider.getInstance().getComponents();
  List<String> families=new ArrayList<String>();
  Hashtable<String,PaletteDrawer> ht=new Hashtable<String,PaletteDrawer>();
  PaletteRoot palette=new PaletteRoot();
  for (  IComponent component : components) {
    if (component.isTechnical() || component.getComponentType() == EComponentType.JOBLET) {
      continue;
    }
    String family=component.getOriginalFamilyName();
    families.add(family);
  }
  Collections.sort(families);
  for (  String family : families) {
    String[] strings=family.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
    for (    String string : strings) {
      PaletteDrawer componentsDrawer=ht.get(string);
      if (componentsDrawer == null) {
        componentsDrawer=createComponentDrawer(palette,ht,string,family);
      }
    }
  }
  for (  IComponent component : components) {
    if (component.isTechnical() || component.getComponentType() == EComponentType.JOBLET) {
      continue;
    }
    String family=component.getOriginalFamilyName();
    String[] strings=family.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
    for (    String string : strings) {
      CombinedTemplateCreationEntry componentEntry=new CombinedTemplateCreationEntry(component.getName(),component.getName(),null,null,component.getIcon24(),component.getIcon32());
      PaletteDrawer componentsDrawer=ht.get(string);
      componentEntry.setParent(componentsDrawer);
      componentsDrawer.add(componentEntry);
    }
  }
  return palette;
}",0.9831460674157304
127983,"/** 
 * ggu Comment method ""updateSchema"". for repository wizard.
 */
public static boolean updateSingleSchema(ConnectionItem connItem,final MetadataTable newTable,final IMetadataTable oldMetadataTable,Map<String,String> oldTableMap){
  if (connItem == null) {
    return false;
  }
  Map<String,String> schemaRenamedMap=RepositoryUpdateManager.getSchemaRenamedMap(connItem,oldTableMap);
  boolean update=!schemaRenamedMap.isEmpty();
  if (!update) {
    if (newTable != null && oldMetadataTable != null && oldTableMap.containsKey(newTable.getId())) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IMetadataManagmentService.class)) {
        IMetadataManagmentService service=(IMetadataManagmentService)GlobalServiceRegister.getDefault().getService(IMetadataManagmentService.class);
        IMetadataTable newMetadataTable=service.convertMetadataTable(newTable);
        update=!oldMetadataTable.sameMetadataAs(newMetadataTable,IMetadataColumn.OPTIONS_NONE);
      }
    }
  }
  if (update) {
    return updateSchema(newTable,connItem,schemaRenamedMap,true,false);
  }
  return false;
}","/** 
 * ggu Comment method ""updateSchema"". for repository wizard.
 */
public static boolean updateSingleSchema(ConnectionItem connItem,final MetadataTable newTable,final IMetadataTable oldMetadataTable,Map<String,String> oldTableMap){
  if (connItem == null) {
    return false;
  }
  Map<String,String> schemaRenamedMap=RepositoryUpdateManager.getSchemaRenamedMap(connItem,oldTableMap);
  boolean update=!schemaRenamedMap.isEmpty();
  if (!update) {
    if (newTable != null && oldMetadataTable != null && oldTableMap.containsKey(newTable.getId())) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IMetadataManagmentService.class)) {
        IMetadataManagmentService service=(IMetadataManagmentService)GlobalServiceRegister.getDefault().getService(IMetadataManagmentService.class);
        IMetadataTable newMetadataTable=service.convertMetadataTable(newTable);
        update=!oldMetadataTable.sameMetadataAs(newMetadataTable,IMetadataColumn.OPTIONS_NONE);
        isAddColumn=isAddColumn(newMetadataTable,oldMetadataTable);
      }
    }
  }
  if (update) {
    return updateSchema(newTable,connItem,schemaRenamedMap,true,false);
  }
  return false;
}",0.9701492537313432
127984,"/** 
 * Initialize value, forceFocus first field.
 */
@Override protected void initialize(){
  if (getConnection().getEncoding() != null && !getConnection().getEncoding().equals(""String_Node_Str"")) {
    encodingCombo.setText(getConnection().getEncoding());
  }
 else {
    encodingCombo.select(0);
  }
  fieldSeparatorCombo.setText(getConnection().getFieldSeparatorType().getName());
  fieldSeparatorText.setText(getConnection().getFieldSeparatorValue());
  fieldSeparatorText.setEditable(false);
  rowSeparatorCombo.setText(getConnection().getRowSeparatorType().getLiteral());
  rowSeparatorText.setText(getConnection().getRowSeparatorValue());
  rowSeparatorText.setEditable(false);
  if (!isContextMode()) {
    fieldSeparatorManager();
    rowSeparatorManager();
  }
  boolean flag=false;
  flag=initRowsToSkip(rowsToSkipHeaderCheckboxCombo,getConnection().getHeaderValue());
  getConnection().setUseHeader(flag);
  flag=initRowsToSkip(rowsToSkipFooterCheckboxCombo,getConnection().getFooterValue());
  getConnection().setUseFooter(flag);
  flag=initRowsToSkip(rowsToSkipLimitCheckboxCombo,getConnection().getLimitValue());
  getConnection().setUseLimit(flag);
  emptyRowsToSkipCheckbox.setSelection(getConnection().isRemoveEmptyRow());
  firstRowIsCaptionCheckbox.setSelection(getConnection().isFirstLineCaption());
  String textEnclosure=getConnection().getTextEnclosure();
  String textEnclosureValue=ShadowProcessHelper.getValueFromArray(textEnclosure,TEXT_ENCLOSURE_DATA);
  if (textEnclosureValue == null) {
    textEnclosureCombo.select(0);
  }
 else {
    textEnclosureCombo.setText(textEnclosureValue);
  }
  String escapeChar=getConnection().getEscapeChar();
  String escapeCharValue=ShadowProcessHelper.getValueFromArray(escapeChar,ESCAPE_CHAR_DATA);
  if (escapeCharValue == null) {
    escapeCharCombo.select(0);
  }
 else {
    escapeCharCombo.setText(escapeCharValue);
  }
  splitwayRecordForJavaFID.setSelection(getConnection().isSplitRecord());
  if (Escape.DELIMITED.equals(getConnection().getEscapeType())) {
    csvRadio.setSelection(false);
    delimitedRadio.setSelection(true);
    textEnclosureCombo.setEnabled(false);
    escapeCharCombo.setEnabled(false);
    splitwayRecordForJavaFID.setEnabled(true);
  }
  if (Escape.CSV.equals(getConnection().getEscapeType())) {
    csvRadio.setSelection(true);
    delimitedRadio.setSelection(false);
    splitwayRecordForJavaFID.setEnabled(false);
  }
  String s=getConnection().getEscapeChar();
  if (!(s == null) && !s.equals(""String_Node_Str"") && !s.equals(EMPTY_VALUE)) {
    escapeCharCombo.setText(s);
  }
  s=getConnection().getTextEnclosure();
  if (!(s == null) && !s.equals(""String_Node_Str"") && !s.equals(EMPTY_VALUE)) {
    textEnclosureCombo.setText(s);
  }
  encodingCombo.clearSelection();
  fieldSeparatorCombo.clearSelection();
  rowSeparatorCombo.clearSelection();
  escapeCharCombo.clearSelection();
  textEnclosureCombo.clearSelection();
  emptyRowsToSkipCheckbox.setSelection(getConnection().isRemoveEmptyRow());
  checkFieldsValue();
  if (isContextMode()) {
    adaptFormToEditable();
  }
}","/** 
 * Initialize value, forceFocus first field.
 */
@Override protected void initialize(){
  if (getConnection().getEncoding() != null && !getConnection().getEncoding().equals(""String_Node_Str"")) {
    encodingCombo.setText(getConnection().getEncoding());
  }
 else {
    encodingCombo.select(0);
  }
  fieldSeparatorCombo.setText(getConnection().getFieldSeparatorType().getName());
  fieldSeparatorText.setText(getConnection().getFieldSeparatorValue());
  fieldSeparatorText.setEditable(false);
  rowSeparatorCombo.setText(getConnection().getRowSeparatorType().getLiteral());
  rowSeparatorText.setText(getConnection().getRowSeparatorValue());
  rowSeparatorText.setEditable(false);
  if (!isContextMode()) {
    fieldSeparatorManager();
    rowSeparatorManager();
  }
  boolean flag=false;
  getConnection().setUseHeader(flag);
  flag=initRowsToSkip(rowsToSkipFooterCheckboxCombo,getConnection().getFooterValue());
  getConnection().setUseFooter(flag);
  flag=initRowsToSkip(rowsToSkipLimitCheckboxCombo,getConnection().getLimitValue());
  getConnection().setUseLimit(flag);
  emptyRowsToSkipCheckbox.setSelection(getConnection().isRemoveEmptyRow());
  firstRowIsCaptionCheckbox.setSelection(false);
  String textEnclosure=getConnection().getTextEnclosure();
  String textEnclosureValue=ShadowProcessHelper.getValueFromArray(textEnclosure,TEXT_ENCLOSURE_DATA);
  if (textEnclosureValue == null) {
    textEnclosureCombo.select(0);
  }
 else {
    textEnclosureCombo.setText(textEnclosureValue);
  }
  String escapeChar=getConnection().getEscapeChar();
  String escapeCharValue=ShadowProcessHelper.getValueFromArray(escapeChar,ESCAPE_CHAR_DATA);
  if (escapeCharValue == null) {
    escapeCharCombo.select(0);
  }
 else {
    escapeCharCombo.setText(escapeCharValue);
  }
  splitwayRecordForJavaFID.setSelection(getConnection().isSplitRecord());
  if (Escape.DELIMITED.equals(getConnection().getEscapeType())) {
    csvRadio.setSelection(false);
    delimitedRadio.setSelection(true);
    textEnclosureCombo.setEnabled(false);
    escapeCharCombo.setEnabled(false);
    splitwayRecordForJavaFID.setEnabled(true);
  }
  if (Escape.CSV.equals(getConnection().getEscapeType())) {
    csvRadio.setSelection(true);
    delimitedRadio.setSelection(false);
    splitwayRecordForJavaFID.setEnabled(false);
  }
  String s=getConnection().getEscapeChar();
  if (!(s == null) && !s.equals(""String_Node_Str"") && !s.equals(EMPTY_VALUE)) {
    escapeCharCombo.setText(s);
  }
  s=getConnection().getTextEnclosure();
  if (!(s == null) && !s.equals(""String_Node_Str"") && !s.equals(EMPTY_VALUE)) {
    textEnclosureCombo.setText(s);
  }
  encodingCombo.clearSelection();
  fieldSeparatorCombo.clearSelection();
  rowSeparatorCombo.clearSelection();
  escapeCharCombo.clearSelection();
  textEnclosureCombo.clearSelection();
  emptyRowsToSkipCheckbox.setSelection(getConnection().isRemoveEmptyRow());
  checkFieldsValue();
  if (isContextMode()) {
    adaptFormToEditable();
  }
}",0.9788429752066116
127985,"@Override public ResultSet getTables(String catalog,String schema,String tableNamePattern,String[] types) throws SQLException {
  String sql;
  String and;
  if (schema != null) {
    sql=""String_Node_Str"" + schema + ""String_Node_Str"";
    and=""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"";
    and=""String_Node_Str"";
  }
  if (types != null) {
    for (    String type : types) {
      if (TABLE.equals(type)) {
        sql=sql + ""String_Node_Str"";
        break;
      }
    }
  }
  sql=addTypesToSql(sql,types,and);
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String name=rs.getString(""String_Node_Str"");
      String creator=rs.getString(""String_Node_Str"");
      String type=rs.getString(""String_Node_Str"");
      String[] r=new String[]{""String_Node_Str"",creator,name,getTypeNameFromDb2zosType(type),""String_Node_Str""};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  DB2ForZosResultSet tableResultSet=new DB2ForZosResultSet();
  tableResultSet.setMetadata(TABLE_META);
  tableResultSet.setData(list);
  return tableResultSet;
}","@Override public ResultSet getTables(String catalog,String schema,String tableNamePattern,String[] types) throws SQLException {
  String sql;
  String and;
  if (schema != null) {
    sql=""String_Node_Str"" + schema + ""String_Node_Str"";
    and=""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"";
    and=""String_Node_Str"";
  }
  sql=addTypesToSql(sql,types,and);
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String name=rs.getString(""String_Node_Str"");
      String creator=rs.getString(""String_Node_Str"");
      String type=rs.getString(""String_Node_Str"");
      String[] r=new String[]{""String_Node_Str"",creator,name,getTypeNameFromDb2zosType(type),""String_Node_Str""};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  DB2ForZosResultSet tableResultSet=new DB2ForZosResultSet();
  tableResultSet.setMetadata(TABLE_META);
  tableResultSet.setData(list);
  return tableResultSet;
}",0.331370239497448
127986,"/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else     if (EDatabaseConnTemplate.MYSQL.getDBDisplayName().equals(databaseType)) {
      if (dbVersionString != null) {
        return dbVersionString.toUpperCase();
      }
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (EDatabaseConnTemplate.ORACLE_OCI.getDBDisplayName().equals(databaseType) || EDatabaseConnTemplate.ORACLE_RAC.getDBDisplayName().equals(databaseType) || EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName().equals(databaseType)|| EDatabaseConnTemplate.ORACLESN.getDBDisplayName().equals(databaseType)) {
        if (dbVersionString != null) {
          driverValue=dbVersionString.toUpperCase();
        }
      }
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else       if (EDatabaseTypeName.VERTICA.getXmlName().equals(databaseType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersionString)) {
        return ""String_Node_Str"";
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      if (url != null) {
        String h2Prefix=""String_Node_Str"";
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          if (path.split(""String_Node_Str"").length > 2) {
            int startIndex=path.lastIndexOf(""String_Node_Str"") - 1;
            String filePath=path.substring(startIndex);
            h2Prefix+=path.substring(0,startIndex);
            path=filePath;
          }
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
        }
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.HIVE_SERVER_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CUSTOM_JARS);
  }
  if (value.equals(EParameterNameForComponent.PARA_NAME_FS_DEFAULT_NAME.getName())) {
    String nameNodeURL=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    if (isContextMode(connection,nameNodeURL)) {
      return nameNodeURL;
    }
 else {
      return TalendQuoteUtils.addQuotes(nameNodeURL);
    }
  }
  if (value.equals(EParameterNameForComponent.PARA_NAME_MAPRED_JT.getName())) {
    String jobTrackerURL=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    if (isContextMode(connection,jobTrackerURL)) {
      return jobTrackerURL;
    }
 else {
      return TalendQuoteUtils.addQuotes(jobTrackerURL);
    }
  }
  return null;
}","/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else     if (EDatabaseConnTemplate.MYSQL.getDBDisplayName().equals(databaseType)) {
      if (dbVersionString != null) {
        return dbVersionString.toUpperCase();
      }
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (EDatabaseConnTemplate.ORACLE_OCI.getDBDisplayName().equals(databaseType) || EDatabaseConnTemplate.ORACLE_RAC.getDBDisplayName().equals(databaseType) || EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName().equals(databaseType)|| EDatabaseConnTemplate.ORACLESN.getDBDisplayName().equals(databaseType)) {
        if (dbVersionString != null) {
          driverValue=dbVersionString.toUpperCase();
        }
      }
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else       if (EDatabaseTypeName.VERTICA.getXmlName().equals(databaseType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersionString)) {
        return ""String_Node_Str"";
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      if (url != null) {
        String h2Prefix=""String_Node_Str"";
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          if (path.split(""String_Node_Str"").length > 2) {
            int startIndex=path.lastIndexOf(""String_Node_Str"") - 1;
            String filePath=path.substring(startIndex);
            h2Prefix+=path.substring(0,startIndex);
            path=filePath;
          }
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
        }
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((databaseType).equals(EDatabaseTypeName.HBASE.getDisplayName())) {
      return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
    }
 else {
      return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.HIVE_SERVER_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CUSTOM_JARS);
  }
  if (value.equals(EParameterNameForComponent.PARA_NAME_FS_DEFAULT_NAME.getName())) {
    String nameNodeURL=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    if (nameNodeURL == null && (databaseType).equals(EDatabaseTypeName.HBASE.getDisplayName())) {
      return nameNodeURL;
    }
 else     if (isContextMode(connection,nameNodeURL)) {
      return nameNodeURL;
    }
 else {
      return TalendQuoteUtils.addQuotes(nameNodeURL);
    }
  }
  if (value.equals(EParameterNameForComponent.PARA_NAME_MAPRED_JT.getName())) {
    String jobTrackerURL=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    if (isContextMode(connection,jobTrackerURL)) {
      return jobTrackerURL;
    }
 else {
      return TalendQuoteUtils.addQuotes(jobTrackerURL);
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return false;
  }
  if (value.equals(""String_Node_Str"")) {
    return true;
  }
  if (value.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    String useKrbValue=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_KRB);
    if (useKrbValue == null) {
      return useKrbValue;
    }
 else {
      return Boolean.parseBoolean(useKrbValue);
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String mapredJobTracker=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    if (mapredJobTracker == null) {
      return mapredJobTracker;
    }
 else {
      return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(mapredJobTracker));
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String nameNodePrincipal=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_PRINCIPAL);
    if (nameNodePrincipal == null) {
      return nameNodePrincipal;
    }
 else {
      return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(nameNodePrincipal));
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String jobTrackerPrincipal=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_PRINCIPAL);
    if (jobTrackerPrincipal == null) {
      return jobTrackerPrincipal;
    }
 else {
      return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(jobTrackerPrincipal));
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  return null;
}",0.8926044563342602
127987,"@Override protected void configureShell(Shell newShell){
  super.configureShell(newShell);
  newShell.setText(Messages.getString(""String_Node_Str""));
  newShell.setSize(500,550);
  setHelpAvailable(false);
}","@Override protected void configureShell(Shell newShell){
  super.configureShell(newShell);
  newShell.setText(Messages.getString(""String_Node_Str""));
  newShell.setSize(550,600);
  setHelpAvailable(false);
}",0.9855072463768116
127988,"private void doExportLibs(){
  FileDialog dialog=new FileDialog(getParentShell(),SWT.SAVE);
  dialog.setFilterExtensions(HadoopCustomLibrariesUtil.FILE__MASK);
  dialog.setText(""String_Node_Str"");
  final String selectedArchive=dialog.open();
  if (selectedArchive != null) {
    IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        customLibUtil.exportLibZipFile(selectedArchive,libMap);
      }
    }
;
    try {
      new ProgressMonitorDialog(getShell()).run(true,true,iRunnableWithProgress);
    }
 catch (    InvocationTargetException e) {
      ExceptionHandler.process(e);
    }
catch (    InterruptedException e) {
      ExceptionHandler.process(e);
    }
  }
}","private void doExportLibs(){
  FileDialog dialog=new FileDialog(getParentShell(),SWT.SAVE);
  dialog.setFilterExtensions(HadoopCustomLibrariesUtil.FILE__MASK);
  dialog.setText(""String_Node_Str"");
  final String selectedArchive=dialog.open();
  if (selectedArchive != null) {
    IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
          @Override public void run(){
            customLibUtil.exportLibZipFile(selectedArchive,libMap);
          }
        }
);
      }
    }
;
    try {
      new ProgressMonitorDialog(getShell()).run(true,true,iRunnableWithProgress);
    }
 catch (    InvocationTargetException e) {
      ExceptionHandler.process(e);
    }
catch (    InterruptedException e) {
      ExceptionHandler.process(e);
    }
  }
}",0.9212598425196852
127989,"@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  customLibUtil.exportLibZipFile(selectedArchive,libMap);
}","@Override public void run(){
  viewer.refresh();
}",0.3394495412844037
127990,"@Override protected Control createDialogArea(Composite parent){
  GridLayout layout=new GridLayout();
  parent.setLayout(layout);
  tabFolder=new CTabFolder(parent,SWT.BORDER | SWT.FLAT);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  tabFolder.setLayout(new GridLayout());
  Composite tableComposite=createTable(tabFolder);
  createTabItems(tableComposite);
  createBtns(parent);
  addListener();
  init();
  return parent;
}","@Override protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  Composite comp=new Composite(composite,SWT.NONE);
  comp.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout layout=new GridLayout();
  layout.marginHeight=10;
  layout.marginWidth=10;
  comp.setLayout(layout);
  tabFolder=new CTabFolder(comp,SWT.BORDER | SWT.FLAT);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  tabFolder.setLayout(new GridLayout());
  Composite tableComposite=createTable(tabFolder);
  createTabItems(tableComposite);
  createBtns(comp);
  addListener();
  init();
  return parent;
}",0.6243194192377496
127991,"private void doImportLibs(){
  Map<ECustomVersionGroup,String> groupsAndDispaly=new HashMap<ECustomVersionGroup,String>();
  CTabItem[] items=tabFolder.getItems();
  for (  CTabItem item : items) {
    ECustomVersionGroup customVersionGroup=getCustomVersionGroup(item);
    if (customVersionGroup != null) {
      groupsAndDispaly.put(customVersionGroup,item.getText());
    }
  }
  HadoopVersionDialog versionDialog=new HadoopVersionDialog(getShell(),groupsAndDispaly,customLibUtil);
  if (versionDialog.open() == Window.OK) {
    Map<ECustomVersionGroup,Set<LibraryFile>> importLibLibraries=versionDialog.getImportLibLibraries();
    for (    ECustomVersionGroup group : importLibLibraries.keySet()) {
      Set<LibraryFile> set=libMap.get(group.getName());
      if (set != null) {
        set.clear();
        set.addAll(importLibLibraries.get(group));
      }
    }
    viewer.refresh();
  }
}","private void doImportLibs(){
  Map<ECustomVersionGroup,String> groupsAndDispaly=new HashMap<ECustomVersionGroup,String>();
  CTabItem[] items=tabFolder.getItems();
  for (  CTabItem item : items) {
    ECustomVersionGroup customVersionGroup=getCustomVersionGroup(item);
    if (customVersionGroup != null) {
      groupsAndDispaly.put(customVersionGroup,item.getText());
    }
  }
  final HadoopVersionDialog versionDialog=new HadoopVersionDialog(getShell(),groupsAndDispaly,customLibUtil);
  if (versionDialog.open() == Window.OK) {
    final IRunnableWithProgress runnableWithProgress=new IRunnableWithProgress(){
      @Override public void run(      final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        try {
          PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
            @Override public void run(){
              Map<ECustomVersionGroup,Set<LibraryFile>> importLibLibraries=versionDialog.getImportLibLibraries();
              if (importLibLibraries == null) {
                return;
              }
              for (              ECustomVersionGroup group : importLibLibraries.keySet()) {
                Set<LibraryFile> set=libMap.get(group.getName());
                if (set != null) {
                  set.clear();
                  set.addAll(importLibLibraries.get(group));
                }
              }
            }
          }
);
          PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
            @Override public void run(){
              viewer.refresh();
            }
          }
);
        }
  finally {
          monitor.done();
        }
      }
    }
;
    ProgressMonitorDialog dialog=new ProgressMonitorDialog(getShell());
    try {
      dialog.run(true,true,runnableWithProgress);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
}",0.6223459798120432
127992,"@Override public void widgetSelected(SelectionEvent e){
  enableExistGroup(false);
  enableZipGroupe(true);
}","@Override public void widgetSelected(SelectionEvent e){
  enableExistGroup(false);
  enableZipGroupe(true);
  updateOkState();
}",0.919831223628692
127993,"@Override protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  createVersionFields(composite);
  addListener();
  init();
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  Composite comp=new Composite(composite,SWT.NONE);
  comp.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout layout=new GridLayout();
  layout.marginHeight=10;
  layout.marginWidth=10;
  comp.setLayout(layout);
  createVersionFields(comp);
  addListener();
  init();
  updateOkState();
  return parent;
}",0.4817073170731707
127994,"@Override public void modifyText(ModifyEvent e){
  zipLocation=zipLocationText.getText();
}","@Override public void modifyText(ModifyEvent e){
  zipLocation=zipLocationText.getText();
  updateOkState();
}",0.9054726368159204
127995,"@Override protected void configureShell(Shell newShell){
  super.configureShell(newShell);
  newShell.setText(Messages.getString(""String_Node_Str""));
  newShell.setSize(400,400);
  newShell.addListener(SWT.Resize,new Listener(){
    @Override public void handleEvent(    Event event){
      layoutTitle(true);
    }
  }
);
}","@Override protected void configureShell(Shell newShell){
  super.configureShell(newShell);
  newShell.setText(Messages.getString(""String_Node_Str""));
  newShell.setSize(500,450);
  setHelpAvailable(false);
}",0.6704331450094162
127996,"private void createVersionFields(Composite parent){
  GridData layoutData=new GridData(GridData.FILL_HORIZONTAL);
  importFromVersion=new Button(parent,SWT.RADIO);
  importFromVersion.setText(Messages.getString(""String_Node_Str""));
  importFromVersion.setLayoutData(layoutData);
  Composite existVersionGroup=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  layout.marginLeft=10;
  existVersionGroup.setLayout(layout);
  distributionCombo=new LabelledCombo(existVersionGroup,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),new String[0],2,true);
  distributionCombo.setVisibleItemCount(VISIBLE_DISTRIBUTION_COUNT);
  versionCombo=new LabelledCombo(existVersionGroup,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),new String[0],2,true);
  versionCombo.setVisibleItemCount(VISIBLE_VERSION_COUNT);
  Composite checkParent=new Composite(existVersionGroup,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.horizontalSpan=3;
  checkParent.setLayoutData(layoutData);
  GridLayout layout2=new GridLayout(groupsAndDispaly.size(),false);
  checkParent.setLayout(layout2);
  layout2.marginWidth=0;
  existVersionCheckBoxList=new ArrayList<Button>();
  for (  ECustomVersionGroup group : groupsAndDispaly.keySet()) {
    final Button button=new Button(checkParent,SWT.CHECK);
    button.setData(group);
    button.setText(groupsAndDispaly.get(group));
    button.setSelection(true);
    existVersionCheckBoxList.add(button);
    existVersionSelectionMap.put(group,true);
    button.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        existVersionSelectionMap.put((ECustomVersionGroup)button.getData(),button.getSelection());
      }
    }
);
  }
  importFromZipBtn=new Button(parent,SWT.RADIO);
  importFromZipBtn.setText(Messages.getString(""String_Node_Str""));
  layoutData=new GridData(GridData.FILL);
  importFromZipBtn.setLayoutData(layoutData);
  Composite zipGroup=new Composite(parent,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  zipGroup.setLayoutData(layoutData);
  layout=new GridLayout();
  layout.numColumns=3;
  layout.marginLeft=10;
  zipGroup.setLayout(layout);
  Label label=new Label(zipGroup,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  zipLocationText=new Text(zipGroup,SWT.BORDER);
  zipLocationText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  browseButton=new Button(zipGroup,SWT.PUSH);
  browseButton.setText(Messages.getString(""String_Node_Str""));
  checkParent=new Composite(zipGroup,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.horizontalSpan=3;
  checkParent.setLayoutData(layoutData);
  layout2=new GridLayout(groupsAndDispaly.size(),false);
  checkParent.setLayout(layout2);
  layout2.marginWidth=0;
  fromZipCheckBoxList=new ArrayList<Button>();
  for (  ECustomVersionGroup group : groupsAndDispaly.keySet()) {
    final Button button=new Button(checkParent,SWT.CHECK);
    button.setData(group);
    button.setText(groupsAndDispaly.get(group));
    button.setSelection(true);
    fromZipCheckBoxList.add(button);
    fromZipSelectionMap.put(group,true);
    button.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        fromZipSelectionMap.put((ECustomVersionGroup)button.getData(),button.getSelection());
      }
    }
);
  }
  importFromVersion.setSelection(true);
  enableZipGroupe(false);
}","private void createVersionFields(Composite parent){
  GridData layoutData=new GridData(GridData.FILL_HORIZONTAL);
  importFromVersion=new Button(parent,SWT.RADIO);
  importFromVersion.setText(Messages.getString(""String_Node_Str""));
  importFromVersion.setLayoutData(layoutData);
  Composite existVersionGroup=new Composite(parent,SWT.NONE);
  GridLayout existVersionLayout=new GridLayout();
  existVersionLayout.numColumns=3;
  existVersionGroup.setLayout(existVersionLayout);
  existVersionGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  distributionCombo=new LabelledCombo(existVersionGroup,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),new String[0],2,true);
  distributionCombo.setVisibleItemCount(VISIBLE_DISTRIBUTION_COUNT);
  versionCombo=new LabelledCombo(existVersionGroup,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),new String[0],2,true);
  versionCombo.setVisibleItemCount(VISIBLE_VERSION_COUNT);
  Composite checkParent=new Composite(existVersionGroup,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.horizontalSpan=3;
  checkParent.setLayoutData(layoutData);
  GridLayout layout2=new GridLayout(groupsAndDispaly.size(),false);
  checkParent.setLayout(layout2);
  layout2.marginWidth=0;
  existVersionCheckBoxList=new ArrayList<Button>();
  for (  ECustomVersionGroup group : groupsAndDispaly.keySet()) {
    final Button button=new Button(checkParent,SWT.CHECK);
    button.setData(group);
    button.setText(groupsAndDispaly.get(group));
    button.setSelection(true);
    existVersionCheckBoxList.add(button);
    existVersionSelectionMap.put(group,true);
    button.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        existVersionSelectionMap.put((ECustomVersionGroup)button.getData(),button.getSelection());
        updateOkState();
      }
    }
);
  }
  importFromZipBtn=new Button(parent,SWT.RADIO);
  importFromZipBtn.setText(Messages.getString(""String_Node_Str""));
  layoutData=new GridData(GridData.FILL);
  importFromZipBtn.setLayoutData(layoutData);
  Composite zipGroup=new Composite(parent,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  zipGroup.setLayoutData(layoutData);
  GridLayout zipGroupLayout=new GridLayout();
  zipGroupLayout.numColumns=3;
  zipGroup.setLayout(zipGroupLayout);
  Label label=new Label(zipGroup,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  zipLocationText=new Text(zipGroup,SWT.BORDER);
  zipLocationText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  browseButton=new Button(zipGroup,SWT.PUSH);
  browseButton.setText(Messages.getString(""String_Node_Str""));
  checkParent=new Composite(zipGroup,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.horizontalSpan=3;
  checkParent.setLayoutData(layoutData);
  layout2=new GridLayout(groupsAndDispaly.size(),false);
  checkParent.setLayout(layout2);
  layout2.marginWidth=0;
  fromZipCheckBoxList=new ArrayList<Button>();
  for (  ECustomVersionGroup group : groupsAndDispaly.keySet()) {
    final Button button=new Button(checkParent,SWT.CHECK);
    button.setData(group);
    button.setText(groupsAndDispaly.get(group));
    button.setSelection(true);
    fromZipCheckBoxList.add(button);
    fromZipSelectionMap.put(group,true);
    button.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        fromZipSelectionMap.put((ECustomVersionGroup)button.getData(),button.getSelection());
        updateOkState();
      }
    }
);
  }
  importFromVersion.setSelection(true);
  enableZipGroupe(false);
}",0.9634816035145524
127997,"private void addListener(){
  distributionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      String newDistributionDisplayName=distributionCombo.getText();
      EHadoopDistributions newDistribution=EHadoopDistributions.getDistributionByDisplayName(newDistributionDisplayName);
      if (newDistribution != null) {
        distribution=newDistribution.getName();
        updateVersionPart();
      }
    }
  }
);
  versionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      String newVersionDisplayName=versionCombo.getText();
      EHadoopVersion4Drivers newVersion4Drivers=EHadoopVersion4Drivers.indexOfByVersionDisplay(newVersionDisplayName);
      if (newVersion4Drivers != null) {
        version=newVersion4Drivers.getVersionValue();
      }
    }
  }
);
  browseButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(getParentShell());
      dialog.setFilterExtensions(HadoopCustomLibrariesUtil.FILE__MASK);
      String path=dialog.open();
      if (path != null) {
        zipLocationText.setText(path);
      }
    }
  }
);
  importFromVersion.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      enableExistGroup(true);
      enableZipGroupe(false);
    }
  }
);
  importFromZipBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      enableExistGroup(false);
      enableZipGroupe(true);
    }
  }
);
  zipLocationText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      zipLocation=zipLocationText.getText();
    }
  }
);
}","private void addListener(){
  distributionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      String newDistributionDisplayName=distributionCombo.getText();
      EHadoopDistributions newDistribution=EHadoopDistributions.getDistributionByDisplayName(newDistributionDisplayName);
      if (newDistribution != null) {
        distribution=newDistribution.getName();
        updateVersionPart();
      }
    }
  }
);
  versionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      String newVersionDisplayName=versionCombo.getText();
      EHadoopVersion4Drivers newVersion4Drivers=EHadoopVersion4Drivers.indexOfByVersionDisplay(newVersionDisplayName);
      if (newVersion4Drivers != null) {
        version=newVersion4Drivers.getVersionValue();
      }
    }
  }
);
  browseButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(getParentShell());
      dialog.setFilterExtensions(HadoopCustomLibrariesUtil.FILE__MASK);
      String path=dialog.open();
      if (path != null) {
        zipLocationText.setText(path);
      }
    }
  }
);
  importFromVersion.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      enableExistGroup(true);
      enableZipGroupe(false);
      updateOkState();
    }
  }
);
  importFromZipBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      enableExistGroup(false);
      enableZipGroupe(true);
      updateOkState();
    }
  }
);
  zipLocationText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      zipLocation=zipLocationText.getText();
      updateOkState();
    }
  }
);
}",0.9815754339118824
127998,"/** 
 * DOC xqliu Comment method ""addTypesToSql"".
 * @param sql
 * @param types
 * @param and
 * @return
 */
private String addTypesToSql(String sql,String[] types,String and){
  String result=sql;
  if (types != null && types.length > 0) {
    String typeClause=""String_Node_Str"";
    int len=types.length;
    boolean isTable=false;
    for (int i=0; i < len; ++i) {
      String comma=""String_Node_Str"";
      if (i > 0) {
        comma=""String_Node_Str"";
      }
      typeClause=typeClause + comma + ""String_Node_Str""+ getDb2zosTypeName(types[i])+ ""String_Node_Str"";
      if (TABLE.equals(types[i])) {
        isTable=true;
      }
      if (TABLE.equals(types[i])) {
        isTable=true;
      }
    }
    typeClause=typeClause + ""String_Node_Str"";
    result=sql + and + typeClause;
    if (isTable) {
      result=result + ""String_Node_Str"";
    }
  }
  return result;
}","/** 
 * DOC xqliu Comment method ""addTypesToSql"".
 * @param sql
 * @param types
 * @param and
 * @return
 */
private String addTypesToSql(String sql,String[] types,String and){
  String result=sql;
  boolean checkContainTable=checkContainTable(types);
  String typeClause=""String_Node_Str"";
  if (checkContainTable && types.length > 1) {
    typeClause+=""String_Node_Str"";
  }
  if (types != null && types.length > 0) {
    typeClause+=""String_Node_Str"";
    int len=types.length;
    String comma=""String_Node_Str"";
    for (int i=0; i < len; ++i) {
      if (TABLE.equals(types[i])) {
        continue;
      }
      typeClause=typeClause + comma + ""String_Node_Str""+ getDb2zosTypeName(types[i])+ ""String_Node_Str"";
      comma=""String_Node_Str"";
    }
    if (checkContainTable && types.length == 1) {
      typeClause=typeClause + ""String_Node_Str"" + getDb2zosTypeName(types[0])+ ""String_Node_Str""+ ""String_Node_Str"";
    }
 else {
      typeClause=typeClause + ""String_Node_Str"";
    }
    result=sql + and + typeClause;
    if (checkContainTable && types.length > 1) {
      result=result + ""String_Node_Str"";
    }
  }
  return result;
}",0.3922924901185771
127999,"private void collectContents(List<String> filteredContents,TreeItem[] items,INavigatorContentService navigatorContentService){
  if (items != null) {
    for (    TreeItem item : items) {
      Object data=item.getData();
      if (!item.getChecked()) {
        Set contentExtensions=navigatorContentService.findRootContentExtensions(data);
        for (Iterator itr=contentExtensions.iterator(); itr.hasNext(); ) {
          filteredContents.add(((NavigatorContentExtension)itr.next()).getId());
        }
      }
      collectContents(filteredContents,item.getItems(),navigatorContentService);
    }
  }
}","private void collectContents(List<String> filteredContents,TreeItem[] items,INavigatorContentService navigatorContentService){
  if (items != null) {
    for (    TreeItem item : items) {
      Object data=item.getData();
      if (!item.getChecked()) {
        boolean isStandardJobsNode=false;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IMRProcessService.class)) {
          IMRProcessService service=(IMRProcessService)GlobalServiceRegister.getDefault().getService(IMRProcessService.class);
          isStandardJobsNode=service.collectStandardProcessNode(filteredContents,data);
        }
        if (!isStandardJobsNode) {
          Set contentExtensions=navigatorContentService.findRootContentExtensions(data);
          for (Iterator itr=contentExtensions.iterator(); itr.hasNext(); ) {
            filteredContents.add(((NavigatorContentExtension)itr.next()).getId());
          }
        }
      }
      collectContents(filteredContents,item.getItems(),navigatorContentService);
    }
  }
}",0.7452424800491099
128000,"private void restoreContents(List<String> filteredContents,TreeItem[] items,INavigatorContentService navigatorContentService){
  if (items != null) {
    for (    TreeItem item : items) {
      Object data=item.getData();
      boolean found=false;
      Set contentExtensions=navigatorContentService.findRootContentExtensions(data);
      for (Iterator itr=contentExtensions.iterator(); itr.hasNext(); ) {
        if (filteredContents.contains(((NavigatorContentExtension)itr.next()).getId())) {
          found=true;
          break;
        }
      }
      item.setChecked(!found);
      restoreContents(filteredContents,item.getItems(),navigatorContentService);
    }
  }
}","private void restoreContents(List<String> filteredContents,TreeItem[] items,INavigatorContentService navigatorContentService){
  if (items != null) {
    for (    TreeItem item : items) {
      Object data=item.getData();
      boolean found=false;
      Set contentExtensions=navigatorContentService.findRootContentExtensions(data);
      for (Iterator itr=contentExtensions.iterator(); itr.hasNext(); ) {
        if (filteredContents.contains(((NavigatorContentExtension)itr.next()).getId())) {
          found=true;
          break;
        }
      }
      if (!found && filteredContents.contains(data.getClass().getName())) {
        found=true;
      }
      item.setChecked(!found);
      restoreContents(filteredContents,item.getItems(),navigatorContentService);
    }
  }
}",0.9286694101508915
