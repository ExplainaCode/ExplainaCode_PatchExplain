record_number,buggy_code,fixed_code,code_similarity
159001,"/** 
 * @param deck
 * @return - True if deck is valid
 */
@Override public boolean validate(Deck deck){
  boolean valid=true;
  if (deck.getCards().size() != 49) {
    invalid.put(""String_Node_Str"",""String_Node_Str"" + deck.getCards().size() + ""String_Node_Str"");
    valid=false;
  }
  List<String> basicLandNames=new ArrayList<>(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Map<String,Integer> counts=new HashMap<>();
  counts.put(deck.getName(),1);
  countCards(counts,deck.getCards());
  countCards(counts,deck.getSideboard());
  for (  Map.Entry<String,Integer> entry : counts.entrySet()) {
    if (entry.getValue() > 1) {
      if (!basicLandNames.contains(entry.getKey()) && !entry.getKey().equals(""String_Node_Str"") && !entry.getKey().equals(""String_Node_Str"")) {
        invalid.put(entry.getKey(),""String_Node_Str"" + entry.getValue());
        valid=false;
      }
    }
  }
  for (  String bannedCard : banned) {
    if (counts.containsKey(bannedCard)) {
      invalid.put(bannedCard,""String_Node_Str"");
      valid=false;
    }
  }
  if (deck.getSideboard().size() <= 10) {
    Card commander=GameTinyLeadersImpl.getCommanderCard(deck.getName(),null);
    if (commander == null || commander.getManaCost().convertedManaCost() > 3) {
      if (commander == null) {
        invalid.put(""String_Node_Str"",""String_Node_Str"");
      }
      if (commander != null && commander.getManaCost().convertedManaCost() > 3) {
        invalid.put(""String_Node_Str"",""String_Node_Str"");
      }
      return false;
    }
    if ((commander.getCardType().contains(CardType.CREATURE) && commander.getSupertype().contains(""String_Node_Str"")) || (commander.getCardType().contains(CardType.PLANESWALKER) && commander.getAbilities().contains(CanBeYourCommanderAbility.getInstance()))) {
      if (!bannedCommander.contains(commander.getName())) {
        FilterMana color=CardUtil.getColorIdentity(commander);
        for (        Card card : deck.getCards()) {
          if (!cardHasValideColor(color,card)) {
            invalid.put(card.getName(),""String_Node_Str"" + commander.getName() + ""String_Node_Str"");
            valid=false;
          }
          if (card.getManaCost().convertedManaCost() > 3) {
            invalid.put(card.getName(),""String_Node_Str"" + card.getManaCost().convertedManaCost() + ""String_Node_Str"");
            valid=false;
          }
        }
      }
 else {
        invalid.put(""String_Node_Str"",""String_Node_Str"" + commander.getName() + ""String_Node_Str"");
        valid=false;
      }
    }
 else {
      invalid.put(""String_Node_Str"",""String_Node_Str"" + commander.getName() + ""String_Node_Str"");
      valid=false;
    }
  }
 else {
    invalid.put(""String_Node_Str"",""String_Node_Str"");
    valid=false;
  }
  return valid;
}","/** 
 * @param deck
 * @return - True if deck is valid
 */
@Override public boolean validate(Deck deck){
  boolean valid=true;
  if (deck.getCards().size() != 49) {
    invalid.put(""String_Node_Str"",""String_Node_Str"" + deck.getCards().size() + ""String_Node_Str"");
    valid=false;
  }
  List<String> basicLandNames=new ArrayList<>(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Map<String,Integer> counts=new HashMap<>();
  counts.put(deck.getName(),1);
  countCards(counts,deck.getCards());
  countCards(counts,deck.getSideboard());
  for (  Map.Entry<String,Integer> entry : counts.entrySet()) {
    if (entry.getValue() > 1) {
      if (!basicLandNames.contains(entry.getKey()) && !entry.getKey().equals(""String_Node_Str"") && !entry.getKey().equals(""String_Node_Str"")) {
        invalid.put(entry.getKey(),""String_Node_Str"" + entry.getValue());
        valid=false;
      }
    }
  }
  for (  String bannedCard : banned) {
    if (counts.containsKey(bannedCard)) {
      invalid.put(bannedCard,""String_Node_Str"");
      valid=false;
    }
  }
  if (deck.getSideboard().size() <= 10) {
    Card commander=GameTinyLeadersImpl.getCommanderCard(deck.getName(),null);
    if (commander == null || commander.getManaCost().convertedManaCost() > 3) {
      if (commander == null) {
        if (deck.getName() == null) {
          invalid.put(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
        }
 else {
          invalid.put(""String_Node_Str"",""String_Node_Str"" + deck.getName() + ""String_Node_Str""+ ""String_Node_Str"");
        }
      }
      if (commander != null && commander.getManaCost().convertedManaCost() > 3) {
        invalid.put(""String_Node_Str"",""String_Node_Str"");
      }
      return false;
    }
    if ((commander.getCardType().contains(CardType.CREATURE) && commander.getSupertype().contains(""String_Node_Str"")) || (commander.getCardType().contains(CardType.PLANESWALKER) && commander.getAbilities().contains(CanBeYourCommanderAbility.getInstance()))) {
      if (!bannedCommander.contains(commander.getName())) {
        FilterMana color=CardUtil.getColorIdentity(commander);
        for (        Card card : deck.getCards()) {
          if (!cardHasValideColor(color,card)) {
            invalid.put(card.getName(),""String_Node_Str"" + commander.getName() + ""String_Node_Str"");
            valid=false;
          }
          if (card.getManaCost().convertedManaCost() > 3) {
            invalid.put(card.getName(),""String_Node_Str"" + card.getManaCost().convertedManaCost() + ""String_Node_Str"");
            valid=false;
          }
        }
      }
 else {
        invalid.put(""String_Node_Str"",""String_Node_Str"" + commander.getName() + ""String_Node_Str"");
        valid=false;
      }
    }
 else {
      invalid.put(""String_Node_Str"",""String_Node_Str"" + commander.getName() + ""String_Node_Str"");
      valid=false;
    }
  }
 else {
    invalid.put(""String_Node_Str"",""String_Node_Str"");
    valid=false;
  }
  return valid;
}",0.9660678642714572
159002,"/** 
 * Name of Tiny Leader comes from the deck name (it's not in the sideboard) Additionally, it was taken into account that WOTC had missed a few color combinations when making Legendary Creatures at 3 CMC. There are three Commanders available to use  for the missing color identities:  Mardu [WBR 2/2],  Sultai [UBG 2/2], and  Jeskai [WUR 2/2]. 
 * @param commanderName
 * @param ownerId
 * @return 
 */
public static Card getCommanderCard(String commanderName,UUID ownerId){
  Card commander=null;
switch (commanderName) {
case ""String_Node_Str"":
    commander=new DefaultCommander(ownerId,commanderName,""String_Node_Str"");
  break;
default :
CardInfo cardInfo=CardRepository.instance.findCard(commanderName);
if (cardInfo != null) {
commander=cardInfo.getCard();
}
}
return commander;
}","/** 
 * Name of Tiny Leader comes from the deck name (it's not in the sideboard) Additionally, it was taken into account that WOTC had missed a few color combinations when making Legendary Creatures at 3 CMC. There are three Commanders available to use  for the missing color identities:  Mardu [WBR 2/2],  Sultai [UBG 2/2], and  Jeskai [WUR 2/2]. 
 * @param commanderName
 * @param ownerId
 * @return 
 */
public static Card getCommanderCard(String commanderName,UUID ownerId){
  Card commander=null;
  if (commanderName != null) {
switch (commanderName) {
case ""String_Node_Str"":
      commander=new DefaultCommander(ownerId,commanderName,""String_Node_Str"");
    break;
default :
  CardInfo cardInfo=CardRepository.instance.findCard(commanderName);
if (cardInfo != null) {
  commander=cardInfo.getCard();
}
}
}
return commander;
}",0.9747381392483055
159003,"@Override public boolean apply(Game game,Ability source){
  Permanent p=game.getPermanent(source.getFirstTarget());
  if (p != null) {
    p.destroy(source.getSourceId(),game,false);
  }
  Permanent s=game.getPermanent(source.getSourceId());
  if (s != null) {
    s.destroy(source.getSourceId(),game,false);
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Permanent p=game.getPermanent(getTargetPointer().getFirst(game,source));
  if (p != null) {
    p.destroy(source.getSourceId(),game,false);
  }
  Permanent s=game.getPermanent(source.getSourceId());
  if (s != null) {
    s.destroy(source.getSourceId(),game,false);
  }
  return true;
}",0.9362962962962964
159004,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    if (putOnCard) {
      Card card=game.getCard(source.getSourceId());
      if (card != null) {
        if (counter != null) {
          Counter newCounter=counter.copy();
          int countersToAdd=amount.calculate(game,source,this);
          if (countersToAdd > 0 && newCounter.getCount() == 1) {
            countersToAdd--;
          }
          newCounter.add(countersToAdd);
          card.addCounters(newCounter,game);
          if (informPlayers) {
            Player player=game.getPlayer(source.getControllerId());
            if (player != null) {
              game.informPlayers(new StringBuilder(player.getName()).append(""String_Node_Str"").append(newCounter.getCount()).append(""String_Node_Str"").append(newCounter.getName().toLowerCase()).append(""String_Node_Str"").append(card.getLogName()).toString());
            }
          }
        }
        return true;
      }
    }
 else {
      Permanent permanent=game.getPermanent(source.getSourceId());
      if (permanent != null) {
        if (counter != null) {
          Counter newCounter=counter.copy();
          int countersToAdd=amount.calculate(game,source,this);
          if (countersToAdd > 0) {
            if (countersToAdd > 0 && newCounter.getCount() == 1) {
              countersToAdd--;
            }
            newCounter.add(countersToAdd);
            int before=permanent.getCounters().getCount(newCounter.getName());
            permanent.addCounters(newCounter,game);
            int amountAdded=permanent.getCounters().getCount(newCounter.getName()) - before;
            if (informPlayers) {
              Player player=game.getPlayer(source.getControllerId());
              if (player != null) {
                game.informPlayers(player.getName() + ""String_Node_Str"" + amountAdded+ ""String_Node_Str""+ newCounter.getName().toLowerCase()+ ""String_Node_Str""+ permanent.getLogName());
              }
            }
          }
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    if (putOnCard) {
      Card card=game.getCard(source.getSourceId());
      if (card != null) {
        if (counter != null) {
          Counter newCounter=counter.copy();
          int countersToAdd=amount.calculate(game,source,this);
          if (countersToAdd > 0 && newCounter.getCount() == 1) {
            countersToAdd--;
          }
          newCounter.add(countersToAdd);
          card.addCounters(newCounter,game);
          if (informPlayers) {
            Player player=game.getPlayer(source.getControllerId());
            if (player != null) {
              game.informPlayers(new StringBuilder(player.getName()).append(""String_Node_Str"").append(newCounter.getCount()).append(""String_Node_Str"").append(newCounter.getName().toLowerCase()).append(""String_Node_Str"").append(card.getLogName()).toString());
            }
          }
        }
        return true;
      }
    }
 else {
      Permanent permanent=game.getPermanent(source.getSourceId());
      if (permanent != null) {
        if (counter != null) {
          Counter newCounter=counter.copy();
          int countersToAdd=amount.calculate(game,source,this);
          if (amount instanceof StaticValue || countersToAdd > 0) {
            if (countersToAdd > 0 && newCounter.getCount() == 1) {
              countersToAdd--;
            }
            newCounter.add(countersToAdd);
            int before=permanent.getCounters().getCount(newCounter.getName());
            permanent.addCounters(newCounter,game);
            int amountAdded=permanent.getCounters().getCount(newCounter.getName()) - before;
            if (informPlayers) {
              Player player=game.getPlayer(source.getControllerId());
              if (player != null) {
                game.informPlayers(player.getName() + ""String_Node_Str"" + amountAdded+ ""String_Node_Str""+ newCounter.getName().toLowerCase()+ ""String_Node_Str""+ permanent.getLogName());
              }
            }
          }
        }
      }
    }
    return true;
  }
  return false;
}",0.9923166472642608
159005,"@Override public String getText(Mode mode){
  if (staticText != null && !staticText.isEmpty()) {
    return staticText;
  }
  if (targetName.length() > 0) {
    return targetName + ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"" + mode.getTargets().get(0).getTargetName() + ""String_Node_Str"";
  }
}","@Override public String getText(Mode mode){
  if (staticText != null && !staticText.isEmpty()) {
    return staticText;
  }
  if (targetName != null && targetName.length() > 0) {
    return targetName + ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"" + mode.getTargets().get(0).getTargetName() + ""String_Node_Str"";
  }
}",0.9657320872274144
159006,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (game.getPlayer(this.getControllerId()).hasOpponent(event.getPlayerId(),game)) {
    MageObject object=game.getLastKnownInformation(event.getTargetId(),Zone.BATTLEFIELD);
    if (object instanceof Permanent && !(object instanceof PermanentToken)) {
      for (      Effect effect : getEffects()) {
        effect.setTargetPointer(new FixedTarget(event.getTargetId()));
      }
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (game.getPlayer(getControllerId()).hasOpponent(event.getPlayerId(),game)) {
    Permanent permanent=(Permanent)game.getLastKnownInformation(event.getTargetId(),Zone.BATTLEFIELD);
    if (permanent != null && !(permanent instanceof PermanentToken)) {
      for (      Effect effect : getEffects()) {
        effect.setTargetPointer(new FixedTarget(event.getTargetId()));
      }
      return true;
    }
  }
  return false;
}",0.8533872598584429
159007,"@Override public boolean moveToZone(Zone toZone,UUID sourceId,Game game,boolean flag,ArrayList<UUID> appliedEffects){
  Zone fromZone=game.getState().getZone(objectId);
  Player controller=game.getPlayer(controllerId);
  if (controller != null && controller.removeFromBattlefield(this,game)) {
    Card originalCard=game.getCard(this.getId());
    ZoneChangeEvent event=new ZoneChangeEvent(this,sourceId,controllerId,fromZone,toZone,appliedEffects);
    if (!game.replaceEvent(event)) {
      Player owner=game.getPlayer(ownerId);
      game.rememberLKI(objectId,Zone.BATTLEFIELD,this);
      if (owner != null) {
        this.setControllerId(ownerId);
        if (originalCard != null) {
          originalCard.updateZoneChangeCounter();
        }
switch (event.getToZone()) {
case GRAVEYARD:
          owner.putInGraveyard(card,game,!flag);
        break;
case HAND:
      owner.getHand().add(card);
    break;
case EXILED:
  game.getExile().getPermanentExile().add(card);
break;
case COMMAND:
game.addCommander(new Commander(card));
break;
case LIBRARY:
if (flag) {
owner.getLibrary().putOnTop(card,game);
}
 else {
owner.getLibrary().putOnBottom(card,game);
}
break;
case BATTLEFIELD:
break;
}
game.setZone(objectId,event.getToZone());
game.addSimultaneousEvent(event);
return game.getState().getZone(objectId) == toZone;
}
}
}
return false;
}","@Override public boolean moveToZone(Zone toZone,UUID sourceId,Game game,boolean flag,ArrayList<UUID> appliedEffects){
  Zone fromZone=game.getState().getZone(objectId);
  Player controller=game.getPlayer(controllerId);
  if (controller != null && controller.removeFromBattlefield(this,game)) {
    Card originalCard=game.getCard(this.getId());
    ZoneChangeEvent event=new ZoneChangeEvent(this,sourceId,controllerId,fromZone,toZone,appliedEffects);
    if (!game.replaceEvent(event)) {
      Player owner=game.getPlayer(ownerId);
      game.rememberLKI(objectId,Zone.BATTLEFIELD,this);
      if (owner != null) {
        if (originalCard != null) {
          originalCard.updateZoneChangeCounter();
        }
switch (event.getToZone()) {
case GRAVEYARD:
          owner.putInGraveyard(card,game,!flag);
        break;
case HAND:
      owner.getHand().add(card);
    break;
case EXILED:
  game.getExile().getPermanentExile().add(card);
break;
case COMMAND:
game.addCommander(new Commander(card));
break;
case LIBRARY:
if (flag) {
owner.getLibrary().putOnTop(card,game);
}
 else {
owner.getLibrary().putOnBottom(card,game);
}
break;
case BATTLEFIELD:
break;
}
game.setZone(objectId,event.getToZone());
game.addSimultaneousEvent(event);
return game.getState().getZone(objectId) == toZone;
}
}
}
return false;
}",0.9853107344632768
159008,"@Override public boolean apply(Game game,Ability source){
  ExileZone exileZone=game.getExile().getExileZone(source.getSourceId());
  if (exileZone != null) {
    for (    Card card : exileZone.getCards(game)) {
      Player player=game.getPlayer(card.getOwnerId());
      if (player != null) {
        player.putOntoBattlefieldWithInfo(card,game,Zone.EXILED,source.getSourceId());
      }
    }
    exileZone.clear();
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  MageObject sourceObject=source.getSourceObject(game);
  if (sourceObject != null) {
    UUID exileZoneId=CardUtil.getObjectExileZoneId(game,sourceObject);
    if (exileZoneId != null) {
      ExileZone exileZone=game.getExile().getExileZone(exileZoneId);
      if (exileZone != null) {
        for (        Card card : exileZone.getCards(game)) {
          Player player=game.getPlayer(card.getOwnerId());
          if (player != null) {
            player.putOntoBattlefieldWithInfo(card,game,Zone.EXILED,source.getSourceId());
          }
        }
        exileZone.clear();
      }
      return true;
    }
  }
  return false;
}",0.6144473455178416
159009,"@Override public void addSpecialAction(Ability source,Game game,ManaCost unpaid){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null && controller.getGraveyard().size() > 0) {
    if (unpaid.getMana().getColorless() > 0 && source.getAbilityType().equals(AbilityType.SPELL)) {
      SpecialAction specialAction=new ConvokeSpecialAction(unpaid);
      specialAction.setControllerId(source.getControllerId());
      specialAction.setSourceId(source.getSourceId());
      FilterControlledCreaturePermanent filter=new FilterControlledCreaturePermanent();
      filter.add(Predicates.not(new TappedPredicate()));
      if (unpaid.getMana().getColorless() == 0) {
        List<ColorPredicate> colorPredicates=new ArrayList<>();
        if (unpaid.getMana().getBlack() > 0) {
          colorPredicates.add(new ColorPredicate(ObjectColor.BLACK));
        }
        if (unpaid.getMana().getBlue() > 0) {
          colorPredicates.add(new ColorPredicate(ObjectColor.BLUE));
        }
        if (unpaid.getMana().getRed() > 0) {
          colorPredicates.add(new ColorPredicate(ObjectColor.RED));
        }
        if (unpaid.getMana().getGreen() > 0) {
          colorPredicates.add(new ColorPredicate(ObjectColor.GREEN));
        }
        if (unpaid.getMana().getWhite() > 0) {
          colorPredicates.add(new ColorPredicate(ObjectColor.WHITE));
        }
        filter.add(Predicates.or(colorPredicates));
      }
      Target target=new TargetControlledCreaturePermanent(1,1,filter,true);
      target.setTargetName(""String_Node_Str"");
      specialAction.addTarget(target);
      if (specialAction.canActivate(source.getControllerId(),game)) {
        game.getState().getSpecialActions().add(specialAction);
      }
    }
  }
}","@Override public void addSpecialAction(Ability source,Game game,ManaCost unpaid){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null && game.getBattlefield().contains(filterUntapped,controller.getId(),1,game)) {
    if (unpaid.getMana().getColorless() > 0 && source.getAbilityType().equals(AbilityType.SPELL)) {
      SpecialAction specialAction=new ConvokeSpecialAction(unpaid);
      specialAction.setControllerId(source.getControllerId());
      specialAction.setSourceId(source.getSourceId());
      FilterControlledCreaturePermanent filter=new FilterControlledCreaturePermanent();
      filter.add(Predicates.not(new TappedPredicate()));
      if (unpaid.getMana().getColorless() == 0) {
        List<ColorPredicate> colorPredicates=new ArrayList<>();
        if (unpaid.getMana().getBlack() > 0) {
          colorPredicates.add(new ColorPredicate(ObjectColor.BLACK));
        }
        if (unpaid.getMana().getBlue() > 0) {
          colorPredicates.add(new ColorPredicate(ObjectColor.BLUE));
        }
        if (unpaid.getMana().getRed() > 0) {
          colorPredicates.add(new ColorPredicate(ObjectColor.RED));
        }
        if (unpaid.getMana().getGreen() > 0) {
          colorPredicates.add(new ColorPredicate(ObjectColor.GREEN));
        }
        if (unpaid.getMana().getWhite() > 0) {
          colorPredicates.add(new ColorPredicate(ObjectColor.WHITE));
        }
        filter.add(Predicates.or(colorPredicates));
      }
      Target target=new TargetControlledCreaturePermanent(1,1,filter,true);
      target.setTargetName(""String_Node_Str"");
      specialAction.addTarget(target);
      if (specialAction.canActivate(source.getControllerId(),game)) {
        game.getState().getSpecialActions().add(specialAction);
      }
    }
  }
}",0.96964586846543
159010,"public ExileView(ExileZone exileZone,Game game){
  this.name=exileZone.getName();
  this.id=exileZone.getId();
  for (  Card card : exileZone.getCards(game)) {
    this.put(card.getId(),new CardView(card));
  }
}","public ExileView(ExileZone exileZone,Game game){
  this.name=exileZone.getName();
  this.id=exileZone.getId();
  for (  Card card : exileZone.getCards(game)) {
    this.put(card.getId(),new CardView(card,game,card.getId(),false));
  }
}",0.9464285714285714
159011,"@Override public boolean apply(Game game,Ability source){
  Card card=game.getCard(getTargetPointer().getFirst(game,source));
  if (card != null) {
    Effect effect=new ReturnFromGraveyardToBattlefieldTargetEffect();
    effect.setTargetPointer(new FixedTarget(card.getId()));
    effect.setText(""String_Node_Str"");
    DelayedTriggeredAbility delayedAbility=new AtTheBeginOfNextEndStepDelayedTriggeredAbility(effect);
    delayedAbility.setSourceId(source.getSourceId());
    delayedAbility.setControllerId(source.getControllerId());
    delayedAbility.setSourceObject(source.getSourceObject(game));
    game.addDelayedTriggeredAbility(delayedAbility);
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Card card=game.getCard(getTargetPointer().getFirst(game,source));
  if (card != null) {
    Effect effect=new ReturnFromGraveyardToBattlefieldTargetEffect();
    effect.setTargetPointer(new FixedTarget(card.getId()));
    effect.setText(""String_Node_Str"");
    DelayedTriggeredAbility delayedAbility=new AtTheBeginOfNextEndStepDelayedTriggeredAbility(Zone.COMMAND,effect,TargetController.ANY);
    delayedAbility.setSourceId(source.getSourceId());
    delayedAbility.setControllerId(source.getControllerId());
    delayedAbility.setSourceObject(source.getSourceObject(game));
    game.addDelayedTriggeredAbility(delayedAbility);
    return true;
  }
  return false;
}",0.967605633802817
159012,"public AtTheBeginOfNextEndStepDelayedTriggeredAbility(AtTheBeginOfNextEndStepDelayedTriggeredAbility ability){
  super(ability);
  this.targetController=ability.targetController;
}","public AtTheBeginOfNextEndStepDelayedTriggeredAbility(final AtTheBeginOfNextEndStepDelayedTriggeredAbility ability){
  super(ability);
  this.targetController=ability.targetController;
}",0.9836065573770492
159013,"@Override public boolean apply(Game game,Ability source){
  Card card;
  Player player=game.getPlayer(source.getControllerId());
  if (player == null) {
    return false;
  }
  ExileZone exile=game.getExile().createZone(source.getSourceId(),player.getName() + ""String_Node_Str"");
  Card stackCard=game.getCard(targetPointer.getFirst(game,source));
  if (stackCard == null) {
    return false;
  }
  int sourceCost=stackCard.getManaCost().convertedManaCost();
  do {
    card=player.getLibrary().removeFromTop(game);
    if (card == null) {
      break;
    }
    player.moveCardToExileWithInfo(card,source.getSourceId(),exile.getName(),source.getSourceId(),game,Zone.LIBRARY);
  }
 while (card.getCardType().contains(CardType.LAND) || card.getManaCost().convertedManaCost() >= sourceCost);
  if (card != null) {
    if (player.chooseUse(outcome,""String_Node_Str"" + card.getName() + ""String_Node_Str"",game)) {
      player.cast(card.getSpellAbility(),game,true);
      exile.remove(card.getId());
    }
  }
  while (exile.size() > 0) {
    card=exile.getRandom(game);
    exile.remove(card.getId());
    player.moveCardToLibraryWithInfo(card,source.getSourceId(),game,Zone.EXILED,false,false);
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  return CascadeAbility.applyCascade(outcome,game,source);
}",0.1382419233658903
159014,"private void parseType(ExpectedType type,String line){
  if (type.equals(CardTestPlayerBase.ExpectedType.TURN_NUMBER)) {
    int turn=getIntParam(line,1);
    Assert.assertEquals(""String_Node_Str"",turn,currentGame.getTurnNum());
    return;
  }
  if (type.equals(CardTestPlayerBase.ExpectedType.RESULT)) {
    String expected=getStringParam(line,1);
    String actual=""String_Node_Str"";
    if (currentGame.getWinner().equals(""String_Node_Str"")) {
      actual=""String_Node_Str"";
    }
 else     if (currentGame.getWinner().equals(""String_Node_Str"")) {
      actual=""String_Node_Str"";
    }
    Assert.assertEquals(""String_Node_Str"",expected,actual);
    return;
  }
  if (type.equals(CardTestPlayerBase.ExpectedType.LIFE)) {
    String player=getStringParam(line,1);
    int expected=getIntParam(line,2);
    if (player.equals(""String_Node_Str"")) {
      int actual=currentGame.getPlayer(playerA.getId()).getLife();
      Assert.assertEquals(""String_Node_Str"",expected,actual);
    }
 else     if (player.equals(""String_Node_Str"")) {
      int actual=currentGame.getPlayer(playerB.getId()).getLife();
      Assert.assertEquals(""String_Node_Str"",expected,actual);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + player + ""String_Node_Str""+ line);
    }
    return;
  }
  if (type.equals(CardTestPlayerBase.ExpectedType.BATTLEFIELD)) {
    String playerName=getStringParam(line,1);
    String cardName=getStringParam(line,2);
    int expectedCount=getIntParam(line,3);
    Player player=null;
    if (playerName.equals(""String_Node_Str"")) {
      player=currentGame.getPlayer(playerA.getId());
    }
 else     if (playerName.equals(""String_Node_Str"")) {
      player=currentGame.getPlayer(playerB.getId());
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + player + ""String_Node_Str""+ line);
    }
    int actualCount=0;
    for (    Permanent permanent : currentGame.getBattlefield().getAllPermanents()) {
      if (permanent.getControllerId().equals(player.getId())) {
        if (permanent.getName().equals(cardName)) {
          actualCount++;
        }
      }
    }
    Assert.assertEquals(""String_Node_Str"" + cardName + ""String_Node_Str"",expectedCount,actualCount);
    return;
  }
  if (type.equals(CardTestPlayerBase.ExpectedType.GRAVEYARD)) {
    String playerName=getStringParam(line,1);
    String cardName=getStringParam(line,2);
    int expectedCount=getIntParam(line,3);
    Player player=null;
    if (playerName.equals(""String_Node_Str"")) {
      player=currentGame.getPlayer(playerA.getId());
    }
 else     if (playerName.equals(""String_Node_Str"")) {
      player=currentGame.getPlayer(playerB.getId());
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + player + ""String_Node_Str""+ line);
    }
    int actualCount=0;
    for (    Card card : player.getGraveyard().getCards(currentGame)) {
      if (card.getName().equals(cardName)) {
        actualCount++;
      }
    }
    Assert.assertEquals(""String_Node_Str"" + cardName + ""String_Node_Str"",expectedCount,actualCount);
  }
}","private void parseType(ExpectedType type,String line){
  if (type.equals(CardTestPlayerBase.ExpectedType.TURN_NUMBER)) {
    int turn=getIntParam(line,1);
    Assert.assertEquals(""String_Node_Str"",turn,currentGame.getTurnNum());
    return;
  }
  if (type.equals(CardTestPlayerBase.ExpectedType.RESULT)) {
    String expected=getStringParam(line,1);
    String actual=""String_Node_Str"";
switch (currentGame.getWinner()) {
case ""String_Node_Str"":
      actual=""String_Node_Str"";
    break;
case ""String_Node_Str"":
  actual=""String_Node_Str"";
break;
}
Assert.assertEquals(""String_Node_Str"",expected,actual);
return;
}
Player player=null;
String playerName=getStringParam(line,1);
switch (playerName) {
case ""String_Node_Str"":
player=currentGame.getPlayer(playerA.getId());
break;
case ""String_Node_Str"":
player=currentGame.getPlayer(playerB.getId());
break;
}
if (player == null) {
throw new IllegalArgumentException(""String_Node_Str"" + player + ""String_Node_Str""+ line);
}
if (type.equals(CardTestPlayerBase.ExpectedType.LIFE)) {
int expected=getIntParam(line,2);
int actual=player.getLife();
Assert.assertEquals(""String_Node_Str"",expected,actual);
return;
}
if (type.equals(CardTestPlayerBase.ExpectedType.BATTLEFIELD)) {
String cardName=getStringParam(line,2);
int expectedCount=getIntParam(line,3);
int actualCount=0;
for (Permanent permanent : currentGame.getBattlefield().getAllPermanents()) {
if (permanent.getControllerId().equals(player.getId())) {
if (permanent.getName().equals(cardName)) {
actualCount++;
}
}
}
Assert.assertEquals(""String_Node_Str"" + cardName + ""String_Node_Str"",expectedCount,actualCount);
return;
}
if (type.equals(CardTestPlayerBase.ExpectedType.GRAVEYARD)) {
String cardName=getStringParam(line,2);
int expectedCount=getIntParam(line,3);
int actualCount=0;
for (Card card : player.getGraveyard().getCards(currentGame)) {
if (card.getName().equals(cardName)) {
actualCount++;
}
}
Assert.assertEquals(""String_Node_Str"" + cardName + ""String_Node_Str"",expectedCount,actualCount);
}
}",0.5928402832415421
159015,"@Override public boolean apply(Game game,Ability source){
  Card card;
  Player player=game.getPlayer(source.getControllerId());
  if (player == null) {
    return false;
  }
  ExileZone exile=game.getExile().createZone(source.getSourceId(),player.getName() + ""String_Node_Str"");
  int sourceCost=game.getCard(source.getSourceId()).getManaCost().convertedManaCost();
  do {
    card=player.getLibrary().getFromTop(game);
    if (card == null) {
      break;
    }
    player.moveCardToExileWithInfo(card,exile.getId(),exile.getName(),source.getSourceId(),game,Zone.LIBRARY);
  }
 while (player.isInGame() && card.getCardType().contains(CardType.LAND) || card.getManaCost().convertedManaCost() >= sourceCost);
  if (card != null) {
    if (player.chooseUse(outcome,""String_Node_Str"" + card.getName() + ""String_Node_Str"",game)) {
      if (player.cast(card.getSpellAbility(),game,true)) {
        exile.remove(card.getId());
      }
    }
  }
  while (exile.size() > 0) {
    card=exile.getRandom(game);
    exile.remove(card.getId());
    player.moveCardToLibraryWithInfo(card,source.getSourceId(),game,Zone.EXILED,false,false);
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  return CascadeAbility.applyCascade(outcome,game,source);
}",0.1706161137440758
159016,"public boolean replaceEvent(GameEvent event,Game game){
  boolean caught=false;
  HashMap<UUID,HashSet<UUID>> consumed=new HashMap<>();
  do {
    HashMap<ReplacementEffect,HashSet<Ability>> rEffects=getApplicableReplacementEffects(event,game);
    for (Iterator<ReplacementEffect> it1=rEffects.keySet().iterator(); it1.hasNext(); ) {
      ReplacementEffect entry=it1.next();
      if (consumed.containsKey(entry.getId())) {
        HashSet<UUID> consumedAbilitiesIds=consumed.get(entry.getId());
        if (rEffects.get(entry) == null || consumedAbilitiesIds.size() == rEffects.get(entry).size()) {
          it1.remove();
        }
 else {
          Iterator it=rEffects.get(entry).iterator();
          while (it.hasNext()) {
            Ability ability=(Ability)it.next();
            if (consumedAbilitiesIds.contains(ability.getId())) {
              it.remove();
            }
          }
        }
      }
    }
    if (rEffects.isEmpty()) {
      break;
    }
    int index;
    boolean onlyOne=false;
    if (rEffects.size() == 1) {
      ReplacementEffect effect=rEffects.keySet().iterator().next();
      HashSet<Ability> abilities=replacementEffects.getAbility(effect.getId());
      if (abilities == null || abilities.size() == 1) {
        onlyOne=true;
      }
    }
    if (onlyOne) {
      index=0;
    }
 else {
      Player player=game.getPlayer(event.getPlayerId());
      index=player.chooseReplacementEffect(getReplacementEffectsTexts(rEffects,game),game);
    }
    int checked=0;
    ReplacementEffect rEffect=null;
    Ability rAbility=null;
    for (    Map.Entry<ReplacementEffect,HashSet<Ability>> entry : rEffects.entrySet()) {
      if (entry.getValue() == null) {
        if (checked == index) {
          rEffect=entry.getKey();
          break;
        }
 else {
          checked++;
        }
      }
 else {
        HashSet<Ability> abilities=entry.getValue();
        int size=abilities.size();
        if (index > (checked + size - 1)) {
          checked+=size;
        }
 else {
          rEffect=entry.getKey();
          Iterator it=abilities.iterator();
          while (it.hasNext() && rAbility == null) {
            if (checked == index) {
              rAbility=(Ability)it.next();
            }
 else {
              it.next();
              checked++;
            }
          }
          break;
        }
      }
    }
    if (rEffect != null) {
      event.getAppliedEffects().add(rEffect.getId());
      caught=rEffect.replaceEvent(event,rAbility,game);
    }
    if (caught) {
      break;
    }
    if (rEffect != null) {
      if (consumed.containsKey(rEffect.getId())) {
        HashSet<UUID> set=consumed.get(rEffect.getId());
        if (rAbility != null) {
          if (!set.contains(rAbility.getId())) {
            set.add(rAbility.getId());
          }
        }
      }
 else {
        HashSet<UUID> set=new HashSet<>();
        if (rAbility != null) {
          set.add(rAbility.getId());
        }
        consumed.put(rEffect.getId(),set);
      }
    }
    game.applyEffects();
  }
 while (true);
  return caught;
}","public boolean replaceEvent(GameEvent event,Game game){
  boolean caught=false;
  HashMap<UUID,HashSet<UUID>> consumed=new HashMap<>();
  do {
    HashMap<ReplacementEffect,HashSet<Ability>> rEffects=getApplicableReplacementEffects(event,game);
    for (Iterator<ReplacementEffect> it1=rEffects.keySet().iterator(); it1.hasNext(); ) {
      ReplacementEffect entry=it1.next();
      if (consumed.containsKey(entry.getId())) {
        HashSet<UUID> consumedAbilitiesIds=consumed.get(entry.getId());
        if (rEffects.get(entry) == null || consumedAbilitiesIds.size() == rEffects.get(entry).size()) {
          it1.remove();
        }
 else {
          Iterator it=rEffects.get(entry).iterator();
          while (it.hasNext()) {
            Ability ability=(Ability)it.next();
            if (consumedAbilitiesIds.contains(ability.getId())) {
              it.remove();
            }
          }
        }
      }
    }
    if (rEffects.isEmpty()) {
      break;
    }
    int index;
    boolean onlyOne=false;
    if (rEffects.size() == 1) {
      ReplacementEffect effect=rEffects.keySet().iterator().next();
      HashSet<Ability> abilities;
      if (effect.getEffectType().equals(EffectType.REPLACEMENT)) {
        abilities=replacementEffects.getAbility(effect.getId());
      }
 else {
        abilities=preventionEffects.getAbility(effect.getId());
      }
      if (abilities == null || abilities.size() == 1) {
        onlyOne=true;
      }
    }
    if (onlyOne) {
      index=0;
    }
 else {
      Player player=game.getPlayer(event.getPlayerId());
      index=player.chooseReplacementEffect(getReplacementEffectsTexts(rEffects,game),game);
    }
    int checked=0;
    ReplacementEffect rEffect=null;
    Ability rAbility=null;
    for (    Map.Entry<ReplacementEffect,HashSet<Ability>> entry : rEffects.entrySet()) {
      if (entry.getValue() == null) {
        if (checked == index) {
          rEffect=entry.getKey();
          break;
        }
 else {
          checked++;
        }
      }
 else {
        HashSet<Ability> abilities=entry.getValue();
        int size=abilities.size();
        if (index > (checked + size - 1)) {
          checked+=size;
        }
 else {
          rEffect=entry.getKey();
          Iterator it=abilities.iterator();
          while (it.hasNext() && rAbility == null) {
            if (checked == index) {
              rAbility=(Ability)it.next();
            }
 else {
              it.next();
              checked++;
            }
          }
          break;
        }
      }
    }
    if (rEffect != null) {
      event.getAppliedEffects().add(rEffect.getId());
      caught=rEffect.replaceEvent(event,rAbility,game);
    }
    if (caught) {
      break;
    }
    if (rEffect != null) {
      if (consumed.containsKey(rEffect.getId())) {
        HashSet<UUID> set=consumed.get(rEffect.getId());
        if (rAbility != null) {
          if (!set.contains(rAbility.getId())) {
            set.add(rAbility.getId());
          }
        }
      }
 else {
        HashSet<UUID> set=new HashSet<>();
        if (rAbility != null) {
          set.add(rAbility.getId());
        }
        consumed.put(rEffect.getId(),set);
      }
    }
    game.applyEffects();
  }
 while (true);
  return caught;
}",0.9716177861873226
159017,"@Override public boolean apply(Game game,Ability source){
  if (onCard) {
    Card card;
    if (affectedObjectsSet) {
      card=affectedObjectList.get(0).getCard(game);
    }
 else {
      card=game.getCard(source.getSourceId());
    }
    if (card != null) {
      card.addAbility(ability);
      discard();
      return true;
    }
  }
 else {
    Permanent permanent;
    if (affectedObjectsSet) {
      permanent=affectedObjectList.get(0).getPermanent(game);
    }
 else {
      permanent=game.getPermanent(source.getSourceId());
    }
    if (permanent != null) {
      permanent.addAbility(ability,source.getSourceId(),game);
      return true;
    }
  }
  if (duration.equals(Duration.Custom)) {
    this.discard();
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  if (onCard) {
    Card card;
    if (affectedObjectsSet) {
      card=affectedObjectList.get(0).getCard(game);
    }
 else {
      card=game.getCard(source.getSourceId());
    }
    if (card != null) {
      card.addAbility(ability);
      discard();
      return true;
    }
  }
 else {
    Permanent permanent;
    if (affectedObjectsSet) {
      permanent=affectedObjectList.get(0).getPermanent(game);
    }
 else {
      permanent=game.getPermanent(source.getSourceId());
    }
    if (permanent != null) {
      permanent.addAbility(ability,source.getSourceId(),game,false);
      return true;
    }
  }
  if (duration.equals(Duration.Custom)) {
    this.discard();
  }
  return true;
}",0.9959893048128342
159018,"public void addEffect(ContinuousEffect effect,UUID sourceId,Ability source){
  if (sourceId == null)   effects.addEffect(effect,source);
 else   effects.addEffect(effect,sourceId,source);
}","public void addEffect(ContinuousEffect effect,UUID sourceId,Ability source){
  if (sourceId == null) {
    effects.addEffect(effect,source);
  }
 else {
    effects.addEffect(effect,sourceId,source);
  }
}",0.9390862944162436
159019,"@Override public boolean apply(Game game,Ability source){
  Spell spell=(Spell)this.getValue(""String_Node_Str"");
  if (spell != null) {
    CastSpellLastTurnWatcher watcher=(CastSpellLastTurnWatcher)game.getState().getWatchers().get(""String_Node_Str"");
    for (int i=0; i < watcher.getSpellOrder(spell) - 1; i++) {
      Spell copy=spell.copySpell();
      copy.setControllerId(source.getControllerId());
      copy.setCopiedSpell(true);
      game.getStack().push(copy);
      copy.chooseNewTargets(game,source.getControllerId());
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Spell spell=(Spell)this.getValue(""String_Node_Str"");
  if (spell != null) {
    CastSpellLastTurnWatcher watcher=(CastSpellLastTurnWatcher)game.getState().getWatchers().get(""String_Node_Str"");
    int stormCount=watcher.getSpellOrder(spell) - 1;
    if (stormCount > 0) {
      game.informPlayers(""String_Node_Str"" + spell.getName() + ""String_Node_Str""+ stormCount+ ""String_Node_Str""+ (stormCount > 1 ? ""String_Node_Str"" : ""String_Node_Str""));
      for (int i=0; i < stormCount; i++) {
        Spell copy=spell.copySpell();
        copy.setControllerId(source.getControllerId());
        copy.setCopiedSpell(true);
        game.getStack().push(copy);
        copy.chooseNewTargets(game,source.getControllerId());
      }
    }
    return true;
  }
  return false;
}",0.7555238774055595
159020,"@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.SPELL_CAST) {
    spellsCastThisTurnInOrder.add(event.getTargetId());
    UUID playerId=event.getPlayerId();
    if (playerId != null) {
      Integer amount=amountOfSpellsCastOnCurrentTurn.get(playerId);
      if (amount == null) {
        amount=1;
      }
 else {
        amount=amount + 1;
      }
      amountOfSpellsCastOnCurrentTurn.put(playerId,amount);
    }
  }
}","@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.SPELL_CAST) {
    spellsCastThisTurnInOrder.add(new MageObjectReference(event.getSourceId(),game));
    UUID playerId=event.getPlayerId();
    if (playerId != null) {
      Integer amount=amountOfSpellsCastOnCurrentTurn.get(playerId);
      if (amount == null) {
        amount=1;
      }
 else {
        amount=amount + 1;
      }
      amountOfSpellsCastOnCurrentTurn.put(playerId,amount);
    }
  }
}",0.9325153374233128
159021,"public int getSpellOrder(Spell spell){
  int index=0;
  for (  UUID uuid : spellsCastThisTurnInOrder) {
    index++;
    if (spell.getId().equals(uuid)) {
      return index;
    }
  }
  return 0;
}","public int getSpellOrder(Spell spell){
  int index=0;
  for (  MageObjectReference mor : spellsCastThisTurnInOrder) {
    index++;
    if (mor.refersTo(spell)) {
      return index;
    }
  }
  return 0;
}",0.8188585607940446
159022,"@Override public boolean apply(Game game,Ability source){
  for (  Permanent permanent : game.getBattlefield().getAllActivePermanents(CardType.CREATURE)) {
    if (permanent.getManaCost().convertedManaCost() <= source.getManaCostsToPay().getX()) {
      permanent.destroy(source.getSourceId(),game,false);
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(new FilterCreaturePermanent(),source.getControllerId(),source.getSourceId(),game)) {
    if (permanent.getManaCost().convertedManaCost() <= source.getManaCostsToPay().getX()) {
      permanent.destroy(source.getSourceId(),game,false);
    }
  }
  return true;
}",0.861878453038674
159023,"@Override public boolean apply(Game game,Ability source){
  game.getPlayerList();
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    PlayerList playerList=game.getPlayerList();
    playerList.setCurrent(game.getActivePlayerId());
    Player player=game.getPlayer(game.getActivePlayerId());
    do {
      ArrayList<Permanent> permanentsToTop=new ArrayList<>();
      ArrayList<Permanent> permanentsToBottom=new ArrayList<>();
      for (      Permanent permanent : game.getState().getBattlefield().getActivePermanents(new FilterAttackingCreature(),player.getId(),source.getSourceId(),game)) {
        if (permanent.getOwnerId().equals(player.getId())) {
          if (player.chooseUse(outcome,""String_Node_Str"" + permanent.getLogName() + ""String_Node_Str"",game)) {
            permanentsToTop.add(permanent);
            game.informPlayers(permanent.getLogName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
          }
 else {
            permanentsToBottom.add(permanent);
            game.informPlayers(permanent.getLogName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
          }
        }
      }
      Cards cards=new CardsImpl();
      ArrayList<Permanent> toLibrary=new ArrayList<>();
      for (      Permanent permanent : permanentsToTop) {
        if (permanent instanceof PermanentToken) {
          toLibrary.add(permanent);
        }
 else {
          Card card=game.getCard(permanent.getId());
          if (card != null) {
            cards.add(card);
          }
        }
      }
      TargetCard target=new TargetCard(Zone.BATTLEFIELD,new FilterCard(""String_Node_Str""));
      while (player.isInGame() && cards.size() > 1) {
        player.choose(Outcome.Neutral,cards,target,game);
        Card card=cards.get(target.getFirstTarget(),game);
        if (card != null) {
          cards.remove(card);
          Permanent permanent=game.getPermanent(card.getId());
          if (permanent != null) {
            toLibrary.add(permanent);
          }
        }
        target.clearChosen();
      }
      if (cards.size() == 1) {
        Card card=cards.get(cards.iterator().next(),game);
        Permanent permanent=game.getPermanent(card.getId());
        if (permanent != null) {
          toLibrary.add(permanent);
        }
      }
      for (      Permanent permanent : toLibrary) {
        player.moveCardToLibraryWithInfo(permanent,source.getSourceId(),game,Zone.BATTLEFIELD,true,false);
      }
      cards.clear();
      toLibrary.clear();
      for (      Permanent permanent : permanentsToBottom) {
        if (permanent instanceof PermanentToken) {
          toLibrary.add(permanent);
        }
 else {
          Card card=game.getCard(permanent.getId());
          if (card != null) {
            cards.add(card);
          }
        }
      }
      target=new TargetCard(Zone.BATTLEFIELD,new FilterCard(""String_Node_Str""));
      while (player.isInGame() && cards.size() > 1) {
        player.choose(Outcome.Neutral,cards,target,game);
        Card card=cards.get(target.getFirstTarget(),game);
        if (card != null) {
          cards.remove(card);
          Permanent permanent=game.getPermanent(card.getId());
          if (permanent != null) {
            toLibrary.add(permanent);
          }
        }
        target.clearChosen();
      }
      if (cards.size() == 1) {
        Card card=cards.get(cards.iterator().next(),game);
        Permanent permanent=game.getPermanent(card.getId());
        if (permanent != null) {
          toLibrary.add(permanent);
        }
      }
      for (      Permanent permanent : toLibrary) {
        player.moveCardToLibraryWithInfo(permanent,source.getSourceId(),game,Zone.BATTLEFIELD,false,false);
      }
      player=playerList.getNext(game);
    }
 while (player != null && !player.getId().equals(game.getActivePlayerId()));
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  game.getPlayerList();
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    PlayerList playerList=game.getPlayerList();
    playerList.setCurrent(game.getActivePlayerId());
    Player player=game.getPlayer(game.getActivePlayerId());
    Player activePlayer=player;
    do {
      ArrayList<Permanent> permanentsToTop=new ArrayList<>();
      ArrayList<Permanent> permanentsToBottom=new ArrayList<>();
      for (      Permanent permanent : game.getState().getBattlefield().getActivePermanents(new FilterAttackingCreature(),player.getId(),source.getSourceId(),game)) {
        if (permanent.getOwnerId().equals(player.getId())) {
          if (player.chooseUse(outcome,""String_Node_Str"" + permanent.getLogName() + ""String_Node_Str"",game)) {
            permanentsToTop.add(permanent);
            game.informPlayers(permanent.getLogName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
          }
 else {
            permanentsToBottom.add(permanent);
            game.informPlayers(permanent.getLogName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
          }
        }
      }
      Cards cards=new CardsImpl();
      ArrayList<Permanent> toLibrary=new ArrayList<>();
      for (      Permanent permanent : permanentsToTop) {
        if (permanent instanceof PermanentToken) {
          toLibrary.add(permanent);
        }
 else {
          Card card=game.getCard(permanent.getId());
          if (card != null) {
            cards.add(card);
          }
        }
      }
      TargetCard target=new TargetCard(Zone.BATTLEFIELD,new FilterCard(""String_Node_Str""));
      while (cards.size() > 1) {
        if (!player.isInGame()) {
          return false;
        }
        player.choose(Outcome.Neutral,cards,target,game);
        Card card=cards.get(target.getFirstTarget(),game);
        if (card != null) {
          cards.remove(card);
          Permanent permanent=game.getPermanent(card.getId());
          if (permanent != null) {
            toLibrary.add(permanent);
          }
        }
        target.clearChosen();
      }
      if (cards.size() == 1) {
        Card card=cards.get(cards.iterator().next(),game);
        Permanent permanent=game.getPermanent(card.getId());
        if (permanent != null) {
          toLibrary.add(permanent);
        }
      }
      for (      Permanent permanent : toLibrary) {
        player.moveCardToLibraryWithInfo(permanent,source.getSourceId(),game,Zone.BATTLEFIELD,true,false);
      }
      cards.clear();
      toLibrary.clear();
      for (      Permanent permanent : permanentsToBottom) {
        if (permanent instanceof PermanentToken) {
          toLibrary.add(permanent);
        }
 else {
          Card card=game.getCard(permanent.getId());
          if (card != null) {
            cards.add(card);
          }
        }
      }
      target=new TargetCard(Zone.BATTLEFIELD,new FilterCard(""String_Node_Str""));
      while (player.isInGame() && cards.size() > 1) {
        player.choose(Outcome.Neutral,cards,target,game);
        Card card=cards.get(target.getFirstTarget(),game);
        if (card != null) {
          cards.remove(card);
          Permanent permanent=game.getPermanent(card.getId());
          if (permanent != null) {
            toLibrary.add(permanent);
          }
        }
        target.clearChosen();
      }
      if (cards.size() == 1) {
        Card card=cards.get(cards.iterator().next(),game);
        Permanent permanent=game.getPermanent(card.getId());
        if (permanent != null) {
          toLibrary.add(permanent);
        }
      }
      for (      Permanent permanent : toLibrary) {
        player.moveCardToLibraryWithInfo(permanent,source.getSourceId(),game,Zone.BATTLEFIELD,false,false);
      }
      player=playerList.getNext(game);
    }
 while (player != null && !player.getId().equals(game.getActivePlayerId()) && activePlayer.isInGame());
    return true;
  }
  return false;
}",0.9816305988928032
159024,"protected List<Permanent> threats(UUID playerId,UUID sourceId,FilterPermanent filter,Game game,List<UUID> targets){
  List<Permanent> threats=(playerId == null || sourceId == null) ? game.getBattlefield().getActivePermanents(filter,this.getId(),sourceId,game) : game.getBattlefield().getActivePermanents(filter,playerId,sourceId,game);
  Iterator<Permanent> it=threats.iterator();
  while (it.hasNext()) {
    Permanent test=it.next();
    if (targets.contains(test.getId()) || (playerId != null && !test.getControllerId().equals(playerId))) {
      it.remove();
    }
  }
  Collections.sort(threats,new PermanentComparator(game));
  Collections.reverse(threats);
  return threats;
}","protected List<Permanent> threats(UUID playerId,UUID sourceId,FilterPermanent filter,Game game,List<UUID> targets){
  List<Permanent> threats;
  if (playerId == null) {
    threats=game.getBattlefield().getActivePermanents(filter,this.getId(),sourceId,game);
  }
 else {
    FilterPermanent filterCopy=filter.copy();
    filterCopy.add(new PlayerIdPredicate(playerId));
    threats=game.getBattlefield().getActivePermanents(filter,this.getId(),sourceId,game);
  }
  Iterator<Permanent> it=threats.iterator();
  while (it.hasNext()) {
    Permanent test=it.next();
    if (targets.contains(test.getId()) || (playerId != null && !test.getControllerId().equals(playerId))) {
      it.remove();
    }
  }
  Collections.sort(threats,new PermanentComparator(game));
  Collections.reverse(threats);
  return threats;
}",0.4912985274431057
159025,"/** 
 * Checks that pro black can still be sacrificed
 */
@Test public void testSacrifice(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",4);
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"");
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  setStopAt(1,PhaseStep.BEGIN_COMBAT);
  execute();
  assertPermanentCount(playerB,0);
  assertPowerToughness(playerA,""String_Node_Str"",3,3);
}","/** 
 * Checks that creature with protection black can still be sacrificed
 */
@Test public void testSacrifice(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",4);
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"");
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  setStopAt(1,PhaseStep.BEGIN_COMBAT);
  execute();
  assertPermanentCount(playerB,0);
  assertPowerToughness(playerA,""String_Node_Str"",3,3);
}",0.98067287043665
159026,"protected List<Permanent> threats(UUID playerId,UUID sourceId,FilterPermanent filter,Game game,List<UUID> targets){
  List<Permanent> threats;
  if (playerId == null) {
    threats=game.getBattlefield().getActivePermanents(filter,this.getId(),sourceId,game);
  }
 else {
    FilterPermanent filterCopy=filter.copy();
    filterCopy.add(new PlayerIdPredicate(playerId));
    threats=game.getBattlefield().getActivePermanents(filter,this.getId(),sourceId,game);
  }
  Iterator<Permanent> it=threats.iterator();
  while (it.hasNext()) {
    Permanent test=it.next();
    if (targets.contains(test.getId()) || (playerId != null && !test.getControllerId().equals(playerId))) {
      it.remove();
    }
  }
  Collections.sort(threats,new PermanentComparator(game));
  Collections.reverse(threats);
  return threats;
}","protected List<Permanent> threats(UUID playerId,UUID sourceId,FilterPermanent filter,Game game,List<UUID> targets){
  List<Permanent> threats;
  if (playerId == null) {
    threats=game.getBattlefield().getActivePermanents(filter,this.getId(),sourceId,game);
  }
 else {
    FilterPermanent filterCopy=filter.copy();
    filterCopy.add(new ControllerIdPredicate(playerId));
    threats=game.getBattlefield().getActivePermanents(filter,this.getId(),sourceId,game);
  }
  Iterator<Permanent> it=threats.iterator();
  while (it.hasNext()) {
    Permanent test=it.next();
    if (targets.contains(test.getId()) || (playerId != null && !test.getControllerId().equals(playerId))) {
      it.remove();
    }
  }
  Collections.sort(threats,new PermanentComparator(game));
  Collections.reverse(threats);
  return threats;
}",0.992619926199262
159027,"/** 
 * @param event
 * @param game
 * @return a list of all {@link ReplacementEffect} that apply to the current event
 */
private HashMap<ReplacementEffect,HashSet<Ability>> getApplicableReplacementEffects(GameEvent event,Game game){
  HashMap<ReplacementEffect,HashSet<Ability>> replaceEffects=new HashMap<>();
  if (planeswalkerRedirectionEffect.checksEventType(event,game) && planeswalkerRedirectionEffect.applies(event,null,game)) {
    replaceEffects.put(planeswalkerRedirectionEffect,null);
  }
  if (auraReplacementEffect.checksEventType(event,game) && auraReplacementEffect.applies(event,null,game)) {
    replaceEffects.put(auraReplacementEffect,null);
  }
  for (  ReplacementEffect effect : replacementEffects) {
    if (!effect.checksEventType(event,game)) {
      continue;
    }
    if (event.getAppliedEffects() != null && event.getAppliedEffects().contains(effect.getId())) {
      continue;
    }
    HashSet<Ability> abilities=replacementEffects.getAbility(effect.getId());
    HashSet<Ability> applicableAbilities=new HashSet<>();
    for (    Ability ability : abilities) {
      if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false)) {
        if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
          if (!game.getScopeRelevant() || effect.hasSelfScope() || !event.getTargetId().equals(ability.getSourceId())) {
            if (checkAbilityStillExists(ability,effect,event,game)) {
              if (effect.applies(event,ability,game)) {
                applicableAbilities.add(ability);
              }
            }
          }
        }
      }
    }
    if (!applicableAbilities.isEmpty()) {
      replaceEffects.put(effect,applicableAbilities);
    }
  }
  for (  PreventionEffect effect : preventionEffects) {
    if (!effect.checksEventType(event,game)) {
      continue;
    }
    if (event.getAppliedEffects() != null && event.getAppliedEffects().contains(effect.getId())) {
      continue;
    }
    HashSet<Ability> abilities=preventionEffects.getAbility(effect.getId());
    HashSet<Ability> applicableAbilities=new HashSet<>();
    for (    Ability ability : abilities) {
      if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false)) {
        if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
          if (effect.applies(event,ability,game)) {
            applicableAbilities.add(ability);
          }
        }
      }
    }
    if (!applicableAbilities.isEmpty()) {
      replaceEffects.put((ReplacementEffect)effect,applicableAbilities);
    }
  }
  return replaceEffects;
}","/** 
 * @param event
 * @param game
 * @return a list of all {@link ReplacementEffect} that apply to the current event
 */
private HashMap<ReplacementEffect,HashSet<Ability>> getApplicableReplacementEffects(GameEvent event,Game game){
  HashMap<ReplacementEffect,HashSet<Ability>> replaceEffects=new HashMap<>();
  if (planeswalkerRedirectionEffect.checksEventType(event,game) && planeswalkerRedirectionEffect.applies(event,null,game)) {
    replaceEffects.put(planeswalkerRedirectionEffect,null);
  }
  if (auraReplacementEffect.checksEventType(event,game) && auraReplacementEffect.applies(event,null,game)) {
    replaceEffects.put(auraReplacementEffect,null);
  }
  boolean checkLKI=event.getType().equals(EventType.ZONE_CHANGE) || event.getType().equals(EventType.DESTROYED_PERMANENT);
  for (  ReplacementEffect effect : replacementEffects) {
    if (!effect.checksEventType(event,game)) {
      continue;
    }
    if (event.getAppliedEffects() != null && event.getAppliedEffects().contains(effect.getId())) {
      continue;
    }
    HashSet<Ability> abilities=replacementEffects.getAbility(effect.getId());
    HashSet<Ability> applicableAbilities=new HashSet<>();
    for (    Ability ability : abilities) {
      if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,checkLKI)) {
        if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
          if (!game.getScopeRelevant() || effect.hasSelfScope() || !event.getTargetId().equals(ability.getSourceId())) {
            if (checkAbilityStillExists(ability,effect,event,game)) {
              if (effect.applies(event,ability,game)) {
                applicableAbilities.add(ability);
              }
            }
          }
        }
      }
    }
    if (!applicableAbilities.isEmpty()) {
      replaceEffects.put(effect,applicableAbilities);
    }
  }
  for (  PreventionEffect effect : preventionEffects) {
    if (!effect.checksEventType(event,game)) {
      continue;
    }
    if (event.getAppliedEffects() != null && event.getAppliedEffects().contains(effect.getId())) {
      continue;
    }
    HashSet<Ability> abilities=preventionEffects.getAbility(effect.getId());
    HashSet<Ability> applicableAbilities=new HashSet<>();
    for (    Ability ability : abilities) {
      if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false)) {
        if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
          if (effect.applies(event,ability,game)) {
            applicableAbilities.add(ability);
          }
        }
      }
    }
    if (!applicableAbilities.isEmpty()) {
      replaceEffects.put((ReplacementEffect)effect,applicableAbilities);
    }
  }
  return replaceEffects;
}",0.9745604190048636
159028,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getTargetId().equals(source.getSourceId())) {
    UUID targetId=(UUID)game.getState().getValue(""String_Node_Str"" + source.getSourceId());
    Logger.getLogger(UndyingReplacementEffect.class).info(""String_Node_Str"" + targetId + ""String_Node_Str""+ event.getTargetId());
    if (targetId != null && targetId.equals(source.getSourceId())) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getTargetId().equals(source.getSourceId())) {
    UUID targetId=(UUID)game.getState().getValue(""String_Node_Str"" + source.getSourceId());
    if (targetId != null && targetId.equals(source.getSourceId())) {
      return true;
    }
  }
  return false;
}",0.8399014778325123
159029,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (super.checkTrigger(event,game)) {
    Permanent permanent=(Permanent)game.getLastKnownInformation(event.getTargetId(),Zone.BATTLEFIELD);
    if (!permanent.getCounters().containsKey(CounterType.P1P1) || permanent.getCounters().getCount(CounterType.P1P1) == 0) {
      Logger.getLogger(UndyingAbility.class).info(""String_Node_Str"" + getSourceId());
      game.getState().setValue(""String_Node_Str"" + getSourceId(),permanent.getId());
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (super.checkTrigger(event,game)) {
    Permanent permanent=(Permanent)game.getLastKnownInformation(event.getTargetId(),Zone.BATTLEFIELD);
    if (!permanent.getCounters().containsKey(CounterType.P1P1) || permanent.getCounters().getCount(CounterType.P1P1) == 0) {
      game.getState().setValue(""String_Node_Str"" + getSourceId(),permanent.getId());
      return true;
    }
  }
  return false;
}",0.84251968503937
159030,"@Override public boolean playMana(ManaCost unpaid,Game game){
  payManaMode=true;
  boolean result=playManaHandling(unpaid,game);
  payManaMode=false;
  return result;
}","@Override public boolean playMana(ManaCost unpaid,String promptText,Game game){
  payManaMode=true;
  boolean result=playManaHandling(unpaid,game);
  payManaMode=false;
  return result;
}",0.949438202247191
159031,"protected boolean playManaHandling(ManaCost unpaid,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  game.firePlayManaEvent(playerId,""String_Node_Str"" + unpaid.getText());
  waitForResponse(game);
  if (!this.isInGame()) {
    return false;
  }
  if (response.getBoolean() != null) {
    return false;
  }
 else   if (response.getUUID() != null) {
    playManaAbilities(unpaid,game);
  }
 else   if (response.getString() != null && response.getString().equals(""String_Node_Str"")) {
    if (unpaid instanceof ManaCostsImpl) {
      specialManaAction(unpaid,game);
      ManaCostsImpl<ManaCost> costs=(ManaCostsImpl<ManaCost>)unpaid;
      for (      ManaCost cost : costs.getUnpaid()) {
        if (cost instanceof PhyrexianManaCost) {
          PhyrexianManaCost ph=(PhyrexianManaCost)cost;
          if (ph.canPay(null,null,playerId,game)) {
            ((PhyrexianManaCost)cost).pay(null,game,null,playerId,false);
          }
          break;
        }
      }
    }
  }
 else   if (response.getManaType() != null) {
    if (response.getResponseManaTypePlayerId().equals(this.getId())) {
      this.getManaPool().unlockManaType(response.getManaType());
    }
  }
  return true;
}","protected boolean playManaHandling(ManaCost unpaid,String promptText,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  game.firePlayManaEvent(playerId,""String_Node_Str"" + promptText);
  waitForResponse(game);
  if (!this.isInGame()) {
    return false;
  }
  if (response.getBoolean() != null) {
    return false;
  }
 else   if (response.getUUID() != null) {
    playManaAbilities(unpaid,game);
  }
 else   if (response.getString() != null && response.getString().equals(""String_Node_Str"")) {
    if (unpaid instanceof ManaCostsImpl) {
      specialManaAction(unpaid,game);
      ManaCostsImpl<ManaCost> costs=(ManaCostsImpl<ManaCost>)unpaid;
      for (      ManaCost cost : costs.getUnpaid()) {
        if (cost instanceof PhyrexianManaCost) {
          PhyrexianManaCost ph=(PhyrexianManaCost)cost;
          if (ph.canPay(null,null,playerId,game)) {
            ((PhyrexianManaCost)cost).pay(null,game,null,playerId,false);
          }
          break;
        }
      }
    }
  }
 else   if (response.getManaType() != null) {
    if (response.getResponseManaTypePlayerId().equals(this.getId())) {
      this.getManaPool().unlockManaType(response.getManaType());
    }
  }
  return true;
}",0.9858686616791354
159032,"@Override public boolean playMana(ManaCost unpaid,Game game){
  payManaMode=true;
  boolean result=playManaHandling(unpaid,game);
  payManaMode=false;
  return result;
}","@Override public boolean playMana(ManaCost unpaid,String promptText,Game game){
  payManaMode=true;
  boolean result=playManaHandling(unpaid,promptText,game);
  payManaMode=false;
  return result;
}",0.9209809264305178
159033,"@Override public boolean pay(Ability ability,Game game,UUID sourceId,UUID controllerId,boolean noMana){
  if (noMana) {
    setPaid();
    return true;
  }
  Player player=game.getPlayer(controllerId);
  assignPayment(game,ability,player.getManaPool());
  while (!isPaid()) {
    if (player.playMana(this,game)) {
      assignPayment(game,ability,player.getManaPool());
    }
 else {
      return false;
    }
  }
  return true;
}","@Override public boolean pay(Ability ability,Game game,UUID sourceId,UUID controllerId,boolean noMana){
  if (noMana) {
    setPaid();
    return true;
  }
  Player player=game.getPlayer(controllerId);
  assignPayment(game,ability,player.getManaPool());
  while (!isPaid()) {
    ManaCost unpaid=this.getUnpaid();
    String promptText=ManaUtil.addSpecialManaPayAbilities(ability,game,unpaid);
    if (player.playMana(unpaid,promptText,game)) {
      assignPayment(game,ability,player.getManaPool());
    }
 else {
      return false;
    }
    game.getState().getSpecialActions().removeManaActions();
  }
  return true;
}",0.8098859315589354
159034,"@Override public boolean pay(Ability ability,Game game,UUID sourceId,UUID controllerId,boolean noMana){
  if (this.size() == 0 || noMana) {
    setPaid();
    return true;
  }
  Player player=game.getPlayer(controllerId);
  assignPayment(game,ability,player.getManaPool());
  while (!isPaid()) {
    addSpecialManaPayAbilities(ability,game);
    if (player.playMana(this.getUnpaid(),game)) {
      assignPayment(game,ability,player.getManaPool());
    }
 else {
      return false;
    }
    game.getState().getSpecialActions().removeManaActions();
  }
  return true;
}","@Override public boolean pay(Ability ability,Game game,UUID sourceId,UUID controllerId,boolean noMana){
  if (this.size() == 0 || noMana) {
    setPaid();
    return true;
  }
  Player player=game.getPlayer(controllerId);
  assignPayment(game,ability,player.getManaPool());
  while (!isPaid()) {
    ManaCost unpaid=this.getUnpaid();
    String promptText=ManaUtil.addSpecialManaPayAbilities(ability,game,unpaid);
    if (player.playMana(unpaid,promptText,game)) {
      assignPayment(game,ability,player.getManaPool());
    }
 else {
      return false;
    }
    game.getState().getSpecialActions().removeManaActions();
  }
  return true;
}",0.9083402146985962
159035,"boolean playMana(ManaCost unpaid,Game game);","boolean playMana(ManaCost unpaid,String promptText,Game game);",0.8301886792452831
159036,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  MageObject mageObject=source.getSourceObject(game);
  return mageObject != null && mageObject.getCardType().contains(CardType.LAND);
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  MageObject mageObject=game.getObject(event.getSourceId());
  return mageObject != null && mageObject.getCardType().contains(CardType.LAND);
}",0.9048723897911832
159037,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType() == EventType.ZONE_CHANGE) {
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    if (zEvent.getToZone() == Zone.GRAVEYARD && ((ZoneChangeEvent)event).getTargetId().equals(getTargetPointer().getFirst(game,source))) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
  if (zEvent.getToZone() == Zone.GRAVEYARD && ((ZoneChangeEvent)event).getTargetId().equals(getTargetPointer().getFirst(game,source))) {
    return true;
  }
  return false;
}",0.8640483383685801
159038,"@Override public void adjustTargets(Ability ability,Game game){
  if (ability instanceof EntersBattlefieldTriggeredAbility) {
    for (    UUID opponentId : game.getOpponents(ability.getControllerId())) {
      Player opponent=game.getPlayer(opponentId);
      if (opponent != null) {
        ability.getTargets().clear();
        FilterCard filter=new FilterCard(new StringBuilder(""String_Node_Str"").append(opponent.getName()).append(""String_Node_Str"").toString());
        filter.add(new OwnerIdPredicate(opponentId));
        filter.add(Predicates.or(new CardTypePredicate(CardType.INSTANT),new CardTypePredicate(CardType.SORCERY)));
        TargetCardInOpponentsGraveyard target=new TargetCardInOpponentsGraveyard(0,1,filter);
        ability.addTarget(target);
      }
    }
  }
}","@Override public void adjustTargets(Ability ability,Game game){
  if (ability instanceof EntersBattlefieldTriggeredAbility) {
    ability.getTargets().clear();
    for (    UUID opponentId : game.getOpponents(ability.getControllerId())) {
      Player opponent=game.getPlayer(opponentId);
      if (opponent != null) {
        FilterCard filter=new FilterCard(new StringBuilder(""String_Node_Str"").append(opponent.getName()).append(""String_Node_Str"").toString());
        filter.add(new OwnerIdPredicate(opponentId));
        filter.add(Predicates.or(new CardTypePredicate(CardType.INSTANT),new CardTypePredicate(CardType.SORCERY)));
        TargetCardInOpponentsGraveyard target=new TargetCardInOpponentsGraveyard(0,1,filter);
        ability.addTarget(target);
      }
    }
  }
}",0.9540229885057472
159039,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(targetPointer.getFirst(game,source));
  if (player != null) {
    boolean paid=false;
    Cost cost=new DiscardTargetCost(new TargetCardInHand());
    if (cost.canPay(source,player.getId(),player.getId(),game) && player.chooseUse(Outcome.Detriment,""String_Node_Str"",game)) {
      paid=cost.pay(source,game,source.getSourceId(),player.getId(),false);
    }
    if (!paid) {
      player.loseLife(5,game);
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(targetPointer.getFirst(game,source));
  if (player != null) {
    boolean paid=false;
    Cost cost=new DiscardTargetCost(new TargetCardInHand());
    if (cost.canPay(source,source.getSourceId(),player.getId(),game) && player.chooseUse(Outcome.Detriment,""String_Node_Str"",game)) {
      paid=cost.pay(source,game,source.getSourceId(),player.getId(),false);
    }
    if (!paid) {
      player.loseLife(5,game);
    }
    return true;
  }
  return false;
}",0.9759704251386322
159040,"public SoulflayerEffect(final SoulflayerEffect effect){
  super(effect);
  if (effect.abilitiesToAdd != null) {
    this.abilitiesToAdd=new HashSet<>();
    this.abilitiesToAdd.addAll(effect.abilitiesToAdd);
  }
}","public SoulflayerEffect(final SoulflayerEffect effect){
  super(effect);
  if (effect.abilitiesToAdd != null) {
    this.abilitiesToAdd=new HashSet<>();
    this.abilitiesToAdd.addAll(effect.abilitiesToAdd);
  }
  this.objectReference=effect.objectReference;
}",0.9006342494714588
159041,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getSourceId());
  if (permanent != null) {
    if (abilitiesToAdd == null) {
      for (      Ability ability : permanent.getAbilities()) {
        if (ability instanceof DelveAbility) {
          List<Card> delvedCards=((DelveAbility)ability).getDelvedCards();
          abilitiesToAdd=new HashSet<>();
          if (delvedCards != null) {
            for (            Card card : delvedCards) {
              if (!card.getCardType().contains(CardType.CREATURE)) {
                continue;
              }
              for (              Ability cardAbility : card.getAbilities()) {
                if (cardAbility instanceof FlyingAbility) {
                  abilitiesToAdd.add(FlyingAbility.getInstance());
                }
                if (cardAbility instanceof FirstStrikeAbility) {
                  abilitiesToAdd.add(FirstStrikeAbility.getInstance());
                }
                if (cardAbility instanceof DoubleStrikeAbility) {
                  abilitiesToAdd.add(DoubleStrikeAbility.getInstance());
                }
                if (cardAbility instanceof DeathtouchAbility) {
                  abilitiesToAdd.add(DeathtouchAbility.getInstance());
                }
                if (cardAbility instanceof HasteAbility) {
                  abilitiesToAdd.add(HasteAbility.getInstance());
                }
                if (cardAbility instanceof HexproofAbility) {
                  abilitiesToAdd.add(HexproofAbility.getInstance());
                }
                if (cardAbility instanceof IndestructibleAbility) {
                  abilitiesToAdd.add(IndestructibleAbility.getInstance());
                }
                if (cardAbility instanceof LifelinkAbility) {
                  abilitiesToAdd.add(LifelinkAbility.getInstance());
                }
                if (cardAbility instanceof ReachAbility) {
                  abilitiesToAdd.add(ReachAbility.getInstance());
                }
                if (cardAbility instanceof TrampleAbility) {
                  abilitiesToAdd.add(TrampleAbility.getInstance());
                }
                if (cardAbility instanceof VigilanceAbility) {
                  abilitiesToAdd.add(VigilanceAbility.getInstance());
                }
              }
            }
          }
        }
      }
    }
    for (    Ability ability : abilitiesToAdd) {
      permanent.addAbility(ability,source.getSourceId(),game);
    }
    return true;
  }
 else {
    if (abilitiesToAdd != null) {
      abilitiesToAdd=null;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getSourceId());
  if (permanent != null) {
    if (objectReference == null || !objectReference.refersTo(permanent)) {
      abilitiesToAdd=new HashSet<>();
      this.objectReference=new MageObjectReference(permanent);
      String keyString=CardUtil.getCardZoneString(""String_Node_Str"",source.getSourceId(),game,true);
      List<Card> delvedCards=(List<Card>)game.getState().getValue(keyString);
      if (delvedCards != null) {
        for (        Card card : delvedCards) {
          if (!card.getCardType().contains(CardType.CREATURE)) {
            continue;
          }
          for (          Ability cardAbility : card.getAbilities()) {
            if (cardAbility instanceof FlyingAbility) {
              abilitiesToAdd.add(FlyingAbility.getInstance());
            }
            if (cardAbility instanceof FirstStrikeAbility) {
              abilitiesToAdd.add(FirstStrikeAbility.getInstance());
            }
            if (cardAbility instanceof DoubleStrikeAbility) {
              abilitiesToAdd.add(DoubleStrikeAbility.getInstance());
            }
            if (cardAbility instanceof DeathtouchAbility) {
              abilitiesToAdd.add(DeathtouchAbility.getInstance());
            }
            if (cardAbility instanceof HasteAbility) {
              abilitiesToAdd.add(HasteAbility.getInstance());
            }
            if (cardAbility instanceof HexproofAbility) {
              abilitiesToAdd.add(HexproofAbility.getInstance());
            }
            if (cardAbility instanceof IndestructibleAbility) {
              abilitiesToAdd.add(IndestructibleAbility.getInstance());
            }
            if (cardAbility instanceof LifelinkAbility) {
              abilitiesToAdd.add(LifelinkAbility.getInstance());
            }
            if (cardAbility instanceof ReachAbility) {
              abilitiesToAdd.add(ReachAbility.getInstance());
            }
            if (cardAbility instanceof TrampleAbility) {
              abilitiesToAdd.add(TrampleAbility.getInstance());
            }
            if (cardAbility instanceof VigilanceAbility) {
              abilitiesToAdd.add(VigilanceAbility.getInstance());
            }
          }
        }
      }
    }
    for (    Ability ability : abilitiesToAdd) {
      permanent.addAbility(ability,source.getSourceId(),game);
    }
    return true;
  }
 else {
    if (abilitiesToAdd != null) {
      abilitiesToAdd=null;
    }
  }
  return false;
}",0.8678227360308285
159042,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    player.loseLife(3,game);
    TargetCardInLibrary target=new TargetCardInLibrary();
    if (player.searchLibrary(target,game)) {
      for (      UUID cardId : target.getTargets()) {
        Card card=player.getLibrary().getCard(cardId,game);
        player.putInHand(card,game);
      }
    }
    player.shuffleLibrary(game);
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  UUID activePlayerId=game.getActivePlayerId();
  Player player=game.getPlayer(activePlayerId);
  if (player != null) {
    player.loseLife(3,game);
    TargetCardInLibrary target=new TargetCardInLibrary();
    if (player.searchLibrary(target,game)) {
      for (      UUID cardId : target.getTargets()) {
        Card card=player.getLibrary().getCard(cardId,game);
        player.putInHand(card,game);
      }
    }
    player.shuffleLibrary(game);
    return true;
  }
  return false;
}",0.9032258064516128
159043,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.TAPPED_FOR_MANA && event.getSourceId().equals(getSourceId())) {
    return true;
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  return event.getSourceId().equals(getSourceId());
}",0.6987951807228916
159044,"@Override public boolean activate(Game game,boolean noMana){
  Player controller=game.getPlayer(this.getControllerId());
  if (controller == null) {
    return false;
  }
  if (!modes.choose(game,this)) {
    return false;
  }
  if (this.abilityType.equals(AbilityType.SPELL)) {
    game.getContinuousEffects().applySpliceEffects(this,game);
  }
  sourceObject=this.getSourceObject(game);
  if (sourceObject != null) {
    sourceObject.adjustChoices(this,game);
  }
  for (  UUID modeId : this.getModes().getSelectedModes()) {
    this.getModes().setMode(this.getModes().get(modeId));
    if (getChoices().size() > 0 && getChoices().choose(game,this) == false) {
      logger.debug(""String_Node_Str"");
      return false;
    }
  }
  if (noMana) {
    if (this.getManaCostsToPay().getVariableCosts().size() > 0) {
      int xValue=this.getManaCostsToPay().getX();
      this.getManaCostsToPay().clear();
      VariableManaCost xCosts=new VariableManaCost();
      xCosts.setAmount(xValue);
      this.getManaCostsToPay().add(xCosts);
    }
 else {
      this.getManaCostsToPay().clear();
    }
  }
  if (!activateAlternateOrAdditionalCosts(sourceObject,noMana,controller,game)) {
    if (getAbilityType().equals(AbilityType.SPELL) && ((SpellAbility)this).getSpellAbilityType().equals(SpellAbilityType.LAND_ALTERNATE)) {
      return false;
    }
  }
  VariableManaCost variableManaCost=handleManaXCosts(game,noMana,controller);
  String announceString=handleOtherXCosts(game,controller);
  for (  UUID modeId : this.getModes().getSelectedModes()) {
    this.getModes().setMode(this.getModes().get(modeId));
    if (sourceObject != null && !this.getAbilityType().equals(AbilityType.TRIGGERED)) {
      sourceObject.adjustTargets(this,game);
    }
    if (getTargets().size() > 0 && getTargets().chooseTargets(getEffects().get(0).getOutcome(),this.controllerId,this,game) == false) {
      if (variableManaCost != null || announceString != null) {
        game.informPlayer(controller,new StringBuilder(sourceObject != null ? sourceObject.getLogName() : ""String_Node_Str"").append(""String_Node_Str"").toString());
      }
      return false;
    }
  }
  for (  Cost cost : optionalCosts) {
    if (cost instanceof ManaCost) {
      cost.clearPaid();
      if (controller.chooseUse(Outcome.Benefit,""String_Node_Str"" + cost.getText() + ""String_Node_Str"",game)) {
        manaCostsToPay.add((ManaCost)cost);
      }
    }
  }
  if (sourceObject != null) {
    sourceObject.adjustCosts(this,game);
    for (    Ability ability : sourceObject.getAbilities()) {
      if (ability instanceof AdjustingSourceCosts) {
        ((AdjustingSourceCosts)ability).adjustCosts(this,game);
      }
    }
  }
  if (this instanceof ManaAbility && !costs.pay(this,game,sourceId,controllerId,noMana)) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  if (costModificationActive) {
    game.getContinuousEffects().costModification(this,game);
  }
 else {
    costModificationActive=true;
  }
  UUID activatorId=controllerId;
  if ((this instanceof ActivatedAbilityImpl) && ((ActivatedAbilityImpl)this).getActivatorId() != null) {
    activatorId=((ActivatedAbilityImpl)this).getActivatorId();
  }
  if (!useAlternativeCost(game)) {
    if (!manaCostsToPay.pay(this,game,sourceId,activatorId,false)) {
      return false;
    }
  }
  if (!costs.pay(this,game,sourceId,activatorId,noMana)) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  if (announceString != null) {
    game.informPlayers(announceString);
  }
  if (variableManaCost != null) {
    int xValue=getManaCostsToPay().getX();
    game.informPlayers(new StringBuilder(controller.getName()).append(""String_Node_Str"").append(xValue).append(""String_Node_Str"").append(variableManaCost.getText()).toString());
  }
  activated=true;
  if (this.getAbilityType().equals(AbilityType.MANA)) {
    for (    Cost cost : costs) {
      if (cost instanceof TapSourceCost) {
        Mana mana=null;
        Effect effect=getEffects().get(0);
        if (effect instanceof BasicManaEffect) {
          mana=((BasicManaEffect)effect).getMana(game,this);
        }
 else         if (effect instanceof DynamicManaEffect) {
          mana=((DynamicManaEffect)effect).getMana(game,this);
        }
        if (mana != null) {
          ManaEvent event=new ManaEvent(GameEvent.EventType.TAPPED_FOR_MANA,sourceId,sourceId,controllerId,mana);
          if (!game.replaceEvent(event)) {
            game.fireEvent(event);
          }
        }
        break;
      }
    }
  }
  return true;
}","@Override public boolean activate(Game game,boolean noMana){
  Player controller=game.getPlayer(this.getControllerId());
  if (controller == null) {
    return false;
  }
  if (!modes.choose(game,this)) {
    return false;
  }
  if (this.abilityType.equals(AbilityType.SPELL)) {
    game.getContinuousEffects().applySpliceEffects(this,game);
  }
  sourceObject=this.getSourceObject(game);
  if (sourceObject != null) {
    sourceObject.adjustChoices(this,game);
  }
  for (  UUID modeId : this.getModes().getSelectedModes()) {
    this.getModes().setMode(this.getModes().get(modeId));
    if (getChoices().size() > 0 && getChoices().choose(game,this) == false) {
      logger.debug(""String_Node_Str"");
      return false;
    }
  }
  if (noMana) {
    if (this.getManaCostsToPay().getVariableCosts().size() > 0) {
      int xValue=this.getManaCostsToPay().getX();
      this.getManaCostsToPay().clear();
      VariableManaCost xCosts=new VariableManaCost();
      xCosts.setAmount(xValue);
      this.getManaCostsToPay().add(xCosts);
    }
 else {
      this.getManaCostsToPay().clear();
    }
  }
  if (!activateAlternateOrAdditionalCosts(sourceObject,noMana,controller,game)) {
    if (getAbilityType().equals(AbilityType.SPELL) && ((SpellAbility)this).getSpellAbilityType().equals(SpellAbilityType.LAND_ALTERNATE)) {
      return false;
    }
  }
  VariableManaCost variableManaCost=handleManaXCosts(game,noMana,controller);
  String announceString=handleOtherXCosts(game,controller);
  for (  UUID modeId : this.getModes().getSelectedModes()) {
    this.getModes().setMode(this.getModes().get(modeId));
    if (sourceObject != null && !this.getAbilityType().equals(AbilityType.TRIGGERED)) {
      sourceObject.adjustTargets(this,game);
    }
    if (getTargets().size() > 0 && getTargets().chooseTargets(getEffects().get(0).getOutcome(),this.controllerId,this,game) == false) {
      if (variableManaCost != null || announceString != null) {
        game.informPlayer(controller,new StringBuilder(sourceObject != null ? sourceObject.getLogName() : ""String_Node_Str"").append(""String_Node_Str"").toString());
      }
      return false;
    }
  }
  for (  Cost cost : optionalCosts) {
    if (cost instanceof ManaCost) {
      cost.clearPaid();
      if (controller.chooseUse(Outcome.Benefit,""String_Node_Str"" + cost.getText() + ""String_Node_Str"",game)) {
        manaCostsToPay.add((ManaCost)cost);
      }
    }
  }
  if (sourceObject != null) {
    sourceObject.adjustCosts(this,game);
    for (    Ability ability : sourceObject.getAbilities()) {
      if (ability instanceof AdjustingSourceCosts) {
        ((AdjustingSourceCosts)ability).adjustCosts(this,game);
      }
    }
  }
  if (this instanceof ManaAbility && !costs.pay(this,game,sourceId,controllerId,noMana)) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  if (costModificationActive) {
    game.getContinuousEffects().costModification(this,game);
  }
 else {
    costModificationActive=true;
  }
  UUID activatorId=controllerId;
  if ((this instanceof ActivatedAbilityImpl) && ((ActivatedAbilityImpl)this).getActivatorId() != null) {
    activatorId=((ActivatedAbilityImpl)this).getActivatorId();
  }
  if (!useAlternativeCost(game)) {
    if (!manaCostsToPay.pay(this,game,sourceId,activatorId,false)) {
      return false;
    }
  }
  if (!costs.pay(this,game,sourceId,activatorId,noMana)) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  if (announceString != null) {
    game.informPlayers(announceString);
  }
  if (variableManaCost != null) {
    int xValue=getManaCostsToPay().getX();
    game.informPlayers(new StringBuilder(controller.getName()).append(""String_Node_Str"").append(xValue).append(""String_Node_Str"").append(variableManaCost.getText()).toString());
  }
  activated=true;
  if (this.getAbilityType().equals(AbilityType.MANA)) {
    for (    Cost cost : costs) {
      if (cost instanceof TapSourceCost) {
        Mana mana=null;
        Effect effect=getEffects().get(0);
        if (effect instanceof BasicManaEffect) {
          mana=((BasicManaEffect)effect).getMana(game,this);
        }
 else         if (effect instanceof DynamicManaEffect) {
          mana=((DynamicManaEffect)effect).getMana(game,this);
        }
        if (mana != null && mana.getAny() == 0) {
          ManaEvent event=new ManaEvent(GameEvent.EventType.TAPPED_FOR_MANA,sourceId,sourceId,controllerId,mana);
          if (!game.replaceEvent(event)) {
            game.fireEvent(event);
          }
        }
        break;
      }
    }
  }
  return true;
}",0.997577626073552
159045,"@Override public boolean canAttack(UUID defenderId,Ability source,Game game){
  UUID defendingPlayerId=null;
  Player player=game.getPlayer(defenderId);
  if (player == null) {
    Permanent permanent=game.getPermanent(defenderId);
    if (permanent != null) {
      defendingPlayerId=permanent.getControllerId();
    }
  }
 else {
    defendingPlayerId=defenderId;
  }
  if (defendingPlayerId != null && game.getBattlefield().countAll(filter,defendingPlayerId,game) == 0) {
    return true;
  }
  return true;
}","@Override public boolean canAttack(UUID defenderId,Ability source,Game game){
  UUID defendingPlayerId;
  Player player=game.getPlayer(defenderId);
  if (player == null) {
    Permanent permanent=game.getPermanent(defenderId);
    if (permanent != null) {
      defendingPlayerId=permanent.getControllerId();
    }
 else {
      return false;
    }
  }
 else {
    defendingPlayerId=defenderId;
  }
  if (defendingPlayerId != null && game.getBattlefield().countAll(filter,defendingPlayerId,game) == 0) {
    return false;
  }
  return true;
}",0.9563567362428842
159046,"@Override public List<CardInfo> getCardsByRarity(Rarity rarity){
  if (rarity.equals(Rarity.COMMON)) {
    List<CardInfo> savedCardsInfos=savedCards.get(rarity);
    if (savedCardsInfos == null) {
      CardCriteria criteria=new CardCriteria();
      criteria.setCodes(this.code).notTypes(CardType.LAND);
      criteria.rarities(rarity).doubleFaced(false);
      if (maxCardNumberInBooster != Integer.MAX_VALUE) {
        criteria.maxCardNumber(maxCardNumberInBooster);
      }
      savedCardsInfos=CardRepository.instance.findCards(criteria);
      savedCards.put(rarity,savedCardsInfos);
    }
    return savedCardsInfos;
  }
 else {
    return super.getCardsByRarity(rarity);
  }
}","@Override public List<CardInfo> getCardsByRarity(Rarity rarity){
  if (rarity.equals(Rarity.COMMON)) {
    List<CardInfo> savedCardsInfos=savedCards.get(rarity);
    if (savedCardsInfos == null) {
      CardCriteria criteria=new CardCriteria();
      criteria.setCodes(this.code).notTypes(CardType.LAND);
      criteria.rarities(rarity).doubleFaced(false);
      if (maxCardNumberInBooster != Integer.MAX_VALUE) {
        criteria.maxCardNumber(maxCardNumberInBooster);
      }
      savedCardsInfos=CardRepository.instance.findCards(criteria);
      savedCards.put(rarity,savedCardsInfos);
    }
    List<CardInfo> cards=new ArrayList<>();
    cards.addAll(savedCardsInfos);
    return cards;
  }
 else {
    return super.getCardsByRarity(rarity);
  }
}",0.9423210562890896
159047,"public void subtractCostAddMana(Mana cost,Mana addMana,boolean onlyManaCosts){
  if (isEmpty()) {
    this.add(new Mana());
  }
  boolean repeatable=false;
  if (addMana.getAny() == 1 && addMana.count() == 1 && onlyManaCosts) {
  }
  for (  Mana mana : this) {
    while (mana.includesMana(cost)) {
      mana.subtractCost(cost);
      mana.add(addMana);
      if (!repeatable) {
        break;
      }
    }
  }
}","public void subtractCostAddMana(Mana cost,Mana addMana,boolean onlyManaCosts){
  if (isEmpty()) {
    this.add(new Mana());
  }
  boolean repeatable=false;
  if (addMana.getAny() == 1 && addMana.count() == 1 && onlyManaCosts) {
    repeatable=true;
  }
  for (  Mana mana : this) {
    while (mana.includesMana(cost)) {
      mana.subtractCost(cost);
      mana.add(addMana);
      if (!repeatable) {
        break;
      }
    }
  }
}",0.9752650176678446
159048,"public void addManaWithCost(List<ManaAbility> abilities,Game game){
  if (isEmpty()) {
    this.add(new Mana());
  }
  if (!abilities.isEmpty()) {
    if (abilities.size() == 1) {
      ManaAbility ability=abilities.get(0);
      List<Mana> netManas=abilities.get(0).getNetMana(game);
      if (ability.getManaCosts().isEmpty()) {
        if (netManas.size() == 1) {
          addMana(netManas.get(0));
        }
 else {
          List<Mana> copy=copy();
          this.clear();
          for (          Mana netMana : netManas) {
            for (            Mana mana : copy) {
              Mana newMana=new Mana();
              newMana.add(mana);
              newMana.add(netMana);
              this.add(newMana);
            }
          }
        }
      }
 else {
        if (netManas.size() == 1) {
          subtractCostAddMana(ability.getManaCosts().getMana(),netManas.get(0),ability.getCosts().isEmpty());
        }
 else {
          List<Mana> copy=copy();
          this.clear();
          for (          Mana netMana : netManas) {
            for (            Mana mana : copy) {
              Mana newMana=new Mana();
              newMana.add(mana);
              newMana.add(netMana);
              subtractCostAddMana(ability.getManaCosts().getMana(),netMana,ability.getCosts().isEmpty());
            }
          }
        }
      }
    }
 else     if (abilities.size() > 1) {
      List<Mana> copy=copy();
      this.clear();
      for (      ManaAbility ability : abilities) {
        List<Mana> netManas=ability.getNetMana(game);
        if (ability.getManaCosts().isEmpty()) {
          for (          Mana netMana : netManas) {
            for (            Mana mana : copy) {
              Mana newMana=new Mana();
              newMana.add(mana);
              newMana.add(netMana);
              this.add(newMana);
            }
          }
        }
 else {
          for (          Mana netMana : netManas) {
            for (            Mana mana : copy) {
              Mana newMana=new Mana();
              newMana.add(mana);
              if (mana.contains(ability.getManaCosts().getMana())) {
                newMana.subtractCost(ability.getManaCosts().getMana());
                newMana.add(netMana);
              }
              this.add(newMana);
            }
          }
        }
      }
    }
  }
}","public void addManaWithCost(List<ManaAbility> abilities,Game game){
  if (isEmpty()) {
    this.add(new Mana());
  }
  if (!abilities.isEmpty()) {
    if (abilities.size() == 1) {
      ManaAbility ability=abilities.get(0);
      List<Mana> netManas=abilities.get(0).getNetMana(game);
      if (ability.getManaCosts().isEmpty()) {
        if (netManas.size() == 1) {
          addMana(netManas.get(0));
        }
 else {
          List<Mana> copy=copy();
          this.clear();
          for (          Mana netMana : netManas) {
            for (            Mana mana : copy) {
              Mana newMana=new Mana();
              newMana.add(mana);
              newMana.add(netMana);
              this.add(newMana);
            }
          }
        }
      }
 else {
        if (netManas.size() == 1) {
          subtractCostAddMana(ability.getManaCosts().getMana(),netManas.get(0),ability.getCosts().isEmpty());
        }
 else {
          List<Mana> copy=copy();
          this.clear();
          for (          Mana netMana : netManas) {
            for (            Mana mana : copy) {
              Mana newMana=new Mana();
              newMana.add(mana);
              newMana.add(netMana);
              subtractCostAddMana(ability.getManaCosts().getMana(),netMana,ability.getCosts().isEmpty());
            }
          }
        }
      }
    }
 else     if (abilities.size() > 1) {
      List<Mana> copy=copy();
      this.clear();
      for (      ManaAbility ability : abilities) {
        List<Mana> netManas=ability.getNetMana(game);
        if (ability.getManaCosts().isEmpty()) {
          for (          Mana netMana : netManas) {
            for (            Mana mana : copy) {
              Mana newMana=new Mana();
              newMana.add(mana);
              newMana.add(netMana);
              this.add(newMana);
            }
          }
        }
 else {
          for (          Mana netMana : netManas) {
            for (            Mana mana : copy) {
              Mana newMana=new Mana();
              newMana.add(mana);
              if (mana.includesMana(ability.getManaCosts().getMana())) {
                newMana.subtractCost(ability.getManaCosts().getMana());
                newMana.add(netMana);
                this.add(newMana);
              }
            }
          }
        }
      }
    }
  }
}",0.9816787388155092
159049,"public Mana computeMana(String color,Game game,Ability source){
  this.computedMana.clear();
  if (color != null && !color.isEmpty()) {
switch (color) {
case ""String_Node_Str"":
      computedMana.setRed(new DevotionCount(ColoredManaSymbol.R).calculate(game,source,this));
    break;
case ""String_Node_Str"":
  computedMana.setBlue(new DevotionCount(ColoredManaSymbol.U).calculate(game,source,this));
break;
case ""String_Node_Str"":
computedMana.setWhite(new DevotionCount(ColoredManaSymbol.W).calculate(game,source,this));
break;
case ""String_Node_Str"":
computedMana.setBlack(new DevotionCount(ColoredManaSymbol.B).calculate(game,source,this));
break;
case ""String_Node_Str"":
computedMana.setGreen(new DevotionCount(ColoredManaSymbol.G).calculate(game,source,this));
break;
}
}
return computedMana;
}","public Mana computeMana(String color,Game game,Ability source){
  this.computedMana.clear();
  if (color != null && !color.isEmpty()) {
switch (color) {
case ""String_Node_Str"":
      computedMana.setRed(new DevotionCount(ColoredManaSymbol.R).calculate(game,source,this));
    break;
case ""String_Node_Str"":
  computedMana.setBlue(new DevotionCount(ColoredManaSymbol.U).calculate(game,source,this));
break;
case ""String_Node_Str"":
computedMana.setWhite(new DevotionCount(ColoredManaSymbol.W).calculate(game,source,this));
break;
case ""String_Node_Str"":
computedMana.setBlack(new DevotionCount(ColoredManaSymbol.B).calculate(game,source,this));
break;
case ""String_Node_Str"":
computedMana.setGreen(new DevotionCount(ColoredManaSymbol.G).calculate(game,source,this));
break;
}
}
return computedMana.copy();
}",0.9956331877729258
159050,"public void addManaWithCost(List<ManaAbility> abilities,Game game){
  if (isEmpty()) {
    this.add(new Mana());
  }
  if (!abilities.isEmpty()) {
    if (abilities.size() == 1) {
      ManaAbility ability=abilities.get(0);
      List<Mana> netManas=abilities.get(0).getNetMana(game);
      if (ability.getManaCosts().isEmpty()) {
        if (netManas.size() == 1) {
          addMana(netManas.get(0));
        }
 else {
          List<Mana> copy=copy();
          this.clear();
          for (          Mana netMana : netManas) {
            for (            Mana mana : copy) {
              Mana newMana=new Mana();
              newMana.add(mana);
              newMana.add(netMana);
              this.add(newMana);
            }
          }
        }
      }
 else {
        if (netManas.size() == 1) {
          subtractCostAddMana(ability.getManaCosts().getMana(),netManas.get(0),ability.getCosts().isEmpty());
        }
 else {
          List<Mana> copy=copy();
          this.clear();
          for (          Mana netMana : netManas) {
            for (            Mana mana : copy) {
              Mana newMana=new Mana();
              newMana.add(mana);
              newMana.add(netMana);
              subtractCostAddMana(ability.getManaCosts().getMana(),netMana,ability.getCosts().isEmpty());
            }
          }
        }
      }
    }
 else     if (abilities.size() > 1) {
      List<Mana> copy=copy();
      this.clear();
      for (      ManaAbility ability : abilities) {
        List<Mana> netManas=ability.getNetMana(game);
        if (ability.getManaCosts().isEmpty()) {
          for (          Mana netMana : netManas) {
            for (            Mana mana : copy) {
              Mana newMana=new Mana();
              newMana.add(mana);
              newMana.add(netMana);
              this.add(newMana);
            }
          }
        }
 else {
          for (          Mana netMana : netManas) {
            for (            Mana mana : copy) {
              Mana newMana=new Mana();
              newMana.add(mana);
              if (mana.includesMana(ability.getManaCosts().getMana())) {
                newMana.subtractCost(ability.getManaCosts().getMana());
                newMana.add(netMana);
                this.add(newMana);
              }
            }
          }
        }
      }
    }
  }
}","public void addManaWithCost(List<ManaAbility> abilities,Game game){
  if (isEmpty()) {
    this.add(new Mana());
  }
  if (!abilities.isEmpty()) {
    if (abilities.size() == 1) {
      ManaAbility ability=abilities.get(0);
      List<Mana> netManas=abilities.get(0).getNetMana(game);
      if (ability.getManaCosts().isEmpty()) {
        if (netManas.size() == 1) {
          addMana(netManas.get(0));
        }
 else {
          List<Mana> copy=copy();
          this.clear();
          for (          Mana netMana : netManas) {
            for (            Mana mana : copy) {
              Mana newMana=new Mana();
              newMana.add(mana);
              newMana.add(netMana);
              this.add(newMana);
            }
          }
        }
      }
 else {
        if (netManas.size() == 1) {
          subtractCostAddMana(ability.getManaCosts().getMana(),netManas.get(0),ability.getCosts().isEmpty());
        }
 else {
          List<Mana> copy=copy();
          this.clear();
          for (          Mana netMana : netManas) {
            for (            Mana mana : copy) {
              Mana newMana=new Mana();
              newMana.add(mana);
              newMana.add(netMana);
              subtractCostAddMana(ability.getManaCosts().getMana(),netMana,ability.getCosts().isEmpty());
            }
          }
        }
      }
    }
 else     if (abilities.size() > 1) {
      List<Mana> copy=copy();
      this.clear();
      for (      ManaAbility ability : abilities) {
        List<Mana> netManas=ability.getNetMana(game);
        if (ability.getManaCosts().isEmpty()) {
          for (          Mana netMana : netManas) {
            for (            Mana mana : copy) {
              Mana newMana=new Mana();
              newMana.add(mana);
              newMana.add(netMana);
              this.add(newMana);
            }
          }
        }
 else {
          for (          Mana netMana : netManas) {
            CombineWithExisting:             for (            Mana mana : copy) {
              Mana newMana=new Mana();
              newMana.add(mana);
              if (mana.includesMana(ability.getManaCosts().getMana())) {
                newMana.subtractCost(ability.getManaCosts().getMana());
                newMana.add(netMana);
                for (                Mana existingMana : this) {
                  Mana moreValuable=Mana.getMoreValuableMana(newMana,existingMana);
                  if (moreValuable != null) {
                    existingMana.setToMana(moreValuable);
                    continue CombineWithExisting;
                  }
                }
                this.add(newMana);
              }
            }
          }
        }
      }
    }
  }
}",0.9235317303902246
159051,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Map<UUID,Integer> playerAmount=new HashMap<UUID,Integer>();
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        int amount=0;
        for (        Permanent permanent : game.getBattlefield().getAllActivePermanents(filter,playerId,game)) {
          amount++;
          permanent.destroy(source.getSourceId(),game,false);
        }
        playerAmount.put(playerId,new Integer(amount));
      }
    }
    for (    Map.Entry<UUID,Integer> entry : playerAmount.entrySet()) {
      Player player=game.getPlayer(entry.getKey());
      if (player != null) {
        TargetCardInLibrary target=new TargetCardInLibrary(0,entry.getValue().intValue(),new FilterBasicLandCard());
        if (player.searchLibrary(target,game)) {
          if (target.getTargets().size() > 0) {
            for (            UUID cardId : (List<UUID>)target.getTargets()) {
              Card card=player.getLibrary().getCard(cardId,game);
              if (card != null) {
                card.putOntoBattlefield(game,Zone.LIBRARY,source.getSourceId(),player.getId(),false);
              }
            }
          }
        }
        player.shuffleLibrary(game);
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Map<UUID,Integer> playerAmount=new HashMap<>();
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        int amount=0;
        for (        Permanent permanent : game.getBattlefield().getAllActivePermanents(filter,playerId,game)) {
          amount++;
          permanent.destroy(source.getSourceId(),game,false);
        }
        playerAmount.put(playerId,amount);
      }
    }
    for (    Map.Entry<UUID,Integer> entry : playerAmount.entrySet()) {
      Player player=game.getPlayer(entry.getKey());
      if (player != null) {
        TargetCardInLibrary target=new TargetCardInLibrary(0,entry.getValue(),new FilterBasicLandCard());
        if (player.searchLibrary(target,game)) {
          if (target.getTargets().size() > 0) {
            for (            UUID cardId : target.getTargets()) {
              Card card=player.getLibrary().getCard(cardId,game);
              if (card != null) {
                card.putOntoBattlefield(game,Zone.LIBRARY,source.getSourceId(),player.getId(),false);
              }
            }
          }
        }
        player.shuffleLibrary(game);
      }
    }
    return true;
  }
  return false;
}",0.978601997146933
159052,"@Override public Set<UUID> possibleTargets(UUID sourceControllerId,Game game){
  Set<UUID> possibleTargets=new HashSet<UUID>();
  for (  StackObject stackObject : game.getStack()) {
    Spell spell=game.getStack().getSpell(stackObject.getId());
    if (spell != null && filter.match(spell,null,sourceControllerId,game) && filter.match(spell,game)) {
      possibleTargets.add(spell.getId());
    }
  }
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(filterPermanent,sourceControllerId,game)) {
    if (filter.match(permanent,null,sourceControllerId,game)) {
      possibleTargets.add(permanent.getId());
    }
  }
  return possibleTargets;
}","@Override public Set<UUID> possibleTargets(UUID sourceControllerId,Game game){
  Set<UUID> possibleTargets=new HashSet<>();
  for (  StackObject stackObject : game.getStack()) {
    Spell spell=game.getStack().getSpell(stackObject.getId());
    if (spell != null && filter.match(spell,null,sourceControllerId,game) && filter.match(spell,game)) {
      possibleTargets.add(spell.getId());
    }
  }
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(filterPermanent,sourceControllerId,game)) {
    if (filter.match(permanent,null,sourceControllerId,game)) {
      possibleTargets.add(permanent.getId());
    }
  }
  return possibleTargets;
}",0.9969879518072288
159053,"/** 
 * Momentous Fall Instant {2}{G}{G} As an additional cost to cast Momentous Fall, sacrifice a creature. You draw cards equal to the sacrificed creature's power, then you gain life equal to its toughness.
 */
@Test public void testSacrificeCostAndLKI(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",4);
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  setStopAt(1,PhaseStep.BEGIN_COMBAT);
  execute();
  assertPermanentCount(playerA,""String_Node_Str"",1);
  assertPowerToughness(playerA,""String_Node_Str"",5,4);
  assertHandCount(playerA,4);
  assertLife(playerA,23);
}","/** 
 * Momentous Fall Instant {2}{G}{G} As an additional cost to cast Momentous Fall, sacrifice a creature. You draw cards equal to the sacrificed creature's power, then you gain life equal to its toughness.
 */
@Test public void testSacrificeCostAndLKI(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",4);
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  setStopAt(1,PhaseStep.BEGIN_COMBAT);
  execute();
  assertPermanentCount(playerA,""String_Node_Str"",1);
  assertCounterCount(""String_Node_Str"",CounterType.P1P1,1);
  assertPowerToughness(playerA,""String_Node_Str"",5,4);
  assertHandCount(playerA,4);
  assertLife(playerA,23);
}",0.9620733249051832
159054,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getTargetId().equals(source.getSourceId())) {
    UUID target=(UUID)game.getState().getValue(""String_Node_Str"" + source.getSourceId());
    if (target.equals(source.getSourceId())) {
      game.getState().setValue(""String_Node_Str"" + source.getSourceId(),null);
      return true;
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getTargetId().equals(source.getSourceId())) {
    UUID targetId=(UUID)game.getState().getValue(""String_Node_Str"" + source.getSourceId());
    Logger.getLogger(UndyingReplacementEffect.class).info(""String_Node_Str"" + targetId + ""String_Node_Str""+ event.getTargetId());
    if (targetId != null && targetId.equals(source.getSourceId())) {
      return true;
    }
  }
  return false;
}",0.6389850057670127
159055,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (super.checkTrigger(event,game)) {
    Permanent permanent=(Permanent)game.getLastKnownInformation(event.getTargetId(),Zone.BATTLEFIELD);
    if (!permanent.getCounters().containsKey(CounterType.P1P1) || permanent.getCounters().getCount(CounterType.P1P1) == 0) {
      game.getState().setValue(""String_Node_Str"" + getSourceId(),permanent.getId());
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (super.checkTrigger(event,game)) {
    Permanent permanent=(Permanent)game.getLastKnownInformation(event.getTargetId(),Zone.BATTLEFIELD);
    if (!permanent.getCounters().containsKey(CounterType.P1P1) || permanent.getCounters().getCount(CounterType.P1P1) == 0) {
      Logger.getLogger(UndyingAbility.class).info(""String_Node_Str"" + getSourceId());
      game.getState().setValue(""String_Node_Str"" + getSourceId(),permanent.getId());
      return true;
    }
  }
  return false;
}",0.8700787401574803
159056,"@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  Permanent permanent=game.getPermanent(event.getTargetId());
  if (permanent != null) {
    permanent.addCounters(CounterType.P1P1.createInstance(),game);
  }
  used=true;
  return false;
}","@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  Permanent permanent=game.getPermanent(event.getTargetId());
  if (permanent != null) {
    game.getState().setValue(""String_Node_Str"" + source.getSourceId(),null);
    permanent.addCounters(CounterType.P1P1.createInstance(),game);
  }
  used=true;
  return false;
}",0.875605815831987
159057,"private void addPopupMenuCardPanel(){
  JMenuItem menuItem;
  menuItem=new JMenuItem(""String_Node_Str"");
  popupMenuCardPanel.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      cardsHidden.add(cardIdPopupMenu);
      pickedCardsShown.remove(cardIdPopupMenu);
      draftPicks.loadCards(CardsViewUtil.convertSimple(pickedCardsShown),bigCard,null);
    }
  }
);
}","private void addPopupMenuCardPanel(){
  JMenuItem menuItem;
  menuItem=new JMenuItem(""String_Node_Str"");
  popupMenuCardPanel.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      hideThisCard(cardIdPopupMenu);
    }
  }
);
}",0.753004005340454
159058,"private void showAgainAllHiddenCards(){
  cardsHidden.clear();
  draftPicks.loadCards(CardsViewUtil.convertSimple(pickedCards),bigCard,null);
}","private void showAgainAllHiddenCards(){
  for (  UUID card : cardsHidden) {
    pickedCardsShown.put(card,pickedCards.get(card));
  }
  cardsHidden.clear();
  draftPicks.loadCards(CardsViewUtil.convertSimple(pickedCardsShown),bigCard,null);
}",0.7064935064935065
159059,"@Override public void adjustTargets(Ability ability,Game game){
  for (  UUID modeId : ability.getModes().getSelectedModes()) {
    Mode mode=ability.getModes().get(modeId);
    for (    Effect effect : mode.getEffects()) {
      if (effect instanceof ReturnFromGraveyardToBattlefieldTargetEffect) {
        mode.getTargets().clear();
        int xValue=ability.getManaCostsToPay().getX();
        FilterCard filter=new FilterCreatureCard(""String_Node_Str"" + xValue + ""String_Node_Str"");
        filter.add(new ConvertedManaCostPredicate(Filter.ComparisonType.LessThan,xValue + 1));
        mode.getTargets().add(new TargetCardInYourGraveyard(filter));
      }
      if (effect instanceof GainAbilityTargetEffect) {
        mode.getTargets().clear();
        int xValue=ability.getManaCostsToPay().getX();
        FilterCreaturePermanent filter=new FilterCreaturePermanent(""String_Node_Str"");
        mode.getTargets().add(new TargetCreaturePermanent(0,xValue,filter,false));
      }
    }
  }
}","@Override public void adjustTargets(Ability ability,Game game){
  Mode mode=ability.getModes().getMode();
  for (  Effect effect : mode.getEffects()) {
    if (effect instanceof ReturnFromGraveyardToBattlefieldTargetEffect) {
      mode.getTargets().clear();
      int xValue=ability.getManaCostsToPay().getX();
      FilterCard filter=new FilterCreatureCard(""String_Node_Str"" + xValue + ""String_Node_Str"");
      filter.add(new ConvertedManaCostPredicate(Filter.ComparisonType.LessThan,xValue + 1));
      mode.getTargets().add(new TargetCardInYourGraveyard(filter));
    }
    if (effect instanceof GainAbilityTargetEffect) {
      mode.getTargets().clear();
      int xValue=ability.getManaCostsToPay().getX();
      FilterCreaturePermanent filter=new FilterCreaturePermanent(""String_Node_Str"");
      mode.getTargets().add(new TargetCreaturePermanent(0,xValue,filter,false));
    }
  }
}",0.7433722163308589
159060,"private boolean checkSpell(Spell spell,Game game){
  if (spell != null && (spell.getCardType().contains(CardType.INSTANT) || spell.getCardType().contains(CardType.SORCERY))) {
    UUID targetGolem=null;
    for (    SpellTargetAddress addr : SpellTargetAddress.walk(spell)) {
      Target targetInstance=addr.getTarget(spell);
      for (      UUID target : targetInstance.getTargets()) {
        Permanent permanent=game.getPermanent(target);
        if (permanent == null || !permanent.hasSubtype(""String_Node_Str"")) {
          return false;
        }
        if (targetGolem == null) {
          targetGolem=target;
        }
 else {
          if (!targetGolem.equals(target)) {
            return false;
          }
        }
      }
    }
    if (targetGolem != null) {
      getEffects().get(0).setTargetPointer(new FixedTarget(spell.getId()));
      getEffects().get(0).setValue(""String_Node_Str"",targetGolem);
      return true;
    }
  }
  return false;
}","private boolean checkSpell(Spell spell,Game game){
  if (spell != null && (spell.getCardType().contains(CardType.INSTANT) || spell.getCardType().contains(CardType.SORCERY))) {
    UUID targetGolem=null;
    for (    SpellTargetAddress addr : SpellTargetAddress.walk(spell)) {
      Target targetInstance=addr.getTarget(spell);
      for (      UUID target : targetInstance.getTargets()) {
        Permanent permanent=game.getPermanent(target);
        if (permanent == null || !permanent.hasSubtype(""String_Node_Str"")) {
          return false;
        }
        if (targetGolem == null) {
          targetGolem=target;
        }
 else {
          if (!targetGolem.equals(target)) {
            return false;
          }
        }
      }
    }
    if (targetGolem != null) {
      getEffects().get(0).setValue(""String_Node_Str"",spell);
      getEffects().get(0).setValue(""String_Node_Str"",targetGolem);
      return true;
    }
  }
  return false;
}",0.9284595300261096
159061,"@Override public boolean apply(Game game,Ability source){
  Spell spell=game.getStack().getSpell(targetPointer.getFirst(game,source));
  if (spell != null) {
    UUID targetedGolem=(UUID)getValue(""String_Node_Str"");
    for (    Permanent permanent : game.getBattlefield().getActivePermanents(filterGolem,source.getControllerId(),source.getSourceId(),game)) {
      if (permanent.getId().equals(targetedGolem)) {
        continue;
      }
      boolean legal=true;
      for (      SpellTargetAddress addr : SpellTargetAddress.walk(spell)) {
        Target target=addr.getTarget(spell);
        if (!target.canTarget(permanent.getId(),game)) {
          legal=false;
          break;
        }
      }
      if (legal) {
        Spell copy=spell.copySpell();
        copy.setControllerId(spell.getControllerId());
        copy.setCopiedSpell(true);
        for (        SpellTargetAddress addr : SpellTargetAddress.walk(copy)) {
          Target target=addr.getTarget(copy);
          target.clearChosen();
          target.add(permanent.getId(),game);
        }
        game.getStack().push(copy);
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Spell spell=(Spell)getValue(""String_Node_Str"");
  if (spell != null) {
    UUID targetedGolem=(UUID)getValue(""String_Node_Str"");
    Map<UUID,Spell> targetable=new HashMap<>();
    for (    Permanent permanent : game.getBattlefield().getActivePermanents(filterGolem,source.getControllerId(),source.getSourceId(),game)) {
      if (permanent.getId().equals(targetedGolem)) {
        continue;
      }
      boolean legal=true;
      for (      SpellTargetAddress addr : SpellTargetAddress.walk(spell)) {
        Target target=addr.getTarget(spell);
        if (!target.canTarget(permanent.getId(),game)) {
          legal=false;
          break;
        }
      }
      if (legal) {
        Spell copy=spell.copySpell();
        copy.setCopiedSpell(true);
        for (        SpellTargetAddress addr : SpellTargetAddress.walk(copy)) {
          Target target=addr.getTarget(copy);
          target.clearChosen();
          target.add(permanent.getId(),game);
        }
        targetable.put(permanent.getId(),copy);
      }
    }
    UUID spellController=spell.getControllerId();
    while (targetable.size() > 0) {
      FilterPermanent filter=new FilterPermanent(""String_Node_Str"",""String_Node_Str"" + Integer.toString(targetable.size()) + ""String_Node_Str"");
      filter.add(new FromSetPredicate(targetable.keySet()));
      TargetPermanent target=new TargetPermanent(0,1,filter,true);
      if (target.possibleTargets(spellController,game).size() > 1 && target.canChoose(spell.getSourceId(),spellController,game)) {
        game.getPlayer(spellController).choose(Outcome.Neutral,target,source.getId(),game);
      }
      Collection<UUID> chosen=target.getTargets();
      if (chosen.size() == 0) {
        chosen=targetable.keySet();
      }
      List<UUID> toDelete=new ArrayList<>();
      for (      UUID chosenId : chosen) {
        Spell chosenCopy=targetable.get(chosenId);
        if (chosenCopy != null) {
          game.getStack().push(chosenCopy);
          toDelete.add(chosenId);
        }
      }
      for (      UUID id : toDelete) {
        targetable.remove(id);
      }
    }
    return true;
  }
  return false;
}",0.5904477611940299
159062,"@Override public boolean mustBlock(Game game){
  return true;
}","@Override public boolean mustBlock(Game game){
  return false;
}",0.9448818897637796
159063,"@Override public boolean mustAttack(Game game){
  return false;
}","@Override public boolean mustAttack(Game game){
  return true;
}",0.9457364341085271
159064,"@Override public boolean checksEventType(GameEvent event,Game game){
switch (event.getType()) {
case DAMAGED_CREATURE:
case DAMAGED_PLAYER:
case DAMAGE_PLANESWALKER:
    return true;
default :
  return false;
}
}","@Override public boolean checksEventType(GameEvent event,Game game){
switch (event.getType()) {
case DAMAGE_CREATURE:
case DAMAGE_PLAYER:
case DAMAGE_PLANESWALKER:
    return true;
default :
  return false;
}
}",0.995260663507109
159065,"public synchronized void leaveTable(UUID userId){
  if (table == null) {
    logger.error(""String_Node_Str"" + userId);
    return;
  }
  if (table.isTournament() && tournament == null) {
    logger.error(""String_Node_Str"" + userId + ""String_Node_Str""+ table.getId());
    return;
  }
  if (table != null && this.userId != null && this.userId.equals(userId) && (table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.READY_TO_START))) {
    TableManager.getInstance().removeTable(table.getId());
  }
 else {
    UUID playerId=userPlayerMap.get(userId);
    if (playerId != null) {
      if (table.getState() == TableState.WAITING || table.getState() == TableState.READY_TO_START) {
        table.leaveNotStartedTable(playerId);
        if (table.isTournament()) {
          tournament.removePlayer(playerId);
        }
 else {
          match.quitMatch(playerId);
        }
        User user=UserManager.getInstance().getUser(userId);
        if (user != null) {
          ChatManager.getInstance().broadcast(chatId,user.getName(),""String_Node_Str"",ChatMessage.MessageColor.BLUE,true,ChatMessage.MessageType.STATUS,ChatMessage.SoundToPlay.PlayerLeft);
          user.removeTable(playerId);
        }
 else {
          logger.debug(""String_Node_Str"" + userId + ""String_Node_Str""+ table.getId());
        }
        userPlayerMap.remove(userId);
      }
 else       if (!table.getState().equals(TableState.FINISHED)) {
        if (table.isTournament()) {
          logger.debug(""String_Node_Str"" + userId);
          TableManager.getInstance().userQuitTournamentSubTables(tournament.getId(),userId);
          logger.debug(""String_Node_Str"" + table.getTournament().getId() + ""String_Node_Str""+ table.getTournament().getTournamentState()+ ""String_Node_Str"");
          TournamentManager.getInstance().quit(tournament.getId(),userId);
        }
 else {
          MatchPlayer matchPlayer=match.getPlayer(playerId);
          if (matchPlayer != null && !match.hasEnded() && !matchPlayer.hasQuit()) {
            Game game=match.getGame();
            if (game != null && !game.hasEnded()) {
              Player player=match.getPlayer(playerId).getPlayer();
              if (player != null && player.isInGame()) {
                GameManager.getInstance().quitMatch(game.getId(),userId);
              }
              match.quitMatch(playerId);
            }
 else {
              if (table.getState().equals(TableState.SIDEBOARDING)) {
                if (!matchPlayer.isDoneSideboarding()) {
                  matchPlayer.submitDeck(matchPlayer.getDeck());
                }
              }
              match.quitMatch(playerId);
            }
          }
        }
      }
    }
 else {
      logger.error(""String_Node_Str"" + userId);
    }
  }
}","public synchronized void leaveTable(UUID userId){
  if (table == null) {
    logger.error(""String_Node_Str"" + userId);
    return;
  }
  if (table.isTournament() && tournament == null) {
    logger.error(""String_Node_Str"" + userId + ""String_Node_Str""+ table.getId());
    return;
  }
  if (table != null && this.userId != null && this.userId.equals(userId) && (table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.READY_TO_START))) {
    TableManager.getInstance().removeTable(table.getId());
  }
 else {
    UUID playerId=userPlayerMap.get(userId);
    if (playerId != null) {
      if (table.getState() == TableState.WAITING || table.getState() == TableState.READY_TO_START) {
        table.leaveNotStartedTable(playerId);
        if (table.isTournament()) {
          tournament.removePlayer(playerId);
        }
 else {
          match.quitMatch(playerId);
        }
        User user=UserManager.getInstance().getUser(userId);
        if (user != null) {
          ChatManager.getInstance().broadcast(chatId,user.getName(),""String_Node_Str"",ChatMessage.MessageColor.BLUE,true,ChatMessage.MessageType.STATUS,ChatMessage.SoundToPlay.PlayerLeft);
          if (!table.isTournamentSubTable()) {
            user.removeTable(playerId);
          }
        }
 else {
          logger.debug(""String_Node_Str"" + userId + ""String_Node_Str""+ table.getId());
        }
        userPlayerMap.remove(userId);
      }
 else       if (!table.getState().equals(TableState.FINISHED)) {
        if (table.isTournament()) {
          logger.debug(""String_Node_Str"" + userId);
          TableManager.getInstance().userQuitTournamentSubTables(tournament.getId(),userId);
          logger.debug(""String_Node_Str"" + table.getTournament().getId() + ""String_Node_Str""+ table.getTournament().getTournamentState()+ ""String_Node_Str"");
          TournamentManager.getInstance().quit(tournament.getId(),userId);
        }
 else {
          MatchPlayer matchPlayer=match.getPlayer(playerId);
          if (matchPlayer != null && !match.hasEnded() && !matchPlayer.hasQuit()) {
            Game game=match.getGame();
            if (game != null && !game.hasEnded()) {
              Player player=match.getPlayer(playerId).getPlayer();
              if (player != null && player.isInGame()) {
                GameManager.getInstance().quitMatch(game.getId(),userId);
              }
              match.quitMatch(playerId);
            }
 else {
              if (table.getState().equals(TableState.SIDEBOARDING)) {
                if (!matchPlayer.isDoneSideboarding()) {
                  matchPlayer.submitDeck(matchPlayer.getDeck());
                }
              }
              match.quitMatch(playerId);
            }
          }
        }
      }
    }
 else {
      logger.error(""String_Node_Str"" + userId);
    }
  }
}",0.9891129751918616
159066,"void cleanUp(){
  for (  Map.Entry<UUID,UUID> entry : userPlayerMap.entrySet()) {
    User user=UserManager.getInstance().getUser(entry.getKey());
    if (user != null) {
      user.removeTable(entry.getValue());
    }
  }
  ChatManager.getInstance().destroyChatSession(chatId);
}","void cleanUp(){
  if (!table.isTournamentSubTable()) {
    for (    Map.Entry<UUID,UUID> entry : userPlayerMap.entrySet()) {
      User user=UserManager.getInstance().getUser(entry.getKey());
      if (user != null) {
        user.removeTable(entry.getValue());
      }
    }
  }
  ChatManager.getInstance().destroyChatSession(chatId);
}",0.8946515397082658
159067,"private void matchEnd(){
  if (match != null) {
    for (    Entry<UUID,UUID> entry : userPlayerMap.entrySet()) {
      MatchPlayer matchPlayer=match.getPlayer(entry.getValue());
      if (matchPlayer != null) {
        if (!matchPlayer.hasQuit()) {
          User user=UserManager.getInstance().getUser(entry.getKey());
          if (user != null) {
            if (table.getState().equals(TableState.SIDEBOARDING)) {
              StringBuilder sb=new StringBuilder();
              if (table.isTournamentSubTable()) {
                sb.append(""String_Node_Str"");
                sb.append(table.getTournament().getRounds().size());
                sb.append(""String_Node_Str"");
              }
 else {
                sb.append(""String_Node_Str"").append(match.getName()).append(""String_Node_Str"");
              }
              if (match.getPlayers().size() > 2) {
                sb.append(""String_Node_Str"");
              }
 else {
                sb.append(""String_Node_Str"");
              }
              user.showUserMessage(""String_Node_Str"",sb.toString());
            }
            user.removeTable(entry.getValue());
          }
        }
      }
    }
    match.cleanUpOnMatchEnd(ConfigSettings.getInstance().isSaveGameActivated(),table.isTournament());
  }
}","private void matchEnd(){
  if (match != null) {
    for (    Entry<UUID,UUID> entry : userPlayerMap.entrySet()) {
      MatchPlayer matchPlayer=match.getPlayer(entry.getValue());
      if (matchPlayer != null) {
        if (!matchPlayer.hasQuit()) {
          User user=UserManager.getInstance().getUser(entry.getKey());
          if (user != null) {
            if (table.getState().equals(TableState.SIDEBOARDING)) {
              StringBuilder sb=new StringBuilder();
              if (table.isTournamentSubTable()) {
                sb.append(""String_Node_Str"");
                sb.append(table.getTournament().getRounds().size());
                sb.append(""String_Node_Str"");
              }
 else {
                sb.append(""String_Node_Str"").append(match.getName()).append(""String_Node_Str"");
              }
              if (match.getPlayers().size() > 2) {
                sb.append(""String_Node_Str"");
              }
 else {
                sb.append(""String_Node_Str"");
              }
              user.showUserMessage(""String_Node_Str"",sb.toString());
            }
            if (!table.isTournamentSubTable()) {
              user.removeTable(entry.getValue());
            }
          }
        }
      }
    }
    match.cleanUpOnMatchEnd(ConfigSettings.getInstance().isSaveGameActivated(),table.isTournament());
  }
}",0.9751434034416826
159068,"public synchronized boolean joinTable(UUID userId,String name,String playerType,int skill,DeckCardLists deckList,String password) throws MageException {
  User user=UserManager.getInstance().getUser(userId);
  if (user == null) {
    return false;
  }
  if (userPlayerMap.containsKey(userId) && playerType.equals(""String_Node_Str"")) {
    user.showUserMessage(""String_Node_Str"",new StringBuilder(""String_Node_Str"").toString());
    return false;
  }
  if (table.getState() != TableState.WAITING) {
    user.showUserMessage(""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  if (!table.getMatch().getOptions().getPassword().isEmpty() && playerType.equals(""String_Node_Str"")) {
    if (!table.getMatch().getOptions().getPassword().equals(password)) {
      user.showUserMessage(""String_Node_Str"",""String_Node_Str"");
      return false;
    }
  }
  Seat seat=table.getNextAvailableSeat(playerType);
  if (seat == null) {
    user.showUserMessage(""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  Deck deck=Deck.load(deckList,false,false);
  if (!Main.isTestMode() && !table.getValidator().validate(deck)) {
    StringBuilder sb=new StringBuilder(""String_Node_Str"").append(name).append(""String_Node_Str"").append(table.getValidator().getName()).append(""String_Node_Str"");
    for (    Map.Entry<String,String> entry : table.getValidator().getInvalid().entrySet()) {
      sb.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    user.showUserMessage(""String_Node_Str"",sb.toString());
    if (isOwner(userId)) {
      logger.debug(""String_Node_Str"" + table.getId());
      TableManager.getInstance().removeTable(table.getId());
    }
    return false;
  }
  Player player=createPlayer(name,seat.getPlayerType(),skill);
  if (player == null) {
    String message=new StringBuilder(""String_Node_Str"").append(name).append(""String_Node_Str"").append(seat.getPlayerType()).toString();
    logger.warn(new StringBuilder(""String_Node_Str"").append(user.getName()).append(""String_Node_Str"").append(message).toString());
    user.showUserMessage(""String_Node_Str"",message);
    return false;
  }
  if (!player.canJoinTable(table)) {
    user.showUserMessage(""String_Node_Str"",new StringBuilder(""String_Node_Str"").append(seat.getPlayerType()).append(""String_Node_Str"").toString());
    return false;
  }
  match.addPlayer(player,deck);
  table.joinTable(player,seat);
  logger.trace(player.getName() + ""String_Node_Str"" + table.getId());
  if (seat.getPlayer().isHuman()) {
    user.addTable(player.getId(),table);
    user.ccJoinedTable(table.getRoomId(),table.getId(),false);
    userPlayerMap.put(userId,player.getId());
  }
  return true;
}","public synchronized boolean joinTable(UUID userId,String name,String playerType,int skill,DeckCardLists deckList,String password) throws MageException {
  User user=UserManager.getInstance().getUser(userId);
  if (user == null) {
    return false;
  }
  if (userPlayerMap.containsKey(userId) && playerType.equals(""String_Node_Str"")) {
    user.showUserMessage(""String_Node_Str"",new StringBuilder(""String_Node_Str"").toString());
    return false;
  }
  if (table.getState() != TableState.WAITING) {
    user.showUserMessage(""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  if (!table.getMatch().getOptions().getPassword().isEmpty() && playerType.equals(""String_Node_Str"")) {
    if (!table.getMatch().getOptions().getPassword().equals(password)) {
      user.showUserMessage(""String_Node_Str"",""String_Node_Str"");
      return false;
    }
  }
  Seat seat=table.getNextAvailableSeat(playerType);
  if (seat == null) {
    user.showUserMessage(""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  Deck deck=Deck.load(deckList,false,false);
  if (!Main.isTestMode() && !table.getValidator().validate(deck)) {
    StringBuilder sb=new StringBuilder(""String_Node_Str"").append(name).append(""String_Node_Str"").append(table.getValidator().getName()).append(""String_Node_Str"");
    for (    Map.Entry<String,String> entry : table.getValidator().getInvalid().entrySet()) {
      sb.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    user.showUserMessage(""String_Node_Str"",sb.toString());
    if (isOwner(userId)) {
      logger.debug(""String_Node_Str"" + table.getId());
      TableManager.getInstance().removeTable(table.getId());
    }
    return false;
  }
  Player player=createPlayer(name,seat.getPlayerType(),skill);
  if (player == null) {
    String message=new StringBuilder(""String_Node_Str"").append(name).append(""String_Node_Str"").append(seat.getPlayerType()).toString();
    logger.warn(new StringBuilder(""String_Node_Str"").append(user.getName()).append(""String_Node_Str"").append(message).toString());
    user.showUserMessage(""String_Node_Str"",message);
    return false;
  }
  if (!player.canJoinTable(table)) {
    user.showUserMessage(""String_Node_Str"",new StringBuilder(""String_Node_Str"").append(seat.getPlayerType()).append(""String_Node_Str"").toString());
    return false;
  }
  match.addPlayer(player,deck);
  table.joinTable(player,seat);
  logger.trace(player.getName() + ""String_Node_Str"" + table.getId());
  if (seat.getPlayer().isHuman()) {
    if (!table.isTournamentSubTable()) {
      user.addTable(player.getId(),table);
    }
    user.ccJoinedTable(table.getRoomId(),table.getId(),false);
    userPlayerMap.put(userId,player.getId());
  }
  return true;
}",0.9882438053897632
159069,"public AbilityImpl(final AbilityImpl ability){
  this.id=ability.id;
  this.originalId=ability.originalId;
  this.abilityType=ability.abilityType;
  this.controllerId=ability.controllerId;
  this.sourceId=ability.sourceId;
  this.zone=ability.zone;
  this.name=ability.name;
  this.usesStack=ability.usesStack;
  this.manaCosts=ability.manaCosts;
  this.manaCostsToPay=ability.manaCostsToPay.copy();
  this.costs=ability.costs.copy();
  this.optionalCosts=ability.optionalCosts.copy();
  for (  AlternativeCost cost : ability.alternativeCosts) {
    this.alternativeCosts.add((AlternativeCost)cost.copy());
  }
  this.modes=ability.modes.copy();
  this.ruleAtTheTop=ability.ruleAtTheTop;
  this.ruleVisible=ability.ruleVisible;
  this.ruleAdditionalCostsVisible=ability.ruleAdditionalCostsVisible;
  this.costModificationActive=ability.costModificationActive;
  this.worksFaceDown=ability.worksFaceDown;
}","public AbilityImpl(final AbilityImpl ability){
  this.id=ability.id;
  this.originalId=ability.originalId;
  this.abilityType=ability.abilityType;
  this.controllerId=ability.controllerId;
  this.sourceId=ability.sourceId;
  this.zone=ability.zone;
  this.name=ability.name;
  this.usesStack=ability.usesStack;
  this.manaCosts=ability.manaCosts;
  this.manaCostsToPay=ability.manaCostsToPay.copy();
  this.costs=ability.costs.copy();
  this.optionalCosts=ability.optionalCosts.copy();
  for (  AlternativeCost cost : ability.alternativeCosts) {
    this.alternativeCosts.add((AlternativeCost)cost.copy());
  }
  this.modes=ability.modes.copy();
  this.ruleAtTheTop=ability.ruleAtTheTop;
  this.ruleVisible=ability.ruleVisible;
  this.ruleAdditionalCostsVisible=ability.ruleAdditionalCostsVisible;
  this.costModificationActive=ability.costModificationActive;
  this.worksFaceDown=ability.worksFaceDown;
  this.abilityWord=ability.abilityWord;
}",0.9783783783783784
159070,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == EventType.DAMAGED_PLAYER && (!onlyCombat || ((DamagedPlayerEvent)event).isCombatDamage())) {
    Permanent permanent=game.getPermanent(event.getSourceId());
    if (permanent != null && filter.match(permanent,sourceId,controllerId,game)) {
      if (setTargetPointer) {
        for (        Effect effect : this.getEffects()) {
          effect.setValue(""String_Node_Str"",event.getAmount());
          effect.setTargetPointer(new FixedTarget(permanent.getControllerId()));
        }
      }
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == EventType.DAMAGED_PLAYER && (!onlyCombat || ((DamagedPlayerEvent)event).isCombatDamage())) {
    Permanent permanent=game.getPermanent(event.getSourceId());
    if (permanent != null && filter.match(permanent,sourceId,controllerId,game)) {
      if (!setTargetPointer.equals(SetTargetPointer.NONE)) {
        for (        Effect effect : this.getEffects()) {
          effect.setValue(""String_Node_Str"",event.getAmount());
switch (setTargetPointer) {
case PLAYER:
            effect.setTargetPointer(new FixedTarget(permanent.getControllerId()));
          break;
case PERMANENT:
        effect.setTargetPointer(new FixedTarget(permanent.getId()));
      break;
  }
}
}
return true;
}
}
return false;
}",0.7825475017593244
159071,"@Override public String getText(Mode mode){
  if (!staticText.isEmpty()) {
    return staticText;
  }
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  if (counter.getCount() > 1) {
    sb.append(CardUtil.numberToText(counter.getCount())).append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  sb.append(counter.getName().toLowerCase()).append(""String_Node_Str"");
  if (mode.getTargets().size() > 0) {
    String targetName=mode.getTargets().get(0).getTargetName();
    if (!targetName.startsWith(""String_Node_Str"")) {
      sb.append(""String_Node_Str"");
    }
    sb.append(targetName);
  }
  if (amount.getMessage().length() > 0) {
    sb.append(""String_Node_Str"").append(amount.getMessage());
  }
  return sb.toString();
}","@Override public String getText(Mode mode){
  if (!staticText.isEmpty()) {
    return staticText;
  }
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  if (counter.getCount() > 1) {
    sb.append(CardUtil.numberToText(counter.getCount())).append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  sb.append(counter.getName().toLowerCase()).append(""String_Node_Str"");
  if (mode.getTargets().size() > 0) {
    String targetName=mode.getTargets().get(0).getTargetName();
    if (!targetName.startsWith(""String_Node_Str"")) {
      sb.append(""String_Node_Str"");
    }
    sb.append(targetName);
  }
 else {
    sb.append(""String_Node_Str"");
  }
  if (amount.getMessage().length() > 0) {
    sb.append(""String_Node_Str"").append(amount.getMessage());
  }
  return sb.toString();
}",0.9711055276381908
159072,"@Override public boolean applies(UUID sourceId,Ability source,UUID affectedControllerId,Game game){
  Card card=game.getCard(sourceId);
  if (card != null && filter.match(card,game)) {
    Player player=game.getPlayer(card.getOwnerId());
    if (player != null && card.equals(player.getLibrary().getFromTop(game))) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(UUID objectId,Ability source,UUID affectedControllerId,Game game){
  Card cardOnTop=game.getCard(objectId);
  if (cardOnTop != null && affectedControllerId.equals(source.getControllerId()) && filter.match(cardOnTop,game)) {
    Player player=game.getPlayer(cardOnTop.getOwnerId());
    if (player != null && cardOnTop.equals(player.getLibrary().getFromTop(game))) {
      return true;
    }
  }
  return false;
}",0.8688118811881188
159073,"public void selectAttackers(Game game){
  if (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.DECLARING_ATTACKERS,attackerId,attackerId))) {
    Player player=game.getPlayer(attackerId);
    checkAttackRequirements(player,game);
    if (!game.getPlayer(game.getActivePlayerId()).getAvailableAttackers(game).isEmpty()) {
      player.selectAttackers(game,attackerId);
    }
    if (game.isPaused() || game.gameOver(null)) {
      return;
    }
    checkAttackRestrictions(player,game);
    resumeSelectAttackers(game);
  }
}","public void selectAttackers(Game game){
  if (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.DECLARING_ATTACKERS,attackerId,attackerId))) {
    Player player=game.getPlayer(attackerId);
    game.getCombat().checkAttackRequirements(player,game);
    if (!game.getPlayer(game.getActivePlayerId()).getAvailableAttackers(game).isEmpty()) {
      player.selectAttackers(game,attackerId);
    }
    if (game.isPaused() || game.gameOver(null)) {
      return;
    }
    game.getCombat().checkAttackRestrictions(player,game);
    game.getCombat().resumeSelectAttackers(game);
  }
}",0.954341987466428
159074,"@Override public boolean apply(Game game,Ability source){
  Permanent sourceObject=game.getPermanent(source.getSourceId());
  Permanent targetPermanent=null;
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    if (targetPointer.getFirst(game,source) != null) {
      targetPermanent=game.getPermanent(targetPointer.getFirst(game,source));
      if (targetPermanent != null) {
        ContinuousEffect effect=new ExchangeControlTargetEffect(Duration.EndOfGame,""String_Node_Str"",true);
        effect.setTargetPointer(targetPointer);
        game.addEffect(effect,source);
      }
 else {
        sourceObject.sacrifice(source.getSourceId(),game);
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent sourceObject=game.getPermanent(source.getSourceId());
  Permanent targetPermanent;
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    if (targetPointer.getFirst(game,source) != null) {
      targetPermanent=game.getPermanent(targetPointer.getFirst(game,source));
      if (targetPermanent != null) {
        ContinuousEffect effect=new ExchangeControlTargetEffect(Duration.EndOfGame,""String_Node_Str"",true);
        effect.setTargetPointer(targetPointer);
        game.addEffect(effect,source);
      }
 else {
        sourceObject.sacrifice(source.getSourceId(),game);
      }
    }
    return true;
  }
  return false;
}",0.9966101694915256
159075,"@Override public boolean apply(Game game,Ability source){
  Set<UUID> toDelete=new HashSet<>();
  for (  Map.Entry<UUID,Integer> entry : zoneChangeCounter.entrySet()) {
    Permanent permanent=game.getPermanent(entry.getKey());
    if (permanent == null || permanent.getZoneChangeCounter() != entry.getValue()) {
      toDelete.add(entry.getKey());
      continue;
    }
    permanent.changeControllerId(lockedControllers.get(permanent.getId()),game);
  }
  if (!toDelete.isEmpty()) {
    for (    UUID uuid : toDelete) {
      zoneChangeCounter.remove(uuid);
    }
    if (zoneChangeCounter.isEmpty()) {
      discard();
      return false;
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Set<UUID> toDelete=new HashSet<>();
  for (  Map.Entry<UUID,Integer> entry : zoneChangeCounter.entrySet()) {
    Permanent permanent=game.getPermanent(entry.getKey());
    if (permanent == null || permanent.getZoneChangeCounter() != entry.getValue()) {
      toDelete.add(entry.getKey());
      continue;
    }
    permanent.changeControllerId(lockedControllers.get(permanent.getId()),game);
    permanent.getAbilities().setControllerId(lockedControllers.get(permanent.getId()));
  }
  if (!toDelete.isEmpty()) {
    for (    UUID uuid : toDelete) {
      zoneChangeCounter.remove(uuid);
    }
    if (zoneChangeCounter.isEmpty()) {
      discard();
      return false;
    }
  }
  return true;
}",0.9382022471910112
159076,"@Override public Permanent copyPermanent(Duration duration,Permanent copyFromPermanent,Permanent copyToPermanent,Ability source,ApplyToPermanent applier){
  Permanent permanent=copyFromPermanent.copy();
  permanent.reset(this);
  if (copyFromPermanent.isMorphCard() && copyFromPermanent.isFaceDown()) {
    MorphAbility.setPermanentToMorph(permanent);
  }
  permanent.assignNewId();
  if (copyFromPermanent.isTransformed()) {
    TransformAbility.transform(permanent,copyFromPermanent.getSecondCardFace(),this);
  }
  applier.apply(this,permanent);
  Ability newAbility=source.copy();
  CopyEffect newEffect=new CopyEffect(duration,permanent,copyToPermanent.getId());
  newEffect.newId();
  newEffect.setApplier(applier);
  newEffect.init(newAbility,this);
  for (  Effect effect : getState().getContinuousEffects().getLayeredEffects(this)) {
    if (effect instanceof CopyEffect) {
      CopyEffect copyEffect=(CopyEffect)effect;
      if (copyEffect.getSourceId().equals(copyFromPermanent.getId())) {
        MageObject object=((CopyEffect)effect).getTarget();
        if (object instanceof Permanent) {
          Permanent original=(Permanent)object;
          original=original.copy();
          applier.apply(this,original);
          newEffect.setTarget(object);
        }
      }
    }
  }
  state.addEffect(newEffect,newAbility);
  return permanent;
}","@Override public Permanent copyPermanent(Duration duration,Permanent copyFromPermanent,Permanent copyToPermanent,Ability source,ApplyToPermanent applier){
  Permanent permanent=copyFromPermanent.copy();
  permanent.reset(this);
  if (copyFromPermanent.isMorphCard() && copyFromPermanent.isFaceDown()) {
    MorphAbility.setPermanentToMorph(permanent);
  }
  permanent.assignNewId();
  if (copyFromPermanent.isTransformed()) {
    TransformAbility.transform(permanent,copyFromPermanent.getSecondCardFace(),this);
  }
  applier.apply(this,permanent);
  CopyEffect newEffect=new CopyEffect(duration,permanent,copyToPermanent.getId());
  newEffect.newId();
  newEffect.setApplier(applier);
  Ability newAbility=source.copy();
  newEffect.init(newAbility,this);
  for (  Effect effect : getState().getContinuousEffects().getLayeredEffects(this)) {
    if (effect instanceof CopyEffect) {
      CopyEffect copyEffect=(CopyEffect)effect;
      if (copyEffect.getSourceId().equals(copyFromPermanent.getId())) {
        MageObject object=((CopyEffect)effect).getTarget();
        if (object instanceof Permanent) {
          Permanent original=(Permanent)object;
          original=original.copy();
          applier.apply(this,original);
          newEffect.setTarget(object);
        }
      }
    }
  }
  state.addEffect(newEffect,newAbility);
  return permanent;
}",0.8991905813097866
159077,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  player1=(Player)game.getState().getValue(source.getSourceId() + ""String_Node_Str"");
  player2=(Player)game.getState().getValue(source.getSourceId() + ""String_Node_Str"");
  if (player1 != null && player2 != null) {
    UUID targetPlayerId=null;
switch (event.getType()) {
case DAMAGE_PLAYER:
      targetPlayerId=event.getTargetId();
    break;
case DAMAGE_CREATURE:
case DAMAGED_PLANESWALKER:
  Permanent permanent=game.getPermanent(event.getTargetId());
if (permanent != null) {
  targetPlayerId=permanent.getControllerId();
}
break;
default :
return false;
}
if (player1.getId().equals(targetPlayerId) || player2.getId().equals(targetPlayerId)) {
UUID sourcePlayerId=null;
MageObject damageSource=game.getObject(event.getSourceId());
if (damageSource instanceof StackObject) {
sourcePlayerId=((StackObject)damageSource).getControllerId();
}
 else if (damageSource instanceof Permanent) {
sourcePlayerId=((Permanent)damageSource).getControllerId();
}
 else if (damageSource instanceof Card) {
sourcePlayerId=((Card)damageSource).getOwnerId();
}
if (sourcePlayerId != null && (player1.getId().equals(sourcePlayerId) || player2.getId().equals(sourcePlayerId)) && !sourcePlayerId.equals(targetPlayerId)) {
return true;
}
}
}
return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  player1=(Player)game.getState().getValue(source.getSourceId() + ""String_Node_Str"");
  player2=(Player)game.getState().getValue(source.getSourceId() + ""String_Node_Str"");
  if (player1 != null && player2 != null) {
    UUID targetPlayerId=null;
switch (event.getType()) {
case DAMAGE_PLAYER:
      targetPlayerId=event.getTargetId();
    break;
case DAMAGE_CREATURE:
case DAMAGE_PLANESWALKER:
  Permanent permanent=game.getPermanent(event.getTargetId());
if (permanent != null) {
  targetPlayerId=permanent.getControllerId();
}
break;
default :
return false;
}
if (player1.getId().equals(targetPlayerId) || player2.getId().equals(targetPlayerId)) {
UUID sourcePlayerId=null;
MageObject damageSource=game.getObject(event.getSourceId());
if (damageSource instanceof StackObject) {
sourcePlayerId=((StackObject)damageSource).getControllerId();
}
 else if (damageSource instanceof Permanent) {
sourcePlayerId=((Permanent)damageSource).getControllerId();
}
 else if (damageSource instanceof Card) {
sourcePlayerId=((Card)damageSource).getOwnerId();
}
if (sourcePlayerId != null && (player1.getId().equals(sourcePlayerId) || player2.getId().equals(sourcePlayerId)) && !sourcePlayerId.equals(targetPlayerId)) {
return true;
}
}
}
return false;
}",0.999619916381604
159078,"@Override public boolean apply(Game game,Ability source){
  Player you=game.getPlayer(source.getControllerId());
  if (you == null) {
    return false;
  }
  Permanent arsenalThresher=game.getPermanent(source.getSourceId());
  FilterArtifactCard filter=new FilterArtifactCard();
  filter.add(new AnotherPredicate());
  if (you.chooseUse(Outcome.Benefit,""String_Node_Str"",game)) {
    Cards cards=new CardsImpl();
    if (you.getHand().count(filter,source.getSourceId(),source.getControllerId(),game) > 0) {
      TargetCardInHand target=new TargetCardInHand(0,Integer.MAX_VALUE,filter);
      if (you.choose(Outcome.Benefit,target,source.getSourceId(),game)) {
        for (        UUID uuid : target.getTargets()) {
          cards.add(you.getHand().get(uuid,game));
        }
        you.revealCards(""String_Node_Str"",cards,game);
        if (arsenalThresher != null) {
          arsenalThresher.addCounters(CounterType.P1P1.createInstance(cards.size()),game);
          return true;
        }
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player you=game.getPlayer(source.getControllerId());
  if (you == null) {
    return false;
  }
  Permanent arsenalThresher=game.getPermanent(source.getSourceId());
  FilterArtifactCard filter=new FilterArtifactCard();
  filter.add(new AnotherCardPredicate());
  if (you.chooseUse(Outcome.Benefit,""String_Node_Str"",game)) {
    Cards cards=new CardsImpl();
    if (you.getHand().count(filter,source.getSourceId(),source.getControllerId(),game) > 0) {
      TargetCardInHand target=new TargetCardInHand(0,Integer.MAX_VALUE,filter);
      if (you.choose(Outcome.Benefit,target,source.getSourceId(),game)) {
        for (        UUID uuid : target.getTargets()) {
          cards.add(you.getHand().get(uuid,game));
        }
        you.revealCards(""String_Node_Str"",cards,game);
        if (arsenalThresher != null) {
          arsenalThresher.addCounters(CounterType.P1P1.createInstance(cards.size()),game);
          return true;
        }
      }
    }
  }
  return false;
}",0.9980638915779284
159079,"@Override public boolean apply(Game game,Ability source){
  Permanent creature=null;
  if (fixedTarget) {
    creature=game.getPermanent(targetPointer.getFirst(game,source));
  }
 else {
    Permanent equipment=game.getPermanent(source.getSourceId());
    if (equipment != null && equipment.getAttachedTo() != null) {
      creature=game.getPermanent(equipment.getAttachedTo());
    }
  }
  if (creature != null) {
    creature.addAbility(ability,source.getSourceId(),game);
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Permanent creature=null;
  if (fixedTarget) {
    creature=game.getPermanent(targetPointer.getFirst(game,source));
  }
 else {
    Permanent equipment=game.getPermanent(source.getSourceId());
    if (equipment != null && equipment.getAttachedTo() != null) {
      creature=game.getPermanent(equipment.getAttachedTo());
    }
  }
  if (creature != null) {
    creature.addAbility(ability,source.getSourceId(),game,false);
  }
  return true;
}",0.993975903614458
159080,"@Override public boolean apply(Game game,Ability source){
  int value=amount.calculate(game,source,this);
  Token tokenCopy=token.copy();
  tokenCopy.getAbilities().newId();
  tokenCopy.putOntoBattlefield(value,game,source.getSourceId(),source.getControllerId(),tapped,attacking);
  this.lastAddedTokenId=tokenCopy.getLastAddedToken();
  this.lastAddedTokenIds=tokenCopy.getLastAddedTokenIds();
  return true;
}","@Override public boolean apply(Game game,Ability source){
  int value=amount.calculate(game,source,this);
  token.putOntoBattlefield(value,game,source.getSourceId(),source.getControllerId(),tapped,attacking);
  this.lastAddedTokenId=token.getLastAddedToken();
  this.lastAddedTokenIds=token.getLastAddedTokenIds();
  return true;
}",0.5202156334231806
159081,"@Override public String getText(Mode mode){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  if (mode != null) {
    sb.append(mode.getTargets().get(0).getTargetName());
  }
  return sb.toString();
}","@Override public String getText(Mode mode){
  if (staticText != null && !staticText.isEmpty()) {
    return staticText;
  }
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  Target target=mode.getTargets().get(0);
  if (target != null) {
    if (!target.getTargetName().toLowerCase().startsWith(""String_Node_Str"")) {
      sb.append(""String_Node_Str"");
    }
    sb.append(target.getTargetName());
  }
  return sb.toString();
}",0.3348148148148148
159082,"@Override public void reset(Game game){
  Token tokenCopy=token.copy();
  copyFromToken(tokenCopy,game,true);
  super.reset(game);
}","@Override public void reset(Game game){
  copyFromToken(token,game,true);
  super.reset(game);
}",0.8421052631578947
159083,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType() == EventType.DRAW_CARD) {
    if (game.getActivePlayerId().equals(event.getPlayerId())) {
      CardsDrawnDuringDrawStepWatcher watcher=(CardsDrawnDuringDrawStepWatcher)game.getState().getWatchers().get(""String_Node_Str"");
      if (watcher != null && watcher.getAmountCardsDrawn(event.getPlayerId()) > 0) {
        return true;
      }
    }
 else {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType() == EventType.DRAW_CARD) {
    if (game.getActivePlayerId().equals(event.getPlayerId()) && game.getPhase().getStep().getType().equals(PhaseStep.DRAW)) {
      CardsDrawnDuringDrawStepWatcher watcher=(CardsDrawnDuringDrawStepWatcher)game.getState().getWatchers().get(""String_Node_Str"");
      if (watcher != null && watcher.getAmountCardsDrawn(event.getPlayerId()) > 0) {
        return true;
      }
    }
 else {
      return true;
    }
  }
  return false;
}",0.94106463878327
159084,"/** 
 * Tests if Misdirection for target opponent works correctly https://github.com/magefree/mage/issues/574
 */
@Test public void testChangeTargetOpponent(){
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",3);
  addCard(Zone.HAND,playerB,""String_Node_Str"");
  addCard(Zone.HAND,playerB,""String_Node_Str"",2);
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",5);
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"",playerB);
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addTarget(playerA,playerA);
  setStopAt(1,PhaseStep.BEGIN_COMBAT);
  execute();
  assertGraveyardCount(playerA,""String_Node_Str"",1);
  assertGraveyardCount(playerB,""String_Node_Str"",1);
  assertHandCount(playerB,""String_Node_Str"",2);
}","/** 
 * Tests if Misdirection for target opponent works correctly https://github.com/magefree/mage/issues/574
 */
@Test public void testChangeTargetOpponent(){
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",3);
  addCard(Zone.HAND,playerB,""String_Node_Str"");
  addCard(Zone.HAND,playerB,""String_Node_Str"",2);
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",5);
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"",playerB);
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addTarget(playerB,playerA);
  setStopAt(1,PhaseStep.BEGIN_COMBAT);
  execute();
  assertGraveyardCount(playerA,""String_Node_Str"",1);
  assertGraveyardCount(playerB,""String_Node_Str"",1);
  assertHandCount(playerB,""String_Node_Str"",0);
}",0.9976047904191616
159085,"@Override public void init(Ability source,Game game){
  super.init(source,game);
  if (affectedObjectsSet) {
    affectedObjectList.add(new MageObjectReference(source.getSourceId(),game));
  }
}","@Override public void init(Ability source,Game game){
  super.init(source,game);
  if (affectedObjectsSet) {
    affectedObjectList.add(new MageObjectReference(sourceId,game));
  }
}",0.9680851063829788
159086,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(this.sourceId);
  if (affectedObjectsSet) {
    permanent=affectedObjectList.get(0).getPermanent(game);
  }
 else {
    permanent=game.getPermanent(this.sourceId);
  }
  if (permanent == null) {
    discard();
    return false;
  }
  permanent.setName(target.getName());
  permanent.getColor().setColor(target.getColor());
  permanent.getManaCost().clear();
  permanent.getManaCost().add(target.getManaCost());
  permanent.getCardType().clear();
  for (  CardType type : target.getCardType()) {
    permanent.getCardType().add(type);
  }
  permanent.getSubtype().clear();
  for (  String type : target.getSubtype()) {
    permanent.getSubtype().add(type);
  }
  permanent.getSupertype().clear();
  for (  String type : target.getSupertype()) {
    permanent.getSupertype().add(type);
  }
  permanent.removeAllAbilities(source.getSourceId(),game);
  for (  Ability ability : target.getAbilities()) {
    permanent.addAbility(ability,getSourceId(),game,false);
  }
  permanent.getPower().setValue(target.getPower().getValue());
  permanent.getToughness().setValue(target.getToughness().getValue());
  if (target instanceof Permanent) {
    Permanent targetPermanent=(Permanent)target;
    permanent.setTransformed(targetPermanent.isTransformed());
    permanent.setSecondCardFace(targetPermanent.getSecondCardFace());
    permanent.setFlipCard(targetPermanent.isFlipCard());
    permanent.setFlipCardName(targetPermanent.getFlipCardName());
  }
  if (target instanceof PermanentCard) {
    permanent.setCardNumber(((PermanentCard)target).getCard().getCardNumber());
    permanent.setExpansionSetCode(((PermanentCard)target).getCard().getExpansionSetCode());
  }
 else   if (target instanceof PermanentToken || target instanceof Card) {
    permanent.setCardNumber(((Card)target).getCardNumber());
    permanent.setExpansionSetCode(((Card)target).getExpansionSetCode());
  }
  permanent.setCopy(true);
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Permanent permanent;
  if (affectedObjectsSet) {
    permanent=affectedObjectList.get(0).getPermanent(game);
  }
 else {
    permanent=game.getPermanent(this.sourceId);
  }
  if (permanent == null) {
    discard();
    return false;
  }
  permanent.setName(target.getName());
  permanent.getColor().setColor(target.getColor());
  permanent.getManaCost().clear();
  permanent.getManaCost().add(target.getManaCost());
  permanent.getCardType().clear();
  for (  CardType type : target.getCardType()) {
    permanent.getCardType().add(type);
  }
  permanent.getSubtype().clear();
  for (  String type : target.getSubtype()) {
    permanent.getSubtype().add(type);
  }
  permanent.getSupertype().clear();
  for (  String type : target.getSupertype()) {
    permanent.getSupertype().add(type);
  }
  permanent.removeAllAbilities(source.getSourceId(),game);
  for (  Ability ability : target.getAbilities()) {
    permanent.addAbility(ability,getSourceId(),game,false);
  }
  permanent.getPower().setValue(target.getPower().getValue());
  permanent.getToughness().setValue(target.getToughness().getValue());
  if (target instanceof Permanent) {
    Permanent targetPermanent=(Permanent)target;
    permanent.setTransformed(targetPermanent.isTransformed());
    permanent.setSecondCardFace(targetPermanent.getSecondCardFace());
    permanent.setFlipCard(targetPermanent.isFlipCard());
    permanent.setFlipCardName(targetPermanent.getFlipCardName());
  }
  if (target instanceof PermanentCard) {
    permanent.setCardNumber(((PermanentCard)target).getCard().getCardNumber());
    permanent.setExpansionSetCode(((PermanentCard)target).getCard().getExpansionSetCode());
  }
 else   if (target instanceof PermanentToken || target instanceof Card) {
    permanent.setCardNumber(((Card)target).getCardNumber());
    permanent.setExpansionSetCode(((Card)target).getExpansionSetCode());
  }
  permanent.setCopy(true);
  return true;
}",0.9917355371900828
159087,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  Permanent permanent=game.getPermanent(source.getSourceId());
  if (player != null && permanent != null) {
    Choice typeChoice=new ChoiceImpl(true);
    typeChoice.setMessage(""String_Node_Str"");
    typeChoice.setChoices(CardRepository.instance.getCreatureTypes());
    while (!player.choose(Outcome.Detriment,typeChoice,game)) {
      if (!player.isInGame()) {
        return false;
      }
    }
    game.informPlayers(permanent.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str""+ typeChoice.getChoice());
    game.getState().setValue(permanent.getId() + ""String_Node_Str"",typeChoice.getChoice().toString());
    permanent.addInfo(""String_Node_Str"",""String_Node_Str"" + typeChoice.getChoice() + ""String_Node_Str"");
    permanent.getSubtype().add(typeChoice.getChoice());
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  Permanent permanent=game.getPermanent(source.getSourceId());
  if (player != null && permanent != null) {
    Choice typeChoice=new ChoiceImpl(true);
    typeChoice.setMessage(""String_Node_Str"");
    typeChoice.setChoices(CardRepository.instance.getCreatureTypes());
    while (!player.choose(Outcome.Detriment,typeChoice,game)) {
      if (!player.isInGame()) {
        return false;
      }
    }
    game.informPlayers(permanent.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str""+ typeChoice.getChoice());
    ContinuousEffect effect=new AddCardSubTypeTargetEffect(typeChoice.getChoice(),Duration.EndOfTurn);
    effect.setTargetPointer(new FixedTarget(permanent.getId()));
    game.addEffect(effect,source);
  }
  return false;
}",0.770172509738453
159088,"@Override public boolean isLegal(Ability source,Game game){
  Set<UUID> illegalTargets=new HashSet<>();
  int replacedTargets=0;
  for (  UUID targetId : targets.keySet()) {
    Card card=game.getCard(targetId);
    if (card != null) {
      if (zoneChangeCounters.containsKey(targetId) && zoneChangeCounters.get(targetId) != card.getZoneChangeCounter()) {
        illegalTargets.add(targetId);
        continue;
      }
    }
    if (!notTarget && game.replaceEvent(GameEvent.getEvent(EventType.TARGET,targetId,source.getSourceId(),source.getControllerId()))) {
      replacedTargets++;
      continue;
    }
    if (!canTarget(targetId,source,game)) {
      illegalTargets.add(targetId);
    }
  }
  for (  UUID targetId : illegalTargets) {
    targets.remove(targetId);
  }
  if (replacedTargets > 0 && replacedTargets == targets.size()) {
    return false;
  }
  if (minNumberOfTargets == 0 && targets.isEmpty()) {
    return true;
  }
  return targets.size() > 0;
}","@Override public boolean isLegal(Ability source,Game game){
  Set<UUID> illegalTargets=new HashSet<>();
  for (  UUID targetId : targets.keySet()) {
    Card card=game.getCard(targetId);
    if (card != null) {
      if (zoneChangeCounters.containsKey(targetId) && zoneChangeCounters.get(targetId) != card.getZoneChangeCounter()) {
        illegalTargets.add(targetId);
        continue;
      }
    }
    if (!notTarget && game.replaceEvent(GameEvent.getEvent(EventType.TARGET,targetId,source.getSourceId(),source.getControllerId()))) {
      illegalTargets.add(targetId);
      continue;
    }
    if (!canTarget(targetId,source,game)) {
      illegalTargets.add(targetId);
    }
  }
  for (  UUID targetId : illegalTargets) {
    targets.remove(targetId);
  }
  if (minNumberOfTargets == 0 && targets.isEmpty()) {
    return true;
  }
  return targets.size() > 0;
}",0.8313384113166485
159089,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    List<Card> cards=new ArrayList<>();
    List<Permanent> permanents=new ArrayList<>();
    for (    UUID targetId : targetPointer.getTargets(game,source)) {
switch (game.getState().getZone(targetId)) {
case BATTLEFIELD:
        Permanent permanent=game.getPermanent(targetId);
      if (permanent != null) {
        permanents.add(permanent);
      }
    break;
case GRAVEYARD:
  Card card=game.getCard(targetId);
if (card != null && game.getState().getZone(targetId).equals(Zone.GRAVEYARD)) {
  cards.add(card);
}
break;
}
}
while (!cards.isEmpty()) {
Card card=cards.iterator().next();
if (card != null) {
Player owner=game.getPlayer(card.getOwnerId());
Cards cardsPlayer=new CardsImpl();
for (Iterator<Card> iterator=cards.iterator(); iterator.hasNext(); ) {
Card next=iterator.next();
if (next.getOwnerId().equals(owner.getId())) {
cardsPlayer.add(next);
iterator.remove();
}
}
owner.putCardsOnTopOfLibrary(cardsPlayer,game,source,true);
}
}
while (!permanents.isEmpty()) {
Permanent permanent=permanents.iterator().next();
if (permanent != null) {
Player owner=game.getPlayer(permanent.getOwnerId());
Cards cardsPlayer=new CardsImpl();
for (Iterator<Permanent> iterator=permanents.iterator(); iterator.hasNext(); ) {
Permanent next=iterator.next();
if (next.getOwnerId().equals(owner.getId())) {
cardsPlayer.add(next);
iterator.remove();
}
}
owner.putCardsOnTopOfLibrary(cardsPlayer,game,source,true);
}
}
return true;
}
return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    List<Card> cards=new ArrayList<>();
    List<Permanent> permanents=new ArrayList<>();
    for (    UUID targetId : targetPointer.getTargets(game,source)) {
switch (game.getState().getZone(targetId)) {
case BATTLEFIELD:
        Permanent permanent=game.getPermanent(targetId);
      if (permanent != null) {
        permanents.add(permanent);
      }
    break;
case GRAVEYARD:
  Card card=game.getCard(targetId);
if (card != null && game.getState().getZone(targetId).equals(Zone.GRAVEYARD)) {
  cards.add(card);
}
break;
}
}
while (!cards.isEmpty()) {
Card card=cards.iterator().next();
if (card != null) {
Player owner=game.getPlayer(card.getOwnerId());
Cards cardsPlayer=new CardsImpl();
for (Iterator<Card> iterator=cards.iterator(); iterator.hasNext(); ) {
Card next=iterator.next();
if (next.getOwnerId().equals(owner.getId())) {
cardsPlayer.add(next);
iterator.remove();
}
}
owner.putCardsOnTopOfLibrary(cardsPlayer,game,source,onTop);
}
}
while (!permanents.isEmpty()) {
Permanent permanent=permanents.iterator().next();
if (permanent != null) {
Player owner=game.getPlayer(permanent.getOwnerId());
Cards cardsPlayer=new CardsImpl();
for (Iterator<Permanent> iterator=permanents.iterator(); iterator.hasNext(); ) {
Permanent next=iterator.next();
if (next.getOwnerId().equals(owner.getId())) {
cardsPlayer.add(next);
iterator.remove();
}
}
owner.putCardsOnTopOfLibrary(cardsPlayer,game,source,onTop);
}
}
return true;
}
return false;
}",0.9943502824858758
159090,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Permanent permanent=game.getPermanent(this.targetPointer.getFirst(game,source));
  if (controller != null && permanent != null) {
    Abilities<ManaAbility> mana=permanent.getAbilities().getManaAbilities(Zone.BATTLEFIELD);
    Mana types=new Mana();
    for (    ManaAbility ability : mana) {
      for (      Mana netMana : ability.getNetMana(game)) {
        types.add(netMana);
      }
    }
    Choice choice=new ChoiceImpl(true);
    choice.setMessage(""String_Node_Str"");
    if (types.getBlack() > 0) {
      choice.getChoices().add(""String_Node_Str"");
    }
    if (types.getRed() > 0) {
      choice.getChoices().add(""String_Node_Str"");
    }
    if (types.getBlue() > 0) {
      choice.getChoices().add(""String_Node_Str"");
    }
    if (types.getGreen() > 0) {
      choice.getChoices().add(""String_Node_Str"");
    }
    if (types.getWhite() > 0) {
      choice.getChoices().add(""String_Node_Str"");
    }
    if (types.getColorless() > 0) {
      choice.getChoices().add(""String_Node_Str"");
    }
    if (choice.getChoices().size() > 0) {
      if (choice.getChoices().size() == 1) {
        choice.setChoice(choice.getChoices().iterator().next());
      }
 else {
        controller.choose(outcome,choice,game);
      }
      if (choice.getChoice() == null) {
        return false;
      }
      Mana newMana=new Mana();
switch (choice.getChoice()) {
case ""String_Node_Str"":
        newMana.setBlack(1);
      return true;
case ""String_Node_Str"":
    newMana.setBlue(1);
  return true;
case ""String_Node_Str"":
newMana.setRed(1);
return true;
case ""String_Node_Str"":
newMana.setGreen(1);
return true;
case ""String_Node_Str"":
newMana.setWhite(1);
return true;
case ""String_Node_Str"":
newMana.setColorless(1);
return true;
}
controller.getManaPool().addMana(newMana,game,source);
checkToFirePossibleEvents(newMana,game,source);
}
return true;
}
return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Permanent permanent=game.getPermanent(this.targetPointer.getFirst(game,source));
  if (controller != null && permanent != null) {
    Abilities<ManaAbility> mana=permanent.getAbilities().getManaAbilities(Zone.BATTLEFIELD);
    Mana types=new Mana();
    for (    ManaAbility ability : mana) {
      for (      Mana netMana : ability.getNetMana(game)) {
        types.add(netMana);
      }
    }
    Choice choice=new ChoiceImpl(true);
    choice.setMessage(""String_Node_Str"");
    if (types.getBlack() > 0) {
      choice.getChoices().add(""String_Node_Str"");
    }
    if (types.getRed() > 0) {
      choice.getChoices().add(""String_Node_Str"");
    }
    if (types.getBlue() > 0) {
      choice.getChoices().add(""String_Node_Str"");
    }
    if (types.getGreen() > 0) {
      choice.getChoices().add(""String_Node_Str"");
    }
    if (types.getWhite() > 0) {
      choice.getChoices().add(""String_Node_Str"");
    }
    if (types.getColorless() > 0) {
      choice.getChoices().add(""String_Node_Str"");
    }
    if (choice.getChoices().size() > 0) {
      if (choice.getChoices().size() == 1) {
        choice.setChoice(choice.getChoices().iterator().next());
      }
 else {
        controller.choose(outcome,choice,game);
      }
      if (choice.getChoice() == null) {
        return false;
      }
      Mana newMana=new Mana();
switch (choice.getChoice()) {
case ""String_Node_Str"":
        newMana.setBlack(1);
      break;
case ""String_Node_Str"":
    newMana.setBlue(1);
  break;
case ""String_Node_Str"":
newMana.setRed(1);
break;
case ""String_Node_Str"":
newMana.setGreen(1);
break;
case ""String_Node_Str"":
newMana.setWhite(1);
break;
case ""String_Node_Str"":
newMana.setColorless(1);
break;
}
controller.getManaPool().addMana(newMana,game,source);
checkToFirePossibleEvents(newMana,game,source);
}
return true;
}
return false;
}",0.9386098427194316
159091,"@Override public boolean apply(Game game,Ability source){
  Permanent targetCreature=game.getPermanent(source.getFirstTarget());
  if (targetCreature != null) {
    Player player=game.getPlayer(targetCreature.getControllerId());
    if (player != null) {
      cost.clearPaid();
      final StringBuilder sb=new StringBuilder(""String_Node_Str"").append(targetCreature.getName()).append(""String_Node_Str"");
      if (player.chooseUse(Outcome.Benefit,sb.toString(),game)) {
        cost.pay(source,game,targetCreature.getControllerId(),targetCreature.getControllerId(),true);
      }
      if (!cost.isPaid()) {
        return targetCreature.moveToZone(Zone.HAND,source.getSourceId(),game,true);
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent targetCreature=game.getPermanent(source.getFirstTarget());
  if (targetCreature != null) {
    Player player=game.getPlayer(targetCreature.getControllerId());
    if (player != null) {
      cost.clearPaid();
      final StringBuilder sb=new StringBuilder(""String_Node_Str"").append(targetCreature.getName()).append(""String_Node_Str"");
      if (player.chooseUse(Outcome.Benefit,sb.toString(),game)) {
        cost.pay(source,game,targetCreature.getControllerId(),targetCreature.getControllerId(),false);
      }
      if (!cost.isPaid()) {
        return targetCreature.moveToZone(Zone.HAND,source.getSourceId(),game,true);
      }
    }
  }
  return false;
}",0.9951956074124916
159092,"@Override public void handleConnectionException(Throwable throwable,Client client){
  Session session=SessionManager.getInstance().getSession(client.getSessionId());
  if (session != null) {
    StringBuilder sessionInfo=new StringBuilder();
    User user=UserManager.getInstance().getUser(session.getUserId());
    if (user != null) {
      sessionInfo.append(user.getName());
    }
 else {
      sessionInfo.append(""String_Node_Str"");
    }
    sessionInfo.append(""String_Node_Str"").append(session.getHost()).append(""String_Node_Str"").append(session.getId());
    if (throwable instanceof ClientDisconnectedException) {
      SessionManager.getInstance().disconnect(client.getSessionId(),DisconnectReason.LostConnection);
      logger.info(""String_Node_Str"" + sessionInfo,throwable);
      if (logger.isDebugEnabled()) {
        throwable.printStackTrace();
      }
    }
 else {
      SessionManager.getInstance().disconnect(client.getSessionId(),DisconnectReason.LostConnection);
      logger.info(""String_Node_Str"" + sessionInfo,throwable);
      if (logger.isDebugEnabled()) {
        if (throwable == null) {
          logger.debug(""String_Node_Str"");
        }
 else {
          throwable.printStackTrace();
        }
      }
    }
  }
}","@Override public void handleConnectionException(Throwable throwable,Client client){
  Session session=SessionManager.getInstance().getSession(client.getSessionId());
  if (session != null) {
    StringBuilder sessionInfo=new StringBuilder();
    User user=UserManager.getInstance().getUser(session.getUserId());
    if (user != null) {
      sessionInfo.append(user.getName());
    }
 else {
      sessionInfo.append(""String_Node_Str"");
    }
    sessionInfo.append(""String_Node_Str"").append(session.getHost()).append(""String_Node_Str"").append(session.getId());
    if (throwable instanceof ClientDisconnectedException) {
      SessionManager.getInstance().disconnect(client.getSessionId(),DisconnectReason.LostConnection);
      logger.info(""String_Node_Str"" + sessionInfo,throwable);
      logger.debug(""String_Node_Str"",throwable);
    }
 else {
      SessionManager.getInstance().disconnect(client.getSessionId(),DisconnectReason.LostConnection);
      logger.info(""String_Node_Str"" + sessionInfo);
      if (logger.isDebugEnabled()) {
        if (throwable == null) {
          logger.debug(""String_Node_Str"");
        }
 else {
          logger.debug(""String_Node_Str"" + Session.getBasicCause(throwable).toString());
        }
      }
    }
  }
}",0.923508209851822
159093,"public void userLostConnection(){
  try {
    if (lock.tryLock(5,TimeUnit.SECONDS)) {
      User user=UserManager.getInstance().getUser(userId);
      if (user == null || !user.isConnected()) {
        return;
      }
      if (!user.getSessionId().equals(sessionId)) {
        logger.info(""String_Node_Str"" + user.getName());
        return;
      }
      logger.info(""String_Node_Str"" + user.getName());
      UserManager.getInstance().disconnect(userId,DisconnectReason.LostConnection);
    }
 else {
      logger.error(""String_Node_Str"" + userId);
    }
  }
 catch (  InterruptedException ex) {
    logger.error(""String_Node_Str"" + userId,ex);
  }
 finally {
    lock.unlock();
  }
}","public void userLostConnection(){
  boolean lockSet=false;
  try {
    if (lock.tryLock(500,TimeUnit.MILLISECONDS)) {
      lockSet=true;
      User user=UserManager.getInstance().getUser(userId);
      if (user == null || !user.isConnected()) {
        return;
      }
      if (!user.getSessionId().equals(sessionId)) {
        logger.info(""String_Node_Str"" + user.getName());
        return;
      }
      logger.info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ userId);
      UserManager.getInstance().disconnect(userId,DisconnectReason.LostConnection);
    }
 else {
      logger.error(""String_Node_Str"" + userId);
    }
  }
 catch (  InterruptedException ex) {
    logger.error(""String_Node_Str"" + userId,ex);
  }
 finally {
    if (lockSet) {
      lock.unlock();
    }
  }
}",0.9115462525320728
159094,"public void fireCallback(final ClientCallback call){
  try {
    boolean tryLock;
    if (lock.tryLock(5,TimeUnit.SECONDS)) {
      call.setMessageId(messageId++);
      callbackHandler.handleCallbackOneway(new Callback(call));
    }
 else {
      logger.error(""String_Node_Str"" + userId);
      logger.error(""String_Node_Str"" + call.getMethod());
    }
  }
 catch (  HandleCallbackException ex) {
    logger.info(""String_Node_Str"" + userId,ex);
    if (logger.isDebugEnabled()) {
      ex.printStackTrace();
    }
    userLostConnection();
  }
catch (  InterruptedException ex) {
    logger.error(""String_Node_Str"" + userId,ex);
    logger.error(""String_Node_Str"" + call.getMethod());
  }
 finally {
    lock.unlock();
  }
}","public void fireCallback(final ClientCallback call){
  boolean lockSet=false;
  try {
    if (lock.tryLock(500,TimeUnit.MILLISECONDS)) {
      lockSet=true;
      call.setMessageId(messageId++);
      callbackHandler.handleCallbackOneway(new Callback(call));
    }
 else {
      logger.error(""String_Node_Str"" + userId);
      logger.error(""String_Node_Str"" + call.getMethod());
    }
  }
 catch (  HandleCallbackException ex) {
    User user=UserManager.getInstance().getUser(userId);
    logger.warn(""String_Node_Str"" + (user != null ? user.getName() : ""String_Node_Str"") + ""String_Node_Str""+ userId);
    logger.warn(""String_Node_Str"" + call.getMethod());
    logger.warn(""String_Node_Str"" + getBasicCause(ex).toString());
    logger.trace(""String_Node_Str"",ex);
    userLostConnection();
  }
catch (  InterruptedException ex) {
    logger.error(""String_Node_Str"" + userId);
    logger.error(""String_Node_Str"" + call.getMethod());
    logger.error(""String_Node_Str"" + getBasicCause(ex).toString());
    logger.trace(""String_Node_Str"",ex);
  }
 finally {
    if (lockSet) {
      lock.unlock();
    }
  }
}",0.5935624659028914
159095,"public void kill(DisconnectReason reason){
  UserManager.getInstance().removeUser(userId,reason);
}","public void kill(DisconnectReason reason){
  boolean lockSet=false;
  try {
    if (lock.tryLock(500,TimeUnit.MILLISECONDS)) {
      lockSet=true;
      UserManager.getInstance().removeUser(userId,reason);
    }
 else {
      logger.error(""String_Node_Str"" + userId);
    }
  }
 catch (  InterruptedException ex) {
    logger.error(""String_Node_Str"" + userId,ex);
  }
 finally {
    if (lockSet) {
      lock.unlock();
    }
  }
}",0.3591682419659735
159096,"public void disconnect(String sessionId,DisconnectReason reason){
  Session session=sessions.get(sessionId);
  if (session != null) {
    if (!reason.equals(DisconnectReason.AdminDisconnect)) {
synchronized (session) {
        if (!sessions.containsKey(sessionId)) {
          return;
        }
        sessions.remove(sessionId);
switch (reason) {
case Disconnected:
          session.kill(reason);
        LogServiceImpl.instance.log(LogKeys.KEY_SESSION_KILLED,sessionId);
      break;
case SessionExpired:
    session.kill(reason);
  LogServiceImpl.instance.log(LogKeys.KEY_SESSION_EXPIRED,sessionId);
break;
case LostConnection:
session.userLostConnection();
LogServiceImpl.instance.log(LogKeys.KEY_SESSION_DISCONNECTED,sessionId);
break;
default :
logger.error(""String_Node_Str"" + reason.toString() + ""String_Node_Str""+ sessionId);
}
}
}
 else {
sessions.remove(sessionId);
session.kill(reason);
}
}
}","public void disconnect(String sessionId,DisconnectReason reason){
  Session session=sessions.get(sessionId);
  if (session != null) {
    if (!reason.equals(DisconnectReason.AdminDisconnect)) {
      if (!sessions.containsKey(sessionId)) {
        return;
      }
      sessions.remove(sessionId);
switch (reason) {
case Disconnected:
        session.kill(reason);
      LogServiceImpl.instance.log(LogKeys.KEY_SESSION_KILLED,sessionId);
    break;
case SessionExpired:
  session.kill(reason);
LogServiceImpl.instance.log(LogKeys.KEY_SESSION_EXPIRED,sessionId);
break;
case LostConnection:
session.userLostConnection();
LogServiceImpl.instance.log(LogKeys.KEY_SESSION_DISCONNECTED,sessionId);
break;
default :
logger.error(""String_Node_Str"" + reason.toString() + ""String_Node_Str""+ sessionId);
}
}
 else {
sessions.remove(sessionId);
session.kill(reason);
}
}
}",0.7809847198641766
159097,"public void setSessionId(String sessionId){
  this.sessionId=sessionId;
  if (sessionId.isEmpty()) {
    userState=UserState.Disconnected;
    logger.debug(""String_Node_Str"" + userName + ""String_Node_Str""+ userId);
  }
 else   if (userState == UserState.Created) {
    userState=UserState.Connected;
    logger.debug(""String_Node_Str"" + userName + ""String_Node_Str""+ userId);
  }
 else {
    userState=UserState.Reconnected;
    reconnect();
    logger.info(""String_Node_Str"" + userName + ""String_Node_Str""+ userId);
  }
}","public void setSessionId(String sessionId){
  this.sessionId=sessionId;
  if (sessionId.isEmpty()) {
    userState=UserState.Disconnected;
    lostConnection();
    logger.debug(""String_Node_Str"" + userName + ""String_Node_Str""+ userId);
  }
 else   if (userState == UserState.Created) {
    userState=UserState.Connected;
    logger.debug(""String_Node_Str"" + userName + ""String_Node_Str""+ userId);
  }
 else {
    userState=UserState.Reconnected;
    reconnect();
    logger.info(""String_Node_Str"" + userName + ""String_Node_Str""+ userId);
  }
}",0.9793621013133208
159098,"@Override protected void init(UUID choosingPlayerId,GameOptions gameOptions){
  super.init(choosingPlayerId,gameOptions);
  Ability ability=new SimpleStaticAbility(Zone.COMMAND,new EmptyEffect(""String_Node_Str""));
  for (  UUID playerId : state.getPlayerList(startingPlayerId)) {
    Player player=getPlayer(playerId);
    if (player != null) {
      if (player.getSideboard().size() > 0) {
        Card commander=getCard((UUID)player.getSideboard().toArray()[0]);
        if (commander != null) {
          player.setCommanderId(commander.getId());
          commander.moveToZone(Zone.COMMAND,null,this,true);
          ability.addEffect(new CommanderReplacementEffect(commander.getId(),alsoLibrary));
          ability.addEffect(new CommanderCostModification(commander.getId()));
          ability.addEffect(new CommanderManaReplacementEffect(player.getId(),commander.getSpellAbility().getManaCosts().getMana()));
          getState().setValue(commander.getId() + ""String_Node_Str"",0);
          CommanderCombatDamageWatcher watcher=new CommanderCombatDamageWatcher(commander.getId());
          getState().getWatchers().add(watcher);
          this.commanderCombatWatcher.add(watcher);
          watcher.addCardInfoToCommander(this);
        }
      }
    }
  }
  this.getState().addAbility(ability,this.getId(),null);
  state.getTurnMods().add(new TurnMod(startingPlayerId,PhaseStep.DRAW));
}","@Override protected void init(UUID choosingPlayerId,GameOptions gameOptions){
  super.init(choosingPlayerId,gameOptions);
  Ability ability=new SimpleStaticAbility(Zone.COMMAND,new EmptyEffect(""String_Node_Str""));
  for (  UUID playerId : state.getPlayerList(startingPlayerId)) {
    Player player=getPlayer(playerId);
    if (player != null) {
      if (player.getSideboard().size() > 0) {
        Card commander=getCard((UUID)player.getSideboard().toArray()[0]);
        if (commander != null) {
          player.setCommanderId(commander.getId());
          commander.moveToZone(Zone.COMMAND,null,this,true);
          ability.addEffect(new CommanderReplacementEffect(commander.getId(),alsoLibrary));
          ability.addEffect(new CommanderCostModification(commander.getId()));
          Mana commanderMana;
          if (commander.getSpellAbility().getManaCosts() == null) {
            Logger.getLogger(GameCommanderImpl.class).warn(""String_Node_Str"" + commander.getName());
            commanderMana=new Mana();
          }
 else {
            commanderMana=commander.getSpellAbility().getManaCosts().getMana();
          }
          ability.addEffect(new CommanderManaReplacementEffect(player.getId(),commanderMana));
          getState().setValue(commander.getId() + ""String_Node_Str"",0);
          CommanderCombatDamageWatcher watcher=new CommanderCombatDamageWatcher(commander.getId());
          getState().getWatchers().add(watcher);
          this.commanderCombatWatcher.add(watcher);
          watcher.addCardInfoToCommander(this);
        }
      }
    }
  }
  this.getState().addAbility(ability,this.getId(),null);
  state.getTurnMods().add(new TurnMod(startingPlayerId,PhaseStep.DRAW));
}",0.8549323017408124
159099,"@Override public boolean moveToZone(Zone zone,UUID sourceId,Game game,boolean flag){
  if (!game.replaceEvent(new ZoneChangeEvent(this,this.getControllerId(),Zone.BATTLEFIELD,zone))) {
    game.rememberLKI(objectId,Zone.BATTLEFIELD,this);
    if (game.getPlayer(controllerId).removeFromBattlefield(this,game)) {
      game.fireEvent(new ZoneChangeEvent(this,this.getControllerId(),Zone.BATTLEFIELD,zone));
      return true;
    }
  }
  return false;
}","@Override public boolean moveToZone(Zone zone,UUID sourceId,Game game,boolean flag){
  if (!game.replaceEvent(new ZoneChangeEvent(this,this.getControllerId(),Zone.BATTLEFIELD,zone))) {
    game.rememberLKI(objectId,Zone.BATTLEFIELD,this);
    if (game.getPlayer(controllerId).removeFromBattlefield(this,game)) {
      game.setZone(objectId,zone);
      game.fireEvent(new ZoneChangeEvent(this,this.getControllerId(),Zone.BATTLEFIELD,zone));
      game.getState().resetTriggersForSourceId(this.getId());
      game.getState().getContinuousEffects().removeGainedEffectsForSource(this.getId());
      return true;
    }
  }
  return false;
}",0.8091743119266055
159100,"@Override public boolean applies(UUID objectId,Ability source,UUID affectedControllerId,Game game){
  return source.getControllerId().equals(affectedControllerId) && targetPointer.getFirst(game,source).equals(objectId) && game.getState().getZone(objectId) == Zone.GRAVEYARD;
}","@Override public boolean applies(UUID objectId,Ability source,UUID affectedControllerId,Game game){
  UUID targetId=getTargetPointer().getFirst(game,source);
  if (targetId != null) {
    return targetId.equals(objectId) && source.getControllerId().equals(affectedControllerId) && Zone.GRAVEYARD.equals(game.getState().getZone(objectId));
  }
 else {
    discard();
    return false;
  }
}",0.4511278195488721
159101,"@Override public void run(){
  try {
    tappedAngle=isTapped() ? CardPanel.TAPPED_ANGLE : 0;
    flippedAngle=isFlipped() ? CardPanel.FLIPPED_ANGLE : 0;
    if (gameCard.isFaceDown()) {
      return;
    }
    BufferedImage srcImage=ImageCache.getThumbnail(gameCard);
    if (srcImage != null) {
      hasImage=true;
      setText(gameCard);
      setImage(srcImage);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
catch (  Error err) {
    err.printStackTrace();
  }
}","@Override public void run(){
  try {
    tappedAngle=isTapped() ? CardPanel.TAPPED_ANGLE : 0;
    flippedAngle=isFlipped() ? CardPanel.FLIPPED_ANGLE : 0;
    BufferedImage srcImage;
    if (gameCard.isFaceDown()) {
      if (gameCard.isMorphCard()) {
        srcImage=ImageCache.getMorphImage();
      }
 else {
        srcImage=ImageCache.loadImage(new TFile(DirectLinksForDownload.outDir + File.separator + DirectLinksForDownload.cardbackFilename));
      }
    }
 else {
      srcImage=ImageCache.getThumbnail(gameCard);
    }
    if (srcImage != null) {
      hasImage=true;
      setText(gameCard);
      setImage(srcImage);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
catch (  Error err) {
    err.printStackTrace();
  }
}",0.6753036437246963
159102,"@Override public void updateImage(){
  Util.threadPool.submit(new Runnable(){
    @Override public void run(){
      try {
        tappedAngle=isTapped() ? CardPanel.TAPPED_ANGLE : 0;
        flippedAngle=isFlipped() ? CardPanel.FLIPPED_ANGLE : 0;
        if (gameCard.isFaceDown()) {
          return;
        }
        BufferedImage srcImage=ImageCache.getThumbnail(gameCard);
        if (srcImage != null) {
          hasImage=true;
          setText(gameCard);
          setImage(srcImage);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
catch (      Error err) {
        err.printStackTrace();
      }
    }
  }
);
}","@Override public void updateImage(){
  Util.threadPool.submit(new Runnable(){
    @Override public void run(){
      try {
        tappedAngle=isTapped() ? CardPanel.TAPPED_ANGLE : 0;
        flippedAngle=isFlipped() ? CardPanel.FLIPPED_ANGLE : 0;
        BufferedImage srcImage;
        if (gameCard.isFaceDown()) {
          if (gameCard.isMorphCard()) {
            srcImage=ImageCache.getMorphImage();
          }
 else {
            srcImage=ImageCache.loadImage(new TFile(DirectLinksForDownload.outDir + File.separator + DirectLinksForDownload.cardbackFilename));
          }
        }
 else {
          srcImage=ImageCache.getThumbnail(gameCard);
        }
        if (srcImage != null) {
          hasImage=true;
          setText(gameCard);
          setImage(srcImage);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
catch (      Error err) {
        err.printStackTrace();
      }
    }
  }
);
}",0.740787008119925
159103,"public PermanentView(Permanent permanent,Card card,UUID createdForPlayerId,Game game){
  super(permanent,null,permanent.getControllerId().equals(createdForPlayerId));
  this.controlled=permanent.getControllerId().equals(createdForPlayerId);
  this.rules=permanent.getRules();
  this.tapped=permanent.isTapped();
  this.flipped=permanent.isFlipped();
  this.phasedIn=permanent.isPhasedIn();
  this.summoningSickness=permanent.hasSummoningSickness();
  this.damage=permanent.getDamage();
  if (permanent.getAttachments().size() > 0) {
    attachments=new ArrayList<>();
    attachments.addAll(permanent.getAttachments());
  }
  this.attachedTo=permanent.getAttachedTo();
  if (isToken()) {
    original=new CardView(((PermanentToken)permanent).getToken());
    original.expansionSetCode=permanent.getExpansionSetCode();
    tokenSetCode=original.getTokenSetCode();
  }
 else {
    if (card != null) {
      original=new CardView(card);
    }
 else {
      original=null;
    }
  }
  this.transformed=permanent.isTransformed();
  this.copy=permanent.isCopy();
  if (original != null && !original.getName().equals(this.getName())) {
    if (permanent.isCopy() && permanent.isFlipCard()) {
      this.alternateName=permanent.getFlipCardName();
      this.originalName=this.getName();
    }
 else {
      if (!this.isMorphCard() || controlled) {
        this.alternateName=original.getName();
        this.originalName=this.getName();
      }
    }
  }
  if (!permanent.getOwnerId().equals(permanent.getControllerId())) {
    Player owner=game.getPlayer(permanent.getOwnerId());
    if (owner != null) {
      this.nameOwner=owner.getName();
    }
 else {
      this.nameOwner=""String_Node_Str"";
    }
  }
 else {
    this.nameOwner=""String_Node_Str"";
  }
  if (permanent.isFaceDown() && permanent.isMorphCard()) {
    if (card != null) {
      if (controlled) {
        for (        Ability permanentAbility : permanent.getAbilities()) {
          if (permanentAbility instanceof TurnFaceUpAbility && !permanentAbility.getRuleVisible()) {
            this.rules.add(permanentAbility.getRule(true));
          }
          if (permanentAbility.getWorksFaceDown()) {
            this.rules.add(permanentAbility.getRule());
          }
        }
        this.name=card.getName();
        this.expansionSetCode=card.getExpansionSetCode();
        this.cardNumber=card.getCardNumber();
      }
 else {
        this.rules.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
      }
    }
  }
}","public PermanentView(Permanent permanent,Card card,UUID createdForPlayerId,Game game){
  super(permanent,null,permanent.getControllerId().equals(createdForPlayerId));
  this.controlled=permanent.getControllerId().equals(createdForPlayerId);
  this.rules=permanent.getRules();
  this.tapped=permanent.isTapped();
  this.flipped=permanent.isFlipped();
  this.phasedIn=permanent.isPhasedIn();
  this.summoningSickness=permanent.hasSummoningSickness();
  this.damage=permanent.getDamage();
  if (permanent.getAttachments().size() > 0) {
    attachments=new ArrayList<>();
    attachments.addAll(permanent.getAttachments());
  }
  this.attachedTo=permanent.getAttachedTo();
  if (isToken()) {
    original=new CardView(((PermanentToken)permanent).getToken());
    original.expansionSetCode=permanent.getExpansionSetCode();
    tokenSetCode=original.getTokenSetCode();
  }
 else {
    if (card != null) {
      original=new CardView(card);
    }
 else {
      original=null;
    }
  }
  this.transformed=permanent.isTransformed();
  this.copy=permanent.isCopy();
  if (original != null && !original.getName().equals(this.getName())) {
    if (permanent.isCopy() && permanent.isFlipCard()) {
      this.alternateName=permanent.getFlipCardName();
      this.originalName=this.getName();
    }
 else {
      if (!this.isMorphCard() || controlled) {
        this.alternateName=original.getName();
        this.originalName=this.getName();
      }
    }
  }
  if (!permanent.getOwnerId().equals(permanent.getControllerId())) {
    Player owner=game.getPlayer(permanent.getOwnerId());
    if (owner != null) {
      this.nameOwner=owner.getName();
    }
 else {
      this.nameOwner=""String_Node_Str"";
    }
  }
 else {
    this.nameOwner=""String_Node_Str"";
  }
  if (permanent.isFaceDown()) {
    if (permanent.isMorphCard()) {
      if (card != null) {
        if (controlled) {
          for (          Ability permanentAbility : permanent.getAbilities()) {
            if (permanentAbility instanceof TurnFaceUpAbility && !permanentAbility.getRuleVisible()) {
              this.rules.add(permanentAbility.getRule(true));
            }
            if (permanentAbility.getWorksFaceDown()) {
              this.rules.add(permanentAbility.getRule());
            }
          }
          this.name=card.getName();
          this.expansionSetCode=card.getExpansionSetCode();
          this.cardNumber=card.getCardNumber();
        }
 else {
          this.rules.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
        }
      }
    }
 else {
      if (controlled && card != null) {
        this.name=card.getName();
        this.displayName=card.getName();
      }
    }
  }
}",0.7241445969456795
159104,"public void remove(DisconnectReason reason){
  logger.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ gameSessions.size());
  for (  GameSessionPlayer gameSession : gameSessions.values()) {
    logger.debug(""String_Node_Str"" + gameSession.getGameId());
    gameSession.quitGame();
  }
  gameSessions.clear();
  logger.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ draftSessions.size());
  for (  DraftSession draftSession : draftSessions.values()) {
    draftSession.setKilled();
  }
  draftSessions.clear();
  logger.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ tournamentSessions.size());
  for (  TournamentSession tournamentSession : tournamentSessions.values()) {
    tournamentSession.setKilled();
  }
  tournamentSessions.clear();
  logger.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ tables.size());
  for (  Entry<UUID,Table> entry : tables.entrySet()) {
    logger.debug(""String_Node_Str"" + entry.getValue().getId());
    TableManager.getInstance().leaveTable(userId,entry.getValue().getId());
  }
  tables.clear();
  logger.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ watchedGames.size());
  for (  UUID gameId : watchedGames) {
    GameManager.getInstance().stopWatching(gameId,userId);
  }
  watchedGames.clear();
  logger.debug(""String_Node_Str"" + getName() + ""String_Node_Str"");
  ChatManager.getInstance().removeUser(userId,reason);
}","public void remove(DisconnectReason reason){
  logger.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ gameSessions.size());
  for (  GameSessionPlayer gameSession : gameSessions.values()) {
    logger.debug(""String_Node_Str"" + gameSession.getGameId());
    gameSession.quitGame();
  }
  gameSessions.clear();
  logger.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ draftSessions.size());
  for (  DraftSession draftSession : draftSessions.values()) {
    draftSession.setKilled();
  }
  draftSessions.clear();
  logger.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ tournamentSessions.size());
  for (  TournamentSession tournamentSession : tournamentSessions.values()) {
    TournamentController tournamentController=TournamentManager.getInstance().getTournamentController(tournamentSession.getTournamentId());
    if (tournamentController != null) {
      tournamentController.quit(userId);
    }
    tournamentSession.setKilled();
  }
  tournamentSessions.clear();
  logger.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ tables.size());
  for (  Entry<UUID,Table> entry : tables.entrySet()) {
    logger.debug(""String_Node_Str"" + entry.getValue().getId());
    TableManager.getInstance().leaveTable(userId,entry.getValue().getId());
  }
  tables.clear();
  logger.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ watchedGames.size());
  for (  UUID gameId : watchedGames) {
    GameManager.getInstance().stopWatching(gameId,userId);
  }
  watchedGames.clear();
  logger.debug(""String_Node_Str"" + getName() + ""String_Node_Str"");
  ChatManager.getInstance().removeUser(userId,reason);
}",0.9253535021374548
159105,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    int minLand=Integer.MAX_VALUE;
    Cards landsToSacrifice=new CardsImpl();
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        int count=game.getBattlefield().countAll(new FilterControlledLandPermanent(),player.getId(),game);
        if (count < minLand) {
          minLand=count;
        }
      }
    }
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        TargetControlledPermanent target=new TargetControlledPermanent(minLand,minLand,new FilterControlledLandPermanent(),true);
        if (target.choose(Outcome.Sacrifice,player.getId(),source.getSourceId(),game)) {
          for (          Permanent permanent : game.getBattlefield().getActivePermanents(new FilterControlledLandPermanent(),player.getId(),source.getSourceId(),game)) {
            if (permanent != null && !target.getTargets().contains(permanent.getId())) {
              landsToSacrifice.add(permanent);
            }
          }
        }
      }
    }
    for (    UUID cardId : landsToSacrifice) {
      Permanent permanent=game.getPermanent(cardId);
      if (permanent != null) {
        permanent.sacrifice(source.getSourceId(),game);
      }
    }
    int minCreature=Integer.MAX_VALUE;
    Cards creaturesToSacrifice=new CardsImpl();
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        int count=game.getBattlefield().countAll(new FilterControlledCreaturePermanent(),player.getId(),game);
        if (count < minCreature) {
          minCreature=count;
        }
      }
    }
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        TargetControlledPermanent target=new TargetControlledPermanent(minCreature,minCreature,new FilterControlledCreaturePermanent(),true);
        if (target.choose(Outcome.Sacrifice,player.getId(),source.getSourceId(),game)) {
          for (          Permanent permanent : game.getBattlefield().getActivePermanents(new FilterControlledCreaturePermanent(),player.getId(),source.getSourceId(),game)) {
            if (permanent != null && !target.getTargets().contains(permanent.getId())) {
              creaturesToSacrifice.add(permanent);
            }
          }
        }
      }
    }
    for (    UUID cardId : creaturesToSacrifice) {
      Permanent permanent=game.getPermanent(cardId);
      if (permanent != null) {
        permanent.sacrifice(source.getSourceId(),game);
      }
    }
    int minCard=Integer.MAX_VALUE;
    HashMap<UUID,Cards> cardsToDiscard=new HashMap<>(2);
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        int count=player.getHand().size();
        if (count < minCard) {
          minCard=count;
        }
      }
    }
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        Cards cards=new CardsImpl();
        TargetCardInHand target=new TargetCardInHand(minCard,new FilterCard());
        if (target.choose(Outcome.Discard,player.getId(),source.getSourceId(),game)) {
          for (          Card card : player.getHand().getCards(game)) {
            if (card != null && !target.getTargets().contains(card.getId())) {
              cards.add(card);
            }
          }
          cardsToDiscard.put(playerId,cards);
        }
      }
    }
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        for (        UUID cardId : cardsToDiscard.get(playerId)) {
          Card card=game.getCard(cardId);
          if (card != null) {
            player.discard(card,source,game);
          }
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    int minLand=Integer.MAX_VALUE;
    Cards landsToSacrifice=new CardsImpl();
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        int count=game.getBattlefield().countAll(new FilterControlledLandPermanent(),player.getId(),game);
        if (count < minLand) {
          minLand=count;
        }
      }
    }
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        TargetControlledPermanent target=new TargetControlledPermanent(minLand,minLand,new FilterControlledLandPermanent(),true);
        if (target.choose(Outcome.Sacrifice,player.getId(),source.getSourceId(),game)) {
          for (          Permanent permanent : game.getBattlefield().getActivePermanents(new FilterControlledLandPermanent(),player.getId(),source.getSourceId(),game)) {
            if (permanent != null && !target.getTargets().contains(permanent.getId())) {
              landsToSacrifice.add(permanent);
            }
          }
        }
      }
    }
    for (    UUID cardId : landsToSacrifice) {
      Permanent permanent=game.getPermanent(cardId);
      if (permanent != null) {
        permanent.sacrifice(source.getSourceId(),game);
      }
    }
    int minCreature=Integer.MAX_VALUE;
    Cards creaturesToSacrifice=new CardsImpl();
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        int count=game.getBattlefield().countAll(new FilterControlledCreaturePermanent(),player.getId(),game);
        if (count < minCreature) {
          minCreature=count;
        }
      }
    }
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        TargetControlledPermanent target=new TargetControlledPermanent(minCreature,minCreature,new FilterControlledCreaturePermanent(),true);
        if (target.choose(Outcome.Sacrifice,player.getId(),source.getSourceId(),game)) {
          for (          Permanent permanent : game.getBattlefield().getActivePermanents(new FilterControlledCreaturePermanent(),player.getId(),source.getSourceId(),game)) {
            if (permanent != null && !target.getTargets().contains(permanent.getId())) {
              creaturesToSacrifice.add(permanent);
            }
          }
        }
      }
    }
    for (    UUID cardId : creaturesToSacrifice) {
      Permanent permanent=game.getPermanent(cardId);
      if (permanent != null) {
        permanent.sacrifice(source.getSourceId(),game);
      }
    }
    int minCard=Integer.MAX_VALUE;
    HashMap<UUID,Cards> cardsToDiscard=new HashMap<>(2);
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        int count=player.getHand().size();
        if (count < minCard) {
          minCard=count;
        }
      }
    }
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        Cards cards=new CardsImpl();
        TargetCardInHand target=new TargetCardInHand(minCard,new FilterCard());
        if (target.choose(Outcome.Discard,player.getId(),source.getSourceId(),game)) {
          for (          Card card : player.getHand().getCards(game)) {
            if (card != null && !target.getTargets().contains(card.getId())) {
              cards.add(card);
            }
          }
          cardsToDiscard.put(playerId,cards);
        }
      }
    }
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null && cardsToDiscard.get(playerId) != null) {
        for (        UUID cardId : cardsToDiscard.get(playerId)) {
          Card card=game.getCard(cardId);
          if (card != null) {
            player.discard(card,source,game);
          }
        }
      }
    }
    return true;
  }
  return false;
}",0.9951946179721288
159106,"/** 
 * Checks if cards put into play with Lord of the Void triggered ability are correctly controlled by the controller of Lord of the Void e.g. the top card of the library of the current controller of Oracle of Mul Daya is revealed
 */
@Test public void testLordOfTheVoid(){
  skipInitShuffling();
  addCard(Zone.LIBRARY,playerA,""String_Node_Str"",4);
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"");
  attack(2,playerB,""String_Node_Str"");
  setChoice(playerB,""String_Node_Str"");
  setStopAt(2,PhaseStep.POSTCOMBAT_MAIN);
  execute();
  assertLife(playerA,13);
  assertPermanentCount(playerB,""String_Node_Str"",1);
  Assert.assertTrue(""String_Node_Str"",playerB.isTopCardRevealed());
  Assert.assertFalse(""String_Node_Str"",playerA.isTopCardRevealed());
}","/** 
 * Checks if cards put into play with Lord of the Void triggered ability are correctly controlled by the controller of Lord of the Void e.g. the top card of the library of the current controller of Oracle of Mul Daya is revealed
 */
@Test public void testLordOfTheVoid(){
  skipInitShuffling();
  addCard(Zone.LIBRARY,playerA,""String_Node_Str"",4);
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"");
  attack(2,playerB,""String_Node_Str"");
  setChoice(playerB,""String_Node_Str"");
  setStopAt(2,PhaseStep.POSTCOMBAT_MAIN);
  execute();
  assertLife(playerA,13);
  assertPermanentCount(playerB,""String_Node_Str"",1);
  Assert.assertFalse(""String_Node_Str"",playerA.isTopCardRevealed());
  Assert.assertTrue(""String_Node_Str"",playerB.isTopCardRevealed());
}",0.9090909090909092
159107,"@Override public boolean putOntoBattlefield(Game game,Zone fromZone,UUID sourceId,UUID controllerId,boolean tapped,ArrayList<UUID> appliedEffects){
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,controllerId,fromZone,Zone.BATTLEFIELD,appliedEffects,tapped);
  if (!game.replaceEvent(event)) {
    if (fromZone != null) {
      boolean removed=false;
switch (fromZone) {
case GRAVEYARD:
        removed=game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    removed=game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
removed=game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
case EXILED:
game.getExile().removeCard(this,game);
if (isFaceDown()) {
this.setFaceDown(false);
}
removed=true;
break;
case COMMAND:
removed=true;
break;
case PICK:
removed=true;
break;
default :
logger.warn(""String_Node_Str"" + fromZone);
}
game.rememberLKI(objectId,event.getFromZone(),this);
if (!removed) {
logger.warn(""String_Node_Str"" + getName() + ""String_Node_Str""+ fromZone);
}
}
updateZoneChangeCounter();
PermanentCard permanent=new PermanentCard(this,controllerId);
game.resetForSourceId(permanent.getId());
game.addPermanent(permanent);
game.setZone(objectId,Zone.BATTLEFIELD);
game.setScopeRelevant(true);
permanent.setTapped(tapped);
permanent.entersBattlefield(sourceId,game,event.getFromZone(),true);
game.setScopeRelevant(false);
game.applyEffects();
game.fireEvent(new ZoneChangeEvent(permanent,controllerId,fromZone,Zone.BATTLEFIELD));
return true;
}
return false;
}","@Override public boolean putOntoBattlefield(Game game,Zone fromZone,UUID sourceId,UUID controllerId,boolean tapped,ArrayList<UUID> appliedEffects){
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,controllerId,fromZone,Zone.BATTLEFIELD,appliedEffects,tapped);
  if (!game.replaceEvent(event)) {
    if (fromZone != null) {
      boolean removed=false;
switch (fromZone) {
case GRAVEYARD:
        removed=game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    removed=game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
removed=game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
case EXILED:
game.getExile().removeCard(this,game);
if (isFaceDown()) {
this.setFaceDown(false);
}
removed=true;
break;
case COMMAND:
removed=true;
break;
case PICK:
removed=true;
break;
default :
logger.warn(""String_Node_Str"" + fromZone);
}
game.rememberLKI(objectId,event.getFromZone(),this);
if (!removed) {
logger.warn(""String_Node_Str"" + getName() + ""String_Node_Str""+ fromZone);
}
}
updateZoneChangeCounter();
PermanentCard permanent=new PermanentCard(this,controllerId);
game.resetForSourceId(permanent.getId());
game.getContinuousEffects().setController(objectId,controllerId);
game.addPermanent(permanent);
game.setZone(objectId,Zone.BATTLEFIELD);
game.setScopeRelevant(true);
permanent.setTapped(tapped);
permanent.entersBattlefield(sourceId,game,event.getFromZone(),true);
game.setScopeRelevant(false);
game.applyEffects();
game.fireEvent(new ZoneChangeEvent(permanent,controllerId,fromZone,Zone.BATTLEFIELD));
return true;
}
return false;
}",0.9790609137055838
159108,"/** 
 * since control could change several times during applyEvents we only want to fire control changed events after all control change effects have been applied
 * @param game 
 */
public boolean fireControlChangeEvents(Game game){
  boolean controlChanged=false;
  for (  Permanent perm : field.values()) {
    if (perm.isPhasedIn()) {
      controlChanged|=perm.checkControlChanged(game);
    }
  }
  return controlChanged;
}","/** 
 * since control could change several times during applyEvents we only want to fire control changed events after all control change effects have been applied
 * @param game 
 * @return
 */
public boolean fireControlChangeEvents(Game game){
  boolean controlChanged=false;
  for (  Permanent perm : field.values()) {
    if (perm.isPhasedIn()) {
      controlChanged|=perm.checkControlChanged(game);
    }
  }
  return controlChanged;
}",0.9873417721518988
159109,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller != null && sourceObject != null) {
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        for (        Card card : player.getGraveyard().getCards(new FilterCreatureCard(),game)) {
          controller.moveCardToExileWithInfo(card,source.getSourceId(),sourceObject.getLogName(),source.getSourceId(),game,Zone.GRAVEYARD);
        }
      }
    }
    for (    Permanent permanent : game.getBattlefield().getActivePermanents(new FilterCreaturePermanent(),source.getControllerId(),game)) {
      permanent.sacrifice(source.getSourceId(),game);
    }
    ExileZone exileZone=game.getState().getExile().getExileZone(source.getSourceId());
    if (exileZone != null) {
      for (      Card card : exileZone.getCards(game)) {
        controller.putOntoBattlefieldWithInfo(card,game,Zone.EXILED,source.getSourceId());
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller != null && sourceObject != null) {
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        for (        Card card : player.getGraveyard().getCards(new FilterCreatureCard(),game)) {
          controller.moveCardToExileWithInfo(card,source.getSourceId(),sourceObject.getLogName(),source.getSourceId(),game,Zone.GRAVEYARD);
        }
      }
    }
    for (    Permanent permanent : game.getBattlefield().getActivePermanents(new FilterCreaturePermanent(),source.getControllerId(),game)) {
      permanent.sacrifice(source.getSourceId(),game);
    }
    ExileZone exileZone=game.getState().getExile().getExileZone(source.getSourceId());
    if (exileZone != null) {
      for (      Card card : exileZone.getCards(game)) {
        Player player=game.getPlayer(card.getOwnerId());
        if (player != null) {
          player.putOntoBattlefieldWithInfo(card,game,Zone.EXILED,source.getSourceId());
        }
      }
    }
    return true;
  }
  return false;
}",0.9534591194968554
159110,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller != null && sourceObject != null) {
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        for (        Card card : player.getGraveyard().getCards(new FilterCreatureCard(),game)) {
          controller.moveCardToExileWithInfo(card,source.getSourceId(),sourceObject.getLogName(),source.getSourceId(),game,Zone.GRAVEYARD);
        }
      }
    }
    for (    Permanent permanent : game.getBattlefield().getActivePermanents(new FilterCreaturePermanent(),source.getControllerId(),game)) {
      permanent.sacrifice(source.getSourceId(),game);
    }
    ExileZone exileZone=game.getState().getExile().getExileZone(source.getSourceId());
    if (exileZone != null) {
      for (      Card card : exileZone.getCards(game)) {
        controller.putOntoBattlefieldWithInfo(card,game,Zone.EXILED,source.getSourceId());
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller != null && sourceObject != null) {
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        for (        Card card : player.getGraveyard().getCards(new FilterCreatureCard(),game)) {
          controller.moveCardToExileWithInfo(card,source.getSourceId(),sourceObject.getLogName(),source.getSourceId(),game,Zone.GRAVEYARD);
        }
      }
    }
    for (    Permanent permanent : game.getBattlefield().getActivePermanents(new FilterCreaturePermanent(),source.getControllerId(),game)) {
      permanent.sacrifice(source.getSourceId(),game);
    }
    ExileZone exileZone=game.getState().getExile().getExileZone(source.getSourceId());
    if (exileZone != null) {
      for (      Card card : exileZone.getCards(game)) {
        Player player=game.getPlayer(card.getOwnerId());
        if (player != null) {
          player.putOntoBattlefieldWithInfo(card,game,Zone.EXILED,source.getSourceId());
        }
      }
    }
    return true;
  }
  return false;
}",0.9534591194968554
159111,"@Override public void componentResized(ComponentEvent ce){
  doLayout();
  if (updateCard != null) {
    update(updateCard);
  }
}","@Override public void componentResized(ComponentEvent ce){
  doLayout();
  if (updateCard != null && (updateCard instanceof PermanentView)) {
    update(updateCard);
  }
}",0.8637873754152824
159112,"@Override public boolean chooseTarget(Outcome outcome,Cards cards,TargetCard target,Ability source,Game game){
  log.debug(""String_Node_Str"");
  if (cards == null || cards.isEmpty()) {
    if (!target.isRequired(source)) {
      return false;
    }
    return true;
  }
  ArrayList<Card> cardChoices=new ArrayList<Card>(cards.getCards(target.getFilter(),game));
  while (!target.doneChosing()) {
    Card card=pickTarget(cardChoices,outcome,target,source,game);
    if (card != null) {
      target.addTarget(card.getId(),source,game);
      cardChoices.remove(card);
    }
    if (outcome.equals(Outcome.Neutral) && target.getTargets().size() > target.getNumberOfTargets() + (target.getMaxNumberOfTargets() - target.getNumberOfTargets()) / 2) {
      return true;
    }
  }
  return true;
}","@Override public boolean chooseTarget(Outcome outcome,Cards cards,TargetCard target,Ability source,Game game){
  log.debug(""String_Node_Str"");
  if (cards == null || cards.isEmpty()) {
    if (!target.isRequired(source)) {
      return false;
    }
    return true;
  }
  ArrayList<Card> cardChoices=new ArrayList<>(cards.getCards(target.getFilter(),game));
  while (!target.doneChosing()) {
    Card card=pickTarget(cardChoices,outcome,target,source,game);
    if (card != null) {
      target.addTarget(card.getId(),source,game);
      cardChoices.remove(card);
    }
    if (outcome.equals(Outcome.Neutral) && target.getTargets().size() > target.getNumberOfTargets() + (target.getMaxNumberOfTargets() - target.getNumberOfTargets()) / 2) {
      return true;
    }
  }
  return true;
}",0.9974651457541192
159113,"@Override public void actionPerformed(java.awt.event.ActionEvent evt){
  playerActionPerformed(evt);
}","@Override public void actionPerformed(java.awt.event.ActionEvent evt){
  if (!automaticChange) {
    playerActionPerformed(evt);
  }
}",0.864406779661017
159114,"private void playerActionPerformed(java.awt.event.ActionEvent evt){
  boolean start=false;
  int selectedIndex=0;
  for (  TournamentPlayerPanel player : players) {
    if (!start) {
      if (evt.getSource().equals(player.getPlayerType())) {
        start=true;
        selectedIndex=player.getPlayerType().getSelectedIndex();
      }
    }
 else {
      player.getPlayerType().setSelectedIndex(selectedIndex);
    }
  }
}","private void playerActionPerformed(java.awt.event.ActionEvent evt){
  boolean start=false;
  int selectedIndex=0;
  automaticChange=true;
  for (  TournamentPlayerPanel player : players) {
    if (!start) {
      if (evt.getSource().equals(player.getPlayerType())) {
        start=true;
        selectedIndex=player.getPlayerType().getSelectedIndex();
      }
    }
 else {
      player.getPlayerType().setSelectedIndex(selectedIndex);
    }
  }
  automaticChange=false;
}",0.9452513966480448
159115,"private void drawPlayers(){
  this.pnlOtherPlayers.removeAll();
  for (  TournamentPlayerPanel panel : players) {
    this.pnlOtherPlayers.add(panel);
    panel.getPlayerType().addActionListener(new java.awt.event.ActionListener(){
      @Override public void actionPerformed(      java.awt.event.ActionEvent evt){
        playerActionPerformed(evt);
      }
    }
);
  }
  this.pack();
  this.revalidate();
  this.repaint();
}","private void drawPlayers(){
  this.pnlOtherPlayers.removeAll();
  for (  TournamentPlayerPanel panel : players) {
    this.pnlOtherPlayers.add(panel);
    panel.getPlayerType().addActionListener(new java.awt.event.ActionListener(){
      @Override public void actionPerformed(      java.awt.event.ActionEvent evt){
        if (!automaticChange) {
          playerActionPerformed(evt);
        }
      }
    }
);
  }
  this.pack();
  this.revalidate();
  this.repaint();
}",0.9443207126948776
159116,"@Override public boolean replacePlayer(Player oldPlayer,Player newPlayer){
  if (newPlayer != null) {
    DraftPlayer newDraftPlayer=new DraftPlayer(newPlayer);
    DraftPlayer oldDraftPlayer=players.get(oldPlayer.getId());
    newDraftPlayer.setBooster(oldDraftPlayer.getBooster());
    Map<UUID,DraftPlayer> newPlayers=new HashMap<>();
    PlayerList newTable=new PlayerList();
synchronized (players) {
      for (      Map.Entry<UUID,DraftPlayer> entry : players.entrySet()) {
        if (entry.getKey().equals(oldPlayer.getId())) {
          newPlayers.put(newPlayer.getId(),newDraftPlayer);
        }
 else {
          newPlayers.put(entry.getKey(),entry.getValue());
        }
      }
      players.clear();
      for (      Map.Entry<UUID,DraftPlayer> entry : newPlayers.entrySet()) {
        players.put(entry.getKey(),entry.getValue());
      }
    }
synchronized (table) {
      for (      UUID playerId : table) {
        if (playerId.equals(oldPlayer.getId())) {
          newTable.add(newPlayer.getId());
        }
 else {
          newTable.add(playerId);
        }
      }
      table.clear();
      table.addAll(newTable);
    }
    if (oldDraftPlayer.isPicking()) {
      newDraftPlayer.setPicking();
      newDraftPlayer.getPlayer().pickCard(newDraftPlayer.getBooster(),newDraftPlayer.getDeck(),this);
    }
    return true;
  }
  return false;
}","@Override public boolean replacePlayer(Player oldPlayer,Player newPlayer){
  if (newPlayer != null) {
    DraftPlayer newDraftPlayer=new DraftPlayer(newPlayer);
    DraftPlayer oldDraftPlayer=players.get(oldPlayer.getId());
    newDraftPlayer.setBooster(oldDraftPlayer.getBooster());
    Map<UUID,DraftPlayer> newPlayers=new LinkedHashMap<>();
synchronized (players) {
      for (      Map.Entry<UUID,DraftPlayer> entry : players.entrySet()) {
        if (entry.getKey().equals(oldPlayer.getId())) {
          newPlayers.put(newPlayer.getId(),newDraftPlayer);
        }
 else {
          newPlayers.put(entry.getKey(),entry.getValue());
        }
      }
      players.clear();
      for (      Map.Entry<UUID,DraftPlayer> entry : newPlayers.entrySet()) {
        players.put(entry.getKey(),entry.getValue());
      }
    }
synchronized (table) {
      UUID currentId=table.get();
      if (currentId.equals(oldPlayer.getId())) {
        currentId=newPlayer.getId();
      }
      table.clear();
      for (      UUID playerId : players.keySet()) {
        table.add(playerId);
      }
      table.setCurrent(currentId);
    }
    if (oldDraftPlayer.isPicking()) {
      newDraftPlayer.setPicking();
      newDraftPlayer.getPlayer().pickCard(newDraftPlayer.getBooster(),newDraftPlayer.getDeck(),this);
    }
    return true;
  }
  return false;
}",0.8132841328413284
159117,"@Override public void setStartTime(){
  this.stepStartTime=new Date();
}","@Override public void setStartTime(){
  this.startTime=new Date();
}",0.9714285714285714
159118,"protected void copyFromCard(Card card){
  this.name=card.getName();
  this.abilities.clear();
  this.abilities.addAll(card.getAbilities());
  this.abilities.setControllerId(this.controllerId);
  this.watchers.addAll(card.getWatchers());
  this.cardType.clear();
  this.cardType.addAll(card.getCardType());
  this.color=card.getColor().copy();
  this.manaCost=card.getManaCost().copy();
  this.power=card.getPower().copy();
  this.toughness=card.getToughness().copy();
  if (card instanceof PermanentCard) {
    this.maxLevelCounters=((PermanentCard)card).maxLevelCounters;
  }
  this.subtype.clear();
  this.subtype.addAll(card.getSubtype());
  this.supertype.clear();
  this.supertype.addAll(card.getSupertype());
  this.expansionSetCode=card.getExpansionSetCode();
  this.rarity=card.getRarity();
  this.cardNumber=card.getCardNumber();
  this.usesVariousArt=card.getUsesVariousArt();
  this.zoneChangeCounter=card.getZoneChangeCounter();
  canTransform=card.canTransform();
  if (canTransform) {
    secondSideCard=card.getSecondCardFace();
    nightCard=card.isNightCard();
  }
  this.flipCard=card.isFlipCard();
  this.flipCardName=card.getFlipCardName();
  this.morphCard=card.isMorphCard();
  this.faceDown=card.isFaceDown();
}","protected void copyFromCard(Card card){
  this.name=card.getName();
  this.abilities.clear();
  this.abilities.addAll(card.getAbilities().copy());
  this.abilities.setControllerId(this.controllerId);
  this.watchers.addAll(card.getWatchers());
  this.cardType.clear();
  this.cardType.addAll(card.getCardType());
  this.color=card.getColor().copy();
  this.manaCost=card.getManaCost().copy();
  this.power=card.getPower().copy();
  this.toughness=card.getToughness().copy();
  if (card instanceof PermanentCard) {
    this.maxLevelCounters=((PermanentCard)card).maxLevelCounters;
  }
  this.subtype.clear();
  this.subtype.addAll(card.getSubtype());
  this.supertype.clear();
  this.supertype.addAll(card.getSupertype());
  this.expansionSetCode=card.getExpansionSetCode();
  this.rarity=card.getRarity();
  this.cardNumber=card.getCardNumber();
  this.usesVariousArt=card.getUsesVariousArt();
  this.zoneChangeCounter=card.getZoneChangeCounter();
  canTransform=card.canTransform();
  if (canTransform) {
    secondSideCard=card.getSecondCardFace();
    nightCard=card.isNightCard();
  }
  this.flipCard=card.isFlipCard();
  this.flipCardName=card.getFlipCardName();
  this.morphCard=card.isMorphCard();
  this.faceDown=card.isFaceDown();
}",0.9971717171717172
159119,"@Override protected void readLine(String line,DeckCardLists deckList){
  if (line.length() == 0 || line.startsWith(""String_Node_Str"")) {
    return;
  }
  boolean sideboard=false;
  if (line.startsWith(""String_Node_Str"")) {
    line=line.substring(3).trim();
    sideboard=true;
  }
  int delim=line.indexOf(' ');
  String lineNum=line.substring(0,delim).trim();
  String setCode=""String_Node_Str"";
  if (line.indexOf('[') != -1) {
    int setStart=line.indexOf('[') + 1;
    int setEnd=line.indexOf(']');
    setCode=line.substring(setStart,setEnd).trim();
    delim=setEnd;
  }
  String lineName=line.substring(delim + 1).trim();
  try {
    int num=Integer.parseInt(lineNum);
    CardCriteria criteria=new CardCriteria();
    criteria.name(lineName);
    criteria.setCodes(setCode);
    List<CardInfo> cards=CardRepository.instance.findCards(criteria);
    if (cards.isEmpty()) {
      criteria=new CardCriteria();
      criteria.name(lineName);
      cards=CardRepository.instance.findCards(criteria);
    }
    if (cards.isEmpty()) {
      sbMessage.append(""String_Node_Str"").append(lineName).append(""String_Node_Str"").append(lineCount).append(""String_Node_Str"");
    }
 else {
      Random random=new Random();
      for (int i=0; i < num; i++) {
        CardInfo cardInfo=cards.get(random.nextInt(cards.size()));
        if (!sideboard) {
          deckList.getCards().add(new DeckCardInfo(cardInfo.getName(),cardInfo.getCardNumber(),cardInfo.getSetCode()));
        }
 else {
          deckList.getSideboard().add(new DeckCardInfo(cardInfo.getName(),cardInfo.getCardNumber(),cardInfo.getSetCode()));
        }
      }
    }
  }
 catch (  NumberFormatException nfe) {
    sbMessage.append(""String_Node_Str"").append(lineNum).append(""String_Node_Str"").append(lineCount).append(""String_Node_Str"");
  }
}","@Override protected void readLine(String line,DeckCardLists deckList){
  if (line.length() == 0 || line.startsWith(""String_Node_Str"")) {
    return;
  }
  boolean sideboard=false;
  if (line.startsWith(""String_Node_Str"")) {
    line=line.substring(3).trim();
    sideboard=true;
  }
  int delim=line.indexOf(' ');
  String lineNum=line.substring(0,delim).trim();
  String setCode=""String_Node_Str"";
  if (line.indexOf('[') != -1) {
    int setStart=line.indexOf('[') + 1;
    int setEnd=line.indexOf(']');
    setCode=line.substring(setStart,setEnd).trim();
    delim=setEnd;
  }
  String lineName=line.substring(delim + 1).trim();
  try {
    int num=Integer.parseInt(lineNum);
    List<CardInfo> cards=null;
    if (!setCode.isEmpty()) {
      CardCriteria criteria=new CardCriteria();
      criteria.name(lineName);
      criteria.setCodes(setCode);
      cards=CardRepository.instance.findCards(criteria);
    }
    if (cards == null || cards.isEmpty()) {
      cards=CardRepository.instance.findCards(lineName);
    }
    if (cards.isEmpty()) {
      sbMessage.append(""String_Node_Str"").append(lineName).append(""String_Node_Str"").append(lineCount).append(""String_Node_Str"");
    }
 else {
      Random random=new Random();
      for (int i=0; i < num; i++) {
        CardInfo cardInfo=cards.get(random.nextInt(cards.size()));
        if (!sideboard) {
          deckList.getCards().add(new DeckCardInfo(cardInfo.getName(),cardInfo.getCardNumber(),cardInfo.getSetCode()));
        }
 else {
          deckList.getSideboard().add(new DeckCardInfo(cardInfo.getName(),cardInfo.getCardNumber(),cardInfo.getSetCode()));
        }
      }
    }
  }
 catch (  NumberFormatException nfe) {
    sbMessage.append(""String_Node_Str"").append(lineNum).append(""String_Node_Str"").append(lineCount).append(""String_Node_Str"");
  }
}",0.9125517241379312
159120,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        for (        Card card : player.getGraveyard().getCards(new FilterCreatureCard(),game)) {
          card.moveToExile(source.getSourceId(),""String_Node_Str"",source.getSourceId(),game);
        }
      }
    }
    for (    Permanent permanent : game.getBattlefield().getActivePermanents(new FilterCreaturePermanent(),source.getControllerId(),game)) {
      permanent.sacrifice(source.getSourceId(),game);
    }
    for (    Card card : game.getState().getExile().getExileZone(source.getSourceId()).getCards(game)) {
      card.putOntoBattlefield(game,Zone.EXILED,source.getSourceId(),card.getOwnerId());
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller != null && sourceObject != null) {
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        for (        Card card : player.getGraveyard().getCards(new FilterCreatureCard(),game)) {
          controller.moveCardToExileWithInfo(card,source.getSourceId(),sourceObject.getLogName(),source.getSourceId(),game,Zone.GRAVEYARD);
        }
      }
    }
    for (    Permanent permanent : game.getBattlefield().getActivePermanents(new FilterCreaturePermanent(),source.getControllerId(),game)) {
      permanent.sacrifice(source.getSourceId(),game);
    }
    ExileZone exileZone=game.getState().getExile().getExileZone(source.getSourceId());
    if (exileZone != null) {
      for (      Card card : exileZone.getCards(game)) {
        controller.putOntoBattlefieldWithInfo(card,game,Zone.EXILED,source.getSourceId());
      }
    }
    return true;
  }
  return false;
}",0.5922002888781897
159121,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        for (        Card card : player.getGraveyard().getCards(new FilterCreatureCard(),game)) {
          card.moveToExile(source.getSourceId(),""String_Node_Str"",source.getSourceId(),game);
        }
      }
    }
    for (    Permanent permanent : game.getBattlefield().getActivePermanents(new FilterCreaturePermanent(),source.getControllerId(),game)) {
      permanent.sacrifice(source.getSourceId(),game);
    }
    ExileZone exileZone=game.getState().getExile().getExileZone(source.getSourceId());
    if (exileZone != null) {
      for (      Card card : exileZone.getCards(game)) {
        card.putOntoBattlefield(game,Zone.EXILED,source.getSourceId(),card.getOwnerId());
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller != null && sourceObject != null) {
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        for (        Card card : player.getGraveyard().getCards(new FilterCreatureCard(),game)) {
          controller.moveCardToExileWithInfo(card,source.getSourceId(),sourceObject.getLogName(),source.getSourceId(),game,Zone.GRAVEYARD);
        }
      }
    }
    for (    Permanent permanent : game.getBattlefield().getActivePermanents(new FilterCreaturePermanent(),source.getControllerId(),game)) {
      permanent.sacrifice(source.getSourceId(),game);
    }
    ExileZone exileZone=game.getState().getExile().getExileZone(source.getSourceId());
    if (exileZone != null) {
      for (      Card card : exileZone.getCards(game)) {
        controller.putOntoBattlefieldWithInfo(card,game,Zone.EXILED,source.getSourceId());
      }
    }
    return true;
  }
  return false;
}",0.874245939675174
159122,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Permanent sourcePermanent=game.getPermanent(source.getSourceId());
  if (controller != null && sourcePermanent != null) {
    if (super.apply(game,source)) {
      Target target=getBluePrintPermanent().getSpellAbility().getTargets().get(0);
      Outcome auraOutcome=Outcome.BoostCreature;
      Ability:       for (      Ability ability : getBluePrintPermanent().getAbilities()) {
        if (ability instanceof SpellAbility) {
          for (          Effect effect : ability.getEffects()) {
            if (effect instanceof AttachEffect) {
              auraOutcome=effect.getOutcome();
              break Ability;
            }
          }
        }
      }
      if (controller.choose(auraOutcome,target,source.getSourceId(),game)) {
        UUID targetId=target.getFirstTarget();
        Permanent targetPermanent=game.getPermanent(targetId);
        Player targetPlayer=game.getPlayer(targetId);
        if (targetPermanent != null) {
          targetPermanent.addAttachment(sourcePermanent.getId(),game);
        }
 else         if (targetPlayer != null) {
          targetPlayer.addAttachment(sourcePermanent.getId(),game);
        }
 else {
          return false;
        }
      }
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Permanent sourcePermanent=game.getPermanent(source.getSourceId());
  if (controller != null && sourcePermanent != null) {
    if (super.apply(game,source)) {
      Permanent permanentToCopy=getBluePrintPermanent();
      if (permanentToCopy != null) {
        if (permanentToCopy.getSubtype().contains(""String_Node_Str"")) {
          Target target=getBluePrintPermanent().getSpellAbility().getTargets().get(0);
          Outcome auraOutcome=Outcome.BoostCreature;
          Ability:           for (          Ability ability : getBluePrintPermanent().getAbilities()) {
            if (ability instanceof SpellAbility) {
              for (              Effect effect : ability.getEffects()) {
                if (effect instanceof AttachEffect) {
                  auraOutcome=effect.getOutcome();
                  break Ability;
                }
              }
            }
          }
          if (controller.choose(auraOutcome,target,source.getSourceId(),game)) {
            UUID targetId=target.getFirstTarget();
            Permanent targetPermanent=game.getPermanent(targetId);
            Player targetPlayer=game.getPlayer(targetId);
            if (targetPermanent != null) {
              targetPermanent.addAttachment(sourcePermanent.getId(),game);
            }
 else             if (targetPlayer != null) {
              targetPlayer.addAttachment(sourcePermanent.getId(),game);
            }
 else {
              return false;
            }
          }
        }
        return true;
      }
    }
  }
  return false;
}",0.8948412698412699
159123,"public BileBlightEffect(){
  super(-3,-3,Duration.EndOfTurn);
  staticText=""String_Node_Str"";
}","public BileBlightEffect(final BileBlightEffect effect){
  super(effect);
}",0.4733727810650887
159124,"@Override public BileBlightEffect copy(){
  return new BileBlightEffect();
}","@Override public BileBlightEffect copy(){
  return new BileBlightEffect(this);
}",0.9743589743589745
159125,"protected void draft(){
  Draft draft=new BoosterDraft((DraftOptions)options.getLimitedOptions(),getSets());
  for (  TournamentPlayer player : players.values()) {
    draft.addPlayer(player.getPlayer());
    player.setState(TournamentPlayerState.DRAFTING);
  }
  tableEventSource.fireTableEvent(TableEvent.EventType.START_DRAFT,null,draft);
}","protected void draft(){
  draft=new BoosterDraft((DraftOptions)options.getLimitedOptions(),getSets());
  for (  TournamentPlayer player : players.values()) {
    draft.addPlayer(player.getPlayer());
    player.setState(TournamentPlayerState.DRAFTING);
  }
  tableEventSource.fireTableEvent(TableEvent.EventType.START_DRAFT,null,draft);
}",0.9911764705882352
159126,"public synchronized void leaveTable(UUID userId){
  if (table == null) {
    logger.error(""String_Node_Str"" + userId);
    return;
  }
  if (table.isTournament() && tournament == null) {
    logger.error(""String_Node_Str"" + userId + ""String_Node_Str""+ table.getId());
    return;
  }
  if (table != null && this.userId.equals(userId) && (table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.READY_TO_START))) {
    TableManager.getInstance().removeTable(table.getId());
  }
 else {
    UUID playerId=userPlayerMap.get(userId);
    if (playerId != null) {
      if (table.getState() == TableState.WAITING || table.getState() == TableState.READY_TO_START) {
        table.leaveNotStartedTable(playerId);
        if (table.isTournament()) {
          tournament.removePlayer(playerId);
        }
 else {
          match.quitMatch(playerId);
        }
        User user=UserManager.getInstance().getUser(userId);
        if (user != null) {
          ChatManager.getInstance().broadcast(chatId,user.getName(),""String_Node_Str"",ChatMessage.MessageColor.BLUE,true,ChatMessage.MessageType.STATUS,ChatMessage.SoundToPlay.PlayerLeft);
          user.removeTable(playerId);
        }
 else {
          logger.debug(""String_Node_Str"" + userId + ""String_Node_Str""+ table.getId());
        }
        userPlayerMap.remove(userId);
      }
 else       if (!table.getState().equals(TableState.FINISHED)) {
        if (table.isTournament()) {
          logger.debug(""String_Node_Str"" + userId);
          TableManager.getInstance().userQuitTournamentSubTables(tournament.getId(),userId);
          logger.debug(""String_Node_Str"" + table.getTournament().getId() + ""String_Node_Str""+ table.getTournament().getTournamentState()+ ""String_Node_Str"");
          TournamentManager.getInstance().quit(tournament.getId(),userId);
        }
 else {
          MatchPlayer matchPlayer=match.getPlayer(playerId);
          if (matchPlayer != null && !match.hasEnded() && !matchPlayer.hasQuit()) {
            Game game=match.getGame();
            if (game != null && !game.hasEnded()) {
              Player player=match.getPlayer(playerId).getPlayer();
              if (player != null && player.isInGame()) {
                GameManager.getInstance().quitMatch(game.getId(),userId);
              }
              match.quitMatch(playerId);
            }
 else {
              if (table.getState().equals(TableState.SIDEBOARDING)) {
                if (!matchPlayer.isDoneSideboarding()) {
                  matchPlayer.submitDeck(matchPlayer.getDeck());
                }
              }
              match.quitMatch(playerId);
            }
          }
        }
      }
    }
 else {
      logger.error(""String_Node_Str"" + userId);
    }
  }
}","public synchronized void leaveTable(UUID userId){
  if (table == null) {
    logger.error(""String_Node_Str"" + userId);
    return;
  }
  if (table.isTournament() && tournament == null) {
    logger.error(""String_Node_Str"" + userId + ""String_Node_Str""+ table.getId());
    return;
  }
  if (table != null && this.userId != null && this.userId.equals(userId) && (table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.READY_TO_START))) {
    TableManager.getInstance().removeTable(table.getId());
  }
 else {
    UUID playerId=userPlayerMap.get(userId);
    if (playerId != null) {
      if (table.getState() == TableState.WAITING || table.getState() == TableState.READY_TO_START) {
        table.leaveNotStartedTable(playerId);
        if (table.isTournament()) {
          tournament.removePlayer(playerId);
        }
 else {
          match.quitMatch(playerId);
        }
        User user=UserManager.getInstance().getUser(userId);
        if (user != null) {
          ChatManager.getInstance().broadcast(chatId,user.getName(),""String_Node_Str"",ChatMessage.MessageColor.BLUE,true,ChatMessage.MessageType.STATUS,ChatMessage.SoundToPlay.PlayerLeft);
          user.removeTable(playerId);
        }
 else {
          logger.debug(""String_Node_Str"" + userId + ""String_Node_Str""+ table.getId());
        }
        userPlayerMap.remove(userId);
      }
 else       if (!table.getState().equals(TableState.FINISHED)) {
        if (table.isTournament()) {
          logger.debug(""String_Node_Str"" + userId);
          TableManager.getInstance().userQuitTournamentSubTables(tournament.getId(),userId);
          logger.debug(""String_Node_Str"" + table.getTournament().getId() + ""String_Node_Str""+ table.getTournament().getTournamentState()+ ""String_Node_Str"");
          TournamentManager.getInstance().quit(tournament.getId(),userId);
        }
 else {
          MatchPlayer matchPlayer=match.getPlayer(playerId);
          if (matchPlayer != null && !match.hasEnded() && !matchPlayer.hasQuit()) {
            Game game=match.getGame();
            if (game != null && !game.hasEnded()) {
              Player player=match.getPlayer(playerId).getPlayer();
              if (player != null && player.isInGame()) {
                GameManager.getInstance().quitMatch(game.getId(),userId);
              }
              match.quitMatch(playerId);
            }
 else {
              if (table.getState().equals(TableState.SIDEBOARDING)) {
                if (!matchPlayer.isDoneSideboarding()) {
                  matchPlayer.submitDeck(matchPlayer.getDeck());
                }
              }
              match.quitMatch(playerId);
            }
          }
        }
      }
    }
 else {
      logger.error(""String_Node_Str"" + userId);
    }
  }
}",0.995832578365646
159127,"private void sideboard(UUID playerId,Deck deck) throws MageException {
  for (  Entry<UUID,UUID> entry : userPlayerMap.entrySet()) {
    if (entry.getValue().equals(playerId)) {
      User user=UserManager.getInstance().getUser(entry.getKey());
      int remaining=(int)futureTimeout.getDelay(TimeUnit.SECONDS);
      if (user != null) {
        user.sideboard(deck,table.getId(),remaining,options.isLimited());
      }
      break;
    }
  }
}","private void sideboard(){
  table.sideboard();
  setupTimeout(Match.SIDEBOARD_TIME);
  if (table.isTournamentSubTable()) {
    for (    MatchPlayer matchPlayer : match.getPlayers()) {
      if (!matchPlayer.hasQuit()) {
        TournamentPlayer tournamentPlayer=table.getTournament().getPlayer(matchPlayer.getPlayer().getId());
        if (tournamentPlayer != null) {
          tournamentPlayer.setStateInfo(""String_Node_Str"");
        }
      }
    }
  }
  match.sideboard();
  cancelTimeout();
  if (table.isTournamentSubTable()) {
    for (    MatchPlayer matchPlayer : match.getPlayers()) {
      TournamentPlayer tournamentPlayer=table.getTournament().getPlayer(matchPlayer.getPlayer().getId());
      if (tournamentPlayer != null && tournamentPlayer.getStateInfo().equals(""String_Node_Str"")) {
        tournamentPlayer.setStateInfo(""String_Node_Str"");
      }
    }
  }
}",0.1483724451173353
159128,"/** 
 * Ends the current game and starts if neccessary the next game
 * @return true if table can be closed
 */
public boolean endGameAndStartNextGame(){
  Game game=match.getGame();
  if (game == null) {
    return true;
  }
  UUID choosingPlayerId=match.getChooser();
  match.endGame();
  if (ConfigSettings.getInstance().isSaveGameActivated() && !game.isSimulation()) {
    if (GameManager.getInstance().saveGame(game.getId())) {
      match.setReplayAvailable(true);
    }
  }
  GameManager.getInstance().removeGame(game.getId());
  try {
    if (!match.hasEnded()) {
      table.sideboard();
      setupTimeout(Match.SIDEBOARD_TIME);
      match.sideboard();
      cancelTimeout();
      if (!match.hasEnded()) {
        startGame(choosingPlayerId);
      }
 else {
        closeTable();
      }
    }
 else {
      closeTable();
    }
  }
 catch (  GameException ex) {
    logger.fatal(null,ex);
  }
  return match.hasEnded();
}","/** 
 * Ends the current game and starts if neccessary the next game
 * @return true if table can be closed
 */
public boolean endGameAndStartNextGame(){
  Game game=match.getGame();
  if (game == null) {
    return true;
  }
  UUID choosingPlayerId=match.getChooser();
  match.endGame();
  if (ConfigSettings.getInstance().isSaveGameActivated() && !game.isSimulation()) {
    if (GameManager.getInstance().saveGame(game.getId())) {
      match.setReplayAvailable(true);
    }
  }
  GameManager.getInstance().removeGame(game.getId());
  try {
    if (!match.hasEnded()) {
      sideboard();
      if (!match.hasEnded()) {
        startGame(choosingPlayerId);
      }
 else {
        closeTable();
      }
    }
 else {
      closeTable();
    }
  }
 catch (  GameException ex) {
    logger.fatal(null,ex);
  }
  return match.hasEnded();
}",0.9367945823927766
159129,"private void startGame(UUID choosingPlayerId) throws GameException {
  try {
    match.startGame();
    table.initGame();
    GameManager.getInstance().createGameSession(match.getGame(),userPlayerMap,table.getId(),choosingPlayerId);
    String creator=null;
    StringBuilder opponent=new StringBuilder();
    int activePlayers=0;
    for (    Entry<UUID,UUID> entry : userPlayerMap.entrySet()) {
      if (!match.getPlayer(entry.getValue()).hasQuit()) {
        activePlayers++;
        User user=UserManager.getInstance().getUser(entry.getKey());
        if (user != null) {
          if (!user.isConnected()) {
            user.removeConstructing(match.getPlayer(entry.getValue()).getPlayer().getId());
            GameManager.getInstance().joinGame(match.getGame().getId(),user.getId());
            logger.debug(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ match.getId());
          }
          user.gameStarted(match.getGame().getId(),entry.getValue());
          if (creator == null) {
            creator=user.getName();
          }
 else {
            if (opponent.length() > 0) {
              opponent.append(""String_Node_Str"");
            }
            opponent.append(user.getName());
          }
        }
 else {
          logger.error(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue());
          MatchPlayer matchPlayer=match.getPlayer(entry.getValue());
          if (matchPlayer != null && !matchPlayer.hasQuit()) {
            matchPlayer.setQuit(true);
          }
        }
      }
    }
    for (    MatchPlayer mPlayer : match.getPlayers()) {
      if (!mPlayer.getPlayer().isHuman()) {
        activePlayers++;
        if (opponent.length() > 0) {
          opponent.append(""String_Node_Str"");
        }
        opponent.append(mPlayer.getName());
      }
    }
    if (activePlayers < 2) {
      throw new MageException(""String_Node_Str"" + activePlayers);
    }
    ServerMessagesUtil.getInstance().incGamesStarted();
    logger.info(""String_Node_Str"" + match.getGame().getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str""+ creator+ ""String_Node_Str""+ opponent.toString());
    logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
    if (match.getGame() != null) {
      logger.debug(""String_Node_Str"" + GameManager.getInstance().getChatId(match.getGame().getId()));
    }
 else {
      logger.debug(""String_Node_Str"");
    }
    LogServiceImpl.instance.log(LogKeys.KEY_GAME_STARTED,String.valueOf(userPlayerMap.size()),creator,opponent.toString());
  }
 catch (  Exception ex) {
    logger.fatal(""String_Node_Str"",ex);
    if (table != null) {
      TableManager.getInstance().removeTable(table.getId());
    }
    if (match != null) {
      Game game=match.getGame();
      if (game != null) {
        GameManager.getInstance().removeGame(game.getId());
      }
    }
  }
}","private void startGame(UUID choosingPlayerId) throws GameException {
  try {
    match.startGame();
    table.initGame();
    GameManager.getInstance().createGameSession(match.getGame(),userPlayerMap,table.getId(),choosingPlayerId);
    String creator=null;
    StringBuilder opponent=new StringBuilder();
    int activePlayers=0;
    for (    Entry<UUID,UUID> entry : userPlayerMap.entrySet()) {
      if (!match.getPlayer(entry.getValue()).hasQuit()) {
        User user=UserManager.getInstance().getUser(entry.getKey());
        if (user != null) {
          activePlayers++;
          if (!user.isConnected()) {
            user.removeConstructing(match.getPlayer(entry.getValue()).getPlayer().getId());
            GameManager.getInstance().joinGame(match.getGame().getId(),user.getId());
            logger.debug(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ match.getId());
          }
          user.gameStarted(match.getGame().getId(),entry.getValue());
          if (creator == null) {
            creator=user.getName();
          }
 else {
            if (opponent.length() > 0) {
              opponent.append(""String_Node_Str"");
            }
            opponent.append(user.getName());
          }
        }
 else {
          logger.error(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue());
          MatchPlayer matchPlayer=match.getPlayer(entry.getValue());
          if (matchPlayer != null && !matchPlayer.hasQuit()) {
            matchPlayer.setQuit(true);
          }
        }
      }
    }
    for (    MatchPlayer mPlayer : match.getPlayers()) {
      if (!mPlayer.getPlayer().isHuman()) {
        activePlayers++;
        if (opponent.length() > 0) {
          opponent.append(""String_Node_Str"");
        }
        opponent.append(mPlayer.getName());
      }
    }
    if (activePlayers < 2) {
      throw new MageException(""String_Node_Str"" + activePlayers);
    }
    ServerMessagesUtil.getInstance().incGamesStarted();
    logger.info(""String_Node_Str"" + match.getGame().getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str""+ creator+ ""String_Node_Str""+ opponent.toString());
    logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
    if (match.getGame() != null) {
      logger.debug(""String_Node_Str"" + GameManager.getInstance().getChatId(match.getGame().getId()));
    }
 else {
      logger.debug(""String_Node_Str"");
    }
    LogServiceImpl.instance.log(LogKeys.KEY_GAME_STARTED,String.valueOf(userPlayerMap.size()),creator,opponent.toString());
  }
 catch (  Exception ex) {
    logger.fatal(""String_Node_Str"",ex);
    if (table != null) {
      TableManager.getInstance().removeTable(table.getId());
    }
    if (match != null) {
      Game game=match.getGame();
      if (game != null) {
        GameManager.getInstance().removeGame(game.getId());
      }
    }
  }
}",0.9662185453291968
159130,"public void userQuitTournamentSubTables(UUID tournamentId,UUID userId){
  for (  TableController controller : controllers.values()) {
    if (controller.getTable().isTournamentSubTable() && controller.getTable().getTournament().getId().equals(tournamentId)) {
      if (controller.isPlayer(userId)) {
        Match match=controller.getTable().getMatch();
        if (match != null) {
          if (!match.hasEnded() && match.getGame() != null) {
            GameManager.getInstance().quitMatch(match.getGame().getId(),userId);
          }
        }
      }
    }
  }
}","public void userQuitTournamentSubTables(UUID tournamentId,UUID userId){
  for (  TableController controller : controllers.values()) {
    if (controller.getTable().isTournamentSubTable() && controller.getTable().getTournament().getId().equals(tournamentId)) {
      if (controller.hasPlayer(userId)) {
        controller.leaveTable(userId);
      }
    }
  }
}",0.7112068965517241
159131,"protected Round createRoundSwiss(){
  Round round=new Round(rounds.size() + 1,this);
  rounds.add(round);
  List<TournamentPlayer> roundPlayers=getActivePlayers();
  Collections.sort(roundPlayers,new Comparator<TournamentPlayer>(){
    @Override public int compare(    TournamentPlayer p1,    TournamentPlayer p2){
      return p2.getPoints() - p1.getPoints();
    }
  }
);
  while (roundPlayers.size() > 0) {
    TournamentPlayer player1=roundPlayers.get(0);
    roundPlayers.remove(0);
    TournamentPlayer playerForPossibleSecondPairing=null;
    for (    TournamentPlayer player2 : roundPlayers) {
      if (alreadyPaired(player1,player2)) {
        if (playerForPossibleSecondPairing == null) {
          playerForPossibleSecondPairing=player2;
        }
      }
 else {
        if (player2.getPoints() < player1.getPoints() && playerForPossibleSecondPairing != null) {
          round.addPairing(new TournamentPairing(player1,playerForPossibleSecondPairing));
          roundPlayers.remove(playerForPossibleSecondPairing);
          player1=null;
          break;
        }
 else {
          round.addPairing(new TournamentPairing(player1,player2));
          roundPlayers.remove(player2);
          player1=null;
          break;
        }
      }
    }
    if (player1 != null) {
      if (playerForPossibleSecondPairing != null) {
        round.addPairing(new TournamentPairing(player1,playerForPossibleSecondPairing));
        roundPlayers.remove(playerForPossibleSecondPairing);
      }
 else {
        round.getPlayerByes().add(player1);
        player1.setState(TournamentPlayerState.WAITING);
        player1.setStateInfo(""String_Node_Str"");
        updateResults();
      }
    }
  }
  return round;
}","protected Round createRoundSwiss(){
  Round round=new Round(rounds.size() + 1,this);
  rounds.add(round);
  List<TournamentPlayer> roundPlayers=getActivePlayers();
  Collections.sort(roundPlayers,new Comparator<TournamentPlayer>(){
    @Override public int compare(    TournamentPlayer p1,    TournamentPlayer p2){
      return p2.getPoints() - p1.getPoints();
    }
  }
);
  while (roundPlayers.size() > 0) {
    TournamentPlayer player1=roundPlayers.get(0);
    roundPlayers.remove(0);
    TournamentPlayer playerForPossibleSecondPairing=null;
    for (    TournamentPlayer player2 : roundPlayers) {
      if (alreadyPaired(player1,player2)) {
        if (playerForPossibleSecondPairing == null) {
          playerForPossibleSecondPairing=player2;
        }
      }
 else {
        if (player2.getPoints() < player1.getPoints() && playerForPossibleSecondPairing != null) {
          round.addPairing(new TournamentPairing(player1,playerForPossibleSecondPairing));
          roundPlayers.remove(playerForPossibleSecondPairing);
          player1=null;
          break;
        }
 else {
          round.addPairing(new TournamentPairing(player1,player2));
          roundPlayers.remove(player2);
          player1=null;
          break;
        }
      }
    }
    if (player1 != null) {
      if (playerForPossibleSecondPairing != null) {
        round.addPairing(new TournamentPairing(player1,playerForPossibleSecondPairing));
        roundPlayers.remove(playerForPossibleSecondPairing);
      }
 else {
        round.getPlayerByes().add(player1);
        if (round.getRoundNumber() == getNumberRounds()) {
          player1.setState(TournamentPlayerState.FINISHED);
        }
 else {
          player1.setState(TournamentPlayerState.WAITING);
        }
        player1.setStateInfo(""String_Node_Str"");
        updateResults();
      }
    }
  }
  return round;
}",0.9583915107511868
159132,"@Override public boolean apply(Game game,Ability source){
  boolean isMountain=false;
  Card sourceCard=game.getCard(source.getSourceId());
  Player player=game.getPlayer(source.getControllerId());
  if (player == null || sourceCard == null) {
    return false;
  }
  Cards cards=new CardsImpl();
  while (player.getLibrary().size() > 0) {
    Card card=player.getLibrary().removeFromTop(game);
    if (card != null) {
      cards.add(card);
      if (card.getCardType().contains(CardType.LAND)) {
        if (card.getSubtype().contains(""String_Node_Str"")) {
          isMountain=true;
        }
        break;
      }
    }
 else {
      break;
    }
  }
  player.revealCards(sourceCard.getName(),cards,game);
  int damage=cards.size();
  if (isMountain == true) {
    damage*=2;
  }
  Permanent permanent=game.getPermanent(targetPointer.getFirst(game,source));
  if (permanent != null) {
    permanent.damage(damage,source.getSourceId(),game,false,true);
  }
 else {
    Player targetPlayer=game.getPlayer(targetPointer.getFirst(game,source));
    if (targetPlayer != null) {
      targetPlayer.damage(damage,source.getSourceId(),game,false,true);
    }
  }
  TargetCard target=new TargetCard(Zone.LIBRARY,new FilterCard(""String_Node_Str""));
  while (player.isInGame() && cards.size() > 1) {
    player.choose(Outcome.Neutral,cards,target,game);
    Card card=cards.get(target.getFirstTarget(),game);
    if (card != null) {
      player.moveCardToLibraryWithInfo(card,source.getSourceId(),game,Zone.LIBRARY,false,true);
    }
    target.clearChosen();
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  boolean isMountain=false;
  Card sourceCard=game.getCard(source.getSourceId());
  Player player=game.getPlayer(source.getControllerId());
  if (player == null || sourceCard == null) {
    return false;
  }
  Cards cards=new CardsImpl();
  while (player.getLibrary().size() > 0) {
    Card card=player.getLibrary().removeFromTop(game);
    if (card != null) {
      cards.add(card);
      if (card.getCardType().contains(CardType.LAND)) {
        if (card.getSubtype().contains(""String_Node_Str"")) {
          isMountain=true;
        }
        break;
      }
    }
 else {
      break;
    }
  }
  player.revealCards(sourceCard.getName(),cards,game);
  int damage=cards.size();
  if (isMountain == true) {
    damage*=2;
  }
  Permanent permanent=game.getPermanent(targetPointer.getFirst(game,source));
  if (permanent != null) {
    permanent.damage(damage,source.getSourceId(),game,false,true);
  }
 else {
    Player targetPlayer=game.getPlayer(targetPointer.getFirst(game,source));
    if (targetPlayer != null) {
      targetPlayer.damage(damage,source.getSourceId(),game,false,true);
    }
  }
  player.putCardsOnBottomOfLibrary(cards,game,source,true);
  return true;
}",0.8360014229811455
159133,"public VileRequiem(final VileRequiem card){
  super(card);
}","public VileRequiem(final VileRequiem card){
  super(card);
  this.originalId=card.originalId;
}",0.7741935483870968
159134,"@Override public String getText(Mode mode){
  if (staticText != null && !staticText.isEmpty()) {
    return staticText;
  }
  StringBuilder sb=new StringBuilder();
  Target target=mode.getTargets().get(0);
  if (target.getMaxNumberOfTargets() > 1) {
    if (target.getNumberOfTargets() < target.getNumberOfTargets()) {
      sb.append(""String_Node_Str"");
    }
    sb.append(CardUtil.numberToText(target.getMaxNumberOfTargets())).append(""String_Node_Str"").append(target.getTargetName()).append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"").append(target.getTargetName()).append(""String_Node_Str"");
  }
  String p=power.toString();
  if (!p.startsWith(""String_Node_Str"")) {
    sb.append(""String_Node_Str"");
  }
  sb.append(p).append(""String_Node_Str"");
  String t=toughness.toString();
  if (!t.startsWith(""String_Node_Str"")) {
    if (p.startsWith(""String_Node_Str"")) {
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
    }
  }
  sb.append(t);
  if (duration != Duration.WhileOnBattlefield) {
    sb.append(""String_Node_Str"").append(duration.toString());
  }
  String message=null;
  String fixedPart=null;
  if (t.equals(""String_Node_Str"")) {
    message=toughness.getMessage();
    fixedPart=""String_Node_Str"";
  }
 else   if (p.equals(""String_Node_Str"")) {
    message=power.getMessage();
    fixedPart=""String_Node_Str"";
  }
 else   if (!power.getMessage().isEmpty()) {
    message=power.getMessage();
    fixedPart=""String_Node_Str"";
  }
 else   if (!toughness.getMessage().isEmpty()) {
    message=toughness.getMessage();
    fixedPart=""String_Node_Str"";
  }
  if (message != null && !message.isEmpty() && fixedPart != null) {
    sb.append(fixedPart).append(message);
  }
  return sb.toString();
}","@Override public String getText(Mode mode){
  if (staticText != null && !staticText.isEmpty()) {
    return staticText;
  }
  StringBuilder sb=new StringBuilder();
  Target target=mode.getTargets().get(0);
  if (target.getMaxNumberOfTargets() > 1) {
    if (target.getNumberOfTargets() < target.getNumberOfTargets()) {
      sb.append(""String_Node_Str"");
    }
    sb.append(CardUtil.numberToText(target.getMaxNumberOfTargets())).append(""String_Node_Str"").append(target.getTargetName()).append(""String_Node_Str"");
  }
 else {
    if (!target.getTargetName().toUpperCase().startsWith(""String_Node_Str"")) {
      sb.append(""String_Node_Str"");
    }
    sb.append(target.getTargetName()).append(""String_Node_Str"");
  }
  String p=power.toString();
  if (!p.startsWith(""String_Node_Str"")) {
    sb.append(""String_Node_Str"");
  }
  sb.append(p).append(""String_Node_Str"");
  String t=toughness.toString();
  if (!t.startsWith(""String_Node_Str"")) {
    if (p.startsWith(""String_Node_Str"")) {
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
    }
  }
  sb.append(t);
  if (duration != Duration.WhileOnBattlefield) {
    sb.append(""String_Node_Str"").append(duration.toString());
  }
  String message=null;
  String fixedPart=null;
  if (t.equals(""String_Node_Str"")) {
    message=toughness.getMessage();
    fixedPart=""String_Node_Str"";
  }
 else   if (p.equals(""String_Node_Str"")) {
    message=power.getMessage();
    fixedPart=""String_Node_Str"";
  }
 else   if (!power.getMessage().isEmpty()) {
    message=power.getMessage();
    fixedPart=""String_Node_Str"";
  }
 else   if (!toughness.getMessage().isEmpty()) {
    message=toughness.getMessage();
    fixedPart=""String_Node_Str"";
  }
  if (message != null && !message.isEmpty() && fixedPart != null) {
    sb.append(fixedPart).append(message);
  }
  return sb.toString();
}",0.9737496546007184
159135,"@Override public VastwoodAnimist copy(){
  return new VastwoodAnimist(this);
}","@Override public VastwoodAnimistEffect copy(){
  return new VastwoodAnimistEffect(this);
}",0.9285714285714286
159136,"public MatchOptions(String name,String gameType){
  this.name=name;
  this.gameType=gameType;
}","public MatchOptions(String name,String gameType){
  this.name=name;
  this.gameType=gameType;
  this.password=""String_Node_Str"";
}",0.8444444444444444
159137,"@Override public GameInfo createGameInfo(Game game){
  StringBuilder playersInfo=new StringBuilder();
  int counter=0;
  Player currentPlayer=null;
  PlayerList playerList=game.getPlayerList();
  if (game.getStartingPlayerId() != null) {
    playerList.setCurrent(game.getStartingPlayerId());
    currentPlayer=game.getPlayer(game.getStartingPlayerId());
  }
  if (currentPlayer == null) {
    currentPlayer=playerList.getCurrent(game);
  }
  do {
    if (counter > 0) {
      playersInfo.append(""String_Node_Str"");
    }
    playersInfo.append(currentPlayer.getName());
    counter++;
    currentPlayer=game.getPlayer(playerList.getNext());
  }
 while (!currentPlayer.getId().equals(game.getStartingPlayerId()));
  String state;
  String result;
  String duelingTime=""String_Node_Str"";
  if (game.hasEnded()) {
    if (game.getEndTime() != null) {
      duelingTime=""String_Node_Str"" + DateFormat.getDuration((game.getEndTime().getTime() - game.getStartTime().getTime()) / 1000) + ""String_Node_Str"";
    }
    state=""String_Node_Str"" + duelingTime;
    result=game.getWinner();
  }
 else {
    if (game.getStartTime() != null) {
      duelingTime=""String_Node_Str"" + DateFormat.getDuration((new Date().getTime() - game.getStartTime().getTime()) / 1000) + ""String_Node_Str"";
    }
    state=""String_Node_Str"" + duelingTime;
    result=""String_Node_Str"";
  }
  return new GameInfo(0,this.getId(),game.getId(),state,result,playersInfo.toString(),tableId);
}","@Override public GameInfo createGameInfo(Game game){
  StringBuilder playersInfo=new StringBuilder();
  int counter=0;
  Player currentPlayer=null;
  PlayerList playerList=game.getPlayerList();
  if (game.getStartingPlayerId() != null) {
    playerList.setCurrent(game.getStartingPlayerId());
    currentPlayer=game.getPlayer(game.getStartingPlayerId());
  }
  if (currentPlayer == null) {
    currentPlayer=playerList.getCurrent(game);
  }
  if (currentPlayer != null) {
    do {
      if (counter > 0) {
        playersInfo.append(""String_Node_Str"");
      }
      playersInfo.append(currentPlayer.getName());
      counter++;
      currentPlayer=game.getPlayer(playerList.getNext());
    }
 while (!currentPlayer.getId().equals(game.getStartingPlayerId()));
  }
 else {
    playersInfo.append(""String_Node_Str"");
  }
  String state;
  String result;
  String duelingTime=""String_Node_Str"";
  if (game.hasEnded()) {
    if (game.getEndTime() != null) {
      duelingTime=""String_Node_Str"" + DateFormat.getDuration((game.getEndTime().getTime() - game.getStartTime().getTime()) / 1000) + ""String_Node_Str"";
    }
    state=""String_Node_Str"" + duelingTime;
    result=game.getWinner();
  }
 else {
    if (game.getStartTime() != null) {
      duelingTime=""String_Node_Str"" + DateFormat.getDuration((new Date().getTime() - game.getStartTime().getTime()) / 1000) + ""String_Node_Str"";
    }
    state=""String_Node_Str"" + duelingTime;
    result=""String_Node_Str"";
  }
  return new GameInfo(0,this.getId(),game.getId(),state,result,playersInfo.toString(),tableId);
}",0.963527851458886
159138,"public boolean isMatchTableStillValid(){
  if (!table.isTournament()) {
    int humanPlayers=0;
    int aiPlayers=0;
    int validHumanPlayers=0;
    if (!(table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.STARTING) || table.getState().equals(TableState.READY_TO_START))) {
      if (match == null) {
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
      }
 else {
        if (match.isDoneSideboarding() && match.getGame() == null) {
          logger.debug(""String_Node_Str"");
          logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
        }
      }
    }
    for (    Map.Entry<UUID,UUID> userPlayerEntry : userPlayerMap.entrySet()) {
      MatchPlayer matchPlayer=match.getPlayer(userPlayerEntry.getValue());
      if (matchPlayer == null) {
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"" + match.getId());
        logger.debug(""String_Node_Str"" + userPlayerEntry.getKey());
        logger.debug(""String_Node_Str"" + userPlayerEntry.getValue());
        continue;
      }
      if (matchPlayer.getPlayer().isHuman()) {
        humanPlayers++;
        if (!matchPlayer.hasQuit() && match.getGame() != null && matchPlayer.getPlayer().isInGame()) {
          User user=UserManager.getInstance().getUser(userPlayerEntry.getKey());
          if (user == null) {
            logger.debug(""String_Node_Str"" + matchPlayer.getName());
            logger.debug(""String_Node_Str"" + match.getId());
            logger.debug(""String_Node_Str"" + userPlayerEntry.getKey());
            logger.debug(""String_Node_Str"" + userPlayerEntry.getValue());
            return false;
          }
          validHumanPlayers++;
        }
      }
 else {
        aiPlayers++;
      }
    }
    return validHumanPlayers >= 2 || validHumanPlayers == humanPlayers || aiPlayers > 1;
  }
  return true;
}","public boolean isMatchTableStillValid(){
  if (!table.isTournament()) {
    int humanPlayers=0;
    int aiPlayers=0;
    int validHumanPlayers=0;
    if (!(table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.STARTING) || table.getState().equals(TableState.READY_TO_START))) {
      if (match == null) {
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
      }
 else {
        if (match.isDoneSideboarding() && match.getGame() == null) {
          logger.debug(""String_Node_Str"");
          logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
        }
      }
    }
    for (    Map.Entry<UUID,UUID> userPlayerEntry : userPlayerMap.entrySet()) {
      MatchPlayer matchPlayer=match.getPlayer(userPlayerEntry.getValue());
      if (matchPlayer == null) {
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"" + match.getId());
        logger.debug(""String_Node_Str"" + userPlayerEntry.getKey());
        logger.debug(""String_Node_Str"" + userPlayerEntry.getValue());
        continue;
      }
      if (matchPlayer.getPlayer().isHuman()) {
        humanPlayers++;
        if (!match.isDoneSideboarding() || (!matchPlayer.hasQuit() && match.getGame() != null && matchPlayer.getPlayer().isInGame())) {
          User user=UserManager.getInstance().getUser(userPlayerEntry.getKey());
          if (user == null) {
            logger.debug(""String_Node_Str"" + matchPlayer.getName());
            logger.debug(""String_Node_Str"" + match.getId());
            logger.debug(""String_Node_Str"" + userPlayerEntry.getKey());
            logger.debug(""String_Node_Str"" + userPlayerEntry.getValue());
            return false;
          }
          validHumanPlayers++;
        }
      }
 else {
        aiPlayers++;
      }
    }
    return validHumanPlayers >= 2 || validHumanPlayers == humanPlayers || aiPlayers > 1;
  }
  return true;
}",0.991833704528582
159139,"KeranosGodOfStormsTriggeredAbility(final KeranosGodOfStormsTriggeredAbility ability){
  super(ability);
}","KeranosGodOfStormsTriggeredAbility(final KeranosGodOfStormsTriggeredAbility ability){
  super(ability);
  this.lastTriggeredTurn=ability.lastTriggeredTurn;
}",0.8015267175572519
159140,"@Override public GameInfo createGameInfo(Game game){
  StringBuilder playersInfo=new StringBuilder();
  int counter=0;
  PlayerList playerList=game.getPlayerList();
  playerList.setCurrent(game.getStartingPlayerId());
  Player currentPlayer=game.getPlayer(game.getStartingPlayerId());
  do {
    if (counter > 0) {
      playersInfo.append(""String_Node_Str"");
    }
    playersInfo.append(currentPlayer.getName());
    counter++;
    currentPlayer=game.getPlayer(playerList.getNext());
  }
 while (!currentPlayer.getId().equals(game.getStartingPlayerId()));
  String state;
  String result;
  String duelingTime=""String_Node_Str"";
  if (game.hasEnded()) {
    if (game.getEndTime() != null) {
      duelingTime=""String_Node_Str"" + DateFormat.getDuration((game.getEndTime().getTime() - game.getStartTime().getTime()) / 1000) + ""String_Node_Str"";
    }
    state=""String_Node_Str"" + duelingTime;
    result=game.getWinner();
  }
 else {
    if (game.getStartTime() != null) {
      duelingTime=""String_Node_Str"" + DateFormat.getDuration((new Date().getTime() - game.getStartTime().getTime()) / 1000) + ""String_Node_Str"";
    }
    state=""String_Node_Str"" + duelingTime;
    result=""String_Node_Str"";
  }
  return new GameInfo(0,this.getId(),game.getId(),state,result,playersInfo.toString(),tableId);
}","@Override public GameInfo createGameInfo(Game game){
  StringBuilder playersInfo=new StringBuilder();
  int counter=0;
  Player currentPlayer=null;
  PlayerList playerList=game.getPlayerList();
  if (game.getStartingPlayerId() != null) {
    playerList.setCurrent(game.getStartingPlayerId());
    currentPlayer=game.getPlayer(game.getStartingPlayerId());
  }
  if (currentPlayer == null) {
    currentPlayer=playerList.getCurrent(game);
  }
  do {
    if (counter > 0) {
      playersInfo.append(""String_Node_Str"");
    }
    playersInfo.append(currentPlayer.getName());
    counter++;
    currentPlayer=game.getPlayer(playerList.getNext());
  }
 while (!currentPlayer.getId().equals(game.getStartingPlayerId()));
  String state;
  String result;
  String duelingTime=""String_Node_Str"";
  if (game.hasEnded()) {
    if (game.getEndTime() != null) {
      duelingTime=""String_Node_Str"" + DateFormat.getDuration((game.getEndTime().getTime() - game.getStartTime().getTime()) / 1000) + ""String_Node_Str"";
    }
    state=""String_Node_Str"" + duelingTime;
    result=game.getWinner();
  }
 else {
    if (game.getStartTime() != null) {
      duelingTime=""String_Node_Str"" + DateFormat.getDuration((new Date().getTime() - game.getStartTime().getTime()) / 1000) + ""String_Node_Str"";
    }
    state=""String_Node_Str"" + duelingTime;
    result=""String_Node_Str"";
  }
  return new GameInfo(0,this.getId(),game.getId(),state,result,playersInfo.toString(),tableId);
}",0.9389978213507624
159141,"@Override public boolean moveToZone(Zone toZone,UUID sourceId,Game game,boolean flag,ArrayList<UUID> appliedEffects){
  Zone fromZone=game.getState().getZone(objectId);
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,ownerId,fromZone,toZone,appliedEffects);
  if (!game.replaceEvent(event)) {
    if (event.getFromZone() != null) {
switch (event.getFromZone()) {
case GRAVEYARD:
        game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
case EXILED:
game.getExile().removeCard(this,game);
break;
case OUTSIDE:
game.getPlayer(ownerId).getSideboard().remove(this);
break;
case COMMAND:
game.getState().getCommand().remove((Commander)game.getObject(objectId));
break;
case STACK:
StackObject stackObject=game.getStack().getStackObject(getId());
if (stackObject != null) {
game.getStack().remove(stackObject);
}
break;
case PICK:
case BATTLEFIELD:
break;
default :
Card sourceCard=game.getCard(sourceId);
logger.fatal(new StringBuilder(""String_Node_Str"").append(fromZone).append(""String_Node_Str"").append(this.getName()).append(""String_Node_Str"").append(toZone).append(""String_Node_Str"").append(sourceCard != null ? sourceCard.getName() : ""String_Node_Str"").append(""String_Node_Str"").toString());
break;
}
game.rememberLKI(objectId,event.getFromZone(),this);
}
if (isFaceDown() && !event.getToZone().equals(Zone.BATTLEFIELD)) {
setFaceDown(false);
game.getCard(this.getId()).setFaceDown(false);
}
updateZoneChangeCounter();
switch (event.getToZone()) {
case GRAVEYARD:
game.getPlayer(ownerId).putInGraveyard(this,game,!flag);
break;
case HAND:
game.getPlayer(ownerId).getHand().add(this);
break;
case STACK:
game.getStack().push(new Spell(this,this.getSpellAbility().copy(),ownerId,event.getFromZone()));
break;
case EXILED:
game.getExile().getPermanentExile().add(this);
break;
case COMMAND:
game.addCommander(new Commander(this));
break;
case LIBRARY:
if (flag) {
game.getPlayer(ownerId).getLibrary().putOnTop(this,game);
}
 else {
game.getPlayer(ownerId).getLibrary().putOnBottom(this,game);
}
break;
case BATTLEFIELD:
PermanentCard permanent=new PermanentCard(this,ownerId);
game.resetForSourceId(permanent.getId());
game.addPermanent(permanent);
game.setZone(objectId,Zone.BATTLEFIELD);
game.setScopeRelevant(true);
game.applyEffects();
permanent.entersBattlefield(sourceId,game,event.getFromZone(),true);
game.setScopeRelevant(false);
game.applyEffects();
if (flag) {
permanent.setTapped(true);
}
event.setTarget(permanent);
break;
default :
Card sourceCard=game.getCard(sourceId);
logger.fatal(new StringBuilder(""String_Node_Str"").append(toZone).append(""String_Node_Str"").append(this.getName()).append(""String_Node_Str"").append(toZone).append(""String_Node_Str"").append(sourceCard != null ? sourceCard.getName() : ""String_Node_Str"").append(""String_Node_Str"").toString());
return false;
}
setControllerId(ownerId);
game.setZone(objectId,event.getToZone());
game.addSimultaneousEvent(event);
return game.getState().getZone(objectId) == toZone;
}
return false;
}","@Override public boolean moveToZone(Zone toZone,UUID sourceId,Game game,boolean flag,ArrayList<UUID> appliedEffects){
  Zone fromZone=game.getState().getZone(objectId);
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,ownerId,fromZone,toZone,appliedEffects);
  if (!game.replaceEvent(event)) {
    if (event.getFromZone() != null) {
switch (event.getFromZone()) {
case GRAVEYARD:
        game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
case EXILED:
game.getExile().removeCard(this,game);
break;
case OUTSIDE:
game.getPlayer(ownerId).getSideboard().remove(this);
break;
case COMMAND:
game.getState().getCommand().remove((Commander)game.getObject(objectId));
break;
case STACK:
StackObject stackObject=game.getStack().getSpell(getId());
if (stackObject != null) {
game.getStack().remove(stackObject);
}
break;
case PICK:
case BATTLEFIELD:
break;
default :
Card sourceCard=game.getCard(sourceId);
logger.fatal(new StringBuilder(""String_Node_Str"").append(fromZone).append(""String_Node_Str"").append(this.getName()).append(""String_Node_Str"").append(toZone).append(""String_Node_Str"").append(sourceCard != null ? sourceCard.getName() : ""String_Node_Str"").append(""String_Node_Str"").toString());
break;
}
game.rememberLKI(objectId,event.getFromZone(),this);
}
if (isFaceDown() && !event.getToZone().equals(Zone.BATTLEFIELD)) {
setFaceDown(false);
game.getCard(this.getId()).setFaceDown(false);
}
updateZoneChangeCounter();
switch (event.getToZone()) {
case GRAVEYARD:
game.getPlayer(ownerId).putInGraveyard(this,game,!flag);
break;
case HAND:
game.getPlayer(ownerId).getHand().add(this);
break;
case STACK:
game.getStack().push(new Spell(this,this.getSpellAbility().copy(),ownerId,event.getFromZone()));
break;
case EXILED:
game.getExile().getPermanentExile().add(this);
break;
case COMMAND:
game.addCommander(new Commander(this));
break;
case LIBRARY:
if (flag) {
game.getPlayer(ownerId).getLibrary().putOnTop(this,game);
}
 else {
game.getPlayer(ownerId).getLibrary().putOnBottom(this,game);
}
break;
case BATTLEFIELD:
PermanentCard permanent=new PermanentCard(this,ownerId);
game.resetForSourceId(permanent.getId());
game.addPermanent(permanent);
game.setZone(objectId,Zone.BATTLEFIELD);
game.setScopeRelevant(true);
game.applyEffects();
permanent.entersBattlefield(sourceId,game,event.getFromZone(),true);
game.setScopeRelevant(false);
game.applyEffects();
if (flag) {
permanent.setTapped(true);
}
event.setTarget(permanent);
break;
default :
Card sourceCard=game.getCard(sourceId);
logger.fatal(new StringBuilder(""String_Node_Str"").append(toZone).append(""String_Node_Str"").append(this.getName()).append(""String_Node_Str"").append(toZone).append(""String_Node_Str"").append(sourceCard != null ? sourceCard.getName() : ""String_Node_Str"").append(""String_Node_Str"").toString());
return false;
}
setControllerId(ownerId);
game.setZone(objectId,event.getToZone());
game.addSimultaneousEvent(event);
return game.getState().getZone(objectId) == toZone;
}
return false;
}",0.9977749523204068
159142,"public synchronized void leaveTable(UUID userId){
  if (table == null) {
    logger.error(""String_Node_Str"" + userId);
    return;
  }
  if (table.isTournament() && tournament == null) {
    logger.error(""String_Node_Str"" + userId + ""String_Node_Str""+ table.getId());
    return;
  }
  if (table != null && this.userId.equals(userId) && (table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.READY_TO_START))) {
    TableManager.getInstance().removeTable(table.getId());
  }
 else {
    UUID playerId=userPlayerMap.get(userId);
    if (playerId != null) {
      if (table.getState() == TableState.WAITING || table.getState() == TableState.READY_TO_START) {
        table.leaveNotStartedTable(playerId);
        if (table.isTournament()) {
          tournament.removePlayer(playerId);
        }
 else {
          match.quitMatch(playerId);
        }
        User user=UserManager.getInstance().getUser(userId);
        if (user != null) {
          ChatManager.getInstance().broadcast(chatId,user.getName(),""String_Node_Str"",ChatMessage.MessageColor.BLUE,true,ChatMessage.MessageType.STATUS,ChatMessage.SoundToPlay.PlayerLeft);
          user.removeTable(playerId);
        }
 else {
          logger.debug(""String_Node_Str"" + userId + ""String_Node_Str""+ table.getId());
        }
        userPlayerMap.remove(userId);
      }
 else       if (!table.getState().equals(TableState.FINISHED)) {
        if (table.isTournament()) {
          logger.debug(""String_Node_Str"" + userId);
          TableManager.getInstance().userQuitTournamentSubTables(tournament.getId(),userId);
          logger.debug(""String_Node_Str"" + table.getTournament().getId() + ""String_Node_Str""+ table.getTournament().getTournamentState()+ ""String_Node_Str"");
          TournamentManager.getInstance().quit(tournament.getId(),userId);
        }
 else {
          MatchPlayer matchPlayer=match.getPlayer(playerId);
          if (matchPlayer != null && !match.hasEnded() && !matchPlayer.hasQuit()) {
            Game game=match.getGame();
            if (game != null && !game.hasEnded()) {
              Player player=match.getPlayer(playerId).getPlayer();
              if (player != null && player.isInGame()) {
                GameManager.getInstance().quitMatch(game.getId(),userId);
              }
            }
 else {
              if (table.getState().equals(TableState.SIDEBOARDING)) {
                if (!matchPlayer.isDoneSideboarding()) {
                  matchPlayer.submitDeck(matchPlayer.getDeck());
                }
              }
              match.quitMatch(playerId);
            }
          }
        }
      }
    }
 else {
      logger.error(""String_Node_Str"" + userId);
    }
  }
}","public synchronized void leaveTable(UUID userId){
  if (table == null) {
    logger.error(""String_Node_Str"" + userId);
    return;
  }
  if (table.isTournament() && tournament == null) {
    logger.error(""String_Node_Str"" + userId + ""String_Node_Str""+ table.getId());
    return;
  }
  if (table != null && this.userId.equals(userId) && (table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.READY_TO_START))) {
    TableManager.getInstance().removeTable(table.getId());
  }
 else {
    UUID playerId=userPlayerMap.get(userId);
    if (playerId != null) {
      if (table.getState() == TableState.WAITING || table.getState() == TableState.READY_TO_START) {
        table.leaveNotStartedTable(playerId);
        if (table.isTournament()) {
          tournament.removePlayer(playerId);
        }
 else {
          match.quitMatch(playerId);
        }
        User user=UserManager.getInstance().getUser(userId);
        if (user != null) {
          ChatManager.getInstance().broadcast(chatId,user.getName(),""String_Node_Str"",ChatMessage.MessageColor.BLUE,true,ChatMessage.MessageType.STATUS,ChatMessage.SoundToPlay.PlayerLeft);
          user.removeTable(playerId);
        }
 else {
          logger.debug(""String_Node_Str"" + userId + ""String_Node_Str""+ table.getId());
        }
        userPlayerMap.remove(userId);
      }
 else       if (!table.getState().equals(TableState.FINISHED)) {
        if (table.isTournament()) {
          logger.debug(""String_Node_Str"" + userId);
          TableManager.getInstance().userQuitTournamentSubTables(tournament.getId(),userId);
          logger.debug(""String_Node_Str"" + table.getTournament().getId() + ""String_Node_Str""+ table.getTournament().getTournamentState()+ ""String_Node_Str"");
          TournamentManager.getInstance().quit(tournament.getId(),userId);
        }
 else {
          MatchPlayer matchPlayer=match.getPlayer(playerId);
          if (matchPlayer != null && !match.hasEnded() && !matchPlayer.hasQuit()) {
            Game game=match.getGame();
            if (game != null && !game.hasEnded()) {
              Player player=match.getPlayer(playerId).getPlayer();
              if (player != null && player.isInGame()) {
                GameManager.getInstance().quitMatch(game.getId(),userId);
              }
              match.quitMatch(playerId);
            }
 else {
              if (table.getState().equals(TableState.SIDEBOARDING)) {
                if (!matchPlayer.isDoneSideboarding()) {
                  matchPlayer.submitDeck(matchPlayer.getDeck());
                }
              }
              match.quitMatch(playerId);
            }
          }
        }
      }
    }
 else {
      logger.error(""String_Node_Str"" + userId);
    }
  }
}",0.9924839596700274
159143,"public boolean isMatchTableStillValid(){
  if (!table.isTournament()) {
    int humanPlayers=0;
    int aiPlayers=0;
    int validHumanPlayers=0;
    if (!(table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.STARTING) || table.getState().equals(TableState.READY_TO_START))) {
      if (match == null) {
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
      }
 else {
        if (match.isDoneSideboarding() && match.getGame() == null) {
          logger.debug(""String_Node_Str"");
          logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
        }
      }
    }
    for (    Map.Entry<UUID,UUID> userPlayerEntry : userPlayerMap.entrySet()) {
      MatchPlayer matchPlayer=match.getPlayer(userPlayerEntry.getValue());
      if (matchPlayer == null) {
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"" + match.getId());
        logger.debug(""String_Node_Str"" + userPlayerEntry.getKey());
        logger.debug(""String_Node_Str"" + userPlayerEntry.getValue());
        continue;
      }
      if (matchPlayer.getPlayer().isHuman()) {
        humanPlayers++;
        if (!matchPlayer.hasQuit()) {
          User user=UserManager.getInstance().getUser(userPlayerEntry.getKey());
          if (user == null) {
            logger.debug(""String_Node_Str"" + matchPlayer.getName());
            logger.debug(""String_Node_Str"" + match.getId());
            logger.debug(""String_Node_Str"" + userPlayerEntry.getKey());
            logger.debug(""String_Node_Str"" + userPlayerEntry.getValue());
            return false;
          }
          validHumanPlayers++;
        }
      }
 else {
        aiPlayers++;
      }
    }
    return validHumanPlayers >= 2 || validHumanPlayers == humanPlayers || aiPlayers > 1;
  }
  return true;
}","public boolean isMatchTableStillValid(){
  if (!table.isTournament()) {
    int humanPlayers=0;
    int aiPlayers=0;
    int validHumanPlayers=0;
    if (!(table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.STARTING) || table.getState().equals(TableState.READY_TO_START))) {
      if (match == null) {
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
      }
 else {
        if (match.isDoneSideboarding() && match.getGame() == null) {
          logger.debug(""String_Node_Str"");
          logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
        }
      }
    }
    for (    Map.Entry<UUID,UUID> userPlayerEntry : userPlayerMap.entrySet()) {
      MatchPlayer matchPlayer=match.getPlayer(userPlayerEntry.getValue());
      if (matchPlayer == null) {
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"" + match.getId());
        logger.debug(""String_Node_Str"" + userPlayerEntry.getKey());
        logger.debug(""String_Node_Str"" + userPlayerEntry.getValue());
        continue;
      }
      if (matchPlayer.getPlayer().isHuman()) {
        humanPlayers++;
        if (!matchPlayer.hasQuit() && match.getGame() != null && matchPlayer.getPlayer().isInGame()) {
          User user=UserManager.getInstance().getUser(userPlayerEntry.getKey());
          if (user == null) {
            logger.debug(""String_Node_Str"" + matchPlayer.getName());
            logger.debug(""String_Node_Str"" + match.getId());
            logger.debug(""String_Node_Str"" + userPlayerEntry.getKey());
            logger.debug(""String_Node_Str"" + userPlayerEntry.getValue());
            return false;
          }
          validHumanPlayers++;
        }
      }
 else {
        aiPlayers++;
      }
    }
    return validHumanPlayers >= 2 || validHumanPlayers == humanPlayers || aiPlayers > 1;
  }
  return true;
}",0.9835150900329698
159144,"private void startGame(UUID choosingPlayerId) throws GameException {
  try {
    match.startGame();
    table.initGame();
    GameManager.getInstance().createGameSession(match.getGame(),userPlayerMap,table.getId(),choosingPlayerId);
    String creator=null;
    StringBuilder opponent=new StringBuilder();
    for (    Entry<UUID,UUID> entry : userPlayerMap.entrySet()) {
      if (!match.getPlayer(entry.getValue()).hasQuit()) {
        User user=UserManager.getInstance().getUser(entry.getKey());
        if (user != null) {
          if (!user.isConnected()) {
            user.removeConstructing(match.getPlayer(entry.getValue()).getPlayer().getId());
            GameManager.getInstance().joinGame(match.getGame().getId(),user.getId());
            logger.debug(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ match.getId());
          }
          user.gameStarted(match.getGame().getId(),entry.getValue());
          if (creator == null) {
            creator=user.getName();
          }
 else {
            if (opponent.length() > 0) {
              opponent.append(""String_Node_Str"");
            }
            opponent.append(user.getName());
          }
        }
 else {
          logger.error(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue());
          MatchPlayer matchPlayer=match.getPlayer(entry.getValue());
          if (matchPlayer != null && !matchPlayer.hasQuit()) {
            matchPlayer.setQuit(true);
          }
        }
      }
 else {
        throw new MageException(""String_Node_Str"" + entry.getKey());
      }
    }
    for (    MatchPlayer mPlayer : match.getPlayers()) {
      if (!mPlayer.getPlayer().isHuman()) {
        if (opponent.length() > 0) {
          opponent.append(""String_Node_Str"");
        }
        opponent.append(mPlayer.getName());
      }
    }
    ServerMessagesUtil.getInstance().incGamesStarted();
    logger.info(""String_Node_Str"" + match.getName() + ""String_Node_Str""+ creator+ ""String_Node_Str""+ opponent.toString());
    logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
    if (match.getGame() != null) {
      logger.debug(""String_Node_Str"" + match.getGame().getId());
      logger.debug(""String_Node_Str"" + GameManager.getInstance().getChatId(match.getGame().getId()));
    }
 else {
      logger.debug(""String_Node_Str"");
    }
    LogServiceImpl.instance.log(LogKeys.KEY_GAME_STARTED,String.valueOf(userPlayerMap.size()),creator,opponent.toString());
  }
 catch (  Exception ex) {
    logger.fatal(""String_Node_Str"",ex);
    if (table != null) {
      TableManager.getInstance().removeTable(table.getId());
    }
    if (match != null) {
      Game game=match.getGame();
      if (game != null) {
        GameManager.getInstance().removeGame(game.getId());
      }
    }
  }
}","private void startGame(UUID choosingPlayerId) throws GameException {
  try {
    match.startGame();
    table.initGame();
    GameManager.getInstance().createGameSession(match.getGame(),userPlayerMap,table.getId(),choosingPlayerId);
    String creator=null;
    StringBuilder opponent=new StringBuilder();
    int activePlayers=0;
    for (    Entry<UUID,UUID> entry : userPlayerMap.entrySet()) {
      if (!match.getPlayer(entry.getValue()).hasQuit()) {
        activePlayers++;
        User user=UserManager.getInstance().getUser(entry.getKey());
        if (user != null) {
          if (!user.isConnected()) {
            user.removeConstructing(match.getPlayer(entry.getValue()).getPlayer().getId());
            GameManager.getInstance().joinGame(match.getGame().getId(),user.getId());
            logger.debug(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ match.getId());
          }
          user.gameStarted(match.getGame().getId(),entry.getValue());
          if (creator == null) {
            creator=user.getName();
          }
 else {
            if (opponent.length() > 0) {
              opponent.append(""String_Node_Str"");
            }
            opponent.append(user.getName());
          }
        }
 else {
          logger.error(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue());
          MatchPlayer matchPlayer=match.getPlayer(entry.getValue());
          if (matchPlayer != null && !matchPlayer.hasQuit()) {
            matchPlayer.setQuit(true);
          }
        }
      }
    }
    if (activePlayers < 2) {
      throw new MageException(""String_Node_Str"" + activePlayers);
    }
    for (    MatchPlayer mPlayer : match.getPlayers()) {
      if (!mPlayer.getPlayer().isHuman()) {
        if (opponent.length() > 0) {
          opponent.append(""String_Node_Str"");
        }
        opponent.append(mPlayer.getName());
      }
    }
    ServerMessagesUtil.getInstance().incGamesStarted();
    logger.info(""String_Node_Str"" + match.getName() + ""String_Node_Str""+ creator+ ""String_Node_Str""+ opponent.toString());
    logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
    if (match.getGame() != null) {
      logger.debug(""String_Node_Str"" + match.getGame().getId());
      logger.debug(""String_Node_Str"" + GameManager.getInstance().getChatId(match.getGame().getId()));
    }
 else {
      logger.debug(""String_Node_Str"");
    }
    LogServiceImpl.instance.log(LogKeys.KEY_GAME_STARTED,String.valueOf(userPlayerMap.size()),creator,opponent.toString());
  }
 catch (  Exception ex) {
    logger.fatal(""String_Node_Str"",ex);
    if (table != null) {
      TableManager.getInstance().removeTable(table.getId());
    }
    if (match != null) {
      Game game=match.getGame();
      if (game != null) {
        GameManager.getInstance().removeGame(game.getId());
      }
    }
  }
}",0.9779951100244498
159145,"@Override public void run(){
  try {
    player.quit(game);
  }
 catch (  Exception ex) {
    if (ex != null) {
      logger.fatal(""String_Node_Str"" + (ex.getMessage() == null ? ""String_Node_Str"" : ex.getMessage()));
      if (ex.getCause() != null) {
        logger.debug(""String_Node_Str"" + (ex.getCause().getMessage() == null ? ""String_Node_Str"" : ex.getCause().getMessage()));
      }
      ex.printStackTrace();
    }
 else {
      logger.fatal(""String_Node_Str"");
    }
  }
}","@Override public void run(){
  try {
    player.quit(game);
  }
 catch (  Exception ex) {
    if (ex != null) {
      logger.fatal(""String_Node_Str"" + (ex.getMessage() == null ? ""String_Node_Str"" : ex.getMessage()));
      logger.debug(""String_Node_Str"" + game.getId() + ""String_Node_Str""+ playerId);
      if (ex.getCause() != null) {
        logger.debug(""String_Node_Str"" + (ex.getCause().getMessage() == null ? ""String_Node_Str"" : ex.getCause().getMessage()));
      }
      ex.printStackTrace();
    }
 else {
      logger.fatal(""String_Node_Str"" + game.getId() + ""String_Node_Str""+ playerId);
    }
  }
}",0.8817598533455545
159146,"public void quitGame(){
  if (game != null) {
    final Player player=game.getPlayer(playerId);
    if (player != null && player.isInGame()) {
      callExecutor.execute(new Runnable(){
        @Override public void run(){
          try {
            player.quit(game);
          }
 catch (          Exception ex) {
            if (ex != null) {
              logger.fatal(""String_Node_Str"" + (ex.getMessage() == null ? ""String_Node_Str"" : ex.getMessage()));
              if (ex.getCause() != null) {
                logger.debug(""String_Node_Str"" + (ex.getCause().getMessage() == null ? ""String_Node_Str"" : ex.getCause().getMessage()));
              }
              ex.printStackTrace();
            }
 else {
              logger.fatal(""String_Node_Str"");
            }
          }
        }
      }
);
    }
  }
 else {
    logger.error(""String_Node_Str"" + (playerId == null ? ""String_Node_Str"" : playerId));
  }
}","public void quitGame(){
  if (game != null) {
    final Player player=game.getPlayer(playerId);
    if (player != null && player.isInGame()) {
      callExecutor.execute(new Runnable(){
        @Override public void run(){
          try {
            player.quit(game);
          }
 catch (          Exception ex) {
            if (ex != null) {
              logger.fatal(""String_Node_Str"" + (ex.getMessage() == null ? ""String_Node_Str"" : ex.getMessage()));
              logger.debug(""String_Node_Str"" + game.getId() + ""String_Node_Str""+ playerId);
              if (ex.getCause() != null) {
                logger.debug(""String_Node_Str"" + (ex.getCause().getMessage() == null ? ""String_Node_Str"" : ex.getCause().getMessage()));
              }
              ex.printStackTrace();
            }
 else {
              logger.fatal(""String_Node_Str"" + game.getId() + ""String_Node_Str""+ playerId);
            }
          }
        }
      }
);
    }
  }
 else {
    logger.error(""String_Node_Str"" + (playerId == null ? ""String_Node_Str"" : playerId));
  }
}",0.9306329113924052
159147,"@Override public boolean isPaid(){
  return paid | payment.getColorless() == 1;
}","@Override public boolean isPaid(){
  if (paid) {
    return true;
  }
  return this.isColorlessPaid(1);
}",0.6666666666666666
159148,"public boolean isMatchTableStillValid(){
  if (!table.isTournament()) {
    int humanPlayers=0;
    int aiPlayers=0;
    int validHumanPlayers=0;
    if (!(table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.STARTING) || table.getState().equals(TableState.READY_TO_START))) {
      if (match == null) {
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
      }
 else {
        if (match.isDoneSideboarding() && match.getGame() == null) {
          logger.debug(""String_Node_Str"");
          logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
        }
      }
    }
    for (    Map.Entry<UUID,UUID> userPlayerEntry : userPlayerMap.entrySet()) {
      MatchPlayer matchPlayer=match.getPlayer(userPlayerEntry.getValue());
      if (matchPlayer == null) {
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"" + match.getId());
        logger.debug(""String_Node_Str"" + userPlayerEntry.getKey());
        logger.debug(""String_Node_Str"" + userPlayerEntry.getValue());
        continue;
      }
      if (matchPlayer.getPlayer().isHuman()) {
        humanPlayers++;
        if (!match.isDoneSideboarding() || (!matchPlayer.hasQuit() && match.getGame() != null && matchPlayer.getPlayer().isInGame())) {
          User user=UserManager.getInstance().getUser(userPlayerEntry.getKey());
          if (user == null) {
            logger.debug(""String_Node_Str"" + matchPlayer.getName());
            logger.debug(""String_Node_Str"" + match.getId());
            logger.debug(""String_Node_Str"" + userPlayerEntry.getKey());
            logger.debug(""String_Node_Str"" + userPlayerEntry.getValue());
            return false;
          }
          validHumanPlayers++;
        }
      }
 else {
        aiPlayers++;
      }
    }
    return validHumanPlayers >= 2 || validHumanPlayers == humanPlayers || aiPlayers > 1;
  }
  return true;
}","public boolean isMatchTableStillValid(){
  if (!table.isTournament()) {
    int humanPlayers=0;
    int aiPlayers=0;
    int validHumanPlayers=0;
    if (!(table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.STARTING) || table.getState().equals(TableState.READY_TO_START))) {
      if (match == null) {
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
      }
 else {
        if (match.isDoneSideboarding() && match.getGame() == null) {
          logger.debug(""String_Node_Str"");
          logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
        }
      }
    }
    for (    Map.Entry<UUID,UUID> userPlayerEntry : userPlayerMap.entrySet()) {
      MatchPlayer matchPlayer=match.getPlayer(userPlayerEntry.getValue());
      if (matchPlayer == null) {
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"" + match.getId());
        logger.debug(""String_Node_Str"" + userPlayerEntry.getKey());
        logger.debug(""String_Node_Str"" + userPlayerEntry.getValue());
        continue;
      }
      if (matchPlayer.getPlayer().isHuman()) {
        humanPlayers++;
        if ((table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.STARTING) || table.getState().equals(TableState.READY_TO_START)) || !match.isDoneSideboarding() || (!matchPlayer.hasQuit() && match.getGame() != null && matchPlayer.getPlayer().isInGame())) {
          User user=UserManager.getInstance().getUser(userPlayerEntry.getKey());
          if (user == null) {
            logger.debug(""String_Node_Str"" + matchPlayer.getName());
            logger.debug(""String_Node_Str"" + match.getId());
            logger.debug(""String_Node_Str"" + userPlayerEntry.getKey());
            logger.debug(""String_Node_Str"" + userPlayerEntry.getValue());
            return false;
          }
          validHumanPlayers++;
        }
      }
 else {
        aiPlayers++;
      }
    }
    return validHumanPlayers >= 2 || validHumanPlayers == humanPlayers || aiPlayers > 1;
  }
  return true;
}",0.9519526627218936
159149,"public int emptyManaType(List<ManaType> manaTypeArray){
  int total=count();
  Iterator<ManaPoolItem> it=manaItems.iterator();
  while (it.hasNext()) {
    ManaPoolItem item=it.next();
    for (    ManaType manaType : manaTypeArray) {
      if (item.get(manaType) > 0) {
        total+=item.get(manaType);
        item.remove(manaType);
      }
    }
    if (item.count() == 0) {
      it.remove();
    }
  }
  return total;
}","public int emptyManaType(List<ManaType> manaTypeArray){
  int total=count();
  Iterator<ManaPoolItem> it=manaItems.iterator();
  while (it.hasNext()) {
    ManaPoolItem item=it.next();
    for (    ManaType manaType : manaTypeArray) {
      if (item.get(manaType) > 0) {
        total+=item.get(manaType);
        while (item.get(manaType) > 0) {
          item.remove(manaType);
        }
      }
    }
    if (item.count() == 0) {
      it.remove();
    }
  }
  return total;
}",0.9414364640883978
159150,"public ContinuousEffectImpl(final ContinuousEffectImpl effect){
  super(effect);
  this.duration=effect.duration;
  this.layer=effect.layer;
  this.sublayer=effect.sublayer;
  this.timestamp=new Date(effect.timestamp.getTime());
  this.used=effect.used;
  this.discarded=effect.discarded;
  this.affectedObjectsSet=effect.affectedObjectsSet;
  this.objects.addAll(effect.objects);
}","public ContinuousEffectImpl(final ContinuousEffectImpl effect){
  super(effect);
  this.duration=effect.duration;
  this.layer=effect.layer;
  this.sublayer=effect.sublayer;
  this.timestamp=new Date(effect.timestamp.getTime());
  this.used=effect.used;
  this.discarded=effect.discarded;
  this.affectedObjectsSet=effect.affectedObjectsSet;
  this.objects.addAll(effect.objects);
  this.startingTurn=effect.startingTurn;
  this.startingControllerId=effect.startingControllerId;
}",0.8863109048723898
159151,"/** 
 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
 */
@SuppressWarnings(""String_Node_Str"") private void initComponents(){
  panelBackground=new MageRoundPane();
  panelBackground.setPreferredSize(new Dimension(PANEL_WIDTH - 2,PANEL_HEIGHT));
  Rectangle r=new Rectangle(80,80);
  timerLabel=new JLabel();
  lifeLabel=new JLabel();
  handLabel=new JLabel();
  poisonLabel=new JLabel();
  libraryLabel=new JLabel();
  setOpaque(false);
  panelBackground.setXOffset(3);
  panelBackground.setYOffset(3);
  panelBackground.setVisible(true);
  Image image=ImageHelper.getImageFromResources(DEFAULT_AVATAR_PATH);
  topCardPanel=Plugins.getInstance().getMageCard(new CardView(CardRepository.instance.findCard(""String_Node_Str"").getMockCard()),bigCard,topCardDimension,gameId,true);
  topCardPanel.setVisible(false);
  panelBackground.add(topCardPanel);
  BufferedImage resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  avatar=new HoverButton(""String_Node_Str"",resized,resized,resized,r);
  String showPlayerNamePermanently=MageFrame.getPreferences().get(PreferencesDialog.KEY_SHOW_PLAYER_NAMES_PERMANENTLY,""String_Node_Str"");
  if (showPlayerNamePermanently.equals(""String_Node_Str"")) {
    avatar.setTextAlwaysVisible(true);
  }
  avatar.setTextOffsetButtonY(10);
  avatar.setObserver(new Command(){
    @Override public void execute(){
      session.sendPlayerUUID(gameId,playerId);
    }
  }
);
  timerLabel.setToolTipText(""String_Node_Str"");
  timerLabel.setSize(80,12);
  timerLabel.setHorizontalAlignment(SwingConstants.CENTER);
  r=new Rectangle(18,18);
  lifeLabel.setToolTipText(""String_Node_Str"");
  Image imageLife=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedLife=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageLife,BufferedImage.TYPE_INT_ARGB),r);
  life=new ImagePanel(resizedLife,ImagePanel.ACTUAL);
  life.setToolTipText(""String_Node_Str"");
  life.setOpaque(false);
  r=new Rectangle(18,18);
  handLabel.setToolTipText(""String_Node_Str"");
  Image imageHand=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedHand=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageHand,BufferedImage.TYPE_INT_ARGB),r);
  hand=new ImagePanel(resizedHand,ImagePanel.ACTUAL);
  hand.setToolTipText(""String_Node_Str"");
  hand.setOpaque(false);
  poisonLabel.setText(""String_Node_Str"");
  r=new Rectangle(14,14);
  poisonLabel.setToolTipText(""String_Node_Str"");
  Image imagePoison=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedPoison=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imagePoison,BufferedImage.TYPE_INT_ARGB),r);
  poison=new ImagePanel(resizedPoison,ImagePanel.ACTUAL);
  poison.setToolTipText(""String_Node_Str"");
  poison.setOpaque(false);
  r=new Rectangle(19,19);
  libraryLabel.setToolTipText(""String_Node_Str"");
  Image imageLibrary=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedLibrary=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageLibrary,BufferedImage.TYPE_INT_ARGB),r);
  library=new ImagePanel(resizedLibrary,ImagePanel.ACTUAL);
  library.setToolTipText(""String_Node_Str"");
  library.setOpaque(false);
  graveLabel=new JLabel();
  r=new Rectangle(21,21);
  graveLabel.setToolTipText(""String_Node_Str"");
  Image imageGrave=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedGrave=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageGrave,BufferedImage.TYPE_INT_ARGB),r);
  grave=new HoverButton(null,resizedGrave,resizedGrave,resizedGrave,r);
  grave.setToolTipText(""String_Node_Str"");
  grave.setOpaque(false);
  grave.setObserver(new Command(){
    @Override public void execute(){
      btnGraveActionPerformed(null);
    }
  }
);
  exileLabel=new JLabel();
  exileLabel.setToolTipText(""String_Node_Str"");
  image=ImageHelper.getImageFromResources(""String_Node_Str"");
  r=new Rectangle(21,21);
  resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  exileZone=new HoverButton(null,resized,resized,resized,r);
  exileZone.setToolTipText(""String_Node_Str"");
  exileZone.setOpaque(false);
  exileZone.setObserver(new Command(){
    @Override public void execute(){
      btnExileZoneActionPerformed(null);
    }
  }
);
  exileZone.setBounds(25,0,21,21);
  r=new Rectangle(25,21);
  image=ImageHelper.getImageFromResources(""String_Node_Str"");
  resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  cheat=new JButton();
  cheat.setIcon(new ImageIcon(resized));
  cheat.setToolTipText(""String_Node_Str"");
  cheat.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      btnCheatActionPerformed(e);
    }
  }
);
  zonesPanel=new JPanel();
  zonesPanel.setPreferredSize(new Dimension(100,20));
  zonesPanel.setSize(100,20);
  zonesPanel.setLayout(null);
  image=ImageHelper.getImageFromResources(""String_Node_Str"");
  r=new Rectangle(21,21);
  resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  commandZone=new HoverButton(null,resized,resized,resized,r);
  commandZone.setToolTipText(""String_Node_Str"");
  commandZone.setOpaque(false);
  commandZone.setObserver(new Command(){
    @Override public void execute(){
      btnCommandZoneActionPerformed(null);
    }
  }
);
  commandZone.setBounds(5,0,21,21);
  zonesPanel.add(commandZone);
  cheat.setBounds(28,0,25,21);
  zonesPanel.add(cheat);
  btnPlayer=new JButton();
  btnPlayer.setText(""String_Node_Str"");
  btnPlayer.setVisible(false);
  btnPlayer.setToolTipText(""String_Node_Str"");
  btnPlayer.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      session.sendPlayerUUID(gameId,playerId);
    }
  }
);
  JLabel manaCountLabelW=new JLabel();
  manaCountLabelW.setToolTipText(""String_Node_Str"");
  manaCountLabelW.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelW);
  r=new Rectangle(12,12);
  BufferedImage imageManaW=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  HoverButton btnWhiteMana=new HoverButton(null,imageManaW,imageManaW,imageManaW,r);
  btnWhiteMana.setToolTipText(""String_Node_Str"");
  btnWhiteMana.setOpaque(false);
  btnWhiteMana.setObserver(new Command(){
    @Override public void execute(){
      btnManaActionPerformed(ManaType.WHITE);
    }
  }
);
  JLabel manaCountLabelU=new JLabel();
  manaCountLabelU.setToolTipText(""String_Node_Str"");
  manaCountLabelU.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelU);
  r=new Rectangle(12,12);
  BufferedImage imageManaU=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  HoverButton btnBlueMana=new HoverButton(null,imageManaU,imageManaU,imageManaU,r);
  btnBlueMana.setToolTipText(""String_Node_Str"");
  btnBlueMana.setOpaque(false);
  btnBlueMana.setObserver(new Command(){
    @Override public void execute(){
      btnManaActionPerformed(ManaType.BLUE);
    }
  }
);
  JLabel manaCountLabelB=new JLabel();
  manaCountLabelB.setToolTipText(""String_Node_Str"");
  manaCountLabelB.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelB);
  r=new Rectangle(12,12);
  BufferedImage imageManaB=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  HoverButton btnBlackMana=new HoverButton(null,imageManaB,imageManaB,imageManaB,r);
  btnBlackMana.setToolTipText(""String_Node_Str"");
  btnBlackMana.setOpaque(false);
  btnBlackMana.setObserver(new Command(){
    @Override public void execute(){
      btnManaActionPerformed(ManaType.BLACK);
    }
  }
);
  JLabel manaCountLabelR=new JLabel();
  manaCountLabelR.setToolTipText(""String_Node_Str"");
  manaCountLabelR.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelR);
  r=new Rectangle(12,12);
  BufferedImage imageManaR=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  HoverButton btnRedMana=new HoverButton(null,imageManaR,imageManaR,imageManaR,r);
  btnRedMana.setToolTipText(""String_Node_Str"");
  btnRedMana.setOpaque(false);
  btnRedMana.setObserver(new Command(){
    @Override public void execute(){
      btnManaActionPerformed(ManaType.RED);
    }
  }
);
  JLabel manaCountLabelG=new JLabel();
  manaCountLabelG.setToolTipText(""String_Node_Str"");
  manaCountLabelG.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelG);
  r=new Rectangle(12,12);
  BufferedImage imageManaG=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  HoverButton btnGreenMana=new HoverButton(null,imageManaG,imageManaG,imageManaG,r);
  btnGreenMana.setToolTipText(""String_Node_Str"");
  btnGreenMana.setOpaque(false);
  btnGreenMana.setObserver(new Command(){
    @Override public void execute(){
      btnManaActionPerformed(ManaType.GREEN);
    }
  }
);
  JLabel manaCountLabelX=new JLabel();
  manaCountLabelX.setToolTipText(""String_Node_Str"");
  manaCountLabelX.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelX);
  r=new Rectangle(12,12);
  BufferedImage imageManaX=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  HoverButton btnColorlessMana=new HoverButton(null,imageManaX,imageManaX,imageManaX,r);
  btnColorlessMana.setToolTipText(""String_Node_Str"");
  btnColorlessMana.setOpaque(false);
  btnColorlessMana.setObserver(new Command(){
    @Override public void execute(){
      btnManaActionPerformed(ManaType.COLORLESS);
    }
  }
);
  GroupLayout gl_panelBackground=new GroupLayout(panelBackground);
  gl_panelBackground.setHorizontalGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(9).addComponent(life,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE).addGap(3).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(hand,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addComponent(lifeLabel,GroupLayout.PREFERRED_SIZE,25,GroupLayout.PREFERRED_SIZE)).addGap(4).addComponent(handLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(9).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(3).addComponent(poison,GroupLayout.PREFERRED_SIZE,14,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(btnWhiteMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(btnBlueMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(btnBlackMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addComponent(grave,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(library,GroupLayout.PREFERRED_SIZE,19,GroupLayout.PREFERRED_SIZE)).addComponent(poisonLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(20).addComponent(btnRedMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(manaCountLabelW,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGap(3).addComponent(manaCountLabelR,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(manaCountLabelB,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(19).addComponent(btnColorlessMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE))).addGap(5).addComponent(manaCountLabelX,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(20).addComponent(btnGreenMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(40).addComponent(manaCountLabelG,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(40).addComponent(libraryLabel,GroupLayout.PREFERRED_SIZE,25,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(exileZone,GroupLayout.PREFERRED_SIZE,25,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(5).addComponent(graveLabel,GroupLayout.PREFERRED_SIZE,25,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(40).addComponent(exileLabel,GroupLayout.PREFERRED_SIZE,25,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(manaCountLabelU,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)))).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(btnPlayer,Alignment.TRAILING,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(timerLabel,Alignment.TRAILING,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(avatar,Alignment.TRAILING,GroupLayout.DEFAULT_SIZE,80,Short.MAX_VALUE)).addGap(14)).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addComponent(zonesPanel,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE).addGap(14)));
  gl_panelBackground.setVerticalGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addComponent(avatar,GroupLayout.PREFERRED_SIZE,80,GroupLayout.PREFERRED_SIZE).addPreferredGap(ComponentPlacement.RELATED).addComponent(btnPlayer).addComponent(timerLabel).addGap(1).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(life,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(hand,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addComponent(lifeLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addComponent(handLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(1).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(4).addComponent(poison,GroupLayout.PREFERRED_SIZE,14,GroupLayout.PREFERRED_SIZE).addGap(4).addComponent(btnWhiteMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(2).addComponent(btnBlueMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(2).addComponent(btnBlackMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(5).addComponent(grave,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(library,GroupLayout.PREFERRED_SIZE,19,GroupLayout.PREFERRED_SIZE)).addComponent(poisonLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(2).addComponent(btnRedMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(14).addComponent(manaCountLabelW,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(14).addComponent(manaCountLabelR,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGap(4).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(manaCountLabelB,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(8).addComponent(btnColorlessMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addComponent(manaCountLabelX,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGroup(gl_panelBackground.createSequentialGroup().addGap(39).addComponent(btnGreenMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(31).addComponent(manaCountLabelG,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addComponent(libraryLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(76).addComponent(exileZone,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(76).addComponent(graveLabel,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(76).addComponent(exileLabel,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(31).addComponent(manaCountLabelU,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addPreferredGap(ComponentPlacement.RELATED).addComponent(zonesPanel,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  panelBackground.setLayout(gl_panelBackground);
  GroupLayout groupLayout=new GroupLayout(this);
  groupLayout.setHorizontalGroup(groupLayout.createParallelGroup(Alignment.LEADING).addGroup(groupLayout.createSequentialGroup().addComponent(panelBackground,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  groupLayout.setVerticalGroup(groupLayout.createParallelGroup(Alignment.LEADING).addGroup(groupLayout.createSequentialGroup().addComponent(panelBackground,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  setLayout(groupLayout);
}","/** 
 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
 */
@SuppressWarnings(""String_Node_Str"") private void initComponents(){
  panelBackground=new MageRoundPane();
  panelBackground.setPreferredSize(new Dimension(PANEL_WIDTH - 2,PANEL_HEIGHT));
  Rectangle r=new Rectangle(80,80);
  timerLabel=new JLabel();
  lifeLabel=new JLabel();
  handLabel=new JLabel();
  poisonLabel=new JLabel();
  libraryLabel=new JLabel();
  setOpaque(false);
  panelBackground.setXOffset(3);
  panelBackground.setYOffset(3);
  panelBackground.setVisible(true);
  Image image=ImageHelper.getImageFromResources(DEFAULT_AVATAR_PATH);
  topCardPanel=Plugins.getInstance().getMageCard(new CardView(CardRepository.instance.findCard(""String_Node_Str"").getMockCard()),bigCard,topCardDimension,gameId,true);
  topCardPanel.setVisible(false);
  panelBackground.add(topCardPanel);
  BufferedImage resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  avatar=new HoverButton(""String_Node_Str"",resized,resized,resized,r);
  String showPlayerNamePermanently=MageFrame.getPreferences().get(PreferencesDialog.KEY_SHOW_PLAYER_NAMES_PERMANENTLY,""String_Node_Str"");
  if (showPlayerNamePermanently.equals(""String_Node_Str"")) {
    avatar.setTextAlwaysVisible(true);
  }
  avatar.setTextOffsetButtonY(10);
  avatar.setObserver(new Command(){
    @Override public void execute(){
      session.sendPlayerUUID(gameId,playerId);
    }
  }
);
  timerLabel.setToolTipText(""String_Node_Str"");
  timerLabel.setSize(80,12);
  timerLabel.setHorizontalAlignment(SwingConstants.CENTER);
  r=new Rectangle(18,18);
  lifeLabel.setToolTipText(""String_Node_Str"");
  Image imageLife=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedLife=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageLife,BufferedImage.TYPE_INT_ARGB),r);
  life=new ImagePanel(resizedLife,ImagePanel.ACTUAL);
  life.setToolTipText(""String_Node_Str"");
  life.setOpaque(false);
  r=new Rectangle(18,18);
  handLabel.setToolTipText(""String_Node_Str"");
  Image imageHand=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedHand=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageHand,BufferedImage.TYPE_INT_ARGB),r);
  hand=new ImagePanel(resizedHand,ImagePanel.ACTUAL);
  hand.setToolTipText(""String_Node_Str"");
  hand.setOpaque(false);
  poisonLabel.setText(""String_Node_Str"");
  r=new Rectangle(14,14);
  poisonLabel.setToolTipText(""String_Node_Str"");
  Image imagePoison=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedPoison=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imagePoison,BufferedImage.TYPE_INT_ARGB),r);
  poison=new ImagePanel(resizedPoison,ImagePanel.ACTUAL);
  poison.setToolTipText(""String_Node_Str"");
  poison.setOpaque(false);
  r=new Rectangle(19,19);
  libraryLabel.setToolTipText(""String_Node_Str"");
  Image imageLibrary=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedLibrary=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageLibrary,BufferedImage.TYPE_INT_ARGB),r);
  library=new ImagePanel(resizedLibrary,ImagePanel.ACTUAL);
  library.setToolTipText(""String_Node_Str"");
  library.setOpaque(false);
  graveLabel=new JLabel();
  r=new Rectangle(21,21);
  graveLabel.setToolTipText(""String_Node_Str"");
  Image imageGrave=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedGrave=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageGrave,BufferedImage.TYPE_INT_ARGB),r);
  grave=new HoverButton(null,resizedGrave,resizedGrave,resizedGrave,r);
  grave.setToolTipText(""String_Node_Str"");
  grave.setOpaque(false);
  grave.setObserver(new Command(){
    @Override public void execute(){
      btnGraveActionPerformed(null);
    }
  }
);
  exileLabel=new JLabel();
  exileLabel.setToolTipText(""String_Node_Str"");
  image=ImageHelper.getImageFromResources(""String_Node_Str"");
  r=new Rectangle(21,21);
  resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  exileZone=new HoverButton(null,resized,resized,resized,r);
  exileZone.setToolTipText(""String_Node_Str"");
  exileZone.setOpaque(false);
  exileZone.setObserver(new Command(){
    @Override public void execute(){
      btnExileZoneActionPerformed(null);
    }
  }
);
  exileZone.setBounds(25,0,21,21);
  r=new Rectangle(25,21);
  image=ImageHelper.getImageFromResources(""String_Node_Str"");
  resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  cheat=new JButton();
  cheat.setIcon(new ImageIcon(resized));
  cheat.setToolTipText(""String_Node_Str"");
  cheat.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      btnCheatActionPerformed(e);
    }
  }
);
  zonesPanel=new JPanel();
  zonesPanel.setPreferredSize(new Dimension(100,20));
  zonesPanel.setSize(100,20);
  zonesPanel.setLayout(null);
  image=ImageHelper.getImageFromResources(""String_Node_Str"");
  r=new Rectangle(21,21);
  resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  commandZone=new HoverButton(null,resized,resized,resized,r);
  commandZone.setToolTipText(""String_Node_Str"");
  commandZone.setOpaque(false);
  commandZone.setObserver(new Command(){
    @Override public void execute(){
      btnCommandZoneActionPerformed(null);
    }
  }
);
  commandZone.setBounds(5,0,21,21);
  zonesPanel.add(commandZone);
  cheat.setBounds(28,0,25,21);
  zonesPanel.add(cheat);
  btnPlayer=new JButton();
  btnPlayer.setText(""String_Node_Str"");
  btnPlayer.setVisible(false);
  btnPlayer.setToolTipText(""String_Node_Str"");
  btnPlayer.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      session.sendPlayerUUID(gameId,playerId);
    }
  }
);
  JLabel manaCountLabelW=new JLabel();
  manaCountLabelW.setToolTipText(""String_Node_Str"");
  manaCountLabelW.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelW);
  r=new Rectangle(12,12);
  BufferedImage imageManaW=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  HoverButton btnWhiteMana=new HoverButton(null,imageManaW,imageManaW,imageManaW,r);
  btnWhiteMana.setToolTipText(""String_Node_Str"");
  btnWhiteMana.setOpaque(false);
  btnWhiteMana.setObserver(new Command(){
    @Override public void execute(){
      btnManaActionPerformed(ManaType.WHITE);
    }
  }
);
  JLabel manaCountLabelU=new JLabel();
  manaCountLabelU.setToolTipText(""String_Node_Str"");
  manaCountLabelU.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelU);
  r=new Rectangle(12,12);
  BufferedImage imageManaU=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  HoverButton btnBlueMana=new HoverButton(null,imageManaU,imageManaU,imageManaU,r);
  btnBlueMana.setToolTipText(""String_Node_Str"");
  btnBlueMana.setOpaque(false);
  btnBlueMana.setObserver(new Command(){
    @Override public void execute(){
      btnManaActionPerformed(ManaType.BLUE);
    }
  }
);
  JLabel manaCountLabelB=new JLabel();
  manaCountLabelB.setToolTipText(""String_Node_Str"");
  manaCountLabelB.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelB);
  r=new Rectangle(12,12);
  BufferedImage imageManaB=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  HoverButton btnBlackMana=new HoverButton(null,imageManaB,imageManaB,imageManaB,r);
  btnBlackMana.setToolTipText(""String_Node_Str"");
  btnBlackMana.setOpaque(false);
  btnBlackMana.setObserver(new Command(){
    @Override public void execute(){
      btnManaActionPerformed(ManaType.BLACK);
    }
  }
);
  JLabel manaCountLabelR=new JLabel();
  manaCountLabelR.setToolTipText(""String_Node_Str"");
  manaCountLabelR.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelR);
  r=new Rectangle(12,12);
  BufferedImage imageManaR=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  HoverButton btnRedMana=new HoverButton(null,imageManaR,imageManaR,imageManaR,r);
  btnRedMana.setToolTipText(""String_Node_Str"");
  btnRedMana.setOpaque(false);
  btnRedMana.setObserver(new Command(){
    @Override public void execute(){
      btnManaActionPerformed(ManaType.RED);
    }
  }
);
  JLabel manaCountLabelG=new JLabel();
  manaCountLabelG.setToolTipText(""String_Node_Str"");
  manaCountLabelG.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelG);
  r=new Rectangle(12,12);
  BufferedImage imageManaG=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  HoverButton btnGreenMana=new HoverButton(null,imageManaG,imageManaG,imageManaG,r);
  btnGreenMana.setToolTipText(""String_Node_Str"");
  btnGreenMana.setOpaque(false);
  btnGreenMana.setObserver(new Command(){
    @Override public void execute(){
      btnManaActionPerformed(ManaType.GREEN);
    }
  }
);
  JLabel manaCountLabelX=new JLabel();
  manaCountLabelX.setToolTipText(""String_Node_Str"");
  manaCountLabelX.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelX);
  r=new Rectangle(12,12);
  BufferedImage imageManaX=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  HoverButton btnColorlessMana=new HoverButton(null,imageManaX,imageManaX,imageManaX,r);
  btnColorlessMana.setToolTipText(""String_Node_Str"");
  btnColorlessMana.setOpaque(false);
  btnColorlessMana.setObserver(new Command(){
    @Override public void execute(){
      btnManaActionPerformed(ManaType.COLORLESS);
    }
  }
);
  GroupLayout gl_panelBackground=new GroupLayout(panelBackground);
  gl_panelBackground.setHorizontalGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(9).addComponent(life,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE).addGap(3).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(hand,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addComponent(lifeLabel,GroupLayout.PREFERRED_SIZE,25,GroupLayout.PREFERRED_SIZE)).addGap(4).addComponent(handLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(9).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(3).addComponent(poison,GroupLayout.PREFERRED_SIZE,14,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(btnWhiteMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(btnBlueMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(btnBlackMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addComponent(grave,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(library,GroupLayout.PREFERRED_SIZE,19,GroupLayout.PREFERRED_SIZE)).addComponent(poisonLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(20).addComponent(btnRedMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(manaCountLabelW,GroupLayout.PREFERRED_SIZE,MANA_LABEL_SIZE_HORIZONTAL,GroupLayout.PREFERRED_SIZE))).addGap(3).addComponent(manaCountLabelR,GroupLayout.PREFERRED_SIZE,MANA_LABEL_SIZE_HORIZONTAL,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(manaCountLabelB,GroupLayout.PREFERRED_SIZE,MANA_LABEL_SIZE_HORIZONTAL,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(19).addComponent(btnColorlessMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE))).addGap(5).addComponent(manaCountLabelX,GroupLayout.PREFERRED_SIZE,MANA_LABEL_SIZE_HORIZONTAL,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(20).addComponent(btnGreenMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(40).addComponent(manaCountLabelG,GroupLayout.PREFERRED_SIZE,MANA_LABEL_SIZE_HORIZONTAL,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(40).addComponent(libraryLabel,GroupLayout.PREFERRED_SIZE,25,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(exileZone,GroupLayout.PREFERRED_SIZE,25,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(5).addComponent(graveLabel,GroupLayout.PREFERRED_SIZE,25,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(40).addComponent(exileLabel,GroupLayout.PREFERRED_SIZE,25,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(manaCountLabelU,GroupLayout.PREFERRED_SIZE,MANA_LABEL_SIZE_HORIZONTAL,GroupLayout.PREFERRED_SIZE)))).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(btnPlayer,Alignment.TRAILING,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(timerLabel,Alignment.TRAILING,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(avatar,Alignment.TRAILING,GroupLayout.DEFAULT_SIZE,80,Short.MAX_VALUE)).addGap(14)).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addComponent(zonesPanel,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE).addGap(14)));
  gl_panelBackground.setVerticalGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addComponent(avatar,GroupLayout.PREFERRED_SIZE,80,GroupLayout.PREFERRED_SIZE).addPreferredGap(ComponentPlacement.RELATED).addComponent(btnPlayer).addComponent(timerLabel).addGap(1).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(life,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(hand,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addComponent(lifeLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addComponent(handLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(1).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(4).addComponent(poison,GroupLayout.PREFERRED_SIZE,14,GroupLayout.PREFERRED_SIZE).addGap(4).addComponent(btnWhiteMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(2).addComponent(btnBlueMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(2).addComponent(btnBlackMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(5).addComponent(grave,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(library,GroupLayout.PREFERRED_SIZE,19,GroupLayout.PREFERRED_SIZE)).addComponent(poisonLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(2).addComponent(btnRedMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(14).addComponent(manaCountLabelW,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(14).addComponent(manaCountLabelR,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGap(4).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(manaCountLabelB,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(8).addComponent(btnColorlessMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addComponent(manaCountLabelX,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGroup(gl_panelBackground.createSequentialGroup().addGap(39).addComponent(btnGreenMana,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(31).addComponent(manaCountLabelG,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addComponent(libraryLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(76).addComponent(exileZone,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(76).addComponent(graveLabel,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(76).addComponent(exileLabel,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(31).addComponent(manaCountLabelU,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addPreferredGap(ComponentPlacement.RELATED).addComponent(zonesPanel,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  panelBackground.setLayout(gl_panelBackground);
  GroupLayout groupLayout=new GroupLayout(this);
  groupLayout.setHorizontalGroup(groupLayout.createParallelGroup(Alignment.LEADING).addGroup(groupLayout.createSequentialGroup().addComponent(panelBackground,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  groupLayout.setVerticalGroup(groupLayout.createParallelGroup(Alignment.LEADING).addGroup(groupLayout.createSequentialGroup().addComponent(panelBackground,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  setLayout(groupLayout);
}",0.992053264604811
159152,"@Override public boolean canPay(Ability ability,UUID sourceId,UUID controllerId,Game game){
  Permanent planeswalker=game.getPermanent(sourceId);
  return planeswalker.getCounters().getCount(CounterType.LOYALTY) + amount >= 0 && planeswalker.canLoyaltyBeUsed(game);
}","@Override public boolean canPay(Ability ability,UUID sourceId,UUID controllerId,Game game){
  Permanent planeswalker=game.getPermanent(sourceId);
  return planeswalker != null && planeswalker.getCounters().getCount(CounterType.LOYALTY) + amount >= 0 && planeswalker.canLoyaltyBeUsed(game);
}",0.956989247311828
159153,"@Override public boolean canPay(Ability ability,UUID sourceId,UUID controllerId,Game game){
  Permanent permanent=game.getPermanent(sourceId);
  if (permanent.getCounters().getCount(name) >= amount) {
    return true;
  }
  return false;
}","@Override public boolean canPay(Ability ability,UUID sourceId,UUID controllerId,Game game){
  Permanent permanent=game.getPermanent(sourceId);
  if (permanent != null && permanent.getCounters().getCount(name) >= amount) {
    return true;
  }
  return false;
}",0.9579158316633266
159154,"private void btnCancelActionPerformed(java.awt.event.ActionEvent evt){
  try {
    if (session.isTableOwner(roomId,tableId)) {
      session.removeTable(roomId,tableId);
    }
 else {
      if (!session.leaveTable(roomId,tableId)) {
        return;
      }
    }
  }
 catch (  Exception e) {
    logger.error(e);
  }
  closeDialog();
}","private void btnCancelActionPerformed(java.awt.event.ActionEvent evt){
  try {
    if (!session.leaveTable(roomId,tableId)) {
      return;
    }
  }
 catch (  Exception e) {
    logger.error(e);
  }
  closeDialog();
}",0.7160940325497287
159155,"public synchronized boolean joinTable(UUID userId,String name,String playerType,int skill,DeckCardLists deckList) throws MageException {
  User user=UserManager.getInstance().getUser(userId);
  if (user == null) {
    return false;
  }
  if (table.getState() != TableState.WAITING) {
    user.showUserMessage(""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  Seat seat=table.getNextAvailableSeat(playerType);
  if (seat == null) {
    user.showUserMessage(""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  Deck deck=Deck.load(deckList,false,false);
  if (!Main.isTestMode() && !table.getValidator().validate(deck)) {
    StringBuilder sb=new StringBuilder(""String_Node_Str"").append(name).append(""String_Node_Str"").append(table.getValidator().getName()).append(""String_Node_Str"");
    for (    Map.Entry<String,String> entry : table.getValidator().getInvalid().entrySet()) {
      sb.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    user.showUserMessage(""String_Node_Str"",sb.toString());
    return false;
  }
  Player player=createPlayer(name,seat.getPlayerType(),skill);
  if (player == null) {
    String message=new StringBuilder(""String_Node_Str"").append(name).append(""String_Node_Str"").append(seat.getPlayerType().toString()).toString();
    logger.warn(new StringBuilder(""String_Node_Str"").append(user.getName()).append(""String_Node_Str"").append(message).toString());
    user.showUserMessage(""String_Node_Str"",message);
    return false;
  }
  if (!player.canJoinTable(table)) {
    user.showUserMessage(""String_Node_Str"",new StringBuilder(""String_Node_Str"").append(seat.getPlayerType()).append(""String_Node_Str"").toString());
    return false;
  }
  match.addPlayer(player,deck);
  table.joinTable(player,seat);
  logger.trace(player.getName() + ""String_Node_Str"" + table.getId());
  if (seat.getPlayer().isHuman()) {
    user.addTable(player.getId(),table);
    user.joinedTable(table.getRoomId(),table.getId(),false);
    userPlayerMap.put(userId,player.getId());
  }
  return true;
}","public synchronized boolean joinTable(UUID userId,String name,String playerType,int skill,DeckCardLists deckList) throws MageException {
  User user=UserManager.getInstance().getUser(userId);
  if (user == null) {
    return false;
  }
  if (table.getState() != TableState.WAITING) {
    user.showUserMessage(""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  Seat seat=table.getNextAvailableSeat(playerType);
  if (seat == null) {
    user.showUserMessage(""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  Deck deck=Deck.load(deckList,false,false);
  if (!Main.isTestMode() && !table.getValidator().validate(deck)) {
    StringBuilder sb=new StringBuilder(""String_Node_Str"").append(name).append(""String_Node_Str"").append(table.getValidator().getName()).append(""String_Node_Str"");
    for (    Map.Entry<String,String> entry : table.getValidator().getInvalid().entrySet()) {
      sb.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    user.showUserMessage(""String_Node_Str"",sb.toString());
    if (isOwner(userId)) {
      logger.debug(""String_Node_Str"" + table.getId());
      TableManager.getInstance().removeTable(table.getId());
    }
    return false;
  }
  Player player=createPlayer(name,seat.getPlayerType(),skill);
  if (player == null) {
    String message=new StringBuilder(""String_Node_Str"").append(name).append(""String_Node_Str"").append(seat.getPlayerType().toString()).toString();
    logger.warn(new StringBuilder(""String_Node_Str"").append(user.getName()).append(""String_Node_Str"").append(message).toString());
    user.showUserMessage(""String_Node_Str"",message);
    return false;
  }
  if (!player.canJoinTable(table)) {
    user.showUserMessage(""String_Node_Str"",new StringBuilder(""String_Node_Str"").append(seat.getPlayerType()).append(""String_Node_Str"").toString());
    return false;
  }
  match.addPlayer(player,deck);
  table.joinTable(player,seat);
  logger.trace(player.getName() + ""String_Node_Str"" + table.getId());
  if (seat.getPlayer().isHuman()) {
    user.addTable(player.getId(),table);
    user.joinedTable(table.getRoomId(),table.getId(),false);
    userPlayerMap.put(userId,player.getId());
  }
  return true;
}",0.9659584190084533
159156,"/** 
 * All activities of the table end (only replay of games (if active) and display tournament results)
 */
public void closeTable(){
  setState(TableState.FINISHED);
  this.validator=null;
}","/** 
 * All activities of the table end (only replay of games (if active) and display tournament results)
 */
public void closeTable(){
  if (!getState().equals(TableState.WAITING) && !getState().equals(TableState.READY_TO_START)) {
    setState(TableState.FINISHED);
  }
  this.validator=null;
}",0.7893660531697342
159157,"@Override public boolean apply(Game game,Ability source){
  Card card=game.getCard(source.getSourceId());
  if (card != null) {
    if (source.getTargets().get(0).isLegal(source,game)) {
      Permanent creature1=game.getPermanent(source.getTargets().get(0).getFirstTarget());
      Permanent creature2=game.getPermanent(source.getSourceId());
      if (creature1 != null && creature2 != null) {
        if (creature1.getCardType().contains(CardType.CREATURE) && creature2.getCardType().contains(CardType.CREATURE)) {
          creature1.damage(creature2.getPower().getValue(),creature2.getId(),game,false,true);
          creature2.damage(creature1.getPower().getValue(),creature1.getId(),game,false,true);
          return true;
        }
      }
    }
    game.informPlayers(card.getName() + ""String_Node_Str"");
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent originalPermanent=game.getPermanentOrLKIBattlefield(source.getSourceId());
  if (originalPermanent != null) {
    Permanent sourcePermanent=game.getPermanent(source.getSourceId());
    if (source.getTargets().get(0).isLegal(source,game)) {
      Permanent creature1=game.getPermanent(source.getTargets().get(0).getFirstTarget());
      if (creature1 != null && sourcePermanent != null) {
        if (creature1.getCardType().contains(CardType.CREATURE) && sourcePermanent.getCardType().contains(CardType.CREATURE)) {
          creature1.damage(sourcePermanent.getPower().getValue(),sourcePermanent.getId(),game,false,true);
          sourcePermanent.damage(creature1.getPower().getValue(),creature1.getId(),game,false,true);
          return true;
        }
      }
    }
    game.informPlayers(originalPermanent.getLogName() + ""String_Node_Str"");
  }
  return false;
}",0.7891770011273957
159158,"@Override public boolean applies(UUID sourceId,Ability source,UUID affectedControllerId,Game game){
  if (getTargetPointer().getFirst(game,source).equals(sourceId) && affectedControllerId.equals(source.getControllerId())) {
    Card card=game.getCard(sourceId);
    if (card != null && game.getState().getZone(sourceId) == Zone.EXILED) {
      Player player=game.getPlayer(affectedControllerId);
      player.setCastSourceIdWithoutMana(sourceId);
      return true;
    }
  }
  return false;
}","@Override public boolean applies(UUID objectId,Ability source,UUID affectedControllerId,Game game){
  if (objectId.equals(getTargetPointer().getFirst(game,source)) && affectedControllerId.equals(source.getControllerId())) {
    Card card=game.getCard(objectId);
    if (card != null && game.getState().getZone(objectId) == Zone.EXILED) {
      Player player=game.getPlayer(affectedControllerId);
      player.setCastSourceIdWithoutMana(objectId);
      return true;
    }
  }
  return false;
}",0.9188640973630832
159159,"@Override public String getRule(){
  StringBuilder sb=new StringBuilder(""String_Node_Str"").append(manaCosts.getText());
  sb.append(""String_Node_Str"").append(costs.getText()).append(""String_Node_Str"").toString();
  return sb.toString();
}","@Override public String getRule(){
  StringBuilder sb=new StringBuilder(""String_Node_Str"").append(manaCosts.getText());
  sb.append(""String_Node_Str"").append(getManaCosts().getText()).append(""String_Node_Str"").append(getCosts().getText()).append(""String_Node_Str"").toString();
  return sb.toString();
}",0.8629629629629629
159160,"public Counter(Counter counter){
  this.name=counter.name;
  this.count=counter.count;
}","public Counter(final Counter counter){
  this.name=counter.name;
  this.count=counter.count;
}",0.967032967032967
159161,"@Override public Object getValueAt(int arg0,int arg1){
switch (arg1) {
case 0:
    return matches[arg0].getName();
case 1:
  return matches[arg0].getGameType();
case 2:
return matches[arg0].getDeckType();
case 3:
return matches[arg0].getPlayers();
case 4:
return matches[arg0].getResult();
case 5:
return timeFormatter.format(matches[arg0].getStartTime());
case 6:
if (matches[arg0].getEndTime() != null) {
return timeFormatter.format(matches[arg0].getEndTime());
}
 else {
return ""String_Node_Str"";
}
case 7:
if (matches[arg0].isTournament()) {
return ""String_Node_Str"";
}
 else {
if (matches[arg0].isReplayAvailable()) {
return ""String_Node_Str"";
}
 else {
return ""String_Node_Str"";
}
}
case 8:
return matches[arg0].getGames();
}
return ""String_Node_Str"";
}","@Override public Object getValueAt(int arg0,int arg1){
switch (arg1) {
case 0:
    return matches[arg0].getName();
case 1:
  return matches[arg0].getGameType();
case 2:
return matches[arg0].getDeckType();
case 3:
return matches[arg0].getPlayers();
case 4:
return matches[arg0].getResult();
case 5:
if (matches[arg0].getStartTime() != null) {
return timeFormatter.format(matches[arg0].getStartTime());
}
 else {
return ""String_Node_Str"";
}
case 6:
if (matches[arg0].getEndTime() != null) {
return timeFormatter.format(matches[arg0].getEndTime());
}
 else {
return ""String_Node_Str"";
}
case 7:
if (matches[arg0].isTournament()) {
return ""String_Node_Str"";
}
 else {
if (matches[arg0].isReplayAvailable()) {
return ""String_Node_Str"";
}
 else {
return ""String_Node_Str"";
}
}
case 8:
return matches[arg0].getGames();
}
return ""String_Node_Str"";
}",0.94875
159162,"public boolean isMatchTableStillValid(){
  if (!table.isTournament()) {
    int humanPlayers=0;
    int aiPlayers=0;
    int validHumanPlayers=0;
    if (match == null && !(table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.STARTING) || table.getState().equals(TableState.READY_TO_START))) {
      logger.debug(""String_Node_Str"");
      logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
    }
    if (match.isDoneSideboarding()) {
      if (match.getGame() == null) {
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
      }
    }
    for (    Map.Entry<UUID,UUID> userPlayerEntry : userPlayerMap.entrySet()) {
      MatchPlayer matchPlayer=match.getPlayer(userPlayerEntry.getValue());
      if (matchPlayer == null) {
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"" + match.getId());
        logger.debug(""String_Node_Str"" + userPlayerEntry.getKey());
        logger.debug(""String_Node_Str"" + userPlayerEntry.getValue());
        continue;
      }
      if (matchPlayer.getPlayer().isHuman()) {
        humanPlayers++;
        if (!matchPlayer.hasQuit()) {
          User user=UserManager.getInstance().getUser(userPlayerEntry.getKey());
          if (user == null) {
            logger.debug(""String_Node_Str"" + matchPlayer.getName());
            logger.debug(""String_Node_Str"" + match.getId());
            logger.debug(""String_Node_Str"" + userPlayerEntry.getKey());
            logger.debug(""String_Node_Str"" + userPlayerEntry.getValue());
            return false;
          }
          validHumanPlayers++;
        }
      }
 else {
        aiPlayers++;
      }
    }
    return validHumanPlayers >= 2 || validHumanPlayers == humanPlayers || aiPlayers > 1;
  }
  return true;
}","public boolean isMatchTableStillValid(){
  if (!table.isTournament()) {
    int humanPlayers=0;
    int aiPlayers=0;
    int validHumanPlayers=0;
    if (!(table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.STARTING) || table.getState().equals(TableState.READY_TO_START))) {
      if (match == null) {
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
      }
 else {
        if (match.isDoneSideboarding() && match.getGame() == null) {
          logger.debug(""String_Node_Str"");
          logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
        }
      }
    }
    for (    Map.Entry<UUID,UUID> userPlayerEntry : userPlayerMap.entrySet()) {
      MatchPlayer matchPlayer=match.getPlayer(userPlayerEntry.getValue());
      if (matchPlayer == null) {
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"" + match.getId());
        logger.debug(""String_Node_Str"" + userPlayerEntry.getKey());
        logger.debug(""String_Node_Str"" + userPlayerEntry.getValue());
        continue;
      }
      if (matchPlayer.getPlayer().isHuman()) {
        humanPlayers++;
        if (!matchPlayer.hasQuit()) {
          User user=UserManager.getInstance().getUser(userPlayerEntry.getKey());
          if (user == null) {
            logger.debug(""String_Node_Str"" + matchPlayer.getName());
            logger.debug(""String_Node_Str"" + match.getId());
            logger.debug(""String_Node_Str"" + userPlayerEntry.getKey());
            logger.debug(""String_Node_Str"" + userPlayerEntry.getValue());
            return false;
          }
          validHumanPlayers++;
        }
      }
 else {
        aiPlayers++;
      }
    }
    return validHumanPlayers >= 2 || validHumanPlayers == humanPlayers || aiPlayers > 1;
  }
  return true;
}",0.87467498699948
159163,"public GameState rollback(int index){
  if (states.size() > 0 && index < states.size()) {
    while (states.size() > index + 1) {
      states.remove(states.size() - 1);
    }
    logger.debug(""String_Node_Str"" + index);
    return states.get(index);
  }
  return null;
}","public GameState rollback(int index){
  if (states.size() > 0 && index < states.size()) {
    while (states.size() > index + 1) {
      states.remove(states.size() - 1);
    }
    logger.trace(""String_Node_Str"" + index);
    return states.get(index);
  }
  return null;
}",0.981549815498155
159164,"@Override public boolean hasStarted(){
  return startTime != null;
}","@Override public boolean hasStarted(){
  return startedGames > 0;
}",0.8888888888888888
159165,"public MatchImpl(MatchOptions options){
  this.options=options;
  startTime=null;
  replayAvailable=false;
  draws=0;
}","public MatchImpl(MatchOptions options){
  this.options=options;
  this.startTime=new Date();
  replayAvailable=false;
  draws=0;
}",0.931726907630522
159166,"private void checkTableHealthState(){
  if (logger.isDebugEnabled()) {
    debugServerState();
  }
  logger.debug(""String_Node_Str"");
  List<UUID> toRemove=new ArrayList<>();
  ArrayList<Table> tableCopy=new ArrayList<>();
  tableCopy.addAll(tables.values());
  for (  Table table : tableCopy) {
    try {
      if (!table.getState().equals(TableState.FINISHED)) {
        logger.debug(table.getId() + ""String_Node_Str"" + table.getName()+ ""String_Node_Str""+ formatter.format(table.getStartTime())+ ""String_Node_Str""+ table.getState().toString()+ ""String_Node_Str""+ (table.isTournament() ? ""String_Node_Str"" : ""String_Node_Str""));
        TableController tableController=getController(table.getId());
        if (tableController != null) {
          if (table.isTournament()) {
            if (!tableController.isTournamentStillValid()) {
              toRemove.add(table.getId());
            }
          }
 else {
            if (!tableController.isMatchTableStillValid()) {
              toRemove.add(table.getId());
            }
          }
        }
      }
    }
 catch (    Exception ex) {
      logger.debug(""String_Node_Str"" + table.getId());
      logger.debug(Arrays.toString(ex.getStackTrace()));
    }
  }
  for (  UUID tableId : toRemove) {
    try {
      removeTable(tableId);
    }
 catch (    Exception e) {
      logger.error(e);
    }
  }
  logger.debug(""String_Node_Str"");
}","private void checkTableHealthState(){
  if (logger.isDebugEnabled()) {
    debugServerState();
  }
  logger.debug(""String_Node_Str"");
  List<UUID> toRemove=new ArrayList<>();
  ArrayList<Table> tableCopy=new ArrayList<>();
  tableCopy.addAll(tables.values());
  for (  Table table : tableCopy) {
    try {
      if (!table.getState().equals(TableState.FINISHED)) {
        logger.debug(table.getId() + ""String_Node_Str"" + table.getName()+ ""String_Node_Str""+ formatter.format(table.getStartTime() == null ? table.getCreateTime() : table.getCreateTime())+ ""String_Node_Str""+ table.getState().toString()+ ""String_Node_Str""+ (table.isTournament() ? ""String_Node_Str"" : ""String_Node_Str""));
        TableController tableController=getController(table.getId());
        if (tableController != null) {
          if (table.isTournament()) {
            if (!tableController.isTournamentStillValid()) {
              toRemove.add(table.getId());
            }
          }
 else {
            if (!tableController.isMatchTableStillValid()) {
              toRemove.add(table.getId());
            }
          }
        }
      }
    }
 catch (    Exception ex) {
      logger.debug(""String_Node_Str"" + table.getId());
      logger.debug(Arrays.toString(ex.getStackTrace()));
    }
  }
  for (  UUID tableId : toRemove) {
    try {
      removeTable(tableId);
    }
 catch (    Exception e) {
      logger.error(e);
    }
  }
  logger.debug(""String_Node_Str"");
}",0.9803232607167957
159167,"@Override public boolean apply(Game game,Ability source){
  UUID defenderId=game.getCombat().getDefenderId(source.getSourceId());
  Player defender=game.getPlayer(defenderId);
  if (defender != null) {
    Cards cards=new CardsImpl();
    Card card=defender.getLibrary().getFromTop(game);
    if (card != null) {
      cards.add(card);
      defender.revealCards(""String_Node_Str"",cards,game);
      if (card.getCardType().contains(CardType.LAND)) {
        defender.getLibrary().removeFromTop(game);
        defender.moveCardToHandWithInfo(card,source.getSourceId(),game,Zone.LIBRARY);
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  UUID defenderId=game.getCombat().getDefendingPlayerId(source.getSourceId(),game);
  Player defender=game.getPlayer(defenderId);
  if (defender != null) {
    Cards cards=new CardsImpl();
    Card card=defender.getLibrary().getFromTop(game);
    if (card != null) {
      cards.add(card);
      defender.revealCards(""String_Node_Str"",cards,game);
      if (card.getCardType().contains(CardType.LAND)) {
        defender.moveCardToHandWithInfo(card,source.getSourceId(),game,Zone.LIBRARY);
      }
    }
    return true;
  }
  return false;
}",0.9491525423728814
159168,"public TableView(Table table){
  this.tableId=table.getId();
  this.gameType=table.getGameType();
  this.tableName=table.getName();
  this.controllerName=table.getControllerName();
  this.tableState=table.getState();
  if (table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.WAITING)) {
    this.createTime=table.getCreateTime();
  }
 else {
    if (table.isTournament()) {
      this.createTime=table.getTournament().getStartTime();
    }
 else {
      this.createTime=table.getMatch().getStartTime();
    }
  }
  this.isTournament=table.isTournament();
  for (  Seat seat : table.getSeats()) {
    seats.add(new SeatView(seat));
  }
  if (!table.isTournament()) {
    this.wins=table.getMatch().getWinsNeeded();
    this.freeMulligans=table.getMatch().getFreeMulligans();
    for (    Game game : table.getMatch().getGames()) {
      games.add(game.getId());
    }
    StringBuilder sb=new StringBuilder();
    StringBuilder sbScore=new StringBuilder();
    for (    MatchPlayer matchPlayer : table.getMatch().getPlayers()) {
      if (matchPlayer.getPlayer() == null) {
        sb.append(""String_Node_Str"").append(""String_Node_Str"");
        sbScore.append(""String_Node_Str"").append(matchPlayer.getWins());
      }
 else       if (!matchPlayer.getName().equals(table.getControllerName())) {
        sb.append(""String_Node_Str"").append(matchPlayer.getName());
        sbScore.append(""String_Node_Str"").append(matchPlayer.getWins());
      }
 else {
        sbScore.insert(0,matchPlayer.getWins()).insert(0,""String_Node_Str"");
      }
    }
    if (table.getMatch().getDraws() > 0) {
      sbScore.append(""String_Node_Str"").append(table.getMatch().getDraws());
    }
    this.controllerName+=sb.toString();
    this.deckType=table.getDeckType();
    if (table.getMatch().getGames().isEmpty()) {
      this.additionalInfo=new StringBuilder(""String_Node_Str"").append(table.getMatch().getOptions().getMatchTimeLimit().toString()).toString();
    }
 else {
      this.additionalInfo=sbScore.toString();
    }
  }
 else {
    this.wins=table.getTournament().getOptions().getMatchOptions().getWinsNeeded();
    if (table.getTournament().getOptions().getNumberRounds() > 0) {
      this.gameType=new StringBuilder(this.gameType).append(""String_Node_Str"").append(table.getTournament().getOptions().getNumberRounds()).append(""String_Node_Str"").toString();
    }
    this.freeMulligans=table.getTournament().getOptions().getMatchOptions().getFreeMulligans();
    StringBuilder sb1=new StringBuilder();
    for (    TournamentPlayer tp : table.getTournament().getPlayers()) {
      if (!tp.getPlayer().getName().equals(table.getControllerName())) {
        sb1.append(""String_Node_Str"").append(tp.getPlayer().getName());
      }
    }
    this.controllerName+=sb1.toString();
    StringBuilder sb=new StringBuilder(""String_Node_Str"").append(table.getTournament().getPlayers().size()).append(""String_Node_Str"").append(table.getNumberOfSeats());
switch (table.getState()) {
case WAITING:
case READY_TO_START:
case STARTING:
      sb.append(""String_Node_Str"").append(table.getTournament().getOptions().getLimitedOptions().getConstructionTime() / 60).append(""String_Node_Str"");
    break;
case DUELING:
  sb.append(""String_Node_Str"").append(table.getTournament().getRounds().size());
break;
default :
}
this.additionalInfo=sb.toString();
this.deckType=new StringBuilder(table.getDeckType()).append(""String_Node_Str"").append(table.getTournament().getBoosterInfo()).toString();
}
}","public TableView(Table table){
  this.tableId=table.getId();
  this.gameType=table.getGameType();
  this.tableName=table.getName();
  this.controllerName=table.getControllerName();
  this.tableState=table.getState();
  if (table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.READY_TO_START) || table.getState().equals(TableState.STARTING)) {
    this.createTime=table.getCreateTime();
  }
 else {
    if (table.isTournament()) {
      this.createTime=table.getTournament().getStartTime();
    }
 else {
      this.createTime=table.getMatch().getStartTime();
    }
  }
  this.isTournament=table.isTournament();
  for (  Seat seat : table.getSeats()) {
    seats.add(new SeatView(seat));
  }
  if (!table.isTournament()) {
    this.wins=table.getMatch().getWinsNeeded();
    this.freeMulligans=table.getMatch().getFreeMulligans();
    for (    Game game : table.getMatch().getGames()) {
      games.add(game.getId());
    }
    StringBuilder sb=new StringBuilder();
    StringBuilder sbScore=new StringBuilder();
    for (    MatchPlayer matchPlayer : table.getMatch().getPlayers()) {
      if (matchPlayer.getPlayer() == null) {
        sb.append(""String_Node_Str"").append(""String_Node_Str"");
        sbScore.append(""String_Node_Str"").append(matchPlayer.getWins());
      }
 else       if (!matchPlayer.getName().equals(table.getControllerName())) {
        sb.append(""String_Node_Str"").append(matchPlayer.getName());
        sbScore.append(""String_Node_Str"").append(matchPlayer.getWins());
      }
 else {
        sbScore.insert(0,matchPlayer.getWins()).insert(0,""String_Node_Str"");
      }
    }
    if (table.getMatch().getDraws() > 0) {
      sbScore.append(""String_Node_Str"").append(table.getMatch().getDraws());
    }
    this.controllerName+=sb.toString();
    this.deckType=table.getDeckType();
    if (table.getMatch().getGames().isEmpty()) {
      this.additionalInfo=new StringBuilder(""String_Node_Str"").append(table.getMatch().getOptions().getMatchTimeLimit().toString()).toString();
    }
 else {
      this.additionalInfo=sbScore.toString();
    }
  }
 else {
    this.wins=table.getTournament().getOptions().getMatchOptions().getWinsNeeded();
    if (table.getTournament().getOptions().getNumberRounds() > 0) {
      this.gameType=new StringBuilder(this.gameType).append(""String_Node_Str"").append(table.getTournament().getOptions().getNumberRounds()).append(""String_Node_Str"").toString();
    }
    this.freeMulligans=table.getTournament().getOptions().getMatchOptions().getFreeMulligans();
    StringBuilder sb1=new StringBuilder();
    for (    TournamentPlayer tp : table.getTournament().getPlayers()) {
      if (!tp.getPlayer().getName().equals(table.getControllerName())) {
        sb1.append(""String_Node_Str"").append(tp.getPlayer().getName());
      }
    }
    this.controllerName+=sb1.toString();
    StringBuilder sb=new StringBuilder(""String_Node_Str"").append(table.getTournament().getPlayers().size()).append(""String_Node_Str"").append(table.getNumberOfSeats());
switch (table.getState()) {
case WAITING:
case READY_TO_START:
case STARTING:
      sb.append(""String_Node_Str"").append(table.getTournament().getOptions().getLimitedOptions().getConstructionTime() / 60).append(""String_Node_Str"");
    break;
case DUELING:
  sb.append(""String_Node_Str"").append(table.getTournament().getRounds().size());
break;
default :
}
this.additionalInfo=sb.toString();
this.deckType=new StringBuilder(table.getDeckType()).append(""String_Node_Str"").append(table.getTournament().getBoosterInfo()).toString();
}
}",0.2239886444286728
159169,"@Override public Date getStartTime(){
  return new Date(startTime.getTime());
}","@Override public Date getStartTime(){
  if (startTime != null) {
    return new Date(startTime.getTime());
  }
  return null;
}",0.7669902912621359
159170,"@Override public void run(){
  checkExpired();
}","@Override public void run(){
  try {
    checkTableHealthState();
  }
 catch (  Exception ex) {
    logger.fatal(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.3962264150943396
159171,"private TableManager(){
  expireExecutor.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      checkExpired();
    }
  }
,EXPIRE_CHECK_PERIOD,EXPIRE_CHECK_PERIOD,TimeUnit.MINUTES);
}","private TableManager(){
  expireExecutor.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      try {
        checkTableHealthState();
      }
 catch (      Exception ex) {
        logger.fatal(""String_Node_Str"");
        ex.printStackTrace();
      }
    }
  }
,EXPIRE_CHECK_PERIOD,EXPIRE_CHECK_PERIOD,TimeUnit.MINUTES);
}",0.717948717948718
159172,"public void debugServerState(){
  logger.debug(""String_Node_Str"");
  Collection<User> users=UserManager.getInstance().getUsers();
  logger.debug(""String_Node_Str"" + users.size() + ""String_Node_Str"");
  for (  User user : users) {
    logger.debug(user.getId() + ""String_Node_Str"" + formatter.format(user.getConnectionTime())+ ""String_Node_Str""+ user.getName()+ ""String_Node_Str""+ user.getUserState().toString()+ ""String_Node_Str"");
  }
  ArrayList<ChatSession> chatSessions=ChatManager.getInstance().getChatSessions();
  logger.debug(""String_Node_Str"" + chatSessions.size() + ""String_Node_Str"");
  for (  ChatSession chatSession : chatSessions) {
    logger.debug(chatSession.getChatId() + ""String_Node_Str"" + formatter.format(chatSession.getCreateTime())+ ""String_Node_Str""+ chatSession.getInfo()+ ""String_Node_Str""+ chatSession.getClients().values().toString());
  }
  logger.debug(""String_Node_Str"" + tables.size() + ""String_Node_Str"");
  for (  Table table : tables.values()) {
    logger.debug(table.getId() + ""String_Node_Str"" + table.getName()+ ""String_Node_Str""+ formatter.format(table.getStartTime())+ ""String_Node_Str""+ table.getState().toString()+ ""String_Node_Str"");
  }
  logger.debug(""String_Node_Str"" + GameManager.getInstance().getNumberActiveGames() + ""String_Node_Str"");
  for (  Entry<UUID,GameController> entry : GameManager.getInstance().getGameController().entrySet()) {
    logger.debug(entry.getKey() + entry.getValue().getPlayerNameList());
  }
  logger.debug(""String_Node_Str"");
}","public void debugServerState(){
  logger.debug(""String_Node_Str"");
  Collection<User> users=UserManager.getInstance().getUsers();
  logger.debug(""String_Node_Str"" + users.size() + ""String_Node_Str"");
  for (  User user : users) {
    logger.debug(user.getId() + ""String_Node_Str"" + formatter.format(user.getConnectionTime())+ ""String_Node_Str""+ user.getName()+ ""String_Node_Str""+ user.getUserState().toString()+ ""String_Node_Str"");
  }
  ArrayList<ChatSession> chatSessions=ChatManager.getInstance().getChatSessions();
  logger.debug(""String_Node_Str"" + chatSessions.size() + ""String_Node_Str"");
  for (  ChatSession chatSession : chatSessions) {
    logger.debug(chatSession.getChatId() + ""String_Node_Str"" + formatter.format(chatSession.getCreateTime())+ ""String_Node_Str""+ chatSession.getInfo()+ ""String_Node_Str""+ chatSession.getClients().values().toString());
  }
  logger.debug(""String_Node_Str"" + GameManager.getInstance().getNumberActiveGames() + ""String_Node_Str"");
  for (  Entry<UUID,GameController> entry : GameManager.getInstance().getGameController().entrySet()) {
    logger.debug(entry.getKey() + entry.getValue().getPlayerNameList());
  }
  logger.debug(""String_Node_Str"");
}",0.8836174944403261
159173,"@Override public boolean activate(Game game,boolean noMana){
  Player controller=game.getPlayer(this.getControllerId());
  if (controller == null) {
    return false;
  }
  if (!modes.choose(game,this)) {
    return false;
  }
  if (this.abilityType.equals(AbilityType.SPELL)) {
    game.getContinuousEffects().applySpliceEffects(this,game);
  }
  MageObject sourceObject=game.getObject(sourceId);
  if (sourceObject != null) {
    sourceObject.adjustChoices(this,game);
  }
  for (  UUID modeId : this.getModes().getSelectedModes()) {
    this.getModes().setMode(this.getModes().get(modeId));
    if (getChoices().size() > 0 && getChoices().choose(game,this) == false) {
      logger.debug(""String_Node_Str"");
      return false;
    }
  }
  if (noMana) {
    if (this.getManaCostsToPay().getVariableCosts().size() > 0) {
      int xValue=this.getManaCostsToPay().getX();
      this.getManaCostsToPay().clear();
      VariableManaCost xCosts=new VariableManaCost();
      xCosts.setAmount(xValue);
      this.getManaCostsToPay().add(xCosts);
    }
 else {
      this.getManaCostsToPay().clear();
    }
  }
  if (sourceObject != null && !(this instanceof FlashbackAbility)) {
    boolean alternativeCostisUsed=false;
    for (    Ability ability : sourceObject.getAbilities()) {
      if (!noMana && ability instanceof AlternativeSourceCosts) {
        AlternativeSourceCosts alternativeSpellCosts=(AlternativeSourceCosts)ability;
        if (alternativeSpellCosts.isAvailable(this,game)) {
          if (alternativeSpellCosts.askToActivateAlternativeCosts(this,game)) {
            alternativeCostisUsed=true;
            break;
          }
        }
      }
      if (ability instanceof OptionalAdditionalSourceCosts) {
        ((OptionalAdditionalSourceCosts)ability).addOptionalAdditionalCosts(this,game);
      }
    }
    if (!noMana && !alternativeCostisUsed) {
      if (this.getAbilityType().equals(AbilityType.SPELL)) {
        for (        AlternativeSourceCosts alternativeSourceCosts : controller.getAlternativeSourceCosts()) {
          if (alternativeSourceCosts.isAvailable(this,game)) {
            if (alternativeSourceCosts.askToActivateAlternativeCosts(this,game)) {
              break;
            }
          }
        }
      }
    }
  }
  VariableManaCost variableManaCost=handleManaXCosts(game,noMana,controller);
  String announceString=handleOtherXCosts(game,controller);
  for (  UUID modeId : this.getModes().getSelectedModes()) {
    this.getModes().setMode(this.getModes().get(modeId));
    if (sourceObject != null) {
      sourceObject.adjustTargets(this,game);
    }
    if (getTargets().size() > 0 && getTargets().chooseTargets(getEffects().get(0).getOutcome(),this.controllerId,this,game) == false) {
      if (variableManaCost != null || announceString != null) {
        game.informPlayer(controller,new StringBuilder(sourceObject != null ? sourceObject.getLogName() : ""String_Node_Str"").append(""String_Node_Str"").toString());
      }
 else {
        logger.debug(""String_Node_Str"");
      }
      return false;
    }
  }
  for (  Cost cost : optionalCosts) {
    if (cost instanceof ManaCost) {
      cost.clearPaid();
      if (controller.chooseUse(Outcome.Benefit,""String_Node_Str"" + cost.getText() + ""String_Node_Str"",game)) {
        manaCostsToPay.add((ManaCost)cost);
      }
    }
  }
  if (sourceObject != null) {
    sourceObject.adjustCosts(this,game);
    for (    Ability ability : sourceObject.getAbilities()) {
      if (ability instanceof AdjustingSourceCosts) {
        ((AdjustingSourceCosts)ability).adjustCosts(this,game);
      }
    }
  }
  if (this instanceof ManaAbility && !costs.pay(this,game,sourceId,controllerId,noMana)) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  if (costModificationActive) {
    game.getContinuousEffects().costModification(this,game);
  }
 else {
    costModificationActive=true;
  }
  UUID activatorId=controllerId;
  if ((this instanceof ActivatedAbilityImpl) && ((ActivatedAbilityImpl)this).getActivatorId() != null) {
    activatorId=((ActivatedAbilityImpl)this).getActivatorId();
  }
  if (!useAlternativeCost(game)) {
    if (!manaCostsToPay.pay(this,game,sourceId,activatorId,false)) {
      logger.debug(""String_Node_Str"");
      return false;
    }
  }
  if (!costs.pay(this,game,sourceId,activatorId,noMana)) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  if (announceString != null) {
    game.informPlayers(announceString);
  }
  if (variableManaCost != null) {
    int xValue=getManaCostsToPay().getX();
    game.informPlayers(new StringBuilder(controller.getName()).append(""String_Node_Str"").append(xValue).append(""String_Node_Str"").append(variableManaCost.getText()).toString());
  }
  activated=true;
  return true;
}","@Override public boolean activate(Game game,boolean noMana){
  Player controller=game.getPlayer(this.getControllerId());
  if (controller == null) {
    return false;
  }
  if (!modes.choose(game,this)) {
    return false;
  }
  if (this.abilityType.equals(AbilityType.SPELL)) {
    game.getContinuousEffects().applySpliceEffects(this,game);
  }
  MageObject sourceObject=game.getObject(sourceId);
  if (sourceObject != null) {
    sourceObject.adjustChoices(this,game);
  }
  for (  UUID modeId : this.getModes().getSelectedModes()) {
    this.getModes().setMode(this.getModes().get(modeId));
    if (getChoices().size() > 0 && getChoices().choose(game,this) == false) {
      logger.debug(""String_Node_Str"");
      return false;
    }
  }
  if (noMana) {
    if (this.getManaCostsToPay().getVariableCosts().size() > 0) {
      int xValue=this.getManaCostsToPay().getX();
      this.getManaCostsToPay().clear();
      VariableManaCost xCosts=new VariableManaCost();
      xCosts.setAmount(xValue);
      this.getManaCostsToPay().add(xCosts);
    }
 else {
      this.getManaCostsToPay().clear();
    }
  }
  if (sourceObject != null && !(this instanceof FlashbackAbility)) {
    boolean alternativeCostisUsed=false;
    for (    Ability ability : sourceObject.getAbilities()) {
      if (!noMana && ability instanceof AlternativeSourceCosts) {
        AlternativeSourceCosts alternativeSpellCosts=(AlternativeSourceCosts)ability;
        if (alternativeSpellCosts.isAvailable(this,game)) {
          if (alternativeSpellCosts.askToActivateAlternativeCosts(this,game)) {
            alternativeCostisUsed=true;
            break;
          }
        }
      }
      if (ability instanceof OptionalAdditionalSourceCosts) {
        ((OptionalAdditionalSourceCosts)ability).addOptionalAdditionalCosts(this,game);
      }
    }
    if (!noMana && !alternativeCostisUsed) {
      if (this.getAbilityType().equals(AbilityType.SPELL)) {
        for (        AlternativeSourceCosts alternativeSourceCosts : controller.getAlternativeSourceCosts()) {
          if (alternativeSourceCosts.isAvailable(this,game)) {
            if (alternativeSourceCosts.askToActivateAlternativeCosts(this,game)) {
              break;
            }
          }
        }
      }
    }
  }
  VariableManaCost variableManaCost=handleManaXCosts(game,noMana,controller);
  String announceString=handleOtherXCosts(game,controller);
  for (  UUID modeId : this.getModes().getSelectedModes()) {
    this.getModes().setMode(this.getModes().get(modeId));
    if (sourceObject != null) {
      sourceObject.adjustTargets(this,game);
    }
    if (getTargets().size() > 0 && getTargets().chooseTargets(getEffects().get(0).getOutcome(),this.controllerId,this,game) == false) {
      if (variableManaCost != null || announceString != null) {
        game.informPlayer(controller,new StringBuilder(sourceObject != null ? sourceObject.getLogName() : ""String_Node_Str"").append(""String_Node_Str"").toString());
      }
      return false;
    }
  }
  for (  Cost cost : optionalCosts) {
    if (cost instanceof ManaCost) {
      cost.clearPaid();
      if (controller.chooseUse(Outcome.Benefit,""String_Node_Str"" + cost.getText() + ""String_Node_Str"",game)) {
        manaCostsToPay.add((ManaCost)cost);
      }
    }
  }
  if (sourceObject != null) {
    sourceObject.adjustCosts(this,game);
    for (    Ability ability : sourceObject.getAbilities()) {
      if (ability instanceof AdjustingSourceCosts) {
        ((AdjustingSourceCosts)ability).adjustCosts(this,game);
      }
    }
  }
  if (this instanceof ManaAbility && !costs.pay(this,game,sourceId,controllerId,noMana)) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  if (costModificationActive) {
    game.getContinuousEffects().costModification(this,game);
  }
 else {
    costModificationActive=true;
  }
  UUID activatorId=controllerId;
  if ((this instanceof ActivatedAbilityImpl) && ((ActivatedAbilityImpl)this).getActivatorId() != null) {
    activatorId=((ActivatedAbilityImpl)this).getActivatorId();
  }
  if (!useAlternativeCost(game)) {
    if (!manaCostsToPay.pay(this,game,sourceId,activatorId,false)) {
      return false;
    }
  }
  if (!costs.pay(this,game,sourceId,activatorId,noMana)) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  if (announceString != null) {
    game.informPlayers(announceString);
  }
  if (variableManaCost != null) {
    int xValue=getManaCostsToPay().getX();
    game.informPlayers(new StringBuilder(controller.getName()).append(""String_Node_Str"").append(xValue).append(""String_Node_Str"").append(variableManaCost.getText()).toString());
  }
  activated=true;
  return true;
}",0.9112338076024634
159174,"private void saveDividerLocations(){
  Rectangle rec=MageFrame.getDesktop().getBounds();
  StringBuilder sb=new StringBuilder(Double.toString(rec.getWidth())).append(""String_Node_Str"").append(Double.toString(rec.getHeight()));
  PreferencesDialog.saveValue(PreferencesDialog.KEY_MAGE_PANEL_LAST_SIZE,sb.toString());
  PreferencesDialog.saveValue(PreferencesDialog.KEY_TOURNAMENT_DIVIDER_LOCATION_1,Integer.toString(this.jSplitPane1.getDividerLocation()));
  PreferencesDialog.saveValue(PreferencesDialog.KEY_TOURNAMENT_DIVIDER_LOCATION_2,Integer.toString(this.jSplitPane2.getDividerLocation()));
}","private void saveDividerLocations(){
  Rectangle rec=MageFrame.getDesktop().getBounds();
  String sb=Double.toString(rec.getWidth()) + ""String_Node_Str"" + Double.toString(rec.getHeight());
  PreferencesDialog.saveValue(PreferencesDialog.KEY_MAGE_PANEL_LAST_SIZE,sb);
  PreferencesDialog.saveValue(PreferencesDialog.KEY_TOURNAMENT_DIVIDER_LOCATION_1,Integer.toString(this.jSplitPane1.getDividerLocation()));
  PreferencesDialog.saveValue(PreferencesDialog.KEY_TOURNAMENT_DIVIDER_LOCATION_2,Integer.toString(this.jSplitPane2.getDividerLocation()));
}",0.9467248908296944
159175,"public void update(TournamentView tournament){
  if (tournament == null) {
    return;
  }
  if (!firstInitDone) {
    Component c=this.getParent();
    while (c != null && !(c instanceof TournamentPane)) {
      c=c.getParent();
    }
    if (c != null) {
      ((TournamentPane)c).setTitle(""String_Node_Str"" + tournament.getTournamentName() + ""String_Node_Str"");
    }
    txtName.setText(tournament.getTournamentName());
    txtType.setText(tournament.getTournamentType());
    txtStartTime.setText(df.format(tournament.getStartTime()));
    txtEndTime.setText(""String_Node_Str"");
    firstInitDone=true;
  }
switch (tournament.getTournamentState()) {
case ""String_Node_Str"":
    String constructionTime=Format.getDuration(tournament.getConstructionTime() - (tournament.getServerTime().getTime() - tournament.getStepStartTime().getTime()) / 1000);
  txtTournamentState.setText(new StringBuilder(tournament.getTournamentState()).append(""String_Node_Str"").append(constructionTime).append(""String_Node_Str"").toString());
break;
case ""String_Node_Str"":
String duelingTime=Format.getDuration((tournament.getServerTime().getTime() - tournament.getStepStartTime().getTime()) / 1000);
txtTournamentState.setText(new StringBuilder(tournament.getTournamentState()).append(""String_Node_Str"").append(duelingTime).append(""String_Node_Str"").toString());
break;
default :
txtTournamentState.setText(tournament.getTournamentState());
break;
}
if (txtEndTime == null) {
return;
}
if (txtEndTime.getText().equals(""String_Node_Str"") && tournament.getEndTime() != null) {
txtEndTime.setText(df.format(tournament.getEndTime()));
}
playersModel.loadData(tournament);
matchesModel.loadData(tournament);
this.tablePlayers.repaint();
this.tableMatches.repaint();
btnQuitTournament.setVisible(false);
if (tournament.getEndTime() == null) {
for (TournamentPlayerView player : tournament.getPlayers()) {
if (player.getName().equals(session.getUserName())) {
if (!player.hasQuit()) {
btnQuitTournament.setVisible(true);
}
break;
}
}
}
}","public void update(TournamentView tournament){
  if (tournament == null) {
    return;
  }
  if (!firstInitDone) {
    Component c=this.getParent();
    while (c != null && !(c instanceof TournamentPane)) {
      c=c.getParent();
    }
    if (c != null) {
      ((TournamentPane)c).setTitle(""String_Node_Str"" + tournament.getTournamentName() + ""String_Node_Str"");
    }
    txtName.setText(tournament.getTournamentName());
    txtType.setText(tournament.getTournamentType());
    txtStartTime.setText(df.format(tournament.getStartTime()));
    txtEndTime.setText(""String_Node_Str"");
    firstInitDone=true;
  }
switch (tournament.getTournamentState()) {
case ""String_Node_Str"":
    String constructionTime=""String_Node_Str"";
  if (tournament.getStepStartTime() != null) {
    constructionTime=Format.getDuration(tournament.getConstructionTime() - (tournament.getServerTime().getTime() - tournament.getStepStartTime().getTime()) / 1000);
  }
txtTournamentState.setText(new StringBuilder(tournament.getTournamentState()).append(""String_Node_Str"").append(constructionTime).append(""String_Node_Str"").toString());
break;
case ""String_Node_Str"":
String duelingTime=""String_Node_Str"";
if (tournament.getStepStartTime() != null) {
duelingTime=Format.getDuration((tournament.getServerTime().getTime() - tournament.getStepStartTime().getTime()) / 1000);
}
txtTournamentState.setText(new StringBuilder(tournament.getTournamentState()).append(""String_Node_Str"").append(duelingTime).append(""String_Node_Str"").toString());
break;
default :
txtTournamentState.setText(tournament.getTournamentState());
break;
}
if (txtEndTime == null) {
return;
}
if (txtEndTime.getText().equals(""String_Node_Str"") && tournament.getEndTime() != null) {
txtEndTime.setText(df.format(tournament.getEndTime()));
}
playersModel.loadData(tournament);
matchesModel.loadData(tournament);
this.tablePlayers.repaint();
this.tableMatches.repaint();
btnQuitTournament.setVisible(false);
if (tournament.getEndTime() == null) {
for (TournamentPlayerView player : tournament.getPlayers()) {
if (player.getName().equals(session.getUserName())) {
if (!player.hasQuit()) {
btnQuitTournament.setVisible(true);
}
break;
}
}
}
}",0.960114640554096
159176,"private void restoreDividerLocations(){
  Rectangle rec=MageFrame.getDesktop().getBounds();
  if (rec != null) {
    String size=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_MAGE_PANEL_LAST_SIZE,null);
    StringBuilder sb=new StringBuilder(Double.toString(rec.getWidth())).append(""String_Node_Str"").append(Double.toString(rec.getHeight()));
    if (size != null && size.equals(sb.toString())) {
      String location=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_TOURNAMENT_DIVIDER_LOCATION_1,null);
      if (location != null && jSplitPane1 != null) {
        jSplitPane1.setDividerLocation(Integer.parseInt(location));
      }
      location=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_TOURNAMENT_DIVIDER_LOCATION_2,null);
      if (location != null && jSplitPane2 != null) {
        jSplitPane2.setDividerLocation(Integer.parseInt(location));
      }
    }
  }
}","private void restoreDividerLocations(){
  Rectangle rec=MageFrame.getDesktop().getBounds();
  if (rec != null) {
    String size=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_MAGE_PANEL_LAST_SIZE,null);
    String sb=Double.toString(rec.getWidth()) + ""String_Node_Str"" + Double.toString(rec.getHeight());
    if (size != null && size.equals(sb)) {
      String location=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_TOURNAMENT_DIVIDER_LOCATION_1,null);
      if (location != null && jSplitPane1 != null) {
        jSplitPane1.setDividerLocation(Integer.parseInt(location));
      }
      location=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_TOURNAMENT_DIVIDER_LOCATION_2,null);
      if (location != null && jSplitPane2 != null) {
        jSplitPane2.setDividerLocation(Integer.parseInt(location));
      }
    }
  }
}",0.9650028686173264
159177,"public boolean isMatchTableStillValid(){
  if (!table.isTournament() && !table.isTournamentSubTable()) {
    int humanPlayers=0;
    int validHumanPlayers=0;
    if (match == null) {
      return false;
    }
    for (    Map.Entry<UUID,UUID> userPlayerEntry : userPlayerMap.entrySet()) {
      MatchPlayer matchPlayer=match.getPlayer(userPlayerEntry.getValue());
      if (matchPlayer.getPlayer().isHuman()) {
        humanPlayers++;
        if (!matchPlayer.hasQuit()) {
          User user=UserManager.getInstance().getUser(userPlayerEntry.getKey());
          if (user != null && user.isExpired(null)) {
            validHumanPlayers++;
          }
        }
      }
    }
    return validHumanPlayers >= 2 || validHumanPlayers == humanPlayers;
  }
  return true;
}","public boolean isMatchTableStillValid(){
  if (!table.isTournament()) {
    int humanPlayers=0;
    int aiPlayers=0;
    int validHumanPlayers=0;
    if (match == null && !(table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.STARTING) || table.getState().equals(TableState.READY_TO_START))) {
      logger.debug(""String_Node_Str"");
      logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
    }
    if (match.isDoneSideboarding()) {
      if (match.getGame() == null) {
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ""String_Node_Str"");
      }
    }
    for (    Map.Entry<UUID,UUID> userPlayerEntry : userPlayerMap.entrySet()) {
      MatchPlayer matchPlayer=match.getPlayer(userPlayerEntry.getValue());
      if (matchPlayer == null) {
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"" + match.getId());
        logger.debug(""String_Node_Str"" + userPlayerEntry.getKey());
        logger.debug(""String_Node_Str"" + userPlayerEntry.getValue());
        continue;
      }
      if (matchPlayer.getPlayer().isHuman()) {
        humanPlayers++;
        User user=UserManager.getInstance().getUser(userPlayerEntry.getKey());
        if (!matchPlayer.hasQuit()) {
          if (user == null) {
            logger.debug(""String_Node_Str"");
            logger.debug(""String_Node_Str"" + match.getId());
            logger.debug(""String_Node_Str"" + userPlayerEntry.getKey());
            logger.debug(""String_Node_Str"" + userPlayerEntry.getValue());
            return false;
          }
          validHumanPlayers++;
        }
      }
 else {
        aiPlayers++;
      }
    }
    return validHumanPlayers >= 2 || validHumanPlayers == humanPlayers || aiPlayers > 1;
  }
  return true;
}",0.4233962264150943
159178,"private void initTournament(){
  TableManager.getInstance().initTournament(tableId);
}","private void initTournament(){
  if (!TableManager.getInstance().getTable(tableId).getState().equals(TableState.DUELING)) {
    TableManager.getInstance().initTournament(tableId);
  }
}",0.6346863468634686
159179,"private void startMatch(TournamentPairing pair,MatchOptions matchOptions){
  try {
    TableManager tableManager=TableManager.getInstance();
    Table table=tableManager.createTable(GamesRoomManager.getInstance().getMainRoomId(),matchOptions);
    table.setTournamentSubTable(true);
    table.setTournament(tournament);
    TournamentPlayer player1=pair.getPlayer1();
    TournamentPlayer player2=pair.getPlayer2();
    tableManager.addPlayer(getPlayerUserId(player1.getPlayer().getId()),table.getId(),player1.getPlayer(),player1.getPlayerType(),player1.getDeck());
    tableManager.addPlayer(getPlayerUserId(player2.getPlayer().getId()),table.getId(),player2.getPlayer(),player2.getPlayerType(),player2.getDeck());
    tableManager.startTournamentSubMatch(null,table.getId());
    pair.setMatch(tableManager.getMatch(table.getId()));
    pair.setTableId(table.getId());
    player1.setState(TournamentPlayerState.DUELING);
    player2.setState(TournamentPlayerState.DUELING);
  }
 catch (  GameException ex) {
    logger.fatal(""String_Node_Str"",ex);
  }
}","private void startMatch(TournamentPairing pair,MatchOptions matchOptions){
  try {
    TableManager tableManager=TableManager.getInstance();
    Table table=tableManager.createTable(GamesRoomManager.getInstance().getMainRoomId(),matchOptions);
    table.setTournamentSubTable(true);
    table.setTournament(tournament);
    table.setState(TableState.WAITING);
    TournamentPlayer player1=pair.getPlayer1();
    TournamentPlayer player2=pair.getPlayer2();
    tableManager.addPlayer(getPlayerUserId(player1.getPlayer().getId()),table.getId(),player1.getPlayer(),player1.getPlayerType(),player1.getDeck());
    tableManager.addPlayer(getPlayerUserId(player2.getPlayer().getId()),table.getId(),player2.getPlayer(),player2.getPlayerType(),player2.getDeck());
    table.setState(TableState.STARTING);
    tableManager.startTournamentSubMatch(null,table.getId());
    pair.setMatch(tableManager.getMatch(table.getId()));
    pair.setTableId(table.getId());
    player1.setState(TournamentPlayerState.DUELING);
    player2.setState(TournamentPlayerState.DUELING);
  }
 catch (  GameException ex) {
    logger.fatal(""String_Node_Str"",ex);
  }
}",0.963064295485636
159180,"public GameEndView(GameState state,Game game,UUID playerId,Match match){
  startTime=game.getStartTime();
  endTime=game.getEndTime();
  int winner=0;
  Player you=null;
  for (  Player player : state.getPlayers().values()) {
    PlayerView playerView=new PlayerView(player,state,game,playerId);
    if (playerView.getPlayerId().equals(playerId)) {
      clientPlayer=playerView;
      you=player;
      won=you.hasWon();
    }
    players.add(playerView);
    if (player.hasWon()) {
      winner++;
    }
  }
  if (you != null) {
    if (you.hasWon()) {
      gameInfo=new StringBuilder(""String_Node_Str"").append(game.getTurnNum()).append(""String_Node_Str"").toString();
    }
 else     if (winner > 0) {
      gameInfo=new StringBuilder(""String_Node_Str"").append(game.getTurnNum()).append(""String_Node_Str"").toString();
    }
 else {
      gameInfo=new StringBuilder(""String_Node_Str"").append(game.getTurnNum()).append(""String_Node_Str"").toString();
    }
  }
  matchView=new MatchView(match);
  MatchPlayer matchWinner=null;
  winsNeeded=match.getOptions().getWinsNeeded();
  StringBuilder additonalText=new StringBuilder();
  for (  MatchPlayer matchPlayer : match.getPlayers()) {
    if (matchPlayer.getPlayer().equals(you)) {
      wins=matchPlayer.getWins();
    }
    if (matchPlayer.isMatchWinner()) {
      matchWinner=matchPlayer;
    }
    if (matchPlayer.getPlayer().hasTimerTimeout()) {
      if (matchPlayer.getPlayer().equals(you)) {
        additonalText.append(""String_Node_Str"");
      }
 else {
        additonalText.append(matchPlayer.getName()).append(""String_Node_Str"");
      }
    }
 else     if (matchPlayer.getPlayer().hasIdleTimeout()) {
      if (matchPlayer.getPlayer().equals(you)) {
        additonalText.append(""String_Node_Str"");
      }
 else {
        additonalText.append(matchPlayer.getName()).append(""String_Node_Str"");
      }
    }
 else     if (matchPlayer.hasQuit()) {
      if (matchPlayer.getPlayer().equals(you)) {
        additonalText.append(""String_Node_Str"");
      }
 else {
        additonalText.append(matchPlayer.getName()).append(""String_Node_Str"");
      }
    }
  }
  if (matchWinner != null) {
    if (matchWinner.getPlayer().equals(you)) {
      matchInfo=""String_Node_Str"";
    }
 else {
      matchInfo=new StringBuilder(matchWinner.getName()).append(""String_Node_Str"").toString();
    }
  }
 else {
    matchInfo=new StringBuilder(""String_Node_Str"").append(winsNeeded - wins == 1 ? ""String_Node_Str"" : winsNeeded - wins + ""String_Node_Str"").append(""String_Node_Str"").toString();
  }
  additionalInfo=additonalText.toString();
}","public GameEndView(GameState state,Game game,UUID playerId,Table table){
  startTime=game.getStartTime();
  endTime=game.getEndTime();
  int winner=0;
  Player you=null;
  for (  Player player : state.getPlayers().values()) {
    PlayerView playerView=new PlayerView(player,state,game,playerId);
    if (playerView.getPlayerId().equals(playerId)) {
      clientPlayer=playerView;
      you=player;
      won=you.hasWon();
    }
    players.add(playerView);
    if (player.hasWon()) {
      winner++;
    }
  }
  if (you != null) {
    if (you.hasWon()) {
      gameInfo=new StringBuilder(""String_Node_Str"").append(game.getTurnNum()).append(""String_Node_Str"").toString();
    }
 else     if (winner > 0) {
      gameInfo=new StringBuilder(""String_Node_Str"").append(game.getTurnNum()).append(""String_Node_Str"").toString();
    }
 else {
      gameInfo=new StringBuilder(""String_Node_Str"").append(game.getTurnNum()).append(""String_Node_Str"").toString();
    }
  }
  matchView=new MatchView(table);
  Match match=table.getMatch();
  MatchPlayer matchWinner=null;
  winsNeeded=match.getOptions().getWinsNeeded();
  StringBuilder additonalText=new StringBuilder();
  for (  MatchPlayer matchPlayer : match.getPlayers()) {
    if (matchPlayer.getPlayer().equals(you)) {
      wins=matchPlayer.getWins();
    }
    if (matchPlayer.isMatchWinner()) {
      matchWinner=matchPlayer;
    }
    if (matchPlayer.getPlayer().hasTimerTimeout()) {
      if (matchPlayer.getPlayer().equals(you)) {
        additonalText.append(""String_Node_Str"");
      }
 else {
        additonalText.append(matchPlayer.getName()).append(""String_Node_Str"");
      }
    }
 else     if (matchPlayer.getPlayer().hasIdleTimeout()) {
      if (matchPlayer.getPlayer().equals(you)) {
        additonalText.append(""String_Node_Str"");
      }
 else {
        additonalText.append(matchPlayer.getName()).append(""String_Node_Str"");
      }
    }
 else     if (matchPlayer.hasQuit()) {
      if (matchPlayer.getPlayer().equals(you)) {
        additonalText.append(""String_Node_Str"");
      }
 else {
        additonalText.append(matchPlayer.getName()).append(""String_Node_Str"");
      }
    }
  }
  if (matchWinner != null) {
    if (matchWinner.getPlayer().equals(you)) {
      matchInfo=""String_Node_Str"";
    }
 else {
      matchInfo=new StringBuilder(matchWinner.getName()).append(""String_Node_Str"").toString();
    }
  }
 else {
    matchInfo=new StringBuilder(""String_Node_Str"").append(winsNeeded - wins == 1 ? ""String_Node_Str"" : winsNeeded - wins + ""String_Node_Str"").append(""String_Node_Str"").toString();
  }
  additionalInfo=additonalText.toString();
}",0.9877112135176652
159181,"public MatchView(Table table){
  this.tableId=table.getId();
  this.isTournament=true;
  this.matchId=table.getTournament().getId();
  this.matchName=table.getName();
  this.gameType=table.getGameType();
  if (table.getTournament().getOptions().getNumberRounds() > 0) {
    this.gameType=new StringBuilder(this.gameType).append(""String_Node_Str"").append(table.getTournament().getOptions().getNumberRounds()).append(""String_Node_Str"").toString();
  }
  this.deckType=new StringBuilder(table.getDeckType()).append(""String_Node_Str"").append(table.getTournament().getBoosterInfo()).toString();
  StringBuilder sb1=new StringBuilder();
  for (  TournamentPlayer tPlayer : table.getTournament().getPlayers()) {
    sb1.append(tPlayer.getPlayer().getName()).append(""String_Node_Str"").append(tPlayer.getPoints()).append(""String_Node_Str"");
  }
  this.players=sb1.toString();
  StringBuilder sb2=new StringBuilder();
  if (table.getTournament().getRounds().size() > 0) {
    for (    TournamentPlayer tPlayer : table.getTournament().getPlayers()) {
      sb2.append(tPlayer.getPlayer().getName()).append(""String_Node_Str"").append(tPlayer.getResults()).append(""String_Node_Str"");
    }
  }
 else {
    sb2.append(""String_Node_Str"");
  }
  this.result=sb2.toString();
  this.startTime=table.getTournament().getStartTime();
  this.endTime=table.getTournament().getEndTime();
  this.replayAvailable=false;
}","public MatchView(Table table){
  this.tableId=table.getId();
  this.isTournament=table.isTournament();
  if (table.isTournament()) {
    initTournamentTable(table);
  }
 else {
    initMatchTable(table);
  }
}",0.1172800998128509
159182,"public synchronized void leaveTable(UUID userId){
  if (table == null) {
    logger.error(""String_Node_Str"" + userId);
    return;
  }
  if (table.isTournament() && tournament == null) {
    logger.error(""String_Node_Str"" + userId + ""String_Node_Str""+ table.getId());
    return;
  }
  if (table != null && this.userId.equals(userId) && (table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.READY_TO_START))) {
    TableManager.getInstance().removeTable(table.getId());
  }
 else {
    UUID playerId=userPlayerMap.get(userId);
    if (playerId != null) {
      if (table.getState() == TableState.WAITING || table.getState() == TableState.READY_TO_START) {
        table.leaveNotStartedTable(playerId);
        if (table.isTournament()) {
          tournament.removePlayer(playerId);
        }
 else {
          match.leave(playerId);
        }
        User user=UserManager.getInstance().getUser(userId);
        if (user != null) {
          ChatManager.getInstance().broadcast(chatId,user.getName(),""String_Node_Str"",ChatMessage.MessageColor.BLUE,true,ChatMessage.MessageType.STATUS,ChatMessage.SoundToPlay.PlayerLeft);
          user.removeTable(playerId);
        }
 else {
          logger.debug(""String_Node_Str"" + userId + ""String_Node_Str""+ table.getId());
        }
        userPlayerMap.remove(userId);
      }
 else       if (!table.getState().equals(TableState.FINISHED)) {
        if (table.isTournament()) {
          logger.debug(""String_Node_Str"" + userId);
          TableManager.getInstance().userQuitTournamentSubTables(userId);
          logger.debug(""String_Node_Str"" + table.getTournament().getId());
          TournamentManager.getInstance().quit(tournament.getId(),userId);
        }
 else {
          MatchPlayer matchPlayer=match.getPlayer(playerId);
          if (matchPlayer != null) {
            if (table.getState().equals(TableState.SIDEBOARDING)) {
              matchPlayer.submitDeck(matchPlayer.getDeck());
            }
            matchPlayer.setQuit(true);
          }
          match.leave(playerId);
        }
      }
    }
 else {
      logger.error(""String_Node_Str"" + userId);
    }
  }
}","public synchronized void leaveTable(UUID userId){
  if (table == null) {
    logger.error(""String_Node_Str"" + userId);
    return;
  }
  if (table.isTournament() && tournament == null) {
    logger.error(""String_Node_Str"" + userId + ""String_Node_Str""+ table.getId());
    return;
  }
  if (table != null && this.userId.equals(userId) && (table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.READY_TO_START))) {
    TableManager.getInstance().removeTable(table.getId());
  }
 else {
    UUID playerId=userPlayerMap.get(userId);
    if (playerId != null) {
      if (table.getState() == TableState.WAITING || table.getState() == TableState.READY_TO_START) {
        table.leaveNotStartedTable(playerId);
        if (table.isTournament()) {
          tournament.removePlayer(playerId);
        }
 else {
          match.leave(playerId);
        }
        User user=UserManager.getInstance().getUser(userId);
        if (user != null) {
          ChatManager.getInstance().broadcast(chatId,user.getName(),""String_Node_Str"",ChatMessage.MessageColor.BLUE,true,ChatMessage.MessageType.STATUS,ChatMessage.SoundToPlay.PlayerLeft);
          user.removeTable(playerId);
        }
 else {
          logger.debug(""String_Node_Str"" + userId + ""String_Node_Str""+ table.getId());
        }
        userPlayerMap.remove(userId);
      }
 else       if (!table.getState().equals(TableState.FINISHED)) {
        if (table.isTournament()) {
          logger.debug(""String_Node_Str"" + userId);
          TableManager.getInstance().userQuitTournamentSubTables(tournament.getId(),userId);
          logger.debug(""String_Node_Str"" + table.getTournament().getId());
          TournamentManager.getInstance().quit(tournament.getId(),userId);
        }
 else {
          MatchPlayer matchPlayer=match.getPlayer(playerId);
          if (matchPlayer != null) {
            if (table.getState().equals(TableState.SIDEBOARDING)) {
              matchPlayer.submitDeck(matchPlayer.getDeck());
            }
            matchPlayer.setQuit(true);
          }
          match.leave(playerId);
        }
      }
    }
 else {
      logger.error(""String_Node_Str"" + userId);
    }
  }
}",0.995623128311449
159183,"public void userQuitTournamentSubTables(UUID tournamentId,UUID userId){
  for (  TableController controller : controllers.values()) {
    if (controller.getTable().isTournamentSubTable() && controller.getTable().getTournament().getId().equals(tournamentId)) {
      Match match=controller.getTable().getMatch();
      if (match != null) {
        if (match.getGame() != null) {
          GameManager.getInstance().quitMatch(match.getGame().getId(),userId);
        }
      }
    }
  }
}","public void userQuitTournamentSubTables(UUID tournamentId,UUID userId){
  for (  TableController controller : controllers.values()) {
    if (controller.getTable().isTournamentSubTable() && controller.getTable().getTournament().getId().equals(tournamentId)) {
      if (controller.isPlayer(userId)) {
        Match match=controller.getTable().getMatch();
        if (match != null) {
          if (!match.hasEnded() && match.getGame() != null) {
            GameManager.getInstance().quitMatch(match.getGame().getId(),userId);
          }
        }
      }
    }
  }
}",0.922201138519924
159184,"public void handleException(Exception ex){
  if (ex != null) {
    logger.fatal(""String_Node_Str"");
    ex.printStackTrace();
  }
 else {
    logger.fatal(""String_Node_Str"");
  }
}","public void handleException(Exception ex){
  if (ex != null) {
    logger.fatal(""String_Node_Str"" + (ex.getMessage() == null ? ""String_Node_Str"" : ex.getMessage()));
    if (ex.getCause() != null) {
      logger.debug(""String_Node_Str"" + (ex.getCause().getMessage() == null ? ""String_Node_Str"" : ex.getCause().getMessage()));
    }
    ex.printStackTrace();
  }
 else {
    logger.fatal(""String_Node_Str"");
  }
}",0.6081081081081081
159185,"private synchronized void endGameInfo(){
  Table table=TableManager.getInstance().getTable(tableId);
  if (table != null) {
    if (table.getMatch() != null) {
      for (      final GameSession gameSession : gameSessions.values()) {
        gameSession.endGameInfo(table.getMatch());
      }
    }
  }
}","private synchronized void endGameInfo(){
  Table table=TableManager.getInstance().getTable(tableId);
  if (table != null) {
    if (table.getMatch() != null) {
      for (      final GameSession gameSession : gameSessions.values()) {
        gameSession.endGameInfo(table);
      }
    }
  }
}",0.981574539363484
159186,"public void endGameInfo(Match match){
  if (!killed) {
    User user=UserManager.getInstance().getUser(userId);
    if (user != null) {
      user.fireCallback(new ClientCallback(""String_Node_Str"",game.getId(),getGameEndView(playerId,match)));
    }
  }
}","public void endGameInfo(Table table){
  if (!killed) {
    User user=UserManager.getInstance().getUser(userId);
    if (user != null) {
      user.fireCallback(new ClientCallback(""String_Node_Str"",game.getId(),getGameEndView(playerId,table)));
    }
  }
}",0.9372549019607844
159187,"public GameEndView getGameEndView(UUID playerId,Match match){
  return new GameEndView(game.getState(),game,playerId,match);
}","public GameEndView getGameEndView(UUID playerId,Table table){
  return new GameEndView(game.getState(),game,playerId,table);
}",0.9047619047619048
159188,"private void update(){
  ArrayList<TableView> tableList=new ArrayList<>();
  ArrayList<MatchView> matchList=new ArrayList<>();
  List<Table> allTables=new ArrayList<>(tables.values());
  Collections.sort(allTables,new TableListSorter());
  for (  Table table : allTables) {
    if (table.getState() != TableState.FINISHED) {
      tableList.add(new TableView(table));
    }
 else     if (matchList.size() < 50) {
      if (table.isTournament()) {
        matchList.add(new MatchView(table));
      }
 else {
        matchList.add(new MatchView(table.getMatch()));
      }
    }
 else {
      if (table.isTournament()) {
        TournamentManager.getInstance().removeTournament(table.getTournament().getId());
      }
      this.removeTable(table.getId());
    }
  }
  tableView=tableList;
  matchView=matchList;
  List<UsersView> users=new ArrayList<>();
  for (  User user : UserManager.getInstance().getUsers()) {
    try {
      users.add(new UsersView(user.getName(),user.getInfo(),user.getGameInfo(),user.getPingInfo()));
    }
 catch (    Exception ex) {
      logger.fatal(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ ex.toString(),ex);
      users.add(new UsersView(user.getName(),user.getInfo(),""String_Node_Str"",user.getPingInfo()));
    }
  }
  Collections.sort(users,new UserNameSorter());
  List<RoomUsersView> roomUserInfo=new ArrayList<>();
  roomUserInfo.add(new RoomUsersView(users,GameManager.getInstance().getNumberActiveGames()));
  roomUsersView=roomUserInfo;
}","private void update(){
  ArrayList<TableView> tableList=new ArrayList<>();
  ArrayList<MatchView> matchList=new ArrayList<>();
  List<Table> allTables=new ArrayList<>(tables.values());
  Collections.sort(allTables,new TableListSorter());
  for (  Table table : allTables) {
    if (table.getState() != TableState.FINISHED) {
      tableList.add(new TableView(table));
    }
 else     if (matchList.size() < 50) {
      if (table.isTournament()) {
        matchList.add(new MatchView(table));
      }
 else {
        matchList.add(new MatchView(table));
      }
    }
 else {
      if (table.isTournament()) {
        TournamentManager.getInstance().removeTournament(table.getTournament().getId());
      }
      this.removeTable(table.getId());
    }
  }
  tableView=tableList;
  matchView=matchList;
  List<UsersView> users=new ArrayList<>();
  for (  User user : UserManager.getInstance().getUsers()) {
    try {
      users.add(new UsersView(user.getName(),user.getInfo(),user.getGameInfo(),user.getPingInfo()));
    }
 catch (    Exception ex) {
      logger.fatal(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ ex.toString(),ex);
      users.add(new UsersView(user.getName(),user.getInfo(),""String_Node_Str"",user.getPingInfo()));
    }
  }
  Collections.sort(users,new UserNameSorter());
  List<RoomUsersView> roomUserInfo=new ArrayList<>();
  roomUserInfo.add(new RoomUsersView(users,GameManager.getInstance().getNumberActiveGames()));
  roomUsersView=roomUserInfo;
}",0.9963025210084032
159189,"@Override public boolean leave(UUID playerId){
  MatchPlayer mPlayer=getPlayer(playerId);
  if (mPlayer != null) {
    if (startedGames == 0) {
      return players.remove(mPlayer);
    }
    mPlayer.setQuit(true);
synchronized (this) {
      this.notifyAll();
    }
    checkIfMatchEnds();
    return true;
  }
  return false;
}","@Override public boolean leave(UUID playerId){
  MatchPlayer mPlayer=getPlayer(playerId);
  if (mPlayer != null) {
    if (!hasStarted()) {
      return players.remove(mPlayer);
    }
    mPlayer.setQuit(true);
synchronized (this) {
      this.notifyAll();
    }
    checkIfMatchEnds();
    return true;
  }
  return false;
}",0.9541284403669724
159190,"public MatchImpl(MatchOptions options){
  this.options=options;
  startTime=new Date();
  replayAvailable=false;
  draws=0;
}","public MatchImpl(MatchOptions options){
  this.options=options;
  startTime=null;
  replayAvailable=false;
  draws=0;
}",0.9508196721311476
159191,"public boolean isExpired(Date expired){
  if (lastActivity.before(expired)) {
    logger.debug(new StringBuilder(userName).append(""String_Node_Str""));
    return true;
  }
  logger.trace(new StringBuilder(""String_Node_Str"").append(userName).append(""String_Node_Str"").append(lastActivity).append(""String_Node_Str"").append(expired).toString());
  return false;
}","public boolean isExpired(Date expired){
  if (lastActivity.before(expired)) {
    logger.debug(userName + ""String_Node_Str"");
    return true;
  }
  logger.trace(new StringBuilder(""String_Node_Str"").append(userName).append(""String_Node_Str"").append(lastActivity).append(""String_Node_Str"").append(expired).toString());
  return false;
}",0.9064748201438848
159192,"@Override public boolean leave(UUID playerId){
  MatchPlayer mPlayer=getPlayer(playerId);
  if (mPlayer != null) {
    if (games.isEmpty()) {
      return players.remove(mPlayer);
    }
    mPlayer.setQuit(true);
synchronized (this) {
      this.notifyAll();
    }
    return true;
  }
  return false;
}","@Override public boolean leave(UUID playerId){
  MatchPlayer mPlayer=getPlayer(playerId);
  if (mPlayer != null) {
    if (startedGames == 0) {
      return players.remove(mPlayer);
    }
    mPlayer.setQuit(true);
synchronized (this) {
      this.notifyAll();
    }
    checkIfMatchEnds();
    return true;
  }
  return false;
}",0.4208860759493671
159193,"@Override public boolean apply(Game game,Ability source){
  Player you=game.getPlayer(source.getControllerId());
  if (you == null) {
    return false;
  }
  Permanent arsenalThresher=game.getPermanent(source.getSourceId());
  FilterArtifactCard filter=new FilterArtifactCard();
  filter.add(new AnotherPredicate());
  if (you.chooseUse(Outcome.Benefit,""String_Node_Str"",game)) {
    Cards cards=new CardsImpl();
    if (you.getHand().count(filter,game) > 0) {
      TargetCardInHand target=new TargetCardInHand(0,Integer.MAX_VALUE,filter);
      if (you.choose(Outcome.Benefit,target,source.getSourceId(),game)) {
        for (        UUID uuid : target.getTargets()) {
          cards.add(you.getHand().get(uuid,game));
        }
        you.revealCards(""String_Node_Str"",cards,game);
        if (arsenalThresher != null) {
          arsenalThresher.addCounters(CounterType.P1P1.createInstance(cards.size()),game);
          return true;
        }
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player you=game.getPlayer(source.getControllerId());
  if (you == null) {
    return false;
  }
  Permanent arsenalThresher=game.getPermanent(source.getSourceId());
  FilterArtifactCard filter=new FilterArtifactCard();
  filter.add(new AnotherPredicate());
  if (you.chooseUse(Outcome.Benefit,""String_Node_Str"",game)) {
    Cards cards=new CardsImpl();
    if (you.getHand().count(filter,source.getSourceId(),source.getControllerId(),game) > 0) {
      TargetCardInHand target=new TargetCardInHand(0,Integer.MAX_VALUE,filter);
      if (you.choose(Outcome.Benefit,target,source.getSourceId(),game)) {
        for (        UUID uuid : target.getTargets()) {
          cards.add(you.getHand().get(uuid,game));
        }
        you.revealCards(""String_Node_Str"",cards,game);
        if (arsenalThresher != null) {
          arsenalThresher.addCounters(CounterType.P1P1.createInstance(cards.size()),game);
          return true;
        }
      }
    }
  }
  return false;
}",0.9771825396825397
159194,"public void update(TableView table){
  try {
    if (table != null) {
switch (table.getTableState()) {
case STARTING:
        this.btnStart.setEnabled(true);
      this.btnMoveDown.setEnabled(true);
    this.btnMoveUp.setEnabled(true);
  break;
case WAITING:
this.btnStart.setEnabled(false);
this.btnMoveDown.setEnabled(false);
this.btnMoveUp.setEnabled(false);
break;
default :
closeDialog();
return;
}
int row=this.tableSeats.getSelectedRow();
tableWaitModel.loadData(table);
this.tableSeats.repaint();
this.tableSeats.getSelectionModel().setSelectionInterval(row,row);
}
 else {
closeDialog();
}
}
 catch (Exception ex) {
closeDialog();
}
}","public void update(TableView table){
  try {
    if (table != null) {
switch (table.getTableState()) {
case READY_TO_START:
        this.btnStart.setEnabled(true);
      this.btnMoveDown.setEnabled(true);
    this.btnMoveUp.setEnabled(true);
  break;
case WAITING:
this.btnStart.setEnabled(false);
this.btnMoveDown.setEnabled(false);
this.btnMoveUp.setEnabled(false);
break;
default :
closeDialog();
return;
}
int row=this.tableSeats.getSelectedRow();
tableWaitModel.loadData(table);
this.tableSeats.repaint();
this.tableSeats.getSelectionModel().setSelectionInterval(row,row);
}
 else {
closeDialog();
}
}
 catch (Exception ex) {
closeDialog();
}
}",0.9907120743034056
159195,"private void btnStartActionPerformed(java.awt.event.ActionEvent evt){
  if (!isTournament) {
    session.startMatch(roomId,tableId);
  }
 else {
    session.startTournament(roomId,tableId);
  }
  closeDialog();
}","private void btnStartActionPerformed(java.awt.event.ActionEvent evt){
  if (!isTournament) {
    if (session.startMatch(roomId,tableId)) {
      closeDialog();
    }
  }
 else {
    if (session.startTournament(roomId,tableId)) {
      closeDialog();
    }
  }
}",0.7526427061310782
159196,"private void btnCancelActionPerformed(java.awt.event.ActionEvent evt){
  try {
    if (session.isTableOwner(roomId,tableId)) {
      session.removeTable(roomId,tableId);
    }
 else {
      session.leaveTable(roomId,tableId);
    }
  }
 catch (  Exception e) {
    logger.error(e);
  }
  closeDialog();
}","private void btnCancelActionPerformed(java.awt.event.ActionEvent evt){
  try {
    if (session.isTableOwner(roomId,tableId)) {
      session.removeTable(roomId,tableId);
    }
 else {
      if (!session.leaveTable(roomId,tableId)) {
        return;
      }
    }
  }
 catch (  Exception e) {
    logger.error(e);
  }
  closeDialog();
}",0.9514866979655712
159197,"void startTournament(String sessionId,UUID roomId,UUID tableId) throws MageException ;","boolean startTournament(String sessionId,UUID roomId,UUID tableId) throws MageException ;",0.9485714285714286
159198,"void startMatch(String sessionId,UUID roomId,UUID tableId) throws MageException ;","boolean startMatch(String sessionId,UUID roomId,UUID tableId) throws MageException ;",0.9454545454545454
159199,"void leaveTable(String sessionId,UUID roomId,UUID tableId) throws MageException ;","boolean leaveTable(String sessionId,UUID roomId,UUID tableId) throws MageException ;",0.9454545454545454
159200,"@Override public boolean startTournament(UUID roomId,UUID tableId){
  try {
    if (isConnected()) {
      server.startTournament(sessionId,roomId,tableId);
      return true;
    }
  }
 catch (  MageException ex) {
    handleMageException(ex);
  }
catch (  Throwable t) {
    handleThrowable(t);
  }
  return false;
}","@Override public boolean startTournament(UUID roomId,UUID tableId){
  try {
    if (isConnected() && server.startTournament(sessionId,roomId,tableId)) {
      return true;
    }
  }
 catch (  MageException ex) {
    handleMageException(ex);
  }
catch (  Throwable t) {
    handleThrowable(t);
  }
  return false;
}",0.9746835443037974
159201,"@Override public boolean startMatch(UUID roomId,UUID tableId){
  try {
    if (isConnected()) {
      server.startMatch(sessionId,roomId,tableId);
      return true;
    }
  }
 catch (  MageException ex) {
    handleMageException(ex);
  }
  return false;
}","@Override public boolean startMatch(UUID roomId,UUID tableId){
  try {
    if (isConnected()) {
      return (server.startMatch(sessionId,roomId,tableId));
    }
  }
 catch (  MageException ex) {
    handleMageException(ex);
  }
  return false;
}",0.649402390438247
159202,"@Override public boolean leaveTable(UUID roomId,UUID tableId){
  try {
    if (isConnected()) {
      server.leaveTable(sessionId,roomId,tableId);
      return true;
    }
  }
 catch (  MageException ex) {
    handleMageException(ex);
  }
catch (  Throwable t) {
    handleThrowable(t);
  }
  return false;
}","@Override public boolean leaveTable(UUID roomId,UUID tableId){
  try {
    if (isConnected() && server.leaveTable(sessionId,roomId,tableId)) {
      return true;
    }
  }
 catch (  MageException ex) {
    handleMageException(ex);
  }
catch (  Throwable t) {
    handleThrowable(t);
  }
  return false;
}",0.9738562091503268
159203,"public TableView(Table table){
  this.tableId=table.getId();
  this.gameType=table.getGameType();
  this.tableName=table.getName();
  this.controllerName=table.getControllerName();
  this.tableState=table.getState();
  if (table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.WAITING)) {
    this.createTime=table.getCreateTime();
  }
 else {
    if (table.isTournament()) {
      this.createTime=table.getTournament().getStartTime();
    }
 else {
      this.createTime=table.getMatch().getStartTime();
    }
  }
  this.isTournament=table.isTournament();
  for (  Seat seat : table.getSeats()) {
    seats.add(new SeatView(seat));
  }
  if (!table.isTournament()) {
    this.wins=table.getMatch().getWinsNeeded();
    this.freeMulligans=table.getMatch().getFreeMulligans();
    for (    Game game : table.getMatch().getGames()) {
      games.add(game.getId());
    }
    StringBuilder sb=new StringBuilder();
    StringBuilder sbScore=new StringBuilder();
    for (    MatchPlayer matchPlayer : table.getMatch().getPlayers()) {
      if (matchPlayer.getPlayer() == null) {
        sb.append(""String_Node_Str"").append(""String_Node_Str"");
        sbScore.append(""String_Node_Str"").append(matchPlayer.getWins());
      }
 else       if (!matchPlayer.getName().equals(table.getControllerName())) {
        sb.append(""String_Node_Str"").append(matchPlayer.getName());
        sbScore.append(""String_Node_Str"").append(matchPlayer.getWins());
      }
 else {
        sbScore.insert(0,matchPlayer.getWins()).insert(0,""String_Node_Str"");
      }
    }
    if (table.getMatch().getDraws() > 0) {
      sbScore.append(""String_Node_Str"").append(table.getMatch().getDraws());
    }
    this.controllerName+=sb.toString();
    this.deckType=table.getDeckType();
    if (table.getMatch().getGames().isEmpty()) {
      this.additionalInfo=new StringBuilder(""String_Node_Str"").append(table.getMatch().getOptions().getMatchTimeLimit().toString()).toString();
    }
 else {
      this.additionalInfo=sbScore.toString();
    }
  }
 else {
    this.wins=table.getTournament().getOptions().getMatchOptions().getWinsNeeded();
    if (table.getTournament().getOptions().getNumberRounds() > 0) {
      this.gameType=new StringBuilder(this.gameType).append(""String_Node_Str"").append(table.getTournament().getOptions().getNumberRounds()).append(""String_Node_Str"").toString();
    }
    this.freeMulligans=table.getTournament().getOptions().getMatchOptions().getFreeMulligans();
    StringBuilder sb1=new StringBuilder();
    for (    TournamentPlayer tp : table.getTournament().getPlayers()) {
      if (!tp.getPlayer().getName().equals(table.getControllerName())) {
        sb1.append(""String_Node_Str"").append(tp.getPlayer().getName());
      }
    }
    this.controllerName+=sb1.toString();
    StringBuilder sb=new StringBuilder(""String_Node_Str"").append(table.getTournament().getPlayers().size()).append(""String_Node_Str"").append(table.getNumberOfSeats());
switch (table.getState()) {
case WAITING:
case STARTING:
      sb.append(""String_Node_Str"").append(table.getTournament().getOptions().getLimitedOptions().getConstructionTime() / 60).append(""String_Node_Str"");
    break;
case DUELING:
  sb.append(""String_Node_Str"").append(table.getTournament().getRounds().size());
break;
default :
}
this.additionalInfo=sb.toString();
this.deckType=new StringBuilder(table.getDeckType()).append(""String_Node_Str"").append(table.getTournament().getBoosterInfo()).toString();
}
}","public TableView(Table table){
  this.tableId=table.getId();
  this.gameType=table.getGameType();
  this.tableName=table.getName();
  this.controllerName=table.getControllerName();
  this.tableState=table.getState();
  if (table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.WAITING)) {
    this.createTime=table.getCreateTime();
  }
 else {
    if (table.isTournament()) {
      this.createTime=table.getTournament().getStartTime();
    }
 else {
      this.createTime=table.getMatch().getStartTime();
    }
  }
  this.isTournament=table.isTournament();
  for (  Seat seat : table.getSeats()) {
    seats.add(new SeatView(seat));
  }
  if (!table.isTournament()) {
    this.wins=table.getMatch().getWinsNeeded();
    this.freeMulligans=table.getMatch().getFreeMulligans();
    for (    Game game : table.getMatch().getGames()) {
      games.add(game.getId());
    }
    StringBuilder sb=new StringBuilder();
    StringBuilder sbScore=new StringBuilder();
    for (    MatchPlayer matchPlayer : table.getMatch().getPlayers()) {
      if (matchPlayer.getPlayer() == null) {
        sb.append(""String_Node_Str"").append(""String_Node_Str"");
        sbScore.append(""String_Node_Str"").append(matchPlayer.getWins());
      }
 else       if (!matchPlayer.getName().equals(table.getControllerName())) {
        sb.append(""String_Node_Str"").append(matchPlayer.getName());
        sbScore.append(""String_Node_Str"").append(matchPlayer.getWins());
      }
 else {
        sbScore.insert(0,matchPlayer.getWins()).insert(0,""String_Node_Str"");
      }
    }
    if (table.getMatch().getDraws() > 0) {
      sbScore.append(""String_Node_Str"").append(table.getMatch().getDraws());
    }
    this.controllerName+=sb.toString();
    this.deckType=table.getDeckType();
    if (table.getMatch().getGames().isEmpty()) {
      this.additionalInfo=new StringBuilder(""String_Node_Str"").append(table.getMatch().getOptions().getMatchTimeLimit().toString()).toString();
    }
 else {
      this.additionalInfo=sbScore.toString();
    }
  }
 else {
    this.wins=table.getTournament().getOptions().getMatchOptions().getWinsNeeded();
    if (table.getTournament().getOptions().getNumberRounds() > 0) {
      this.gameType=new StringBuilder(this.gameType).append(""String_Node_Str"").append(table.getTournament().getOptions().getNumberRounds()).append(""String_Node_Str"").toString();
    }
    this.freeMulligans=table.getTournament().getOptions().getMatchOptions().getFreeMulligans();
    StringBuilder sb1=new StringBuilder();
    for (    TournamentPlayer tp : table.getTournament().getPlayers()) {
      if (!tp.getPlayer().getName().equals(table.getControllerName())) {
        sb1.append(""String_Node_Str"").append(tp.getPlayer().getName());
      }
    }
    this.controllerName+=sb1.toString();
    StringBuilder sb=new StringBuilder(""String_Node_Str"").append(table.getTournament().getPlayers().size()).append(""String_Node_Str"").append(table.getNumberOfSeats());
switch (table.getState()) {
case WAITING:
case READY_TO_START:
case STARTING:
      sb.append(""String_Node_Str"").append(table.getTournament().getOptions().getLimitedOptions().getConstructionTime() / 60).append(""String_Node_Str"");
    break;
case DUELING:
  sb.append(""String_Node_Str"").append(table.getTournament().getRounds().size());
break;
default :
}
this.additionalInfo=sb.toString();
this.deckType=new StringBuilder(table.getDeckType()).append(""String_Node_Str"").append(table.getTournament().getBoosterInfo()).toString();
}
}",0.9969866551872578
159204,"@Override public void startTournament(final String sessionId,final UUID roomId,final UUID tableId) throws MageException {
  execute(""String_Node_Str"",sessionId,new Action(){
    @Override public void execute(){
      UUID userId=SessionManager.getInstance().getSession(sessionId).getUserId();
      TableManager.getInstance().startTournament(userId,roomId,tableId);
    }
  }
);
}","@Override public boolean startTournament(final String sessionId,final UUID roomId,final UUID tableId) throws MageException {
  if (!TableManager.getInstance().getController(tableId).changeTableState(TableState.STARTING)) {
    return false;
  }
  execute(""String_Node_Str"",sessionId,new Action(){
    @Override public void execute(){
      UUID userId=SessionManager.getInstance().getSession(sessionId).getUserId();
      TableManager.getInstance().startTournament(userId,roomId,tableId);
    }
  }
);
  return true;
}",0.8374164810690423
159205,"@Override public void startMatch(final String sessionId,final UUID roomId,final UUID tableId) throws MageException {
  execute(""String_Node_Str"",sessionId,new Action(){
    @Override public void execute(){
      UUID userId=SessionManager.getInstance().getSession(sessionId).getUserId();
      TableManager.getInstance().startMatch(userId,roomId,tableId);
    }
  }
);
}","@Override public boolean startMatch(final String sessionId,final UUID roomId,final UUID tableId) throws MageException {
  if (!TableManager.getInstance().getController(tableId).changeTableState(TableState.STARTING)) {
    return false;
  }
  execute(""String_Node_Str"",sessionId,new Action(){
    @Override public void execute(){
      UUID userId=SessionManager.getInstance().getSession(sessionId).getUserId();
      TableManager.getInstance().startMatch(userId,roomId,tableId);
    }
  }
);
  return true;
}",0.8337129840546698
159206,"@Override public void leaveTable(final String sessionId,final UUID roomId,final UUID tableId) throws MageException {
  execute(""String_Node_Str"",sessionId,new Action(){
    @Override public void execute(){
      UUID userId=SessionManager.getInstance().getSession(sessionId).getUserId();
      GamesRoomManager.getInstance().getRoom(roomId).leaveTable(userId,tableId);
    }
  }
);
}","@Override public boolean leaveTable(final String sessionId,final UUID roomId,final UUID tableId) throws MageException {
  TableState tableState=TableManager.getInstance().getController(tableId).getTableState();
  if (!tableState.equals(TableState.WAITING) && !tableState.equals(TableState.READY_TO_START)) {
    return false;
  }
  execute(""String_Node_Str"",sessionId,new Action(){
    @Override public void execute(){
      UUID userId=SessionManager.getInstance().getSession(sessionId).getUserId();
      GamesRoomManager.getInstance().getRoom(roomId).leaveTable(userId,tableId);
    }
  }
);
  return true;
}",0.7625754527162978
159207,"public void joinChat(UUID chatId,UUID userId){
  if (chatSessions.containsKey(chatId)) {
    chatSessions.get(chatId).join(userId);
  }
 else {
    logger.trace(""String_Node_Str"" + chatId + ""String_Node_Str""+ userId);
  }
}","public void joinChat(UUID chatId,UUID userId){
  ChatSession chatSession=chatSessions.get(chatId);
  if (chatSession != null) {
    chatSession.join(userId);
  }
 else {
    logger.trace(""String_Node_Str"" + chatId + ""String_Node_Str""+ userId);
  }
}",0.8008474576271186
159208,"public void destroyChatSession(UUID chatId){
  if (chatId != null && chatSessions.containsKey(chatId)) {
    chatSessions.remove(chatId);
    logger.debug(""String_Node_Str"" + chatId);
  }
 else {
    logger.trace(""String_Node_Str"" + chatId);
  }
}","public void destroyChatSession(UUID chatId){
  if (chatId != null) {
    ChatSession chatSession=chatSessions.get(chatId);
    if (chatSession != null) {
synchronized (chatSession) {
        if (chatSessions.containsKey(chatId)) {
          chatSessions.remove(chatId);
          logger.debug(""String_Node_Str"" + chatId);
        }
 else {
          logger.trace(""String_Node_Str"" + chatId);
        }
      }
    }
  }
}",0.688622754491018
159209,"@Override public void handleConnectionException(Throwable throwable,Client client){
  Session session=SessionManager.getInstance().getSession(client.getSessionId());
  if (session != null) {
    StringBuilder sessionInfo=new StringBuilder();
    User user=UserManager.getInstance().getUser(session.getUserId());
    if (user != null) {
      sessionInfo.append(user.getName());
    }
 else {
      sessionInfo.append(""String_Node_Str"");
    }
    sessionInfo.append(""String_Node_Str"").append(session.getHost()).append(""String_Node_Str"").append(session.getId());
    if (throwable instanceof ClientDisconnectedException) {
      SessionManager.getInstance().disconnect(client.getSessionId(),DisconnectReason.LostConnection);
      logger.info(""String_Node_Str"" + sessionInfo,throwable);
      if (logger.isDebugEnabled()) {
        throwable.printStackTrace();
      }
    }
 else {
      SessionManager.getInstance().disconnect(client.getSessionId(),DisconnectReason.LostConnection);
      logger.info(""String_Node_Str"" + sessionInfo,throwable);
      if (logger.isDebugEnabled()) {
        throwable.printStackTrace();
      }
    }
  }
}","@Override public void handleConnectionException(Throwable throwable,Client client){
  Session session=SessionManager.getInstance().getSession(client.getSessionId());
  if (session != null) {
    StringBuilder sessionInfo=new StringBuilder();
    User user=UserManager.getInstance().getUser(session.getUserId());
    if (user != null) {
      sessionInfo.append(user.getName());
    }
 else {
      sessionInfo.append(""String_Node_Str"");
    }
    sessionInfo.append(""String_Node_Str"").append(session.getHost()).append(""String_Node_Str"").append(session.getId());
    if (throwable instanceof ClientDisconnectedException) {
      SessionManager.getInstance().disconnect(client.getSessionId(),DisconnectReason.LostConnection);
      logger.info(""String_Node_Str"" + sessionInfo,throwable);
      if (logger.isDebugEnabled()) {
        throwable.printStackTrace();
      }
    }
 else {
      SessionManager.getInstance().disconnect(client.getSessionId(),DisconnectReason.LostConnection);
      logger.info(""String_Node_Str"" + sessionInfo,throwable);
      if (logger.isDebugEnabled()) {
        if (throwable == null) {
          logger.debug(""String_Node_Str"");
        }
 else {
          throwable.printStackTrace();
        }
      }
    }
  }
}",0.9555369127516778
159210,"synchronized public void userLostConnection(){
  User user=UserManager.getInstance().getUser(userId);
  if (user == null || !user.isConnected()) {
    return;
  }
  logger.info(""String_Node_Str"" + user.getName());
  UserManager.getInstance().disconnect(userId,DisconnectReason.LostConnection);
}","synchronized public void userLostConnection(){
  User user=UserManager.getInstance().getUser(userId);
  if (user == null || !user.isConnected()) {
    return;
  }
  if (!user.getSessionId().equals(sessionId)) {
    logger.info(""String_Node_Str"" + user.getName());
    return;
  }
  logger.info(""String_Node_Str"" + user.getName());
  UserManager.getInstance().disconnect(userId,DisconnectReason.LostConnection);
}",0.8345120226308345
159211,"public String registerUserHandling(String userName) throws MageException {
  this.isAdmin=false;
  if (userName.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  if (userName.length() > ConfigSettings.getInstance().getMaxUserNameLength()) {
    return new StringBuilder(""String_Node_Str"").append(ConfigSettings.getInstance().getMaxUserNameLength()).append(""String_Node_Str"").toString();
  }
  if (userName.length() < ConfigSettings.getInstance().getMinUserNameLength()) {
    return new StringBuilder(""String_Node_Str"").append(ConfigSettings.getInstance().getMinUserNameLength()).append(""String_Node_Str"").toString();
  }
  Pattern p=Pattern.compile(ConfigSettings.getInstance().getUserNamePattern(),Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(userName);
  if (m.find()) {
    return new StringBuilder(""String_Node_Str"").append(userName).append(""String_Node_Str"").toString();
  }
  User user=UserManager.getInstance().createUser(userName,host);
  if (user == null) {
    user=UserManager.getInstance().findUser(userName);
    if (user.getHost().equals(host)) {
      user.updateLastActivity();
      this.userId=user.getId();
      if (user.getSessionId().isEmpty()) {
        ChatManager.getInstance().sendReconnectMessage(user.getId());
        logger.info(""String_Node_Str"" + userName);
      }
 else {
        logger.info(""String_Node_Str"" + userName);
        UserManager.getInstance().disconnect(user.getId(),DisconnectReason.ConnectingOtherInstance);
      }
    }
 else {
      return new StringBuilder(""String_Node_Str"").append(userName).append(""String_Node_Str"").toString();
    }
  }
  if (!UserManager.getInstance().connectToSession(sessionId,user.getId())) {
    return new StringBuilder(""String_Node_Str"").append(userName).toString();
  }
  this.userId=user.getId();
  return null;
}","public String registerUserHandling(String userName) throws MageException {
  this.isAdmin=false;
  if (userName.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  if (userName.length() > ConfigSettings.getInstance().getMaxUserNameLength()) {
    return new StringBuilder(""String_Node_Str"").append(ConfigSettings.getInstance().getMaxUserNameLength()).append(""String_Node_Str"").toString();
  }
  if (userName.length() < ConfigSettings.getInstance().getMinUserNameLength()) {
    return new StringBuilder(""String_Node_Str"").append(ConfigSettings.getInstance().getMinUserNameLength()).append(""String_Node_Str"").toString();
  }
  Pattern p=Pattern.compile(ConfigSettings.getInstance().getUserNamePattern(),Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(userName);
  if (m.find()) {
    return new StringBuilder(""String_Node_Str"").append(userName).append(""String_Node_Str"").toString();
  }
  User user=UserManager.getInstance().createUser(userName,host);
  boolean reconnect=false;
  if (user == null) {
    user=UserManager.getInstance().findUser(userName);
    if (user.getHost().equals(host)) {
      user.updateLastActivity();
      this.userId=user.getId();
      if (user.getSessionId().isEmpty()) {
        logger.info(""String_Node_Str"" + userName);
        reconnect=true;
      }
 else {
        logger.info(""String_Node_Str"" + userName);
        SessionManager.getInstance().disconnect(user.getSessionId(),DisconnectReason.ConnectingOtherInstance);
      }
    }
 else {
      return new StringBuilder(""String_Node_Str"").append(userName).append(""String_Node_Str"").toString();
    }
  }
  if (!UserManager.getInstance().connectToSession(sessionId,user.getId())) {
    return new StringBuilder(""String_Node_Str"").append(userName).toString();
  }
  this.userId=user.getId();
  if (reconnect) {
    UUID chatId=GamesRoomManager.getInstance().getRoom(GamesRoomManager.getInstance().getMainRoomId()).getChatId();
    if (chatId != null) {
      ChatManager.getInstance().joinChat(chatId,userId);
    }
    ChatManager.getInstance().sendReconnectMessage(userId);
  }
  return null;
}",0.8142090467671863
159212,"public void updateLastActivity(){
  lastActivity=new Date();
}","public void updateLastActivity(){
  lastActivity=new Date();
  if (userState == UserState.Disconnected) {
    userState=UserState.Reconnected;
  }
}",0.5904761904761905
159213,"public void handleException(Exception ex){
  if (ex != null && !ex.getMessage().equals(""String_Node_Str"")) {
    logger.fatal(""String_Node_Str"",ex);
  }
}","public void handleException(Exception ex){
  if (ex != null) {
    logger.fatal(""String_Node_Str"");
    ex.printStackTrace();
  }
 else {
    logger.fatal(""String_Node_Str"");
  }
}",0.6407185628742516
159214,"@Override public boolean apply(Game game,Ability source){
  boolean result=false;
  String cardName=""String_Node_Str"";
  UUID targetPlayerId=null;
  if (source instanceof SpellAbility) {
    Card sourceCard=game.getCard(source.getSourceId());
    if (sourceCard != null) {
      cardName=sourceCard.getName();
    }
  }
 else {
    Permanent sourcePermanent=game.getPermanent(source.getSourceId());
    if (sourcePermanent != null) {
      cardName=sourcePermanent.getName();
    }
  }
  Target exileTarget=null;
  for (  Target target : source.getTargets()) {
    if (!(target instanceof TargetPlayer)) {
      exileTarget=target;
      break;
    }
  }
  if (exileTarget != null && exileTarget instanceof TargetPermanent) {
    Permanent permanentToExile=game.getPermanent(exileTarget.getFirstTarget());
    if (permanentToExile != null) {
      targetPlayerId=permanentToExile.getControllerId();
      result=permanentToExile.moveToExile(null,""String_Node_Str"",source.getSourceId(),game);
    }
  }
  this.applySearchAndExile(game,source,cardName,targetPlayerId);
  return result;
}","@Override public boolean apply(Game game,Ability source){
  boolean result=false;
  UUID targetPlayerId=null;
  Target exileTarget=null;
  for (  Target target : source.getTargets()) {
    if (target instanceof TargetPermanent) {
      exileTarget=target;
      break;
    }
  }
  if (exileTarget != null) {
    Permanent permanentToExile=game.getPermanent(exileTarget.getFirstTarget());
    if (permanentToExile != null) {
      targetPlayerId=permanentToExile.getControllerId();
      result=permanentToExile.moveToExile(null,""String_Node_Str"",source.getSourceId(),game);
      this.applySearchAndExile(game,source,permanentToExile.getName(),targetPlayerId);
    }
  }
  return result;
}",0.5276211950394588
159215,"public boolean applySearchAndExile(Game game,Ability source,String cardName,UUID targetPlayerId){
  Player controller=game.getPlayer(source.getControllerId());
  if (cardName != null && controller != null) {
    Player targetPlayer=game.getPlayer(targetPlayerId);
    if (targetPlayer != null) {
      FilterCard filter=new FilterCard(""String_Node_Str"" + cardName);
      filter.add(new NamePredicate(cardName));
      int cardsCount=(cardName.isEmpty() ? 0 : targetPlayer.getGraveyard().count(filter,game));
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + cardName + ""String_Node_Str""+ targetPlayer.getName());
        TargetCard target=new TargetCard((graveyardExileOptional ? 0 : cardsCount),cardsCount,Zone.GRAVEYARD,filter);
        if (controller.choose(Outcome.Exile,targetPlayer.getGraveyard(),target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getGraveyard().get(targetId,game);
            if (targetCard != null) {
              targetPlayer.getGraveyard().remove(targetCard);
              controller.moveCardToExileWithInfo(targetCard,null,null,source.getSourceId(),game,Zone.GRAVEYARD);
            }
          }
        }
      }
      cardsCount=(cardName.isEmpty() ? 0 : targetPlayer.getHand().count(filter,game));
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + cardName + ""String_Node_Str""+ targetPlayer.getName());
        TargetCard target=new TargetCard(0,cardsCount,Zone.HAND,filter);
        if (controller.choose(Outcome.Exile,targetPlayer.getHand(),target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getHand().get(targetId,game);
            if (targetCard != null) {
              targetPlayer.getHand().remove(targetCard);
              controller.moveCardToExileWithInfo(targetCard,null,null,source.getSourceId(),game,Zone.HAND);
            }
          }
        }
      }
 else {
        if (targetPlayer.getHand().size() > 0) {
          controller.lookAtCards(targetPlayer.getName() + ""String_Node_Str"",targetPlayer.getHand(),game);
        }
      }
      Cards cardsInLibrary=new CardsImpl(Zone.LIBRARY);
      cardsInLibrary.addAll(targetPlayer.getLibrary().getCards(game));
      cardsCount=(cardName.isEmpty() ? 0 : cardsInLibrary.count(filter,game));
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + cardName + ""String_Node_Str""+ targetPlayer.getName());
        TargetCardInLibrary target=new TargetCardInLibrary(0,cardsCount,filter);
        if (controller.choose(Outcome.Exile,cardsInLibrary,target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getLibrary().remove(targetId,game);
            if (targetCard != null) {
              controller.moveCardToExileWithInfo(targetCard,null,null,source.getSourceId(),game,Zone.LIBRARY);
            }
          }
        }
      }
 else {
        controller.lookAtCards(targetPlayer.getName() + ""String_Node_Str"",cardsInLibrary,game);
      }
      targetPlayer.shuffleLibrary(game);
    }
    return true;
  }
  return false;
}","/** 
 * @param game
 * @param source
 * @param cardName name of the card to exile
 * @param targetPlayerId id of the target player to exile card name from his or her zones
 * @return 
 */
public boolean applySearchAndExile(Game game,Ability source,String cardName,UUID targetPlayerId){
  Player controller=game.getPlayer(source.getControllerId());
  if (cardName != null && controller != null) {
    Player targetPlayer=game.getPlayer(targetPlayerId);
    if (targetPlayer != null) {
      FilterCard filter=new FilterCard(""String_Node_Str"" + cardName);
      filter.add(new NamePredicate(cardName));
      int cardsCount=(cardName.isEmpty() ? 0 : targetPlayer.getGraveyard().count(filter,game));
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + cardName + ""String_Node_Str""+ targetPlayer.getName());
        TargetCard target=new TargetCard((graveyardExileOptional ? 0 : cardsCount),cardsCount,Zone.GRAVEYARD,filter);
        if (controller.choose(Outcome.Exile,targetPlayer.getGraveyard(),target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getGraveyard().get(targetId,game);
            if (targetCard != null) {
              targetPlayer.getGraveyard().remove(targetCard);
              controller.moveCardToExileWithInfo(targetCard,null,null,source.getSourceId(),game,Zone.GRAVEYARD);
            }
          }
        }
      }
      cardsCount=(cardName.isEmpty() ? 0 : targetPlayer.getHand().count(filter,game));
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + cardName + ""String_Node_Str""+ targetPlayer.getName());
        TargetCard target=new TargetCard(0,cardsCount,Zone.HAND,filter);
        if (controller.choose(Outcome.Exile,targetPlayer.getHand(),target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getHand().get(targetId,game);
            if (targetCard != null) {
              targetPlayer.getHand().remove(targetCard);
              controller.moveCardToExileWithInfo(targetCard,null,null,source.getSourceId(),game,Zone.HAND);
            }
          }
        }
      }
 else {
        if (targetPlayer.getHand().size() > 0) {
          controller.lookAtCards(targetPlayer.getName() + ""String_Node_Str"",targetPlayer.getHand(),game);
        }
      }
      Cards cardsInLibrary=new CardsImpl(Zone.LIBRARY);
      cardsInLibrary.addAll(targetPlayer.getLibrary().getCards(game));
      cardsCount=(cardName.isEmpty() ? 0 : cardsInLibrary.count(filter,game));
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + cardName + ""String_Node_Str""+ targetPlayer.getName());
        TargetCardInLibrary target=new TargetCardInLibrary(0,cardsCount,filter);
        if (controller.choose(Outcome.Exile,cardsInLibrary,target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getLibrary().remove(targetId,game);
            if (targetCard != null) {
              controller.moveCardToExileWithInfo(targetCard,null,null,source.getSourceId(),game,Zone.LIBRARY);
            }
          }
        }
      }
 else {
        controller.lookAtCards(targetPlayer.getName() + ""String_Node_Str"",cardsInLibrary,game);
      }
      targetPlayer.shuffleLibrary(game);
    }
    return true;
  }
  return false;
}",0.9724016441573692
159216,"public void join(UUID userId){
  UUID playerId=userPlayerMap.get(userId);
  GameSession gameSession=new GameSession(game,userId,playerId,useTimeout);
  gameSessions.put(playerId,gameSession);
  User user=UserManager.getInstance().getUser(userId);
  gameSession.setUserData(user.getUserData());
  user.addGame(playerId,gameSession);
  logger.debug(new StringBuilder(""String_Node_Str"").append(playerId).append(""String_Node_Str"").append(game.getId()).toString());
  ChatManager.getInstance().broadcast(chatId,""String_Node_Str"",new StringBuilder(game.getPlayer(playerId).getName()).append(""String_Node_Str"").toString(),MessageColor.ORANGE,true,MessageType.GAME);
  checkStart();
}","public void join(UUID userId){
  UUID playerId=userPlayerMap.get(userId);
  User user=UserManager.getInstance().getUser(userId);
  if (userId == null || playerId == null) {
    logger.fatal(""String_Node_Str"");
    logger.fatal(""String_Node_Str"" + game.getId());
    logger.fatal(""String_Node_Str"" + userId);
    return;
  }
  Player player=game.getPlayer(playerId);
  if (player == null) {
    logger.fatal(""String_Node_Str"" + playerId);
    return;
  }
  GameSession gameSession=gameSessions.get(playerId);
  String joinType;
  if (gameSession == null) {
    gameSession=new GameSession(game,userId,playerId,useTimeout);
    gameSessions.put(playerId,gameSession);
    gameSession.setUserData(user.getUserData());
    joinType=""String_Node_Str"";
  }
 else {
    joinType=""String_Node_Str"";
  }
  user.addGame(playerId,gameSession);
  logger.debug(""String_Node_Str"" + playerId + ""String_Node_Str""+ joinType+ ""String_Node_Str""+ game.getId());
  ChatManager.getInstance().broadcast(chatId,""String_Node_Str"",game.getPlayer(playerId).getName() + ""String_Node_Str"" + joinType+ ""String_Node_Str"",MessageColor.ORANGE,true,MessageType.GAME);
  checkStart();
}",0.4652435686918446
159217,"public void timeout(UUID userId){
  if (userPlayerMap.containsKey(userId)) {
    StringBuilder sb=new StringBuilder(game.getPlayer(userPlayerMap.get(userId)).getName()).append(""String_Node_Str"").append(ConfigSettings.getInstance().getMaxSecondsIdle()).append(""String_Node_Str"");
    ChatManager.getInstance().broadcast(chatId,""String_Node_Str"",sb.toString(),MessageColor.BLACK,true,MessageType.STATUS);
    game.idleTimeout(getPlayerId(userId));
  }
}","public void timeout(UUID userId){
  if (userPlayerMap.containsKey(userId)) {
    String sb=game.getPlayer(userPlayerMap.get(userId)).getName() + ""String_Node_Str"" + ConfigSettings.getInstance().getMaxSecondsIdle()+ ""String_Node_Str"";
    ChatManager.getInstance().broadcast(chatId,""String_Node_Str"",sb,MessageColor.BLACK,true,MessageType.STATUS);
    game.idleTimeout(getPlayerId(userId));
  }
}",0.9148936170212766
159218,"protected LinkedHashMap<UUID,ManaAbility> getUseableManaAbilities(MageObject object,Zone zone,Game game){
  LinkedHashMap<UUID,ManaAbility> useable=new LinkedHashMap<>();
  for (  ManaAbility ability : object.getAbilities().getManaAbilities(zone)) {
    if (ability.canActivate(playerId,game)) {
      useable.put(ability.getId(),ability);
    }
  }
  return useable;
}","protected LinkedHashMap<UUID,ManaAbility> getUseableManaAbilities(MageObject object,Zone zone,Game game){
  LinkedHashMap<UUID,ManaAbility> useable=new LinkedHashMap<>();
  if (!(object instanceof Permanent) || ((Permanent)object).canUseActivatedAbilities(game)) {
    for (    ManaAbility ability : object.getAbilities().getManaAbilities(zone)) {
      if (ability.canActivate(playerId,game)) {
        useable.put(ability.getId(),ability);
      }
    }
  }
  return useable;
}",0.8608490566037735
159219,"@Override public void init(Ability source,Game game){
  targetPointer.init(game,source);
  if (AbilityType.ACTIVATED.equals(source.getAbilityType()) || AbilityType.TRIGGERED.equals(source.getAbilityType())) {
    if (layer != null) {
switch (layer) {
case CopyEffects_1:
case ControlChangingEffects_2:
case TextChangingEffects_3:
case TypeChangingEffects_4:
case ColorChangingEffects_5:
case AbilityAddingRemovingEffects_6:
case PTChangingEffects_7:
        this.affectedObjectsSet=true;
    }
  }
 else {
    if (hasLayer(Layer.CopyEffects_1) || hasLayer(Layer.ControlChangingEffects_2) || hasLayer(Layer.TextChangingEffects_3)|| hasLayer(Layer.TypeChangingEffects_4)|| hasLayer(Layer.ColorChangingEffects_5)|| hasLayer(Layer.AbilityAddingRemovingEffects_6)|| hasLayer(Layer.PTChangingEffects_7)) {
      this.affectedObjectsSet=true;
    }
  }
}
}","@Override public void init(Ability source,Game game){
  targetPointer.init(game,source);
  if (AbilityType.ACTIVATED.equals(source.getAbilityType()) || AbilityType.SPELL.equals(source.getAbilityType()) || AbilityType.TRIGGERED.equals(source.getAbilityType())) {
    if (layer != null) {
switch (layer) {
case CopyEffects_1:
case ControlChangingEffects_2:
case TextChangingEffects_3:
case TypeChangingEffects_4:
case ColorChangingEffects_5:
case AbilityAddingRemovingEffects_6:
case PTChangingEffects_7:
        this.affectedObjectsSet=true;
    }
  }
 else {
    if (hasLayer(Layer.CopyEffects_1) || hasLayer(Layer.ControlChangingEffects_2) || hasLayer(Layer.TextChangingEffects_3)|| hasLayer(Layer.TypeChangingEffects_4)|| hasLayer(Layer.ColorChangingEffects_5)|| hasLayer(Layer.AbilityAddingRemovingEffects_6)|| hasLayer(Layer.PTChangingEffects_7)) {
      this.affectedObjectsSet=true;
    }
  }
}
}",0.9697315819531696
159220,"@Override public boolean apply(Game game,Ability source){
  for (  Permanent perm : game.getBattlefield().getActivePermanents(filter,source.getControllerId(),source.getSourceId(),game)) {
    if (!this.affectedObjectsSet || objects.contains(perm.getId())) {
      if (!(excludeSource && perm.getId().equals(source.getSourceId()))) {
        perm.addPower(power.calculate(game,source,this));
        perm.addToughness(toughness.calculate(game,source,this));
      }
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  if (this.affectedObjectsSet) {
    for (Iterator<UUID> it=objects.iterator(); it.hasNext(); ) {
      UUID permanentId=it.next();
      Permanent permanent=game.getPermanent(permanentId);
      if (permanent != null) {
        permanent.addPower(power.calculate(game,source,this));
        permanent.addToughness(toughness.calculate(game,source,this));
      }
 else {
        it.remove();
      }
    }
  }
 else {
    for (    Permanent perm : game.getBattlefield().getActivePermanents(filter,source.getControllerId(),source.getSourceId(),game)) {
      if (!(excludeSource && perm.getId().equals(source.getSourceId()))) {
        perm.addPower(power.calculate(game,source,this));
        perm.addToughness(toughness.calculate(game,source,this));
      }
    }
  }
  return true;
}",0.4962518740629685
159221,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getSourceId());
  String key=permanent.getId() + keyString;
  long zoneChangeCount=permanent.getZoneChangeCounter();
  long turnNum=game.getTurnNum();
  Long activationState=zoneChangeCount << 32 | turnNum & 0xFFFFFFFFL;
  Map.Entry<Long,Set<UUID>> turnIgnoringPlayersPair=(Map.Entry<Long,Set<UUID>>)game.getState().getValue(key);
  if (turnIgnoringPlayersPair == null || !activationState.equals(turnIgnoringPlayersPair.getKey())) {
    turnIgnoringPlayersPair=new AbstractMap.SimpleImmutableEntry<Long,Set<UUID>>(activationState,new HashSet<UUID>());
    game.getState().setValue(key,turnIgnoringPlayersPair);
  }
  turnIgnoringPlayersPair.getValue().add(game.getActivePlayerId());
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getSourceId());
  String key=permanent.getId() + keyString;
  long zoneChangeCount=permanent.getZoneChangeCounter();
  long turnNum=game.getTurnNum();
  Long activationState=zoneChangeCount << 32 | turnNum & 0xFFFFFFFFL;
  Map.Entry<Long,Set<UUID>> turnIgnoringPlayersPair=(Map.Entry<Long,Set<UUID>>)game.getState().getValue(key);
  if (turnIgnoringPlayersPair == null || !activationState.equals(turnIgnoringPlayersPair.getKey())) {
    turnIgnoringPlayersPair=new AbstractMap.SimpleImmutableEntry<Long,Set<UUID>>(activationState,new HashSet<UUID>());
    game.getState().setValue(key,turnIgnoringPlayersPair);
  }
  turnIgnoringPlayersPair.getValue().add(game.getPriorityPlayerId());
  return true;
}",0.991304347826087
159222,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Target target=new TargetPermanentOrPlayerWithCounter(0,Integer.MAX_VALUE,true);
  if (target.canChoose(controller.getId(),game)) {
    boolean abilityApplied=false;
    Map<String,Serializable> options=new HashMap<>();
    options.put(""String_Node_Str"",""String_Node_Str"");
    while (target.canChoose(controller.getId(),game)) {
      if (controller.choose(Outcome.Benefit,target,source.getSourceId(),game,options)) {
        break;
      }
    }
    for (int idx=0; idx < target.getTargets().size(); idx++) {
      UUID chosen=(UUID)target.getTargets().get(idx);
      Permanent permanent=game.getPermanent(chosen);
      if (permanent != null) {
        if (permanent.getCounters().size() > 0) {
          if (permanent.getCounters().size() == 1) {
            for (            Counter counter : permanent.getCounters().values()) {
              permanent.addCounters(counter.getName(),1,game);
            }
          }
 else {
            Choice choice=new ChoiceImpl(true);
            Set<String> choices=new HashSet<String>();
            for (            Counter counter : permanent.getCounters().values()) {
              choices.add(counter.getName());
            }
            choice.setChoices(choices);
            choice.setMessage(""String_Node_Str"" + permanent.getName() + ""String_Node_Str"");
            controller.choose(Outcome.Benefit,choice,game);
            for (            Counter counter : permanent.getCounters().values()) {
              if (counter.getName().equals(choice.getChoice())) {
                permanent.addCounters(counter.getName(),1,game);
                break;
              }
            }
          }
        }
      }
 else {
        Player player=game.getPlayer(chosen);
        if (player != null) {
          if (player.getCounters().size() > 0) {
            if (player.getCounters().size() == 1) {
              for (              Counter counter : player.getCounters().values()) {
                Counter newCounter=new Counter(counter.getName());
                player.addCounters(newCounter,game);
              }
            }
 else {
              Choice choice=new ChoiceImpl(true);
              Set<String> choices=new HashSet<String>();
              for (              Counter counter : player.getCounters().values()) {
                choices.add(counter.getName());
              }
              choice.setChoices(choices);
              choice.setMessage(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
              controller.choose(Outcome.Benefit,choice,game);
              for (              Counter counter : player.getCounters().values()) {
                if (counter.getName().equals(choice.getChoice())) {
                  Counter newCounter=new Counter(counter.getName());
                  player.addCounters(newCounter,game);
                  break;
                }
              }
            }
          }
        }
      }
    }
    return abilityApplied;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Target target=new TargetPermanentOrPlayerWithCounter(0,Integer.MAX_VALUE,true);
  if (target.canChoose(controller.getId(),game)) {
    boolean abilityApplied=false;
    Map<String,Serializable> options=new HashMap<>();
    options.put(""String_Node_Str"",""String_Node_Str"");
    while (target.canChoose(controller.getId(),game)) {
      if (controller.choose(Outcome.Benefit,target,source.getSourceId(),game,options)) {
        break;
      }
    }
    for (int idx=0; idx < target.getTargets().size(); idx++) {
      UUID chosen=(UUID)target.getTargets().get(idx);
      Permanent permanent=game.getPermanent(chosen);
      if (permanent != null) {
        if (permanent.getCounters().size() > 0) {
          if (permanent.getCounters().size() == 1) {
            for (            Counter counter : permanent.getCounters().values()) {
              permanent.addCounters(counter.getName(),1,game);
            }
          }
 else {
            Choice choice=new ChoiceImpl(true);
            Set<String> choices=new HashSet<>();
            for (            Counter counter : permanent.getCounters().values()) {
              choices.add(counter.getName());
            }
            choice.setChoices(choices);
            choice.setMessage(""String_Node_Str"" + permanent.getName() + ""String_Node_Str"");
            controller.choose(Outcome.Benefit,choice,game);
            for (            Counter counter : permanent.getCounters().values()) {
              if (counter.getName().equals(choice.getChoice())) {
                permanent.addCounters(counter.getName(),1,game);
                break;
              }
            }
          }
        }
      }
 else {
        Player player=game.getPlayer(chosen);
        if (player != null) {
          if (player.getCounters().size() > 0) {
            if (player.getCounters().size() == 1) {
              for (              Counter counter : player.getCounters().values()) {
                Counter newCounter=new Counter(counter.getName());
                player.addCounters(newCounter,game);
              }
            }
 else {
              Choice choice=new ChoiceImpl(true);
              Set<String> choices=new HashSet<>();
              for (              Counter counter : player.getCounters().values()) {
                choices.add(counter.getName());
              }
              choice.setChoices(choices);
              choice.setMessage(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
              controller.choose(Outcome.Benefit,choice,game);
              for (              Counter counter : player.getCounters().values()) {
                if (counter.getName().equals(choice.getChoice())) {
                  Counter newCounter=new Counter(counter.getName());
                  player.addCounters(newCounter,game);
                  break;
                }
              }
            }
          }
        }
      }
    }
    return abilityApplied;
  }
  return false;
}",0.9980595084087968
159223,"@Override public Set<UUID> possibleTargets(UUID sourceControllerId,Game game){
  Set<UUID> possibleTargets=new HashSet<UUID>();
  for (  UUID playerId : game.getPlayer(sourceControllerId).getInRange()) {
    Player player=game.getPlayer(playerId);
    if (player != null && filter.match(player,game)) {
      possibleTargets.add(playerId);
    }
  }
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(new FilterCreaturePermanent(),sourceControllerId,game)) {
    if (filter.match(permanent,null,sourceControllerId,game)) {
      possibleTargets.add(permanent.getId());
    }
  }
  return possibleTargets;
}","@Override public Set<UUID> possibleTargets(UUID sourceControllerId,Game game){
  Set<UUID> possibleTargets=new HashSet<>();
  for (  UUID playerId : game.getPlayer(sourceControllerId).getInRange()) {
    Player player=game.getPlayer(playerId);
    if (player != null && filter.match(player,game)) {
      possibleTargets.add(playerId);
    }
  }
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(new FilterCreaturePermanent(),sourceControllerId,game)) {
    if (filter.match(permanent,null,sourceControllerId,game)) {
      possibleTargets.add(permanent.getId());
    }
  }
  return possibleTargets;
}",0.9968051118210862
159224,"@Override public boolean chooseTargetAmount(Outcome outcome,TargetAmount target,Ability source,Game game){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + outcome.toString() + ""String_Node_Str""+ target.toString());
  }
  UUID opponentId=game.getOpponents(playerId).iterator().next();
  if (target instanceof TargetCreatureOrPlayerAmount) {
    if (game.getPlayer(opponentId).getLife() <= target.getAmountRemaining()) {
      target.addTarget(opponentId,target.getAmountRemaining(),source,game);
      return true;
    }
    List<Permanent> targets;
    if (outcome.isGood()) {
      targets=threats(playerId,source.getSourceId(),new FilterCreaturePermanent(),game,target.getTargets());
    }
 else {
      targets=threats(opponentId,source.getSourceId(),new FilterCreaturePermanent(),game,target.getTargets());
    }
    for (    Permanent permanent : targets) {
      if (target.canTarget(permanent.getId(),source,game)) {
        if (permanent.getToughness().getValue() <= target.getAmountRemaining()) {
          target.addTarget(permanent.getId(),permanent.getToughness().getValue(),source,game);
          return true;
        }
      }
    }
  }
  return false;
}","@Override public boolean chooseTargetAmount(Outcome outcome,TargetAmount target,Ability source,Game game){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + outcome.toString() + ""String_Node_Str""+ target.toString());
  }
  UUID opponentId=game.getOpponents(playerId).iterator().next();
  if (target instanceof TargetCreatureOrPlayerAmount) {
    if (outcome.equals(Outcome.Damage) && game.getPlayer(opponentId).getLife() <= target.getAmountRemaining()) {
      target.addTarget(opponentId,target.getAmountRemaining(),source,game);
      return true;
    }
    List<Permanent> targets;
    if (outcome.isGood()) {
      targets=threats(playerId,source.getSourceId(),new FilterCreaturePermanent(),game,target.getTargets());
    }
 else {
      targets=threats(opponentId,source.getSourceId(),new FilterCreaturePermanent(),game,target.getTargets());
    }
    for (    Permanent permanent : targets) {
      if (target.canTarget(permanent.getId(),source,game)) {
        if (permanent.getToughness().getValue() <= target.getAmountRemaining()) {
          target.addTarget(permanent.getId(),permanent.getToughness().getValue(),source,game);
          return true;
        }
      }
    }
    if (outcome.isGood() && target.canTarget(playerId,playerId,source,game)) {
      target.addTarget(opponentId,target.getAmountRemaining(),source,game);
      return true;
    }
 else     if (target.canTarget(playerId,opponentId,source,game)) {
      target.addTarget(opponentId,target.getAmountRemaining(),source,game);
      return true;
    }
 else     if (target.canTarget(playerId,playerId,source,game)) {
      target.addTarget(opponentId,target.getAmountRemaining(),source,game);
      return true;
    }
  }
  return false;
}",0.8039753255654558
159225,"public Combat(final Combat combat){
  this.attackerId=combat.attackerId;
  for (  CombatGroup group : combat.groups) {
    groups.add(group.copy());
  }
  defenders.addAll(combat.defenders);
  for (  Map.Entry<UUID,CombatGroup> group : combat.blockingGroups.entrySet()) {
    blockingGroups.put(group.getKey(),group.getValue());
  }
  this.useToughnessForDamage=combat.useToughnessForDamage;
}","public Combat(final Combat combat){
  this.attackerId=combat.attackerId;
  for (  CombatGroup group : combat.groups) {
    groups.add(group.copy());
  }
  defenders.addAll(combat.defenders);
  for (  Map.Entry<UUID,CombatGroup> group : combat.blockingGroups.entrySet()) {
    blockingGroups.put(group.getKey(),group.getValue());
  }
  this.useToughnessForDamage=combat.useToughnessForDamage;
  for (  Map.Entry<UUID,Set<UUID>> group : combat.numberCreaturesDefenderAttackedBy.entrySet()) {
    this.numberCreaturesDefenderAttackedBy.put(group.getKey(),group.getValue());
  }
  for (  Map.Entry<UUID,Set<UUID>> group : combat.creatureMustBlockAttackers.entrySet()) {
    this.creatureMustBlockAttackers.put(group.getKey(),group.getValue());
  }
  for (  Map.Entry<UUID,Set<UUID>> group : combat.creaturesForcedToAttack.entrySet()) {
    this.creaturesForcedToAttack.put(group.getKey(),group.getValue());
  }
  this.maxAttackers=combat.maxAttackers;
}",0.5856929955290611
159226,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  List<UUID> perms=new ArrayList<UUID>();
  for (  UUID playerId : controller.getInRange()) {
    Player player=game.getPlayer(playerId);
    if (player != null) {
      int numTargets=Math.min(amount.calculate(game,source,this),game.getBattlefield().countAll(filter,player.getId(),game));
      TargetControlledPermanent target=new TargetControlledPermanent(numTargets,numTargets,filter,false);
      if (target.canChoose(player.getId(),game)) {
        while (!target.isChosen() && player.isInGame()) {
          player.choose(Outcome.Sacrifice,target,source.getSourceId(),game);
        }
        perms.addAll(target.getTargets());
      }
    }
  }
  for (  UUID permID : perms) {
    Permanent permanent=game.getPermanent(permID);
    if (permanent != null) {
      permanent.sacrifice(source.getSourceId(),game);
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  List<UUID> perms=new ArrayList<>();
  for (  UUID playerId : controller.getInRange()) {
    Player player=game.getPlayer(playerId);
    if (player != null) {
      int numTargets=Math.min(amount.calculate(game,source,this),game.getBattlefield().countAll(filter,player.getId(),game));
      TargetControlledPermanent target=new TargetControlledPermanent(numTargets,numTargets,filter,true);
      if (target.canChoose(player.getId(),game)) {
        while (!target.isChosen() && player.isInGame()) {
          player.choose(Outcome.Sacrifice,target,source.getSourceId(),game);
        }
        perms.addAll(target.getTargets());
      }
    }
  }
  for (  UUID permID : perms) {
    Permanent permanent=game.getPermanent(permID);
    if (permanent != null) {
      permanent.sacrifice(source.getSourceId(),game);
    }
  }
  return true;
}",0.2834567901234568
159227,"private boolean checkIfGameIsOver(){
  if (state.isGameOver()) {
    return true;
  }
  int remainingPlayers=0;
  int numLosers=0;
  for (  Player player : state.getPlayers().values()) {
    if (!player.hasLeft()) {
      remainingPlayers++;
    }
    if (player.hasLost()) {
      numLosers++;
    }
  }
  if (remainingPlayers <= 1 || numLosers >= state.getPlayers().size() - 1) {
    end();
    for (    Player player : state.getPlayers().values()) {
      if (!player.hasLeft() && !player.hasLost()) {
        logger.debug(new StringBuilder(""String_Node_Str"").append(player.getName()).append(""String_Node_Str"").append(this.getId()));
        player.won(this);
      }
    }
    endTime=new Date();
    return true;
  }
  return false;
}","private boolean checkIfGameIsOver(){
  if (state.isGameOver()) {
    return true;
  }
  int remainingPlayers=0;
  int numLosers=0;
  for (  Player player : state.getPlayers().values()) {
    if (!player.hasLeft()) {
      remainingPlayers++;
    }
    if (player.hasLost()) {
      numLosers++;
    }
  }
  if (remainingPlayers <= 1 || numLosers >= state.getPlayers().size() - 1) {
    end();
    for (    Player player : state.getPlayers().values()) {
      if (!player.hasLeft() && !player.hasLost()) {
        logger.debug(new StringBuilder(""String_Node_Str"").append(player.getName()).append(""String_Node_Str"").append(this.getId()));
        player.won(this);
      }
    }
    return true;
  }
  return false;
}",0.9834938101788172
159228,"@Override public void end(){
  if (!state.isGameOver()) {
    state.endGame();
    for (    Player player : state.getPlayers().values()) {
      player.abort();
    }
  }
}","@Override public void end(){
  if (!state.isGameOver()) {
    endTime=new Date();
    state.endGame();
    for (    Player player : state.getPlayers().values()) {
      player.abort();
    }
  }
}",0.9347826086956522
159229,"@Override public Filter getSourceFilter(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public Filter getSourceFilter(){
  for (  T cost : this) {
    if (cost.getSourceFilter() != null) {
      return cost.getSourceFilter();
    }
  }
  return null;
}",0.45
159230,"/** 
 * Adjusts spell or ability cost to be paid by colored and generic mana.
 * @param spellAbility
 * @param manaCostsToReduce costs to reduce
 * @param convertToGeneric colored mana does reduce generic mana if no appropriate colored mana is in the costs included
 */
public static void adjustCost(SpellAbility spellAbility,ManaCosts<ManaCost> manaCostsToReduce,boolean convertToGeneric){
  ManaCosts<ManaCost> previousCost=spellAbility.getManaCostsToPay();
  ManaCosts<ManaCost> adjustedCost=new ManaCostsImpl<>();
  for (  VariableCost vCost : previousCost.getVariableCosts()) {
    if (vCost instanceof VariableManaCost) {
      adjustedCost.add((VariableManaCost)vCost);
    }
  }
  Mana reduceMana=new Mana();
  for (  ManaCost manaCost : manaCostsToReduce) {
    reduceMana.add(manaCost.getMana());
  }
  for (  ManaCost newManaCost : previousCost) {
    Mana mana=newManaCost.getMana();
    if (mana.getColorless() > 0) {
      continue;
    }
    if (mana.getBlack() > 0 && reduceMana.getBlack() > 0) {
      if (reduceMana.getBlack() > mana.getBlack()) {
        reduceMana.setBlack(reduceMana.getBlack() - mana.getBlack());
        mana.setBlack(0);
      }
 else {
        mana.setBlack(mana.getBlack() - reduceMana.getBlack());
        reduceMana.setBlack(0);
      }
    }
    if (mana.getRed() > 0 && reduceMana.getRed() > 0) {
      if (reduceMana.getRed() > mana.getRed()) {
        reduceMana.setRed(reduceMana.getRed() - mana.getRed());
        mana.setRed(0);
      }
 else {
        mana.setRed(mana.getRed() - reduceMana.getRed());
        reduceMana.setRed(0);
      }
    }
    if (mana.getBlue() > 0 && reduceMana.getBlue() > 0) {
      if (reduceMana.getBlue() > mana.getBlue()) {
        reduceMana.setBlue(reduceMana.getBlue() - mana.getBlue());
        mana.setBlue(0);
      }
 else {
        mana.setBlue(mana.getBlue() - reduceMana.getBlue());
        reduceMana.setBlue(0);
      }
    }
    if (mana.getGreen() > 0 && reduceMana.getGreen() > 0) {
      if (reduceMana.getGreen() > mana.getGreen()) {
        reduceMana.setGreen(reduceMana.getGreen() - mana.getGreen());
        mana.setGreen(0);
      }
 else {
        mana.setGreen(mana.getGreen() - reduceMana.getGreen());
        reduceMana.setGreen(0);
      }
    }
    if (mana.getWhite() > 0 && reduceMana.getWhite() > 0) {
      if (reduceMana.getWhite() > mana.getWhite()) {
        reduceMana.setWhite(reduceMana.getWhite() - mana.getWhite());
        mana.setWhite(0);
      }
 else {
        mana.setWhite(mana.getWhite() - reduceMana.getWhite());
        reduceMana.setWhite(0);
      }
    }
    if (newManaCost instanceof HybridManaCost) {
      if (mana.count() > 1) {
        adjustedCost.add(newManaCost);
      }
    }
 else     if (mana.count() > 0) {
      adjustedCost.add(newManaCost);
    }
  }
  int reduceAmount;
  if (convertToGeneric) {
    reduceAmount=reduceMana.count();
  }
 else {
    reduceAmount=reduceMana.getColorless();
  }
  for (  ManaCost newManaCost : previousCost) {
    Mana mana=newManaCost.getMana();
    if (mana.getColorless() == 0) {
      continue;
    }
    if (mana.getColorless() > 0 && reduceAmount > 0) {
      if (reduceAmount > mana.getColorless()) {
        reduceAmount-=mana.getColorless();
        mana.setColorless(0);
      }
 else {
        mana.setColorless(mana.getColorless() - reduceAmount);
        reduceAmount=0;
      }
    }
    if (mana.count() > 0) {
      adjustedCost.add(0,new GenericManaCost(mana.count()));
    }
  }
  spellAbility.getManaCostsToPay().clear();
  spellAbility.getManaCostsToPay().addAll(adjustedCost);
}","/** 
 * Adjusts spell or ability cost to be paid by colored and generic mana.
 * @param spellAbility
 * @param manaCostsToReduce costs to reduce
 * @param convertToGeneric colored mana does reduce generic mana if no appropriate colored mana is in the costs included
 */
public static void adjustCost(SpellAbility spellAbility,ManaCosts<ManaCost> manaCostsToReduce,boolean convertToGeneric){
  ManaCosts<ManaCost> previousCost=spellAbility.getManaCostsToPay();
  ManaCosts<ManaCost> adjustedCost=new ManaCostsImpl<>();
  for (  VariableCost vCost : previousCost.getVariableCosts()) {
    if (vCost instanceof VariableManaCost) {
      adjustedCost.add((VariableManaCost)vCost);
    }
  }
  Mana reduceMana=new Mana();
  for (  ManaCost manaCost : manaCostsToReduce) {
    reduceMana.add(manaCost.getMana());
  }
  for (  ManaCost newManaCost : previousCost) {
    Mana mana=newManaCost.getMana();
    if (mana.getColorless() > 0) {
      continue;
    }
    if (mana.getBlack() > 0 && reduceMana.getBlack() > 0) {
      if (reduceMana.getBlack() > mana.getBlack()) {
        reduceMana.setBlack(reduceMana.getBlack() - mana.getBlack());
        mana.setBlack(0);
      }
 else {
        mana.setBlack(mana.getBlack() - reduceMana.getBlack());
        reduceMana.setBlack(0);
      }
    }
    if (mana.getRed() > 0 && reduceMana.getRed() > 0) {
      if (reduceMana.getRed() > mana.getRed()) {
        reduceMana.setRed(reduceMana.getRed() - mana.getRed());
        mana.setRed(0);
      }
 else {
        mana.setRed(mana.getRed() - reduceMana.getRed());
        reduceMana.setRed(0);
      }
    }
    if (mana.getBlue() > 0 && reduceMana.getBlue() > 0) {
      if (reduceMana.getBlue() > mana.getBlue()) {
        reduceMana.setBlue(reduceMana.getBlue() - mana.getBlue());
        mana.setBlue(0);
      }
 else {
        mana.setBlue(mana.getBlue() - reduceMana.getBlue());
        reduceMana.setBlue(0);
      }
    }
    if (mana.getGreen() > 0 && reduceMana.getGreen() > 0) {
      if (reduceMana.getGreen() > mana.getGreen()) {
        reduceMana.setGreen(reduceMana.getGreen() - mana.getGreen());
        mana.setGreen(0);
      }
 else {
        mana.setGreen(mana.getGreen() - reduceMana.getGreen());
        reduceMana.setGreen(0);
      }
    }
    if (mana.getWhite() > 0 && reduceMana.getWhite() > 0) {
      if (reduceMana.getWhite() > mana.getWhite()) {
        reduceMana.setWhite(reduceMana.getWhite() - mana.getWhite());
        mana.setWhite(0);
      }
 else {
        mana.setWhite(mana.getWhite() - reduceMana.getWhite());
        reduceMana.setWhite(0);
      }
    }
    if (newManaCost instanceof HybridManaCost) {
      if (mana.count() > 1) {
        adjustedCost.add(newManaCost);
      }
    }
 else     if (mana.count() > 0) {
      adjustedCost.add(newManaCost);
    }
  }
  int reduceAmount;
  if (convertToGeneric) {
    reduceAmount=reduceMana.count();
  }
 else {
    reduceAmount=reduceMana.getColorless();
  }
  for (  ManaCost newManaCost : previousCost) {
    Mana mana=newManaCost.getMana();
    if (mana.getColorless() == 0) {
      continue;
    }
    if (mana.getColorless() > 0 && reduceAmount > 0) {
      if (reduceAmount > mana.getColorless()) {
        reduceAmount-=mana.getColorless();
        mana.setColorless(0);
      }
 else {
        mana.setColorless(mana.getColorless() - reduceAmount);
        reduceAmount=0;
      }
    }
    if (mana.count() > 0) {
      adjustedCost.add(0,new GenericManaCost(mana.count()));
    }
  }
  adjustedCost.setSourceFilter(previousCost.getSourceFilter());
  spellAbility.getManaCostsToPay().clear();
  spellAbility.getManaCostsToPay().addAll(adjustedCost);
}",0.991152889134642
159231,"public GarrukApexPredatorEmblem(){
  Effect effect=new BoostTargetEffect(5,5,Duration.EndOfGame);
  effect.setText(""String_Node_Str"");
  Ability ability=new AttackedByCreatureTriggeredAbility(Zone.COMMAND,effect,false,true);
  effect=new GainAbilityTargetEffect(TrampleAbility.getInstance(),Duration.EndOfTurn,""String_Node_Str"");
  ability.addEffect(effect);
  this.getAbilities().add(ability);
}","public GarrukApexPredatorEmblem(){
  Effect effect=new BoostTargetEffect(5,5,Duration.EndOfTurn);
  effect.setText(""String_Node_Str"");
  Ability ability=new AttackedByCreatureTriggeredAbility(Zone.COMMAND,effect,false,true);
  effect=new GainAbilityTargetEffect(TrampleAbility.getInstance(),Duration.EndOfTurn,""String_Node_Str"");
  ability.addEffect(effect);
  this.getAbilities().add(ability);
}",0.98989898989899
159232,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.SPELL_CAST) {
    Spell spell=game.getStack().getSpell(event.getTargetId());
    if (spell != null && game.getOpponents(super.getControllerId()).contains(spell.getControllerId()) && game.getActivePlayerId().equals(super.getControllerId())) {
      return true;
    }
  }
  if (event.getType() == GameEvent.EventType.ZONE_CHANGE) {
    if (super.getSourceId().equals(event.getTargetId())) {
      MageObject before=game.getLastKnownInformation(event.getTargetId(),Zone.BATTLEFIELD);
      Zone after=game.getState().getZone(event.getTargetId());
      return before != null && after != null && Zone.GRAVEYARD.match(after);
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.SPELL_CAST) {
    Spell spell=game.getStack().getSpell(event.getTargetId());
    if (spell != null && game.getOpponents(super.getControllerId()).contains(spell.getControllerId()) && game.getActivePlayerId().equals(super.getControllerId())) {
      return true;
    }
  }
  if (event.getType() == GameEvent.EventType.ZONE_CHANGE && getSourceId().equals(event.getTargetId())) {
    ZoneChangeEvent zce=(ZoneChangeEvent)event;
    return zce.getFromZone().equals(Zone.BATTLEFIELD) && zce.getToZone().equals(Zone.GRAVEYARD);
  }
  return false;
}",0.7006369426751592
159233,"public VoiceOfResurgenceToken(){
  super(""String_Node_Str"",""String_Node_Str"");
  cardType.add(CardType.CREATURE);
  color.setGreen(true);
  color.setWhite(true);
  subtype.add(""String_Node_Str"");
  power=new MageInt(0);
  toughness=new MageInt(0);
  FilterControlledPermanent filter=new FilterControlledPermanent(""String_Node_Str"");
  filter.add(new CardTypePredicate(CardType.CREATURE));
  DynamicValue creaturesControlled=new PermanentsOnBattlefieldCount(filter);
  this.addAbility(new SimpleStaticAbility(Zone.BATTLEFIELD,new SetPowerToughnessSourceEffect(creaturesControlled,Duration.EndOfGame)));
}","public VoiceOfResurgenceToken(){
  super(""String_Node_Str"",""String_Node_Str"");
  setOriginalExpansionSetCode(""String_Node_Str"");
  cardType.add(CardType.CREATURE);
  color.setGreen(true);
  color.setWhite(true);
  subtype.add(""String_Node_Str"");
  power=new MageInt(0);
  toughness=new MageInt(0);
  this.addAbility(new SimpleStaticAbility(Zone.BATTLEFIELD,new SetPowerToughnessSourceEffect(creaturesControlled,Duration.EndOfGame)));
}",0.7418111753371869
159234,"@Override public boolean apply(Game game,Ability source){
  List<Permanent> permanents=game.getBattlefield().getActivePermanents(filter,source.getControllerId(),game);
  for (  Permanent permanent : permanents) {
    permanent.damage(amount.calculate(game,source,this),source.getSourceId(),game,false,true);
  }
  for (  UUID playerId : game.getPlayer(source.getControllerId()).getInRange()) {
    Player player=game.getPlayer(playerId);
    if (player != null) {
      player.damage(amount.calculate(game,source,this),source.getSourceId(),game,false,true);
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  int damage=amount.calculate(game,source,this);
  List<Permanent> permanents=game.getBattlefield().getActivePermanents(filter,source.getControllerId(),game);
  for (  Permanent permanent : permanents) {
    permanent.damage(damage,source.getSourceId(),game,false,true);
  }
  for (  UUID playerId : game.getPlayer(source.getControllerId()).getInRange()) {
    Player player=game.getPlayer(playerId);
    if (player != null) {
      player.damage(damage,source.getSourceId(),game,false,true);
    }
  }
  return true;
}",0.8888888888888888
159235,"@Override protected void paintComponent(Graphics g){
  Graphics2D g2d=(Graphics2D)g;
  g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  if (alpha != 1.0f) {
    AlphaComposite composite=AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,alpha);
    g2d.setComposite(composite);
  }
  if (!hasImage) {
    g2d.setColor(new Color(30,200,200,120));
  }
 else {
    g2d.setColor(new Color(0,0,0,0));
  }
  int cornerSize=Math.max(4,Math.round(cardWidth * ROUNDED_CORNER_SIZE));
  g2d.fillRoundRect(cardXOffset,cardYOffset,cardWidth,cardHeight,cornerSize,cornerSize);
  if (isSelected) {
    g2d.setColor(Color.green);
    g2d.fillRoundRect(cardXOffset + 1,cardYOffset + 1,cardWidth - 2,cardHeight - 2,cornerSize,cornerSize);
  }
 else   if (isChoosable) {
    g2d.setColor(new Color(250,250,0,230));
    g2d.fillRoundRect(cardXOffset + 1,cardYOffset + 1,cardWidth - 2,cardHeight - 2,cornerSize,cornerSize);
  }
  if (isPlayable) {
    g2d.setColor(new Color(250,250,0,200));
    g2d.fillRoundRect(cardXOffset + 1,cardYOffset + 1,cardWidth - 2,cardHeight - 2,cornerSize,cornerSize);
  }
  if (canAttack) {
    g2d.setColor(new Color(250,250,0,200));
    g2d.fillRoundRect(cardXOffset + 1,cardYOffset + 1,cardWidth - 2,cardHeight - 2,cornerSize,cornerSize);
  }
}","@Override protected void paintComponent(Graphics g){
  Graphics2D g2d=(Graphics2D)g;
  g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  if (alpha != 1.0f) {
    AlphaComposite composite=AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,alpha);
    g2d.setComposite(composite);
  }
  if (!hasImage) {
    g2d.setColor(new Color(30,200,200,120));
  }
 else {
    g2d.setColor(new Color(0,0,0,0));
  }
  int cornerSize=Math.max(4,Math.round(cardWidth * ROUNDED_CORNER_SIZE));
  g2d.fillRoundRect(cardXOffset,cardYOffset,cardWidth,cardHeight,cornerSize,cornerSize);
  if (isSelected) {
    g2d.setColor(Color.green);
    g2d.fillRoundRect(cardXOffset + 1,cardYOffset + 1,cardWidth - 2,cardHeight - 2,cornerSize,cornerSize);
  }
 else   if (isChoosable) {
    g2d.setColor(new Color(250,250,0,230));
    g2d.fillRoundRect(cardXOffset + 1,cardYOffset + 1,cardWidth - 2,cardHeight - 2,cornerSize,cornerSize);
  }
  if (isPlayable) {
    g2d.setColor(new Color(250,250,0,200));
    g2d.fillRoundRect(cardXOffset + 1,cardYOffset + 1,cardWidth - 2,cardHeight - 2,cornerSize,cornerSize);
  }
  if (canAttack) {
    g2d.setColor(new Color(0,0,150,180));
    g2d.fillRoundRect(cardXOffset + 1,cardYOffset + 1,cardWidth - 2,cardHeight - 2,cornerSize,cornerSize);
  }
}",0.9938366718027736
159236,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD) {
    Permanent p=game.getPermanent(event.getTargetId());
    if (p != null && p.getCardType().contains(CardType.CREATURE)) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD) {
    Permanent permanent=((EntersTheBattlefieldEvent)event).getTarget();
    if (permanent != null && permanent.getCardType().contains(CardType.CREATURE)) {
      game.getContinuousEffects().replaceEvent(event,game);
      return true;
    }
  }
  return false;
}",0.743801652892562
159237,"public boolean replaceEvent(GameEvent event,Game game){
  if (preventedByRuleModification(event,game,false)) {
    return true;
  }
  boolean caught=false;
  HashMap<UUID,HashSet<UUID>> consumed=new HashMap<>();
  do {
    HashMap<ReplacementEffect,HashSet<Ability>> rEffects=getApplicableReplacementEffects(event,game);
    for (Iterator<ReplacementEffect> it1=rEffects.keySet().iterator(); it1.hasNext(); ) {
      ReplacementEffect entry=it1.next();
      if (consumed.containsKey(entry.getId())) {
        HashSet<UUID> consumedAbilitiesIds=consumed.get(entry.getId());
        if (rEffects.get(entry) == null || consumedAbilitiesIds.size() == rEffects.get(entry).size()) {
          it1.remove();
        }
 else {
          Iterator it=rEffects.get(entry).iterator();
          while (it.hasNext()) {
            Ability ability=(Ability)it.next();
            if (consumedAbilitiesIds.contains(ability.getId())) {
              it.remove();
            }
          }
        }
      }
    }
    if (rEffects.isEmpty()) {
      break;
    }
    int index;
    boolean onlyOne=false;
    if (rEffects.size() == 1) {
      ReplacementEffect effect=rEffects.keySet().iterator().next();
      HashSet<Ability> abilities=replacementEffects.getAbility(effect.getId());
      if (abilities == null || abilities.size() == 1) {
        onlyOne=true;
      }
    }
    if (onlyOne) {
      index=0;
    }
 else {
      Player player=game.getPlayer(event.getPlayerId());
      index=player.chooseEffect(getReplacementEffectsTexts(rEffects,game),game);
    }
    int checked=0;
    ReplacementEffect rEffect=null;
    Ability rAbility=null;
    for (    Map.Entry<ReplacementEffect,HashSet<Ability>> entry : rEffects.entrySet()) {
      if (entry.getValue() == null) {
        if (checked == index) {
          rEffect=entry.getKey();
          break;
        }
 else {
          checked++;
        }
      }
 else {
        HashSet<Ability> abilities=entry.getValue();
        int size=abilities.size();
        if (index > (checked + size - 1)) {
          checked+=size;
        }
 else {
          rEffect=entry.getKey();
          Iterator it=abilities.iterator();
          while (it.hasNext() && rAbility == null) {
            if (checked == index) {
              rAbility=(Ability)it.next();
            }
 else {
              it.next();
              checked++;
            }
          }
          break;
        }
      }
    }
    if (rEffect != null) {
      event.getAppliedEffects().add(rEffect.getId());
      caught=rEffect.replaceEvent(event,rAbility,game);
    }
    if (caught) {
      break;
    }
    if (rEffect != null) {
      if (consumed.containsKey(rEffect.getId())) {
        HashSet<UUID> set=consumed.get(rEffect.getId());
        if (rAbility != null) {
          if (!set.contains(rAbility.getId())) {
            set.add(rAbility.getId());
          }
        }
      }
 else {
        HashSet<UUID> set=new HashSet<>();
        if (rAbility != null) {
          set.add(rAbility.getId());
        }
        consumed.put(rEffect.getId(),set);
      }
    }
    game.applyEffects();
  }
 while (true);
  return caught;
}","public boolean replaceEvent(GameEvent event,Game game){
  boolean caught=false;
  HashMap<UUID,HashSet<UUID>> consumed=new HashMap<>();
  do {
    HashMap<ReplacementEffect,HashSet<Ability>> rEffects=getApplicableReplacementEffects(event,game);
    for (Iterator<ReplacementEffect> it1=rEffects.keySet().iterator(); it1.hasNext(); ) {
      ReplacementEffect entry=it1.next();
      if (consumed.containsKey(entry.getId())) {
        HashSet<UUID> consumedAbilitiesIds=consumed.get(entry.getId());
        if (rEffects.get(entry) == null || consumedAbilitiesIds.size() == rEffects.get(entry).size()) {
          it1.remove();
        }
 else {
          Iterator it=rEffects.get(entry).iterator();
          while (it.hasNext()) {
            Ability ability=(Ability)it.next();
            if (consumedAbilitiesIds.contains(ability.getId())) {
              it.remove();
            }
          }
        }
      }
    }
    if (rEffects.isEmpty()) {
      break;
    }
    int index;
    boolean onlyOne=false;
    if (rEffects.size() == 1) {
      ReplacementEffect effect=rEffects.keySet().iterator().next();
      HashSet<Ability> abilities=replacementEffects.getAbility(effect.getId());
      if (abilities == null || abilities.size() == 1) {
        onlyOne=true;
      }
    }
    if (onlyOne) {
      index=0;
    }
 else {
      Player player=game.getPlayer(event.getPlayerId());
      index=player.chooseEffect(getReplacementEffectsTexts(rEffects,game),game);
    }
    int checked=0;
    ReplacementEffect rEffect=null;
    Ability rAbility=null;
    for (    Map.Entry<ReplacementEffect,HashSet<Ability>> entry : rEffects.entrySet()) {
      if (entry.getValue() == null) {
        if (checked == index) {
          rEffect=entry.getKey();
          break;
        }
 else {
          checked++;
        }
      }
 else {
        HashSet<Ability> abilities=entry.getValue();
        int size=abilities.size();
        if (index > (checked + size - 1)) {
          checked+=size;
        }
 else {
          rEffect=entry.getKey();
          Iterator it=abilities.iterator();
          while (it.hasNext() && rAbility == null) {
            if (checked == index) {
              rAbility=(Ability)it.next();
            }
 else {
              it.next();
              checked++;
            }
          }
          break;
        }
      }
    }
    if (rEffect != null) {
      event.getAppliedEffects().add(rEffect.getId());
      caught=rEffect.replaceEvent(event,rAbility,game);
    }
    if (caught) {
      break;
    }
    if (rEffect != null) {
      if (consumed.containsKey(rEffect.getId())) {
        HashSet<UUID> set=consumed.get(rEffect.getId());
        if (rAbility != null) {
          if (!set.contains(rAbility.getId())) {
            set.add(rAbility.getId());
          }
        }
      }
 else {
        HashSet<UUID> set=new HashSet<>();
        if (rAbility != null) {
          set.add(rAbility.getId());
        }
        consumed.put(rEffect.getId(),set);
      }
    }
    game.applyEffects();
  }
 while (true);
  return caught;
}",0.9877852780456444
159238,"public boolean replaceEvent(GameEvent event,Game game){
  return effects.replaceEvent(event,game);
}","public boolean replaceEvent(GameEvent event,Game game){
  if (effects.preventedByRuleModification(event,game,false)) {
    return true;
  }
  return effects.replaceEvent(event,game);
}",0.704225352112676
159239,"private static String getMatchResultString(TournamentPlayer p1,TournamentPlayer p2,Match match){
  MatchPlayer mp1=match.getPlayer(p1.getPlayer().getId());
  MatchPlayer mp2=match.getPlayer(p2.getPlayer().getId());
  StringBuilder matchResult=new StringBuilder();
  matchResult.append(p2.getPlayer().getName());
  matchResult.append(""String_Node_Str"").append(mp1.getWins());
  if (mp1.hasQuit()) {
    matchResult.append(mp1.getPlayer().hasIdleTimeout() ? ""String_Node_Str"" : (mp1.getPlayer().hasTimerTimeout() ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (match.getDraws() > 0) {
    matchResult.append(match.getDraws()).append(""String_Node_Str"");
  }
  matchResult.append(""String_Node_Str"").append(mp2.getWins());
  if (mp2.hasQuit()) {
    matchResult.append(mp2.getPlayer().hasIdleTimeout() ? ""String_Node_Str"" : (mp2.getPlayer().hasTimerTimeout() ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  matchResult.append(""String_Node_Str"");
  return matchResult.toString();
}","private static String getMatchResultString(TournamentPlayer p1,TournamentPlayer p2,Match match){
  MatchPlayer mp1=match.getPlayer(p1.getPlayer().getId());
  MatchPlayer mp2=match.getPlayer(p2.getPlayer().getId());
  StringBuilder matchResult=new StringBuilder();
  matchResult.append(p2.getPlayer().getName());
  matchResult.append(""String_Node_Str"").append(mp1.getWins());
  if (mp1.hasQuit()) {
    matchResult.append(mp1.getPlayer().hasIdleTimeout() ? ""String_Node_Str"" : (mp1.getPlayer().hasTimerTimeout() ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (match.getDraws() > 0) {
    matchResult.append(""String_Node_Str"").append(match.getDraws());
  }
  matchResult.append(""String_Node_Str"").append(mp2.getWins());
  if (mp2.hasQuit()) {
    matchResult.append(mp2.getPlayer().hasIdleTimeout() ? ""String_Node_Str"" : (mp2.getPlayer().hasTimerTimeout() ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  matchResult.append(""String_Node_Str"");
  return matchResult.toString();
}",0.9734964322120284
159240,"public Mana getNetMana(Game game){
  return netMana;
}","public Mana getNetMana(Game game){
  return netMana.copy();
}",0.9391304347826088
159241,"@Override public boolean putOntoBattlefield(Game game,Zone fromZone,UUID sourceId,UUID controllerId,boolean tapped,ArrayList<UUID> appliedEffects){
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,controllerId,fromZone,Zone.BATTLEFIELD,appliedEffects,tapped);
  if (!game.replaceEvent(event)) {
    if (fromZone != null) {
      boolean removed=false;
switch (fromZone) {
case GRAVEYARD:
        removed=game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    removed=game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
removed=game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
case EXILED:
game.getExile().removeCard(this,game);
if (isFaceDown()) {
this.setFaceDown(false);
}
removed=true;
break;
case COMMAND:
removed=true;
break;
case PICK:
removed=true;
break;
default :
logger.warn(""String_Node_Str"" + fromZone);
}
game.rememberLKI(objectId,event.getFromZone(),this);
if (!removed) {
logger.warn(""String_Node_Str"" + getName() + ""String_Node_Str""+ fromZone);
}
}
updateZoneChangeCounter();
PermanentCard permanent=new PermanentCard(this,controllerId);
game.resetForSourceId(permanent.getId());
game.addPermanent(permanent);
game.setZone(objectId,Zone.BATTLEFIELD);
game.setScopeRelevant(true);
game.applyEffects();
permanent.setTapped(tapped);
permanent.entersBattlefield(sourceId,game,event.getFromZone(),true);
game.setScopeRelevant(false);
game.applyEffects();
game.fireEvent(new ZoneChangeEvent(permanent,controllerId,fromZone,Zone.BATTLEFIELD));
return true;
}
return false;
}","@Override public boolean putOntoBattlefield(Game game,Zone fromZone,UUID sourceId,UUID controllerId,boolean tapped,ArrayList<UUID> appliedEffects){
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,controllerId,fromZone,Zone.BATTLEFIELD,appliedEffects,tapped);
  if (!game.replaceEvent(event)) {
    if (fromZone != null) {
      boolean removed=false;
switch (fromZone) {
case GRAVEYARD:
        removed=game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    removed=game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
removed=game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
case EXILED:
game.getExile().removeCard(this,game);
if (isFaceDown()) {
this.setFaceDown(false);
}
removed=true;
break;
case COMMAND:
removed=true;
break;
case PICK:
removed=true;
break;
default :
logger.warn(""String_Node_Str"" + fromZone);
}
game.rememberLKI(objectId,event.getFromZone(),this);
if (!removed) {
logger.warn(""String_Node_Str"" + getName() + ""String_Node_Str""+ fromZone);
}
}
updateZoneChangeCounter();
PermanentCard permanent=new PermanentCard(this,controllerId);
game.resetForSourceId(permanent.getId());
game.addPermanent(permanent);
game.setZone(objectId,Zone.BATTLEFIELD);
game.setScopeRelevant(true);
permanent.setTapped(tapped);
permanent.entersBattlefield(sourceId,game,event.getFromZone(),true);
game.setScopeRelevant(false);
game.applyEffects();
game.fireEvent(new ZoneChangeEvent(permanent,controllerId,fromZone,Zone.BATTLEFIELD));
return true;
}
return false;
}",0.993241068554876
159242,"public void addEffect(ContinuousEffect effect,Ability source){
switch (effect.getEffectType()) {
case REPLACEMENT:
case REDIRECTION:
    ReplacementEffect newReplacementEffect=(ReplacementEffect)effect;
  replacementEffects.addEffect(newReplacementEffect,source);
break;
case PREVENTION:
PreventionEffect newPreventionEffect=(PreventionEffect)effect;
preventionEffects.addEffect(newPreventionEffect,source);
break;
case RESTRICTION:
RestrictionEffect newRestrictionEffect=(RestrictionEffect)effect;
restrictionEffects.addEffect(newRestrictionEffect,source);
break;
case RESTRICTION_UNTAP_NOT_MORE_THAN:
RestrictionUntapNotMoreThanEffect newRestrictionUntapNotMoreThanEffect=(RestrictionUntapNotMoreThanEffect)effect;
restrictionUntapNotMoreThanEffects.addEffect(newRestrictionUntapNotMoreThanEffect,source);
break;
case REQUIREMENT:
RequirementEffect newRequirementEffect=(RequirementEffect)effect;
requirementEffects.addEffect(newRequirementEffect,source);
break;
case ASTHOUGH:
AsThoughEffect newAsThoughEffect=(AsThoughEffect)effect;
if (!asThoughEffectsMap.containsKey(newAsThoughEffect.getAsThoughEffectType())) {
ContinuousEffectsList<AsThoughEffect> list=new ContinuousEffectsList<>();
asThoughEffectsMap.put(newAsThoughEffect.getAsThoughEffectType(),list);
}
asThoughEffectsMap.get(newAsThoughEffect.getAsThoughEffectType()).addEffect(newAsThoughEffect,source);
break;
case COSTMODIFICATION:
CostModificationEffect newCostModificationEffect=(CostModificationEffect)effect;
costModificationEffects.addEffect(newCostModificationEffect,source);
break;
case SPLICE:
SpliceCardEffect newSpliceCardEffect=(SpliceCardEffect)effect;
spliceCardEffects.addEffect(newSpliceCardEffect,source);
break;
case CONTINUOUS_RULE_MODIFICATION:
ContinuousRuleModifiyingEffect newContinuousRuleModifiyingEffect=(ContinuousRuleModifiyingEffect)effect;
continuousRuleModifyingEffects.addEffect(newContinuousRuleModifiyingEffect,source);
break;
default :
layeredEffects.addEffect(effect,source);
break;
}
}","public void addEffect(ContinuousEffect effect,Ability source){
switch (effect.getEffectType()) {
case REPLACEMENT:
case REDIRECTION:
    ReplacementEffect newReplacementEffect=(ReplacementEffect)effect;
  replacementEffects.addEffect(newReplacementEffect,source);
break;
case PREVENTION:
PreventionEffect newPreventionEffect=(PreventionEffect)effect;
preventionEffects.addEffect(newPreventionEffect,source);
break;
case RESTRICTION:
RestrictionEffect newRestrictionEffect=(RestrictionEffect)effect;
restrictionEffects.addEffect(newRestrictionEffect,source);
break;
case RESTRICTION_UNTAP_NOT_MORE_THAN:
RestrictionUntapNotMoreThanEffect newRestrictionUntapNotMoreThanEffect=(RestrictionUntapNotMoreThanEffect)effect;
restrictionUntapNotMoreThanEffects.addEffect(newRestrictionUntapNotMoreThanEffect,source);
break;
case REQUIREMENT:
RequirementEffect newRequirementEffect=(RequirementEffect)effect;
requirementEffects.addEffect(newRequirementEffect,source);
break;
case ASTHOUGH:
AsThoughEffect newAsThoughEffect=(AsThoughEffect)effect;
if (!asThoughEffectsMap.containsKey(newAsThoughEffect.getAsThoughEffectType())) {
ContinuousEffectsList<AsThoughEffect> list=new ContinuousEffectsList<>();
allEffectsLists.add(list);
asThoughEffectsMap.put(newAsThoughEffect.getAsThoughEffectType(),list);
}
asThoughEffectsMap.get(newAsThoughEffect.getAsThoughEffectType()).addEffect(newAsThoughEffect,source);
break;
case COSTMODIFICATION:
CostModificationEffect newCostModificationEffect=(CostModificationEffect)effect;
costModificationEffects.addEffect(newCostModificationEffect,source);
break;
case SPLICE:
SpliceCardEffect newSpliceCardEffect=(SpliceCardEffect)effect;
spliceCardEffects.addEffect(newSpliceCardEffect,source);
break;
case CONTINUOUS_RULE_MODIFICATION:
ContinuousRuleModifiyingEffect newContinuousRuleModifiyingEffect=(ContinuousRuleModifiyingEffect)effect;
continuousRuleModifyingEffects.addEffect(newContinuousRuleModifiyingEffect,source);
break;
default :
layeredEffects.addEffect(effect,source);
break;
}
}",0.9932584269662922
159243,"private void collectAllEffects(){
  allEffectsLists.add(layeredEffects);
  allEffectsLists.add(continuousRuleModifyingEffects);
  allEffectsLists.add(replacementEffects);
  allEffectsLists.add(preventionEffects);
  allEffectsLists.add(requirementEffects);
  allEffectsLists.add(restrictionEffects);
  allEffectsLists.add(restrictionUntapNotMoreThanEffects);
  for (  ContinuousEffectsList asThoughtlist : asThoughEffectsMap.values()) {
    allEffectsLists.add(asThoughtlist);
  }
  allEffectsLists.add(costModificationEffects);
  allEffectsLists.add(spliceCardEffects);
}","private void collectAllEffects(){
  allEffectsLists.add(layeredEffects);
  allEffectsLists.add(continuousRuleModifyingEffects);
  allEffectsLists.add(replacementEffects);
  allEffectsLists.add(preventionEffects);
  allEffectsLists.add(requirementEffects);
  allEffectsLists.add(restrictionEffects);
  allEffectsLists.add(restrictionUntapNotMoreThanEffects);
  allEffectsLists.add(costModificationEffects);
  allEffectsLists.add(spliceCardEffects);
}",0.7098039215686275
159244,"@Override public boolean canChoose(UUID sourceControllerId,Game game){
  int count=0;
  for (  StackObject stackObject : game.getStack()) {
    if (canBeChosen(stackObject,sourceControllerId,game)) {
      count++;
      if (count >= this.minNumberOfTargets) {
        return true;
      }
    }
  }
  return false;
}","@Override public boolean canChoose(UUID sourceControllerId,Game game){
  return canChoose(null,sourceControllerId,game);
}",0.5193621867881549
159245,"@Override public boolean apply(Game game,Ability source){
  ExileZone exile=game.getExile().getExileZone(source.getSourceId());
  Card sourceCard=game.getCard(source.getSourceId());
  if (exile != null && sourceCard != null) {
    LinkedList<UUID> cards=new LinkedList<>(exile);
    for (    UUID cardId : cards) {
      Card card=game.getCard(cardId);
      card.moveToZone(Zone.BATTLEFIELD,source.getSourceId(),game,false);
      game.informPlayers(new StringBuilder(sourceCard.getName()).append(""String_Node_Str"").append(card.getName()).append(""String_Node_Str"").toString());
    }
    exile.clear();
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  ExileZone exile=game.getExile().getExileZone(source.getSourceId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (exile != null && sourceObject != null) {
    LinkedList<UUID> cards=new LinkedList<>(exile);
    for (    UUID cardId : cards) {
      Card card=game.getCard(cardId);
      card.moveToZone(Zone.BATTLEFIELD,source.getSourceId(),game,false);
      game.informPlayers(new StringBuilder(sourceObject.getLogName()).append(""String_Node_Str"").append(card.getName()).append(""String_Node_Str"").toString());
    }
    exile.clear();
    return true;
  }
  return false;
}",0.9392774788624136
159246,"/** 
 * @param event
 * @param game
 * @return a list of all {@link ReplacementEffect} that apply to the current event
 */
private HashMap<ReplacementEffect,HashSet<Ability>> getApplicableReplacementEffects(GameEvent event,Game game){
  HashMap<ReplacementEffect,HashSet<Ability>> replaceEffects=new HashMap<>();
  if (planeswalkerRedirectionEffect.applies(event,null,game)) {
    replaceEffects.put(planeswalkerRedirectionEffect,null);
  }
  if (auraReplacementEffect.applies(event,null,game)) {
    replaceEffects.put(auraReplacementEffect,null);
  }
  for (  ReplacementEffect effect : replacementEffects) {
    if (event.getAppliedEffects() != null && event.getAppliedEffects().contains(effect.getId())) {
      continue;
    }
    HashSet<Ability> abilities=replacementEffects.getAbility(effect.getId());
    HashSet<Ability> applicableAbilities=new HashSet<>();
    for (    Ability ability : abilities) {
      if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false)) {
        if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
          if (!game.getScopeRelevant() || effect.hasSelfScope() || !event.getTargetId().equals(ability.getSourceId())) {
            if (effect.applies(event,ability,game)) {
              applicableAbilities.add(ability);
            }
          }
        }
      }
    }
    if (!applicableAbilities.isEmpty()) {
      replaceEffects.put(effect,applicableAbilities);
    }
  }
  for (  PreventionEffect effect : preventionEffects) {
    HashSet<Ability> abilities=preventionEffects.getAbility(effect.getId());
    HashSet<Ability> applicableAbilities=new HashSet<>();
    for (    Ability ability : abilities) {
      if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false)) {
        if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
          if (effect.applies(event,ability,game)) {
            applicableAbilities.add(ability);
          }
        }
      }
    }
    if (!applicableAbilities.isEmpty()) {
      replaceEffects.put((ReplacementEffect)effect,applicableAbilities);
    }
  }
  return replaceEffects;
}","/** 
 * @param event
 * @param game
 * @return a list of all {@link ReplacementEffect} that apply to the current event
 */
private HashMap<ReplacementEffect,HashSet<Ability>> getApplicableReplacementEffects(GameEvent event,Game game){
  HashMap<ReplacementEffect,HashSet<Ability>> replaceEffects=new HashMap<>();
  if (planeswalkerRedirectionEffect.applies(event,null,game)) {
    replaceEffects.put(planeswalkerRedirectionEffect,null);
  }
  if (auraReplacementEffect.applies(event,null,game)) {
    replaceEffects.put(auraReplacementEffect,null);
  }
  for (  ReplacementEffect effect : replacementEffects) {
    if (event.getAppliedEffects() != null && event.getAppliedEffects().contains(effect.getId())) {
      continue;
    }
    HashSet<Ability> abilities=replacementEffects.getAbility(effect.getId());
    HashSet<Ability> applicableAbilities=new HashSet<>();
    for (    Ability ability : abilities) {
      if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false)) {
        if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
          if (!game.getScopeRelevant() || effect.hasSelfScope() || !event.getTargetId().equals(ability.getSourceId())) {
            if (effect.applies(event,ability,game)) {
              applicableAbilities.add(ability);
            }
          }
        }
      }
    }
    if (!applicableAbilities.isEmpty()) {
      replaceEffects.put(effect,applicableAbilities);
    }
  }
  for (  PreventionEffect effect : preventionEffects) {
    if (event.getAppliedEffects() != null && event.getAppliedEffects().contains(effect.getId())) {
      continue;
    }
    HashSet<Ability> abilities=preventionEffects.getAbility(effect.getId());
    HashSet<Ability> applicableAbilities=new HashSet<>();
    for (    Ability ability : abilities) {
      if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false)) {
        if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
          if (effect.applies(event,ability,game)) {
            applicableAbilities.add(ability);
          }
        }
      }
    }
    if (!applicableAbilities.isEmpty()) {
      replaceEffects.put((ReplacementEffect)effect,applicableAbilities);
    }
  }
  return replaceEffects;
}",0.9725934314835788
159247,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    for (    Permanent creature : game.getBattlefield().getActivePermanents(new FilterCreaturePermanent(),source.getSourceId(),game)) {
      creature.moveToZone(Zone.LIBRARY,source.getSourceId(),game,false);
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    for (    Permanent creature : game.getBattlefield().getActivePermanents(new FilterCreaturePermanent(),controller.getId(),source.getSourceId(),game)) {
      controller.moveCardToLibraryWithInfo(creature,source.getSourceId(),game,Zone.BATTLEFIELD,false,true);
    }
    return true;
  }
  return false;
}",0.8200934579439252
159248,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player == null) {
    return false;
  }
  FilterPermanentCard filter=new FilterPermanentCard(""String_Node_Str"");
  filter.add(new ConvertedManaCostPredicate(Filter.ComparisonType.LessThan,source.getManaCostsToPay().getX() + 1));
  TargetCardInLibrary target=new TargetCardInLibrary(filter);
  if (player.searchLibrary(target,game)) {
    if (target.getTargets().size() > 0) {
      Card card=player.getLibrary().getCard(target.getFirstTarget(),game);
      if (card != null) {
        card.putOntoBattlefield(game,Zone.LIBRARY,source.getId(),source.getControllerId());
      }
    }
    player.shuffleLibrary(game);
    return true;
  }
  player.shuffleLibrary(game);
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  FilterPermanentCard filter=new FilterPermanentCard(""String_Node_Str"");
  filter.add(new ConvertedManaCostPredicate(Filter.ComparisonType.LessThan,source.getManaCostsToPay().getX() + 1));
  TargetCardInLibrary target=new TargetCardInLibrary(filter);
  if (controller.searchLibrary(target,game)) {
    if (target.getTargets().size() > 0) {
      Card card=controller.getLibrary().getCard(target.getFirstTarget(),game);
      if (card != null) {
        controller.putOntoBattlefieldWithInfo(card,game,Zone.LIBRARY,source.getSourceId());
      }
    }
  }
  controller.shuffleLibrary(game);
  return false;
}",0.8712121212121212
159249,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getTargets().getFirstTarget());
  if (permanent != null) {
    if (permanent.sacrifice(this.getId(),game)) {
      Player player=game.getPlayer(permanent.getControllerId());
      if (player != null) {
        Library library=player.getLibrary();
        if (library.size() > 0) {
          Cards cards=new CardsImpl();
          Card card=null;
          boolean cardFound=false;
          if (library.size() > 0) {
            do {
              card=library.removeFromTop(game);
              cards.add(card);
              for (              CardType cardType : permanent.getCardType()) {
                if (card.getCardType().contains(cardType)) {
                  if (!card.getCardType().contains(CardType.INSTANT) && !card.getCardType().contains(CardType.SORCERY)) {
                    cardFound=true;
                    break;
                  }
                }
              }
            }
 while (!cardFound && library.size() > 0);
            card.putOntoBattlefield(game,Zone.PICK,source.getId(),player.getId());
          }
          if (cards.size() > 0) {
            player.revealCards(""String_Node_Str"",cards,game);
            Set<Card> cardsToShuffle=cards.getCards(game);
            if (card != null) {
              cardsToShuffle.remove(card);
            }
            library.addAll(cardsToShuffle,game);
          }
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getTargets().getFirstTarget());
  if (permanent != null) {
    if (permanent.sacrifice(source.getSourceId(),game)) {
      Player permanentController=game.getPlayer(permanent.getControllerId());
      if (permanentController != null) {
        Library library=permanentController.getLibrary();
        if (library.size() > 0) {
          Cards cards=new CardsImpl();
          Card card=null;
          boolean cardFound=false;
          if (library.size() > 0) {
            do {
              card=library.removeFromTop(game);
              cards.add(card);
              if (filter.match(card,game)) {
                for (                CardType cardType : permanent.getCardType()) {
                  if (card.getCardType().contains(cardType)) {
                    cardFound=true;
                    break;
                  }
                }
              }
            }
 while (!cardFound && library.size() > 0);
            permanentController.putOntoBattlefieldWithInfo(card,game,Zone.LIBRARY,source.getSourceId());
          }
          if (cards.size() > 0) {
            permanentController.revealCards(""String_Node_Str"",cards,game);
            if (cardFound && card != null) {
              cards.remove(card);
            }
            library.addAll(cards.getCards(game),game);
            permanentController.shuffleLibrary(game);
          }
        }
        return true;
      }
      return false;
    }
  }
  return true;
}",0.5785876993166287
159250,"public void removeUser(UUID userId,DisconnectReason reason){
  Logger.getLogger(ChatManager.class).debug(""String_Node_Str"");
  for (  ChatSession chat : chatSessions.values()) {
    chat.kill(userId,reason);
  }
  Logger.getLogger(ChatManager.class).debug(""String_Node_Str"");
}","public void removeUser(UUID userId,DisconnectReason reason){
  Logger.getLogger(ChatManager.class).debug(""String_Node_Str"" + chatSessions.size());
  for (  ChatSession chat : chatSessions.values()) {
    chat.kill(userId,reason);
  }
  Logger.getLogger(ChatManager.class).debug(""String_Node_Str"");
}",0.9618055555555556
159251,"public void broadcast(String userName,String message,MessageColor color,boolean withTime,MessageType messageType,SoundToPlay soundToPlay){
  if (!message.isEmpty()) {
    final String msg=message;
    final String time=(withTime ? timeFormatter.format(new Date()) : ""String_Node_Str"");
    final String username=userName;
    logger.trace(""String_Node_Str"" + msg + ""String_Node_Str""+ chatId);
    for (    UUID userId : clients.keySet()) {
      User user=UserManager.getInstance().getUser(userId);
      if (user != null) {
        user.fireCallback(new ClientCallback(""String_Node_Str"",chatId,new ChatMessage(username,msg,time,color,messageType,soundToPlay)));
      }
 else {
        kill(userId,DisconnectReason.CleaningUp);
      }
    }
  }
}","public void broadcast(String userName,String message,MessageColor color,boolean withTime,MessageType messageType,SoundToPlay soundToPlay){
  if (!message.isEmpty()) {
    final String msg=message;
    final String time=(withTime ? timeFormatter.format(new Date()) : ""String_Node_Str"");
    final String username=userName;
    logger.trace(""String_Node_Str"" + msg + ""String_Node_Str""+ chatId);
    for (    UUID userId : clients.keySet()) {
      User user=UserManager.getInstance().getUser(userId);
      if (user != null) {
        user.fireCallback(new ClientCallback(""String_Node_Str"",chatId,new ChatMessage(username,msg,time,color,messageType,soundToPlay)));
      }
 else {
        logger.debug(""String_Node_Str"" + userId + ""String_Node_Str""+ chatId);
        kill(userId,DisconnectReason.CleaningUp);
      }
    }
  }
}",0.9504447268106736
159252,"public synchronized void join(UUID userId){
  UUID playerId=userPlayerMap.get(userId);
  if (playerId == null) {
    logger.error(""String_Node_Str"" + userId + ""String_Node_Str""+ tournament.getId());
    return;
  }
  TournamentSession tournamentSession=new TournamentSession(tournament,userId,tableId,playerId);
  if (tournamentSessions == null) {
    logger.error(""String_Node_Str"" + userId + ""String_Node_Str""+ tournament.getId());
    return;
  }
  tournamentSessions.put(playerId,tournamentSession);
  UserManager.getInstance().getUser(userId).addTournament(playerId,tournamentSession);
  TournamentPlayer player=tournament.getPlayer(playerId);
  player.setJoined();
  logger.debug(""String_Node_Str"" + playerId + ""String_Node_Str""+ tournament.getId());
  ChatManager.getInstance().broadcast(chatId,""String_Node_Str"",player.getPlayer().getName() + ""String_Node_Str"",MessageColor.BLACK,true,MessageType.STATUS);
  checkStart();
}","public synchronized void join(UUID userId){
  UUID playerId=userPlayerMap.get(userId);
  if (playerId == null) {
    if (logger.isDebugEnabled()) {
      User user=UserManager.getInstance().getUser(userId);
      if (user != null) {
        logger.debug(user.getName() + ""String_Node_Str"" + tournament.getId());
      }
    }
    return;
  }
  if (tournamentSessions.containsKey(playerId)) {
    logger.debug(""String_Node_Str"" + userId + ""String_Node_Str""+ tournament.getId());
    return;
  }
  TournamentSession tournamentSession=new TournamentSession(tournament,userId,tableId,playerId);
  tournamentSessions.put(playerId,tournamentSession);
  UserManager.getInstance().getUser(userId).addTournament(playerId,tournamentSession);
  TournamentPlayer player=tournament.getPlayer(playerId);
  player.setJoined();
  logger.debug(""String_Node_Str"" + player.getPlayer().getName() + ""String_Node_Str""+ tournament.getId());
  ChatManager.getInstance().broadcast(chatId,""String_Node_Str"",player.getPlayer().getName() + ""String_Node_Str"",MessageColor.BLACK,true,MessageType.STATUS);
  checkStart();
}",0.5130993573900148
159253,"public void update(Map<UUID,PermanentView> battlefield){
  boolean changed=false;
  List<PermanentView> permanentsToAdd=new ArrayList<>();
  for (  PermanentView permanent : battlefield.values()) {
    MagePermanent oldMagePermanent=permanents.get(permanent.getId());
    if (oldMagePermanent == null) {
      permanentsToAdd.add(permanent);
      changed=true;
    }
 else {
      if (!changed) {
        changed=CardUtil.isCreature(oldMagePermanent.getOriginalPermanent()) != CardUtil.isCreature(permanent);
        if (!changed) {
          int s1=permanent.getAttachments() == null ? 0 : permanent.getAttachments().size();
          int s2=oldMagePermanent.getLinks().size();
          if (s1 != s2) {
            changed=true;
          }
 else           if (s1 > 0) {
            Set<UUID> attachmentIds=new HashSet<UUID>();
            attachmentIds.addAll(permanent.getAttachments());
            for (            MagePermanent magePermanent : oldMagePermanent.getLinks()) {
              if (!attachmentIds.contains(magePermanent.getOriginalPermanent().getId())) {
                changed=true;
                break;
              }
            }
          }
        }
      }
      oldMagePermanent.update(permanent);
    }
  }
  addedArtifact=addedCreature=addedPermanent=false;
  int count=permanentsToAdd.size();
  for (  PermanentView permanent : permanentsToAdd) {
    addPermanent(permanent,count);
  }
  if (addedArtifact) {
    AudioManager.playAddArtifact();
  }
 else   if (addedCreature) {
    AudioManager.playSummon();
  }
 else   if (addedPermanent) {
    AudioManager.playAddPermanent();
  }
  removedCreature=false;
  for (Iterator<Entry<UUID,MagePermanent>> iterator=permanents.entrySet().iterator(); iterator.hasNext(); ) {
    Entry<UUID,MagePermanent> entry=iterator.next();
    if (!battlefield.containsKey(entry.getKey())) {
      removePermanent(entry.getKey(),1);
      iterator.remove();
      changed=true;
    }
  }
  if (removedCreature) {
    AudioManager.playDiedCreature();
  }
  if (changed) {
    this.battlefield=battlefield;
    sortLayout();
  }
}","public void update(Map<UUID,PermanentView> battlefield){
  boolean changed=false;
  List<PermanentView> permanentsToAdd=new ArrayList<>();
  for (  PermanentView permanent : battlefield.values()) {
    MagePermanent oldMagePermanent=permanents.get(permanent.getId());
    if (oldMagePermanent == null) {
      permanentsToAdd.add(permanent);
      changed=true;
    }
 else {
      if (!changed) {
        changed=CardUtil.isCreature(oldMagePermanent.getOriginalPermanent()) != CardUtil.isCreature(permanent);
        if (!changed) {
          int s1=permanent.getAttachments() == null ? 0 : permanent.getAttachments().size();
          int s2=oldMagePermanent.getLinks().size();
          if (s1 != s2) {
            changed=true;
          }
 else           if (s1 > 0) {
            Set<UUID> attachmentIds=new HashSet<UUID>();
            attachmentIds.addAll(permanent.getAttachments());
            for (            MagePermanent magePermanent : oldMagePermanent.getLinks()) {
              if (!attachmentIds.contains(magePermanent.getOriginalPermanent().getId())) {
                changed=true;
                break;
              }
            }
          }
        }
        if (!changed) {
          UUID u1=oldMagePermanent.getOriginalPermanent().getAttachedTo();
          UUID u2=permanent.getAttachedTo();
          if (u1 == null && u2 != null || u2 == null && u1 != null || (u1 != null && !u1.equals(u2))) {
            changed=true;
          }
        }
      }
      oldMagePermanent.update(permanent);
    }
  }
  addedArtifact=addedCreature=addedPermanent=false;
  int count=permanentsToAdd.size();
  for (  PermanentView permanent : permanentsToAdd) {
    addPermanent(permanent,count);
  }
  if (addedArtifact) {
    AudioManager.playAddArtifact();
  }
 else   if (addedCreature) {
    AudioManager.playSummon();
  }
 else   if (addedPermanent) {
    AudioManager.playAddPermanent();
  }
  removedCreature=false;
  for (Iterator<Entry<UUID,MagePermanent>> iterator=permanents.entrySet().iterator(); iterator.hasNext(); ) {
    Entry<UUID,MagePermanent> entry=iterator.next();
    if (!battlefield.containsKey(entry.getKey())) {
      removePermanent(entry.getKey(),1);
      iterator.remove();
      changed=true;
    }
  }
  if (removedCreature) {
    AudioManager.playDiedCreature();
  }
  if (changed) {
    this.battlefield=battlefield;
    sortLayout();
  }
}",0.9339875111507584
159254,"public boolean isType(MagePermanent card){
switch (this) {
case land:
    return CardUtil.isLand(card);
case creature:
  return CardUtil.isCreature(card);
case other:
return !CardUtil.isLand(card) && !CardUtil.isCreature(card);
case attached:
return card.getOriginalPermanent().isAttachedTo();
default :
throw new RuntimeException(""String_Node_Str"" + this);
}
}","public boolean isType(MagePermanent card){
switch (this) {
case land:
    return CardUtil.isLand(card);
case creature:
  return CardUtil.isCreature(card);
case other:
return !CardUtil.isLand(card) && !CardUtil.isCreature(card);
case attached:
return card.getOriginalPermanent().isAttachedTo() && !card.getOriginalPermanent().getSubTypes().contains(""String_Node_Str"");
default :
throw new RuntimeException(""String_Node_Str"" + this);
}
}",0.907035175879397
159255,"@Override public int sortPermanents(Map<String,JComponent> ui,Collection<MagePermanent> permanents,Map<String,String> options){
  if (ui == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  JComponent component=ui.get(""String_Node_Str"");
  if (component == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  JLayeredPane battlefieldPanel=(JLayeredPane)component;
  JComponent jPanel=ui.get(""String_Node_Str"");
  Row allLands=new Row();
  outerLoop:   for (  MagePermanent permanent : permanents) {
    if (!CardUtil.isLand(permanent) || CardUtil.isCreature(permanent)) {
      continue;
    }
    int insertIndex=-1;
    for (int i=0, n=allLands.size(); i < n; i++) {
      Stack stack=allLands.get(i);
      MagePermanent firstPanel=stack.get(0);
      if (firstPanel.getOriginal().getName().equals(permanent.getOriginal().getName())) {
        if (!empty(firstPanel.getLinks())) {
          insertIndex=i;
          break;
        }
        if (!empty(permanent.getLinks()) || stack.size() == landStackMax) {
          insertIndex=i + 1;
          continue;
        }
        stack.add(0,permanent);
        continue outerLoop;
      }
      if (insertIndex != -1) {
        break;
      }
    }
    Stack stack=new Stack();
    if (permanent.getOriginalPermanent().getAttachments() != null) {
      stack.setMaxAttachedCount(permanent.getOriginalPermanent().getAttachments().size());
    }
    stack.add(permanent);
    allLands.add(insertIndex == -1 ? allLands.size() : insertIndex,stack);
  }
  Row allCreatures=new Row(permanents,RowType.creature);
  Row allOthers=new Row(permanents,RowType.other);
  Row allAttached=new Row(permanents,RowType.attached);
  boolean othersOnTheRight=true;
  if (options != null && options.containsKey(""String_Node_Str"")) {
    if (options.get(""String_Node_Str"").equals(""String_Node_Str"")) {
      othersOnTheRight=false;
      allCreatures.addAll(allOthers);
      allOthers.clear();
    }
  }
  cardWidth=cardWidthMax;
  Rectangle rect=battlefieldPanel.getVisibleRect();
  playAreaWidth=rect.width;
  playAreaHeight=rect.height;
  while (true) {
    rows.clear();
    cardHeight=Math.round(cardWidth * CardPanel.ASPECT_RATIO);
    extraCardSpacingX=Math.round(cardWidth * EXTRA_CARD_SPACING_X);
    cardSpacingX=cardHeight - cardWidth + extraCardSpacingX;
    cardSpacingY=Math.round(cardHeight * CARD_SPACING_Y);
    stackSpacingX=stackVertical ? 0 : Math.round(cardWidth * STACK_SPACING_X);
    stackSpacingY=Math.round(cardHeight * STACK_SPACING_Y);
    attachmentSpacingY=Math.round(cardHeight * ATTACHMENT_SPACING_Y);
    Row creatures=(Row)allCreatures.clone();
    Row lands=(Row)allLands.clone();
    Row others=(Row)allOthers.clone();
    wrap(creatures,rows,-1);
    int afterCreaturesIndex=rows.size();
    wrap(lands,rows,afterCreaturesIndex);
    List<Row> storedRows=new ArrayList<>(rows.size());
    for (    Row row : rows) {
      storedRows.add((Row)row.clone());
    }
    Row storedOthers=(Row)others.clone();
    for (    Row row : rows) {
      fillRow(others,rows,row);
    }
    if (creatures.isEmpty() && lands.isEmpty() && others.isEmpty()) {
      break;
    }
    rows=storedRows;
    others=storedOthers;
    wrap(others,rows,afterCreaturesIndex);
    for (    Row row : rows) {
      fillRow(others,rows,row);
    }
    if (creatures.isEmpty() && lands.isEmpty() && others.isEmpty()) {
      break;
    }
    cardWidth-=3;
  }
  int x, y=GUTTER_Y;
  int maxRowWidth=0;
  for (  Row row : rows) {
    int rowBottom=0;
    x=GUTTER_X;
    for (int stackIndex=0, stackCount=row.size(); stackIndex < stackCount; stackIndex++) {
      Stack stack=row.get(stackIndex);
      rowBottom=Math.max(rowBottom,y + stack.getHeight());
      x+=stack.getWidth();
    }
    y=rowBottom;
    maxRowWidth=Math.max(maxRowWidth,x);
  }
  y=GUTTER_Y;
  for (  Row row : rows) {
    int rowBottom=0;
    x=GUTTER_X;
    for (int stackIndex=0, stackCount=row.size(); stackIndex < stackCount; stackIndex++) {
      Stack stack=row.get(stackIndex);
      if (othersOnTheRight && RowType.other.isType(stack.get(0))) {
        x=playAreaWidth - GUTTER_X + extraCardSpacingX;
        for (int i=stackIndex, n=row.size(); i < n; i++) {
          x-=row.get(i).getWidth();
        }
      }
      for (int panelIndex=0, panelCount=stack.size(); panelIndex < panelCount; panelIndex++) {
        MagePermanent panel=stack.get(panelIndex);
        int stackPosition=panelCount - panelIndex - 1;
        if (jPanel != null) {
          jPanel.setComponentZOrder(panel,panelIndex);
        }
        int panelX=x + (stackPosition * stackSpacingX);
        int panelY=y + (stackPosition * stackSpacingY);
        try {
          battlefieldPanel.moveToFront(panel);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        panel.setCardBounds(panelX,panelY,cardWidth,cardHeight);
      }
      rowBottom=Math.max(rowBottom,y + stack.getHeight());
      x+=stack.getWidth();
    }
    y=rowBottom;
  }
  for (  Stack stack : allAttached) {
    for (    MagePermanent panel : stack) {
      panel.setCardBounds(0,0,cardWidth,cardHeight);
    }
  }
  return y;
}","@Override public int sortPermanents(Map<String,JComponent> ui,Collection<MagePermanent> permanents,Map<String,String> options){
  if (ui == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  JComponent component=ui.get(""String_Node_Str"");
  if (component == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  JLayeredPane battlefieldPanel=(JLayeredPane)component;
  JComponent jPanel=ui.get(""String_Node_Str"");
  Row allLands=new Row();
  outerLoop:   for (  MagePermanent permanent : permanents) {
    if (!CardUtil.isLand(permanent) || CardUtil.isCreature(permanent)) {
      continue;
    }
    int insertIndex=-1;
    for (int i=0, n=allLands.size(); i < n; i++) {
      Stack stack=allLands.get(i);
      MagePermanent firstPanel=stack.get(0);
      if (firstPanel.getOriginal().getName().equals(permanent.getOriginal().getName())) {
        if (!empty(firstPanel.getLinks())) {
          insertIndex=i;
          break;
        }
        if (!empty(permanent.getLinks()) || stack.size() == landStackMax) {
          insertIndex=i + 1;
          continue;
        }
        stack.add(0,permanent);
        continue outerLoop;
      }
      if (insertIndex != -1) {
        break;
      }
    }
    Stack stack=new Stack();
    if (permanent.getOriginalPermanent().getAttachments() != null) {
      stack.setMaxAttachedCount(permanent.getOriginalPermanent().getAttachments().size());
    }
    stack.add(permanent);
    allLands.add(insertIndex == -1 ? allLands.size() : insertIndex,stack);
  }
  Row allCreatures=new Row(permanents,RowType.creature);
  Row allOthers=new Row(permanents,RowType.other);
  Row allAttached=new Row(permanents,RowType.attached);
  boolean othersOnTheRight=true;
  if (options != null && options.containsKey(""String_Node_Str"")) {
    if (options.get(""String_Node_Str"").equals(""String_Node_Str"")) {
      othersOnTheRight=false;
      allCreatures.addAll(allOthers);
      allOthers.clear();
    }
  }
  cardWidth=cardWidthMax;
  Rectangle rect=battlefieldPanel.getVisibleRect();
  playAreaWidth=rect.width;
  playAreaHeight=rect.height;
  while (true) {
    rows.clear();
    cardHeight=Math.round(cardWidth * CardPanel.ASPECT_RATIO);
    extraCardSpacingX=Math.round(cardWidth * EXTRA_CARD_SPACING_X);
    cardSpacingX=cardHeight - cardWidth + extraCardSpacingX;
    cardSpacingY=Math.round(cardHeight * CARD_SPACING_Y);
    stackSpacingX=stackVertical ? 0 : Math.round(cardWidth * STACK_SPACING_X);
    stackSpacingY=Math.round(cardHeight * STACK_SPACING_Y);
    attachmentSpacingY=Math.round(cardHeight * ATTACHMENT_SPACING_Y);
    Row creatures=(Row)allCreatures.clone();
    Row lands=(Row)allLands.clone();
    Row others=(Row)allOthers.clone();
    wrap(creatures,rows,-1);
    int afterCreaturesIndex=rows.size();
    wrap(lands,rows,afterCreaturesIndex);
    int afterLandsIndex=rows.size();
    wrap(others,rows,afterLandsIndex);
    List<Row> storedRows=new ArrayList<>(rows.size());
    for (    Row row : rows) {
      storedRows.add((Row)row.clone());
    }
    Row storedOthers=(Row)others.clone();
    for (    Row row : rows) {
      fillRow(others,rows,row);
    }
    if (creatures.isEmpty() && lands.isEmpty() && others.isEmpty()) {
      break;
    }
    rows=storedRows;
    others=storedOthers;
    wrap(others,rows,afterCreaturesIndex);
    for (    Row row : rows) {
      fillRow(others,rows,row);
    }
    if (creatures.isEmpty() && lands.isEmpty() && others.isEmpty()) {
      break;
    }
    cardWidth-=3;
  }
  int x, y=GUTTER_Y;
  int maxRowWidth=0;
  for (  Row row : rows) {
    int rowBottom=0;
    x=GUTTER_X;
    for (int stackIndex=0, stackCount=row.size(); stackIndex < stackCount; stackIndex++) {
      Stack stack=row.get(stackIndex);
      rowBottom=Math.max(rowBottom,y + stack.getHeight());
      x+=stack.getWidth();
    }
    y=rowBottom;
    maxRowWidth=Math.max(maxRowWidth,x);
  }
  y=GUTTER_Y;
  for (  Row row : rows) {
    int rowBottom=0;
    x=GUTTER_X;
    for (int stackIndex=0, stackCount=row.size(); stackIndex < stackCount; stackIndex++) {
      Stack stack=row.get(stackIndex);
      if (othersOnTheRight && RowType.other.isType(stack.get(0))) {
        x=playAreaWidth - GUTTER_X + extraCardSpacingX;
        for (int i=stackIndex, n=row.size(); i < n; i++) {
          x-=row.get(i).getWidth();
        }
      }
      for (int panelIndex=0, panelCount=stack.size(); panelIndex < panelCount; panelIndex++) {
        MagePermanent panel=stack.get(panelIndex);
        int stackPosition=panelCount - panelIndex - 1;
        if (jPanel != null) {
          jPanel.setComponentZOrder(panel,panelIndex);
        }
        int panelX=x + (stackPosition * stackSpacingX);
        int panelY=y + (stackPosition * stackSpacingY);
        try {
          battlefieldPanel.moveToFront(panel);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        panel.setCardBounds(panelX,panelY,cardWidth,cardHeight);
      }
      rowBottom=Math.max(rowBottom,y + stack.getHeight());
      x+=stack.getWidth();
    }
    y=rowBottom;
  }
  for (  Stack stack : allAttached) {
    for (    MagePermanent panel : stack) {
      panel.setCardBounds(0,0,cardWidth,cardHeight);
    }
  }
  return y;
}",0.99268386599923
159256,"public CommanderView(Commander commander,Card sourceCard){
  super(sourceCard);
  rules.addAll(commander.getAbilities().getRules(sourceCard.getName()));
  this.mageObjectType=MageObjectType.COMMANDER;
}","public CommanderView(Commander commander,Card sourceCard){
  super(sourceCard);
  this.mageObjectType=MageObjectType.COMMANDER;
}",0.7794561933534743
159257,"@Test public void test(){
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,2);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,2);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,2);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,2);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,2);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,2);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,RedManaAbility.class);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,WhiteManaAbility.class);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,2);
}","@Test public void test(){
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,RedManaAbility.class);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,2);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,2);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,2);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,RedManaAbility.class);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,RedManaAbility.class);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,RedManaAbility.class);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,2);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,2);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,2);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,RedManaAbility.class);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,1);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,WhiteManaAbility.class);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,2);
  testManaToPayVsLand(""String_Node_Str"",""String_Node_Str"",2,2);
}",0.1900777047220561
159258,"/** 
 * In case the choice of mana to be produced is obvious, let's discard all other abilities. Example: Pay {W}{R} Land produces {W} or {G}. No need to ask what player wants to choose. {W} mana ability should be left only. But we CAN do auto choice only in case we have basic mana abilities. Example: we should pay {1} and we have Cavern of Souls that can produce {1} or any mana of creature type choice. We can't simply auto choose {1} as the second mana ability also makes spell uncounterable. In case we can't auto choose we'll simply return the useableAbilities map back to caller without any modification.
 * @param unpaid Mana we need to pay. Can be null (it is for X costs now).
 * @param useableAbilities List of mana abilities permanent may produce
 * @return List of mana abilities permanent may produce and are reasonable for unpaid mana
 */
public static LinkedHashMap<UUID,ManaAbility> tryToAutoPay(ManaCost unpaid,LinkedHashMap<UUID,ManaAbility> useableAbilities){
  if (unpaid != null) {
    Mana mana=unpaid.getMana();
    for (    ManaAbility ability : useableAbilities.values()) {
      if (!(ability instanceof BasicManaAbility)) {
        return useableAbilities;
      }
    }
    int countColorfull=0;
    int countColorless=0;
    ManaAbility chosenManaAbility=null;
    for (    ManaAbility ability : useableAbilities.values()) {
      if (ability instanceof RedManaAbility && mana.contains(Mana.RedMana)) {
        chosenManaAbility=ability;
        countColorfull++;
      }
      if (ability instanceof BlackManaAbility && mana.contains(Mana.BlackMana)) {
        chosenManaAbility=ability;
        countColorfull++;
      }
      if (ability instanceof BlueManaAbility && mana.contains(Mana.BlueMana)) {
        chosenManaAbility=ability;
        countColorfull++;
      }
      if (ability instanceof WhiteManaAbility && mana.contains(Mana.WhiteMana)) {
        chosenManaAbility=ability;
        countColorfull++;
      }
      if (ability instanceof GreenManaAbility && mana.contains(Mana.GreenMana)) {
        chosenManaAbility=ability;
        countColorfull++;
      }
    }
    if (countColorfull == 0) {
      if (mana.getColorless() > 0) {
        return replace(useableAbilities,useableAbilities.values().iterator().next());
      }
      return useableAbilities;
    }
    if (countColorfull > 1) {
      return useableAbilities;
    }
    return replace(useableAbilities,chosenManaAbility);
  }
  return useableAbilities;
}","/** 
 * In case the choice of mana to be produced is obvious, let's discard all other abilities. Example: Pay {W}{R} Land produces {W} or {G}. No need to ask what player wants to choose. {W} mana ability should be left only. But we CAN do auto choice only in case we have basic mana abilities. Example: we should pay {1} and we have Cavern of Souls that can produce {1} or any mana of creature type choice. We can't simply auto choose {1} as the second mana ability also makes spell uncounterable. In case we can't auto choose we'll simply return the useableAbilities map back to caller without any modification.
 * @param unpaid Mana we need to pay. Can be null (it is for X costs now).
 * @param useableAbilities List of mana abilities permanent may produce
 * @return List of mana abilities permanent may produce and are reasonable for unpaid mana
 */
public static LinkedHashMap<UUID,ManaAbility> tryToAutoPay(ManaCost unpaid,LinkedHashMap<UUID,ManaAbility> useableAbilities){
  for (  ManaAbility ability : useableAbilities.values()) {
    if (!(ability instanceof BasicManaAbility)) {
      return useableAbilities;
    }
  }
  if (unpaid != null) {
    ManaSymbols symbols=ManaSymbols.buildFromManaCost(unpaid);
    Mana unpaidMana=unpaid.getMana();
    if (!symbols.isEmpty()) {
      return getManaAbilitiesUsingManaSymbols(useableAbilities,symbols,unpaidMana);
    }
 else {
      return getManaAbilitiesUsingMana(unpaid,useableAbilities);
    }
  }
  return useableAbilities;
}",0.5671641791044776
159259,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Card sourceCard=game.getCard(source.getSourceId());
  if (controller != null && sourceCard != null) {
    Permanent targetEnchantment=game.getPermanent(getTargetPointer().getFirst(game,source));
    if (targetEnchantment != null) {
      controller.moveCardToExileWithInfo(targetEnchantment,null,null,source.getSourceId(),game,Zone.BATTLEFIELD);
      if (targetEnchantment.hasSubtype(""String_Node_Str"")) {
        Player enchantmentController=game.getPlayer(targetEnchantment.getControllerId());
        return super.applySearchAndExile(game,source,targetEnchantment.getName(),enchantmentController.getId());
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Card sourceCard=game.getCard(source.getSourceId());
  if (controller != null && sourceCard != null) {
    Permanent targetEnchantment=game.getPermanent(getTargetPointer().getFirst(game,source));
    if (targetEnchantment != null) {
      controller.moveCardToExileWithInfo(targetEnchantment,null,""String_Node_Str"",source.getSourceId(),game,Zone.BATTLEFIELD);
      Card cardInExile=game.getExile().getCard(targetEnchantment.getId(),game);
      if (cardInExile != null && cardInExile.hasSubtype(""String_Node_Str"")) {
        Player enchantmentController=game.getPlayer(targetEnchantment.getControllerId());
        return super.applySearchAndExile(game,source,cardInExile.getName(),enchantmentController.getId());
      }
    }
  }
  return false;
}",0.8901098901098901
159260,"@Override public Set<UUID> getPlayableInHand(Game game){
  Set<UUID> playable=new HashSet<>();
  if (!shouldSkipGettingPlayable(game)) {
    if (game.getPhase() != null && PhaseStep.CLEANUP.equals(game.getPhase().getStep().getType())) {
      for (      Card card : hand.getCards(game)) {
        playable.add(card.getId());
      }
    }
 else {
      ManaOptions available=getManaAvailable(game);
      available.addMana(manaPool.getMana());
      for (      Card card : hand.getCards(game)) {
        for (        ActivatedAbility ability : card.getAbilities().getPlayableAbilities(Zone.HAND)) {
          if (canPlay(ability,available,game)) {
            playable.add(card.getId());
            break;
          }
        }
        for (        ActivatedAbility ability : card.getAbilities().getActivatedAbilities(Zone.HAND)) {
          if (!playable.contains(ability) && canPlay(ability,available,game)) {
            playable.add(card.getId());
            break;
          }
        }
      }
    }
  }
  return playable;
}","@Override public Set<UUID> getPlayableInHand(Game game){
  Set<UUID> playable=new HashSet<>();
  if (!shouldSkipGettingPlayable(game)) {
    if (game.getPhase() != null && PhaseStep.CLEANUP.equals(game.getPhase().getStep().getType())) {
      for (      Card card : hand.getCards(game)) {
        playable.add(card.getId());
      }
    }
 else {
      ManaOptions available=getManaAvailable(game);
      available.addMana(manaPool.getMana());
      for (      Card card : hand.getCards(game)) {
        for (        ActivatedAbility ability : card.getAbilities().getPlayableAbilities(Zone.HAND)) {
          if (canPlay(ability,available,game)) {
            playable.add(card.getId());
            break;
          }
        }
        for (        ActivatedAbility ability : card.getAbilities().getActivatedAbilities(Zone.HAND)) {
          if (!playable.contains(ability.getSourceId()) && canPlay(ability,available,game)) {
            playable.add(card.getId());
            break;
          }
        }
      }
    }
  }
  return playable;
}",0.9932627526467758
159261,"@Override public boolean applies(GameEvent event,Ability source,boolean checkPlayableMode,Game game){
  if (event.getType() == GameEvent.EventType.PLAY_LAND || event.getType() == GameEvent.EventType.CAST_SPELL && game.getOpponents(source.getControllerId()).contains(event.getPlayerId())) {
    final Card card=game.getCard(event.getTargetId());
    final Player opponent=game.getPlayer(event.getPlayerId());
    if (card == null || opponent == null) {
      return false;
    }
    if (card.getCardType().contains(CardType.CREATURE) && game.getBattlefield().countAll(new FilterCreaturePermanent(),opponent.getId(),game) > game.getBattlefield().countAll(new FilterCreaturePermanent(),source.getControllerId(),game)) {
      return true;
    }
    if (card.getCardType().contains(CardType.ARTIFACT) && game.getBattlefield().countAll(new FilterArtifactPermanent(),opponent.getId(),game) > game.getBattlefield().countAll(new FilterArtifactPermanent(),source.getControllerId(),game)) {
      return true;
    }
    if (card.getCardType().contains(CardType.ENCHANTMENT) && game.getBattlefield().countAll(new FilterEnchantmentPermanent(),opponent.getId(),game) > game.getBattlefield().countAll(new FilterEnchantmentPermanent(),source.getControllerId(),game)) {
      return true;
    }
    final int yourLands=game.getBattlefield().countAll(new FilterLandPermanent(),source.getControllerId(),game);
    if (card.getCardType().contains(CardType.LAND) && game.getBattlefield().countAll(new FilterLandPermanent(),opponent.getId(),game) > yourLands) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,boolean checkPlayableMode,Game game){
  if (event.getType() == GameEvent.EventType.PLAY_LAND || event.getType() == GameEvent.EventType.CAST_SPELL && game.getOpponents(source.getControllerId()).contains(event.getPlayerId())) {
    final Card card=game.getCard(event.getSourceId());
    final Player opponent=game.getPlayer(event.getPlayerId());
    if (card == null || opponent == null) {
      return false;
    }
    if (card.getCardType().contains(CardType.CREATURE) && game.getBattlefield().countAll(new FilterCreaturePermanent(),opponent.getId(),game) > game.getBattlefield().countAll(new FilterCreaturePermanent(),source.getControllerId(),game)) {
      return true;
    }
    if (card.getCardType().contains(CardType.ARTIFACT) && game.getBattlefield().countAll(new FilterArtifactPermanent(),opponent.getId(),game) > game.getBattlefield().countAll(new FilterArtifactPermanent(),source.getControllerId(),game)) {
      return true;
    }
    if (card.getCardType().contains(CardType.ENCHANTMENT) && game.getBattlefield().countAll(new FilterEnchantmentPermanent(),opponent.getId(),game) > game.getBattlefield().countAll(new FilterEnchantmentPermanent(),source.getControllerId(),game)) {
      return true;
    }
    final int yourLands=game.getBattlefield().countAll(new FilterLandPermanent(),source.getControllerId(),game);
    if (card.getCardType().contains(CardType.LAND) && game.getBattlefield().countAll(new FilterLandPermanent(),opponent.getId(),game) > yourLands) {
      return true;
    }
  }
  return false;
}",0.996219281663516
159262,"@Override public void addTarget(UUID id,int amount,Ability source,Game game,boolean skipEvent){
  if (targets.containsKey(id)) {
    amount+=targets.get(id);
  }
  if (source != null) {
    if (!skipEvent && !game.replaceEvent(GameEvent.getEvent(EventType.TARGET,id,source.getId(),source.getControllerId()))) {
      targets.put(id,amount);
      rememberZoneChangeCounter(id,game);
      chosen=targets.size() >= minNumberOfTargets;
      if (!skipEvent) {
        game.fireEvent(GameEvent.getEvent(EventType.TARGETED,id,source.getId(),source.getControllerId()));
      }
    }
  }
 else {
    targets.put(id,amount);
    rememberZoneChangeCounter(id,game);
  }
}","@Override public void addTarget(UUID id,int amount,Ability source,Game game,boolean skipEvent){
  if (targets.containsKey(id)) {
    amount+=targets.get(id);
  }
  if (source != null && !skipEvent) {
    if (!game.replaceEvent(GameEvent.getEvent(EventType.TARGET,id,source.getId(),source.getControllerId()))) {
      targets.put(id,amount);
      rememberZoneChangeCounter(id,game);
      chosen=targets.size() >= minNumberOfTargets;
      if (!skipEvent) {
        game.fireEvent(GameEvent.getEvent(EventType.TARGETED,id,source.getId(),source.getControllerId()));
      }
    }
  }
 else {
    targets.put(id,amount);
    rememberZoneChangeCounter(id,game);
  }
}",0.966867469879518
159263,"@Override public void setRuleVisible(boolean ruleVisible){
  this.ruleVisible=ruleVisible;
}","@Override public void setRuleVisible(boolean ruleVisible){
  if (!(this instanceof MageSingleton)) {
    this.ruleVisible=ruleVisible;
  }
}",0.7931034482758621
159264,"public EntersBattlefieldTriggeredAbility(EntersBattlefieldTriggeredAbility ability){
  super(ability);
  this.rulePrefix=ability.rulePrefix;
  this.noRule=ability.noRule;
}","public EntersBattlefieldTriggeredAbility(final EntersBattlefieldTriggeredAbility ability){
  super(ability);
  this.rulePrefix=ability.rulePrefix;
  this.noRule=ability.noRule;
}",0.9828571428571428
159265,"private void setText(CardView card){
  if (displayTitleAnyway) {
    titleText.setText(card.getName());
    return;
  }
  if (hasImage) {
    titleText.setText(""String_Node_Str"");
  }
 else {
    titleText.setText(card.getName());
  }
}","private void setText(CardView card){
  titleText.setText(!displayTitleAnyway && hasImage ? ""String_Node_Str"" : card.getName());
}",0.4493150684931506
159266,"private int getHeight(){
  return cardHeight + (size() - 1) * stackSpacingY + cardSpacingY + ATTACHMENT_DY_OFFSET * maxAttachedCount;
}","private int getHeight(){
  return cardHeight + (size() - 1) * stackSpacingY + cardSpacingY + attachmentSpacingY * maxAttachedCount;
}",0.8656716417910447
159267,"@Override public int sortPermanents(Map<String,JComponent> ui,Collection<MagePermanent> permanents,Map<String,String> options){
  if (ui == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  JComponent component=ui.get(""String_Node_Str"");
  if (component == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  JLayeredPane battlefieldPanel=(JLayeredPane)component;
  JComponent jPanel=ui.get(""String_Node_Str"");
  Row allLands=new Row();
  outerLoop:   for (  MagePermanent permanent : permanents) {
    if (!CardUtil.isLand(permanent) || CardUtil.isCreature(permanent)) {
      continue;
    }
    int insertIndex=-1;
    for (int i=0, n=allLands.size(); i < n; i++) {
      Stack stack=allLands.get(i);
      MagePermanent firstPanel=stack.get(0);
      if (firstPanel.getOriginal().getName().equals(permanent.getOriginal().getName())) {
        if (!empty(firstPanel.getLinks())) {
          insertIndex=i;
          break;
        }
        if (!empty(permanent.getLinks()) || stack.size() == landStackMax) {
          insertIndex=i + 1;
          continue;
        }
        stack.add(0,permanent);
        continue outerLoop;
      }
      if (insertIndex != -1) {
        break;
      }
    }
    Stack stack=new Stack();
    if (permanent.getOriginalPermanent().getAttachments() != null) {
      stack.setMaxAttachedCount(permanent.getOriginalPermanent().getAttachments().size());
    }
    stack.add(permanent);
    allLands.add(insertIndex == -1 ? allLands.size() : insertIndex,stack);
  }
  Row allCreatures=new Row(permanents,RowType.creature);
  Row allOthers=new Row(permanents,RowType.other);
  Row allAttached=new Row(permanents,RowType.attached);
  boolean othersOnTheRight=true;
  if (options != null && options.containsKey(""String_Node_Str"")) {
    if (options.get(""String_Node_Str"").equals(""String_Node_Str"")) {
      othersOnTheRight=false;
      allCreatures.addAll(allOthers);
      allOthers.clear();
    }
  }
  cardWidth=cardWidthMax;
  Rectangle rect=battlefieldPanel.getVisibleRect();
  playAreaWidth=rect.width;
  playAreaHeight=rect.height;
  while (true) {
    rows.clear();
    cardHeight=Math.round(cardWidth * CardPanel.ASPECT_RATIO);
    extraCardSpacingX=Math.round(cardWidth * EXTRA_CARD_SPACING_X);
    cardSpacingX=cardHeight - cardWidth + extraCardSpacingX;
    cardSpacingY=Math.round(cardHeight * CARD_SPACING_Y);
    stackSpacingX=stackVertical ? 0 : Math.round(cardWidth * STACK_SPACING_X);
    stackSpacingY=Math.round(cardHeight * STACK_SPACING_Y);
    Row creatures=(Row)allCreatures.clone();
    Row lands=(Row)allLands.clone();
    Row others=(Row)allOthers.clone();
    wrap(creatures,rows,-1);
    int afterCreaturesIndex=rows.size();
    wrap(lands,rows,afterCreaturesIndex);
    List<Row> storedRows=new ArrayList<>(rows.size());
    for (    Row row : rows) {
      storedRows.add((Row)row.clone());
    }
    Row storedOthers=(Row)others.clone();
    for (    Row row : rows) {
      fillRow(others,rows,row);
    }
    if (creatures.isEmpty() && lands.isEmpty() && others.isEmpty()) {
      break;
    }
    rows=storedRows;
    others=storedOthers;
    wrap(others,rows,afterCreaturesIndex);
    for (    Row row : rows) {
      fillRow(others,rows,row);
    }
    if (creatures.isEmpty() && lands.isEmpty() && others.isEmpty()) {
      break;
    }
    cardWidth-=3;
  }
  int x, y=GUTTER_Y;
  int maxRowWidth=0;
  for (  Row row : rows) {
    int rowBottom=0;
    x=GUTTER_X;
    for (int stackIndex=0, stackCount=row.size(); stackIndex < stackCount; stackIndex++) {
      Stack stack=row.get(stackIndex);
      rowBottom=Math.max(rowBottom,y + stack.getHeight());
      x+=stack.getWidth();
    }
    y=rowBottom;
    maxRowWidth=Math.max(maxRowWidth,x);
  }
  y=GUTTER_Y;
  for (  Row row : rows) {
    int rowBottom=0;
    x=GUTTER_X;
    for (int stackIndex=0, stackCount=row.size(); stackIndex < stackCount; stackIndex++) {
      Stack stack=row.get(stackIndex);
      if (othersOnTheRight && RowType.other.isType(stack.get(0))) {
        x=playAreaWidth - GUTTER_X + extraCardSpacingX;
        for (int i=stackIndex, n=row.size(); i < n; i++) {
          x-=row.get(i).getWidth();
        }
      }
      for (int panelIndex=0, panelCount=stack.size(); panelIndex < panelCount; panelIndex++) {
        MagePermanent panel=stack.get(panelIndex);
        int stackPosition=panelCount - panelIndex - 1;
        if (jPanel != null) {
          jPanel.setComponentZOrder(panel,panelIndex);
        }
        int panelX=x + (stackPosition * stackSpacingX);
        int panelY=y + (stackPosition * stackSpacingY);
        try {
          battlefieldPanel.moveToFront(panel);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        panel.setCardBounds(panelX,panelY,cardWidth,cardHeight);
      }
      rowBottom=Math.max(rowBottom,y + stack.getHeight());
      x+=stack.getWidth();
    }
    y=rowBottom;
  }
  for (  Stack stack : allAttached) {
    for (    MagePermanent panel : stack) {
      panel.setCardBounds(0,0,cardWidth,cardHeight);
    }
  }
  return y;
}","@Override public int sortPermanents(Map<String,JComponent> ui,Collection<MagePermanent> permanents,Map<String,String> options){
  if (ui == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  JComponent component=ui.get(""String_Node_Str"");
  if (component == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  JLayeredPane battlefieldPanel=(JLayeredPane)component;
  JComponent jPanel=ui.get(""String_Node_Str"");
  Row allLands=new Row();
  outerLoop:   for (  MagePermanent permanent : permanents) {
    if (!CardUtil.isLand(permanent) || CardUtil.isCreature(permanent)) {
      continue;
    }
    int insertIndex=-1;
    for (int i=0, n=allLands.size(); i < n; i++) {
      Stack stack=allLands.get(i);
      MagePermanent firstPanel=stack.get(0);
      if (firstPanel.getOriginal().getName().equals(permanent.getOriginal().getName())) {
        if (!empty(firstPanel.getLinks())) {
          insertIndex=i;
          break;
        }
        if (!empty(permanent.getLinks()) || stack.size() == landStackMax) {
          insertIndex=i + 1;
          continue;
        }
        stack.add(0,permanent);
        continue outerLoop;
      }
      if (insertIndex != -1) {
        break;
      }
    }
    Stack stack=new Stack();
    if (permanent.getOriginalPermanent().getAttachments() != null) {
      stack.setMaxAttachedCount(permanent.getOriginalPermanent().getAttachments().size());
    }
    stack.add(permanent);
    allLands.add(insertIndex == -1 ? allLands.size() : insertIndex,stack);
  }
  Row allCreatures=new Row(permanents,RowType.creature);
  Row allOthers=new Row(permanents,RowType.other);
  Row allAttached=new Row(permanents,RowType.attached);
  boolean othersOnTheRight=true;
  if (options != null && options.containsKey(""String_Node_Str"")) {
    if (options.get(""String_Node_Str"").equals(""String_Node_Str"")) {
      othersOnTheRight=false;
      allCreatures.addAll(allOthers);
      allOthers.clear();
    }
  }
  cardWidth=cardWidthMax;
  Rectangle rect=battlefieldPanel.getVisibleRect();
  playAreaWidth=rect.width;
  playAreaHeight=rect.height;
  while (true) {
    rows.clear();
    cardHeight=Math.round(cardWidth * CardPanel.ASPECT_RATIO);
    extraCardSpacingX=Math.round(cardWidth * EXTRA_CARD_SPACING_X);
    cardSpacingX=cardHeight - cardWidth + extraCardSpacingX;
    cardSpacingY=Math.round(cardHeight * CARD_SPACING_Y);
    stackSpacingX=stackVertical ? 0 : Math.round(cardWidth * STACK_SPACING_X);
    stackSpacingY=Math.round(cardHeight * STACK_SPACING_Y);
    attachmentSpacingY=Math.round(cardHeight * ATTACHMENT_SPACING_Y);
    Row creatures=(Row)allCreatures.clone();
    Row lands=(Row)allLands.clone();
    Row others=(Row)allOthers.clone();
    wrap(creatures,rows,-1);
    int afterCreaturesIndex=rows.size();
    wrap(lands,rows,afterCreaturesIndex);
    List<Row> storedRows=new ArrayList<>(rows.size());
    for (    Row row : rows) {
      storedRows.add((Row)row.clone());
    }
    Row storedOthers=(Row)others.clone();
    for (    Row row : rows) {
      fillRow(others,rows,row);
    }
    if (creatures.isEmpty() && lands.isEmpty() && others.isEmpty()) {
      break;
    }
    rows=storedRows;
    others=storedOthers;
    wrap(others,rows,afterCreaturesIndex);
    for (    Row row : rows) {
      fillRow(others,rows,row);
    }
    if (creatures.isEmpty() && lands.isEmpty() && others.isEmpty()) {
      break;
    }
    cardWidth-=3;
  }
  int x, y=GUTTER_Y;
  int maxRowWidth=0;
  for (  Row row : rows) {
    int rowBottom=0;
    x=GUTTER_X;
    for (int stackIndex=0, stackCount=row.size(); stackIndex < stackCount; stackIndex++) {
      Stack stack=row.get(stackIndex);
      rowBottom=Math.max(rowBottom,y + stack.getHeight());
      x+=stack.getWidth();
    }
    y=rowBottom;
    maxRowWidth=Math.max(maxRowWidth,x);
  }
  y=GUTTER_Y;
  for (  Row row : rows) {
    int rowBottom=0;
    x=GUTTER_X;
    for (int stackIndex=0, stackCount=row.size(); stackIndex < stackCount; stackIndex++) {
      Stack stack=row.get(stackIndex);
      if (othersOnTheRight && RowType.other.isType(stack.get(0))) {
        x=playAreaWidth - GUTTER_X + extraCardSpacingX;
        for (int i=stackIndex, n=row.size(); i < n; i++) {
          x-=row.get(i).getWidth();
        }
      }
      for (int panelIndex=0, panelCount=stack.size(); panelIndex < panelCount; panelIndex++) {
        MagePermanent panel=stack.get(panelIndex);
        int stackPosition=panelCount - panelIndex - 1;
        if (jPanel != null) {
          jPanel.setComponentZOrder(panel,panelIndex);
        }
        int panelX=x + (stackPosition * stackSpacingX);
        int panelY=y + (stackPosition * stackSpacingY);
        try {
          battlefieldPanel.moveToFront(panel);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        panel.setCardBounds(panelX,panelY,cardWidth,cardHeight);
      }
      rowBottom=Math.max(rowBottom,y + stack.getHeight());
      x+=stack.getWidth();
    }
    y=rowBottom;
  }
  for (  Stack stack : allAttached) {
    for (    MagePermanent panel : stack) {
      panel.setCardBounds(0,0,cardWidth,cardHeight);
    }
  }
  return y;
}",0.9931653973833235
159268,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        int cardsHand=player.getHand().size();
        if (cardsHand > 0) {
          for (          UUID cardId : player.getHand()) {
            Card card=game.getCard(cardId);
            if (card != null) {
              player.removeFromHand(card,game);
              card.moveToZone(Zone.LIBRARY,source.getSourceId(),game,true);
            }
          }
          game.informPlayers(player.getName() + ""String_Node_Str"");
          player.shuffleLibrary(game);
          player.drawCards(cardsHand,game);
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        int cardsHand=player.getHand().size();
        if (cardsHand > 0) {
          for (          Card card : player.getHand().getCards(game)) {
            player.removeFromHand(card,game);
            card.moveToZone(Zone.LIBRARY,source.getSourceId(),game,true);
          }
          game.informPlayers(player.getName() + ""String_Node_Str"");
          player.shuffleLibrary(game);
          player.drawCards(cardsHand,game);
        }
      }
    }
    return true;
  }
  return false;
}",0.9217498459642636
159269,"@Override public String getText(Mode mode){
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  if (amount.toString().equals(""String_Node_Str"")) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(amount.toString());
  }
  sb.append(""String_Node_Str"").append(token.getDescription()).append(""String_Node_Str"");
  if (tapped) {
    sb.append(""String_Node_Str"");
  }
  if (attacking) {
    if (tapped) {
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
  }
  String message=amount.getMessage();
  if (message.length() > 0) {
    sb.append(""String_Node_Str"");
  }
  sb.append(message);
  sb.append(""String_Node_Str"").append(mode.getTargets().get(0).getTargetName());
  sb.append(""String_Node_Str"");
  return sb.toString();
}","@Override public String getText(Mode mode){
  if (staticText != null && !staticText.isEmpty()) {
    return staticText;
  }
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  if (amount.toString().equals(""String_Node_Str"")) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(amount.toString());
  }
  sb.append(""String_Node_Str"").append(token.getDescription()).append(""String_Node_Str"");
  if (tapped) {
    sb.append(""String_Node_Str"");
  }
  if (attacking) {
    if (tapped) {
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
  }
  String message=amount.getMessage();
  if (message.length() > 0) {
    sb.append(""String_Node_Str"");
  }
  sb.append(message);
  sb.append(""String_Node_Str"").append(mode.getTargets().get(0).getTargetName());
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.9502487562189056
159270,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.SPELL_CAST) {
    Spell spell=game.getStack().getSpell(event.getTargetId());
    if (spell != null && filter.match(spell,game)) {
      if (rememberSource) {
        this.getEffects().get(0).setTargetPointer(new FixedTarget(spell.getId()));
      }
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.SPELL_CAST) {
    Spell spell=game.getStack().getSpell(event.getTargetId());
    if (spell != null && filter.match(spell,getControllerId(),game)) {
      if (rememberSource) {
        this.getEffects().get(0).setTargetPointer(new FixedTarget(spell.getId()));
      }
      return true;
    }
  }
  return false;
}",0.7108433734939759
159271,"@Override public boolean canBeBlocked(Permanent attacker,Permanent blocker,Ability source,Game game){
  for (  Permanent permanent : game.getBattlefield().getAllActivePermanents(filter,blocker.getControllerId(),game)) {
    if (permanent.isTapped() && !game.getState().getContinuousEffects().asThough(this.getId(),AsThoughEffectType.BLOCK_TAPPED,blocker.getControllerId(),game)) {
      return false;
    }
    for (    Map.Entry<RestrictionEffect,HashSet<Ability>> entry : game.getContinuousEffects().getApplicableRestrictionEffects(permanent,game).entrySet()) {
      for (      Ability ability : entry.getValue()) {
        if (!entry.getKey().canBlock(attacker,permanent,ability,game)) {
          return false;
        }
      }
    }
    for (    Map.Entry<RestrictionEffect,HashSet<Ability>> restrictionEntry : game.getContinuousEffects().getApplicableRestrictionEffects(attacker,game).entrySet()) {
      for (      Ability ability : restrictionEntry.getValue()) {
        if (!(restrictionEntry.getKey() instanceof CantBeBlockedUnlessAllEffect) && !restrictionEntry.getKey().canBeBlocked(attacker,permanent,ability,game)) {
          return false;
        }
      }
    }
    if (attacker.hasProtectionFrom(permanent,game)) {
      return false;
    }
  }
  return true;
}","@Override public boolean canBeBlocked(Permanent attacker,Permanent blocker,Ability source,Game game){
  for (  Permanent permanent : game.getBattlefield().getAllActivePermanents(filter,blocker.getControllerId(),game)) {
    if (permanent.isTapped() && !game.getState().getContinuousEffects().asThough(this.getId(),AsThoughEffectType.BLOCK_TAPPED,source,blocker.getControllerId(),game)) {
      return false;
    }
    for (    Map.Entry<RestrictionEffect,HashSet<Ability>> entry : game.getContinuousEffects().getApplicableRestrictionEffects(permanent,game).entrySet()) {
      for (      Ability ability : entry.getValue()) {
        if (!entry.getKey().canBlock(attacker,permanent,ability,game)) {
          return false;
        }
      }
    }
    for (    Map.Entry<RestrictionEffect,HashSet<Ability>> restrictionEntry : game.getContinuousEffects().getApplicableRestrictionEffects(attacker,game).entrySet()) {
      for (      Ability ability : restrictionEntry.getValue()) {
        if (!(restrictionEntry.getKey() instanceof CantBeBlockedUnlessAllEffect) && !restrictionEntry.getKey().canBeBlocked(attacker,permanent,ability,game)) {
          return false;
        }
      }
    }
    if (attacker.hasProtectionFrom(permanent,game)) {
      return false;
    }
  }
  return true;
}",0.997275204359673
159272,"@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility || abilityToModify instanceof FlashbackAbility || abilityToModify instanceof RetraceAbility) {
    Ability spell=abilityToModify;
    if (spell.getControllerId().equals(source.getControllerId())) {
      Card sourceCard=game.getCard(spell.getSourceId());
      if (sourceCard != null && sourceCard.hasSubtype(""String_Node_Str"")) {
        Player player=game.getPlayer(spell.getControllerId());
        if (player != null && player.chooseUse(Outcome.Benefit,""String_Node_Str"",game)) {
          spell.getManaCostsToPay().clear();
          spell.getManaCostsToPay().addAll(new ManaCostsImpl(""String_Node_Str""));
          return true;
        }
      }
    }
  }
  return false;
}","@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility || abilityToModify instanceof FlashbackAbility || abilityToModify instanceof RetraceAbility) {
    Ability spell=abilityToModify;
    if (spell.getControllerId().equals(source.getControllerId())) {
      Card sourceCard=game.getCard(spell.getSourceId());
      if (sourceCard != null && sourceCard.hasSubtype(""String_Node_Str"")) {
        Player player=game.getPlayer(spell.getControllerId());
        if (player != null && (CardUtil.isCheckPlayableMode(spell) || player.chooseUse(Outcome.Benefit,""String_Node_Str"",game))) {
          spell.getManaCostsToPay().clear();
          spell.getManaCostsToPay().addAll(new ManaCostsImpl<>(""String_Node_Str""));
          return true;
        }
      }
    }
  }
  return false;
}",0.9741119807344972
159273,"@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility || abilityToModify instanceof FlashbackAbility || abilityToModify instanceof RetraceAbility) {
    Card sourceCard=game.getCard(abilityToModify.getSourceId());
    StackObject stackObject=game.getStack().getStackObject(abilityToModify.getSourceId());
    if (stackObject != null && stackObject instanceof Spell) {
      Zone zone=((Spell)stackObject).getFromZone();
      if (zone != null && zone.equals(Zone.HAND)) {
        if (sourceCard != null && sourceCard.getOwnerId().equals(source.getControllerId()) && !sourceCard.getCardType().contains(CardType.LAND)) {
          Player player=game.getPlayer(source.getControllerId());
          String message=""String_Node_Str"" + sourceCard.getName() + ""String_Node_Str"";
          if (player != null && player.chooseUse(outcome,message,game)) {
            return true;
          }
        }
      }
    }
  }
  return false;
}","@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility || abilityToModify instanceof FlashbackAbility || abilityToModify instanceof RetraceAbility) {
    Card sourceCard=game.getCard(abilityToModify.getSourceId());
    StackObject stackObject=game.getStack().getStackObject(abilityToModify.getSourceId());
    if (stackObject != null && stackObject instanceof Spell) {
      Zone zone=((Spell)stackObject).getFromZone();
      if (zone != null && zone.equals(Zone.HAND)) {
        if (sourceCard != null && sourceCard.getOwnerId().equals(source.getControllerId()) && !sourceCard.getCardType().contains(CardType.LAND)) {
          Player player=game.getPlayer(source.getControllerId());
          String message=""String_Node_Str"" + sourceCard.getName() + ""String_Node_Str"";
          if (player != null && (CardUtil.isCheckPlayableMode(abilityToModify) || player.chooseUse(outcome,message,game))) {
            return true;
          }
        }
      }
    }
  }
  return false;
}",0.975230694511899
159274,"@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility) {
    Card sourceCard=game.getCard(abilityToModify.getSourceId());
    StackObject stackObject=game.getStack().getStackObject(abilityToModify.getSourceId());
    if (stackObject != null && stackObject instanceof Spell) {
      if (sourceCard != null && sourceCard.getCardType().contains(CardType.CREATURE) && sourceCard.getManaCost().convertedManaCost() <= 3) {
        Player player=game.getPlayer(stackObject.getControllerId());
        String message=""String_Node_Str"" + sourceCard.getName() + ""String_Node_Str"";
        if (player != null && player.chooseUse(outcome,message,game)) {
          return true;
        }
      }
    }
  }
  return false;
}","@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility) {
    Card sourceCard=game.getCard(abilityToModify.getSourceId());
    StackObject stackObject=game.getStack().getStackObject(abilityToModify.getSourceId());
    if (stackObject != null && stackObject instanceof Spell) {
      if (sourceCard != null && sourceCard.getCardType().contains(CardType.CREATURE) && sourceCard.getManaCost().convertedManaCost() <= 3) {
        Player player=game.getPlayer(stackObject.getControllerId());
        String message=""String_Node_Str"" + sourceCard.getName() + ""String_Node_Str"";
        if (player != null && (CardUtil.isCheckPlayableMode(abilityToModify) || player.chooseUse(outcome,message,game))) {
          return true;
        }
      }
    }
  }
  return false;
}",0.9587692307692308
159275,"@Override public boolean canActivate(UUID playerId,Game game){
  if (this.spellCanBeActivatedRegularlyNow(playerId,game) || game.getContinuousEffects().asThough(sourceId,AsThoughEffectType.CAST,playerId,game)) {
    if (spellAbilityType.equals(SpellAbilityType.SPLIT)) {
      return false;
    }
    if (!controllerId.equals(playerId)) {
      return false;
    }
    if (this.getManaCosts().isEmpty() && this.getCosts().isEmpty()) {
      return false;
    }
    if (costs.canPay(sourceId,controllerId,game)) {
      if (getSpellAbilityType().equals(SpellAbilityType.SPLIT_FUSED)) {
        SplitCard splitCard=(SplitCard)game.getCard(getSourceId());
        if (splitCard != null) {
          return (splitCard.getLeftHalfCard().getSpellAbility().canChooseTarget(game) && splitCard.getRightHalfCard().getSpellAbility().canChooseTarget(game));
        }
        return false;
      }
 else {
        return canChooseTarget(game);
      }
    }
  }
  return false;
}","@Override public boolean canActivate(UUID playerId,Game game){
  if (game.getContinuousEffects().asThough(sourceId,AsThoughEffectType.CAST,this,playerId,game) || this.spellCanBeActivatedRegularlyNow(playerId,game)) {
    if (spellAbilityType.equals(SpellAbilityType.SPLIT)) {
      return false;
    }
    if (!controllerId.equals(playerId)) {
      return false;
    }
    if (this.getManaCosts().isEmpty() && this.getCosts().isEmpty()) {
      return false;
    }
    if (costs.canPay(sourceId,controllerId,game)) {
      if (getSpellAbilityType().equals(SpellAbilityType.SPLIT_FUSED)) {
        SplitCard splitCard=(SplitCard)game.getCard(getSourceId());
        if (splitCard != null) {
          return (splitCard.getLeftHalfCard().getSpellAbility().canChooseTarget(game) && splitCard.getRightHalfCard().getSpellAbility().canChooseTarget(game));
        }
        return false;
      }
 else {
        return canChooseTarget(game);
      }
    }
  }
  return false;
}",0.889118102114492
159276,"public boolean asThough(UUID objectId,AsThoughEffectType type,UUID controllerId,Game game){
  List<AsThoughEffect> asThoughEffectsList=getApplicableAsThoughEffects(type,game);
  for (  AsThoughEffect effect : asThoughEffectsList) {
    HashSet<Ability> abilities=asThoughEffectsMap.get(type).getAbility(effect.getId());
    for (    Ability ability : abilities) {
      if (controllerId.equals(ability.getControllerId())) {
        if (effect.applies(objectId,ability,game)) {
          return true;
        }
      }
    }
  }
  return false;
}","public boolean asThough(UUID objectId,AsThoughEffectType type,Ability affectedAbility,UUID controllerId,Game game){
  List<AsThoughEffect> asThoughEffectsList=getApplicableAsThoughEffects(type,game);
  for (  AsThoughEffect effect : asThoughEffectsList) {
    HashSet<Ability> abilities=asThoughEffectsMap.get(type).getAbility(effect.getId());
    for (    Ability ability : abilities) {
      if (controllerId.equals(ability.getControllerId())) {
        if (affectedAbility == null) {
          if (effect.applies(objectId,ability,game)) {
            return true;
          }
        }
 else {
          if (effect.applies(objectId,affectedAbility,ability,game)) {
            return true;
          }
        }
      }
    }
  }
  return false;
}",0.8416988416988417
159277,"@Override public void adjustCosts(Ability ability,Game game){
  Player player=game.getPlayer(controllerId);
  if (player == null || !(ability instanceof SpellAbility)) {
    return;
  }
  Target target=new TargetCardInYourGraveyard(1,Integer.MAX_VALUE,new FilterCard());
  target.setTargetName(""String_Node_Str"");
  if (!target.canChoose(sourceId,controllerId,game)) {
    return;
  }
  if (player.chooseUse(Outcome.Detriment,""String_Node_Str"",game)) {
    player.chooseTarget(Outcome.Detriment,target,ability,game);
    if (target.getTargets().size() > 0) {
      int adjCost=0;
      for (      UUID cardId : target.getTargets()) {
        Card card=game.getCard(cardId);
        if (card == null) {
          continue;
        }
        card.moveToExile(null,null,this.getSourceId(),game);
        ++adjCost;
      }
      game.informPlayers(new StringBuilder(player.getName()).append(""String_Node_Str"").append(adjCost).append(""String_Node_Str"").append(adjCost != 1 ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").toString());
      CardUtil.adjustCost((SpellAbility)ability,adjCost);
    }
  }
}","@Override public void adjustCosts(Ability ability,Game game){
  Player player=game.getPlayer(controllerId);
  if (player == null || !(ability instanceof SpellAbility)) {
    return;
  }
  Target target=new TargetCardInYourGraveyard(1,Integer.MAX_VALUE,new FilterCard());
  target.setTargetName(""String_Node_Str"");
  if (!target.canChoose(sourceId,controllerId,game)) {
    return;
  }
  if (!CardUtil.isCheckPlayableMode(ability) && player.chooseUse(Outcome.Detriment,""String_Node_Str"",game)) {
    player.chooseTarget(Outcome.Detriment,target,ability,game);
    if (target.getTargets().size() > 0) {
      int adjCost=0;
      for (      UUID cardId : target.getTargets()) {
        Card card=game.getCard(cardId);
        if (card == null) {
          continue;
        }
        player.moveCardToExileWithInfo(card,null,""String_Node_Str"",getSourceId(),game,Zone.GRAVEYARD);
        ++adjCost;
      }
      game.informPlayers(new StringBuilder(""String_Node_Str"").append(player.getName()).append(""String_Node_Str"").append(adjCost).append(""String_Node_Str"").append(adjCost != 1 ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").toString());
      CardUtil.adjustCost((SpellAbility)ability,adjCost);
    }
  }
}",0.9232736572890026
159278,"@Override public boolean canBeBlocked(Permanent attacker,Permanent blocker,Ability source,Game game){
  if (blocker.getAbilities().containsKey(ShadowAbility.getInstance().getId()) || game.getContinuousEffects().asThough(blocker.getId(),AsThoughEffectType.BLOCK_SHADOW,blocker.getControllerId(),game)) {
    return true;
  }
  return false;
}","@Override public boolean canBeBlocked(Permanent attacker,Permanent blocker,Ability source,Game game){
  if (blocker.getAbilities().containsKey(ShadowAbility.getInstance().getId()) || game.getContinuousEffects().asThough(blocker.getId(),AsThoughEffectType.BLOCK_SHADOW,source,blocker.getControllerId(),game)) {
    return true;
  }
  return false;
}",0.9898403483309144
159279,"@Override public boolean canActivate(UUID playerId,Game game){
  MageObject object=game.getObject(sourceId);
  return (object.getCardType().contains(CardType.INSTANT) || object.hasAbility(FlashAbility.getInstance().getId(),game) || game.getContinuousEffects().asThough(sourceId,AsThoughEffectType.CAST,playerId,game)|| game.canPlaySorcery(playerId));
}","@Override public boolean canActivate(UUID playerId,Game game){
  MageObject object=game.getObject(sourceId);
  return (object.getCardType().contains(CardType.INSTANT) || object.hasAbility(FlashAbility.getInstance().getId(),game) || game.getContinuousEffects().asThough(sourceId,AsThoughEffectType.CAST,this,playerId,game)|| game.canPlaySorcery(playerId));
}",0.9929478138222848
159280,"private boolean spendAnyMana(Ability ability,Game game){
  return game.getContinuousEffects().asThough(ability.getSourceId(),AsThoughEffectType.SPEND_ANY_MANA,ability.getControllerId(),game);
}","private boolean spendAnyMana(Ability ability,Game game){
  return game.getContinuousEffects().asThough(ability.getSourceId(),AsThoughEffectType.SPEND_ANY_MANA,ability,ability.getControllerId(),game);
}",0.9796954314720812
159281,"protected boolean canPlay(ActivatedAbility ability,ManaOptions available,Game game){
  if (!(ability instanceof ManaAbility) && ability.canActivate(playerId,game)) {
    Ability copy=ability.copy();
    game.getContinuousEffects().costModification(copy,game);
    Card card=game.getCard(ability.getSourceId());
    if (card != null) {
      for (      Ability ability0 : card.getAbilities()) {
        if (ability0 instanceof AdjustingSourceCosts) {
          if (!(ability0 instanceof ConvokeAbility)) {
            ((AdjustingSourceCosts)ability0).adjustCosts(copy,game);
          }
        }
      }
    }
    ManaOptions abilityOptions=copy.getManaCostsToPay().getOptions();
    if (abilityOptions.size() == 0) {
      return true;
    }
 else {
      for (      Mana mana : abilityOptions) {
        for (        Mana avail : available) {
          if (mana.enough(avail)) {
            return true;
          }
        }
      }
    }
    MageObject object=game.getObject(ability.getSourceId());
    for (    Ability objectAbility : object.getAbilities()) {
      if (objectAbility instanceof AlternativeCostSourceAbility) {
        if (objectAbility.getCosts().canPay(ability.getSourceId(),playerId,game)) {
          return true;
        }
      }
    }
    for (    AlternativeCost cost : ability.getAlternativeCosts()) {
      if (cost.isAvailable(game,ability) && cost.canPay(ability.getSourceId(),playerId,game)) {
        return true;
      }
    }
  }
  return false;
}","protected boolean canPlay(ActivatedAbility ability,ManaOptions available,Game game){
  if (!(ability instanceof ManaAbility)) {
    ActivatedAbility copy=ability.copy();
    copy.setCheckPlayableMode();
    if (!copy.canActivate(playerId,game)) {
      return false;
    }
    game.getContinuousEffects().costModification(copy,game);
    Card card=game.getCard(ability.getSourceId());
    if (card != null) {
      for (      Ability ability0 : card.getAbilities()) {
        if (ability0 instanceof AdjustingSourceCosts) {
          if (!(ability0 instanceof ConvokeAbility)) {
            ((AdjustingSourceCosts)ability0).adjustCosts(copy,game);
          }
        }
      }
    }
    ManaOptions abilityOptions=copy.getManaCostsToPay().getOptions();
    if (abilityOptions.size() == 0) {
      return true;
    }
 else {
      for (      Mana mana : abilityOptions) {
        for (        Mana avail : available) {
          if (mana.enough(avail)) {
            return true;
          }
        }
      }
    }
    MageObject object=game.getObject(ability.getSourceId());
    for (    Ability objectAbility : object.getAbilities()) {
      if (objectAbility instanceof AlternativeCostSourceAbility) {
        if (objectAbility.getCosts().canPay(ability.getSourceId(),playerId,game)) {
          return true;
        }
      }
    }
    for (    AlternativeCost cost : ability.getAlternativeCosts()) {
      if (cost.isAvailable(game,ability) && cost.canPay(ability.getSourceId(),playerId,game)) {
        return true;
      }
    }
  }
  return false;
}",0.0999342537804076
159282,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType() == EventType.SEARCH_LIBRARY) {
    return true;
  }
  if (event.getType() == EventType.END_TURN_STEP_POST) {
    this.paidPlayers.clear();
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType() == EventType.SEARCH_LIBRARY) {
    return true;
  }
  if (event.getType() == EventType.END_PHASE_POST) {
    this.paidPlayers.clear();
  }
  return false;
}",0.9765625
159283,"@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  if (event.getType() == EventType.SEARCH_LIBRARY && !paidPlayers.contains(event.getPlayerId())) {
    Player player=game.getPlayer(event.getPlayerId());
    if (player != null) {
      ManaCostsImpl arbiterTax=new ManaCostsImpl(""String_Node_Str"");
      if (arbiterTax.canPay(source.getSourceId(),event.getPlayerId(),game) && player.chooseUse(Outcome.Neutral,""String_Node_Str"",game)) {
        if (arbiterTax.payOrRollback(source,game,this.getId(),event.getPlayerId())) {
          paidPlayers.add(event.getPlayerId());
          return false;
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  if (event.getType() == EventType.SEARCH_LIBRARY && !paidPlayers.contains(event.getPlayerId())) {
    Player player=game.getPlayer(event.getPlayerId());
    if (player != null) {
      ManaCostsImpl arbiterTax=new ManaCostsImpl(""String_Node_Str"");
      if (arbiterTax.canPay(source.getSourceId(),event.getPlayerId(),game) && player.chooseUse(Outcome.Neutral,""String_Node_Str"",game)) {
        if (arbiterTax.payOrRollback(source,game,source.getSourceId(),event.getPlayerId())) {
          paidPlayers.add(event.getPlayerId());
          return false;
        }
      }
    }
    return true;
  }
  return false;
}",0.9826589595375722
159284,"LeoninArbiterReplacementEffect(LeoninArbiterReplacementEffect effect){
  super(effect);
  this.paidPlayers=effect.paidPlayers;
}","LeoninArbiterReplacementEffect(LeoninArbiterReplacementEffect effect){
  super(effect);
  this.paidPlayers.addAll(effect.paidPlayers);
}",0.9621212121212122
159285,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Card sourceCard=game.getCard(source.getSourceId());
  if (controller != null && sourceCard != null) {
    Permanent targetEnchantment=game.getPermanent(getTargetPointer().getFirst(game,source));
    if (targetEnchantment != null) {
      controller.moveCardToExileWithInfo(targetEnchantment,null,null,source.getSourceId(),game,Zone.BATTLEFIELD);
      Card exiledCard=game.getCard(targetEnchantment.getId());
      if (exiledCard.hasSubtype(""String_Node_Str"")) {
        Player enchantmentController=game.getPlayer(targetEnchantment.getControllerId());
        return super.applySearchAndExile(game,source,exiledCard.getName(),enchantmentController.getId());
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Card sourceCard=game.getCard(source.getSourceId());
  if (controller != null && sourceCard != null) {
    Permanent targetEnchantment=game.getPermanent(getTargetPointer().getFirst(game,source));
    if (targetEnchantment != null) {
      controller.moveCardToExileWithInfo(targetEnchantment,null,null,source.getSourceId(),game,Zone.BATTLEFIELD);
      if (targetEnchantment.hasSubtype(""String_Node_Str"")) {
        Player enchantmentController=game.getPlayer(targetEnchantment.getControllerId());
        return super.applySearchAndExile(game,source,targetEnchantment.getName(),enchantmentController.getId());
      }
    }
  }
  return false;
}",0.9260897030953884
159286,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Permanent sourcePermanent=game.getPermanentOrLKIBattlefield(source.getSourceId());
  if (controller != null && sourcePermanent != null) {
    UUID exileId=CardUtil.getCardExileZoneId(game,source);
    int numberOfCards=0;
    for (    Card card : game.getExile().getExileZone(exileId).getCards(game)) {
      if (card.getOwnerId().equals(controller.getId())) {
        numberOfCards++;
        card.setFaceDown(false);
        card.moveToZone(Zone.HAND,source.getSourceId(),game,true);
      }
    }
    if (numberOfCards > 0) {
      game.informPlayers(sourcePermanent.getName() + ""String_Node_Str"" + controller.getName()+ ""String_Node_Str""+ numberOfCards+ ""String_Node_Str""+ (numberOfCards > 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Permanent sourcePermanent=game.getPermanentOrLKIBattlefield(source.getSourceId());
  if (controller != null && sourcePermanent != null) {
    UUID exileId=CardUtil.getCardExileZoneId(game,source);
    int numberOfCards=0;
    ExileZone exileZone=game.getExile().getExileZone(exileId);
    if (exileZone != null) {
      for (      Card card : exileZone.getCards(game)) {
        if (card.getOwnerId().equals(controller.getId())) {
          numberOfCards++;
          card.setFaceDown(false);
          card.moveToZone(Zone.HAND,source.getSourceId(),game,true);
        }
      }
    }
    if (numberOfCards > 0) {
      game.informPlayers(sourcePermanent.getLogName() + ""String_Node_Str"" + controller.getName()+ ""String_Node_Str""+ numberOfCards+ ""String_Node_Str""+ (numberOfCards > 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
    return true;
  }
  return false;
}",0.917914300464636
159287,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  Cards cards=new CardsImpl(Zone.PICK);
  int count=source.getManaCostsToPay().getX();
  count=Math.min(controller.getLibrary().size(),count);
  for (int i=0; i < count; i++) {
    Card card=controller.getLibrary().removeFromTop(game);
    cards.add(card);
    game.setZone(card.getId(),Zone.PICK);
  }
  FilterCard filter=new FilterCard(""String_Node_Str"" + count + ""String_Node_Str"");
  filter.add(new ConvertedManaCostPredicate(ComparisonType.LessThan,count + 1));
  filter.add(Predicates.or(new CardTypePredicate(CardType.ARTIFACT),new CardTypePredicate(CardType.CREATURE),new CardTypePredicate(CardType.ENCHANTMENT),new CardTypePredicate(CardType.LAND),new CardTypePredicate(CardType.PLANESWALKER)));
  TargetCard target1=new TargetCard(Zone.PICK,filter);
  while (cards.size() > 0 && controller.choose(Outcome.PutCardInPlay,cards,target1,game)) {
    Card card=cards.get(target1.getFirstTarget(),game);
    if (card != null) {
      cards.remove(card);
      card.putOntoBattlefield(game,Zone.PICK,source.getSourceId(),source.getControllerId());
    }
    target1.clearChosen();
  }
  while (cards.size() > 0) {
    Card card=cards.get(cards.iterator().next(),game);
    cards.remove(card);
    controller.putOntoBattlefieldWithInfo(card,game,Zone.LIBRARY,source.getSourceId());
    card.moveToZone(Zone.GRAVEYARD,source.getId(),game,true);
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  Cards cards=new CardsImpl(Zone.LIBRARY);
  int xValue=source.getManaCostsToPay().getX();
  int numberCards=Math.min(controller.getLibrary().size(),xValue);
  for (int i=0; i < numberCards; i++) {
    Card card=controller.getLibrary().removeFromTop(game);
    cards.add(card);
  }
  FilterCard filter=new FilterCard(""String_Node_Str"" + xValue + ""String_Node_Str"");
  filter.add(new ConvertedManaCostPredicate(ComparisonType.LessThan,xValue + 1));
  filter.add(Predicates.or(new CardTypePredicate(CardType.ARTIFACT),new CardTypePredicate(CardType.CREATURE),new CardTypePredicate(CardType.ENCHANTMENT),new CardTypePredicate(CardType.LAND),new CardTypePredicate(CardType.PLANESWALKER)));
  TargetCard target1=new TargetCard(Zone.LIBRARY,filter);
  while (cards.size() > 0 && controller.choose(Outcome.PutCardInPlay,cards,target1,game)) {
    Card card=cards.get(target1.getFirstTarget(),game);
    if (card != null) {
      cards.remove(card);
      controller.putOntoBattlefieldWithInfo(card,game,Zone.LIBRARY,source.getSourceId());
    }
    target1.clearChosen();
    if (!controller.isInGame()) {
      break;
    }
  }
  while (cards.size() > 0) {
    Card card=cards.get(cards.iterator().next(),game);
    cards.remove(card);
    controller.moveCardToGraveyardWithInfo(card,source.getId(),game,Zone.LIBRARY);
  }
  return true;
}",0.5620269825600527
159288,"public void quit(UUID tournamentId,UUID userId){
  if (controllers.contains(tournamentId)) {
    controllers.get(tournamentId).quit(userId);
  }
 else {
    Logger.getLogger(TournamentManager.class).error(""String_Node_Str"" + tournamentId + ""String_Node_Str""+ userId);
  }
}","public void quit(UUID tournamentId,UUID userId){
  if (controllers.containsKey(tournamentId)) {
    controllers.get(tournamentId).quit(userId);
  }
 else {
    Logger.getLogger(TournamentManager.class).error(""String_Node_Str"" + tournamentId + ""String_Node_Str""+ userId);
  }
}",0.994535519125683
159289,"@Override public void init(Game game,boolean testMode){
  this.abort=false;
  if (!testMode) {
    this.hand.clear();
    this.graveyard.clear();
  }
  this.library.reset();
  this.abilities.clear();
  this.counters.clear();
  this.wins=false;
  this.loses=false;
  this.left=false;
  this.quit=false;
  this.timerTimeout=false;
  this.idleTimeout=false;
  this.turns=0;
  this.passed=false;
  this.passedTurn=false;
  this.passedAllTurns=false;
  this.canGainLife=true;
  this.canLoseLife=true;
  this.topCardRevealed=false;
  this.setLife(game.getLife(),game);
  this.setReachedNextTurnAfterLeaving(false);
  game.getState().getWatchers().add(new BloodthirstWatcher(playerId));
}","@Override public void init(Game game,boolean testMode){
  this.abort=false;
  if (!testMode) {
    this.hand.clear();
    this.graveyard.clear();
  }
  this.library.reset();
  this.abilities.clear();
  this.counters.clear();
  this.wins=false;
  this.loses=false;
  this.left=false;
  this.quit=false;
  this.timerTimeout=false;
  this.idleTimeout=false;
  this.turns=0;
  this.isGameUnderControl=true;
  this.turnController=this.getId();
  this.playersUnderYourControl.clear();
  this.passed=false;
  this.passedTurn=false;
  this.passedAllTurns=false;
  this.canGainLife=true;
  this.canLoseLife=true;
  this.topCardRevealed=false;
  this.setLife(game.getLife(),game);
  this.setReachedNextTurnAfterLeaving(false);
  game.getState().getWatchers().add(new BloodthirstWatcher(playerId));
}",0.926530612244898
159290,"@Override public void reset(){
  this.abilities.clear();
  this.landsPerTurn=1;
  this.loyaltyUsePerTurn=1;
  this.maxHandSize=7;
  this.maxAttackedBy=Integer.MAX_VALUE;
  this.canGainLife=true;
  this.canLoseLife=true;
  this.canPayLifeCost=true;
  this.canPaySacrificeCost=true;
  this.loseByZeroOrLessLife=true;
  this.canPlayCardsFromGraveyard=false;
  this.topCardRevealed=false;
  this.alternativeSourceCosts.clear();
}","/** 
 * called before apply effects
 */
@Override public void reset(){
  this.abilities.clear();
  this.landsPerTurn=1;
  this.loyaltyUsePerTurn=1;
  this.maxHandSize=7;
  this.maxAttackedBy=Integer.MAX_VALUE;
  this.canGainLife=true;
  this.canLoseLife=true;
  this.canPayLifeCost=true;
  this.canPaySacrificeCost=true;
  this.loseByZeroOrLessLife=true;
  this.canPlayCardsFromGraveyard=false;
  this.topCardRevealed=false;
  this.alternativeSourceCosts.clear();
}",0.9550561797752808
159291,"@Override public Set<UUID> getPlayableInHand(Game game){
  Set<UUID> playable=new HashSet<>();
  ManaOptions available=getManaAvailable(game);
  available.addMana(manaPool.getMana());
  for (  Card card : hand.getCards(game)) {
    for (    ActivatedAbility ability : card.getAbilities().getPlayableAbilities(Zone.HAND)) {
      if (canPlay(ability,available,game)) {
        playable.add(card.getId());
        break;
      }
    }
  }
  return playable;
}","@Override public Set<UUID> getPlayableInHand(Game game){
  Set<UUID> playable=new HashSet<>();
  if (!shouldSkipGettingPlayable(game)) {
    if (game.getPhase() != null && PhaseStep.CLEANUP.equals(game.getPhase().getStep().getType())) {
      for (      Card card : hand.getCards(game)) {
        playable.add(card.getId());
      }
    }
 else {
      ManaOptions available=getManaAvailable(game);
      available.addMana(manaPool.getMana());
      for (      Card card : hand.getCards(game)) {
        for (        ActivatedAbility ability : card.getAbilities().getPlayableAbilities(Zone.HAND)) {
          if (canPlay(ability,available,game)) {
            playable.add(card.getId());
            break;
          }
        }
      }
    }
  }
  return playable;
}",0.7467320261437909
159292,"@Override public List<Ability> getPlayable(Game game,boolean hidden){
  List<Ability> playable=new ArrayList<>();
  ManaOptions available=getManaAvailable(game);
  available.addMana(manaPool.getMana());
  if (hidden) {
    for (    Card card : hand.getUniqueCards(game)) {
      for (      ActivatedAbility ability : card.getAbilities().getActivatedAbilities(Zone.HAND)) {
        if (canPlay(ability,available,game)) {
          playable.add(ability);
        }
      }
    }
  }
  for (  Card card : graveyard.getUniqueCards(game)) {
    for (    ActivatedAbility ability : card.getAbilities().getActivatedAbilities(Zone.GRAVEYARD)) {
      if (canPlay(ability,available,game)) {
        playable.add(ability);
      }
    }
    if (game.getContinuousEffects().asThough(card.getId(),AsThoughEffectType.CAST,this.getId(),game)) {
      for (      ActivatedAbility ability : card.getAbilities().getActivatedAbilities(Zone.HAND)) {
        if (ability instanceof SpellAbility || ability instanceof PlayLandAbility) {
          playable.add(ability);
        }
      }
    }
  }
  for (  ExileZone exile : game.getExile().getExileZones()) {
    for (    Card card : exile.getCards(game)) {
      if (game.getContinuousEffects().asThough(card.getId(),AsThoughEffectType.CAST,this.getId(),game)) {
        for (        Ability ability : card.getAbilities()) {
          ability.setControllerId(this.getId());
          if (ability.getZone().match(Zone.HAND) && (ability instanceof SpellAbility || ability instanceof PlayLandAbility)) {
            playable.add(ability);
          }
        }
      }
    }
  }
  for (  Cards cards : game.getState().getRevealed().values()) {
    for (    Card card : cards.getCards(game)) {
      if (game.getContinuousEffects().asThough(card.getId(),AsThoughEffectType.CAST,this.getId(),game)) {
        for (        ActivatedAbility ability : card.getAbilities().getActivatedAbilities(Zone.HAND)) {
          if (ability instanceof SpellAbility || ability instanceof PlayLandAbility) {
            playable.add(ability);
          }
        }
      }
    }
  }
  Map<String,Ability> playableActivated=new HashMap<>();
  for (  Permanent permanent : game.getBattlefield().getAllActivePermanents(playerId)) {
    for (    ActivatedAbility ability : permanent.getAbilities().getActivatedAbilities(Zone.BATTLEFIELD)) {
      if (!playableActivated.containsKey(ability.toString())) {
        if (canPlay(ability,available,game)) {
          playableActivated.put(ability.toString(),ability);
        }
      }
    }
  }
  if (!(this.getCommanderId() == null)) {
    Zone zone=game.getState().getZone(this.getCommanderId());
    if (zone != null && zone.equals(Zone.COMMAND)) {
      MageObject object=game.getObject(this.getCommanderId());
      if (object != null) {
        for (        ActivatedAbility ability : ((Commander)object).getAbilities().getActivatedAbilities(Zone.COMMAND)) {
          if (canPlay(ability,available,game)) {
            playableActivated.put(ability.toString(),ability);
          }
        }
      }
    }
  }
  playable.addAll(playableActivated.values());
  return playable;
}","@Override public List<Ability> getPlayable(Game game,boolean hidden){
  List<Ability> playable=new ArrayList<>();
  if (!shouldSkipGettingPlayable(game)) {
    ManaOptions available=getManaAvailable(game);
    available.addMana(manaPool.getMana());
    if (hidden) {
      for (      Card card : hand.getUniqueCards(game)) {
        for (        ActivatedAbility ability : card.getAbilities().getActivatedAbilities(Zone.HAND)) {
          if (canPlay(ability,available,game)) {
            playable.add(ability);
          }
        }
      }
    }
    for (    Card card : graveyard.getUniqueCards(game)) {
      for (      ActivatedAbility ability : card.getAbilities().getActivatedAbilities(Zone.GRAVEYARD)) {
        if (canPlay(ability,available,game)) {
          playable.add(ability);
        }
      }
      if (game.getContinuousEffects().asThough(card.getId(),AsThoughEffectType.CAST,this.getId(),game)) {
        for (        ActivatedAbility ability : card.getAbilities().getActivatedAbilities(Zone.HAND)) {
          if (ability instanceof SpellAbility || ability instanceof PlayLandAbility) {
            playable.add(ability);
          }
        }
      }
    }
    for (    ExileZone exile : game.getExile().getExileZones()) {
      for (      Card card : exile.getCards(game)) {
        if (game.getContinuousEffects().asThough(card.getId(),AsThoughEffectType.CAST,this.getId(),game)) {
          for (          Ability ability : card.getAbilities()) {
            ability.setControllerId(this.getId());
            if (ability.getZone().match(Zone.HAND) && (ability instanceof SpellAbility || ability instanceof PlayLandAbility)) {
              playable.add(ability);
            }
          }
        }
      }
    }
    for (    Cards cards : game.getState().getRevealed().values()) {
      for (      Card card : cards.getCards(game)) {
        if (game.getContinuousEffects().asThough(card.getId(),AsThoughEffectType.CAST,this.getId(),game)) {
          for (          ActivatedAbility ability : card.getAbilities().getActivatedAbilities(Zone.HAND)) {
            if (ability instanceof SpellAbility || ability instanceof PlayLandAbility) {
              playable.add(ability);
            }
          }
        }
      }
    }
    Map<String,Ability> playableActivated=new HashMap<>();
    for (    Permanent permanent : game.getBattlefield().getAllActivePermanents(playerId)) {
      for (      ActivatedAbility ability : permanent.getAbilities().getActivatedAbilities(Zone.BATTLEFIELD)) {
        if (!playableActivated.containsKey(ability.toString())) {
          if (canPlay(ability,available,game)) {
            playableActivated.put(ability.toString(),ability);
          }
        }
      }
    }
    if (!(this.getCommanderId() == null)) {
      Zone zone=game.getState().getZone(this.getCommanderId());
      if (zone != null && zone.equals(Zone.COMMAND)) {
        MageObject object=game.getObject(this.getCommanderId());
        if (object != null) {
          for (          ActivatedAbility ability : ((Commander)object).getAbilities().getActivatedAbilities(Zone.COMMAND)) {
            if (canPlay(ability,available,game)) {
              playableActivated.put(ability.toString(),ability);
            }
          }
        }
      }
    }
    playable.addAll(playableActivated.values());
  }
  return playable;
}",0.9448382126348228
159293,"@Override public void mouseReleased(MouseEvent e,TransferData transferData){
  CardPanel card=((CardPanel)transferData.component);
  if (card.getZone() != null && card.getZone().equalsIgnoreCase(""String_Node_Str"")) {
    int maxXOffset=0;
    if (isDragging) {
      Point mouse=new Point(e.getX(),e.getY());
      SwingUtilities.convertPointToScreen(mouse,transferData.component);
      int xOffset=card.getXOffset(card.getCardWidth());
      maxXOffset=Math.abs((int)(mouse.getX() - initialMousePos.x) - xOffset);
    }
    clearDragging(card);
    this.startedDragging=false;
    if (maxXOffset < MIN_X_OFFSET_REQUIRED) {
      transferData.component.requestFocusInWindow();
      defaultCallback.mouseClicked(e,transferData.gameId,session,transferData.card);
      hidePopup();
    }
  }
 else {
    transferData.component.requestFocusInWindow();
    defaultCallback.mouseClicked(e,transferData.gameId,session,transferData.card);
    hidePopup();
  }
}","@Override public void mouseReleased(MouseEvent e,TransferData transferData){
  CardPanel card=((CardPanel)transferData.component);
  if (card.getZone() != null && card.getZone().equalsIgnoreCase(""String_Node_Str"")) {
    int maxXOffset=0;
    if (isDragging) {
      Point mouse=new Point(e.getX(),e.getY());
      SwingUtilities.convertPointToScreen(mouse,transferData.component);
      maxXOffset=Math.abs((int)(mouse.getX() - initialMousePos.x));
    }
    clearDragging(card);
    this.startedDragging=false;
    if (maxXOffset < MIN_X_OFFSET_REQUIRED) {
      transferData.component.requestFocusInWindow();
      defaultCallback.mouseClicked(e,transferData.gameId,session,transferData.card);
      hidePopup();
    }
  }
 else {
    transferData.component.requestFocusInWindow();
    defaultCallback.mouseClicked(e,transferData.gameId,session,transferData.card);
    hidePopup();
  }
}",0.9642470205850489
159294,"@Override public String generateURL(CardDownloadData card) throws Exception {
  Integer collectorId=card.getCollectorId();
  String cardSet=card.getSet();
  if (collectorId == null || cardSet == null) {
    throw new Exception(""String_Node_Str"" + collectorId + ""String_Node_Str""+ cardSet);
  }
  StringBuilder url=new StringBuilder(""String_Node_Str"");
  url.append(cardSet.toUpperCase()).append(""String_Node_Str"");
  if (card.isSplitCard()) {
    url.append(card.getDownloadName().replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    url.append(card.getDownloadName());
  }
  if (card.isTwoFacedCard()) {
    url.append(card.isSecondSide() ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (card.isFlipCard()) {
    if (card.isFlippedSide()) {
      url.append(""String_Node_Str"");
    }
 else {
      url.append(""String_Node_Str"");
    }
  }
  url.append(""String_Node_Str"");
  return url.toString();
}","@Override public String generateURL(CardDownloadData card) throws Exception {
  Integer collectorId=card.getCollectorId();
  String cardSet=card.getSet();
  if (collectorId == null || cardSet == null) {
    throw new Exception(""String_Node_Str"" + collectorId + ""String_Node_Str""+ cardSet);
  }
  StringBuilder url=new StringBuilder(""String_Node_Str"");
  url.append(cardSet.toUpperCase()).append(""String_Node_Str"");
  if (card.isSplitCard()) {
    url.append(card.getDownloadName().replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    url.append(card.getDownloadName().replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  if (card.isTwoFacedCard()) {
    url.append(card.isSecondSide() ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (card.isFlipCard()) {
    if (card.isFlippedSide()) {
      url.append(""String_Node_Str"");
    }
 else {
      url.append(""String_Node_Str"");
    }
  }
  url.append(""String_Node_Str"");
  return url.toString();
}",0.97444089456869
159295,"/** 
 * Test that if command has only one target and that targets is not valid on resolution, Cryptic Command fizzeles The player does not draw a card
 */
@Test public void testCommand(){
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",2);
  addCard(Zone.HAND,playerB,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",4);
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"",playerB);
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerB,""String_Node_Str"",""String_Node_Str"");
  setModeChoice(playerB,""String_Node_Str"");
  setModeChoice(playerB,""String_Node_Str"");
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  setStopAt(1,PhaseStep.CLEANUP);
  execute();
  assertLife(playerA,20);
  assertLife(playerB,20);
  assertHandCount(playerA,2);
  assertGraveyardCount(playerA,1);
  assertHandCount(playerB,0);
  assertGraveyardCount(playerB,1);
}","/** 
 * Test that if command has only one target and that targets is not valid on resolution, Cryptic Command fizzeles The player does not draw a card
 */
@Test public void testCommand(){
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",2);
  addCard(Zone.HAND,playerB,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",4);
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"",playerB);
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerB,""String_Node_Str"",""String_Node_Str"");
  setModeChoice(playerB,""String_Node_Str"");
  setModeChoice(playerB,""String_Node_Str"");
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  setStopAt(1,PhaseStep.CLEANUP);
  execute();
  assertLife(playerA,20);
  assertLife(playerB,20);
  assertGraveyardCount(playerA,""String_Node_Str"",1);
  assertGraveyardCount(playerA,1);
  assertGraveyardCount(playerB,""String_Node_Str"",1);
  assertGraveyardCount(playerB,1);
  assertHandCount(playerA,2);
  assertHandCount(playerB,0);
}",0.8891820580474934
159296,"private boolean addTargets(Ability ability,String[] groups,Game game){
  boolean result=true;
  for (int i=1; i < groups.length; i++) {
    String group=groups[i];
    if (ability instanceof SpellAbility && ((SpellAbility)ability).getSpellAbilityType().equals(SpellAbilityType.SPLIT_FUSED)) {
      if (group.contains(""String_Node_Str"")) {
        result=handleTargetString(group.substring(group.indexOf(""String_Node_Str"") + 9),ability,game);
      }
 else       if (group.startsWith(""String_Node_Str"")) {
        result=handleTargetString(group.substring(group.indexOf(""String_Node_Str"") + 10),ability,game);
      }
 else {
        result=false;
      }
    }
 else {
      result=handleTargetString(group,ability,game);
    }
  }
  return result;
}","private boolean addTargets(Ability ability,String[] groups,Game game){
  boolean result=true;
  for (int i=1; i < groups.length; i++) {
    String group=groups[i];
    if (group.startsWith(""String_Node_Str"")) {
      break;
    }
    if (ability instanceof SpellAbility && ((SpellAbility)ability).getSpellAbilityType().equals(SpellAbilityType.SPLIT_FUSED)) {
      if (group.contains(""String_Node_Str"")) {
        result=handleTargetString(group.substring(group.indexOf(""String_Node_Str"") + 9),ability,game);
      }
 else       if (group.startsWith(""String_Node_Str"")) {
        result=handleTargetString(group.substring(group.indexOf(""String_Node_Str"") + 10),ability,game);
      }
 else {
        result=false;
      }
    }
 else {
      result=handleTargetString(group,ability,game);
    }
  }
  return result;
}",0.957908163265306
159297,"private void groupAttachments(JLayeredPane jLayeredPane,JLayeredPane jPanel,Map<UUID,MagePermanent> permanents,PermanentView permanent){
  MagePermanent perm=permanents.get(permanent.getId());
  if (perm == null) {
    return;
  }
  int position=jLayeredPane.getPosition(perm);
  perm.getLinks().clear();
  Rectangle r=perm.getBounds();
  if (!Plugins.getInstance().isCardPluginLoaded()) {
    for (    UUID attachmentId : permanent.getAttachments()) {
      MagePermanent link=permanents.get(attachmentId);
      if (link != null) {
        perm.getLinks().add(link);
        r.translate(20,20);
        link.setBounds(r);
        jLayeredPane.setPosition(link,++position);
      }
    }
  }
 else {
    int index=permanent.getAttachments().size();
    for (    UUID attachmentId : permanent.getAttachments()) {
      MagePermanent link=permanents.get(attachmentId);
      if (link != null) {
        link.setBounds(r);
        perm.getLinks().add(link);
        r.translate(8,10);
        perm.setBounds(r);
        jLayeredPane.moveToFront(link);
        jLayeredPane.moveToFront(perm);
        jPanel.setComponentZOrder(link,index);
        index--;
      }
    }
    jPanel.setComponentZOrder(perm,index);
  }
}","private void groupAttachments(JLayeredPane jLayeredPane,JLayeredPane jPanel,Map<UUID,MagePermanent> permanents,PermanentView permanent){
  MagePermanent perm=permanents.get(permanent.getId());
  if (perm == null) {
    return;
  }
  int position=jLayeredPane.getPosition(perm);
  perm.getLinks().clear();
  Rectangle r=perm.getBounds();
  if (!Plugins.getInstance().isCardPluginLoaded()) {
    for (    UUID attachmentId : permanent.getAttachments()) {
      MagePermanent link=permanents.get(attachmentId);
      if (link != null) {
        perm.getLinks().add(link);
        r.translate(20,20);
        link.setBounds(r);
        jLayeredPane.setPosition(link,++position);
      }
    }
  }
 else {
    int index=permanent.getAttachments().size();
    for (    UUID attachmentId : permanent.getAttachments()) {
      MagePermanent link=permanents.get(attachmentId);
      if (link != null) {
        link.setBounds(r);
        perm.getLinks().add(link);
        if (index == 1) {
          r.translate(ATTACHMENTS_DX_OFFSET,ATTACHMENT_DY_OFFSET);
        }
 else {
          r.translate(ATTACHMENT_DX_OFFSET,ATTACHMENT_DY_OFFSET);
        }
        perm.setBounds(r);
        jLayeredPane.moveToFront(link);
        jLayeredPane.moveToFront(perm);
        jPanel.setComponentZOrder(link,index);
        index--;
      }
    }
    jPanel.setComponentZOrder(perm,index);
  }
}",0.9251543209876544
159298,"private int getHeight(){
  return cardHeight + (size() - 1) * stackSpacingY + cardSpacingY;
}","private int getHeight(){
  return cardHeight + (size() - 1) * stackSpacingY + cardSpacingY + ATTACHMENT_DY_OFFSET * maxAttachedCount;
}",0.8157894736842105
159299,"@Override public int sortPermanents(Map<String,JComponent> ui,Collection<MagePermanent> permanents,Map<String,String> options){
  if (ui == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  JComponent component=ui.get(""String_Node_Str"");
  if (component == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  JLayeredPane battlefieldPanel=(JLayeredPane)component;
  JComponent jPanel=ui.get(""String_Node_Str"");
  Row allLands=new Row();
  outerLoop:   for (  MagePermanent permanent : permanents) {
    if (!CardUtil.isLand(permanent) || CardUtil.isCreature(permanent)) {
      continue;
    }
    int insertIndex=-1;
    for (int i=0, n=allLands.size(); i < n; i++) {
      Stack stack=allLands.get(i);
      MagePermanent firstPanel=stack.get(0);
      if (firstPanel.getOriginal().getName().equals(permanent.getOriginal().getName())) {
        if (!empty(firstPanel.getLinks())) {
          insertIndex=i;
          break;
        }
        if (!empty(permanent.getLinks()) || stack.size() == landStackMax) {
          insertIndex=i + 1;
          continue;
        }
        stack.add(0,permanent);
        continue outerLoop;
      }
      if (insertIndex != -1) {
        break;
      }
    }
    Stack stack=new Stack();
    stack.add(permanent);
    allLands.add(insertIndex == -1 ? allLands.size() : insertIndex,stack);
  }
  Row allCreatures=new Row(permanents,RowType.creature);
  Row allOthers=new Row(permanents,RowType.other);
  Row allAttached=new Row(permanents,RowType.attached);
  boolean othersOnTheRight=true;
  if (options != null && options.containsKey(""String_Node_Str"")) {
    if (options.get(""String_Node_Str"").equals(""String_Node_Str"")) {
      othersOnTheRight=false;
      allCreatures.addAll(allOthers);
      allOthers.clear();
    }
  }
  cardWidth=cardWidthMax;
  Rectangle rect=battlefieldPanel.getVisibleRect();
  playAreaWidth=rect.width;
  playAreaHeight=rect.height;
  while (true) {
    rows.clear();
    cardHeight=Math.round(cardWidth * CardPanel.ASPECT_RATIO);
    extraCardSpacingX=Math.round(cardWidth * EXTRA_CARD_SPACING_X);
    cardSpacingX=cardHeight - cardWidth + extraCardSpacingX;
    cardSpacingY=Math.round(cardHeight * CARD_SPACING_Y);
    stackSpacingX=stackVertical ? 0 : Math.round(cardWidth * STACK_SPACING_X);
    stackSpacingY=Math.round(cardHeight * STACK_SPACING_Y);
    Row creatures=(Row)allCreatures.clone();
    Row lands=(Row)allLands.clone();
    Row others=(Row)allOthers.clone();
    wrap(creatures,rows,-1);
    int afterCreaturesIndex=rows.size();
    wrap(lands,rows,afterCreaturesIndex);
    List<Row> storedRows=new ArrayList<>(rows.size());
    for (    Row row : rows) {
      storedRows.add((Row)row.clone());
    }
    Row storedOthers=(Row)others.clone();
    for (    Row row : rows) {
      fillRow(others,rows,row);
    }
    if (creatures.isEmpty() && lands.isEmpty() && others.isEmpty()) {
      break;
    }
    rows=storedRows;
    others=storedOthers;
    wrap(others,rows,afterCreaturesIndex);
    for (    Row row : rows) {
      fillRow(others,rows,row);
    }
    if (creatures.isEmpty() && lands.isEmpty() && others.isEmpty()) {
      break;
    }
    cardWidth-=3;
  }
  int x, y=GUTTER_Y;
  int maxRowWidth=0;
  for (  Row row : rows) {
    int rowBottom=0;
    x=GUTTER_X;
    for (int stackIndex=0, stackCount=row.size(); stackIndex < stackCount; stackIndex++) {
      Stack stack=row.get(stackIndex);
      rowBottom=Math.max(rowBottom,y + stack.getHeight());
      x+=stack.getWidth();
    }
    y=rowBottom;
    maxRowWidth=Math.max(maxRowWidth,x);
  }
  y=GUTTER_Y;
  for (  Row row : rows) {
    int rowBottom=0;
    x=GUTTER_X;
    for (int stackIndex=0, stackCount=row.size(); stackIndex < stackCount; stackIndex++) {
      Stack stack=row.get(stackIndex);
      if (othersOnTheRight && RowType.other.isType(stack.get(0))) {
        x=playAreaWidth - GUTTER_X + extraCardSpacingX;
        for (int i=stackIndex, n=row.size(); i < n; i++) {
          x-=row.get(i).getWidth();
        }
      }
      for (int panelIndex=0, panelCount=stack.size(); panelIndex < panelCount; panelIndex++) {
        MagePermanent panel=stack.get(panelIndex);
        int stackPosition=panelCount - panelIndex - 1;
        if (jPanel != null) {
          jPanel.setComponentZOrder(panel,panelIndex);
        }
        int panelX=x + (stackPosition * stackSpacingX);
        int panelY=y + (stackPosition * stackSpacingY);
        try {
          battlefieldPanel.moveToFront(panel);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        panel.setCardBounds(panelX,panelY,cardWidth,cardHeight);
      }
      rowBottom=Math.max(rowBottom,y + stack.getHeight());
      x+=stack.getWidth();
    }
    y=rowBottom;
  }
  for (  Stack stack : allAttached) {
    for (    MagePermanent panel : stack) {
      panel.setCardBounds(0,0,cardWidth,cardHeight);
    }
  }
  return y;
}","@Override public int sortPermanents(Map<String,JComponent> ui,Collection<MagePermanent> permanents,Map<String,String> options){
  if (ui == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  JComponent component=ui.get(""String_Node_Str"");
  if (component == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  JLayeredPane battlefieldPanel=(JLayeredPane)component;
  JComponent jPanel=ui.get(""String_Node_Str"");
  Row allLands=new Row();
  outerLoop:   for (  MagePermanent permanent : permanents) {
    if (!CardUtil.isLand(permanent) || CardUtil.isCreature(permanent)) {
      continue;
    }
    int insertIndex=-1;
    for (int i=0, n=allLands.size(); i < n; i++) {
      Stack stack=allLands.get(i);
      MagePermanent firstPanel=stack.get(0);
      if (firstPanel.getOriginal().getName().equals(permanent.getOriginal().getName())) {
        if (!empty(firstPanel.getLinks())) {
          insertIndex=i;
          break;
        }
        if (!empty(permanent.getLinks()) || stack.size() == landStackMax) {
          insertIndex=i + 1;
          continue;
        }
        stack.add(0,permanent);
        continue outerLoop;
      }
      if (insertIndex != -1) {
        break;
      }
    }
    Stack stack=new Stack();
    if (permanent.getOriginalPermanent().getAttachments() != null) {
      stack.setMaxAttachedCount(permanent.getOriginalPermanent().getAttachments().size());
    }
    stack.add(permanent);
    allLands.add(insertIndex == -1 ? allLands.size() : insertIndex,stack);
  }
  Row allCreatures=new Row(permanents,RowType.creature);
  Row allOthers=new Row(permanents,RowType.other);
  Row allAttached=new Row(permanents,RowType.attached);
  boolean othersOnTheRight=true;
  if (options != null && options.containsKey(""String_Node_Str"")) {
    if (options.get(""String_Node_Str"").equals(""String_Node_Str"")) {
      othersOnTheRight=false;
      allCreatures.addAll(allOthers);
      allOthers.clear();
    }
  }
  cardWidth=cardWidthMax;
  Rectangle rect=battlefieldPanel.getVisibleRect();
  playAreaWidth=rect.width;
  playAreaHeight=rect.height;
  while (true) {
    rows.clear();
    cardHeight=Math.round(cardWidth * CardPanel.ASPECT_RATIO);
    extraCardSpacingX=Math.round(cardWidth * EXTRA_CARD_SPACING_X);
    cardSpacingX=cardHeight - cardWidth + extraCardSpacingX;
    cardSpacingY=Math.round(cardHeight * CARD_SPACING_Y);
    stackSpacingX=stackVertical ? 0 : Math.round(cardWidth * STACK_SPACING_X);
    stackSpacingY=Math.round(cardHeight * STACK_SPACING_Y);
    Row creatures=(Row)allCreatures.clone();
    Row lands=(Row)allLands.clone();
    Row others=(Row)allOthers.clone();
    wrap(creatures,rows,-1);
    int afterCreaturesIndex=rows.size();
    wrap(lands,rows,afterCreaturesIndex);
    List<Row> storedRows=new ArrayList<>(rows.size());
    for (    Row row : rows) {
      storedRows.add((Row)row.clone());
    }
    Row storedOthers=(Row)others.clone();
    for (    Row row : rows) {
      fillRow(others,rows,row);
    }
    if (creatures.isEmpty() && lands.isEmpty() && others.isEmpty()) {
      break;
    }
    rows=storedRows;
    others=storedOthers;
    wrap(others,rows,afterCreaturesIndex);
    for (    Row row : rows) {
      fillRow(others,rows,row);
    }
    if (creatures.isEmpty() && lands.isEmpty() && others.isEmpty()) {
      break;
    }
    cardWidth-=3;
  }
  int x, y=GUTTER_Y;
  int maxRowWidth=0;
  for (  Row row : rows) {
    int rowBottom=0;
    x=GUTTER_X;
    for (int stackIndex=0, stackCount=row.size(); stackIndex < stackCount; stackIndex++) {
      Stack stack=row.get(stackIndex);
      rowBottom=Math.max(rowBottom,y + stack.getHeight());
      x+=stack.getWidth();
    }
    y=rowBottom;
    maxRowWidth=Math.max(maxRowWidth,x);
  }
  y=GUTTER_Y;
  for (  Row row : rows) {
    int rowBottom=0;
    x=GUTTER_X;
    for (int stackIndex=0, stackCount=row.size(); stackIndex < stackCount; stackIndex++) {
      Stack stack=row.get(stackIndex);
      if (othersOnTheRight && RowType.other.isType(stack.get(0))) {
        x=playAreaWidth - GUTTER_X + extraCardSpacingX;
        for (int i=stackIndex, n=row.size(); i < n; i++) {
          x-=row.get(i).getWidth();
        }
      }
      for (int panelIndex=0, panelCount=stack.size(); panelIndex < panelCount; panelIndex++) {
        MagePermanent panel=stack.get(panelIndex);
        int stackPosition=panelCount - panelIndex - 1;
        if (jPanel != null) {
          jPanel.setComponentZOrder(panel,panelIndex);
        }
        int panelX=x + (stackPosition * stackSpacingX);
        int panelY=y + (stackPosition * stackSpacingY);
        try {
          battlefieldPanel.moveToFront(panel);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        panel.setCardBounds(panelX,panelY,cardWidth,cardHeight);
      }
      rowBottom=Math.max(rowBottom,y + stack.getHeight());
      x+=stack.getWidth();
    }
    y=rowBottom;
  }
  for (  Stack stack : allAttached) {
    for (    MagePermanent panel : stack) {
      panel.setCardBounds(0,0,cardWidth,cardHeight);
    }
  }
  return y;
}",0.9834099540275836
159300,"public boolean isType(MagePermanent card){
switch (this) {
case land:
    return CardUtil.isLand(card);
case creature:
  return CardUtil.isCreature(card);
case other:
return !CardUtil.isLand(card) && !CardUtil.isCreature(card);
default :
throw new RuntimeException(""String_Node_Str"" + this);
}
}","public boolean isType(MagePermanent card){
switch (this) {
case land:
    return CardUtil.isLand(card);
case creature:
  return CardUtil.isCreature(card);
case other:
return !CardUtil.isLand(card) && !CardUtil.isCreature(card);
case attached:
return card.getOriginalPermanent().isAttachedTo();
default :
throw new RuntimeException(""String_Node_Str"" + this);
}
}",0.899390243902439
159301,"@Override public int sortPermanents(Map<String,JComponent> ui,Collection<MagePermanent> permanents,Map<String,String> options){
  if (ui == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  JComponent component=ui.get(""String_Node_Str"");
  if (component == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  JLayeredPane battlefieldPanel=(JLayeredPane)component;
  JComponent jPanel=ui.get(""String_Node_Str"");
  Row allLands=new Row();
  outerLoop:   for (  MagePermanent permanent : permanents) {
    if (!CardUtil.isLand(permanent) || CardUtil.isCreature(permanent)) {
      continue;
    }
    int insertIndex=-1;
    for (int i=0, n=allLands.size(); i < n; i++) {
      Stack stack=allLands.get(i);
      MagePermanent firstPanel=stack.get(0);
      if (firstPanel.getOriginal().getName().equals(permanent.getOriginal().getName())) {
        if (!empty(firstPanel.getLinks())) {
          insertIndex=i;
          break;
        }
        if (!empty(permanent.getLinks()) || stack.size() == landStackMax) {
          insertIndex=i + 1;
          continue;
        }
        stack.add(0,permanent);
        continue outerLoop;
      }
      if (insertIndex != -1) {
        break;
      }
    }
    Stack stack=new Stack();
    stack.add(permanent);
    allLands.add(insertIndex == -1 ? allLands.size() : insertIndex,stack);
  }
  Row allCreatures=new Row(permanents,RowType.creature);
  Row allOthers=new Row(permanents,RowType.other);
  boolean othersOnTheRight=true;
  if (options != null && options.containsKey(""String_Node_Str"")) {
    if (options.get(""String_Node_Str"").equals(""String_Node_Str"")) {
      othersOnTheRight=false;
      allCreatures.addAll(allOthers);
      allOthers.clear();
    }
  }
  cardWidth=cardWidthMax;
  Rectangle rect=battlefieldPanel.getVisibleRect();
  playAreaWidth=rect.width;
  playAreaHeight=rect.height;
  while (true) {
    rows.clear();
    cardHeight=Math.round(cardWidth * CardPanel.ASPECT_RATIO);
    extraCardSpacingX=Math.round(cardWidth * EXTRA_CARD_SPACING_X);
    cardSpacingX=cardHeight - cardWidth + extraCardSpacingX;
    cardSpacingY=Math.round(cardHeight * CARD_SPACING_Y);
    stackSpacingX=stackVertical ? 0 : Math.round(cardWidth * STACK_SPACING_X);
    stackSpacingY=Math.round(cardHeight * STACK_SPACING_Y);
    Row creatures=(Row)allCreatures.clone();
    Row lands=(Row)allLands.clone();
    Row others=(Row)allOthers.clone();
    wrap(creatures,rows,-1);
    int afterCreaturesIndex=rows.size();
    wrap(lands,rows,afterCreaturesIndex);
    List<Row> storedRows=new ArrayList<>(rows.size());
    for (    Row row : rows) {
      storedRows.add((Row)row.clone());
    }
    Row storedOthers=(Row)others.clone();
    for (    Row row : rows) {
      fillRow(others,rows,row);
    }
    if (creatures.isEmpty() && lands.isEmpty() && others.isEmpty()) {
      break;
    }
    rows=storedRows;
    others=storedOthers;
    wrap(others,rows,afterCreaturesIndex);
    for (    Row row : rows) {
      fillRow(others,rows,row);
    }
    if (creatures.isEmpty() && lands.isEmpty() && others.isEmpty()) {
      break;
    }
    cardWidth-=3;
  }
  int x, y=GUTTER_Y;
  int maxRowWidth=0;
  for (  Row row : rows) {
    int rowBottom=0;
    x=GUTTER_X;
    for (int stackIndex=0, stackCount=row.size(); stackIndex < stackCount; stackIndex++) {
      Stack stack=row.get(stackIndex);
      rowBottom=Math.max(rowBottom,y + stack.getHeight());
      x+=stack.getWidth();
    }
    y=rowBottom;
    maxRowWidth=Math.max(maxRowWidth,x);
  }
  y=GUTTER_Y;
  for (  Row row : rows) {
    int rowBottom=0;
    x=GUTTER_X;
    for (int stackIndex=0, stackCount=row.size(); stackIndex < stackCount; stackIndex++) {
      Stack stack=row.get(stackIndex);
      if (othersOnTheRight && RowType.other.isType(stack.get(0))) {
        x=playAreaWidth - GUTTER_X + extraCardSpacingX;
        for (int i=stackIndex, n=row.size(); i < n; i++) {
          x-=row.get(i).getWidth();
        }
      }
      for (int panelIndex=0, panelCount=stack.size(); panelIndex < panelCount; panelIndex++) {
        MagePermanent panel=stack.get(panelIndex);
        int stackPosition=panelCount - panelIndex - 1;
        if (jPanel != null) {
          jPanel.setComponentZOrder(panel,panelIndex);
        }
        int panelX=x + (stackPosition * stackSpacingX);
        int panelY=y + (stackPosition * stackSpacingY);
        try {
          battlefieldPanel.moveToFront(panel);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        panel.setCardBounds(panelX,panelY,cardWidth,cardHeight);
      }
      rowBottom=Math.max(rowBottom,y + stack.getHeight());
      x+=stack.getWidth();
    }
    y=rowBottom;
  }
  return y;
}","@Override public int sortPermanents(Map<String,JComponent> ui,Collection<MagePermanent> permanents,Map<String,String> options){
  if (ui == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  JComponent component=ui.get(""String_Node_Str"");
  if (component == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  JLayeredPane battlefieldPanel=(JLayeredPane)component;
  JComponent jPanel=ui.get(""String_Node_Str"");
  Row allLands=new Row();
  outerLoop:   for (  MagePermanent permanent : permanents) {
    if (!CardUtil.isLand(permanent) || CardUtil.isCreature(permanent)) {
      continue;
    }
    int insertIndex=-1;
    for (int i=0, n=allLands.size(); i < n; i++) {
      Stack stack=allLands.get(i);
      MagePermanent firstPanel=stack.get(0);
      if (firstPanel.getOriginal().getName().equals(permanent.getOriginal().getName())) {
        if (!empty(firstPanel.getLinks())) {
          insertIndex=i;
          break;
        }
        if (!empty(permanent.getLinks()) || stack.size() == landStackMax) {
          insertIndex=i + 1;
          continue;
        }
        stack.add(0,permanent);
        continue outerLoop;
      }
      if (insertIndex != -1) {
        break;
      }
    }
    Stack stack=new Stack();
    stack.add(permanent);
    allLands.add(insertIndex == -1 ? allLands.size() : insertIndex,stack);
  }
  Row allCreatures=new Row(permanents,RowType.creature);
  Row allOthers=new Row(permanents,RowType.other);
  Row allAttached=new Row(permanents,RowType.attached);
  boolean othersOnTheRight=true;
  if (options != null && options.containsKey(""String_Node_Str"")) {
    if (options.get(""String_Node_Str"").equals(""String_Node_Str"")) {
      othersOnTheRight=false;
      allCreatures.addAll(allOthers);
      allOthers.clear();
    }
  }
  cardWidth=cardWidthMax;
  Rectangle rect=battlefieldPanel.getVisibleRect();
  playAreaWidth=rect.width;
  playAreaHeight=rect.height;
  while (true) {
    rows.clear();
    cardHeight=Math.round(cardWidth * CardPanel.ASPECT_RATIO);
    extraCardSpacingX=Math.round(cardWidth * EXTRA_CARD_SPACING_X);
    cardSpacingX=cardHeight - cardWidth + extraCardSpacingX;
    cardSpacingY=Math.round(cardHeight * CARD_SPACING_Y);
    stackSpacingX=stackVertical ? 0 : Math.round(cardWidth * STACK_SPACING_X);
    stackSpacingY=Math.round(cardHeight * STACK_SPACING_Y);
    Row creatures=(Row)allCreatures.clone();
    Row lands=(Row)allLands.clone();
    Row others=(Row)allOthers.clone();
    wrap(creatures,rows,-1);
    int afterCreaturesIndex=rows.size();
    wrap(lands,rows,afterCreaturesIndex);
    List<Row> storedRows=new ArrayList<>(rows.size());
    for (    Row row : rows) {
      storedRows.add((Row)row.clone());
    }
    Row storedOthers=(Row)others.clone();
    for (    Row row : rows) {
      fillRow(others,rows,row);
    }
    if (creatures.isEmpty() && lands.isEmpty() && others.isEmpty()) {
      break;
    }
    rows=storedRows;
    others=storedOthers;
    wrap(others,rows,afterCreaturesIndex);
    for (    Row row : rows) {
      fillRow(others,rows,row);
    }
    if (creatures.isEmpty() && lands.isEmpty() && others.isEmpty()) {
      break;
    }
    cardWidth-=3;
  }
  int x, y=GUTTER_Y;
  int maxRowWidth=0;
  for (  Row row : rows) {
    int rowBottom=0;
    x=GUTTER_X;
    for (int stackIndex=0, stackCount=row.size(); stackIndex < stackCount; stackIndex++) {
      Stack stack=row.get(stackIndex);
      rowBottom=Math.max(rowBottom,y + stack.getHeight());
      x+=stack.getWidth();
    }
    y=rowBottom;
    maxRowWidth=Math.max(maxRowWidth,x);
  }
  y=GUTTER_Y;
  for (  Row row : rows) {
    int rowBottom=0;
    x=GUTTER_X;
    for (int stackIndex=0, stackCount=row.size(); stackIndex < stackCount; stackIndex++) {
      Stack stack=row.get(stackIndex);
      if (othersOnTheRight && RowType.other.isType(stack.get(0))) {
        x=playAreaWidth - GUTTER_X + extraCardSpacingX;
        for (int i=stackIndex, n=row.size(); i < n; i++) {
          x-=row.get(i).getWidth();
        }
      }
      for (int panelIndex=0, panelCount=stack.size(); panelIndex < panelCount; panelIndex++) {
        MagePermanent panel=stack.get(panelIndex);
        int stackPosition=panelCount - panelIndex - 1;
        if (jPanel != null) {
          jPanel.setComponentZOrder(panel,panelIndex);
        }
        int panelX=x + (stackPosition * stackSpacingX);
        int panelY=y + (stackPosition * stackSpacingY);
        try {
          battlefieldPanel.moveToFront(panel);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        panel.setCardBounds(panelX,panelY,cardWidth,cardHeight);
      }
      rowBottom=Math.max(rowBottom,y + stack.getHeight());
      x+=stack.getWidth();
    }
    y=rowBottom;
  }
  for (  Stack stack : allAttached) {
    for (    MagePermanent panel : stack) {
      panel.setCardBounds(0,0,cardWidth,cardHeight);
    }
  }
  return y;
}",0.9785247432306255
159302,"public PermanentView(Permanent permanent,Card card,UUID createdForPlayerId,Game game){
  super(permanent,null,permanent.getControllerId().equals(createdForPlayerId));
  this.controlled=permanent.getControllerId().equals(createdForPlayerId);
  this.rules=permanent.getRules();
  this.tapped=permanent.isTapped();
  this.flipped=permanent.isFlipped();
  this.phasedIn=permanent.isPhasedIn();
  this.summoningSickness=permanent.hasSummoningSickness();
  this.damage=permanent.getDamage();
  if (permanent.getAttachments().size() > 0) {
    attachments=new ArrayList<>();
    attachments.addAll(permanent.getAttachments());
  }
  if (isToken()) {
    original=new CardView(((PermanentToken)permanent).getToken());
    original.expansionSetCode=permanent.getExpansionSetCode();
    tokenSetCode=original.getTokenSetCode();
  }
 else {
    if (card != null) {
      original=new CardView(card);
    }
 else {
      original=null;
    }
  }
  this.transformed=permanent.isTransformed();
  this.copy=permanent.isCopy();
  if (original != null && !original.getName().equals(this.getName())) {
    if (permanent.isCopy() && permanent.isFlipCard()) {
      this.alternateName=permanent.getFlipCardName();
      this.originalName=this.getName();
    }
 else {
      this.alternateName=original.getName();
      this.originalName=this.getName();
    }
  }
  if (!permanent.getOwnerId().equals(permanent.getControllerId())) {
    Player owner=game.getPlayer(permanent.getOwnerId());
    if (owner != null) {
      this.nameOwner=owner.getName();
    }
 else {
      this.nameOwner=""String_Node_Str"";
    }
  }
 else {
    this.nameOwner=""String_Node_Str"";
  }
  if (permanent.isFaceDown() && permanent.isMorphCard()) {
    if (card != null) {
      if (controlled) {
        for (        Ability permanentAbility : permanent.getAbilities()) {
          if (permanentAbility instanceof TurnFaceUpAbility && !permanentAbility.getRuleVisible()) {
            this.rules.add(permanentAbility.getRule(true));
          }
          if (permanentAbility instanceof TurnedFaceUpTriggeredAbility) {
            this.rules.add(permanentAbility.getRule());
          }
        }
        this.name=card.getName();
        this.expansionSetCode=card.getExpansionSetCode();
        this.cardNumber=card.getCardNumber();
      }
 else {
        this.rules.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
        this.rarity=Rarity.COMMON;
      }
    }
  }
}","public PermanentView(Permanent permanent,Card card,UUID createdForPlayerId,Game game){
  super(permanent,null,permanent.getControllerId().equals(createdForPlayerId));
  this.controlled=permanent.getControllerId().equals(createdForPlayerId);
  this.rules=permanent.getRules();
  this.tapped=permanent.isTapped();
  this.flipped=permanent.isFlipped();
  this.phasedIn=permanent.isPhasedIn();
  this.summoningSickness=permanent.hasSummoningSickness();
  this.damage=permanent.getDamage();
  if (permanent.getAttachments().size() > 0) {
    attachments=new ArrayList<>();
    attachments.addAll(permanent.getAttachments());
  }
  this.attachedTo=permanent.getAttachedTo();
  if (isToken()) {
    original=new CardView(((PermanentToken)permanent).getToken());
    original.expansionSetCode=permanent.getExpansionSetCode();
    tokenSetCode=original.getTokenSetCode();
  }
 else {
    if (card != null) {
      original=new CardView(card);
    }
 else {
      original=null;
    }
  }
  this.transformed=permanent.isTransformed();
  this.copy=permanent.isCopy();
  if (original != null && !original.getName().equals(this.getName())) {
    if (permanent.isCopy() && permanent.isFlipCard()) {
      this.alternateName=permanent.getFlipCardName();
      this.originalName=this.getName();
    }
 else {
      this.alternateName=original.getName();
      this.originalName=this.getName();
    }
  }
  if (!permanent.getOwnerId().equals(permanent.getControllerId())) {
    Player owner=game.getPlayer(permanent.getOwnerId());
    if (owner != null) {
      this.nameOwner=owner.getName();
    }
 else {
      this.nameOwner=""String_Node_Str"";
    }
  }
 else {
    this.nameOwner=""String_Node_Str"";
  }
  if (permanent.isFaceDown() && permanent.isMorphCard()) {
    if (card != null) {
      if (controlled) {
        for (        Ability permanentAbility : permanent.getAbilities()) {
          if (permanentAbility instanceof TurnFaceUpAbility && !permanentAbility.getRuleVisible()) {
            this.rules.add(permanentAbility.getRule(true));
          }
          if (permanentAbility instanceof TurnedFaceUpTriggeredAbility) {
            this.rules.add(permanentAbility.getRule());
          }
        }
        this.name=card.getName();
        this.expansionSetCode=card.getExpansionSetCode();
        this.cardNumber=card.getCardNumber();
      }
 else {
        this.rules.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
        this.rarity=Rarity.COMMON;
      }
    }
  }
}",0.9908814589665652
159303,"public void pickBlockerOrder(UUID playerId,Game game){
  if (blockers.isEmpty()) {
    return;
  }
  Player player=game.getPlayer(playerId);
  List<UUID> blockerList=new ArrayList<>(blockers);
  blockerOrder.clear();
  while (true) {
    if (blockerList.size() == 1) {
      blockerOrder.add(blockerList.get(0));
      break;
    }
 else {
      List<Permanent> blockerPerms=new ArrayList<>();
      for (      UUID blockerId : blockerList) {
        blockerPerms.add(game.getPermanent(blockerId));
      }
      UUID blockerId=player.chooseBlockerOrder(blockerPerms,game);
      blockerOrder.add(blockerId);
      blockerList.remove(blockerId);
    }
  }
}","public void pickBlockerOrder(UUID playerId,Game game){
  if (blockers.isEmpty()) {
    return;
  }
  Player player=game.getPlayer(playerId);
  List<UUID> blockerList=new ArrayList<>(blockers);
  blockerOrder.clear();
  while (true && player.isInGame()) {
    if (blockerList.size() == 1) {
      blockerOrder.add(blockerList.get(0));
      break;
    }
 else {
      List<Permanent> blockerPerms=new ArrayList<>();
      for (      UUID blockerId : blockerList) {
        blockerPerms.add(game.getPermanent(blockerId));
      }
      UUID blockerId=player.chooseBlockerOrder(blockerPerms,game);
      blockerOrder.add(blockerId);
      blockerList.remove(blockerId);
    }
  }
}",0.9842696629213484
159304,"public synchronized boolean joinTournament(UUID userId,String name,String playerType,int skill) throws GameException {
  if (table.getState() != TableState.WAITING) {
    return false;
  }
  Seat seat=table.getNextAvailableSeat(playerType);
  if (seat == null) {
    throw new GameException(""String_Node_Str"");
  }
  User user=UserManager.getInstance().getUser(userId);
  if (user == null) {
    logger.fatal(new StringBuilder(""String_Node_Str"").append(name).append(""String_Node_Str"").append(userId).toString());
    return false;
  }
  if (userPlayerMap.containsKey(userId)) {
    user.showUserMessage(""String_Node_Str"",new StringBuilder(""String_Node_Str"").toString());
    return false;
  }
  Player player=createPlayer(name,seat.getPlayerType(),skill);
  if (player != null) {
    if (!player.canJoinTable(table)) {
      user.showUserMessage(""String_Node_Str"",new StringBuilder(""String_Node_Str"").append(seat.getPlayerType()).append(""String_Node_Str"").toString());
      return false;
    }
    tournament.addPlayer(player,seat.getPlayerType());
    table.joinTable(player,seat);
    logger.debug(""String_Node_Str"" + player.getId());
    if (seat.getPlayer().isHuman()) {
      user.addTable(player.getId(),table);
      user.joinedTable(table.getRoomId(),table.getId(),true);
      userPlayerMap.put(userId,player.getId());
    }
    return true;
  }
 else {
    throw new GameException(""String_Node_Str"" + seat.getPlayerType().toString() + ""String_Node_Str"");
  }
}","public synchronized boolean joinTournament(UUID userId,String name,String playerType,int skill) throws GameException {
  if (table.getState() != TableState.WAITING) {
    return false;
  }
  Seat seat=table.getNextAvailableSeat(playerType);
  if (seat == null) {
    throw new GameException(""String_Node_Str"");
  }
  User user=UserManager.getInstance().getUser(userId);
  if (user == null) {
    logger.fatal(new StringBuilder(""String_Node_Str"").append(name).append(""String_Node_Str"").append(userId).toString());
    return false;
  }
  if (userPlayerMap.containsKey(userId) && playerType.equals(""String_Node_Str"")) {
    user.showUserMessage(""String_Node_Str"",new StringBuilder(""String_Node_Str"").toString());
    return false;
  }
  Player player=createPlayer(name,seat.getPlayerType(),skill);
  if (player != null) {
    if (!player.canJoinTable(table)) {
      user.showUserMessage(""String_Node_Str"",new StringBuilder(""String_Node_Str"").append(seat.getPlayerType()).append(""String_Node_Str"").toString());
      return false;
    }
    tournament.addPlayer(player,seat.getPlayerType());
    table.joinTable(player,seat);
    logger.debug(""String_Node_Str"" + player.getId());
    if (seat.getPlayer().isHuman()) {
      user.addTable(player.getId(),table);
      user.joinedTable(table.getRoomId(),table.getId(),true);
      userPlayerMap.put(userId,player.getId());
    }
    return true;
  }
 else {
    throw new GameException(""String_Node_Str"" + seat.getPlayerType().toString() + ""String_Node_Str"");
  }
}",0.9865861837692824
159305,"public boolean applySearchAndExile(Game game,Ability source,String cardName,UUID targetPlayerId){
  Player controller=game.getPlayer(source.getControllerId());
  if (cardName != null && controller != null) {
    Player targetPlayer=game.getPlayer(targetPlayerId);
    if (targetPlayer != null) {
      FilterCard filter=new FilterCard(""String_Node_Str"" + cardName);
      filter.add(new NamePredicate(cardName));
      int cardsCount=(cardName.isEmpty() ? 0 : targetPlayer.getGraveyard().count(filter,game));
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + cardName + ""String_Node_Str""+ targetPlayer.getName());
        TargetCardInGraveyard target=new TargetCardInGraveyard((graveyardExileOptional ? 0 : cardsCount),cardsCount,filter);
        if (controller.choose(Outcome.Exile,targetPlayer.getGraveyard(),target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getGraveyard().get(targetId,game);
            if (targetCard != null) {
              targetPlayer.getGraveyard().remove(targetCard);
              controller.moveCardToExileWithInfo(targetCard,null,null,source.getSourceId(),game,Zone.GRAVEYARD);
            }
          }
        }
      }
      cardsCount=(cardName.isEmpty() ? 0 : targetPlayer.getHand().count(filter,game));
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + cardName + ""String_Node_Str""+ targetPlayer.getName());
        TargetCardInHand target=new TargetCardInHand(0,cardsCount,filter);
        if (controller.choose(Outcome.Exile,targetPlayer.getHand(),target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getHand().get(targetId,game);
            if (targetCard != null) {
              targetPlayer.getHand().remove(targetCard);
              controller.moveCardToExileWithInfo(targetCard,null,null,source.getSourceId(),game,Zone.HAND);
            }
          }
        }
      }
 else {
        if (targetPlayer.getHand().size() > 0) {
          controller.lookAtCards(targetPlayer.getName() + ""String_Node_Str"",targetPlayer.getHand(),game);
        }
      }
      Cards cardsInLibrary=new CardsImpl(Zone.LIBRARY);
      cardsInLibrary.addAll(targetPlayer.getLibrary().getCards(game));
      cardsCount=(cardName.isEmpty() ? 0 : cardsInLibrary.count(filter,game));
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + cardName + ""String_Node_Str""+ targetPlayer.getName());
        TargetCardInLibrary target=new TargetCardInLibrary(0,cardsCount,filter);
        if (controller.choose(Outcome.Exile,cardsInLibrary,target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getLibrary().remove(targetId,game);
            if (targetCard != null) {
              controller.moveCardToExileWithInfo(targetCard,null,null,source.getSourceId(),game,Zone.LIBRARY);
            }
          }
        }
      }
 else {
        controller.lookAtCards(targetPlayer.getName() + ""String_Node_Str"",cardsInLibrary,game);
      }
      targetPlayer.shuffleLibrary(game);
    }
    return true;
  }
  return false;
}","public boolean applySearchAndExile(Game game,Ability source,String cardName,UUID targetPlayerId){
  Player controller=game.getPlayer(source.getControllerId());
  if (cardName != null && controller != null) {
    Player targetPlayer=game.getPlayer(targetPlayerId);
    if (targetPlayer != null) {
      FilterCard filter=new FilterCard(""String_Node_Str"" + cardName);
      filter.add(new NamePredicate(cardName));
      int cardsCount=(cardName.isEmpty() ? 0 : targetPlayer.getGraveyard().count(filter,game));
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + cardName + ""String_Node_Str""+ targetPlayer.getName());
        TargetCard target=new TargetCard((graveyardExileOptional ? 0 : cardsCount),cardsCount,Zone.GRAVEYARD,filter);
        if (controller.choose(Outcome.Exile,targetPlayer.getGraveyard(),target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getGraveyard().get(targetId,game);
            if (targetCard != null) {
              targetPlayer.getGraveyard().remove(targetCard);
              controller.moveCardToExileWithInfo(targetCard,null,null,source.getSourceId(),game,Zone.GRAVEYARD);
            }
          }
        }
      }
      cardsCount=(cardName.isEmpty() ? 0 : targetPlayer.getHand().count(filter,game));
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + cardName + ""String_Node_Str""+ targetPlayer.getName());
        TargetCard target=new TargetCard(0,cardsCount,Zone.HAND,filter);
        if (controller.choose(Outcome.Exile,targetPlayer.getHand(),target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getHand().get(targetId,game);
            if (targetCard != null) {
              targetPlayer.getHand().remove(targetCard);
              controller.moveCardToExileWithInfo(targetCard,null,null,source.getSourceId(),game,Zone.HAND);
            }
          }
        }
      }
 else {
        if (targetPlayer.getHand().size() > 0) {
          controller.lookAtCards(targetPlayer.getName() + ""String_Node_Str"",targetPlayer.getHand(),game);
        }
      }
      Cards cardsInLibrary=new CardsImpl(Zone.LIBRARY);
      cardsInLibrary.addAll(targetPlayer.getLibrary().getCards(game));
      cardsCount=(cardName.isEmpty() ? 0 : cardsInLibrary.count(filter,game));
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + cardName + ""String_Node_Str""+ targetPlayer.getName());
        TargetCardInLibrary target=new TargetCardInLibrary(0,cardsCount,filter);
        if (controller.choose(Outcome.Exile,cardsInLibrary,target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getLibrary().remove(targetId,game);
            if (targetCard != null) {
              controller.moveCardToExileWithInfo(targetCard,null,null,source.getSourceId(),game,Zone.LIBRARY);
            }
          }
        }
      }
 else {
        controller.lookAtCards(targetPlayer.getName() + ""String_Node_Str"",cardsInLibrary,game);
      }
      targetPlayer.shuffleLibrary(game);
    }
    return true;
  }
  return false;
}",0.8388361224182119
159306,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Map<UUID,Map<Integer,Set<UUID>>> playerPermanents=new LinkedHashMap<>();
    PlayerList playerList=game.getState().getPlayerList();
    while (!playerList.get().equals(source.getControllerId()) && controller.isInGame()) {
      playerList.getNext();
    }
    Player currentPlayer=game.getPlayer(playerList.get());
    Player nextPlayer;
    UUID firstNextPlayer=null;
    while (!getNextPlayerInDirection(true,playerList,game).equals(firstNextPlayer) && controller.isInGame()) {
      nextPlayer=game.getPlayer(playerList.get());
      if (nextPlayer == null) {
        return false;
      }
      if (firstNextPlayer == null) {
        firstNextPlayer=nextPlayer.getId();
      }
      if (currentPlayer != null && controller.getInRange().contains(currentPlayer.getId())) {
        Map<Integer,Set<UUID>> playerPiles=new HashMap<>();
        for (int i=1; i < 4; i++) {
          playerPiles.put(i,new LinkedHashSet<UUID>());
        }
        playerPermanents.put(currentPlayer.getId(),playerPiles);
        for (int i=1; i < 3; i++) {
          FilterPermanent filter=new FilterPermanent(new StringBuilder(""String_Node_Str"").append(i == 1 ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").toString());
          filter.add(new ControllerIdPredicate(currentPlayer.getId()));
          Target target;
          if (i == 1) {
            target=new TargetPermanent(0,Integer.MAX_VALUE,filter,true);
          }
 else {
            target=new TargetSecondPilePermanent(playerPiles.get(1),filter);
          }
          currentPlayer.chooseTarget(outcome,target,source,game);
          StringBuilder message=new StringBuilder(currentPlayer.getName()).append(""String_Node_Str"").append(i).append(""String_Node_Str"");
          if (target.getTargets().isEmpty()) {
            message.append(""String_Node_Str"");
          }
 else {
            for (            UUID permanentId : target.getTargets()) {
              Permanent permanent=game.getPermanent(permanentId);
              if (permanent != null) {
                message.append(permanent.getName()).append(""String_Node_Str"");
              }
            }
          }
          game.informPlayers(message.toString());
          playerPiles.get(i).addAll(target.getTargets());
        }
        StringBuilder message=new StringBuilder(currentPlayer.getName()).append(""String_Node_Str"");
        for (        Permanent permanent : game.getState().getBattlefield().getAllActivePermanents(currentPlayer.getId())) {
          if (!playerPiles.get(1).contains(permanent.getId()) && !playerPiles.get(2).contains(permanent.getId())) {
            playerPiles.get(3).add(permanent.getId());
            message.append(permanent.getName()).append(""String_Node_Str"");
          }
        }
        if (playerPiles.get(3).isEmpty()) {
          message.append(""String_Node_Str"");
        }
        game.informPlayers(message.toString());
      }
      currentPlayer=nextPlayer;
    }
    for (    Map.Entry<UUID,Map<Integer,Set<UUID>>> playerPiles : playerPermanents.entrySet()) {
      Player player=game.getPlayer(playerPiles.getKey());
      if (player != null) {
        int sacrificePile=rnd.nextInt(3) + 1;
        game.informPlayers(new StringBuilder(player.getName()).append(""String_Node_Str"").append(sacrificePile).toString());
        for (        UUID permanentId : playerPiles.getValue().get(sacrificePile)) {
          Permanent permanent=game.getPermanent(permanentId);
          if (permanent != null) {
            permanent.sacrifice(source.getSourceId(),game);
          }
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Map<UUID,Map<Integer,Set<UUID>>> playerPermanents=new LinkedHashMap<>();
    PlayerList playerList=game.getState().getPlayerList();
    while (!playerList.get().equals(source.getControllerId()) && controller.isInGame()) {
      playerList.getNext();
    }
    Player currentPlayer=game.getPlayer(playerList.get());
    Player nextPlayer;
    UUID firstNextPlayer=null;
    while (!getNextPlayerInDirection(true,playerList,game).equals(firstNextPlayer) && controller.isInGame()) {
      nextPlayer=game.getPlayer(playerList.get());
      if (nextPlayer == null) {
        return false;
      }
      if (firstNextPlayer == null) {
        firstNextPlayer=nextPlayer.getId();
      }
      if (currentPlayer != null && controller.getInRange().contains(currentPlayer.getId())) {
        Map<Integer,Set<UUID>> playerPiles=new HashMap<>();
        for (int i=1; i < 4; i++) {
          playerPiles.put(i,new LinkedHashSet<UUID>());
        }
        playerPermanents.put(currentPlayer.getId(),playerPiles);
        for (int i=1; i < 3; i++) {
          FilterPermanent filter=new FilterPermanent(new StringBuilder(""String_Node_Str"").append(i == 1 ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").toString());
          filter.add(new ControllerIdPredicate(currentPlayer.getId()));
          Target target;
          if (i == 1) {
            target=new TargetPermanent(0,Integer.MAX_VALUE,filter,true);
          }
 else {
            target=new TargetSecondPilePermanent(playerPiles.get(1),filter);
          }
          target.setRequired(false);
          currentPlayer.chooseTarget(outcome,target,source,game);
          StringBuilder message=new StringBuilder(currentPlayer.getName()).append(""String_Node_Str"").append(i).append(""String_Node_Str"");
          if (target.getTargets().isEmpty()) {
            message.append(""String_Node_Str"");
          }
 else {
            for (            UUID permanentId : target.getTargets()) {
              Permanent permanent=game.getPermanent(permanentId);
              if (permanent != null) {
                message.append(permanent.getName()).append(""String_Node_Str"");
              }
            }
          }
          game.informPlayers(message.toString());
          playerPiles.get(i).addAll(target.getTargets());
        }
        StringBuilder message=new StringBuilder(currentPlayer.getName()).append(""String_Node_Str"");
        for (        Permanent permanent : game.getState().getBattlefield().getAllActivePermanents(currentPlayer.getId())) {
          if (!playerPiles.get(1).contains(permanent.getId()) && !playerPiles.get(2).contains(permanent.getId())) {
            playerPiles.get(3).add(permanent.getId());
            message.append(permanent.getName()).append(""String_Node_Str"");
          }
        }
        if (playerPiles.get(3).isEmpty()) {
          message.append(""String_Node_Str"");
        }
        game.informPlayers(message.toString());
      }
      currentPlayer=nextPlayer;
    }
    for (    Map.Entry<UUID,Map<Integer,Set<UUID>>> playerPiles : playerPermanents.entrySet()) {
      Player player=game.getPlayer(playerPiles.getKey());
      if (player != null) {
        int sacrificePile=rnd.nextInt(3) + 1;
        game.informPlayers(new StringBuilder(player.getName()).append(""String_Node_Str"").append(sacrificePile).toString());
        for (        UUID permanentId : playerPiles.getValue().get(sacrificePile)) {
          Permanent permanent=game.getPermanent(permanentId);
          if (permanent != null) {
            permanent.sacrifice(source.getSourceId(),game);
          }
        }
      }
    }
    return true;
  }
  return false;
}",0.9951116395825076
159307,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  Player targetPlayer=game.getPlayer(source.getFirstTarget());
  if (player != null && targetPlayer != null) {
    int count=game.getBattlefield().countAll(new FilterPermanent(),targetPlayer.getId(),game);
    TargetPermanent target=new TargetPermanent(0,count,new FilterPermanent(""String_Node_Str""),false);
    List<Permanent> pile1=new ArrayList<Permanent>();
    if (player.choose(Outcome.Neutral,target,source.getSourceId(),game)) {
      List<UUID> targets=target.getTargets();
      for (      UUID targetId : targets) {
        Permanent p=game.getPermanent(targetId);
        if (p != null) {
          pile1.add(p);
        }
      }
    }
    List<Permanent> pile2=new ArrayList<Permanent>();
    for (    Permanent p : game.getBattlefield().getAllActivePermanents(targetPlayer.getId())) {
      if (!pile1.contains(p)) {
        pile2.add(p);
      }
    }
    boolean choice=targetPlayer.choosePile(Outcome.DestroyPermanent,""String_Node_Str"",pile1,pile2,game);
    if (choice) {
      sacrificePermanents(pile1,game,source);
    }
 else {
      sacrificePermanents(pile2,game,source);
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  Player targetPlayer=game.getPlayer(source.getFirstTarget());
  if (player != null && targetPlayer != null) {
    int count=game.getBattlefield().countAll(new FilterPermanent(),targetPlayer.getId(),game);
    TargetPermanent target=new TargetPermanent(0,count,new FilterPermanent(""String_Node_Str""),false);
    List<Permanent> pile1=new ArrayList<>();
    target.setRequired(false);
    if (player.choose(Outcome.Neutral,target,source.getSourceId(),game)) {
      List<UUID> targets=target.getTargets();
      for (      UUID targetId : targets) {
        Permanent p=game.getPermanent(targetId);
        if (p != null) {
          pile1.add(p);
        }
      }
    }
    List<Permanent> pile2=new ArrayList<>();
    for (    Permanent p : game.getBattlefield().getAllActivePermanents(targetPlayer.getId())) {
      if (!pile1.contains(p)) {
        pile2.add(p);
      }
    }
    boolean choice=targetPlayer.choosePile(Outcome.DestroyPermanent,""String_Node_Str"",pile1,pile2,game);
    if (choice) {
      sacrificePermanents(pile1,game,source);
    }
 else {
      sacrificePermanents(pile2,game,source);
    }
    return true;
  }
  return false;
}",0.9806094182825484
159308,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player == null) {
    return false;
  }
  Cards cards=new CardsImpl(Zone.PICK);
  int count=Math.min(player.getLibrary().size(),5);
  for (int i=0; i < count; i++) {
    Card card=player.getLibrary().removeFromTop(game);
    if (card != null) {
      cards.add(card);
      game.setZone(card.getId(),Zone.PICK);
    }
  }
  player.revealCards(""String_Node_Str"",cards,game);
  Set<UUID> opponents=game.getOpponents(source.getControllerId());
  if (!opponents.isEmpty()) {
    Player opponent=game.getPlayer(opponents.iterator().next());
    TargetCard target=new TargetCard(0,cards.size(),Zone.PICK,new FilterCard(""String_Node_Str""));
    Cards pile1=new CardsImpl();
    if (opponent.choose(Outcome.Neutral,cards,target,game)) {
      List<UUID> targets=target.getTargets();
      for (      UUID targetId : targets) {
        Card card=cards.get(targetId,game);
        if (card != null) {
          pile1.add(card);
          cards.remove(card);
        }
      }
    }
    player.revealCards(""String_Node_Str"",pile1,game);
    player.revealCards(""String_Node_Str"",cards,game);
    Choice choice=new ChoiceImpl(true);
    choice.setMessage(""String_Node_Str"");
    StringBuilder sb=new StringBuilder(""String_Node_Str"");
    for (    UUID cardId : pile1) {
      Card card=pile1.get(cardId,game);
      if (card != null) {
        sb.append(card.getName()).append(""String_Node_Str"");
      }
    }
    sb.delete(sb.length() - 2,sb.length());
    choice.getChoices().add(sb.toString());
    sb=new StringBuilder(""String_Node_Str"");
    for (    UUID cardId : cards) {
      Card card=cards.get(cardId,game);
      if (card != null) {
        sb.append(card.getName()).append(""String_Node_Str"");
      }
    }
    sb.delete(sb.length() - 2,sb.length());
    choice.getChoices().add(sb.toString());
    Zone pile1Zone=Zone.GRAVEYARD;
    Zone pile2Zone=Zone.HAND;
    if (player.choose(Outcome.Neutral,choice,game)) {
      if (choice.getChoice().startsWith(""String_Node_Str"")) {
        pile1Zone=Zone.HAND;
        pile2Zone=Zone.GRAVEYARD;
      }
    }
    for (    UUID cardUuid : pile1) {
      Card card=pile1.get(cardUuid,game);
      if (card != null) {
        card.moveToZone(pile1Zone,source.getId(),game,false);
      }
    }
    for (    UUID cardUuid : cards) {
      Card card=cards.get(cardUuid,game);
      if (card != null) {
        card.moveToZone(pile2Zone,source.getId(),game,false);
      }
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player == null) {
    return false;
  }
  Cards cards=new CardsImpl(Zone.PICK);
  int count=Math.min(player.getLibrary().size(),5);
  for (int i=0; i < count; i++) {
    Card card=player.getLibrary().removeFromTop(game);
    if (card != null) {
      cards.add(card);
      game.setZone(card.getId(),Zone.PICK);
    }
  }
  player.revealCards(""String_Node_Str"",cards,game);
  Set<UUID> opponents=game.getOpponents(source.getControllerId());
  if (!opponents.isEmpty()) {
    Player opponent=game.getPlayer(opponents.iterator().next());
    TargetCard target=new TargetCard(0,cards.size(),Zone.PICK,new FilterCard(""String_Node_Str""));
    target.setRequired(false);
    Cards pile1=new CardsImpl();
    if (opponent.choose(Outcome.Neutral,cards,target,game)) {
      List<UUID> targets=target.getTargets();
      for (      UUID targetId : targets) {
        Card card=cards.get(targetId,game);
        if (card != null) {
          pile1.add(card);
          cards.remove(card);
        }
      }
    }
    player.revealCards(""String_Node_Str"",pile1,game);
    player.revealCards(""String_Node_Str"",cards,game);
    Choice choice=new ChoiceImpl(true);
    choice.setMessage(""String_Node_Str"");
    StringBuilder sb=new StringBuilder(""String_Node_Str"");
    for (    UUID cardId : pile1) {
      Card card=pile1.get(cardId,game);
      if (card != null) {
        sb.append(card.getName()).append(""String_Node_Str"");
      }
    }
    sb.delete(sb.length() - 2,sb.length());
    choice.getChoices().add(sb.toString());
    sb=new StringBuilder(""String_Node_Str"");
    for (    UUID cardId : cards) {
      Card card=cards.get(cardId,game);
      if (card != null) {
        sb.append(card.getName()).append(""String_Node_Str"");
      }
    }
    sb.delete(sb.length() - 2,sb.length());
    choice.getChoices().add(sb.toString());
    Zone pile1Zone=Zone.GRAVEYARD;
    Zone pile2Zone=Zone.HAND;
    if (player.choose(Outcome.Neutral,choice,game)) {
      if (choice.getChoice().startsWith(""String_Node_Str"")) {
        pile1Zone=Zone.HAND;
        pile2Zone=Zone.GRAVEYARD;
      }
    }
    for (    UUID cardUuid : pile1) {
      Card card=pile1.get(cardUuid,game);
      if (card != null) {
        card.moveToZone(pile1Zone,source.getId(),game,false);
      }
    }
    for (    UUID cardUuid : cards) {
      Card card=cards.get(cardUuid,game);
      if (card != null) {
        card.moveToZone(pile2Zone,source.getId(),game,false);
      }
    }
  }
  return true;
}",0.993981751116288
159309,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player == null) {
    return false;
  }
  Cards cards=new CardsImpl(Zone.PICK);
  int count=Math.min(player.getLibrary().size(),5);
  for (int i=0; i < count; i++) {
    Card card=player.getLibrary().removeFromTop(game);
    if (card != null) {
      cards.add(card);
      game.setZone(card.getId(),Zone.PICK);
    }
  }
  player.revealCards(""String_Node_Str"",cards,game);
  Set<UUID> opponents=game.getOpponents(source.getControllerId());
  if (!opponents.isEmpty()) {
    Player opponent=game.getPlayer(opponents.iterator().next());
    TargetCard target=new TargetCard(0,cards.size(),Zone.PICK,new FilterCard(""String_Node_Str""));
    List<Card> pile1=new ArrayList<Card>();
    Cards pile1CardsIds=new CardsImpl();
    if (opponent.choose(Outcome.Neutral,cards,target,game)) {
      List<UUID> targets=target.getTargets();
      for (      UUID targetId : targets) {
        Card card=game.getCard(targetId);
        if (card != null) {
          pile1.add(card);
          pile1CardsIds.add(card.getId());
        }
      }
    }
    List<Card> pile2=new ArrayList<Card>();
    Cards pile2CardsIds=new CardsImpl();
    for (    UUID cardId : cards) {
      Card card=game.getCard(cardId);
      if (card != null && !pile1.contains(card)) {
        pile2.add(card);
        pile2CardsIds.add(card.getId());
      }
    }
    boolean choice=player.choosePile(Outcome.DestroyPermanent,""String_Node_Str"",pile1,pile2,game);
    Zone pile1Zone=Zone.GRAVEYARD;
    Zone pile2Zone=Zone.HAND;
    if (choice) {
      pile1Zone=Zone.HAND;
      pile2Zone=Zone.GRAVEYARD;
    }
    StringBuilder sb=new StringBuilder(""String_Node_Str"").append(pile1Zone.equals(Zone.HAND) ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
    int i=0;
    for (    UUID cardUuid : pile1CardsIds) {
      i++;
      Card card=game.getCard(cardUuid);
      if (card != null) {
        sb.append(card.getName());
        if (i < pile1CardsIds.size()) {
          sb.append(""String_Node_Str"");
        }
        card.moveToZone(pile1Zone,source.getId(),game,false);
      }
    }
    game.informPlayers(sb.toString());
    sb=new StringBuilder(""String_Node_Str"").append(pile2Zone.equals(Zone.HAND) ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
    i=0;
    for (    UUID cardUuid : pile2CardsIds) {
      Card card=game.getCard(cardUuid);
      if (card != null) {
        i++;
        sb.append(""String_Node_Str"").append(card.getName());
        if (i < pile2CardsIds.size()) {
          sb.append(""String_Node_Str"");
        }
        card.moveToZone(pile2Zone,source.getId(),game,false);
      }
    }
    game.informPlayers(sb.toString());
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player == null) {
    return false;
  }
  Cards cards=new CardsImpl(Zone.PICK);
  int count=Math.min(player.getLibrary().size(),5);
  for (int i=0; i < count; i++) {
    Card card=player.getLibrary().removeFromTop(game);
    if (card != null) {
      cards.add(card);
      game.setZone(card.getId(),Zone.PICK);
    }
  }
  player.revealCards(""String_Node_Str"",cards,game);
  Set<UUID> opponents=game.getOpponents(source.getControllerId());
  if (!opponents.isEmpty()) {
    Player opponent=game.getPlayer(opponents.iterator().next());
    TargetCard target=new TargetCard(0,cards.size(),Zone.PICK,new FilterCard(""String_Node_Str""));
    target.setRequired(false);
    List<Card> pile1=new ArrayList<>();
    Cards pile1CardsIds=new CardsImpl();
    if (opponent.choose(Outcome.Neutral,cards,target,game)) {
      List<UUID> targets=target.getTargets();
      for (      UUID targetId : targets) {
        Card card=game.getCard(targetId);
        if (card != null) {
          pile1.add(card);
          pile1CardsIds.add(card.getId());
        }
      }
    }
    List<Card> pile2=new ArrayList<>();
    Cards pile2CardsIds=new CardsImpl();
    for (    UUID cardId : cards) {
      Card card=game.getCard(cardId);
      if (card != null && !pile1.contains(card)) {
        pile2.add(card);
        pile2CardsIds.add(card.getId());
      }
    }
    boolean choice=player.choosePile(Outcome.DestroyPermanent,""String_Node_Str"",pile1,pile2,game);
    Zone pile1Zone=Zone.GRAVEYARD;
    Zone pile2Zone=Zone.HAND;
    if (choice) {
      pile1Zone=Zone.HAND;
      pile2Zone=Zone.GRAVEYARD;
    }
    StringBuilder sb=new StringBuilder(""String_Node_Str"").append(pile1Zone.equals(Zone.HAND) ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
    int i=0;
    for (    UUID cardUuid : pile1CardsIds) {
      i++;
      Card card=game.getCard(cardUuid);
      if (card != null) {
        sb.append(card.getName());
        if (i < pile1CardsIds.size()) {
          sb.append(""String_Node_Str"");
        }
        card.moveToZone(pile1Zone,source.getId(),game,false);
      }
    }
    game.informPlayers(sb.toString());
    sb=new StringBuilder(""String_Node_Str"").append(pile2Zone.equals(Zone.HAND) ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
    i=0;
    for (    UUID cardUuid : pile2CardsIds) {
      Card card=game.getCard(cardUuid);
      if (card != null) {
        i++;
        sb.append(""String_Node_Str"").append(card.getName());
        if (i < pile2CardsIds.size()) {
          sb.append(""String_Node_Str"");
        }
        card.moveToZone(pile2Zone,source.getId(),game,false);
      }
    }
    game.informPlayers(sb.toString());
  }
  return true;
}",0.993059263214095
159310,"@Override public boolean apply(Game game,Ability source){
  Player you=game.getPlayer(source.getControllerId());
  if (you == null) {
    return false;
  }
  Cards pile2=new CardsImpl();
  int max=Math.min(you.getLibrary().size(),5);
  for (int i=0; i < max; i++) {
    Card card=you.getLibrary().removeFromTop(game);
    if (card != null) {
      card.moveToExile(source.getSourceId(),""String_Node_Str"",source.getId(),game);
      pile2.add(card);
    }
  }
  Player opponent=game.getPlayer(source.getFirstTarget());
  if (opponent != null) {
    TargetCard target=new TargetCard(0,pile2.size(),Zone.EXILED,new FilterCard(""String_Node_Str""));
    Cards pile1=new CardsImpl();
    List<Card> pileOne=new ArrayList<Card>();
    List<Card> pileTwo=new ArrayList<Card>();
    if (opponent.choose(Outcome.Neutral,pile2,target,game)) {
      List<UUID> targets=target.getTargets();
      for (      UUID targetId : targets) {
        Card card=pile2.get(targetId,game);
        if (card != null) {
          pile1.add(card);
          pile2.remove(card);
        }
      }
    }
    for (    UUID cardID : pile1) {
      Card card=pile1.get(cardID,game);
      pileOne.add(card);
    }
    for (    UUID cardId : pile2) {
      Card card=pile2.get(cardId,game);
      pileTwo.add(card);
    }
    you.revealCards(""String_Node_Str"",pile1,game);
    you.revealCards(""String_Node_Str"",pile2,game);
    boolean choice=you.choosePile(Outcome.PlayForFree,""String_Node_Str"",pileOne,pileTwo,game);
    if (choice) {
      game.informPlayer(you,you.getName() + ""String_Node_Str"");
      while (!pileOne.isEmpty() && you.chooseUse(Outcome.PlayForFree,""String_Node_Str"",game)) {
        TargetCard targetExiledCard=new TargetCard(Zone.EXILED,new FilterCard());
        if (you.chooseTarget(Outcome.PlayForFree,pile1,targetExiledCard,source,game)) {
          Card card=pile1.get(targetExiledCard.getFirstTarget(),game);
          if (card != null) {
            if (card.getCardType().contains(CardType.LAND)) {
              you.playLand(card,game);
              pileOne.remove(card);
              pile1.remove(card);
            }
 else {
              you.cast(card.getSpellAbility(),game,true);
              pileOne.remove(card);
              pile1.remove(card);
            }
          }
        }
      }
    }
 else {
      game.informPlayer(you,you.getName() + ""String_Node_Str"");
      while (!pileTwo.isEmpty() && you.chooseUse(Outcome.PlayForFree,""String_Node_Str"",game)) {
        TargetCard targetExiledCard=new TargetCard(Zone.EXILED,new FilterCard());
        if (you.chooseTarget(Outcome.PlayForFree,pile2,targetExiledCard,source,game)) {
          Card card=pile2.get(targetExiledCard.getFirstTarget(),game);
          if (card != null) {
            if (card.getCardType().contains(CardType.LAND)) {
              you.playLand(card,game);
              pileTwo.remove(card);
              pile2.remove(card);
            }
 else {
              you.cast(card.getSpellAbility(),game,true);
              pileTwo.remove(card);
              pile2.remove(card);
            }
          }
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player you=game.getPlayer(source.getControllerId());
  if (you == null) {
    return false;
  }
  Cards pile2=new CardsImpl();
  int max=Math.min(you.getLibrary().size(),5);
  for (int i=0; i < max; i++) {
    Card card=you.getLibrary().removeFromTop(game);
    if (card != null) {
      card.moveToExile(source.getSourceId(),""String_Node_Str"",source.getId(),game);
      pile2.add(card);
    }
  }
  Player opponent=game.getPlayer(source.getFirstTarget());
  if (opponent != null) {
    TargetCard target=new TargetCard(0,pile2.size(),Zone.EXILED,new FilterCard(""String_Node_Str""));
    target.setRequired(false);
    Cards pile1=new CardsImpl();
    List<Card> pileOne=new ArrayList<>();
    List<Card> pileTwo=new ArrayList<>();
    if (opponent.choose(Outcome.Neutral,pile2,target,game)) {
      List<UUID> targets=target.getTargets();
      for (      UUID targetId : targets) {
        Card card=pile2.get(targetId,game);
        if (card != null) {
          pile1.add(card);
          pile2.remove(card);
        }
      }
    }
    for (    UUID cardID : pile1) {
      Card card=pile1.get(cardID,game);
      pileOne.add(card);
    }
    for (    UUID cardId : pile2) {
      Card card=pile2.get(cardId,game);
      pileTwo.add(card);
    }
    you.revealCards(""String_Node_Str"",pile1,game);
    you.revealCards(""String_Node_Str"",pile2,game);
    boolean choice=you.choosePile(Outcome.PlayForFree,""String_Node_Str"",pileOne,pileTwo,game);
    if (choice) {
      game.informPlayer(you,you.getName() + ""String_Node_Str"");
      while (!pileOne.isEmpty() && you.chooseUse(Outcome.PlayForFree,""String_Node_Str"",game)) {
        TargetCard targetExiledCard=new TargetCard(Zone.EXILED,new FilterCard());
        if (you.chooseTarget(Outcome.PlayForFree,pile1,targetExiledCard,source,game)) {
          Card card=pile1.get(targetExiledCard.getFirstTarget(),game);
          if (card != null) {
            if (card.getCardType().contains(CardType.LAND)) {
              you.playLand(card,game);
              pileOne.remove(card);
              pile1.remove(card);
            }
 else {
              you.cast(card.getSpellAbility(),game,true);
              pileOne.remove(card);
              pile1.remove(card);
            }
          }
        }
      }
    }
 else {
      game.informPlayer(you,you.getName() + ""String_Node_Str"");
      while (!pileTwo.isEmpty() && you.chooseUse(Outcome.PlayForFree,""String_Node_Str"",game)) {
        TargetCard targetExiledCard=new TargetCard(Zone.EXILED,new FilterCard());
        if (you.chooseTarget(Outcome.PlayForFree,pile2,targetExiledCard,source,game)) {
          Card card=pile2.get(targetExiledCard.getFirstTarget(),game);
          if (card != null) {
            if (card.getCardType().contains(CardType.LAND)) {
              you.playLand(card,game);
              pileTwo.remove(card);
              pile2.remove(card);
            }
 else {
              you.cast(card.getSpellAbility(),game,true);
              pileTwo.remove(card);
              pile2.remove(card);
            }
          }
        }
      }
    }
    return true;
  }
  return false;
}",0.9938378890820034
159311,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player == null) {
    return false;
  }
  Cards cards=new CardsImpl(Zone.PICK);
  int count=Math.min(player.getLibrary().size(),5);
  for (int i=0; i < count; i++) {
    Card card=player.getLibrary().removeFromTop(game);
    if (card != null) {
      cards.add(card);
      game.setZone(card.getId(),Zone.PICK);
    }
  }
  player.revealCards(""String_Node_Str"",cards,game);
  Player opponent=game.getPlayer(this.getTargetPointer().getFirst(game,source));
  if (opponent != null) {
    TargetCard target=new TargetCard(0,cards.size(),Zone.PICK,new FilterCard(""String_Node_Str""));
    List<Card> pile1=new ArrayList<Card>();
    Cards pile1CardsIds=new CardsImpl();
    if (player.choose(Outcome.Neutral,cards,target,game)) {
      List<UUID> targets=target.getTargets();
      for (      UUID targetId : targets) {
        Card card=game.getCard(targetId);
        if (card != null) {
          pile1.add(card);
          pile1CardsIds.add(card.getId());
        }
      }
    }
    List<Card> pile2=new ArrayList<Card>();
    Cards pile2CardsIds=new CardsImpl();
    for (    UUID cardId : cards) {
      Card card=game.getCard(cardId);
      if (card != null && !pile1.contains(card)) {
        pile2.add(card);
        pile2CardsIds.add(card.getId());
      }
    }
    boolean choice=opponent.choosePile(Outcome.Detriment,new StringBuilder(""String_Node_Str"").append(player.getName()).append(""String_Node_Str"").toString(),pile1,pile2,game);
    Zone pile1Zone=Zone.GRAVEYARD;
    Zone pile2Zone=Zone.HAND;
    if (choice) {
      pile1Zone=Zone.HAND;
      pile2Zone=Zone.GRAVEYARD;
    }
    StringBuilder sb=new StringBuilder(""String_Node_Str"").append(pile1Zone.equals(Zone.HAND) ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
    int i=0;
    for (    UUID cardUuid : pile1CardsIds) {
      i++;
      Card card=game.getCard(cardUuid);
      if (card != null) {
        sb.append(card.getName());
        if (i < pile1CardsIds.size()) {
          sb.append(""String_Node_Str"");
        }
        card.moveToZone(pile1Zone,source.getId(),game,false);
      }
    }
    game.informPlayers(sb.toString());
    sb=new StringBuilder(""String_Node_Str"").append(pile2Zone.equals(Zone.HAND) ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
    i=0;
    for (    UUID cardUuid : pile2CardsIds) {
      Card card=game.getCard(cardUuid);
      if (card != null) {
        i++;
        sb.append(""String_Node_Str"").append(card.getName());
        if (i < pile2CardsIds.size()) {
          sb.append(""String_Node_Str"");
        }
        card.moveToZone(pile2Zone,source.getId(),game,false);
      }
    }
    game.informPlayers(sb.toString());
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player == null) {
    return false;
  }
  Cards cards=new CardsImpl(Zone.PICK);
  int count=Math.min(player.getLibrary().size(),5);
  for (int i=0; i < count; i++) {
    Card card=player.getLibrary().removeFromTop(game);
    if (card != null) {
      cards.add(card);
      game.setZone(card.getId(),Zone.PICK);
    }
  }
  player.revealCards(""String_Node_Str"",cards,game);
  Player opponent=game.getPlayer(this.getTargetPointer().getFirst(game,source));
  if (opponent != null) {
    TargetCard target=new TargetCard(0,cards.size(),Zone.PICK,new FilterCard(""String_Node_Str""));
    List<Card> pile1=new ArrayList<>();
    Cards pile1CardsIds=new CardsImpl();
    target.setRequired(false);
    if (player.choose(Outcome.Neutral,cards,target,game)) {
      List<UUID> targets=target.getTargets();
      for (      UUID targetId : targets) {
        Card card=game.getCard(targetId);
        if (card != null) {
          pile1.add(card);
          pile1CardsIds.add(card.getId());
        }
      }
    }
    List<Card> pile2=new ArrayList<>();
    Cards pile2CardsIds=new CardsImpl();
    for (    UUID cardId : cards) {
      Card card=game.getCard(cardId);
      if (card != null && !pile1.contains(card)) {
        pile2.add(card);
        pile2CardsIds.add(card.getId());
      }
    }
    boolean choice=opponent.choosePile(Outcome.Detriment,new StringBuilder(""String_Node_Str"").append(player.getName()).append(""String_Node_Str"").toString(),pile1,pile2,game);
    Zone pile1Zone=Zone.GRAVEYARD;
    Zone pile2Zone=Zone.HAND;
    if (choice) {
      pile1Zone=Zone.HAND;
      pile2Zone=Zone.GRAVEYARD;
    }
    StringBuilder sb=new StringBuilder(""String_Node_Str"").append(pile1Zone.equals(Zone.HAND) ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
    int i=0;
    for (    UUID cardUuid : pile1CardsIds) {
      i++;
      Card card=game.getCard(cardUuid);
      if (card != null) {
        sb.append(card.getName());
        if (i < pile1CardsIds.size()) {
          sb.append(""String_Node_Str"");
        }
        card.moveToZone(pile1Zone,source.getId(),game,false);
      }
    }
    game.informPlayers(sb.toString());
    sb=new StringBuilder(""String_Node_Str"").append(pile2Zone.equals(Zone.HAND) ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
    i=0;
    for (    UUID cardUuid : pile2CardsIds) {
      Card card=game.getCard(cardUuid);
      if (card != null) {
        i++;
        sb.append(""String_Node_Str"").append(card.getName());
        if (i < pile2CardsIds.size()) {
          sb.append(""String_Node_Str"");
        }
        card.moveToZone(pile2Zone,source.getId(),game,false);
      }
    }
    game.informPlayers(sb.toString());
  }
  return true;
}",0.9931058865122856
159312,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Card card=game.getCard(source.getSourceId());
    if (card != null) {
switch (game.getState().getZone(card.getId())) {
case BATTLEFIELD:
        Permanent permanent=game.getPermanent(source.getSourceId());
      if (permanent != null) {
        controller.moveCardToHandWithInfo(card,source.getSourceId(),game,Zone.BATTLEFIELD);
      }
    break;
case GRAVEYARD:
  if (!fromBattlefieldOnly) {
    controller.moveCardToHandWithInfo(card,source.getSourceId(),game,Zone.GRAVEYARD);
  }
}
}
}
return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Card card=game.getCard(source.getSourceId());
    if (card != null) {
switch (game.getState().getZone(card.getId())) {
case BATTLEFIELD:
        Permanent permanent=game.getPermanent(source.getSourceId());
      if (permanent != null) {
        return controller.moveCardToHandWithInfo(permanent,source.getSourceId(),game,Zone.BATTLEFIELD);
      }
    break;
case GRAVEYARD:
  if (!fromBattlefieldOnly) {
    return controller.moveCardToHandWithInfo(card,source.getSourceId(),game,Zone.GRAVEYARD);
  }
}
}
}
return false;
}",0.9797449362340586
159313,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    Spell spell=(Spell)game.getStack().getStackObject(source.getSourceId());
    if (spell != null) {
      if (spell.getFromZone() == Zone.GRAVEYARD) {
        target=new TargetCardInLibrary(2,new FilterCard());
      }
 else {
        target=new TargetCardInLibrary();
      }
      if (player.searchLibrary(target,game)) {
        if (target.getTargets().size() > 0) {
          for (          UUID cardId : (List<UUID>)target.getTargets()) {
            Card card=player.getLibrary().remove(cardId,game);
            if (card != null)             card.moveToZone(Zone.HAND,source.getId(),game,false);
          }
        }
      }
      player.shuffleLibrary(game);
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    Spell spell=(Spell)game.getStack().getStackObject(source.getSourceId());
    if (spell != null) {
      if (spell.getFromZone() == Zone.GRAVEYARD) {
        target=new TargetCardInLibrary(2,new FilterCard());
      }
 else {
        target=new TargetCardInLibrary();
      }
      if (player.searchLibrary(target,game)) {
        if (target.getTargets().size() > 0) {
          for (          UUID cardId : (List<UUID>)target.getTargets()) {
            Card card=player.getLibrary().remove(cardId,game);
            if (card != null) {
              card.moveToZone(Zone.HAND,source.getId(),game,false);
            }
          }
        }
      }
      player.shuffleLibrary(game);
      return true;
    }
  }
  return false;
}",0.9895953757225432
159314,"@Override public boolean apply(Game game,Ability source){
  TargetCardInLibrary target=new TargetCardInLibrary(0,2,new FilterBasicLandCard());
  Player player=game.getPlayer(source.getControllerId());
  if (player.searchLibrary(target,game)) {
    if (target.getTargets().size() > 0) {
      Cards revealed=new CardsImpl();
      for (      UUID cardId : (List<UUID>)target.getTargets()) {
        Card card=player.getLibrary().getCard(cardId,game);
        revealed.add(card);
      }
      player.revealCards(""String_Node_Str"",revealed,game);
      if (target.getTargets().size() == 2) {
        TargetCard target2=new TargetCard(Zone.PICK,filter);
        player.choose(Outcome.Benefit,revealed,target2,game);
        Card card=revealed.get(target2.getFirstTarget(),game);
        card.putOntoBattlefield(game,Zone.LIBRARY,source.getId(),source.getControllerId());
        revealed.remove(card);
        Permanent permanent=game.getPermanent(card.getId());
        if (permanent != null)         permanent.setTapped(true);
        card=revealed.getCards(game).iterator().next();
        card.moveToZone(Zone.HAND,source.getId(),game,false);
      }
 else       if (target.getTargets().size() == 1) {
        Card card=revealed.getCards(game).iterator().next();
        card.putOntoBattlefield(game,Zone.LIBRARY,source.getId(),source.getControllerId());
        Permanent permanent=game.getPermanent(card.getId());
        if (permanent != null)         permanent.setTapped(true);
      }
    }
    player.shuffleLibrary(game);
    return true;
  }
  player.shuffleLibrary(game);
  return false;
}","@Override public boolean apply(Game game,Ability source){
  TargetCardInLibrary target=new TargetCardInLibrary(0,2,new FilterBasicLandCard());
  Player player=game.getPlayer(source.getControllerId());
  if (player.searchLibrary(target,game)) {
    if (target.getTargets().size() > 0) {
      Cards revealed=new CardsImpl();
      for (      UUID cardId : (List<UUID>)target.getTargets()) {
        Card card=player.getLibrary().getCard(cardId,game);
        revealed.add(card);
      }
      player.revealCards(""String_Node_Str"",revealed,game);
      if (target.getTargets().size() == 2) {
        TargetCard target2=new TargetCard(Zone.PICK,filter);
        player.choose(Outcome.Benefit,revealed,target2,game);
        Card card=revealed.get(target2.getFirstTarget(),game);
        card.putOntoBattlefield(game,Zone.LIBRARY,source.getId(),source.getControllerId());
        revealed.remove(card);
        Permanent permanent=game.getPermanent(card.getId());
        if (permanent != null) {
          permanent.setTapped(true);
        }
        card=revealed.getCards(game).iterator().next();
        card.moveToZone(Zone.HAND,source.getId(),game,false);
      }
 else       if (target.getTargets().size() == 1) {
        Card card=revealed.getCards(game).iterator().next();
        card.putOntoBattlefield(game,Zone.LIBRARY,source.getId(),source.getControllerId());
        Permanent permanent=game.getPermanent(card.getId());
        if (permanent != null)         permanent.setTapped(true);
      }
    }
    player.shuffleLibrary(game);
    return true;
  }
  player.shuffleLibrary(game);
  return false;
}",0.9956413449564134
159315,"public TargetCardInLibrary(final TargetCardInLibrary target){
  super(target);
  this.librarySearchLimit=target.librarySearchLimit;
}","public TargetCardInLibrary(final TargetCardInLibrary target){
  super(target);
  this.setRequired(false);
  this.librarySearchLimit=target.librarySearchLimit;
}",0.9078498293515358
159316,"@Override public void restoreState(int bookmark){
  if (!simulation) {
    if (bookmark != 0) {
      if (savedStates.contains(bookmark - 1)) {
        throw new UnsupportedOperationException(""String_Node_Str"" + (bookmark - 1) + ""String_Node_Str"");
      }
      int stateNum=savedStates.get(bookmark - 1);
      removeBookmark(bookmark);
      GameState restore=gameStates.rollback(stateNum);
      if (restore != null) {
        state.restore(restore);
      }
    }
  }
}","@Override public void restoreState(int bookmark){
  if (!simulation) {
    if (bookmark != 0) {
      if (!savedStates.contains(bookmark - 1)) {
        throw new UnsupportedOperationException(""String_Node_Str"" + (bookmark - 1) + ""String_Node_Str"");
      }
      int stateNum=savedStates.get(bookmark - 1);
      removeBookmark(bookmark);
      GameState restore=gameStates.rollback(stateNum);
      if (restore != null) {
        state.restore(restore);
      }
    }
  }
}",0.9989462592202318
159317,"public void kill(DisconnectReason reason){
  for (  GameSession gameSession : gameSessions.values()) {
    gameSession.kill();
  }
  for (  DraftSession draftSession : draftSessions.values()) {
    draftSession.setKilled();
  }
  for (  TournamentSession tournamentSession : tournamentSessions.values()) {
    tournamentSession.setKilled();
  }
  for (  Entry<UUID,Table> entry : tables.entrySet()) {
    TableManager.getInstance().leaveTable(userId,entry.getValue().getId());
  }
  ChatManager.getInstance().removeUser(userId,reason);
}","public void kill(DisconnectReason reason){
  logger.debug(""String_Node_Str"");
  for (  GameSession gameSession : gameSessions.values()) {
    gameSession.kill();
  }
  logger.debug(""String_Node_Str"");
  for (  DraftSession draftSession : draftSessions.values()) {
    draftSession.setKilled();
  }
  logger.debug(""String_Node_Str"");
  for (  TournamentSession tournamentSession : tournamentSessions.values()) {
    tournamentSession.setKilled();
  }
  logger.debug(""String_Node_Str"");
  for (  Entry<UUID,Table> entry : tables.entrySet()) {
    TableManager.getInstance().leaveTable(userId,entry.getValue().getId());
  }
  logger.debug(""String_Node_Str"");
  ChatManager.getInstance().removeUser(userId,reason);
}",0.8598879103282626
159318,"/** 
 * Is the connection lost for more than 3 minutes, the user will be removed (within 3 minutes the user can reconnect)
 */
private void checkExpired(){
  try {
    callExecutor.execute(new Runnable(){
      @Override public void run(){
        logger.debug(""String_Node_Str"");
        Calendar expired=Calendar.getInstance();
        expired.add(Calendar.MINUTE,-3);
        List<User> usersToCheck=new ArrayList<>();
        usersToCheck.addAll(users.values());
        for (        User user : usersToCheck) {
          if (user.isExpired(expired.getTime())) {
            logger.info(new StringBuilder(user.getName()).append(""String_Node_Str"").append(user.getId()).append(""String_Node_Str"").append(user.getHost()));
            SessionManager.getInstance().getSession(user.getSessionId()).kill(DisconnectReason.SessionExpired);
          }
        }
        logger.debug(""String_Node_Str"");
      }
    }
);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
}","/** 
 * Is the connection lost for more than 3 minutes, the user will be removed (within 3 minutes the user can reconnect)
 */
private void checkExpired(){
  try {
    callExecutor.execute(new Runnable(){
      @Override public void run(){
        logger.debug(""String_Node_Str"");
        Calendar expired=Calendar.getInstance();
        expired.add(Calendar.MINUTE,-3);
        List<User> usersToCheck=new ArrayList<>();
        usersToCheck.addAll(users.values());
        for (        User user : usersToCheck) {
          if (user.isExpired(expired.getTime())) {
            logger.info(new StringBuilder(user.getName()).append(""String_Node_Str"").append(user.getId()).append(""String_Node_Str"").append(user.getHost()));
            removeUser(user.getId(),DisconnectReason.SessionExpired);
          }
        }
        logger.debug(""String_Node_Str"");
      }
    }
);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
}",0.960167714884696
159319,"@Override public void run(){
  logger.debug(""String_Node_Str"");
  Calendar expired=Calendar.getInstance();
  expired.add(Calendar.MINUTE,-3);
  List<User> usersToCheck=new ArrayList<>();
  usersToCheck.addAll(users.values());
  for (  User user : usersToCheck) {
    if (user.isExpired(expired.getTime())) {
      logger.info(new StringBuilder(user.getName()).append(""String_Node_Str"").append(user.getId()).append(""String_Node_Str"").append(user.getHost()));
      SessionManager.getInstance().getSession(user.getSessionId()).kill(DisconnectReason.SessionExpired);
    }
  }
  logger.debug(""String_Node_Str"");
}","@Override public void run(){
  logger.debug(""String_Node_Str"");
  Calendar expired=Calendar.getInstance();
  expired.add(Calendar.MINUTE,-3);
  List<User> usersToCheck=new ArrayList<>();
  usersToCheck.addAll(users.values());
  for (  User user : usersToCheck) {
    if (user.isExpired(expired.getTime())) {
      logger.info(new StringBuilder(user.getName()).append(""String_Node_Str"").append(user.getId()).append(""String_Node_Str"").append(user.getHost()));
      removeUser(user.getId(),DisconnectReason.SessionExpired);
    }
  }
  logger.debug(""String_Node_Str"");
}",0.935483870967742
159320,"public void removeUser(UUID userId,DisconnectReason reason){
  User user=users.get(userId);
  if (user != null) {
    logger.debug(new StringBuilder(""String_Node_Str"").append(user.getName()).append(""String_Node_Str"").append(userId).append(""String_Node_Str"").append(user.getSessionId()).append(""String_Node_Str"").append(reason.toString()));
    ChatManager.getInstance().removeUser(userId,reason);
    users.get(userId).kill(reason);
    users.remove(userId);
  }
 else {
    logger.warn(new StringBuilder(""String_Node_Str"").append(userId).append(""String_Node_Str""));
  }
}","public void removeUser(UUID userId,DisconnectReason reason){
  User user=users.get(userId);
  if (user != null) {
    logger.debug(new StringBuilder(""String_Node_Str"").append(user.getName()).append(""String_Node_Str"").append(userId).append(""String_Node_Str"").append(user.getSessionId()).append(""String_Node_Str"").append(reason.toString()));
    ChatManager.getInstance().removeUser(userId,reason);
    user.kill(reason);
    users.remove(userId);
  }
 else {
    logger.warn(new StringBuilder(""String_Node_Str"").append(userId).append(""String_Node_Str""));
  }
}",0.9885057471264368
159321,"@Override public boolean apply(Game game,Ability source){
  boolean result=false;
  for (  UUID targetId : getTargetPointer().getTargets(game,source)) {
    Card card=game.getCard(targetId);
    if (card != null) {
      Player player=game.getPlayer(source.getControllerId());
      if (player != null) {
        if (player.putOntoBattlefieldWithInfo(card,game,Zone.GRAVEYARD,source.getSourceId(),tapped)) {
          result=true;
        }
      }
    }
  }
  return result;
}","@Override public boolean apply(Game game,Ability source){
  boolean result=false;
  for (  UUID targetId : getTargetPointer().getTargets(game,source)) {
    Card card=game.getCard(targetId);
    if (card != null) {
      Player player=game.getPlayer(source.getControllerId());
      if (player != null) {
        if (player.putOntoBattlefieldWithInfo(card,game,Zone.GRAVEYARD,source.getSourceId(),tapped)) {
          Permanent permanent=game.getPermanent(source.getSourceId());
          if (permanent != null) {
            permanent.changeControllerId(source.getControllerId(),game);
            result=true;
          }
        }
      }
    }
  }
  return result;
}",0.8125544899738448
159322,"protected boolean playManaAbility(ManaAbility ability,Game game){
  if (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.ACTIVATE_ABILITY,ability.getId(),ability.getSourceId(),playerId))) {
    int bookmark=game.bookmarkState();
    if (ability.activate(game,false)) {
      ability.resolve(game);
      if (storedBookmark == -1) {
        setStoredBookmark(bookmark);
      }
      return true;
    }
    game.restoreState(bookmark);
  }
  return false;
}","protected boolean playManaAbility(ManaAbility ability,Game game){
  if (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.ACTIVATE_ABILITY,ability.getId(),ability.getSourceId(),playerId))) {
    int bookmark=game.bookmarkState();
    if (ability.activate(game,false)) {
      ability.resolve(game);
      if (storedBookmark == -1 || storedBookmark > bookmark) {
        setStoredBookmark(bookmark);
      }
      return true;
    }
    game.restoreState(bookmark);
  }
  return false;
}",0.9697601668404588
159323,"@Override public void declareAttacker(UUID attackerId,UUID defenderId,Game game){
  Permanent attacker=game.getPermanent(attackerId);
  if (attacker != null && attacker.canAttack(game) && attacker.getControllerId().equals(playerId)) {
    if (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.DECLARE_ATTACKER,defenderId,attackerId,playerId))) {
      game.getCombat().declareAttacker(attackerId,defenderId,game);
    }
  }
}","@Override public void declareAttacker(UUID attackerId,UUID defenderId,Game game){
  setStoredBookmark(game.bookmarkState());
  Permanent attacker=game.getPermanent(attackerId);
  if (attacker != null && attacker.canAttack(game) && attacker.getControllerId().equals(playerId)) {
    if (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.DECLARE_ATTACKER,defenderId,attackerId,playerId))) {
      game.getCombat().declareAttacker(attackerId,defenderId,game);
    }
  }
}",0.9526952695269528
159324,"@Override public String getRule(){
  return ""String_Node_Str"";
}","@Override public String getRule(){
  return ""String_Node_Str"" + super.getRule();
}",0.8767123287671232
159325,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(targetPointer.getFirst(game,source));
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    if (permanent != null) {
      Zone currentZone=game.getState().getZone(permanent.getId());
      if (!currentZone.equals(Zone.EXILED) && (onlyFromZone == null || onlyFromZone.equals(Zone.BATTLEFIELD))) {
        return controller.moveCardToExileWithInfo(permanent,exileId,exileZone,source.getSourceId(),game,onlyFromZone);
      }
    }
 else {
      Card card=game.getCard(targetPointer.getFirst(game,source));
      if (card != null) {
        Zone currentZone=game.getState().getZone(card.getId());
        if (!currentZone.equals(Zone.EXILED) && (onlyFromZone == null || onlyFromZone.equals(currentZone))) {
          return controller.moveCardToExileWithInfo(card,exileId,exileZone,source.getSourceId(),game,onlyFromZone);
        }
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    for (    UUID targetId : getTargetPointer().getTargets(game,source)) {
      Permanent permanent=game.getPermanent(targetId);
      if (permanent != null) {
        Zone currentZone=game.getState().getZone(permanent.getId());
        if (!currentZone.equals(Zone.EXILED) && (onlyFromZone == null || onlyFromZone.equals(Zone.BATTLEFIELD))) {
          controller.moveCardToExileWithInfo(permanent,exileId,exileZone,source.getSourceId(),game,currentZone);
        }
      }
 else {
        Card card=game.getCard(targetId);
        if (card != null) {
          Zone currentZone=game.getState().getZone(card.getId());
          if (!currentZone.equals(Zone.EXILED) && (onlyFromZone == null || onlyFromZone.equals(currentZone))) {
            controller.moveCardToExileWithInfo(card,exileId,exileZone,source.getSourceId(),game,currentZone);
          }
        }
      }
    }
    return true;
  }
  return false;
}",0.718568665377176
159326,"@Override public boolean canTarget(UUID id,Ability source,Game game){
  Card card=game.getCard(id);
  if (card != null && game.getState().getZone(card.getId()) == Zone.GRAVEYARD) {
    if (game.getPlayer(source.getControllerId()).hasOpponent(card.getOwnerId(),game)) {
      if (allFromOneOpponent && !targets.isEmpty()) {
        Card firstCard=game.getCard((UUID)targets.keySet().iterator().next());
        if (firstCard != null && !card.getOwnerId().equals(firstCard.getOwnerId())) {
          return false;
        }
      }
      return filter.match(card,game);
    }
  }
  return false;
}","@Override public boolean canTarget(UUID id,Ability source,Game game){
  Card card=game.getCard(id);
  if (card != null && game.getState().getZone(card.getId()) == Zone.GRAVEYARD) {
    if (game.getPlayer(source.getControllerId()).hasOpponent(card.getOwnerId(),game)) {
      if (allFromOneOpponent && !targets.isEmpty()) {
        Card firstCard=game.getCard(targets.keySet().iterator().next());
        if (firstCard != null && !card.getOwnerId().equals(firstCard.getOwnerId())) {
          return false;
        }
      }
      return filter.match(card,game);
    }
  }
  return false;
}",0.9949324324324323
159327,"@Override public Set<UUID> possibleTargets(UUID sourceControllerId,Game game){
  Set<UUID> possibleTargets=new HashSet<UUID>();
  for (  UUID playerId : game.getPlayer(sourceControllerId).getInRange()) {
    Player player=game.getPlayer(playerId);
    if (player != null) {
switch (zone) {
case HAND:
        for (        Card card : player.getHand().getCards(filter,game)) {
          possibleTargets.add(card.getId());
        }
      break;
case GRAVEYARD:
    for (    Card card : player.getGraveyard().getCards(filter,game)) {
      possibleTargets.add(card.getId());
    }
  break;
case LIBRARY:
for (Card card : player.getLibrary().getUniqueCards(game)) {
  if (filter.match(card,game)) {
    possibleTargets.add(card.getId());
  }
}
break;
case EXILED:
for (Card card : game.getExile().getPermanentExile().getUniqueCards(game)) {
if (filter.match(card,player.getId(),game)) {
possibleTargets.add(card.getId());
}
}
break;
}
}
}
return possibleTargets;
}","@Override public Set<UUID> possibleTargets(UUID sourceControllerId,Game game){
  return possibleTargets(null,sourceControllerId,game);
}",0.1932543299908842
159328,"@Override public Set<UUID> possibleTargets(UUID sourceControllerId,Game game){
  Set<UUID> possibleTargets=new HashSet<UUID>();
  for (  StackObject stackObject : game.getStack()) {
    if (game.getPlayer(sourceControllerId).getInRange().contains(stackObject.getControllerId()) && filter.match(stackObject,game)) {
      possibleTargets.add(stackObject.getId());
    }
  }
  return possibleTargets;
}","@Override public Set<UUID> possibleTargets(UUID sourceControllerId,Game game){
  Set<UUID> possibleTargets=new HashSet<>();
  for (  StackObject stackObject : game.getStack()) {
    if (game.getPlayer(sourceControllerId).getInRange().contains(stackObject.getControllerId()) && filter.match(stackObject,game)) {
      possibleTargets.add(stackObject.getId());
    }
  }
  return possibleTargets;
}",0.9949748743718592
159329,"@Override public boolean canChoose(UUID sourceControllerId,Game game){
  int count=0;
  for (  StackObject stackObject : game.getStack()) {
    if (game.getPlayer(sourceControllerId).getInRange().contains(stackObject.getControllerId()) && filter.match(stackObject,game)) {
      count++;
      if (count >= this.minNumberOfTargets)       return true;
    }
  }
  return false;
}","@Override public boolean canChoose(UUID sourceControllerId,Game game){
  int count=0;
  for (  StackObject stackObject : game.getStack()) {
    if (game.getPlayer(sourceControllerId).getInRange().contains(stackObject.getControllerId()) && filter.match(stackObject,game)) {
      count++;
      if (count >= this.minNumberOfTargets) {
        return true;
      }
    }
  }
  return false;
}",0.984375
159330,"@Override public Set<UUID> possibleTargets(UUID sourceControllerId,Game game){
  Set<UUID> possibleTargets=new HashSet<UUID>();
  for (  StackObject stackObject : game.getStack()) {
    if (stackObject.getStackAbility() != null && (stackObject.getStackAbility() instanceof ActivatedAbility || stackObject.getStackAbility() instanceof TriggeredAbility) && game.getPlayer(sourceControllerId).getInRange().contains(stackObject.getStackAbility().getControllerId())) {
      possibleTargets.add(stackObject.getStackAbility().getId());
    }
  }
  return possibleTargets;
}","@Override public Set<UUID> possibleTargets(UUID sourceControllerId,Game game){
  Set<UUID> possibleTargets=new HashSet<>();
  for (  StackObject stackObject : game.getStack()) {
    if (stackObject.getStackAbility() != null && (stackObject.getStackAbility() instanceof ActivatedAbility || stackObject.getStackAbility() instanceof TriggeredAbility) && game.getPlayer(sourceControllerId).getInRange().contains(stackObject.getStackAbility().getControllerId())) {
      possibleTargets.add(stackObject.getStackAbility().getId());
    }
  }
  return possibleTargets;
}",0.9964601769911504
159331,"@Override public boolean canChoose(UUID sourceId,UUID sourceControllerId,Game game){
  if (game.getPlayer(sourceControllerId).getGraveyard().count(filter,sourceId,sourceControllerId,game) >= this.minNumberOfTargets) {
    return true;
  }
  return false;
}","@Override public boolean canChoose(UUID sourceId,UUID sourceControllerId,Game game){
  Player player=game.getPlayer(sourceControllerId);
  if (player != null) {
    int possibleTargets=0;
    for (    Card card : player.getGraveyard().getCards(filter,game)) {
      if (sourceId == null || isNotTarget() || !game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.TARGET,card.getId(),sourceId,sourceControllerId))) {
        possibleTargets++;
        if (possibleTargets >= this.minNumberOfTargets) {
          return true;
        }
      }
    }
  }
  return false;
}",0.5441354292623942
159332,"@Override public Set<UUID> possibleTargets(UUID sourceControllerId,Game game){
  Set<UUID> possibleTargets=new HashSet<UUID>();
  for (  UUID playerId : game.getPlayer(sourceControllerId).getInRange()) {
    Player player=game.getPlayer(playerId);
    if (player != null && filter.match(player,game)) {
      possibleTargets.add(playerId);
    }
  }
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(new FilterCreaturePermanent(),sourceControllerId,game)) {
    if (filter.match(permanent,null,sourceControllerId,game)) {
      possibleTargets.add(permanent.getId());
    }
  }
  return possibleTargets;
}","@Override public Set<UUID> possibleTargets(UUID sourceControllerId,Game game){
  Set<UUID> possibleTargets=new HashSet<>();
  for (  UUID playerId : game.getPlayer(sourceControllerId).getInRange()) {
    Player player=game.getPlayer(playerId);
    if (player != null && filter.match(player,game)) {
      possibleTargets.add(playerId);
    }
  }
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(new FilterCreaturePermanent(),sourceControllerId,game)) {
    if (filter.match(permanent,null,sourceControllerId,game)) {
      possibleTargets.add(permanent.getId());
    }
  }
  return possibleTargets;
}",0.9968051118210862
159333,"@Override public void playPriority(UUID activePlayerId,boolean resuming){
  int bookmark=0;
  clearAllBookmarks();
  try {
    while (!isPaused() && !gameOver(null)) {
      if (!resuming) {
        state.getPlayers().resetPassed();
        state.getPlayerList().setCurrent(activePlayerId);
      }
 else {
        state.getPlayerList().setCurrent(this.getPriorityPlayerId());
      }
      fireUpdatePlayersEvent();
      Player player;
      while (!isPaused() && !gameOver(null)) {
        try {
          player=getPlayer(state.getPlayerList().get());
          state.setPriorityPlayerId(player.getId());
          while (!player.isPassed() && player.isInGame() && !isPaused()&& !gameOver(null)) {
            if (!resuming) {
              if (checkStateAndTriggered()) {
                do {
                  state.handleSimultaneousEvent(this);
                  applyEffects();
                }
 while (state.hasSimultaneousEvents());
              }
              applyEffects();
              saveState(false);
              if (isPaused() || gameOver(null)) {
                return;
              }
              if (player.priority(this)) {
                applyEffects();
              }
              if (isPaused()) {
                return;
              }
            }
            resuming=false;
          }
          resetShortLivingLKI();
          resuming=false;
          if (isPaused() || gameOver(null)) {
            return;
          }
          if (allPassed()) {
            if (!state.getStack().isEmpty()) {
              resolve();
              applyEffects();
              state.getPlayers().resetPassed();
              fireUpdatePlayersEvent();
              state.getRevealed().reset();
              resetShortLivingLKI();
              break;
            }
 else {
              resetLKI();
              return;
            }
          }
        }
 catch (        Exception ex) {
          logger.fatal(""String_Node_Str"",ex);
          ex.printStackTrace();
          this.fireErrorEvent(""String_Node_Str"",ex);
          bookmark=0;
          continue;
        }
        state.getPlayerList().getNext();
      }
      bookmark=0;
    }
  }
 catch (  Exception ex) {
    logger.fatal(""String_Node_Str"",ex);
    this.fireErrorEvent(""String_Node_Str"",ex);
  }
 finally {
    resetLKI();
  }
}","@Override public void playPriority(UUID activePlayerId,boolean resuming){
  int bookmark=0;
  clearAllBookmarks();
  try {
    while (!isPaused() && !gameOver(null)) {
      if (!resuming) {
        state.getPlayers().resetPassed();
        state.getPlayerList().setCurrent(activePlayerId);
      }
 else {
        state.getPlayerList().setCurrent(this.getPriorityPlayerId());
      }
      fireUpdatePlayersEvent();
      Player player;
      while (!isPaused() && !gameOver(null)) {
        try {
          player=getPlayer(state.getPlayerList().get());
          state.setPriorityPlayerId(player.getId());
          while (!player.isPassed() && player.isInGame() && !isPaused()&& !gameOver(null)) {
            if (!resuming) {
              checkStateAndTriggered();
              applyEffects();
              saveState(false);
              if (isPaused() || gameOver(null)) {
                return;
              }
              if (player.priority(this)) {
                applyEffects();
              }
              if (isPaused()) {
                return;
              }
            }
            resuming=false;
          }
          resetShortLivingLKI();
          resuming=false;
          if (isPaused() || gameOver(null)) {
            return;
          }
          if (allPassed()) {
            if (!state.getStack().isEmpty()) {
              resolve();
              applyEffects();
              state.getPlayers().resetPassed();
              fireUpdatePlayersEvent();
              state.getRevealed().reset();
              resetShortLivingLKI();
              break;
            }
 else {
              resetLKI();
              return;
            }
          }
        }
 catch (        Exception ex) {
          logger.fatal(""String_Node_Str"",ex);
          ex.printStackTrace();
          this.fireErrorEvent(""String_Node_Str"",ex);
          bookmark=0;
          continue;
        }
        state.getPlayerList().getNext();
      }
      bookmark=0;
    }
  }
 catch (  Exception ex) {
    logger.fatal(""String_Node_Str"",ex);
    this.fireErrorEvent(""String_Node_Str"",ex);
  }
 finally {
    resetLKI();
  }
}",0.957123715944618
159334,"@Override public boolean checkStateAndTriggered(){
  boolean somethingHappened=false;
  while (!isPaused() && !gameOver(null)) {
    if (!checkStateBasedActions()) {
      if (isPaused() || gameOver(null) || !checkTriggered()) {
        break;
      }
    }
    somethingHappened=true;
  }
  return somethingHappened;
}","@Override public boolean checkStateAndTriggered(){
  boolean somethingHappened=false;
  while (!isPaused() && !gameOver(null)) {
    if (!checkStateBasedActions()) {
      state.handleSimultaneousEvent(this);
      if (isPaused() || gameOver(null) || !checkTriggered()) {
        break;
      }
    }
    somethingHappened=true;
  }
  return somethingHappened;
}",0.9368575624082232
159335,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller != null && sourceObject != null) {
    TargetCardInLibrary target=new TargetCardInLibrary(0,3,new FilterCreatureCard(""String_Node_Str""));
    if (controller.searchLibrary(target,game)) {
      if (target.getTargets().size() > 0) {
        Cards revealed=new CardsImpl();
        for (        UUID cardId : (List<UUID>)target.getTargets()) {
          Card card=controller.getLibrary().getCard(cardId,game);
          revealed.add(card);
        }
        controller.revealCards(sourceObject.getName(),revealed,game);
        controller.shuffleLibrary(game);
        TargetCard targetToLib=new TargetCard(Zone.PICK,new FilterCard(textTop));
        target.setRequired(true);
        while (revealed.size() > 1) {
          controller.choose(Outcome.Neutral,revealed,target,game);
          Card card=revealed.get(targetToLib.getFirstTarget(),game);
          if (card != null) {
            revealed.remove(card);
            card.moveToZone(Zone.LIBRARY,source.getSourceId(),game,true);
          }
          targetToLib.clearChosen();
        }
        if (revealed.size() == 1) {
          Card card=revealed.get(revealed.iterator().next(),game);
          card.moveToZone(Zone.LIBRARY,source.getSourceId(),game,true);
        }
      }
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller != null && sourceObject != null) {
    TargetCardInLibrary target=new TargetCardInLibrary(0,3,new FilterCreatureCard(""String_Node_Str""));
    if (controller.searchLibrary(target,game)) {
      if (target.getTargets().size() > 0) {
        Cards revealed=new CardsImpl();
        for (        UUID cardId : (List<UUID>)target.getTargets()) {
          Card card=controller.getLibrary().remove(cardId,game);
          revealed.add(card);
        }
        controller.revealCards(sourceObject.getName(),revealed,game);
        controller.shuffleLibrary(game);
        TargetCard targetToLib=new TargetCard(Zone.PICK,new FilterCard(textTop));
        target.setRequired(true);
        while (revealed.size() > 1 && controller.isInGame()) {
          controller.choose(Outcome.Neutral,revealed,targetToLib,game);
          Card card=revealed.get(targetToLib.getFirstTarget(),game);
          if (card != null) {
            revealed.remove(card);
            controller.moveCardToLibraryWithInfo(card,source.getSourceId(),game,Zone.LIBRARY,true,false);
          }
          targetToLib.clearChosen();
        }
        if (revealed.size() == 1) {
          Card card=revealed.get(revealed.iterator().next(),game);
          controller.moveCardToLibraryWithInfo(card,source.getSourceId(),game,Zone.LIBRARY,true,false);
        }
      }
      return true;
    }
  }
  return false;
}",0.9168026101141924
159336,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    int countersRemoved=0;
    for (    Cost cost : source.getCosts()) {
      if (cost instanceof SageOfHoursCost) {
        countersRemoved=((SageOfHoursCost)cost).getRemovedCounters();
      }
    }
    int turns=countersRemoved % 5;
    for (int i=0; i < turns; i++) {
      game.getState().getTurnMods().add(new TurnMod(player.getId(),false));
    }
    game.informPlayers(new StringBuilder(player.getName()).append(""String_Node_Str"").append(CardUtil.numberToText(turns,""String_Node_Str"")).append(turns > 1 ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").toString());
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    int countersRemoved=0;
    for (    Cost cost : source.getCosts()) {
      if (cost instanceof SageOfHoursCost) {
        countersRemoved=((SageOfHoursCost)cost).getRemovedCounters();
      }
    }
    int turns=countersRemoved / 5;
    for (int i=0; i < turns; i++) {
      game.getState().getTurnMods().add(new TurnMod(player.getId(),false));
    }
    game.informPlayers(new StringBuilder(""String_Node_Str"").append(countersRemoved).append(""String_Node_Str"").append(player.getName()).append(""String_Node_Str"").append(CardUtil.numberToText(turns,""String_Node_Str"")).append(turns > 1 ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").toString());
    return true;
  }
  return false;
}",0.9517326732673268
159337,"@Override public boolean apply(Game game,Ability source){
  Permanent copyFromPermanent=null;
  for (  Effect effect : game.getState().getContinuousEffects().getLayeredEffects(game)) {
    if (effect instanceof CopyEffect) {
      CopyEffect copyEffect=(CopyEffect)effect;
      if (copyEffect.getSourceId().equals(source.getSourceId())) {
        MageObject object=((CopyEffect)effect).getTarget();
        if (object instanceof Permanent) {
          copyFromPermanent=(Permanent)object;
        }
      }
    }
  }
  if (copyFromPermanent != null) {
    EmptyToken token=new EmptyToken();
    token.putOntoBattlefield(1,game,source.getSourceId(),source.getControllerId());
    Permanent sourcePermanent=game.getPermanent(token.getLastAddedToken());
    if (sourcePermanent != null) {
      game.copyPermanent(copyFromPermanent,sourcePermanent,source,new ProgenitorMimicApplyToPermanent());
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent copyFromPermanent=null;
  for (  Effect effect : game.getState().getContinuousEffects().getLayeredEffects(game)) {
    if (effect instanceof CopyEffect) {
      CopyEffect copyEffect=(CopyEffect)effect;
      if (copyEffect.getSourceId().equals(source.getSourceId())) {
        MageObject object=((CopyEffect)effect).getTarget();
        if (object instanceof Permanent) {
          copyFromPermanent=(Permanent)object;
        }
      }
    }
  }
  if (copyFromPermanent != null) {
    EmptyToken token=new EmptyToken();
    CardUtil.copyTo(token).from(copyFromPermanent);
    token.putOntoBattlefield(1,game,source.getSourceId(),source.getControllerId());
    Permanent sourcePermanent=game.getPermanent(token.getLastAddedToken());
    if (sourcePermanent != null) {
      game.copyPermanent(copyFromPermanent,sourcePermanent,source,new ProgenitorMimicApplyToPermanent());
      return true;
    }
  }
  return false;
}",0.9730569948186528
159338,"/** 
 * Returns function that copies params\abilities from one card to   {@link Token}.
 * @param target
 */
public static CopyTokenFunction copyTo(Token target){
  return new CopyTokenFunction(target);
}","/** 
 * Returns function that copies params\abilities from one card to   {@link Token}.
 * @param target
 * @return
 */
public static CopyTokenFunction copyTo(Token target){
  return new CopyTokenFunction(target);
}",0.973747016706444
159339,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    MageObject target=game.getObject(source.getSourceId());
    if (target != null) {
      ArrayList<CardType> foundCardTypes=new ArrayList<>();
      for (      UUID playerId : controller.getInRange()) {
        Player player=game.getPlayer(playerId);
        if (player != null) {
          for (          Card card : player.getGraveyard().getCards(game)) {
            foundCardTypes.addAll(card.getCardType());
          }
        }
      }
      int number=foundCardTypes.size();
      target.getPower().setValue(number);
      target.getToughness().setValue(number + 1);
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    MageObject target=game.getObject(source.getSourceId());
    if (target != null) {
      HashSet<CardType> foundCardTypes=new HashSet<>();
      for (      UUID playerId : controller.getInRange()) {
        Player player=game.getPlayer(playerId);
        if (player != null) {
          for (          Card card : player.getGraveyard().getCards(game)) {
            foundCardTypes.addAll(card.getCardType());
          }
        }
      }
      int number=foundCardTypes.size();
      target.getPower().setValue(number);
      target.getToughness().setValue(number + 1);
      return true;
    }
  }
  return false;
}",0.9818181818181818
159340,"private void addPopupMenuPlayer(){
  JMenuItem menuItem;
  menuItem=new JMenuItem(""String_Node_Str"");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (gamePanel.getFeedbackPanel() != null) {
        gamePanel.getFeedbackPanel().pressOKYesOrDone();
      }
    }
  }
);
  menuItem=new JMenuItem(""String_Node_Str"");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      gamePanel.getSession().restorePriority(gameId);
    }
  }
);
  popupMenu.addSeparator();
  menuItem=new JMenuItem(""String_Node_Str"");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      gamePanel.getSession().passTurnPriority(gameId);
    }
  }
);
  menuItem=new JMenuItem(""String_Node_Str"");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      gamePanel.getSession().passPriorityUntilNextYourTurn(gameId);
    }
  }
);
  popupMenu.addSeparator();
  menuItem=new JCheckBoxMenuItem(""String_Node_Str"",true);
  menuItem.setMnemonic(KeyEvent.VK_M);
  menuItem.setToolTipText(""String_Node_Str"");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      gamePanel.getSession().setManaPoolMode(((JCheckBoxMenuItem)e.getSource()).getState(),gameId);
    }
  }
);
  popupMenu.addSeparator();
  menuItem=new JMenuItem(""String_Node_Str"");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (JOptionPane.showConfirmDialog(PlayAreaPanel.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
        MageFrame.getSession().concedeGame(gameId);
      }
    }
  }
);
  popupMenu.addSeparator();
  menuItem=new JMenuItem(""String_Node_Str"");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (JOptionPane.showConfirmDialog(PlayAreaPanel.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
        MageFrame.getSession().quitMatch(gameId);
      }
    }
  }
);
  battlefieldPanel.getMainPanel().addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent Me){
      this.checkMenu(Me);
    }
    @Override public void mousePressed(    MouseEvent Me){
      this.checkMenu(Me);
    }
    private void checkMenu(    MouseEvent Me){
      if (Me.isPopupTrigger() && playingMode) {
        popupMenu.show(Me.getComponent(),Me.getX(),Me.getY());
      }
    }
  }
);
}","private void addPopupMenuPlayer(){
  JMenuItem menuItem;
  menuItem=new JMenuItem(""String_Node_Str"");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (gamePanel.getFeedbackPanel() != null) {
        gamePanel.getFeedbackPanel().pressOKYesOrDone();
      }
    }
  }
);
  menuItem=new JMenuItem(""String_Node_Str"");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      gamePanel.getSession().restorePriority(gameId);
    }
  }
);
  popupMenu.addSeparator();
  menuItem=new JMenuItem(""String_Node_Str"");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      gamePanel.getSession().passTurnPriority(gameId);
    }
  }
);
  menuItem=new JMenuItem(""String_Node_Str"");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      gamePanel.getSession().passPriorityUntilNextYourTurn(gameId);
    }
  }
);
  popupMenu.addSeparator();
  manaPoolMenuItem=new JCheckBoxMenuItem(""String_Node_Str"",true);
  manaPoolMenuItem.setMnemonic(KeyEvent.VK_M);
  manaPoolMenuItem.setToolTipText(""String_Node_Str"");
  popupMenu.add(manaPoolMenuItem);
  manaPoolMenuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      boolean manaPoolAutomatic=((JCheckBoxMenuItem)e.getSource()).getState();
      gamePanel.setMenuStates(manaPoolAutomatic);
      gamePanel.getSession().setManaPoolMode(manaPoolAutomatic,gameId);
    }
  }
);
  popupMenu.addSeparator();
  menuItem=new JMenuItem(""String_Node_Str"");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (JOptionPane.showConfirmDialog(PlayAreaPanel.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
        MageFrame.getSession().concedeGame(gameId);
      }
    }
  }
);
  popupMenu.addSeparator();
  menuItem=new JMenuItem(""String_Node_Str"");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (JOptionPane.showConfirmDialog(PlayAreaPanel.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
        MageFrame.getSession().quitMatch(gameId);
      }
    }
  }
);
  battlefieldPanel.getMainPanel().addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent Me){
      this.checkMenu(Me);
    }
    @Override public void mousePressed(    MouseEvent Me){
      this.checkMenu(Me);
    }
    private void checkMenu(    MouseEvent Me){
      if (Me.isPopupTrigger() && playingMode) {
        popupMenu.show(Me.getComponent(),Me.getX(),Me.getY());
      }
    }
  }
);
}",0.9587472638491328
159341,"@Override public void setResponseManaType(UUID playerId,ManaType manaType){
synchronized (response) {
    response.setManaType(manaType);
    response.setResponseManaTypePlayerId(playerId);
    response.notify();
    log.debug(""String_Node_Str"" + getId());
  }
}","@Override public void setResponseManaType(UUID manaTypePlayerId,ManaType manaType){
synchronized (response) {
    response.setManaType(manaType);
    response.setResponseManaTypePlayerId(manaTypePlayerId);
    response.notify();
    log.debug(""String_Node_Str"" + getId());
  }
}",0.9629629629629628
159342,"public void sendPlayerManaType(UUID userId,UUID playerId,final ManaType data){
  sendMessage(userId,new Command(){
    @Override public void execute(    UUID playerId){
      getGameSession(playerId).sendPlayerManaType(data,playerId);
    }
  }
);
}","public void sendPlayerManaType(UUID userId,final UUID manaTypePlayerId,final ManaType data){
  sendMessage(userId,new Command(){
    @Override public void execute(    UUID playerId){
      getGameSession(playerId).sendPlayerManaType(data,manaTypePlayerId);
    }
  }
);
}",0.95
159343,"public void sendPlayerManaType(ManaType manaType,UUID playerId){
  cancelTimeout();
  game.getPlayer(playerId).setResponseManaType(playerId,manaType);
}","public void sendPlayerManaType(ManaType manaType,UUID manaTypePlayerId){
  cancelTimeout();
  game.getPlayer(playerId).setResponseManaType(manaTypePlayerId,manaType);
}",0.95
159344,"void setResponseManaType(UUID playerId,ManaType responseManaType);","void setResponseManaType(UUID manaTypePlayerId,ManaType responseManaType);",0.9428571428571428
159345,"@Override public void setResponseManaType(UUID playerId,ManaType responseManaType){
}","@Override public void setResponseManaType(UUID manaTypePlayerId,ManaType responseManaType){
}",0.9550561797752808
159346,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (!this.used && super.applies(event,source,game)) {
    MageObject object=game.getObject(event.getSourceId());
    if (object == null) {
      game.informPlayers(""String_Node_Str"");
      return false;
    }
    if (!object.getId().equals(source.getFirstTarget())) {
      return false;
    }
    Permanent permanent=game.getPermanent(event.getTargetId());
    if (permanent != null) {
      if (permanent.getControllerId().equals(source.getControllerId())) {
        return true;
      }
    }
    Player player=game.getPlayer(event.getTargetId());
    if (player != null) {
      if (player.getId().equals(source.getControllerId())) {
        return true;
      }
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (!this.used && super.applies(event,source,game)) {
    MageObject object=game.getObject(event.getSourceId());
    if (object == null) {
      game.informPlayers(""String_Node_Str"");
      return false;
    }
    if (!object.getId().equals(source.getFirstTarget()) && (!(object instanceof Spell) || !((Spell)object).getSourceId().equals(source.getFirstTarget()))) {
      return false;
    }
    Permanent permanent=game.getPermanent(event.getTargetId());
    if (permanent != null) {
      if (permanent.getControllerId().equals(source.getControllerId())) {
        return true;
      }
    }
    Player player=game.getPlayer(event.getTargetId());
    if (player != null) {
      if (player.getId().equals(source.getControllerId())) {
        return true;
      }
    }
  }
  return false;
}",0.940389294403893
159347,"@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  GameEvent preventEvent=new GameEvent(GameEvent.EventType.PREVENT_DAMAGE,source.getFirstTarget(),source.getId(),source.getControllerId(),event.getAmount(),false);
  if (!game.replaceEvent(preventEvent)) {
    int prevented=0;
    if (event.getAmount() >= this.amount) {
      int damage=amount;
      event.setAmount(event.getAmount() - amount);
      this.used=true;
      game.fireEvent(GameEvent.getEvent(GameEvent.EventType.PREVENTED_DAMAGE,source.getFirstTarget(),source.getId(),source.getControllerId(),damage));
      prevented=damage;
    }
 else {
      int damage=event.getAmount();
      event.setAmount(0);
      amount-=damage;
      game.fireEvent(GameEvent.getEvent(GameEvent.EventType.PREVENTED_DAMAGE,source.getFirstTarget(),source.getId(),source.getControllerId(),damage));
      prevented=damage;
    }
    if (prevented > 0) {
      UUID redirectTo=source.getTargets().get(1).getFirstTarget();
      Permanent permanent=game.getPermanent(redirectTo);
      if (permanent != null) {
        game.informPlayers(""String_Node_Str"" + prevented + ""String_Node_Str""+ permanent.getName()+ ""String_Node_Str"");
        permanent.damage(prevented,event.getSourceId(),game,true,false);
      }
      Player player=game.getPlayer(redirectTo);
      if (player != null) {
        game.informPlayers(""String_Node_Str"" + prevented + ""String_Node_Str""+ player.getName()+ ""String_Node_Str"");
        player.damage(prevented,event.getSourceId(),game,true,false);
      }
    }
  }
  return false;
}","@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  PreventionEffectData preventionData=preventDamageAction(event,source,game);
  if (preventionData.getPreventedDamage() > 0) {
    UUID redirectTo=source.getTargets().get(1).getFirstTarget();
    Permanent permanent=game.getPermanent(redirectTo);
    if (permanent != null) {
      game.informPlayers(""String_Node_Str"" + preventionData.getPreventedDamage() + ""String_Node_Str""+ permanent.getName()+ ""String_Node_Str"");
      permanent.damage(preventionData.getPreventedDamage(),event.getSourceId(),game,true,false);
    }
    Player player=game.getPlayer(redirectTo);
    if (player != null) {
      game.informPlayers(""String_Node_Str"" + preventionData.getPreventedDamage() + ""String_Node_Str""+ player.getName()+ ""String_Node_Str"");
      player.damage(preventionData.getPreventedDamage(),event.getSourceId(),game,false,true);
    }
  }
  return false;
}",0.5331744139849026
159348,"public HarmsWayPreventDamageTargetEffect(final HarmsWayPreventDamageTargetEffect effect){
  super(effect);
  this.amount=effect.amount;
}","public HarmsWayPreventDamageTargetEffect(final HarmsWayPreventDamageTargetEffect effect){
  super(effect);
}",0.8816326530612245
159349,"/** 
 * Tests redirecting from triggered ability
 */
@Test @Ignore public void testRedirectTriggeredAbilityDamage(){
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"");
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"",""String_Node_Str"");
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"",""String_Node_Str"");
  setStopAt(1,PhaseStep.BEGIN_COMBAT);
  execute();
  assertLife(playerA,19);
  assertLife(playerB,15);
}","/** 
 * Tests redirecting from triggered ability
 */
@Test public void testRedirectTriggeredAbilityDamage(){
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"");
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"",""String_Node_Str"");
  castSpell(1,PhaseStep.POSTCOMBAT_MAIN,playerA,""String_Node_Str"",""String_Node_Str"");
  setStopAt(1,PhaseStep.POSTCOMBAT_MAIN);
  execute();
  assertLife(playerA,19);
  assertLife(playerB,15);
}",0.978494623655914
159350,"private Set<CardType> getOpponentPermanentCardTypes(UUID sourceId,UUID sourceControllerId,Game game){
  Player controller=game.getPlayer(sourceControllerId);
  Set<CardType> cardTypes=new HashSet<>();
  if (controller != null) {
    for (    Permanent permanent : game.getBattlefield().getActivePermanents(sourceId,game)) {
      if (controller.hasOpponent(permanent.getControllerId(),game)) {
        cardTypes.addAll(permanent.getCardType());
      }
    }
  }
  return cardTypes;
}","private Set<CardType> getOpponentPermanentCardTypes(UUID sourceId,UUID sourceControllerId,Game game){
  Player controller=game.getPlayer(sourceControllerId);
  Set<CardType> cardTypes=new HashSet<>();
  if (controller != null) {
    for (    Permanent permanent : game.getBattlefield().getActivePermanents(sourceControllerId,game)) {
      if (controller.hasOpponent(permanent.getControllerId(),game)) {
        cardTypes.addAll(permanent.getCardType());
      }
    }
  }
  return cardTypes;
}",0.9897750511247444
159351,"@Override public AsceticismEffect copy(){
  return new AsceticismEffect(this);
}","@Override public Asceticism copy(){
  return new Asceticism(this);
}",0.918918918918919
159352,"/** 
 * Tests copying already transformed creature Makes sure it still has ""When this creature becomes the target of a spell or ability, sacrifice it""
 */
@Test public void testCopyAlreadyTransformed(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",5);
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",2);
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",2);
  addCard(Zone.HAND,playerB,""String_Node_Str"");
  addCard(Zone.HAND,playerB,""String_Node_Str"");
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  castSpell(2,PhaseStep.PRECOMBAT_MAIN,playerB,""String_Node_Str"");
  castSpell(3,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  castSpell(3,PhaseStep.POSTCOMBAT_MAIN,playerB,""String_Node_Str"",""String_Node_Str"");
  setStopAt(3,PhaseStep.END_TURN);
  execute();
  assertLife(playerB,18);
  assertPowerToughness(playerA,""String_Node_Str"",4,4);
  assertPermanentCount(playerB,""String_Node_Str"",0);
  assertGraveyardCount(playerB,""String_Node_Str"",1);
}","/** 
 * Tests copying already transformed creature Makes sure it still has ""When this creature becomes the target of a spell or ability, sacrifice it""
 */
@Test public void testCopyAlreadyTransformed(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",5);
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",2);
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",2);
  addCard(Zone.HAND,playerB,""String_Node_Str"");
  addCard(Zone.HAND,playerB,""String_Node_Str"");
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  castSpell(2,PhaseStep.PRECOMBAT_MAIN,playerB,""String_Node_Str"");
  castSpell(3,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  castSpell(3,PhaseStep.POSTCOMBAT_MAIN,playerB,""String_Node_Str"",""String_Node_Str"");
  setStopAt(3,PhaseStep.END_TURN);
  execute();
  assertLife(playerB,18);
  assertPowerToughness(playerA,""String_Node_Str"",4,4);
  assertGraveyardCount(playerB,""String_Node_Str"",1);
  assertGraveyardCount(playerB,""String_Node_Str"",1);
  assertPermanentCount(playerB,""String_Node_Str"",0);
}",0.924680246328754
159353,"@Override public boolean apply(Game game,Ability source){
  int affectedTargets=0;
  for (  UUID permanentId : targetPointer.getTargets(game,source)) {
    Permanent target=(Permanent)game.getPermanent(permanentId);
    if (target != null) {
      target.addPower(power.calculate(game,source));
      target.addToughness(toughness.calculate(game,source));
      affectedTargets++;
    }
  }
  return affectedTargets > 0;
}","@Override public boolean apply(Game game,Ability source){
  int affectedTargets=0;
  for (  UUID permanentId : targetPointer.getTargets(game,source)) {
    Permanent target=game.getPermanent(permanentId);
    if (target != null) {
      target.addPower(power.calculate(game,source));
      target.addToughness(toughness.calculate(game,source));
      affectedTargets++;
    }
  }
  return affectedTargets > 0;
}",0.9867947178871548
159354,"@Override public void init(Ability source,Game game){
  super.init(source,game);
  for (  Permanent perm : game.getBattlefield().getActivePermanents(filter,source.getControllerId(),source.getSourceId(),game)) {
    objects.add(perm.getId());
  }
  if (lockedInPT) {
    power=new StaticValue(power.calculate(game,source));
    toughness=new StaticValue(toughness.calculate(game,source));
  }
}","@Override public void init(Ability source,Game game){
  super.init(source,game);
  if (affectedObjectsSet) {
    for (    Permanent perm : game.getBattlefield().getActivePermanents(filter,source.getControllerId(),source.getSourceId(),game)) {
      objects.add(perm.getId());
    }
  }
  if (lockedInPT) {
    power=new StaticValue(power.calculate(game,source));
    toughness=new StaticValue(toughness.calculate(game,source));
  }
}",0.5980629539951574
159355,"@Override public boolean apply(Game game,Ability source){
  int newPower=power.calculate(game,source);
  int newToughness=toughness.calculate(game,source);
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(filter,source.getControllerId(),source.getSourceId(),game)) {
    if (objects.contains(permanent.getId())) {
      permanent.getPower().setValue(newPower);
      permanent.getToughness().setValue(newToughness);
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  int newPower=power.calculate(game,source);
  int newToughness=toughness.calculate(game,source);
  if (affectedObjectsSet) {
    for (    UUID permanentId : objects) {
      Permanent permanent=game.getPermanent(permanentId);
      if (permanent != null) {
        permanent.getPower().setValue(newPower);
        permanent.getToughness().setValue(newToughness);
      }
    }
  }
 else {
    for (    Permanent permanent : game.getBattlefield().getActivePermanents(filter,source.getControllerId(),source.getSourceId(),game)) {
      permanent.getPower().setValue(newPower);
      permanent.getToughness().setValue(newToughness);
    }
  }
  return true;
}",0.514817950889077
159356,"public CopyEffect(final CopyEffect effect){
  super(effect);
  this.target=effect.target.copy();
  this.sourceId=effect.sourceId;
}","public CopyEffect(final CopyEffect effect){
  super(effect);
  this.target=effect.target.copy();
  this.sourceId=effect.sourceId;
  this.zoneChangeCounter=effect.zoneChangeCounter;
}",0.8370607028753994
159357,"@Override public boolean isInactive(Ability source,Game game){
  Permanent permanent=game.getPermanent(this.sourceId);
  if (permanent == null) {
    return true;
  }
  return false;
}","@Override public boolean isInactive(Ability source,Game game){
  Permanent permanent=game.getPermanent(this.sourceId);
  return permanent == null || permanent.getZoneChangeCounter() != this.zoneChangeCounter;
}",0.6446700507614214
159358,"@Override public boolean moveToExile(UUID exileId,String name,UUID sourceId,Game game,ArrayList<UUID> appliedEffects){
  Zone fromZone=game.getState().getZone(objectId);
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,ownerId,fromZone,Zone.EXILED,appliedEffects);
  if (!game.replaceEvent(event)) {
    if (fromZone != null) {
switch (fromZone) {
case GRAVEYARD:
        game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
case EXILED:
game.getExile().removeCard(this,game);
break;
case STACK:
case PICK:
break;
default :
MageObject object=game.getObject(sourceId);
logger.warn(new StringBuilder(""String_Node_Str"").append(fromZone).append(""String_Node_Str"").append(object != null ? object.getName() : ""String_Node_Str""));
}
game.rememberLKI(objectId,event.getFromZone(),this);
}
if (exileId == null) {
game.getExile().getPermanentExile().add(this);
}
 else {
game.getExile().createZone(exileId,name).add(this);
}
updateZoneChangeCounter();
game.setZone(objectId,event.getToZone());
game.fireEvent(event);
return true;
}
return false;
}","@Override public boolean moveToExile(UUID exileId,String name,UUID sourceId,Game game,ArrayList<UUID> appliedEffects){
  Zone fromZone=game.getState().getZone(objectId);
  ZoneChangeEvent event=new ZoneChangeEvent(this.objectId,sourceId,ownerId,fromZone,Zone.EXILED,appliedEffects);
  if (!game.replaceEvent(event)) {
    if (fromZone != null) {
switch (fromZone) {
case GRAVEYARD:
        game.getPlayer(ownerId).removeFromGraveyard(this,game);
      break;
case HAND:
    game.getPlayer(ownerId).removeFromHand(this,game);
  break;
case LIBRARY:
game.getPlayer(ownerId).removeFromLibrary(this,game);
break;
case EXILED:
game.getExile().removeCard(this,game);
break;
case STACK:
case PICK:
break;
default :
MageObject object=game.getObject(sourceId);
logger.warn(new StringBuilder(""String_Node_Str"").append(fromZone).append(""String_Node_Str"").append(object != null ? object.getName() : ""String_Node_Str""));
}
game.rememberLKI(objectId,event.getFromZone(),this);
}
if (exileId == null) {
game.getExile().getPermanentExile().add(this);
}
 else {
game.getExile().createZone(exileId,name).add(this);
}
updateZoneChangeCounter();
game.setZone(objectId,event.getToZone());
game.addSimultaneousEvent(event);
return true;
}
return false;
}",0.9922543823889116
159359,"@Override public void addInfo(String key,String value){
  if (info == null) {
    info=new HashMap<String,String>();
  }
  info.put(key,value);
}","@Override public void addInfo(String key,String value){
  if (info == null) {
    info=new HashMap<>();
  }
  info.put(key,value);
}",0.9530685920577616
159360,"@Override public boolean moveToExile(UUID exileId,String name,UUID sourceId,Game game,ArrayList<UUID> appliedEffects){
  Zone fromZone=game.getState().getZone(objectId);
  Player controller=game.getPlayer(controllerId);
  if (controller != null && controller.removeFromBattlefield(this,game)) {
    ZoneChangeEvent event=new ZoneChangeEvent(this,sourceId,ownerId,fromZone,Zone.EXILED,appliedEffects);
    if (!game.replaceEvent(event)) {
      game.rememberLKI(objectId,Zone.BATTLEFIELD,this);
      if (exileId == null) {
        game.getExile().getPermanentExile().add(card);
      }
 else {
        game.getExile().createZone(exileId,name).add(card);
      }
      game.setZone(objectId,event.getToZone());
      game.fireEvent(event);
      if (event.getFromZone().equals(Zone.BATTLEFIELD)) {
        game.resetForSourceId(getId());
        game.applyEffects();
      }
      return true;
    }
  }
  return false;
}","@Override public boolean moveToExile(UUID exileId,String name,UUID sourceId,Game game,ArrayList<UUID> appliedEffects){
  Zone fromZone=game.getState().getZone(objectId);
  Player controller=game.getPlayer(controllerId);
  if (controller != null && controller.removeFromBattlefield(this,game)) {
    ZoneChangeEvent event=new ZoneChangeEvent(this,sourceId,ownerId,fromZone,Zone.EXILED,appliedEffects);
    if (!game.replaceEvent(event)) {
      game.rememberLKI(objectId,Zone.BATTLEFIELD,this);
      if (exileId == null) {
        game.getExile().getPermanentExile().add(card);
      }
 else {
        game.getExile().createZone(exileId,name).add(card);
      }
      game.setZone(objectId,event.getToZone());
      game.addSimultaneousEvent(event);
      return true;
    }
  }
  return false;
}",0.8566433566433567
159361,"protected void copyFromCard(Card card){
  this.name=card.getName();
  this.abilities.clear();
  this.abilities.addAll(card.getAbilities());
  this.abilities.setControllerId(this.controllerId);
  this.watchers.addAll(card.getWatchers());
  this.cardType.clear();
  this.cardType.addAll(card.getCardType());
  this.color=card.getColor().copy();
  this.manaCost=card.getManaCost().copy();
  this.power=card.getPower().copy();
  this.toughness=card.getToughness().copy();
  if (card instanceof PermanentCard) {
    this.maxLevelCounters=((PermanentCard)card).maxLevelCounters;
  }
  this.subtype.clear();
  this.subtype.addAll(card.getSubtype());
  this.supertype.clear();
  this.supertype.addAll(card.getSupertype());
  this.expansionSetCode=card.getExpansionSetCode();
  this.rarity=card.getRarity();
  this.cardNumber=card.getCardNumber();
  this.usesVariousArt=card.getUsesVariousArt();
  canTransform=card.canTransform();
  if (canTransform) {
    secondSideCard=card.getSecondCardFace();
    nightCard=card.isNightCard();
  }
  this.flipCard=card.isFlipCard();
  this.flipCardName=card.getFlipCardName();
}","protected void copyFromCard(Card card){
  this.name=card.getName();
  this.abilities.clear();
  this.abilities.addAll(card.getAbilities());
  this.abilities.setControllerId(this.controllerId);
  this.watchers.addAll(card.getWatchers());
  this.cardType.clear();
  this.cardType.addAll(card.getCardType());
  this.color=card.getColor().copy();
  this.manaCost=card.getManaCost().copy();
  this.power=card.getPower().copy();
  this.toughness=card.getToughness().copy();
  if (card instanceof PermanentCard) {
    this.maxLevelCounters=((PermanentCard)card).maxLevelCounters;
  }
  this.subtype.clear();
  this.subtype.addAll(card.getSubtype());
  this.supertype.clear();
  this.supertype.addAll(card.getSupertype());
  this.expansionSetCode=card.getExpansionSetCode();
  this.rarity=card.getRarity();
  this.cardNumber=card.getCardNumber();
  this.usesVariousArt=card.getUsesVariousArt();
  this.zoneChangeCounter=card.getZoneChangeCounter();
  canTransform=card.canTransform();
  if (canTransform) {
    secondSideCard=card.getSecondCardFace();
    nightCard=card.isNightCard();
  }
  this.flipCard=card.isFlipCard();
  this.flipCardName=card.getFlipCardName();
}",0.9762114537444934
159362,"@Override public boolean moveToZone(Zone toZone,UUID sourceId,Game game,boolean flag,ArrayList<UUID> appliedEffects){
  Zone fromZone=game.getState().getZone(objectId);
  Player controller=game.getPlayer(controllerId);
  if (controller != null && controller.removeFromBattlefield(this,game)) {
    ZoneChangeEvent event=new ZoneChangeEvent(this,sourceId,controllerId,fromZone,toZone,appliedEffects);
    if (!game.replaceEvent(event)) {
      Player owner=game.getPlayer(ownerId);
      game.rememberLKI(objectId,Zone.BATTLEFIELD,this);
      if (owner != null) {
        this.setControllerId(ownerId);
switch (event.getToZone()) {
case GRAVEYARD:
          owner.putInGraveyard(card,game,!flag);
        break;
case HAND:
      owner.getHand().add(card);
    break;
case EXILED:
  game.getExile().getPermanentExile().add(card);
break;
case COMMAND:
game.addCommander(new Commander(card));
break;
case LIBRARY:
if (flag) {
owner.getLibrary().putOnTop(card,game);
}
 else {
owner.getLibrary().putOnBottom(card,game);
}
break;
case BATTLEFIELD:
break;
}
game.setZone(objectId,event.getToZone());
game.addSimultaneousEvent(event);
if (event.getFromZone().equals(Zone.BATTLEFIELD)) {
game.getState().handleSimultaneousEvent(game);
game.resetForSourceId(getId());
game.applyEffects();
}
return game.getState().getZone(objectId) == toZone;
}
}
}
return false;
}","@Override public boolean moveToZone(Zone toZone,UUID sourceId,Game game,boolean flag,ArrayList<UUID> appliedEffects){
  Zone fromZone=game.getState().getZone(objectId);
  Player controller=game.getPlayer(controllerId);
  if (controller != null && controller.removeFromBattlefield(this,game)) {
    ZoneChangeEvent event=new ZoneChangeEvent(this,sourceId,controllerId,fromZone,toZone,appliedEffects);
    if (!game.replaceEvent(event)) {
      Player owner=game.getPlayer(ownerId);
      game.rememberLKI(objectId,Zone.BATTLEFIELD,this);
      if (owner != null) {
        this.setControllerId(ownerId);
switch (event.getToZone()) {
case GRAVEYARD:
          owner.putInGraveyard(card,game,!flag);
        break;
case HAND:
      owner.getHand().add(card);
    break;
case EXILED:
  game.getExile().getPermanentExile().add(card);
break;
case COMMAND:
game.addCommander(new Commander(card));
break;
case LIBRARY:
if (flag) {
owner.getLibrary().putOnTop(card,game);
}
 else {
owner.getLibrary().putOnBottom(card,game);
}
break;
case BATTLEFIELD:
break;
}
game.setZone(objectId,event.getToZone());
game.addSimultaneousEvent(event);
return game.getState().getZone(objectId) == toZone;
}
}
}
return false;
}",0.9397496087636932
159363,"protected List<Card> getHandCards(TestPlayer player){
  if (handCards.containsKey(player)) {
    return handCards.get(player);
  }
  List<Card> hand=new ArrayList<Card>();
  handCards.put(player,hand);
  return hand;
}","protected List<Card> getHandCards(TestPlayer player){
  if (handCards.containsKey(player)) {
    return handCards.get(player);
  }
  List<Card> hand=new ArrayList<>();
  handCards.put(player,hand);
  return hand;
}",0.9907407407407408
159364,"private static void deleteSavedGames(){
  File directory=new File(""String_Node_Str"");
  if (!directory.exists())   directory.mkdirs();
  File[] files=directory.listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.endsWith(""String_Node_Str"");
    }
  }
);
  for (  File file : files) {
    file.delete();
  }
}","private static void deleteSavedGames(){
  File directory=new File(""String_Node_Str"");
  if (!directory.exists()) {
    directory.mkdirs();
  }
  File[] files=directory.listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.endsWith(""String_Node_Str"");
    }
  }
);
  for (  File file : files) {
    file.delete();
  }
}",0.9893899204244032
159365,"protected List<Card> getLibraryCards(TestPlayer player){
  if (libraryCards.containsKey(player)) {
    return libraryCards.get(player);
  }
  List<Card> library=new ArrayList<Card>();
  libraryCards.put(player,library);
  return library;
}","protected List<Card> getLibraryCards(TestPlayer player){
  if (libraryCards.containsKey(player)) {
    return libraryCards.get(player);
  }
  List<Card> library=new ArrayList<>();
  libraryCards.put(player,library);
  return library;
}",0.9915611814345991
159366,"protected Map<Zone,String> getCommands(TestPlayer player){
  if (commands.containsKey(player)) {
    return commands.get(player);
  }
  Map<Zone,String> command=new HashMap<Zone,String>();
  commands.put(player,command);
  return command;
}","protected Map<Zone,String> getCommands(TestPlayer player){
  if (commands.containsKey(player)) {
    return commands.get(player);
  }
  Map<Zone,String> command=new HashMap<>();
  commands.put(player,command);
  return command;
}",0.8017057569296375
159367,"protected void parseScenario(String filename) throws FileNotFoundException {
  parserState=ParserState.INIT;
  File f=new File(filename);
  Scanner scanner=new Scanner(f);
  try {
    while (scanner.hasNextLine()) {
      String line=scanner.nextLine().trim();
      if (line == null || line.isEmpty() || line.startsWith(""String_Node_Str""))       continue;
      if (line.startsWith(""String_Node_Str"")) {
        includeFrom(line);
        continue;
      }
      if (line.startsWith(""String_Node_Str"")) {
        parserState=ParserState.EXPECTED;
        continue;
      }
      parseLine(line);
    }
  }
  finally {
    scanner.close();
  }
}","protected void parseScenario(String filename) throws FileNotFoundException {
  parserState=ParserState.INIT;
  File f=new File(filename);
  Scanner scanner=new Scanner(f);
  try {
    while (scanner.hasNextLine()) {
      String line=scanner.nextLine().trim();
      if (line == null || line.isEmpty() || line.startsWith(""String_Node_Str"")) {
        continue;
      }
      if (line.startsWith(""String_Node_Str"")) {
        includeFrom(line);
        continue;
      }
      if (line.startsWith(""String_Node_Str"")) {
        parserState=ParserState.EXPECTED;
        continue;
      }
      parseLine(line);
    }
  }
  finally {
    scanner.close();
  }
}",0.9907834101382488
159368,"protected List<Card> getGraveCards(TestPlayer player){
  if (graveyardCards.containsKey(player)) {
    return graveyardCards.get(player);
  }
  List<Card> grave=new ArrayList<Card>();
  graveyardCards.put(player,grave);
  return grave;
}","protected List<Card> getGraveCards(TestPlayer player){
  if (graveyardCards.containsKey(player)) {
    return graveyardCards.get(player);
  }
  List<Card> grave=new ArrayList<>();
  graveyardCards.put(player,grave);
  return grave;
}",0.9914893617021276
159369,"protected List<PermanentCard> getBattlefieldCards(TestPlayer player){
  if (battlefieldCards.containsKey(player)) {
    return battlefieldCards.get(player);
  }
  List<PermanentCard> battlefield=new ArrayList<PermanentCard>();
  battlefieldCards.put(player,battlefield);
  return battlefield;
}","protected List<PermanentCard> getBattlefieldCards(TestPlayer player){
  if (battlefieldCards.containsKey(player)) {
    return battlefieldCards.get(player);
  }
  List<PermanentCard> battlefield=new ArrayList<>();
  battlefieldCards.put(player,battlefield);
  return battlefield;
}",0.977391304347826
159370,"/** 
 * Define turn number and step to stop the game on.
 * @param turn
 * @param step
 */
@Override public void setStopAt(int turn,PhaseStep step){
  stopOnTurn=turn == -1 ? null : Integer.valueOf(turn);
  stopAtStep=step;
}","/** 
 * Define turn number and step to stop the game on. The game stops after executing the step
 * @param turn
 * @param step
 */
@Override public void setStopAt(int turn,PhaseStep step){
  stopOnTurn=turn == -1 ? null : Integer.valueOf(turn);
  stopAtStep=step;
}",0.9183673469387756
159371,"protected void resolve(){
  StackObject top=null;
  try {
    top=state.getStack().peek();
    top.resolve(this);
  }
  finally {
    if (top != null) {
      state.getStack().remove(top);
      state.handleSimultaneousEvent(this);
    }
  }
}","protected void resolve(){
  StackObject top=null;
  try {
    top=state.getStack().peek();
    top.resolve(this);
  }
  finally {
    if (top != null) {
      state.getStack().remove(top);
      while (state.hasSimultaneousEvents()) {
        state.handleSimultaneousEvent(this);
      }
    }
  }
}",0.8708487084870848
159372,"@Override public boolean resolve(Game game){
  boolean result;
  if (this.getCardType().contains(CardType.INSTANT) || this.getCardType().contains(CardType.SORCERY)) {
    int index=0;
    result=false;
    boolean legalParts=false;
    for (    SpellAbility spellAbility : this.spellAbilities) {
      legalParts|=spellAbilityHasLegalParts(spellAbility,game);
    }
    if (legalParts) {
      for (      SpellAbility spellAbility : this.spellAbilities) {
        if (spellAbilityHasLegalParts(spellAbility,game)) {
          for (          UUID modeId : spellAbility.getModes().getSelectedModes()) {
            spellAbility.getModes().setMode(spellAbility.getModes().get(modeId));
            if (spellAbility.getTargets().stillLegal(spellAbility,game)) {
              if (!spellAbility.getSpellAbilityType().equals(SpellAbilityType.SPLICE)) {
                updateOptionalCosts(index);
              }
              result|=spellAbility.resolve(game);
            }
          }
          index++;
        }
      }
      if (!copiedSpell) {
        for (        Effect effect : ability.getEffects()) {
          if (effect instanceof PostResolveEffect) {
            ((PostResolveEffect)effect).postResolve(card,ability,controllerId,game);
            return result;
          }
        }
        if (!card.isCopy() && game.getState().getZone(card.getId()) == Zone.STACK) {
          card.moveToZone(Zone.GRAVEYARD,ability.getId(),game,false);
        }
      }
      return result;
    }
    game.informPlayers(getName() + ""String_Node_Str"");
    counter(null,game);
    return false;
  }
 else   if (this.getCardType().contains(CardType.ENCHANTMENT) && this.getSubtype().contains(""String_Node_Str"")) {
    if (ability.getTargets().stillLegal(ability,game)) {
      updateOptionalCosts(0);
      boolean bestow=this.getSpellAbility() instanceof BestowAbility;
      if (bestow) {
        card.getCardType().remove(CardType.CREATURE);
      }
      if (card.putOntoBattlefield(game,fromZone,ability.getId(),controllerId)) {
        if (bestow) {
          Permanent permanent=game.getPermanent(card.getId());
          if (permanent != null && permanent instanceof PermanentCard) {
            ((PermanentCard)permanent).getCard().getCardType().add(CardType.CREATURE);
          }
          card.getCardType().add(CardType.CREATURE);
        }
        game.getState().handleSimultaneousEvent(game);
        return ability.resolve(game);
      }
      if (bestow) {
        card.getCardType().add(CardType.CREATURE);
      }
      return false;
    }
    if (this.getSpellAbility() instanceof BestowAbility) {
      updateOptionalCosts(0);
      result=card.putOntoBattlefield(game,fromZone,ability.getId(),controllerId);
      game.getState().handleSimultaneousEvent(game);
      return result;
    }
 else {
      game.informPlayers(getName() + ""String_Node_Str"");
      counter(null,game);
      return false;
    }
  }
 else {
    updateOptionalCosts(0);
    result=card.putOntoBattlefield(game,fromZone,ability.getId(),controllerId);
    game.getState().handleSimultaneousEvent(game);
    return result;
  }
}","@Override public boolean resolve(Game game){
  boolean result;
  if (this.getCardType().contains(CardType.INSTANT) || this.getCardType().contains(CardType.SORCERY)) {
    int index=0;
    result=false;
    boolean legalParts=false;
    for (    SpellAbility spellAbility : this.spellAbilities) {
      legalParts|=spellAbilityHasLegalParts(spellAbility,game);
    }
    if (legalParts) {
      for (      SpellAbility spellAbility : this.spellAbilities) {
        if (spellAbilityHasLegalParts(spellAbility,game)) {
          for (          UUID modeId : spellAbility.getModes().getSelectedModes()) {
            spellAbility.getModes().setMode(spellAbility.getModes().get(modeId));
            if (spellAbility.getTargets().stillLegal(spellAbility,game)) {
              if (!spellAbility.getSpellAbilityType().equals(SpellAbilityType.SPLICE)) {
                updateOptionalCosts(index);
              }
              result|=spellAbility.resolve(game);
            }
          }
          index++;
        }
      }
      if (!copiedSpell) {
        for (        Effect effect : ability.getEffects()) {
          if (effect instanceof PostResolveEffect) {
            ((PostResolveEffect)effect).postResolve(card,ability,controllerId,game);
            return result;
          }
        }
        if (!card.isCopy() && game.getState().getZone(card.getId()) == Zone.STACK) {
          card.moveToZone(Zone.GRAVEYARD,ability.getId(),game,false);
        }
      }
      return result;
    }
    game.informPlayers(getName() + ""String_Node_Str"");
    counter(null,game);
    return false;
  }
 else   if (this.getCardType().contains(CardType.ENCHANTMENT) && this.getSubtype().contains(""String_Node_Str"")) {
    if (ability.getTargets().stillLegal(ability,game)) {
      updateOptionalCosts(0);
      boolean bestow=this.getSpellAbility() instanceof BestowAbility;
      if (bestow) {
        card.getCardType().remove(CardType.CREATURE);
      }
      if (card.putOntoBattlefield(game,fromZone,ability.getId(),controllerId)) {
        if (bestow) {
          Permanent permanent=game.getPermanent(card.getId());
          if (permanent != null && permanent instanceof PermanentCard) {
            ((PermanentCard)permanent).getCard().getCardType().add(CardType.CREATURE);
          }
          card.getCardType().add(CardType.CREATURE);
        }
        game.getState().handleSimultaneousEvent(game);
        return ability.resolve(game);
      }
      if (bestow) {
        card.getCardType().add(CardType.CREATURE);
      }
      return false;
    }
    if (this.getSpellAbility() instanceof BestowAbility) {
      updateOptionalCosts(0);
      result=card.putOntoBattlefield(game,fromZone,ability.getId(),controllerId);
      return result;
    }
 else {
      game.informPlayers(getName() + ""String_Node_Str"");
      counter(null,game);
      return false;
    }
  }
 else {
    updateOptionalCosts(0);
    result=card.putOntoBattlefield(game,fromZone,ability.getId(),controllerId);
    return result;
  }
}",0.9830397912589692
159373,"public boolean play(Game game,UUID activePlayerId){
  if (game.isPaused() || game.gameOver(null)) {
    return false;
  }
  this.activePlayerId=activePlayerId;
  if (beginPhase(game,activePlayerId)) {
    for (    Step step : steps) {
      if (game.isPaused() || game.gameOver(null)) {
        return false;
      }
      currentStep=step;
      if (!game.isSimulation() && checkStopOnStepOption(game)) {
        return false;
      }
      if (!game.getState().getTurnMods().skipStep(activePlayerId,getStep().getType())) {
        playStep(game);
      }
    }
    if (game.isPaused() || game.gameOver(null)) {
      return false;
    }
    count++;
    endPhase(game,activePlayerId);
    return true;
  }
  return false;
}","public boolean play(Game game,UUID activePlayerId){
  if (game.isPaused() || game.gameOver(null)) {
    return false;
  }
  this.activePlayerId=activePlayerId;
  if (beginPhase(game,activePlayerId)) {
    for (    Step step : steps) {
      if (game.isPaused() || game.gameOver(null)) {
        return false;
      }
      currentStep=step;
      if (!game.getState().getTurnMods().skipStep(activePlayerId,getStep().getType())) {
        playStep(game);
      }
      if (!game.isSimulation() && checkStopOnStepOption(game)) {
        return false;
      }
    }
    if (game.isPaused() || game.gameOver(null)) {
      return false;
    }
    count++;
    endPhase(game,activePlayerId);
    return true;
  }
  return false;
}",0.833103448275862
159374,"public void resumeSelectAttackers(Game game){
  Player player=game.getPlayer(attackerId);
  for (  CombatGroup group : groups) {
    for (    UUID attacker : group.getAttackers()) {
      game.fireEvent(GameEvent.getEvent(GameEvent.EventType.ATTACKER_DECLARED,group.defenderId,attacker,attackerId));
    }
  }
  game.fireEvent(GameEvent.getEvent(GameEvent.EventType.DECLARED_ATTACKERS,attackerId,attackerId));
  game.informPlayers(new StringBuilder(player.getName()).append(""String_Node_Str"").append(groups.size()).append(""String_Node_Str"").toString());
}","public void resumeSelectAttackers(Game game){
  Player player=game.getPlayer(attackerId);
  for (  CombatGroup group : groups) {
    for (    UUID attacker : group.getAttackers()) {
      game.fireEvent(GameEvent.getEvent(GameEvent.EventType.ATTACKER_DECLARED,group.defenderId,attacker,attackerId));
    }
  }
  game.fireEvent(GameEvent.getEvent(GameEvent.EventType.DECLARED_ATTACKERS,attackerId,attackerId));
  game.informPlayers(new StringBuilder(player.getName()).append(""String_Node_Str"").append(groups.size()).append(groups.size() == 1 ? ""String_Node_Str"" : ""String_Node_Str"").toString());
}",0.9643788010425716
159375,"public PermanentView(Permanent permanent,Card card){
  super(permanent);
  this.rules=permanent.getRules();
  this.tapped=permanent.isTapped();
  this.flipped=permanent.isFlipped();
  this.phasedIn=permanent.isPhasedIn();
  this.faceUp=permanent.isFaceUp();
  this.summoningSickness=permanent.hasSummoningSickness();
  this.damage=permanent.getDamage();
  if (permanent.getAttachments().size() > 0) {
    attachments=new ArrayList<>();
    attachments.addAll(permanent.getAttachments());
  }
  if (isToken()) {
    original=new CardView(((PermanentToken)permanent).getToken());
    original.expansionSetCode=permanent.getExpansionSetCode();
    tokenSetCode=original.getTokenSetCode();
  }
 else {
    if (card != null) {
      original=new CardView(card);
    }
 else {
      original=null;
    }
  }
  this.transformed=permanent.isTransformed();
  this.copy=permanent.isCopy();
  if (!original.getName().equals(this.getName())) {
    if (permanent.isCopy() && permanent.isFlipCard()) {
      this.alternateName=permanent.getFlipCardName();
      this.originalName=this.getName();
    }
 else {
      this.alternateName=original.getName();
      this.originalName=this.getName();
    }
  }
}","public PermanentView(Permanent permanent,Card card){
  super(permanent);
  this.rules=permanent.getRules();
  this.tapped=permanent.isTapped();
  this.flipped=permanent.isFlipped();
  this.phasedIn=permanent.isPhasedIn();
  this.faceUp=permanent.isFaceUp();
  this.summoningSickness=permanent.hasSummoningSickness();
  this.damage=permanent.getDamage();
  if (permanent.getAttachments().size() > 0) {
    attachments=new ArrayList<>();
    attachments.addAll(permanent.getAttachments());
  }
  if (isToken()) {
    original=new CardView(((PermanentToken)permanent).getToken());
    original.expansionSetCode=permanent.getExpansionSetCode();
    tokenSetCode=original.getTokenSetCode();
  }
 else {
    if (card != null) {
      original=new CardView(card);
    }
 else {
      original=null;
    }
  }
  this.transformed=permanent.isTransformed();
  this.copy=permanent.isCopy();
  if (original != null && !original.getName().equals(this.getName())) {
    if (permanent.isCopy() && permanent.isFlipCard()) {
      this.alternateName=permanent.getFlipCardName();
      this.originalName=this.getName();
    }
 else {
      this.alternateName=original.getName();
      this.originalName=this.getName();
    }
  }
}",0.9916805324459236
159376,"@Override public boolean apply(Game game,Ability source){
  Player opponent=game.getPlayer(this.getTargetPointer().getFirst(game,source));
  if (opponent != null) {
    FilterCreaturePermanent filter=new FilterCreaturePermanent();
    filter.add(new TappedPredicate());
    filter.add(new ControllerIdPredicate(opponent.getId()));
    return new DrawCardSourceControllerEffect(game.getBattlefield().count(filter,source.getSourceId(),source.getSourceId(),game)).apply(game,source);
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player opponent=game.getPlayer(this.getTargetPointer().getFirst(game,source));
  if (opponent != null) {
    FilterCreaturePermanent filter=new FilterCreaturePermanent();
    filter.add(new TappedPredicate());
    filter.add(new ControllerIdPredicate(opponent.getId()));
    return new DrawCardSourceControllerEffect(game.getBattlefield().count(filter,source.getSourceId(),source.getControllerId(),game)).apply(game,source);
  }
  return false;
}",0.984126984126984
159377,"@Override public Set<UUID> possibleTargets(UUID sourceControllerId,Game game){
  Set<UUID> possibleTargets=new HashSet<UUID>();
  for (  StackObject stackObject : game.getStack()) {
    Spell spell=game.getStack().getSpell(stackObject.getId());
    if (spell != null && filter.match(spell,null,sourceControllerId,game) && filter.match(spell,game)) {
      possibleTargets.add(spell.getId());
    }
  }
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(new FilterCreaturePermanent(),sourceControllerId,game)) {
    if (filter.match(permanent,null,sourceControllerId,game)) {
      possibleTargets.add(permanent.getId());
    }
  }
  return possibleTargets;
}","@Override public Set<UUID> possibleTargets(UUID sourceControllerId,Game game){
  Set<UUID> possibleTargets=new HashSet<UUID>();
  for (  StackObject stackObject : game.getStack()) {
    Spell spell=game.getStack().getSpell(stackObject.getId());
    if (spell != null && filter.match(spell,null,sourceControllerId,game) && filter.match(spell,game)) {
      possibleTargets.add(spell.getId());
    }
  }
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(filterPermanent,sourceControllerId,game)) {
    if (filter.match(permanent,null,sourceControllerId,game)) {
      possibleTargets.add(permanent.getId());
    }
  }
  return possibleTargets;
}",0.8736998514115899
159378,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType().equals(GameEvent.EventType.DAMAGED_PLAYER) && event.getTargetId().equals(this.getControllerId())) {
    DamageEvent damageEvent=(DamageEvent)event;
    return damageEvent.isCombatDamage();
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType().equals(GameEvent.EventType.DAMAGED_PLAYER) && event.getTargetId().equals(this.getControllerId())) {
    DamagedEvent damagedEvent=(DamagedEvent)event;
    return damagedEvent.isCombatDamage();
  }
  return false;
}",0.9533333333333334
159379,"protected PreventionEffectData preventDamageAction(GameEvent event,Ability source,Game game){
  PreventionEffectData preventionData=game.preventDamage(event,source,game,amountToPrevent);
  if (!preventionData.isError() && !preventionData.isReplaced()) {
    if (consumable) {
      amountToPrevent=preventionData.getRemainingAmount();
    }
    if (amountToPrevent == 0) {
      this.used=true;
    }
  }
  return preventionData;
}","protected PreventionEffectData preventDamageAction(GameEvent event,Ability source,Game game){
  PreventionEffectData preventionData=game.preventDamage(event,source,game,amountToPrevent);
  if (!preventionData.isError() && !preventionData.isReplaced()) {
    if (consumable) {
      amountToPrevent=preventionData.getRemainingAmount();
    }
    if (amountToPrevent == 0) {
      this.discard();
    }
  }
  return preventionData;
}",0.9814385150812064
159380,"public PreventDamageSourceEffect(final PreventDamageSourceEffect effect){
  super(effect);
  this.amount=effect.amount;
}","public PreventDamageSourceEffect(final PreventDamageSourceEffect effect){
  super(effect);
}",0.863849765258216
159381,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (!this.used && super.applies(event,source,game) && event.getTargetId().equals(source.getSourceId())) {
    return true;
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  return super.applies(event,source,game) && event.getTargetId().equals(source.getSourceId());
}",0.8527918781725888
159382,"@Override public String getText(Mode mode){
  if (staticText != null && !staticText.isEmpty()) {
    return staticText;
  }
  StringBuilder sb=new StringBuilder();
  if (amount == Integer.MAX_VALUE) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"").append(amount).append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"").append(duration.toString());
  return sb.toString();
}","@Override public String getText(Mode mode){
  if (staticText != null && !staticText.isEmpty()) {
    return staticText;
  }
  StringBuilder sb=new StringBuilder();
  if (amountToPrevent == Integer.MAX_VALUE) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"").append(amountToPrevent).append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"").append(duration.toString());
  return sb.toString();
}",0.9785714285714284
159383,"@Override public PreventionEffectData preventDamage(GameEvent event,Ability source,Game game,int amountToPrevent){
  PreventionEffectData result=new PreventionEffectData(amountToPrevent);
  if (!(event instanceof DamageEvent)) {
    result.setError(true);
    return result;
  }
  DamageEvent damageEvent=(DamageEvent)event;
  GameEvent preventEvent=new GameEvent(GameEvent.EventType.PREVENT_DAMAGE,damageEvent.getTargetId(),damageEvent.getSourceId(),source.getControllerId(),damageEvent.getAmount(),false);
  if (game.replaceEvent(preventEvent)) {
    result.setReplaced(true);
    return result;
  }
  if (event.getAmount() > amountToPrevent) {
    result.setPreventedDamage(amountToPrevent);
    damageEvent.setAmount(event.getAmount() - amountToPrevent);
  }
 else {
    result.setPreventedDamage(event.getAmount());
    damageEvent.setAmount(0);
  }
  if (amountToPrevent != Integer.MAX_VALUE) {
    event.setData(Integer.toString(amountToPrevent-=result.getPreventedDamage()));
  }
  MageObject damageSource=game.getObject(damageEvent.getSourceId());
  MageObject preventionSource=game.getObject(source.getSourceId());
  if (damageSource != null && preventionSource != null) {
    MageObject targetObject=game.getObject(event.getTargetId());
    String targetName=""String_Node_Str"";
    if (targetObject == null) {
      Player targetPlayer=game.getPlayer(event.getTargetId());
      if (targetPlayer != null) {
        targetName=targetPlayer.getName();
      }
    }
 else {
      targetName=targetObject.getName();
    }
    StringBuilder message=new StringBuilder(preventionSource.getName()).append(""String_Node_Str"");
    message.append(Integer.toString(result.getPreventedDamage())).append(""String_Node_Str"").append(damageSource.getName());
    if (!targetName.isEmpty()) {
      message.append(""String_Node_Str"").append(targetName);
    }
    game.informPlayers(message.toString());
  }
  game.fireEvent(GameEvent.getEvent(GameEvent.EventType.PREVENTED_DAMAGE,damageEvent.getTargetId(),source.getSourceId(),source.getControllerId(),result.getPreventedDamage()));
  return result;
}","@Override public PreventionEffectData preventDamage(GameEvent event,Ability source,Game game,int amountToPrevent){
  PreventionEffectData result=new PreventionEffectData(amountToPrevent);
  if (!(event instanceof DamageEvent)) {
    result.setError(true);
    return result;
  }
  DamageEvent damageEvent=(DamageEvent)event;
  GameEvent preventEvent=new GameEvent(GameEvent.EventType.PREVENT_DAMAGE,damageEvent.getTargetId(),damageEvent.getSourceId(),source.getControllerId(),damageEvent.getAmount(),false);
  if (game.replaceEvent(preventEvent)) {
    result.setReplaced(true);
    return result;
  }
  if (event.getAmount() > amountToPrevent) {
    result.setPreventedDamage(amountToPrevent);
    damageEvent.setAmount(event.getAmount() - amountToPrevent);
  }
 else {
    result.setPreventedDamage(event.getAmount());
    damageEvent.setAmount(0);
  }
  if (amountToPrevent != Integer.MAX_VALUE) {
    result.setRemainingAmount(amountToPrevent-=result.getPreventedDamage());
  }
  MageObject damageSource=game.getObject(damageEvent.getSourceId());
  MageObject preventionSource=game.getObject(source.getSourceId());
  if (damageSource != null && preventionSource != null) {
    MageObject targetObject=game.getObject(event.getTargetId());
    String targetName=""String_Node_Str"";
    if (targetObject == null) {
      Player targetPlayer=game.getPlayer(event.getTargetId());
      if (targetPlayer != null) {
        targetName=targetPlayer.getName();
      }
    }
 else {
      targetName=targetObject.getName();
    }
    StringBuilder message=new StringBuilder(preventionSource.getName()).append(""String_Node_Str"");
    message.append(Integer.toString(result.getPreventedDamage())).append(""String_Node_Str"").append(damageSource.getName());
    if (!targetName.isEmpty()) {
      message.append(""String_Node_Str"").append(targetName);
    }
    game.informPlayers(message.toString());
  }
  game.fireEvent(GameEvent.getEvent(GameEvent.EventType.PREVENTED_DAMAGE,damageEvent.getTargetId(),source.getSourceId(),source.getControllerId(),result.getPreventedDamage()));
  return result;
}",0.9866092778574844
159384,"private String getOptionalTextSuffix(Game game,Spell spell){
  StringBuilder sb=new StringBuilder();
  for (  Ability ability : (Abilities<Ability>)spell.getAbilities()) {
    if (ability instanceof OptionalAdditionalSourceCosts) {
      sb.append(((OptionalAdditionalSourceCosts)ability).getCastMessageSuffix());
    }
    if (ability instanceof AlternativeSourceCosts) {
      sb.append(((AlternativeSourceCosts)ability).getCastMessageSuffix());
    }
  }
  return sb.toString();
}","private String getOptionalTextSuffix(Game game,Spell spell){
  StringBuilder sb=new StringBuilder();
  for (  Ability ability : (Abilities<Ability>)spell.getAbilities()) {
    if (ability instanceof OptionalAdditionalSourceCosts) {
      sb.append(((OptionalAdditionalSourceCosts)ability).getCastMessageSuffix());
    }
    if (ability instanceof AlternativeSourceCosts && ((AlternativeSourceCosts)ability).isActivated()) {
      sb.append(((AlternativeSourceCosts)ability).getCastMessageSuffix());
    }
  }
  return sb.toString();
}",0.9498525073746312
159385,"/** 
 * Various AI optimizations for actions.
 * @param allActions
 */
protected void optimize(Game game,List<Ability> allActions){
  for (  TreeOptimizer optimizer : optimizers) {
    optimizer.optimize(game,allActions);
  }
  Collections.sort(allActions,new Comparator<Ability>(){
    @Override public int compare(    Ability ability,    Ability ability1){
      String rule=ability.toString();
      String rule1=ability1.toString();
      if (rule.equals(""String_Node_Str"")) {
        return 1;
      }
      if (rule1.equals(""String_Node_Str"")) {
        return -1;
      }
      if (rule.startsWith(""String_Node_Str"")) {
        return -1;
      }
      if (rule1.startsWith(""String_Node_Str"")) {
        return 1;
      }
      if (rule.startsWith(""String_Node_Str"")) {
        return -1;
      }
      if (rule1.startsWith(""String_Node_Str"")) {
        return 1;
      }
      return ability.getRule().compareTo(ability1.getRule());
    }
  }
);
}","/** 
 * Various AI optimizations for actions.
 * @param game
 * @param allActions
 */
protected void optimize(Game game,List<Ability> allActions){
  for (  TreeOptimizer optimizer : optimizers) {
    optimizer.optimize(game,allActions);
  }
  Collections.sort(allActions,new Comparator<Ability>(){
    @Override public int compare(    Ability ability,    Ability ability1){
      String rule=ability.toString();
      String rule1=ability1.toString();
      if (rule.equals(""String_Node_Str"")) {
        return 1;
      }
      if (rule1.equals(""String_Node_Str"")) {
        return -1;
      }
      if (rule.startsWith(""String_Node_Str"")) {
        return -1;
      }
      if (rule1.startsWith(""String_Node_Str"")) {
        return 1;
      }
      if (rule.startsWith(""String_Node_Str"")) {
        return -1;
      }
      if (rule1.startsWith(""String_Node_Str"")) {
        return 1;
      }
      return ability.getRule().compareTo(ability1.getRule());
    }
  }
);
}",0.9922077922077922
159386,"protected void calculateActions(Game game){
  if (!getNextAction(game)) {
    Game sim=createSimulation(game);
    SimulationNode2.resetCount();
    root=new SimulationNode2(null,sim,maxDepth,playerId);
    logger.info(""String_Node_Str"");
    currentScore=GameStateEvaluator2.evaluate(playerId,game);
    addActionsTimed();
    if (root.children.size() > 0) {
      root=root.children.get(0);
      int bestScore=root.getScore();
      actions=new LinkedList<Ability>(root.abilities);
      combat=root.combat;
    }
 else {
      logger.info(""String_Node_Str"" + game.getPlayer(playerId).getName() + ""String_Node_Str""+ root.getScore()+ ""String_Node_Str""+ currentScore);
    }
  }
}","protected void calculateActions(Game game){
  if (!getNextAction(game)) {
    Game sim=createSimulation(game);
    SimulationNode2.resetCount();
    root=new SimulationNode2(null,sim,maxDepth,playerId);
    logger.info(""String_Node_Str"");
    currentScore=GameStateEvaluator2.evaluate(playerId,game);
    addActionsTimed();
    if (root.children.size() > 0) {
      root=root.children.get(0);
      int bestScore=root.getScore();
      actions=new LinkedList<>(root.abilities);
      combat=root.combat;
    }
 else {
      logger.info(""String_Node_Str"" + game.getPlayer(playerId).getName() + ""String_Node_Str""+ root.getScore()+ ""String_Node_Str""+ currentScore);
    }
  }
}",0.7055350553505535
159387,"protected boolean getNextAction(Game game){
  if (root != null && root.children.size() > 0) {
    SimulationNode2 test=root;
    root=root.children.get(0);
    while (root.children.size() > 0 && !root.playerId.equals(playerId)) {
      test=root;
      root=root.children.get(0);
    }
    logger.trace(""String_Node_Str"" + game.getState().getValue(true) + ""String_Node_Str""+ test.gameValue);
    if (!suggested.isEmpty()) {
      return false;
    }
    if (root.playerId.equals(playerId) && root.abilities != null && game.getState().getValue(true).hashCode() == test.gameValue) {
      logger.info(""String_Node_Str"");
      actions=new LinkedList<Ability>(root.abilities);
      combat=root.combat;
      return true;
    }
 else {
      return false;
    }
  }
  return false;
}","protected boolean getNextAction(Game game){
  if (root != null && root.children.size() > 0) {
    SimulationNode2 test=root;
    root=root.children.get(0);
    while (root.children.size() > 0 && !root.playerId.equals(playerId)) {
      test=root;
      root=root.children.get(0);
    }
    logger.trace(""String_Node_Str"" + game.getState().getValue(true) + ""String_Node_Str""+ test.gameValue);
    if (!suggested.isEmpty()) {
      return false;
    }
    if (root.playerId.equals(playerId) && root.abilities != null && game.getState().getValue(true).hashCode() == test.gameValue) {
      logger.info(""String_Node_Str"");
      actions=new LinkedList<>(root.abilities);
      combat=root.combat;
      return true;
    }
 else {
      return false;
    }
  }
  return false;
}",0.9555698647778492
159388,"/** 
 * Mark an ability to be removed Not thread-safe for performance reasons.
 * @param ability
 */
protected void removeAbility(Ability ability){
  if (toRemove == null) {
    toRemove=new ArrayList<Ability>();
  }
  toRemove.add(ability);
}","/** 
 * Mark an ability to be removed Not thread-safe for performance reasons.
 * @param ability
 */
protected void removeAbility(Ability ability){
  if (toRemove == null) {
    toRemove=new ArrayList<>();
  }
  toRemove.add(ability);
}",0.9853862212943632
159389,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player == null) {
    return false;
  }
  Card card=player.getLibrary().getFromTop(game);
  if (card != null) {
    Cards cards=new CardsImpl(Zone.PICK);
    cards.add(card);
    player.lookAtCards(""String_Node_Str"",cards,game);
  }
 else {
    return false;
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player == null) {
    return false;
  }
  Card card=player.getLibrary().getFromTop(game);
  if (card != null) {
    Cards cards=new CardsImpl(card);
    player.lookAtCards(""String_Node_Str"",cards,game);
  }
 else {
    return false;
  }
  return true;
}",0.9664948453608248
159390,"public MaritLageToken(){
  super(""String_Node_Str"",""String_Node_Str"");
  cardType.add(CardType.CREATURE);
  subtype.add(""String_Node_Str"");
  supertype.add(""String_Node_Str"");
  color=ObjectColor.BLACK;
  power=new MageInt(20);
  toughness=new MageInt(20);
  this.addAbility(FlyingAbility.getInstance());
  this.addAbility(IndestructibleAbility.getInstance());
  this.setOriginalExpansionSetCode(""String_Node_Str"");
}","public MaritLageToken(){
  super(""String_Node_Str"",""String_Node_Str"");
  this.setOriginalExpansionSetCode(""String_Node_Str"");
  cardType.add(CardType.CREATURE);
  subtype.add(""String_Node_Str"");
  supertype.add(""String_Node_Str"");
  color.setBlack(true);
  power=new MageInt(20);
  toughness=new MageInt(20);
  this.addAbility(FlyingAbility.getInstance());
  this.addAbility(IndestructibleAbility.getInstance());
}",0.8303249097472925
159391,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType() == GameEvent.EventType.ZONE_CHANGE && ((ZoneChangeEvent)event).getToZone() == Zone.BATTLEFIELD && ((ZoneChangeEvent)event).getFromZone() != Zone.HAND) {
    Card card=game.getCard(event.getTargetId());
    if (card != null && card.getCardType().contains(CardType.ENCHANTMENT) && card.hasSubtype(""String_Node_Str"")) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType().equals(GameEvent.EventType.ZONE_CHANGE)) {
    if (((ZoneChangeEvent)event).getToZone().equals(Zone.BATTLEFIELD) && !(((ZoneChangeEvent)event).getFromZone().equals(Zone.HAND))) {
      Card card=game.getCard(event.getTargetId());
      if (card != null && card.getCardType().contains(CardType.ENCHANTMENT) && card.hasSubtype(""String_Node_Str"")) {
        return true;
      }
    }
  }
  return false;
}",0.5363825363825364
159392,"@Override public boolean resolve(Game game){
  boolean result;
  if (this.getCardType().contains(CardType.INSTANT) || this.getCardType().contains(CardType.SORCERY)) {
    int index=0;
    result=false;
    boolean legalParts=false;
    for (    SpellAbility spellAbility : this.spellAbilities) {
      legalParts|=spellAbilityHasLegalParts(spellAbility,game);
    }
    if (legalParts) {
      for (      SpellAbility spellAbility : this.spellAbilities) {
        if (spellAbilityHasLegalParts(spellAbility,game)) {
          for (          UUID modeId : spellAbility.getModes().getSelectedModes()) {
            spellAbility.getModes().setMode(spellAbility.getModes().get(modeId));
            if (spellAbility.getTargets().stillLegal(spellAbility,game)) {
              if (!spellAbility.getSpellAbilityType().equals(SpellAbilityType.SPLICE)) {
                updateOptionalCosts(index);
              }
              result|=spellAbility.resolve(game);
            }
          }
          index++;
        }
      }
      if (!copiedSpell) {
        for (        Effect effect : ability.getEffects()) {
          if (effect instanceof PostResolveEffect) {
            ((PostResolveEffect)effect).postResolve(card,ability,controllerId,game);
            return result;
          }
        }
        if (!card.isCopy() && game.getState().getZone(card.getId()) == Zone.STACK) {
          card.moveToZone(Zone.GRAVEYARD,ability.getId(),game,false);
        }
      }
      return result;
    }
    game.informPlayers(getName() + ""String_Node_Str"");
    counter(null,game);
    return false;
  }
 else   if (this.getCardType().contains(CardType.ENCHANTMENT) && this.getSubtype().contains(""String_Node_Str"")) {
    if (ability.getTargets().stillLegal(ability,game)) {
      updateOptionalCosts(0);
      if (card.putOntoBattlefield(game,fromZone,ability.getId(),controllerId)) {
        if (this.getSpellAbility() instanceof BestowAbility) {
          Permanent permanent=game.getPermanent(card.getId());
          if (permanent != null) {
            permanent.getCardType().remove(CardType.CREATURE);
          }
        }
        game.getState().handleSimultaneousEvent(game);
        return ability.resolve(game);
      }
      return false;
    }
    if (this.getSpellAbility() instanceof BestowAbility) {
      updateOptionalCosts(0);
      result=card.putOntoBattlefield(game,fromZone,ability.getId(),controllerId);
      game.getState().handleSimultaneousEvent(game);
      return result;
    }
 else {
      game.informPlayers(getName() + ""String_Node_Str"");
      counter(null,game);
      return false;
    }
  }
 else {
    updateOptionalCosts(0);
    result=card.putOntoBattlefield(game,fromZone,ability.getId(),controllerId);
    game.getState().handleSimultaneousEvent(game);
    return result;
  }
}","@Override public boolean resolve(Game game){
  boolean result;
  if (this.getCardType().contains(CardType.INSTANT) || this.getCardType().contains(CardType.SORCERY)) {
    int index=0;
    result=false;
    boolean legalParts=false;
    for (    SpellAbility spellAbility : this.spellAbilities) {
      legalParts|=spellAbilityHasLegalParts(spellAbility,game);
    }
    if (legalParts) {
      for (      SpellAbility spellAbility : this.spellAbilities) {
        if (spellAbilityHasLegalParts(spellAbility,game)) {
          for (          UUID modeId : spellAbility.getModes().getSelectedModes()) {
            spellAbility.getModes().setMode(spellAbility.getModes().get(modeId));
            if (spellAbility.getTargets().stillLegal(spellAbility,game)) {
              if (!spellAbility.getSpellAbilityType().equals(SpellAbilityType.SPLICE)) {
                updateOptionalCosts(index);
              }
              result|=spellAbility.resolve(game);
            }
          }
          index++;
        }
      }
      if (!copiedSpell) {
        for (        Effect effect : ability.getEffects()) {
          if (effect instanceof PostResolveEffect) {
            ((PostResolveEffect)effect).postResolve(card,ability,controllerId,game);
            return result;
          }
        }
        if (!card.isCopy() && game.getState().getZone(card.getId()) == Zone.STACK) {
          card.moveToZone(Zone.GRAVEYARD,ability.getId(),game,false);
        }
      }
      return result;
    }
    game.informPlayers(getName() + ""String_Node_Str"");
    counter(null,game);
    return false;
  }
 else   if (this.getCardType().contains(CardType.ENCHANTMENT) && this.getSubtype().contains(""String_Node_Str"")) {
    if (ability.getTargets().stillLegal(ability,game)) {
      updateOptionalCosts(0);
      boolean bestow=this.getSpellAbility() instanceof BestowAbility;
      if (bestow) {
        card.getCardType().remove(CardType.CREATURE);
      }
      if (card.putOntoBattlefield(game,fromZone,ability.getId(),controllerId)) {
        if (bestow) {
          card.getCardType().add(CardType.CREATURE);
        }
        game.getState().handleSimultaneousEvent(game);
        return ability.resolve(game);
      }
      if (bestow) {
        card.getCardType().add(CardType.CREATURE);
      }
      return false;
    }
    if (this.getSpellAbility() instanceof BestowAbility) {
      updateOptionalCosts(0);
      result=card.putOntoBattlefield(game,fromZone,ability.getId(),controllerId);
      game.getState().handleSimultaneousEvent(game);
      return result;
    }
 else {
      game.informPlayers(getName() + ""String_Node_Str"");
      counter(null,game);
      return false;
    }
  }
 else {
    updateOptionalCosts(0);
    result=card.putOntoBattlefield(game,fromZone,ability.getId(),controllerId);
    game.getState().handleSimultaneousEvent(game);
    return result;
  }
}",0.9006320224719101
159393,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  for (  UUID playerId : controller.getInRange()) {
    Player player=game.getPlayer(playerId);
    if (player != null) {
      TargetCardInHand target=new TargetCardInHand(filter);
      if (player.choose(Outcome.PutCreatureInPlay,target,source.getSourceId(),game)) {
        Card card=game.getCard(target.getFirstTarget());
        if (card != null) {
          card.putOntoBattlefield(game,Zone.HAND,source.getId(),player.getId());
        }
      }
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  for (  UUID playerId : controller.getInRange()) {
    Player player=game.getPlayer(playerId);
    if (player != null) {
      TargetCardInHand target=new TargetCardInHand(filter);
      if (player.choose(Outcome.PutCreatureInPlay,target,source.getSourceId(),game)) {
        Card card=game.getCard(target.getFirstTarget());
        if (card != null) {
          player.putOntoBattlefieldWithInfo(card,game,Zone.HAND,source.getSourceId());
        }
      }
    }
  }
  return true;
}",0.964723926380368
159394,"@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  Permanent permanent=game.getPermanent(abilityToModify.getSourceId());
  if (abilityToModify instanceof ActivatedAbility && permanent != null && filter.match(permanent,source.getId(),source.getControllerId(),game)) {
    return true;
  }
  return false;
}","@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof ActivatedAbility) {
    Permanent permanent=game.getPermanent(abilityToModify.getSourceId());
    if (permanent != null && filter.match(permanent,source.getSourceId(),source.getControllerId(),game)) {
      return true;
    }
  }
  return false;
}",0.7727272727272727
159395,"@Override public boolean apply(Game game,Ability source,Ability abilityToModify){
  Mana mana=abilityToModify.getManaCostsToPay().getMana();
  int reduceMax=mana.getColorless();
  if (mana.count() == mana.getColorless()) {
    reduceMax--;
  }
  if (reduceMax > 2) {
    reduceMax=2;
  }
  Player player=game.getPlayer(abilityToModify.getControllerId());
  if (player != null) {
    ChoiceImpl choice=new ChoiceImpl(true);
    LinkedHashSet<String> set=new LinkedHashSet<String>();
    for (int i=0; i <= reduceMax; i++) {
      set.add(String.valueOf(i));
    }
    choice.setChoices(set);
    choice.setMessage(""String_Node_Str"");
    if (player.choose(Outcome.Benefit,choice,game)) {
      int reduce=Integer.parseInt(choice.getChoice());
      mana.setColorless(mana.getColorless() - reduce);
      abilityToModify.getManaCostsToPay().load(mana.toString());
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source,Ability abilityToModify){
  Player controller=game.getPlayer(abilityToModify.getControllerId());
  if (controller != null) {
    Mana mana=abilityToModify.getManaCostsToPay().getMana();
    int reduceMax=mana.getColorless();
    if (reduceMax > 0 && mana.count() == mana.getColorless()) {
      reduceMax--;
    }
    if (reduceMax > 2) {
      reduceMax=2;
    }
    if (reduceMax > 0) {
      ChoiceImpl choice=new ChoiceImpl(true);
      Set<String> set=new LinkedHashSet<>();
      for (int i=0; i <= reduceMax; i++) {
        set.add(String.valueOf(i));
      }
      choice.setChoices(set);
      choice.setMessage(""String_Node_Str"");
      if (controller.choose(Outcome.Benefit,choice,game)) {
        int reduce=Integer.parseInt(choice.getChoice());
        mana.setColorless(mana.getColorless() - reduce);
        abilityToModify.getManaCostsToPay().load(mana.toString());
      }
    }
    return true;
  }
  return false;
}",0.6122233930453108
159396,"public void update(Map<UUID,PermanentView> battlefield){
  boolean changed=false;
  List<PermanentView> permanentsToAdd=new ArrayList<>();
  for (  PermanentView permanent : battlefield.values()) {
    MagePermanent oldMagePermanent=permanents.get(permanent.getId());
    if (oldMagePermanent == null) {
      permanentsToAdd.add(permanent);
      changed=true;
    }
 else {
      if (!changed) {
        changed=CardUtil.isCreature(oldMagePermanent.getOriginalPermanent()) != CardUtil.isCreature(permanent);
        if (!changed) {
          int s1=permanent.getAttachments() == null ? 0 : permanent.getAttachments().size();
          int s2=oldMagePermanent.getLinks().size();
          if (s1 != s2) {
            changed=true;
          }
        }
      }
      oldMagePermanent.update(permanent);
    }
  }
  addedArtifact=addedCreature=addedPermanent=false;
  int count=permanentsToAdd.size();
  for (  PermanentView permanent : permanentsToAdd) {
    addPermanent(permanent,count);
  }
  if (addedArtifact) {
    AudioManager.playAddArtifact();
  }
 else   if (addedCreature) {
    AudioManager.playSummon();
  }
 else   if (addedPermanent) {
    AudioManager.playAddPermanent();
  }
  removedCreature=false;
  for (Iterator<Entry<UUID,MagePermanent>> iterator=permanents.entrySet().iterator(); iterator.hasNext(); ) {
    Entry<UUID,MagePermanent> entry=iterator.next();
    if (!battlefield.containsKey(entry.getKey())) {
      removePermanent(entry.getKey(),1);
      iterator.remove();
      changed=true;
    }
  }
  if (removedCreature) {
    AudioManager.playDiedCreature();
  }
  if (changed) {
    this.battlefield=battlefield;
    sortLayout();
  }
}","public void update(Map<UUID,PermanentView> battlefield){
  boolean changed=false;
  List<PermanentView> permanentsToAdd=new ArrayList<>();
  for (  PermanentView permanent : battlefield.values()) {
    MagePermanent oldMagePermanent=permanents.get(permanent.getId());
    if (oldMagePermanent == null) {
      permanentsToAdd.add(permanent);
      changed=true;
    }
 else {
      if (!changed) {
        changed=CardUtil.isCreature(oldMagePermanent.getOriginalPermanent()) != CardUtil.isCreature(permanent);
        if (!changed) {
          int s1=permanent.getAttachments() == null ? 0 : permanent.getAttachments().size();
          int s2=oldMagePermanent.getLinks().size();
          if (s1 != s2) {
            changed=true;
          }
 else           if (s1 > 0) {
            Set<UUID> attachmentIds=new HashSet<UUID>();
            attachmentIds.addAll(permanent.getAttachments());
            for (            MagePermanent magePermanent : oldMagePermanent.getLinks()) {
              if (!attachmentIds.contains(magePermanent.getOriginalPermanent().getId())) {
                changed=true;
                break;
              }
            }
          }
        }
      }
      oldMagePermanent.update(permanent);
    }
  }
  addedArtifact=addedCreature=addedPermanent=false;
  int count=permanentsToAdd.size();
  for (  PermanentView permanent : permanentsToAdd) {
    addPermanent(permanent,count);
  }
  if (addedArtifact) {
    AudioManager.playAddArtifact();
  }
 else   if (addedCreature) {
    AudioManager.playSummon();
  }
 else   if (addedPermanent) {
    AudioManager.playAddPermanent();
  }
  removedCreature=false;
  for (Iterator<Entry<UUID,MagePermanent>> iterator=permanents.entrySet().iterator(); iterator.hasNext(); ) {
    Entry<UUID,MagePermanent> entry=iterator.next();
    if (!battlefield.containsKey(entry.getKey())) {
      removePermanent(entry.getKey(),1);
      iterator.remove();
      changed=true;
    }
  }
  if (removedCreature) {
    AudioManager.playDiedCreature();
  }
  if (changed) {
    this.battlefield=battlefield;
    sortLayout();
  }
}",0.8870581982460802
159397,"@Override public boolean apply(Game game,Ability source){
  Card card=game.getCard(source.getFirstTarget());
  Player player=game.getPlayer(source.getControllerId());
  if (card != null && player != null) {
    Player targetPlayer=game.getPlayer(card.getOwnerId());
    if (targetPlayer != null) {
      FilterCard filter=new FilterCard(""String_Node_Str"" + card.getName());
      filter.add(new NamePredicate(card.getName()));
      Cards cardsInLibrary=new CardsImpl(Zone.LIBRARY);
      cardsInLibrary.addAll(targetPlayer.getLibrary().getCards(game));
      int cardsCount=targetPlayer.getGraveyard().count(filter,game);
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + card.getName() + ""String_Node_Str""+ targetPlayer.getName());
        TargetCardInGraveyard target=new TargetCardInGraveyard(0,cardsCount,filter);
        if (player.choose(Outcome.Exile,targetPlayer.getGraveyard(),target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getGraveyard().get(targetId,game);
            if (targetCard != null) {
              player.moveCardToExileWithInfo(card,null,null,source.getSourceId(),game,Zone.GRAVEYARD);
            }
          }
        }
      }
      cardsCount=targetPlayer.getHand().count(filter,game);
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + card.getName() + ""String_Node_Str""+ targetPlayer.getName());
        TargetCardInHand target=new TargetCardInHand(0,cardsCount,filter);
        if (player.choose(Outcome.Exile,targetPlayer.getHand(),target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getHand().get(targetId,game);
            if (targetCard != null) {
              player.moveCardToExileWithInfo(card,null,null,source.getSourceId(),game,Zone.HAND);
            }
          }
        }
      }
 else {
        player.lookAtCards(targetPlayer.getName() + ""String_Node_Str"",targetPlayer.getHand(),game);
      }
      cardsCount=cardsInLibrary.count(filter,game);
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + card.getName() + ""String_Node_Str""+ targetPlayer.getName());
        TargetCardInLibrary target=new TargetCardInLibrary(0,cardsCount,filter);
        if (player.choose(Outcome.Exile,cardsInLibrary,target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getLibrary().remove(targetId,game);
            if (targetCard != null) {
              player.moveCardToExileWithInfo(card,null,null,source.getSourceId(),game,Zone.LIBRARY);
            }
          }
        }
      }
 else {
        player.lookAtCards(targetPlayer.getName() + ""String_Node_Str"",cardsInLibrary,game);
      }
      targetPlayer.shuffleLibrary(game);
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Card card=game.getCard(source.getFirstTarget());
  Player player=game.getPlayer(source.getControllerId());
  if (card != null && player != null) {
    Player targetPlayer=game.getPlayer(card.getOwnerId());
    if (targetPlayer != null) {
      FilterCard filter=new FilterCard(""String_Node_Str"" + card.getName());
      filter.add(new NamePredicate(card.getName()));
      Cards cardsInLibrary=new CardsImpl(Zone.LIBRARY);
      cardsInLibrary.addAll(targetPlayer.getLibrary().getCards(game));
      int cardsCount=targetPlayer.getGraveyard().count(filter,game);
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + card.getName() + ""String_Node_Str""+ targetPlayer.getName());
        TargetCardInGraveyard target=new TargetCardInGraveyard(0,cardsCount,filter);
        if (player.choose(Outcome.Exile,targetPlayer.getGraveyard(),target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getGraveyard().get(targetId,game);
            if (targetCard != null) {
              player.moveCardToExileWithInfo(targetCard,null,null,source.getSourceId(),game,Zone.GRAVEYARD);
            }
          }
        }
      }
      cardsCount=targetPlayer.getHand().count(filter,game);
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + card.getName() + ""String_Node_Str""+ targetPlayer.getName());
        TargetCardInHand target=new TargetCardInHand(0,cardsCount,filter);
        if (player.choose(Outcome.Exile,targetPlayer.getHand(),target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getHand().get(targetId,game);
            if (targetCard != null) {
              player.moveCardToExileWithInfo(targetCard,null,null,source.getSourceId(),game,Zone.HAND);
            }
          }
        }
      }
 else {
        player.lookAtCards(targetPlayer.getName() + ""String_Node_Str"",targetPlayer.getHand(),game);
      }
      cardsCount=cardsInLibrary.count(filter,game);
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + card.getName() + ""String_Node_Str""+ targetPlayer.getName());
        TargetCardInLibrary target=new TargetCardInLibrary(0,cardsCount,filter);
        if (player.choose(Outcome.Exile,cardsInLibrary,target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getLibrary().remove(targetId,game);
            if (targetCard != null) {
              player.moveCardToExileWithInfo(targetCard,null,null,source.getSourceId(),game,Zone.LIBRARY);
            }
          }
        }
      }
 else {
        player.lookAtCards(targetPlayer.getName() + ""String_Node_Str"",cardsInLibrary,game);
      }
      targetPlayer.shuffleLibrary(game);
      return true;
    }
  }
  return false;
}",0.9960172585462994
159398,"@Override public boolean apply(Game game,Ability source){
  Player targetPlayer=game.getPlayer(this.getTargetPointer().getFirst(game,source));
  if (targetPlayer != null) {
    Target target=new TargetCardInHand(new FilterArtifactCard());
    target.setRequired(true);
    if (target.canChoose(source.getSourceId(),targetPlayer.getId(),game) && targetPlayer.chooseUse(outcome,""String_Node_Str"",game) && targetPlayer.chooseTarget(outcome,target,source,game)) {
      return targetPlayer.discard(targetPlayer.getHand().get(target.getFirstTarget(),game),source,game);
    }
 else {
      targetPlayer.discard(Math.min(targetPlayer.getHand().size(),2),source,game);
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player targetPlayer=game.getPlayer(this.getTargetPointer().getFirst(game,source));
  if (targetPlayer != null && !targetPlayer.getHand().isEmpty()) {
    TargetDiscard target=new TargetDiscard(targetPlayer.getId());
    targetPlayer.choose(Outcome.Discard,target,source.getSourceId(),game);
    Card card=targetPlayer.getHand().get(target.getFirstTarget(),game);
    if (card != null) {
      targetPlayer.discard(card,source,game);
      if (!card.getCardType().contains(CardType.ARTIFACT) && !targetPlayer.getHand().isEmpty()) {
        targetPlayer.discard(1,source,game);
      }
      return true;
    }
  }
  return false;
}",0.3510028653295129
159399,"@Override public void discardToMax(Game game){
  int cardsStart=hand.size();
  if (cardsStart > this.maxHandSize) {
    while (hand.size() > this.maxHandSize) {
      TargetDiscard target=new TargetDiscard(playerId);
      target.setTargetName(new StringBuilder(""String_Node_Str"").append(hand.size() - this.maxHandSize).append(""String_Node_Str"").toString());
      choose(Outcome.Discard,target,null,game);
      discard(hand.get(target.getFirstTarget(),game),null,game);
    }
    int discarded=cardsStart - hand.size();
    game.informPlayers(new StringBuilder(getName()).append(""String_Node_Str"").append(discarded).append(discarded == 1 ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").toString());
  }
}","@Override public void discardToMax(Game game){
  if (hand.size() > this.maxHandSize) {
    game.informPlayers(new StringBuilder(getName()).append(""String_Node_Str"").append(this.maxHandSize).append(this.maxHandSize == 1 ? ""String_Node_Str"" : ""String_Node_Str"").toString());
    while (hand.size() > this.maxHandSize) {
      TargetDiscard target=new TargetDiscard(playerId);
      target.setTargetName(new StringBuilder(""String_Node_Str"").append(hand.size() - this.maxHandSize).append(""String_Node_Str"").toString());
      choose(Outcome.Discard,target,null,game);
      discard(hand.get(target.getFirstTarget(),game),null,game);
    }
  }
}",0.6197802197802198
159400,"/** 
 * Add info about attacker blocked by blocker to the game log
 */
private void logBlockerInfo(Player defender,Game game){
  boolean shownDefendingPlayer=false;
  for (  CombatGroup group : this.getGroups()) {
    if (group.defendingPlayerId.equals(defender.getId())) {
      if (!shownDefendingPlayer) {
        game.informPlayers(new StringBuilder(""String_Node_Str"").append(defender.getName()).toString());
        shownDefendingPlayer=true;
      }
      StringBuilder sb=new StringBuilder();
      for (      UUID attackingCreatureId : group.getAttackers()) {
        Permanent attackingCreature=game.getPermanent(attackingCreatureId);
        if (attackingCreature != null) {
          sb.append(attackingCreature.getName()).append(""String_Node_Str"");
          sb.append(attackingCreature.getPower().getValue()).append(""String_Node_Str"").append(attackingCreature.getToughness().getValue()).append(""String_Node_Str"");
        }
 else {
          attackingCreature=(Permanent)game.getLastKnownInformation(attackingCreatureId,Zone.BATTLEFIELD);
          if (attackingCreature != null) {
            sb.append(attackingCreature.getName()).append(""String_Node_Str"");
          }
        }
      }
      if (group.getBlockers().size() > 0) {
        sb.append(""String_Node_Str"");
        for (        UUID blockingCreatureId : group.getBlockers()) {
          Permanent blockingCreature=game.getPermanent(blockingCreatureId);
          if (blockingCreature != null) {
            sb.append(blockingCreature.getName()).append(""String_Node_Str"");
            sb.append(blockingCreature.getPower().getValue()).append(""String_Node_Str"").append(blockingCreature.getToughness().getValue()).append(""String_Node_Str"");
          }
        }
      }
 else {
        sb.append(""String_Node_Str"");
      }
      game.informPlayers(sb.toString());
    }
  }
}","/** 
 * Add info about attacker blocked by blocker to the game log
 */
private void logBlockerInfo(Player defender,Game game){
  boolean shownDefendingPlayer=game.getPlayers().size() < 3;
  for (  CombatGroup group : this.getGroups()) {
    if (group.defendingPlayerId.equals(defender.getId())) {
      if (!shownDefendingPlayer) {
        game.informPlayers(new StringBuilder(""String_Node_Str"").append(defender.getName()).toString());
        shownDefendingPlayer=true;
      }
      StringBuilder sb=new StringBuilder();
      boolean attackerExists=false;
      for (      UUID attackingCreatureId : group.getAttackers()) {
        attackerExists=true;
        Permanent attackingCreature=game.getPermanent(attackingCreatureId);
        if (attackingCreature != null) {
          sb.append(""String_Node_Str"");
          sb.append(attackingCreature.getName()).append(""String_Node_Str"");
          sb.append(attackingCreature.getPower().getValue()).append(""String_Node_Str"").append(attackingCreature.getToughness().getValue()).append(""String_Node_Str"");
        }
 else {
          attackingCreature=(Permanent)game.getLastKnownInformation(attackingCreatureId,Zone.BATTLEFIELD);
          if (attackingCreature != null) {
            sb.append(attackingCreature.getName()).append(""String_Node_Str"");
          }
        }
      }
      if (attackerExists) {
        if (group.getBlockers().size() > 0) {
          sb.append(""String_Node_Str"");
          for (          UUID blockingCreatureId : group.getBlockers()) {
            Permanent blockingCreature=game.getPermanent(blockingCreatureId);
            if (blockingCreature != null) {
              sb.append(blockingCreature.getName()).append(""String_Node_Str"");
              sb.append(blockingCreature.getPower().getValue()).append(""String_Node_Str"").append(blockingCreature.getToughness().getValue()).append(""String_Node_Str"");
            }
          }
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
      game.informPlayers(sb.toString());
    }
  }
}",0.946070878274268
159401,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    for (int i=0; i < source.getManaCostsToPay().getX(); i++) {
      if (player != null && player.getLibrary().size() > 0) {
        Card topCard=player.getLibrary().getFromTop(game);
        topCard.moveToExile(source.getSourceId(),""String_Node_Str"",source.getId(),game);
      }
    }
    ExileZone epicExperimentExileZone=game.getExile().getExileZone(source.getSourceId());
    filter.add(new ConvertedManaCostPredicate(Filter.ComparisonType.LessThan,source.getManaCostsToPay().getX() + 1));
    filter.setMessage(""String_Node_Str"" + source.getManaCostsToPay().getX() + ""String_Node_Str"");
    while (player != null && epicExperimentExileZone != null && epicExperimentExileZone.count(filter,game) > 0 && player.chooseUse(Outcome.PlayForFree,""String_Node_Str"",game)) {
      TargetCardInExile target=new TargetCardInExile(filter,source.getSourceId());
      while (epicExperimentExileZone.count(filter,game) > 0 && player.choose(Outcome.PlayForFree,epicExperimentExileZone,target,game)) {
        Card card=game.getCard(target.getFirstTarget());
        if (card != null) {
          if (player.cast(card.getSpellAbility(),game,true)) {
            game.getExile().removeCard(card,game);
          }
        }
        target.clearChosen();
      }
    }
    UUID exileId=source.getSourceId();
    ExileZone exile=game.getExile().getExileZone(exileId);
    if (exile != null) {
      exile=exile.copy();
      for (      UUID cardId : exile) {
        Card card=game.getCard(cardId);
        card.moveToZone(Zone.GRAVEYARD,source.getSourceId(),game,true);
      }
      game.getExile().getExileZone(exileId).clear();
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    for (int i=0; i < source.getManaCostsToPay().getX(); i++) {
      if (controller.getLibrary().size() > 0) {
        Card topCard=controller.getLibrary().getFromTop(game);
        controller.moveCardToExileWithInfo(topCard,source.getSourceId(),""String_Node_Str"",source.getSourceId(),game,Zone.LIBRARY);
      }
    }
    ExileZone epicExperimentExileZone=game.getExile().getExileZone(source.getSourceId());
    FilterCard filter=filterStatic.copy();
    filter.add(new ConvertedManaCostPredicate(Filter.ComparisonType.LessThan,source.getManaCostsToPay().getX() + 1));
    filter.setMessage(""String_Node_Str"" + source.getManaCostsToPay().getX() + ""String_Node_Str"");
    while (epicExperimentExileZone != null && epicExperimentExileZone.count(filter,game) > 0 && controller.chooseUse(Outcome.PlayForFree,""String_Node_Str"",game)) {
      TargetCardInExile target=new TargetCardInExile(filter,source.getSourceId());
      while (epicExperimentExileZone.count(filter,game) > 0 && controller.choose(Outcome.PlayForFree,epicExperimentExileZone,target,game)) {
        Card card=game.getCard(target.getFirstTarget());
        if (card != null) {
          if (controller.cast(card.getSpellAbility(),game,true)) {
            game.getExile().removeCard(card,game);
          }
        }
        target.clearChosen();
      }
    }
    ExileZone exile=game.getExile().getExileZone(source.getSourceId());
    if (exile != null) {
      for (      Card card : exile.getCards(game)) {
        controller.moveCardToGraveyardWithInfo(card,source.getSourceId(),game,Zone.EXILED);
      }
    }
    return true;
  }
  return false;
}",0.1590590870904508
159402,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ZONE_CHANGE && event.getSourceId() != null && event.getSourceId().equals(getSourceId())) {
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    if (zEvent.getFromZone() == Zone.BATTLEFIELD && zEvent.getToZone() == Zone.EXILED) {
      MageObject object=game.getObject(event.getTargetId());
      if (object != null && object.getSubtype().contains(""String_Node_Str"")) {
        return true;
      }
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ZONE_CHANGE && event.getSourceId() != null && event.getSourceId().equals(getSourceId())) {
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    if (zEvent.getFromZone() == Zone.BATTLEFIELD && zEvent.getToZone() == Zone.EXILED) {
      if (zEvent.getTarget() != null && zEvent.getTarget().getSubtype().contains(""String_Node_Str"")) {
        return true;
      }
    }
  }
  return false;
}",0.8950914340712224
159403,"@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  Zone fromZone=((ZoneChangeEvent)event).getFromZone();
  Card card=game.getCard(event.getTargetId());
  UUID sourceId=event.getSourceId();
  UUID controllerId=event.getPlayerId();
  Object object=game.getState().getValue(""String_Node_Str"" + card.getId());
  if (object != null && object instanceof PermanentCard) {
    return false;
  }
  UUID targetId=null;
  MageObject sourceObject=game.getObject(sourceId);
  if (sourceObject instanceof StackAbility) {
    StackAbility stackAbility=(StackAbility)sourceObject;
    if (!stackAbility.getEffects().isEmpty()) {
      targetId=stackAbility.getEffects().get(0).getTargetPointer().getFirst(game,stackAbility);
    }
  }
  if (targetId == null) {
    Target target=card.getSpellAbility().getTargets().get(0);
    Player player=game.getPlayer(card.getOwnerId());
    if (player != null && player.choose(Outcome.BoostCreature,target,card.getId(),game)) {
      targetId=target.getFirstTarget();
    }
  }
  Permanent targetPermanent=game.getPermanent(targetId);
  Player targetPlayer=game.getPlayer(targetId);
  if (targetPermanent != null || targetPlayer != null) {
switch (fromZone) {
case GRAVEYARD:
      game.getPlayer(card.getOwnerId()).removeFromGraveyard(card,game);
    break;
case HAND:
  game.getPlayer(card.getOwnerId()).removeFromHand(card,game);
break;
case LIBRARY:
game.getPlayer(card.getOwnerId()).removeFromLibrary(card,game);
break;
default :
}
game.rememberLKI(card.getId(),fromZone,card);
PermanentCard permanent=new PermanentCard(card,card.getOwnerId());
game.getBattlefield().addPermanent(permanent);
game.setZone(card.getId(),Zone.BATTLEFIELD);
game.applyEffects();
permanent.entersBattlefield(event.getSourceId(),game,fromZone,true);
game.applyEffects();
game.fireEvent(new ZoneChangeEvent(permanent,controllerId,fromZone,Zone.BATTLEFIELD));
if (targetPermanent != null) {
targetPermanent.addAttachment(permanent.getId(),game);
}
if (targetPlayer != null) {
targetPlayer.addAttachment(permanent.getId(),game);
}
}
return true;
}","@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  Zone fromZone=((ZoneChangeEvent)event).getFromZone();
  Card card=game.getCard(event.getTargetId());
  UUID sourceId=event.getSourceId();
  UUID controllerId=event.getPlayerId();
  Object object=game.getState().getValue(""String_Node_Str"" + card.getId());
  if (object != null && object instanceof PermanentCard) {
    return false;
  }
  UUID targetId=null;
  MageObject sourceObject=game.getObject(sourceId);
  if (sourceObject instanceof Spell) {
    if (fromZone.equals(Zone.EXILED)) {
      return false;
    }
  }
  if (sourceObject instanceof StackAbility) {
    StackAbility stackAbility=(StackAbility)sourceObject;
    if (!stackAbility.getEffects().isEmpty()) {
      targetId=stackAbility.getEffects().get(0).getTargetPointer().getFirst(game,stackAbility);
    }
  }
  if (targetId == null) {
    Target target=card.getSpellAbility().getTargets().get(0);
    Player player=game.getPlayer(card.getOwnerId());
    if (player != null && player.choose(Outcome.BoostCreature,target,card.getId(),game)) {
      targetId=target.getFirstTarget();
    }
  }
  Permanent targetPermanent=game.getPermanent(targetId);
  Player targetPlayer=game.getPlayer(targetId);
  if (targetPermanent != null || targetPlayer != null) {
switch (fromZone) {
case GRAVEYARD:
      game.getPlayer(card.getOwnerId()).removeFromGraveyard(card,game);
    break;
case HAND:
  game.getPlayer(card.getOwnerId()).removeFromHand(card,game);
break;
case LIBRARY:
game.getPlayer(card.getOwnerId()).removeFromLibrary(card,game);
break;
default :
}
game.rememberLKI(card.getId(),fromZone,card);
PermanentCard permanent=new PermanentCard(card,card.getOwnerId());
game.getBattlefield().addPermanent(permanent);
game.setZone(card.getId(),Zone.BATTLEFIELD);
game.applyEffects();
permanent.entersBattlefield(event.getSourceId(),game,fromZone,true);
game.applyEffects();
game.fireEvent(new ZoneChangeEvent(permanent,controllerId,fromZone,Zone.BATTLEFIELD));
if (targetPermanent != null) {
targetPermanent.addAttachment(permanent.getId(),game);
}
if (targetPlayer != null) {
targetPlayer.addAttachment(permanent.getId(),game);
}
}
return true;
}",0.974479044720206
159404,"public Spell(final Spell<T> spell){
  this.id=spell.id;
  for (  SpellAbility spellAbility : spell.spellAbilities) {
    this.spellAbilities.add(spellAbility.copy());
  }
  for (  Card spellCard : spell.spellCards) {
    this.spellCards.add(spellCard.copy());
  }
  if (spell.spellAbilities.get(0).equals(spell.ability)) {
    this.ability=spellAbilities.get(0);
  }
 else {
    this.ability=spell.ability.copy();
  }
  if (spell.spellCards.get(0).equals(spell.card)) {
    this.card=spellCards.get(0);
  }
 else {
    this.card=spell.card.copy();
  }
  this.controllerId=spell.controllerId;
  this.fromZone=spell.fromZone;
  this.copiedSpell=spell.copiedSpell;
}","public Spell(final Spell<T> spell){
  this.id=spell.id;
  for (  SpellAbility spellAbility : spell.spellAbilities) {
    this.spellAbilities.add(spellAbility.copy());
  }
  for (  Card spellCard : spell.spellCards) {
    this.spellCards.add(spellCard.copy());
  }
  if (spell.spellAbilities.get(0).equals(spell.ability)) {
    this.ability=this.spellAbilities.get(0);
  }
 else {
    this.ability=spell.ability.copy();
  }
  if (spell.spellCards.get(0).equals(spell.card)) {
    this.card=spellCards.get(0);
  }
 else {
    this.card=spell.card.copy();
  }
  this.controllerId=spell.controllerId;
  this.fromZone=spell.fromZone;
  this.copiedSpell=spell.copiedSpell;
}",0.996243425995492
159405,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD) {
    Permanent triggeringCreature=game.getPermanent(event.getTargetId());
    if (triggeringCreature != null && triggeringCreature.getCardType().contains(CardType.CREATURE) && triggeringCreature.getControllerId().equals(this.controllerId)) {
      Permanent sourceCreature=game.getPermanent(sourceId);
      if (sourceCreature != null && isPowerOrThoughnessGreater(sourceCreature,triggeringCreature)) {
        this.getEffects().get(0).setValue(""String_Node_Str"",event.getTargetId());
        return true;
      }
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD && !event.getTargetId().equals(this.getSourceId())) {
    Permanent triggeringCreature=game.getPermanent(event.getTargetId());
    if (triggeringCreature != null && triggeringCreature.getCardType().contains(CardType.CREATURE) && triggeringCreature.getControllerId().equals(this.controllerId)) {
      Permanent sourceCreature=game.getPermanent(sourceId);
      if (sourceCreature != null && isPowerOrThoughnessGreater(sourceCreature,triggeringCreature)) {
        this.getEffects().get(0).setValue(""String_Node_Str"",event.getTargetId());
        return true;
      }
    }
  }
  return false;
}",0.9637010676156584
159406,"@Override public boolean resolve(Game game){
  boolean result;
  if (this.getCardType().contains(CardType.INSTANT) || this.getCardType().contains(CardType.SORCERY)) {
    int index=0;
    result=false;
    boolean legalParts=false;
    for (    SpellAbility spellAbility : this.spellAbilities) {
      legalParts|=spellAbilityHasLegalParts(spellAbility,game);
    }
    if (legalParts) {
      for (      SpellAbility spellAbility : this.spellAbilities) {
        if (spellAbilityHasLegalParts(spellAbility,game)) {
          for (          UUID modeId : spellAbility.getModes().getSelectedModes()) {
            spellAbility.getModes().setMode(spellAbility.getModes().get(modeId));
            if (spellAbility.getTargets().stillLegal(spellAbility,game)) {
              if (!spellAbility.getSpellAbilityType().equals(SpellAbilityType.SPLICE)) {
                updateOptionalCosts(index);
              }
              result|=spellAbility.resolve(game);
            }
          }
          index++;
        }
      }
      if (!copiedSpell) {
        for (        Effect effect : ability.getEffects()) {
          if (effect instanceof PostResolveEffect) {
            ((PostResolveEffect)effect).postResolve(card,ability,controllerId,game);
            return result;
          }
        }
        if (!card.isCopy() && game.getState().getZone(card.getId()) == Zone.STACK) {
          card.moveToZone(Zone.GRAVEYARD,ability.getId(),game,false);
        }
      }
      return result;
    }
    game.informPlayers(getName() + ""String_Node_Str"");
    counter(null,game);
    return false;
  }
 else   if (this.getCardType().contains(CardType.ENCHANTMENT) && this.getSubtype().contains(""String_Node_Str"")) {
    if (ability.getTargets().stillLegal(ability,game)) {
      updateOptionalCosts(0);
      if (card.putOntoBattlefield(game,fromZone,ability.getId(),controllerId)) {
        game.getState().handleSimultaneousEvent(game);
        return ability.resolve(game);
      }
      return false;
    }
    if (this.getSpellAbility() instanceof BestowAbility) {
      updateOptionalCosts(0);
      result=card.putOntoBattlefield(game,fromZone,ability.getId(),controllerId);
      game.getState().handleSimultaneousEvent(game);
      return result;
    }
 else {
      game.informPlayers(getName() + ""String_Node_Str"");
      counter(null,game);
      return false;
    }
  }
 else {
    updateOptionalCosts(0);
    result=card.putOntoBattlefield(game,fromZone,ability.getId(),controllerId);
    game.getState().handleSimultaneousEvent(game);
    return result;
  }
}","@Override public boolean resolve(Game game){
  boolean result;
  if (this.getCardType().contains(CardType.INSTANT) || this.getCardType().contains(CardType.SORCERY)) {
    int index=0;
    result=false;
    boolean legalParts=false;
    for (    SpellAbility spellAbility : this.spellAbilities) {
      legalParts|=spellAbilityHasLegalParts(spellAbility,game);
    }
    if (legalParts) {
      for (      SpellAbility spellAbility : this.spellAbilities) {
        if (spellAbilityHasLegalParts(spellAbility,game)) {
          for (          UUID modeId : spellAbility.getModes().getSelectedModes()) {
            spellAbility.getModes().setMode(spellAbility.getModes().get(modeId));
            if (spellAbility.getTargets().stillLegal(spellAbility,game)) {
              if (!spellAbility.getSpellAbilityType().equals(SpellAbilityType.SPLICE)) {
                updateOptionalCosts(index);
              }
              result|=spellAbility.resolve(game);
            }
          }
          index++;
        }
      }
      if (!copiedSpell) {
        for (        Effect effect : ability.getEffects()) {
          if (effect instanceof PostResolveEffect) {
            ((PostResolveEffect)effect).postResolve(card,ability,controllerId,game);
            return result;
          }
        }
        if (!card.isCopy() && game.getState().getZone(card.getId()) == Zone.STACK) {
          card.moveToZone(Zone.GRAVEYARD,ability.getId(),game,false);
        }
      }
      return result;
    }
    game.informPlayers(getName() + ""String_Node_Str"");
    counter(null,game);
    return false;
  }
 else   if (this.getCardType().contains(CardType.ENCHANTMENT) && this.getSubtype().contains(""String_Node_Str"")) {
    if (ability.getTargets().stillLegal(ability,game)) {
      updateOptionalCosts(0);
      if (card.putOntoBattlefield(game,fromZone,ability.getId(),controllerId)) {
        if (this.getSpellAbility() instanceof BestowAbility) {
          Permanent permanent=game.getPermanent(card.getId());
          if (permanent != null) {
            permanent.getCardType().remove(CardType.CREATURE);
          }
        }
        game.getState().handleSimultaneousEvent(game);
        return ability.resolve(game);
      }
      return false;
    }
    if (this.getSpellAbility() instanceof BestowAbility) {
      updateOptionalCosts(0);
      result=card.putOntoBattlefield(game,fromZone,ability.getId(),controllerId);
      game.getState().handleSimultaneousEvent(game);
      return result;
    }
 else {
      game.informPlayers(getName() + ""String_Node_Str"");
      counter(null,game);
      return false;
    }
  }
 else {
    updateOptionalCosts(0);
    result=card.putOntoBattlefield(game,fromZone,ability.getId(),controllerId);
    game.getState().handleSimultaneousEvent(game);
    return result;
  }
}",0.954275092936803
159407,"@Override public boolean apply(Game game,Ability source){
  Card card=game.getCard(source.getFirstTarget());
  Player player=game.getPlayer(source.getControllerId());
  if (card != null && player != null) {
    Player targetPlayer=game.getPlayer(card.getOwnerId());
    if (targetPlayer != null) {
      FilterCard filter=new FilterCard(""String_Node_Str"" + card.getName());
      filter.add(new NamePredicate(card.getName()));
      Cards cardsInLibrary=new CardsImpl(Zone.LIBRARY);
      cardsInLibrary.addAll(targetPlayer.getLibrary().getCards(game));
      int cardsCount=targetPlayer.getGraveyard().count(filter,game);
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + card.getName() + ""String_Node_Str""+ targetPlayer.getName());
        TargetCardInGraveyard target=new TargetCardInGraveyard(0,cardsCount,filter);
        if (player.choose(Outcome.Exile,targetPlayer.getGraveyard(),target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getGraveyard().get(targetId,game);
            if (targetCard != null) {
              targetPlayer.getGraveyard().remove(targetCard);
              targetCard.moveToZone(Zone.EXILED,source.getId(),game,false);
            }
          }
        }
      }
      cardsCount=targetPlayer.getHand().count(filter,game);
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + card.getName() + ""String_Node_Str""+ targetPlayer.getName());
        TargetCardInHand target=new TargetCardInHand(0,cardsCount,filter);
        if (player.choose(Outcome.Exile,targetPlayer.getHand(),target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getHand().get(targetId,game);
            if (targetCard != null) {
              targetPlayer.getHand().remove(targetCard);
              targetCard.moveToZone(Zone.EXILED,source.getId(),game,false);
            }
          }
        }
      }
 else {
        player.lookAtCards(targetPlayer.getName() + ""String_Node_Str"",targetPlayer.getHand(),game);
      }
      cardsCount=cardsInLibrary.count(filter,game);
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + card.getName() + ""String_Node_Str""+ targetPlayer.getName());
        TargetCardInLibrary target=new TargetCardInLibrary(0,cardsCount,filter);
        if (player.choose(Outcome.Exile,cardsInLibrary,target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getLibrary().remove(targetId,game);
            if (targetCard != null) {
              targetCard.moveToZone(Zone.EXILED,source.getId(),game,false);
            }
          }
        }
      }
 else {
        player.lookAtCards(targetPlayer.getName() + ""String_Node_Str"",cardsInLibrary,game);
      }
    }
    targetPlayer.shuffleLibrary(game);
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Card card=game.getCard(source.getFirstTarget());
  Player player=game.getPlayer(source.getControllerId());
  if (card != null && player != null) {
    Player targetPlayer=game.getPlayer(card.getOwnerId());
    if (targetPlayer != null) {
      FilterCard filter=new FilterCard(""String_Node_Str"" + card.getName());
      filter.add(new NamePredicate(card.getName()));
      Cards cardsInLibrary=new CardsImpl(Zone.LIBRARY);
      cardsInLibrary.addAll(targetPlayer.getLibrary().getCards(game));
      int cardsCount=targetPlayer.getGraveyard().count(filter,game);
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + card.getName() + ""String_Node_Str""+ targetPlayer.getName());
        TargetCardInGraveyard target=new TargetCardInGraveyard(0,cardsCount,filter);
        if (player.choose(Outcome.Exile,targetPlayer.getGraveyard(),target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getGraveyard().get(targetId,game);
            if (targetCard != null) {
              player.moveCardToExileWithInfo(card,null,null,source.getSourceId(),game,Zone.GRAVEYARD);
            }
          }
        }
      }
      cardsCount=targetPlayer.getHand().count(filter,game);
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + card.getName() + ""String_Node_Str""+ targetPlayer.getName());
        TargetCardInHand target=new TargetCardInHand(0,cardsCount,filter);
        if (player.choose(Outcome.Exile,targetPlayer.getHand(),target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getHand().get(targetId,game);
            if (targetCard != null) {
              player.moveCardToExileWithInfo(card,null,null,source.getSourceId(),game,Zone.HAND);
            }
          }
        }
      }
 else {
        player.lookAtCards(targetPlayer.getName() + ""String_Node_Str"",targetPlayer.getHand(),game);
      }
      cardsCount=cardsInLibrary.count(filter,game);
      if (cardsCount > 0) {
        filter.setMessage(""String_Node_Str"" + card.getName() + ""String_Node_Str""+ targetPlayer.getName());
        TargetCardInLibrary target=new TargetCardInLibrary(0,cardsCount,filter);
        if (player.choose(Outcome.Exile,cardsInLibrary,target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=targetPlayer.getLibrary().remove(targetId,game);
            if (targetCard != null) {
              player.moveCardToExileWithInfo(card,null,null,source.getSourceId(),game,Zone.LIBRARY);
            }
          }
        }
      }
 else {
        player.lookAtCards(targetPlayer.getName() + ""String_Node_Str"",cardsInLibrary,game);
      }
      targetPlayer.shuffleLibrary(game);
      return true;
    }
  }
  return false;
}",0.9132087948421228
159408,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(targetPointer.getFirst(game,source));
  if (player != null) {
    int cardsCount=Math.min(amount.calculate(game,source),player.getLibrary().size());
    for (int i=0; i < cardsCount; i++) {
      Card card=player.getLibrary().removeFromTop(game);
      if (card != null) {
        card.moveToZone(Zone.GRAVEYARD,source.getId(),game,false);
      }
 else {
        break;
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(targetPointer.getFirst(game,source));
  if (player != null) {
    int cardsCount=Math.min(amount.calculate(game,source),player.getLibrary().size());
    for (int i=0; i < cardsCount; i++) {
      Card card=player.getLibrary().getFromTop(game);
      if (card != null) {
        player.moveCardToGraveyardWithInfo(card,source.getId(),game,Zone.LIBRARY);
      }
 else {
        break;
      }
    }
    return true;
  }
  return false;
}",0.7405978784956606
159409,"private SplitSecondAbility(){
  super(Zone.STACK,new SplitSecondEffect());
  this.setRuleAtTheTop(true);
}","public SplitSecondAbility(SplitSecondAbility ability){
  super(ability);
}",0.4444444444444444
159410,"@Override public boolean canPay(UUID sourceId,UUID controllerId,Game game){
  if (!game.getPlayer(controllerId).canPaySacrificeCost()) {
    return false;
  }
  Permanent permanent=game.getPermanent(sourceId);
  if (permanent != null) {
    return true;
  }
  return false;
}","@Override public boolean canPay(UUID sourceId,UUID controllerId,Game game){
  if (!game.getPlayer(controllerId).canPaySacrificeCost()) {
    return false;
  }
  Permanent permanent=game.getPermanent(sourceId);
  return permanent != null;
}",0.9027237354085604
159411,"@Override public boolean sacrifice(UUID sourceId,Game game){
  if (!game.replaceEvent(GameEvent.getEvent(EventType.SACRIFICE_PERMANENT,objectId,sourceId,controllerId))) {
    if (moveToZone(Zone.GRAVEYARD,sourceId,game,true) || game.getState().getZone(this.getId()).equals(Zone.COMMAND)) {
      Player player=game.getPlayer(getControllerId());
      if (player != null) {
        game.informPlayers(new StringBuilder(player.getName()).append(""String_Node_Str"").append(this.getName()).toString());
      }
      game.fireEvent(GameEvent.getEvent(EventType.SACRIFICED_PERMANENT,objectId,sourceId,controllerId));
      return true;
    }
  }
  return false;
}","@Override public boolean sacrifice(UUID sourceId,Game game){
  if (!game.replaceEvent(GameEvent.getEvent(EventType.SACRIFICE_PERMANENT,objectId,sourceId,controllerId))) {
    moveToZone(Zone.GRAVEYARD,sourceId,game,true);
    Player player=game.getPlayer(getControllerId());
    if (player != null) {
      game.informPlayers(new StringBuilder(player.getName()).append(""String_Node_Str"").append(this.getName()).toString());
    }
    game.fireEvent(GameEvent.getEvent(EventType.SACRIFICED_PERMANENT,objectId,sourceId,controllerId));
    return true;
  }
  return false;
}",0.8452768729641694
159412,"@Override public void init(Ability source,Game game){
  super.init(source,game);
  FilterLandPermanent filter=new FilterLandPermanent(""String_Node_Str"");
  filter.add(new SubtypePredicate(""String_Node_Str""));
  filter.add(new ControllerPredicate(TargetController.YOU));
  this.amount=game.getBattlefield().count(filter,source.getSourceId(),source.getControllerId(),game);
  Player player=game.getPlayer(source.getControllerId());
  String message=""String_Node_Str"";
  if (player != null && player.chooseUse(Outcome.Neutral,message,game)) {
    this.amount*=-1;
  }
  targetPointer.init(game,source);
}","@Override public void init(Ability source,Game game){
  super.init(source,game);
  FilterLandPermanent filter=new FilterLandPermanent(""String_Node_Str"");
  filter.add(new SubtypePredicate(""String_Node_Str""));
  filter.add(new ControllerPredicate(TargetController.YOU));
  this.amount=game.getBattlefield().count(filter,source.getSourceId(),source.getControllerId(),game);
  Player player=game.getPlayer(source.getControllerId());
  String message=""String_Node_Str"";
  if (player != null && player.chooseUse(Outcome.Neutral,message,game)) {
    this.amount*=-1;
  }
}",0.9700085689802912
159413,"@Override public void init(Ability source,Game game){
  super.init(source,game);
  Permanent permanent=game.getPermanent(this.targetPointer.getFirst(game,source));
  if (permanent != null) {
    FilterCreaturePermanent filter=new FilterCreaturePermanent();
    filter.add(Predicates.not(new PermanentIdPredicate(this.targetPointer.getFirst(game,source))));
    filter.add(new AttackingPredicate());
    boolean isChangeling=false;
    for (    Ability ability : permanent.getAbilities()) {
      if (ability instanceof ChangelingAbility) {
        isChangeling=true;
      }
    }
    if (!isChangeling) {
      ArrayList<Predicate<MageObject>> predicateList=new ArrayList<Predicate<MageObject>>();
      for (      String subtype : permanent.getSubtype()) {
        predicateList.add(new SubtypePredicate(subtype));
      }
      filter.add(Predicates.or(predicateList));
    }
    power=game.getBattlefield().getActivePermanents(filter,source.getControllerId(),source.getId(),game).size();
  }
  targetPointer.init(game,source);
}","@Override public void init(Ability source,Game game){
  super.init(source,game);
  Permanent permanent=game.getPermanent(this.targetPointer.getFirst(game,source));
  if (permanent != null) {
    FilterCreaturePermanent filter=new FilterCreaturePermanent();
    filter.add(Predicates.not(new PermanentIdPredicate(this.targetPointer.getFirst(game,source))));
    filter.add(new AttackingPredicate());
    boolean isChangeling=false;
    for (    Ability ability : permanent.getAbilities()) {
      if (ability instanceof ChangelingAbility) {
        isChangeling=true;
      }
    }
    if (!isChangeling) {
      ArrayList<Predicate<MageObject>> predicateList=new ArrayList<>();
      for (      String subtype : permanent.getSubtype()) {
        predicateList.add(new SubtypePredicate(subtype));
      }
      filter.add(Predicates.or(predicateList));
    }
    power=game.getBattlefield().getActivePermanents(filter,source.getControllerId(),source.getId(),game).size();
  }
}",0.9721115537848606
159414,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.UPKEEP_STEP_PRE && event.getPlayerId().equals(this.controllerId)) {
    return true;
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  return event.getType() == GameEvent.EventType.UPKEEP_STEP_PRE && event.getPlayerId().equals(this.controllerId);
}",0.8793969849246231
159415,"@Override public void init(Ability source,Game game){
  if (source instanceof ActivatedAbility || source instanceof TriggeredAbility) {
    if (layer != null) {
switch (layer) {
case CopyEffects_1:
case ControlChangingEffects_2:
case TextChangingEffects_3:
case TypeChangingEffects_4:
case ColorChangingEffects_5:
case AbilityAddingRemovingEffects_6:
case PTChangingEffects_7:
        this.affectedObjectsSet=true;
    }
  }
 else {
    if (hasLayer(Layer.CopyEffects_1) || hasLayer(Layer.ControlChangingEffects_2) || hasLayer(Layer.TextChangingEffects_3)|| hasLayer(Layer.TypeChangingEffects_4)|| hasLayer(Layer.ColorChangingEffects_5)|| hasLayer(Layer.AbilityAddingRemovingEffects_6)|| hasLayer(Layer.PTChangingEffects_7)) {
      this.affectedObjectsSet=true;
    }
  }
}
}","@Override public void init(Ability source,Game game){
  targetPointer.init(game,source);
  if (source instanceof ActivatedAbility || source instanceof TriggeredAbility) {
    if (layer != null) {
switch (layer) {
case CopyEffects_1:
case ControlChangingEffects_2:
case TextChangingEffects_3:
case TypeChangingEffects_4:
case ColorChangingEffects_5:
case AbilityAddingRemovingEffects_6:
case PTChangingEffects_7:
        this.affectedObjectsSet=true;
    }
  }
 else {
    if (hasLayer(Layer.CopyEffects_1) || hasLayer(Layer.ControlChangingEffects_2) || hasLayer(Layer.TextChangingEffects_3)|| hasLayer(Layer.TypeChangingEffects_4)|| hasLayer(Layer.ColorChangingEffects_5)|| hasLayer(Layer.AbilityAddingRemovingEffects_6)|| hasLayer(Layer.PTChangingEffects_7)) {
      this.affectedObjectsSet=true;
    }
  }
}
}",0.9779458097038436
159416,"public EffectImpl(final EffectImpl effect){
  this.id=effect.id;
  this.outcome=effect.outcome;
  this.effectType=effect.effectType;
  this.staticText=effect.staticText;
  this.targetPointer=effect.targetPointer.copy();
  if (effect.values != null) {
    values=new HashMap<String,Object>();
    Map<String,Object> map=effect.values;
    for (    Map.Entry<String,Object> entry : map.entrySet()) {
      values.put(entry.getKey(),entry.getValue());
    }
  }
  this.applyEffectsAfter=effect.applyEffectsAfter;
}","public EffectImpl(final EffectImpl effect){
  this.id=effect.id;
  this.outcome=effect.outcome;
  this.effectType=effect.effectType;
  this.staticText=effect.staticText;
  this.targetPointer=effect.targetPointer.copy();
  if (effect.values != null) {
    values=new HashMap<>();
    Map<String,Object> map=effect.values;
    for (    Map.Entry<String,Object> entry : map.entrySet()) {
      values.put(entry.getKey(),entry.getValue());
    }
  }
  this.applyEffectsAfter=effect.applyEffectsAfter;
}",0.6323092170465807
159417,"@Override public void setValue(String key,Object value){
synchronized (this) {
    if (values == null) {
      values=new HashMap<String,Object>();
    }
  }
  values.put(key,value);
}","@Override public void setValue(String key,Object value){
synchronized (this) {
    if (values == null) {
      values=new HashMap<>();
    }
  }
  values.put(key,value);
}",0.9633802816901408
159418,"@Override public boolean apply(Game game,Ability source){
  List<FixedTarget> detainedObjects=new ArrayList<FixedTarget>();
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(filter,source.getControllerId(),source.getSourceId(),game)) {
    game.informPlayers(""String_Node_Str"" + permanent.getName());
    FixedTarget fixedTarget=new FixedTarget(permanent.getId());
    fixedTarget.init(game,source);
    detainedObjects.add(fixedTarget);
  }
  game.addEffect(new DetainAllRestrictionEffect(detainedObjects),source);
  return false;
}","@Override public boolean apply(Game game,Ability source){
  List<FixedTarget> detainedObjects=new ArrayList<>();
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(filter,source.getControllerId(),source.getSourceId(),game)) {
    game.informPlayers(""String_Node_Str"" + permanent.getName());
    FixedTarget fixedTarget=new FixedTarget(permanent.getId());
    fixedTarget.init(game,source);
    detainedObjects.add(fixedTarget);
  }
  game.addEffect(new DetainAllRestrictionEffect(detainedObjects),source);
  return false;
}",0.9900090826521344
159419,"@Override public boolean apply(Game game,Ability source){
  for (  UUID target : this.getTargetPointer().getTargets(game,source)) {
    Permanent permanent=game.getPermanent(target);
    if (permanent != null) {
      game.informPlayers(""String_Node_Str"" + permanent.getName());
    }
  }
  DetainRestrictionEffect effect=new DetainRestrictionEffect();
  effect.getTargetPointer().init(game,source);
  game.addEffect(effect,source);
  return true;
}","@Override public boolean apply(Game game,Ability source){
  for (  UUID target : this.getTargetPointer().getTargets(game,source)) {
    Permanent permanent=game.getPermanent(target);
    if (permanent != null) {
      game.informPlayers(""String_Node_Str"" + permanent.getName());
    }
  }
  DetainRestrictionEffect effect=new DetainRestrictionEffect();
  game.addEffect(effect,source);
  return true;
}",0.944770857814336
159420,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(targetPointer.getFirst(game,source));
  UUID exileId=source.getSourceId();
  if (permanent != null) {
    return permanent.moveToExile(exileId,exileZone,source.getId(),game);
  }
 else {
    Card card=game.getCard(targetPointer.getFirst(game,source));
    if (card != null) {
      return card.moveToExile(exileId,exileZone,source.getId(),game);
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Permanent permanent=game.getPermanent(targetPointer.getFirst(game,source));
    UUID exileId=source.getSourceId();
    if (permanent != null) {
      return controller.moveCardToExileWithInfo(permanent,exileId,exileZone,source.getSourceId(),game,Zone.BATTLEFIELD);
    }
 else {
      Card card=game.getCard(targetPointer.getFirst(game,source));
      if (card != null) {
        return controller.moveCardToExileWithInfo(card,exileId,exileZone,source.getSourceId(),game,game.getState().getZone(card.getId()));
      }
    }
  }
  return false;
}",0.7254063301967494
159421,"@Override public boolean apply(Game game,Ability source){
  Card card=game.getCard(targetPointer.getFirst(game,source));
  if (card != null) {
    Zone currentZone=game.getState().getZone(card.getId());
    if (card.putOntoBattlefield(game,currentZone,source.getId(),source.getControllerId())) {
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Card card=game.getCard(targetPointer.getFirst(game,source));
    if (card != null) {
      Zone currentZone=game.getState().getZone(card.getId());
      if (controller.putOntoBattlefieldWithInfo(card,game,currentZone,source.getSourceId())) {
        return true;
      }
    }
  }
  return false;
}",0.6186868686868687
159422,"@Override public void init(Ability source,Game game){
  super.init(source,game);
  if (lockedIn) {
    power=new StaticValue(power.calculate(game,source));
    toughness=new StaticValue(toughness.calculate(game,source));
  }
  targetPointer.init(game,source);
}","@Override public void init(Ability source,Game game){
  super.init(source,game);
  if (lockedIn) {
    power=new StaticValue(power.calculate(game,source));
    toughness=new StaticValue(toughness.calculate(game,source));
  }
}",0.9281314168377824
159423,"protected boolean checkStateBasedActions(){
  boolean somethingHappened=false;
  for (  Player player : state.getPlayers().values()) {
    if (!player.hasLost() && (player.getLife() <= 0 || player.isEmptyDraw() || player.getCounters().getCount(CounterType.POISON) >= 10)) {
      player.lost(this);
    }
  }
  List<Permanent> planeswalkers=new ArrayList<Permanent>();
  List<Permanent> legendary=new ArrayList<Permanent>();
  for (  Permanent perm : getBattlefield().getAllActivePermanents()) {
    if (perm.getCardType().contains(CardType.CREATURE)) {
      if (perm.getToughness().getValue() <= 0) {
        if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
          somethingHappened=true;
          continue;
        }
      }
 else       if (perm.getToughness().getValue() <= perm.getDamage() || perm.isDeathtouched()) {
        if (perm.destroy(null,this,false)) {
          somethingHappened=true;
          continue;
        }
      }
      if (perm.getPairedCard() != null) {
        Permanent paired=getPermanent(perm.getPairedCard());
        if (paired == null || !perm.getControllerId().equals(paired.getControllerId()) || paired.getPairedCard() == null) {
          perm.setPairedCard(null);
          if (paired != null) {
            paired.setPairedCard(null);
          }
          somethingHappened=true;
        }
      }
    }
 else     if (perm.getPairedCard() != null) {
      Permanent paired=getPermanent(perm.getPairedCard());
      perm.setPairedCard(null);
      if (paired != null) {
        paired.setPairedCard(null);
      }
      somethingHappened=true;
    }
    if (perm.getCardType().contains(CardType.PLANESWALKER)) {
      if (perm.getCounters().getCount(CounterType.LOYALTY) == 0) {
        if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
          somethingHappened=true;
          continue;
        }
      }
      planeswalkers.add(perm);
    }
    if (filterAura.match(perm,this)) {
      if (perm.getAttachedTo() == null) {
        Card card=this.getCard(perm.getId());
        if (card != null && !card.getCardType().contains(CardType.CREATURE)) {
          if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
            somethingHappened=true;
          }
        }
      }
 else {
        Target target=perm.getSpellAbility().getTargets().get(0);
        if (target instanceof TargetPermanent) {
          Permanent attachedTo=getPermanent(perm.getAttachedTo());
          if (attachedTo == null || !attachedTo.getAttachments().contains(perm.getId())) {
            Card card=this.getCard(perm.getId());
            if (card != null && card.getCardType().contains(CardType.CREATURE)) {
              UUID wasAttachedTo=perm.getAttachedTo();
              perm.attachTo(null,this);
              fireEvent(new GameEvent(GameEvent.EventType.UNATTACHED,wasAttachedTo,perm.getId(),perm.getControllerId()));
            }
 else {
              if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
                somethingHappened=true;
              }
            }
          }
 else {
            Filter auraFilter=perm.getSpellAbility().getTargets().get(0).getFilter();
            if (auraFilter instanceof FilterControlledCreaturePermanent) {
              if (!((FilterControlledCreaturePermanent)auraFilter).match(attachedTo,perm.getId(),perm.getControllerId(),this) || attachedTo.hasProtectionFrom(perm,this)) {
                if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
                  somethingHappened=true;
                }
              }
            }
 else {
              if (!auraFilter.match(attachedTo,this) || attachedTo.hasProtectionFrom(perm,this)) {
                Card card=this.getCard(perm.getId());
                if (card != null && card.getCardType().contains(CardType.CREATURE)) {
                  UUID wasAttachedTo=perm.getAttachedTo();
                  perm.attachTo(null,this);
                  fireEvent(new GameEvent(GameEvent.EventType.UNATTACHED,wasAttachedTo,perm.getId(),perm.getControllerId()));
                }
 else {
                  if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
                    somethingHappened=true;
                  }
                }
              }
            }
          }
        }
 else         if (target instanceof TargetPlayer) {
          Player attachedTo=getPlayer(perm.getAttachedTo());
          if (attachedTo == null) {
            if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
              somethingHappened=true;
            }
          }
 else {
            Filter auraFilter=perm.getSpellAbility().getTargets().get(0).getFilter();
            if (!auraFilter.match(attachedTo,this) || attachedTo.hasProtectionFrom(perm,this)) {
              if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
                somethingHappened=true;
              }
            }
          }
        }
      }
    }
    if (this.getState().isLegendaryRuleActive() && filterLegendary.match(perm,this)) {
      legendary.add(perm);
    }
    if (filterEquipment.match(perm,this)) {
      if (perm.getAttachedTo() != null) {
        Permanent creature=getPermanent(perm.getAttachedTo());
        if (creature == null || !creature.getAttachments().contains(perm.getId())) {
          UUID wasAttachedTo=perm.getAttachedTo();
          perm.attachTo(null,this);
          fireEvent(new GameEvent(GameEvent.EventType.UNATTACHED,wasAttachedTo,perm.getId(),perm.getControllerId()));
        }
 else         if (!creature.getCardType().contains(CardType.CREATURE) || creature.hasProtectionFrom(perm,this)) {
          if (creature.removeAttachment(perm.getId(),this)) {
            somethingHappened=true;
          }
        }
      }
    }
    if (filterFortification.match(perm,this)) {
      if (perm.getAttachedTo() != null) {
        Permanent land=getPermanent(perm.getAttachedTo());
        if (land == null || !land.getAttachments().contains(perm.getId())) {
          perm.attachTo(null,this);
        }
 else         if (!land.getCardType().contains(CardType.LAND) || land.hasProtectionFrom(perm,this)) {
          if (land.removeAttachment(perm.getId(),this)) {
            somethingHappened=true;
          }
        }
      }
    }
    if (perm.getAttachments().size() > 0) {
      for (      UUID attachmentId : perm.getAttachments()) {
        Permanent attachment=getPermanent(attachmentId);
        if (attachment != null && !(attachment.getSubtype().contains(""String_Node_Str"") || attachment.getSubtype().contains(""String_Node_Str"") || attachment.getSubtype().contains(""String_Node_Str""))) {
          if (perm.removeAttachment(attachment.getId(),this)) {
            somethingHappened=true;
            break;
          }
        }
      }
    }
    if (perm.getCounters().containsKey(CounterType.P1P1) && perm.getCounters().containsKey(CounterType.M1M1)) {
      int p1p1=perm.getCounters().getCount(CounterType.P1P1);
      int m1m1=perm.getCounters().getCount(CounterType.M1M1);
      int min=Math.min(p1p1,m1m1);
      perm.getCounters().removeCounter(CounterType.P1P1,min);
      perm.getCounters().removeCounter(CounterType.M1M1,min);
    }
  }
  if (planeswalkers.size() > 1) {
    for (    Permanent planeswalker : planeswalkers) {
      for (      String planeswalkertype : planeswalker.getSubtype()) {
        FilterPlaneswalkerPermanent filterPlaneswalker=new FilterPlaneswalkerPermanent();
        filterPlaneswalker.add(new SubtypePredicate(planeswalkertype));
        filterPlaneswalker.add(new ControllerIdPredicate(planeswalker.getControllerId()));
        if (getBattlefield().contains(filterPlaneswalker,planeswalker.getControllerId(),this,2)) {
          Player controller=this.getPlayer(planeswalker.getControllerId());
          if (controller != null) {
            Target targetPlaneswalkerToKeep=new TargetPermanent(filterPlaneswalker);
            targetPlaneswalkerToKeep.setTargetName(new StringBuilder(planeswalker.getName()).append(""String_Node_Str"").toString());
            targetPlaneswalkerToKeep.setRequired(true);
            controller.chooseTarget(Outcome.Benefit,targetPlaneswalkerToKeep,null,this);
            for (            Permanent dupPlaneswalker : this.getBattlefield().getActivePermanents(filterPlaneswalker,planeswalker.getControllerId(),this)) {
              if (!targetPlaneswalkerToKeep.getTargets().contains(dupPlaneswalker.getId())) {
                dupPlaneswalker.moveToZone(Zone.GRAVEYARD,null,this,false);
              }
            }
          }
          return true;
        }
      }
    }
  }
  if (legendary.size() > 1) {
    for (    Permanent legend : legendary) {
      FilterPermanent filterLegendName=new FilterPermanent();
      filterLegendName.add(new SupertypePredicate(""String_Node_Str""));
      filterLegendName.add(new NamePredicate(legend.getName()));
      filterLegendName.add(new ControllerIdPredicate(legend.getControllerId()));
      if (getBattlefield().contains(filterLegendName,legend.getControllerId(),this,2)) {
        Player controller=this.getPlayer(legend.getControllerId());
        if (controller != null) {
          Target targetLegendaryToKeep=new TargetPermanent(filterLegendName);
          targetLegendaryToKeep.setTargetName(new StringBuilder(legend.getName()).append(""String_Node_Str"").toString());
          targetLegendaryToKeep.setRequired(true);
          controller.chooseTarget(Outcome.Benefit,targetLegendaryToKeep,null,this);
          for (          Permanent dupLegend : getBattlefield().getActivePermanents(filterLegendName,legend.getControllerId(),this)) {
            if (!targetLegendaryToKeep.getTargets().contains(dupLegend.getId())) {
              dupLegend.moveToZone(Zone.GRAVEYARD,null,this,false);
            }
          }
        }
        return true;
      }
    }
  }
  for (  Card card : this.getState().getExile().getAllCards(this)) {
    if (card.isCopy()) {
      this.getState().getExile().removeCard(card,this);
      this.removeCard(card.getId());
    }
  }
  return somethingHappened;
}","protected boolean checkStateBasedActions(){
  boolean somethingHappened=false;
  for (  Player player : state.getPlayers().values()) {
    if (!player.hasLost() && (player.getLife() <= 0 || player.isEmptyDraw() || player.getCounters().getCount(CounterType.POISON) >= 10)) {
      player.lost(this);
    }
  }
  List<Permanent> planeswalkers=new ArrayList<>();
  List<Permanent> legendary=new ArrayList<>();
  for (  Permanent perm : getBattlefield().getAllActivePermanents()) {
    if (perm.getCardType().contains(CardType.CREATURE)) {
      if (perm.getToughness().getValue() <= 0) {
        if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
          somethingHappened=true;
          continue;
        }
      }
 else       if (perm.getToughness().getValue() <= perm.getDamage() || perm.isDeathtouched()) {
        if (perm.destroy(null,this,false)) {
          somethingHappened=true;
          continue;
        }
      }
      if (perm.getPairedCard() != null) {
        Permanent paired=getPermanent(perm.getPairedCard());
        if (paired == null || !perm.getControllerId().equals(paired.getControllerId()) || paired.getPairedCard() == null) {
          perm.setPairedCard(null);
          if (paired != null) {
            paired.setPairedCard(null);
          }
          somethingHappened=true;
        }
      }
    }
 else     if (perm.getPairedCard() != null) {
      Permanent paired=getPermanent(perm.getPairedCard());
      perm.setPairedCard(null);
      if (paired != null) {
        paired.setPairedCard(null);
      }
      somethingHappened=true;
    }
    if (perm.getCardType().contains(CardType.PLANESWALKER)) {
      if (perm.getCounters().getCount(CounterType.LOYALTY) == 0) {
        if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
          somethingHappened=true;
          continue;
        }
      }
      planeswalkers.add(perm);
    }
    if (filterAura.match(perm,this)) {
      if (perm.getAttachedTo() == null) {
        Card card=this.getCard(perm.getId());
        if (card != null && !card.getCardType().contains(CardType.CREATURE)) {
          if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
            somethingHappened=true;
          }
        }
      }
 else {
        Target target=perm.getSpellAbility().getTargets().get(0);
        if (target instanceof TargetPermanent) {
          Permanent attachedTo=getPermanent(perm.getAttachedTo());
          if (attachedTo == null || !attachedTo.getAttachments().contains(perm.getId())) {
            Card card=this.getCard(perm.getId());
            if (card != null && card.getCardType().contains(CardType.CREATURE)) {
              UUID wasAttachedTo=perm.getAttachedTo();
              perm.attachTo(null,this);
              fireEvent(new GameEvent(GameEvent.EventType.UNATTACHED,wasAttachedTo,perm.getId(),perm.getControllerId()));
            }
 else {
              if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
                somethingHappened=true;
              }
            }
          }
 else {
            Filter auraFilter=perm.getSpellAbility().getTargets().get(0).getFilter();
            if (auraFilter instanceof FilterControlledCreaturePermanent) {
              if (!((FilterControlledCreaturePermanent)auraFilter).match(attachedTo,perm.getId(),perm.getControllerId(),this) || attachedTo.hasProtectionFrom(perm,this)) {
                if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
                  somethingHappened=true;
                }
              }
            }
 else {
              if (!auraFilter.match(attachedTo,this) || attachedTo.hasProtectionFrom(perm,this)) {
                Card card=this.getCard(perm.getId());
                if (card != null && card.getCardType().contains(CardType.CREATURE)) {
                  UUID wasAttachedTo=perm.getAttachedTo();
                  perm.attachTo(null,this);
                  fireEvent(new GameEvent(GameEvent.EventType.UNATTACHED,wasAttachedTo,perm.getId(),perm.getControllerId()));
                }
 else {
                  if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
                    somethingHappened=true;
                  }
                }
              }
            }
          }
        }
 else         if (target instanceof TargetPlayer) {
          Player attachedTo=getPlayer(perm.getAttachedTo());
          if (attachedTo == null) {
            if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
              somethingHappened=true;
            }
          }
 else {
            Filter auraFilter=perm.getSpellAbility().getTargets().get(0).getFilter();
            if (!auraFilter.match(attachedTo,this) || attachedTo.hasProtectionFrom(perm,this)) {
              if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
                somethingHappened=true;
              }
            }
          }
        }
      }
    }
    if (this.getState().isLegendaryRuleActive() && filterLegendary.match(perm,this)) {
      legendary.add(perm);
    }
    if (filterEquipment.match(perm,this)) {
      if (perm.getAttachedTo() != null) {
        Permanent creature=getPermanent(perm.getAttachedTo());
        if (creature == null || !creature.getAttachments().contains(perm.getId())) {
          UUID wasAttachedTo=perm.getAttachedTo();
          perm.attachTo(null,this);
          fireEvent(new GameEvent(GameEvent.EventType.UNATTACHED,wasAttachedTo,perm.getId(),perm.getControllerId()));
        }
 else         if (!creature.getCardType().contains(CardType.CREATURE) || creature.hasProtectionFrom(perm,this)) {
          if (creature.removeAttachment(perm.getId(),this)) {
            somethingHappened=true;
          }
        }
      }
    }
    if (filterFortification.match(perm,this)) {
      if (perm.getAttachedTo() != null) {
        Permanent land=getPermanent(perm.getAttachedTo());
        if (land == null || !land.getAttachments().contains(perm.getId())) {
          perm.attachTo(null,this);
        }
 else         if (!land.getCardType().contains(CardType.LAND) || land.hasProtectionFrom(perm,this)) {
          if (land.removeAttachment(perm.getId(),this)) {
            somethingHappened=true;
          }
        }
      }
    }
    if (perm.getAttachments().size() > 0) {
      for (      UUID attachmentId : perm.getAttachments()) {
        Permanent attachment=getPermanent(attachmentId);
        if (attachment != null && !(attachment.getSubtype().contains(""String_Node_Str"") || attachment.getSubtype().contains(""String_Node_Str"") || attachment.getSubtype().contains(""String_Node_Str""))) {
          if (perm.removeAttachment(attachment.getId(),this)) {
            somethingHappened=true;
            break;
          }
        }
      }
    }
    if (perm.getCounters().containsKey(CounterType.P1P1) && perm.getCounters().containsKey(CounterType.M1M1)) {
      int p1p1=perm.getCounters().getCount(CounterType.P1P1);
      int m1m1=perm.getCounters().getCount(CounterType.M1M1);
      int min=Math.min(p1p1,m1m1);
      perm.getCounters().removeCounter(CounterType.P1P1,min);
      perm.getCounters().removeCounter(CounterType.M1M1,min);
    }
  }
  if (planeswalkers.size() > 1) {
    for (    Permanent planeswalker : planeswalkers) {
      for (      String planeswalkertype : planeswalker.getSubtype()) {
        FilterPlaneswalkerPermanent filterPlaneswalker=new FilterPlaneswalkerPermanent();
        filterPlaneswalker.add(new SubtypePredicate(planeswalkertype));
        filterPlaneswalker.add(new ControllerIdPredicate(planeswalker.getControllerId()));
        if (getBattlefield().contains(filterPlaneswalker,planeswalker.getControllerId(),this,2)) {
          Player controller=this.getPlayer(planeswalker.getControllerId());
          if (controller != null) {
            Target targetPlaneswalkerToKeep=new TargetPermanent(filterPlaneswalker);
            targetPlaneswalkerToKeep.setTargetName(new StringBuilder(planeswalker.getName()).append(""String_Node_Str"").toString());
            targetPlaneswalkerToKeep.setRequired(true);
            controller.chooseTarget(Outcome.Benefit,targetPlaneswalkerToKeep,null,this);
            for (            Permanent dupPlaneswalker : this.getBattlefield().getActivePermanents(filterPlaneswalker,planeswalker.getControllerId(),this)) {
              if (!targetPlaneswalkerToKeep.getTargets().contains(dupPlaneswalker.getId())) {
                dupPlaneswalker.moveToZone(Zone.GRAVEYARD,null,this,false);
              }
            }
          }
          return true;
        }
      }
    }
  }
  if (legendary.size() > 1) {
    for (    Permanent legend : legendary) {
      FilterPermanent filterLegendName=new FilterPermanent();
      filterLegendName.add(new SupertypePredicate(""String_Node_Str""));
      filterLegendName.add(new NamePredicate(legend.getName()));
      filterLegendName.add(new ControllerIdPredicate(legend.getControllerId()));
      if (getBattlefield().contains(filterLegendName,legend.getControllerId(),this,2)) {
        Player controller=this.getPlayer(legend.getControllerId());
        if (controller != null) {
          Target targetLegendaryToKeep=new TargetPermanent(filterLegendName);
          targetLegendaryToKeep.setTargetName(new StringBuilder(legend.getName()).append(""String_Node_Str"").toString());
          targetLegendaryToKeep.setRequired(true);
          controller.chooseTarget(Outcome.Benefit,targetLegendaryToKeep,null,this);
          for (          Permanent dupLegend : getBattlefield().getActivePermanents(filterLegendName,legend.getControllerId(),this)) {
            if (!targetLegendaryToKeep.getTargets().contains(dupLegend.getId())) {
              dupLegend.moveToZone(Zone.GRAVEYARD,null,this,false);
            }
          }
        }
        return true;
      }
    }
  }
  for (  Card card : this.getState().getExile().getAllCards(this)) {
    if (card.isCopy()) {
      this.getState().getExile().removeCard(card,this);
      this.removeCard(card.getId());
    }
  }
  return somethingHappened;
}",0.9991008092716556
159424,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Permanent sourcePermanent=game.getPermanent(source.getSourceId());
  if (controller != null && sourcePermanent != null) {
    Choice cardChoice=new ChoiceImpl();
    cardChoice.setChoices(CardRepository.instance.getNames());
    cardChoice.clearChoice();
    while (!controller.choose(Outcome.Detriment,cardChoice,game)) {
      if (!controller.isInGame()) {
        return false;
      }
    }
    String cardName=cardChoice.getChoice();
    game.informPlayers(""String_Node_Str"" + cardName + ""String_Node_Str"");
    FilterCard filter=new FilterCard(cardName);
    filter.add(new NamePredicate(cardName));
    for (    Ability ability : sourcePermanent.getAbilities()) {
      if (ability instanceof ProtectionAbility) {
        ((ProtectionAbility)ability).setFilter(filter);
      }
    }
    sourcePermanent.addInfo(""String_Node_Str"",new StringBuilder(""String_Node_Str"").append(cardName).append(""String_Node_Str"").toString());
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  return true;
}",0.1290322580645161
159425,"@Override public NameCard copy(){
  return new NameCard(this);
}","@Override public RunedHaloRuleTextEffect copy(){
  return new RunedHaloRuleTextEffect(this);
}",0.6582278481012658
159426,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    player.addAbility(ability);
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    player.addAbility(ability);
    if (duration.equals(Duration.Custom)) {
      if (game.getPermanent(source.getSourceId()) == null) {
        discard();
      }
    }
    return true;
  }
 else {
    discard();
  }
  return false;
}",0.6051282051282051
159427,"public HashMap<RequirementEffect,HashSet<Ability>> getApplicableRequirementEffects(Permanent permanent,Game game){
  HashMap<RequirementEffect,HashSet<Ability>> effects=new HashMap<>();
  for (  RequirementEffect effect : requirementEffects) {
    HashSet<Ability> abilities=requirementEffects.getAbility(effect.getId());
    HashSet<Ability> applicableAbilities=new HashSet<>();
    for (    Ability ability : abilities) {
      if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false)) {
        if (effect.applies(permanent,ability,game)) {
          applicableAbilities.add(ability);
        }
      }
    }
    if (!applicableAbilities.isEmpty()) {
      effects.put(effect,abilities);
    }
  }
  return effects;
}","public HashMap<RequirementEffect,HashSet<Ability>> getApplicableRequirementEffects(Permanent permanent,Game game){
  HashMap<RequirementEffect,HashSet<Ability>> effects=new HashMap<>();
  for (  RequirementEffect effect : requirementEffects) {
    HashSet<Ability> abilities=requirementEffects.getAbility(effect.getId());
    HashSet<Ability> applicableAbilities=new HashSet<>();
    for (    Ability ability : abilities) {
      if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,ability instanceof MageSingleton ? permanent : null,false)) {
        if (effect.applies(permanent,ability,game)) {
          applicableAbilities.add(ability);
        }
      }
    }
    if (!applicableAbilities.isEmpty()) {
      effects.put(effect,abilities);
    }
  }
  return effects;
}",0.9695003244646332
159428,"@Override public void mousePressed(MouseEvent e){
  this.hideDialog();
}","@Override public void mousePressed(MouseEvent e){
  if (e.getSource() instanceof CardPanel) {
    this.hideDialog();
  }
}",0.7422680412371134
159429,"public void pickTarget(String message,CardsView cardView,GameView gameView,Set<UUID> targets,boolean required,Map<String,Serializable> options,int messageId){
  ShowCardsDialog dialog=null;
  updateGame(gameView);
  Map<String,Serializable> options0=options == null ? new HashMap<String,Serializable>() : options;
  if (cardView != null && cardView.size() > 0) {
    dialog=showCards(message,cardView,required,options0);
    options0.put(""String_Node_Str"",dialog);
  }
  this.feedbackPanel.getFeedback(required ? FeedbackMode.INFORM : FeedbackMode.CANCEL,message,gameView.getSpecial(),options0,messageId);
  if (dialog != null) {
    this.pickTarget.add(dialog);
  }
}","/** 
 * Shows a pick target dialog  and allows the player to pick a target (e.g. the pick triggered ability)
 * @param message
 * @param cardView
 * @param gameView
 * @param targets
 * @param required
 * @param options
 * @param messageId 
 */
public void pickTarget(String message,CardsView cardView,GameView gameView,Set<UUID> targets,boolean required,Map<String,Serializable> options,int messageId){
  ShowCardsDialog dialog=null;
  updateGame(gameView);
  Map<String,Serializable> options0=options == null ? new HashMap<String,Serializable>() : options;
  if (cardView != null && cardView.size() > 0) {
    dialog=showCards(message,cardView,required,options0);
    options0.put(""String_Node_Str"",dialog);
  }
  this.feedbackPanel.getFeedback(required ? FeedbackMode.INFORM : FeedbackMode.CANCEL,message,gameView.getSpecial(),options0,messageId);
  if (dialog != null) {
    this.pickTarget.add(dialog);
  }
}",0.845034788108792
159430,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Choice cardChoice=new ChoiceImpl();
    cardChoice.setChoices(CardRepository.instance.getNames());
    cardChoice.clearChoice();
    while (!controller.choose(Outcome.Detriment,cardChoice,game)) {
      if (!controller.isInGame()) {
        return false;
      }
    }
    String cardName=cardChoice.getChoice();
    game.informPlayers(""String_Node_Str"" + cardName + ""String_Node_Str"");
    FilterCard filter=new FilterCard(cardName);
    filter.add(new NamePredicate(cardName));
    Permanent permanent=game.getPermanent(source.getSourceId());
    if (permanent != null) {
      for (      Ability ability : permanent.getAbilities()) {
        if (ability instanceof ProtectionAbility) {
          ((ProtectionAbility)ability).setFilter(filter);
        }
      }
    }
    permanent.addInfo(""String_Node_Str"",new StringBuilder(""String_Node_Str"").append(cardName).append(""String_Node_Str"").toString());
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Permanent sourcePermanent=game.getPermanent(source.getSourceId());
  if (controller != null && sourcePermanent != null) {
    Choice cardChoice=new ChoiceImpl();
    cardChoice.setChoices(CardRepository.instance.getNames());
    cardChoice.clearChoice();
    while (!controller.choose(Outcome.Detriment,cardChoice,game)) {
      if (!controller.isInGame()) {
        return false;
      }
    }
    String cardName=cardChoice.getChoice();
    game.informPlayers(""String_Node_Str"" + cardName + ""String_Node_Str"");
    FilterCard filter=new FilterCard(cardName);
    filter.add(new NamePredicate(cardName));
    for (    Ability ability : sourcePermanent.getAbilities()) {
      if (ability instanceof ProtectionAbility) {
        ((ProtectionAbility)ability).setFilter(filter);
      }
    }
    sourcePermanent.addInfo(""String_Node_Str"",new StringBuilder(""String_Node_Str"").append(cardName).append(""String_Node_Str"").toString());
  }
  return false;
}",0.4558139534883721
159431,"@Override public void loadCards(CardsView showCards,SortSetting sortSetting,BigCard bigCard,UUID gameId,boolean merge){
  boolean drawImage=showCards.size() < MAX_IMAGES;
  this.bigCard=bigCard;
  this.gameId=gameId;
  if (merge) {
    for (    CardView card : showCards.values()) {
      if (!cards.containsKey(card.getId())) {
        addCard(card,bigCard,gameId,drawImage);
      }
    }
    for (Iterator<Entry<UUID,MageCard>> i=cards.entrySet().iterator(); i.hasNext(); ) {
      Entry<UUID,MageCard> entry=i.next();
      if (!showCards.containsKey(entry.getKey())) {
        removeCardImg(entry.getKey());
        i.remove();
      }
    }
  }
 else {
    this.clearCards();
    for (    CardView card : showCards.values()) {
      addCard(card,bigCard,gameId,drawImage);
    }
  }
  drawCards(sortSetting);
  this.setVisible(true);
}","@Override public void loadCards(CardsView showCards,SortSetting sortSetting,BigCard bigCard,UUID gameId,boolean merge){
  boolean drawImage=showCards.size() <= MAX_IMAGES;
  this.bigCard=bigCard;
  this.gameId=gameId;
  if (merge) {
    for (    CardView card : showCards.values()) {
      if (!cards.containsKey(card.getId())) {
        addCard(card,bigCard,gameId,drawImage);
      }
    }
    for (Iterator<Entry<UUID,MageCard>> i=cards.entrySet().iterator(); i.hasNext(); ) {
      Entry<UUID,MageCard> entry=i.next();
      if (!showCards.containsKey(entry.getKey())) {
        removeCardImg(entry.getKey());
        i.remove();
      }
    }
  }
 else {
    this.clearCards();
    for (    CardView card : showCards.values()) {
      addCard(card,bigCard,gameId,drawImage);
    }
  }
  drawCards(sortSetting);
  this.setVisible(true);
}",0.9994058229352348
159432,"private void setReminderText(Card card){
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  int i=0;
  for (  String subtype : card.getSubtype()) {
    i++;
    sb.append(subtype);
    if (card.getSupertype().size() > 1 && i < card.getSupertype().size()) {
      sb.append(""String_Node_Str"");
    }
  }
  reminderText=sb.toString();
}","private void setReminderText(Card card){
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  int i=0;
  for (  String subtype : card.getSubtype()) {
    i++;
    sb.append(subtype);
    if (card.getSubtype().size() > 1 && i < card.getSubtype().size()) {
      sb.append(""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"");
  reminderText=sb.toString();
}",0.9438202247191012
159433,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(targetPointer.getFirst(game,source));
  Player controller=game.getPlayer(source.getControllerId());
  if (player != null && controller != null) {
    Choice cardChoice=new ChoiceImpl();
    cardChoice.setChoices(CardRepository.instance.getNonLandNames());
    cardChoice.clearChoice();
    while (!controller.choose(Outcome.Discard,cardChoice,game)) {
      if (!controller.isInGame()) {
        return false;
      }
    }
    String cardName=cardChoice.getChoice();
    game.informPlayers(""String_Node_Str"" + cardName + ""String_Node_Str"");
    for (    Card card : player.getHand().getCards(game)) {
      if (card.getName().equals(cardName)) {
        card.moveToZone(Zone.GRAVEYARD,source.getId(),game,false);
      }
    }
    controller.lookAtCards(""String_Node_Str"",player.getHand(),game);
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(targetPointer.getFirst(game,source));
  Player controller=game.getPlayer(source.getControllerId());
  if (player != null && controller != null) {
    Choice cardChoice=new ChoiceImpl();
    cardChoice.setChoices(CardRepository.instance.getNonLandNames());
    cardChoice.clearChoice();
    while (!controller.choose(Outcome.Discard,cardChoice,game)) {
      if (!controller.isInGame()) {
        return false;
      }
    }
    String cardName=cardChoice.getChoice();
    game.informPlayers(""String_Node_Str"" + cardName + ""String_Node_Str"");
    for (    Card card : player.getHand().getCards(game)) {
      if (card.getName().equals(cardName)) {
        player.discard(card,source,game);
      }
    }
    controller.lookAtCards(""String_Node_Str"",player.getHand(),game);
  }
  return true;
}",0.9647453833240068
159434,"@Override public boolean canActivate(UUID playerId,Game game){
  if (this.spellCanBeActivatedRegularlyNow(playerId,game) || game.getContinuousEffects().asThough(sourceId,AsThoughEffectType.CAST,playerId,game)) {
    if (spellAbilityType.equals(SpellAbilityType.SPLIT)) {
      return false;
    }
    if (!controllerId.equals(playerId)) {
      return false;
    }
    if (this.getManaCosts().isEmpty()) {
      return false;
    }
    if (costs.canPay(sourceId,controllerId,game)) {
      if (getSpellAbilityType().equals(SpellAbilityType.SPLIT_FUSED)) {
        SplitCard splitCard=(SplitCard)game.getCard(getSourceId());
        if (splitCard != null) {
          return (splitCard.getLeftHalfCard().getSpellAbility().canChooseTarget(game) && splitCard.getRightHalfCard().getSpellAbility().canChooseTarget(game));
        }
        return false;
      }
 else {
        return canChooseTarget(game);
      }
    }
  }
  return false;
}","@Override public boolean canActivate(UUID playerId,Game game){
  if (this.spellCanBeActivatedRegularlyNow(playerId,game) || game.getContinuousEffects().asThough(sourceId,AsThoughEffectType.CAST,playerId,game)) {
    if (spellAbilityType.equals(SpellAbilityType.SPLIT)) {
      return false;
    }
    if (!controllerId.equals(playerId)) {
      return false;
    }
    if (costs.canPay(sourceId,controllerId,game)) {
      if (getSpellAbilityType().equals(SpellAbilityType.SPLIT_FUSED)) {
        SplitCard splitCard=(SplitCard)game.getCard(getSourceId());
        if (splitCard != null) {
          return (splitCard.getLeftHalfCard().getSpellAbility().canChooseTarget(game) && splitCard.getRightHalfCard().getSpellAbility().canChooseTarget(game));
        }
        return false;
      }
 else {
        return canChooseTarget(game);
      }
    }
  }
  return false;
}",0.9629629629629628
159435,"@Override public Set<Card> getCards(Game game){
  Set<Card> cards=new LinkedHashSet<Card>();
  for (  UUID card : this) {
    cards.add(game.getCard(card));
  }
  return cards;
}","@Override public Set<Card> getCards(Game game){
  Set<Card> cards=new LinkedHashSet<>();
  for (  UUID card : this) {
    cards.add(game.getCard(card));
  }
  return cards;
}",0.9886363636363636
159436,"@Override public Collection<Card> getUniqueCards(Game game){
  Map<String,Card> cards=new HashMap<String,Card>();
  for (  UUID cardId : this) {
    Card card=game.getCard(cardId);
    if (!cards.containsKey(card.getName())) {
      cards.put(card.getName(),card);
    }
  }
  return cards.values();
}","@Override public Collection<Card> getUniqueCards(Game game){
  Map<String,Card> cards=new HashMap<>();
  for (  UUID cardId : this) {
    Card card=game.getCard(cardId);
    if (!cards.containsKey(card.getName())) {
      cards.put(card.getName(),card);
    }
  }
  return cards.values();
}",0.9813874788494078
159437,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType() == EventType.ZONE_CHANGE && ((ZoneChangeEvent)event).getToZone() == Zone.GRAVEYARD) {
    if (game.getOpponents(source.getControllerId()).contains(event.getPlayerId())) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType() == EventType.ZONE_CHANGE && ((ZoneChangeEvent)event).getToZone() == Zone.GRAVEYARD) {
    Card card=game.getCard(event.getTargetId());
    if (card != null && game.getOpponents(source.getControllerId()).contains(card.getOwnerId())) {
      return true;
    }
  }
  return false;
}",0.8715728715728716
159438,"@Override public boolean canPay(UUID sourceId,UUID controllerId,Game game){
  Permanent planeswalker=game.getPermanent(sourceId);
  if (planeswalker.getCounters().getCount(CounterType.LOYALTY) + amount >= 0 && !planeswalker.isLoyaltyUsed())   return true;
  return false;
}","@Override public boolean canPay(UUID sourceId,UUID controllerId,Game game){
  Permanent planeswalker=game.getPermanent(sourceId);
  return planeswalker.getCounters().getCount(CounterType.LOYALTY) + amount >= 0 && !planeswalker.isLoyaltyUsed();
}",0.918918918918919
159439,"@Override public Cost getFixedCostsFromAnnouncedValue(int xValue){
  return new PayLoyaltyCost(xValue);
}","@Override public Cost getFixedCostsFromAnnouncedValue(int xValue){
  return new PayLoyaltyCost(-xValue);
}",0.995260663507109
159440,"@Override public boolean isOpponent(Player player,UUID playerToCheck){
  return player.getInRange().contains(playerToCheck);
}","@Override public boolean isOpponent(Player player,UUID playerToCheck){
  return !player.getId().equals(playerToCheck) && player.getInRange().contains(playerToCheck);
}",0.8600682593856656
159441,"@Override public Set<UUID> getOpponents(UUID playerId){
  Set<UUID> opponents=new HashSet<UUID>();
  for (  UUID opponentId : this.getPlayer(playerId).getInRange()) {
    if (!opponentId.equals(playerId)) {
      opponents.add(opponentId);
    }
  }
  return opponents;
}","@Override public Set<UUID> getOpponents(UUID playerId){
  Set<UUID> opponents=new HashSet<>();
  for (  UUID opponentId : this.getPlayer(playerId).getInRange()) {
    if (!opponentId.equals(playerId)) {
      opponents.add(opponentId);
    }
  }
  return opponents;
}",0.9925650557620818
159442,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.UPKEEP_STEP_PRE) {
switch (targetController) {
case YOU:
      boolean yours=event.getPlayerId().equals(this.controllerId);
    if (yours && setTargetPointer) {
      if (getTargets().size() == 0) {
        for (        Effect effect : this.getEffects()) {
          effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
        }
      }
    }
  return yours;
case OPPONENT:
if (game.getPlayer(this.controllerId).hasOpponent(event.getPlayerId(),game)) {
  if (setTargetPointer && getTargets().size() == 0) {
    for (    Effect effect : this.getEffects()) {
      effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
    }
  }
  return true;
}
break;
case ANY:
if (setTargetPointer && getTargets().size() == 0) {
for (Effect effect : this.getEffects()) {
effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
}
}
return true;
case CONTROLLER_ATTACHED_TO:
Permanent attachment=game.getPermanent(sourceId);
if (attachment != null && attachment.getAttachedTo() != null) {
Permanent attachedTo=game.getPermanent(attachment.getAttachedTo());
if (attachedTo != null && attachedTo.getControllerId().equals(event.getPlayerId())) {
if (setTargetPointer && getTargets().size() == 0) {
for (Effect effect : this.getEffects()) {
effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
}
}
return true;
}
}
}
}
return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.UPKEEP_STEP_PRE) {
switch (targetController) {
case YOU:
      boolean yours=event.getPlayerId().equals(this.controllerId);
    if (yours && setTargetPointer) {
      if (getTargets().size() == 0) {
        for (        Effect effect : this.getEffects()) {
          effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
        }
      }
    }
  return yours;
case OPPONENT:
if (game.getPlayer(this.controllerId).hasOpponent(event.getPlayerId(),game)) {
  if (setTargetPointer && getTargets().size() == 0) {
    for (    Effect effect : this.getEffects()) {
      effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
    }
  }
  return true;
}
break;
case ANY:
if (setTargetPointer && getTargets().size() == 0) {
for (Effect effect : this.getEffects()) {
effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
}
}
return true;
case CONTROLLER_ATTACHED_TO:
Permanent attachment=game.getPermanent(sourceId);
if (attachment != null && attachment.getAttachedTo() != null) {
Permanent attachedTo=game.getPermanent(attachment.getAttachedTo());
if (attachedTo != null && attachedTo.getControllerId().equals(event.getPlayerId())) {
if (setTargetPointer && getTargets().size() == 0) {
for (Effect effect : this.getEffects()) {
effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
}
}
return true;
}
}
break;
default :
throw new UnsupportedOperationException(""String_Node_Str"" + targetController.toString());
}
}
return false;
}",0.9646514701024116
159443,"@Override public boolean hasOpponent(UUID playerToCheckId,Game game){
  return game.isOpponent(this,playerToCheckId);
}","@Override public boolean hasOpponent(UUID playerToCheckId,Game game){
  return !this.getId().equals(playerToCheckId) && game.isOpponent(this,playerToCheckId);
}",0.8530465949820788
159444,"@Override public boolean canTarget(UUID id,Ability source,Game game){
  if (source != null && source.getId().equals(id)) {
    return false;
  }
  Spell spell=game.getStack().getSpell(id);
  if (spell != null) {
    return filter.match(spell,source.getControllerId(),game);
  }
  return false;
}","@Override public boolean canTarget(UUID id,Ability source,Game game){
  if (source == null || source.getId().equals(id)) {
    return false;
  }
  Spell spell=game.getStack().getSpell(id);
  if (spell != null) {
    return filter.match(spell,source.getControllerId(),game);
  }
  return false;
}",0.3491525423728813
159445,"@Override public Set<UUID> possibleTargets(UUID sourceControllerId,Game game){
  Set<UUID> possibleTargets=new HashSet<UUID>();
  for (  StackObject stackObject : game.getStack()) {
    if (canBeChosen(stackObject,sourceControllerId,game)) {
      possibleTargets.add(stackObject.getId());
    }
  }
  return possibleTargets;
}","@Override public Set<UUID> possibleTargets(UUID sourceControllerId,Game game){
  Set<UUID> possibleTargets=new HashSet<>();
  for (  StackObject stackObject : game.getStack()) {
    if (canBeChosen(stackObject,sourceControllerId,game)) {
      possibleTargets.add(stackObject.getId());
    }
  }
  return possibleTargets;
}",0.9938461538461538
159446,"@Override public boolean canChoose(UUID sourceControllerId,Game game){
  int count=0;
  for (  StackObject stackObject : game.getStack()) {
    if (canBeChosen(stackObject,sourceControllerId,game)) {
      count++;
      if (count >= this.minNumberOfTargets)       return true;
    }
  }
  return false;
}","@Override public boolean canChoose(UUID sourceControllerId,Game game){
  int count=0;
  for (  StackObject stackObject : game.getStack()) {
    if (canBeChosen(stackObject,sourceControllerId,game)) {
      count++;
      if (count >= this.minNumberOfTargets) {
        return true;
      }
    }
  }
  return false;
}",0.9807073954983924
159447,"/** 
 * Complete remove of the table, release all objects
 */
public void cleanUp(){
  match.cleanUpOnMatchEnd(isTournament);
}","/** 
 * Complete remove of the table, release all objects
 */
public void cleanUp(){
  if (match != null) {
    match.cleanUpOnMatchEnd(isTournament);
  }
}",0.8975265017667845
159448,"protected List<Permanent> threats(UUID playerId,UUID sourceId,FilterPermanent filter,Game game,List<UUID> targets){
  List<Permanent> threats=(playerId == null || sourceId == null) ? game.getBattlefield().getActivePermanents(filter,this.getId(),sourceId,game) : game.getBattlefield().getAllActivePermanents(filter,playerId,game);
  Iterator<Permanent> it=threats.iterator();
  while (it.hasNext()) {
    Permanent test=it.next();
    if (targets.contains(test.getId()) || (playerId != null && !test.getControllerId().equals(playerId))) {
      it.remove();
    }
  }
  Collections.sort(threats,new PermanentComparator(game));
  Collections.reverse(threats);
  return threats;
}","protected List<Permanent> threats(UUID playerId,UUID sourceId,FilterPermanent filter,Game game,List<UUID> targets){
  List<Permanent> threats=(playerId == null || sourceId == null) ? game.getBattlefield().getActivePermanents(filter,this.getId(),sourceId,game) : game.getBattlefield().getActivePermanents(filter,playerId,sourceId,game);
  Iterator<Permanent> it=threats.iterator();
  while (it.hasNext()) {
    Permanent test=it.next();
    if (targets.contains(test.getId()) || (playerId != null && !test.getControllerId().equals(playerId))) {
      it.remove();
    }
  }
  Collections.sort(threats,new PermanentComparator(game));
  Collections.reverse(threats);
  return threats;
}",0.9911764705882352
159449,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getSourceId());
  if (permanent != null) {
    new ExileTargetEffect(source.getSourceId(),permanent.getName()).apply(game,source);
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  ExileZone exile=game.getExile().getExileZone(source.getSourceId());
  Card sourceCard=game.getCard(source.getSourceId());
  if (exile != null && sourceCard != null) {
    LinkedList<UUID> cards=new LinkedList<>(exile);
    for (    UUID cardId : cards) {
      Card card=game.getCard(cardId);
      card.moveToZone(Zone.BATTLEFIELD,source.getSourceId(),game,false);
      game.informPlayers(new StringBuilder(sourceCard.getName()).append(""String_Node_Str"").append(card.getName()).append(""String_Node_Str"").toString());
    }
    exile.clear();
    return true;
  }
  return false;
}",0.2803114571746385
159450,"@Override public BanisherPriestWatcher copy(){
  return new BanisherPriestWatcher(this);
}","@Override public ReturnExiledCreatureEffect copy(){
  return new ReturnExiledCreatureEffect(this);
}",0.6736842105263158
159451,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getSourceId());
  Player controller=game.getPlayer(source.getControllerId());
  if (permanent != null) {
    return controller.moveCardToExileWithInfo(permanent,null,null,source.getSourceId(),game,null);
  }
 else {
    Card card=game.getCard(source.getSourceId());
    if (card != null) {
      return controller.moveCardToExileWithInfo(permanent,null,null,source.getSourceId(),game,null);
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getSourceId());
  Player controller=game.getPlayer(source.getControllerId());
  if (permanent != null) {
    return controller.moveCardToExileWithInfo(permanent,null,null,source.getSourceId(),game,null);
  }
 else {
    Card card=game.getCard(source.getSourceId());
    if (card != null) {
      return controller.moveCardToExileWithInfo(card,null,null,source.getSourceId(),game,null);
    }
  }
  return false;
}",0.9875120076849184
159452,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getSourceId());
  if (permanent != null) {
    new ExileTargetEffect(source.getSourceId(),permanent.getName()).apply(game,source);
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  ExileZone exile=game.getExile().getExileZone(source.getSourceId());
  Card sourceCard=game.getCard(source.getSourceId());
  if (exile != null && sourceCard != null) {
    LinkedList<UUID> cards=new LinkedList<>(exile);
    for (    UUID cardId : cards) {
      Card card=game.getCard(cardId);
      card.moveToZone(Zone.BATTLEFIELD,source.getSourceId(),game,false);
      game.informPlayers(new StringBuilder(sourceCard.getName()).append(""String_Node_Str"").append(card.getName()).append(""String_Node_Str"").toString());
    }
    exile.clear();
    return true;
  }
  return false;
}",0.2803114571746385
159453,"@Override public ChainedToTheRocksWatcher copy(){
  return new ChainedToTheRocksWatcher(this);
}","@Override public ReturnExiledCreatureChainedToTheRocksEffect copy(){
  return new ReturnExiledCreatureChainedToTheRocksEffect(this);
}",0.7304347826086957
159454,"@Override public void adjustTargets(Ability ability,Game game){
  if (ability instanceof ConditionalTriggeredAbility) {
    for (    Effect effect : ability.getEffects()) {
      if (effect instanceof DestroyTargetEffect) {
        Player attackedPlayer=game.getPlayer(effect.getTargetPointer().getFirst(game,ability));
        if (attackedPlayer != null) {
          ability.getTargets().clear();
          FilterPermanent filterEnchantment=new FilterEnchantmentPermanent(""String_Node_Str"");
          filter.add(new ControllerIdPredicate(attackedPlayer.getId()));
          Target target=new TargetPermanent(filterEnchantment);
          target.setRequired(true);
          ability.addTarget(target);
          effect.setTargetPointer(new FirstTargetPointer());
          break;
        }
      }
    }
  }
}","@Override public void adjustTargets(Ability ability,Game game){
  if (ability instanceof ConditionalTriggeredAbility) {
    for (    Effect effect : ability.getEffects()) {
      if (effect instanceof DestroyTargetEffect) {
        Player attackedPlayer=game.getPlayer(effect.getTargetPointer().getFirst(game,ability));
        if (attackedPlayer != null) {
          ability.getTargets().clear();
          FilterPermanent filterEnchantment=new FilterEnchantmentPermanent(""String_Node_Str"");
          filterEnchantment.add(new ControllerIdPredicate(attackedPlayer.getId()));
          Target target=new TargetPermanent(filterEnchantment);
          target.setRequired(true);
          ability.addTarget(target);
          effect.setTargetPointer(new FirstTargetPointer());
          break;
        }
      }
    }
  }
}",0.9932556713672592
159455,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ATTACKER_DECLARED && event.getSourceId().equals(this.getSourceId())) {
    FilterCreaturePermanent filter=new FilterCreaturePermanent(""String_Node_Str"");
    UUID defenderId=game.getCombat().getDefenderId(sourceId);
    filter.add(new ControllerIdPredicate(defenderId));
    this.getTargets().clear();
    TargetCreaturePermanent target=new TargetCreaturePermanent(filter);
    target.setRequired(true);
    this.addTarget(target);
    return true;
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ZONE_CHANGE && event.getTargetId().equals(this.getSourceId())) {
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    if (zEvent.getFromZone() == Zone.BATTLEFIELD) {
      return true;
    }
  }
  return false;
}",0.4282560706401766
159456,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getSourceId());
  if (permanent != null) {
    new ExileTargetEffect(source.getSourceId(),permanent.getName()).apply(game,source);
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  ExileZone exile=game.getExile().getExileZone(source.getSourceId());
  Card sourceCard=game.getCard(source.getSourceId());
  if (exile != null && sourceCard != null) {
    LinkedList<UUID> cards=new LinkedList<>(exile);
    for (    UUID cardId : cards) {
      Card card=game.getCard(cardId);
      card.moveToZone(Zone.BATTLEFIELD,source.getSourceId(),game,false);
      game.informPlayers(new StringBuilder(sourceCard.getName()).append(""String_Node_Str"").append(card.getName()).append(""String_Node_Str"").toString());
    }
    exile.clear();
    return true;
  }
  return false;
}",0.2803114571746385
159457,"@Override public ColossalWhaleWatcher copy(){
  return new ColossalWhaleWatcher(this);
}","@Override public ReturnExiledCreatureColossalWhaleEffect copy(){
  return new ReturnExiledCreatureColossalWhaleEffect(this);
}",0.7102803738317757
159458,"@Override public boolean apply(Game game,Ability source){
  Card card=game.getCard(source.getSourceId());
  if (card != null) {
    ExileZone currentZone=game.getState().getExile().getExileZone(source.getSourceId());
    if (currentZone.size() > 0) {
      if (card.putOntoBattlefield(game,Zone.EXILED,source.getSourceId(),card.getOwnerId(),false)) {
        return true;
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Card card=game.getCard(source.getSourceId());
  if (card != null) {
    ExileZone currentZone=game.getState().getExile().getExileZone(source.getSourceId());
    if (currentZone.size() > 0) {
      Player owner=game.getPlayer(card.getOwnerId());
      if (owner != null && owner.putOntoBattlefieldWithInfo(card,game,Zone.EXILED,source.getSourceId())) {
        return true;
      }
    }
  }
  return false;
}",0.8548571428571429
159459,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.UPKEEP_STEP_PRE && event.getPlayerId().equals(this.controllerId)) {
    return true;
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  return event.getType() == GameEvent.EventType.UPKEEP_STEP_PRE && event.getPlayerId().equals(this.controllerId);
}",0.8793969849246231
159460,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(targetPointer.getFirst(game,source));
  if (permanent != null) {
    return permanent.moveToExile(exileId,exileZone,source.getSourceId(),game);
  }
 else {
    Card card=game.getCard(targetPointer.getFirst(game,source));
    if (card != null) {
      return card.moveToExile(exileId,exileZone,source.getSourceId(),game);
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(targetPointer.getFirst(game,source));
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    if (permanent != null) {
      Zone currentZone=game.getState().getZone(permanent.getId());
      if (!currentZone.equals(Zone.EXILED) && (onlyFromZone == null || onlyFromZone.equals(Zone.BATTLEFIELD))) {
        return controller.moveCardToExileWithInfo(permanent,exileId,exileZone,source.getSourceId(),game,onlyFromZone);
      }
    }
 else {
      Card card=game.getCard(targetPointer.getFirst(game,source));
      if (card != null) {
        Zone currentZone=game.getState().getZone(card.getId());
        if (!currentZone.equals(Zone.EXILED) && (onlyFromZone == null || onlyFromZone.equals(currentZone))) {
          return controller.moveCardToExileWithInfo(card,exileId,exileZone,source.getSourceId(),game,onlyFromZone);
        }
      }
    }
  }
  return false;
}",0.5875862068965517
159461,"public ExileTargetEffect(final ExileTargetEffect effect){
  super(effect);
  this.exileZone=effect.exileZone;
  this.exileId=effect.exileId;
}","public ExileTargetEffect(final ExileTargetEffect effect){
  super(effect);
  this.exileZone=effect.exileZone;
  this.exileId=effect.exileId;
  this.onlyFromZone=effect.onlyFromZone;
}",0.8738461538461538
159462,"@Override public boolean moveCardToGraveyardWithInfo(Card card,UUID sourceId,Game game,Zone fromZone){
  boolean result=false;
  if (card.moveToZone(Zone.GRAVEYARD,sourceId,game,fromZone != null ? fromZone.equals(Zone.BATTLEFIELD) : false)) {
    game.informPlayers(new StringBuilder(this.getName()).append(""String_Node_Str"").append(card.getName()).append(""String_Node_Str"").append(fromZone != null ? new StringBuilder(""String_Node_Str"").append(fromZone.toString().toLowerCase(Locale.ENGLISH)).append(""String_Node_Str"") : ""String_Node_Str"").append(""String_Node_Str"").toString());
  }
  return result;
}","@Override public boolean moveCardToGraveyardWithInfo(Card card,UUID sourceId,Game game,Zone fromZone){
  boolean result=false;
  if (card.moveToZone(Zone.GRAVEYARD,sourceId,game,fromZone != null ? fromZone.equals(Zone.BATTLEFIELD) : false)) {
    game.informPlayers(new StringBuilder(this.getName()).append(""String_Node_Str"").append(card.getName()).append(""String_Node_Str"").append(fromZone != null ? new StringBuilder(""String_Node_Str"").append(fromZone.toString().toLowerCase(Locale.ENGLISH)).append(""String_Node_Str"") : ""String_Node_Str"").append(""String_Node_Str"").toString());
    result=true;
  }
  return result;
}",0.986076986076986
159463,"@Override public boolean moveCardToHandWithInfo(Card card,UUID sourceId,Game game,Zone fromZone){
  boolean result=false;
  if (card.moveToZone(Zone.HAND,sourceId,game,false)) {
    game.informPlayers(new StringBuilder(this.getName()).append(""String_Node_Str"").append(card.getName()).append(""String_Node_Str"").append(fromZone != null ? new StringBuilder(""String_Node_Str"").append(fromZone.toString().toLowerCase(Locale.ENGLISH)).append(""String_Node_Str"") : ""String_Node_Str"").append(""String_Node_Str"").toString());
  }
  return result;
}","@Override public boolean moveCardToHandWithInfo(Card card,UUID sourceId,Game game,Zone fromZone){
  boolean result=false;
  if (card.moveToZone(Zone.HAND,sourceId,game,false)) {
    game.informPlayers(new StringBuilder(this.getName()).append(""String_Node_Str"").append(card.getName()).append(""String_Node_Str"").append(fromZone != null ? new StringBuilder(""String_Node_Str"").append(fromZone.toString().toLowerCase(Locale.ENGLISH)).append(""String_Node_Str"") : ""String_Node_Str"").append(""String_Node_Str"").toString());
    result=true;
  }
  return result;
}",0.9844179651695693
159464,"@Override public boolean putOntoBattlefieldWithInfo(Card card,Game game,Zone fromZone,UUID sourceId,boolean tapped){
  boolean result=false;
  if (card.putOntoBattlefield(game,fromZone,sourceId,this.getId(),tapped)) {
    game.informPlayers(new StringBuilder(this.getName()).append(""String_Node_Str"").append(card.getName()).append(""String_Node_Str"").append(fromZone.toString().toLowerCase(Locale.ENGLISH)).append(""String_Node_Str"").append(""String_Node_Str"").toString());
  }
  return result;
}","@Override public boolean putOntoBattlefieldWithInfo(Card card,Game game,Zone fromZone,UUID sourceId,boolean tapped){
  boolean result=false;
  if (card.putOntoBattlefield(game,fromZone,sourceId,this.getId(),tapped)) {
    game.informPlayers(new StringBuilder(this.getName()).append(""String_Node_Str"").append(card.getName()).append(""String_Node_Str"").append(fromZone.toString().toLowerCase(Locale.ENGLISH)).append(""String_Node_Str"").append(""String_Node_Str"").toString());
    result=true;
  }
  return result;
}",0.9830508474576272
159465,"@Override public ConditionalMana build(Object... options){
  return new CavernOfSoulsConditionalMana(this.mana);
}","@Override public ConditionalMana build(Object... options){
  this.mana.setFlag(true);
  return new CavernOfSoulsConditionalMana(this.mana);
}",0.8941176470588236
159466,"@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.MANA_PAYED) {
    MageObject object=game.getObject(event.getSourceId());
    if (object != null && object.getName().equals(""String_Node_Str"")) {
      spells.add(event.getTargetId());
    }
  }
}","@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.MANA_PAYED) {
    MageObject object=game.getObject(event.getSourceId());
    if (object != null && object.getName().equals(""String_Node_Str"") && event.getFlag()) {
      spells.add(event.getTargetId());
    }
  }
}",0.9689034369885434
159467,"/** 
 * Tests card can be countered for cast with Cavern of Souls
 */
@Test public void testDrakeCantBeCountered(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",3);
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.HAND,playerB,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",2);
  setChoice(playerA,""String_Node_Str"");
  setChoice(playerA,""String_Node_Str"");
  playLand(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerB,""String_Node_Str"");
  setStopAt(1,PhaseStep.BEGIN_COMBAT);
  execute();
  assertGraveyardCount(playerA,""String_Node_Str"",0);
  assertPermanentCount(playerA,""String_Node_Str"",1);
}","/** 
 * Tests spell can't be countered for cast with Cavern of Souls
 */
@Test public void testDrakeCantBeCountered(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",3);
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.HAND,playerB,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",2);
  setChoice(playerA,""String_Node_Str"");
  setChoice(playerA,""String_Node_Str"");
  playLand(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerB,""String_Node_Str"");
  setStopAt(1,PhaseStep.BEGIN_COMBAT);
  execute();
  assertGraveyardCount(playerA,""String_Node_Str"",0);
  assertPermanentCount(playerA,""String_Node_Str"",1);
}",0.990791896869245
159468,"private void removeConditional(ManaType manaType,Ability ability,Game game){
  for (  ConditionalMana mana : getConditionalMana()) {
    if (mana.get(manaType) > 0 && mana.apply(ability,game,mana.getManaProducerId())) {
      mana.set(manaType,mana.get(manaType) - 1);
      game.fireEvent(new GameEvent(GameEvent.EventType.MANA_PAYED,ability.getId(),mana.getManaProducerId(),ability.getControllerId()));
      break;
    }
  }
}","private void removeConditional(ManaType manaType,Ability ability,Game game){
  for (  ConditionalMana mana : getConditionalMana()) {
    if (mana.get(manaType) > 0 && mana.apply(ability,game,mana.getManaProducerId())) {
      mana.set(manaType,mana.get(manaType) - 1);
      game.fireEvent(new GameEvent(GameEvent.EventType.MANA_PAYED,ability.getId(),mana.getManaProducerId(),ability.getControllerId(),0,mana.getFlag()));
      break;
    }
  }
}",0.9805714285714284
159469,"public synchronized void updateGame(GameView game){
  if (playerId == null || game.getHand() == null) {
    this.handContainer.setVisible(false);
  }
 else {
    handCards.clear();
    handCards.put(YOUR_HAND,CardsViewUtil.convertSimple(game.getHand(),loadedCards));
    if (game.getOpponentHands() != null) {
      for (      Map.Entry<String,SimpleCardsView> hand : game.getOpponentHands().entrySet()) {
        handCards.put(hand.getKey(),CardsViewUtil.convertSimple(game.getHand(),loadedCards));
      }
    }
    if (!handCards.containsKey(chosenHandKey)) {
      chosenHandKey=YOUR_HAND;
    }
    handContainer.loadCards(handCards.get(chosenHandKey),bigCard,gameId);
    hideAll();
    boolean previous=btnSwitchHands.isVisible();
    boolean visible=handCards.size() > 1;
    if (previous != visible) {
      btnSwitchHands.setVisible(visible);
      if (visible) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
  if (game.getPhase() != null) {
    this.txtPhase.setText(game.getPhase().toString());
  }
 else {
    this.txtPhase.setText(""String_Node_Str"");
  }
  if (game.getStep() != null) {
    updatePhases(game.getStep());
    this.txtStep.setText(game.getStep().toString());
  }
 else {
    this.txtStep.setText(""String_Node_Str"");
  }
  this.txtActivePlayer.setText(game.getActivePlayerName());
  this.txtPriority.setText(game.getPriorityPlayerName());
  this.txtTurn.setText(Integer.toString(game.getTurn()));
  for (  PlayerView player : game.getPlayers()) {
    if (players.containsKey(player.getPlayerId())) {
      players.get(player.getPlayerId()).update(player);
    }
 else {
      logger.warn(""String_Node_Str"");
      logger.warn(""String_Node_Str"" + player.getPlayerId());
      logger.warn(""String_Node_Str"");
      for (      PlayAreaPanel p : players.values()) {
        logger.warn(""String_Node_Str"" + p);
      }
    }
  }
  GameManager.getInstance().setStackSize(game.getStack().size());
  displayStack(game,bigCard,feedbackPanel,gameId);
  for (  ExileView exile : game.getExile()) {
    if (!exiles.containsKey(exile.getId())) {
      ExileZoneDialog newExile=new ExileZoneDialog();
      exiles.put(exile.getId(),newExile);
      MageFrame.getDesktop().add(newExile,JLayeredPane.MODAL_LAYER);
      newExile.show();
    }
    exiles.get(exile.getId()).loadCards(exile,bigCard,gameId);
  }
  showRevealed(game);
  showLookedAt(game);
  if (game.getCombat().size() > 0) {
    CombatManager.getInstance().showCombat(game.getCombat(),gameId);
  }
 else {
    CombatManager.getInstance().hideCombat(gameId);
  }
  feedbackPanel.disableUndo();
  this.revalidate();
  this.repaint();
}","public synchronized void updateGame(GameView game){
  if (playerId == null || game.getHand() == null) {
    this.handContainer.setVisible(false);
  }
 else {
    handCards.clear();
    handCards.put(YOUR_HAND,CardsViewUtil.convertSimple(game.getHand(),loadedCards));
    if (game.getOpponentHands() != null) {
      for (      Map.Entry<String,SimpleCardsView> hand : game.getOpponentHands().entrySet()) {
        handCards.put(hand.getKey(),CardsViewUtil.convertSimple(hand.getValue(),loadedCards));
      }
    }
    if (!handCards.containsKey(chosenHandKey)) {
      chosenHandKey=YOUR_HAND;
    }
    handContainer.loadCards(handCards.get(chosenHandKey),bigCard,gameId);
    hideAll();
    boolean previous=btnSwitchHands.isVisible();
    boolean visible=handCards.size() > 1;
    if (previous != visible) {
      btnSwitchHands.setVisible(visible);
      if (visible) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
  if (game.getPhase() != null) {
    this.txtPhase.setText(game.getPhase().toString());
  }
 else {
    this.txtPhase.setText(""String_Node_Str"");
  }
  if (game.getStep() != null) {
    updatePhases(game.getStep());
    this.txtStep.setText(game.getStep().toString());
  }
 else {
    this.txtStep.setText(""String_Node_Str"");
  }
  this.txtActivePlayer.setText(game.getActivePlayerName());
  this.txtPriority.setText(game.getPriorityPlayerName());
  this.txtTurn.setText(Integer.toString(game.getTurn()));
  for (  PlayerView player : game.getPlayers()) {
    if (players.containsKey(player.getPlayerId())) {
      players.get(player.getPlayerId()).update(player);
    }
 else {
      logger.warn(""String_Node_Str"");
      logger.warn(""String_Node_Str"" + player.getPlayerId());
      logger.warn(""String_Node_Str"");
      for (      PlayAreaPanel p : players.values()) {
        logger.warn(""String_Node_Str"" + p);
      }
    }
  }
  GameManager.getInstance().setStackSize(game.getStack().size());
  displayStack(game,bigCard,feedbackPanel,gameId);
  for (  ExileView exile : game.getExile()) {
    if (!exiles.containsKey(exile.getId())) {
      ExileZoneDialog newExile=new ExileZoneDialog();
      exiles.put(exile.getId(),newExile);
      MageFrame.getDesktop().add(newExile,JLayeredPane.MODAL_LAYER);
      newExile.show();
    }
    exiles.get(exile.getId()).loadCards(exile,bigCard,gameId);
  }
  showRevealed(game);
  showLookedAt(game);
  if (game.getCombat().size() > 0) {
    CombatManager.getInstance().showCombat(game.getCombat(),gameId);
  }
 else {
    CombatManager.getInstance().hideCombat(gameId);
  }
  feedbackPanel.disableUndo();
  this.revalidate();
  this.repaint();
}",0.9954153676875116
159470,"public void cleanUp(){
  ActionCallback actionCallback=Plugins.getInstance().getActionCallback();
  if (actionCallback instanceof MageActionCallback) {
    ((MageActionCallback)actionCallback).setCardPreviewComponent(null);
  }
}","public void cleanUp(){
}",0.1897233201581027
159471,"/** 
 * Free resources so GC can remove unused objects from memory
 */
public void cleanUp(){
  if (updateDeckTask != null) {
    updateDeckTask.cancel(true);
  }
  if (countdown != null) {
    if (countdown.isRunning()) {
      countdown.stop();
    }
    for (    ActionListener al : countdown.getActionListeners()) {
      countdown.removeActionListener(al);
    }
  }
  this.cardSelector.cleanUp();
  this.deckArea.cleanUp();
  this.remove(bigCard);
  this.bigCard=null;
  ((MageActionCallback)Plugins.getInstance().getActionCallback()).setCardPreviewComponent(null);
}","/** 
 * Free resources so GC can remove unused objects from memory
 */
public void cleanUp(){
  if (updateDeckTask != null) {
    updateDeckTask.cancel(true);
  }
  if (countdown != null) {
    if (countdown.isRunning()) {
      countdown.stop();
    }
    for (    ActionListener al : countdown.getActionListeners()) {
      countdown.removeActionListener(al);
    }
  }
  this.cardSelector.cleanUp();
  this.deckArea.cleanUp();
  this.remove(bigCard);
  this.bigCard=null;
}",0.907530981887512
159472,"public void update(Map<UUID,PermanentView> battlefield){
  boolean changed=false;
  List<PermanentView> permanentsToAdd=new ArrayList<PermanentView>();
  for (  PermanentView permanent : battlefield.values()) {
    if (!permanents.containsKey(permanent.getId())) {
      permanentsToAdd.add(permanent);
      changed=true;
    }
 else {
      MagePermanent p=permanents.get(permanent.getId());
      if (!changed) {
        int s1=permanent.getAttachments() == null ? 0 : permanent.getAttachments().size();
        int s2=p.getLinks().size();
        if (s1 != s2) {
          changed=true;
        }
      }
      permanents.get(permanent.getId()).update(permanent);
    }
  }
  addedArtifact=addedCreature=addedPermanent=false;
  int count=permanentsToAdd.size();
  for (  PermanentView permanent : permanentsToAdd) {
    addPermanent(permanent,count);
  }
  if (addedArtifact) {
    AudioManager.playAddArtifact();
  }
 else   if (addedCreature) {
    AudioManager.playSummon();
  }
 else   if (addedPermanent) {
    AudioManager.playAddPermanent();
  }
  removedCreature=false;
  for (Iterator<Entry<UUID,MagePermanent>> iterator=permanents.entrySet().iterator(); iterator.hasNext(); ) {
    Entry<UUID,MagePermanent> entry=iterator.next();
    if (!battlefield.containsKey(entry.getKey())) {
      removePermanent(entry.getKey(),1);
      iterator.remove();
      changed=true;
    }
  }
  if (removedCreature) {
    AudioManager.playDiedCreature();
  }
  if (changed) {
    this.battlefield=battlefield;
    sortLayout();
  }
}","public void update(Map<UUID,PermanentView> battlefield){
  boolean changed=false;
  List<PermanentView> permanentsToAdd=new ArrayList<>();
  for (  PermanentView permanent : battlefield.values()) {
    if (!permanents.containsKey(permanent.getId())) {
      permanentsToAdd.add(permanent);
      changed=true;
    }
 else {
      MagePermanent p=permanents.get(permanent.getId());
      if (!changed) {
        int s1=permanent.getAttachments() == null ? 0 : permanent.getAttachments().size();
        int s2=p.getLinks().size();
        if (s1 != s2) {
          changed=true;
        }
      }
      permanents.get(permanent.getId()).update(permanent);
    }
  }
  addedArtifact=addedCreature=addedPermanent=false;
  int count=permanentsToAdd.size();
  for (  PermanentView permanent : permanentsToAdd) {
    addPermanent(permanent,count);
  }
  if (addedArtifact) {
    AudioManager.playAddArtifact();
  }
 else   if (addedCreature) {
    AudioManager.playSummon();
  }
 else   if (addedPermanent) {
    AudioManager.playAddPermanent();
  }
  removedCreature=false;
  for (Iterator<Entry<UUID,MagePermanent>> iterator=permanents.entrySet().iterator(); iterator.hasNext(); ) {
    Entry<UUID,MagePermanent> entry=iterator.next();
    if (!battlefield.containsKey(entry.getKey())) {
      removePermanent(entry.getKey(),1);
      iterator.remove();
      changed=true;
    }
  }
  if (removedCreature) {
    AudioManager.playDiedCreature();
  }
  if (changed) {
    this.battlefield=battlefield;
    sortLayout();
  }
}",0.9957418932197838
159473,"public void cleanUp(){
  for (  Component c : this.jPanel.getComponents()) {
    if (c instanceof Permanent || c instanceof MagePermanent) {
      this.jPanel.remove(c);
    }
  }
  permanents.clear();
  Plugins.getInstance().sortPermanents(uiComponentsList,permanents.values());
}","public void cleanUp(){
  for (  Component c : this.jPanel.getComponents()) {
    if (c instanceof Permanent || c instanceof MagePermanent) {
      this.jPanel.remove(c);
    }
  }
  permanents.clear();
  Plugins.getInstance().sortPermanents(uiComponentsList,permanents.values());
  this.bigCard=null;
}",0.9639794168096056
159474,"public void select(String message,GameView gameView,int messageId){
  updateGame(gameView);
  String messageToDisplay=message;
  Map<String,Serializable> options=null;
  for (  PlayerView playerView : gameView.getPlayers()) {
    if (playerView.getPlayerId().equals(playerId)) {
      if (playerView.isActive()) {
        options=new HashMap<String,Serializable>();
        options.put(""String_Node_Str"",true);
        messageToDisplay=message + ""String_Node_Str"";
      }
      if (playerView.getStatesSavedSize() > 0 && gameView.getStack().size() == 0) {
        feedbackPanel.allowUndo(playerView.getStatesSavedSize());
      }
      break;
    }
  }
  this.feedbackPanel.getFeedback(FeedbackMode.SELECT,messageToDisplay,gameView.getSpecial(),options,messageId);
  if (PhaseManager.getInstance().isSkip(gameView,message)) {
    this.feedbackPanel.doClick();
    logger.debug(new StringBuilder(""String_Node_Str"").append(message).append(""String_Node_Str"").append(messageId));
  }
 else {
    logger.debug(new StringBuilder(""String_Node_Str"").append(message).append(""String_Node_Str"").append(messageId));
  }
}","public void select(String message,GameView gameView,int messageId){
  updateGame(gameView);
  String messageToDisplay=message;
  Map<String,Serializable> options=null;
  for (  PlayerView playerView : gameView.getPlayers()) {
    if (playerView.getPlayerId().equals(playerId)) {
      if (playerView.isActive()) {
        options=new HashMap<>();
        options.put(""String_Node_Str"",true);
        messageToDisplay=message + ""String_Node_Str"";
      }
      if (playerView.getStatesSavedSize() > 0 && gameView.getStack().size() == 0) {
        feedbackPanel.allowUndo(playerView.getStatesSavedSize());
      }
      break;
    }
  }
  this.feedbackPanel.getFeedback(FeedbackMode.SELECT,messageToDisplay,gameView.getSpecial(),options,messageId);
  if (PhaseManager.getInstance().isSkip(gameView,message)) {
    this.feedbackPanel.doClick();
    logger.debug(new StringBuilder(""String_Node_Str"").append(message).append(""String_Node_Str"").append(messageId));
  }
 else {
    logger.debug(new StringBuilder(""String_Node_Str"").append(message).append(""String_Node_Str"").append(messageId));
  }
}",0.9913675601999092
159475,"private Map<String,JComponent> getUIComponents(JLayeredPane jLayeredPane){
  Map<String,JComponent> components=new HashMap<String,JComponent>();
  components.put(""String_Node_Str"",jSplitPane1);
  components.put(""String_Node_Str"",pnlBattlefield);
  components.put(""String_Node_Str"",jPanel3);
  components.put(""String_Node_Str"",handContainer);
  components.put(""String_Node_Str"",gameChatPanel);
  components.put(""String_Node_Str"",userChatPanel);
  components.put(""String_Node_Str"",jLayeredPane);
  components.put(""String_Node_Str"",this);
  return components;
}","private Map<String,JComponent> getUIComponents(JLayeredPane jLayeredPane){
  Map<String,JComponent> components=new HashMap<>();
  components.put(""String_Node_Str"",jSplitPane1);
  components.put(""String_Node_Str"",pnlBattlefield);
  components.put(""String_Node_Str"",jPanel3);
  components.put(""String_Node_Str"",handContainer);
  components.put(""String_Node_Str"",gameChatPanel);
  components.put(""String_Node_Str"",userChatPanel);
  components.put(""String_Node_Str"",jLayeredPane);
  components.put(""String_Node_Str"",this);
  return components;
}",0.9845313921747044
159476,"@SuppressWarnings(""String_Node_Str"") private void initComponents(){
  abilityPicker=new mage.client.components.ability.AbilityPicker();
  jSplitPane1=new javax.swing.JSplitPane();
  jSplitPane0=new javax.swing.JSplitPane();
  jPanel2=new javax.swing.JPanel();
  jPanel3=new javax.swing.JPanel();
  pnlGameInfo=new javax.swing.JPanel();
  lblPhase=new javax.swing.JLabel();
  txtPhase=new javax.swing.JLabel();
  lblStep=new javax.swing.JLabel();
  txtStep=new javax.swing.JLabel();
  lblTurn=new javax.swing.JLabel();
  txtTurn=new javax.swing.JLabel();
  txtActivePlayer=new javax.swing.JLabel();
  lblActivePlayer=new javax.swing.JLabel();
  txtPriority=new javax.swing.JLabel();
  lblPriority=new javax.swing.JLabel();
  feedbackPanel=new mage.client.game.FeedbackPanel();
  btnConcede=new javax.swing.JButton();
  btnEndTurn=new javax.swing.JButton();
  btnSwitchHands=new javax.swing.JButton();
  btnStopWatching=new javax.swing.JButton();
  bigCard=new mage.client.cards.BigCard();
  stack=new mage.client.cards.Cards();
  pnlReplay=new javax.swing.JPanel();
  btnStopReplay=new javax.swing.JButton();
  btnNextPlay=new javax.swing.JButton();
  btnPlay=new javax.swing.JButton();
  btnSkipForward=new javax.swing.JButton();
  btnPreviousPlay=new javax.swing.JButton();
  pnlBattlefield=new javax.swing.JPanel();
  gameChatPanel=new mage.client.chat.ChatPanel();
  gameChatPanel.useExtendedView(ChatPanel.VIEW_MODE.GAME);
  userChatPanel=new mage.client.chat.ChatPanel();
  userChatPanel.setParentChat(gameChatPanel);
  userChatPanel.useExtendedView(ChatPanel.VIEW_MODE.CHAT);
  userChatPanel.setChatType(ChatPanel.ChatType.GAME);
  gameChatPanel.setConnectedChat(userChatPanel);
  gameChatPanel.disableInput();
  gameChatPanel.setMinimumSize(new java.awt.Dimension(100,48));
  jSplitPane2=new javax.swing.JSplitPane();
  handContainer=new HandPanel();
  handCards=new HashMap<String,CardsView>();
  jSplitPane1.setBorder(null);
  jSplitPane1.setDividerSize(7);
  jSplitPane1.setResizeWeight(1.0);
  jSplitPane1.setOneTouchExpandable(true);
  jSplitPane1.setMinimumSize(new java.awt.Dimension(26,48));
  jSplitPane0.setBorder(null);
  jSplitPane0.setDividerSize(7);
  jSplitPane0.setResizeWeight(1.0);
  jSplitPane0.setOneTouchExpandable(true);
  restoreDividerLocations();
  pnlGameInfo.setOpaque(false);
  lblPhase.setLabelFor(txtPhase);
  lblPhase.setText(""String_Node_Str"");
  txtPhase.setText(""String_Node_Str"");
  txtPhase.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtPhase.setMinimumSize(new java.awt.Dimension(0,16));
  lblStep.setLabelFor(txtStep);
  lblStep.setText(""String_Node_Str"");
  txtStep.setText(""String_Node_Str"");
  txtStep.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtStep.setMinimumSize(new java.awt.Dimension(0,16));
  lblTurn.setLabelFor(txtTurn);
  lblTurn.setText(""String_Node_Str"");
  txtTurn.setText(""String_Node_Str"");
  txtTurn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtTurn.setMinimumSize(new java.awt.Dimension(0,16));
  txtActivePlayer.setText(""String_Node_Str"");
  txtActivePlayer.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtActivePlayer.setMinimumSize(new java.awt.Dimension(0,16));
  lblActivePlayer.setLabelFor(txtActivePlayer);
  lblActivePlayer.setText(""String_Node_Str"");
  txtPriority.setText(""String_Node_Str"");
  txtPriority.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtPriority.setMinimumSize(new java.awt.Dimension(0,16));
  lblPriority.setLabelFor(txtPriority);
  lblPriority.setText(""String_Node_Str"");
  feedbackPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0,0,0)));
  feedbackPanel.setMaximumSize(new java.awt.Dimension(208,121));
  feedbackPanel.setMinimumSize(new java.awt.Dimension(208,121));
  bigCard.setBorder(new LineBorder(Color.black,1,true));
  btnConcede.setText(""String_Node_Str"");
  btnConcede.setToolTipText(""String_Node_Str"");
  btnConcede.setFocusable(false);
  btnConcede.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      btnConcedeActionPerformed(null);
    }
  }
);
  btnEndTurn.setText(""String_Node_Str"");
  btnEndTurn.setToolTipText(""String_Node_Str"");
  btnEndTurn.setFocusable(false);
  btnEndTurn.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      btnEndTurnActionPerformed(null);
    }
  }
);
  int c=JComponent.WHEN_IN_FOCUSED_WINDOW;
  KeyStroke ks=KeyStroke.getKeyStroke(KeyEvent.VK_F4,0);
  this.getInputMap(c).put(ks,""String_Node_Str"");
  this.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      btnEndTurnActionPerformed(null);
    }
  }
);
  KeyStroke ks9=KeyStroke.getKeyStroke(KeyEvent.VK_F9,0);
  this.getInputMap(c).put(ks9,""String_Node_Str"");
  this.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      btnPassPriorityUntilNextYourTurnActionPerformed(actionEvent);
    }
  }
);
  KeyStroke ks2=KeyStroke.getKeyStroke(KeyEvent.VK_F2,0);
  this.getInputMap(c).put(ks2,""String_Node_Str"");
  this.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      if (feedbackPanel != null) {
        feedbackPanel.pressOKYesOrDone();
      }
    }
  }
);
  KeyStroke ks3=KeyStroke.getKeyStroke(KeyEvent.VK_F3,0);
  this.getInputMap(c).put(ks3,""String_Node_Str"");
  this.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      restorePriorityActionPerformed(actionEvent);
    }
  }
);
  KeyStroke ksAltE=KeyStroke.getKeyStroke(KeyEvent.VK_E,InputEvent.ALT_MASK);
  this.getInputMap(c).put(ksAltE,""String_Node_Str"");
  this.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      ActionCallback callback=Plugins.getInstance().getActionCallback();
      ((MageActionCallback)callback).enlargeCard();
    }
  }
);
  KeyStroke ksAltD=KeyStroke.getKeyStroke(KeyEvent.VK_D,InputEvent.ALT_MASK);
  this.getInputMap(c).put(ksAltD,""String_Node_Str"");
  this.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      imagePanelState=!imagePanelState;
      if (!imagePanelState) {
        jSplitPane0.resetToPreferredSizes();
        jSplitPane0.setDividerLocation(jSplitPane0.getSize().width - jSplitPane0.getInsets().right - jSplitPane0.getDividerSize()- 260);
      }
 else {
        jSplitPane0.setDividerLocation(1.0);
      }
    }
  }
);
  final BasicSplitPaneUI myUi=(BasicSplitPaneUI)jSplitPane0.getUI();
  final BasicSplitPaneDivider divider=myUi.getDivider();
  final JButton upArrowButton=(JButton)divider.getComponent(0);
  upArrowButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      PreferencesDialog.saveValue(PreferencesDialog.KEY_BIG_CARD_TOGGLED,""String_Node_Str"");
    }
  }
);
  final JButton downArrowButton=(JButton)divider.getComponent(1);
  downArrowButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      PreferencesDialog.saveValue(PreferencesDialog.KEY_BIG_CARD_TOGGLED,""String_Node_Str"");
    }
  }
);
  KeyStroke ksAltShiftReleased=KeyStroke.getKeyStroke(KeyEvent.VK_E,InputEvent.ALT_MASK,true);
  this.getInputMap(c).put(ksAltShiftReleased,""String_Node_Str"");
  this.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      ActionCallback callback=Plugins.getInstance().getActionCallback();
      ((MageActionCallback)callback).hideCard();
    }
  }
);
  btnSwitchHands.setText(""String_Node_Str"");
  btnSwitchHands.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      btnSwitchHandActionPerformed(null);
    }
  }
);
  btnStopWatching.setText(""String_Node_Str"");
  btnStopWatching.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnStopWatchingActionPerformed(evt);
    }
  }
);
  stack.setPreferredSize(new java.awt.Dimension(Config.dimensions.frameWidth,Config.dimensions.frameHeight + 25));
  stack.setBackgroundColor(new Color(0,0,0,0));
  btnStopReplay.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  btnStopReplay.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnStopReplayActionPerformed(evt);
    }
  }
);
  btnNextPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  btnNextPlay.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnNextPlayActionPerformed(evt);
    }
  }
);
  btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  btnPlay.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnPlayActionPerformed(evt);
    }
  }
);
  btnSkipForward.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  btnSkipForward.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnSkipForwardActionPerformed(evt);
    }
  }
);
  btnPreviousPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  btnPreviousPlay.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnPreviousPlayActionPerformed(evt);
    }
  }
);
  javax.swing.GroupLayout gl_pnlReplay=new javax.swing.GroupLayout(pnlReplay);
  pnlReplay.setLayout(gl_pnlReplay);
  gl_pnlReplay.setHorizontalGroup(gl_pnlReplay.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(gl_pnlReplay.createSequentialGroup().addComponent(btnPreviousPlay,javax.swing.GroupLayout.PREFERRED_SIZE,41,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnPlay,javax.swing.GroupLayout.PREFERRED_SIZE,35,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(btnStopReplay,javax.swing.GroupLayout.PREFERRED_SIZE,38,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnNextPlay,javax.swing.GroupLayout.PREFERRED_SIZE,36,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnSkipForward,javax.swing.GroupLayout.PREFERRED_SIZE,39,javax.swing.GroupLayout.PREFERRED_SIZE)));
  gl_pnlReplay.setVerticalGroup(gl_pnlReplay.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(btnSkipForward,0,0,Short.MAX_VALUE).addComponent(btnNextPlay,0,0,Short.MAX_VALUE).addComponent(btnStopReplay,0,0,Short.MAX_VALUE).addComponent(btnPlay,0,0,Short.MAX_VALUE).addComponent(btnPreviousPlay,javax.swing.GroupLayout.PREFERRED_SIZE,31,Short.MAX_VALUE));
  javax.swing.GroupLayout gl_pnlGameInfo=new javax.swing.GroupLayout(pnlGameInfo);
  pnlGameInfo.setLayout(gl_pnlGameInfo);
  gl_pnlGameInfo.setHorizontalGroup(gl_pnlGameInfo.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(gl_pnlGameInfo.createSequentialGroup().addGap(10,10,10).addComponent(btnConcede).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnEndTurn).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnSwitchHands).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnStopWatching).addContainerGap(62,Short.MAX_VALUE)).addGroup(gl_pnlGameInfo.createSequentialGroup().addContainerGap().addComponent(pnlReplay,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(51,Short.MAX_VALUE)));
  gl_pnlGameInfo.setVerticalGroup(gl_pnlGameInfo.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(gl_pnlGameInfo.createSequentialGroup().addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,164,Short.MAX_VALUE).addComponent(pnlReplay,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(gl_pnlGameInfo.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(btnConcede).addComponent(btnEndTurn).addComponent(btnSwitchHands).addComponent(btnStopWatching))));
  pnlBattlefield.setLayout(new java.awt.GridBagLayout());
  jPhases=new JPanel();
  jPhases.setBackground(new Color(0,0,0,0));
  jPhases.setLayout(null);
  jPhases.setPreferredSize(new Dimension(X_PHASE_WIDTH,450));
  String[] phases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String name : phases) {
    createPhaseButton(name);
  }
  int i=0;
  for (  String name : hoverButtons.keySet()) {
    HoverButton hoverButton=hoverButtons.get(name);
    hoverButton.setAlignmentX(LEFT_ALIGNMENT);
    hoverButton.setBounds(X_PHASE_WIDTH - 36,i * 36,36,36);
    jPhases.add(hoverButton);
    i++;
  }
  pnlReplay.setOpaque(false);
  HelperPanel helper=new HelperPanel();
  helper.setPreferredSize(new Dimension(100,90));
  feedbackPanel.setHelperPanel(helper);
  jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
  jSplitPane2.setResizeWeight(0.5);
  jSplitPane2.setLeftComponent(userChatPanel);
  jSplitPane2.setBottomComponent(gameChatPanel);
  phasesContainer=new JPanel();
  phasesContainer.setLayout(new RelativeLayout(RelativeLayout.Y_AXIS));
  phasesContainer.setBackground(new Color(0,0,0,0));
  Float ratio=new Float(1);
  JPanel empty1=new JPanel();
  empty1.setBackground(new Color(0,0,0,0));
  phasesContainer.add(empty1,ratio);
  phasesContainer.add(jPhases);
  JPanel empty2=new JPanel();
  empty2.setBackground(new Color(0,0,0,0));
  phasesContainer.add(empty2,ratio);
  javax.swing.GroupLayout gl_jPanel3=new javax.swing.GroupLayout(jPanel3);
  gl_jPanel3.setHorizontalGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addGroup(gl_jPanel3.createSequentialGroup().addGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addGroup(gl_jPanel3.createSequentialGroup().addGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addComponent(helper,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(handContainer,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).addComponent(stack,400,400,400)).addGap(0).addGroup(gl_jPanel3.createSequentialGroup().addComponent(pnlBattlefield,GroupLayout.DEFAULT_SIZE,200,Short.MAX_VALUE).addComponent(phasesContainer,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)))));
  gl_jPanel3.setVerticalGroup(gl_jPanel3.createParallelGroup(Alignment.TRAILING).addGroup(gl_jPanel3.createSequentialGroup().addGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addComponent(pnlBattlefield,GroupLayout.DEFAULT_SIZE,200,Short.MAX_VALUE).addComponent(phasesContainer,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addGroup(gl_jPanel3.createSequentialGroup().addGap(85).addComponent(stack,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addGroup(gl_jPanel3.createSequentialGroup().addComponent(helper,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addComponent(handContainer,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)))));
  jPanel3.setLayout(gl_jPanel3);
  jSplitPane1.setLeftComponent(jPanel3);
  jSplitPane1.setRightComponent(jSplitPane2);
  GridBagLayout gbl=new GridBagLayout();
  jPanel2.setLayout(gbl);
  GridBagConstraints gbc=new GridBagConstraints();
  gbc.fill=GridBagConstraints.BOTH;
  gbc.gridx=0;
  gbc.gridy=0;
  gbc.gridwidth=1;
  gbc.gridheight=4;
  gbc.weightx=1.0;
  gbc.weighty=1.0;
  gbl.setConstraints(bigCard,gbc);
  jPanel2.add(bigCard);
  GridBagConstraints gbc2=new GridBagConstraints();
  gbc2.fill=GridBagConstraints.NONE;
  gbc2.gridx=0;
  gbc2.gridy=GridBagConstraints.RELATIVE;
  gbc2.gridwidth=1;
  gbc2.gridheight=1;
  gbc2.weightx=0.0;
  gbc2.weighty=0.0;
  gbl.setConstraints(pnlGameInfo,gbc2);
  jPanel2.add(pnlGameInfo);
  jPanel2.setOpaque(false);
  jSplitPane0.setLeftComponent(jSplitPane1);
  jSplitPane0.setRightComponent(jPanel2);
  javax.swing.GroupLayout layout=new javax.swing.GroupLayout(this);
  this.setLayout(layout);
  layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jSplitPane0,javax.swing.GroupLayout.DEFAULT_SIZE,1078,Short.MAX_VALUE));
  layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jSplitPane0,javax.swing.GroupLayout.DEFAULT_SIZE,798,Short.MAX_VALUE));
}","@SuppressWarnings(""String_Node_Str"") private void initComponents(){
  abilityPicker=new mage.client.components.ability.AbilityPicker();
  jSplitPane1=new javax.swing.JSplitPane();
  jSplitPane0=new javax.swing.JSplitPane();
  jPanel2=new javax.swing.JPanel();
  jPanel3=new javax.swing.JPanel();
  pnlGameInfo=new javax.swing.JPanel();
  lblPhase=new javax.swing.JLabel();
  txtPhase=new javax.swing.JLabel();
  lblStep=new javax.swing.JLabel();
  txtStep=new javax.swing.JLabel();
  lblTurn=new javax.swing.JLabel();
  txtTurn=new javax.swing.JLabel();
  txtActivePlayer=new javax.swing.JLabel();
  lblActivePlayer=new javax.swing.JLabel();
  txtPriority=new javax.swing.JLabel();
  lblPriority=new javax.swing.JLabel();
  feedbackPanel=new mage.client.game.FeedbackPanel();
  btnConcede=new javax.swing.JButton();
  btnEndTurn=new javax.swing.JButton();
  btnSwitchHands=new javax.swing.JButton();
  btnStopWatching=new javax.swing.JButton();
  bigCard=new mage.client.cards.BigCard();
  stack=new mage.client.cards.Cards();
  pnlReplay=new javax.swing.JPanel();
  btnStopReplay=new javax.swing.JButton();
  btnNextPlay=new javax.swing.JButton();
  btnPlay=new javax.swing.JButton();
  btnSkipForward=new javax.swing.JButton();
  btnPreviousPlay=new javax.swing.JButton();
  pnlBattlefield=new javax.swing.JPanel();
  gameChatPanel=new mage.client.chat.ChatPanel();
  gameChatPanel.useExtendedView(ChatPanel.VIEW_MODE.GAME);
  userChatPanel=new mage.client.chat.ChatPanel();
  userChatPanel.setParentChat(gameChatPanel);
  userChatPanel.useExtendedView(ChatPanel.VIEW_MODE.CHAT);
  userChatPanel.setChatType(ChatPanel.ChatType.GAME);
  gameChatPanel.setConnectedChat(userChatPanel);
  gameChatPanel.disableInput();
  gameChatPanel.setMinimumSize(new java.awt.Dimension(100,48));
  jSplitPane2=new javax.swing.JSplitPane();
  handContainer=new HandPanel();
  handCards=new HashMap<>();
  jSplitPane1.setBorder(null);
  jSplitPane1.setDividerSize(7);
  jSplitPane1.setResizeWeight(1.0);
  jSplitPane1.setOneTouchExpandable(true);
  jSplitPane1.setMinimumSize(new java.awt.Dimension(26,48));
  jSplitPane0.setBorder(null);
  jSplitPane0.setDividerSize(7);
  jSplitPane0.setResizeWeight(1.0);
  jSplitPane0.setOneTouchExpandable(true);
  restoreDividerLocations();
  pnlGameInfo.setOpaque(false);
  lblPhase.setLabelFor(txtPhase);
  lblPhase.setText(""String_Node_Str"");
  txtPhase.setText(""String_Node_Str"");
  txtPhase.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtPhase.setMinimumSize(new java.awt.Dimension(0,16));
  lblStep.setLabelFor(txtStep);
  lblStep.setText(""String_Node_Str"");
  txtStep.setText(""String_Node_Str"");
  txtStep.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtStep.setMinimumSize(new java.awt.Dimension(0,16));
  lblTurn.setLabelFor(txtTurn);
  lblTurn.setText(""String_Node_Str"");
  txtTurn.setText(""String_Node_Str"");
  txtTurn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtTurn.setMinimumSize(new java.awt.Dimension(0,16));
  txtActivePlayer.setText(""String_Node_Str"");
  txtActivePlayer.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtActivePlayer.setMinimumSize(new java.awt.Dimension(0,16));
  lblActivePlayer.setLabelFor(txtActivePlayer);
  lblActivePlayer.setText(""String_Node_Str"");
  txtPriority.setText(""String_Node_Str"");
  txtPriority.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtPriority.setMinimumSize(new java.awt.Dimension(0,16));
  lblPriority.setLabelFor(txtPriority);
  lblPriority.setText(""String_Node_Str"");
  feedbackPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0,0,0)));
  feedbackPanel.setMaximumSize(new java.awt.Dimension(208,121));
  feedbackPanel.setMinimumSize(new java.awt.Dimension(208,121));
  bigCard.setBorder(new LineBorder(Color.black,1,true));
  btnConcede.setText(""String_Node_Str"");
  btnConcede.setToolTipText(""String_Node_Str"");
  btnConcede.setFocusable(false);
  btnConcede.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      btnConcedeActionPerformed(null);
    }
  }
);
  btnEndTurn.setText(""String_Node_Str"");
  btnEndTurn.setToolTipText(""String_Node_Str"");
  btnEndTurn.setFocusable(false);
  btnEndTurn.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      btnEndTurnActionPerformed(null);
    }
  }
);
  int c=JComponent.WHEN_IN_FOCUSED_WINDOW;
  KeyStroke ks=KeyStroke.getKeyStroke(KeyEvent.VK_F4,0);
  this.getInputMap(c).put(ks,""String_Node_Str"");
  this.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      btnEndTurnActionPerformed(null);
    }
  }
);
  KeyStroke ks9=KeyStroke.getKeyStroke(KeyEvent.VK_F9,0);
  this.getInputMap(c).put(ks9,""String_Node_Str"");
  this.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      btnPassPriorityUntilNextYourTurnActionPerformed(actionEvent);
    }
  }
);
  KeyStroke ks2=KeyStroke.getKeyStroke(KeyEvent.VK_F2,0);
  this.getInputMap(c).put(ks2,""String_Node_Str"");
  this.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      if (feedbackPanel != null) {
        feedbackPanel.pressOKYesOrDone();
      }
    }
  }
);
  KeyStroke ks3=KeyStroke.getKeyStroke(KeyEvent.VK_F3,0);
  this.getInputMap(c).put(ks3,""String_Node_Str"");
  this.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      restorePriorityActionPerformed(actionEvent);
    }
  }
);
  KeyStroke ksAltE=KeyStroke.getKeyStroke(KeyEvent.VK_E,InputEvent.ALT_MASK);
  this.getInputMap(c).put(ksAltE,""String_Node_Str"");
  this.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      ActionCallback callback=Plugins.getInstance().getActionCallback();
      ((MageActionCallback)callback).enlargeCard();
    }
  }
);
  KeyStroke ksAltD=KeyStroke.getKeyStroke(KeyEvent.VK_D,InputEvent.ALT_MASK);
  this.getInputMap(c).put(ksAltD,""String_Node_Str"");
  this.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      imagePanelState=!imagePanelState;
      if (!imagePanelState) {
        jSplitPane0.resetToPreferredSizes();
        jSplitPane0.setDividerLocation(jSplitPane0.getSize().width - jSplitPane0.getInsets().right - jSplitPane0.getDividerSize()- 260);
      }
 else {
        jSplitPane0.setDividerLocation(1.0);
      }
    }
  }
);
  final BasicSplitPaneUI myUi=(BasicSplitPaneUI)jSplitPane0.getUI();
  final BasicSplitPaneDivider divider=myUi.getDivider();
  final JButton upArrowButton=(JButton)divider.getComponent(0);
  upArrowButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      PreferencesDialog.saveValue(PreferencesDialog.KEY_BIG_CARD_TOGGLED,""String_Node_Str"");
    }
  }
);
  final JButton downArrowButton=(JButton)divider.getComponent(1);
  downArrowButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      PreferencesDialog.saveValue(PreferencesDialog.KEY_BIG_CARD_TOGGLED,""String_Node_Str"");
    }
  }
);
  KeyStroke ksAltShiftReleased=KeyStroke.getKeyStroke(KeyEvent.VK_E,InputEvent.ALT_MASK,true);
  this.getInputMap(c).put(ksAltShiftReleased,""String_Node_Str"");
  this.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      ActionCallback callback=Plugins.getInstance().getActionCallback();
      ((MageActionCallback)callback).hideCard();
    }
  }
);
  btnSwitchHands.setText(""String_Node_Str"");
  btnSwitchHands.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      btnSwitchHandActionPerformed(null);
    }
  }
);
  btnStopWatching.setText(""String_Node_Str"");
  btnStopWatching.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnStopWatchingActionPerformed(evt);
    }
  }
);
  stack.setPreferredSize(new java.awt.Dimension(Config.dimensions.frameWidth,Config.dimensions.frameHeight + 25));
  stack.setBackgroundColor(new Color(0,0,0,0));
  btnStopReplay.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  btnStopReplay.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnStopReplayActionPerformed(evt);
    }
  }
);
  btnNextPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  btnNextPlay.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnNextPlayActionPerformed(evt);
    }
  }
);
  btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  btnPlay.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnPlayActionPerformed(evt);
    }
  }
);
  btnSkipForward.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  btnSkipForward.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnSkipForwardActionPerformed(evt);
    }
  }
);
  btnPreviousPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  btnPreviousPlay.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnPreviousPlayActionPerformed(evt);
    }
  }
);
  javax.swing.GroupLayout gl_pnlReplay=new javax.swing.GroupLayout(pnlReplay);
  pnlReplay.setLayout(gl_pnlReplay);
  gl_pnlReplay.setHorizontalGroup(gl_pnlReplay.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(gl_pnlReplay.createSequentialGroup().addComponent(btnPreviousPlay,javax.swing.GroupLayout.PREFERRED_SIZE,41,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnPlay,javax.swing.GroupLayout.PREFERRED_SIZE,35,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(btnStopReplay,javax.swing.GroupLayout.PREFERRED_SIZE,38,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnNextPlay,javax.swing.GroupLayout.PREFERRED_SIZE,36,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnSkipForward,javax.swing.GroupLayout.PREFERRED_SIZE,39,javax.swing.GroupLayout.PREFERRED_SIZE)));
  gl_pnlReplay.setVerticalGroup(gl_pnlReplay.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(btnSkipForward,0,0,Short.MAX_VALUE).addComponent(btnNextPlay,0,0,Short.MAX_VALUE).addComponent(btnStopReplay,0,0,Short.MAX_VALUE).addComponent(btnPlay,0,0,Short.MAX_VALUE).addComponent(btnPreviousPlay,javax.swing.GroupLayout.PREFERRED_SIZE,31,Short.MAX_VALUE));
  javax.swing.GroupLayout gl_pnlGameInfo=new javax.swing.GroupLayout(pnlGameInfo);
  pnlGameInfo.setLayout(gl_pnlGameInfo);
  gl_pnlGameInfo.setHorizontalGroup(gl_pnlGameInfo.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(gl_pnlGameInfo.createSequentialGroup().addGap(10,10,10).addComponent(btnConcede).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnEndTurn).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnSwitchHands).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnStopWatching).addContainerGap(62,Short.MAX_VALUE)).addGroup(gl_pnlGameInfo.createSequentialGroup().addContainerGap().addComponent(pnlReplay,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(51,Short.MAX_VALUE)));
  gl_pnlGameInfo.setVerticalGroup(gl_pnlGameInfo.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(gl_pnlGameInfo.createSequentialGroup().addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,164,Short.MAX_VALUE).addComponent(pnlReplay,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(gl_pnlGameInfo.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(btnConcede).addComponent(btnEndTurn).addComponent(btnSwitchHands).addComponent(btnStopWatching))));
  pnlBattlefield.setLayout(new java.awt.GridBagLayout());
  jPhases=new JPanel();
  jPhases.setBackground(new Color(0,0,0,0));
  jPhases.setLayout(null);
  jPhases.setPreferredSize(new Dimension(X_PHASE_WIDTH,450));
  String[] phases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String name : phases) {
    createPhaseButton(name);
  }
  int i=0;
  for (  String name : hoverButtons.keySet()) {
    HoverButton hoverButton=hoverButtons.get(name);
    hoverButton.setAlignmentX(LEFT_ALIGNMENT);
    hoverButton.setBounds(X_PHASE_WIDTH - 36,i * 36,36,36);
    jPhases.add(hoverButton);
    i++;
  }
  pnlReplay.setOpaque(false);
  HelperPanel helper=new HelperPanel();
  helper.setPreferredSize(new Dimension(100,90));
  feedbackPanel.setHelperPanel(helper);
  jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
  jSplitPane2.setResizeWeight(0.5);
  jSplitPane2.setLeftComponent(userChatPanel);
  jSplitPane2.setBottomComponent(gameChatPanel);
  phasesContainer=new JPanel();
  phasesContainer.setLayout(new RelativeLayout(RelativeLayout.Y_AXIS));
  phasesContainer.setBackground(new Color(0,0,0,0));
  Float ratio=new Float(1);
  JPanel empty1=new JPanel();
  empty1.setBackground(new Color(0,0,0,0));
  phasesContainer.add(empty1,ratio);
  phasesContainer.add(jPhases);
  JPanel empty2=new JPanel();
  empty2.setBackground(new Color(0,0,0,0));
  phasesContainer.add(empty2,ratio);
  javax.swing.GroupLayout gl_jPanel3=new javax.swing.GroupLayout(jPanel3);
  gl_jPanel3.setHorizontalGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addGroup(gl_jPanel3.createSequentialGroup().addGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addGroup(gl_jPanel3.createSequentialGroup().addGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addComponent(helper,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(handContainer,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).addComponent(stack,400,400,400)).addGap(0).addGroup(gl_jPanel3.createSequentialGroup().addComponent(pnlBattlefield,GroupLayout.DEFAULT_SIZE,200,Short.MAX_VALUE).addComponent(phasesContainer,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)))));
  gl_jPanel3.setVerticalGroup(gl_jPanel3.createParallelGroup(Alignment.TRAILING).addGroup(gl_jPanel3.createSequentialGroup().addGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addComponent(pnlBattlefield,GroupLayout.DEFAULT_SIZE,200,Short.MAX_VALUE).addComponent(phasesContainer,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addGroup(gl_jPanel3.createSequentialGroup().addGap(85).addComponent(stack,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addGroup(gl_jPanel3.createSequentialGroup().addComponent(helper,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addComponent(handContainer,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)))));
  jPanel3.setLayout(gl_jPanel3);
  jSplitPane1.setLeftComponent(jPanel3);
  jSplitPane1.setRightComponent(jSplitPane2);
  GridBagLayout gbl=new GridBagLayout();
  jPanel2.setLayout(gbl);
  GridBagConstraints gbc=new GridBagConstraints();
  gbc.fill=GridBagConstraints.BOTH;
  gbc.gridx=0;
  gbc.gridy=0;
  gbc.gridwidth=1;
  gbc.gridheight=4;
  gbc.weightx=1.0;
  gbc.weighty=1.0;
  gbl.setConstraints(bigCard,gbc);
  jPanel2.add(bigCard);
  GridBagConstraints gbc2=new GridBagConstraints();
  gbc2.fill=GridBagConstraints.NONE;
  gbc2.gridx=0;
  gbc2.gridy=GridBagConstraints.RELATIVE;
  gbc2.gridwidth=1;
  gbc2.gridheight=1;
  gbc2.weightx=0.0;
  gbc2.weighty=0.0;
  gbl.setConstraints(pnlGameInfo,gbc2);
  jPanel2.add(pnlGameInfo);
  jPanel2.setOpaque(false);
  jSplitPane0.setLeftComponent(jSplitPane1);
  jSplitPane0.setRightComponent(jPanel2);
  javax.swing.GroupLayout layout=new javax.swing.GroupLayout(this);
  this.setLayout(layout);
  layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jSplitPane0,javax.swing.GroupLayout.DEFAULT_SIZE,1078,Short.MAX_VALUE));
  layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jSplitPane0,javax.swing.GroupLayout.DEFAULT_SIZE,798,Short.MAX_VALUE));
}",0.9995495749113226
159477,"private void createPhaseButton(String name){
  if (hoverButtons == null) {
    hoverButtons=new LinkedHashMap<String,HoverButton>();
  }
  Rectangle rect=new Rectangle(36,36);
  HoverButton button=new HoverButton(""String_Node_Str"",ImageManagerImpl.getInstance().getPhaseImage(name),rect);
  button.setToolTipText(name.replaceAll(""String_Node_Str"",""String_Node_Str""));
  button.setPreferredSize(new Dimension(36,36));
  hoverButtons.put(name,button);
}","private void createPhaseButton(String name){
  if (hoverButtons == null) {
    hoverButtons=new LinkedHashMap<>();
  }
  Rectangle rect=new Rectangle(36,36);
  HoverButton button=new HoverButton(""String_Node_Str"",ImageManagerImpl.getInstance().getPhaseImage(name),rect);
  button.setToolTipText(name.replaceAll(""String_Node_Str"",""String_Node_Str""));
  button.setPreferredSize(new Dimension(36,36));
  hoverButtons.put(name,button);
}",0.9796380090497736
159478,"public void cleanUp(){
  MageFrame.removeGame(gameId);
  saveDividerLocations();
  this.gameChatPanel.disconnect();
  this.userChatPanel.disconnect();
  this.removeListener();
  this.handContainer.cleanUp();
  this.stack.cleanUp();
  for (  Map.Entry<UUID,PlayAreaPanel> playAreaPanelEntry : players.entrySet()) {
    playAreaPanelEntry.getValue().CleanUp();
  }
  this.players.clear();
  jLayeredPane.remove(abilityPicker);
  this.abilityPicker.cleanUp();
  jLayeredPane.remove(DialogManager.getManager(gameId));
  DialogManager.removeGame(gameId);
  if (pickNumber != null) {
    pickNumber.removeDialog();
  }
  for (  ExileZoneDialog exileDialog : exiles.values()) {
    exileDialog.cleanUp();
    exileDialog.removeDialog();
  }
  for (  ShowCardsDialog revealDialog : revealed.values()) {
    revealDialog.cleanUp();
    revealDialog.removeDialog();
  }
  for (  ShowCardsDialog lookedAtDialog : lookedAt.values()) {
    lookedAtDialog.cleanUp();
    lookedAtDialog.removeDialog();
  }
  for (  ShowCardsDialog pickTargetDialog : pickTarget) {
    pickTargetDialog.cleanUp();
    pickTargetDialog.removeDialog();
  }
  try {
    Component popupContainer=MageFrame.getUI().getComponent(MageComponents.POPUP_CONTAINER);
    popupContainer.setVisible(false);
  }
 catch (  InterruptedException ex) {
    logger.fatal(""String_Node_Str"",ex);
  }
}","public void cleanUp(){
  MageFrame.removeGame(gameId);
  saveDividerLocations();
  this.gameChatPanel.disconnect();
  this.userChatPanel.disconnect();
  this.removeListener();
  this.handContainer.cleanUp();
  this.stack.cleanUp();
  for (  Map.Entry<UUID,PlayAreaPanel> playAreaPanelEntry : players.entrySet()) {
    playAreaPanelEntry.getValue().CleanUp();
  }
  this.players.clear();
  jLayeredPane.remove(abilityPicker);
  this.abilityPicker.cleanUp();
  jLayeredPane.remove(DialogManager.getManager(gameId));
  DialogManager.removeGame(gameId);
  if (pickNumber != null) {
    pickNumber.removeDialog();
  }
  for (  ExileZoneDialog exileDialog : exiles.values()) {
    exileDialog.cleanUp();
    exileDialog.removeDialog();
  }
  for (  ShowCardsDialog revealDialog : revealed.values()) {
    revealDialog.cleanUp();
    revealDialog.removeDialog();
  }
  for (  ShowCardsDialog lookedAtDialog : lookedAt.values()) {
    lookedAtDialog.cleanUp();
    lookedAtDialog.removeDialog();
  }
  for (  ShowCardsDialog pickTargetDialog : pickTarget) {
    pickTargetDialog.cleanUp();
    pickTargetDialog.removeDialog();
  }
  try {
    Component popupContainer=MageFrame.getUI().getComponent(MageComponents.POPUP_CONTAINER);
    popupContainer.setVisible(false);
  }
 catch (  InterruptedException ex) {
    logger.fatal(""String_Node_Str"",ex);
  }
  jPanel2.remove(bigCard);
  this.bigCard=null;
}",0.9825072886297376
159479,"private void drawArrowsForTargets(TransferData data,Point parentPoint){
  List<UUID> targets=data.card.getTargets();
  if (targets == null) {
    return;
  }
  Point me=new Point(data.locationOnScreen);
  me.translate(-parentPoint.x,-parentPoint.y);
  for (  UUID uuid : targets) {
    PlayAreaPanel p=MageFrame.getGame(data.gameId).getPlayers().get(uuid);
    if (p != null) {
      Point target=p.getLocationOnScreen();
      target.translate(-parentPoint.x,-parentPoint.y);
      ArrowBuilder.getBuilder().addArrow(data.gameId,(int)me.getX() + 35,(int)me.getY(),(int)target.getX() + 40,(int)target.getY() - 40,Color.red,ArrowBuilder.Type.TARGET);
      continue;
    }
    for (    PlayAreaPanel panel : MageFrame.getGame(data.gameId).getPlayers().values()) {
      MagePermanent permanent=panel.getBattlefieldPanel().getPermanents().get(uuid);
      if (permanent != null) {
        Point target=permanent.getLocationOnScreen();
        target.translate(-parentPoint.x,-parentPoint.y);
        ArrowBuilder.getBuilder().addArrow(data.gameId,(int)me.getX() + 35,(int)me.getY(),(int)target.getX() + 40,(int)target.getY() + 10,Color.red,ArrowBuilder.Type.TARGET);
        continue;
      }
      PlayerView view=panel.getPlayerPanel().getPlayer();
      if (view != null) {
        SimpleCardsView graveyard=view.getGraveyard();
        if (graveyard.containsKey(uuid)) {
          p=MageFrame.getGame(data.gameId).getPlayers().get(view.getPlayerId());
          if (p != null) {
            Point target=p.getLocationOnScreen();
            target.translate(-parentPoint.x,-parentPoint.y);
            int yOffset=p.isSmallMode() ? (PlayAreaPanel.PANEL_HEIGHT - PlayAreaPanel.PANEL_HEIGHT_SMALL) : 0;
            ArrowBuilder.getBuilder().addArrow(data.gameId,(int)me.getX() + 35,(int)me.getY(),(int)target.getX() + 15,(int)target.getY() + 145 - yOffset,Color.red,ArrowBuilder.Type.TARGET);
            continue;
          }
        }
      }
    }
  }
}","private void drawArrowsForTargets(TransferData data,Point parentPoint){
  List<UUID> targets=data.card.getTargets();
  if (targets == null) {
    return;
  }
  Point me=new Point(data.locationOnScreen);
  me.translate(-parentPoint.x,-parentPoint.y);
  for (  UUID uuid : targets) {
    PlayAreaPanel p=MageFrame.getGame(data.gameId).getPlayers().get(uuid);
    if (p != null) {
      Point target=p.getLocationOnScreen();
      target.translate(-parentPoint.x,-parentPoint.y);
      ArrowBuilder.getBuilder().addArrow(data.gameId,(int)me.getX() + 35,(int)me.getY(),(int)target.getX() + 40,(int)target.getY() - 40,Color.red,ArrowBuilder.Type.TARGET);
      continue;
    }
    for (    PlayAreaPanel panel : MageFrame.getGame(data.gameId).getPlayers().values()) {
      MagePermanent permanent=panel.getBattlefieldPanel().getPermanents().get(uuid);
      if (permanent != null) {
        Point target=permanent.getLocationOnScreen();
        target.translate(-parentPoint.x,-parentPoint.y);
        ArrowBuilder.getBuilder().addArrow(data.gameId,(int)me.getX() + 35,(int)me.getY(),(int)target.getX() + 40,(int)target.getY() + 10,Color.red,ArrowBuilder.Type.TARGET);
        continue;
      }
      PlayerView view=panel.getPlayerPanel().getPlayer();
      if (view != null) {
        SimpleCardsView graveyard=view.getGraveyard();
        if (graveyard.containsKey(uuid)) {
          p=MageFrame.getGame(data.gameId).getPlayers().get(view.getPlayerId());
          if (p != null) {
            Point target=p.getLocationOnScreen();
            target.translate(-parentPoint.x,-parentPoint.y);
            int yOffset=p.isSmallMode() ? (PlayAreaPanel.PANEL_HEIGHT - PlayAreaPanel.PANEL_HEIGHT_SMALL) : 0;
            ArrowBuilder.getBuilder().addArrow(data.gameId,(int)me.getX() + 35,(int)me.getY(),(int)target.getX() + 15,(int)target.getY() + 145 - yOffset,Color.red,ArrowBuilder.Type.TARGET);
          }
        }
      }
    }
  }
}",0.994344473007712
159480,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == EventType.ZONE_CHANGE) {
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    if (zEvent.getFromZone() == Zone.BATTLEFIELD && zEvent.getToZone() == Zone.GRAVEYARD) {
      Permanent permanent=game.getPermanent(event.getTargetId());
      if (filter.match(permanent,game)) {
        if (setTargetPointer) {
          for (          Effect effect : this.getEffects()) {
            effect.setTargetPointer(new FixedTarget(event.getSourceId()));
          }
        }
        return true;
      }
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == EventType.ZONE_CHANGE) {
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    if (zEvent.getFromZone() == Zone.BATTLEFIELD && zEvent.getToZone() == Zone.GRAVEYARD) {
      Permanent permanent=game.getPermanent(event.getTargetId());
      if (filter.match(permanent,this.getSourceId(),this.getControllerId(),game)) {
        if (setTargetPointer) {
          for (          Effect effect : this.getEffects()) {
            effect.setTargetPointer(new FixedTarget(event.getSourceId()));
          }
        }
        return true;
      }
    }
  }
  return false;
}",0.7165354330708661
159481,"@Override public boolean apply(Game game,Ability source){
  boolean result=true;
  for (  UUID targetId : targetPointer.getTargets(game,source)) {
switch (game.getState().getZone(targetId)) {
case BATTLEFIELD:
      Permanent permanent=game.getPermanent(targetId);
    if (permanent != null) {
      permanent.moveToZone(Zone.HAND,source.getSourceId(),game,false);
    }
 else {
      result=false;
    }
  break;
case GRAVEYARD:
Card card=game.getCard(targetId);
if (card != null) {
card.moveToZone(Zone.HAND,source.getSourceId(),game,true);
}
 else {
result=false;
}
break;
case EXILED:
card=game.getCard(targetId);
if (card != null) {
card.moveToZone(Zone.HAND,source.getSourceId(),game,true);
}
 else {
result=false;
}
break;
}
}
return result;
}","@Override public boolean apply(Game game,Ability source){
  boolean result=true;
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  for (  UUID targetId : targetPointer.getTargets(game,source)) {
switch (game.getState().getZone(targetId)) {
case BATTLEFIELD:
      Permanent permanent=game.getPermanent(targetId);
    if (permanent != null) {
      controller.moveCardToHandWithInfo((Card)permanent,source.getSourceId(),game,Zone.BATTLEFIELD);
    }
 else {
      result=false;
    }
  break;
case GRAVEYARD:
Card card=game.getCard(targetId);
if (card != null) {
controller.moveCardToHandWithInfo(card,source.getSourceId(),game,Zone.GRAVEYARD);
}
 else {
result=false;
}
break;
case EXILED:
card=game.getCard(targetId);
if (card != null) {
controller.moveCardToHandWithInfo(card,source.getSourceId(),game,Zone.EXILED);
}
 else {
result=false;
}
break;
}
}
return result;
}",0.7287833827893175
159482,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getFirstTarget());
  if (player != null) {
    player.revealCards(""String_Node_Str"",player.getHand(),game);
    Player you=game.getPlayer(source.getControllerId());
    if (you != null) {
      TargetCard target=new TargetCard(Zone.HAND,filter);
      target.setRequired(true);
      if (target.canChoose(source.getControllerId(),game) && you.chooseTarget(outcome,player.getHand(),target,source,game)) {
        Card card=player.getHand().get(target.getFirstTarget(),game);
        if (card != null) {
          return player.discard(card,source,game);
        }
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getFirstTarget());
  if (player != null) {
    player.revealCards(""String_Node_Str"",player.getHand(),game);
    Player you=game.getPlayer(source.getControllerId());
    if (you != null) {
      TargetCard target=new TargetCard(Zone.HAND,filter);
      target.setRequired(true);
      if (target.canChoose(source.getControllerId(),player.getId(),game) && you.chooseTarget(outcome,player.getHand(),target,source,game)) {
        Card card=player.getHand().get(target.getFirstTarget(),game);
        if (card != null) {
          return player.discard(card,source,game);
        }
      }
    }
  }
  return false;
}",0.9893086243763364
159483,"@Override public void drawCards(SortSetting sortSetting,boolean piles){
  int maxWidth=this.getParent().getWidth();
  int numColumns=maxWidth / Config.dimensions.frameWidth;
  int curColumn=0;
  int curRow=0;
  if (cards.size() > 0) {
    Rectangle rectangle=new Rectangle(Config.dimensions.frameWidth,Config.dimensions.frameHeight);
    List<MageCard> sortedCards=new ArrayList<MageCard>(cards.values());
switch (sortSetting.getSortBy()) {
case NAME:
      Collections.sort(sortedCards,new CardNameComparator());
    break;
case RARITY:
  Collections.sort(sortedCards,new CardRarityComparator());
break;
case COLOR:
Collections.sort(sortedCards,new CardColorComparator());
break;
case COLOR_DETAILED:
Collections.sort(sortedCards,new CardColorDetailedComparator());
break;
case CASTING_COST:
Collections.sort(sortedCards,new CardCostComparator());
break;
}
MageCard lastCard=null;
for (MageCard cardImg : sortedCards) {
if (piles) {
if (lastCard == null) {
lastCard=cardImg;
}
switch (sortSetting.getSortBy()) {
case NAME:
if (!cardImg.getOriginal().getName().equals(lastCard.getOriginal().getName())) {
curColumn++;
curRow=0;
}
break;
case RARITY:
if (!cardImg.getOriginal().getRarity().equals(lastCard.getOriginal().getRarity())) {
curColumn++;
curRow=0;
}
break;
case COLOR:
if (cardImg.getOriginal().getColor().compareTo(lastCard.getOriginal().getColor()) != 0) {
curColumn++;
curRow=0;
}
break;
case COLOR_DETAILED:
if (cardImg.getOriginal().getColor().hashCode() != lastCard.getOriginal().getColor().hashCode()) {
curColumn++;
curRow=0;
}
break;
case CASTING_COST:
if (cardImg.getOriginal().getConvertedManaCost() != lastCard.getOriginal().getConvertedManaCost()) {
curColumn++;
curRow=0;
}
break;
}
rectangle.setLocation(curColumn * Config.dimensions.frameWidth,curRow * 20);
cardImg.setBounds(rectangle);
cardImg.setCardBounds(rectangle.x,rectangle.y,Config.dimensions.frameWidth,Config.dimensions.frameHeight);
moveToFront(cardImg);
curRow++;
lastCard=cardImg;
}
 else {
rectangle.setLocation(curColumn * Config.dimensions.frameWidth,curRow * 20);
cardImg.setBounds(rectangle);
cardImg.setCardBounds(rectangle.x,rectangle.y,Config.dimensions.frameWidth,Config.dimensions.frameHeight);
moveToFront(cardImg);
curColumn++;
if (curColumn == numColumns) {
curColumn=0;
curRow++;
}
}
}
}
resizeArea();
revalidate();
repaint();
}","@Override public void drawCards(SortSetting sortSetting){
  int maxWidth=this.getParent().getWidth();
  int numColumns=maxWidth / Config.dimensions.frameWidth;
  int curColumn=0;
  int curRow=0;
  if (cards.size() > 0) {
    Rectangle rectangle=new Rectangle(Config.dimensions.frameWidth,Config.dimensions.frameHeight);
    List<MageCard> sortedCards=new ArrayList<MageCard>(cards.values());
switch (sortSetting.getSortBy()) {
case NAME:
      Collections.sort(sortedCards,new CardNameComparator());
    break;
case RARITY:
  Collections.sort(sortedCards,new CardRarityComparator());
break;
case COLOR:
Collections.sort(sortedCards,new CardColorComparator());
break;
case COLOR_DETAILED:
Collections.sort(sortedCards,new CardColorDetailedComparator());
break;
case CASTING_COST:
Collections.sort(sortedCards,new CardCostComparator());
break;
}
MageCard lastCard=null;
for (MageCard cardImg : sortedCards) {
if (sortSetting.isPilesToggle()) {
if (lastCard == null) {
lastCard=cardImg;
}
switch (sortSetting.getSortBy()) {
case NAME:
if (!cardImg.getOriginal().getName().equals(lastCard.getOriginal().getName())) {
curColumn++;
curRow=0;
}
break;
case RARITY:
if (!cardImg.getOriginal().getRarity().equals(lastCard.getOriginal().getRarity())) {
curColumn++;
curRow=0;
}
break;
case COLOR:
if (cardImg.getOriginal().getColor().compareTo(lastCard.getOriginal().getColor()) != 0) {
curColumn++;
curRow=0;
}
break;
case COLOR_DETAILED:
if (cardImg.getOriginal().getColor().hashCode() != lastCard.getOriginal().getColor().hashCode()) {
curColumn++;
curRow=0;
}
break;
case CASTING_COST:
if (cardImg.getOriginal().getConvertedManaCost() != lastCard.getOriginal().getConvertedManaCost()) {
curColumn++;
curRow=0;
}
break;
}
rectangle.setLocation(curColumn * Config.dimensions.frameWidth,curRow * 20);
cardImg.setBounds(rectangle);
cardImg.setCardBounds(rectangle.x,rectangle.y,Config.dimensions.frameWidth,Config.dimensions.frameHeight);
moveToFront(cardImg);
curRow++;
lastCard=cardImg;
}
 else {
rectangle.setLocation(curColumn * Config.dimensions.frameWidth,curRow * 20);
cardImg.setBounds(rectangle);
cardImg.setCardBounds(rectangle.x,rectangle.y,Config.dimensions.frameWidth,Config.dimensions.frameHeight);
moveToFront(cardImg);
curColumn++;
if (curColumn == numColumns) {
curColumn=0;
curRow++;
}
}
}
}
resizeArea();
revalidate();
repaint();
}",0.990154109589041
159484,"@Override public void loadCards(CardsView showCards,SortSetting sortSetting,boolean piles,BigCard bigCard,UUID gameId,boolean merge){
  boolean drawImage=showCards.size() < MAX_IMAGES;
  this.bigCard=bigCard;
  this.gameId=gameId;
  if (merge) {
    for (    CardView card : showCards.values()) {
      if (!cards.containsKey(card.getId())) {
        addCard(card,bigCard,gameId,drawImage);
      }
    }
    for (Iterator<Entry<UUID,MageCard>> i=cards.entrySet().iterator(); i.hasNext(); ) {
      Entry<UUID,MageCard> entry=i.next();
      if (!showCards.containsKey(entry.getKey())) {
        removeCardImg(entry.getKey());
        i.remove();
      }
    }
  }
 else {
    this.clearCards();
    for (    CardView card : showCards.values()) {
      addCard(card,bigCard,gameId,drawImage);
    }
  }
  System.gc();
  drawCards(sortSetting,piles);
  this.setVisible(true);
}","@Override public void loadCards(CardsView showCards,SortSetting sortSetting,BigCard bigCard,UUID gameId,boolean merge){
  boolean drawImage=showCards.size() < MAX_IMAGES;
  this.bigCard=bigCard;
  this.gameId=gameId;
  if (merge) {
    for (    CardView card : showCards.values()) {
      if (!cards.containsKey(card.getId())) {
        addCard(card,bigCard,gameId,drawImage);
      }
    }
    for (Iterator<Entry<UUID,MageCard>> i=cards.entrySet().iterator(); i.hasNext(); ) {
      Entry<UUID,MageCard> entry=i.next();
      if (!showCards.containsKey(entry.getKey())) {
        removeCardImg(entry.getKey());
        i.remove();
      }
    }
  }
 else {
    this.clearCards();
    for (    CardView card : showCards.values()) {
      addCard(card,bigCard,gameId,drawImage);
    }
  }
  drawCards(sortSetting);
  this.setVisible(true);
}",0.9563191613278976
159485,"private void redrawCards(){
  if (cards == null) {
    cards=new CardsView();
  }
  currentView.loadCards(cards,sortSetting,false,bigCard,gameId);
}","private void redrawCards(){
  if (cards == null) {
    cards=new CardsView();
  }
  currentView.loadCards(cards,sortSetting,bigCard,gameId);
}",0.9793103448275862
159486,"public void drawCards(SortSetting sortSetting){
  drawCards(sortSetting,false);
}","@Override public void drawCards(SortSetting sortSetting){
  int maxWidth=this.getParent().getWidth();
  int numColumns=maxWidth / Config.dimensions.frameWidth;
  int curColumn=0;
  int curRow=0;
  int landCount=0;
  int creatureCount=0;
  cardArea.removeAll();
  if (cards != null && cards.size() > 0) {
    Rectangle rectangle=new Rectangle(Config.dimensions.frameWidth,Config.dimensions.frameHeight);
    List<CardView> sortedCards=new ArrayList<CardView>(cards.values());
switch (sortSetting.getSortBy()) {
case NAME:
      Collections.sort(sortedCards,new CardViewNameComparator());
    break;
case RARITY:
  Collections.sort(sortedCards,new CardViewRarityComparator());
break;
case COLOR:
Collections.sort(sortedCards,new CardViewColorComparator());
break;
case COLOR_DETAILED:
Collections.sort(sortedCards,new CardViewColorDetailedComparator());
break;
case CASTING_COST:
Collections.sort(sortedCards,new CardViewCostComparator());
break;
}
CardView lastCard=null;
for (CardView card : sortedCards) {
if (sortSetting.isPilesToggle()) {
if (lastCard == null) {
lastCard=card;
}
switch (sortSetting.getSortBy()) {
case NAME:
if (!card.getName().equals(lastCard.getName())) {
curColumn++;
curRow=0;
}
break;
case RARITY:
if (!card.getRarity().equals(lastCard.getRarity())) {
curColumn++;
curRow=0;
}
break;
case COLOR:
if (card.getColor().compareTo(lastCard.getColor()) != 0) {
curColumn++;
curRow=0;
}
break;
case COLOR_DETAILED:
if (card.getColor().hashCode() != lastCard.getColor().hashCode()) {
curColumn++;
curRow=0;
}
break;
case CASTING_COST:
if (card.getConvertedManaCost() != lastCard.getConvertedManaCost()) {
curColumn++;
curRow=0;
}
break;
}
rectangle.setLocation(curColumn * Config.dimensions.frameWidth,curRow * 20);
addCard(card,bigCard,gameId,rectangle);
if (card.getCardTypes().contains(CardType.LAND)) {
landCount++;
}
if (card.getCardTypes().contains(CardType.CREATURE)) {
creatureCount++;
}
curRow++;
lastCard=card;
}
 else {
rectangle.setLocation(curColumn * Config.dimensions.frameWidth,curRow * 20);
addCard(card,bigCard,gameId,rectangle);
if (card.getCardTypes().contains(CardType.LAND)) {
landCount++;
}
if (card.getCardTypes().contains(CardType.CREATURE)) {
creatureCount++;
}
curColumn++;
if (curColumn == numColumns) {
curColumn=0;
curRow++;
}
}
}
}
int count=cards != null ? cards.size() : 0;
this.lblCount.setText(""String_Node_Str"" + Integer.toString(count));
this.lblCreatureCount.setText(""String_Node_Str"" + Integer.toString(creatureCount));
this.lblLandCount.setText(""String_Node_Str"" + Integer.toString(landCount));
cardArea.setPreferredSize(new Dimension(Config.dimensions.frameWidth,Config.dimensions.frameHeight + 200));
cardArea.revalidate();
this.revalidate();
this.repaint();
this.setVisible(true);
}",0.046742209631728
159487,"@Override public void loadCards(CardsView showCards,SortSetting sortSetting,boolean piles,BigCard bigCard,UUID gameId,boolean merge){
  cards=showCards;
  this.bigCard=bigCard;
  this.gameId=gameId;
  drawCards(sortSetting);
}","@Override public void loadCards(CardsView showCards,SortSetting sortSetting,BigCard bigCard,UUID gameId,boolean merge){
  cards=showCards;
  this.bigCard=bigCard;
  this.gameId=gameId;
  drawCards(sortSetting);
}",0.9680365296803652
159488,"private void cbSortByActionPerformed(java.awt.event.ActionEvent evt){
  sortSetting.setSortBy((SortBy)cbSortBy.getSelectedItem());
  drawCards(sortSetting,chkPiles.isSelected());
}","private void cbSortByActionPerformed(java.awt.event.ActionEvent evt){
  sortSetting.setSortBy((SortBy)cbSortBy.getSelectedItem());
  drawCards(sortSetting);
}",0.9349112426035504
159489,"private void chkPilesActionPerformed(java.awt.event.ActionEvent evt){
  drawCards(sortSetting,chkPiles.isSelected());
  PreferencesDialog.saveValue(PreferencesDialog.KEY_DRAFT_PILES_TOGGLE,(chkPiles.isSelected() ? ""String_Node_Str"" : ""String_Node_Str""));
}","private void chkPilesActionPerformed(java.awt.event.ActionEvent evt){
  sortSetting.setPilesToggle(chkPiles.isSelected());
  drawCards(sortSetting);
}",0.6157635467980296
159490,"void drawCards(SortSetting sortSetting,boolean piles);",void drawCards(SortSetting sortSetting);,0.851063829787234
159491,"void loadCards(CardsView showCards,SortSetting sortSetting,boolean piles,BigCard bigCard,UUID gameId,boolean merge);","void loadCards(CardsView showCards,SortSetting sortSetting,BigCard bigCard,UUID gameId,boolean merge);",0.9357798165137616
159492,"@Override public void componentMoved(ComponentEvent e){
  if (cbSortBy.getSelectedItem() instanceof SortBy) {
    this.currentView.drawCards(sortSetting,chkPiles.isSelected());
  }
}","@Override public void componentMoved(ComponentEvent e){
  if (cbSortBy.getSelectedItem() instanceof SortBy) {
    this.currentView.drawCards(sortSetting);
  }
}",0.935672514619883
159493,"@Override public void componentHidden(ComponentEvent e){
  if (cbSortBy.getSelectedItem() instanceof SortBy) {
    this.currentView.drawCards(sortSetting,chkPiles.isSelected());
  }
}","@Override public void componentHidden(ComponentEvent e){
  if (cbSortBy.getSelectedItem() instanceof SortBy) {
    this.currentView.drawCards(sortSetting);
  }
}",0.936046511627907
159494,"private void chkPilesActionPerformed(java.awt.event.ActionEvent evt){
  if (cbSortBy.getSelectedItem() instanceof SortBy) {
    if (this.currentView != null) {
      this.currentView.drawCards(sortSetting,chkPiles.isSelected());
    }
  }
}","private void chkPilesActionPerformed(java.awt.event.ActionEvent evt){
  if (cbSortBy.getSelectedItem() instanceof SortBy) {
    if (this.currentView != null) {
      sortSetting.setPilesToggle(chkPiles.isSelected());
      this.currentView.drawCards(sortSetting);
    }
  }
}",0.8466019417475729
159495,"private void filterCards(){
  FilterCard filter=buildFilter();
  try {
    List<Card> filteredCards=new ArrayList<Card>();
    setCursor(new Cursor(Cursor.WAIT_CURSOR));
    if (limited) {
      for (      Card card : cards) {
        if (filter.match(card,null)) {
          filteredCards.add(card);
        }
      }
    }
 else {
      List<CardInfo> foundCards=CardRepository.instance.findCards(buildCriteria());
      for (      CardInfo cardInfo : foundCards) {
        Card card=cardInfo.getMockCard();
        if (filter.match(card,null)) {
          filteredCards.add(card);
        }
      }
    }
    if (currentView instanceof CardGrid && filteredCards.size() > CardGrid.MAX_IMAGES) {
      this.toggleViewMode();
    }
    this.currentView.loadCards(new CardsView(filteredCards),sortSetting,chkPiles.isSelected(),bigCard,null,false);
    this.cardCount.setText(String.valueOf(filteredCards.size()));
  }
  finally {
    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
  }
}","private void filterCards(){
  FilterCard filter=buildFilter();
  try {
    List<Card> filteredCards=new ArrayList<Card>();
    setCursor(new Cursor(Cursor.WAIT_CURSOR));
    if (limited) {
      for (      Card card : cards) {
        if (filter.match(card,null)) {
          filteredCards.add(card);
        }
      }
    }
 else {
      List<CardInfo> foundCards=CardRepository.instance.findCards(buildCriteria());
      for (      CardInfo cardInfo : foundCards) {
        Card card=cardInfo.getMockCard();
        if (filter.match(card,null)) {
          filteredCards.add(card);
        }
      }
    }
    if (currentView instanceof CardGrid && filteredCards.size() > CardGrid.MAX_IMAGES) {
      this.toggleViewMode();
    }
    this.currentView.loadCards(new CardsView(filteredCards),sortSetting,bigCard,null,false);
    this.cardCount.setText(String.valueOf(filteredCards.size()));
  }
  finally {
    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
  }
}",0.9886947584789312
159496,"@Override public void componentResized(ComponentEvent e){
  if (cbSortBy.getSelectedItem() instanceof SortBy) {
    this.currentView.drawCards(sortSetting,chkPiles.isSelected());
  }
}","@Override public void componentResized(ComponentEvent e){
  if (cbSortBy.getSelectedItem() instanceof SortBy) {
    this.currentView.drawCards(sortSetting);
  }
}",0.9364161849710982
159497,"public void switchToGrid(){
  jToggleListView.setSelected(false);
  jToggleCardView.setSelected(true);
  currentView=cardGrid;
  cardSelectorScrollPane.setViewportView(cardGrid);
  cbSortBy.setEnabled(true);
  chkPiles.setEnabled(true);
  jButtonAddToMain.setEnabled(false);
  jButtonAddToSideboard.setEnabled(false);
  filterCards();
  chkPiles.setSelected(true);
  this.currentView.drawCards(sortSetting,chkPiles.isSelected());
}","public void switchToGrid(){
  jToggleListView.setSelected(false);
  jToggleCardView.setSelected(true);
  currentView=cardGrid;
  cardSelectorScrollPane.setViewportView(cardGrid);
  cbSortBy.setEnabled(true);
  chkPiles.setEnabled(true);
  jButtonAddToMain.setEnabled(false);
  jButtonAddToSideboard.setEnabled(false);
  filterCards();
  chkPiles.setSelected(true);
  this.currentView.drawCards(sortSetting);
}",0.9738095238095238
159498,"private void cbSortByActionPerformed(java.awt.event.ActionEvent evt){
  if (cbSortBy.getSelectedItem() instanceof SortBy) {
    if (this.currentView != null) {
      sortSetting.setSortBy((SortBy)cbSortBy.getSelectedItem());
      this.currentView.drawCards(sortSetting,chkPiles.isSelected());
    }
  }
}","private void cbSortByActionPerformed(java.awt.event.ActionEvent evt){
  if (cbSortBy.getSelectedItem() instanceof SortBy) {
    if (this.currentView != null) {
      sortSetting.setSortBy((SortBy)cbSortBy.getSelectedItem());
      this.currentView.drawCards(sortSetting);
    }
  }
}",0.9625850340136054
159499,"@Override public void componentShown(ComponentEvent e){
  if (cbSortBy.getSelectedItem() instanceof SortBy) {
    this.currentView.drawCards(sortSetting,chkPiles.isSelected());
  }
}","@Override public void componentShown(ComponentEvent e){
  if (cbSortBy.getSelectedItem() instanceof SortBy) {
    this.currentView.drawCards(sortSetting);
  }
}",0.935672514619883
159500,"public SortSetting(String prefSortBy,String prefSortIndex,String prefSortAscending){
  this.prefSortBy=prefSortBy;
  this.prefSortIndex=prefSortIndex;
  this.prefSortAscending=prefSortAscending;
  this.sortBy=SortBy.getByString(PreferencesDialog.getCachedValue(this.prefSortBy,""String_Node_Str""));
  this.sortIndex=Integer.parseInt(PreferencesDialog.getCachedValue(this.prefSortIndex,""String_Node_Str""));
  this.ascending=PreferencesDialog.getCachedValue(this.prefSortAscending,""String_Node_Str"").equals(""String_Node_Str"");
}","public SortSetting(String prefSortBy,String prefSortIndex,String prefSortAscending,String prefPilesToggle){
  this.prefSortBy=prefSortBy;
  this.prefSortIndex=prefSortIndex;
  this.prefSortAscending=prefSortAscending;
  this.prefPilesToggle=prefPilesToggle;
  this.sortBy=SortBy.getByString(PreferencesDialog.getCachedValue(this.prefSortBy,""String_Node_Str""));
  this.sortIndex=Integer.parseInt(PreferencesDialog.getCachedValue(this.prefSortIndex,""String_Node_Str""));
  this.ascending=PreferencesDialog.getCachedValue(this.prefSortAscending,""String_Node_Str"").equals(""String_Node_Str"");
  this.pilesToggle=PreferencesDialog.getCachedValue(this.prefPilesToggle,""String_Node_Str"").equals(""String_Node_Str"");
}",0.8522727272727273
159501,"private SortSettingBase(){
  super(PreferencesDialog.KEY_BASE_SORT_BY,PreferencesDialog.KEY_BASE_SORT_INDEX,PreferencesDialog.KEY_BASE_SORT_ASCENDING);
}","private SortSettingBase(){
  super(PreferencesDialog.KEY_BASE_SORT_BY,PreferencesDialog.KEY_BASE_SORT_INDEX,PreferencesDialog.KEY_BASE_SORT_ASCENDING,PreferencesDialog.KEY_BASE_PILES_TOGGLE);
}",0.884393063583815
159502,"private SortSettingDeck(){
  super(PreferencesDialog.KEY_DECK_SORT_BY,PreferencesDialog.KEY_DECK_SORT_INDEX,PreferencesDialog.KEY_DECK_SORT_ASCENDING);
}","private SortSettingDeck(){
  super(PreferencesDialog.KEY_DECK_SORT_BY,PreferencesDialog.KEY_DECK_SORT_INDEX,PreferencesDialog.KEY_DECK_SORT_ASCENDING,PreferencesDialog.KEY_DECK_PILES_TOGGLE);
}",0.884393063583815
159503,"private SortSettingDraft(){
  super(PreferencesDialog.KEY_DRAFT_SORT_BY,PreferencesDialog.KEY_DRAFT_SORT_INDEX,PreferencesDialog.KEY_DRAFT_SORT_INDEX);
}","private SortSettingDraft(){
  super(PreferencesDialog.KEY_DRAFT_SORT_BY,PreferencesDialog.KEY_DRAFT_SORT_INDEX,PreferencesDialog.KEY_DRAFT_SORT_INDEX,PreferencesDialog.KEY_DRAFT_PILES_TOGGLE);
}",0.8818443804034583
159504,"private SortSettingSideboard(){
  super(PreferencesDialog.KEY_SIDEBOARD_SORT_BY,PreferencesDialog.KEY_SIDEBOARD_SORT_INDEX,PreferencesDialog.KEY_SIDEBOARD_SORT_INDEX);
}","private SortSettingSideboard(){
  super(PreferencesDialog.KEY_SIDEBOARD_SORT_BY,PreferencesDialog.KEY_SIDEBOARD_SORT_INDEX,PreferencesDialog.KEY_SIDEBOARD_SORT_INDEX,PreferencesDialog.KEY_SIDEBOARD_PILES_TOGGLE);
}",0.8825065274151436
159505,"@Override public void drawCards(SortSetting sortSetting,boolean piles){
  fireTableDataChanged();
}","@Override public void drawCards(SortSetting sortSetting){
  fireTableDataChanged();
}",0.9239130434782608
159506,"@Override public void loadCards(CardsView showCards,SortSetting sortSetting,boolean piles,BigCard bigCard,UUID gameId,boolean merge){
  if (this.sortSetting == null) {
    this.sortSetting=sortSetting;
  }
  this.bigCard=bigCard;
  this.gameId=gameId;
  int landCount=0;
  int creatureCount=0;
  if (!merge) {
    this.clearCards();
    for (    CardView card : showCards.values()) {
      addCard(card,bigCard,gameId);
    }
  }
 else {
    for (    CardView card : showCards.values()) {
      if (!cards.containsKey(card.getId())) {
        addCard(card,bigCard,gameId);
      }
      if (updateCountsCallback != null) {
        if (card.getCardTypes().contains(CardType.LAND)) {
          landCount++;
        }
        if (card.getCardTypes().contains(CardType.CREATURE)) {
          creatureCount++;
        }
      }
    }
    for (Iterator<Entry<UUID,CardView>> i=cards.entrySet().iterator(); i.hasNext(); ) {
      Entry<UUID,CardView> entry=i.next();
      if (!showCards.containsKey(entry.getKey())) {
        i.remove();
        if (displayNoCopies) {
          String key=entry.getValue().getName() + entry.getValue().getExpansionSetCode() + entry.getValue().getCardNumber();
          if (cardsNoCopies.containsKey(key)) {
            Integer count=cardsNoCopies.get(key);
            count--;
            if (count > 0) {
              cardsNoCopies.put(key,count);
            }
 else {
              cardsNoCopies.remove(key);
            }
            for (int j=0; j < view.size(); j++) {
              CardView cv=view.get(j);
              if (cv.getId().equals(entry.getValue().getId())) {
                if (count > 0) {
                  String key1=cv.getName() + cv.getExpansionSetCode() + cv.getCardNumber();
                  for (                  CardView cardView : cards.values()) {
                    String key2=cardView.getName() + cardView.getExpansionSetCode() + cardView.getCardNumber();
                    if ((key1).equals(key2)) {
                      view.set(j,cardView);
                      break;
                    }
                  }
                }
 else {
                  view.remove(j);
                }
                break;
              }
            }
          }
        }
 else {
          for (          CardView cv : view) {
            if (cv.getId().equals(entry.getKey())) {
              view.remove(cv);
              break;
            }
          }
        }
      }
    }
    if (updateCountsCallback != null) {
      updateCountsCallback.update(cards.size(),creatureCount,landCount);
    }
  }
  sort(this.sortSetting.getSortIndex(),this.sortSetting.isAscending());
  drawCards(sortSetting,piles);
}","@Override public void loadCards(CardsView showCards,SortSetting sortSetting,BigCard bigCard,UUID gameId,boolean merge){
  if (this.sortSetting == null) {
    this.sortSetting=sortSetting;
  }
  this.bigCard=bigCard;
  this.gameId=gameId;
  int landCount=0;
  int creatureCount=0;
  if (!merge) {
    this.clearCards();
    for (    CardView card : showCards.values()) {
      addCard(card,bigCard,gameId);
    }
  }
 else {
    for (    CardView card : showCards.values()) {
      if (!cards.containsKey(card.getId())) {
        addCard(card,bigCard,gameId);
      }
      if (updateCountsCallback != null) {
        if (card.getCardTypes().contains(CardType.LAND)) {
          landCount++;
        }
        if (card.getCardTypes().contains(CardType.CREATURE)) {
          creatureCount++;
        }
      }
    }
    for (Iterator<Entry<UUID,CardView>> i=cards.entrySet().iterator(); i.hasNext(); ) {
      Entry<UUID,CardView> entry=i.next();
      if (!showCards.containsKey(entry.getKey())) {
        i.remove();
        if (displayNoCopies) {
          String key=entry.getValue().getName() + entry.getValue().getExpansionSetCode() + entry.getValue().getCardNumber();
          if (cardsNoCopies.containsKey(key)) {
            Integer count=cardsNoCopies.get(key);
            count--;
            if (count > 0) {
              cardsNoCopies.put(key,count);
            }
 else {
              cardsNoCopies.remove(key);
            }
            for (int j=0; j < view.size(); j++) {
              CardView cv=view.get(j);
              if (cv.getId().equals(entry.getValue().getId())) {
                if (count > 0) {
                  String key1=cv.getName() + cv.getExpansionSetCode() + cv.getCardNumber();
                  for (                  CardView cardView : cards.values()) {
                    String key2=cardView.getName() + cardView.getExpansionSetCode() + cardView.getCardNumber();
                    if ((key1).equals(key2)) {
                      view.set(j,cardView);
                      break;
                    }
                  }
                }
 else {
                  view.remove(j);
                }
                break;
              }
            }
          }
        }
 else {
          for (          CardView cv : view) {
            if (cv.getId().equals(entry.getKey())) {
              view.remove(cv);
              break;
            }
          }
        }
      }
    }
    if (updateCountsCallback != null) {
      updateCountsCallback.update(cards.size(),creatureCount,landCount);
    }
  }
  sort(this.sortSetting.getSortIndex(),this.sortSetting.isAscending());
  drawCards(sortSetting);
}",0.99625468164794
159507,"private SortSettingDraft(){
  super(PreferencesDialog.KEY_DRAFT_SORT_BY,PreferencesDialog.KEY_DRAFT_SORT_INDEX,PreferencesDialog.KEY_DRAFT_SORT_INDEX,PreferencesDialog.KEY_DRAFT_PILES_TOGGLE);
}","private SortSettingDraft(){
  super(PreferencesDialog.KEY_DRAFT_SORT_BY,PreferencesDialog.KEY_DRAFT_SORT_INDEX,PreferencesDialog.KEY_DRAFT_SORT_ASCENDING,PreferencesDialog.KEY_DRAFT_PILES_TOGGLE);
}",0.9744897959183674
159508,"private SortSettingSideboard(){
  super(PreferencesDialog.KEY_SIDEBOARD_SORT_BY,PreferencesDialog.KEY_SIDEBOARD_SORT_INDEX,PreferencesDialog.KEY_SIDEBOARD_SORT_INDEX,PreferencesDialog.KEY_SIDEBOARD_PILES_TOGGLE);
}","private SortSettingSideboard(){
  super(PreferencesDialog.KEY_SIDEBOARD_SORT_BY,PreferencesDialog.KEY_SIDEBOARD_SORT_INDEX,PreferencesDialog.KEY_SIDEBOARD_SORT_ASCENDING,PreferencesDialog.KEY_SIDEBOARD_PILES_TOGGLE);
}",0.976851851851852
159509,"@Override public boolean apply(Game game,Ability source){
  UUID objectId=source.getFirstTarget();
  UUID sourceId=source.getSourceId();
  StackObject stackObject=game.getStack().getStackObject(objectId);
  if (stackObject != null && !game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.COUNTER,objectId,sourceId,stackObject.getControllerId()))) {
    if (stackObject instanceof Spell) {
      game.rememberLKI(objectId,Zone.STACK,(Spell)stackObject);
    }
    game.getStack().remove(stackObject);
    MageObject card=game.getObject(stackObject.getSourceId());
    if (card instanceof Card) {
      ((Card)card).moveToZone(targetZone,sourceId,game,flag);
    }
 else {
      game.informPlayers(""String_Node_Str"" + targetZone + ""String_Node_Str"");
    }
    game.fireEvent(GameEvent.getEvent(GameEvent.EventType.COUNTERED,objectId,sourceId,stackObject.getControllerId()));
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  UUID objectId=source.getFirstTarget();
  UUID sourceId=source.getSourceId();
  StackObject stackObject=game.getStack().getStackObject(objectId);
  if (stackObject != null && !game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.COUNTER,objectId,sourceId,stackObject.getControllerId()))) {
    boolean spell=false;
    if (stackObject instanceof Spell) {
      game.rememberLKI(objectId,Zone.STACK,(Spell)stackObject);
      spell=true;
    }
    game.getStack().remove(stackObject);
    if (spell && !((Spell)stackObject).isCopiedSpell()) {
      MageObject card=game.getObject(stackObject.getSourceId());
      if (card instanceof Card) {
        ((Card)card).moveToZone(targetZone,sourceId,game,flag);
      }
 else {
        game.informPlayers(""String_Node_Str"" + targetZone + ""String_Node_Str"");
      }
    }
    game.fireEvent(GameEvent.getEvent(GameEvent.EventType.COUNTERED,objectId,sourceId,stackObject.getControllerId()));
    return true;
  }
  return false;
}",0.93900563813429
159510,"@Override public boolean moveToZone(Zone zone,UUID sourceId,Game game,boolean flag,ArrayList<UUID> appliedEffects){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public boolean moveToZone(Zone zone,UUID sourceId,Game game,boolean flag,ArrayList<UUID> appliedEffects){
  if (this.isCopiedSpell() && !zone.equals(Zone.STACK)) {
    return true;
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.8192219679633868
159511,"@Override public boolean apply(Game game,Ability source){
  MageObject card=game.getLastKnownInformation(source.getFirstTarget(),Zone.BATTLEFIELD);
  if (card != null) {
    int cost=card.getManaCost().get(0).convertedManaCost();
    Player player=game.getPlayer(source.getControllerId());
    if (player != null) {
      player.gainLife(cost,game);
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Permanent targetPermanent=game.getPermanentOrLKIBattlefield(getTargetPointer().getFirst(game,source));
  if (targetPermanent != null) {
    int cost=targetPermanent.getManaCost().convertedManaCost();
    Player player=game.getPlayer(source.getControllerId());
    if (player != null) {
      player.gainLife(cost,game);
    }
  }
  return true;
}",0.690537084398977
159512,"@Override public boolean apply(Game game,Ability source){
  Permanent creature=game.getPermanent(getTargetPointer().getFirst(game,source));
  if (creature != null) {
    Player controller=game.getPlayer(creature.getControllerId());
    if (controller != null) {
      int power=creature.getPower().getValue();
      creature.destroy(source.getSourceId(),game,false);
      Effect effect=new PutLibraryIntoGraveTargetEffect(power);
      effect.setTargetPointer(new FixedTarget(controller.getId()));
      return effect.apply(game,source);
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent creature=game.getPermanentOrLKIBattlefield(this.getTargetPointer().getFirst(game,source));
  if (creature != null) {
    Player controller=game.getPlayer(creature.getControllerId());
    if (controller != null) {
      int power=creature.getPower().getValue();
      Effect effect=new PutLibraryIntoGraveTargetEffect(power);
      effect.setTargetPointer(new FixedTarget(controller.getId()));
      return effect.apply(game,source);
    }
  }
  return false;
}",0.6514598540145985
159513,"@Override public boolean apply(Game game,Ability source){
  MageObject card=game.getLastKnownInformation(source.getFirstTarget(),Zone.BATTLEFIELD);
  if (card != null) {
    int cost=card.getManaCost().get(0).convertedManaCost();
    Player player=game.getPlayer(source.getControllerId());
    if (player != null) {
      player.gainLife(cost,game);
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Permanent artefact=game.getPermanentOrLKIBattlefield(getTargetPointer().getFirst(game,source));
  if (artefact != null) {
    int cost=artefact.getManaCost().convertedManaCost();
    Player player=game.getPlayer(source.getControllerId());
    if (player != null) {
      player.gainLife(cost,game);
    }
  }
  return true;
}",0.6254927726675427
159514,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getFirstTarget());
  if (permanent != null) {
    int power=permanent.getPower().getValue();
    permanent.destroy(source.getId(),game,true);
    Player player=game.getPlayer(source.getControllerId());
    if (player != null) {
      player.gainLife(power,game);
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanentOrLKIBattlefield(this.getTargetPointer().getFirst(game,source));
  if (permanent != null) {
    int power=permanent.getPower().getValue();
    Player player=game.getPlayer(source.getControllerId());
    if (player != null) {
      player.gainLife(power,game);
    }
    return true;
  }
  return false;
}",0.7576875768757687
159515,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  Permanent target=(Permanent)game.getLastKnownInformation(source.getFirstTarget(),Zone.BATTLEFIELD);
  if (player != null && target != null) {
    player.loseLife(target.getToughness().getValue(),game);
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  Permanent target=game.getPermanentOrLKIBattlefield(this.getTargetPointer().getFirst(game,source));
  if (player != null && target != null) {
    player.loseLife(target.getToughness().getValue(),game);
    return true;
  }
  return false;
}",0.8055944055944056
159516,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject c=game.getLastKnownInformation(targetPointer.getFirst(game,source),Zone.BATTLEFIELD);
  if (c != null && controller != null) {
    controller.gainLife(c.getPower().getValue(),game);
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Permanent creature=game.getPermanentOrLKIBattlefield(this.getTargetPointer().getFirst(game,source));
  if (creature != null && controller != null) {
    controller.gainLife(creature.getPower().getValue(),game);
  }
  return false;
}",0.7797101449275362
159517,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.SPELL_CAST) {
    Spell spell=game.getStack().getSpell(event.getTargetId());
    if (spell != null && spell.getCardType().contains(CardType.INSTANT) || spell.getCardType().contains(CardType.SORCERY)) {
      Permanent enchantment=game.getPermanent(sourceId);
      if (enchantment != null && enchantment.getAttachedTo() != null) {
        Player player=game.getPlayer(enchantment.getAttachedTo());
        if (player != null && spell.getControllerId().equals(player.getId())) {
          this.getTargets().get(0).add(spell.getId(),game);
          return true;
        }
      }
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.SPELL_CAST) {
    Spell spell=game.getStack().getSpell(event.getTargetId());
    if (spell != null && (spell.getCardType().contains(CardType.INSTANT) || spell.getCardType().contains(CardType.SORCERY))) {
      Permanent enchantment=game.getPermanent(sourceId);
      if (enchantment != null && enchantment.getAttachedTo() != null) {
        Player player=game.getPlayer(enchantment.getAttachedTo());
        if (player != null && spell.getControllerId().equals(player.getId())) {
          this.getEffects().get(0).setTargetPointer(new FixedTarget(spell.getId()));
          return true;
        }
      }
    }
  }
  return false;
}",0.9637234770704995
159518,"private void copyFromToken(Token token,Game game){
  this.name=token.getName();
  this.abilities.clear();
  for (  Ability ability : token.getAbilities()) {
    this.addAbility(ability,game);
  }
  this.manaCost.clear();
  for (  ManaCost cost : token.getManaCost()) {
    this.getManaCost().add(cost.copy());
  }
  this.cardType.addAll(token.getCardType());
  this.color=token.getColor().copy();
  this.power.initValue(token.getPower().getValue());
  this.toughness.initValue(token.getToughness().getValue());
  this.supertype.addAll(token.getSupertype());
  this.subtype.addAll(token.getSubtype());
}","private void copyFromToken(Token token,Game game){
  this.name=token.getName();
  this.abilities.clear();
  for (  Ability ability : token.getAbilities()) {
    this.addAbility(ability,game);
  }
  this.manaCost.clear();
  for (  ManaCost cost : token.getManaCost()) {
    this.getManaCost().add(cost.copy());
  }
  this.cardType=token.getCardType();
  this.color=token.getColor().copy();
  this.power.initValue(token.getPower().getValue());
  this.toughness.initValue(token.getToughness().getValue());
  this.supertype=token.getSupertype();
  this.subtype=token.getSubtype();
}",0.947457627118644
159519,"@Override public boolean applies(UUID sourceId,Ability source,Game game){
  return true;
}","@Override public boolean applies(UUID sourceId,Ability source,Game game){
  return sourceId.equals(source.getSourceId());
}",0.8356807511737089
159520,"/** 
 * Creates new form TablesPanel 
 */
public TablesPanel(){
  tableModel=new TableTableModel();
  matchesModel=new MatchesTableModel();
  gameChooser=new GameChooser();
  initComponents();
  tableModel.setSession(session);
  chkShowCompleted.setVisible(true);
  tableTables.createDefaultColumnsFromModel();
  chatPanel.useExtendedView(ChatPanel.VIEW_MODE.NONE);
  chatPanel.setBorder(null);
  chatPanel.setChatType(ChatPanel.ChatType.TABLES);
  JComponent[] components=new JComponent[]{chatPanel,jSplitPane1,jScrollPane1,jScrollPane2,jPanel1,jPanel3};
  for (  JComponent component : components) {
    component.setOpaque(false);
  }
  jScrollPane1.getViewport().setBackground(new Color(255,255,255,50));
  jScrollPane2.getViewport().setBackground(new Color(255,255,255,50));
  Action joinTable;
  joinTable=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      int modelRow=Integer.valueOf(e.getActionCommand());
      UUID tableId=(UUID)tableModel.getValueAt(modelRow,TableTableModel.ACTION_COLUMN + 3);
      UUID gameId=(UUID)tableModel.getValueAt(modelRow,TableTableModel.ACTION_COLUMN + 2);
      String action=(String)tableModel.getValueAt(modelRow,TableTableModel.ACTION_COLUMN);
      boolean isTournament=(Boolean)tableModel.getValueAt(modelRow,TableTableModel.ACTION_COLUMN + 1);
      String owner=(String)tableModel.getValueAt(modelRow,1);
      if (action.equals(""String_Node_Str"")) {
        if (owner.equals(session.getUserName())) {
          try {
            JDesktopPane desktopPane=(JDesktopPane)MageFrame.getUI().getComponent(MageComponents.DESKTOP_PANE);
            JInternalFrame[] windows=desktopPane.getAllFramesInLayer(javax.swing.JLayeredPane.DEFAULT_LAYER);
            for (            JInternalFrame frame : windows) {
              if (frame.getTitle().equals(""String_Node_Str"")) {
                frame.toFront();
                frame.setVisible(true);
                try {
                  frame.setSelected(true);
                }
 catch (                PropertyVetoException ve) {
                  ve.printStackTrace();
                  logger.error(ve);
                }
              }
            }
          }
 catch (          Exception ex) {
            logger.error(ex);
          }
          return;
        }
        if (isTournament) {
          logger.info(""String_Node_Str"" + tableId);
          session.joinTournamentTable(roomId,tableId,session.getUserName(),""String_Node_Str"",1);
        }
 else {
          logger.info(""String_Node_Str"" + tableId);
          joinTableDialog.showDialog(roomId,tableId);
        }
      }
 else       if (action.equals(""String_Node_Str"")) {
        if (JOptionPane.showConfirmDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
          session.removeTable(roomId,tableId);
        }
      }
 else       if (action.equals(""String_Node_Str"")) {
        if (isTournament) {
          logger.info(""String_Node_Str"" + tableId);
          session.watchTable(roomId,tableId);
        }
      }
 else       if (action.equals(""String_Node_Str"")) {
        if (!isTournament) {
          logger.info(""String_Node_Str"" + tableId);
          session.watchTable(roomId,tableId);
        }
      }
 else       if (action.equals(""String_Node_Str"")) {
        logger.info(""String_Node_Str"" + gameId);
      }
    }
  }
;
  Action replayMatch=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      int modelRow=Integer.valueOf(e.getActionCommand());
      if (matchesModel.getValueAt(modelRow,MatchesTableModel.ACTION_COLUMN) instanceof List) {
        List<UUID> games=(List<UUID>)matchesModel.getValueAt(modelRow,MatchesTableModel.ACTION_COLUMN);
        if (games.size() == 1) {
          session.replayGame(games.get(0));
        }
 else {
          gameChooser.show(games,MageFrame.getDesktop().getMousePosition());
        }
      }
    }
  }
;
  new ButtonColumn(tableTables,joinTable,TableTableModel.ACTION_COLUMN);
  new ButtonColumn(tableCompleted,replayMatch,MatchesTableModel.ACTION_COLUMN);
}","/** 
 * Creates new form TablesPanel 
 */
public TablesPanel(){
  tableModel=new TableTableModel();
  matchesModel=new MatchesTableModel();
  gameChooser=new GameChooser();
  initComponents();
  tableModel.setSession(session);
  chkShowCompleted.setVisible(true);
  tableTables.createDefaultColumnsFromModel();
  chatPanel.useExtendedView(ChatPanel.VIEW_MODE.NONE);
  chatPanel.setBorder(null);
  chatPanel.setChatType(ChatPanel.ChatType.TABLES);
  JComponent[] components=new JComponent[]{chatPanel,jSplitPane1,jScrollPane1,jScrollPane2,jPanel1,jPanel3};
  for (  JComponent component : components) {
    component.setOpaque(false);
  }
  jScrollPane1.getViewport().setBackground(new Color(255,255,255,50));
  jScrollPane2.getViewport().setBackground(new Color(255,255,255,50));
  Action joinTable;
  joinTable=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      int modelRow=Integer.valueOf(e.getActionCommand());
      UUID tableId=(UUID)tableModel.getValueAt(modelRow,TableTableModel.ACTION_COLUMN + 3);
      UUID gameId=(UUID)tableModel.getValueAt(modelRow,TableTableModel.ACTION_COLUMN + 2);
      String action=(String)tableModel.getValueAt(modelRow,TableTableModel.ACTION_COLUMN);
      boolean isTournament=(Boolean)tableModel.getValueAt(modelRow,TableTableModel.ACTION_COLUMN + 1);
      String owner=(String)tableModel.getValueAt(modelRow,1);
      if (action.equals(""String_Node_Str"")) {
        if (owner.equals(session.getUserName())) {
          try {
            JDesktopPane desktopPane=(JDesktopPane)MageFrame.getUI().getComponent(MageComponents.DESKTOP_PANE);
            JInternalFrame[] windows=desktopPane.getAllFramesInLayer(javax.swing.JLayeredPane.DEFAULT_LAYER);
            for (            JInternalFrame frame : windows) {
              if (frame.getTitle().equals(""String_Node_Str"")) {
                frame.toFront();
                frame.setVisible(true);
                try {
                  frame.setSelected(true);
                }
 catch (                PropertyVetoException ve) {
                  ve.printStackTrace();
                  logger.error(ve);
                }
              }
            }
          }
 catch (          Exception ex) {
            logger.error(ex);
          }
          return;
        }
        if (isTournament) {
          logger.info(""String_Node_Str"" + tableId);
          session.joinTournamentTable(roomId,tableId,session.getUserName(),""String_Node_Str"",1);
        }
 else {
          logger.info(""String_Node_Str"" + tableId);
          joinTableDialog.showDialog(roomId,tableId);
        }
      }
 else       if (action.equals(""String_Node_Str"")) {
        if (JOptionPane.showConfirmDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
          session.removeTable(roomId,tableId);
        }
      }
 else       if (action.equals(""String_Node_Str"")) {
        if (isTournament) {
          logger.info(""String_Node_Str"" + tableId);
          session.watchTable(roomId,tableId);
        }
      }
 else       if (action.equals(""String_Node_Str"")) {
        if (!isTournament) {
          logger.info(""String_Node_Str"" + tableId);
          session.watchTable(roomId,tableId);
        }
      }
 else       if (action.equals(""String_Node_Str"")) {
        logger.info(""String_Node_Str"" + gameId);
        session.replayGame(gameId);
      }
    }
  }
;
  Action replayMatch=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      int modelRow=Integer.valueOf(e.getActionCommand());
      if (matchesModel.getValueAt(modelRow,MatchesTableModel.GAMES_LIST_COLUMN) instanceof List) {
        List<UUID> games=(List<UUID>)matchesModel.getValueAt(modelRow,MatchesTableModel.GAMES_LIST_COLUMN);
        if (games.size() == 1) {
          session.replayGame(games.get(0));
        }
 else {
          gameChooser.show(games,MageFrame.getDesktop().getMousePosition());
        }
      }
    }
  }
;
  new ButtonColumn(tableTables,joinTable,TableTableModel.ACTION_COLUMN);
  new ButtonColumn(tableCompleted,replayMatch,MatchesTableModel.ACTION_COLUMN);
}",0.9927395934172314
159521,"@Override public Object getValueAt(int arg0,int arg1){
switch (arg1) {
case 0:
    return matches[arg0].getName();
case 1:
  return matches[arg0].getGameType();
case 2:
return matches[arg0].getDeckType();
case 3:
return matches[arg0].getPlayers();
case 4:
return matches[arg0].getResult();
case 5:
return timeFormatter.format(matches[arg0].getStartTime());
case 6:
if (matches[arg0].getEndTime() != null) {
return timeFormatter.format(matches[arg0].getEndTime());
}
 else {
return ""String_Node_Str"";
}
case 7:
return ""String_Node_Str"";
case 8:
return matches[arg0].getGames();
}
return ""String_Node_Str"";
}","@Override public Object getValueAt(int arg0,int arg1){
switch (arg1) {
case 0:
    return matches[arg0].getName();
case 1:
  return matches[arg0].getGameType();
case 2:
return matches[arg0].getDeckType();
case 3:
return matches[arg0].getPlayers();
case 4:
return matches[arg0].getResult();
case 5:
return timeFormatter.format(matches[arg0].getStartTime());
case 6:
if (matches[arg0].getEndTime() != null) {
return timeFormatter.format(matches[arg0].getEndTime());
}
 else {
return ""String_Node_Str"";
}
case 7:
if (matches[arg0].isReplayAvailable()) {
return ""String_Node_Str"";
}
 else {
return ""String_Node_Str"";
}
case 8:
return matches[arg0].getGames();
}
return ""String_Node_Str"";
}",0.9388071262587142
159522,"@Override public boolean isCellEditable(int rowIndex,int columnIndex){
  if (columnIndex != ACTION_COLUMN) {
    return false;
  }
  return true;
}","@Override public boolean isCellEditable(int rowIndex,int columnIndex){
  return columnIndex == ACTION_COLUMN;
}",0.8062015503875969
159523,"public MatchView(Table table){
  this.matchId=table.getTournament().getId();
  this.matchName=table.getName();
  this.gameType=table.getGameType();
  if (table.getTournament().getOptions().getNumberRounds() > 0) {
    this.gameType=new StringBuilder(this.gameType).append(""String_Node_Str"").append(table.getTournament().getOptions().getNumberRounds()).append(""String_Node_Str"").toString();
  }
  this.deckType=new StringBuilder(table.getDeckType()).append(""String_Node_Str"").append(table.getTournament().getBoosterInfo()).toString();
  StringBuilder sb1=new StringBuilder();
  for (  TournamentPlayer tPlayer : table.getTournament().getPlayers()) {
    sb1.append(tPlayer.getPlayer().getName()).append(""String_Node_Str"").append(tPlayer.getPoints()).append(""String_Node_Str"");
  }
  this.players=sb1.toString();
  StringBuilder sb2=new StringBuilder();
  if (table.getTournament().getRounds().size() > 0) {
    for (    TournamentPlayer tPlayer : table.getTournament().getPlayers()) {
      sb2.append(tPlayer.getPlayer().getName()).append(""String_Node_Str"").append(tPlayer.getResults()).append(""String_Node_Str"");
    }
  }
 else {
    sb2.append(""String_Node_Str"");
  }
  this.result=sb2.toString();
  this.startTime=table.getTournament().getStartTime();
  this.endTime=table.getTournament().getEndTime();
}","public MatchView(Table table){
  this.matchId=table.getTournament().getId();
  this.matchName=table.getName();
  this.gameType=table.getGameType();
  if (table.getTournament().getOptions().getNumberRounds() > 0) {
    this.gameType=new StringBuilder(this.gameType).append(""String_Node_Str"").append(table.getTournament().getOptions().getNumberRounds()).append(""String_Node_Str"").toString();
  }
  this.deckType=new StringBuilder(table.getDeckType()).append(""String_Node_Str"").append(table.getTournament().getBoosterInfo()).toString();
  StringBuilder sb1=new StringBuilder();
  for (  TournamentPlayer tPlayer : table.getTournament().getPlayers()) {
    sb1.append(tPlayer.getPlayer().getName()).append(""String_Node_Str"").append(tPlayer.getPoints()).append(""String_Node_Str"");
  }
  this.players=sb1.toString();
  StringBuilder sb2=new StringBuilder();
  if (table.getTournament().getRounds().size() > 0) {
    for (    TournamentPlayer tPlayer : table.getTournament().getPlayers()) {
      sb2.append(tPlayer.getPlayer().getName()).append(""String_Node_Str"").append(tPlayer.getResults()).append(""String_Node_Str"");
    }
  }
 else {
    sb2.append(""String_Node_Str"");
  }
  this.result=sb2.toString();
  this.startTime=table.getTournament().getStartTime();
  this.endTime=table.getTournament().getEndTime();
  this.replayAvailable=false;
}",0.9886621315192744
159524,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (!this.used && super.applies(event,source,game) && event.getTargetId().equals(source.getFirstTarget())) {
    return true;
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  return !this.used && super.applies(event,source,game) && event.getTargetId().equals(source.getFirstTarget());
}",0.8840579710144928
159525,"@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  GameEvent preventEvent=new GameEvent(GameEvent.EventType.PREVENT_DAMAGE,source.getControllerId(),source.getId(),source.getControllerId(),event.getAmount(),false);
  if (!game.replaceEvent(preventEvent)) {
    Permanent targetCreature=game.getPermanent(source.getFirstTarget());
    if (targetCreature != null) {
      int damage=event.getAmount();
      if (event.getAmount() >= this.amount) {
        event.setAmount(damage - this.amount);
        damage=this.amount;
        this.used=true;
        this.discard();
      }
 else {
        event.setAmount(0);
        this.amount-=damage;
      }
      if (damage > 0) {
        game.informPlayers(new StringBuilder(""String_Node_Str"").append(""String_Node_Str"").append(damage).append(""String_Node_Str"").append(targetCreature.getName()).toString());
        game.fireEvent(GameEvent.getEvent(GameEvent.EventType.PREVENTED_DAMAGE,source.getControllerId(),source.getSourceId(),source.getControllerId(),damage));
        Player targetPlayer=game.getPlayer(source.getTargets().get(1).getFirstTarget());
        if (targetPlayer != null) {
          targetPlayer.damage(damage,source.getSourceId(),game,false,true);
          game.informPlayers(new StringBuilder(""String_Node_Str"").append(""String_Node_Str"").append(damage).append(""String_Node_Str"").append(targetPlayer.getName()).toString());
        }
 else {
          Permanent targetDamageCreature=game.getPermanent(source.getTargets().get(1).getFirstTarget());
          if (targetDamageCreature != null) {
            targetDamageCreature.damage(damage,source.getSourceId(),game,true,false);
            game.informPlayers(new StringBuilder(""String_Node_Str"").append(""String_Node_Str"").append(damage).append(""String_Node_Str"").append(targetDamageCreature.getName()).toString());
          }
        }
      }
      return true;
    }
  }
  return false;
}","@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  boolean result=false;
  int toPrevent=amount;
  if (event.getAmount() < this.amount) {
    toPrevent=event.getAmount();
    amount-=event.getAmount();
  }
 else {
    amount=0;
  }
  GameEvent preventEvent=new GameEvent(GameEvent.EventType.PREVENT_DAMAGE,source.getControllerId(),source.getId(),source.getControllerId(),toPrevent,false);
  if (!game.replaceEvent(preventEvent)) {
    Permanent targetCreature=game.getPermanent(source.getFirstTarget());
    if (targetCreature != null) {
      if (amount == 0) {
        this.used=true;
        this.discard();
      }
      if (event.getAmount() >= toPrevent) {
        event.setAmount(event.getAmount() - toPrevent);
      }
 else {
        event.setAmount(0);
        result=true;
      }
      if (toPrevent > 0) {
        game.informPlayers(new StringBuilder(""String_Node_Str"").append(""String_Node_Str"").append(toPrevent).append(""String_Node_Str"").append(targetCreature.getName()).toString());
        game.fireEvent(GameEvent.getEvent(GameEvent.EventType.PREVENTED_DAMAGE,source.getControllerId(),source.getSourceId(),source.getControllerId(),toPrevent));
        Player targetPlayer=game.getPlayer(source.getTargets().get(1).getFirstTarget());
        if (targetPlayer != null) {
          targetPlayer.damage(toPrevent,source.getSourceId(),game,false,true);
          game.informPlayers(new StringBuilder(""String_Node_Str"").append(""String_Node_Str"").append(toPrevent).append(""String_Node_Str"").append(targetPlayer.getName()).toString());
        }
 else {
          Permanent targetDamageCreature=game.getPermanent(source.getTargets().get(1).getFirstTarget());
          if (targetDamageCreature != null) {
            targetDamageCreature.damage(toPrevent,source.getSourceId(),game,true,false);
            game.informPlayers(new StringBuilder(""String_Node_Str"").append(""String_Node_Str"").append(toPrevent).append(""String_Node_Str"").append(targetDamageCreature.getName()).toString());
          }
        }
      }
    }
  }
  return result;
}",0.8219791148682247
159526,"public void cleanUp(){
  permanents.clear();
  Plugins.getInstance().sortPermanents(uiComponentsList,permanents.values());
}","public void cleanUp(){
  for (  Component c : this.jPanel.getComponents()) {
    if (c instanceof Permanent || c instanceof MagePermanent) {
      this.jPanel.remove(c);
    }
  }
  permanents.clear();
  Plugins.getInstance().sortPermanents(uiComponentsList,permanents.values());
}",0.528395061728395
159527,"private void groupAttachments(PermanentView permanent){
  MagePermanent perm=permanents.get(permanent.getId());
  if (perm == null)   return;
  int position=getPosition(perm);
  perm.getLinks().clear();
  Rectangle r=perm.getBounds();
  if (!Plugins.getInstance().isCardPluginLoaded()) {
    for (    UUID attachmentId : permanent.getAttachments()) {
      MagePermanent link=permanents.get(attachmentId);
      if (link != null) {
        perm.getLinks().add(link);
        r.translate(20,20);
        link.setBounds(r);
        setPosition(link,++position);
      }
    }
  }
 else {
    int index=permanent.getAttachments().size();
    for (    UUID attachmentId : permanent.getAttachments()) {
      MagePermanent link=permanents.get(attachmentId);
      if (link != null) {
        link.setBounds(r);
        perm.getLinks().add(link);
        r.translate(8,10);
        perm.setBounds(r);
        moveToFront(link);
        moveToFront(perm);
        jPanel.setComponentZOrder(link,index);
        index--;
      }
    }
    jPanel.setComponentZOrder(perm,index);
  }
}","private void groupAttachments(PermanentView permanent){
  MagePermanent perm=permanents.get(permanent.getId());
  if (perm == null) {
    return;
  }
  int position=getPosition(perm);
  perm.getLinks().clear();
  Rectangle r=perm.getBounds();
  if (!Plugins.getInstance().isCardPluginLoaded()) {
    for (    UUID attachmentId : permanent.getAttachments()) {
      MagePermanent link=permanents.get(attachmentId);
      if (link != null) {
        perm.getLinks().add(link);
        r.translate(20,20);
        link.setBounds(r);
        setPosition(link,++position);
      }
    }
  }
 else {
    int index=permanent.getAttachments().size();
    for (    UUID attachmentId : permanent.getAttachments()) {
      MagePermanent link=permanents.get(attachmentId);
      if (link != null) {
        link.setBounds(r);
        perm.getLinks().add(link);
        r.translate(8,10);
        perm.setBounds(r);
        moveToFront(link);
        moveToFront(perm);
        jPanel.setComponentZOrder(link,index);
        index--;
      }
    }
    jPanel.setComponentZOrder(perm,index);
  }
}",0.9962928637627432
159528,"private void btnRightActionPerformed(java.awt.event.ActionEvent evt){
  this.selected=true;
  if (connectedDialog != null) {
    connectedDialog.removeDialog();
    connectedDialog=null;
  }
  if (mode == FeedbackMode.SELECT && (evt.getModifiers() & ActionEvent.CTRL_MASK) == ActionEvent.CTRL_MASK) {
    session.sendPlayerInteger(gameId,0);
  }
 else   if (mode == FeedbackMode.END) {
    MageFrame.getGame(gameId).hideGame();
  }
 else {
    session.sendPlayerBoolean(gameId,false);
  }
}","private void btnRightActionPerformed(java.awt.event.ActionEvent evt){
  this.selected=true;
  if (connectedDialog != null) {
    connectedDialog.removeDialog();
    connectedDialog=null;
  }
  if (mode == FeedbackMode.SELECT && (evt.getModifiers() & ActionEvent.CTRL_MASK) == ActionEvent.CTRL_MASK) {
    session.sendPlayerInteger(gameId,0);
  }
 else   if (mode == FeedbackMode.END) {
    GamePanel gamePanel=MageFrame.getGame(gameId);
    if (gamePanel != null) {
      gamePanel.removeGame();
    }
  }
 else {
    session.sendPlayerBoolean(gameId,false);
  }
}",0.922201138519924
159529,"private void btnStopWatchingActionPerformed(java.awt.event.ActionEvent evt){
  if (modalQuestion(""String_Node_Str"",""String_Node_Str"") == JOptionPane.YES_OPTION) {
    session.stopWatching(gameId);
    this.hideGame();
  }
}","private void btnStopWatchingActionPerformed(java.awt.event.ActionEvent evt){
  if (modalQuestion(""String_Node_Str"",""String_Node_Str"") == JOptionPane.YES_OPTION) {
    session.stopWatching(gameId);
    this.removeGame();
  }
}",0.9821428571428572
159530,"public synchronized void showGame(UUID gameId,UUID playerId){
  this.gameId=gameId;
  this.playerId=playerId;
  session=MageFrame.getSession();
  MageFrame.addGame(gameId,this);
  this.feedbackPanel.init(gameId);
  this.feedbackPanel.clear();
  this.abilityPicker.init(session,gameId);
  this.btnConcede.setVisible(true);
  this.btnEndTurn.setVisible(true);
  this.btnSwitchHands.setVisible(false);
  this.pnlReplay.setVisible(false);
  this.btnStopWatching.setVisible(false);
  this.gameChatPanel.clear();
  this.gameChatPanel.connect(session.getGameChatId(gameId));
  if (!session.joinGame(gameId)) {
    hideGame();
  }
}","public synchronized void showGame(UUID gameId,UUID playerId){
  this.gameId=gameId;
  this.playerId=playerId;
  session=MageFrame.getSession();
  MageFrame.addGame(gameId,this);
  this.feedbackPanel.init(gameId);
  this.feedbackPanel.clear();
  this.abilityPicker.init(session,gameId);
  this.btnConcede.setVisible(true);
  this.btnEndTurn.setVisible(true);
  this.btnSwitchHands.setVisible(false);
  this.pnlReplay.setVisible(false);
  this.btnStopWatching.setVisible(false);
  this.gameChatPanel.clear();
  this.gameChatPanel.connect(session.getGameChatId(gameId));
  if (!session.joinGame(gameId)) {
    removeGame();
  }
}",0.9936
159531,"public synchronized void replayGame(UUID gameId){
  this.gameId=gameId;
  this.playerId=null;
  session=MageFrame.getSession();
  MageFrame.addGame(gameId,this);
  this.feedbackPanel.init(gameId);
  this.feedbackPanel.clear();
  this.btnConcede.setVisible(false);
  this.btnEndTurn.setVisible(false);
  this.btnSwitchHands.setVisible(false);
  this.btnStopWatching.setVisible(false);
  this.pnlReplay.setVisible(true);
  this.gameChatPanel.clear();
  if (!session.startReplay(gameId)) {
    hideGame();
  }
  for (  PlayAreaPanel panel : getPlayers().values()) {
    panel.setPlayingMode(false);
  }
}","public synchronized void replayGame(UUID gameId){
  this.gameId=gameId;
  this.playerId=null;
  session=MageFrame.getSession();
  MageFrame.addGame(gameId,this);
  this.feedbackPanel.init(gameId);
  this.feedbackPanel.clear();
  this.btnConcede.setVisible(false);
  this.btnEndTurn.setVisible(false);
  this.btnSwitchHands.setVisible(false);
  this.btnStopWatching.setVisible(false);
  this.pnlReplay.setVisible(true);
  this.gameChatPanel.clear();
  if (!session.startReplay(gameId)) {
    removeGame();
  }
  for (  PlayAreaPanel panel : getPlayers().values()) {
    panel.setPlayingMode(false);
  }
}",0.9933554817275748
159532,"public synchronized void watchGame(UUID gameId){
  this.gameId=gameId;
  this.playerId=null;
  session=MageFrame.getSession();
  MageFrame.addGame(gameId,this);
  this.feedbackPanel.init(gameId);
  this.feedbackPanel.clear();
  this.btnConcede.setVisible(false);
  this.btnEndTurn.setVisible(false);
  this.btnSwitchHands.setVisible(false);
  this.btnStopWatching.setVisible(true);
  this.pnlReplay.setVisible(false);
  this.gameChatPanel.clear();
  this.gameChatPanel.connect(session.getGameChatId(gameId));
  if (!session.watchGame(gameId)) {
    hideGame();
  }
  for (  PlayAreaPanel panel : getPlayers().values()) {
    panel.setPlayingMode(false);
  }
}","public synchronized void watchGame(UUID gameId){
  this.gameId=gameId;
  this.playerId=null;
  session=MageFrame.getSession();
  MageFrame.addGame(gameId,this);
  this.feedbackPanel.init(gameId);
  this.feedbackPanel.clear();
  this.btnConcede.setVisible(false);
  this.btnEndTurn.setVisible(false);
  this.btnSwitchHands.setVisible(false);
  this.btnStopWatching.setVisible(true);
  this.pnlReplay.setVisible(false);
  this.gameChatPanel.clear();
  this.gameChatPanel.connect(session.getGameChatId(gameId));
  if (!session.watchGame(gameId)) {
    removeGame();
  }
  for (  PlayAreaPanel panel : getPlayers().values()) {
    panel.setPlayingMode(false);
  }
}",0.993939393939394
159533,"private void addPopupMenuWatcher(){
  JMenuItem menuItem;
  menuItem=new JMenuItem(""String_Node_Str"");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (JOptionPane.showConfirmDialog(PlayAreaPanel.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
        gamePanel.getSession().stopWatching(gameId);
        gamePanel.hideGame();
      }
    }
  }
);
  battlefieldPanel.getMainPanel().addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent Me){
      if (Me.isPopupTrigger() && playingMode) {
        popupMenu.show(Me.getComponent(),Me.getX(),Me.getY());
      }
    }
  }
);
}","private void addPopupMenuWatcher(){
  JMenuItem menuItem;
  menuItem=new JMenuItem(""String_Node_Str"");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (JOptionPane.showConfirmDialog(PlayAreaPanel.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
        gamePanel.getSession().stopWatching(gameId);
        gamePanel.removeGame();
      }
    }
  }
);
  battlefieldPanel.getMainPanel().addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent Me){
      if (Me.isPopupTrigger() && playingMode) {
        popupMenu.show(Me.getComponent(),Me.getX(),Me.getY());
      }
    }
  }
);
}",0.9947575360419396
159534,"@Override public synchronized void processCallback(final ClientCallback callback){
  logger.debug(callback.getMessageId() + ""String_Node_Str"" + callback.getMethod());
  SaveObjectUtil.saveObject(callback.getData(),callback.getMethod());
  callback.setData(CompressUtil.decompress(callback.getData()));
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      try {
        logger.debug(callback.getMessageId() + ""String_Node_Str"" + callback.getMethod());
        if (callback.getMethod().equals(""String_Node_Str"")) {
          TableClientMessage message=(TableClientMessage)callback.getData();
          GameManager.getInstance().setCurrentPlayerUUID(message.getPlayerId());
          gameStarted(message.getGameId(),message.getPlayerId());
        }
 else         if (callback.getMethod().equals(""String_Node_Str"")) {
          TableClientMessage message=(TableClientMessage)callback.getData();
          tournamentStarted(message.getGameId(),message.getPlayerId());
        }
 else         if (callback.getMethod().equals(""String_Node_Str"")) {
          TableClientMessage message=(TableClientMessage)callback.getData();
          draftStarted(message.getGameId(),message.getPlayerId());
        }
 else         if (callback.getMethod().equals(""String_Node_Str"")) {
          replayGame(callback.getObjectId());
        }
 else         if (callback.getMethod().equals(""String_Node_Str"")) {
          showTournament((UUID)callback.getObjectId());
        }
 else         if (callback.getMethod().equals(""String_Node_Str"")) {
          watchGame((UUID)callback.getObjectId());
        }
 else         if (callback.getMethod().equals(""String_Node_Str"")) {
          ChatMessage message=(ChatMessage)callback.getData();
          ChatPanel panel=MageFrame.getChat(callback.getObjectId());
          if (panel != null) {
            if (message.getSoundToPlay() != null) {
switch (message.getSoundToPlay()) {
case PlayerLeft:
                AudioManager.playPlayerLeft();
              break;
case PlayerSubmittedDeck:
            AudioManager.playPlayerSubmittedDeck();
          break;
case PlayerWhispered:
        AudioManager.playPlayerWhispered();
      break;
  }
}
if (!panel.isStartMessageDone()) {
  createChatStartMessage(panel);
}
if (!message.getMessageType().equals(MessageType.GAME) && panel.getConnectedChat() != null) {
  panel.getConnectedChat().receiveMessage(message.getUsername(),message.getMessage(),message.getTime(),message.getMessageType(),ChatMessage.MessageColor.BLACK);
}
 else {
  panel.receiveMessage(message.getUsername(),message.getMessage(),message.getTime(),message.getMessageType(),message.getColor());
}
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
if (callback.getData() != null) {
ChatMessage message=(ChatMessage)callback.getData();
if (message.getColor().equals(ChatMessage.MessageColor.RED)) {
  JOptionPane.showMessageDialog(null,message.getMessage(),""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
}
 else {
  JOptionPane.showMessageDialog(null,message.getMessage(),""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
TableClientMessage message=(TableClientMessage)callback.getData();
joinedTable(message.getRoomId(),message.getTableId(),message.getFlag());
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.init((GameView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.endMessage((String)callback.getData(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.updateGame((GameView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.init((GameView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.endMessage((String)callback.getData(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
frame.showErrorDialog(""String_Node_Str"",(String)callback.getData());
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.ask(message.getMessage(),message.getGameView(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.pickTarget(message.getMessage(),message.getCardsView(),message.getGameView(),message.getTargets(),message.isFlag(),message.getOptions(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.select(message.getMessage(),message.getGameView(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.pickAbility((AbilityPickerView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.pickPile(message.getMessage(),message.getPile1(),message.getPile2());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.getChoice(message.getMessage(),message.getStrings());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.playMana(message.getMessage(),message.getGameView(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.playXMana(message.getMessage(),message.getGameView(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.getAmount(message.getMin(),message.getMax(),message.getMessage());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.updateGame((GameView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
MageFrame.getInstance().showGameEndDialog((GameEndView)callback.getData());
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
List<String> messageData=(List<String>)callback.getData();
if (messageData.size() == 2) {
JOptionPane.showMessageDialog(null,messageData.get(1),messageData.get(0),JOptionPane.WARNING_MESSAGE);
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
if (callback.getMessageId() > messageId) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
  panel.inform(message.getMessage(),message.getGameView(),callback.getMessageId());
}
}
 else {
logger.warn(""String_Node_Str"");
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
JOptionPane.showMessageDialog(panel,message.getMessage(),""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
TableClientMessage message=(TableClientMessage)callback.getData();
DeckView deckView=message.getDeck();
Deck deck=DeckUtil.construct(deckView);
if (message.getFlag()) {
construct(deck,message.getTableId(),message.getTime());
}
 else {
sideboard(deck,message.getTableId(),message.getTime());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
TableClientMessage message=(TableClientMessage)callback.getData();
DeckView deckView=message.getDeck();
Deck deck=DeckUtil.construct(deckView);
construct(deck,message.getTableId(),message.getTime());
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
MageFrame.removeDraft(callback.getObjectId());
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
DraftClientMessage message=(DraftClientMessage)callback.getData();
DraftPanel panel=MageFrame.getDraft(callback.getObjectId());
if (panel != null) {
panel.loadBooster(message.getDraftPickView());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
DraftPanel panel=MageFrame.getDraft(callback.getObjectId());
if (panel != null) {
panel.updateDraft((DraftView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
if (callback.getMessageId() > messageId) {
DraftClientMessage message=(DraftClientMessage)callback.getData();
}
 else {
logger.warn(""String_Node_Str"");
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
DraftClientMessage message=(DraftClientMessage)callback.getData();
DraftPanel panel=MageFrame.getDraft(callback.getObjectId());
if (panel != null) {
panel.loadBooster(message.getDraftPickView());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
}
messageId=callback.getMessageId();
}
 catch (Exception ex) {
handleException(ex);
}
}
}
);
}","@Override public synchronized void processCallback(final ClientCallback callback){
  logger.debug(callback.getMessageId() + ""String_Node_Str"" + callback.getMethod());
  SaveObjectUtil.saveObject(callback.getData(),callback.getMethod());
  callback.setData(CompressUtil.decompress(callback.getData()));
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      try {
        logger.debug(callback.getMessageId() + ""String_Node_Str"" + callback.getMethod());
        if (callback.getMethod().equals(""String_Node_Str"")) {
          TableClientMessage message=(TableClientMessage)callback.getData();
          GameManager.getInstance().setCurrentPlayerUUID(message.getPlayerId());
          gameStarted(message.getGameId(),message.getPlayerId());
        }
 else         if (callback.getMethod().equals(""String_Node_Str"")) {
          TableClientMessage message=(TableClientMessage)callback.getData();
          tournamentStarted(message.getGameId(),message.getPlayerId());
        }
 else         if (callback.getMethod().equals(""String_Node_Str"")) {
          TableClientMessage message=(TableClientMessage)callback.getData();
          draftStarted(message.getGameId(),message.getPlayerId());
        }
 else         if (callback.getMethod().equals(""String_Node_Str"")) {
          replayGame(callback.getObjectId());
        }
 else         if (callback.getMethod().equals(""String_Node_Str"")) {
          showTournament((UUID)callback.getObjectId());
        }
 else         if (callback.getMethod().equals(""String_Node_Str"")) {
          watchGame((UUID)callback.getObjectId());
        }
 else         if (callback.getMethod().equals(""String_Node_Str"")) {
          ChatMessage message=(ChatMessage)callback.getData();
          ChatPanel panel=MageFrame.getChat(callback.getObjectId());
          if (panel != null) {
            if (message.getSoundToPlay() != null) {
switch (message.getSoundToPlay()) {
case PlayerLeft:
                AudioManager.playPlayerLeft();
              break;
case PlayerSubmittedDeck:
            AudioManager.playPlayerSubmittedDeck();
          break;
case PlayerWhispered:
        AudioManager.playPlayerWhispered();
      break;
  }
}
if (!panel.isStartMessageDone()) {
  createChatStartMessage(panel);
}
if (!message.getMessageType().equals(MessageType.GAME) && panel.getConnectedChat() != null) {
  panel.getConnectedChat().receiveMessage(message.getUsername(),message.getMessage(),message.getTime(),message.getMessageType(),ChatMessage.MessageColor.BLACK);
}
 else {
  panel.receiveMessage(message.getUsername(),message.getMessage(),message.getTime(),message.getMessageType(),message.getColor());
}
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
if (callback.getData() != null) {
ChatMessage message=(ChatMessage)callback.getData();
if (message.getColor().equals(ChatMessage.MessageColor.RED)) {
  JOptionPane.showMessageDialog(null,message.getMessage(),""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
}
 else {
  JOptionPane.showMessageDialog(null,message.getMessage(),""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
TableClientMessage message=(TableClientMessage)callback.getData();
joinedTable(message.getRoomId(),message.getTableId(),message.getFlag());
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.init((GameView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.endMessage((String)callback.getData(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.updateGame((GameView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.init((GameView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.endMessage((String)callback.getData(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
frame.showErrorDialog(""String_Node_Str"",(String)callback.getData());
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.ask(message.getMessage(),message.getGameView(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.pickTarget(message.getMessage(),message.getCardsView(),message.getGameView(),message.getTargets(),message.isFlag(),message.getOptions(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.select(message.getMessage(),message.getGameView(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.pickAbility((AbilityPickerView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.pickPile(message.getMessage(),message.getPile1(),message.getPile2());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.getChoice(message.getMessage(),message.getStrings());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.playMana(message.getMessage(),message.getGameView(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.playXMana(message.getMessage(),message.getGameView(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.getAmount(message.getMin(),message.getMax(),message.getMessage());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.updateGame((GameView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
MageFrame.getInstance().showGameEndDialog((GameEndView)callback.getData());
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
List<String> messageData=(List<String>)callback.getData();
if (messageData.size() == 2) {
JOptionPane.showMessageDialog(null,messageData.get(1),messageData.get(0),JOptionPane.WARNING_MESSAGE);
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
if (callback.getMessageId() > gameInformMessageId) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
  panel.inform(message.getMessage(),message.getGameView(),callback.getMessageId());
}
}
 else {
logger.warn(new StringBuilder(""String_Node_Str"").append(""String_Node_Str"").append(callback.getMessageId()).append(""String_Node_Str"").append(callback.getMethod()));
}
gameInformMessageId=messageId;
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
JOptionPane.showMessageDialog(panel,message.getMessage(),""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
TableClientMessage message=(TableClientMessage)callback.getData();
DeckView deckView=message.getDeck();
Deck deck=DeckUtil.construct(deckView);
if (message.getFlag()) {
construct(deck,message.getTableId(),message.getTime());
}
 else {
sideboard(deck,message.getTableId(),message.getTime());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
TableClientMessage message=(TableClientMessage)callback.getData();
DeckView deckView=message.getDeck();
Deck deck=DeckUtil.construct(deckView);
construct(deck,message.getTableId(),message.getTime());
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
MageFrame.removeDraft(callback.getObjectId());
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
DraftClientMessage message=(DraftClientMessage)callback.getData();
DraftPanel panel=MageFrame.getDraft(callback.getObjectId());
if (panel != null) {
panel.loadBooster(message.getDraftPickView());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
DraftPanel panel=MageFrame.getDraft(callback.getObjectId());
if (panel != null) {
panel.updateDraft((DraftView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
if (callback.getMessageId() > messageId) {
DraftClientMessage message=(DraftClientMessage)callback.getData();
}
 else {
logger.warn(""String_Node_Str"");
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
DraftClientMessage message=(DraftClientMessage)callback.getData();
DraftPanel panel=MageFrame.getDraft(callback.getObjectId());
if (panel != null) {
panel.loadBooster(message.getDraftPickView());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
}
messageId=callback.getMessageId();
}
 catch (Exception ex) {
handleException(ex);
}
}
}
);
}",0.9914219891181804
159535,"@Override public void run(){
  try {
    logger.debug(callback.getMessageId() + ""String_Node_Str"" + callback.getMethod());
    if (callback.getMethod().equals(""String_Node_Str"")) {
      TableClientMessage message=(TableClientMessage)callback.getData();
      GameManager.getInstance().setCurrentPlayerUUID(message.getPlayerId());
      gameStarted(message.getGameId(),message.getPlayerId());
    }
 else     if (callback.getMethod().equals(""String_Node_Str"")) {
      TableClientMessage message=(TableClientMessage)callback.getData();
      tournamentStarted(message.getGameId(),message.getPlayerId());
    }
 else     if (callback.getMethod().equals(""String_Node_Str"")) {
      TableClientMessage message=(TableClientMessage)callback.getData();
      draftStarted(message.getGameId(),message.getPlayerId());
    }
 else     if (callback.getMethod().equals(""String_Node_Str"")) {
      replayGame(callback.getObjectId());
    }
 else     if (callback.getMethod().equals(""String_Node_Str"")) {
      showTournament((UUID)callback.getObjectId());
    }
 else     if (callback.getMethod().equals(""String_Node_Str"")) {
      watchGame((UUID)callback.getObjectId());
    }
 else     if (callback.getMethod().equals(""String_Node_Str"")) {
      ChatMessage message=(ChatMessage)callback.getData();
      ChatPanel panel=MageFrame.getChat(callback.getObjectId());
      if (panel != null) {
        if (message.getSoundToPlay() != null) {
switch (message.getSoundToPlay()) {
case PlayerLeft:
            AudioManager.playPlayerLeft();
          break;
case PlayerSubmittedDeck:
        AudioManager.playPlayerSubmittedDeck();
      break;
case PlayerWhispered:
    AudioManager.playPlayerWhispered();
  break;
}
}
if (!panel.isStartMessageDone()) {
createChatStartMessage(panel);
}
if (!message.getMessageType().equals(MessageType.GAME) && panel.getConnectedChat() != null) {
panel.getConnectedChat().receiveMessage(message.getUsername(),message.getMessage(),message.getTime(),message.getMessageType(),ChatMessage.MessageColor.BLACK);
}
 else {
panel.receiveMessage(message.getUsername(),message.getMessage(),message.getTime(),message.getMessageType(),message.getColor());
}
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
if (callback.getData() != null) {
ChatMessage message=(ChatMessage)callback.getData();
if (message.getColor().equals(ChatMessage.MessageColor.RED)) {
JOptionPane.showMessageDialog(null,message.getMessage(),""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
}
 else {
JOptionPane.showMessageDialog(null,message.getMessage(),""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
TableClientMessage message=(TableClientMessage)callback.getData();
joinedTable(message.getRoomId(),message.getTableId(),message.getFlag());
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.init((GameView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.endMessage((String)callback.getData(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.updateGame((GameView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.init((GameView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.endMessage((String)callback.getData(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
frame.showErrorDialog(""String_Node_Str"",(String)callback.getData());
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.ask(message.getMessage(),message.getGameView(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.pickTarget(message.getMessage(),message.getCardsView(),message.getGameView(),message.getTargets(),message.isFlag(),message.getOptions(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.select(message.getMessage(),message.getGameView(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.pickAbility((AbilityPickerView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.pickPile(message.getMessage(),message.getPile1(),message.getPile2());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.getChoice(message.getMessage(),message.getStrings());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.playMana(message.getMessage(),message.getGameView(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.playXMana(message.getMessage(),message.getGameView(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.getAmount(message.getMin(),message.getMax(),message.getMessage());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.updateGame((GameView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
MageFrame.getInstance().showGameEndDialog((GameEndView)callback.getData());
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
List<String> messageData=(List<String>)callback.getData();
if (messageData.size() == 2) {
JOptionPane.showMessageDialog(null,messageData.get(1),messageData.get(0),JOptionPane.WARNING_MESSAGE);
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
if (callback.getMessageId() > messageId) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.inform(message.getMessage(),message.getGameView(),callback.getMessageId());
}
}
 else {
logger.warn(""String_Node_Str"");
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
JOptionPane.showMessageDialog(panel,message.getMessage(),""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
TableClientMessage message=(TableClientMessage)callback.getData();
DeckView deckView=message.getDeck();
Deck deck=DeckUtil.construct(deckView);
if (message.getFlag()) {
construct(deck,message.getTableId(),message.getTime());
}
 else {
sideboard(deck,message.getTableId(),message.getTime());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
TableClientMessage message=(TableClientMessage)callback.getData();
DeckView deckView=message.getDeck();
Deck deck=DeckUtil.construct(deckView);
construct(deck,message.getTableId(),message.getTime());
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
MageFrame.removeDraft(callback.getObjectId());
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
DraftClientMessage message=(DraftClientMessage)callback.getData();
DraftPanel panel=MageFrame.getDraft(callback.getObjectId());
if (panel != null) {
panel.loadBooster(message.getDraftPickView());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
DraftPanel panel=MageFrame.getDraft(callback.getObjectId());
if (panel != null) {
panel.updateDraft((DraftView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
if (callback.getMessageId() > messageId) {
DraftClientMessage message=(DraftClientMessage)callback.getData();
}
 else {
logger.warn(""String_Node_Str"");
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
DraftClientMessage message=(DraftClientMessage)callback.getData();
DraftPanel panel=MageFrame.getDraft(callback.getObjectId());
if (panel != null) {
panel.loadBooster(message.getDraftPickView());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
}
messageId=callback.getMessageId();
}
 catch (Exception ex) {
handleException(ex);
}
}","@Override public void run(){
  try {
    logger.debug(callback.getMessageId() + ""String_Node_Str"" + callback.getMethod());
    if (callback.getMethod().equals(""String_Node_Str"")) {
      TableClientMessage message=(TableClientMessage)callback.getData();
      GameManager.getInstance().setCurrentPlayerUUID(message.getPlayerId());
      gameStarted(message.getGameId(),message.getPlayerId());
    }
 else     if (callback.getMethod().equals(""String_Node_Str"")) {
      TableClientMessage message=(TableClientMessage)callback.getData();
      tournamentStarted(message.getGameId(),message.getPlayerId());
    }
 else     if (callback.getMethod().equals(""String_Node_Str"")) {
      TableClientMessage message=(TableClientMessage)callback.getData();
      draftStarted(message.getGameId(),message.getPlayerId());
    }
 else     if (callback.getMethod().equals(""String_Node_Str"")) {
      replayGame(callback.getObjectId());
    }
 else     if (callback.getMethod().equals(""String_Node_Str"")) {
      showTournament((UUID)callback.getObjectId());
    }
 else     if (callback.getMethod().equals(""String_Node_Str"")) {
      watchGame((UUID)callback.getObjectId());
    }
 else     if (callback.getMethod().equals(""String_Node_Str"")) {
      ChatMessage message=(ChatMessage)callback.getData();
      ChatPanel panel=MageFrame.getChat(callback.getObjectId());
      if (panel != null) {
        if (message.getSoundToPlay() != null) {
switch (message.getSoundToPlay()) {
case PlayerLeft:
            AudioManager.playPlayerLeft();
          break;
case PlayerSubmittedDeck:
        AudioManager.playPlayerSubmittedDeck();
      break;
case PlayerWhispered:
    AudioManager.playPlayerWhispered();
  break;
}
}
if (!panel.isStartMessageDone()) {
createChatStartMessage(panel);
}
if (!message.getMessageType().equals(MessageType.GAME) && panel.getConnectedChat() != null) {
panel.getConnectedChat().receiveMessage(message.getUsername(),message.getMessage(),message.getTime(),message.getMessageType(),ChatMessage.MessageColor.BLACK);
}
 else {
panel.receiveMessage(message.getUsername(),message.getMessage(),message.getTime(),message.getMessageType(),message.getColor());
}
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
if (callback.getData() != null) {
ChatMessage message=(ChatMessage)callback.getData();
if (message.getColor().equals(ChatMessage.MessageColor.RED)) {
JOptionPane.showMessageDialog(null,message.getMessage(),""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
}
 else {
JOptionPane.showMessageDialog(null,message.getMessage(),""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
TableClientMessage message=(TableClientMessage)callback.getData();
joinedTable(message.getRoomId(),message.getTableId(),message.getFlag());
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.init((GameView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.endMessage((String)callback.getData(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.updateGame((GameView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.init((GameView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.endMessage((String)callback.getData(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
frame.showErrorDialog(""String_Node_Str"",(String)callback.getData());
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.ask(message.getMessage(),message.getGameView(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.pickTarget(message.getMessage(),message.getCardsView(),message.getGameView(),message.getTargets(),message.isFlag(),message.getOptions(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.select(message.getMessage(),message.getGameView(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.pickAbility((AbilityPickerView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.pickPile(message.getMessage(),message.getPile1(),message.getPile2());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.getChoice(message.getMessage(),message.getStrings());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.playMana(message.getMessage(),message.getGameView(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.playXMana(message.getMessage(),message.getGameView(),callback.getMessageId());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.getAmount(message.getMin(),message.getMax(),message.getMessage());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.updateGame((GameView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
MageFrame.getInstance().showGameEndDialog((GameEndView)callback.getData());
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
List<String> messageData=(List<String>)callback.getData();
if (messageData.size() == 2) {
JOptionPane.showMessageDialog(null,messageData.get(1),messageData.get(0),JOptionPane.WARNING_MESSAGE);
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
if (callback.getMessageId() > gameInformMessageId) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
panel.inform(message.getMessage(),message.getGameView(),callback.getMessageId());
}
}
 else {
logger.warn(new StringBuilder(""String_Node_Str"").append(""String_Node_Str"").append(callback.getMessageId()).append(""String_Node_Str"").append(callback.getMethod()));
}
gameInformMessageId=messageId;
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
GameClientMessage message=(GameClientMessage)callback.getData();
GamePanel panel=MageFrame.getGame(callback.getObjectId());
if (panel != null) {
JOptionPane.showMessageDialog(panel,message.getMessage(),""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
TableClientMessage message=(TableClientMessage)callback.getData();
DeckView deckView=message.getDeck();
Deck deck=DeckUtil.construct(deckView);
if (message.getFlag()) {
construct(deck,message.getTableId(),message.getTime());
}
 else {
sideboard(deck,message.getTableId(),message.getTime());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
TableClientMessage message=(TableClientMessage)callback.getData();
DeckView deckView=message.getDeck();
Deck deck=DeckUtil.construct(deckView);
construct(deck,message.getTableId(),message.getTime());
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
MageFrame.removeDraft(callback.getObjectId());
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
DraftClientMessage message=(DraftClientMessage)callback.getData();
DraftPanel panel=MageFrame.getDraft(callback.getObjectId());
if (panel != null) {
panel.loadBooster(message.getDraftPickView());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
DraftPanel panel=MageFrame.getDraft(callback.getObjectId());
if (panel != null) {
panel.updateDraft((DraftView)callback.getData());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
if (callback.getMessageId() > messageId) {
DraftClientMessage message=(DraftClientMessage)callback.getData();
}
 else {
logger.warn(""String_Node_Str"");
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
DraftClientMessage message=(DraftClientMessage)callback.getData();
DraftPanel panel=MageFrame.getDraft(callback.getObjectId());
if (panel != null) {
panel.loadBooster(message.getDraftPickView());
}
}
 else if (callback.getMethod().equals(""String_Node_Str"")) {
}
messageId=callback.getMessageId();
}
 catch (Exception ex) {
handleException(ex);
}
}",0.9909686742013728
159536,"@Override public void gameResult(String result){
  try {
    endGame(result);
  }
 catch (  MageException ex) {
    logger.fatal(""String_Node_Str"",ex);
  }
}","@Override public void gameResult(String result){
  try {
    logger.warn(""String_Node_Str"" + result);
    endGame(result);
  }
 catch (  MageException ex) {
    logger.fatal(""String_Node_Str"",ex);
  }
}",0.8746518105849582
159537,"public void update(){
  if (!killed) {
    User user=UserManager.getInstance().getUser(userId);
    if (user != null) {
      user.fireCallback(new ClientCallback(""String_Node_Str"",game.getId(),getGameView()));
    }
  }
}","public void update(){
  if (!killed) {
    User user=UserManager.getInstance().getUser(userId);
    if (user != null) {
      logger.warn(""String_Node_Str"");
      GameView gameView=getGameView();
      logger.warn(""String_Node_Str"");
      UUID id=game.getId();
      logger.warn(""String_Node_Str"");
      ClientCallback clientCallback=new ClientCallback(""String_Node_Str"",id,gameView);
      logger.warn(""String_Node_Str"");
      user.fireCallback(clientCallback);
      logger.warn(""String_Node_Str"");
    }
  }
}",0.5121951219512195
159538,"public GameView getGameView(){
  return new GameView(game.getState(),game,this.isPlayer);
}","public GameView getGameView(){
  logger.warn(""String_Node_Str"");
  GameState gameState=game.getState();
  logger.warn(""String_Node_Str"");
  GameView gameView=new GameView(gameState,game,this.isPlayer);
  logger.warn(""String_Node_Str"");
  return gameView;
}",0.3227665706051873
159539,"@Override public Object call(){
  try {
    game.start(choosingPlayerId);
    game.fireUpdatePlayersEvent();
    result.gameResult(game.getWinner());
  }
 catch (  MageException ex) {
    logger.fatal(""String_Node_Str"",ex);
  }
  return null;
}","@Override public Object call(){
  try {
    game.start(choosingPlayerId);
    game.fireUpdatePlayersEvent();
    result.gameResult(game.getWinner());
    game.cleanUp();
  }
 catch (  MageException ex) {
    logger.fatal(""String_Node_Str"",ex);
  }
  return null;
}",0.9606299212598424
159540,"@Override public void end(){
  if (!state.isGameOver()) {
    state.endGame();
    for (    Player player : state.getPlayers().values()) {
      player.abort();
    }
    gameCards.clear();
  }
}","@Override public void end(){
  if (!state.isGameOver()) {
    state.endGame();
    for (    Player player : state.getPlayers().values()) {
      player.abort();
    }
  }
}",0.9373297002724796
159541,"public void checkTriggers(GameEvent event,Game game){
  for (  TriggeredAbility ability : this.values()) {
    if (ability.isInUseableZone(game,null,true)) {
      MageObject object=null;
      if (!ability.getZone().equals(Zone.COMMAND) && !game.getState().getZone(ability.getSourceId()).equals(ability.getZone())) {
        object=game.getShortLivingLKI(ability.getSourceId(),ability.getZone());
      }
      if (object == null) {
        object=getMageObject(event,game,ability);
      }
      if (object != null) {
        if (checkAbilityStillExists(ability,event,object)) {
          if (object instanceof Permanent) {
            ability.setControllerId(((Permanent)object).getControllerId());
          }
          if (ability.checkTrigger(event,game)) {
            UUID controllerId=ability.getControllerId();
            ability.trigger(game,controllerId);
          }
        }
      }
    }
  }
}","public void checkTriggers(GameEvent event,Game game){
  for (  TriggeredAbility ability : this.values()) {
    if (ability.isInUseableZone(game,null,event.getType().equals(GameEvent.EventType.ZONE_CHANGE) ? true : false)) {
      MageObject object=null;
      if (!ability.getZone().equals(Zone.COMMAND) && !game.getState().getZone(ability.getSourceId()).equals(ability.getZone())) {
        object=game.getShortLivingLKI(ability.getSourceId(),ability.getZone());
      }
      if (object == null) {
        object=getMageObject(event,game,ability);
      }
      if (object != null) {
        if (checkAbilityStillExists(ability,event,object)) {
          if (object instanceof Permanent) {
            ability.setControllerId(((Permanent)object).getControllerId());
          }
          if (ability.checkTrigger(event,game)) {
            UUID controllerId=ability.getControllerId();
            ability.trigger(game,controllerId);
          }
        }
      }
    }
  }
}",0.9618239660657476
159542,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
switch (targetController) {
case OPPONENT:
      for (      UUID playerId : game.getOpponents(source.getControllerId())) {
        putCardsToGravecard(playerId,source,game);
      }
    break;
case ANY:
  for (  UUID playerId : player.getInRange()) {
    putCardsToGravecard(playerId,source,game);
  }
break;
case NOT_YOU:
for (UUID playerId : player.getInRange()) {
if (!playerId.equals(source.getSourceId())) {
  putCardsToGravecard(playerId,source,game);
}
}
default :
throw new UnsupportedOperationException(""String_Node_Str"");
}
int cardsCount=Math.min(numberCards,player.getLibrary().size());
for (int i=0; i < cardsCount; i++) {
Card card=player.getLibrary().removeFromTop(game);
if (card != null) {
card.moveToZone(Zone.GRAVEYARD,source.getId(),game,true);
}
}
return true;
}
return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
switch (targetController) {
case OPPONENT:
      for (      UUID playerId : game.getOpponents(source.getControllerId())) {
        putCardsToGravecard(playerId,source,game);
      }
    break;
case ANY:
  for (  UUID playerId : player.getInRange()) {
    putCardsToGravecard(playerId,source,game);
  }
break;
case NOT_YOU:
for (UUID playerId : player.getInRange()) {
if (!playerId.equals(source.getSourceId())) {
  putCardsToGravecard(playerId,source,game);
}
}
break;
default :
throw new UnsupportedOperationException(""String_Node_Str"");
}
return true;
}
return false;
}",0.8218181818181818
159543,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getSourceId());
  if (permanent == null) {
    permanent=(Permanent)game.getLastKnownInformation(source.getFirstTarget(),Zone.BATTLEFIELD);
  }
  if (permanent != null) {
    EmptyToken newToken=new EmptyToken();
    CardUtil.copyTo(newToken).from(permanent);
    return newToken.putOntoBattlefield(1,game,source.getSourceId(),source.getControllerId());
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getSourceId());
  if (permanent == null) {
    permanent=(Permanent)game.getLastKnownInformation(source.getSourceId(),Zone.BATTLEFIELD);
  }
  if (permanent != null) {
    EmptyToken newToken=new EmptyToken();
    CardUtil.copyTo(newToken).from(permanent);
    return newToken.putOntoBattlefield(1,game,source.getSourceId(),source.getControllerId());
  }
  return false;
}",0.980146290491118
159544,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (super.applies(event,source,game) && event instanceof DamageEvent) {
    Permanent targetPermanent=game.getPermanent(getTargetPointer().getFirst(game,source));
    if (event.getSourceId().equals(targetPermanent.getId()) || event.getTargetId().equals(targetPermanent.getId())) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (super.applies(event,source,game) && event instanceof DamageEvent) {
    Permanent targetPermanent=game.getPermanent(this.getTargetPointer().getFirst(game,source));
    if (targetPermanent != null && (event.getSourceId().equals(targetPermanent.getId()) || event.getTargetId().equals(targetPermanent.getId()))) {
      return true;
    }
  }
  return false;
}",0.9597156398104264
159545,"/** 
 * @param game
 * @param playerId
 * @param forceChange - does only work for targets with maximal one targetId
 * @param onlyOneTarget - 114.6b one target must be changed to another target
 * @return
 */
public boolean chooseNewTargets(Game game,UUID playerId,boolean forceChange,boolean onlyOneTarget){
  Player player=game.getPlayer(playerId);
  if (player != null) {
    for (    SpellAbility spellAbility : spellAbilities) {
      for (      Target target : spellAbility.getTargets()) {
        Target newTarget=target.copy();
        newTarget.clearChosen();
        for (        UUID targetId : target.getTargets()) {
          MageObject object=game.getObject(targetId);
          String name=null;
          if (object == null) {
            Player targetPlayer=game.getPlayer(targetId);
            if (targetPlayer != null) {
              name=targetPlayer.getName();
            }
          }
 else {
            name=object.getName();
          }
          if (name != null && (forceChange || player.chooseUse(spellAbility.getEffects().get(0).getOutcome(),""String_Node_Str"" + name + ""String_Node_Str"",game))) {
            if (forceChange && target.possibleTargets(this.getSourceId(),playerId,game).size() > 1) {
              int iteration=0;
              do {
                if (iteration > 0) {
                  game.informPlayer(player,""String_Node_Str"");
                }
                iteration++;
                newTarget.clearChosen();
                player.chooseTarget(spellAbility.getEffects().get(0).getOutcome(),newTarget,spellAbility,game);
              }
 while (targetId.equals(newTarget.getFirstTarget()) || newTarget.getTargets().size() != 1);
            }
 else {
              if (!player.chooseTarget(spellAbility.getEffects().get(0).getOutcome(),newTarget,spellAbility,game)) {
                newTarget.addTarget(targetId,spellAbility,game,false);
              }
            }
          }
 else {
            newTarget.addTarget(targetId,spellAbility,game,false);
          }
        }
        target.clearChosen();
        for (        UUID newTargetId : newTarget.getTargets()) {
          target.addTarget(newTargetId,spellAbility,game,false);
        }
      }
    }
    return true;
  }
  return false;
}","/** 
 * 114.6. Some effects allow a player to change the target(s) of a spell or ability, and other effects allow a player to choose new targets for a spell or ability.  114.6a If an effect allows a player to ""change the target(s)"" of a spell or ability, each target can be changed only to another legal target. If a target can't be changed to another legal target, the original target is unchanged, even if the original target is itself illegal by then. If all the targets aren't changed to other legal targets, none of them are changed.  114.6b If an effect allows a player to ""change a target"" of a  spell or ability, the process described in rule 114.6a is followed, except that only one of those targets may be changed (rather than all of them or none of them).  114.6c If an effect allows a player to ""change any targets"" of a spell or ability, the process described in rule 114.6a is followed, except that any number of those targets may be changed (rather than all of them or none of them).  114.6d If an effect allows a player to ""choose new targets"" for a spell or ability, the player may leave any number of the targets unchanged, even if those targets would be illegal. If the player chooses to change some or all of the targets, the new targets must be legal and must not cause any unchanged targets to become illegal.  114.6e When changing targets or choosing new targets for a spell or ability, only the final set of targets is evaluated to determine whether the change is legal. Example: Arc Trail is a sorcery that reads ""Arc Trail deals 2 damage to target creature or player and 1 damage to another target creature or player."" The current targets of Arc Trail are Runeclaw Bear and Llanowar Elves, in that order. You cast Redirect, an instant that reads ""You may choose new targets for target spell,"" targeting Arc Trail. You can change the first target to Llanowar Elves and change the second target to Runeclaw Bear. 114.7. Modal spells and abilities may have different targeting requirements for each mode. An effect that allows a player to change the target(s) of a modal spell or ability, or to choose new targets for a modal spell or ability, doesn't allow that player to change its mode. (See rule 700.2.) 706.10c Some effects copy a spell or ability and state that its controller may choose new targets for the copy. The player may leave any number of the targets unchanged, even if those targets would be illegal. If the player chooses to change some or all of the targets, the new targets must be legal. Once the player has decided what the copy's targets will be, the copy is put onto the stack with those targets.
 * @param game
 * @param playerId
 * @param forceChange - does only work for targets with maximum of onetargetId
 * @param onlyOneTarget - 114.6b one target must be changed to anothertarget
 * @return
 */
public boolean chooseNewTargets(Game game,UUID playerId,boolean forceChange,boolean onlyOneTarget){
  Player player=game.getPlayer(playerId);
  if (player != null) {
    for (    SpellAbility spellAbility : spellAbilities) {
      for (      UUID modeId : spellAbility.getModes().getSelectedModes()) {
        Mode mode=spellAbility.getModes().get(modeId);
        for (        Target target : mode.getTargets()) {
          Target newTarget=chooseNewTarget(player,spellAbility,mode,target,forceChange,game);
          target.clearChosen();
          for (          UUID targetId : newTarget.getTargets()) {
            target.addTarget(targetId,newTarget.getTargetAmount(targetId),spellAbility,game,false);
          }
        }
      }
    }
    return true;
  }
  return false;
}",0.1646300067888662
159546,"protected SpellsCostReductionEffect(SpellsCostReductionEffect effect){
  super(effect);
  this.filter=effect.filter;
  this.amount=effect.amount;
}","protected SpellsCostReductionEffect(SpellsCostReductionEffect effect){
  super(effect);
  this.filter=effect.filter;
  this.amount=effect.amount;
  this.manaCostsToReduce=effect.manaCostsToReduce;
}",0.8521739130434782
159547,"@Override public boolean apply(Game game,Ability source){
  Card card=game.getCard(source.getFirstTarget());
  if (card != null) {
    EmptyToken token=new EmptyToken();
    CardUtil.copyTo(token).from(card);
    if (!token.getCardType().contains(CardType.ENCHANTMENT)) {
      token.getCardType().add(CardType.ENCHANTMENT);
    }
    token.addAbility(HasteAbility.getInstance());
    token.putOntoBattlefield(1,game,source.getSourceId(),source.getControllerId());
    ExileTargetEffect exileEffect=new ExileTargetEffect();
    exileEffect.setTargetPointer(new FixedTarget(token.getLastAddedToken()));
    DelayedTriggeredAbility delayedAbility=new AtEndOfTurnDelayedTriggeredAbility(exileEffect);
    delayedAbility.setSourceId(source.getSourceId());
    delayedAbility.setControllerId(source.getControllerId());
    game.addDelayedTriggeredAbility(delayedAbility);
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getFirstTarget());
  if (permanent == null) {
    permanent=(Permanent)game.getLastKnownInformation(source.getFirstTarget(),Zone.BATTLEFIELD);
  }
  if (permanent != null) {
    EmptyToken token=new EmptyToken();
    CardUtil.copyTo(token).from(permanent);
    if (!token.getCardType().contains(CardType.ENCHANTMENT)) {
      token.getCardType().add(CardType.ENCHANTMENT);
    }
    token.addAbility(HasteAbility.getInstance());
    token.putOntoBattlefield(1,game,source.getSourceId(),source.getControllerId());
    ExileTargetEffect exileEffect=new ExileTargetEffect();
    exileEffect.setTargetPointer(new FixedTarget(token.getLastAddedToken()));
    DelayedTriggeredAbility delayedAbility=new AtEndOfTurnDelayedTriggeredAbility(exileEffect);
    delayedAbility.setSourceId(source.getSourceId());
    delayedAbility.setControllerId(source.getControllerId());
    game.addDelayedTriggeredAbility(delayedAbility);
    return true;
  }
  return false;
}",0.9006622516556292
159548,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  MageObject mageObject=game.getObject(source.getSourceId());
  if (player != null && mageObject != null) {
    String message=new StringBuilder(getCostText()).append(""String_Node_Str"").append(executingEffect.getText(source.getModes().getMode())).append(""String_Node_Str"").toString();
    message=CardUtil.replaceSourceName(message,mageObject.getName());
    if (player.chooseUse(executingEffect.getOutcome(),message,game)) {
      cost.clearPaid();
      if (cost.pay(source,game,source.getSourceId(),source.getControllerId(),false)) {
        executingEffect.setTargetPointer(this.targetPointer);
        return executingEffect.apply(game,source);
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  MageObject mageObject=game.getObject(source.getSourceId());
  if (player != null && mageObject != null) {
    String message;
    if (chooseUseText == null) {
      message=new StringBuilder(getCostText()).append(""String_Node_Str"").append(executingEffect.getText(source.getModes().getMode())).append(""String_Node_Str"").toString();
    }
 else {
      message=chooseUseText;
    }
    message=CardUtil.replaceSourceName(message,mageObject.getName());
    if (player.chooseUse(executingEffect.getOutcome(),message,game)) {
      cost.clearPaid();
      if (cost.pay(source,game,source.getSourceId(),source.getControllerId(),false)) {
        executingEffect.setTargetPointer(this.targetPointer);
        return executingEffect.apply(game,source);
      }
    }
    return true;
  }
  return false;
}",0.9440276976341604
159549,"public DoIfCostPaid(final DoIfCostPaid effect){
  super(effect);
  this.executingEffect=(OneShotEffect)effect.executingEffect.copy();
  this.cost=effect.cost.copy();
}","public DoIfCostPaid(final DoIfCostPaid effect){
  super(effect);
  this.executingEffect=(OneShotEffect)effect.executingEffect.copy();
  this.cost=effect.cost.copy();
  this.chooseUseText=effect.chooseUseText;
}",0.8859416445623343
159550,"private void copyFromToken(Token token,Game game){
  this.name=token.getName();
  this.abilities.clear();
  for (  Ability ability : token.getAbilities()) {
    this.addAbility(ability,game);
  }
  this.manaCost.clear();
  for (  ManaCost cost : token.getManaCost()) {
    this.getManaCost().add(cost.copy());
  }
  this.cardType=token.getCardType();
  this.color=token.getColor();
  this.power=token.getPower();
  this.toughness=token.getToughness();
  this.subtype=token.getSubtype();
}","private void copyFromToken(Token token,Game game){
  this.name=token.getName();
  this.abilities.clear();
  for (  Ability ability : token.getAbilities()) {
    this.addAbility(ability,game);
  }
  this.manaCost.clear();
  for (  ManaCost cost : token.getManaCost()) {
    this.getManaCost().add(cost.copy());
  }
  this.cardType.addAll(token.getCardType());
  this.color=token.getColor().copy();
  this.power.initValue(token.getPower().getValue());
  this.toughness.initValue(token.getToughness().getValue());
  this.supertype.addAll(token.getSupertype());
  this.subtype.addAll(token.getSubtype());
}",0.653211009174312
159551,"public boolean putOntoBattlefield(int amount,Game game,UUID sourceId,UUID controllerId,boolean tapped,boolean attacking){
  Card source=game.getCard(sourceId);
  String setCode=source != null ? source.getExpansionSetCode() : null;
  GameEvent event=GameEvent.getEvent(EventType.CREATE_TOKEN,null,sourceId,controllerId,amount);
  if (!game.replaceEvent(event)) {
    amount=event.getAmount();
    for (int i=0; i < amount; i++) {
      PermanentToken newToken=new PermanentToken(this,controllerId,setCode,game);
      game.getState().addCard(newToken);
      game.addPermanent(newToken);
      if (tapped) {
        newToken.setTapped(true);
      }
      this.lastAddedTokenId=newToken.getId();
      game.setScopeRelevant(true);
      game.applyEffects();
      newToken.entersBattlefield(sourceId,game,Zone.OUTSIDE,true);
      game.setScopeRelevant(false);
      game.applyEffects();
      game.fireEvent(new ZoneChangeEvent(newToken,controllerId,Zone.OUTSIDE,Zone.BATTLEFIELD));
      if (attacking && game.getCombat() != null) {
        game.getCombat().addAttackingCreature(newToken.getId(),game);
      }
    }
    return true;
  }
  return false;
}","public boolean putOntoBattlefield(int amount,Game game,UUID sourceId,UUID controllerId,boolean tapped,boolean attacking){
  Card source=game.getCard(sourceId);
  String setCode;
  if (this.getOriginalExpansionSetCode() != null && !this.getOriginalExpansionSetCode().isEmpty()) {
    setCode=this.getOriginalExpansionSetCode();
  }
 else {
    setCode=source != null ? source.getExpansionSetCode() : null;
  }
  GameEvent event=GameEvent.getEvent(EventType.CREATE_TOKEN,null,sourceId,controllerId,amount);
  if (!game.replaceEvent(event)) {
    amount=event.getAmount();
    for (int i=0; i < amount; i++) {
      PermanentToken newToken=new PermanentToken(this,controllerId,setCode,game);
      game.getState().addCard(newToken);
      game.addPermanent(newToken);
      if (tapped) {
        newToken.setTapped(true);
      }
      this.lastAddedTokenId=newToken.getId();
      game.setScopeRelevant(true);
      game.applyEffects();
      newToken.entersBattlefield(sourceId,game,Zone.OUTSIDE,true);
      game.setScopeRelevant(false);
      game.applyEffects();
      game.fireEvent(new ZoneChangeEvent(newToken,controllerId,Zone.OUTSIDE,Zone.BATTLEFIELD));
      if (attacking && game.getCombat() != null) {
        game.getCombat().addAttackingCreature(newToken.getId(),game);
      }
    }
    return true;
  }
  return false;
}",0.9228915662650602
159552,"/** 
 * Display message in the chat. Use different colors for timestamp, username and message.
 * @param username message sender
 * @param message message itself
 * @param time timestamp
 * @param color Preferred color. Not used.
 */
public void receiveMessage(String username,String message,String time,MessageType messageType,MessageColor color){
  if (time != null) {
    this.txtConversation.append(TIMESTAMP_COLOR,time + ""String_Node_Str"");
  }
  Color userColor;
  Color textColor;
  String userSeparator=""String_Node_Str"";
switch (messageType) {
case STATUS:
    textColor=STATUS_COLOR;
  userColor=STATUS_COLOR;
break;
case USER_INFO:
textColor=USER_INFO_COLOR;
userColor=USER_INFO_COLOR;
break;
default :
if (parentChatRef != null) {
userColor=parentChatRef.session.getUserName().equals(username) ? MY_COLOR : OPPONENT_COLOR;
}
 else {
userColor=session.getUserName().equals(username) ? MY_COLOR : OPPONENT_COLOR;
}
textColor=MESSAGE_COLOR;
userSeparator=""String_Node_Str"";
}
if (color.equals(MessageColor.ORANGE)) {
textColor=Color.ORANGE;
}
if (color.equals(MessageColor.YELLOW)) {
textColor=Color.YELLOW;
}
if (username != null && !username.isEmpty()) {
this.txtConversation.append(userColor,username);
this.txtConversation.append(userColor,userSeparator);
}
this.txtConversation.append(textColor,message + ""String_Node_Str"");
}","/** 
 * Display message in the chat. Use different colors for timestamp, username and message.
 * @param username message sender
 * @param message message itself
 * @param time timestamp
 * @param messageType
 * @param color Preferred color. Not used.
 */
public void receiveMessage(String username,String message,String time,MessageType messageType,MessageColor color){
  if (time != null) {
    this.txtConversation.append(TIMESTAMP_COLOR,time + ""String_Node_Str"");
  }
  Color userColor;
  Color textColor;
  String userSeparator=""String_Node_Str"";
switch (messageType) {
case STATUS:
    textColor=STATUS_COLOR;
  userColor=STATUS_COLOR;
break;
case USER_INFO:
textColor=USER_INFO_COLOR;
userColor=USER_INFO_COLOR;
break;
default :
if (parentChatRef != null) {
userColor=parentChatRef.session.getUserName().equals(username) ? MY_COLOR : OPPONENT_COLOR;
}
 else {
userColor=session.getUserName().equals(username) ? MY_COLOR : OPPONENT_COLOR;
}
textColor=MESSAGE_COLOR;
userSeparator=""String_Node_Str"";
}
if (color.equals(MessageColor.ORANGE)) {
textColor=Color.ORANGE;
}
if (color.equals(MessageColor.YELLOW)) {
textColor=Color.YELLOW;
}
if (username != null && !username.isEmpty()) {
this.txtConversation.append(userColor,username);
this.txtConversation.append(userColor,userSeparator);
}
this.txtConversation.append(textColor,message + ""String_Node_Str"");
}",0.9918578830495928
159553,"public void broadcast(String userName,String message,MessageColor color,boolean withTime,MessageType messageType,SoundToPlay soundToPlay){
  if (!message.isEmpty()) {
    final String msg=message;
    final String time=(withTime ? timeFormatter.format(cal.getTime()) : ""String_Node_Str"");
    final String username=userName;
    logger.debug(""String_Node_Str"" + msg + ""String_Node_Str""+ chatId);
    for (    UUID userId : clients.keySet()) {
      User user=UserManager.getInstance().getUser(userId);
      if (user != null) {
        user.fireCallback(new ClientCallback(""String_Node_Str"",chatId,new ChatMessage(username,msg,time,color,messageType,soundToPlay)));
      }
 else {
        kill(userId,User.DisconnectReason.CleaningUp);
      }
    }
  }
}","public void broadcast(String userName,String message,MessageColor color,boolean withTime,MessageType messageType,SoundToPlay soundToPlay){
  if (!message.isEmpty()) {
    final String msg=message;
    final String time=(withTime ? timeFormatter.format(new Date()) : ""String_Node_Str"");
    final String username=userName;
    logger.debug(""String_Node_Str"" + msg + ""String_Node_Str""+ chatId);
    for (    UUID userId : clients.keySet()) {
      User user=UserManager.getInstance().getUser(userId);
      if (user != null) {
        user.fireCallback(new ClientCallback(""String_Node_Str"",chatId,new ChatMessage(username,msg,time,color,messageType,soundToPlay)));
      }
 else {
        kill(userId,User.DisconnectReason.CleaningUp);
      }
    }
  }
}",0.9887342611000662
159554,"public boolean broadcastWhisperToUser(User fromUser,User toUser,String message){
  if (clients.containsKey(toUser.getId())) {
    toUser.fireCallback(new ClientCallback(""String_Node_Str"",chatId,new ChatMessage(new StringBuilder(""String_Node_Str"").append(fromUser.getName()).toString(),message,timeFormatter.format(cal.getTime()),MessageColor.YELLOW,MessageType.WHISPER,SoundToPlay.PlayerWhispered)));
    if (clients.containsKey(fromUser.getId())) {
      fromUser.fireCallback(new ClientCallback(""String_Node_Str"",chatId,new ChatMessage(new StringBuilder(""String_Node_Str"").append(toUser.getName()).toString(),message,timeFormatter.format(cal.getTime()),MessageColor.YELLOW,MessageType.WHISPER,null)));
      return true;
    }
  }
  return false;
}","public boolean broadcastWhisperToUser(User fromUser,User toUser,String message){
  if (clients.containsKey(toUser.getId())) {
    toUser.fireCallback(new ClientCallback(""String_Node_Str"",chatId,new ChatMessage(new StringBuilder(""String_Node_Str"").append(fromUser.getName()).toString(),message,timeFormatter.format(new Date()),MessageColor.YELLOW,MessageType.WHISPER,SoundToPlay.PlayerWhispered)));
    if (clients.containsKey(fromUser.getId())) {
      fromUser.fireCallback(new ClientCallback(""String_Node_Str"",chatId,new ChatMessage(new StringBuilder(""String_Node_Str"").append(toUser.getName()).toString(),message,timeFormatter.format(new Date()),MessageColor.YELLOW,MessageType.WHISPER,null)));
      return true;
    }
  }
  return false;
}",0.9772423025435074
159555,"public boolean broadcastInfoToUser(User toUser,String message){
  if (clients.containsKey(toUser.getId())) {
    toUser.fireCallback(new ClientCallback(""String_Node_Str"",chatId,new ChatMessage(null,message,timeFormatter.format(cal.getTime()),MessageColor.ORANGE,MessageType.USER_INFO,null)));
    return true;
  }
  return false;
}","public boolean broadcastInfoToUser(User toUser,String message){
  if (clients.containsKey(toUser.getId())) {
    toUser.fireCallback(new ClientCallback(""String_Node_Str"",chatId,new ChatMessage(null,message,timeFormatter.format(new Date()),MessageColor.ORANGE,MessageType.USER_INFO,null)));
    return true;
  }
  return false;
}",0.9742033383915024
159556,"@Override public boolean apply(Game game,Ability source){
  return !(Boolean)game.getState().getValue(new StringBuilder(""String_Node_Str"").append(source.getSourceId()).toString());
}","@Override public boolean apply(Game game,Ability source){
  Object tribute=game.getState().getValue(new StringBuilder(""String_Node_Str"").append(source.getSourceId()).toString());
  if (tribute != null) {
    return ((String)tribute).equals(""String_Node_Str"");
  }
  return false;
}",0.3628509719222462
159557,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Permanent sourcePermanent=game.getPermanent(source.getSourceId());
  if (controller != null && sourcePermanent != null) {
    UUID opponentId;
    if (game.getOpponents(controller.getId()).size() == 1) {
      opponentId=game.getOpponents(controller.getId()).iterator().next();
    }
 else {
      Target target=new TargetOpponent(true);
      controller.choose(outcome,target,source.getSourceId(),game);
      opponentId=target.getFirstTarget();
    }
    if (opponentId != null) {
      Player opponent=game.getPlayer(opponentId);
      if (opponent != null) {
        StringBuilder sb=new StringBuilder(""String_Node_Str"");
        sb.append(sourcePermanent.getName());
        sb.append(""String_Node_Str"").append(tributeValue).append(""String_Node_Str"");
        if (opponent.chooseUse(outcome,sb.toString(),game)) {
          sourcePermanent.addCounters(CounterType.P1P1.createInstance(tributeValue),game);
          game.getState().setValue(new StringBuilder(""String_Node_Str"").append(source.getSourceId()).toString(),Boolean.TRUE);
        }
 else {
          game.getState().setValue(new StringBuilder(""String_Node_Str"").append(source.getSourceId()).toString(),Boolean.FALSE);
        }
        return true;
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Permanent sourcePermanent=game.getPermanent(source.getSourceId());
  if (controller != null && sourcePermanent != null) {
    UUID opponentId;
    if (game.getOpponents(controller.getId()).size() == 1) {
      opponentId=game.getOpponents(controller.getId()).iterator().next();
    }
 else {
      Target target=new TargetOpponent(true);
      controller.choose(outcome,target,source.getSourceId(),game);
      opponentId=target.getFirstTarget();
    }
    if (opponentId != null) {
      Player opponent=game.getPlayer(opponentId);
      if (opponent != null) {
        StringBuilder sb=new StringBuilder(""String_Node_Str"");
        sb.append(sourcePermanent.getName());
        sb.append(""String_Node_Str"").append(tributeValue).append(""String_Node_Str"");
        if (opponent.chooseUse(outcome,sb.toString(),game)) {
          sourcePermanent.addCounters(CounterType.P1P1.createInstance(tributeValue),game);
          game.getState().setValue(new StringBuilder(""String_Node_Str"").append(source.getSourceId()).toString(),""String_Node_Str"");
        }
 else {
          game.getState().setValue(new StringBuilder(""String_Node_Str"").append(source.getSourceId()).toString(),""String_Node_Str"");
        }
        return true;
      }
    }
  }
  return false;
}",0.9247546346782988
159558,"@Override public boolean apply(Game game,Ability source){
  if (source.getTargets().size() > 0) {
    Target multiTarget=source.getTargets().get(0);
    Set<Permanent> permanents=new HashSet<Permanent>();
    for (    UUID target : multiTarget.getTargets()) {
      Permanent permanent=game.getPermanent(target);
      if (permanent != null) {
        permanents.add(permanent);
        permanent.damage(multiTarget.getTargetAmount(target),source.getSourceId(),game,true,false);
      }
    }
    Permanent sourceCreature=game.getPermanent(source.getSourceId());
    if (sourceCreature != null) {
      for (      Permanent permanent : permanents) {
        sourceCreature.damage(permanent.getPower().getValue(),source.getSourceId(),game,true,false);
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  if (source.getTargets().size() > 0) {
    Target multiTarget=source.getTargets().get(0);
    Set<Permanent> permanents=new HashSet<Permanent>();
    for (    UUID target : multiTarget.getTargets()) {
      Permanent permanent=game.getPermanent(target);
      if (permanent != null) {
        permanents.add(permanent);
        permanent.damage(multiTarget.getTargetAmount(target),source.getSourceId(),game,true,false);
      }
    }
    Permanent sourceCreature=game.getPermanent(source.getSourceId());
    if (sourceCreature != null) {
      for (      Permanent permanent : permanents) {
        sourceCreature.damage(permanent.getPower().getValue(),permanent.getId(),game,true,false);
      }
    }
    return true;
  }
  return false;
}",0.9819089207735496
159559,"@Override public boolean validate(Deck deck){
  boolean valid=true;
  if (deck.getCards().size() < 60) {
    invalid.put(""String_Node_Str"",""String_Node_Str"" + deck.getCards().size() + ""String_Node_Str"");
    valid=false;
  }
  if (deck.getSideboard().size() > 15) {
    invalid.put(""String_Node_Str"",""String_Node_Str"" + deck.getSideboard().size() + ""String_Node_Str"");
    valid=false;
  }
  List<String> basicLandNames=new ArrayList<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Map<String,Integer> counts=new HashMap<String,Integer>();
  countCards(counts,deck.getCards());
  countCards(counts,deck.getSideboard());
  for (  Entry<String,Integer> entry : counts.entrySet()) {
    if (entry.getValue() > 4) {
      if (!basicLandNames.contains(entry.getKey()) && !entry.getKey().equals(""String_Node_Str"") && !entry.getKey().equals(""String_Node_Str"")) {
        invalid.put(entry.getKey(),""String_Node_Str"" + entry.getValue());
        valid=false;
      }
    }
  }
  for (  String bannedCard : banned) {
    if (counts.containsKey(bannedCard)) {
      invalid.put(bannedCard,""String_Node_Str"");
      valid=false;
    }
  }
  for (  String restrictedCard : restricted) {
    if (counts.containsKey(restrictedCard)) {
      int count=counts.get(restrictedCard);
      if (count > 1) {
        invalid.put(restrictedCard,""String_Node_Str"" + count);
        valid=false;
      }
    }
  }
  if (!setCodes.isEmpty()) {
    for (    Card card : deck.getCards()) {
      if (!setCodes.contains(card.getExpansionSetCode())) {
        boolean legal=false;
        List<CardInfo> cardInfos=CardRepository.instance.findCards(card.getName());
        for (        CardInfo cardInfo : cardInfos) {
          if (setCodes.contains(cardInfo.getSetCode())) {
            legal=true;
            break;
          }
        }
        if (!legal && !invalid.containsKey(card.getName())) {
          invalid.put(card.getName(),""String_Node_Str"" + card.getExpansionSetCode());
          valid=false;
        }
      }
    }
    for (    Card card : deck.getSideboard()) {
      if (!setCodes.contains(card.getExpansionSetCode())) {
        boolean legal=false;
        List<CardInfo> cardInfos=CardRepository.instance.findCards(card.getName());
        for (        CardInfo cardInfo : cardInfos) {
          if (setCodes.contains(cardInfo.getSetCode())) {
            legal=true;
            break;
          }
        }
        if (!legal && !invalid.containsKey(card.getName())) {
          invalid.put(card.getName(),""String_Node_Str"" + card.getExpansionSetCode());
          valid=false;
        }
      }
    }
  }
  return valid;
}","@Override public boolean validate(Deck deck){
  boolean valid=true;
  if (deck.getCards().size() < 60) {
    invalid.put(""String_Node_Str"",""String_Node_Str"" + deck.getCards().size() + ""String_Node_Str"");
    valid=false;
  }
  if (deck.getSideboard().size() > 15) {
    invalid.put(""String_Node_Str"",""String_Node_Str"" + deck.getSideboard().size() + ""String_Node_Str"");
    valid=false;
  }
  List<String> basicLandNames=new ArrayList<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Map<String,Integer> counts=new HashMap<String,Integer>();
  countCards(counts,deck.getCards());
  countCards(counts,deck.getSideboard());
  for (  Entry<String,Integer> entry : counts.entrySet()) {
    if (entry.getValue() > 4) {
      if (!basicLandNames.contains(entry.getKey()) && !entry.getKey().equals(""String_Node_Str"") && !entry.getKey().equals(""String_Node_Str"")) {
        invalid.put(entry.getKey(),""String_Node_Str"" + entry.getValue());
        valid=false;
      }
    }
  }
  for (  String bannedCard : banned) {
    if (counts.containsKey(bannedCard)) {
      invalid.put(bannedCard,""String_Node_Str"");
      valid=false;
    }
  }
  for (  String restrictedCard : restricted) {
    if (counts.containsKey(restrictedCard)) {
      int count=counts.get(restrictedCard);
      if (count > 1) {
        invalid.put(restrictedCard,""String_Node_Str"" + count);
        valid=false;
      }
    }
  }
  if (!setCodes.isEmpty()) {
    for (    Card card : deck.getCards()) {
      if (!setCodes.contains(card.getExpansionSetCode())) {
        boolean legal=false;
        List<CardInfo> cardInfos=CardRepository.instance.findCards(card.getName());
        for (        CardInfo cardInfo : cardInfos) {
          if (setCodes.contains(cardInfo.getSetCode())) {
            legal=true;
            break;
          }
        }
        if (!legal && !invalid.containsKey(card.getName())) {
          invalid.put(card.getName(),""String_Node_Str"" + card.getExpansionSetCode());
          valid=false;
        }
      }
    }
    for (    Card card : deck.getSideboard()) {
      if (!setCodes.contains(card.getExpansionSetCode())) {
        boolean legal=false;
        List<CardInfo> cardInfos=CardRepository.instance.findCards(card.getName());
        for (        CardInfo cardInfo : cardInfos) {
          if (setCodes.contains(cardInfo.getSetCode())) {
            legal=true;
            break;
          }
        }
        if (!legal && !invalid.containsKey(card.getName())) {
          invalid.put(card.getName(),""String_Node_Str"" + card.getExpansionSetCode());
          valid=false;
        }
      }
    }
  }
  return valid;
}",0.9835526315789472
159560,"@Test public void testTurnToFrog(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",2);
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",2);
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"");
  addCard(Zone.HAND,playerB,""String_Node_Str"");
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  castSpell(3,PhaseStep.DECLARE_ATTACKERS,playerB,""String_Node_Str"",""String_Node_Str"");
  attack(3,playerA,""String_Node_Str"");
  block(3,playerB,""String_Node_Str"",""String_Node_Str"");
  setStopAt(3,PhaseStep.END_TURN);
  execute();
  assertLife(playerB,20);
  assertPermanentCount(playerA,""String_Node_Str"",0);
  assertPermanentCount(playerB,""String_Node_Str"",0);
}","@Test public void testTurnToFrog(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",2);
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",2);
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"");
  addCard(Zone.HAND,playerB,""String_Node_Str"");
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  castSpell(3,PhaseStep.PRECOMBAT_MAIN,playerB,""String_Node_Str"",""String_Node_Str"");
  attack(3,playerA,""String_Node_Str"");
  block(3,playerB,""String_Node_Str"",""String_Node_Str"");
  setStopAt(3,PhaseStep.END_TURN);
  execute();
  assertLife(playerB,20);
  assertPermanentCount(playerA,""String_Node_Str"",0);
  assertPermanentCount(playerB,""String_Node_Str"",0);
}",0.9828134945894336
159561,"public void apply(Game game){
  removeInactiveEffects(game);
  List<ContinuousEffect> layerEffects=getLayeredEffects(game);
  List<ContinuousEffect> layer=filterLayeredEffects(layerEffects,Layer.CopyEffects_1);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.CopyEffects_1,SubLayer.NA,ability,game);
    }
  }
  if (layer.size() > 0) {
    layerEffects=getLayeredEffects(game);
  }
  layer=filterLayeredEffects(layerEffects,Layer.ControlChangingEffects_2);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.ControlChangingEffects_2,SubLayer.NA,ability,game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.TextChangingEffects_3);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.TextChangingEffects_3,SubLayer.NA,ability,game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.TypeChangingEffects_4);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.TypeChangingEffects_4,SubLayer.NA,ability,game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.ColorChangingEffects_5);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.ColorChangingEffects_5,SubLayer.NA,ability,game);
    }
  }
  Map<ContinuousEffect,List<Ability>> appliedEffects=new HashMap<ContinuousEffect,List<Ability>>();
  boolean allApplied=false;
  while (!allApplied) {
    boolean effectApplied=false;
    layer=filterLayeredEffects(layerEffects,Layer.AbilityAddingRemovingEffects_6);
    for (    ContinuousEffect effect : layer) {
      if (layerEffects.contains(effect)) {
        List<Ability> appliedAbilities=appliedEffects.get(effect);
        HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
        for (        Ability ability : abilities) {
          if (appliedAbilities == null || !appliedAbilities.contains(ability)) {
            if (appliedAbilities == null) {
              appliedAbilities=new ArrayList<Ability>();
              appliedEffects.put(effect,appliedAbilities);
            }
            appliedAbilities.add(ability);
            effect.apply(Layer.AbilityAddingRemovingEffects_6,SubLayer.NA,ability,game);
            effectApplied=true;
          }
        }
      }
    }
    allApplied=!effectApplied;
    if (effectApplied) {
      layerEffects=getLayeredEffects(game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.PTChangingEffects_7);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.PTChangingEffects_7,SubLayer.SetPT_7b,ability,game);
    }
  }
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.PTChangingEffects_7,SubLayer.ModifyPT_7c,ability,game);
    }
  }
  applyCounters.apply(Layer.PTChangingEffects_7,SubLayer.Counters_7d,null,game);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.PTChangingEffects_7,SubLayer.SwitchPT_e,ability,game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.PlayerEffects);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.PlayerEffects,SubLayer.NA,ability,game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.RulesEffects);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.RulesEffects,SubLayer.NA,ability,game);
    }
  }
}","public void apply(Game game){
  removeInactiveEffects(game);
  List<ContinuousEffect> layerEffects=getLayeredEffects(game);
  List<ContinuousEffect> layer=filterLayeredEffects(layerEffects,Layer.CopyEffects_1);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.CopyEffects_1,SubLayer.NA,ability,game);
    }
  }
  if (layer.size() > 0) {
    layerEffects=getLayeredEffects(game);
  }
  layer=filterLayeredEffects(layerEffects,Layer.ControlChangingEffects_2);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.ControlChangingEffects_2,SubLayer.NA,ability,game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.TextChangingEffects_3);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.TextChangingEffects_3,SubLayer.NA,ability,game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.TypeChangingEffects_4);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.TypeChangingEffects_4,SubLayer.NA,ability,game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.ColorChangingEffects_5);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.ColorChangingEffects_5,SubLayer.NA,ability,game);
    }
  }
  Map<ContinuousEffect,List<Ability>> appliedEffects=new HashMap<ContinuousEffect,List<Ability>>();
  boolean done=false;
  while (!done) {
    done=true;
    layer=filterLayeredEffects(layerEffects,Layer.AbilityAddingRemovingEffects_6);
    for (    ContinuousEffect effect : layer) {
      if (layerEffects.contains(effect)) {
        List<Ability> appliedAbilities=appliedEffects.get(effect);
        HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
        for (        Ability ability : abilities) {
          if (appliedAbilities == null || !appliedAbilities.contains(ability)) {
            if (appliedAbilities == null) {
              appliedAbilities=new ArrayList<Ability>();
              appliedEffects.put(effect,appliedAbilities);
            }
            appliedAbilities.add(ability);
            effect.apply(Layer.AbilityAddingRemovingEffects_6,SubLayer.NA,ability,game);
            done=false;
            layerEffects=getLayeredEffects(game);
          }
        }
      }
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.PTChangingEffects_7);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.PTChangingEffects_7,SubLayer.SetPT_7b,ability,game);
    }
  }
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.PTChangingEffects_7,SubLayer.ModifyPT_7c,ability,game);
    }
  }
  applyCounters.apply(Layer.PTChangingEffects_7,SubLayer.Counters_7d,null,game);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.PTChangingEffects_7,SubLayer.SwitchPT_e,ability,game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.PlayerEffects);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.PlayerEffects,SubLayer.NA,ability,game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.RulesEffects);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.RulesEffects,SubLayer.NA,ability,game);
    }
  }
}",0.9726277372262774
159562,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.GAINED_LIFE && event.getPlayerId().equals(this.getControllerId())) {
    if (setTargetPointer) {
      for (      Effect effect : this.getEffects()) {
        effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
        effect.setValue(""String_Node_Str"",event.getAmount());
      }
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.GAINED_LIFE && event.getPlayerId().equals(this.getControllerId())) {
    if (setTargetPointer) {
      for (      Effect effect : this.getEffects()) {
        effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
        effect.setValue(""String_Node_Str"",event.getAmount());
      }
    }
    return true;
  }
  return false;
}",0.9575892857142856
159563,"public void apply(Game game){
  removeInactiveEffects(game);
  List<ContinuousEffect> layerEffects=getLayeredEffects(game);
  List<ContinuousEffect> layer=filterLayeredEffects(layerEffects,Layer.CopyEffects_1);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.CopyEffects_1,SubLayer.NA,ability,game);
    }
  }
  if (layer.size() > 0) {
    layerEffects=getLayeredEffects(game);
  }
  layer=filterLayeredEffects(layerEffects,Layer.ControlChangingEffects_2);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.ControlChangingEffects_2,SubLayer.NA,ability,game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.TextChangingEffects_3);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.TextChangingEffects_3,SubLayer.NA,ability,game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.TypeChangingEffects_4);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.TypeChangingEffects_4,SubLayer.NA,ability,game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.ColorChangingEffects_5);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.ColorChangingEffects_5,SubLayer.NA,ability,game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.AbilityAddingRemovingEffects_6);
  for (  ContinuousEffect effect : layer) {
    if (layerEffects.contains(effect)) {
      HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
      for (      Ability ability : abilities) {
        effect.apply(Layer.AbilityAddingRemovingEffects_6,SubLayer.NA,ability,game);
      }
    }
    layerEffects=getLayeredEffects(game);
  }
  layer=filterLayeredEffects(layerEffects,Layer.PTChangingEffects_7);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.PTChangingEffects_7,SubLayer.SetPT_7b,ability,game);
    }
  }
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.PTChangingEffects_7,SubLayer.ModifyPT_7c,ability,game);
    }
  }
  applyCounters.apply(Layer.PTChangingEffects_7,SubLayer.Counters_7d,null,game);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.PTChangingEffects_7,SubLayer.SwitchPT_e,ability,game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.PlayerEffects);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.PlayerEffects,SubLayer.NA,ability,game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.RulesEffects);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.RulesEffects,SubLayer.NA,ability,game);
    }
  }
}","public void apply(Game game){
  removeInactiveEffects(game);
  List<ContinuousEffect> layerEffects=getLayeredEffects(game);
  List<ContinuousEffect> layer=filterLayeredEffects(layerEffects,Layer.CopyEffects_1);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.CopyEffects_1,SubLayer.NA,ability,game);
    }
  }
  if (layer.size() > 0) {
    layerEffects=getLayeredEffects(game);
  }
  layer=filterLayeredEffects(layerEffects,Layer.ControlChangingEffects_2);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.ControlChangingEffects_2,SubLayer.NA,ability,game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.TextChangingEffects_3);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.TextChangingEffects_3,SubLayer.NA,ability,game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.TypeChangingEffects_4);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.TypeChangingEffects_4,SubLayer.NA,ability,game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.ColorChangingEffects_5);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.ColorChangingEffects_5,SubLayer.NA,ability,game);
    }
  }
  Map<ContinuousEffect,List<Ability>> appliedEffects=new HashMap<ContinuousEffect,List<Ability>>();
  boolean allApplied=false;
  while (!allApplied) {
    boolean effectApplied=false;
    layer=filterLayeredEffects(layerEffects,Layer.AbilityAddingRemovingEffects_6);
    for (    ContinuousEffect effect : layer) {
      if (layerEffects.contains(effect)) {
        List<Ability> appliedAbilities=appliedEffects.get(effect);
        HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
        for (        Ability ability : abilities) {
          if (appliedAbilities == null || !appliedAbilities.contains(ability)) {
            if (appliedAbilities == null) {
              appliedAbilities=new ArrayList<Ability>();
              appliedEffects.put(effect,appliedAbilities);
            }
            appliedAbilities.add(ability);
            effect.apply(Layer.AbilityAddingRemovingEffects_6,SubLayer.NA,ability,game);
            effectApplied=true;
          }
        }
      }
    }
    allApplied=!effectApplied;
    if (effectApplied) {
      layerEffects=getLayeredEffects(game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.PTChangingEffects_7);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.PTChangingEffects_7,SubLayer.SetPT_7b,ability,game);
    }
  }
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.PTChangingEffects_7,SubLayer.ModifyPT_7c,ability,game);
    }
  }
  applyCounters.apply(Layer.PTChangingEffects_7,SubLayer.Counters_7d,null,game);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.PTChangingEffects_7,SubLayer.SwitchPT_e,ability,game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.PlayerEffects);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.PlayerEffects,SubLayer.NA,ability,game);
    }
  }
  layer=filterLayeredEffects(layerEffects,Layer.RulesEffects);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.RulesEffects,SubLayer.NA,ability,game);
    }
  }
}",0.9107142857142856
159564,"@Override public boolean isLegal(Ability source,Game game){
  for (  UUID targetId : targets.keySet()) {
    Card card=game.getCard(targetId);
    if (card != null) {
      if (zoneChangeCounters.containsKey(targetId) && zoneChangeCounters.get(targetId) != card.getZoneChangeCounter()) {
        continue;
      }
    }
    if (game.replaceEvent(GameEvent.getEvent(EventType.TARGET,targetId,source.getId(),source.getControllerId()))) {
      continue;
    }
    if (canTarget(targetId,source,game)) {
      return true;
    }
  }
  if (minNumberOfTargets == 0 && targets.isEmpty()) {
    return true;
  }
  return false;
}","@Override public boolean isLegal(Ability source,Game game){
  Set<UUID> illegalTargets=new HashSet<UUID>();
  int replacedTargets=0;
  for (  UUID targetId : targets.keySet()) {
    Card card=game.getCard(targetId);
    if (card != null) {
      if (zoneChangeCounters.containsKey(targetId) && zoneChangeCounters.get(targetId) != card.getZoneChangeCounter()) {
        illegalTargets.add(targetId);
        continue;
      }
    }
    if (game.replaceEvent(GameEvent.getEvent(EventType.TARGET,targetId,source.getId(),source.getControllerId()))) {
      replacedTargets++;
      continue;
    }
    if (!canTarget(targetId,source,game)) {
      illegalTargets.add(targetId);
    }
  }
  for (  UUID targetId : illegalTargets) {
    targets.remove(targetId);
  }
  if (replacedTargets > 0 && replacedTargets == targets.size()) {
    return false;
  }
  if (minNumberOfTargets == 0 && targets.isEmpty()) {
    return true;
  }
  return targets.size() > 0;
}",0.7601522842639594
159565,"@Override public List<UUID> getTargets(Game game,Ability source){
  ArrayList<UUID> target=new ArrayList<UUID>();
  if (source.getTargets().size() > 0) {
    Target currentTarget=source.getTargets().get(0);
    for (    UUID targetId : source.getTargets().get(0).getTargets()) {
      Card card=game.getCard(targetId);
      if (card != null && zoneChangeCounter.containsKey(targetId) && card.getZoneChangeCounter() != zoneChangeCounter.get(targetId)) {
        continue;
      }
      if (!currentTarget.canTarget(targetId,source,game)) {
        continue;
      }
      target.add(targetId);
    }
  }
  return target;
}","@Override public List<UUID> getTargets(Game game,Ability source){
  ArrayList<UUID> target=new ArrayList<UUID>();
  if (source.getTargets().size() > 0) {
    for (    UUID targetId : source.getTargets().get(0).getTargets()) {
      Card card=game.getCard(targetId);
      if (card != null && zoneChangeCounter.containsKey(targetId) && card.getZoneChangeCounter() != zoneChangeCounter.get(targetId)) {
        continue;
      }
      target.add(targetId);
    }
  }
  return target;
}",0.8072398190045249
159566,"@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.MANA_PAYED) {
    if (event.getSourceId().equals(this.getSourceId())) {
      Spell spell=game.getStack().getSpell(event.getTargetId());
      if (spell != null) {
        Card card=spell.getCard();
        if (card != null) {
          for (          UUID playerId : game.getPlayerList()) {
            Player player=game.getPlayer(playerId);
            if (player != null) {
              if (player.getCommanderId() != null && player.getCommanderId().equals(card.getId())) {
                commanderId.add(card.getId());
                break;
              }
            }
          }
        }
      }
    }
  }
}","@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.MANA_PAYED) {
    if (event.getSourceId().equals(this.getSourceId()) && event.getFlag()) {
      Spell spell=game.getStack().getSpell(event.getTargetId());
      if (spell != null) {
        Card card=spell.getCard();
        if (card != null) {
          for (          UUID playerId : game.getPlayerList()) {
            Player player=game.getPlayer(playerId);
            if (player != null) {
              if (player.getCommanderId() != null && player.getCommanderId().equals(card.getId())) {
                commanderId.add(card.getId());
                break;
              }
            }
          }
        }
      }
    }
  }
}",0.9869952087611226
159567,"public Mana needed(Mana avail){
  Mana compare=avail.copy();
  compare.subtract(this);
  if (compare.getRed() < 0 && compare.getAny() > 0) {
    int diff=Math.min(compare.getAny(),Math.abs(compare.getRed()));
    compare.setAny(compare.getAny() - diff);
    compare.setRed(compare.getRed() + diff);
  }
  if (compare.getGreen() < 0 && compare.getAny() > 0) {
    int diff=Math.min(compare.getAny(),Math.abs(compare.getGreen()));
    compare.setAny(compare.getAny() - diff);
    compare.setGreen(compare.getGreen() + diff);
  }
  if (compare.getBlue() < 0 && compare.getAny() > 0) {
    int diff=Math.min(compare.getAny(),Math.abs(compare.getBlue()));
    compare.setAny(compare.getAny() - diff);
    compare.setBlue(compare.getBlue() + diff);
  }
  if (compare.getBlack() < 0 && compare.getAny() > 0) {
    int diff=Math.min(compare.getAny(),Math.abs(compare.getBlack()));
    compare.setAny(compare.getAny() - diff);
    compare.setBlack(compare.getBlack() + diff);
  }
  if (compare.getWhite() < 0 && compare.getAny() > 0) {
    int diff=Math.min(compare.getAny(),Math.abs(compare.getWhite()));
    compare.setAny(compare.getAny() - diff);
    compare.setWhite(compare.getWhite() + diff);
  }
  if (compare.getColorless() < 0) {
    int remaining=0;
    remaining+=Math.min(0,compare.getRed());
    remaining+=Math.min(0,compare.getWhite());
    remaining+=Math.min(0,compare.getGreen());
    remaining+=Math.min(0,compare.getBlack());
    remaining+=Math.min(0,compare.getBlue());
    remaining+=Math.min(0,compare.getAny());
    if (remaining > 0) {
      int diff=Math.min(remaining,Math.abs(compare.getColorless()));
      compare.setColorless(compare.getColorless() + diff);
    }
  }
  Mana needed=new Mana();
  if (compare.getRed() < 0)   needed.setRed(Math.abs(compare.getRed()));
  if (compare.getWhite() < 0)   needed.setWhite(Math.abs(compare.getWhite()));
  if (compare.getGreen() < 0)   needed.setGreen(Math.abs(compare.getGreen()));
  if (compare.getBlack() < 0)   needed.setBlack(Math.abs(compare.getBlack()));
  if (compare.getBlue() < 0)   needed.setBlue(Math.abs(compare.getBlue()));
  if (compare.getColorless() < 0)   needed.setColorless(Math.abs(compare.getColorless()));
  return needed;
}","public Mana needed(Mana avail){
  Mana compare=avail.copy();
  compare.subtract(this);
  if (compare.getRed() < 0 && compare.getAny() > 0) {
    int diff=Math.min(compare.getAny(),Math.abs(compare.getRed()));
    compare.setAny(compare.getAny() - diff);
    compare.setRed(compare.getRed() + diff);
  }
  if (compare.getGreen() < 0 && compare.getAny() > 0) {
    int diff=Math.min(compare.getAny(),Math.abs(compare.getGreen()));
    compare.setAny(compare.getAny() - diff);
    compare.setGreen(compare.getGreen() + diff);
  }
  if (compare.getBlue() < 0 && compare.getAny() > 0) {
    int diff=Math.min(compare.getAny(),Math.abs(compare.getBlue()));
    compare.setAny(compare.getAny() - diff);
    compare.setBlue(compare.getBlue() + diff);
  }
  if (compare.getBlack() < 0 && compare.getAny() > 0) {
    int diff=Math.min(compare.getAny(),Math.abs(compare.getBlack()));
    compare.setAny(compare.getAny() - diff);
    compare.setBlack(compare.getBlack() + diff);
  }
  if (compare.getWhite() < 0 && compare.getAny() > 0) {
    int diff=Math.min(compare.getAny(),Math.abs(compare.getWhite()));
    compare.setAny(compare.getAny() - diff);
    compare.setWhite(compare.getWhite() + diff);
  }
  if (compare.getColorless() < 0) {
    int remaining=0;
    remaining+=Math.min(0,compare.getRed());
    remaining+=Math.min(0,compare.getWhite());
    remaining+=Math.min(0,compare.getGreen());
    remaining+=Math.min(0,compare.getBlack());
    remaining+=Math.min(0,compare.getBlue());
    remaining+=Math.min(0,compare.getAny());
    if (remaining > 0) {
      int diff=Math.min(remaining,Math.abs(compare.getColorless()));
      compare.setColorless(compare.getColorless() + diff);
    }
  }
  Mana needed=new Mana();
  if (compare.getRed() < 0) {
    needed.setRed(Math.abs(compare.getRed()));
  }
  if (compare.getWhite() < 0) {
    needed.setWhite(Math.abs(compare.getWhite()));
  }
  if (compare.getGreen() < 0) {
    needed.setGreen(Math.abs(compare.getGreen()));
  }
  if (compare.getBlack() < 0) {
    needed.setBlack(Math.abs(compare.getBlack()));
  }
  if (compare.getBlue() < 0) {
    needed.setBlue(Math.abs(compare.getBlue()));
  }
  if (compare.getColorless() < 0) {
    needed.setColorless(Math.abs(compare.getColorless()));
  }
  return needed;
}",0.9892713455520786
159568,"public int count(FilterMana filter){
  if (filter == null) {
    return count();
  }
  int count=0;
  if (filter.isBlack())   count+=black;
  if (filter.isBlue())   count+=blue;
  if (filter.isWhite())   count+=white;
  if (filter.isGreen())   count+=green;
  if (filter.isRed())   count+=red;
  if (filter.isColorless())   count+=colorless;
  return count;
}","public int count(FilterMana filter){
  if (filter == null) {
    return count();
  }
  int count=0;
  if (filter.isBlack()) {
    count+=black;
  }
  if (filter.isBlue()) {
    count+=blue;
  }
  if (filter.isWhite()) {
    count+=white;
  }
  if (filter.isGreen()) {
    count+=green;
  }
  if (filter.isRed()) {
    count+=red;
  }
  if (filter.isColorless()) {
    count+=colorless;
  }
  return count;
}",0.8407310704960835
159569,"public boolean enough(Mana avail){
  Mana compare=avail.copy();
  compare.subtract(this);
  if (compare.getRed() < 0) {
    compare.setAny(compare.getAny() + compare.getRed());
    if (compare.getAny() < 0)     return false;
    compare.setRed(0);
  }
  if (compare.getGreen() < 0) {
    compare.setAny(compare.getAny() + compare.getGreen());
    if (compare.getAny() < 0)     return false;
    compare.setGreen(0);
  }
  if (compare.getBlue() < 0) {
    compare.setAny(compare.getAny() + compare.getBlue());
    if (compare.getAny() < 0)     return false;
    compare.setBlue(0);
  }
  if (compare.getBlack() < 0) {
    compare.setAny(compare.getAny() + compare.getBlack());
    if (compare.getAny() < 0)     return false;
    compare.setBlack(0);
  }
  if (compare.getWhite() < 0) {
    compare.setAny(compare.getAny() + compare.getWhite());
    if (compare.getAny() < 0)     return false;
    compare.setWhite(0);
  }
  if (compare.getColorless() < 0) {
    int remaining=compare.getRed() + compare.getGreen() + compare.getBlack()+ compare.getBlue()+ compare.getWhite()+ compare.getAny();
    if (compare.getColorless() + remaining < 0)     return false;
  }
  return true;
}","public boolean enough(Mana avail){
  Mana compare=avail.copy();
  compare.subtract(this);
  if (compare.getRed() < 0) {
    compare.setAny(compare.getAny() + compare.getRed());
    if (compare.getAny() < 0) {
      return false;
    }
    compare.setRed(0);
  }
  if (compare.getGreen() < 0) {
    compare.setAny(compare.getAny() + compare.getGreen());
    if (compare.getAny() < 0) {
      return false;
    }
    compare.setGreen(0);
  }
  if (compare.getBlue() < 0) {
    compare.setAny(compare.getAny() + compare.getBlue());
    if (compare.getAny() < 0) {
      return false;
    }
    compare.setBlue(0);
  }
  if (compare.getBlack() < 0) {
    compare.setAny(compare.getAny() + compare.getBlack());
    if (compare.getAny() < 0) {
      return false;
    }
    compare.setBlack(0);
  }
  if (compare.getWhite() < 0) {
    compare.setAny(compare.getAny() + compare.getWhite());
    if (compare.getAny() < 0) {
      return false;
    }
    compare.setWhite(0);
  }
  if (compare.getColorless() < 0) {
    int remaining=compare.getRed() + compare.getGreen() + compare.getBlack()+ compare.getBlue()+ compare.getWhite()+ compare.getAny();
    if (compare.getColorless() + remaining < 0) {
      return false;
    }
  }
  return true;
}",0.8791390728476821
159570,"/** 
 * @param mana
 * @return true if this contains any values that mana has
 */
public boolean contains(Mana mana){
  if (mana.black > 0 && this.black > 0)   return true;
  if (mana.blue > 0 && this.blue > 0)   return true;
  if (mana.red > 0 && this.red > 0)   return true;
  if (mana.white > 0 && this.white > 0)   return true;
  if (mana.green > 0 && this.green > 0)   return true;
  if (mana.colorless > 0 && this.count() > 0)   return true;
  return false;
}","/** 
 * @param mana
 * @return true if this contains any values that mana has
 */
public boolean contains(Mana mana){
  if (mana.black > 0 && this.black > 0) {
    return true;
  }
  if (mana.blue > 0 && this.blue > 0) {
    return true;
  }
  if (mana.red > 0 && this.red > 0) {
    return true;
  }
  if (mana.white > 0 && this.white > 0) {
    return true;
  }
  if (mana.green > 0 && this.green > 0) {
    return true;
  }
  if (mana.colorless > 0 && this.count() > 0) {
    return true;
  }
  return false;
}",0.6462167689161554
159571,"@Override public String toString(){
  StringBuilder sbMana=new StringBuilder();
  for (int i=0; i < red; i++)   sbMana.append(""String_Node_Str"");
  for (int i=0; i < green; i++)   sbMana.append(""String_Node_Str"");
  for (int i=0; i < blue; i++)   sbMana.append(""String_Node_Str"");
  for (int i=0; i < black; i++)   sbMana.append(""String_Node_Str"");
  for (int i=0; i < white; i++)   sbMana.append(""String_Node_Str"");
  for (int i=0; i < any; i++)   sbMana.append(""String_Node_Str"");
  if (colorless > 0) {
    sbMana.append(""String_Node_Str"").append(Integer.toString(colorless)).append(""String_Node_Str"");
  }
  return sbMana.toString();
}","@Override public String toString(){
  StringBuilder sbMana=new StringBuilder();
  for (int i=0; i < red; i++) {
    sbMana.append(""String_Node_Str"");
  }
  for (int i=0; i < green; i++) {
    sbMana.append(""String_Node_Str"");
  }
  for (int i=0; i < blue; i++) {
    sbMana.append(""String_Node_Str"");
  }
  for (int i=0; i < black; i++) {
    sbMana.append(""String_Node_Str"");
  }
  for (int i=0; i < white; i++) {
    sbMana.append(""String_Node_Str"");
  }
  for (int i=0; i < any; i++) {
    sbMana.append(""String_Node_Str"");
  }
  if (colorless > 0) {
    sbMana.append(""String_Node_Str"").append(Integer.toString(colorless)).append(""String_Node_Str"");
  }
  return sbMana.toString();
}",0.6470588235294118
159572,"public boolean pay(ManaType manaType,Ability ability,Filter filter,Game game){
  if (getConditional(manaType,ability,filter,game) > 0) {
    removeConditional(manaType,ability,game);
    return true;
  }
  for (  ManaPoolItem mana : manaItems) {
    if (filter == null || filter.match(game.getObject(mana.getSourceId()),game)) {
      boolean spendAnyMana=spendAnyMana(ability,game);
      if (mana.get(manaType) > 0 || (spendAnyMana && mana.count() > 0)) {
        game.fireEvent(new GameEvent(GameEvent.EventType.MANA_PAYED,ability.getId(),mana.getSourceId(),ability.getControllerId()));
        if (spendAnyMana) {
          mana.removeAny();
        }
 else {
          mana.remove(manaType);
        }
        return true;
      }
    }
  }
  return false;
}","public boolean pay(ManaType manaType,Ability ability,Filter filter,Game game){
  if (getConditional(manaType,ability,filter,game) > 0) {
    removeConditional(manaType,ability,game);
    return true;
  }
  for (  ManaPoolItem mana : manaItems) {
    if (filter == null || filter.match(game.getObject(mana.getSourceId()),game)) {
      boolean spendAnyMana=spendAnyMana(ability,game);
      if (mana.get(manaType) > 0 || (spendAnyMana && mana.count() > 0)) {
        game.fireEvent(new GameEvent(GameEvent.EventType.MANA_PAYED,ability.getId(),mana.getSourceId(),ability.getControllerId(),0,mana.getFlag()));
        if (spendAnyMana) {
          mana.removeAny();
        }
 else {
          mana.remove(manaType);
        }
        return true;
      }
    }
  }
  return false;
}",0.9889825016202204
159573,"public void addMana(Mana mana,Game game,Ability source){
  if (mana instanceof ConditionalMana) {
    this.manaItems.add(new ManaPoolItem((ConditionalMana)mana,source.getSourceId()));
  }
 else {
    this.manaItems.add(new ManaPoolItem(mana.getRed(),mana.getGreen(),mana.getBlue(),mana.getWhite(),mana.getBlack(),mana.getColorless(),source.getSourceId()));
  }
  GameEvent event=GameEvent.getEvent(GameEvent.EventType.MANA_ADDED,source.getSourceId(),source.getId(),source.getControllerId());
  event.setData(mana.toString());
  game.fireEvent(event);
}","public void addMana(Mana mana,Game game,Ability source){
  if (mana instanceof ConditionalMana) {
    this.manaItems.add(new ManaPoolItem((ConditionalMana)mana,source.getSourceId()));
  }
 else {
    this.manaItems.add(new ManaPoolItem(mana.getRed(),mana.getGreen(),mana.getBlue(),mana.getWhite(),mana.getBlack(),mana.getColorless(),source.getSourceId(),mana.getFlag()));
  }
  GameEvent event=GameEvent.getEvent(GameEvent.EventType.MANA_ADDED,source.getSourceId(),source.getId(),source.getControllerId());
  event.setData(mana.toString());
  game.fireEvent(event);
}",0.9865951742627346
159574,"public ManaPoolItem(final ManaPoolItem item){
  this.red=item.red;
  this.green=item.green;
  this.blue=item.blue;
  this.white=item.white;
  this.black=item.black;
  this.colorless=item.colorless;
  if (item.conditionalMana != null) {
    this.conditionalMana=item.conditionalMana.copy();
  }
  this.sourceId=item.sourceId;
}","public ManaPoolItem(final ManaPoolItem item){
  this.red=item.red;
  this.green=item.green;
  this.blue=item.blue;
  this.white=item.white;
  this.black=item.black;
  this.colorless=item.colorless;
  if (item.conditionalMana != null) {
    this.conditionalMana=item.conditionalMana.copy();
  }
  this.sourceId=item.sourceId;
  this.flag=item.flag;
}",0.965925925925926
159575,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType().equals(GameEvent.EventType.DAMAGE_CAUSES_LIFE_LOSS)) {
    Permanent permanent=game.getPermanent(source.getSourceId());
    if (permanent == null) {
      permanent=(Permanent)game.getLastKnownInformation(source.getSourceId(),Zone.BATTLEFIELD);
    }
    if (permanent != null) {
      Player controller=game.getPlayer(permanent.getControllerId());
      if (controller != null && (controller.getLife() - event.getAmount()) < 1 && event.getPlayerId().equals(controller.getId())) {
        event.setAmount(controller.getLife() - 1);
      }
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType().equals(GameEvent.EventType.DAMAGE_CAUSES_LIFE_LOSS)) {
    Permanent permanent=game.getPermanent(source.getSourceId());
    if (permanent != null) {
      Player controller=game.getPlayer(source.getControllerId());
      if (controller != null && (controller.getLife() > 0) && (controller.getLife() - event.getAmount()) < 1 && event.getPlayerId().equals(controller.getId())) {
        event.setAmount(controller.getLife() - 1);
      }
    }
  }
  return false;
}",0.5921696574225123
159576,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType().equals(GameEvent.EventType.DAMAGE_CAUSES_LIFE_LOSS)) {
    Permanent permanent=game.getPermanent(source.getSourceId());
    if (permanent == null) {
      permanent=(Permanent)game.getLastKnownInformation(source.getSourceId(),Zone.BATTLEFIELD);
    }
    if (permanent != null) {
      Player controller=game.getPlayer(permanent.getControllerId());
      if (controller != null && (controller.getLife() - event.getAmount()) < 1 && event.getPlayerId().equals(controller.getId())) {
        event.setAmount(controller.getLife() - 1);
      }
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType().equals(GameEvent.EventType.DAMAGE_CAUSES_LIFE_LOSS)) {
    Permanent permanent=game.getPermanent(source.getSourceId());
    if (permanent != null) {
      Player controller=game.getPlayer(source.getControllerId());
      if (controller != null && (controller.getLife() > 0) && (controller.getLife() - event.getAmount()) < 1 && event.getPlayerId().equals(controller.getId())) {
        event.setAmount(controller.getLife() - 1);
      }
    }
  }
  return false;
}",0.5921696574225123
159577,"@Override public boolean apply(Game game,Ability source){
  Player you=game.getPlayer(source.getControllerId());
  if (you != null) {
    if (you.flipCoin(game)) {
      DjinnToken token=new DjinnToken();
      token.putOntoBattlefield(1,game,source.getId(),source.getControllerId());
      return true;
    }
 else {
      you.damage(5,source.getSourceId(),game,true,false);
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player you=game.getPlayer(source.getControllerId());
  if (you != null) {
    if (you.flipCoin(game)) {
      DjinnToken token=new DjinnToken();
      token.putOntoBattlefield(1,game,source.getSourceId(),source.getControllerId());
      return true;
    }
 else {
      you.damage(5,source.getSourceId(),game,true,false);
      return true;
    }
  }
  return false;
}",0.9929411764705882
159578,"@Override public Opt copy(){
  return new Opt(this);
}","@Override public OptEffect copy(){
  return new OptEffect(this);
}",0.9
159579,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player == null) {
    return false;
  }
  if (player.getLibrary().size() > 0) {
    Card card=player.getLibrary().getFromTop(game);
    Cards cards=new CardsImpl();
    cards.add(card);
    player.revealCards(""String_Node_Str"",cards,game);
    if (card != null) {
      if (card.getCardType().contains(CardType.CREATURE)) {
        card.putOntoBattlefield(game,Zone.HAND,source.getId(),source.getControllerId());
      }
 else       if (player.chooseUse(Outcome.Neutral,""String_Node_Str"" + card.getName() + ""String_Node_Str"",game)) {
        card.moveToZone(Zone.LIBRARY,source.getId(),game,false);
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player == null) {
    return false;
  }
  if (player.getLibrary().size() > 0) {
    Card card=player.getLibrary().getFromTop(game);
    Cards cards=new CardsImpl();
    cards.add(card);
    player.revealCards(""String_Node_Str"",cards,game);
    if (card != null) {
      if (card.getCardType().contains(CardType.CREATURE)) {
        card=player.getLibrary().removeFromTop(game);
        card.putOntoBattlefield(game,Zone.HAND,source.getSourceId(),source.getControllerId());
      }
 else       if (player.chooseUse(Outcome.Neutral,""String_Node_Str"" + card.getName() + ""String_Node_Str"",game)) {
        card.moveToZone(Zone.LIBRARY,source.getSourceId(),game,false);
      }
    }
  }
  return false;
}",0.9581749049429658
159580,"@Override protected void init(UUID choosingPlayerId,GameOptions gameOptions){
  super.init(choosingPlayerId,gameOptions);
  Ability ability=new SimpleStaticAbility(Zone.COMMAND,new EmptyEffect(""String_Node_Str""));
  for (  UUID playerId : state.getPlayerList(startingPlayerId)) {
    Player player=getPlayer(playerId);
    if (player != null) {
      if (player.getSideboard().size() > 0) {
        Card commander=getCard((UUID)player.getSideboard().toArray()[0]);
        if (commander != null) {
          player.setCommanderId(commander.getId());
          commander.moveToZone(Zone.COMMAND,null,this,true);
          ability.addEffect(new CommanderReplacementEffect(commander.getId()));
          ability.addEffect(new CommanderCostModification(commander.getId()));
          ability.addEffect(new CommanderManaReplacementEffect(player.getId(),commander.getSpellAbility().getManaCosts().getMana()));
          getState().setValue(commander.getId() + ""String_Node_Str"",new Integer(0));
          CommanderCombatDamageWatcher watcher=new CommanderCombatDamageWatcher(commander.getId());
          getState().getWatchers().add(watcher);
          watcher.addCardInfoToCommander(this);
        }
      }
    }
  }
  this.getState().addAbility(ability,this.getId(),null);
  state.getTurnMods().add(new TurnMod(startingPlayerId,PhaseStep.DRAW));
}","@Override protected void init(UUID choosingPlayerId,GameOptions gameOptions){
  super.init(choosingPlayerId,gameOptions);
  Ability ability=new SimpleStaticAbility(Zone.COMMAND,new EmptyEffect(""String_Node_Str""));
  for (  UUID playerId : state.getPlayerList(startingPlayerId)) {
    Player player=getPlayer(playerId);
    if (player != null) {
      if (player.getSideboard().size() > 0) {
        Card commander=getCard((UUID)player.getSideboard().toArray()[0]);
        if (commander != null) {
          player.setCommanderId(commander.getId());
          commander.moveToZone(Zone.COMMAND,null,this,true);
          ability.addEffect(new CommanderReplacementEffect(commander.getId()));
          ability.addEffect(new CommanderCostModification(commander.getId()));
          ability.addEffect(new CommanderManaReplacementEffect(player.getId(),commander.getSpellAbility().getManaCosts().getMana()));
          getState().setValue(commander.getId() + ""String_Node_Str"",new Integer(0));
          CommanderCombatDamageWatcher watcher=new CommanderCombatDamageWatcher(commander.getId());
          getState().getWatchers().add(watcher);
          this.commanderCombatWatcher.add(watcher);
          watcher.addCardInfoToCommander(this);
        }
      }
    }
  }
  this.getState().addAbility(ability,this.getId(),null);
  state.getTurnMods().add(new TurnMod(startingPlayerId,PhaseStep.DRAW));
}",0.9810357403355217
159581,"@Override protected boolean checkStateBasedActions(){
  for (  Watcher watcher : getState().getWatchers().values()) {
    if (watcher instanceof CommanderCombatDamageWatcher) {
      CommanderCombatDamageWatcher damageWatcher=(CommanderCombatDamageWatcher)watcher;
      for (      UUID playerUUID : damageWatcher.getDamageToPlayer().keySet()) {
        Player player=getPlayer(playerUUID);
        if (player != null && damageWatcher.getDamageToPlayer().get(playerUUID) >= 21) {
          player.lost(this);
        }
      }
    }
  }
  return super.checkStateBasedActions();
}","@Override protected boolean checkStateBasedActions(){
  for (  CommanderCombatDamageWatcher damageWatcher : commanderCombatWatcher) {
    for (    Map.Entry<UUID,Integer> entrySet : damageWatcher.getDamageToPlayer().entrySet()) {
      if (entrySet.getValue() > 20) {
        Player player=getPlayer(entrySet.getKey());
        if (player != null && player.isInGame()) {
          player.lost(this);
        }
      }
    }
  }
  return super.checkStateBasedActions();
}",0.5681601525262154
159582,"protected void init(Card card){
  copyFromCard(card);
  if (card instanceof LevelerCard) {
    maxLevelCounters=((LevelerCard)card).getMaxLevelCounters();
  }
}","private void init(Card card){
  copyFromCard(card);
  if (card instanceof LevelerCard) {
    maxLevelCounters=((LevelerCard)card).getMaxLevelCounters();
  }
}",0.9748427672955976
159583,"@Override public boolean resolve(Game game){
  boolean result;
  if (card.getCardType().contains(CardType.INSTANT) || card.getCardType().contains(CardType.SORCERY)) {
    int index=0;
    result=false;
    boolean legalParts=false;
    for (    SpellAbility spellAbility : this.spellAbilities) {
      for (      UUID modeId : spellAbility.getModes().getSelectedModes()) {
        spellAbility.getModes().setMode(spellAbility.getModes().get(modeId));
        if (spellAbility.getTargets().stillLegal(spellAbility,game)) {
          legalParts=true;
          if (!spellAbility.getSpellAbilityType().equals(SpellAbilityType.SPLICE)) {
            updateOptionalCosts(index);
          }
          result|=spellAbility.resolve(game);
        }
      }
      index++;
    }
    if (legalParts) {
      if (!copiedSpell) {
        for (        Effect effect : ability.getEffects()) {
          if (effect instanceof PostResolveEffect) {
            ((PostResolveEffect)effect).postResolve(card,ability,controllerId,game);
            return result;
          }
        }
        if (!card.isCopy() && game.getState().getZone(card.getId()) == Zone.STACK) {
          card.moveToZone(Zone.GRAVEYARD,ability.getId(),game,false);
        }
      }
      return result;
    }
    game.informPlayers(getName() + ""String_Node_Str"");
    counter(null,game);
    return false;
  }
 else   if (card.getCardType().contains(CardType.ENCHANTMENT) && card.getSubtype().contains(""String_Node_Str"")) {
    if (ability.getTargets().stillLegal(ability,game)) {
      updateOptionalCosts(0);
      if (card.putOntoBattlefield(game,Zone.HAND,ability.getId(),controllerId)) {
        return ability.resolve(game);
      }
      return false;
    }
    if (card.getCardType().contains(CardType.CREATURE)) {
      updateOptionalCosts(0);
      result=card.putOntoBattlefield(game,Zone.HAND,ability.getId(),controllerId);
      return result;
    }
 else {
      game.informPlayers(getName() + ""String_Node_Str"");
      counter(null,game);
      return false;
    }
  }
 else {
    updateOptionalCosts(0);
    result=card.putOntoBattlefield(game,Zone.HAND,ability.getId(),controllerId);
    return result;
  }
}","@Override public boolean resolve(Game game){
  boolean result;
  if (this.getCardType().contains(CardType.INSTANT) || this.getCardType().contains(CardType.SORCERY)) {
    int index=0;
    result=false;
    boolean legalParts=false;
    for (    SpellAbility spellAbility : this.spellAbilities) {
      for (      UUID modeId : spellAbility.getModes().getSelectedModes()) {
        spellAbility.getModes().setMode(spellAbility.getModes().get(modeId));
        if (spellAbility.getTargets().stillLegal(spellAbility,game)) {
          legalParts=true;
          if (!spellAbility.getSpellAbilityType().equals(SpellAbilityType.SPLICE)) {
            updateOptionalCosts(index);
          }
          result|=spellAbility.resolve(game);
        }
      }
      index++;
    }
    if (legalParts) {
      if (!copiedSpell) {
        for (        Effect effect : ability.getEffects()) {
          if (effect instanceof PostResolveEffect) {
            ((PostResolveEffect)effect).postResolve(card,ability,controllerId,game);
            return result;
          }
        }
        if (!card.isCopy() && game.getState().getZone(card.getId()) == Zone.STACK) {
          card.moveToZone(Zone.GRAVEYARD,ability.getId(),game,false);
        }
      }
      return result;
    }
    game.informPlayers(getName() + ""String_Node_Str"");
    counter(null,game);
    return false;
  }
 else   if (this.getCardType().contains(CardType.ENCHANTMENT) && this.getSubtype().contains(""String_Node_Str"")) {
    if (ability.getTargets().stillLegal(ability,game)) {
      updateOptionalCosts(0);
      if (card.putOntoBattlefield(game,Zone.HAND,ability.getId(),controllerId)) {
        return ability.resolve(game);
      }
      return false;
    }
    if (this.getCardType().contains(CardType.CREATURE)) {
      updateOptionalCosts(0);
      result=card.putOntoBattlefield(game,Zone.HAND,ability.getId(),controllerId);
      return result;
    }
 else {
      game.informPlayers(getName() + ""String_Node_Str"");
      counter(null,game);
      return false;
    }
  }
 else {
    updateOptionalCosts(0);
    result=card.putOntoBattlefield(game,Zone.HAND,ability.getId(),controllerId);
    return result;
  }
}",0.9908382959230416
159584,"@Override public List<String> getSubtype(){
  return card.getSubtype();
}","@Override public List<String> getSubtype(){
  if (this.getSpellAbility() instanceof BestowAbility) {
    List<String> subtypes=new ArrayList<String>();
    subtypes.addAll(card.getSubtype());
    subtypes.add(""String_Node_Str"");
    return subtypes;
  }
  return card.getSubtype();
}",0.2640449438202247
159585,"public CommanderReplacementEffect(final CommanderReplacementEffect effect){
  super(effect);
}","public CommanderReplacementEffect(final CommanderReplacementEffect effect){
  super(effect);
  this.commanderId=effect.commanderId;
}",0.8281938325991189
159586,"@Override public ChroniclerOfHeroes copy(){
  return new ChroniclerOfHeroes(this);
}","@Override public ChroniclerOfHeroesEffect copy(){
  return new ChroniclerOfHeroesEffect(this);
}",0.9333333333333332
159587,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Card card=controller.getLibrary().getFromTop(game);
    controller.drawCards(1,game);
    controller.revealCards(""String_Node_Str"",new CardsImpl(card),game);
    if (filter.match(card,game)) {
      controller.discard(card,source,game);
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Card card=controller.getLibrary().getFromTop(game);
    controller.drawCards(1,game);
    controller.revealCards(""String_Node_Str"",new CardsImpl(card),game);
    if (!filter.match(card,game)) {
      controller.discard(card,source,game);
    }
    return true;
  }
  return false;
}",0.9988465974625144
159588,"public synchronized void leaveTable(UUID userId){
  UUID playerId=userPlayerMap.get(userId);
  if (playerId != null) {
    if (table.getState() == TableState.WAITING || table.getState() == TableState.STARTING) {
      table.leaveNotStartedTable(playerId);
      if (table.isTournament()) {
        TournamentManager.getInstance().quit(tournament.getId(),userId);
      }
 else {
        match.leave(playerId);
      }
      User user=UserManager.getInstance().getUser(userId);
      user.removeTable(playerId);
      userPlayerMap.remove(userId);
    }
 else     if (!table.getState().equals(TableState.FINISHED)) {
      if (table.isTournament()) {
        TableManager.getInstance().userQuitTournamentSubTables(userId);
        TournamentManager.getInstance().quit(tournament.getId(),userId);
      }
 else {
        match.leave(playerId);
      }
    }
  }
}","public synchronized void leaveTable(UUID userId){
  UUID playerId=userPlayerMap.get(userId);
  if (playerId != null) {
    if (table.getState() == TableState.WAITING || table.getState() == TableState.STARTING) {
      table.leaveNotStartedTable(playerId);
      if (table.isTournament()) {
        tournament.removePlayer(playerId);
      }
 else {
        match.leave(playerId);
      }
      User user=UserManager.getInstance().getUser(userId);
      user.removeTable(playerId);
      userPlayerMap.remove(userId);
    }
 else     if (!table.getState().equals(TableState.FINISHED)) {
      if (table.isTournament()) {
        TableManager.getInstance().userQuitTournamentSubTables(userId);
        TournamentManager.getInstance().quit(tournament.getId(),userId);
      }
 else {
        match.leave(playerId);
      }
    }
  }
}",0.9491725768321512
159589,"public synchronized boolean joinTournament(UUID userId,String name,String playerType,int skill) throws GameException {
  if (table.getState() != TableState.WAITING) {
    return false;
  }
  Seat seat=table.getNextAvailableSeat(playerType);
  if (seat == null) {
    throw new GameException(""String_Node_Str"");
  }
  Player player=createPlayer(name,seat.getPlayerType(),skill);
  if (player != null) {
    tournament.addPlayer(player,seat.getPlayerType());
    table.joinTable(player,seat);
    User user=UserManager.getInstance().getUser(userId);
    if (user == null) {
      logger.fatal(new StringBuilder(""String_Node_Str"").append(name).append(""String_Node_Str"").append(userId).toString());
      return false;
    }
    if (!player.canJoinTable(table)) {
      user.showUserMessage(""String_Node_Str"",new StringBuilder(""String_Node_Str"").append(seat.getPlayerType()).append(""String_Node_Str"").toString());
      return false;
    }
    user.addTable(player.getId(),table);
    logger.debug(""String_Node_Str"" + player.getId());
    if (seat.getPlayer().isHuman()) {
      user.joinedTable(table.getRoomId(),table.getId(),true);
      userPlayerMap.put(userId,player.getId());
    }
    return true;
  }
 else {
    throw new GameException(""String_Node_Str"" + seat.getPlayerType().toString() + ""String_Node_Str"");
  }
}","public synchronized boolean joinTournament(UUID userId,String name,String playerType,int skill) throws GameException {
  if (table.getState() != TableState.WAITING) {
    return false;
  }
  Seat seat=table.getNextAvailableSeat(playerType);
  if (seat == null) {
    throw new GameException(""String_Node_Str"");
  }
  Player player=createPlayer(name,seat.getPlayerType(),skill);
  if (player != null) {
    User user=UserManager.getInstance().getUser(userId);
    if (user == null) {
      logger.fatal(new StringBuilder(""String_Node_Str"").append(name).append(""String_Node_Str"").append(userId).toString());
      return false;
    }
    if (!player.canJoinTable(table)) {
      user.showUserMessage(""String_Node_Str"",new StringBuilder(""String_Node_Str"").append(seat.getPlayerType()).append(""String_Node_Str"").toString());
      return false;
    }
    tournament.addPlayer(player,seat.getPlayerType());
    table.joinTable(player,seat);
    user.addTable(player.getId(),table);
    logger.debug(""String_Node_Str"" + player.getId());
    if (seat.getPlayer().isHuman()) {
      user.joinedTable(table.getRoomId(),table.getId(),true);
      userPlayerMap.put(userId,player.getId());
    }
    return true;
  }
 else {
    throw new GameException(""String_Node_Str"" + seat.getPlayerType().toString() + ""String_Node_Str"");
  }
}",0.9326267978803936
159590,"public synchronized void startMatch(){
  if (table.getState() == TableState.STARTING) {
    try {
      User user=UserManager.getInstance().getUser(userId);
      logger.info(new StringBuilder(""String_Node_Str"").append(user.getName()).append(""String_Node_Str"").append(match.getId()));
      match.startMatch();
      startGame(null);
    }
 catch (    GameException ex) {
      logger.fatal(""String_Node_Str"",ex);
      match.endGame();
    }
  }
}","public synchronized void startMatch(){
  if (table.getState() == TableState.STARTING) {
    try {
      String tableInfo;
      if (table.isTournamentSubTable()) {
        tableInfo=""String_Node_Str"" + table.getTournament().getId() + ""String_Node_Str"";
      }
 else {
        User user=UserManager.getInstance().getUser(userId);
        tableInfo=""String_Node_Str"" + user.getName();
      }
      logger.info(new StringBuilder(tableInfo).append(""String_Node_Str"").append(match.getId()));
      match.startMatch();
      startGame(null);
    }
 catch (    GameException ex) {
      logger.fatal(""String_Node_Str"",ex);
      match.endGame();
    }
  }
}",0.7127272727272728
159591,"protected void play(UUID nextPlayerId){
  if (!isPaused() && !isGameOver()) {
    PlayerList players=state.getPlayerList(nextPlayerId);
    Player player=getPlayer(players.get());
    while (!isPaused() && !isGameOver()) {
      if (!playTurn(player)) {
        break;
      }
      state.setTurnNum(state.getTurnNum() + 1);
      while (getState().getTurnMods().extraTurn(player.getId())) {
        state.setExtraTurn(true);
        playTurn(player);
        state.setTurnNum(state.getTurnNum() + 1);
      }
      state.setExtraTurn(false);
      player=players.getNext(this);
    }
  }
  if (isGameOver()) {
    winnerId=findWinnersAndLosers();
  }
}","protected void play(UUID nextPlayerId){
  if (!isPaused() && !isGameOver()) {
    PlayerList players=state.getPlayerList(nextPlayerId);
    Player player=getPlayer(players.get());
    while (!isPaused() && !isGameOver()) {
      if (!playTurn(player)) {
        break;
      }
      state.setTurnNum(state.getTurnNum() + 1);
      while (getState().getTurnMods().extraTurn(player.getId())) {
        state.setExtraTurn(true);
        playTurn(player);
        state.setTurnNum(state.getTurnNum() + 1);
      }
      state.setExtraTurn(false);
      player=players.getNext(this);
    }
  }
  if (isGameOver()) {
    winnerId=findWinnersAndLosers();
    logger.info(new StringBuilder(""String_Node_Str"").append(this.getId()).append(""String_Node_Str""));
  }
}",0.9275568181818182
159592,"@Override public synchronized void concede(UUID playerId){
  Player player=state.getPlayer(playerId);
  if (player != null) {
    logger.info(new StringBuilder(""String_Node_Str"").append(player.getName()).append(""String_Node_Str"").append(this.getId()));
    player.concede(this);
    fireInformEvent(player.getName() + ""String_Node_Str"");
  }
}","@Override public synchronized void concede(UUID playerId){
  Player player=state.getPlayer(playerId);
  if (player != null) {
    logger.debug(new StringBuilder(""String_Node_Str"").append(player.getName()).append(""String_Node_Str"").append(this.getId()));
    player.concede(this);
    fireInformEvent(player.getName() + ""String_Node_Str"");
  }
}",0.9868995633187772
159593,"@Override public boolean isGameOver(){
  if (state.isGameOver()) {
    return true;
  }
  int remainingPlayers=0;
  int numLosers=0;
  for (  Player player : state.getPlayers().values()) {
    if (!player.hasLeft()) {
      remainingPlayers++;
    }
    if (player.hasLost()) {
      numLosers++;
    }
  }
  if (remainingPlayers <= 1 || numLosers >= state.getPlayers().size() - 1) {
    for (    Player player : state.getPlayers().values()) {
      if (!player.hasLeft() && !player.hasLost()) {
        logger.info(new StringBuilder(""String_Node_Str"").append(player.getName()).append(""String_Node_Str"").append(this.getId()));
        player.won(this);
      }
    }
    end();
    endTime=new Date();
    return true;
  }
  return false;
}","@Override public synchronized boolean isGameOver(){
  if (state.isGameOver()) {
    return true;
  }
  int remainingPlayers=0;
  int numLosers=0;
  for (  Player player : state.getPlayers().values()) {
    if (!player.hasLeft()) {
      remainingPlayers++;
    }
    if (player.hasLost()) {
      numLosers++;
    }
  }
  if (remainingPlayers <= 1 || numLosers >= state.getPlayers().size() - 1) {
    end();
    for (    Player player : state.getPlayers().values()) {
      if (!player.hasLeft() && !player.hasLost()) {
        logger.debug(new StringBuilder(""String_Node_Str"").append(player.getName()).append(""String_Node_Str"").append(this.getId()));
        player.won(this);
      }
    }
    endTime=new Date();
    return true;
  }
  return false;
}",0.9705488621151273
159594,"/** 
 * 800.4a When a player leaves the game, all objects (see rule 109) owned by that player leave  the game and any effects which give that player control of any objects or players end. Then,  if that player controlled any objects on the stack not represented by cards, those objects  cease to exist. Then, if there are any objects still controlled by that player, those objects are exiled. This is not a state-based action. It happens as soon as the player leaves the game. If the player who left the game had priority at the time he or she left, priority passes to the next player in turn order who's still in the game. #
 * @param playerId 
 */
@Override public synchronized void leave(UUID playerId){
  Player player=getPlayer(playerId);
  if (player.hasLeft()) {
    return;
  }
  logger.info(new StringBuilder(""String_Node_Str"").append(player.getName()).append(""String_Node_Str"").append(this.getId()));
  player.leave();
  if (this.isGameOver()) {
    return;
  }
  for (Iterator<Permanent> it=getBattlefield().getAllPermanents().iterator(); it.hasNext(); ) {
    Permanent perm=it.next();
    if (perm.getOwnerId().equals(playerId)) {
      if (perm.getAttachedTo() != null) {
        Permanent attachedTo=getPermanent(perm.getAttachedTo());
        if (attachedTo != null) {
          attachedTo.removeAttachment(perm.getId(),this);
        }
      }
      if (perm.getCardType().contains(CardType.CREATURE) && this.getCombat() != null) {
        this.getCombat().removeFromCombat(perm.getId(),this);
      }
      it.remove();
    }
  }
  this.getState().getContinuousEffects().removeInactiveEffects(this);
  for (Iterator<StackObject> it=getStack().iterator(); it.hasNext(); ) {
    StackObject object=it.next();
    if (object.getControllerId().equals(playerId)) {
      it.remove();
    }
  }
  for (Iterator<Permanent> it=getBattlefield().getAllPermanents().iterator(); it.hasNext(); ) {
    Permanent perm=it.next();
    if (perm.getControllerId().equals(playerId)) {
      perm.moveToExile(null,""String_Node_Str"",null,this);
    }
  }
  for (  ExileZone exile : this.getExile().getExileZones()) {
    for (Iterator<UUID> it=exile.iterator(); it.hasNext(); ) {
      Card card=this.getCard(it.next());
      if (card != null && card.getOwnerId().equals(playerId)) {
        it.remove();
      }
    }
  }
  Iterator it=gameCards.entrySet().iterator();
  while (it.hasNext()) {
    Entry<UUID,Card> entry=(Entry<UUID,Card>)it.next();
    Card card=entry.getValue();
    if (card.getOwnerId().equals(playerId)) {
      it.remove();
    }
  }
  for (  Player leftPlayer : this.getPlayers().values()) {
    if (leftPlayer.isInGame()) {
      leftPlayer.otherPlayerLeftGame(this);
    }
  }
}","/** 
 * 800.4a When a player leaves the game, all objects (see rule 109) owned by that player leave  the game and any effects which give that player control of any objects or players end. Then,  if that player controlled any objects on the stack not represented by cards, those objects  cease to exist. Then, if there are any objects still controlled by that player, those objects are exiled. This is not a state-based action. It happens as soon as the player leaves the game. If the player who left the game had priority at the time he or she left, priority passes to the next player in turn order who's still in the game. #
 * @param playerId 
 */
@Override public synchronized void leave(UUID playerId){
  Player player=getPlayer(playerId);
  if (player.hasLeft()) {
    return;
  }
  player.leave();
  if (this.isGameOver()) {
    return;
  }
  for (Iterator<Permanent> it=getBattlefield().getAllPermanents().iterator(); it.hasNext(); ) {
    Permanent perm=it.next();
    if (perm.getOwnerId().equals(playerId)) {
      if (perm.getAttachedTo() != null) {
        Permanent attachedTo=getPermanent(perm.getAttachedTo());
        if (attachedTo != null) {
          attachedTo.removeAttachment(perm.getId(),this);
        }
      }
      if (perm.getCardType().contains(CardType.CREATURE) && this.getCombat() != null) {
        this.getCombat().removeFromCombat(perm.getId(),this);
      }
      it.remove();
    }
  }
  this.getState().getContinuousEffects().removeInactiveEffects(this);
  for (Iterator<StackObject> it=getStack().iterator(); it.hasNext(); ) {
    StackObject object=it.next();
    if (object.getControllerId().equals(playerId)) {
      it.remove();
    }
  }
  for (Iterator<Permanent> it=getBattlefield().getAllPermanents().iterator(); it.hasNext(); ) {
    Permanent perm=it.next();
    if (perm.getControllerId().equals(playerId)) {
      perm.moveToExile(null,""String_Node_Str"",null,this);
    }
  }
  for (  ExileZone exile : this.getExile().getExileZones()) {
    for (Iterator<UUID> it=exile.iterator(); it.hasNext(); ) {
      Card card=this.getCard(it.next());
      if (card != null && card.getOwnerId().equals(playerId)) {
        it.remove();
      }
    }
  }
  Iterator it=gameCards.entrySet().iterator();
  while (it.hasNext()) {
    Entry<UUID,Card> entry=(Entry<UUID,Card>)it.next();
    Card card=entry.getValue();
    if (card.getOwnerId().equals(playerId)) {
      it.remove();
    }
  }
  for (  Player leftPlayer : this.getPlayers().values()) {
    if (leftPlayer.isInGame()) {
      leftPlayer.otherPlayerLeftGame(this);
    }
  }
}",0.9763302404847568
159595,"@Override public boolean cast(SpellAbility ability,Game game,boolean noMana){
  if (!ability.getSpellAbilityType().equals(SpellAbilityType.BASE)) {
    ability=chooseSpellAbilityForCast(ability,game,noMana);
  }
  Card card=game.getCard(ability.getSourceId());
  if (card != null) {
    if (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.CAST_SPELL,ability.getId(),ability.getSourceId(),playerId))) {
      int bookmark=game.bookmarkState();
      Zone fromZone=game.getState().getZone(card.getId());
      card.cast(game,fromZone,ability,playerId);
      Spell spell=game.getStack().getSpell(ability.getId());
      if (spell.activate(game,noMana)) {
        GameEvent event=GameEvent.getEvent(GameEvent.EventType.SPELL_CAST,spell.getSpellAbility().getId(),spell.getSpellAbility().getSourceId(),playerId);
        event.setZone(fromZone);
        game.fireEvent(event);
        game.fireInformEvent(new StringBuilder(name).append(spell.getActivatedMessage(game)).toString());
        game.removeBookmark(bookmark);
        resetStoredBookmark(game);
        return true;
      }
      game.restoreState(bookmark);
    }
  }
  return false;
}","@Override public boolean cast(SpellAbility ability,Game game,boolean noMana){
  if (!ability.getSpellAbilityType().equals(SpellAbilityType.BASE)) {
    ability=chooseSpellAbilityForCast(ability,game,noMana);
  }
  Card card=game.getCard(ability.getSourceId());
  if (card != null) {
    if (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.CAST_SPELL,ability.getId(),ability.getSourceId(),playerId))) {
      int bookmark=game.bookmarkState();
      Zone fromZone=game.getState().getZone(card.getId());
      card.cast(game,fromZone,ability,playerId);
      Spell spell=game.getStack().getSpell(ability.getId());
      if (spell.activate(game,noMana)) {
        GameEvent event=GameEvent.getEvent(GameEvent.EventType.SPELL_CAST,spell.getSpellAbility().getId(),spell.getSpellAbility().getSourceId(),playerId);
        event.setZone(fromZone);
        game.fireEvent(event);
        game.fireInformEvent(new StringBuilder(name).append(spell.getActivatedMessage(game)).toString());
        game.removeBookmark(bookmark);
        resetStoredBookmark(game);
        return true;
      }
      if (!game.isGameOver()) {
        game.restoreState(bookmark);
      }
    }
  }
  return false;
}",0.9574105621805792
159596,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(targetPointer.getFirst(game,source));
  Permanent permanent=game.getPermanent(source.getSourceId());
  if (player == null || permanent == null) {
    return false;
  }
  int targetCount=game.getBattlefield().countAll(filter,player.getId(),game);
  int counterCount=permanent.getCounters().getCount(CounterType.FADE);
  int amount=Math.min(counterCount,targetCount);
  Target target=new TargetControlledPermanent(amount,amount,filter,false);
  target.setRequired(true);
  target.setNotTarget(true);
  if (player.chooseTarget(Outcome.Tap,target,source,game)) {
    boolean abilityApplied=false;
    for (    UUID uuid : target.getTargets()) {
      Permanent selectedPermanent=game.getPermanent(uuid);
      if (selectedPermanent != null) {
        abilityApplied|=selectedPermanent.tap(game);
      }
    }
    return abilityApplied;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(targetPointer.getFirst(game,source));
  Permanent permanent=game.getPermanent(source.getSourceId());
  if (player == null || permanent == null) {
    return false;
  }
  int targetCount=game.getBattlefield().countAll(filter,player.getId(),game);
  int counterCount=permanent.getCounters().getCount(CounterType.FADE);
  int amount=Math.min(counterCount,targetCount);
  Target target=new TargetControlledPermanent(amount,amount,filter,false);
  target.setRequired(true);
  target.setNotTarget(true);
  if (amount > 0 && player.chooseTarget(Outcome.Tap,target,source,game)) {
    boolean abilityApplied=false;
    for (    UUID uuid : target.getTargets()) {
      Permanent selectedPermanent=game.getPermanent(uuid);
      if (selectedPermanent != null) {
        abilityApplied|=selectedPermanent.tap(game);
      }
    }
    return abilityApplied;
  }
  return false;
}",0.9926315789473684
159597,"private int getManaCostScore(Card card,List<ColoredManaSymbol> allowedColors){
  int converted=card.getManaCost().convertedManaCost();
  final Map<String,Integer> singleCount=new HashMap<String,Integer>();
  int maxSingleCount=0;
  int multicolor=0;
  Set<String> colors=new HashSet<String>();
  for (  String symbol : card.getManaCost().getSymbols()) {
    int count=0;
    symbol=symbol.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    if (isColoredMana(symbol)) {
      for (      ColoredManaSymbol allowed : allowedColors) {
        if (allowed.toString().equals(symbol)) {
          count++;
        }
      }
      if (count == 0) {
        return -30;
      }
      if (!colors.contains(symbol)) {
        multicolor+=1;
      }
      Integer typeCount=singleCount.get(symbol);
      if (typeCount == null) {
        typeCount=new Integer(0);
      }
      typeCount+=1;
      singleCount.put(symbol,typeCount);
      maxSingleCount=Math.max(maxSingleCount,typeCount);
    }
  }
  int multicolorBonus=multicolor > 1 ? 30 : 0;
  maxSingleCount=Math.min(maxSingleCount,SINGLE_PENALTY.length - 1);
  return 2 * converted + 3 * (10 - SINGLE_PENALTY[maxSingleCount]) + multicolorBonus;
}","private int getManaCostScore(Card card,List<ColoredManaSymbol> allowedColors){
  int converted=card.getManaCost().convertedManaCost();
  final Map<String,Integer> singleCount=new HashMap<String,Integer>();
  int maxSingleCount=0;
  int multicolor=0;
  Set<String> colors=new HashSet<String>();
  for (  String symbol : card.getManaCost().getSymbols()) {
    int count=0;
    symbol=symbol.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    if (isColoredMana(symbol)) {
      for (      ColoredManaSymbol allowed : allowedColors) {
        if (symbol.contains(allowed.toString())) {
          count++;
        }
      }
      if (count == 0) {
        return -30;
      }
      if (!colors.contains(symbol)) {
        multicolor+=1;
        colors.add(symbol);
      }
      Integer typeCount=singleCount.get(symbol);
      if (typeCount == null) {
        typeCount=new Integer(0);
      }
      typeCount+=1;
      singleCount.put(symbol,typeCount);
      maxSingleCount=Math.max(maxSingleCount,typeCount);
    }
  }
  int multicolorBonus=multicolor > 1 ? 30 : 0;
  maxSingleCount=Math.min(maxSingleCount,SINGLE_PENALTY.length - 1);
  return 2 * converted + 3 * (10 - SINGLE_PENALTY[maxSingleCount]) + multicolorBonus;
}",0.9768
159598,"/** 
 * Adds lands from non basic land (if provided), adds basic lands getting them from provided   {@link RateCallback}}.
 * @param allowedColors
 * @param landCardPool
 * @param callback
 */
private static void addLandsToDeck(List<ColoredManaSymbol> allowedColors,List<String> setsToUse,List<Card> landCardPool,RateCallback callback){
  final Map<String,Integer> colorCount=new HashMap<String,Integer>();
  for (  final Card card : deck.getCards()) {
    for (    String symbol : card.getManaCost().getSymbols()) {
      int count=0;
      symbol=symbol.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      if (isColoredMana(symbol)) {
        for (        ColoredManaSymbol allowed : allowedColors) {
          if (allowed.toString().equals(symbol)) {
            count++;
          }
        }
        if (count > 0) {
          Integer typeCount=colorCount.get(symbol);
          if (typeCount == null) {
            typeCount=new Integer(0);
          }
          typeCount+=1;
          colorCount.put(symbol,typeCount);
        }
      }
    }
  }
  final Map<String,Integer> colorSource=new HashMap<String,Integer>();
  for (  final ColoredManaSymbol color : ColoredManaSymbol.values()) {
    colorSource.put(color.toString(),0);
  }
  if (landCardPool != null) {
    for (    final Card landCard : landCardPool) {
      deck.getCards().add(landCard);
      for (      Mana mana : landCard.getMana()) {
        for (        ColoredManaSymbol color : allowedColors) {
          int amount=mana.getColor(color);
          if (amount > 0) {
            Integer count=colorSource.get(color.toString());
            count+=amount;
            colorSource.put(color.toString(),count);
          }
        }
      }
    }
  }
  while (deck.getCards().size() < deckSize) {
    ColoredManaSymbol bestColor=null;
    int lowestRatio=Integer.MAX_VALUE;
    for (    final ColoredManaSymbol color : ColoredManaSymbol.values()) {
      final Integer count=colorCount.get(color.toString());
      if (count != null && count > 0) {
        final int source=colorSource.get(color.toString());
        final int ratio;
        if (source < MIN_SOURCE) {
          ratio=source - count;
        }
 else {
          ratio=source * 100 / count;
        }
        if (ratio < lowestRatio) {
          lowestRatio=ratio;
          bestColor=color;
        }
      }
    }
    final Card landCard=callback.getBestBasicLand(bestColor,setsToUse);
    Integer count=colorSource.get(bestColor.toString());
    count++;
    colorSource.put(bestColor.toString(),count);
    deck.getCards().add(landCard);
  }
}","/** 
 * Adds lands from non basic land (if provided), adds basic lands getting them from provided   {@link RateCallback}}.
 * @param allowedColors
 * @param landCardPool
 * @param callback
 */
private static void addLandsToDeck(List<ColoredManaSymbol> allowedColors,List<String> setsToUse,List<Card> landCardPool,RateCallback callback){
  final Map<String,Integer> colorCount=new HashMap<String,Integer>();
  for (  final Card card : deck.getCards()) {
    for (    String symbol : card.getManaCost().getSymbols()) {
      int count=0;
      symbol=symbol.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      if (isColoredMana(symbol)) {
        for (        ColoredManaSymbol allowed : allowedColors) {
          if (symbol.contains(allowed.toString())) {
            count++;
          }
        }
        if (count > 0) {
          Integer typeCount=colorCount.get(symbol);
          if (typeCount == null) {
            typeCount=new Integer(0);
          }
          typeCount+=1;
          colorCount.put(symbol,typeCount);
        }
      }
    }
  }
  final Map<String,Integer> colorSource=new HashMap<String,Integer>();
  for (  final ColoredManaSymbol color : ColoredManaSymbol.values()) {
    colorSource.put(color.toString(),0);
  }
  if (landCardPool != null) {
    for (    final Card landCard : landCardPool) {
      deck.getCards().add(landCard);
      for (      Mana mana : landCard.getMana()) {
        for (        ColoredManaSymbol color : allowedColors) {
          int amount=mana.getColor(color);
          if (amount > 0) {
            Integer count=colorSource.get(color.toString());
            count+=amount;
            colorSource.put(color.toString(),count);
          }
        }
      }
    }
  }
  while (deck.getCards().size() < deckSize) {
    ColoredManaSymbol bestColor=null;
    int lowestRatio=Integer.MAX_VALUE;
    for (    final ColoredManaSymbol color : ColoredManaSymbol.values()) {
      final Integer count=colorCount.get(color.toString());
      if (count != null && count > 0) {
        final int source=colorSource.get(color.toString());
        final int ratio;
        if (source < MIN_SOURCE) {
          ratio=source - count;
        }
 else {
          ratio=source * 100 / count;
        }
        if (ratio < lowestRatio) {
          lowestRatio=ratio;
          bestColor=color;
        }
      }
    }
    final Card landCard=callback.getBestBasicLand(bestColor,setsToUse);
    Integer count=colorSource.get(bestColor.toString());
    count++;
    colorSource.put(bestColor.toString(),count);
    deck.getCards().add(landCard);
  }
}",0.989753320683112
159599,"protected static boolean isColoredMana(String symbol){
  return symbol.equals(""String_Node_Str"") || symbol.equals(""String_Node_Str"") || symbol.equals(""String_Node_Str"")|| symbol.equals(""String_Node_Str"")|| symbol.equals(""String_Node_Str"");
}","protected static boolean isColoredMana(String symbol){
  return symbol.equals(""String_Node_Str"") || symbol.equals(""String_Node_Str"") || symbol.equals(""String_Node_Str"")|| symbol.equals(""String_Node_Str"")|| symbol.equals(""String_Node_Str"")|| symbol.contains(""String_Node_Str"");
}",0.928709055876686
159600,"@Override public boolean apply(Game game,Ability source){
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(filter,source.getControllerId(),source.getSourceId(),game)) {
    permanent.destroy(source.getId(),game,noRegen);
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(filter,source.getControllerId(),source.getSourceId(),game)) {
    permanent.destroy(source.getSourceId(),game,noRegen);
  }
  return true;
}",0.9888059701492538
159601,"public DestroyAllEffect(final DestroyAllEffect effect){
  super(effect);
  this.filter=effect.filter.copy();
}","public DestroyAllEffect(final DestroyAllEffect effect){
  super(effect);
  this.filter=effect.filter.copy();
  this.noRegen=effect.noRegen;
}",0.8764940239043825
159602,"@Override public BeginningOfYourUpkeepdelayTriggeredAbility copy(){
  return new BeginningOfYourUpkeepdelayTriggeredAbility(this);
}","@Override public ObzedatGhostCouncilReturnEffect copy(){
  return new ObzedatGhostCouncilReturnEffect(this);
}",0.4958677685950413
159603,"@Override public boolean applies(Permanent permanent,Ability source,Game game){
  return true;
}","@Override public boolean applies(Permanent permanent,Ability source,Game game){
  return permanent.canBlock(source.getFirstTarget(),game);
}",0.8050847457627118
159604,"@Override public boolean applies(Permanent permanent,Ability source,Game game){
  Permanent creature=game.getPermanent(source.getTargets().get(1).getFirstTarget());
  if (creature != null) {
    return true;
  }
  return false;
}","@Override public boolean applies(Permanent permanent,Ability source,Game game){
  if (permanent.getId().equals(source.getTargets().get(1).getFirstTarget())) {
    return permanent.canBlock(source.getFirstTarget(),game);
  }
  return false;
}",0.5787234042553191
159605,"@Override public boolean applies(Permanent permanent,Ability source,Game game){
  if (permanent.getId().equals(source.getFirstTarget())) {
    return true;
  }
  return false;
}","@Override public boolean applies(Permanent permanent,Ability source,Game game){
  if (permanent.getId().equals(source.getFirstTarget())) {
    Permanent equipment=game.getPermanent(source.getSourceId());
    if (equipment != null && equipment.getAttachedTo() != null) {
      return permanent.canBlock(equipment.getAttachedTo(),game);
    }
  }
  return false;
}",0.6159554730983302
159606,"@Override public boolean applies(Permanent permanent,Ability source,Game game){
  return true;
}","@Override public boolean applies(Permanent permanent,Ability source,Game game){
  Permanent attachment=game.getPermanent(source.getSourceId());
  if (attachment != null && attachment.getAttachedTo() != null) {
    return permanent.canBlock(attachment.getAttachedTo(),game);
  }
  return true;
}",0.4358974358974359
159607,"@Override public boolean applies(Permanent permanent,Ability source,Game game){
  return true;
}","@Override public boolean applies(Permanent permanent,Ability source,Game game){
  return permanent.canBlock(source.getSourceId(),game);
}",0.8240343347639485
159608,"@Override public boolean applies(Permanent permanent,Ability source,Game game){
  Permanent creature=game.getPermanent(source.getFirstTarget());
  if (creature != null && creature.getId().equals(permanent.getId())) {
    return true;
  }
  return false;
}","@Override public boolean applies(Permanent permanent,Ability source,Game game){
  if (permanent.getId().equals(source.getFirstTarget())) {
    Permanent blocker=game.getPermanent(source.getFirstTarget());
    if (blocker != null && blocker.canBlock(source.getSourceId(),game)) {
      return true;
    }
  }
  return false;
}",0.696551724137931
159609,"@Override public boolean canBlock(UUID attackerId,Game game){
  if (tapped && !game.getState().getContinuousEffects().asThough(this.getId(),AsThoughEffectType.BLOCK_TAPPED,game)) {
    return false;
  }
  Permanent attacker=game.getPermanent(attackerId);
  for (  Map.Entry entry : game.getContinuousEffects().getApplicableRestrictionEffects(this,game).entrySet()) {
    RestrictionEffect effect=(RestrictionEffect)entry.getKey();
    for (    Ability ability : (HashSet<Ability>)entry.getValue()) {
      if (!effect.canBlock(attacker,this,ability,game)) {
        return false;
      }
    }
  }
  for (  Map.Entry entry : game.getContinuousEffects().getApplicableRestrictionEffects(attacker,game).entrySet()) {
    RestrictionEffect effect=(RestrictionEffect)entry.getKey();
    for (    Ability ability : (HashSet<Ability>)entry.getValue()) {
      if (!effect.canBeBlocked(attacker,this,ability,game)) {
        return false;
      }
    }
  }
  if (attacker != null && attacker.hasProtectionFrom(this,game)) {
    return false;
  }
  return true;
}","@Override public boolean canBlock(UUID attackerId,Game game){
  if (tapped && !game.getState().getContinuousEffects().asThough(this.getId(),AsThoughEffectType.BLOCK_TAPPED,game)) {
    return false;
  }
  Permanent attacker=game.getPermanent(attackerId);
  if (!game.getOpponents(this.getControllerId()).contains(attacker.getControllerId())) {
    return false;
  }
  for (  Map.Entry entry : game.getContinuousEffects().getApplicableRestrictionEffects(this,game).entrySet()) {
    RestrictionEffect effect=(RestrictionEffect)entry.getKey();
    for (    Ability ability : (HashSet<Ability>)entry.getValue()) {
      if (!effect.canBlock(attacker,this,ability,game)) {
        return false;
      }
    }
  }
  for (  Map.Entry entry : game.getContinuousEffects().getApplicableRestrictionEffects(attacker,game).entrySet()) {
    RestrictionEffect effect=(RestrictionEffect)entry.getKey();
    for (    Ability ability : (HashSet<Ability>)entry.getValue()) {
      if (!effect.canBeBlocked(attacker,this,ability,game)) {
        return false;
      }
    }
  }
  if (attacker != null && attacker.hasProtectionFrom(this,game)) {
    return false;
  }
  return true;
}",0.949977467327625
159610,"public void getFeedback(FeedbackMode mode,String message,boolean special,Map<String,Serializable> options){
  logger.info(""String_Node_Str"" + message);
  this.lblMessage.setText(message);
  this.helper.setMessage(message);
  this.selected=false;
  this.mode=mode;
switch (this.mode) {
case INFORM:
    this.btnLeft.setVisible(false);
  this.btnRight.setVisible(false);
this.helper.setState(""String_Node_Str"",false,""String_Node_Str"",false);
break;
case QUESTION:
this.btnLeft.setVisible(true);
this.btnLeft.setText(""String_Node_Str"");
this.btnRight.setVisible(true);
this.btnRight.setText(""String_Node_Str"");
this.helper.setState(""String_Node_Str"",true,""String_Node_Str"",true);
break;
case CONFIRM:
this.btnLeft.setVisible(true);
this.btnLeft.setText(""String_Node_Str"");
this.btnRight.setVisible(true);
this.btnRight.setText(""String_Node_Str"");
this.helper.setState(""String_Node_Str"",true,""String_Node_Str"",true);
break;
case CANCEL:
this.btnLeft.setVisible(false);
this.btnRight.setVisible(true);
this.btnRight.setText(""String_Node_Str"");
this.helper.setState(""String_Node_Str"",false,""String_Node_Str"",true);
this.helper.setUndoEnabled(false);
break;
case SELECT:
this.btnLeft.setVisible(false);
this.btnRight.setVisible(true);
this.btnRight.setText(""String_Node_Str"");
this.helper.setState(""String_Node_Str"",false,""String_Node_Str"",true);
break;
case END:
this.btnLeft.setVisible(false);
this.btnRight.setVisible(true);
this.btnRight.setText(""String_Node_Str"");
this.helper.setState(""String_Node_Str"",false,""String_Node_Str"",true);
ArrowBuilder.getBuilder().removeAllArrows(gameId);
endWithTimeout();
break;
}
this.btnSpecial.setVisible(special);
this.btnSpecial.setText(""String_Node_Str"");
this.helper.setSpecial(""String_Node_Str"",special);
if (message.contains(""String_Node_Str"")) {
this.btnSpecial.setVisible(true);
this.btnSpecial.setText(""String_Node_Str"");
this.helper.setSpecial(""String_Node_Str"",true);
}
requestFocusIfPossible();
handleOptions(options);
this.revalidate();
this.repaint();
this.helper.setLinks(btnLeft,btnRight,btnSpecial,btnUndo);
this.helper.setVisible(true);
}","public void getFeedback(FeedbackMode mode,String message,boolean special,Map<String,Serializable> options,int messageId){
  logger.info(""String_Node_Str"" + message);
synchronized (this) {
    if (messageId < this.lastMessageId) {
      logger.warn(""String_Node_Str"" + messageId + ""String_Node_Str""+ message);
      return;
    }
    this.lastMessageId=messageId;
  }
  this.lblMessage.setText(message);
  this.helper.setMessage(message);
  this.selected=false;
  this.mode=mode;
switch (this.mode) {
case INFORM:
    this.btnLeft.setVisible(false);
  this.btnRight.setVisible(false);
this.helper.setState(""String_Node_Str"",false,""String_Node_Str"",false);
break;
case QUESTION:
this.btnLeft.setVisible(true);
this.btnLeft.setText(""String_Node_Str"");
this.btnRight.setVisible(true);
this.btnRight.setText(""String_Node_Str"");
this.helper.setState(""String_Node_Str"",true,""String_Node_Str"",true);
break;
case CONFIRM:
this.btnLeft.setVisible(true);
this.btnLeft.setText(""String_Node_Str"");
this.btnRight.setVisible(true);
this.btnRight.setText(""String_Node_Str"");
this.helper.setState(""String_Node_Str"",true,""String_Node_Str"",true);
break;
case CANCEL:
this.btnLeft.setVisible(false);
this.btnRight.setVisible(true);
this.btnRight.setText(""String_Node_Str"");
this.helper.setState(""String_Node_Str"",false,""String_Node_Str"",true);
this.helper.setUndoEnabled(false);
break;
case SELECT:
this.btnLeft.setVisible(false);
this.btnRight.setVisible(true);
this.btnRight.setText(""String_Node_Str"");
this.helper.setState(""String_Node_Str"",false,""String_Node_Str"",true);
break;
case END:
this.btnLeft.setVisible(false);
this.btnRight.setVisible(true);
this.btnRight.setText(""String_Node_Str"");
this.helper.setState(""String_Node_Str"",false,""String_Node_Str"",true);
ArrowBuilder.getBuilder().removeAllArrows(gameId);
endWithTimeout();
break;
}
this.btnSpecial.setVisible(special);
this.btnSpecial.setText(""String_Node_Str"");
this.helper.setSpecial(""String_Node_Str"",special);
if (message.contains(""String_Node_Str"")) {
this.btnSpecial.setVisible(true);
this.btnSpecial.setText(""String_Node_Str"");
this.helper.setSpecial(""String_Node_Str"",true);
}
requestFocusIfPossible();
handleOptions(options);
this.revalidate();
this.repaint();
this.helper.setLinks(btnLeft,btnRight,btnSpecial,btnUndo);
this.helper.setVisible(true);
}",0.9510585021625312
159611,"private boolean checkSpell(Spell spell,Game game){
  if (spell != null) {
    SpellAbility sa=spell.getSpellAbility();
    for (    Effect effect : sa.getEffects()) {
      for (      UUID targetId : effect.getTargetPointer().getTargets(game,sa)) {
        if (targetId.equals(this.getSourceId())) {
          return true;
        }
      }
    }
  }
  return false;
}","private boolean checkSpell(Spell spell,Game game){
  if (spell != null) {
    SpellAbility sa=spell.getSpellAbility();
    for (    Target target : sa.getTargets()) {
      if (!target.isNotTarget() && target.getTargets().contains(this.getSourceId())) {
        return true;
      }
    }
    for (    Effect effect : sa.getEffects()) {
      for (      UUID targetId : effect.getTargetPointer().getTargets(game,sa)) {
        if (targetId.equals(this.getSourceId())) {
          return true;
        }
      }
    }
  }
  return false;
}",0.8123620309050773
159612,"public Mana computeMana(Game game,Ability source){
  this.computedMana.clear();
  if (!source.getChoices().isEmpty()) {
    Choice choice=source.getChoices().get(0);
    if (choice != null && choice instanceof ChoiceColor) {
      String color=choice.getChoice();
      if (color.equals(""String_Node_Str"")) {
        computedMana.setRed(new DevotionCount(ManaType.RED).calculate(game,source));
      }
 else       if (color.equals(""String_Node_Str"")) {
        computedMana.setBlue(new DevotionCount(ManaType.BLUE).calculate(game,source));
      }
 else       if (color.equals(""String_Node_Str"")) {
        computedMana.setWhite(new DevotionCount(ManaType.WHITE).calculate(game,source));
      }
 else       if (color.equals(""String_Node_Str"")) {
        computedMana.setBlack(new DevotionCount(ManaType.BLACK).calculate(game,source));
      }
 else       if (color.equals(""String_Node_Str"")) {
        computedMana.setGreen(new DevotionCount(ManaType.GREEN).calculate(game,source));
      }
    }
  }
  return computedMana;
}","public Mana computeMana(Game game,Ability source){
  this.computedMana.clear();
  if (!source.getChoices().isEmpty()) {
    Choice choice=source.getChoices().get(0);
    if (choice != null && choice instanceof ChoiceColor && choice.getChoice() != null) {
      String color=choice.getChoice();
      if (color.equals(""String_Node_Str"")) {
        computedMana.setRed(new DevotionCount(ManaType.RED).calculate(game,source));
      }
 else       if (color.equals(""String_Node_Str"")) {
        computedMana.setBlue(new DevotionCount(ManaType.BLUE).calculate(game,source));
      }
 else       if (color.equals(""String_Node_Str"")) {
        computedMana.setWhite(new DevotionCount(ManaType.WHITE).calculate(game,source));
      }
 else       if (color.equals(""String_Node_Str"")) {
        computedMana.setBlack(new DevotionCount(ManaType.BLACK).calculate(game,source));
      }
 else       if (color.equals(""String_Node_Str"")) {
        computedMana.setGreen(new DevotionCount(ManaType.GREEN).calculate(game,source));
      }
    }
  }
  return computedMana;
}",0.9855907780979828
159613,"@Override public boolean apply(Game game,Ability source){
  DelayedTriggeredAbility delayedAbility=(DelayedTriggeredAbility)ability.copy();
  delayedAbility.setSourceId(source.getSourceId());
  delayedAbility.setControllerId(source.getControllerId());
  if (this.copyTargets) {
    delayedAbility.getTargets().addAll(source.getTargets());
    for (    Effect effect : ability.getEffects()) {
      effect.setTargetPointer(targetPointer);
    }
  }
  game.addDelayedTriggeredAbility(delayedAbility);
  return true;
}","@Override public boolean apply(Game game,Ability source){
  DelayedTriggeredAbility delayedAbility=(DelayedTriggeredAbility)ability.copy();
  delayedAbility.setSourceId(source.getSourceId());
  delayedAbility.setControllerId(source.getControllerId());
  if (this.copyTargets) {
    delayedAbility.getTargets().addAll(source.getTargets());
    for (    Effect effect : delayedAbility.getEffects()) {
      effect.setTargetPointer(targetPointer);
      effect.getTargetPointer().init(game,source);
    }
  }
  game.addDelayedTriggeredAbility(delayedAbility);
  return true;
}",0.9448529411764706
159614,"@Override public boolean apply(Game game,Ability source){
  boolean applied=false;
  List<Permanent> permanents=game.getBattlefield().getActivePermanents(filter,source.getControllerId(),source.getSourceId(),game);
  if (permanents != null && !permanents.isEmpty()) {
    for (    Permanent permanent : permanents) {
      for (      Ability ability : permanent.getAbilities()) {
        if (!(ability instanceof SpellAbility) && ability.getManaCosts() != null) {
          int costCount=ability.getManaCosts().size();
          for (          Cost cost : ability.getManaCosts()) {
            if (cost instanceof GenericManaCost) {
              GenericManaCost costCasted=(GenericManaCost)cost;
              int amount=costCasted.convertedManaCost();
              int adjustedAmount=0;
              if (costCount == 1 && (amount - 2) <= 0) {
                adjustedAmount=1;
              }
 else {
                adjustedAmount=Math.max(0,amount - 2);
              }
              costCasted.setMana(adjustedAmount);
              applied=true;
            }
          }
        }
      }
    }
  }
  return applied;
}","@Override public boolean apply(Game game,Ability source,Ability abilityToModify){
  Mana mana=abilityToModify.getManaCostsToPay().getMana();
  int reduceMax=mana.getColorless();
  if (mana.count() == mana.getColorless()) {
    reduceMax--;
  }
  if (reduceMax > 2) {
    reduceMax=2;
  }
  Player player=game.getPlayer(abilityToModify.getControllerId());
  if (player != null) {
    ChoiceImpl choice=new ChoiceImpl(true);
    LinkedHashSet<String> set=new LinkedHashSet<String>();
    for (int i=0; i <= reduceMax; i++) {
      set.add(String.valueOf(i));
    }
    choice.setChoices(set);
    choice.setMessage(""String_Node_Str"");
    if (player.choose(Outcome.Benefit,choice,game)) {
      int reduce=Integer.parseInt(choice.getChoice());
      mana.setColorless(mana.getColorless() - reduce);
      abilityToModify.getManaCostsToPay().load(mana.toString());
      return true;
    }
  }
  return false;
}",0.1052114060963618
159615,"@Override public TrainingGroundsCostReductionEffect copy(){
  return new TrainingGroundsCostReductionEffect(this);
}","@Override public TrainingGroundsEffect copy(){
  return new TrainingGroundsEffect(this);
}",0.8737864077669902
159616,"public Player getNext(Game game){
  Player player;
  UUID start=this.get();
  while (true) {
    player=game.getPlayer(super.getNext());
    if (!player.hasLeft() && !player.hasLost()) {
      if (!player.hasReachedNextTurnAfterLeaving()) {
        player.setReachedNextTurnAfterLeaving(true);
      }
      break;
    }
    if (player.getId().equals(start)) {
      return null;
    }
  }
  return player;
}","public Player getNext(Game game){
  Player player;
  UUID start=this.get();
  while (true) {
    player=game.getPlayer(super.getNext());
    if (!player.hasLeft() && !player.hasLost()) {
      break;
    }
    if (!player.hasReachedNextTurnAfterLeaving()) {
      player.setReachedNextTurnAfterLeaving(true);
    }
    if (player.getId().equals(start)) {
      return null;
    }
  }
  return player;
}",0.9506172839506172
159617,"@Override public void start(UUID choosingPlayerId,GameOptions options){
  startTime=new Date();
  this.gameOptions=options;
  scorePlayer=state.getPlayers().values().iterator().next();
  init(choosingPlayerId,options);
  play(startingPlayerId);
}","@Override public void start(UUID choosingPlayerId,GameOptions options){
  startTime=new Date();
  this.gameOptions=options;
  if (state.getPlayers().values().iterator().hasNext()) {
    scorePlayer=state.getPlayers().values().iterator().next();
    init(choosingPlayerId,options);
    play(startingPlayerId);
  }
}",0.8785714285714286
159618,"public void leaveTable(UUID playerId){
  for (int i=0; i < numSeats; i++) {
    Player player=seats[i].getPlayer();
    if (player != null && player.getId().equals(playerId)) {
      if (match != null) {
        match.leave(playerId);
      }
 else {
        seats[i].setPlayer(null);
        if (state == TableState.STARTING) {
          state=TableState.WAITING;
        }
      }
      break;
    }
  }
}","public void leaveTable(UUID playerId){
  for (int i=0; i < numSeats; i++) {
    Player player=seats[i].getPlayer();
    if (player != null && player.getId().equals(playerId)) {
      seats[i].setPlayer(null);
      if (state == TableState.STARTING) {
        state=TableState.WAITING;
      }
      break;
    }
  }
}",0.787292817679558
159619,"@Override public boolean leave(UUID playerId){
  MatchPlayer mPlayer=getPlayer(playerId);
  if (mPlayer != null) {
    mPlayer.setQuit(true);
synchronized (this) {
      this.notifyAll();
    }
    return true;
  }
  return false;
}","@Override public boolean leave(UUID playerId){
  MatchPlayer mPlayer=getPlayer(playerId);
  if (mPlayer != null) {
    if (games.isEmpty()) {
      return players.remove(mPlayer);
    }
    mPlayer.setQuit(true);
synchronized (this) {
      this.notifyAll();
    }
    return true;
  }
  return false;
}",0.8672897196261682
159620,"@Test public void testCard3(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"");
  addCounters(1,PhaseStep.UPKEEP,playerA,""String_Node_Str"",CounterType.LOYALTY,3);
  activateAbility(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"",""String_Node_Str"");
  setStopAt(1,PhaseStep.BEGIN_COMBAT);
  execute();
  assertPermanentCount(playerA,""String_Node_Str"",1);
  assertPermanentCount(playerA,""String_Node_Str"",1);
  assertLife(playerA,23);
  assertLife(playerB,20);
  assertPermanentCount(playerA,""String_Node_Str"",0);
  assertPermanentCount(playerB,""String_Node_Str"",0);
  assertPermanentCount(playerB,""String_Node_Str"",0);
  assertPermanentCount(playerA,""String_Node_Str"",1);
  assertPermanentCount(playerA,""String_Node_Str"",1);
}","@Test public void testCard3(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"");
  addCounters(1,PhaseStep.UPKEEP,playerA,""String_Node_Str"",CounterType.LOYALTY,3);
  activateAbility(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"",""String_Node_Str"");
  setStopAt(1,PhaseStep.BEGIN_COMBAT);
  execute();
  assertPermanentCount(playerA,""String_Node_Str"",1);
  assertPermanentCount(playerA,""String_Node_Str"",1);
  assertLife(playerB,20);
  assertLife(playerA,23);
  assertPermanentCount(playerA,""String_Node_Str"",0);
  assertPermanentCount(playerB,""String_Node_Str"",0);
  assertPermanentCount(playerB,""String_Node_Str"",0);
  assertPermanentCount(playerA,""String_Node_Str"",1);
  assertPermanentCount(playerA,""String_Node_Str"",1);
}",0.8947990543735225
159621,"public void checkTriggers(GameEvent event,Game game){
  for (  TriggeredAbility ability : this.values()) {
    if (ability.isInUseableZone(game,null,true)) {
      MageObject object=getMageObject(event,game,ability);
      if (object != null) {
        if (checkAbilityStillExists(ability,event,object)) {
          if (object instanceof Permanent) {
            ability.setControllerId(((Permanent)object).getControllerId());
          }
          if (ability.checkTrigger(event,game)) {
            UUID controllerId=ability.getControllerId();
            ability.trigger(game,controllerId);
          }
        }
      }
    }
  }
}","public void checkTriggers(GameEvent event,Game game){
  for (  TriggeredAbility ability : this.values()) {
    if (ability.isInUseableZone(game,null,true)) {
      MageObject object=null;
      if (!ability.getZone().equals(Zone.COMMAND) && !game.getState().getZone(ability.getSourceId()).equals(ability.getZone())) {
        object=game.getShortLivingLKI(ability.getSourceId(),ability.getZone());
      }
      if (object == null) {
        object=getMageObject(event,game,ability);
      }
      if (object != null) {
        if (checkAbilityStillExists(ability,event,object)) {
          if (object instanceof Permanent) {
            ability.setControllerId(((Permanent)object).getControllerId());
          }
          if (ability.checkTrigger(event,game)) {
            UUID controllerId=ability.getControllerId();
            ability.trigger(game,controllerId);
          }
        }
      }
    }
  }
}",0.8181229773462784
159622,"/** 
 * Remembers object state to be used as Last Known Information.
 * @param objectId
 * @param zone
 * @param object
 */
@Override public void rememberLKI(UUID objectId,Zone zone,MageObject object){
  if (object instanceof Permanent || object instanceof StackObject) {
    MageObject copy=object.copy();
    lki.put(objectId,copy);
    shortLivingLKI.put(objectId,copy);
  }
}","/** 
 * Remembers object state to be used as Last Known Information.
 * @param objectId
 * @param zone
 * @param object
 */
@Override public void rememberLKI(UUID objectId,Zone zone,MageObject object){
  if (object instanceof Permanent || object instanceof StackObject) {
    MageObject copy=object.copy();
    Map<UUID,MageObject> lkiMap=lki.get(zone);
    if (lkiMap != null) {
      lkiMap.put(objectId,copy);
    }
 else {
      HashMap<UUID,MageObject> newMap=new HashMap<UUID,MageObject>();
      newMap.put(objectId,copy);
      lki.put(zone,newMap);
    }
    Map<UUID,MageObject> shortLivingLkiMap=shortLivingLKI.get(zone);
    if (shortLivingLkiMap != null) {
      shortLivingLkiMap.put(objectId,copy);
    }
 else {
      HashMap<UUID,MageObject> newMap=new HashMap<UUID,MageObject>();
      newMap.put(objectId,copy);
      shortLivingLKI.put(zone,newMap);
    }
  }
}",0.6015873015873016
159623,"/** 
 * Gets last known information about object in the zone. At the moment doesn't take into account zone (it is expected that it doesn't really matter, if not, then Map<UUID, Map<Zone, Card>> should be used instead). Can return null.
 * @param objectId
 * @param zone
 * @return
 */
@Override public MageObject getLastKnownInformation(UUID objectId,Zone zone){
  MageObject object=lki.get(objectId);
  if (object != null) {
    return object.copy();
  }
  return null;
}","/** 
 * Gets last known information about object in the zone. At the moment doesn't take into account zone (it is expected that it doesn't really matter, if not, then Map<UUID, Map<Zone, Card>> should be used instead). Can return null.
 * @param objectId
 * @param zone
 * @return
 */
@Override public MageObject getLastKnownInformation(UUID objectId,Zone zone){
  Map<UUID,MageObject> lkiMap=lki.get(zone);
  if (lkiMap != null) {
    MageObject object=lkiMap.get(objectId);
    if (object != null) {
      return object.copy();
    }
  }
  return null;
}",0.8521400778210116
159624,"@Override public MageObject getShortLivingLKI(UUID objectId,Zone zone){
  MageObject object=shortLivingLKI.get(objectId);
  if (object != null) {
    return object.copy();
  }
  return null;
}","@Override public MageObject getShortLivingLKI(UUID objectId,Zone zone){
  Map<UUID,MageObject> shortLivingLkiMap=shortLivingLKI.get(zone);
  if (shortLivingLkiMap != null) {
    MageObject object=shortLivingLkiMap.get(objectId);
    if (object != null) {
      return object.copy();
    }
  }
  return null;
}",0.6307385229540918
159625,"@Override public boolean moveToZone(Zone toZone,UUID sourceId,Game game,boolean flag,ArrayList<UUID> appliedEffects){
  Zone fromZone=game.getState().getZone(objectId);
  Player controller=game.getPlayer(controllerId);
  if (controller != null && controller.removeFromBattlefield(this,game)) {
    ZoneChangeEvent event=new ZoneChangeEvent(this,sourceId,controllerId,fromZone,toZone,appliedEffects);
    if (!game.replaceEvent(event)) {
      Player owner=game.getPlayer(ownerId);
      game.rememberLKI(objectId,Zone.BATTLEFIELD,this);
      if (owner != null) {
switch (event.getToZone()) {
case GRAVEYARD:
          owner.putInGraveyard(card,game,!flag);
        break;
case HAND:
      owner.getHand().add(card);
    break;
case EXILED:
  game.getExile().getPermanentExile().add(card);
break;
case COMMAND:
game.addCommander(new Commander(card));
break;
case LIBRARY:
if (flag) owner.getLibrary().putOnTop(card,game);
 else owner.getLibrary().putOnBottom(card,game);
break;
case BATTLEFIELD:
break;
}
game.setZone(objectId,event.getToZone());
game.fireEvent(event);
if (event.getFromZone().equals(Zone.BATTLEFIELD)) {
game.resetForSourceId(getId());
game.applyEffects();
}
return game.getState().getZone(objectId) == toZone;
}
}
}
return false;
}","@Override public boolean moveToZone(Zone toZone,UUID sourceId,Game game,boolean flag,ArrayList<UUID> appliedEffects){
  Zone fromZone=game.getState().getZone(objectId);
  Player controller=game.getPlayer(controllerId);
  if (controller != null && controller.removeFromBattlefield(this,game)) {
    ZoneChangeEvent event=new ZoneChangeEvent(this,sourceId,controllerId,fromZone,toZone,appliedEffects);
    if (!game.replaceEvent(event)) {
      Player owner=game.getPlayer(ownerId);
      game.rememberLKI(objectId,Zone.BATTLEFIELD,this);
      if (owner != null) {
        this.setControllerId(ownerId);
switch (event.getToZone()) {
case GRAVEYARD:
          owner.putInGraveyard(card,game,!flag);
        break;
case HAND:
      owner.getHand().add(card);
    break;
case EXILED:
  game.getExile().getPermanentExile().add(card);
break;
case COMMAND:
game.addCommander(new Commander(card));
break;
case LIBRARY:
if (flag) {
owner.getLibrary().putOnTop(card,game);
}
 else {
owner.getLibrary().putOnBottom(card,game);
}
break;
case BATTLEFIELD:
break;
}
game.setZone(objectId,event.getToZone());
game.fireEvent(event);
if (event.getFromZone().equals(Zone.BATTLEFIELD)) {
game.resetForSourceId(getId());
game.applyEffects();
}
return game.getState().getZone(objectId) == toZone;
}
}
}
return false;
}",0.9768354927365528
159626,"@Override public boolean canChoose(UUID sourceId,UUID sourceControllerId,Game game){
  int remainingTargets=this.minNumberOfTargets - targets.size();
  if (remainingTargets == 0)   return true;
  int count=0;
  MageObject targetSource=game.getObject(sourceId);
  PlayerDamagedBySourceWatcher watcher=(PlayerDamagedBySourceWatcher)game.getState().getWatchers().get(""String_Node_Str"",sourceControllerId);
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(filter,sourceControllerId,sourceId,game)) {
    if (!targets.containsKey(permanent.getId()) && permanent.canBeTargetedBy(targetSource,sourceControllerId,game) && watcher != null && watcher.damageSources.contains(permanent.getId())) {
      count++;
      if (count >= remainingTargets)       return true;
    }
  }
  return false;
}","@Override public boolean canChoose(UUID sourceId,UUID sourceControllerId,Game game){
  int remainingTargets=this.minNumberOfTargets - targets.size();
  if (remainingTargets == 0) {
    return true;
  }
  int count=0;
  MageObject targetSource=game.getObject(sourceId);
  PlayerDamagedBySourceWatcher watcher=(PlayerDamagedBySourceWatcher)game.getState().getWatchers().get(""String_Node_Str"",sourceControllerId);
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(filter,sourceControllerId,sourceId,game)) {
    if (!targets.containsKey(permanent.getId()) && permanent.canBeTargetedBy(targetSource,sourceControllerId,game) && watcher != null && watcher.damageSources.contains(permanent.getId())) {
      count++;
      if (count >= remainingTargets) {
        return true;
      }
    }
  }
  return false;
}",0.9877750611246944
159627,"@Override public boolean canChoose(UUID sourceId,UUID sourceControllerId,Game game){
  int remainingTargets=this.minNumberOfTargets - targets.size();
  if (remainingTargets == 0)   return true;
  int count=0;
  MageObject targetSource=game.getObject(sourceId);
  PlayerDamagedBySourceWatcher watcher=(PlayerDamagedBySourceWatcher)game.getState().getWatchers().get(""String_Node_Str"",sourceControllerId);
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(filter,sourceControllerId,sourceId,game)) {
    if (!targets.containsKey(permanent.getId()) && permanent.canBeTargetedBy(targetSource,sourceControllerId,game) && watcher != null && watcher.damageSources.contains(permanent.getId())) {
      count++;
      if (count >= remainingTargets)       return true;
    }
  }
  return false;
}","@Override public boolean canChoose(UUID sourceId,UUID sourceControllerId,Game game){
  int remainingTargets=this.minNumberOfTargets - targets.size();
  if (remainingTargets == 0) {
    return true;
  }
  int count=0;
  MageObject targetSource=game.getObject(sourceId);
  PlayerDamagedBySourceWatcher watcher=(PlayerDamagedBySourceWatcher)game.getState().getWatchers().get(""String_Node_Str"",sourceControllerId);
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(filter,sourceControllerId,sourceId,game)) {
    if (!targets.containsKey(permanent.getId()) && permanent.canBeTargetedBy(targetSource,sourceControllerId,game) && watcher != null && watcher.damageSources.contains(permanent.getId())) {
      count++;
      if (count >= remainingTargets) {
        return true;
      }
    }
  }
  return false;
}",0.9877750611246944
159628,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.SPELL_CAST && game.getOpponents(controllerId).contains(event.getPlayerId())) {
    Spell spell=game.getStack().getSpell(event.getTargetId());
    if (spell != null && filter.match(spell,game)) {
      if (setTargetPointerPlayer) {
        for (        Effect effect : this.getEffects()) {
          effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
        }
        return true;
      }
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.SPELL_CAST && game.getOpponents(controllerId).contains(event.getPlayerId())) {
    Spell spell=game.getStack().getSpell(event.getTargetId());
    if (spell != null && filter.match(spell,game)) {
      if (setTargetPointerPlayer) {
        for (        Effect effect : this.getEffects()) {
          effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
        }
      }
      return true;
    }
  }
  return false;
}",0.9609665427509294
159629,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.SPELL_CAST) {
    Spell spell=game.getStack().getSpell(event.getTargetId());
    FirstSpellCastThisTurnWatcher watcher=(FirstSpellCastThisTurnWatcher)game.getState().getWatchers().get(""String_Node_Str"",this.getSourceId());
    if (spell != null && watcher != null && watcher.conditionMet()) {
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.SPELL_CAST) {
    Spell spell=game.getStack().getSpell(event.getTargetId());
    FirstSpellCastThisTurnWatcher watcher=(FirstSpellCastThisTurnWatcher)game.getState().getWatchers().get(""String_Node_Str"",this.getSourceId());
    if (spell != null && watcher != null && watcher.conditionMet()) {
      this.getEffects().get(0).setTargetPointer(new FixedTarget(spell.getSourceId()));
      return true;
    }
  }
  return false;
}",0.889564336372847
159630,"@Override public boolean apply(Game game,Ability source){
  Card card;
  Player player=game.getPlayer(source.getControllerId());
  ExileZone exile=game.getExile().createZone(source.getSourceId(),player.getName() + ""String_Node_Str"");
  int sourceCost=game.getCard(source.getSourceId()).getManaCost().convertedManaCost();
  do {
    card=player.getLibrary().removeFromTop(game);
    if (card == null) {
      break;
    }
    card.moveToExile(exile.getId(),exile.getName(),source.getId(),game);
  }
 while (card.getCardType().contains(CardType.LAND) || card.getManaCost().convertedManaCost() >= sourceCost);
  if (card != null) {
    if (player.chooseUse(outcome,""String_Node_Str"" + card.getName() + ""String_Node_Str"",game)) {
      player.cast(card.getSpellAbility(),game,true);
      exile.remove(card.getId());
    }
  }
  while (exile.size() > 0) {
    card=exile.getRandom(game);
    exile.remove(card.getId());
    card.moveToZone(Zone.LIBRARY,source.getId(),game,false);
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Card card;
  Player player=game.getPlayer(source.getControllerId());
  ExileZone exile=game.getExile().createZone(source.getSourceId(),player.getName() + ""String_Node_Str"");
  Card stackCard=game.getCard(targetPointer.getFirst(game,source));
  if (stackCard == null) {
    return false;
  }
  int sourceCost=stackCard.getManaCost().convertedManaCost();
  do {
    card=player.getLibrary().removeFromTop(game);
    if (card == null) {
      break;
    }
    card.moveToExile(exile.getId(),exile.getName(),source.getId(),game);
  }
 while (card.getCardType().contains(CardType.LAND) || card.getManaCost().convertedManaCost() >= sourceCost);
  if (card != null) {
    if (player.chooseUse(outcome,""String_Node_Str"" + card.getName() + ""String_Node_Str"",game)) {
      player.cast(card.getSpellAbility(),game,true);
      exile.remove(card.getId());
    }
  }
  while (exile.size() > 0) {
    card=exile.getRandom(game);
    exile.remove(card.getId());
    card.moveToZone(Zone.LIBRARY,source.getId(),game,false);
  }
  return true;
}",0.9089165867689356
159631,"@Override public boolean apply(Game game,Ability source){
  UUID defenderId=game.getCombat().getDefendingPlayer(source.getSourceId());
  Player player=game.getPlayer(defenderId);
  if (player == null) {
    Permanent permanent=game.getPermanent(defenderId);
    player=game.getPlayer(permanent.getControllerId());
  }
  filter.add(new ControllerPredicate(TargetController.YOU));
  int amount=Math.min(count,game.getBattlefield().countAll(filter,player.getId(),game));
  Target target=new TargetControlledPermanent(amount,amount,filter,false);
  if (target.canChoose(player.getId(),game)) {
    boolean abilityApplied=false;
    while (!target.isChosen() && target.canChoose(player.getId(),game)) {
      player.choose(Outcome.Sacrifice,target,source.getSourceId(),game);
    }
    for (int idx=0; idx < target.getTargets().size(); idx++) {
      Permanent permanent=game.getPermanent((UUID)target.getTargets().get(idx));
      if (permanent != null) {
        abilityApplied|=permanent.sacrifice(source.getId(),game);
      }
    }
    return abilityApplied;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  UUID defenderId=game.getCombat().getDefendingPlayer(source.getSourceId());
  Player player=game.getPlayer(defenderId);
  if (player == null) {
    Permanent permanent=game.getPermanent(defenderId);
    player=game.getPlayer(permanent.getControllerId());
  }
  int amount=Math.min(count,game.getBattlefield().countAll(filter,player.getId(),game));
  Target target=new TargetControlledPermanent(amount,amount,filter,false);
  if (target.canChoose(player.getId(),game)) {
    boolean abilityApplied=false;
    while (!target.isChosen() && target.canChoose(player.getId(),game)) {
      player.choose(Outcome.Sacrifice,target,source.getSourceId(),game);
    }
    for (int idx=0; idx < target.getTargets().size(); idx++) {
      Permanent permanent=game.getPermanent((UUID)target.getTargets().get(idx));
      if (permanent != null) {
        abilityApplied|=permanent.sacrifice(source.getId(),game);
      }
    }
    return abilityApplied;
  }
  return false;
}",0.9709385421629348
159632,"@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.SPELL_CAST || event.getType() == GameEvent.EventType.ACTIVATED_ABILITY) {
    StackObject stackObject=game.getStack().getStackObject(event.getTargetId());
    if (stackObject != null && stackObject.getStackAbility() != null) {
      for (      Target target : stackObject.getStackAbility().getTargets()) {
        if (target instanceof TargetSpell && target.getFirstTarget() != null) {
          casted.put(getKey(target.getFirstTarget(),stackObject.getSourceId()),stackObject.getControllerId());
        }
      }
    }
  }
}","@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.SPELL_CAST || event.getType() == GameEvent.EventType.ACTIVATED_ABILITY) {
    StackObject stackObject=game.getStack().getStackObject(event.getTargetId());
    if (stackObject == null) {
      stackObject=(StackObject)game.getLastKnownInformation(event.getTargetId(),Zone.STACK);
    }
    if (stackObject != null && stackObject.getStackAbility() != null) {
      for (      Target target : stackObject.getStackAbility().getTargets()) {
        if (target instanceof TargetSpell && target.getFirstTarget() != null) {
          casted.put(getKey(target.getFirstTarget(),stackObject.getSourceId()),stackObject.getControllerId());
        }
      }
    }
  }
}",0.9060693641618496
159633,"@Override public void watch(GameEvent event,Game game){
  if (condition == true) {
    return;
  }
  if (event.getType() == EventType.COUNTERED && game.getStack().getStackObject(event.getTargetId()).getCardType().contains(CardType.CREATURE) && game.getOpponents(controllerId).contains(event.getPlayerId())) {
    condition=true;
  }
}","@Override public void watch(GameEvent event,Game game){
  if (condition == true) {
    return;
  }
  if (event.getType() == EventType.COUNTERED) {
    StackObject stackObject=game.getStack().getStackObject(event.getTargetId());
    if (stackObject == null) {
      stackObject=(StackObject)game.getLastKnownInformation(event.getTargetId(),Zone.STACK);
    }
    StackObject counterObject=game.getStack().getStackObject(event.getSourceId());
    if (counterObject == null) {
      counterObject=(StackObject)game.getLastKnownInformation(event.getSourceId(),Zone.STACK);
    }
    if (stackObject != null && counterObject != null && stackObject.getCardType().contains(CardType.CREATURE) && game.getOpponents(controllerId).contains(counterObject.getControllerId())) {
      condition=true;
    }
  }
}",0.4770318021201413
159634,"@Override public boolean apply(Game game,Ability source){
  Permanent target=game.getPermanent(source.getFirstTarget());
  if (target == null) {
    return false;
  }
  for (  Counter counter : target.getCounters().values()) {
    Counter newCounter=new Counter(counter.getName(),1);
    target.addCounters(newCounter,game);
    System.out.println(""String_Node_Str"" + target.getName() + counter.getName());
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Permanent target=game.getPermanent(source.getFirstTarget());
  if (target == null) {
    return false;
  }
  for (  Counter counter : target.getCounters().values()) {
    Counter newCounter=new Counter(counter.getName(),counter.getCount());
    target.addCounters(newCounter,game);
  }
  return true;
}",0.8719898605830165
159635,"@Override public Date getEndTime(){
  return endTime;
}","@Override public Date getEndTime(){
  if (endTime != null) {
    return new Date(endTime.getTime());
  }
  return null;
}",0.625
159636,"@Override public boolean leave(UUID playerId){
  MatchPlayer mPlayer=getPlayer(playerId);
  if (mPlayer != null) {
    boolean result=players.remove(mPlayer);
synchronized (this) {
      this.notifyAll();
    }
    return result;
  }
  return false;
}","@Override public boolean leave(UUID playerId){
  MatchPlayer mPlayer=getPlayer(playerId);
  if (mPlayer != null) {
    mPlayer.setQuit(true);
synchronized (this) {
      this.notifyAll();
    }
    return true;
  }
  return false;
}",0.865424430641822
159637,"@Override public Date getStartTime(){
  return startTime;
}","@Override public Date getStartTime(){
  return new Date(startTime.getTime());
}",0.855072463768116
159638,"public CombatGroup(final CombatGroup group){
  this.blocked=group.blocked;
  this.defenderId=group.defenderId;
  this.defenderIsPlaneswalker=group.defenderIsPlaneswalker;
  this.attackers.addAll(group.attackers);
  this.blockers.addAll(group.blockers);
  this.blockerOrder.addAll(group.blockerOrder);
  this.attackerOrder.addAll(group.attackerOrder);
  this.players.putAll(group.players);
}","public CombatGroup(final CombatGroup group){
  this.attackers.addAll(group.attackers);
  this.blockers.addAll(group.blockers);
  this.blockerOrder.addAll(group.blockerOrder);
  this.attackerOrder.addAll(group.attackerOrder);
  this.players.putAll(group.players);
  this.blocked=group.blocked;
  this.defenderId=group.defenderId;
  this.defendingPlayerId=group.defendingPlayerId;
  this.defenderIsPlaneswalker=group.defenderIsPlaneswalker;
}",0.4048192771084337
159639,"@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  Permanent p=game.getPermanent(event.getTargetId());
  if (p != null) {
    p.addCounters(CounterType.valueOf(event.getData().toUpperCase(Locale.ENGLISH)).createInstance(event.getAmount() * 2),game,event.getAppliedEffects());
  }
  return true;
}","@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  Permanent p=game.getPermanent(event.getTargetId());
  if (p != null) {
    String counterName=event.getData().toUpperCase(Locale.ENGLISH);
    Counter counter;
    if (counterName.equals(""String_Node_Str"")) {
      counter=CounterType.P1P1.createInstance(event.getAmount() * 2);
    }
 else     if (counterName.equals(""String_Node_Str"")) {
      counter=CounterType.M1M1.createInstance(event.getAmount() * 2);
    }
 else {
      counter=new Counter(counterName,event.getAmount() * 2);
    }
    p.addCounters(counter,game,event.getAppliedEffects());
  }
  return true;
}",0.5967413441955194
159640,"public SpellStack(final SpellStack stack){
  for (  StackObject spell : stack) {
    this.push(spell.copy());
  }
}","public SpellStack(final SpellStack stack){
  for (  StackObject spell : stack) {
    this.addLast(spell.copy());
  }
}",0.96137339055794
159641,"public HashMap<RestrictionEffect,HashSet<Ability>> getApplicableRestrictionEffects(Permanent permanent,Game game){
  HashMap<RestrictionEffect,HashSet<Ability>> effects=new HashMap<RestrictionEffect,HashSet<Ability>>();
  for (  RestrictionEffect effect : restrictionEffects) {
    HashSet<Ability> abilities=restrictionEffects.getAbility(effect.getId());
    HashSet<Ability> applicableAbilities=new HashSet<Ability>();
    for (    Ability ability : abilities) {
      if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false)) {
        if (effect.applies(permanent,ability,game)) {
          applicableAbilities.add(ability);
        }
      }
    }
    if (!applicableAbilities.isEmpty()) {
      effects.put(effect,abilities);
    }
  }
  return effects;
}","public HashMap<RestrictionEffect,HashSet<Ability>> getApplicableRestrictionEffects(Permanent permanent,Game game){
  HashMap<RestrictionEffect,HashSet<Ability>> effects=new HashMap<RestrictionEffect,HashSet<Ability>>();
  for (  RestrictionEffect effect : restrictionEffects) {
    HashSet<Ability> abilities=restrictionEffects.getAbility(effect.getId());
    HashSet<Ability> applicableAbilities=new HashSet<Ability>();
    for (    Ability ability : abilities) {
      if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,ability instanceof MageSingleton ? permanent : null,false)) {
        if (effect.applies(permanent,ability,game)) {
          applicableAbilities.add(ability);
        }
      }
    }
    if (!applicableAbilities.isEmpty()) {
      effects.put(effect,abilities);
    }
  }
  return effects;
}",0.971041281577326
159642,"@Override public boolean apply(Game game,Ability source){
  if (!conditionChecked) {
    result=!condition.apply(game,source);
    conditionChecked=true;
  }
  return result;
}","@Override public boolean apply(Game game,Ability source){
  if (!conditionChecked) {
    result=condition.apply(game,source);
    conditionChecked=true;
  }
  return result;
}",0.9971509971509972
159643,"public KickerAbility(final KickerAbility ability){
  super(ability);
  this.kickerCosts=ability.kickerCosts;
  this.keywordText=ability.keywordText;
  this.reminderText=ability.reminderText;
  this.xManaValue=ability.xManaValue;
  this.zoneChangeCounter=ability.zoneChangeCounter;
}","public KickerAbility(final KickerAbility ability){
  super(ability);
  this.kickerCosts.addAll(ability.kickerCosts);
  this.keywordText=ability.keywordText;
  this.reminderText=ability.reminderText;
  this.xManaValue=ability.xManaValue;
  this.zoneChangeCounter=ability.zoneChangeCounter;
}",0.916083916083916
159644,"@Override public boolean apply(Game game,Ability source){
  Card card=game.getCard(source.getFirstTarget());
  if (card != null) {
    Player player=game.getPlayer(card.getOwnerId());
    if (player != null) {
      card.moveToZone(Zone.HAND,source.getSourceId(),game,false);
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  for (  UUID cardId : getTargetPointer().getTargets(game,source)) {
    Card card=game.getCard(cardId);
    if (card != null && game.getState().getZone(cardId).equals(Zone.GRAVEYARD)) {
      Player player=game.getPlayer(card.getOwnerId());
      if (player != null) {
        card.moveToZone(Zone.HAND,source.getSourceId(),game,false);
      }
    }
  }
  return true;
}",0.726063829787234
159645,"@Override public boolean apply(Game game,Ability source){
  Player you=game.getPlayer(source.getControllerId());
  Card molten=game.getCard(source.getSourceId());
  if (you != null) {
    ElementalToken token=new ElementalToken();
    token.putOntoBattlefield(2,game,source.getId(),source.getControllerId());
    if (you.flipCoin(game)) {
      molten.moveToZone(Zone.HAND,source.getId(),game,true);
      game.informPlayers(you.getName() + ""String_Node_Str"" + you.getName()+ ""String_Node_Str"");
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player you=game.getPlayer(source.getControllerId());
  Card molten=game.getCard(source.getSourceId());
  if (you != null) {
    ElementalToken token=new ElementalToken();
    token.putOntoBattlefield(2,game,source.getId(),source.getControllerId());
    if (you.flipCoin(game)) {
      molten.moveToZone(Zone.HAND,source.getId(),game,true);
      game.informPlayers(new StringBuilder(you.getName()).append(""String_Node_Str"").append(you.getName()).append(""String_Node_Str"").toString());
    }
  }
  return false;
}",0.9406392694063926
159646,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.SPELL_CAST) {
    Spell spell=game.getStack().getSpell(event.getTargetId());
    if (spell != null && spell.getControllerId().equals(controllerId)) {
      int damageAmount=0;
      for (      Ability ability : (Abilities<Ability>)spell.getAbilities()) {
        if (ability instanceof KickerAbility) {
          damageAmount+=((KickerAbility)ability).getKickedCounter();
        }
      }
      if (damageAmount > 0) {
        this.getEffects().get(0).setValue(""String_Node_Str"",new Integer(damageAmount));
        return true;
      }
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.SPELL_CAST) {
    Spell spell=game.getStack().getSpell(event.getTargetId());
    if (spell != null && spell.getControllerId().equals(controllerId)) {
      int damageAmount=0;
      for (      Ability ability : (Abilities<Ability>)spell.getAbilities()) {
        if (ability instanceof KickerAbility) {
          damageAmount+=((KickerAbility)ability).getKickedCounter(game);
        }
      }
      if (damageAmount > 0) {
        this.getEffects().get(0).setValue(""String_Node_Str"",new Integer(damageAmount));
        return true;
      }
    }
  }
  return false;
}",0.9970457902511078
159647,"@Override public boolean apply(Game game,Ability source){
  Card card=game.getCard(source.getSourceId());
  if (card != null) {
    for (    Ability ability : card.getAbilities()) {
      if (ability instanceof KickerAbility) {
        if (((KickerAbility)ability).isKicked()) {
          return true;
        }
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Card card=game.getCard(source.getSourceId());
  if (card != null) {
    for (    Ability ability : card.getAbilities()) {
      if (ability instanceof KickerAbility) {
        if (((KickerAbility)ability).isKicked(game)) {
          return true;
        }
      }
    }
  }
  return false;
}",0.994269340974212
159648,"@Override public int calculate(Game game,Ability source){
  int count=0;
  Card card=game.getCard(source.getSourceId());
  if (card != null) {
    for (    Ability ability : card.getAbilities()) {
      if (ability instanceof KickerAbility) {
        count+=((KickerAbility)ability).getKickedCounter();
      }
    }
  }
  return count;
}","@Override public int calculate(Game game,Ability source){
  int count=0;
  Card card=game.getCard(source.getSourceId());
  if (card != null) {
    for (    Ability ability : card.getAbilities()) {
      if (ability instanceof KickerAbility) {
        count+=((KickerAbility)ability).getKickedCounter(game);
      }
    }
  }
  return count;
}",0.9941176470588236
159649,"public KickerAbility(final KickerAbility ability){
  super(ability);
  this.kickerCosts=ability.kickerCosts;
  this.keywordText=ability.keywordText;
  this.reminderText=ability.reminderText;
  this.xManaValue=ability.xManaValue;
}","public KickerAbility(final KickerAbility ability){
  super(ability);
  this.kickerCosts=ability.kickerCosts;
  this.keywordText=ability.keywordText;
  this.reminderText=ability.reminderText;
  this.xManaValue=ability.xManaValue;
  this.zoneChangeCounter=ability.zoneChangeCounter;
}",0.8984375
159650,"public boolean isKicked(){
  for (  OptionalAdditionalCost cost : kickerCosts) {
    if (cost.isActivated()) {
      return true;
    }
  }
  return false;
}","public boolean isKicked(Game game){
  Card card=game.getCard(sourceId);
  if (card != null && card.getZoneChangeCounter() <= zoneChangeCounter + 1) {
    for (    OptionalAdditionalCost cost : kickerCosts) {
      if (cost.isActivated()) {
        return true;
      }
    }
  }
 else {
    this.resetKicker();
  }
  return false;
}",0.6012269938650306
159651,"public void resetKicker(){
  for (  OptionalAdditionalCost cost : kickerCosts) {
    cost.reset();
  }
}","public void resetKicker(){
  for (  OptionalAdditionalCost cost : kickerCosts) {
    cost.reset();
  }
  zoneChangeCounter=0;
}",0.9004329004329005
159652,"@Override public void addOptionalAdditionalCosts(Ability ability,Game game){
  if (ability instanceof SpellAbility) {
    Player player=game.getPlayer(controllerId);
    if (player != null) {
      this.resetKicker();
      for (      OptionalAdditionalCost kickerCost : kickerCosts) {
        boolean again=true;
        while (again) {
          String times=""String_Node_Str"";
          if (kickerCost.isRepeatable()) {
            int activated=kickerCost.getActivateCount();
            times=Integer.toString(activated + 1) + (activated == 0 ? ""String_Node_Str"" : ""String_Node_Str"");
          }
          if (kickerCost.canPay(sourceId,controllerId,game) && player.chooseUse(Outcome.Benefit,new StringBuilder(""String_Node_Str"").append(times).append(kickerCost.getText(false)).append(""String_Node_Str"").toString(),game)) {
            kickerCost.activate();
            for (Iterator it=((Costs)kickerCost).iterator(); it.hasNext(); ) {
              Cost cost=(Cost)it.next();
              if (cost instanceof ManaCostsImpl) {
                List<VariableManaCost> varCosts=((ManaCostsImpl)cost).getVariableCosts();
                if (!varCosts.isEmpty()) {
                  xManaValue=game.getPlayer(this.controllerId).announceXMana(varCosts.get(0).getMinX(),Integer.MAX_VALUE,""String_Node_Str"" + varCosts.get(0).getText(),game,this);
                  game.informPlayers(new StringBuilder(game.getPlayer(this.controllerId).getName()).append(""String_Node_Str"").append(xManaValue).append(""String_Node_Str"").append(""String_Node_Str"").toString());
                  ability.getManaCostsToPay().add(new GenericManaCost(xManaValue));
                }
 else {
                  ability.getManaCostsToPay().add((ManaCostsImpl)cost.copy());
                }
              }
 else {
                ability.getCosts().add(cost.copy());
              }
            }
            again=kickerCost.isRepeatable();
          }
 else {
            again=false;
          }
        }
      }
    }
  }
}","@Override public void addOptionalAdditionalCosts(Ability ability,Game game){
  if (ability instanceof SpellAbility) {
    Player player=game.getPlayer(controllerId);
    if (player != null) {
      this.resetKicker();
      for (      OptionalAdditionalCost kickerCost : kickerCosts) {
        boolean again=true;
        while (again) {
          String times=""String_Node_Str"";
          if (kickerCost.isRepeatable()) {
            int activated=kickerCost.getActivateCount();
            times=Integer.toString(activated + 1) + (activated == 0 ? ""String_Node_Str"" : ""String_Node_Str"");
          }
          if (kickerCost.canPay(sourceId,controllerId,game) && player.chooseUse(Outcome.Benefit,new StringBuilder(""String_Node_Str"").append(times).append(kickerCost.getText(false)).append(""String_Node_Str"").toString(),game)) {
            this.activateKicker(kickerCost,game);
            for (Iterator it=((Costs)kickerCost).iterator(); it.hasNext(); ) {
              Cost cost=(Cost)it.next();
              if (cost instanceof ManaCostsImpl) {
                List<VariableManaCost> varCosts=((ManaCostsImpl)cost).getVariableCosts();
                if (!varCosts.isEmpty()) {
                  xManaValue=game.getPlayer(this.controllerId).announceXMana(varCosts.get(0).getMinX(),Integer.MAX_VALUE,""String_Node_Str"" + varCosts.get(0).getText(),game,this);
                  game.informPlayers(new StringBuilder(game.getPlayer(this.controllerId).getName()).append(""String_Node_Str"").append(xManaValue).append(""String_Node_Str"").append(""String_Node_Str"").toString());
                  ability.getManaCostsToPay().add(new GenericManaCost(xManaValue));
                }
 else {
                  ability.getManaCostsToPay().add((ManaCostsImpl)cost.copy());
                }
              }
 else {
                ability.getCosts().add(cost.copy());
              }
            }
            again=kickerCost.isRepeatable();
          }
 else {
            again=false;
          }
        }
      }
    }
  }
}",0.9873102761881064
159653,"public int getKickedCounter(){
  int counter=0;
  for (  OptionalAdditionalCost cost : kickerCosts) {
    counter+=cost.getActivateCount();
  }
  return counter;
}","public int getKickedCounter(Game game){
  if (isKicked(game)) {
    int counter=0;
    for (    OptionalAdditionalCost cost : kickerCosts) {
      counter+=cost.getActivateCount();
    }
    return counter;
  }
  return 0;
}",0.7596899224806202
159654,"public boolean replaceEvent(GameEvent event,Game game){
  boolean caught=false;
  HashMap<UUID,HashSet<UUID>> consumed=new HashMap<UUID,HashSet<UUID>>();
  do {
    HashMap<ReplacementEffect,HashSet<Ability>> rEffects=getApplicableReplacementEffects(event,game);
    for (Iterator<ReplacementEffect> it1=rEffects.keySet().iterator(); it1.hasNext(); ) {
      ReplacementEffect entry=it1.next();
      if (consumed.containsKey(entry.getId())) {
        HashSet<UUID> consumedAbilitiesIds=consumed.get(entry.getId());
        if (rEffects.get(entry) == null || consumedAbilitiesIds.size() == ((HashSet<Ability>)rEffects.get(entry)).size()) {
          it1.remove();
        }
 else {
          Iterator it=((HashSet<Ability>)rEffects.get(entry)).iterator();
          while (it.hasNext()) {
            Ability ability=(Ability)it.next();
            if (consumedAbilitiesIds.contains(ability.getId())) {
              it.remove();
            }
          }
        }
      }
    }
    if (rEffects.isEmpty()) {
      break;
    }
    int index;
    boolean onlyOne=false;
    if (rEffects.size() == 1) {
      ReplacementEffect effect=(ReplacementEffect)rEffects.keySet().iterator().next();
      HashSet<Ability> abilities=replacementEffects.getAbility(effect.getId());
      if (abilities == null || abilities.size() == 1) {
        onlyOne=true;
      }
    }
    if (onlyOne) {
      index=0;
    }
 else {
      Player player=game.getPlayer(event.getPlayerId());
      index=player.chooseEffect(getReplacementEffectsTexts(rEffects,game),game);
    }
    int checked=0;
    ReplacementEffect rEffect=null;
    Ability rAbility=null;
    for (    Map.Entry entry : rEffects.entrySet()) {
      if (entry.getValue() == null) {
        if (checked == index) {
          rEffect=(ReplacementEffect)entry.getKey();
          break;
        }
 else {
          checked++;
        }
      }
 else {
        HashSet<Ability> abilities=(HashSet<Ability>)entry.getValue();
        int size=abilities.size();
        if (index > (checked + size - 1)) {
          checked+=size;
        }
 else {
          rEffect=(ReplacementEffect)entry.getKey();
          Iterator it=abilities.iterator();
          while (it.hasNext() && rAbility == null) {
            if (checked == index) {
              rAbility=(Ability)it.next();
            }
 else {
              it.next();
              checked++;
            }
          }
        }
      }
    }
    if (rEffect != null) {
      event.getAppliedEffects().add(rEffect.getId());
      caught=rEffect.replaceEvent(event,rAbility,game);
    }
    if (caught) {
      break;
    }
    if (rEffect != null) {
      if (consumed.containsKey(rEffect.getId())) {
        HashSet<UUID> set=consumed.get(rEffect.getId());
        if (rAbility != null) {
          if (!set.contains(rAbility.getId())) {
            set.add(rAbility.getId());
          }
        }
      }
 else {
        HashSet<UUID> set=new HashSet<UUID>();
        if (rAbility != null) {
          set.add(rAbility.getId());
        }
        consumed.put(rEffect.getId(),set);
      }
    }
    game.applyEffects();
  }
 while (true);
  return caught;
}","public boolean replaceEvent(GameEvent event,Game game){
  boolean caught=false;
  HashMap<UUID,HashSet<UUID>> consumed=new HashMap<UUID,HashSet<UUID>>();
  do {
    HashMap<ReplacementEffect,HashSet<Ability>> rEffects=getApplicableReplacementEffects(event,game);
    for (Iterator<ReplacementEffect> it1=rEffects.keySet().iterator(); it1.hasNext(); ) {
      ReplacementEffect entry=it1.next();
      if (consumed.containsKey(entry.getId())) {
        HashSet<UUID> consumedAbilitiesIds=consumed.get(entry.getId());
        if (rEffects.get(entry) == null || consumedAbilitiesIds.size() == ((HashSet<Ability>)rEffects.get(entry)).size()) {
          it1.remove();
        }
 else {
          Iterator it=((HashSet<Ability>)rEffects.get(entry)).iterator();
          while (it.hasNext()) {
            Ability ability=(Ability)it.next();
            if (consumedAbilitiesIds.contains(ability.getId())) {
              it.remove();
            }
          }
        }
      }
    }
    if (rEffects.isEmpty()) {
      break;
    }
    int index;
    boolean onlyOne=false;
    if (rEffects.size() == 1) {
      ReplacementEffect effect=(ReplacementEffect)rEffects.keySet().iterator().next();
      HashSet<Ability> abilities=replacementEffects.getAbility(effect.getId());
      if (abilities == null || abilities.size() == 1) {
        onlyOne=true;
      }
    }
    if (onlyOne) {
      index=0;
    }
 else {
      Player player=game.getPlayer(event.getPlayerId());
      index=player.chooseEffect(getReplacementEffectsTexts(rEffects,game),game);
    }
    int checked=0;
    ReplacementEffect rEffect=null;
    Ability rAbility=null;
    for (    Map.Entry entry : rEffects.entrySet()) {
      if (entry.getValue() == null) {
        if (checked == index) {
          rEffect=(ReplacementEffect)entry.getKey();
          break;
        }
 else {
          checked++;
        }
      }
 else {
        HashSet<Ability> abilities=(HashSet<Ability>)entry.getValue();
        int size=abilities.size();
        if (index > (checked + size - 1)) {
          checked+=size;
        }
 else {
          rEffect=(ReplacementEffect)entry.getKey();
          Iterator it=abilities.iterator();
          while (it.hasNext() && rAbility == null) {
            if (checked == index) {
              rAbility=(Ability)it.next();
            }
 else {
              it.next();
              checked++;
            }
          }
          break;
        }
      }
    }
    if (rEffect != null) {
      event.getAppliedEffects().add(rEffect.getId());
      caught=rEffect.replaceEvent(event,rAbility,game);
    }
    if (caught) {
      break;
    }
    if (rEffect != null) {
      if (consumed.containsKey(rEffect.getId())) {
        HashSet<UUID> set=consumed.get(rEffect.getId());
        if (rAbility != null) {
          if (!set.contains(rAbility.getId())) {
            set.add(rAbility.getId());
          }
        }
      }
 else {
        HashSet<UUID> set=new HashSet<UUID>();
        if (rAbility != null) {
          set.add(rAbility.getId());
        }
        consumed.put(rEffect.getId(),set);
      }
    }
    game.applyEffects();
  }
 while (true);
  return caught;
}",0.9973148001895435
159655,"@Override protected void readLine(String line,DeckCardLists deckList){
  if (line.length() == 0 || line.startsWith(""String_Node_Str"")) {
    return;
  }
  if (line.toLowerCase().startsWith(""String_Node_Str"")) {
    sideboard=true;
    return;
  }
  int delim=line.indexOf(' ');
  String lineNum=line.substring(0,delim).trim();
  String lineName=line.substring(delim).replace(""String_Node_Str"",""String_Node_Str"").trim();
  try {
    int num=Integer.parseInt(lineNum);
    List<CardInfo> cards=CardRepository.instance.findCards(lineName);
    if (cards.isEmpty()) {
      sbMessage.append(""String_Node_Str"").append(lineName).append(""String_Node_Str"").append(lineCount).append(""String_Node_Str"");
    }
 else {
      Date lastReleaseDate=new GregorianCalendar(1900,1,1).getTime();
      CardInfo lastReleasedCard=null;
      for (      CardInfo cardinfo : cards) {
        ExpansionSet set=Sets.findSet(cardinfo.getSetCode());
        if (set != null) {
          if (lastReleaseDate == null || set.getReleaseDate().after(lastReleaseDate)) {
            lastReleasedCard=cardinfo;
            lastReleaseDate=set.getReleaseDate();
          }
        }
      }
      if (lastReleasedCard == null) {
        lastReleasedCard=cards.get(0);
      }
      for (int i=0; i < num; i++) {
        if (!sideboard) {
          deckList.getCards().add(new DeckCardInfo(lastReleasedCard.getName(),lastReleasedCard.getCardNumber(),lastReleasedCard.getSetCode()));
        }
 else {
          deckList.getSideboard().add(new DeckCardInfo(lastReleasedCard.getName(),lastReleasedCard.getCardNumber(),lastReleasedCard.getSetCode()));
        }
      }
    }
  }
 catch (  NumberFormatException nfe) {
    sbMessage.append(""String_Node_Str"").append(lineNum).append(""String_Node_Str"").append(lineCount).append(""String_Node_Str"");
  }
}","@Override protected void readLine(String line,DeckCardLists deckList){
  if (line.length() == 0 || line.startsWith(""String_Node_Str"")) {
    return;
  }
  if (line.toLowerCase().startsWith(""String_Node_Str"")) {
    sideboard=true;
    return;
  }
  int delim=line.indexOf(' ');
  String lineNum=line.substring(0,delim).trim();
  String lineName=line.substring(delim).replace(""String_Node_Str"",""String_Node_Str"").trim();
  try {
    int num=Integer.parseInt(lineNum);
    List<CardInfo> cards=CardRepository.instance.findCards(lineName);
    if (cards.isEmpty()) {
      sbMessage.append(""String_Node_Str"").append(lineName).append(""String_Node_Str"").append(lineCount).append(""String_Node_Str"");
    }
 else {
      Date lastReleaseDate=new GregorianCalendar(1900,1,1).getTime();
      CardInfo lastReleasedCard=null;
      for (      CardInfo cardinfo : cards) {
        ExpansionInfo set=ExpansionRepository.instance.getSetByCode(cardinfo.getSetCode());
        if (set != null) {
          if (lastReleaseDate == null || set.getReleaseDate().after(lastReleaseDate)) {
            lastReleasedCard=cardinfo;
            lastReleaseDate=set.getReleaseDate();
          }
        }
      }
      if (lastReleasedCard == null) {
        lastReleasedCard=cards.get(0);
      }
      for (int i=0; i < num; i++) {
        if (!sideboard) {
          deckList.getCards().add(new DeckCardInfo(lastReleasedCard.getName(),lastReleasedCard.getCardNumber(),lastReleasedCard.getSetCode()));
        }
 else {
          deckList.getSideboard().add(new DeckCardInfo(lastReleasedCard.getName(),lastReleasedCard.getCardNumber(),lastReleasedCard.getSetCode()));
        }
      }
    }
  }
 catch (  NumberFormatException nfe) {
    sbMessage.append(""String_Node_Str"").append(lineNum).append(""String_Node_Str"").append(lineCount).append(""String_Node_Str"");
  }
}",0.9808638600328048
159656,"private void init(){
  game.addTableEventListener(new Listener<TableEvent>(){
    @Override public void event(    TableEvent event){
      try {
        PriorityTimer timer;
        UUID playerId;
switch (event.getEventType()) {
case UPDATE:
          updateGame();
        break;
case INFO:
      ChatManager.getInstance().broadcast(chatId,""String_Node_Str"",event.getMessage(),MessageColor.BLACK);
    logger.debug(game.getId() + ""String_Node_Str"" + event.getMessage());
  break;
case STATUS:
ChatManager.getInstance().broadcast(chatId,""String_Node_Str"",event.getMessage(),MessageColor.ORANGE,event.getWithTime());
logger.debug(game.getId() + ""String_Node_Str"" + event.getMessage());
break;
case REVEAL:
revealCards(event.getMessage(),event.getCards());
break;
case ERROR:
error(event.getMessage(),event.getException());
break;
case INIT_TIMER:
final UUID initPlayerId=event.getPlayerId();
if (initPlayerId == null) {
throw new IllegalStateException(""String_Node_Str"");
}
createPlayerTimer(event.getPlayerId(),game.getPriorityTime());
break;
case RESUME_TIMER:
playerId=event.getPlayerId();
if (playerId == null) {
throw new IllegalStateException(""String_Node_Str"");
}
timer=timers.get(playerId);
if (timer == null) {
Player player=game.getState().getPlayer(playerId);
if (player != null) {
timer=createPlayerTimer(event.getPlayerId(),player.getPriorityTimeLeft());
}
 else {
throw new IllegalStateException(""String_Node_Str"");
}
}
timer.resume();
break;
case PAUSE_TIMER:
playerId=event.getPlayerId();
if (playerId == null) {
throw new IllegalStateException(""String_Node_Str"");
}
timer=timers.get(playerId);
if (timer == null) {
throw new IllegalStateException(""String_Node_Str"" + playerId);
}
timer.pause();
break;
}
}
 catch (MageException ex) {
logger.fatal(""String_Node_Str"",ex);
}
}
}
);
game.addPlayerQueryEventListener(new Listener<PlayerQueryEvent>(){
@Override public void event(PlayerQueryEvent event){
logger.trace(new StringBuilder(event.getPlayerId().toString()).append(""String_Node_Str"").append(event.getQueryType()).append(""String_Node_Str"").append(event.getMessage()).toString());
try {
switch (event.getQueryType()) {
case ASK:
ask(event.getPlayerId(),event.getMessage());
break;
case PICK_TARGET:
target(event.getPlayerId(),event.getMessage(),event.getCards(),event.getPerms(),event.getTargets(),event.isRequired(),event.getOptions());
break;
case PICK_ABILITY:
target(event.getPlayerId(),event.getMessage(),event.getAbilities(),event.isRequired(),event.getOptions());
break;
case SELECT:
select(event.getPlayerId(),event.getMessage());
break;
case PLAY_MANA:
playMana(event.getPlayerId(),event.getMessage());
break;
case PLAY_X_MANA:
playXMana(event.getPlayerId(),event.getMessage());
break;
case CHOOSE_ABILITY:
chooseAbility(event.getPlayerId(),event.getAbilities());
break;
case CHOOSE_PILE:
choosePile(event.getPlayerId(),event.getMessage(),event.getPile1(),event.getPile2());
break;
case CHOOSE_MODE:
chooseMode(event.getPlayerId(),event.getModes());
break;
case CHOOSE:
choose(event.getPlayerId(),event.getMessage(),event.getChoices());
break;
case AMOUNT:
amount(event.getPlayerId(),event.getMessage(),event.getMin(),event.getMax());
break;
case LOOK:
lookAtCards(event.getPlayerId(),event.getMessage(),event.getCards());
break;
case PERSONAL_MESSAGE:
informPersonal(event.getPlayerId(),event.getMessage());
break;
}
}
 catch (MageException ex) {
logger.fatal(""String_Node_Str"",ex);
}
}
}
);
checkStart();
}","private void init(){
  game.addTableEventListener(new Listener<TableEvent>(){
    @Override public void event(    TableEvent event){
      try {
        PriorityTimer timer;
        UUID playerId;
switch (event.getEventType()) {
case UPDATE:
          updateGame();
        break;
case INFO:
      ChatManager.getInstance().broadcast(chatId,""String_Node_Str"",event.getMessage(),MessageColor.BLACK);
    logger.debug(game.getId() + ""String_Node_Str"" + event.getMessage());
  break;
case STATUS:
ChatManager.getInstance().broadcast(chatId,""String_Node_Str"",event.getMessage(),MessageColor.ORANGE,event.getWithTime());
logger.debug(game.getId() + ""String_Node_Str"" + event.getMessage());
break;
case ERROR:
error(event.getMessage(),event.getException());
break;
case INIT_TIMER:
final UUID initPlayerId=event.getPlayerId();
if (initPlayerId == null) {
throw new MageException(""String_Node_Str"");
}
createPlayerTimer(event.getPlayerId(),game.getPriorityTime());
break;
case RESUME_TIMER:
playerId=event.getPlayerId();
if (playerId == null) {
throw new MageException(""String_Node_Str"");
}
timer=timers.get(playerId);
if (timer == null) {
Player player=game.getState().getPlayer(playerId);
if (player != null) {
timer=createPlayerTimer(event.getPlayerId(),player.getPriorityTimeLeft());
}
 else {
throw new MageException(""String_Node_Str"");
}
}
timer.resume();
break;
case PAUSE_TIMER:
playerId=event.getPlayerId();
if (playerId == null) {
throw new MageException(""String_Node_Str"");
}
timer=timers.get(playerId);
if (timer == null) {
throw new MageException(""String_Node_Str"" + playerId);
}
timer.pause();
break;
}
}
 catch (MageException ex) {
logger.fatal(""String_Node_Str"",ex);
}
}
}
);
game.addPlayerQueryEventListener(new Listener<PlayerQueryEvent>(){
@Override public void event(PlayerQueryEvent event){
logger.trace(new StringBuilder(event.getPlayerId().toString()).append(""String_Node_Str"").append(event.getQueryType()).append(""String_Node_Str"").append(event.getMessage()).toString());
try {
switch (event.getQueryType()) {
case ASK:
ask(event.getPlayerId(),event.getMessage());
break;
case PICK_TARGET:
target(event.getPlayerId(),event.getMessage(),event.getCards(),event.getPerms(),event.getTargets(),event.isRequired(),event.getOptions());
break;
case PICK_ABILITY:
target(event.getPlayerId(),event.getMessage(),event.getAbilities(),event.isRequired(),event.getOptions());
break;
case SELECT:
select(event.getPlayerId(),event.getMessage());
break;
case PLAY_MANA:
playMana(event.getPlayerId(),event.getMessage());
break;
case PLAY_X_MANA:
playXMana(event.getPlayerId(),event.getMessage());
break;
case CHOOSE_ABILITY:
chooseAbility(event.getPlayerId(),event.getAbilities());
break;
case CHOOSE_PILE:
choosePile(event.getPlayerId(),event.getMessage(),event.getPile1(),event.getPile2());
break;
case CHOOSE_MODE:
chooseMode(event.getPlayerId(),event.getModes());
break;
case CHOOSE:
choose(event.getPlayerId(),event.getMessage(),event.getChoices());
break;
case AMOUNT:
amount(event.getPlayerId(),event.getMessage(),event.getMin(),event.getMax());
break;
case PERSONAL_MESSAGE:
informPersonal(event.getPlayerId(),event.getMessage());
break;
}
}
 catch (MageException ex) {
logger.fatal(""String_Node_Str"",ex);
}
}
}
);
checkStart();
}",0.9658273381294964
159657,"@Override public void event(PlayerQueryEvent event){
  logger.trace(new StringBuilder(event.getPlayerId().toString()).append(""String_Node_Str"").append(event.getQueryType()).append(""String_Node_Str"").append(event.getMessage()).toString());
  try {
switch (event.getQueryType()) {
case ASK:
      ask(event.getPlayerId(),event.getMessage());
    break;
case PICK_TARGET:
  target(event.getPlayerId(),event.getMessage(),event.getCards(),event.getPerms(),event.getTargets(),event.isRequired(),event.getOptions());
break;
case PICK_ABILITY:
target(event.getPlayerId(),event.getMessage(),event.getAbilities(),event.isRequired(),event.getOptions());
break;
case SELECT:
select(event.getPlayerId(),event.getMessage());
break;
case PLAY_MANA:
playMana(event.getPlayerId(),event.getMessage());
break;
case PLAY_X_MANA:
playXMana(event.getPlayerId(),event.getMessage());
break;
case CHOOSE_ABILITY:
chooseAbility(event.getPlayerId(),event.getAbilities());
break;
case CHOOSE_PILE:
choosePile(event.getPlayerId(),event.getMessage(),event.getPile1(),event.getPile2());
break;
case CHOOSE_MODE:
chooseMode(event.getPlayerId(),event.getModes());
break;
case CHOOSE:
choose(event.getPlayerId(),event.getMessage(),event.getChoices());
break;
case AMOUNT:
amount(event.getPlayerId(),event.getMessage(),event.getMin(),event.getMax());
break;
case LOOK:
lookAtCards(event.getPlayerId(),event.getMessage(),event.getCards());
break;
case PERSONAL_MESSAGE:
informPersonal(event.getPlayerId(),event.getMessage());
break;
}
}
 catch (MageException ex) {
logger.fatal(""String_Node_Str"",ex);
}
}","@Override public void event(PlayerQueryEvent event){
  logger.trace(new StringBuilder(event.getPlayerId().toString()).append(""String_Node_Str"").append(event.getQueryType()).append(""String_Node_Str"").append(event.getMessage()).toString());
  try {
switch (event.getQueryType()) {
case ASK:
      ask(event.getPlayerId(),event.getMessage());
    break;
case PICK_TARGET:
  target(event.getPlayerId(),event.getMessage(),event.getCards(),event.getPerms(),event.getTargets(),event.isRequired(),event.getOptions());
break;
case PICK_ABILITY:
target(event.getPlayerId(),event.getMessage(),event.getAbilities(),event.isRequired(),event.getOptions());
break;
case SELECT:
select(event.getPlayerId(),event.getMessage());
break;
case PLAY_MANA:
playMana(event.getPlayerId(),event.getMessage());
break;
case PLAY_X_MANA:
playXMana(event.getPlayerId(),event.getMessage());
break;
case CHOOSE_ABILITY:
chooseAbility(event.getPlayerId(),event.getAbilities());
break;
case CHOOSE_PILE:
choosePile(event.getPlayerId(),event.getMessage(),event.getPile1(),event.getPile2());
break;
case CHOOSE_MODE:
chooseMode(event.getPlayerId(),event.getModes());
break;
case CHOOSE:
choose(event.getPlayerId(),event.getMessage(),event.getChoices());
break;
case AMOUNT:
amount(event.getPlayerId(),event.getMessage(),event.getMin(),event.getMax());
break;
case PERSONAL_MESSAGE:
informPersonal(event.getPlayerId(),event.getMessage());
break;
}
}
 catch (MageException ex) {
logger.fatal(""String_Node_Str"",ex);
}
}",0.9711286089238844
159658,"@Override public GameView getGameView(){
  Player player=game.getPlayer(playerId);
  player.setUserData(this.userData);
  GameView gameView=new GameView(game.getState(),game);
  gameView.setHand(new SimpleCardsView(player.getHand().getCards(game)));
  if (player.getPlayersUnderYourControl().size() > 0) {
    Map<String,SimpleCardsView> handCards=new HashMap<String,SimpleCardsView>();
    for (    UUID controlledPlayerId : player.getPlayersUnderYourControl()) {
      Player opponent=game.getPlayer(controlledPlayerId);
      handCards.put(opponent.getName(),new SimpleCardsView(opponent.getHand().getCards(game)));
    }
    gameView.setOpponentHands(handCards);
  }
  List<LookedAtView> list=new ArrayList<LookedAtView>();
  for (  Entry<String,Cards> entry : game.getState().getLookedAt(playerId).entrySet()) {
    list.add(new LookedAtView(entry.getKey(),entry.getValue(),game));
  }
  gameView.setLookedAt(list);
  game.getState().clearLookedAt();
  return gameView;
}","@Override public GameView getGameView(){
  Player player=game.getPlayer(playerId);
  player.setUserData(this.userData);
  GameView gameView=new GameView(game.getState(),game);
  gameView.setHand(new SimpleCardsView(player.getHand().getCards(game)));
  if (player.getPlayersUnderYourControl().size() > 0) {
    Map<String,SimpleCardsView> handCards=new HashMap<String,SimpleCardsView>();
    for (    UUID controlledPlayerId : player.getPlayersUnderYourControl()) {
      Player opponent=game.getPlayer(controlledPlayerId);
      handCards.put(opponent.getName(),new SimpleCardsView(opponent.getHand().getCards(game)));
    }
    gameView.setOpponentHands(handCards);
  }
  List<LookedAtView> list=new ArrayList<LookedAtView>();
  for (  Entry<String,Cards> entry : game.getState().getLookedAt(playerId).entrySet()) {
    list.add(new LookedAtView(entry.getKey(),entry.getValue(),game));
  }
  gameView.setLookedAt(list);
  game.getState().clearLookedAt(playerId);
  return gameView;
}",0.9959183673469388
159659,"public LookedAt getLookedAt(UUID playerId){
  if (lookedAt.get(playerId) == null) {
    LookedAt l=new LookedAt();
    lookedAt.put(playerId,l);
    return l;
  }
  return lookedAt.get(playerId);
}","public LookedAt getLookedAt(UUID playerId){
  if (lookedAt.get(playerId) == null) {
    LookedAt lookedAtCards=new LookedAt();
    lookedAt.put(playerId,lookedAtCards);
    return lookedAtCards;
  }
  return lookedAt.get(playerId);
}",0.8465116279069768
159660,"public void clearLookedAt(){
  lookedAt.clear();
}","public void clearLookedAt(UUID playerId){
  lookedAt.remove(playerId);
}",0.7704918032786885
159661,"@Override public void lookAtCards(String name,Cards cards,Game game){
  game.getState().getLookedAt(this.playerId).add(name,cards);
  game.fireLookAtCardsEvent(playerId,this.name + ""String_Node_Str"",cards);
}","@Override public void lookAtCards(String name,Cards cards,Game game){
  game.getState().getLookedAt(this.playerId).add(name,cards);
  game.fireUpdatePlayersEvent();
}",0.839572192513369
159662,"@Override public boolean canActivate(UUID playerId,Game game){
  if (super.canActivate(playerId,game)) {
    Boolean activated=(Boolean)game.getState().getValue(this.originalId.toString() + ""String_Node_Str"");
    if (activated == null)     return true;
 else     return !activated;
  }
  return false;
}","@Override public boolean canActivate(UUID playerId,Game game){
  if (super.canActivate(playerId,game)) {
    Boolean activated=(Boolean)game.getState().getValue(CardUtil.getCardZoneString(""String_Node_Str"",sourceId,game));
    if (activated == null) {
      return true;
    }
 else {
      return !activated;
    }
  }
  return false;
}",0.8829953198127926
159663,"@Override public boolean activate(Game game,boolean noMana){
  if (canActivate(this.controllerId,game)) {
    if (super.activate(game,noMana)) {
      game.getState().setValue(this.originalId.toString() + ""String_Node_Str"",Boolean.TRUE);
      return true;
    }
  }
  return false;
}","@Override public boolean activate(Game game,boolean noMana){
  if (canActivate(this.controllerId,game)) {
    if (super.activate(game,noMana)) {
      game.getState().setValue(CardUtil.getCardZoneString(""String_Node_Str"",sourceId,game),Boolean.TRUE);
      return true;
    }
  }
  return false;
}",0.8777969018932874
159664,"@Override public void reset(Game game){
  game.getState().setValue(this.originalId.toString() + ""String_Node_Str"",Boolean.FALSE);
}","@Override public void reset(Game game){
  game.getState().setValue(CardUtil.getCardZoneString(""String_Node_Str"",sourceId,game),Boolean.FALSE);
}",0.8290909090909091
159665,"/** 
 * Creates and saves a (card + zoneChangeCounter) specific exileId.
 * @param game
 * @param source - source ability
 * @return - the specific UUID
 */
public static UUID getCardExileZoneId(Game game,Ability source){
  UUID exileId=null;
  Card card=game.getCard(source.getSourceId());
  if (card != null) {
    exileId=(UUID)game.getState().getValue(new StringBuilder(""String_Node_Str"").append(source.getSourceId()).append(card.getZoneChangeCounter()).toString());
    if (exileId == null) {
      exileId=UUID.randomUUID();
      game.getState().setValue(new StringBuilder(""String_Node_Str"").append(source.getSourceId()).append(card.getZoneChangeCounter()).toString(),exileId);
    }
  }
  return exileId;
}","/** 
 * Creates and saves a (card + zoneChangeCounter) specific exileId.
 * @param game
 * @param source - source ability
 * @return - the specific UUID
 */
public static UUID getCardExileZoneId(Game game,Ability source){
  String key=getCardZoneString(""String_Node_Str"",source.getSourceId(),game);
  UUID exileId=(UUID)game.getState().getValue(key);
  if (exileId == null) {
    exileId=UUID.randomUUID();
    game.getState().setValue(key,exileId);
  }
  return exileId;
}",0.5981465880370682
159666,"public void eliminatePlayers(){
  if (match.getPlayer(player1.getPlayer().getId()).getWins() < match.getWinsNeeded()) {
    player1.setEliminated();
  }
  if (match.getPlayer(player2.getPlayer().getId()).getWins() < match.getWinsNeeded()) {
    player2.setEliminated();
  }
}","public void eliminatePlayers(){
  MatchPlayer mPlayer1=match.getPlayer(player1.getPlayer().getId());
  MatchPlayer mPlayer2=match.getPlayer(player2.getPlayer().getId());
  if (mPlayer1.hasQuit() || (!mPlayer2.hasQuit() && mPlayer1.getWins() < match.getWinsNeeded())) {
    player1.setEliminated();
  }
  if (mPlayer2.hasQuit() || (!mPlayer1.hasQuit() && mPlayer2.getWins() < match.getWinsNeeded())) {
    player2.setEliminated();
  }
}",0.3323943661971831
159667,"@Override public MasterOfDiversionEffect copy(){
  return new MasterOfDiversionEffect(this);
}","@Override public MasterOfDiversion copy(){
  return new MasterOfDiversion(this);
}",0.9318181818181818
159668,"@Override public boolean apply(Game game,Ability source){
  boolean conditionApplies=false;
switch (this.type) {
case FEWER_THAN:
    conditionApplies=game.getBattlefield().countAll(filter,source.getControllerId(),game) < this.count;
  break;
case MORE_THAN:
conditionApplies=game.getBattlefield().countAll(filter,source.getControllerId(),game) > this.count;
break;
case EQUAL_TO:
conditionApplies=game.getBattlefield().countAll(filter,source.getControllerId(),game) == this.count;
break;
}
if (this.condition != null) {
conditionApplies=conditionApplies && this.condition.apply(game,source);
}
return conditionApplies;
}","@Override public boolean apply(Game game,Ability source){
  boolean conditionApplies=false;
switch (this.type) {
case FEWER_THAN:
    conditionApplies=game.getBattlefield().count(filter,source.getSourceId(),source.getControllerId(),game) < this.count;
  break;
case MORE_THAN:
conditionApplies=game.getBattlefield().count(filter,source.getSourceId(),source.getControllerId(),game) > this.count;
break;
case EQUAL_TO:
conditionApplies=game.getBattlefield().count(filter,source.getSourceId(),source.getControllerId(),game) == this.count;
break;
}
if (this.condition != null) {
conditionApplies=conditionApplies && this.condition.apply(game,source);
}
return conditionApplies;
}",0.9120370370370372
159669,"@Override public boolean apply(Game game,Ability source){
  boolean conditionApplies=false;
switch (this.type) {
case FEWER_THAN:
    conditionApplies=game.getBattlefield().count(filter,source.getSourceId(),source.getControllerId(),game) < this.count;
  break;
case MORE_THAN:
conditionApplies=game.getBattlefield().count(filter,source.getSourceId(),source.getControllerId(),game) > this.count;
break;
case EQUAL_TO:
conditionApplies=game.getBattlefield().count(filter,source.getSourceId(),source.getControllerId(),game) == this.count;
break;
}
if (this.condition != null) {
conditionApplies=conditionApplies && this.condition.apply(game,source);
}
return conditionApplies;
}","@Override public boolean apply(Game game,Ability source){
  boolean conditionApplies=false;
switch (this.type) {
case FEWER_THAN:
    conditionApplies=game.getBattlefield().countControlled(filter,source.getSourceId(),source.getControllerId(),game) < this.count;
  break;
case MORE_THAN:
conditionApplies=game.getBattlefield().countControlled(filter,source.getSourceId(),source.getControllerId(),game) > this.count;
break;
case EQUAL_TO:
conditionApplies=game.getBattlefield().countControlled(filter,source.getSourceId(),source.getControllerId(),game) == this.count;
break;
}
if (this.condition != null) {
conditionApplies=conditionApplies && this.condition.apply(game,source);
}
return conditionApplies;
}",0.9782608695652174
159670,"@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.MANA_PAYED) {
    if (event.getSourceId().equals(this.sourceId)) {
      spells.add(event.getTargetId());
    }
  }
}","@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.MANA_PAYED) {
    if (game.getObject(event.getSourceId()).getName().equals(""String_Node_Str"")) {
      spells.add(event.getTargetId());
    }
  }
}",0.7296137339055794
159671,"/** 
 * Get random basic land that can produce specified color mana. Random here means random set and collector id for the same mana producing land.
 * @param color
 * @return
 */
private static Card getBestBasicLand(ColoredManaSymbol color,List<String> setsToUse){
  String cardName=""String_Node_Str"";
switch (color) {
case G:
    cardName=""String_Node_Str"";
  break;
case W:
cardName=""String_Node_Str"";
break;
case R:
cardName=""String_Node_Str"";
break;
case B:
cardName=""String_Node_Str"";
break;
case U:
cardName=""String_Node_Str"";
break;
}
List<String> landSets=new LinkedList<String>();
for (String setCode : setsToUse) {
ExpansionInfo expansionInfo=ExpansionRepository.instance.getSetByCode(setCode);
if (expansionInfo.hasBasicLands()) {
landSets.add(expansionInfo.getCode());
}
}
if (landSets.isEmpty()) {
for (String setCode : setsToUse) {
ExpansionInfo expansionInfo=ExpansionRepository.instance.getSetByCode(setCode);
ExpansionInfo[] blockSets=ExpansionRepository.instance.getSetsFromBlock(expansionInfo.getBlockName());
for (ExpansionInfo blockSet : blockSets) {
if (blockSet.hasBasicLands()) {
landSets.add(blockSet.getCode());
}
}
}
}
if (landSets.isEmpty()) {
Random generator=new Random();
ExpansionInfo[] randomLandSets=ExpansionRepository.instance.getSetsWithBasicLandsByReleaseDate();
if (randomLandSets.length > 0) {
landSets.add(randomLandSets[generator.nextInt(randomLandSets.length) - 1].getCode());
}
}
if (landSets.isEmpty()) {
throw new IllegalArgumentException(""String_Node_Str"");
}
CardCriteria criteria=new CardCriteria();
if (!landSets.isEmpty()) {
criteria.setCodes(landSets.toArray(new String[landSets.size()]));
}
criteria.rarities(Rarity.LAND).name(cardName);
List<CardInfo> cards=CardRepository.instance.findCards(criteria);
if (cards.isEmpty() && !setsToUse.isEmpty()) {
cards=CardRepository.instance.findCards(cardName);
}
int randomInt=new Random().nextInt(cards.size());
return cards.get(randomInt).getMockCard();
}","/** 
 * Get random basic land that can produce specified color mana. Random here means random set and collector id for the same mana producing land.
 * @param color
 * @return
 */
private static Card getBestBasicLand(ColoredManaSymbol color,List<String> setsToUse){
  String cardName=""String_Node_Str"";
switch (color) {
case G:
    cardName=""String_Node_Str"";
  break;
case W:
cardName=""String_Node_Str"";
break;
case R:
cardName=""String_Node_Str"";
break;
case B:
cardName=""String_Node_Str"";
break;
case U:
cardName=""String_Node_Str"";
break;
}
List<String> landSets=new LinkedList<String>();
for (String setCode : setsToUse) {
ExpansionInfo expansionInfo=ExpansionRepository.instance.getSetByCode(setCode);
if (expansionInfo.hasBasicLands()) {
landSets.add(expansionInfo.getCode());
}
}
if (landSets.isEmpty()) {
for (String setCode : setsToUse) {
ExpansionInfo expansionInfo=ExpansionRepository.instance.getSetByCode(setCode);
ExpansionInfo[] blockSets=ExpansionRepository.instance.getSetsFromBlock(expansionInfo.getBlockName());
for (ExpansionInfo blockSet : blockSets) {
if (blockSet.hasBasicLands()) {
landSets.add(blockSet.getCode());
}
}
}
}
if (landSets.isEmpty()) {
Random generator=new Random();
List<ExpansionInfo> basicLandSets=ExpansionRepository.instance.getSetsWithBasicLandsByReleaseDate();
if (basicLandSets.size() > 0) {
landSets.add(basicLandSets.get(generator.nextInt(basicLandSets.size())).getCode());
}
}
if (landSets.isEmpty()) {
throw new IllegalArgumentException(""String_Node_Str"");
}
CardCriteria criteria=new CardCriteria();
if (!landSets.isEmpty()) {
criteria.setCodes(landSets.toArray(new String[landSets.size()]));
}
criteria.rarities(Rarity.LAND).name(cardName);
List<CardInfo> cards=CardRepository.instance.findCards(criteria);
if (cards.isEmpty() && !setsToUse.isEmpty()) {
cards=CardRepository.instance.findCards(cardName);
}
int randomInt=new Random().nextInt(cards.size());
return cards.get(randomInt).getMockCard();
}",0.9764344262295082
159672,"public void showDialog(Deck deck){
  this.deck=deck;
  for (  String setCode : deck.getExpansionSetCodes()) {
    ExpansionInfo expansionInfo=ExpansionRepository.instance.getSetByCode(setCode);
    if (expansionInfo.hasBasicLands()) {
      this.setCodesland.add(expansionInfo.getCode());
    }
  }
  if (this.setCodesland.isEmpty()) {
    for (    String setCode : deck.getExpansionSetCodes()) {
      ExpansionInfo expansionInfo=ExpansionRepository.instance.getSetByCode(setCode);
      ExpansionInfo[] blockSets=ExpansionRepository.instance.getSetsFromBlock(expansionInfo.getBlockName());
      for (      ExpansionInfo blockSet : blockSets) {
        if (blockSet.hasBasicLands()) {
          this.setCodesland.add(blockSet.getCode());
        }
      }
    }
  }
  if (this.setCodesland.isEmpty()) {
    Random generator=new Random();
    ExpansionInfo[] landSets=ExpansionRepository.instance.getSetsWithBasicLandsByReleaseDate();
    if (landSets.length > 0) {
      this.setCodesland.add(landSets[generator.nextInt(landSets.length) - 1].getCode());
    }
  }
  if (this.setCodesland.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  MageFrame.getDesktop().add(this,JLayeredPane.PALETTE_LAYER);
  this.setVisible(true);
}","public void showDialog(Deck deck){
  this.deck=deck;
  for (  String setCode : deck.getExpansionSetCodes()) {
    ExpansionInfo expansionInfo=ExpansionRepository.instance.getSetByCode(setCode);
    if (expansionInfo.hasBasicLands()) {
      this.setCodesland.add(expansionInfo.getCode());
    }
  }
  if (this.setCodesland.isEmpty()) {
    for (    String setCode : deck.getExpansionSetCodes()) {
      ExpansionInfo expansionInfo=ExpansionRepository.instance.getSetByCode(setCode);
      ExpansionInfo[] blockSets=ExpansionRepository.instance.getSetsFromBlock(expansionInfo.getBlockName());
      for (      ExpansionInfo blockSet : blockSets) {
        if (blockSet.hasBasicLands()) {
          this.setCodesland.add(blockSet.getCode());
        }
      }
    }
  }
  if (this.setCodesland.isEmpty()) {
    Random generator=new Random();
    List<ExpansionInfo> basicLandSets=ExpansionRepository.instance.getSetsWithBasicLandsByReleaseDate();
    if (basicLandSets.size() > 0) {
      this.setCodesland.add(basicLandSets.get(generator.nextInt(basicLandSets.size())).getCode());
    }
  }
  if (this.setCodesland.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  MageFrame.getDesktop().add(this,JLayeredPane.PALETTE_LAYER);
  this.setVisible(true);
}",0.9518547750591948
159673,"private static void addBasicLands(Deck deck,String landName,int number){
  Random random=new Random();
  Set<String> landSets=new HashSet<String>();
  for (  String setCode : deck.getExpansionSetCodes()) {
    ExpansionInfo expansionInfo=ExpansionRepository.instance.getSetByCode(setCode);
    if (expansionInfo.hasBasicLands()) {
      landSets.add(expansionInfo.getCode());
    }
  }
  if (landSets.isEmpty()) {
    for (    String setCode : deck.getExpansionSetCodes()) {
      ExpansionInfo expansionInfo=ExpansionRepository.instance.getSetByCode(setCode);
      ExpansionInfo[] blockSets=ExpansionRepository.instance.getSetsFromBlock(expansionInfo.getBlockName());
      for (      ExpansionInfo blockSet : blockSets) {
        if (blockSet.hasBasicLands()) {
          landSets.add(blockSet.getCode());
        }
      }
    }
  }
  if (landSets.isEmpty()) {
    Random generator=new Random();
    ExpansionInfo[] basicLandSets=ExpansionRepository.instance.getSetsWithBasicLandsByReleaseDate();
    if (basicLandSets.length > 0) {
      landSets.add(basicLandSets[generator.nextInt(basicLandSets.length) - 1].getCode());
    }
  }
  if (landSets.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CardCriteria criteria=new CardCriteria();
  if (!landSets.isEmpty()) {
    criteria.setCodes(landSets.toArray(new String[landSets.size()]));
  }
  criteria.rarities(Rarity.LAND).name(landName);
  List<CardInfo> cards=CardRepository.instance.findCards(criteria);
  if (cards.isEmpty()) {
    return;
  }
  for (int i=0; i < number; i++) {
    Card land=cards.get(random.nextInt(cards.size())).getCard();
    deck.getCards().add(land);
  }
}","private static void addBasicLands(Deck deck,String landName,int number){
  Random random=new Random();
  Set<String> landSets=new HashSet<String>();
  for (  String setCode : deck.getExpansionSetCodes()) {
    ExpansionInfo expansionInfo=ExpansionRepository.instance.getSetByCode(setCode);
    if (expansionInfo.hasBasicLands()) {
      landSets.add(expansionInfo.getCode());
    }
  }
  if (landSets.isEmpty()) {
    for (    String setCode : deck.getExpansionSetCodes()) {
      ExpansionInfo expansionInfo=ExpansionRepository.instance.getSetByCode(setCode);
      ExpansionInfo[] blockSets=ExpansionRepository.instance.getSetsFromBlock(expansionInfo.getBlockName());
      for (      ExpansionInfo blockSet : blockSets) {
        if (blockSet.hasBasicLands()) {
          landSets.add(blockSet.getCode());
        }
      }
    }
  }
  if (landSets.isEmpty()) {
    Random generator=new Random();
    List<ExpansionInfo> basicLandSets=ExpansionRepository.instance.getSetsWithBasicLandsByReleaseDate();
    if (basicLandSets.size() > 0) {
      landSets.add(basicLandSets.get(generator.nextInt(basicLandSets.size())).getCode());
    }
  }
  if (landSets.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CardCriteria criteria=new CardCriteria();
  if (!landSets.isEmpty()) {
    criteria.setCodes(landSets.toArray(new String[landSets.size()]));
  }
  criteria.rarities(Rarity.LAND).name(landName);
  List<CardInfo> cards=CardRepository.instance.findCards(criteria);
  if (cards.isEmpty()) {
    return;
  }
  for (int i=0; i < number; i++) {
    Card land=cards.get(random.nextInt(cards.size())).getCard();
    deck.getCards().add(land);
  }
}",0.9862357869539198
159674,"@Override public boolean apply(Game game,Ability source){
  boolean conditionApplies=false;
switch (this.type) {
case FEWER_THAN:
    conditionApplies=game.getBattlefield().count(filter,source.getSourceId(),source.getControllerId(),game) < this.count;
  break;
case MORE_THAN:
conditionApplies=game.getBattlefield().count(filter,source.getSourceId(),source.getControllerId(),game) > this.count;
break;
case EQUAL_TO:
conditionApplies=game.getBattlefield().count(filter,source.getSourceId(),source.getControllerId(),game) == this.count;
break;
}
if (this.condition != null) {
conditionApplies=conditionApplies && this.condition.apply(game,source);
}
return conditionApplies;
}","@Override public boolean apply(Game game,Ability source){
  boolean conditionApplies=false;
switch (this.type) {
case FEWER_THAN:
    conditionApplies=game.getBattlefield().countAll(filter,source.getControllerId(),game) < this.count;
  break;
case MORE_THAN:
conditionApplies=game.getBattlefield().countAll(filter,source.getControllerId(),game) > this.count;
break;
case EQUAL_TO:
conditionApplies=game.getBattlefield().countAll(filter,source.getControllerId(),game) == this.count;
break;
}
if (this.condition != null) {
conditionApplies=conditionApplies && this.condition.apply(game,source);
}
return conditionApplies;
}",0.9120370370370372
159675,"private List<String> parseList(String list){
  return Arrays.asList(list.split(SEPARATOR));
}","private List<String> parseList(String list){
  if (list.isEmpty()) {
    return new ArrayList<String>();
  }
  return Arrays.asList(list.split(SEPARATOR));
}",0.744
159676,"private void showPopup(final TransferData data,final Component parentComponent,final Point parentPoint){
  if (data.card.getRarity().equals(Rarity.NA)) {
    return;
  }
  if (data.component != null) {
    String showTooltips=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_SHOW_TOOLTIPS_ANY_ZONE,""String_Node_Str"");
    if (showTooltips.equals(""String_Node_Str"")) {
      return;
    }
  }
  if (cardInfoPane == null) {
    PopupFactory factory=PopupFactory.getSharedInstance();
    popup=factory.getPopup(data.component,data.popupText,(int)data.locationOnScreen.getX() + data.popupOffsetX,(int)data.locationOnScreen.getY() + data.popupOffsetY + 40);
    popup.show();
    popup.hide();
    popup=factory.getPopup(data.component,data.popupText,(int)data.locationOnScreen.getX() + data.popupOffsetX,(int)data.locationOnScreen.getY() + data.popupOffsetY + 40);
    popup.show();
  }
 else {
    sumbitShowPopupTask(data,parentComponent,parentPoint);
  }
}","private void showPopup(final TransferData data,final Component parentComponent,final Point parentPoint){
  if (data.component != null) {
    String showTooltips=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_SHOW_TOOLTIPS_ANY_ZONE,""String_Node_Str"");
    if (showTooltips.equals(""String_Node_Str"")) {
      return;
    }
  }
  if (cardInfoPane == null) {
    PopupFactory factory=PopupFactory.getSharedInstance();
    popup=factory.getPopup(data.component,data.popupText,(int)data.locationOnScreen.getX() + data.popupOffsetX,(int)data.locationOnScreen.getY() + data.popupOffsetY + 40);
    popup.show();
    popup.hide();
    popup=factory.getPopup(data.component,data.popupText,(int)data.locationOnScreen.getX() + data.popupOffsetX,(int)data.locationOnScreen.getY() + data.popupOffsetY + 40);
    popup.show();
  }
 else {
    sumbitShowPopupTask(data,parentComponent,parentPoint);
  }
}",0.9649973074851912
159677,"public GameView(GameState state,Game game){
  priorityTime=game.getPriorityTime();
  for (  Player player : state.getPlayers().values()) {
    players.add(new PlayerView(player,state,game));
  }
  for (  StackObject stackObject : state.getStack()) {
    if (stackObject instanceof StackAbility) {
      MageObject object=game.getObject(stackObject.getSourceId());
      Card card=game.getCard(stackObject.getSourceId());
      if (card != null) {
        if (object != null) {
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,card.getName(),new CardView(card)));
        }
 else {
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,""String_Node_Str"",new CardView(card)));
        }
        if (card.canTransform()) {
          updateLatestCardView(game,card,stackObject.getId());
        }
        checkPaid(stackObject.getId(),(StackAbility)stackObject);
      }
 else       if (object != null) {
        if (object instanceof PermanentToken) {
          PermanentToken token=(PermanentToken)object;
          stack.put(stackObject.getId(),new CardView(token));
          checkPaid(stackObject.getId(),(StackAbility)stackObject);
        }
 else         if (object instanceof Emblem) {
          Card sourceCard=game.getCard(((Emblem)object).getSourceId());
          if (sourceCard != null) {
            ((StackAbility)stackObject).setName(""String_Node_Str"" + sourceCard.getName());
            ((StackAbility)stackObject).setExpansionSetCode(sourceCard.getExpansionSetCode());
          }
 else {
            throw new IllegalArgumentException(""String_Node_Str"");
          }
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,object.getName(),new CardView(((StackAbility)stackObject))));
          checkPaid(stackObject.getId(),((StackAbility)stackObject));
        }
 else {
          StackAbility stackAbility=((StackAbility)object);
          stackAbility.newId();
          stack.put(stackObject.getId(),new CardView(((StackAbility)stackObject)));
          checkPaid(stackObject.getId(),((StackAbility)stackObject));
        }
      }
    }
 else {
      stack.put(stackObject.getId(),new CardView((Spell)stackObject));
      checkPaid(stackObject.getId(),(Spell)stackObject);
    }
  }
  for (  ExileZone exileZone : state.getExile().getExileZones()) {
    exiles.add(new ExileView(exileZone,game));
  }
  for (  String name : state.getRevealed().keySet()) {
    revealed.add(new RevealedView(name,state.getRevealed().get(name),game));
  }
  this.phase=state.getTurn().getPhaseType();
  this.step=state.getTurn().getStepType();
  this.turn=state.getTurnNum();
  if (state.getActivePlayerId() != null) {
    this.activePlayerName=state.getPlayer(state.getActivePlayerId()).getName();
  }
 else {
    this.activePlayerName=""String_Node_Str"";
  }
  if (state.getPriorityPlayerId() != null) {
    this.priorityPlayerName=state.getPlayer(state.getPriorityPlayerId()).getName();
  }
 else {
    this.priorityPlayerName=""String_Node_Str"";
  }
  for (  CombatGroup combatGroup : state.getCombat().getGroups()) {
    combat.add(new CombatGroupView(combatGroup,game));
  }
  this.special=state.getSpecialActions().getControlledBy(state.getPriorityPlayerId()).size() > 0;
}","public GameView(GameState state,Game game){
  priorityTime=game.getPriorityTime();
  for (  Player player : state.getPlayers().values()) {
    players.add(new PlayerView(player,state,game));
  }
  for (  StackObject stackObject : state.getStack()) {
    if (stackObject instanceof StackAbility) {
      MageObject object=game.getObject(stackObject.getSourceId());
      Card card=game.getCard(stackObject.getSourceId());
      if (card != null) {
        if (object != null) {
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,card.getName(),new CardView(card)));
        }
 else {
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,""String_Node_Str"",new CardView(card)));
        }
        if (card.canTransform()) {
          updateLatestCardView(game,card,stackObject.getId());
        }
        checkPaid(stackObject.getId(),(StackAbility)stackObject);
      }
 else       if (object != null) {
        if (object instanceof PermanentToken) {
          PermanentToken token=(PermanentToken)object;
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,token.getName(),new CardView(token)));
          checkPaid(stackObject.getId(),(StackAbility)stackObject);
        }
 else         if (object instanceof Emblem) {
          Card sourceCard=game.getCard(((Emblem)object).getSourceId());
          if (sourceCard != null) {
            ((StackAbility)stackObject).setName(""String_Node_Str"" + sourceCard.getName());
            ((StackAbility)stackObject).setExpansionSetCode(sourceCard.getExpansionSetCode());
          }
 else {
            throw new IllegalArgumentException(""String_Node_Str"");
          }
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,object.getName(),new CardView(new EmblemView(((Emblem)object),sourceCard))));
          checkPaid(stackObject.getId(),((StackAbility)stackObject));
        }
 else {
          StackAbility stackAbility=((StackAbility)object);
          stackAbility.newId();
          stack.put(stackObject.getId(),new CardView(((StackAbility)stackObject)));
          checkPaid(stackObject.getId(),((StackAbility)stackObject));
        }
      }
 else {
      }
    }
 else {
      stack.put(stackObject.getId(),new CardView((Spell)stackObject));
      checkPaid(stackObject.getId(),(Spell)stackObject);
    }
  }
  for (  ExileZone exileZone : state.getExile().getExileZones()) {
    exiles.add(new ExileView(exileZone,game));
  }
  for (  String name : state.getRevealed().keySet()) {
    revealed.add(new RevealedView(name,state.getRevealed().get(name),game));
  }
  this.phase=state.getTurn().getPhaseType();
  this.step=state.getTurn().getStepType();
  this.turn=state.getTurnNum();
  if (state.getActivePlayerId() != null) {
    this.activePlayerName=state.getPlayer(state.getActivePlayerId()).getName();
  }
 else {
    this.activePlayerName=""String_Node_Str"";
  }
  if (state.getPriorityPlayerId() != null) {
    this.priorityPlayerName=state.getPlayer(state.getPriorityPlayerId()).getName();
  }
 else {
    this.priorityPlayerName=""String_Node_Str"";
  }
  for (  CombatGroup combatGroup : state.getCombat().getGroups()) {
    combat.add(new CombatGroupView(combatGroup,game));
  }
  this.special=state.getSpecialActions().getControlledBy(state.getPriorityPlayerId()).size() > 0;
}",0.9771539495296402
159678,"@Override public String getImageName(){
  return ""String_Node_Str"";
}","@Override public String getImageName(){
  return this.name;
}",0.8615384615384616
159679,"public Emblem(Emblem emblem){
  this.id=emblem.id;
  this.controllerId=emblem.controllerId;
  this.sourceId=emblem.sourceId;
  this.abilites=emblem.abilites.copy();
}","public Emblem(final Emblem emblem){
  this.id=emblem.id;
  this.controllerId=emblem.controllerId;
  this.sourceId=emblem.sourceId;
  this.abilites=emblem.abilites.copy();
}",0.9822485207100592
159680,"public Token(final Token token){
  super(token);
  this.description=token.description;
  this.tokenType=token.tokenType;
}","public Token(final Token token){
  super(token);
  this.description=token.description;
  this.tokenType=token.tokenType;
  this.lastAddedTokenId=token.lastAddedTokenId;
  this.originalCardNumber=token.originalCardNumber;
  this.originalExpansionSetCode=token.originalExpansionSetCode;
}",0.5980392156862745
159681,"@Override public Token apply(Card source){
  if (target == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  MageObject sourceObj=source;
  if (source instanceof PermanentToken) {
    sourceObj=((PermanentToken)source).getToken();
  }
 else   if (source instanceof PermanentCard) {
    sourceObj=((PermanentCard)source).getCard();
  }
  target.setName(sourceObj.getName());
  target.getColor().setColor(sourceObj.getColor());
  target.getManaCost().clear();
  target.getManaCost().add(sourceObj.getManaCost());
  target.getCardType().clear();
  for (  CardType type : sourceObj.getCardType()) {
    target.getCardType().add(type);
  }
  target.getSubtype().clear();
  for (  String type : sourceObj.getSubtype()) {
    target.getSubtype().add(type);
  }
  target.getSupertype().clear();
  for (  String type : sourceObj.getSupertype()) {
    target.getSupertype().add(type);
  }
  target.setOriginalExpansionSetCode(source.getExpansionSetCode());
  target.setOriginalCardNumber(source.getCardNumber());
  target.getAbilities().clear();
  for (  Ability ability0 : sourceObj.getAbilities()) {
    Ability ability=ability0.copy();
    ability.newId();
    ability.setSourceId(target.getId());
    target.addAbility(ability);
  }
  target.getPower().initValue(Integer.parseInt(sourceObj.getPower().toString()));
  target.getToughness().initValue(Integer.parseInt(sourceObj.getToughness().toString()));
  return target;
}","@Override public Token apply(Card source){
  if (target == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  MageObject sourceObj=source;
  if (source instanceof PermanentToken) {
    sourceObj=((PermanentToken)source).getToken();
    target.setOriginalExpansionSetCode(((Token)sourceObj).getOriginalExpansionSetCode());
    target.setOriginalCardNumber(((Token)sourceObj).getOriginalCardNumber());
  }
 else   if (source instanceof PermanentCard) {
    sourceObj=((PermanentCard)source).getCard();
    target.setOriginalExpansionSetCode(source.getExpansionSetCode());
    target.setOriginalCardNumber(source.getCardNumber());
  }
  target.setName(sourceObj.getName());
  target.getColor().setColor(sourceObj.getColor());
  target.getManaCost().clear();
  target.getManaCost().add(sourceObj.getManaCost());
  target.getCardType().clear();
  for (  CardType type : sourceObj.getCardType()) {
    target.getCardType().add(type);
  }
  target.getSubtype().clear();
  for (  String type : sourceObj.getSubtype()) {
    target.getSubtype().add(type);
  }
  target.getSupertype().clear();
  for (  String type : sourceObj.getSupertype()) {
    target.getSupertype().add(type);
  }
  target.getAbilities().clear();
  for (  Ability ability0 : sourceObj.getAbilities()) {
    Ability ability=ability0.copy();
    ability.newId();
    ability.setSourceId(target.getId());
    target.addAbility(ability);
  }
  target.getPower().initValue(Integer.parseInt(sourceObj.getPower().toString()));
  target.getToughness().initValue(Integer.parseInt(sourceObj.getToughness().toString()));
  return target;
}",0.5858453473132372
159682,"private void btnQuickStartActionPerformed(java.awt.event.ActionEvent evt){
  TableView table;
  try {
    File f=new File(""String_Node_Str"");
    if (!f.exists()) {
      JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
    MatchOptions options=new MatchOptions(""String_Node_Str"",""String_Node_Str"");
    options.getPlayerTypes().add(""String_Node_Str"");
    options.getPlayerTypes().add(""String_Node_Str"");
    options.setDeckType(""String_Node_Str"");
    options.setAttackOption(MultiplayerAttackOption.LEFT);
    options.setRange(RangeOfInfluence.ALL);
    options.setWinsNeeded(1);
    table=session.createTable(roomId,options);
    session.joinTable(roomId,table.getTableId(),""String_Node_Str"",""String_Node_Str"",1,DeckImporterUtil.importDeck(""String_Node_Str""));
    session.joinTable(roomId,table.getTableId(),""String_Node_Str"",""String_Node_Str"",5,DeckImporterUtil.importDeck(""String_Node_Str""));
    session.startGame(roomId,table.getTableId());
  }
 catch (  Exception ex) {
    handleError(ex);
  }
}","private void btnQuickStartActionPerformed(java.awt.event.ActionEvent evt){
  TableView table;
  try {
    File f=new File(""String_Node_Str"");
    if (!f.exists()) {
      JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
    MatchOptions options=new MatchOptions(""String_Node_Str"",""String_Node_Str"");
    options.getPlayerTypes().add(""String_Node_Str"");
    options.getPlayerTypes().add(""String_Node_Str"");
    options.setDeckType(""String_Node_Str"");
    options.setAttackOption(MultiplayerAttackOption.LEFT);
    options.setRange(RangeOfInfluence.ALL);
    options.setWinsNeeded(1);
    options.setMatchTimeLimit(MatchTimeLimit.NONE);
    options.setFreeMulligans(2);
    table=session.createTable(roomId,options);
    session.joinTable(roomId,table.getTableId(),""String_Node_Str"",""String_Node_Str"",1,DeckImporterUtil.importDeck(""String_Node_Str""));
    session.joinTable(roomId,table.getTableId(),""String_Node_Str"",""String_Node_Str"",5,DeckImporterUtil.importDeck(""String_Node_Str""));
    session.startGame(roomId,table.getTableId());
  }
 catch (  Exception ex) {
    handleError(ex);
  }
}",0.962002682163612
159683,"private void init(){
  this.cardSelector.setVisible(true);
  this.jPanel1.setVisible(true);
  for (  ICardGrid component : this.cardSelector.getCardGridComponents()) {
    component.clearCardEventListeners();
    component.addCardEventListener(new Listener<Event>(){
      @Override public void event(      Event event){
        if (event.getEventName().equals(""String_Node_Str"")) {
          SimpleCardView cardView=(SimpleCardView)event.getSource();
          CardInfo cardInfo=CardRepository.instance.findCard(cardView.getExpansionSetCode(),cardView.getCardNumber());
          Card card=null;
          if (mode == DeckEditorMode.Sideboard || mode == DeckEditorMode.Limited) {
            Iterator sideboard=deck.getSideboard().iterator();
            while (sideboard.hasNext()) {
              card=(Card)sideboard.next();
              if (card.getId().equals(cardView.getId())) {
                break;
              }
            }
          }
 else {
            card=cardInfo != null ? cardInfo.getMockCard() : null;
          }
          if (card != null) {
            deck.getCards().add(card);
            if (mode == DeckEditorMode.Sideboard || mode == DeckEditorMode.Limited) {
              deck.getSideboard().remove(card);
              cardSelector.removeCard(card.getId());
              cardSelector.setCardCount(deck.getSideboard().size());
              cardSelector.refresh();
            }
            if (cardInfoPane instanceof CardInfoPane) {
              ((CardInfoPane)cardInfoPane).setCard(new CardView(card),null);
            }
            hidePopup();
          }
        }
 else         if (event.getEventName().equals(""String_Node_Str"") && mode == DeckEditorMode.Constructed) {
          SimpleCardView cardView=(SimpleCardView)event.getSource();
          CardInfo cardInfo=CardRepository.instance.findCard(cardView.getExpansionSetCode(),cardView.getCardNumber());
          Card card=cardInfo != null ? cardInfo.getMockCard() : null;
          if (card != null) {
            deck.getSideboard().add(CardImpl.createCard(card.getClass()));
          }
          if (cardInfoPane instanceof CardInfoPane) {
            ((CardInfoPane)cardInfoPane).setCard(new CardView(card),null);
          }
          hidePopup();
        }
 else         if (event.getEventName().equals(""String_Node_Str"")) {
          DeckEditorPanel.this.deckArea.getDeckList().handleDoubleClick();
        }
 else         if (event.getEventName().equals(""String_Node_Str"")) {
          DeckEditorPanel.this.deckArea.getSideboardList().handleDoubleClick();
        }
        refreshDeck();
      }
    }
);
  }
  this.deckArea.clearDeckEventListeners();
  this.deckArea.addDeckEventListener(new Listener<Event>(){
    @Override public void event(    Event event){
      if (event.getEventName().equals(""String_Node_Str"")) {
        SimpleCardView cardView=(SimpleCardView)event.getSource();
        for (        Card card : deck.getCards()) {
          if (card.getId().equals(cardView.getId())) {
            deck.getCards().remove(card);
            if (mode == DeckEditorMode.Limited || mode == DeckEditorMode.Sideboard) {
              deck.getSideboard().add(card);
              cardSelector.loadSideboard(new ArrayList<Card>(deck.getSideboard()),getBigCard());
            }
            break;
          }
        }
        hidePopup();
        refreshDeck();
      }
 else       if (event.getEventName().equals(""String_Node_Str"") && mode == DeckEditorMode.Constructed) {
        SimpleCardView cardView=(SimpleCardView)event.getSource();
        for (        Card card : deck.getCards()) {
          if (card.getId().equals(cardView.getId())) {
            deck.getCards().remove(card);
            deck.getSideboard().add(card);
            break;
          }
        }
        hidePopup();
        refreshDeck();
      }
    }
  }
);
  this.deckArea.addSideboardEventListener(new Listener<Event>(){
    @Override public void event(    Event event){
      if (event.getEventName().equals(""String_Node_Str"")) {
        SimpleCardView cardView=(SimpleCardView)event.getSource();
        for (        Card card : deck.getSideboard()) {
          if (card.getId().equals(cardView.getId())) {
            deck.getSideboard().remove(card);
            deck.getCards().add(card);
            break;
          }
        }
        hidePopup();
        refreshDeck();
      }
    }
  }
);
  refreshDeck();
  this.setVisible(true);
  this.repaint();
}","private void init(){
  this.cardSelector.setVisible(true);
  this.jPanel1.setVisible(true);
  for (  ICardGrid component : this.cardSelector.getCardGridComponents()) {
    component.clearCardEventListeners();
    component.addCardEventListener(new Listener<Event>(){
      @Override public void event(      Event event){
        if (event.getEventName().equals(""String_Node_Str"")) {
          SimpleCardView cardView=(SimpleCardView)event.getSource();
          CardInfo cardInfo=CardRepository.instance.findCard(cardView.getExpansionSetCode(),cardView.getCardNumber());
          Card card=null;
          if (mode == DeckEditorMode.Sideboard || mode == DeckEditorMode.Limited) {
            Iterator sideboard=deck.getSideboard().iterator();
            while (sideboard.hasNext()) {
              card=(Card)sideboard.next();
              if (card.getId().equals(cardView.getId())) {
                break;
              }
            }
          }
 else {
            card=cardInfo != null ? cardInfo.getMockCard() : null;
          }
          if (card != null) {
            deck.getCards().add(card);
            if (mode == DeckEditorMode.Sideboard || mode == DeckEditorMode.Limited) {
              deck.getSideboard().remove(card);
              cardSelector.removeCard(card.getId());
              cardSelector.setCardCount(deck.getSideboard().size());
              cardSelector.refresh();
            }
            if (cardInfoPane instanceof CardInfoPane) {
              ((CardInfoPane)cardInfoPane).setCard(new CardView(card),null);
            }
            hidePopup();
          }
        }
 else         if (event.getEventName().equals(""String_Node_Str"") && mode == DeckEditorMode.Constructed) {
          SimpleCardView cardView=(SimpleCardView)event.getSource();
          CardInfo cardInfo=CardRepository.instance.findCard(cardView.getExpansionSetCode(),cardView.getCardNumber());
          Card card=cardInfo != null ? cardInfo.getMockCard() : null;
          if (card != null) {
            deck.getSideboard().add(card);
          }
          if (cardInfoPane instanceof CardInfoPane) {
            ((CardInfoPane)cardInfoPane).setCard(new CardView(card),null);
          }
          hidePopup();
        }
 else         if (event.getEventName().equals(""String_Node_Str"")) {
          DeckEditorPanel.this.deckArea.getDeckList().handleDoubleClick();
        }
 else         if (event.getEventName().equals(""String_Node_Str"")) {
          DeckEditorPanel.this.deckArea.getSideboardList().handleDoubleClick();
        }
        refreshDeck();
      }
    }
);
  }
  this.deckArea.clearDeckEventListeners();
  this.deckArea.addDeckEventListener(new Listener<Event>(){
    @Override public void event(    Event event){
      if (event.getEventName().equals(""String_Node_Str"")) {
        SimpleCardView cardView=(SimpleCardView)event.getSource();
        for (        Card card : deck.getCards()) {
          if (card.getId().equals(cardView.getId())) {
            deck.getCards().remove(card);
            if (mode == DeckEditorMode.Limited || mode == DeckEditorMode.Sideboard) {
              deck.getSideboard().add(card);
              cardSelector.loadSideboard(new ArrayList<Card>(deck.getSideboard()),getBigCard());
            }
            break;
          }
        }
        hidePopup();
        refreshDeck();
      }
 else       if (event.getEventName().equals(""String_Node_Str"") && mode == DeckEditorMode.Constructed) {
        SimpleCardView cardView=(SimpleCardView)event.getSource();
        for (        Card card : deck.getCards()) {
          if (card.getId().equals(cardView.getId())) {
            deck.getCards().remove(card);
            deck.getSideboard().add(card);
            break;
          }
        }
        hidePopup();
        refreshDeck();
      }
    }
  }
);
  this.deckArea.addSideboardEventListener(new Listener<Event>(){
    @Override public void event(    Event event){
      if (event.getEventName().equals(""String_Node_Str"")) {
        SimpleCardView cardView=(SimpleCardView)event.getSource();
        for (        Card card : deck.getSideboard()) {
          if (card.getId().equals(cardView.getId())) {
            deck.getSideboard().remove(card);
            deck.getCards().add(card);
            break;
          }
        }
        hidePopup();
        refreshDeck();
      }
    }
  }
);
  refreshDeck();
  this.setVisible(true);
  this.repaint();
}",0.995498537024533
159684,"private void btnLoadActionPerformed(java.awt.event.ActionEvent evt){
  String lastFolder=MageFrame.getPreferences().get(""String_Node_Str"",""String_Node_Str"");
  if (!lastFolder.isEmpty())   fcSelectDeck.setCurrentDirectory(new File(lastFolder));
  int ret=fcSelectDeck.showOpenDialog(this);
  if (ret == JFileChooser.APPROVE_OPTION) {
    File file=fcSelectDeck.getSelectedFile();
    try {
      setCursor(new Cursor(Cursor.WAIT_CURSOR));
      deck=Deck.load(DeckImporterUtil.importDeck(file.getPath()),true);
    }
 catch (    GameException ex) {
      JOptionPane.showMessageDialog(MageFrame.getDesktop(),ex.getMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
catch (    Exception ex) {
      logger.fatal(ex);
    }
 finally {
      setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }
    refreshDeck();
    try {
      MageFrame.getPreferences().put(""String_Node_Str"",file.getCanonicalPath());
    }
 catch (    IOException ex) {
    }
  }
  fcSelectDeck.setSelectedFile(null);
}","private void btnLoadActionPerformed(java.awt.event.ActionEvent evt){
  String lastFolder=MageFrame.getPreferences().get(""String_Node_Str"",""String_Node_Str"");
  if (!lastFolder.isEmpty())   fcSelectDeck.setCurrentDirectory(new File(lastFolder));
  int ret=fcSelectDeck.showOpenDialog(this);
  if (ret == JFileChooser.APPROVE_OPTION) {
    File file=fcSelectDeck.getSelectedFile();
    try {
      setCursor(new Cursor(Cursor.WAIT_CURSOR));
      deck=Deck.load(DeckImporterUtil.importDeck(file.getPath()),true,true);
    }
 catch (    GameException ex) {
      JOptionPane.showMessageDialog(MageFrame.getDesktop(),ex.getMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
catch (    Exception ex) {
      logger.fatal(ex);
    }
 finally {
      setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }
    refreshDeck();
    try {
      MageFrame.getPreferences().put(""String_Node_Str"",file.getCanonicalPath());
    }
 catch (    IOException ex) {
    }
  }
  fcSelectDeck.setSelectedFile(null);
}",0.9974987493746872
159685,"@Override public void adjustCosts(Ability ability,Game game){
  int count=game.getBattlefield().getAllActivePermanents(filter,ability.getControllerId(),game).size();
  if (count > 0) {
    CardUtil.adjustCost((SpellAbility)ability,count);
  }
}","@Override public void adjustCosts(Ability ability,Game game){
  if (ability instanceof SpellAbility) {
    int count=game.getBattlefield().getAllActivePermanents(filter,ability.getControllerId(),game).size();
    if (count > 0) {
      CardUtil.adjustCost((SpellAbility)ability,count);
    }
  }
}",0.3179297597042514
159686,"@Override public boolean askToActivateAlternativeCosts(Ability ability,Game game){
  if (ability instanceof SpellAbility) {
    Player player=game.getPlayer(controllerId);
    ProwlWatcher prowlWatcher=(ProwlWatcher)game.getState().getWatchers().get(""String_Node_Str"");
    Card card=game.getCard(ability.getSourceId());
    if (player == null || prowlWatcher == null || card == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    boolean canProwl=false;
    if (prowlWatcher.getDamagingSubtypes(ability.getControllerId()) != null) {
      for (      String subtype : prowlWatcher.getDamagingSubtypes(ability.getControllerId())) {
        if (card.getSubtype().contains(subtype)) {
          canProwl=true;
          break;
        }
      }
    }
    if (canProwl) {
      this.resetProwl();
      for (      AlternativeCost2 prowlCost : prowlCosts) {
        if (prowlCost.canPay(sourceId,controllerId,game) && player.chooseUse(Outcome.Benefit,new StringBuilder(""String_Node_Str"").append(PROWL_KEYWORD).append(""String_Node_Str"").append(prowlCost.getText(true)).append(""String_Node_Str"").toString(),game)) {
          prowlCost.activate();
          ability.getManaCostsToPay().clear();
          ability.getCosts().clear();
          for (Iterator it=((Costs)prowlCost).iterator(); it.hasNext(); ) {
            Cost cost=(Cost)it.next();
            if (cost instanceof ManaCostsImpl) {
              ability.getManaCostsToPay().add((ManaCostsImpl)cost.copy());
            }
 else {
              ability.getCosts().add(cost.copy());
            }
          }
        }
      }
    }
  }
  return isActivated();
}","@Override public boolean askToActivateAlternativeCosts(Ability ability,Game game){
  if (ability instanceof SpellAbility) {
    Player player=game.getPlayer(controllerId);
    ProwlWatcher prowlWatcher=(ProwlWatcher)game.getState().getWatchers().get(""String_Node_Str"");
    Card card=game.getCard(ability.getSourceId());
    if (player == null || prowlWatcher == null || card == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    boolean canProwl=false;
    for (    String subtype : card.getSubtype()) {
      if (prowlWatcher.hasSubtypeMadeCombatDamage(ability.getControllerId(),subtype)) {
        canProwl=true;
        break;
      }
    }
    if (canProwl) {
      this.resetProwl();
      for (      AlternativeCost2 prowlCost : prowlCosts) {
        if (prowlCost.canPay(sourceId,controllerId,game) && player.chooseUse(Outcome.Benefit,new StringBuilder(""String_Node_Str"").append(PROWL_KEYWORD).append(""String_Node_Str"").append(prowlCost.getText(true)).append(""String_Node_Str"").toString(),game)) {
          prowlCost.activate();
          ability.getManaCostsToPay().clear();
          ability.getCosts().clear();
          for (Iterator it=((Costs)prowlCost).iterator(); it.hasNext(); ) {
            Cost cost=(Cost)it.next();
            if (cost instanceof ManaCostsImpl) {
              ability.getManaCostsToPay().add((ManaCostsImpl)cost.copy());
            }
 else {
              ability.getCosts().add(cost.copy());
            }
          }
        }
      }
    }
  }
  return isActivated();
}",0.8876333961079724
159687,"@Override public void watch(GameEvent event,Game game){
  if (event.getType() == EventType.DAMAGED_PLAYER) {
    DamagedPlayerEvent dEvent=(DamagedPlayerEvent)event;
    if (dEvent.isCombatDamage()) {
      Permanent creature=game.getPermanent(dEvent.getSourceId());
      if (creature != null) {
        Set<String> subtypes=damagingSubtypes.get(creature.getControllerId());
        if (subtypes == null) {
          subtypes=new LinkedHashSet<String>();
        }
        subtypes.addAll(creature.getSubtype());
        damagingSubtypes.put(creature.getControllerId(),subtypes);
      }
    }
  }
}","@Override public void watch(GameEvent event,Game game){
  if (event.getType() == EventType.DAMAGED_PLAYER) {
    DamagedPlayerEvent dEvent=(DamagedPlayerEvent)event;
    if (dEvent.isCombatDamage()) {
      Permanent creature=game.getPermanent(dEvent.getSourceId());
      if (creature != null && !allSubtypes.contains(creature.getControllerId())) {
        if (creature.getAbilities().containsKey(ChangelingAbility.getInstance().getId())) {
          allSubtypes.add(creature.getControllerId());
        }
 else {
          Set<String> subtypes=damagingSubtypes.get(creature.getControllerId());
          if (subtypes == null) {
            subtypes=new LinkedHashSet<String>();
          }
          subtypes.addAll(creature.getSubtype());
          damagingSubtypes.put(creature.getControllerId(),subtypes);
        }
      }
    }
  }
}",0.8333333333333334
159688,"@Override public void reset(){
  super.reset();
  damagingSubtypes.clear();
}","@Override public void reset(){
  super.reset();
  damagingSubtypes.clear();
  allSubtypes.clear();
}",0.8700564971751412
159689,"/** 
 * Checks all available splice effects to be applied.
 * @param abilityToModify
 * @param game
 * @return
 */
public void applySpliceEffects(Ability abilityToModify,Game game){
  if (((SpellAbility)abilityToModify).getSpellAbilityType().equals(SpellAbilityType.SPLICE)) {
    return;
  }
  List<SpliceCardEffect> spliceEffects=getApplicableSpliceCardEffects(game);
  List<SpliceOntoArcaneAbility> spliceAbilities=new ArrayList<SpliceOntoArcaneAbility>();
  for (  SpliceCardEffect effect : spliceEffects) {
    HashSet<Ability> abilities=spliceCardEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      if (effect.applies(abilityToModify,ability,game)) {
        spliceAbilities.add((SpliceOntoArcaneAbility)ability);
      }
    }
  }
  if (spliceAbilities.size() > 0) {
    Player controller=game.getPlayer(abilityToModify.getControllerId());
    if (controller.chooseUse(Outcome.Benefit,""String_Node_Str"",game)) {
      Cards cardsToReveal=new CardsImpl();
      do {
        FilterCard filter=new FilterCard(""String_Node_Str"");
        ArrayList<Predicate<MageObject>> idPredicates=new ArrayList<Predicate<MageObject>>();
        for (        SpliceOntoArcaneAbility ability : spliceAbilities) {
          idPredicates.add(new CardIdPredicate((ability.getSourceId())));
        }
        filter.add(Predicates.or(idPredicates));
        TargetCardInHand target=new TargetCardInHand(filter);
        target.setRequired(true);
        controller.chooseTarget(Outcome.Benefit,target,abilityToModify,game);
        UUID cardId=target.getFirstTarget();
        if (cardId != null) {
          SpliceOntoArcaneAbility selectedAbility=null;
          for (          SpliceOntoArcaneAbility ability : spliceAbilities) {
            if (ability.getSourceId().equals(cardId)) {
              selectedAbility=ability;
              break;
            }
          }
          if (selectedAbility != null) {
            SpliceCardEffect spliceEffect=(SpliceCardEffect)selectedAbility.getEffects().get(0);
            spliceEffect.apply(game,selectedAbility,abilityToModify);
            cardsToReveal.add(game.getCard(cardId));
            spliceAbilities.remove(selectedAbility);
          }
        }
      }
 while (!spliceAbilities.isEmpty() && controller.chooseUse(Outcome.Benefit,""String_Node_Str"",game));
      controller.revealCards(""String_Node_Str"",cardsToReveal,game);
    }
  }
}","/** 
 * Checks all available splice effects to be applied.
 * @param abilityToModify
 * @param game
 * @return
 */
public void applySpliceEffects(Ability abilityToModify,Game game){
  if (((SpellAbility)abilityToModify).getSpellAbilityType().equals(SpellAbilityType.SPLICE)) {
    return;
  }
  List<SpliceCardEffect> spliceEffects=getApplicableSpliceCardEffects(game,abilityToModify.getControllerId());
  List<SpliceOntoArcaneAbility> spliceAbilities=new ArrayList<SpliceOntoArcaneAbility>();
  for (  SpliceCardEffect effect : spliceEffects) {
    HashSet<Ability> abilities=spliceCardEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      if (effect.applies(abilityToModify,ability,game)) {
        spliceAbilities.add((SpliceOntoArcaneAbility)ability);
      }
    }
  }
  if (spliceAbilities.size() > 0) {
    Player controller=game.getPlayer(abilityToModify.getControllerId());
    if (controller.chooseUse(Outcome.Benefit,""String_Node_Str"",game)) {
      Cards cardsToReveal=new CardsImpl();
      do {
        FilterCard filter=new FilterCard(""String_Node_Str"");
        ArrayList<Predicate<MageObject>> idPredicates=new ArrayList<Predicate<MageObject>>();
        for (        SpliceOntoArcaneAbility ability : spliceAbilities) {
          idPredicates.add(new CardIdPredicate((ability.getSourceId())));
        }
        filter.add(Predicates.or(idPredicates));
        TargetCardInHand target=new TargetCardInHand(filter);
        target.setRequired(true);
        controller.chooseTarget(Outcome.Benefit,target,abilityToModify,game);
        UUID cardId=target.getFirstTarget();
        if (cardId != null) {
          SpliceOntoArcaneAbility selectedAbility=null;
          for (          SpliceOntoArcaneAbility ability : spliceAbilities) {
            if (ability.getSourceId().equals(cardId)) {
              selectedAbility=ability;
              break;
            }
          }
          if (selectedAbility != null) {
            SpliceCardEffect spliceEffect=(SpliceCardEffect)selectedAbility.getEffects().get(0);
            spliceEffect.apply(game,selectedAbility,abilityToModify);
            cardsToReveal.add(game.getCard(cardId));
            spliceAbilities.remove(selectedAbility);
          }
        }
      }
 while (!spliceAbilities.isEmpty() && controller.chooseUse(Outcome.Benefit,""String_Node_Str"",game));
      controller.revealCards(""String_Node_Str"",cardsToReveal,game);
    }
  }
}",0.9930184804928132
159690,"/** 
 * Filters out splice effects that are not active.
 * @param game
 * @return
 */
private List<SpliceCardEffect> getApplicableSpliceCardEffects(Game game){
  List<SpliceCardEffect> spliceEffects=new ArrayList<SpliceCardEffect>();
  for (  SpliceCardEffect effect : spliceCardEffects) {
    HashSet<Ability> abilities=spliceCardEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false)) {
        if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
          spliceEffects.add(effect);
          break;
        }
      }
    }
  }
  return spliceEffects;
}","/** 
 * Filters out splice effects that are not active.
 * @param game
 * @return
 */
private List<SpliceCardEffect> getApplicableSpliceCardEffects(Game game,UUID playerId){
  List<SpliceCardEffect> spliceEffects=new ArrayList<SpliceCardEffect>();
  for (  SpliceCardEffect effect : spliceCardEffects) {
    HashSet<Ability> abilities=spliceCardEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      if (ability.getControllerId().equals(playerId) && (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,null,false))) {
        if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {
          spliceEffects.add(effect);
          break;
        }
      }
    }
  }
  return spliceEffects;
}",0.9567642956764296
159691,"@Override public boolean apply(Game game,Ability source){
  Player you=game.getPlayer(source.getControllerId());
  FilterCard filter=new FilterCard(""String_Node_Str"");
  filter.add(new CardTypePredicate(CardType.ARTIFACT));
  if (you != null && you.getHand().count(filter,game) > 0 && you.chooseUse(Outcome.Discard,""String_Node_Str"",game)) {
    Cost cost=new DiscardTargetCost(new TargetCardInHand(filter));
    if (cost.canPay(you.getId(),you.getId(),game)) {
      if (!cost.pay(source,game,you.getId(),you.getId(),false)) {
        you.discard(2,source,game);
      }
      return true;
    }
  }
  if (you != null && you.getHand().count(filter,game) == 0) {
    you.discard(2,source,game);
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player you=game.getPlayer(source.getControllerId());
  FilterCard filter=new FilterCard(""String_Node_Str"");
  filter.add(new CardTypePredicate(CardType.ARTIFACT));
  if (you != null && you.getHand().count(filter,game) > 0 && you.chooseUse(Outcome.Discard,""String_Node_Str"",game)) {
    Cost cost=new DiscardTargetCost(new TargetCardInHand(filter));
    if (cost.canPay(source.getSourceId(),you.getId(),game)) {
      if (cost.pay(source,game,source.getSourceId(),you.getId(),false)) {
        return true;
      }
    }
  }
  if (you != null) {
    you.discard(2,source,game);
    return true;
  }
  return false;
}",0.884255930984903
159692,"private static ArrayList<CardDownloadData> getNeededCards(List<CardInfo> allCards,String imagesPath){
  ArrayList<CardDownloadData> cardsToDownload=new ArrayList<CardDownloadData>();
  ArrayList<CardDownloadData> allCardsUrls=new ArrayList<CardDownloadData>();
  HashSet<String> ignoreUrls=SettingsManager.getIntance().getIgnoreUrls();
  try {
    offlineMode=true;
    for (    CardInfo card : allCards) {
      if (card.getCardNumber() > 0 && !card.getSetCode().isEmpty() && !ignoreUrls.contains(card.getSetCode())) {
        String cardName=card.getName();
        CardDownloadData url=new CardDownloadData(cardName,card.getSetCode(),card.getCardNumber(),usesVariousArt(card),0,false,card.isDoubleFaced(),card.isNightCard());
        if (url.getUsesVariousArt()) {
          url.setDownloadName(createDownloadName(card));
        }
        url.setFlipCard(card.isFlipCard());
        url.setSplitCard(card.isSplitCard());
        allCardsUrls.add(url);
        if (card.isFlipCard()) {
          if (card.getFlipCardName() == null || card.getFlipCardName().trim().isEmpty()) {
            throw new IllegalStateException(""String_Node_Str"");
          }
          url=new CardDownloadData(card.getFlipCardName(),card.getSetCode(),card.getCardNumber(),usesVariousArt(card),0,false,card.isDoubleFaced(),card.isNightCard());
          url.setFlipCard(true);
          url.setFlippedSide(true);
          allCardsUrls.add(url);
        }
      }
 else {
        if (card.getCardNumber() < 1) {
          System.err.println(""String_Node_Str"");
          log.error(""String_Node_Str"" + card);
        }
 else         if (card.getSetCode().isEmpty()) {
          System.err.println(""String_Node_Str"");
          log.error(""String_Node_Str"" + card);
        }
      }
    }
    allCardsUrls.addAll(getTokenCardUrls());
  }
 catch (  Exception e) {
    log.error(e);
  }
  TFile file;
  for (  CardDownloadData card : allCardsUrls) {
    file=new TFile(CardImageUtils.getImagePath(card,imagesPath));
    if (!file.exists()) {
      cardsToDownload.add(card);
    }
  }
  for (  CardDownloadData card : cardsToDownload) {
    if (card.isToken()) {
      log.info(""String_Node_Str"" + card.getName() + ""String_Node_Str"");
    }
 else {
      try {
        log.info(""String_Node_Str"" + card.getName() + ""String_Node_Str""+ card.getSet()+ ""String_Node_Str"");
      }
 catch (      Exception e) {
        log.error(e);
      }
    }
  }
  return cardsToDownload;
}","private static ArrayList<CardDownloadData> getNeededCards(List<CardInfo> allCards,String imagesPath){
  ArrayList<CardDownloadData> cardsToDownload=new ArrayList<CardDownloadData>();
  ArrayList<CardDownloadData> allCardsUrls=new ArrayList<CardDownloadData>();
  HashSet<String> ignoreUrls=SettingsManager.getIntance().getIgnoreUrls();
  try {
    offlineMode=true;
    for (    CardInfo card : allCards) {
      if (card.getCardNumber() > 0 && !card.getSetCode().isEmpty() && !ignoreUrls.contains(card.getSetCode())) {
        String cardName=card.getName();
        CardDownloadData url=new CardDownloadData(cardName,card.getSetCode(),card.getCardNumber(),usesVariousArt(card),0,false,card.isDoubleFaced(),card.isNightCard());
        if (url.getUsesVariousArt()) {
          url.setDownloadName(createDownloadName(card));
        }
        url.setFlipCard(card.isFlipCard());
        url.setSplitCard(card.isSplitCard());
        allCardsUrls.add(url);
        if (card.isDoubleFaced()) {
          if (card.getSecondSideName() == null || card.getSecondSideName().trim().isEmpty()) {
            throw new IllegalStateException(""String_Node_Str"");
          }
          url=new CardDownloadData(card.getSecondSideName(),card.getSetCode(),card.getCardNumber(),usesVariousArt(card),0,false,card.isDoubleFaced(),true);
          allCardsUrls.add(url);
        }
        if (card.isFlipCard()) {
          if (card.getFlipCardName() == null || card.getFlipCardName().trim().isEmpty()) {
            throw new IllegalStateException(""String_Node_Str"");
          }
          url=new CardDownloadData(card.getFlipCardName(),card.getSetCode(),card.getCardNumber(),usesVariousArt(card),0,false,card.isDoubleFaced(),card.isNightCard());
          url.setFlipCard(true);
          url.setFlippedSide(true);
          allCardsUrls.add(url);
        }
      }
 else {
        if (card.getCardNumber() < 1) {
          System.err.println(""String_Node_Str"");
          log.error(""String_Node_Str"" + card);
        }
 else         if (card.getSetCode().isEmpty()) {
          System.err.println(""String_Node_Str"");
          log.error(""String_Node_Str"" + card);
        }
      }
    }
    allCardsUrls.addAll(getTokenCardUrls());
  }
 catch (  Exception e) {
    log.error(e);
  }
  TFile file;
  for (  CardDownloadData card : allCardsUrls) {
    file=new TFile(CardImageUtils.getImagePath(card,imagesPath));
    if (!file.exists()) {
      cardsToDownload.add(card);
    }
  }
  for (  CardDownloadData card : cardsToDownload) {
    if (card.isToken()) {
      log.info(""String_Node_Str"" + card.getName() + ""String_Node_Str"");
    }
 else {
      try {
        log.info(""String_Node_Str"" + card.getName() + ""String_Node_Str""+ card.getSet()+ ""String_Node_Str"");
      }
 catch (      Exception e) {
        log.error(e);
      }
    }
  }
  return cardsToDownload;
}",0.9121417797888386
159693,"public void buildQuery(QueryBuilder qb) throws SQLException {
  Where where=qb.where();
  int clausesCount=0;
  if (name != null) {
    where.like(""String_Node_Str"",new SelectArg('%' + name + '%'));
    clausesCount++;
  }
  if (rules != null) {
    where.like(""String_Node_Str"",new SelectArg('%' + rules + '%'));
    clausesCount++;
  }
  if (doubleFaced != null) {
    where.eq(""String_Node_Str"",doubleFaced);
    clausesCount++;
  }
  for (  Rarity rarity : rarities) {
    where.eq(""String_Node_Str"",rarity);
  }
  if (!rarities.isEmpty()) {
    where.or(rarities.size());
    clausesCount++;
  }
  for (  String setCode : setCodes) {
    where.eq(""String_Node_Str"",setCode);
  }
  if (!setCodes.isEmpty()) {
    where.or(setCodes.size());
    clausesCount++;
  }
  for (  CardType type : types) {
    where.like(""String_Node_Str"",new SelectArg('%' + type.name() + '%'));
  }
  if (!types.isEmpty()) {
    where.or(types.size());
    clausesCount++;
  }
  for (  CardType type : notTypes) {
    where.not().like(""String_Node_Str"",new SelectArg('%' + type.name() + '%'));
    clausesCount++;
  }
  for (  String superType : supertypes) {
    where.like(""String_Node_Str"",new SelectArg('%' + superType + '%'));
    clausesCount++;
  }
  for (  String subType : notSupertypes) {
    where.not().like(""String_Node_Str"",new SelectArg('%' + subType + '%'));
    clausesCount++;
  }
  for (  String subType : subtypes) {
    where.like(""String_Node_Str"",new SelectArg('%' + subType + '%'));
    clausesCount++;
  }
  if (!black || !blue || !green|| !red|| !white|| !colorless) {
    int colorClauses=0;
    if (black) {
      where.eq(""String_Node_Str"",true);
      colorClauses++;
    }
    if (blue) {
      where.eq(""String_Node_Str"",true);
      colorClauses++;
    }
    if (green) {
      where.eq(""String_Node_Str"",true);
      colorClauses++;
    }
    if (red) {
      where.eq(""String_Node_Str"",true);
      colorClauses++;
    }
    if (white) {
      where.eq(""String_Node_Str"",true);
      colorClauses++;
    }
    if (colorless) {
      where.eq(""String_Node_Str"",false).eq(""String_Node_Str"",false).eq(""String_Node_Str"",false).eq(""String_Node_Str"",false).eq(""String_Node_Str"",false);
      where.and(5);
      colorClauses++;
    }
    if (colorClauses > 0) {
      where.or(colorClauses);
      clausesCount++;
    }
  }
  if (clausesCount > 0) {
    where.and(clausesCount);
  }
 else {
    where.eq(""String_Node_Str"",new SelectArg(0));
  }
  if (start != null) {
    qb.offset(start);
  }
  if (count != null) {
    qb.limit(count);
  }
  qb.orderBy(""String_Node_Str"",true);
}","public void buildQuery(QueryBuilder qb) throws SQLException {
  Where where=qb.where();
  where.eq(""String_Node_Str"",false);
  int clausesCount=1;
  if (name != null) {
    where.like(""String_Node_Str"",new SelectArg('%' + name + '%'));
    clausesCount++;
  }
  if (rules != null) {
    where.like(""String_Node_Str"",new SelectArg('%' + rules + '%'));
    clausesCount++;
  }
  if (doubleFaced != null) {
    where.eq(""String_Node_Str"",doubleFaced);
    clausesCount++;
  }
  for (  Rarity rarity : rarities) {
    where.eq(""String_Node_Str"",rarity);
  }
  if (!rarities.isEmpty()) {
    where.or(rarities.size());
    clausesCount++;
  }
  for (  String setCode : setCodes) {
    where.eq(""String_Node_Str"",setCode);
  }
  if (!setCodes.isEmpty()) {
    where.or(setCodes.size());
    clausesCount++;
  }
  for (  CardType type : types) {
    where.like(""String_Node_Str"",new SelectArg('%' + type.name() + '%'));
  }
  if (!types.isEmpty()) {
    where.or(types.size());
    clausesCount++;
  }
  for (  CardType type : notTypes) {
    where.not().like(""String_Node_Str"",new SelectArg('%' + type.name() + '%'));
    clausesCount++;
  }
  for (  String superType : supertypes) {
    where.like(""String_Node_Str"",new SelectArg('%' + superType + '%'));
    clausesCount++;
  }
  for (  String subType : notSupertypes) {
    where.not().like(""String_Node_Str"",new SelectArg('%' + subType + '%'));
    clausesCount++;
  }
  for (  String subType : subtypes) {
    where.like(""String_Node_Str"",new SelectArg('%' + subType + '%'));
    clausesCount++;
  }
  if (!black || !blue || !green|| !red|| !white|| !colorless) {
    int colorClauses=0;
    if (black) {
      where.eq(""String_Node_Str"",true);
      colorClauses++;
    }
    if (blue) {
      where.eq(""String_Node_Str"",true);
      colorClauses++;
    }
    if (green) {
      where.eq(""String_Node_Str"",true);
      colorClauses++;
    }
    if (red) {
      where.eq(""String_Node_Str"",true);
      colorClauses++;
    }
    if (white) {
      where.eq(""String_Node_Str"",true);
      colorClauses++;
    }
    if (colorless) {
      where.eq(""String_Node_Str"",false).eq(""String_Node_Str"",false).eq(""String_Node_Str"",false).eq(""String_Node_Str"",false).eq(""String_Node_Str"",false);
      where.and(5);
      colorClauses++;
    }
    if (colorClauses > 0) {
      where.or(colorClauses);
      clausesCount++;
    }
  }
  if (clausesCount > 0) {
    where.and(clausesCount);
  }
 else {
    where.eq(""String_Node_Str"",new SelectArg(0));
  }
  if (start != null) {
    qb.offset(start);
  }
  if (count != null) {
    qb.limit(count);
  }
  qb.orderBy(""String_Node_Str"",true);
}",0.060164782525388
159694,"public CardInfo(Card card){
  this.name=card.getName();
  this.cardNumber=card.getCardNumber();
  this.setCode=card.getExpansionSetCode();
  this.className=card.getClass().getCanonicalName();
  this.power=card.getPower().toString();
  this.toughness=card.getToughness().toString();
  this.convertedManaCost=card.getManaCost().convertedManaCost();
  this.rarity=card.getRarity();
  this.splitCard=card.isSplitCard();
  this.flipCard=card.isFlipCard();
  this.flipCardName=card.getFlipCardName();
  this.doubleFaced=card.canTransform();
  this.nightCard=card.isNightCard();
  Card secondSide=card.getSecondCardFace();
  if (secondSide != null) {
    this.secondSideName=secondSide.getName();
  }
  this.blue=card.getColor().isBlue();
  this.black=card.getColor().isBlack();
  this.green=card.getColor().isGreen();
  this.red=card.getColor().isRed();
  this.white=card.getColor().isWhite();
  this.setTypes(card.getCardType());
  this.setSubtypes(card.getSubtype());
  this.setSuperTypes(card.getSupertype());
  this.setManaCosts(card.getManaCost().getSymbols());
  this.setRules(card.getRules());
}","public CardInfo(Card card){
  this.name=card.getName();
  this.cardNumber=card.getCardNumber();
  this.setCode=card.getExpansionSetCode();
  this.className=card.getClass().getCanonicalName();
  this.power=card.getPower().toString();
  this.toughness=card.getToughness().toString();
  this.convertedManaCost=card.getManaCost().convertedManaCost();
  this.rarity=card.getRarity();
  this.splitCard=card.isSplitCard();
  this.flipCard=card.isFlipCard();
  this.flipCardName=card.getFlipCardName();
  this.doubleFaced=card.canTransform() && card.getSecondCardFace() != null;
  this.nightCard=card.isNightCard();
  Card secondSide=card.getSecondCardFace();
  if (secondSide != null) {
    this.secondSideName=secondSide.getName();
  }
  this.blue=card.getColor().isBlue();
  this.black=card.getColor().isBlack();
  this.green=card.getColor().isGreen();
  this.red=card.getColor().isRed();
  this.white=card.getColor().isWhite();
  this.setTypes(card.getCardType());
  this.setSubtypes(card.getSubtype());
  this.setSuperTypes(card.getSupertype());
  this.setManaCosts(card.getManaCost().getSymbols());
  this.setRules(card.getRules());
}",0.9838420107719928
159695,"@Override public void addOptionalAdditionalCosts(Ability ability,Game game){
  if (ability instanceof SpellAbility) {
    Player player=game.getPlayer(controllerId);
    if (player != null) {
      this.resetKicker();
      for (      OptionalAdditionalCost kickerCost : kickerCosts) {
        boolean again=true;
        while (again) {
          String times=""String_Node_Str"";
          if (kickerCost.isRepeatable()) {
            int activated=kickerCost.getActivateCount();
            times=Integer.toString(activated + 1) + (activated == 0 ? ""String_Node_Str"" : ""String_Node_Str"");
          }
          if (kickerCost.canPay(sourceId,controllerId,game) && player.chooseUse(Outcome.Benefit,new StringBuilder(""String_Node_Str"").append(times).append(kickerCost.getText(false)).append(""String_Node_Str"").toString(),game)) {
            kickerCost.activate();
            for (Iterator it=((Costs)kickerCost).iterator(); it.hasNext(); ) {
              Cost cost=(Cost)it.next();
              if (cost instanceof ManaCostsImpl) {
                List<VariableManaCost> varCosts=((ManaCostsImpl)cost).getVariableCosts();
                if (varCosts != null) {
                  xManaValue=game.getPlayer(this.controllerId).announceXMana(varCosts.get(0).getMinX(),Integer.MAX_VALUE,""String_Node_Str"" + varCosts.get(0).getText(),game,this);
                  game.informPlayers(new StringBuilder(game.getPlayer(this.controllerId).getName()).append(""String_Node_Str"").append(xManaValue).append(""String_Node_Str"").append(""String_Node_Str"").toString());
                  ability.getManaCostsToPay().add(new GenericManaCost(xManaValue));
                }
 else {
                  ability.getManaCostsToPay().add((ManaCostsImpl)cost.copy());
                }
              }
 else {
                ability.getCosts().add(cost.copy());
              }
            }
            again=kickerCost.isRepeatable();
          }
 else {
            again=false;
          }
        }
      }
    }
  }
}","@Override public void addOptionalAdditionalCosts(Ability ability,Game game){
  if (ability instanceof SpellAbility) {
    Player player=game.getPlayer(controllerId);
    if (player != null) {
      this.resetKicker();
      for (      OptionalAdditionalCost kickerCost : kickerCosts) {
        boolean again=true;
        while (again) {
          String times=""String_Node_Str"";
          if (kickerCost.isRepeatable()) {
            int activated=kickerCost.getActivateCount();
            times=Integer.toString(activated + 1) + (activated == 0 ? ""String_Node_Str"" : ""String_Node_Str"");
          }
          if (kickerCost.canPay(sourceId,controllerId,game) && player.chooseUse(Outcome.Benefit,new StringBuilder(""String_Node_Str"").append(times).append(kickerCost.getText(false)).append(""String_Node_Str"").toString(),game)) {
            kickerCost.activate();
            for (Iterator it=((Costs)kickerCost).iterator(); it.hasNext(); ) {
              Cost cost=(Cost)it.next();
              if (cost instanceof ManaCostsImpl) {
                List<VariableManaCost> varCosts=((ManaCostsImpl)cost).getVariableCosts();
                if (!varCosts.isEmpty()) {
                  xManaValue=game.getPlayer(this.controllerId).announceXMana(varCosts.get(0).getMinX(),Integer.MAX_VALUE,""String_Node_Str"" + varCosts.get(0).getText(),game,this);
                  game.informPlayers(new StringBuilder(game.getPlayer(this.controllerId).getName()).append(""String_Node_Str"").append(xManaValue).append(""String_Node_Str"").append(""String_Node_Str"").toString());
                  ability.getManaCostsToPay().add(new GenericManaCost(xManaValue));
                }
 else {
                  ability.getManaCostsToPay().add((ManaCostsImpl)cost.copy());
                }
              }
 else {
                ability.getCosts().add(cost.copy());
              }
            }
            again=kickerCost.isRepeatable();
          }
 else {
            again=false;
          }
        }
      }
    }
  }
}",0.9952511872031992
159696,"@Override public boolean apply(Game game,Ability source){
switch (controller) {
case ANY:
    for (    UUID playerId : game.getPlayer(source.getControllerId()).getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        player.damage(amount.calculate(game,source),source.getId(),game,false,true);
      }
    }
  break;
case OPPONENT:
for (UUID playerId : game.getOpponents(source.getControllerId())) {
  Player player=game.getPlayer(playerId);
  if (player != null) {
    player.damage(amount.calculate(game,source),source.getId(),game,false,true);
  }
}
break;
default :
throw new UnsupportedOperationException(""String_Node_Str"");
}
return true;
}","@Override public boolean apply(Game game,Ability source){
switch (controller) {
case ANY:
    for (    UUID playerId : game.getPlayer(source.getControllerId()).getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        player.damage(amount.calculate(game,source),source.getSourceId(),game,false,true);
      }
    }
  break;
case OPPONENT:
for (UUID playerId : game.getOpponents(source.getControllerId())) {
  Player player=game.getPlayer(playerId);
  if (player != null) {
    player.damage(amount.calculate(game,source),source.getSourceId(),game,false,true);
  }
}
break;
default :
throw new UnsupportedOperationException(""String_Node_Str"");
}
return true;
}",0.9913419913419912
159697,"@Override public boolean apply(Game game,Ability source){
  Player targetPlayer=game.getPlayer(source.getFirstTarget());
  if (targetPlayer == null) {
    return false;
  }
  Player you=game.getPlayer(source.getControllerId());
  FilterControlledPermanent filter=new FilterControlledPermanent();
  filter.add(new SubtypePredicate(""String_Node_Str""));
  int numberOfAllies=game.getBattlefield().countAll(filter,you.getId(),game);
  Cards cardsInHand=new CardsImpl(Zone.PICK);
  cardsInHand.addAll(targetPlayer.getHand());
  int count=Math.min(cardsInHand.size(),numberOfAllies);
  TargetCard target=new TargetCard(count,Zone.PICK,new FilterCard());
  target.setRequired(true);
  Cards revealedCards=new CardsImpl();
  if (targetPlayer.choose(Outcome.DrawCard,cardsInHand,target,game)) {
    List<UUID> targets=target.getTargets();
    for (    UUID targetId : targets) {
      Card card=game.getCard(targetId);
      if (card != null) {
        revealedCards.add(card);
      }
    }
  }
  TargetCard targetInHand=new TargetCard(Zone.PICK,new FilterCard(""String_Node_Str""));
  targetInHand.setRequired(true);
  if (!revealedCards.isEmpty()) {
    targetPlayer.revealCards(""String_Node_Str"",revealedCards,game);
    you.choose(Outcome.Neutral,revealedCards,targetInHand,game);
    Card card=revealedCards.get(targetInHand.getFirstTarget(),game);
    if (card != null) {
      targetPlayer.discard(card,source,game);
      game.informPlayers(targetPlayer + ""String_Node_Str"" + card.getName());
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player targetPlayer=game.getPlayer(source.getFirstTarget());
  if (targetPlayer == null) {
    return false;
  }
  Player you=game.getPlayer(source.getControllerId());
  FilterControlledPermanent filter=new FilterControlledPermanent();
  filter.add(new SubtypePredicate(""String_Node_Str""));
  int numberOfAllies=game.getBattlefield().countAll(filter,you.getId(),game);
  Cards cardsInHand=new CardsImpl(Zone.PICK);
  cardsInHand.addAll(targetPlayer.getHand());
  int count=Math.min(cardsInHand.size(),numberOfAllies);
  TargetCard target=new TargetCard(count,Zone.PICK,new FilterCard());
  target.setRequired(true);
  Cards revealedCards=new CardsImpl();
  if (targetPlayer.choose(Outcome.DrawCard,cardsInHand,target,game)) {
    List<UUID> targets=target.getTargets();
    for (    UUID targetId : targets) {
      Card card=game.getCard(targetId);
      if (card != null) {
        revealedCards.add(card);
      }
    }
  }
  TargetCard targetInHand=new TargetCard(Zone.PICK,new FilterCard(""String_Node_Str""));
  targetInHand.setRequired(true);
  if (!revealedCards.isEmpty()) {
    targetPlayer.revealCards(""String_Node_Str"",revealedCards,game);
    you.choose(Outcome.Neutral,revealedCards,targetInHand,game);
    Card card=revealedCards.get(targetInHand.getFirstTarget(),game);
    if (card != null) {
      targetPlayer.discard(card,source,game);
      game.informPlayers(new StringBuilder(""String_Node_Str"").append(targetPlayer.getName()).append(""String_Node_Str"").append(card.getName()).toString());
    }
  }
  return true;
}",0.9607969151670952
159698,"@Override public boolean apply(Game game,Ability source){
  UUID targetId=source.getFirstTarget();
  if (targetId != null) {
    game.getState().getTurnMods().add(new TurnMod(targetId,TurnPhase.COMBAT,null,true));
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(getTargetPointer().getFirst(game,source));
  if (player != null) {
    game.getState().getTurnMods().add(new TurnMod(player.getId(),TurnPhase.COMBAT,null,true));
    return true;
  }
  return false;
}",0.7837338262476895
159699,"public SkipNextCombatEffect(SkipNextCombatEffect effect){
  super(effect);
}","public SkipNextCombatEffect(final SkipNextCombatEffect effect){
  super(effect);
}",0.9620253164556962
159700,"@Override public SkipNextCombatEffect copy(){
  return new SkipNextCombatEffect();
}","@Override public SkipNextCombatEffect copy(){
  return new SkipNextCombatEffect(this);
}",0.9767441860465116
159701,"@Override public String getDescription(){
  if (extend.equals(""String_Node_Str"") || extend.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (extend.equals(""String_Node_Str"") || extend.equals(""String_Node_Str""))   return ""String_Node_Str"";
  return ""String_Node_Str"";
}","@Override public String getDescription(){
  if (extend.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (extend.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (extend.equals(""String_Node_Str"") || extend.equals(""String_Node_Str""))   return ""String_Node_Str"";
  return ""String_Node_Str"";
}",0.5932203389830508
159702,"private BufferedImage loadbuffer_selected() throws IOException {
  BufferedImage res;
  String path=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_BATTLEFIELD_IMAGE,""String_Node_Str"");
  if (path != null) {
    res=ImageIO.read(new File(path));
    return res;
  }
  return null;
}","private BufferedImage loadbuffer_selected() throws IOException {
  BufferedImage res;
  String path=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_BATTLEFIELD_IMAGE,""String_Node_Str"");
  if (path != null && !path.equals(""String_Node_Str"")) {
    try {
      res=ImageIO.read(new File(path));
      return res;
    }
 catch (    Exception e) {
      res=null;
    }
  }
  return null;
}",0.7712609970674487
159703,"public void applyInGame(Map<String,JComponent> ui){
  BufferedImage background;
  try {
    if (PreferencesDialog.getCachedValue(PreferencesDialog.KEY_BATTLEFIELD_IMAGE_DEFAULT,""String_Node_Str"").equals(""String_Node_Str"")) {
      background=loadbuffer_default();
    }
 else     if (PreferencesDialog.getCachedValue(PreferencesDialog.KEY_BATTLEFIELD_IMAGE_RANDOM,""String_Node_Str"").equals(""String_Node_Str"")) {
      background=loadbuffer_random();
    }
 else     if (PreferencesDialog.getCachedValue(PreferencesDialog.KEY_BATTLEFIELD_IMAGE,""String_Node_Str"") != null) {
      background=loadbuffer_selected();
    }
 else {
      background=loadbuffer_default();
    }
    if (background == null) {
      throw new FileNotFoundException(""String_Node_Str"");
    }
    if (ui.containsKey(""String_Node_Str"") && ui.containsKey(""String_Node_Str"")) {
      ImagePanel bgPanel=new ImagePanel(background,ImagePanel.TILED);
      unsetOpaque(ui.get(""String_Node_Str""));
      unsetOpaque(ui.get(""String_Node_Str""));
      unsetOpaque(ui.get(""String_Node_Str""));
      unsetOpaque(ui.get(""String_Node_Str""));
      unsetOpaque(ui.get(""String_Node_Str""));
      unsetOpaque(ui.get(""String_Node_Str""));
      ui.get(""String_Node_Str"").remove(ui.get(""String_Node_Str""));
      bgPanel.add(ui.get(""String_Node_Str""));
      ui.get(""String_Node_Str"").add(bgPanel);
    }
 else {
      log.error(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    return;
  }
}","public void applyInGame(Map<String,JComponent> ui){
  BufferedImage background;
  try {
    if (PreferencesDialog.getCachedValue(PreferencesDialog.KEY_BATTLEFIELD_IMAGE_DEFAULT,""String_Node_Str"").equals(""String_Node_Str"")) {
      background=loadbuffer_default();
    }
 else     if (PreferencesDialog.getCachedValue(PreferencesDialog.KEY_BATTLEFIELD_IMAGE_RANDOM,""String_Node_Str"").equals(""String_Node_Str"")) {
      background=loadbuffer_random();
    }
 else     if (PreferencesDialog.getCachedValue(PreferencesDialog.KEY_BATTLEFIELD_IMAGE,""String_Node_Str"") != null) {
      background=loadbuffer_selected();
    }
 else {
      background=loadbuffer_default();
    }
    if (background == null) {
      background=loadbuffer_default();
    }
    if (background == null) {
      throw new FileNotFoundException(""String_Node_Str"");
    }
    if (ui.containsKey(""String_Node_Str"") && ui.containsKey(""String_Node_Str"")) {
      ImagePanel bgPanel=new ImagePanel(background,ImagePanel.TILED);
      unsetOpaque(ui.get(""String_Node_Str""));
      unsetOpaque(ui.get(""String_Node_Str""));
      unsetOpaque(ui.get(""String_Node_Str""));
      unsetOpaque(ui.get(""String_Node_Str""));
      unsetOpaque(ui.get(""String_Node_Str""));
      unsetOpaque(ui.get(""String_Node_Str""));
      ui.get(""String_Node_Str"").remove(ui.get(""String_Node_Str""));
      bgPanel.add(ui.get(""String_Node_Str""));
      ui.get(""String_Node_Str"").add(bgPanel);
    }
 else {
      log.error(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    return;
  }
}",0.975417895771878
159704,"private ImagePanel createImagePanelInstance(){
  if (background == null) {
synchronized (ThemePluginImpl.class) {
      if (background == null) {
        String filename=""String_Node_Str"";
        try {
          if (PreferencesDialog.getCachedValue(PreferencesDialog.KEY_BACKGROUND_IMAGE_DEFAULT,""String_Node_Str"").equals(""String_Node_Str"")) {
            InputStream is=this.getClass().getResourceAsStream(filename);
            if (is == null)             throw new FileNotFoundException(""String_Node_Str"" + filename + ""String_Node_Str"");
            background=ImageIO.read(is);
          }
 else           if (PreferencesDialog.getCachedValue(PreferencesDialog.KEY_BACKGROUND_IMAGE,""String_Node_Str"") != null) {
            String path=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_BATTLEFIELD_IMAGE,""String_Node_Str"");
            if (path != null) {
              background=ImageIO.read(new File(path));
            }
 else {
              InputStream is=this.getClass().getResourceAsStream(filename);
              if (is == null)               throw new FileNotFoundException(""String_Node_Str"" + filename + ""String_Node_Str"");
              background=ImageIO.read(is);
            }
          }
          if (background == null)           throw new FileNotFoundException(""String_Node_Str"" + filename + ""String_Node_Str"");
        }
 catch (        Exception e) {
          log.error(e.getMessage(),e);
          return null;
        }
      }
    }
  }
  return new ImagePanel(background,ImagePanel.SCALED);
}","private ImagePanel createImagePanelInstance(){
  if (background == null) {
synchronized (ThemePluginImpl.class) {
      if (background == null) {
        String filename=""String_Node_Str"";
        try {
          if (PreferencesDialog.getCachedValue(PreferencesDialog.KEY_BACKGROUND_IMAGE_DEFAULT,""String_Node_Str"").equals(""String_Node_Str"")) {
            InputStream is=this.getClass().getResourceAsStream(filename);
            if (is == null)             throw new FileNotFoundException(""String_Node_Str"" + filename + ""String_Node_Str"");
            background=ImageIO.read(is);
          }
 else {
            String path=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_BACKGROUND_IMAGE,""String_Node_Str"");
            if (path != null && !path.equals(""String_Node_Str"")) {
              try {
                File f=new File(path);
                if (f != null)                 background=ImageIO.read(f);
              }
 catch (              Exception e) {
                background=null;
              }
            }
          }
          if (background == null) {
            InputStream is=this.getClass().getResourceAsStream(filename);
            if (is == null)             throw new FileNotFoundException(""String_Node_Str"" + filename + ""String_Node_Str"");
            background=ImageIO.read(is);
          }
          if (background == null)           throw new FileNotFoundException(""String_Node_Str"" + filename + ""String_Node_Str"");
        }
 catch (        Exception e) {
          log.error(e.getMessage(),e);
          return null;
        }
      }
    }
  }
  return new ImagePanel(background,ImagePanel.SCALED);
}",0.7566887000314763
159705,"@Override public boolean apply(Game game,Ability source){
  Permanent seasinger=game.getBattlefield().getPermanent(source.getSourceId());
  if (seasinger != null) {
    return seasinger.isTapped();
  }
  return false;
}","@Override public boolean apply(Permanent input,Game game){
  return (game.getBattlefield().countAll(filter,input.getControllerId(),game) > 0);
}",0.4848484848484848
159706,"@Override public boolean apply(Game game,Ability source){
  Permanent creature=game.getPermanent(getTargetPointer().getFirst(game,source));
  if (creature != null) {
    Player controller=game.getPlayer(creature.getControllerId());
    if (controller != null) {
      int power=creature.getPower().getValue();
      if (creature.destroy(source.getSourceId(),game,false)) {
        Effect effect=new PutLibraryIntoGraveTargetEffect(power);
        effect.setTargetPointer(new FixedTarget(controller.getId()));
        return effect.apply(game,source);
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent creature=game.getPermanent(getTargetPointer().getFirst(game,source));
  if (creature != null) {
    Player controller=game.getPlayer(creature.getControllerId());
    if (controller != null) {
      int power=creature.getPower().getValue();
      creature.destroy(source.getSourceId(),game,false);
      Effect effect=new PutLibraryIntoGraveTargetEffect(power);
      effect.setTargetPointer(new FixedTarget(controller.getId()));
      return effect.apply(game,source);
    }
  }
  return false;
}",0.9548611111111112
159707,"public boolean replaceEvent(GameEvent event,Game game){
  boolean caught=false;
  HashMap<UUID,HashSet<UUID>> consumed=new HashMap<UUID,HashSet<UUID>>();
  do {
    HashMap<ReplacementEffect,HashSet<Ability>> rEffects=getApplicableReplacementEffects(event,game);
    for (Iterator<ReplacementEffect> it1=rEffects.keySet().iterator(); it1.hasNext(); ) {
      ReplacementEffect entry=it1.next();
      if (consumed.containsKey(entry.getId())) {
        HashSet<UUID> consumedAbilitiesIds=consumed.get(entry.getId());
        if (consumedAbilitiesIds.size() == ((HashSet<Ability>)rEffects.get(entry)).size()) {
          it1.remove();
        }
 else {
          Iterator it=((HashSet<Ability>)rEffects.get(entry)).iterator();
          while (it.hasNext()) {
            Ability ability=(Ability)it.next();
            if (consumedAbilitiesIds.contains(ability.getId())) {
              it.remove();
            }
          }
        }
      }
    }
    if (rEffects.isEmpty()) {
      break;
    }
    int index;
    boolean onlyOne=false;
    if (rEffects.size() == 1) {
      ReplacementEffect effect=(ReplacementEffect)rEffects.keySet().iterator().next();
      HashSet<Ability> abilities=replacementEffects.getAbility(effect.getId());
      if (abilities == null || abilities.size() == 1) {
        onlyOne=true;
      }
    }
    if (onlyOne) {
      index=0;
    }
 else {
      Player player=game.getPlayer(event.getPlayerId());
      index=player.chooseEffect(getReplacementEffectsTexts(rEffects,game),game);
    }
    int checked=0;
    ReplacementEffect rEffect=null;
    Ability rAbility=null;
    for (    Map.Entry entry : rEffects.entrySet()) {
      if (entry.getValue() == null) {
        if (checked == index) {
          rEffect=(ReplacementEffect)entry.getKey();
          break;
        }
 else {
          checked++;
        }
      }
 else {
        HashSet<Ability> abilities=(HashSet<Ability>)entry.getValue();
        int size=abilities.size();
        if (index > (checked + size - 1)) {
          checked+=size;
        }
 else {
          rEffect=(ReplacementEffect)entry.getKey();
          Iterator it=abilities.iterator();
          while (it.hasNext() && rAbility == null) {
            if (checked == index) {
              rAbility=(Ability)it.next();
            }
 else {
              it.next();
              checked++;
            }
          }
        }
      }
    }
    if (rEffect != null) {
      event.getAppliedEffects().add(rEffect.getId());
      caught=rEffect.replaceEvent(event,rAbility,game);
    }
    if (caught) {
      break;
    }
    if (rEffect != null) {
      if (consumed.containsKey(rEffect.getId())) {
        HashSet<UUID> set=consumed.get(rEffect.getId());
        if (rAbility != null) {
          if (!set.contains(rAbility.getId())) {
            set.add(rAbility.getId());
          }
        }
      }
 else {
        HashSet<UUID> set=new HashSet<UUID>();
        if (rAbility != null) {
          set.add(rAbility.getId());
        }
        consumed.put(rEffect.getId(),set);
      }
    }
    game.applyEffects();
  }
 while (true);
  return caught;
}","public boolean replaceEvent(GameEvent event,Game game){
  boolean caught=false;
  HashMap<UUID,HashSet<UUID>> consumed=new HashMap<UUID,HashSet<UUID>>();
  do {
    HashMap<ReplacementEffect,HashSet<Ability>> rEffects=getApplicableReplacementEffects(event,game);
    for (Iterator<ReplacementEffect> it1=rEffects.keySet().iterator(); it1.hasNext(); ) {
      ReplacementEffect entry=it1.next();
      if (consumed.containsKey(entry.getId())) {
        HashSet<UUID> consumedAbilitiesIds=consumed.get(entry.getId());
        if (rEffects.get(entry) == null || consumedAbilitiesIds.size() == ((HashSet<Ability>)rEffects.get(entry)).size()) {
          it1.remove();
        }
 else {
          Iterator it=((HashSet<Ability>)rEffects.get(entry)).iterator();
          while (it.hasNext()) {
            Ability ability=(Ability)it.next();
            if (consumedAbilitiesIds.contains(ability.getId())) {
              it.remove();
            }
          }
        }
      }
    }
    if (rEffects.isEmpty()) {
      break;
    }
    int index;
    boolean onlyOne=false;
    if (rEffects.size() == 1) {
      ReplacementEffect effect=(ReplacementEffect)rEffects.keySet().iterator().next();
      HashSet<Ability> abilities=replacementEffects.getAbility(effect.getId());
      if (abilities == null || abilities.size() == 1) {
        onlyOne=true;
      }
    }
    if (onlyOne) {
      index=0;
    }
 else {
      Player player=game.getPlayer(event.getPlayerId());
      index=player.chooseEffect(getReplacementEffectsTexts(rEffects,game),game);
    }
    int checked=0;
    ReplacementEffect rEffect=null;
    Ability rAbility=null;
    for (    Map.Entry entry : rEffects.entrySet()) {
      if (entry.getValue() == null) {
        if (checked == index) {
          rEffect=(ReplacementEffect)entry.getKey();
          break;
        }
 else {
          checked++;
        }
      }
 else {
        HashSet<Ability> abilities=(HashSet<Ability>)entry.getValue();
        int size=abilities.size();
        if (index > (checked + size - 1)) {
          checked+=size;
        }
 else {
          rEffect=(ReplacementEffect)entry.getKey();
          Iterator it=abilities.iterator();
          while (it.hasNext() && rAbility == null) {
            if (checked == index) {
              rAbility=(Ability)it.next();
            }
 else {
              it.next();
              checked++;
            }
          }
        }
      }
    }
    if (rEffect != null) {
      event.getAppliedEffects().add(rEffect.getId());
      caught=rEffect.replaceEvent(event,rAbility,game);
    }
    if (caught) {
      break;
    }
    if (rEffect != null) {
      if (consumed.containsKey(rEffect.getId())) {
        HashSet<UUID> set=consumed.get(rEffect.getId());
        if (rAbility != null) {
          if (!set.contains(rAbility.getId())) {
            set.add(rAbility.getId());
          }
        }
      }
 else {
        HashSet<UUID> set=new HashSet<UUID>();
        if (rAbility != null) {
          set.add(rAbility.getId());
        }
        consumed.put(rEffect.getId(),set);
      }
    }
    game.applyEffects();
  }
 while (true);
  return caught;
}",0.9950660512494032
159708,"@Override public MulDayaChannelers copy(){
  return new MulDayaChannelers(this);
}","@Override public MulDayaChannelersActivateIfConditionManaAbility copy(){
  return new MulDayaChannelersActivateIfConditionManaAbility(this);
}",0.7321428571428571
159709,"RenegadeDoppelgangerEffect(final RenegadeDoppelgangerEffect effect){
  super(effect);
}","public RenegadeDoppelgangerEffect(final RenegadeDoppelgangerEffect effect){
  super(effect);
}",0.9613259668508288
159710,"@Override public boolean apply(Game game,Ability source){
  Permanent creature=game.getPermanent(targetPointer.getFirst(game,source));
  Permanent permanent=game.getPermanent(source.getSourceId());
  if (creature == null || permanent == null) {
    return false;
  }
  game.copyPermanent(creature,permanent,source,new EmptyApplyToPermanent());
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getSourceId());
  Permanent targetCreature=game.getPermanent(targetPointer.getFirst(game,source));
  if (targetCreature == null) {
    targetCreature=(Permanent)game.getLastKnownInformation(getTargetPointer().getFirst(game,source),Zone.BATTLEFIELD);
  }
  if (targetCreature == null || permanent == null) {
    return false;
  }
  game.copyPermanent(Duration.EndOfTurn,targetCreature,permanent,source,new EmptyApplyToPermanent());
  return false;
}",0.6089813800657174
159711,"/** 
 * This version supports copying of copies of any depth.
 * @param copyFromPermanent
 * @param copyToPermanent
 * @param source
 * @param applier
 */
Permanent copyPermanent(Permanent copyFromPermanent,Permanent copyToPermanent,Ability source,ApplyToPermanent applier);","Permanent copyPermanent(Duration duration,Permanent copyFromPermanent,Permanent copyToPermanent,Ability source,ApplyToPermanent applier);",0.5790754257907542
159712,"@Override public Permanent copyPermanent(Permanent copyFromPermanent,Permanent copyToPermanent,Ability source,ApplyToPermanent applier){
  Permanent permanent=copyFromPermanent.copy();
  permanent.reset(this);
  permanent.assignNewId();
  if (copyFromPermanent.isTransformed()) {
    TransformAbility.transform(permanent,copyFromPermanent.getSecondCardFace(),this);
  }
  applier.apply(this,permanent);
  Ability newAbility=source.copy();
  CopyEffect newEffect=new CopyEffect(permanent,copyToPermanent.getId());
  newEffect.newId();
  newEffect.setTimestamp();
  newEffect.init(newAbility,this);
  for (  Effect effect : getState().getContinuousEffects().getLayeredEffects(this)) {
    if (effect instanceof CopyEffect) {
      CopyEffect copyEffect=(CopyEffect)effect;
      if (copyEffect.getSourceId().equals(copyFromPermanent.getId())) {
        MageObject object=((CopyEffect)effect).getTarget();
        if (object instanceof Permanent) {
          Permanent original=(Permanent)object;
          original=original.copy();
          applier.apply(this,original);
          newEffect.setTarget(object);
        }
      }
    }
  }
  state.addEffect(newEffect,newAbility);
  return permanent;
}","@Override public Permanent copyPermanent(Duration duration,Permanent copyFromPermanent,Permanent copyToPermanent,Ability source,ApplyToPermanent applier){
  Permanent permanent=copyFromPermanent.copy();
  permanent.reset(this);
  permanent.assignNewId();
  if (copyFromPermanent.isTransformed()) {
    TransformAbility.transform(permanent,copyFromPermanent.getSecondCardFace(),this);
  }
  applier.apply(this,permanent);
  Ability newAbility=source.copy();
  CopyEffect newEffect=new CopyEffect(duration,permanent,copyToPermanent.getId());
  newEffect.newId();
  newEffect.setTimestamp();
  newEffect.init(newAbility,this);
  for (  Effect effect : getState().getContinuousEffects().getLayeredEffects(this)) {
    if (effect instanceof CopyEffect) {
      CopyEffect copyEffect=(CopyEffect)effect;
      if (copyEffect.getSourceId().equals(copyFromPermanent.getId())) {
        MageObject object=((CopyEffect)effect).getTarget();
        if (object instanceof Permanent) {
          Permanent original=(Permanent)object;
          original=original.copy();
          applier.apply(this,original);
          newEffect.setTarget(object);
        }
      }
    }
  }
  state.addEffect(newEffect,newAbility);
  return permanent;
}",0.9888659793814432
159713,"private boolean open(){
  filepath=Constants.BASE_MUSICS_PATH;
  filelist.removeAll();
  File filedir=new File(filepath);
  File[] fileread=filedir.listFiles();
  if (fileread.length == 0)   return false;
  String filename;
  for (  File f : fileread) {
    filename=f.getName().toLowerCase();
    if (filename.endsWith(""String_Node_Str"") || filename.endsWith(""String_Node_Str"")) {
      filelist.add(filename);
    }
  }
  if (filelist.getItemCount() == 0)   return false;
  return true;
}","private boolean open(){
  filepath=Constants.BASE_MUSICS_PATH;
  filelist.removeAll();
  File filedir=new File(filepath);
  File[] fileread=filedir.listFiles();
  if (fileread == null)   return false;
  if (fileread.length == 0)   return false;
  String filename;
  for (  File f : fileread) {
    filename=f.getName().toLowerCase();
    if (filename.endsWith(""String_Node_Str"") || filename.endsWith(""String_Node_Str"")) {
      filelist.add(filename);
    }
  }
  if (filelist.getItemCount() == 0)   return false;
  return true;
}",0.9607843137254902
159714,"private ModernMasters(){
  super(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new GregorianCalendar(2016,6,7).getTime(),SetType.REPRINT);
  this.hasBoosters=true;
  this.numBoosterLands=0;
  this.numBoosterCommon=11;
  this.numBoosterUncommon=3;
  this.numBoosterRare=1;
  this.ratioBoosterMythic=8;
}","private ModernMasters(){
  super(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new GregorianCalendar(2016,6,7).getTime(),SetType.REPRINT);
  this.hasBasicLands=false;
  this.hasBoosters=true;
  this.numBoosterLands=0;
  this.numBoosterCommon=11;
  this.numBoosterUncommon=3;
  this.numBoosterRare=1;
  this.ratioBoosterMythic=8;
}",0.95906432748538
159715,"/** 
 * Gives back the set codes from the sets that include basic lands. If the input set itself does not incluse basic lands, but it has a parent set, only this parent set code is added to the return sets.
 * @param setCodes
 * @return - setCodes that have basic lands
 */
public static Set<String> getSetsWithBasicLandsAsCodes(Set<String> setCodes){
  Set<String> landSets=new LinkedHashSet<String>();
  if (setCodes != null && !setCodes.isEmpty()) {
    for (    String setCode : setCodes) {
      ExpansionSet expansionSet=Sets.findSet(setCode);
      if (expansionSet.hasBasicLands()) {
        landSets.add(setCode);
      }
 else       if (expansionSet.getParentSet() != null && !landSets.contains(expansionSet.getParentSet().getCode())) {
        landSets.add(expansionSet.getParentSet().getCode());
      }
    }
  }
  return landSets;
}","/** 
 * Gives back the set codes from the sets that include basic lands. If the input set itself does not incluse basic lands, but it has a parent set, only this parent set code is added to the return sets.
 * @param setCodes
 * @return - setCodes that have basic lands
 */
public static Set<String> getSetsWithBasicLandsAsCodes(Set<String> setCodes){
  Set<String> landSets=new LinkedHashSet<String>();
  if (setCodes != null && !setCodes.isEmpty()) {
    for (    String setCode : setCodes) {
      ExpansionSet expansionSet=Sets.findSet(setCode);
      if (expansionSet.hasBasicLands()) {
        landSets.add(setCode);
      }
 else       if (expansionSet.getParentSet() != null && !landSets.contains(expansionSet.getParentSet().getCode())) {
        landSets.add(expansionSet.getParentSet().getCode());
      }
    }
  }
  if (landSets.isEmpty()) {
    Random generator=new Random();
    int maxRndValue=0;
    String selectedSetCode=null;
    for (    ExpansionSet set : Sets.getInstance().getSortedByReleaseDate()) {
      if (set.hasBasicLands) {
        int rndValue=generator.nextInt(100);
        if (rndValue >= maxRndValue) {
          maxRndValue=rndValue;
          selectedSetCode=set.getCode();
        }
      }
    }
    if (selectedSetCode != null) {
      landSets.add(selectedSetCode);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  return landSets;
}",0.7357237715803453
159716,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == EventType.ZONE_CHANGE) {
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    if ((fromZone == null || zEvent.getFromZone() == fromZone) && (toZone == null || zEvent.getToZone() == toZone)) {
      Permanent perm=game.getPermanent(event.getTargetId());
      if (perm != null && filter.match(perm,sourceId,controllerId,game)) {
        return true;
      }
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == EventType.ZONE_CHANGE) {
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    if ((fromZone == null || zEvent.getFromZone() == fromZone) && (toZone == null || zEvent.getToZone() == toZone)) {
      Permanent perm;
      if (zEvent.getTarget() != null) {
        perm=zEvent.getTarget();
      }
 else {
        perm=game.getPermanent(event.getTargetId());
      }
      if (perm != null && filter.match(perm,sourceId,controllerId,game)) {
        return true;
      }
    }
  }
  return false;
}",0.895774647887324
159717,"public boolean canTarget(MageObject source,Game game){
  if (filter instanceof FilterPermanent) {
    if (source instanceof Permanent)     return !filter.match(source,game);
    return true;
  }
  if (filter instanceof FilterSpell) {
    if (source instanceof Spell)     return !filter.match(source,game);
    return true;
  }
  if (filter instanceof FilterCard) {
    if (source instanceof Card)     return !filter.match(source,game);
    return true;
  }
  if (filter instanceof FilterObject) {
    return !filter.match(source,game);
  }
  return true;
}","public boolean canTarget(MageObject source,Game game){
  if (filter instanceof FilterPermanent) {
    if (source instanceof Permanent) {
      return !filter.match(source,game);
    }
    return true;
  }
  if (filter instanceof FilterSpell) {
    if (source instanceof Spell) {
      return !filter.match(source,game);
    }
    return true;
  }
  if (filter instanceof FilterCard) {
    if (source instanceof Card) {
      return !filter.match(source,game);
    }
    return true;
  }
  if (filter instanceof FilterObject) {
    return !filter.match(source,game);
  }
  return true;
}",0.9737302977232924
159718,"@Override public boolean canTarget(UUID id,UUID playerId,Ability ability,Game game){
  Card card=game.getCard(id);
  if (card != null && game.getState().getZone(card.getId()) == Zone.GRAVEYARD)   if (game.getPlayer(playerId).getGraveyard().contains(id)) {
    return filter.match(card,game);
  }
  return false;
}","@Override public boolean canTarget(UUID id,UUID playerId,Ability ability,Game game){
  Card card=game.getCard(id);
  if (card != null && game.getState().getZone(card.getId()) == Zone.GRAVEYARD) {
    if (game.getPlayer(playerId).getGraveyard().contains(id)) {
      return filter.match(card,game);
    }
  }
  return false;
}",0.9811912225705328
159719,"/** 
 * Checks if there are enough   {@link Card} that can be selected.
 * @param sourceControllerId - controller of the select event
 * @param game
 * @return - true if enough valid {@link Card} exist
 */
@Override public boolean canChoose(UUID sourceControllerId,Game game){
  if (game.getPlayer(sourceControllerId).getGraveyard().count(filter,game) >= this.minNumberOfTargets)   return true;
  return false;
}","@Override public boolean canChoose(UUID sourceId,UUID sourceControllerId,Game game){
  return canChoose(sourceControllerId,game);
}",0.3867403314917127
159720,"@Override public boolean apply(Game game,Ability source){
  StackObject spell=game.getStack().getStackObject(targetPointer.getFirst(game,source));
  if (spell != null) {
    Player player=game.getPlayer(spell.getControllerId());
    if (player != null) {
      Cost costToPay=cost.copy();
      if (cost == null) {
        costToPay=new GenericManaCost(genericMana.calculate(game,source));
      }
      costToPay.clearPaid();
      if (!costToPay.pay(source,game,spell.getSourceId(),spell.getControllerId(),false)) {
        return game.getStack().counter(source.getFirstTarget(),source.getSourceId(),game);
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  StackObject spell=game.getStack().getStackObject(targetPointer.getFirst(game,source));
  if (spell != null) {
    Player player=game.getPlayer(spell.getControllerId());
    if (player != null) {
      Cost costToPay;
      if (cost != null) {
        costToPay=cost.copy();
      }
 else {
        costToPay=new GenericManaCost(genericMana.calculate(game,source));
      }
      costToPay.clearPaid();
      if (!costToPay.pay(source,game,spell.getSourceId(),spell.getControllerId(),false)) {
        return game.getStack().counter(source.getFirstTarget(),source.getSourceId(),game);
      }
    }
  }
  return false;
}",0.9206349206349206
159721,"@Override public boolean apply(Game game,Ability source){
  if (source.getTargets().size() > 1) {
    for (    Target target : source.getTargets()) {
      for (      UUID targetId : target.getTargets()) {
        Permanent permanent=game.getPermanent(targetId);
        if (permanent != null) {
          permanent.damage(amount.calculate(game,source),source.getSourceId(),game,preventable,false);
        }
        Player player=game.getPlayer(targetId);
        if (player != null) {
          player.damage(amount.calculate(game,source),source.getSourceId(),game,false,preventable);
        }
      }
    }
    return true;
  }
  Permanent permanent=game.getPermanent(targetPointer.getFirst(game,source));
  if (permanent != null) {
    permanent.damage(amount.calculate(game,source),source.getSourceId(),game,preventable,false);
    return true;
  }
  Player player=game.getPlayer(targetPointer.getFirst(game,source));
  if (player != null) {
    player.damage(amount.calculate(game,source),source.getSourceId(),game,false,preventable);
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  if (source.getTargets().size() > 1) {
    for (    Target target : source.getTargets()) {
      for (      UUID targetId : target.getTargets()) {
        Permanent permanent=game.getPermanent(targetId);
        if (permanent != null) {
          permanent.damage(amount.calculate(game,source),source.getSourceId(),game,preventable,false);
        }
        Player player=game.getPlayer(targetId);
        if (player != null) {
          player.damage(amount.calculate(game,source),source.getSourceId(),game,false,preventable);
        }
      }
    }
    return true;
  }
  for (  UUID targetId : this.getTargetPointer().getTargets(game,source)) {
    Permanent permanent=game.getPermanent(targetId);
    if (permanent != null) {
      permanent.damage(amount.calculate(game,source),source.getSourceId(),game,preventable,false);
    }
 else {
      Player player=game.getPlayer(targetPointer.getFirst(game,source));
      if (player != null) {
        player.damage(amount.calculate(game,source),source.getSourceId(),game,false,preventable);
      }
    }
  }
  return true;
}",0.8564981949458483
159722,"@Override public void setFilter(FilterMana filter){
}","/** 
 * Not Supported
 * @param filter
 */
@Override public void setFilter(FilterMana filter){
}",0.7114093959731543
159723,"@Override public void setFilter(FilterMana filter){
}","/** 
 * Not Supported
 * @param filter
 */
@Override public void setFilter(FilterMana filter){
}",0.7114093959731543
159724,"@Override public void setFilter(FilterMana filter){
}","/** 
 * Not Supported
 * @param filter
 */
@Override public void setFilter(FilterMana filter){
}",0.7114093959731543
159725,"@Override public void setFilter(FilterMana filter){
}","/** 
 * Not Supported
 * @param filter
 */
@Override public void setFilter(FilterMana filter){
}",0.7114093959731543
159726,"@Override public void setFilter(FilterMana filter){
}","/** 
 * Not Supported
 * @param filter
 */
@Override public void setFilter(FilterMana filter){
}",0.7114093959731543
159727,"@Override public boolean activate(Game game,boolean noMana){
  if (!modes.choose(game,this)) {
    return false;
  }
  Card card=game.getCard(sourceId);
  if (card != null) {
    card.adjustChoices(this,game);
  }
  if (getChoices().size() > 0 && getChoices().choose(game,this) == false) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  if (card != null) {
    for (    Ability ability : card.getAbilities()) {
      if (ability instanceof AlternativeSourceCosts) {
        if (((AlternativeSourceCosts)ability).askToActivateAlternativeCosts(this,game)) {
          break;
        }
      }
      if (ability instanceof OptionalAdditionalSourceCosts) {
        ((OptionalAdditionalSourceCosts)ability).addOptionalAdditionalCosts(this,game);
      }
    }
  }
  VariableManaCost variableManaCost=null;
  for (  ManaCost cost : manaCostsToPay) {
    if (cost instanceof VariableManaCost) {
      variableManaCost=(VariableManaCost)cost;
      break;
    }
  }
  if (variableManaCost != null) {
    int xValue;
    if (!variableManaCost.isPaid()) {
      if (!noMana) {
        xValue=game.getPlayer(this.controllerId).announceXMana(variableManaCost.getMinX(),Integer.MAX_VALUE,""String_Node_Str"" + variableManaCost.getText(),game,this);
        int amountMana=xValue * variableManaCost.getMultiplier();
        manaCostsToPay.add(new ManaCostsImpl(new StringBuilder(""String_Node_Str"").append(amountMana).append(""String_Node_Str"").toString()));
        manaCostsToPay.setX(amountMana);
      }
      variableManaCost.setPaid();
    }
    xValue=getManaCostsToPay().getX();
    game.informPlayers(new StringBuilder(game.getPlayer(this.controllerId).getName()).append(""String_Node_Str"").append(xValue).append(""String_Node_Str"").append(variableManaCost.getText()).toString());
  }
  if (card != null) {
    card.adjustTargets(this,game);
  }
  if (getTargets().size() > 0 && getTargets().chooseTargets(getEffects().get(0).getOutcome(),this.controllerId,this,game) == false) {
    if (variableManaCost != null) {
      game.informPlayers(new StringBuilder(card.getName()).append(""String_Node_Str"").toString());
    }
 else {
      logger.debug(""String_Node_Str"");
    }
    return false;
  }
  for (  Cost cost : optionalCosts) {
    if (cost instanceof ManaCost) {
      cost.clearPaid();
      if (game.getPlayer(this.controllerId).chooseUse(Outcome.Benefit,""String_Node_Str"" + cost.getText() + ""String_Node_Str"",game)) {
        manaCostsToPay.add((ManaCost)cost);
      }
    }
  }
  if (card != null) {
    card.adjustCosts(this,game);
    for (    Ability ability : card.getAbilities()) {
      if (ability instanceof AdjustingSourceCosts) {
        ((AdjustingSourceCosts)ability).adjustCosts(this,game);
      }
    }
  }
  if (this instanceof ManaAbility && !costs.pay(this,game,sourceId,controllerId,noMana)) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  game.getContinuousEffects().costModification(this,game);
  UUID activatorId=controllerId;
  if ((this instanceof ActivatedAbilityImpl) && ((ActivatedAbilityImpl)this).getActivatorId() != null) {
    activatorId=((ActivatedAbilityImpl)this).getActivatorId();
  }
  if (!useAlternativeCost(game)) {
    if (!manaCostsToPay.pay(this,game,sourceId,activatorId,noMana)) {
      logger.debug(""String_Node_Str"");
      return false;
    }
  }
  if (!costs.pay(this,game,sourceId,activatorId,noMana)) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  return true;
}","@Override public boolean activate(Game game,boolean noMana){
  if (!modes.choose(game,this)) {
    return false;
  }
  Card card=game.getCard(sourceId);
  if (card != null) {
    card.adjustChoices(this,game);
  }
  if (getChoices().size() > 0 && getChoices().choose(game,this) == false) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  if (card != null) {
    for (    Ability ability : card.getAbilities()) {
      if (ability instanceof AlternativeSourceCosts) {
        if (((AlternativeSourceCosts)ability).askToActivateAlternativeCosts(this,game)) {
          break;
        }
      }
      if (ability instanceof OptionalAdditionalSourceCosts) {
        ((OptionalAdditionalSourceCosts)ability).addOptionalAdditionalCosts(this,game);
      }
    }
  }
  VariableManaCost variableManaCost=handleXCosts(game,noMana);
  if (card != null) {
    card.adjustTargets(this,game);
  }
  if (getTargets().size() > 0 && getTargets().chooseTargets(getEffects().get(0).getOutcome(),this.controllerId,this,game) == false) {
    if (variableManaCost != null) {
      game.informPlayers(new StringBuilder(card.getName()).append(""String_Node_Str"").toString());
    }
 else {
      logger.debug(""String_Node_Str"");
    }
    return false;
  }
  for (  Cost cost : optionalCosts) {
    if (cost instanceof ManaCost) {
      cost.clearPaid();
      if (game.getPlayer(this.controllerId).chooseUse(Outcome.Benefit,""String_Node_Str"" + cost.getText() + ""String_Node_Str"",game)) {
        manaCostsToPay.add((ManaCost)cost);
      }
    }
  }
  if (card != null) {
    card.adjustCosts(this,game);
    for (    Ability ability : card.getAbilities()) {
      if (ability instanceof AdjustingSourceCosts) {
        ((AdjustingSourceCosts)ability).adjustCosts(this,game);
      }
    }
  }
  if (this instanceof ManaAbility && !costs.pay(this,game,sourceId,controllerId,noMana)) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  game.getContinuousEffects().costModification(this,game);
  UUID activatorId=controllerId;
  if ((this instanceof ActivatedAbilityImpl) && ((ActivatedAbilityImpl)this).getActivatorId() != null) {
    activatorId=((ActivatedAbilityImpl)this).getActivatorId();
  }
  if (!useAlternativeCost(game)) {
    if (!manaCostsToPay.pay(this,game,sourceId,activatorId,noMana)) {
      logger.debug(""String_Node_Str"");
      return false;
    }
  }
  if (!costs.pay(this,game,sourceId,activatorId,noMana)) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  return true;
}",0.8319919517102615
159728,"@Override public void setFilter(FilterMana filter){
}","/** 
 * Not Supported
 * @param filter
 */
@Override public void setFilter(FilterMana filter){
}",0.7114093959731543
159729,"@Override public void setFilter(FilterMana filter){
}","/** 
 * Not Supported
 * @param filter
 */
@Override public void setFilter(FilterMana filter){
}",0.7114093959731543
159730,"@Override public void setFilter(FilterMana filter){
}","/** 
 * Not Supported
 * @param filter
 */
@Override public void setFilter(FilterMana filter){
}",0.7114093959731543
159731,"@Override public void setFilter(FilterMana filter){
}","/** 
 * Not Supported
 * @param filter
 */
@Override public void setFilter(FilterMana filter){
}",0.7114093959731543
159732,"@Override public boolean apply(Game game,Ability source){
  if (source.getTargets().size() > 1) {
    for (    Target target : source.getTargets()) {
      for (      UUID targetId : target.getTargets()) {
        Permanent permanent=game.getPermanent(targetId);
        if (permanent != null) {
          permanent.damage(amount.calculate(game,source),source.getSourceId(),game,preventable,false);
        }
        Player player=game.getPlayer(targetId);
        if (player != null) {
          player.damage(amount.calculate(game,source),source.getSourceId(),game,false,preventable);
        }
      }
    }
    return true;
  }
  for (  UUID targetId : this.getTargetPointer().getTargets(game,source)) {
    Permanent permanent=game.getPermanent(targetId);
    if (permanent != null) {
      permanent.damage(amount.calculate(game,source),source.getSourceId(),game,preventable,false);
    }
 else {
      Player player=game.getPlayer(targetPointer.getFirst(game,source));
      if (player != null) {
        player.damage(amount.calculate(game,source),source.getSourceId(),game,false,preventable);
      }
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  if (source.getTargets().size() > 1) {
    for (    Target target : source.getTargets()) {
      for (      UUID targetId : target.getTargets()) {
        Permanent permanent=game.getPermanent(targetId);
        if (permanent != null) {
          permanent.damage(amount.calculate(game,source),source.getSourceId(),game,preventable,false);
        }
        Player player=game.getPlayer(targetId);
        if (player != null) {
          player.damage(amount.calculate(game,source),source.getSourceId(),game,false,preventable);
        }
      }
    }
    return true;
  }
  for (  UUID targetId : this.getTargetPointer().getTargets(game,source)) {
    Permanent permanent=game.getPermanent(targetId);
    if (permanent != null) {
      permanent.damage(amount.calculate(game,source),source.getSourceId(),game,preventable,false);
    }
 else {
      Player player=game.getPlayer(targetId);
      if (player != null) {
        player.damage(amount.calculate(game,source),source.getSourceId(),game,false,preventable);
      }
    }
  }
  return true;
}",0.9861915367483296
159733,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType() == GameEvent.EventType.DECLARE_ATTACKER) {
    return true;
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType() == GameEvent.EventType.DECLARE_ATTACKER && event.getTargetId().equals(source.getControllerId())) {
    return true;
  }
  return false;
}",0.8647342995169082
159734,"@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  if (event.getType() == GameEvent.EventType.DECLARE_ATTACKER) {
    Player player=game.getPlayer(event.getPlayerId());
    if (player != null) {
      ManaCostsImpl propagandaTax=new ManaCostsImpl(""String_Node_Str"");
      if (propagandaTax.canPay(source.getSourceId(),event.getPlayerId(),game) && player.chooseUse(Constants.Outcome.Neutral,""String_Node_Str"",game)) {
        if (propagandaTax.payOrRollback(source,game,this.getId(),event.getPlayerId())) {
          return false;
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  Player player=game.getPlayer(event.getPlayerId());
  if (player != null) {
    ManaCostsImpl propagandaTax=new ManaCostsImpl(""String_Node_Str"");
    if (propagandaTax.canPay(source.getSourceId(),event.getPlayerId(),game) && player.chooseUse(Outcome.Neutral,""String_Node_Str"",game)) {
      if (propagandaTax.payOrRollback(source,game,this.getId(),event.getPlayerId())) {
        return false;
      }
    }
    return true;
  }
  return false;
}",0.823937554206418
159735,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    FilterCard filter=new FilterCard(""String_Node_Str"");
    filter.add(Predicates.or(new CardTypePredicate(CardType.INSTANT),new CardTypePredicate(CardType.SORCERY)));
    Card[] cards=player.getGraveyard().getCards(filter,game).toArray(new Card[0]);
    if (cards.length > 0) {
      Random rnd=new Random();
      Card card=cards[rnd.nextInt(cards.length)];
      card.moveToZone(Zone.HAND,source.getId(),game,true);
      game.informPlayers(card.getName() + ""String_Node_Str"" + player.getName());
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    FilterCard filter=new FilterCard(""String_Node_Str"");
    filter.add(Predicates.or(new CardTypePredicate(CardType.INSTANT),new CardTypePredicate(CardType.SORCERY)));
    Card[] cards=player.getGraveyard().getCards(filter,game).toArray(new Card[0]);
    if (cards.length > 0) {
      Random rnd=new Random();
      Card card=cards[rnd.nextInt(cards.length)];
      card.moveToZone(Zone.HAND,source.getId(),game,true);
      game.informPlayers(new StringBuilder(""String_Node_Str"").append(card.getName()).append(""String_Node_Str"").append(player.getName()).toString());
      return true;
    }
  }
  return false;
}",0.9167822468793344
159736,"public void selectBlockers(Game game){
  if (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.DECLARING_BLOCKERS,attackerId,attackerId))) {
    Player player=game.getPlayer(attackerId);
    checkBlockRequirementsBefore(player,game);
    for (    UUID defenderId : getPlayerDefenders(game)) {
      boolean choose=true;
      Player defender=game.getPlayer(defenderId);
      while (choose) {
        game.getPlayer(defenderId).selectBlockers(game,defenderId);
        if (game.isPaused() || game.isGameOver()) {
          return;
        }
        if (!checkBlockRestrictions(game.getPlayer(defenderId),game)) {
          if (player.isHuman()) {
            continue;
          }
        }
        choose=!checkBlockRequirementsAfter(defender,defender,game);
      }
      game.fireEvent(GameEvent.getEvent(GameEvent.EventType.DECLARED_BLOCKERS,defenderId,defenderId));
    }
    TraceUtil.traceCombatIfNeeded(game,this);
  }
}","public void selectBlockers(Game game){
  if (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.DECLARING_BLOCKERS,attackerId,attackerId))) {
    Player player=game.getPlayer(attackerId);
    checkBlockRequirementsBefore(player,game);
    for (    UUID defenderId : getPlayerDefenders(game)) {
      boolean choose=true;
      Player defender=game.getPlayer(defenderId);
      while (choose) {
        game.getPlayer(defenderId).selectBlockers(game,defenderId);
        if (game.isPaused() || game.isGameOver()) {
          return;
        }
        if (!checkBlockRestrictions(game.getPlayer(defenderId),game)) {
          if (defender.isHuman()) {
            continue;
          }
        }
        choose=!checkBlockRequirementsAfter(defender,defender,game);
      }
      game.fireEvent(GameEvent.getEvent(GameEvent.EventType.DECLARED_BLOCKERS,defenderId,defenderId));
    }
    TraceUtil.traceCombatIfNeeded(game,this);
  }
}",0.9946638207043756
159737,"@Override public boolean applies(Permanent permanent,Ability source,Game game){
  if (filter.match(permanent,source.getSourceId(),source.getControllerId(),game)) {
    return true;
  }
  return false;
}","@Override public boolean applies(Permanent permanent,Ability source,Game game){
  for (  FixedTarget fixedTarget : this.detainedObjects) {
    UUID targetId=fixedTarget.getFirst(game,source);
    if (targetId != null && targetId.equals(permanent.getId())) {
      return true;
    }
  }
  return false;
}",0.549407114624506
159738,"@Override public boolean apply(Game game,Ability source){
  return true;
}","@Override public boolean apply(Game game,Ability source){
  List<FixedTarget> detainedObjects=new ArrayList<FixedTarget>();
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(filter,source.getControllerId(),source.getSourceId(),game)) {
    game.informPlayers(""String_Node_Str"" + permanent.getName());
    FixedTarget fixedTarget=new FixedTarget(permanent.getId());
    fixedTarget.init(game,source);
    detainedObjects.add(fixedTarget);
  }
  game.addEffect(new DetainAllRestrictionEffect(detainedObjects),source);
  return false;
}",0.1936507936507936
159739,"@Override public boolean isInactive(Ability source,Game game){
  if (game.getPhase().getStep().getType() == Constants.PhaseStep.UNTAP && game.getStep().getStepPart() == Step.StepPart.PRE) {
    if (game.getActivePlayerId().equals(source.getControllerId())) {
      return true;
    }
  }
  return false;
}","@Override public boolean isInactive(Ability source,Game game){
  if (game.getPhase().getStep().getType() == Constants.PhaseStep.UNTAP && game.getStep().getStepPart() == Step.StepPart.PRE) {
    if (game.getActivePlayerId().equals(source.getControllerId())) {
      for (      FixedTarget fixedTarget : this.detainedObjects) {
        Permanent permanent=game.getPermanent(fixedTarget.getFirst(game,source));
        if (permanent != null) {
          permanent.addInfo(new StringBuilder(""String_Node_Str"").append(getId()).toString(),""String_Node_Str"");
        }
      }
      return true;
    }
  }
  return false;
}",0.613882863340564
159740,"public DetainAllRestrictionEffect(final DetainAllRestrictionEffect effect){
  super(effect);
  this.filter=effect.filter;
}","public DetainAllRestrictionEffect(final DetainAllRestrictionEffect effect){
  super(effect);
  this.detainedObjects=effect.detainedObjects;
}",0.8712121212121212
159741,"@Override public boolean apply(Game game,Ability source){
  return true;
}","@Override public boolean apply(Game game,Ability source){
  for (  UUID target : this.getTargetPointer().getTargets(game,source)) {
    Permanent permanent=game.getPermanent(target);
    if (permanent != null) {
      game.informPlayers(""String_Node_Str"" + permanent.getName());
    }
  }
  DetainRestrictionEffect effect=new DetainRestrictionEffect();
  effect.getTargetPointer().init(game,source);
  game.addEffect(effect,source);
  return true;
}",0.2332695984703633
159742,"@Override public boolean isInactive(Ability source,Game game){
  if (game.getPhase().getStep().getType() == Constants.PhaseStep.UNTAP && game.getStep().getStepPart() == Step.StepPart.PRE) {
    if (game.getActivePlayerId().equals(source.getControllerId())) {
      return true;
    }
  }
  return false;
}","@Override public boolean isInactive(Ability source,Game game){
  if (game.getPhase().getStep().getType() == Constants.PhaseStep.UNTAP && game.getStep().getStepPart() == Step.StepPart.PRE) {
    if (game.getActivePlayerId().equals(source.getControllerId())) {
      for (      UUID targetId : this.getTargetPointer().getTargets(game,source)) {
        Permanent permanent=game.getPermanent(targetId);
        if (permanent != null) {
          permanent.addInfo(new StringBuilder(""String_Node_Str"").append(getId()).toString(),""String_Node_Str"");
        }
      }
      return true;
    }
  }
  return false;
}",0.6433260393873085
159743,"@Override public boolean apply(Game game,Ability source){
  Permanent triggeringCreature=game.getPermanent(getTargetPointer().getFirst(game,source));
  if (triggeringCreature == null) {
    triggeringCreature=(Permanent)game.getLastKnownInformation(getTargetPointer().getFirst(game,source),Zone.BATTLEFIELD);
  }
  if (triggeringCreature != null) {
    FilterPermanent filter=new FilterPermanent(""String_Node_Str"" + triggeringCreature.getName());
    filter.add(Predicates.not(new PermanentIdPredicate(triggeringCreature.getId())));
    filter.add(new ControllerPredicate(Constants.TargetController.YOU));
    Set<CardTypePredicate> cardTypes=new HashSet<CardTypePredicate>();
    for (    CardType cardType : triggeringCreature.getCardType()) {
      cardTypes.add(new CardTypePredicate(cardType));
    }
    filter.add(Predicates.or(cardTypes));
    TargetPermanent target=new TargetPermanent(1,1,filter,true);
    Player controller=game.getPlayer(source.getControllerId());
    if (controller != null) {
      if (target.canChoose(controller.getId(),game) && controller.chooseTarget(outcome,target,source,game)) {
        Permanent returningCreature=game.getPermanent(target.getFirstTarget());
        if (returningCreature != null) {
          if (returningCreature.moveToZone(Zone.HAND,source.getSourceId(),game,true)) {
            game.informPlayers(new StringBuilder(""String_Node_Str"").append(returningCreature.getName()).append(""String_Node_Str"").toString());
            return true;
          }
        }
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent triggeringCreature=game.getPermanent(getTargetPointer().getFirst(game,source));
  if (triggeringCreature == null) {
    triggeringCreature=(Permanent)game.getLastKnownInformation(getTargetPointer().getFirst(game,source),Zone.BATTLEFIELD);
  }
  if (triggeringCreature != null) {
    FilterPermanent filter=new FilterPermanent(""String_Node_Str"" + triggeringCreature.getName());
    filter.add(Predicates.not(new PermanentIdPredicate(triggeringCreature.getId())));
    filter.add(new ControllerPredicate(TargetController.YOU));
    Set<CardTypePredicate> cardTypes=new HashSet<CardTypePredicate>();
    for (    CardType cardType : triggeringCreature.getCardType()) {
      cardTypes.add(new CardTypePredicate(cardType));
    }
    filter.add(Predicates.or(cardTypes));
    TargetPermanent target=new TargetPermanent(1,1,filter,true);
    Player controller=game.getPlayer(source.getControllerId());
    if (controller != null) {
      if (target.canChoose(controller.getId(),game) && controller.chooseTarget(outcome,target,source,game)) {
        Permanent returningCreature=game.getPermanent(target.getFirstTarget());
        if (returningCreature != null) {
          if (returningCreature.moveToZone(Zone.HAND,source.getSourceId(),game,true)) {
            game.informPlayers(new StringBuilder(""String_Node_Str"").append(returningCreature.getName()).append(""String_Node_Str"").toString());
            return true;
          }
        }
      }
    }
  }
  return false;
}",0.9967658473479948
159744,"@Override public boolean apply(Game game,Ability source){
  int amount=source.getManaCostsToPay().getX();
  if (amount > 0) {
    Permanent permanent=game.getPermanent(getTargetPointer().getFirst(game,source));
    if (permanent != null) {
      permanent.damage(amount,source.getSourceId(),game,true,false);
    }
 else {
      Player player=game.getPlayer(getTargetPointer().getFirst(game,source));
      if (player != null) {
        player.damage(amount,source.getSourceId(),game,false,true);
      }
 else {
        return false;
      }
    }
    Player controller=game.getPlayer(source.getSourceId());
    if (controller != null) {
      controller.gainLife(amount,game);
    }
 else {
      return false;
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  int amount=source.getManaCostsToPay().getX();
  if (amount > 0) {
    Permanent permanent=game.getPermanent(getTargetPointer().getFirst(game,source));
    if (permanent != null) {
      permanent.damage(amount,source.getSourceId(),game,true,false);
    }
 else {
      Player player=game.getPlayer(getTargetPointer().getFirst(game,source));
      if (player != null) {
        player.damage(amount,source.getSourceId(),game,false,true);
      }
 else {
        return false;
      }
    }
    Player controller=game.getPlayer(source.getControllerId());
    if (controller != null) {
      controller.gainLife(amount,game);
    }
 else {
      return false;
    }
  }
  return true;
}",0.9892037786774628
159745,"@Override public int calculate(Game game,Ability sourceAbility){
  Card sourceCard=game.getCard(sourceAbility.getSourceId());
  if (sourceCard != null) {
    for (    Object cost : sourceAbility.getCosts()) {
      if (cost instanceof SacrificeTargetCost) {
        Permanent p=(Permanent)game.getLastKnownInformation(((SacrificeTargetCost)cost).getPermanents().get(0).getId(),Constants.Zone.BATTLEFIELD);
        return -1 * p.getPower().getValue();
      }
    }
  }
  return 0;
}","@Override public int calculate(Game game,Ability sourceAbility){
  Card sourceCard=game.getCard(sourceAbility.getSourceId());
  if (sourceCard != null) {
    for (    Object cost : sourceAbility.getCosts()) {
      if (cost instanceof SacrificeTargetCost) {
        Permanent p=(Permanent)game.getLastKnownInformation(((SacrificeTargetCost)cost).getPermanents().get(0).getId(),Zone.BATTLEFIELD);
        return -1 * p.getPower().getValue();
      }
    }
  }
  return 0;
}",0.989517819706499
159746,"@Override public void init(Ability source,Game game){
  super.init(source,game);
  if (this.affectedObjectsSet) {
    for (    Permanent perm : game.getBattlefield().getActivePermanents(filter,source.getControllerId(),source.getSourceId(),game)) {
      if (!(excludeSource && perm.getId().equals(source.getSourceId()))) {
        objects.add(perm.getId());
      }
    }
  }
}","@Override public void init(Ability source,Game game){
  super.init(source,game);
  if (this.affectedObjectsSet) {
    for (    Permanent perm : game.getBattlefield().getActivePermanents(filter,source.getControllerId(),source.getSourceId(),game)) {
      if (!(excludeSource && perm.getId().equals(source.getSourceId()))) {
        objects.add(perm.getId());
      }
    }
  }
  if (lockedInPT) {
    power=new StaticValue(power.calculate(game,source));
    toughness=new StaticValue(toughness.calculate(game,source));
  }
}",0.8377777777777777
159747,"public BoostAllEffect(final BoostAllEffect effect){
  super(effect);
  this.power=effect.power;
  this.toughness=effect.toughness;
  this.filter=effect.filter.copy();
  this.excludeSource=effect.excludeSource;
  this.staticText=effect.staticText;
}","public BoostAllEffect(final BoostAllEffect effect){
  super(effect);
  this.power=effect.power;
  this.toughness=effect.toughness;
  this.filter=effect.filter.copy();
  this.excludeSource=effect.excludeSource;
  this.lockedInPT=effect.lockedInPT;
}",0.8951612903225806
159748,"@Override public boolean apply(Game game,Ability source){
  List<String> names=new ArrayList<String>();
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(source.getControllerId(),game)) {
    if (permanent.hasSubtype(""String_Node_Str"")) {
      if (!names.contains(permanent.getName())) {
        names.add(permanent.getName());
      }
    }
  }
  if (names.size() >= 10) {
    Player controller=game.getPlayer(source.getControllerId());
    if (controller != null) {
      controller.won(game);
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  List<String> names=new ArrayList<String>();
  for (  Permanent permanent : game.getBattlefield().getAllActivePermanents(source.getControllerId())) {
    if (permanent.hasSubtype(""String_Node_Str"")) {
      if (!names.contains(permanent.getName())) {
        names.add(permanent.getName());
      }
    }
  }
  if (names.size() >= 10) {
    Player controller=game.getPlayer(source.getControllerId());
    if (controller != null) {
      controller.won(game);
    }
  }
  return false;
}",0.9926739926739928
159749,"@Override public boolean apply(Game game,Ability source){
  Spell spell=game.getStack().getSpell(source.getFirstTarget());
  if (spell != null) {
    Targets targets=spell.getSpellAbility().getTargets();
    if (targets.size() == 1 && targets.get(0).getTargets().size() == 1) {
      Target target=targets.get(0);
      if (target.canTarget(source.getSourceId(),game)) {
        target.clearChosen();
        target.add(source.getSourceId(),game);
      }
    }
 else {
      Player player=game.getPlayer(source.getControllerId());
      for (      Target target : targets) {
        for (        UUID targetId : target.getTargets()) {
          MageObject object=game.getObject(targetId);
          String name=null;
          if (object == null) {
            Player targetPlayer=game.getPlayer(targetId);
            name=targetPlayer.getName();
          }
 else {
            name=object.getName();
          }
          if (name != null && player.chooseUse(Outcome.Neutral,""String_Node_Str"" + name + ""String_Node_Str"",game)) {
            if (target.canTarget(source.getSourceId(),game)) {
              target.remove(targetId);
              target.addTarget(source.getSourceId(),source,game);
              break;
            }
          }
        }
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  StackObject stackObject=game.getStack().getStackObject(source.getFirstTarget());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (stackObject != null && sourceObject != null) {
    Targets targets;
    MageObject oldTarget=null;
    if (stackObject instanceof Spell) {
      Spell spell=(Spell)stackObject;
      targets=spell.getSpellAbility().getTargets();
    }
 else     if (stackObject instanceof StackAbility) {
      StackAbility stackAbility=(StackAbility)stackObject;
      targets=stackAbility.getTargets();
    }
 else {
      return false;
    }
    if (targets.size() == 1 && targets.get(0).getTargets().size() == 1) {
      Target target=targets.get(0);
      if (target.canTarget(source.getSourceId(),game)) {
        oldTarget=game.getObject(targets.getFirstTarget());
        target.clearChosen();
        target.add(source.getSourceId(),game);
      }
    }
 else {
      Player player=game.getPlayer(source.getControllerId());
      for (      Target target : targets) {
        for (        UUID targetId : target.getTargets()) {
          MageObject object=game.getObject(targetId);
          String name;
          if (object == null) {
            Player targetPlayer=game.getPlayer(targetId);
            name=targetPlayer.getName();
          }
 else {
            name=object.getName();
          }
          if (name != null && player.chooseUse(Outcome.Neutral,new StringBuilder(""String_Node_Str"").append(name).append(""String_Node_Str"").append(sourceObject.getName()).append(""String_Node_Str"").toString(),game)) {
            if (target.canTarget(source.getSourceId(),game)) {
              oldTarget=game.getObject(targets.getFirstTarget());
              target.remove(targetId);
              target.addTarget(source.getSourceId(),source,game);
              break;
            }
          }
        }
      }
    }
    if (oldTarget != null) {
      game.informPlayers(new StringBuilder(sourceObject.getName()).append(""String_Node_Str"").append(stackObject.getName()).append(""String_Node_Str"").append(oldTarget.getName()).append(""String_Node_Str"").append(sourceObject.getName()).toString());
    }
    return true;
  }
  return false;
}",0.6519774011299435
159750,"public SetPowerToughnessAllEffect(final SetPowerToughnessAllEffect effect){
  super(effect);
  this.power=effect.power;
  this.toughness=effect.toughness;
  this.filter=effect.filter;
  this.lockedIn=effect.lockedIn;
}","public SetPowerToughnessAllEffect(final SetPowerToughnessAllEffect effect){
  super(effect);
  this.power=effect.power;
  this.toughness=effect.toughness;
  this.filter=effect.filter;
  this.lockedInPT=effect.lockedInPT;
}",0.990909090909091
159751,"@Override public void init(Ability source,Game game){
  super.init(source,game);
  for (  Permanent perm : game.getBattlefield().getActivePermanents(new FilterControlledCreaturePermanent(),source.getControllerId(),source.getSourceId(),game)) {
    objects.add(perm.getId());
  }
  if (lockedIn) {
    power=new StaticValue(power.calculate(game,source));
    toughness=new StaticValue(toughness.calculate(game,source));
  }
}","@Override public void init(Ability source,Game game){
  super.init(source,game);
  for (  Permanent perm : game.getBattlefield().getActivePermanents(filter,source.getControllerId(),source.getSourceId(),game)) {
    objects.add(perm.getId());
  }
  if (lockedInPT) {
    power=new StaticValue(power.calculate(game,source));
    toughness=new StaticValue(toughness.calculate(game,source));
  }
}",0.9424724602203184
159752,"@Override public String getText(Mode mode){
  StringBuilder sb=new StringBuilder();
  sb.append(filter.getMessage());
  if (filter.getMessage().startsWith(""String_Node_Str"")) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  sb.append(power).append(""String_Node_Str"").append(toughness);
  if (!duration.toString().isEmpty()) {
    sb.append(""String_Node_Str"").append(duration.toString());
  }
  return sb.toString();
}","@Override public String getText(Mode mode){
  StringBuilder sb=new StringBuilder();
  sb.append(filter.getMessage());
  if (filter.getMessage().toLowerCase(Locale.ENGLISH).startsWith(""String_Node_Str"")) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  sb.append(power).append(""String_Node_Str"").append(toughness);
  if (!duration.toString().isEmpty()) {
    sb.append(""String_Node_Str"").append(duration.toString());
  }
  return sb.toString();
}",0.9702127659574468
159753,"public EvokeAbility(final EvokeAbility ability){
  super(ability);
}","public EvokeAbility(final EvokeAbility ability){
  super(ability);
  this.evokeCosts.addAll(ability.evokeCosts);
}",0.7472527472527473
159754,"/** 
 * Adjusts spell or ability cost to be paid by colored and generic mana.
 * @param spellAbility
 * @param manaCostsToReduce costs to reduce
 */
public static void adjustCost(SpellAbility spellAbility,ManaCosts<ManaCost> manaCostsToReduce){
  ManaCosts<ManaCost> previousCost=spellAbility.getManaCostsToPay();
  ManaCosts<ManaCost> adjustedCost=new ManaCostsImpl<ManaCost>();
  Mana reduceMana=new Mana();
  for (  ManaCost manaCost : manaCostsToReduce) {
    reduceMana.add(manaCost.getMana());
  }
  for (  ManaCost newManaCost : previousCost) {
    Mana mana=newManaCost.getMana();
    if (mana.getColorless() > 0) {
      continue;
    }
    if (mana.getBlack() > 0 && reduceMana.getBlack() > 0) {
      if (reduceMana.getBlack() > mana.getBlack()) {
        reduceMana.setBlack(reduceMana.getBlack() - mana.getBlack());
        mana.setBlack(0);
      }
 else {
        mana.setBlack(mana.getBlack() - reduceMana.getBlack());
        reduceMana.setBlack(0);
      }
    }
    if (mana.getRed() > 0 && reduceMana.getRed() > 0) {
      if (reduceMana.getRed() > mana.getRed()) {
        reduceMana.setRed(reduceMana.getRed() - mana.getRed());
        mana.setRed(0);
      }
 else {
        mana.setRed(mana.getRed() - reduceMana.getRed());
        reduceMana.setRed(0);
      }
    }
    if (mana.getBlue() > 0 && reduceMana.getBlue() > 0) {
      if (reduceMana.getBlue() > mana.getBlue()) {
        reduceMana.setBlue(reduceMana.getBlue() - mana.getBlue());
        mana.setBlue(0);
      }
 else {
        mana.setBlue(mana.getBlue() - reduceMana.getBlue());
        reduceMana.setBlue(0);
      }
    }
    if (mana.getGreen() > 0 && reduceMana.getGreen() > 0) {
      if (reduceMana.getGreen() > mana.getGreen()) {
        reduceMana.setGreen(reduceMana.getGreen() - mana.getGreen());
        mana.setGreen(0);
      }
 else {
        mana.setGreen(mana.getGreen() - reduceMana.getGreen());
        reduceMana.setGreen(0);
      }
    }
    if (mana.getWhite() > 0 && reduceMana.getWhite() > 0) {
      if (reduceMana.getWhite() > mana.getWhite()) {
        reduceMana.setWhite(reduceMana.getWhite() - mana.getWhite());
        mana.setWhite(0);
      }
 else {
        mana.setWhite(mana.getWhite() - reduceMana.getWhite());
        reduceMana.setWhite(0);
      }
    }
    if (mana.count() > 0) {
      adjustedCost.add(newManaCost);
    }
  }
  int reduceAmount=reduceMana.count();
  for (  ManaCost newManaCost : previousCost) {
    Mana mana=newManaCost.getMana();
    if (mana.getColorless() == 0) {
      continue;
    }
    if (mana.getColorless() > 0 && reduceAmount > 0) {
      if (reduceAmount > mana.getColorless()) {
        reduceAmount-=mana.getColorless();
        mana.setColorless(0);
      }
 else {
        mana.setColorless(mana.getColorless() - reduceAmount);
        reduceAmount=0;
      }
    }
    if (mana.count() > 0) {
      adjustedCost.add(0,new GenericManaCost(mana.count()));
    }
  }
  spellAbility.getManaCostsToPay().clear();
  spellAbility.getManaCostsToPay().addAll(adjustedCost);
}","/** 
 * Adjusts spell or ability cost to be paid by colored and generic mana.
 * @param spellAbility
 * @param manaCostsToReduce costs to reduce
 */
public static void adjustCost(SpellAbility spellAbility,ManaCosts<ManaCost> manaCostsToReduce){
  ManaCosts<ManaCost> previousCost=spellAbility.getManaCostsToPay();
  ManaCosts<ManaCost> adjustedCost=new ManaCostsImpl<ManaCost>();
  for (  VariableCost vCost : previousCost.getVariableCosts()) {
    if (vCost instanceof VariableManaCost) {
      adjustedCost.add((VariableManaCost)vCost);
    }
  }
  Mana reduceMana=new Mana();
  for (  ManaCost manaCost : manaCostsToReduce) {
    reduceMana.add(manaCost.getMana());
  }
  for (  ManaCost newManaCost : previousCost) {
    Mana mana=newManaCost.getMana();
    if (mana.getColorless() > 0) {
      continue;
    }
    if (mana.getBlack() > 0 && reduceMana.getBlack() > 0) {
      if (reduceMana.getBlack() > mana.getBlack()) {
        reduceMana.setBlack(reduceMana.getBlack() - mana.getBlack());
        mana.setBlack(0);
      }
 else {
        mana.setBlack(mana.getBlack() - reduceMana.getBlack());
        reduceMana.setBlack(0);
      }
    }
    if (mana.getRed() > 0 && reduceMana.getRed() > 0) {
      if (reduceMana.getRed() > mana.getRed()) {
        reduceMana.setRed(reduceMana.getRed() - mana.getRed());
        mana.setRed(0);
      }
 else {
        mana.setRed(mana.getRed() - reduceMana.getRed());
        reduceMana.setRed(0);
      }
    }
    if (mana.getBlue() > 0 && reduceMana.getBlue() > 0) {
      if (reduceMana.getBlue() > mana.getBlue()) {
        reduceMana.setBlue(reduceMana.getBlue() - mana.getBlue());
        mana.setBlue(0);
      }
 else {
        mana.setBlue(mana.getBlue() - reduceMana.getBlue());
        reduceMana.setBlue(0);
      }
    }
    if (mana.getGreen() > 0 && reduceMana.getGreen() > 0) {
      if (reduceMana.getGreen() > mana.getGreen()) {
        reduceMana.setGreen(reduceMana.getGreen() - mana.getGreen());
        mana.setGreen(0);
      }
 else {
        mana.setGreen(mana.getGreen() - reduceMana.getGreen());
        reduceMana.setGreen(0);
      }
    }
    if (mana.getWhite() > 0 && reduceMana.getWhite() > 0) {
      if (reduceMana.getWhite() > mana.getWhite()) {
        reduceMana.setWhite(reduceMana.getWhite() - mana.getWhite());
        mana.setWhite(0);
      }
 else {
        mana.setWhite(mana.getWhite() - reduceMana.getWhite());
        reduceMana.setWhite(0);
      }
    }
    if (mana.count() > 0) {
      adjustedCost.add(newManaCost);
    }
  }
  int reduceAmount=reduceMana.count();
  for (  ManaCost newManaCost : previousCost) {
    Mana mana=newManaCost.getMana();
    if (mana.getColorless() == 0) {
      continue;
    }
    if (mana.getColorless() > 0 && reduceAmount > 0) {
      if (reduceAmount > mana.getColorless()) {
        reduceAmount-=mana.getColorless();
        mana.setColorless(0);
      }
 else {
        mana.setColorless(mana.getColorless() - reduceAmount);
        reduceAmount=0;
      }
    }
    if (mana.count() > 0) {
      adjustedCost.add(0,new GenericManaCost(mana.count()));
    }
  }
  spellAbility.getManaCostsToPay().clear();
  spellAbility.getManaCostsToPay().addAll(adjustedCost);
}",0.9729210062489986
159755,"public VoiceOfResurgenceToken(){
  super(""String_Node_Str"",""String_Node_Str"");
  cardType.add(Constants.CardType.CREATURE);
  color.setGreen(true);
  color.setWhite(true);
  subtype.add(""String_Node_Str"");
  power=new MageInt(0);
  toughness=new MageInt(0);
  FilterControlledPermanent filter=new FilterControlledPermanent();
  filter.add(new CardTypePredicate(CardType.CREATURE));
  DynamicValue creaturesControlled=new PermanentsOnBattlefieldCount(filter);
  this.addAbility(new SimpleStaticAbility(Constants.Zone.BATTLEFIELD,new SetPowerToughnessSourceEffect(creaturesControlled,Constants.Duration.EndOfGame)));
}","public VoiceOfResurgenceToken(){
  super(""String_Node_Str"",""String_Node_Str"");
  cardType.add(Constants.CardType.CREATURE);
  color.setGreen(true);
  color.setWhite(true);
  subtype.add(""String_Node_Str"");
  power=new MageInt(0);
  toughness=new MageInt(0);
  FilterControlledPermanent filter=new FilterControlledPermanent(""String_Node_Str"");
  filter.add(new CardTypePredicate(CardType.CREATURE));
  DynamicValue creaturesControlled=new PermanentsOnBattlefieldCount(filter);
  this.addAbility(new SimpleStaticAbility(Constants.Zone.BATTLEFIELD,new SetPowerToughnessSourceEffect(creaturesControlled,Constants.Duration.EndOfGame)));
}",0.9863891112890312
159756,"@Override public int gainLife(int amount,Game game){
  if (!canGainLife) {
    return 0;
  }
  GameEvent event=new GameEvent(GameEvent.EventType.GAIN_LIFE,playerId,playerId,playerId,amount,false);
  if (!game.replaceEvent(event)) {
    this.life+=event.getAmount();
    game.fireEvent(GameEvent.getEvent(GameEvent.EventType.GAINED_LIFE,playerId,playerId,playerId,amount));
    return amount;
  }
  return 0;
}","@Override public int gainLife(int amount,Game game){
  if (!canGainLife) {
    return 0;
  }
  GameEvent event=new GameEvent(GameEvent.EventType.GAIN_LIFE,playerId,playerId,playerId,amount,false);
  if (!game.replaceEvent(event)) {
    this.life+=event.getAmount();
    game.fireEvent(GameEvent.getEvent(GameEvent.EventType.GAINED_LIFE,playerId,playerId,playerId,event.getAmount()));
    return event.getAmount();
  }
  return 0;
}",0.9333333333333332
159757,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == EventType.SPELL_CAST && event.getZone() == Zone.LIBRARY) {
    Spell spell=game.getStack().getSpell(event.getTargetId());
    if (spell != null && spell.getControllerId().equals(super.getControllerId()) && spell.getCardType().contains(CardType.INSTANT) || spell.getCardType().contains(CardType.SORCERY)) {
      for (      Effect effect : this.getEffects()) {
        effect.setTargetPointer(new FixedTarget(event.getTargetId()));
      }
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == EventType.SPELL_CAST && event.getZone() == Zone.LIBRARY) {
    Spell spell=game.getStack().getSpell(event.getTargetId());
    if (spell != null && spell.getControllerId().equals(super.getControllerId()) && (spell.getCardType().contains(CardType.INSTANT) || spell.getCardType().contains(CardType.SORCERY))) {
      for (      Effect effect : this.getEffects()) {
        effect.setTargetPointer(new FixedTarget(event.getTargetId()));
      }
      return true;
    }
  }
  return false;
}",0.9982668977469672
159758,"@Override public DynamicValue copy(){
  return new TargetPermanentPowerCount();
}","@Override public DynamicValue copy(){
  return new TargetPermanentPowerPlusToughnessCount();
}",0.9257142857142856
159759,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getTargets().getFirstTarget());
  Player controller=game.getPlayer(source.getControllerId());
  FilterControlledPermanent filter=new FilterControlledPermanent(""String_Node_Str"");
  filter.add(new CardTypePredicate(CardType.CREATURE));
  filter.add(new ControllerPredicate(TargetController.YOU));
  TargetControlledPermanent target=new TargetControlledPermanent(1,1,filter,false);
  if (target.canChoose(player.getId(),game)) {
    player.choose(Outcome.Sacrifice,target,source.getSourceId(),game);
    Permanent permanent=game.getPermanent(target.getFirstTarget());
    if (permanent != null) {
      controller.gainLife(permanent.getToughness().getValue(),game);
      return permanent.sacrifice(source.getId(),game);
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getTargets().getFirstTarget());
  Player controller=game.getPlayer(source.getControllerId());
  FilterControlledPermanent filter=new FilterControlledPermanent(""String_Node_Str"");
  filter.add(new CardTypePredicate(CardType.CREATURE));
  filter.add(new ControllerPredicate(TargetController.YOU));
  TargetControlledPermanent target=new TargetControlledPermanent(1,1,filter,false);
  target.setRequired(true);
  if (target.canChoose(player.getId(),game)) {
    player.choose(Outcome.Sacrifice,target,source.getSourceId(),game);
    Permanent permanent=game.getPermanent(target.getFirstTarget());
    if (permanent != null) {
      controller.gainLife(permanent.getToughness().getValue(),game);
      return permanent.sacrifice(source.getId(),game);
    }
    return true;
  }
  return false;
}",0.983963344788087
159760,"@Override public WerewolfRansackerEffect copy(){
  return new WerewolfRansackerEffect(this);
}","@Override public AfflictedDeserter copy(){
  return new AfflictedDeserter(this);
}",0.6363636363636364
159761,"@Override public WerewolfRansacker copy(){
  return new WerewolfRansacker(this);
}","@Override public WerewolfRansackerEffect copy(){
  return new WerewolfRansackerEffect(this);
}",0.9318181818181818
159762,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    TargetControlledCreaturePermanent target=new TargetControlledCreaturePermanent();
    if (player.choose(this.outcome,target,source.getSourceId(),game)) {
      Permanent permanent=game.getPermanent(target.getFirstTarget());
      if (permanent != null) {
        return permanent.moveToZone(Constants.Zone.HAND,source.getId(),game,false);
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    TargetControlledCreaturePermanent target=new TargetControlledCreaturePermanent();
    target.setRequired(true);
    if (player.choose(this.outcome,target,source.getSourceId(),game)) {
      Permanent permanent=game.getPermanent(target.getFirstTarget());
      if (permanent != null) {
        return permanent.moveToZone(Constants.Zone.HAND,source.getId(),game,false);
      }
    }
    return true;
  }
  return false;
}",0.9727272727272728
159763,"/** 
 * 800.4a When a player leaves the game, all objects (see rule 109) owned by that player leave  the game and any effects which give that player control of any objects or players end. Then,  if that player controlled any objects on the stack not represented by cards, those objects  cease to exist. Then, if there are any objects still controlled by that player, those objects are exiled. This is not a state-based action. It happens as soon as the player leaves the game. If the player who left the game had priority at the time he or she left, priority passes to the next player in turn order who's still in the game. #
 * @param playerId 
 */
@Override public void leave(UUID playerId){
  Player player=getPlayer(playerId);
  player.leave();
  for (Iterator<Permanent> it=getBattlefield().getAllPermanents().iterator(); it.hasNext(); ) {
    Permanent perm=it.next();
    if (perm.getOwnerId().equals(playerId)) {
      if (perm.getAttachedTo() != null) {
        Permanent attachedTo=getPermanent(perm.getAttachedTo());
        if (attachedTo != null) {
          attachedTo.removeAttachment(perm.getId(),this);
        }
      }
      it.remove();
    }
  }
  this.getState().getContinuousEffects().removeInactiveEffects(this);
  for (Iterator<StackObject> it=getStack().iterator(); it.hasNext(); ) {
    StackObject object=it.next();
    if (object.getControllerId().equals(playerId)) {
      it.remove();
    }
  }
  for (Iterator<Permanent> it=getBattlefield().getAllPermanents().iterator(); it.hasNext(); ) {
    Permanent perm=it.next();
    if (perm.getControllerId().equals(playerId)) {
      perm.moveToExile(null,""String_Node_Str"",null,this);
    }
  }
  Iterator it=gameCards.entrySet().iterator();
  while (it.hasNext()) {
    Entry<UUID,Card> entry=(Entry<UUID,Card>)it.next();
    Card card=entry.getValue();
    if (card.getOwnerId().equals(playerId)) {
      it.remove();
    }
  }
}","/** 
 * 800.4a When a player leaves the game, all objects (see rule 109) owned by that player leave  the game and any effects which give that player control of any objects or players end. Then,  if that player controlled any objects on the stack not represented by cards, those objects  cease to exist. Then, if there are any objects still controlled by that player, those objects are exiled. This is not a state-based action. It happens as soon as the player leaves the game. If the player who left the game had priority at the time he or she left, priority passes to the next player in turn order who's still in the game. #
 * @param playerId 
 */
@Override public void leave(UUID playerId){
  Player player=getPlayer(playerId);
  player.leave();
  for (Iterator<Permanent> it=getBattlefield().getAllPermanents().iterator(); it.hasNext(); ) {
    Permanent perm=it.next();
    if (perm.getOwnerId().equals(playerId)) {
      if (perm.getAttachedTo() != null) {
        Permanent attachedTo=getPermanent(perm.getAttachedTo());
        if (attachedTo != null) {
          attachedTo.removeAttachment(perm.getId(),this);
        }
      }
      it.remove();
    }
  }
  this.getState().getContinuousEffects().removeInactiveEffects(this);
  for (Iterator<StackObject> it=getStack().iterator(); it.hasNext(); ) {
    StackObject object=it.next();
    if (object.getControllerId().equals(playerId)) {
      it.remove();
    }
  }
  for (Iterator<Permanent> it=getBattlefield().getAllPermanents().iterator(); it.hasNext(); ) {
    Permanent perm=it.next();
    if (perm.getControllerId().equals(playerId)) {
      perm.moveToExile(null,""String_Node_Str"",null,this);
    }
  }
  for (  ExileZone exile : this.getExile().getExileZones()) {
    for (Iterator<UUID> it=exile.iterator(); it.hasNext(); ) {
      Card card=this.getCard(it.next());
      if (card != null && card.getOwnerId().equals(playerId)) {
        it.remove();
      }
    }
  }
  Iterator it=gameCards.entrySet().iterator();
  while (it.hasNext()) {
    Entry<UUID,Card> entry=(Entry<UUID,Card>)it.next();
    Card card=entry.getValue();
    if (card.getOwnerId().equals(playerId)) {
      it.remove();
    }
  }
}",0.896399706098457
159764,"@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.UNTAP_STEP_PRE) {
    reset();
  }
  if (event.getType() == GameEvent.EventType.DREW_CARD && game.getPhase().getStep().getType().equals(PhaseStep.DRAW)) {
    UUID playerId=event.getPlayerId();
    if (playerId != null) {
      Integer amount=amountOfCardsDrawnThisTurn.get(playerId);
      if (amount == null) {
        amount=Integer.valueOf(1);
      }
 else {
        amount=Integer.valueOf(amount + 1);
      }
      amountOfCardsDrawnThisTurn.put(playerId,amount);
    }
  }
}","@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.UNTAP_STEP_PRE) {
    reset();
  }
  if (event.getType() == GameEvent.EventType.DREW_CARD && game.getPhase() != null && game.getPhase().getStep().getType().equals(PhaseStep.DRAW)) {
    UUID playerId=event.getPlayerId();
    if (playerId != null) {
      Integer amount=amountOfCardsDrawnThisTurn.get(playerId);
      if (amount == null) {
        amount=Integer.valueOf(1);
      }
 else {
        amount=Integer.valueOf(amount + 1);
      }
      amountOfCardsDrawnThisTurn.put(playerId,amount);
    }
  }
}",0.9773679798826488
159765,"@Override public boolean apply(Game game,Ability source){
  int damage=0;
  int xValue=source.getManaCostsToPay().getX();
  for (  UUID opponentId : game.getOpponents(source.getControllerId())) {
    damage+=game.getPlayer(opponentId).damage(xValue,source.getSourceId(),game,false,true);
  }
  game.getPlayer(source.getControllerId()).gainLife(damage,game);
  return true;
}","@Override public boolean apply(Game game,Ability source){
  int damage=0;
  int xValue=source.getManaCostsToPay().getX();
  for (  UUID opponentId : game.getOpponents(source.getControllerId())) {
    damage+=game.getPlayer(opponentId).damage(xValue * 2,source.getSourceId(),game,false,true);
  }
  game.getPlayer(source.getControllerId()).gainLife(damage,game);
  return true;
}",0.9946808510638298
159766,"private boolean targetsMyPermanent(UUID id,UUID controllerId,Game game){
  StackObject spell=game.getStack().getStackObject(id);
  if (spell != null) {
    Ability ability=spell.getStackAbility();
    for (    UUID permanentId : ability.getTargets().get(0).getTargets()) {
      Permanent permanent=game.getPermanent(permanentId);
      if (permanent != null && permanent.getControllerId().equals(controllerId)) {
        return true;
      }
    }
  }
  return false;
}","private boolean targetsMyPermanent(UUID id,UUID controllerId,Game game){
  StackObject spell=game.getStack().getStackObject(id);
  if (spell != null) {
    Ability ability=spell.getStackAbility();
    for (    Target target : ability.getTargets()) {
      for (      UUID permanentId : target.getTargets()) {
        Permanent permanent=game.getPermanent(permanentId);
        if (permanent != null && permanent.getControllerId().equals(controllerId)) {
          return true;
        }
      }
    }
  }
  return false;
}",0.8931451612903226
159767,"@Override public boolean apply(Game game,Ability source){
  Permanent sourcePermanent=game.getPermanent(source.getFirstTarget());
  if (sourcePermanent == null) {
    game.getLastKnownInformation(source.getFirstTarget(),Zone.BATTLEFIELD);
  }
  Permanent targetPermanent=(Permanent)game.getPermanent(source.getTargets().get(1).getFirstTarget());
  if (sourcePermanent != null && targetPermanent != null) {
    targetPermanent.damage(sourcePermanent.getPower().getValue(),sourcePermanent.getId(),game,true,false);
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent sourcePermanent=game.getPermanent(source.getFirstTarget());
  if (sourcePermanent == null) {
    sourcePermanent=(Permanent)game.getLastKnownInformation(source.getFirstTarget(),Zone.BATTLEFIELD);
  }
  Permanent targetPermanent=(Permanent)game.getPermanent(source.getTargets().get(1).getFirstTarget());
  if (sourcePermanent != null && targetPermanent != null) {
    targetPermanent.damage(sourcePermanent.getPower().getValue(),sourcePermanent.getId(),game,true,false);
    return true;
  }
  return false;
}",0.9760850310008856
159768,"@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  Permanent permanent=((ZoneChangeEvent)event).getTarget();
  if (permanent != null) {
    MageInt toughness=permanent.getToughness();
    Player player=(Player)this.getValue(""String_Node_Str"");
    player.gainLife(toughness.getValue(),game);
    return true;
  }
  return false;
}","@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  Permanent permanent=((ZoneChangeEvent)event).getTarget();
  if (permanent != null) {
    MageInt toughness=permanent.getToughness();
    Player player=game.getPlayer(source.getControllerId());
    if (player != null) {
      player.gainLife(toughness.getValue(),game);
    }
  }
  return false;
}",0.6855600539811066
159769,"protected Card pickTarget(List<Card> cards,Outcome outcome,Target target,Ability source,Game game){
  Card card;
  while (!cards.isEmpty()) {
    if (outcome.isGood()) {
      card=pickBestCard(cards,null,target,source,game);
    }
 else {
      card=pickWorstCard(cards,null,target,source,game);
    }
    if (source != null) {
      if (target.canTarget(card.getId(),source,game)) {
        return card;
      }
    }
 else {
      return card;
    }
    cards.remove(card);
  }
  return null;
}","protected Card pickTarget(List<Card> cards,Outcome outcome,Target target,Ability source,Game game){
  Card card;
  while (!cards.isEmpty()) {
    if (outcome.isGood()) {
      card=pickBestCard(cards,null,target,source,game);
    }
 else {
      card=pickWorstCard(cards,null,target,source,game);
    }
    if (source != null) {
      if (target.canTarget(card.getId(),this.getId(),source,game)) {
        return card;
      }
    }
 else {
      return card;
    }
    cards.remove(card);
  }
  return null;
}",0.8043694141012909
159770,"boolean canTarget(UUID id,Ability source,Game game);","boolean canTarget(UUID id,UUID playerId,Ability source,Game game);",0.8813559322033898
159771,"@Override public boolean canTarget(UUID id,Ability source,Game game){
  return canTarget(id,game);
}","@Override public boolean canTarget(UUID id,UUID playerId,Ability source,Game game){
  return canTarget(id,source,game);
}",0.9049773755656108
159772,"@Override public boolean canTarget(UUID id,Ability source,Game game){
  Card card=game.getCard(id);
  if (card != null && game.getState().getZone(card.getId()) == Zone.GRAVEYARD)   if (game.getPlayer(source.getControllerId()).getGraveyard().contains(id))   return filter.match(card,game);
  return false;
}","@Override public boolean canTarget(UUID id,UUID playerId,Ability ability,Game game){
  Card card=game.getCard(id);
  if (card != null && game.getState().getZone(card.getId()) == Zone.GRAVEYARD)   if (game.getPlayer(playerId).getGraveyard().contains(id)) {
    return filter.match(card,game);
  }
  return false;
}",0.6494345718901454
159773,"@Override public boolean canTarget(UUID id,Ability source,Game game){
  Permanent permanent=game.getPermanent(id);
  Player player=game.getPlayer(id);
  if (source != null) {
    MageObject targetSource=game.getObject(source.getSourceId());
    if (permanent != null) {
      return permanent.canBeTargetedBy(targetSource,source.getControllerId(),game) && filter.match(permanent,source.getSourceId(),source.getControllerId(),game);
    }
    if (player != null) {
      return player.canBeTargetedBy(targetSource,game) && filter.match(player,game);
    }
  }
  if (permanent != null) {
    return filter.match(permanent,game);
  }
  if (player != null) {
    return filter.match(player,game);
  }
  return false;
}","@Override public boolean canTarget(UUID id,UUID playerId,Ability source,Game game){
  return canTarget(id,source,game);
}",0.2514970059880239
159774,"@Override public boolean canTarget(UUID id,Ability source,Game game){
  Permanent permanent=game.getPermanent(id);
  if (permanent != null) {
    if (source != null) {
      MageObject targetSource=game.getObject(source.getSourceId());
      return permanent.canBeTargetedBy(targetSource,source.getControllerId(),game) && filter.match(permanent,source.getSourceId(),source.getControllerId(),game);
    }
 else {
      return filter.match(permanent,game);
    }
  }
  return false;
}","@Override public boolean canTarget(UUID id,UUID playerId,Ability source,Game game){
  return canTarget(id,source,game);
}",0.3482587064676617
159775,"@Override public boolean canTarget(UUID id,Ability source,Game game){
  Player player=game.getPlayer(id);
  MageObject targetSource=game.getObject(attackerId);
  if (player != null) {
    return player.canBeTargetedBy(targetSource,game) && filter.match(player,game);
  }
  Permanent permanent=game.getPermanent(id);
  if (permanent != null) {
    UUID controllerId=null;
    if (source != null) {
      controllerId=source.getControllerId();
    }
    return permanent.canBeTargetedBy(targetSource,controllerId,game) && filter.match(permanent,game);
  }
  return false;
}","@Override public boolean canTarget(UUID id,UUID playerId,Ability source,Game game){
  return canTarget(id,source,game);
}",0.2976878612716763
159776,"@Override public boolean canTarget(UUID id,Ability source,Game game){
  Permanent permanent=game.getPermanent(id);
  if (permanent != null) {
    if (source != null) {
      MageObject targetSource=game.getObject(source.getSourceId());
      return permanent.canBeTargetedBy(targetSource,source.getControllerId(),game) && filter.match(permanent,source.getSourceId(),source.getControllerId(),game);
    }
 else {
      return filter.match(permanent,game);
    }
  }
  Spell spell=game.getStack().getSpell(id);
  if (spell != null) {
    return filter.match(spell,game);
  }
  return false;
}","@Override public boolean canTarget(UUID id,UUID playerId,Ability source,Game game){
  return canTarget(id,source,game);
}",0.2953586497890295
159777,"public boolean putOntoBattlefield(int amount,Game game,UUID sourceId,UUID controllerId){
  Card source=game.getCard(sourceId);
  String setCode=source != null ? source.getExpansionSetCode() : null;
  GameEvent event=GameEvent.getEvent(EventType.CREATE_TOKEN,null,sourceId,controllerId,amount);
  if (!game.replaceEvent(event)) {
    amount=event.getAmount();
    for (int i=0; i < amount; i++) {
      PermanentToken permanent=new PermanentToken(this,controllerId,setCode,game);
      game.getState().addCard(permanent);
      game.addPermanent(permanent);
      this.lastAddedTokenId=permanent.getId();
      permanent.entersBattlefield(sourceId,game,Zone.OUTSIDE,true);
      game.applyEffects();
      game.fireEvent(new ZoneChangeEvent(permanent,controllerId,Zone.OUTSIDE,Zone.BATTLEFIELD));
    }
    return true;
  }
  return false;
}","public boolean putOntoBattlefield(int amount,Game game,UUID sourceId,UUID controllerId){
  Card source=game.getCard(sourceId);
  String setCode=source != null ? source.getExpansionSetCode() : null;
  GameEvent event=GameEvent.getEvent(EventType.CREATE_TOKEN,null,sourceId,controllerId,amount);
  if (!game.replaceEvent(event)) {
    amount=event.getAmount();
    for (int i=0; i < amount; i++) {
      PermanentToken permanent=new PermanentToken(this,controllerId,setCode,game);
      game.getState().addCard(permanent);
      game.addPermanent(permanent);
      this.lastAddedTokenId=permanent.getId();
      game.setScopeRelevant(true);
      game.applyEffects();
      permanent.entersBattlefield(sourceId,game,Zone.OUTSIDE,true);
      game.setScopeRelevant(false);
      game.applyEffects();
      game.fireEvent(new ZoneChangeEvent(permanent,controllerId,Zone.OUTSIDE,Zone.BATTLEFIELD));
    }
    return true;
  }
  return false;
}",0.9448818897637796
159778,"private void setText(){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  String p=power.toString();
  if (!p.startsWith(""String_Node_Str""))   sb.append(""String_Node_Str"");
  sb.append(p).append(""String_Node_Str"");
  String t=toughness.toString();
  if (!t.startsWith(""String_Node_Str"")) {
    if (p.startsWith(""String_Node_Str""))     sb.append(""String_Node_Str"");
 else     sb.append(""String_Node_Str"");
  }
  sb.append(t);
  if (duration != Duration.WhileOnBattlefield)   sb.append(""String_Node_Str"").append(duration.toString());
  String message=power.getMessage();
  if (message.length() == 0)   message=toughness.getMessage();
  if (message.length() > 0) {
    sb.append(""String_Node_Str"");
  }
  sb.append(message);
  staticText=sb.toString();
}","private void setText(){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  String p=power.toString();
  if (!p.startsWith(""String_Node_Str""))   sb.append(""String_Node_Str"");
  sb.append(p).append(""String_Node_Str"");
  String t=toughness.toString();
  if (!t.startsWith(""String_Node_Str"")) {
    if (t.startsWith(""String_Node_Str""))     sb.append(""String_Node_Str"");
 else     sb.append(""String_Node_Str"");
  }
  sb.append(t);
  if (duration != Duration.WhileOnBattlefield)   sb.append(""String_Node_Str"").append(duration.toString());
  String message=power.getMessage();
  if (message.length() == 0)   message=toughness.getMessage();
  if (message.length() > 0) {
    sb.append(""String_Node_Str"");
  }
  sb.append(message);
  staticText=sb.toString();
}",0.9987096774193548
159779,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.TAPPED_FOR_MANA) {
    Permanent land=game.getPermanent(event.getTargetId());
    if (land != null && filter.match(land,game)) {
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.TAPPED_FOR_MANA) {
    Permanent land=game.getPermanent(event.getTargetId());
    if (land != null && filter.match(land,this.getSourceId(),this.getControllerId(),game)) {
      return true;
    }
  }
  return false;
}",0.9315960912052116
159780,"/** 
 * 800.4a When a player leaves the game, all objects (see rule 109) owned by that player leave  the game and any effects which give that player control of any objects or players end. Then,  if that player controlled any objects on the stack not represented by cards, those objects  cease to exist. Then, if there are any objects still controlled by that player, those objects are exiled. This is not a state-based action. It happens as soon as the player leaves the game. If the player who left the game had priority at the time he or she left, priority passes to the next player in turn order who's still in the game. #
 * @param playerId 
 */
@Override public void leave(UUID playerId){
  Player player=getPlayer(playerId);
  player.leave();
  for (Iterator<Permanent> it=getBattlefield().getAllPermanents().iterator(); it.hasNext(); ) {
    Permanent perm=it.next();
    if (perm.getOwnerId().equals(playerId)) {
      if (perm.getAttachedTo() != null) {
        Permanent attachedTo=getPermanent(perm.getAttachedTo());
        if (attachedTo != null) {
          attachedTo.removeAttachment(perm.getId(),this);
        }
      }
      it.remove();
    }
  }
  for (Iterator<StackObject> it=getStack().iterator(); it.hasNext(); ) {
    StackObject object=it.next();
    if (object.getControllerId().equals(playerId)) {
      it.remove();
    }
  }
  for (Iterator<Permanent> it=getBattlefield().getAllPermanents().iterator(); it.hasNext(); ) {
    Permanent perm=it.next();
    if (perm.getControllerId().equals(playerId)) {
      perm.moveToExile(null,""String_Node_Str"",null,this);
    }
  }
}","/** 
 * 800.4a When a player leaves the game, all objects (see rule 109) owned by that player leave  the game and any effects which give that player control of any objects or players end. Then,  if that player controlled any objects on the stack not represented by cards, those objects  cease to exist. Then, if there are any objects still controlled by that player, those objects are exiled. This is not a state-based action. It happens as soon as the player leaves the game. If the player who left the game had priority at the time he or she left, priority passes to the next player in turn order who's still in the game. #
 * @param playerId 
 */
@Override public void leave(UUID playerId){
  Player player=getPlayer(playerId);
  player.leave();
  for (Iterator<Permanent> it=getBattlefield().getAllPermanents().iterator(); it.hasNext(); ) {
    Permanent perm=it.next();
    if (perm.getOwnerId().equals(playerId)) {
      if (perm.getAttachedTo() != null) {
        Permanent attachedTo=getPermanent(perm.getAttachedTo());
        if (attachedTo != null) {
          attachedTo.removeAttachment(perm.getId(),this);
        }
      }
      it.remove();
    }
  }
  this.getState().getContinuousEffects().removeInactiveEffects(this);
  for (Iterator<StackObject> it=getStack().iterator(); it.hasNext(); ) {
    StackObject object=it.next();
    if (object.getControllerId().equals(playerId)) {
      it.remove();
    }
  }
  for (Iterator<Permanent> it=getBattlefield().getAllPermanents().iterator(); it.hasNext(); ) {
    Permanent perm=it.next();
    if (perm.getControllerId().equals(playerId)) {
      perm.moveToExile(null,""String_Node_Str"",null,this);
    }
  }
  Iterator it=gameCards.entrySet().iterator();
  while (it.hasNext()) {
    Entry<UUID,Card> entry=(Entry<UUID,Card>)it.next();
    Card card=entry.getValue();
    if (card.getOwnerId().equals(playerId)) {
      it.remove();
    }
  }
}",0.9130806497577656
159781,"@Override public BloodSeeker copy(){
  return new BloodSeeker(this);
}","@Override public BloodSeekerTriggeredAbility copy(){
  return new BloodSeekerTriggeredAbility(this);
}",0.813953488372093
159782,"@Override public boolean isLegal(Ability source,Game game){
  for (  UUID targetId : targets.keySet()) {
    Card card=game.getCard(targetId);
    if (card != null) {
      if (zoneChangeCounters.containsKey(targetId) && zoneChangeCounters.get(targetId) != card.getZoneChangeCounter()) {
        continue;
      }
    }
    if (game.replaceEvent(GameEvent.getEvent(EventType.TARGET,targetId,source.getId(),source.getControllerId()))) {
      continue;
    }
    if (canTarget(targetId,source,game)) {
      return true;
    }
  }
  return false;
}","@Override public boolean isLegal(Ability source,Game game){
  for (  UUID targetId : targets.keySet()) {
    Card card=game.getCard(targetId);
    if (card != null) {
      if (zoneChangeCounters.containsKey(targetId) && zoneChangeCounters.get(targetId) != card.getZoneChangeCounter()) {
        continue;
      }
    }
    if (game.replaceEvent(GameEvent.getEvent(EventType.TARGET,targetId,source.getId(),source.getControllerId()))) {
      continue;
    }
    if (canTarget(targetId,source,game)) {
      return true;
    }
  }
  if (minNumberOfTargets == 0 && targets.isEmpty()) {
    return true;
  }
  return false;
}",0.9170230966638152
159783,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD && game.getOpponents(this.controllerId).contains(event.getPlayerId())) {
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    Card card=zEvent.getTarget();
    if (card != null && card.getCardType().contains(CardType.CREATURE)) {
      for (      Effect effect : this.getEffects()) {
        effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
      }
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD && game.getOpponents(this.controllerId).contains(event.getPlayerId())) {
    EntersTheBattlefieldEvent zEvent=(EntersTheBattlefieldEvent)event;
    Card card=zEvent.getTarget();
    if (card != null && card.getCardType().contains(CardType.CREATURE)) {
      for (      Effect effect : this.getEffects()) {
        effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
      }
      return true;
    }
  }
  return false;
}",0.9495495495495496
159784,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD && game.getOpponents(this.controllerId).contains(event.getPlayerId())) {
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    Card card=zEvent.getTarget();
    if (card != null && card.getCardType().contains(CardType.CREATURE)) {
      for (      Effect effect : this.getEffects()) {
        effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
      }
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD && game.getOpponents(this.controllerId).contains(event.getPlayerId())) {
    EntersTheBattlefieldEvent zEvent=(EntersTheBattlefieldEvent)event;
    Card card=zEvent.getTarget();
    if (card != null && card.getCardType().contains(CardType.CREATURE)) {
      for (      Effect effect : this.getEffects()) {
        effect.setTargetPointer(new FixedTarget(event.getPlayerId()));
      }
      return true;
    }
  }
  return false;
}",0.9495495495495496
159785,"@Override public void addAbility(Ability ability,UUID sourceId,Game game){
  if (!abilities.containsKey(ability.getId())) {
    Ability copyAbility=ability.copy();
    copyAbility.setControllerId(controllerId);
    copyAbility.setSourceId(objectId);
    game.getState().addAbility(copyAbility,sourceId,this);
    abilities.add(copyAbility);
  }
}","@Override public void addAbility(Ability ability,UUID sourceId,Game game){
  if (!abilities.containsKey(ability.getId())) {
    Ability copyAbility=ability.copy();
    copyAbility.newId();
    copyAbility.setControllerId(controllerId);
    copyAbility.setSourceId(objectId);
    game.getState().addAbility(copyAbility,sourceId,this);
    abilities.add(copyAbility);
  }
}",0.9651324965132496
159786,"@Override public boolean isGameOver(){
  if (state.isGameOver()) {
    return true;
  }
  int remainingPlayers=0;
  int numLosers=0;
  for (  Player player : state.getPlayers().values()) {
    if (!player.hasLeft()) {
      remainingPlayers++;
    }
    if (player.hasLost()) {
      numLosers++;
    }
  }
  if (remainingPlayers <= 1 || numLosers >= state.getPlayers().size() - 1) {
    state.endGame();
    endTime=new Date();
    return true;
  }
  return false;
}","@Override public boolean isGameOver(){
  if (state.isGameOver()) {
    return true;
  }
  int remainingPlayers=0;
  int numLosers=0;
  for (  Player player : state.getPlayers().values()) {
    if (!player.hasLeft()) {
      remainingPlayers++;
    }
    if (player.hasLost()) {
      numLosers++;
    }
  }
  if (remainingPlayers <= 1 || numLosers >= state.getPlayers().size() - 1) {
    for (    Player player : state.getPlayers().values()) {
      if (!player.hasLeft() && !player.hasLost()) {
        player.won(this);
      }
    }
    state.endGame();
    endTime=new Date();
    return true;
  }
  return false;
}",0.860036832412523
159787,"@Override public void won(Game game){
  if (!game.replaceEvent(new GameEvent(GameEvent.EventType.WINS,null,null,playerId))) {
    if (!this.loses) {
      if (game.getPlayers().size() > 2) {
        for (        UUID opponentId : game.getOpponents(playerId)) {
          game.getPlayer(opponentId).lost(game);
        }
      }
 else {
        this.wins=true;
        game.end();
      }
    }
  }
}","@Override public void won(Game game){
  if (!game.replaceEvent(new GameEvent(GameEvent.EventType.WINS,null,null,playerId))) {
    if (!this.loses) {
      if (game.getPlayers().size() > 2) {
        for (        UUID opponentId : game.getOpponents(playerId)) {
          Player opponent=game.getPlayer(opponentId);
          if (!opponent.hasLost()) {
            game.getPlayer(opponentId).lost(game);
          }
        }
        this.wins=true;
      }
 else {
        this.wins=true;
        game.end();
      }
    }
  }
}",0.6839266450916937
159788,"public synchronized void leaveTable(UUID userId){
  if (table.getState() == TableState.WAITING || table.getState() == TableState.STARTING) {
    table.leaveTable(userPlayerMap.get(userId));
  }
}","public synchronized void leaveTable(UUID userId){
  if (table.getState() == TableState.WAITING || table.getState() == TableState.STARTING) {
    UUID playerId=userPlayerMap.get(userId);
    if (playerId != null) {
      table.leaveTable(playerId);
      if (table.isTournament()) {
        tournament.leave(playerId);
      }
 else {
        match.leave(playerId);
      }
      User user=UserManager.getInstance().getUser(userId);
      user.removeTable(playerId);
      userPlayerMap.remove(userId);
    }
  }
}",0.4943502824858757
159789,"@Override public void leave(UUID playerId){
}","@Override public void leave(UUID playerId){
  if (players.containsKey(playerId)) {
    players.remove(playerId);
  }
}",0.5521472392638037
159790,"@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  Permanent toCopyToPermanent=game.getPermanent(event.getTargetId());
  Permanent sourcePermanent=game.getPermanent(source.getSourceId());
  if (sourcePermanent != null && toCopyToPermanent != null && sourcePermanent.getAttachedTo() != null) {
    Permanent toCopyFromPermanent=game.getPermanent(sourcePermanent.getAttachedTo());
    if (toCopyToPermanent != null) {
      game.copyPermanent(toCopyFromPermanent,toCopyToPermanent,source,new EmptyApplyToPermanent());
    }
  }
  return false;
}","@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  Permanent toCopyToPermanent=game.getPermanent(event.getTargetId());
  Permanent sourcePermanent=game.getPermanent(source.getSourceId());
  if (sourcePermanent != null && toCopyToPermanent != null && sourcePermanent.getAttachedTo() != null) {
    Permanent toCopyFromPermanent=game.getPermanent(sourcePermanent.getAttachedTo());
    if (toCopyFromPermanent != null) {
      game.copyPermanent(toCopyFromPermanent,toCopyToPermanent,source,new EmptyApplyToPermanent());
    }
  }
  return false;
}",0.9947916666666666
159791,"@Override public boolean apply(Game game,Ability source){
  Permanent sourcePermanent=game.getPermanent(source.getSourceId());
  if (sourcePermanent != null) {
    int amount=sourcePermanent.getCounters().getCount(CounterType.P1P1);
    if (amount > 0) {
      sourcePermanent.getCounters().addCounter(CounterType.P1P1.createInstance(amount));
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent sourcePermanent=game.getPermanent(source.getSourceId());
  if (sourcePermanent != null) {
    int amount=sourcePermanent.getCounters().getCount(CounterType.P1P1);
    if (amount > 0) {
      sourcePermanent.addCounters(CounterType.P1P1.createInstance(amount),game);
    }
    return true;
  }
  return false;
}",0.9739583333333334
159792,"@Override public boolean apply(Game game,Ability source){
  Card card=game.getCard(source.getFirstTarget());
  if (card != null) {
    Player player=game.getPlayer(card.getOwnerId());
    if (player != null) {
      card.moveToZone(Zone.HAND,source.getId(),game,false);
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Card card=game.getCard(source.getFirstTarget());
  if (card != null) {
    Player player=game.getPlayer(card.getOwnerId());
    if (player != null) {
      card.moveToZone(Zone.HAND,source.getSourceId(),game,false);
      return true;
    }
  }
  return false;
}",0.9905956112852664
159793,"public CardImpl(final CardImpl card){
  super(card);
  ownerId=card.ownerId;
  cardNumber=card.cardNumber;
  expansionSetCode=card.expansionSetCode;
  rarity=card.rarity;
  for (  Watcher watcher : (List<Watcher>)card.watchers) {
    this.watchers.add(watcher.copy());
  }
  faceDown=card.faceDown;
  canTransform=card.canTransform;
  if (canTransform) {
    secondSideCard=card.secondSideCard;
    nightCard=card.nightCard;
  }
  if (card.info != null) {
    info=new HashMap<String,String>();
    info.putAll(card.info);
  }
  usesVariousArt=card.usesVariousArt;
  this.counters=card.counters.copy();
}","public CardImpl(final CardImpl card){
  super(card);
  ownerId=card.ownerId;
  cardNumber=card.cardNumber;
  expansionSetCode=card.expansionSetCode;
  rarity=card.rarity;
  for (  Watcher watcher : (List<Watcher>)card.watchers) {
    this.watchers.add(watcher.copy());
  }
  faceDown=card.faceDown;
  canTransform=card.canTransform;
  if (canTransform) {
    secondSideCard=card.secondSideCard;
    nightCard=card.nightCard;
  }
  zoneChangeCounter=card.zoneChangeCounter;
  if (card.info != null) {
    info=new HashMap<String,String>();
    info.putAll(card.info);
  }
  usesVariousArt=card.usesVariousArt;
  this.counters=card.counters.copy();
}",0.9648562300319488
159794,"public GameImpl(final GameImpl<T> game){
  long t1=0;
  if (logger.isDebugEnabled()) {
    t1=System.currentTimeMillis();
  }
  this.id=game.id;
  this.ready=game.ready;
  this.startingPlayerId=game.startingPlayerId;
  this.winnerId=game.winnerId;
  this.range=game.range;
  this.attackOption=game.attackOption;
  this.state=game.state.copy();
  this.gameCards=game.gameCards;
  this.simulation=game.simulation;
  this.gameOptions=game.gameOptions;
  this.lki.putAll(game.lki);
  this.shortLivingLKI.putAll(game.shortLivingLKI);
  if (logger.isDebugEnabled()) {
    copyCount++;
    copyTime+=(System.currentTimeMillis() - t1);
  }
  this.actions=new LinkedList<MageAction>();
  this.stateCheckRequired=game.stateCheckRequired;
  this.scorePlayer=game.scorePlayer;
  this.scopeRelevant=game.scopeRelevant;
}","public GameImpl(final GameImpl<T> game){
  long t1=0;
  if (logger.isDebugEnabled()) {
    t1=System.currentTimeMillis();
  }
  this.id=game.id;
  this.ready=game.ready;
  this.startingPlayerId=game.startingPlayerId;
  this.winnerId=game.winnerId;
  this.range=game.range;
  this.attackOption=game.attackOption;
  this.state=game.state.copy();
  for (  Map.Entry<UUID,Card> entry : game.gameCards.entrySet()) {
    this.gameCards.put(entry.getKey(),entry.getValue().copy());
  }
  this.simulation=game.simulation;
  this.gameOptions=game.gameOptions;
  this.lki.putAll(game.lki);
  this.shortLivingLKI.putAll(game.shortLivingLKI);
  if (logger.isDebugEnabled()) {
    copyCount++;
    copyTime+=(System.currentTimeMillis() - t1);
  }
  this.actions=new LinkedList<MageAction>();
  this.stateCheckRequired=game.stateCheckRequired;
  this.scorePlayer=game.scorePlayer;
  this.scopeRelevant=game.scopeRelevant;
}",0.9265734265734266
159795,"protected String getMessageText(Game game){
  StringBuilder sb=new StringBuilder();
  MageObject object=game.getObject(this.sourceId);
  if (object != null) {
    if (object instanceof StackAbility) {
      Card card=game.getCard(((StackAbility)object).getSourceId());
      if (card != null) {
        sb.append(card.getName());
      }
 else {
        sb.append(object.getName());
      }
    }
 else {
      if (object instanceof Spell) {
        Spell<?> spell=(Spell<?>)object;
        String castText=spell.getSpellAbility().toString();
        sb.append((castText.startsWith(""String_Node_Str"") ? castText.substring(5) : castText));
        if (spell.getFromZone() == Zone.GRAVEYARD) {
          sb.append(""String_Node_Str"");
        }
        sb.append(getOptionalTextSuffix(game,spell));
      }
 else {
        sb.append(object.getName());
      }
    }
  }
 else {
    sb.append(""String_Node_Str"");
  }
  if (getTargets().size() > 0) {
    sb.append(""String_Node_Str"");
    for (    Target target : getTargets()) {
      sb.append(target.getTargetedName(game));
    }
  }
  return sb.toString();
}","protected String getMessageText(Game game){
  StringBuilder sb=new StringBuilder();
  MageObject object=game.getObject(this.sourceId);
  if (object == null) {
    object=game.getLastKnownInformation(this.sourceId,Zone.BATTLEFIELD);
  }
  if (object != null) {
    if (object instanceof StackAbility) {
      Card card=game.getCard(((StackAbility)object).getSourceId());
      if (card != null) {
        sb.append(card.getName());
      }
 else {
        sb.append(object.getName());
      }
    }
 else {
      if (object instanceof Spell) {
        Spell<?> spell=(Spell<?>)object;
        String castText=spell.getSpellAbility().toString();
        sb.append((castText.startsWith(""String_Node_Str"") ? castText.substring(5) : castText));
        if (spell.getFromZone() == Zone.GRAVEYARD) {
          sb.append(""String_Node_Str"");
        }
        sb.append(getOptionalTextSuffix(game,spell));
      }
 else {
        sb.append(object.getName());
      }
    }
  }
 else {
    sb.append(""String_Node_Str"");
  }
  if (getTargets().size() > 0) {
    sb.append(""String_Node_Str"");
    for (    Target target : getTargets()) {
      sb.append(target.getTargetedName(game));
    }
  }
  return sb.toString();
}",0.9563714902807776
159796,"private void checkMiracleAbility(GameEvent event,Game game){
  Card card=game.getCard(event.getTargetId());
  if (card != null) {
    for (    Ability ability : card.getAbilities()) {
      if (ability instanceof MiracleAbility) {
        Player controller=game.getPlayer(ability.getControllerId());
        if (controller != null) {
          game.getContinuousEffects().costModification(ability,game);
          ManaCosts<ManaCost> manaCostsToPay=ability.getManaCostsToPay();
          Cards cards=new CardsImpl(Zone.PICK);
          cards.add(card);
          controller.lookAtCards(""String_Node_Str"",cards,game);
          if (controller.chooseUse(Outcome.Benefit,""String_Node_Str"" + manaCostsToPay.getText() + ""String_Node_Str"",game)) {
            controller.revealCards(""String_Node_Str"",cards,game);
            ManaCosts costRef=card.getSpellAbility().getManaCostsToPay();
            costRef.clear();
            for (            ManaCost manaCost : manaCostsToPay) {
              costRef.add(manaCost);
            }
            controller.cast(card.getSpellAbility(),game,false);
            break;
          }
        }
      }
    }
  }
}","private void checkMiracleAbility(GameEvent event,Game game){
  Card card=game.getCard(event.getTargetId());
  if (card != null) {
    for (    Ability ability : card.getAbilities()) {
      if (ability instanceof MiracleAbility) {
        Player controller=game.getPlayer(ability.getControllerId());
        if (controller != null) {
          game.getContinuousEffects().costModification(ability,game);
          ManaCosts<ManaCost> manaCostsToPay=ability.getManaCostsToPay();
          Cards cards=new CardsImpl(Zone.PICK);
          cards.add(card);
          controller.lookAtCards(""String_Node_Str"",cards,game);
          if (controller.chooseUse(Outcome.Benefit,""String_Node_Str"" + manaCostsToPay.getText() + ""String_Node_Str"",game)) {
            controller.revealCards(""String_Node_Str"",cards,game);
            ManaCosts costRef=card.getSpellAbility().getManaCostsToPay();
            costRef.clear();
            for (            ManaCost manaCost : manaCostsToPay) {
              costRef.add(manaCost);
            }
            controller.cast(card.getSpellAbility(),game,false);
            costRef.clear();
            for (            ManaCost manaCost : card.getSpellAbility().getManaCosts()) {
              costRef.add(manaCost);
            }
            break;
          }
        }
      }
    }
  }
}",0.931340872374798
159797,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD) {
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    if (zEvent.getFromZone() == null && this.echoPaid) {
      this.echoPaid=false;
    }
  }
  if (event.getType() == GameEvent.EventType.UPKEEP_STEP_PRE) {
    if (lastController != null) {
      if (!lastController.equals(this.controllerId)) {
        this.echoPaid=false;
      }
    }
    lastController=this.getControllerId();
  }
  if (event.getType() == GameEvent.EventType.UPKEEP_STEP_PRE && event.getPlayerId().equals(this.controllerId) && lastController.equals(this.controllerId) && !this.echoPaid) {
    this.echoPaid=true;
    return true;
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD) {
    EntersTheBattlefieldEvent zEvent=(EntersTheBattlefieldEvent)event;
    if (zEvent.getFromZone() == null && this.echoPaid) {
      this.echoPaid=false;
    }
  }
  if (event.getType() == GameEvent.EventType.UPKEEP_STEP_PRE) {
    if (lastController != null) {
      if (!lastController.equals(this.controllerId)) {
        this.echoPaid=false;
      }
    }
    lastController=this.getControllerId();
  }
  if (event.getType() == GameEvent.EventType.UPKEEP_STEP_PRE && event.getPlayerId().equals(this.controllerId) && lastController.equals(this.controllerId) && !this.echoPaid) {
    this.echoPaid=true;
    return true;
  }
  return false;
}",0.961139896373057
159798,"@Override public boolean apply(Game game,Ability source){
  ObjectColor chosenColor=(ObjectColor)game.getState().getValue(source.getSourceId() + ""String_Node_Str"");
  filter2.add(new ColorPredicate(chosenColor));
  filter2.setMessage(chosenColor.getDescription());
  setAbility(new ProtectionAbility(new FilterCard(filter2)));
  return super.apply(game,source);
}","@Override public boolean apply(Game game,Ability source){
  filter2.add(new ColorPredicate(chosenColor));
  filter2.setMessage(chosenColor.getDescription());
  setAbility(new ProtectionAbility(new FilterCard(filter2)));
  return super.apply(game,source);
}",0.2778675282714055
159799,"public GainProtectionFromChosenColorEffect(final GainProtectionFromChosenColorEffect effect){
  super(effect);
  this.filter2=effect.filter2.copy();
}","public GainProtectionFromChosenColorEffect(final GainProtectionFromChosenColorEffect effect){
  super(effect);
  this.filter2=effect.filter2.copy();
  this.chosenColor=effect.chosenColor;
}",0.8849557522123894
159800,"public List<Integer> asList(final int[] is){
  List<Integer> list=new ArrayList<Integer>();
  for (  int i : is)   list.add(i);
  return list;
}","public List<Integer> asList(final int[] is){
  List<Integer> list=new ArrayList<Integer>();
  for (  int i : is) {
    list.add(i);
  }
  return list;
}",0.972972972972973
159801,"@Override public void mousePressed(MouseEvent e){
  if (e.getClickCount() == 2 && !e.isConsumed()) {
    e.consume();
    Object obj=e.getSource();
    if (obj instanceof Card) {
      if (e.isShiftDown())       cardEventSource.shiftDoubleClick(((Card)obj).getOriginal(),""String_Node_Str"");
 else       cardEventSource.doubleClick(((Card)obj).getOriginal(),""String_Node_Str"");
    }
 else     if (obj instanceof MageCard) {
      if (e.isShiftDown())       cardEventSource.shiftDoubleClick(((MageCard)obj).getOriginal(),""String_Node_Str"");
 else       cardEventSource.doubleClick(((MageCard)obj).getOriginal(),""String_Node_Str"");
    }
  }
}","@Override public void mousePressed(MouseEvent e){
  if (e.getClickCount() == 2 && !e.isConsumed()) {
    e.consume();
    Object obj=e.getSource();
    if (obj instanceof Card) {
      if (e.isShiftDown()) {
        cardEventSource.shiftDoubleClick(((Card)obj).getOriginal(),""String_Node_Str"");
      }
 else {
        cardEventSource.doubleClick(((Card)obj).getOriginal(),""String_Node_Str"");
      }
    }
 else     if (obj instanceof MageCard) {
      if (e.isShiftDown()) {
        cardEventSource.shiftDoubleClick(((MageCard)obj).getOriginal(),""String_Node_Str"");
      }
 else {
        cardEventSource.doubleClick(((MageCard)obj).getOriginal(),""String_Node_Str"");
      }
    }
  }
}",0.9413533834586466
159802,"private void redrawCards(){
  if (cards == null)   cards=new CardsView();
  currentView.loadCards(cards,null,false,bigCard,gameId);
}","private void redrawCards(){
  if (cards == null) {
    cards=new CardsView();
  }
  currentView.loadCards(cards,null,false,bigCard,gameId);
}",0.9708029197080292
159803,"/** 
 * Creates new form Cards 
 */
public CardsList(){
  initComponents();
  makeTransparent();
  initListViewComponents();
  currentView=mainModel;
}","/** 
 * Creates new form Cards 
 */
public CardsList(){
  initComponents();
  makeTransparent();
  initListViewComponents();
}",0.9097472924187726
159804,"public void initListViewComponents(){
  mainTable=new JTable();
  mainModel=new TableModel();
  mainModel.addListeners(mainTable);
  mainTable.setModel(mainModel);
  mainTable.setForeground(Color.white);
  DefaultTableCellRenderer myRenderer=(DefaultTableCellRenderer)mainTable.getDefaultRenderer(String.class);
  myRenderer.setBackground(new Color(0,0,0,100));
  mainTable.getColumnModel().getColumn(0).setMaxWidth(25);
  mainTable.getColumnModel().getColumn(0).setPreferredWidth(25);
  mainTable.getColumnModel().getColumn(1).setPreferredWidth(110);
  mainTable.getColumnModel().getColumn(2).setPreferredWidth(90);
  mainTable.getColumnModel().getColumn(3).setPreferredWidth(50);
  mainTable.getColumnModel().getColumn(4).setPreferredWidth(170);
  mainTable.getColumnModel().getColumn(5).setPreferredWidth(30);
  mainTable.getColumnModel().getColumn(6).setPreferredWidth(15);
  mainTable.getColumnModel().getColumn(7).setPreferredWidth(15);
  if (PreferencesDialog.getCachedValue(PreferencesDialog.KEY_DRAFT_PILES_TOGGLE,""String_Node_Str"").equals(""String_Node_Str"")) {
    jScrollPane1.setViewportView(mainTable);
    cbSortBy.setEnabled(false);
    chkPiles.setEnabled(false);
  }
 else {
    jToggleCardView.setSelected(true);
    jToggleListView.setSelected(false);
    currentView=this;
    jScrollPane1.setViewportView(cardArea);
    cbSortBy.setEnabled(true);
    chkPiles.setEnabled(true);
  }
  mainTable.setOpaque(false);
  mainTable.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      if (e.getClickCount() == 2 && !e.isConsumed()) {
        e.consume();
        handleDoubleClick();
      }
    }
  }
);
  mainModel.setUpdateCountsCallback(new UpdateCountsCallback(lblCount,lblCreatureCount,lblLandCount));
}","public void initListViewComponents(){
  mainTable=new JTable();
  mainModel=new TableModel();
  mainModel.addListeners(mainTable);
  mainTable.setModel(mainModel);
  mainTable.setForeground(Color.white);
  DefaultTableCellRenderer myRenderer=(DefaultTableCellRenderer)mainTable.getDefaultRenderer(String.class);
  myRenderer.setBackground(new Color(0,0,0,100));
  mainTable.getColumnModel().getColumn(0).setMaxWidth(25);
  mainTable.getColumnModel().getColumn(0).setPreferredWidth(25);
  mainTable.getColumnModel().getColumn(1).setPreferredWidth(110);
  mainTable.getColumnModel().getColumn(2).setPreferredWidth(90);
  mainTable.getColumnModel().getColumn(3).setPreferredWidth(50);
  mainTable.getColumnModel().getColumn(4).setPreferredWidth(170);
  mainTable.getColumnModel().getColumn(5).setPreferredWidth(30);
  mainTable.getColumnModel().getColumn(6).setPreferredWidth(15);
  mainTable.getColumnModel().getColumn(7).setPreferredWidth(15);
  if (PreferencesDialog.getCachedValue(PreferencesDialog.KEY_DRAFT_VIEW,""String_Node_Str"").equals(""String_Node_Str"")) {
    jScrollPane1.setViewportView(mainTable);
    currentView=mainModel;
    cbSortBy.setEnabled(false);
    chkPiles.setEnabled(false);
  }
 else {
    jToggleCardView.setSelected(true);
    jToggleListView.setSelected(false);
    currentView=this;
    jScrollPane1.setViewportView(cardArea);
    cbSortBy.setEnabled(true);
    chkPiles.setEnabled(true);
  }
  mainTable.setOpaque(false);
  mainTable.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      if (e.getClickCount() == 2 && !e.isConsumed()) {
        e.consume();
        handleDoubleClick();
      }
    }
  }
);
  mainModel.setUpdateCountsCallback(new UpdateCountsCallback(lblCount,lblCreatureCount,lblLandCount));
}",0.9890418656926104
159805,"public void disconnect(){
  if (session != null)   session.leaveChat(chatId);
}","public void disconnect(){
  if (session != null) {
    session.leaveChat(chatId);
  }
}",0.9518072289156626
159806,"public void setPlayers(Collection<String> players){
  if (players != null) {
    boolean update=false;
    int size=players.size();
    List<String> list=new ArrayList<String>(players);
    Collections.sort(list);
    if (size != this.players.size()) {
      update=true;
    }
 else {
      update=true;
      for (int i=0; i < size; i++) {
        if (!list.get(i).equals(this.players.get(i))) {
          update=false;
          break;
        }
      }
    }
    if (update && list != null) {
synchronized (tableModel) {
        this.players=list;
        tableModel.loadData(this.players);
      }
    }
  }
 else {
    this.players.clear();
  }
}","public void setPlayers(Collection<String> players){
  if (players != null) {
    boolean update;
    int size=players.size();
    List<String> list=new ArrayList<String>(players);
    Collections.sort(list);
    if (size != this.players.size()) {
      update=true;
    }
 else {
      update=false;
      for (int i=0; i < size; i++) {
        if (!list.get(i).equals(this.players.get(i))) {
          update=true;
          break;
        }
      }
    }
    if (update && list != null) {
synchronized (tableModel) {
        this.players=list;
        tableModel.loadData(this.players);
      }
    }
  }
 else {
    this.players.clear();
  }
}",0.9845916795069336
159807,"@Override public String getColumnName(int columnIndex){
  String colName=""String_Node_Str"";
  if (columnIndex <= getColumnCount())   colName=columnNames[columnIndex];
  return colName;
}","@Override public String getColumnName(int columnIndex){
  String colName=""String_Node_Str"";
  if (columnIndex <= getColumnCount()) {
    colName=columnNames[columnIndex];
  }
  return colName;
}",0.9789473684210528
159808,"/** 
 * Creates new form ChatPanel 
 */
public ChatPanel(boolean addPlayersTab){
  tableModel=new TableModel();
  initComponents();
  jTable1.setBackground(new Color(0,0,0,0));
  jTable1.setForeground(Color.white);
  setBackground(new Color(0,0,0,100));
  if (jScrollPane1 != null) {
    jScrollPane1.setBackground(new Color(0,0,0,100));
    jScrollPane1.getViewport().setBackground(new Color(0,0,0,100));
  }
  if (jScrollPane2 != null) {
    jScrollPane2.setBackground(new Color(0,0,0,100));
    jScrollPane2.getViewport().setBackground(new Color(0,0,0,100));
  }
  if (!addPlayersTab)   simplifyComponents();
}","/** 
 * Creates new form ChatPanel 
 */
public ChatPanel(boolean addPlayersTab){
  tableModel=new TableModel();
  initComponents();
  jTable1.setBackground(new Color(0,0,0,0));
  jTable1.setForeground(Color.white);
  setBackground(new Color(0,0,0,100));
  if (jScrollPane1 != null) {
    jScrollPane1.setBackground(new Color(0,0,0,100));
    jScrollPane1.getViewport().setBackground(new Color(0,0,0,100));
  }
  if (jScrollPane2 != null) {
    jScrollPane2.setBackground(new Color(0,0,0,100));
    jScrollPane2.getViewport().setBackground(new Color(0,0,0,100));
  }
  if (!addPlayersTab) {
    simplifyComponents();
  }
}",0.993517017828201
159809,"@Override public void playPriority(UUID activePlayerId,boolean resuming){
  int bookmark=0;
  try {
    while (!isPaused() && !isGameOver()) {
      if (!resuming) {
        state.getPlayers().resetPassed();
        state.getPlayerList().setCurrent(activePlayerId);
      }
 else {
        state.getPlayerList().setCurrent(this.getPriorityPlayerId());
      }
      Player player;
      while (!isPaused() && !isGameOver()) {
        try {
          player=getPlayer(state.getPlayerList().get());
          state.setPriorityPlayerId(player.getId());
          while (!player.isPassed() && !player.hasLost() && !player.hasLeft()&& !isPaused()&& !isGameOver()) {
            if (!resuming) {
              if (checkStateAndTriggered()) {
                applyEffects();
              }
              applyEffects();
              if (isPaused() || isGameOver()) {
                return;
              }
              if (player.priority(this)) {
                applyEffects();
              }
              if (isPaused()) {
                return;
              }
            }
            resuming=false;
          }
          resetShortLivingLKI();
          resuming=false;
          if (isPaused() || isGameOver()) {
            return;
          }
          if (allPassed()) {
            if (!state.getStack().isEmpty()) {
              resolve();
              applyEffects();
              state.getPlayers().resetPassed();
              fireUpdatePlayersEvent();
              state.getRevealed().reset();
              resetShortLivingLKI();
              break;
            }
 else {
              resetLKI();
              return;
            }
          }
        }
 catch (        Exception ex) {
          logger.fatal(""String_Node_Str"",ex);
          ex.printStackTrace();
          this.fireErrorEvent(""String_Node_Str"",ex);
          bookmark=0;
          continue;
        }
        state.getPlayerList().getNext();
      }
      bookmark=0;
    }
  }
 catch (  Exception ex) {
    logger.fatal(""String_Node_Str"",ex);
    this.fireErrorEvent(""String_Node_Str"",ex);
  }
 finally {
    resetLKI();
  }
}","@Override public void playPriority(UUID activePlayerId,boolean resuming){
  int bookmark=0;
  try {
    while (!isPaused() && !isGameOver()) {
      if (!resuming) {
        state.getPlayers().resetPassed();
        state.getPlayerList().setCurrent(activePlayerId);
      }
 else {
        state.getPlayerList().setCurrent(this.getPriorityPlayerId());
      }
      fireUpdatePlayersEvent();
      Player player;
      while (!isPaused() && !isGameOver()) {
        try {
          player=getPlayer(state.getPlayerList().get());
          state.setPriorityPlayerId(player.getId());
          while (!player.isPassed() && !player.hasLost() && !player.hasLeft()&& !isPaused()&& !isGameOver()) {
            if (!resuming) {
              if (checkStateAndTriggered()) {
                applyEffects();
              }
              applyEffects();
              if (isPaused() || isGameOver()) {
                return;
              }
              if (player.priority(this)) {
                applyEffects();
              }
              if (isPaused()) {
                return;
              }
            }
            resuming=false;
          }
          resetShortLivingLKI();
          resuming=false;
          if (isPaused() || isGameOver()) {
            return;
          }
          if (allPassed()) {
            if (!state.getStack().isEmpty()) {
              resolve();
              applyEffects();
              state.getPlayers().resetPassed();
              fireUpdatePlayersEvent();
              state.getRevealed().reset();
              resetShortLivingLKI();
              break;
            }
 else {
              resetLKI();
              return;
            }
          }
        }
 catch (        Exception ex) {
          logger.fatal(""String_Node_Str"",ex);
          ex.printStackTrace();
          this.fireErrorEvent(""String_Node_Str"",ex);
          bookmark=0;
          continue;
        }
        state.getPlayerList().getNext();
      }
      bookmark=0;
    }
  }
 catch (  Exception ex) {
    logger.fatal(""String_Node_Str"",ex);
    this.fireErrorEvent(""String_Node_Str"",ex);
  }
 finally {
    resetLKI();
  }
}",0.9925128685072532
159810,"@Override public void fireUpdatePlayersEvent(){
  if (simulation) {
    return;
  }
  tableEventSource.fireTableEvent(EventType.UPDATE,null,this);
}","@Override public void fireUpdatePlayersEvent(){
  if (simulation) {
    return;
  }
  logger.trace(""String_Node_Str"");
  tableEventSource.fireTableEvent(EventType.UPDATE,null,this);
}",0.8942598187311178
159811,"@Override public boolean apply(Game game,Ability source,Ability abilityToModify){
  MageObject sourceObject=game.getObject(abilityToModify.getSourceId());
  if (sourceObject != null) {
    int amount=0;
    for (    UUID cardId : game.getState().getPlayer(source.getControllerId()).getGraveyard()) {
      Card card=game.getPermanent(cardId);
      if (card != null && card.getName().equals(sourceObject.getName())) {
        amount++;
      }
    }
    if (amount > 0) {
      SpellAbility spellAbility=(SpellAbility)abilityToModify;
      CardUtil.adjustCost(spellAbility,amount);
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source,Ability abilityToModify){
  MageObject sourceObject=game.getObject(abilityToModify.getSourceId());
  if (sourceObject != null) {
    int amount=0;
    for (    UUID cardId : game.getState().getPlayer(source.getControllerId()).getGraveyard()) {
      Card card=game.getCard(cardId);
      if (card != null && card.getName().equals(sourceObject.getName())) {
        amount++;
      }
    }
    if (amount > 0) {
      SpellAbility spellAbility=(SpellAbility)abilityToModify;
      CardUtil.adjustCost(spellAbility,amount);
    }
    return true;
  }
  return false;
}",0.9895916733386708
159812,"@Override public DreadSlaver copy(){
  return new DreadSlaver(this);
}","@Override public DreadSlaverContiniousEffect copy(){
  return new DreadSlaverContiniousEffect(this);
}",0.813953488372093
159813,"/** 
 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
 */
@SuppressWarnings(""String_Node_Str"") private void initComponents(){
  panelBackground=new MageRoundPane();
  panelBackground.setPreferredSize(new Dimension(PANEL_WIDTH - 2,PANEL_HEIGHT));
  Rectangle r=new Rectangle(80,80);
  lifeLabel=new JLabel();
  handLabel=new JLabel();
  poisonLabel=new JLabel();
  libraryLabel=new JLabel();
  setOpaque(false);
  panelBackground.setXOffset(3);
  panelBackground.setYOffset(3);
  panelBackground.setVisible(true);
  Image image=ImageHelper.getImageFromResources(""String_Node_Str"");
  topCardPanel=Plugins.getInstance().getMageCard(new CardView(CardRepository.instance.findCard(""String_Node_Str"").getCard()),bigCard,topCardDimension,gameId,true);
  topCardPanel.setVisible(false);
  panelBackground.add(topCardPanel);
  BufferedImage resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  avatar=new HoverButton(""String_Node_Str"",resized,resized,resized,r);
  avatar.setObserver(new Command(){
    @Override public void execute(){
      session.sendPlayerUUID(gameId,playerId);
    }
  }
);
  r=new Rectangle(18,18);
  lifeLabel.setToolTipText(""String_Node_Str"");
  Image imageLife=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedLife=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageLife,BufferedImage.TYPE_INT_ARGB),r);
  life=new ImagePanel(resizedLife,ImagePanel.ACTUAL);
  life.setToolTipText(""String_Node_Str"");
  life.setOpaque(false);
  r=new Rectangle(18,18);
  handLabel.setToolTipText(""String_Node_Str"");
  Image imageHand=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedHand=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageHand,BufferedImage.TYPE_INT_ARGB),r);
  hand=new ImagePanel(resizedHand,ImagePanel.ACTUAL);
  hand.setToolTipText(""String_Node_Str"");
  hand.setOpaque(false);
  poisonLabel.setText(""String_Node_Str"");
  r=new Rectangle(14,14);
  poisonLabel.setToolTipText(""String_Node_Str"");
  Image imagePoison=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedPoison=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imagePoison,BufferedImage.TYPE_INT_ARGB),r);
  poison=new ImagePanel(resizedPoison,ImagePanel.ACTUAL);
  poison.setToolTipText(""String_Node_Str"");
  poison.setOpaque(false);
  r=new Rectangle(19,19);
  libraryLabel.setToolTipText(""String_Node_Str"");
  Image imageLibrary=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedLibrary=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageLibrary,BufferedImage.TYPE_INT_ARGB),r);
  library=new ImagePanel(resizedLibrary,ImagePanel.ACTUAL);
  library.setToolTipText(""String_Node_Str"");
  library.setOpaque(false);
  graveLabel=new JLabel();
  r=new Rectangle(21,21);
  graveLabel.setToolTipText(""String_Node_Str"");
  Image imageGrave=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedGrave=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageGrave,BufferedImage.TYPE_INT_ARGB),r);
  grave=new HoverButton(null,resizedGrave,resizedGrave,resizedGrave,r);
  grave.setToolTipText(""String_Node_Str"");
  grave.setOpaque(false);
  grave.setObserver(new Command(){
    @Override public void execute(){
      btnGraveActionPerformed(null);
    }
  }
);
  r=new Rectangle(25,21);
  image=ImageHelper.getImageFromResources(""String_Node_Str"");
  resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  cheat=new JButton();
  cheat.setIcon(new ImageIcon(resized));
  cheat.setToolTipText(""String_Node_Str"");
  cheat.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      btnCheatActionPerformed(e);
    }
  }
);
  zonesPanel=new JPanel();
  zonesPanel.setPreferredSize(new Dimension(100,20));
  zonesPanel.setSize(100,20);
  zonesPanel.setLayout(null);
  image=ImageHelper.getImageFromResources(""String_Node_Str"");
  r=new Rectangle(21,21);
  resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  commandZone=new HoverButton(null,resized,resized,resized,r);
  commandZone.setToolTipText(""String_Node_Str"");
  commandZone.setOpaque(false);
  commandZone.setObserver(new Command(){
    @Override public void execute(){
      btnExileZoneActionPerformed(null);
    }
  }
);
  commandZone.setBounds(0,0,21,21);
  zonesPanel.add(commandZone);
  btnPlayer=new JButton();
  btnPlayer.setText(""String_Node_Str"");
  btnPlayer.setVisible(false);
  btnPlayer.setToolTipText(""String_Node_Str"");
  btnPlayer.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      session.sendPlayerUUID(gameId,playerId);
    }
  }
);
  BufferedImage imageManaW=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaW=new ImagePanel(imageManaW,ImagePanel.ACTUAL);
  manaW.setOpaque(false);
  JLabel manaCountLabelW=new JLabel();
  manaCountLabelW.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelW);
  BufferedImage imageManaU=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaU=new ImagePanel(imageManaU,ImagePanel.ACTUAL);
  manaU.setOpaque(false);
  JLabel manaCountLabelU=new JLabel();
  manaCountLabelU.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelU);
  BufferedImage imageManaB=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaB=new ImagePanel(imageManaB,ImagePanel.ACTUAL);
  manaB.setOpaque(false);
  JLabel manaCountLabelB=new JLabel();
  manaCountLabelB.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelB);
  BufferedImage imageManaR=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaR=new ImagePanel(imageManaR,ImagePanel.ACTUAL);
  manaR.setOpaque(false);
  JLabel manaCountLabelR=new JLabel();
  manaCountLabelR.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelR);
  BufferedImage imageManaG=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaG=new ImagePanel(imageManaG,ImagePanel.ACTUAL);
  manaG.setOpaque(false);
  JLabel manaCountLabelG=new JLabel();
  manaCountLabelG.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelG);
  BufferedImage imageManaX=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaX=new ImagePanel(imageManaX,ImagePanel.ACTUAL);
  manaX.setOpaque(false);
  JLabel manaCountLabelX=new JLabel();
  manaCountLabelX.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelX);
  GroupLayout gl_panelBackground=new GroupLayout(panelBackground);
  gl_panelBackground.setHorizontalGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(9).addComponent(life,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE).addGap(3).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(hand,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addComponent(lifeLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(4).addComponent(handLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(9).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(3).addComponent(poison,GroupLayout.PREFERRED_SIZE,14,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(manaW,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(manaU,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(manaB,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addComponent(grave,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(library,GroupLayout.PREFERRED_SIZE,19,GroupLayout.PREFERRED_SIZE)).addComponent(poisonLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(20).addComponent(manaR,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(manaCountLabelW,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGap(3).addComponent(manaCountLabelR,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(manaCountLabelB,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(19).addComponent(manaX,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE))).addGap(5).addComponent(manaCountLabelX,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(20).addComponent(manaG,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(40).addComponent(manaCountLabelG,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(40).addComponent(libraryLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(cheat,GroupLayout.PREFERRED_SIZE,25,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(5).addComponent(graveLabel,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(manaCountLabelU,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)))).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(btnPlayer,Alignment.TRAILING,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(avatar,Alignment.TRAILING,GroupLayout.DEFAULT_SIZE,80,Short.MAX_VALUE)).addGap(14)).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addComponent(zonesPanel,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE).addGap(14)));
  gl_panelBackground.setVerticalGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addComponent(avatar,GroupLayout.PREFERRED_SIZE,80,GroupLayout.PREFERRED_SIZE).addPreferredGap(ComponentPlacement.RELATED).addComponent(btnPlayer).addPreferredGap(ComponentPlacement.RELATED).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(life,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(hand,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addComponent(lifeLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addComponent(handLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(1).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(4).addComponent(poison,GroupLayout.PREFERRED_SIZE,14,GroupLayout.PREFERRED_SIZE).addGap(4).addComponent(manaW,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(2).addComponent(manaU,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(2).addComponent(manaB,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(5).addComponent(grave,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(library,GroupLayout.PREFERRED_SIZE,19,GroupLayout.PREFERRED_SIZE)).addComponent(poisonLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(2).addComponent(manaR,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(14).addComponent(manaCountLabelW,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(14).addComponent(manaCountLabelR,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGap(4).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(manaCountLabelB,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(8).addComponent(manaX,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addComponent(manaCountLabelX,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGroup(gl_panelBackground.createSequentialGroup().addGap(39).addComponent(manaG,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(31).addComponent(manaCountLabelG,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addComponent(libraryLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(76).addComponent(cheat,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(76).addComponent(graveLabel,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(31).addComponent(manaCountLabelU,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addPreferredGap(ComponentPlacement.RELATED).addComponent(zonesPanel,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  panelBackground.setLayout(gl_panelBackground);
  GroupLayout groupLayout=new GroupLayout(this);
  groupLayout.setHorizontalGroup(groupLayout.createParallelGroup(Alignment.LEADING).addGroup(groupLayout.createSequentialGroup().addComponent(panelBackground,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  groupLayout.setVerticalGroup(groupLayout.createParallelGroup(Alignment.LEADING).addGroup(groupLayout.createSequentialGroup().addComponent(panelBackground,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  setLayout(groupLayout);
}","/** 
 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
 */
@SuppressWarnings(""String_Node_Str"") private void initComponents(){
  panelBackground=new MageRoundPane();
  panelBackground.setPreferredSize(new Dimension(PANEL_WIDTH - 2,PANEL_HEIGHT));
  Rectangle r=new Rectangle(80,80);
  lifeLabel=new JLabel();
  handLabel=new JLabel();
  poisonLabel=new JLabel();
  libraryLabel=new JLabel();
  setOpaque(false);
  panelBackground.setXOffset(3);
  panelBackground.setYOffset(3);
  panelBackground.setVisible(true);
  Image image=ImageHelper.getImageFromResources(""String_Node_Str"");
  topCardPanel=Plugins.getInstance().getMageCard(new CardView(CardRepository.instance.findCard(""String_Node_Str"").getCard()),bigCard,topCardDimension,gameId,true);
  topCardPanel.setVisible(false);
  panelBackground.add(topCardPanel);
  BufferedImage resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  avatar=new HoverButton(""String_Node_Str"",resized,resized,resized,r);
  avatar.setObserver(new Command(){
    @Override public void execute(){
      session.sendPlayerUUID(gameId,playerId);
    }
  }
);
  r=new Rectangle(18,18);
  lifeLabel.setToolTipText(""String_Node_Str"");
  Image imageLife=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedLife=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageLife,BufferedImage.TYPE_INT_ARGB),r);
  life=new ImagePanel(resizedLife,ImagePanel.ACTUAL);
  life.setToolTipText(""String_Node_Str"");
  life.setOpaque(false);
  r=new Rectangle(18,18);
  handLabel.setToolTipText(""String_Node_Str"");
  Image imageHand=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedHand=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageHand,BufferedImage.TYPE_INT_ARGB),r);
  hand=new ImagePanel(resizedHand,ImagePanel.ACTUAL);
  hand.setToolTipText(""String_Node_Str"");
  hand.setOpaque(false);
  poisonLabel.setText(""String_Node_Str"");
  r=new Rectangle(14,14);
  poisonLabel.setToolTipText(""String_Node_Str"");
  Image imagePoison=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedPoison=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imagePoison,BufferedImage.TYPE_INT_ARGB),r);
  poison=new ImagePanel(resizedPoison,ImagePanel.ACTUAL);
  poison.setToolTipText(""String_Node_Str"");
  poison.setOpaque(false);
  r=new Rectangle(19,19);
  libraryLabel.setToolTipText(""String_Node_Str"");
  Image imageLibrary=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedLibrary=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageLibrary,BufferedImage.TYPE_INT_ARGB),r);
  library=new ImagePanel(resizedLibrary,ImagePanel.ACTUAL);
  library.setToolTipText(""String_Node_Str"");
  library.setOpaque(false);
  graveLabel=new JLabel();
  r=new Rectangle(21,21);
  graveLabel.setToolTipText(""String_Node_Str"");
  Image imageGrave=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedGrave=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageGrave,BufferedImage.TYPE_INT_ARGB),r);
  grave=new HoverButton(null,resizedGrave,resizedGrave,resizedGrave,r);
  grave.setToolTipText(""String_Node_Str"");
  grave.setOpaque(false);
  grave.setObserver(new Command(){
    @Override public void execute(){
      btnGraveActionPerformed(null);
    }
  }
);
  r=new Rectangle(25,21);
  image=ImageHelper.getImageFromResources(""String_Node_Str"");
  resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  cheat=new JButton();
  cheat.setIcon(new ImageIcon(resized));
  cheat.setToolTipText(""String_Node_Str"");
  cheat.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      btnCheatActionPerformed(e);
    }
  }
);
  zonesPanel=new JPanel();
  zonesPanel.setPreferredSize(new Dimension(100,20));
  zonesPanel.setSize(100,20);
  zonesPanel.setLayout(null);
  image=ImageHelper.getImageFromResources(""String_Node_Str"");
  r=new Rectangle(21,21);
  resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  commandZone=new HoverButton(null,resized,resized,resized,r);
  commandZone.setToolTipText(""String_Node_Str"");
  commandZone.setOpaque(false);
  commandZone.setObserver(new Command(){
    @Override public void execute(){
      btnExileZoneActionPerformed(null);
    }
  }
);
  commandZone.setBounds(0,0,21,21);
  zonesPanel.add(commandZone);
  btnPlayer=new JButton();
  btnPlayer.setText(""String_Node_Str"");
  btnPlayer.setVisible(false);
  btnPlayer.setToolTipText(""String_Node_Str"");
  btnPlayer.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      session.sendPlayerUUID(gameId,playerId);
    }
  }
);
  BufferedImage imageManaW=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaW=new ImagePanel(imageManaW,ImagePanel.ACTUAL);
  manaW.setOpaque(false);
  JLabel manaCountLabelW=new JLabel();
  manaCountLabelW.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelW);
  BufferedImage imageManaU=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaU=new ImagePanel(imageManaU,ImagePanel.ACTUAL);
  manaU.setOpaque(false);
  JLabel manaCountLabelU=new JLabel();
  manaCountLabelU.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelU);
  BufferedImage imageManaB=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaB=new ImagePanel(imageManaB,ImagePanel.ACTUAL);
  manaB.setOpaque(false);
  JLabel manaCountLabelB=new JLabel();
  manaCountLabelB.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelB);
  BufferedImage imageManaR=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaR=new ImagePanel(imageManaR,ImagePanel.ACTUAL);
  manaR.setOpaque(false);
  JLabel manaCountLabelR=new JLabel();
  manaCountLabelR.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelR);
  BufferedImage imageManaG=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaG=new ImagePanel(imageManaG,ImagePanel.ACTUAL);
  manaG.setOpaque(false);
  JLabel manaCountLabelG=new JLabel();
  manaCountLabelG.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelG);
  BufferedImage imageManaX=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaX=new ImagePanel(imageManaX,ImagePanel.ACTUAL);
  manaX.setOpaque(false);
  JLabel manaCountLabelX=new JLabel();
  manaCountLabelX.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelX);
  GroupLayout gl_panelBackground=new GroupLayout(panelBackground);
  gl_panelBackground.setHorizontalGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(9).addComponent(life,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE).addGap(3).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(hand,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addComponent(lifeLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(4).addComponent(handLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(9).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(3).addComponent(poison,GroupLayout.PREFERRED_SIZE,14,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(manaW,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(manaU,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(manaB,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addComponent(grave,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(library,GroupLayout.PREFERRED_SIZE,19,GroupLayout.PREFERRED_SIZE)).addComponent(poisonLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(20).addComponent(manaR,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(manaCountLabelW,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGap(3).addComponent(manaCountLabelR,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(manaCountLabelB,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(19).addComponent(manaX,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE))).addGap(5).addComponent(manaCountLabelX,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(20).addComponent(manaG,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(40).addComponent(manaCountLabelG,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(40).addComponent(libraryLabel,GroupLayout.PREFERRED_SIZE,25,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(cheat,GroupLayout.PREFERRED_SIZE,25,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(5).addComponent(graveLabel,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(manaCountLabelU,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)))).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(btnPlayer,Alignment.TRAILING,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(avatar,Alignment.TRAILING,GroupLayout.DEFAULT_SIZE,80,Short.MAX_VALUE)).addGap(14)).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addComponent(zonesPanel,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE).addGap(14)));
  gl_panelBackground.setVerticalGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addComponent(avatar,GroupLayout.PREFERRED_SIZE,80,GroupLayout.PREFERRED_SIZE).addPreferredGap(ComponentPlacement.RELATED).addComponent(btnPlayer).addPreferredGap(ComponentPlacement.RELATED).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(life,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(hand,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addComponent(lifeLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addComponent(handLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(1).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(4).addComponent(poison,GroupLayout.PREFERRED_SIZE,14,GroupLayout.PREFERRED_SIZE).addGap(4).addComponent(manaW,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(2).addComponent(manaU,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(2).addComponent(manaB,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(5).addComponent(grave,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(library,GroupLayout.PREFERRED_SIZE,19,GroupLayout.PREFERRED_SIZE)).addComponent(poisonLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(2).addComponent(manaR,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(14).addComponent(manaCountLabelW,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(14).addComponent(manaCountLabelR,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGap(4).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(manaCountLabelB,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(8).addComponent(manaX,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addComponent(manaCountLabelX,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGroup(gl_panelBackground.createSequentialGroup().addGap(39).addComponent(manaG,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(31).addComponent(manaCountLabelG,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addComponent(libraryLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(76).addComponent(cheat,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(76).addComponent(graveLabel,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(31).addComponent(manaCountLabelU,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addPreferredGap(ComponentPlacement.RELATED).addComponent(zonesPanel,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  panelBackground.setLayout(gl_panelBackground);
  GroupLayout groupLayout=new GroupLayout(this);
  groupLayout.setHorizontalGroup(groupLayout.createParallelGroup(Alignment.LEADING).addGroup(groupLayout.createSequentialGroup().addComponent(panelBackground,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  groupLayout.setVerticalGroup(groupLayout.createParallelGroup(Alignment.LEADING).addGroup(groupLayout.createSequentialGroup().addComponent(panelBackground,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  setLayout(groupLayout);
}",0.999934275386132
159814,"/** 
 * Creates new form TablesPanel 
 */
public TablesPanel(){
  tableModel=new TableTableModel();
  matchesModel=new MatchesTableModel();
  gameChooser=new GameChooser();
  initComponents();
  tableModel.setSession(session);
  chkShowCompleted.setVisible(false);
  tableTables.createDefaultColumnsFromModel();
  chatPanel.useExtendedView(ChatPanel.VIEW_MODE.NONE);
  chatPanel.setBorder(null);
  JComponent[] components=new JComponent[]{chatPanel,jSplitPane1,jScrollPane1,jScrollPane2,jPanel1,jPanel3};
  for (  JComponent component : components) {
    component.setOpaque(false);
  }
  jScrollPane1.getViewport().setBackground(new Color(255,255,255,50));
  jScrollPane2.getViewport().setBackground(new Color(255,255,255,50));
  Action joinTable=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      int modelRow=Integer.valueOf(e.getActionCommand());
      UUID tableId=(UUID)tableModel.getValueAt(modelRow,9);
      UUID gameId=(UUID)tableModel.getValueAt(modelRow,8);
      String state=(String)tableModel.getValueAt(modelRow,6);
      boolean isTournament=(Boolean)tableModel.getValueAt(modelRow,7);
      String owner=(String)tableModel.getValueAt(modelRow,1);
      if (state.equals(""String_Node_Str"")) {
        if (owner.equals(session.getUserName())) {
          try {
            JDesktopPane desktopPane=(JDesktopPane)MageFrame.getUI().getComponent(MageComponents.DESKTOP_PANE);
            JInternalFrame[] windows=desktopPane.getAllFramesInLayer(javax.swing.JLayeredPane.DEFAULT_LAYER);
            for (            JInternalFrame frame : windows) {
              if (frame.getTitle().equals(""String_Node_Str"")) {
                frame.toFront();
                frame.setVisible(true);
                try {
                  frame.setSelected(true);
                }
 catch (                PropertyVetoException ve) {
                  ve.printStackTrace();
                  logger.error(ve);
                }
              }
            }
          }
 catch (          Exception ex) {
            logger.error(ex);
          }
          return;
        }
        if (isTournament) {
          logger.info(""String_Node_Str"" + tableId);
          session.joinTournamentTable(roomId,tableId,session.getUserName(),""String_Node_Str"",1);
        }
 else {
          logger.info(""String_Node_Str"" + tableId);
          joinTableDialog.showDialog(roomId,tableId);
        }
      }
 else       if (state.equals(""String_Node_Str"")) {
        session.removeTable(roomId,tableId);
      }
 else       if (state.equals(""String_Node_Str"")) {
        logger.info(""String_Node_Str"" + tableId);
        session.watchTable(roomId,tableId);
      }
 else       if (state.equals(""String_Node_Str"")) {
        logger.info(""String_Node_Str"" + gameId);
        session.replayGame(gameId);
      }
    }
  }
;
  Action replayMatch=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      int modelRow=Integer.valueOf(e.getActionCommand());
      List<UUID> games=(List<UUID>)matchesModel.getValueAt(modelRow,6);
      if (games.size() == 1) {
        session.replayGame(games.get(0));
      }
 else {
        gameChooser.show(games,MageFrame.getDesktop().getMousePosition());
      }
    }
  }
;
  new ButtonColumn(tableTables,joinTable,6);
  new ButtonColumn(tableCompleted,replayMatch,5);
}","/** 
 * Creates new form TablesPanel 
 */
public TablesPanel(){
  tableModel=new TableTableModel();
  matchesModel=new MatchesTableModel();
  gameChooser=new GameChooser();
  initComponents();
  tableModel.setSession(session);
  chkShowCompleted.setVisible(false);
  tableTables.createDefaultColumnsFromModel();
  chatPanel.useExtendedView(ChatPanel.VIEW_MODE.NONE);
  chatPanel.setBorder(null);
  JComponent[] components=new JComponent[]{chatPanel,jSplitPane1,jScrollPane1,jScrollPane2,jPanel1,jPanel3};
  for (  JComponent component : components) {
    component.setOpaque(false);
  }
  jScrollPane1.getViewport().setBackground(new Color(255,255,255,50));
  jScrollPane2.getViewport().setBackground(new Color(255,255,255,50));
  Action joinTable=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      int modelRow=Integer.valueOf(e.getActionCommand());
      UUID tableId=(UUID)tableModel.getValueAt(modelRow,9);
      UUID gameId=(UUID)tableModel.getValueAt(modelRow,8);
      String state=(String)tableModel.getValueAt(modelRow,6);
      boolean isTournament=(Boolean)tableModel.getValueAt(modelRow,7);
      String owner=(String)tableModel.getValueAt(modelRow,1);
      if (state.equals(""String_Node_Str"")) {
        if (owner.equals(session.getUserName())) {
          try {
            JDesktopPane desktopPane=(JDesktopPane)MageFrame.getUI().getComponent(MageComponents.DESKTOP_PANE);
            JInternalFrame[] windows=desktopPane.getAllFramesInLayer(javax.swing.JLayeredPane.DEFAULT_LAYER);
            for (            JInternalFrame frame : windows) {
              if (frame.getTitle().equals(""String_Node_Str"")) {
                frame.toFront();
                frame.setVisible(true);
                try {
                  frame.setSelected(true);
                }
 catch (                PropertyVetoException ve) {
                  ve.printStackTrace();
                  logger.error(ve);
                }
              }
            }
          }
 catch (          Exception ex) {
            logger.error(ex);
          }
          return;
        }
        if (isTournament) {
          logger.info(""String_Node_Str"" + tableId);
          session.joinTournamentTable(roomId,tableId,session.getUserName(),""String_Node_Str"",1);
        }
 else {
          logger.info(""String_Node_Str"" + tableId);
          joinTableDialog.showDialog(roomId,tableId);
        }
      }
 else       if (state.equals(""String_Node_Str"")) {
        if (JOptionPane.showConfirmDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
          session.removeTable(roomId,tableId);
        }
      }
 else       if (state.equals(""String_Node_Str"")) {
        logger.info(""String_Node_Str"" + tableId);
        session.watchTable(roomId,tableId);
      }
 else       if (state.equals(""String_Node_Str"")) {
        logger.info(""String_Node_Str"" + gameId);
        session.replayGame(gameId);
      }
    }
  }
;
  Action replayMatch=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      int modelRow=Integer.valueOf(e.getActionCommand());
      List<UUID> games=(List<UUID>)matchesModel.getValueAt(modelRow,6);
      if (games.size() == 1) {
        session.replayGame(games.get(0));
      }
 else {
        gameChooser.show(games,MageFrame.getDesktop().getMousePosition());
      }
    }
  }
;
  new ButtonColumn(tableTables,joinTable,6);
  new ButtonColumn(tableCompleted,replayMatch,5);
}",0.978023577354097
159815,"@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  boolean retValue=false;
  GameEvent preventEvent=new GameEvent(GameEvent.EventType.PREVENT_DAMAGE,source.getFirstTarget(),source.getId(),source.getControllerId(),event.getAmount(),false);
  int damage=event.getAmount();
  if (!game.replaceEvent(preventEvent)) {
    event.setAmount(0);
    game.fireEvent(GameEvent.getEvent(GameEvent.EventType.PREVENTED_DAMAGE,source.getFirstTarget(),source.getId(),source.getControllerId(),damage));
    retValue=true;
  }
  Permanent permanent=game.getPermanent(source.getSourceId());
  if (permanent != null) {
    permanent.removeCounters(CounterType.P1P1.createInstance(damage),game);
  }
  return retValue;
}","@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  boolean retValue=false;
  GameEvent preventEvent=new GameEvent(GameEvent.EventType.PREVENT_DAMAGE,source.getFirstTarget(),source.getId(),source.getControllerId(),event.getAmount(),false);
  int damage=event.getAmount();
  if (!game.replaceEvent(preventEvent)) {
    event.setAmount(0);
    game.fireEvent(GameEvent.getEvent(GameEvent.EventType.PREVENTED_DAMAGE,source.getFirstTarget(),source.getId(),source.getControllerId(),damage));
    retValue=true;
  }
  Permanent permanent=game.getPermanent(source.getSourceId());
  if (permanent != null) {
    permanent.removeCounters(CounterType.P1P1.createInstance(),game);
  }
  return retValue;
}",0.9958791208791208
159816,"@Override public void adjustCosts(Ability ability,Game game){
  Player player=game.getPlayer(controllerId);
  if (player == null || !(ability instanceof SpellAbility)) {
    return;
  }
  Target target=new TargetControlledCreaturePermanent(1,Integer.MAX_VALUE,filter,true);
  target.setTargetName(""String_Node_Str"");
  if (!target.canChoose(sourceId,controllerId,game)) {
    return;
  }
  if (player.chooseUse(Outcome.Detriment,""String_Node_Str"",game)) {
    player.chooseTarget(Outcome.Tap,target,ability,game);
    if (target.getTargets().size() > 0) {
      int adjCost=0;
      for (      UUID creatureId : target.getTargets()) {
        Permanent perm=game.getPermanent(creatureId);
        if (perm == null) {
          continue;
        }
        Card card=game.getCard(perm.getId());
        if (card == null) {
          continue;
        }
        ManaCosts manaCostsCreature=card.getSpellAbility().getManaCosts();
        if (manaCostsCreature != null && manaCostsCreature.convertedManaCost() > 0 && perm.tap(game)) {
          Choice chooseManaType=buildChoice(manaCostsCreature,ability.getManaCostsToPay());
          if (chooseManaType.getChoices().size() > 0) {
            if (chooseManaType.getChoices().size() > 1) {
              chooseManaType.getChoices().add(""String_Node_Str"");
              chooseManaType.setMessage(""String_Node_Str"" + perm.getName());
              while (!chooseManaType.isChosen()) {
                player.choose(Outcome.Benefit,chooseManaType,game);
              }
            }
 else {
              chooseManaType.setChoice(chooseManaType.getChoices().iterator().next());
            }
            ManaCosts manaCostsToReduce=new ManaCostsImpl();
            if (chooseManaType.getChoice().equals(""String_Node_Str"")) {
              manaCostsToReduce.load(""String_Node_Str"");
            }
            if (chooseManaType.getChoice().equals(""String_Node_Str"")) {
              manaCostsToReduce.load(""String_Node_Str"");
            }
            if (chooseManaType.getChoice().equals(""String_Node_Str"")) {
              manaCostsToReduce.load(""String_Node_Str"");
            }
            if (chooseManaType.getChoice().equals(""String_Node_Str"")) {
              manaCostsToReduce.load(""String_Node_Str"");
            }
            if (chooseManaType.getChoice().equals(""String_Node_Str"")) {
              manaCostsToReduce.load(""String_Node_Str"");
            }
            if (chooseManaType.getChoice().equals(""String_Node_Str"")) {
              ++adjCost;
            }
            CardUtil.adjustCost((SpellAbility)ability,manaCostsToReduce);
          }
 else {
            ++adjCost;
          }
        }
      }
      this.getTargets().add(target);
      CardUtil.adjustCost((SpellAbility)ability,adjCost);
    }
  }
}","@Override public void adjustCosts(Ability ability,Game game){
  Player player=game.getPlayer(controllerId);
  if (player == null || !(ability instanceof SpellAbility)) {
    return;
  }
  Target target=new TargetControlledCreaturePermanent(1,Integer.MAX_VALUE,filter,true);
  target.setTargetName(""String_Node_Str"");
  if (!target.canChoose(sourceId,controllerId,game)) {
    return;
  }
  if (player.chooseUse(Outcome.Detriment,""String_Node_Str"",game)) {
    player.chooseTarget(Outcome.Tap,target,ability,game);
    if (target.getTargets().size() > 0) {
      int adjCost=0;
      for (      UUID creatureId : target.getTargets()) {
        Permanent perm=game.getPermanent(creatureId);
        if (perm == null) {
          continue;
        }
        ManaCosts manaCostsCreature=perm.getSpellAbility().getManaCosts();
        if (manaCostsCreature != null && manaCostsCreature.convertedManaCost() > 0 && perm.tap(game)) {
          Choice chooseManaType=buildChoice(manaCostsCreature,ability.getManaCostsToPay());
          if (chooseManaType.getChoices().size() > 0) {
            if (chooseManaType.getChoices().size() > 1) {
              chooseManaType.getChoices().add(""String_Node_Str"");
              chooseManaType.setMessage(""String_Node_Str"" + perm.getName());
              while (!chooseManaType.isChosen()) {
                player.choose(Outcome.Benefit,chooseManaType,game);
              }
            }
 else {
              chooseManaType.setChoice(chooseManaType.getChoices().iterator().next());
            }
            ManaCosts manaCostsToReduce=new ManaCostsImpl();
            if (chooseManaType.getChoice().equals(""String_Node_Str"")) {
              manaCostsToReduce.load(""String_Node_Str"");
            }
            if (chooseManaType.getChoice().equals(""String_Node_Str"")) {
              manaCostsToReduce.load(""String_Node_Str"");
            }
            if (chooseManaType.getChoice().equals(""String_Node_Str"")) {
              manaCostsToReduce.load(""String_Node_Str"");
            }
            if (chooseManaType.getChoice().equals(""String_Node_Str"")) {
              manaCostsToReduce.load(""String_Node_Str"");
            }
            if (chooseManaType.getChoice().equals(""String_Node_Str"")) {
              manaCostsToReduce.load(""String_Node_Str"");
            }
            if (chooseManaType.getChoice().equals(""String_Node_Str"")) {
              ++adjCost;
            }
            CardUtil.adjustCost((SpellAbility)ability,manaCostsToReduce);
          }
 else {
            ++adjCost;
          }
        }
      }
      this.getTargets().add(target);
      CardUtil.adjustCost((SpellAbility)ability,adjCost);
    }
  }
}",0.9695412844036696
159817,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    Cost cost=new ManaCostsImpl(""String_Node_Str"");
    if (player.chooseUse(outcome,""String_Node_Str"" + cost.getText() + ""String_Node_Str""+ staticText,game)) {
      cost.clearPaid();
      if (cost.pay(source,game,source.getId(),source.getControllerId(),false)) {
        UUID targetId=targetPointer.getFirst(game,source);
        if (targetId != null) {
          MageObject target=game.getLastKnownInformation(targetId,Constants.Zone.BATTLEFIELD);
          if (target != null && target instanceof Permanent) {
            EmptyToken token=new EmptyToken();
            CardUtil.copyTo(token).from((Permanent)target);
            token.putOntoBattlefield(1,game,source.getSourceId(),source.getControllerId());
            return true;
          }
        }
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  UUID targetId=targetPointer.getFirst(game,source);
  if (targetId != null && player != null) {
    MageObject target=game.getPermanent(targetId);
    if (target == null) {
      target=game.getLastKnownInformation(targetId,Zone.BATTLEFIELD);
    }
    if (target != null) {
      Cost cost=new ManaCostsImpl(""String_Node_Str"");
      if (player.chooseUse(outcome,new StringBuilder(""String_Node_Str"").append(cost.getText()).append(""String_Node_Str"").append(target.getName()).append(""String_Node_Str"").toString(),game)) {
        cost.clearPaid();
        if (cost.pay(source,game,source.getId(),source.getControllerId(),false)) {
          if (target instanceof Permanent) {
            EmptyToken token=new EmptyToken();
            CardUtil.copyTo(token).from((Permanent)target);
            token.putOntoBattlefield(1,game,source.getSourceId(),source.getControllerId());
            return true;
          }
        }
      }
    }
  }
  return false;
}",0.5584868093578895
159818,"@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility) {
    Card sourceCard=game.getCard(((SpellAbility)abilityToModify).getSourceId());
    if (sourceCard != null && (sourceCard.getCardType().contains(CardType.INSTANT) || sourceCard.getCardType().contains(CardType.SORCERY))) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility || abilityToModify instanceof FlashbackAbility || abilityToModify instanceof RetraceAbility) {
    Card sourceCard=game.getCard(((SpellAbility)abilityToModify).getSourceId());
    if (sourceCard != null && (sourceCard.getCardType().contains(CardType.INSTANT) || sourceCard.getCardType().contains(CardType.SORCERY))) {
      return true;
    }
  }
  return false;
}",0.8973214285714286
159819,"@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility) {
    Card sourceCard=game.getCard(((SpellAbility)abilityToModify).getSourceId());
    if (sourceCard != null && abilityToModify.getControllerId().equals(source.getControllerId()) && (sourceCard.hasSubtype(""String_Node_Str"") || sourceCard.hasSubtype(""String_Node_Str""))) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility || abilityToModify instanceof FlashbackAbility || abilityToModify instanceof RetraceAbility) {
    Card sourceCard=game.getCard(abilityToModify.getSourceId());
    if (sourceCard != null && abilityToModify.getControllerId().equals(source.getControllerId()) && (sourceCard.hasSubtype(""String_Node_Str"") || sourceCard.hasSubtype(""String_Node_Str""))) {
      return true;
    }
  }
  return false;
}",0.889344262295082
159820,"@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility) {
    SpellAbility spell=(SpellAbility)abilityToModify;
    if (spell.getControllerId().equals(source.getControllerId())) {
      Card sourceCard=game.getCard(spell.getSourceId());
      if (sourceCard != null && sourceCard.hasSubtype(""String_Node_Str"")) {
        String manaCostsString=""String_Node_Str"" + sourceCard.getManaCost().convertedManaCost() + ""String_Node_Str"";
        Player player=game.getPlayer(spell.getControllerId());
        if (player != null && player.chooseUse(Constants.Outcome.Benefit,""String_Node_Str"",game)) {
          spell.getManaCostsToPay().clear();
          spell.getManaCostsToPay().load(manaCostsString);
          return true;
        }
      }
    }
  }
  return false;
}","@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility || abilityToModify instanceof FlashbackAbility || abilityToModify instanceof RetraceAbility) {
    Ability spell=abilityToModify;
    if (spell.getControllerId().equals(source.getControllerId())) {
      Card sourceCard=game.getCard(spell.getSourceId());
      if (sourceCard != null && sourceCard.hasSubtype(""String_Node_Str"")) {
        String manaCostsString=""String_Node_Str"" + sourceCard.getManaCost().convertedManaCost() + ""String_Node_Str"";
        Player player=game.getPlayer(spell.getControllerId());
        if (player != null && player.chooseUse(Constants.Outcome.Benefit,""String_Node_Str"",game)) {
          spell.getManaCostsToPay().clear();
          spell.getManaCostsToPay().load(manaCostsString);
          return true;
        }
      }
    }
  }
  return false;
}",0.9366799771819736
159821,"@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility) {
    Card card=game.getCard(abilityToModify.getSourceId());
    if (card != null && !card.getCardType().contains(CardType.CREATURE)) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility || abilityToModify instanceof FlashbackAbility || abilityToModify instanceof RetraceAbility) {
    Card card=game.getCard(abilityToModify.getSourceId());
    if (card != null && !card.getCardType().contains(CardType.CREATURE)) {
      return true;
    }
  }
  return false;
}",0.871866295264624
159822,"@Override public boolean apply(Game game,Ability source,Ability abilityToModify){
  SpellAbility spellAbility=(SpellAbility)abilityToModify;
  spellAbility.getManaCostsToPay().add(new GenericManaCost(1));
  return true;
}","@Override public boolean apply(Game game,Ability source,Ability abilityToModify){
  CardUtil.increaseCost(abilityToModify,1);
  return true;
}",0.6831955922865014
159823,"@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility) {
    SpellAbility spell=(SpellAbility)abilityToModify;
    if (spell.getControllerId().equals(source.getControllerId())) {
      Card sourceCard=game.getCard(spell.getSourceId());
      if (sourceCard != null && sourceCard.hasSubtype(""String_Node_Str"")) {
        Player player=game.getPlayer(spell.getControllerId());
        if (player != null && player.chooseUse(Outcome.Benefit,""String_Node_Str"",game)) {
          spell.getManaCostsToPay().clear();
          spell.getManaCostsToPay().addAll(new ManaCostsImpl(""String_Node_Str""));
          return true;
        }
      }
    }
  }
  return false;
}","@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility || abilityToModify instanceof FlashbackAbility || abilityToModify instanceof RetraceAbility) {
    Ability spell=abilityToModify;
    if (spell.getControllerId().equals(source.getControllerId())) {
      Card sourceCard=game.getCard(spell.getSourceId());
      if (sourceCard != null && sourceCard.hasSubtype(""String_Node_Str"")) {
        Player player=game.getPlayer(spell.getControllerId());
        if (player != null && player.chooseUse(Outcome.Benefit,""String_Node_Str"",game)) {
          spell.getManaCostsToPay().clear();
          spell.getManaCostsToPay().addAll(new ManaCostsImpl(""String_Node_Str""));
          return true;
        }
      }
    }
  }
  return false;
}",0.9281553398058252
159824,"@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility) {
    Card sourceCard=game.getCard(abilityToModify.getSourceId());
    StackObject stackObject=game.getStack().getStackObject(abilityToModify.getSourceId());
    if (stackObject != null && stackObject instanceof Spell) {
      Zone zone=((Spell)stackObject).getFromZone();
      if (zone != null && zone.equals(Zone.HAND)) {
        if (sourceCard != null && sourceCard.getOwnerId().equals(source.getControllerId()) && !sourceCard.getCardType().contains(CardType.LAND)) {
          Player player=game.getPlayer(source.getControllerId());
          String message=""String_Node_Str"" + sourceCard.getName() + ""String_Node_Str"";
          if (player != null && player.chooseUse(outcome,message,game)) {
            return true;
          }
        }
      }
    }
  }
  return false;
}","@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility || abilityToModify instanceof FlashbackAbility || abilityToModify instanceof RetraceAbility) {
    Card sourceCard=game.getCard(abilityToModify.getSourceId());
    StackObject stackObject=game.getStack().getStackObject(abilityToModify.getSourceId());
    if (stackObject != null && stackObject instanceof Spell) {
      Zone zone=((Spell)stackObject).getFromZone();
      if (zone != null && zone.equals(Zone.HAND)) {
        if (sourceCard != null && sourceCard.getOwnerId().equals(source.getControllerId()) && !sourceCard.getCardType().contains(CardType.LAND)) {
          Player player=game.getPlayer(source.getControllerId());
          String message=""String_Node_Str"" + sourceCard.getName() + ""String_Node_Str"";
          if (player != null && player.chooseUse(outcome,message,game)) {
            return true;
          }
        }
      }
    }
  }
  return false;
}",0.9519832985386222
159825,"@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility) {
    if (!abilityToModify.getControllerId().equals(game.getActivePlayerId())) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility || abilityToModify instanceof FlashbackAbility || abilityToModify instanceof RetraceAbility) {
    if (!abilityToModify.getControllerId().equals(game.getActivePlayerId())) {
      return true;
    }
  }
  return false;
}",0.8486842105263158
159826,"@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility && abilityToModify.getSourceId().equals(source.getSourceId())) {
    return true;
  }
  return false;
}","@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if ((abilityToModify instanceof SpellAbility || abilityToModify instanceof FlashbackAbility || abilityToModify instanceof RetraceAbility) && abilityToModify.getSourceId().equals(source.getSourceId())) {
    return true;
  }
  return false;
}",0.8321428571428572
159827,"@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility) {
    Card sourceCard=game.getCard(((SpellAbility)abilityToModify).getSourceId());
    if (sourceCard != null && abilityToModify.getControllerId().equals(source.getControllerId()) && (sourceCard.getCardType().contains(CardType.CREATURE))) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility || abilityToModify instanceof FlashbackAbility || abilityToModify instanceof RetraceAbility) {
    Card sourceCard=game.getCard(abilityToModify.getSourceId());
    if (sourceCard != null && abilityToModify.getControllerId().equals(source.getControllerId()) && (sourceCard.getCardType().contains(CardType.CREATURE))) {
      return true;
    }
  }
  return false;
}",0.8486842105263158
159828,"@Override public boolean apply(Game game,Ability source,Ability abilityToModify){
  SpellAbility spellAbility=(SpellAbility)abilityToModify;
  if (spellAbility != null) {
    OpponentsLostLifeCount dynamicValue=new OpponentsLostLifeCount();
    int amount=dynamicValue.calculate(game,source);
    if (amount > 0) {
      CardUtil.adjustCost(spellAbility,amount);
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source,Ability abilityToModify){
  Ability spellAbility=(SpellAbility)abilityToModify;
  if (spellAbility != null) {
    OpponentsLostLifeCount dynamicValue=new OpponentsLostLifeCount();
    int amount=dynamicValue.calculate(game,source);
    if (amount > 0) {
      CardUtil.reduceCost(spellAbility,amount);
      return true;
    }
  }
  return false;
}",0.9790897908979088
159829,"@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility) {
    Card sourceCard=game.getCard(((SpellAbility)abilityToModify).getSourceId());
    if (sourceCard != null && sourceCard.getOwnerId().equals(source.getControllerId())) {
      Permanent permanent=game.getPermanent(source.getSourceId());
      if (permanent != null) {
        List<UUID> imprinted=permanent.getImprinted();
        if (imprinted.size() > 0) {
          Card imprintedCard=game.getCard(imprinted.get(0));
          if (imprintedCard != null && CardUtil.shareTypes(imprintedCard,sourceCard)) {
            return true;
          }
        }
      }
    }
  }
  return false;
}","@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility || abilityToModify instanceof FlashbackAbility || abilityToModify instanceof RetraceAbility) {
    Card sourceCard=game.getCard(abilityToModify.getSourceId());
    if (sourceCard != null && sourceCard.getOwnerId().equals(source.getControllerId())) {
      Permanent permanent=game.getPermanent(source.getSourceId());
      if (permanent != null) {
        List<UUID> imprinted=permanent.getImprinted();
        if (imprinted.size() > 0) {
          Card imprintedCard=game.getCard(imprinted.get(0));
          if (imprintedCard != null && CardUtil.shareTypes(imprintedCard,sourceCard)) {
            return true;
          }
        }
      }
    }
  }
  return false;
}",0.9291338582677166
159830,"@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility) {
    Card card=game.getCard(abilityToModify.getSourceId());
    if (card != null && !card.getCardType().contains(CardType.ARTIFACT)) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility || abilityToModify instanceof FlashbackAbility || abilityToModify instanceof RetraceAbility) {
    Card card=game.getCard(abilityToModify.getSourceId());
    if (card != null && !card.getCardType().contains(CardType.ARTIFACT)) {
      return true;
    }
  }
  return false;
}",0.871866295264624
159831,"public void loadCards(String name,CardsView pile1,CardsView pile2,BigCard bigCard,CardDimensions dimension,UUID gameId){
  this.title=name;
  this.pile1.loadCardsNarrow(pile1,bigCard,dimension,gameId,null);
  this.pile2.loadCardsNarrow(pile2,bigCard,dimension,gameId,null);
  if (getParent() != MageFrame.getDesktop()) {
    MageFrame.getDesktop().add(this,JLayeredPane.POPUP_LAYER);
  }
  pack();
  Point centered=SettingsManager.getInstance().getComponentPosition(getWidth(),getHeight());
  this.setLocation(centered.x,centered.y);
  GuiDisplayUtil.keepComponentInsideScreen(centered.x,centered.y,this);
  this.revalidate();
  this.repaint();
  this.setModal(true);
  this.setVisible(true);
}","public void loadCards(String name,CardsView pile1,CardsView pile2,BigCard bigCard,CardDimensions dimension,UUID gameId){
  this.title=name;
  this.pile1.loadCardsNarrow(pile1,bigCard,dimension,gameId,null);
  this.pile2.loadCardsNarrow(pile2,bigCard,dimension,gameId,null);
  if (getParent() != MageFrame.getDesktop()) {
    MageFrame.getDesktop().add(this,JLayeredPane.MODAL_LAYER);
  }
  pack();
  Point centered=SettingsManager.getInstance().getComponentPosition(getWidth(),getHeight());
  this.setLocation(centered.x,centered.y);
  GuiDisplayUtil.keepComponentInsideScreen(centered.x,centered.y,this);
  this.revalidate();
  this.repaint();
  this.setModal(true);
  this.setVisible(true);
}",0.9942363112391932
159832,"public GamePanel(){
  initComponents();
  combat=new CombatDialog();
  pickNumber=new PickNumberDialog();
  MageFrame.getDesktop().add(combat,JLayeredPane.POPUP_LAYER);
  combat.hideDialog();
  MageFrame.getDesktop().add(pickNumber,JLayeredPane.POPUP_LAYER);
  this.feedbackPanel.setConnectedChatPanel(this.userChatPanel);
  this.setLayout(new BorderLayout());
  final JLayeredPane j=new JLayeredPane();
  j.setSize(1024,768);
  this.add(j);
  j.add(jSplitPane0,JLayeredPane.DEFAULT_LAYER);
  Map<String,JComponent> myUi=getUIComponents(j);
  Plugins.getInstance().updateGamePanel(myUi);
  addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      int width=((JComponent)e.getSource()).getWidth();
      int height=((JComponent)e.getSource()).getHeight();
      j.setSize(width,height);
      jSplitPane0.setSize(width,height);
      if (height < storedHeight) {
        pnlBattlefield.setSize(0,200);
      }
      storedHeight=height;
      sizeToScreen();
      if (!initialized) {
        String state=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_BIG_CARD_TOGGLED,null);
        if (state != null && state.equals(""String_Node_Str"")) {
          jSplitPane0.setDividerLocation(1.0);
        }
        initialized=true;
      }
    }
  }
);
}","public GamePanel(){
  initComponents();
  combat=new CombatDialog();
  pickNumber=new PickNumberDialog();
  MageFrame.getDesktop().add(combat,JLayeredPane.MODAL_LAYER);
  combat.hideDialog();
  MageFrame.getDesktop().add(pickNumber,JLayeredPane.MODAL_LAYER);
  this.feedbackPanel.setConnectedChatPanel(this.userChatPanel);
  this.setLayout(new BorderLayout());
  final JLayeredPane j=new JLayeredPane();
  j.setSize(1024,768);
  this.add(j);
  j.add(jSplitPane0,JLayeredPane.DEFAULT_LAYER);
  Map<String,JComponent> myUi=getUIComponents(j);
  Plugins.getInstance().updateGamePanel(myUi);
  addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      int width=((JComponent)e.getSource()).getWidth();
      int height=((JComponent)e.getSource()).getHeight();
      j.setSize(width,height);
      jSplitPane0.setSize(width,height);
      if (height < storedHeight) {
        pnlBattlefield.setSize(0,200);
      }
      storedHeight=height;
      sizeToScreen();
      if (!initialized) {
        String state=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_BIG_CARD_TOGGLED,null);
        if (state != null && state.equals(""String_Node_Str"")) {
          jSplitPane0.setDividerLocation(1.0);
        }
        initialized=true;
      }
    }
  }
);
}",0.993907083015994
159833,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType() == GameEvent.EventType.CAST_SPELL) {
    Permanent enchantment=game.getPermanent(source.getSourceId());
    if (enchantment != null && enchantment.getAttachedTo() != null) {
      Player player=game.getPlayer(enchantment.getAttachedTo());
      if (player != null && event.getPlayerId().equals(player.getId())) {
        Watcher watcher=game.getState().getWatchers().get(""String_Node_Str"",source.getControllerId());
        if (watcher != null && watcher.conditionMet())         return true;
      }
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType() == GameEvent.EventType.CAST_SPELL) {
    Permanent enchantment=game.getPermanent(source.getSourceId());
    if (enchantment != null && enchantment.getAttachedTo() != null) {
      Player player=game.getPlayer(enchantment.getAttachedTo());
      if (player != null && event.getPlayerId().equals(player.getId())) {
        Watcher watcher=game.getState().getWatchers().get(""String_Node_Str"",player.getId());
        if (watcher != null && watcher.conditionMet()) {
          return true;
        }
      }
    }
  }
  return false;
}",0.9649122807017544
159834,"@Override public void watch(GameEvent event,Game game){
  if (condition == true)   return;
  if (event.getType() == GameEvent.EventType.SPELL_CAST) {
    Permanent enchantment=game.getPermanent(this.sourceId);
    if (enchantment != null && enchantment.getAttachedTo() != null) {
      Player player=game.getPlayer(enchantment.getAttachedTo());
      if (player != null && event.getPlayerId().equals(player.getId())) {
        condition=true;
      }
    }
  }
}","@Override public void watch(GameEvent event,Game game){
  if (condition == true) {
    return;
  }
  if (event.getType() == GameEvent.EventType.SPELL_CAST) {
    Permanent enchantment=game.getPermanent(this.sourceId);
    if (enchantment != null && enchantment.getAttachedTo() != null) {
      Player player=game.getPlayer(enchantment.getAttachedTo());
      if (player != null && event.getPlayerId().equals(player.getId())) {
        condition=true;
      }
    }
  }
}",0.9914163090128756
159835,"protected boolean checkStateBasedActions(){
  boolean somethingHappened=false;
  for (  Player player : state.getPlayers().values()) {
    if (!player.hasLost() && (player.getLife() <= 0 || player.isEmptyDraw() || player.getCounters().getCount(CounterType.POISON) >= 10)) {
      player.lost(this);
    }
  }
  List<Permanent> planeswalkers=new ArrayList<Permanent>();
  List<Permanent> legendary=new ArrayList<Permanent>();
  for (  Permanent perm : getBattlefield().getAllActivePermanents()) {
    if (perm.getCardType().contains(CardType.CREATURE)) {
      if (perm.getToughness().getValue() <= 0) {
        if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
          somethingHappened=true;
          continue;
        }
      }
 else       if (perm.getToughness().getValue() <= perm.getDamage() || perm.isDeathtouched()) {
        if (perm.destroy(null,this,false)) {
          somethingHappened=true;
          continue;
        }
      }
      if (perm.getPairedCard() != null) {
        Permanent paired=getPermanent(perm.getPairedCard());
        if (paired == null || !perm.getControllerId().equals(paired.getControllerId()) || paired.getPairedCard() == null) {
          perm.setPairedCard(null);
          if (paired != null) {
            paired.setPairedCard(null);
          }
          somethingHappened=true;
        }
      }
    }
 else     if (perm.getPairedCard() != null) {
      Permanent paired=getPermanent(perm.getPairedCard());
      perm.setPairedCard(null);
      if (paired != null) {
        paired.setPairedCard(null);
      }
      somethingHappened=true;
    }
    if (perm.getCardType().contains(CardType.PLANESWALKER)) {
      if (perm.getCounters().getCount(CounterType.LOYALTY) == 0) {
        if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
          somethingHappened=true;
          continue;
        }
      }
      planeswalkers.add(perm);
    }
    if (filterAura.match(perm,this)) {
      if (perm.getAttachedTo() == null) {
        if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
          somethingHappened=true;
        }
      }
 else {
        Target target=perm.getSpellAbility().getTargets().get(0);
        if (target instanceof TargetPermanent) {
          Permanent attachedTo=getPermanent(perm.getAttachedTo());
          if (attachedTo == null || !attachedTo.getAttachments().contains(perm.getId())) {
            if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
              somethingHappened=true;
            }
          }
 else {
            Filter auraFilter=perm.getSpellAbility().getTargets().get(0).getFilter();
            if (!auraFilter.match(attachedTo,this) || attachedTo.hasProtectionFrom(perm,this)) {
              if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
                somethingHappened=true;
              }
            }
          }
        }
 else         if (target instanceof TargetPlayer) {
          Player attachedTo=getPlayer(perm.getAttachedTo());
          if (attachedTo == null) {
            if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
              somethingHappened=true;
            }
          }
 else {
            Filter auraFilter=perm.getSpellAbility().getTargets().get(0).getFilter();
            if (!auraFilter.match(attachedTo,this) || attachedTo.hasProtectionFrom(perm,this)) {
              if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
                somethingHappened=true;
              }
            }
          }
        }
      }
    }
    if (filterLegendary.match(perm,this)) {
      legendary.add(perm);
    }
    if (filterEquipment.match(perm,this)) {
      if (perm.getAttachedTo() != null) {
        Permanent creature=getPermanent(perm.getAttachedTo());
        if (creature == null || !creature.getAttachments().contains(perm.getId())) {
          perm.attachTo(null,this);
        }
 else         if (!creature.getCardType().contains(CardType.CREATURE) || creature.hasProtectionFrom(perm,this)) {
          if (creature.removeAttachment(perm.getId(),this)) {
            somethingHappened=true;
          }
        }
      }
    }
    if (filterFortification.match(perm,this)) {
      if (perm.getAttachedTo() != null) {
        Permanent land=getPermanent(perm.getAttachedTo());
        if (land == null || !land.getAttachments().contains(perm.getId())) {
          perm.attachTo(null,this);
        }
 else         if (!land.getCardType().contains(CardType.LAND) || land.hasProtectionFrom(perm,this)) {
          if (land.removeAttachment(perm.getId(),this)) {
            somethingHappened=true;
          }
        }
      }
    }
    if (perm.getAttachments().size() > 0) {
      for (      UUID attachmentId : perm.getAttachments()) {
        Permanent attachment=getPermanent(attachmentId);
        if (attachment != null && !(attachment.getSubtype().contains(""String_Node_Str"") || attachment.getSubtype().contains(""String_Node_Str"") || attachment.getSubtype().contains(""String_Node_Str""))) {
          if (perm.removeAttachment(attachment.getId(),this)) {
            somethingHappened=true;
            break;
          }
        }
      }
    }
    if (perm.getCounters().containsKey(CounterType.P1P1) && perm.getCounters().containsKey(CounterType.M1M1)) {
      int p1p1=perm.getCounters().getCount(CounterType.P1P1);
      int m1m1=perm.getCounters().getCount(CounterType.M1M1);
      int min=Math.min(p1p1,m1m1);
      perm.getCounters().removeCounter(CounterType.P1P1,min);
      perm.getCounters().removeCounter(CounterType.M1M1,min);
    }
  }
  if (planeswalkers.size() > 1) {
    for (    Permanent planeswalker : planeswalkers) {
      for (      String planeswalkertype : planeswalker.getSubtype()) {
        FilterPlaneswalkerPermanent filterPlaneswalker=new FilterPlaneswalkerPermanent();
        filterPlaneswalker.add(new SubtypePredicate(planeswalkertype));
        if (getBattlefield().contains(filterPlaneswalker,planeswalker.getControllerId(),this,2)) {
          for (          Permanent perm : getBattlefield().getActivePermanents(filterPlaneswalker,planeswalker.getControllerId(),this)) {
            perm.moveToZone(Zone.GRAVEYARD,null,this,false);
          }
          return true;
        }
      }
    }
  }
  if (legendary.size() > 1) {
    for (    Permanent legend : legendary) {
      FilterPermanent filterLegendName=new FilterPermanent();
      filterLegendName.add(new SupertypePredicate(""String_Node_Str""));
      filterLegendName.add(new NamePredicate(legend.getName()));
      if (getBattlefield().contains(filterLegendName,legend.getControllerId(),this,2)) {
        for (        Permanent dupLegend : getBattlefield().getActivePermanents(filterLegendName,legend.getControllerId(),this)) {
          dupLegend.moveToZone(Zone.GRAVEYARD,null,this,false);
        }
        return true;
      }
    }
  }
  return somethingHappened;
}","protected boolean checkStateBasedActions(){
  boolean somethingHappened=false;
  for (  Player player : state.getPlayers().values()) {
    if (!player.hasLost() && (player.getLife() <= 0 || player.isEmptyDraw() || player.getCounters().getCount(CounterType.POISON) >= 10)) {
      player.lost(this);
    }
  }
  List<Permanent> planeswalkers=new ArrayList<Permanent>();
  List<Permanent> legendary=new ArrayList<Permanent>();
  for (  Permanent perm : getBattlefield().getAllActivePermanents()) {
    if (perm.getCardType().contains(CardType.CREATURE)) {
      if (perm.getToughness().getValue() <= 0) {
        if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
          somethingHappened=true;
          continue;
        }
      }
 else       if (perm.getToughness().getValue() <= perm.getDamage() || perm.isDeathtouched()) {
        if (perm.destroy(null,this,false)) {
          somethingHappened=true;
          continue;
        }
      }
      if (perm.getPairedCard() != null) {
        Permanent paired=getPermanent(perm.getPairedCard());
        if (paired == null || !perm.getControllerId().equals(paired.getControllerId()) || paired.getPairedCard() == null) {
          perm.setPairedCard(null);
          if (paired != null) {
            paired.setPairedCard(null);
          }
          somethingHappened=true;
        }
      }
    }
 else     if (perm.getPairedCard() != null) {
      Permanent paired=getPermanent(perm.getPairedCard());
      perm.setPairedCard(null);
      if (paired != null) {
        paired.setPairedCard(null);
      }
      somethingHappened=true;
    }
    if (perm.getCardType().contains(CardType.PLANESWALKER)) {
      if (perm.getCounters().getCount(CounterType.LOYALTY) == 0) {
        if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
          somethingHappened=true;
          continue;
        }
      }
      planeswalkers.add(perm);
    }
    if (filterAura.match(perm,this)) {
      if (perm.getAttachedTo() == null) {
        if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
          somethingHappened=true;
        }
      }
 else {
        Target target=perm.getSpellAbility().getTargets().get(0);
        if (target instanceof TargetPermanent) {
          Permanent attachedTo=getPermanent(perm.getAttachedTo());
          if (attachedTo == null || !attachedTo.getAttachments().contains(perm.getId())) {
            if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
              somethingHappened=true;
            }
          }
 else {
            Filter auraFilter=perm.getSpellAbility().getTargets().get(0).getFilter();
            if (!auraFilter.match(attachedTo,this) || attachedTo.hasProtectionFrom(perm,this)) {
              if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
                somethingHappened=true;
              }
            }
          }
        }
 else         if (target instanceof TargetPlayer) {
          Player attachedTo=getPlayer(perm.getAttachedTo());
          if (attachedTo == null) {
            if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
              somethingHappened=true;
            }
          }
 else {
            Filter auraFilter=perm.getSpellAbility().getTargets().get(0).getFilter();
            if (!auraFilter.match(attachedTo,this) || attachedTo.hasProtectionFrom(perm,this)) {
              if (perm.moveToZone(Zone.GRAVEYARD,null,this,false)) {
                somethingHappened=true;
              }
            }
          }
        }
      }
    }
    if (filterLegendary.match(perm,this)) {
      legendary.add(perm);
    }
    if (filterEquipment.match(perm,this)) {
      if (perm.getAttachedTo() != null) {
        Permanent creature=getPermanent(perm.getAttachedTo());
        if (creature == null || !creature.getAttachments().contains(perm.getId())) {
          UUID wasAttachedTo=perm.getAttachedTo();
          perm.attachTo(null,this);
          fireEvent(new GameEvent(GameEvent.EventType.UNATTACHED,wasAttachedTo,perm.getId(),perm.getControllerId()));
        }
 else         if (!creature.getCardType().contains(CardType.CREATURE) || creature.hasProtectionFrom(perm,this)) {
          if (creature.removeAttachment(perm.getId(),this)) {
            somethingHappened=true;
          }
        }
      }
    }
    if (filterFortification.match(perm,this)) {
      if (perm.getAttachedTo() != null) {
        Permanent land=getPermanent(perm.getAttachedTo());
        if (land == null || !land.getAttachments().contains(perm.getId())) {
          perm.attachTo(null,this);
        }
 else         if (!land.getCardType().contains(CardType.LAND) || land.hasProtectionFrom(perm,this)) {
          if (land.removeAttachment(perm.getId(),this)) {
            somethingHappened=true;
          }
        }
      }
    }
    if (perm.getAttachments().size() > 0) {
      for (      UUID attachmentId : perm.getAttachments()) {
        Permanent attachment=getPermanent(attachmentId);
        if (attachment != null && !(attachment.getSubtype().contains(""String_Node_Str"") || attachment.getSubtype().contains(""String_Node_Str"") || attachment.getSubtype().contains(""String_Node_Str""))) {
          if (perm.removeAttachment(attachment.getId(),this)) {
            somethingHappened=true;
            break;
          }
        }
      }
    }
    if (perm.getCounters().containsKey(CounterType.P1P1) && perm.getCounters().containsKey(CounterType.M1M1)) {
      int p1p1=perm.getCounters().getCount(CounterType.P1P1);
      int m1m1=perm.getCounters().getCount(CounterType.M1M1);
      int min=Math.min(p1p1,m1m1);
      perm.getCounters().removeCounter(CounterType.P1P1,min);
      perm.getCounters().removeCounter(CounterType.M1M1,min);
    }
  }
  if (planeswalkers.size() > 1) {
    for (    Permanent planeswalker : planeswalkers) {
      for (      String planeswalkertype : planeswalker.getSubtype()) {
        FilterPlaneswalkerPermanent filterPlaneswalker=new FilterPlaneswalkerPermanent();
        filterPlaneswalker.add(new SubtypePredicate(planeswalkertype));
        if (getBattlefield().contains(filterPlaneswalker,planeswalker.getControllerId(),this,2)) {
          for (          Permanent perm : getBattlefield().getActivePermanents(filterPlaneswalker,planeswalker.getControllerId(),this)) {
            perm.moveToZone(Zone.GRAVEYARD,null,this,false);
          }
          return true;
        }
      }
    }
  }
  if (legendary.size() > 1) {
    for (    Permanent legend : legendary) {
      FilterPermanent filterLegendName=new FilterPermanent();
      filterLegendName.add(new SupertypePredicate(""String_Node_Str""));
      filterLegendName.add(new NamePredicate(legend.getName()));
      if (getBattlefield().contains(filterLegendName,legend.getControllerId(),this,2)) {
        for (        Permanent dupLegend : getBattlefield().getActivePermanents(filterLegendName,legend.getControllerId(),this)) {
          dupLegend.moveToZone(Zone.GRAVEYARD,null,this,false);
        }
        return true;
      }
    }
  }
  return somethingHappened;
}",0.98624811001512
159836,"@Override public boolean apply(Game game,Ability source){
  Permanent enchantment=game.getPermanent(source.getSourceId());
  if (enchantment != null && enchantment.getAttachedTo() != null) {
    Permanent creature=game.getPermanent(enchantment.getAttachedTo());
    if (creature != null) {
      creature.addCounters(new PlusOneCounter(amount),game);
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Permanent enchantment=game.getPermanent(source.getSourceId());
  if (enchantment == null) {
    enchantment=(Permanent)game.getLastKnownInformation(source.getSourceId(),Zone.BATTLEFIELD);
  }
  if (enchantment != null && enchantment.getAttachedTo() != null) {
    Permanent creature=game.getPermanent(enchantment.getAttachedTo());
    if (creature != null) {
      creature.addCounters(new PlusOneCounter(amount),game);
    }
  }
  return true;
}",0.853907134767837
159837,"private void setText(){
  if (amount > 1)   staticText=""String_Node_Str"" + Integer.toString(amount) + ""String_Node_Str"";
 else   staticText=""String_Node_Str"";
}","private void setText(){
  if (amount > 1) {
    staticText=""String_Node_Str"" + Integer.toString(amount) + ""String_Node_Str"";
  }
 else {
    staticText=""String_Node_Str"";
  }
}",0.9523809523809524
159838,"protected void checkAttackRestrictions(Player player,Game game){
  int count=0;
  for (  CombatGroup group : groups) {
    count+=group.getAttackers().size();
  }
  if (count == 1) {
    for (    CombatGroup group : groups) {
      List<UUID> tobeRemoved=new ArrayList<UUID>();
      for (      UUID attackingCreatureId : group.getAttackers()) {
        Permanent attacker=game.getPermanent(attackingCreatureId);
        if (attacker != null && attacker.getAbilities().containsKey(CantAttackAloneAbility.getInstance().getId())) {
          game.informPlayers(attacker.getName() + ""String_Node_Str"");
          tobeRemoved.add(attackingCreatureId);
        }
      }
      for (      UUID attackingCreatureId : tobeRemoved) {
        group.remove(attackingCreatureId);
      }
    }
  }
}","protected void checkAttackRestrictions(Player player,Game game){
  int count=0;
  for (  CombatGroup group : groups) {
    count+=group.getAttackers().size();
  }
  if (count == 1) {
    List<UUID> tobeRemoved=new ArrayList<UUID>();
    for (    CombatGroup group : groups) {
      for (      UUID attackingCreatureId : group.getAttackers()) {
        Permanent attacker=game.getPermanent(attackingCreatureId);
        if (attacker != null && attacker.getAbilities().containsKey(CantAttackAloneAbility.getInstance().getId())) {
          game.informPlayers(attacker.getName() + ""String_Node_Str"");
          tobeRemoved.add(attackingCreatureId);
        }
      }
    }
    for (    UUID attackingCreatureId : tobeRemoved) {
      this.removeAttacker(attackingCreatureId,game);
    }
  }
}",0.9200507614213198
159839,"public void checkBlockRestrictions(Game game,int blockersCount){
  if (attackers.isEmpty()) {
    return;
  }
  if (blockersCount == 1) {
    List<UUID> toBeRemoved=new ArrayList<UUID>();
    for (    UUID blockerId : getBlockers()) {
      Permanent blocker=game.getPermanent(blockerId);
      if (blocker != null && blocker.getAbilities().containsKey(CantBlockAloneAbility.getInstance().getId())) {
        game.informPlayers(blocker.getName() + ""String_Node_Str"");
        toBeRemoved.add(blockerId);
      }
    }
    for (    UUID blockerId : toBeRemoved) {
      remove(blockerId);
      Permanent creature=game.getPermanent(blockerId);
      if (creature != null) {
        creature.setBlocking(creature.getBlocking() - 1);
      }
    }
    if (blockers.isEmpty()) {
      this.blocked=false;
    }
  }
  for (  UUID uuid : attackers) {
    Permanent attacker=game.getPermanent(uuid);
    if (attacker != null && this.blocked && attacker.getMinBlockedBy() > 1 && blockers.size() > 0 && blockers.size() < attacker.getMinBlockedBy()) {
      for (      UUID blockerId : blockers) {
        Permanent blocker=game.getPermanent(blockerId);
        if (blocker != null) {
          blocker.setBlocking(blocker.getBlocking() - 1);
        }
      }
      blockers.clear();
      blockerOrder.clear();
      this.blocked=false;
      game.informPlayers(attacker.getName() + ""String_Node_Str"" + attacker.getMinBlockedBy()+ ""String_Node_Str"");
      return;
    }
  }
}","public void checkBlockRestrictions(Game game,int blockersCount){
  if (attackers.isEmpty()) {
    return;
  }
  if (blockersCount == 1) {
    List<UUID> toBeRemoved=new ArrayList<UUID>();
    for (    UUID blockerId : getBlockers()) {
      Permanent blocker=game.getPermanent(blockerId);
      if (blocker != null && blocker.getAbilities().containsKey(CantBlockAloneAbility.getInstance().getId())) {
        game.informPlayers(blocker.getName() + ""String_Node_Str"");
        toBeRemoved.add(blockerId);
      }
    }
    for (    UUID blockerId : toBeRemoved) {
      game.getCombat().removeBlocker(blockerId,game);
    }
    if (blockers.isEmpty()) {
      this.blocked=false;
    }
  }
  for (  UUID uuid : attackers) {
    Permanent attacker=game.getPermanent(uuid);
    if (attacker != null && this.blocked && attacker.getMinBlockedBy() > 1 && blockers.size() > 0 && blockers.size() < attacker.getMinBlockedBy()) {
      for (      UUID blockerId : blockers) {
        Permanent blocker=game.getPermanent(blockerId);
        if (blocker != null) {
          blocker.setBlocking(blocker.getBlocking() - 1);
        }
      }
      blockers.clear();
      blockerOrder.clear();
      this.blocked=false;
      game.informPlayers(attacker.getName() + ""String_Node_Str"" + attacker.getMinBlockedBy()+ ""String_Node_Str"");
      return;
    }
  }
}",0.5842217484008528
159840,"@Override public void checkControlChanged(Game game){
  if (this.controllerChanged) {
    game.fireEvent(new GameEvent(EventType.LOST_CONTROL,objectId,objectId,beforeResetControllerId));
    game.fireEvent(new GameEvent(EventType.GAINED_CONTROL,objectId,objectId,controllerId));
  }
}","@Override public void checkControlChanged(Game game){
  if (this.controllerChanged) {
    game.fireEvent(new GameEvent(EventType.LOST_CONTROL,objectId,objectId,beforeResetControllerId));
    if (controllerId.equals(originalControllerId)) {
      this.abilities.setControllerId(controllerId);
      game.getContinuousEffects().setController(this.objectId,controllerId);
    }
    game.fireEvent(new GameEvent(EventType.GAINED_CONTROL,objectId,objectId,controllerId));
  }
}",0.7513227513227513
159841,"@Override public boolean apply(Game game,Ability source){
  Integer amountLifeGained=(Integer)this.getValue(""String_Node_Str"");
  if (amountLifeGained != null) {
    for (    UUID opponentId : game.getOpponents(source.getControllerId())) {
      Player opponent=game.getPlayer(opponentId);
      if (opponent != null) {
        opponent.damage(amountLifeGained,source.getSourceId(),game,false,true);
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Integer amountLifeGained=(Integer)this.getValue(""String_Node_Str"");
  if (amountLifeGained != null) {
    for (    UUID opponentId : game.getOpponents(source.getControllerId())) {
      Player opponent=game.getPlayer(opponentId);
      if (opponent != null) {
        opponent.loseLife(amountLifeGained,game);
      }
    }
  }
  return false;
}",0.9214285714285714
159842,"@Override public UlvenwaldTracker copy(){
  return new UlvenwaldTracker(this);
}","@Override public TargetOtherCreaturePermanent copy(){
  return new TargetOtherCreaturePermanent(this);
}",0.5652173913043478
159843,"@Override public BloodFeud copy(){
  return new BloodFeud(this);
}","@Override public TargetOtherCreaturePermanent copy(){
  return new TargetOtherCreaturePermanent(this);
}",0.611764705882353
159844,"@Override public PitFight copy(){
  return new PitFight(this);
}","@Override public TargetOtherCreaturePermanent copy(){
  return new TargetOtherCreaturePermanent(this);
}",0.6190476190476191
159845,"@Override public boolean apply(Game game,Ability source){
  Permanent creature1=game.getPermanent(source.getTargets().get(0).getFirstTarget());
  Permanent creature2=game.getPermanent(source.getTargets().get(1).getFirstTarget());
  if (creature1 != null && creature2 != null) {
    if (creature1.getCardType().contains(CardType.CREATURE) && creature2.getCardType().contains(CardType.CREATURE)) {
      creature1.damage(creature2.getPower().getValue(),creature2.getId(),game,true,false);
      creature2.damage(creature1.getPower().getValue(),creature1.getId(),game,true,false);
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Card card=game.getCard(source.getSourceId());
  if (card != null) {
    if (source.getTargets().get(0).isLegal(source,game) && source.getTargets().get(1).isLegal(source,game)) {
      Permanent creature1=game.getPermanent(source.getTargets().get(0).getFirstTarget());
      Permanent creature2=game.getPermanent(source.getTargets().get(1).getFirstTarget());
      if (creature1 != null && creature2 != null) {
        if (creature1.getCardType().contains(CardType.CREATURE) && creature2.getCardType().contains(CardType.CREATURE)) {
          creature1.damage(creature2.getPower().getValue(),creature2.getId(),game,true,false);
          creature2.damage(creature1.getPower().getValue(),creature1.getId(),game,true,false);
          return true;
        }
      }
    }
    game.informPlayers(card.getName() + ""String_Node_Str"");
  }
  return false;
}",0.7992177314211213
159846,"public Zone getZone(UUID id){
  if (id != null && zones.containsKey(id))   return zones.get(id);
  return null;
}","public Zone getZone(UUID id){
  if (id != null && zones.containsKey(id)) {
    return zones.get(id);
  }
  return null;
}",0.9658119658119658
159847,"public PlayerList getPlayerList(UUID playerId){
  PlayerList newPlayerList=new PlayerList();
  for (  Player player : players.values()) {
    if (!player.hasLeft() && !player.hasLost())     newPlayerList.add(player.getId());
  }
  newPlayerList.setCurrent(playerId);
  return newPlayerList;
}","public PlayerList getPlayerList(UUID playerId){
  PlayerList newPlayerList=new PlayerList();
  for (  Player player : players.values()) {
    if (!player.hasLeft() && !player.hasLost()) {
      newPlayerList.add(player.getId());
    }
  }
  newPlayerList.setCurrent(playerId);
  return newPlayerList;
}",0.9831649831649832
159848,"public List<TriggeredAbility> getTriggered(UUID controllerId){
  List<TriggeredAbility> triggereds=new ArrayList<TriggeredAbility>();
  for (  TriggeredAbility ability : triggered) {
    if (ability.getControllerId().equals(controllerId))     triggereds.add(ability);
  }
  return triggereds;
}","public List<TriggeredAbility> getTriggered(UUID controllerId){
  List<TriggeredAbility> triggereds=new ArrayList<TriggeredAbility>();
  for (  TriggeredAbility ability : triggered) {
    if (ability.getControllerId().equals(controllerId)) {
      triggereds.add(ability);
    }
  }
  return triggereds;
}",0.9832775919732442
159849,"public GameState(final GameState state){
  this.players=state.players.copy();
  this.playerList=state.playerList.copy();
  this.activePlayerId=state.activePlayerId;
  this.priorityPlayerId=state.priorityPlayerId;
  this.turn=state.turn.copy();
  this.stack=state.stack.copy();
  this.command=state.command.copy();
  this.exile=state.exile.copy();
  this.revealed=state.revealed.copy();
  this.lookedAt.putAll(state.lookedAt);
  this.battlefield=state.battlefield.copy();
  this.turnNum=state.turnNum;
  this.gameOver=state.gameOver;
  this.effects=state.effects.copy();
  for (  TriggeredAbility trigger : state.triggered) {
    this.triggered.add(trigger.copy());
  }
  this.triggers=state.triggers.copy();
  this.delayed=state.delayed.copy();
  this.specialActions=state.specialActions.copy();
  this.combat=state.combat.copy();
  this.turnMods=state.turnMods.copy();
  this.watchers=state.watchers.copy();
  this.values.putAll(state.values);
  this.zones.putAll(state.zones);
  for (  Map.Entry<UUID,Abilities<ActivatedAbility>> entry : state.otherAbilities.entrySet()) {
    otherAbilities.put(entry.getKey(),entry.getValue().copy());
  }
  this.paused=state.paused;
}","public GameState(final GameState state){
  this.players=state.players.copy();
  this.playerList=state.playerList.copy();
  this.activePlayerId=state.activePlayerId;
  this.priorityPlayerId=state.priorityPlayerId;
  this.turn=state.turn.copy();
  this.stack=state.stack.copy();
  this.command=state.command.copy();
  this.exile=state.exile.copy();
  this.revealed=state.revealed.copy();
  this.lookedAt.putAll(state.lookedAt);
  this.battlefield=state.battlefield.copy();
  this.turnNum=state.turnNum;
  this.gameOver=state.gameOver;
  this.effects=state.effects.copy();
  for (  TriggeredAbility trigger : state.triggered) {
    this.triggered.add(trigger.copy());
  }
  this.triggers=state.triggers.copy();
  this.delayed=state.delayed.copy();
  this.specialActions=state.specialActions.copy();
  this.combat=state.combat.copy();
  this.turnMods=state.turnMods.copy();
  this.watchers=state.watchers.copy();
  for (  Map.Entry<String,Object> entry : state.values.entrySet()) {
    if (entry.getValue() instanceof Boolean) {
      this.values.put(entry.getKey(),Boolean.valueOf(((Boolean)entry.getValue()).toString()));
    }
 else {
      this.values.put(entry.getKey(),entry.getValue());
    }
  }
  this.zones.putAll(state.zones);
  for (  Map.Entry<UUID,Abilities<ActivatedAbility>> entry : state.otherAbilities.entrySet()) {
    otherAbilities.put(entry.getKey(),entry.getValue().copy());
  }
  this.paused=state.paused;
}",0.8880338591766064
159850,"/** 
 * Try to attack alone
 */
@Test public void testCantAttackAlone(){
  addCard(Constants.Zone.BATTLEFIELD,playerB,""String_Node_Str"");
  addCard(Constants.Zone.BATTLEFIELD,playerB,""String_Node_Str"");
  attack(2,playerB,""String_Node_Str"");
  setStopAt(2,Constants.PhaseStep.END_TURN);
  execute();
  assertLife(playerA,20);
  Permanent moggFlunkies=getPermanent(""String_Node_Str"",playerB.getId());
  Assert.assertTrue(""String_Node_Str"",moggFlunkies.isTapped());
}","/** 
 * Try to attack alone
 */
@Test public void testCantAttackAlone(){
  addCard(Constants.Zone.BATTLEFIELD,playerB,""String_Node_Str"");
  addCard(Constants.Zone.BATTLEFIELD,playerB,""String_Node_Str"");
  attack(2,playerB,""String_Node_Str"");
  setStopAt(2,Constants.PhaseStep.END_TURN);
  execute();
  assertLife(playerA,20);
  Permanent moggFlunkies=getPermanent(""String_Node_Str"",playerB.getId());
  Assert.assertFalse(""String_Node_Str"",moggFlunkies.isTapped());
}",0.9366272824919442
159851,"public static void loadImages(){
  String[] symbols=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String symbol : symbols) {
    File file=new File(Constants.RESOURCE_PATH_MANA_MEDIUM + ""String_Node_Str"" + symbol+ ""String_Node_Str"");
    Rectangle r=new Rectangle(11,11);
    try {
      Image image=UI.getImageIcon(file.getAbsolutePath()).getImage();
      BufferedImage resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
      manaImages.put(symbol,resized);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + symbol);
    }
    file=new File(Constants.RESOURCE_PATH_MANA_MEDIUM + ""String_Node_Str"" + symbol+ ""String_Node_Str"");
    try {
      Image image=UI.getImageIcon(file.getAbsolutePath()).getImage();
      manaImagesOriginal.put(symbol,image);
    }
 catch (    Exception e) {
    }
  }
  List<String> setCodes=CardRepository.instance.getSetCodes();
  for (  String set : setCodes) {
    File file=new File(Constants.RESOURCE_PATH_SET + set + ""String_Node_Str"");
    try {
      Image image=UI.getImageIcon(file.getAbsolutePath()).getImage();
      int width=image.getWidth(null);
      if (width > 21) {
        int h=image.getHeight(null);
        if (h > 0) {
          Rectangle r=new Rectangle(21,(int)(h * 21.0f / width));
          BufferedImage resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
          setImages.put(set,resized);
        }
      }
 else {
        setImages.put(set,image);
      }
    }
 catch (    Exception e) {
    }
    String[] codes=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    try {
      file=new File(Constants.RESOURCE_PATH_SET_SMALL);
      if (!file.exists()) {
        file.mkdirs();
      }
      for (      String code : codes) {
        file=new File(Constants.RESOURCE_PATH_SET_SMALL + set + ""String_Node_Str""+ code+ ""String_Node_Str"");
        if (file.exists()) {
          continue;
        }
        file=new File(Constants.RESOURCE_PATH_SET + set + ""String_Node_Str""+ code+ ""String_Node_Str"");
        Image image=UI.getImageIcon(file.getAbsolutePath()).getImage();
        try {
          int width=image.getWidth(null);
          int height=image.getHeight(null);
          if (height > 0) {
            int dx=0;
            if (set.equals(""String_Node_Str"") || set.equals(""String_Node_Str"") || set.equals(""String_Node_Str"")) {
              dx=6;
            }
            Rectangle r=new Rectangle(15 + dx,(int)(height * (15.0f + dx) / width));
            BufferedImage resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
            File newFile=new File(Constants.RESOURCE_PATH_SET_SMALL + File.separator + set+ ""String_Node_Str""+ code+ ""String_Node_Str"");
            ImageIO.write(resized,""String_Node_Str"",newFile);
          }
        }
 catch (        Exception e) {
          if (file != null && file.exists()) {
            file.delete();
          }
        }
      }
    }
 catch (    Exception e) {
    }
  }
  File file;
  for (  String set : CardRepository.instance.getSetCodes()) {
    file=new File(Constants.RESOURCE_PATH_SET_SMALL);
    if (!file.exists()) {
      break;
    }
    file=new File(Constants.RESOURCE_PATH_SET_SMALL + set + ""String_Node_Str"");
    try {
      Image image=UI.getImageIcon(file.getAbsolutePath()).getImage();
      int width=image.getWidth(null);
      int height=image.getHeight(null);
      setImagesExist.put(set,new Dimension(width,height));
    }
 catch (    Exception e) {
    }
  }
}","public static void loadImages(){
  String[] symbols=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String symbol : symbols) {
    File file=new File(getSymbolsPath() + Constants.RESOURCE_PATH_MANA_MEDIUM + ""String_Node_Str""+ symbol+ ""String_Node_Str"");
    Rectangle r=new Rectangle(11,11);
    try {
      Image image=UI.getImageIcon(file.getAbsolutePath()).getImage();
      BufferedImage resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
      manaImages.put(symbol,resized);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + symbol);
    }
    file=new File(getSymbolsPath() + Constants.RESOURCE_PATH_MANA_MEDIUM + ""String_Node_Str""+ symbol+ ""String_Node_Str"");
    try {
      Image image=UI.getImageIcon(file.getAbsolutePath()).getImage();
      manaImagesOriginal.put(symbol,image);
    }
 catch (    Exception e) {
    }
  }
  List<String> setCodes=CardRepository.instance.getSetCodes();
  for (  String set : setCodes) {
    File file=new File(getSymbolsPath() + Constants.RESOURCE_PATH_SET + set+ ""String_Node_Str"");
    try {
      Image image=UI.getImageIcon(file.getAbsolutePath()).getImage();
      int width=image.getWidth(null);
      if (width > 21) {
        int h=image.getHeight(null);
        if (h > 0) {
          Rectangle r=new Rectangle(21,(int)(h * 21.0f / width));
          BufferedImage resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
          setImages.put(set,resized);
        }
      }
 else {
        setImages.put(set,image);
      }
    }
 catch (    Exception e) {
    }
    String[] codes=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    try {
      file=new File(getSymbolsPath() + Constants.RESOURCE_PATH_SET_SMALL);
      if (!file.exists()) {
        file.mkdirs();
      }
      for (      String code : codes) {
        file=new File(getSymbolsPath() + Constants.RESOURCE_PATH_SET_SMALL + set+ ""String_Node_Str""+ code+ ""String_Node_Str"");
        if (file.exists()) {
          continue;
        }
        file=new File(getSymbolsPath() + Constants.RESOURCE_PATH_SET + set+ ""String_Node_Str""+ code+ ""String_Node_Str"");
        Image image=UI.getImageIcon(file.getAbsolutePath()).getImage();
        try {
          int width=image.getWidth(null);
          int height=image.getHeight(null);
          if (height > 0) {
            int dx=0;
            if (set.equals(""String_Node_Str"") || set.equals(""String_Node_Str"") || set.equals(""String_Node_Str"")) {
              dx=6;
            }
            Rectangle r=new Rectangle(15 + dx,(int)(height * (15.0f + dx) / width));
            BufferedImage resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
            File newFile=new File(getSymbolsPath() + Constants.RESOURCE_PATH_SET_SMALL + File.separator+ set+ ""String_Node_Str""+ code+ ""String_Node_Str"");
            ImageIO.write(resized,""String_Node_Str"",newFile);
          }
        }
 catch (        Exception e) {
          if (file != null && file.exists()) {
            file.delete();
          }
        }
      }
    }
 catch (    Exception e) {
    }
  }
  File file;
  for (  String set : CardRepository.instance.getSetCodes()) {
    file=new File(getSymbolsPath() + Constants.RESOURCE_PATH_SET_SMALL);
    if (!file.exists()) {
      break;
    }
    file=new File(getSymbolsPath() + Constants.RESOURCE_PATH_SET_SMALL + set+ ""String_Node_Str"");
    try {
      Image image=UI.getImageIcon(file.getAbsolutePath()).getImage();
      int width=image.getWidth(null);
      int height=image.getHeight(null);
      setImagesExist.put(set,new Dimension(width,height));
    }
 catch (    Exception e) {
    }
  }
}",0.9796942733287702
159852,"public static synchronized String replaceSymbolsWithHTML(String value,Type type){
  value=value.replace(""String_Node_Str"",""String_Node_Str"");
  value=value.replace(""String_Node_Str"",""String_Node_Str"");
  String replaced=value;
  if (!manaImages.isEmpty()) {
    if (type.equals(Type.TOOLTIP)) {
      replaced=replaceSymbolsPattern.matcher(value).replaceAll(""String_Node_Str"");
    }
 else     if (type.equals(Type.CARD)) {
      value=value.replace(""String_Node_Str"",""String_Node_Str"");
      replaced=replaceSymbolsPattern.matcher(value).replaceAll(""String_Node_Str"");
    }
 else     if (type.equals(Type.PAY)) {
      value=value.replace(""String_Node_Str"",""String_Node_Str"");
      replaced=replaceSymbolsPattern.matcher(value).replaceAll(""String_Node_Str"");
    }
  }
  replaced=replaced.replace(""String_Node_Str"",""String_Node_Str"");
  replaced=replaced.replace(""String_Node_Str"",""String_Node_Str"");
  return replaced;
}","public static synchronized String replaceSymbolsWithHTML(String value,Type type){
  value=value.replace(""String_Node_Str"",""String_Node_Str"");
  value=value.replace(""String_Node_Str"",""String_Node_Str"");
  String replaced=value;
  if (!manaImages.isEmpty()) {
    if (type.equals(Type.TOOLTIP)) {
      replaced=replaceSymbolsPattern.matcher(value).replaceAll(""String_Node_Str"" + getSymbolsPath(true) + ""String_Node_Str"");
    }
 else     if (type.equals(Type.CARD)) {
      value=value.replace(""String_Node_Str"",""String_Node_Str"" + getSymbolsPath() + ""String_Node_Str"");
      replaced=replaceSymbolsPattern.matcher(value).replaceAll(""String_Node_Str"" + getSymbolsPath(true) + ""String_Node_Str"");
    }
 else     if (type.equals(Type.PAY)) {
      value=value.replace(""String_Node_Str"",""String_Node_Str"" + getSymbolsPath() + ""String_Node_Str"");
      replaced=replaceSymbolsPattern.matcher(value).replaceAll(""String_Node_Str"" + getSymbolsPath(true) + ""String_Node_Str"");
    }
  }
  replaced=replaced.replace(""String_Node_Str"",""String_Node_Str"");
  replaced=replaced.replace(""String_Node_Str"",""String_Node_Str"");
  System.out.println(replaced);
  return replaced;
}",0.871230253709909
159853,"public static String replaceSetCodeWithHTML(String set,String rarity){
  String _set=set;
  if (setImagesExist.containsKey(_set)) {
    Integer width=setImagesExist.get(_set).width;
    Integer height=setImagesExist.get(_set).height;
    return ""String_Node_Str"" + _set + ""String_Node_Str""+ rarity+ ""String_Node_Str""+ rarity+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"";
  }
 else {
    return set;
  }
}","public static String replaceSetCodeWithHTML(String set,String rarity){
  String _set=set;
  if (setImagesExist.containsKey(_set)) {
    Integer width=setImagesExist.get(_set).width;
    Integer height=setImagesExist.get(_set).height;
    return ""String_Node_Str"" + getSymbolsPath() + ""String_Node_Str""+ _set+ ""String_Node_Str""+ rarity+ ""String_Node_Str""+ rarity+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"";
  }
 else {
    return set;
  }
}",0.8898776418242491
159854,"/** 
 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
 */
@SuppressWarnings(""String_Node_Str"") private void initComponents(){
  panelBackground=new MageRoundPane();
  panelBackground.setPreferredSize(new Dimension(PANEL_WIDTH - 2,PANEL_HEIGHT));
  Rectangle r=new Rectangle(80,80);
  lifeLabel=new JLabel();
  handLabel=new JLabel();
  poisonLabel=new JLabel();
  libraryLabel=new JLabel();
  setOpaque(false);
  panelBackground.setXOffset(3);
  panelBackground.setYOffset(3);
  panelBackground.setVisible(true);
  Image image=ImageHelper.getImageFromResources(""String_Node_Str"");
  topCardPanel=Plugins.getInstance().getMageCard(new CardView(CardRepository.instance.findCard(""String_Node_Str"").getCard()),bigCard,topCardDimension,gameId,true);
  topCardPanel.setVisible(false);
  panelBackground.add(topCardPanel);
  BufferedImage resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  avatar=new HoverButton(""String_Node_Str"",resized,resized,resized,r);
  avatar.setObserver(new Command(){
    @Override public void execute(){
      session.sendPlayerUUID(gameId,playerId);
    }
  }
);
  r=new Rectangle(18,18);
  lifeLabel.setToolTipText(""String_Node_Str"");
  Image imageLife=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedLife=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageLife,BufferedImage.TYPE_INT_ARGB),r);
  life=new ImagePanel(resizedLife,ImagePanel.ACTUAL);
  life.setToolTipText(""String_Node_Str"");
  life.setOpaque(false);
  r=new Rectangle(18,18);
  handLabel.setToolTipText(""String_Node_Str"");
  Image imageHand=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedHand=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageHand,BufferedImage.TYPE_INT_ARGB),r);
  hand=new ImagePanel(resizedHand,ImagePanel.ACTUAL);
  hand.setToolTipText(""String_Node_Str"");
  hand.setOpaque(false);
  poisonLabel.setText(""String_Node_Str"");
  r=new Rectangle(14,14);
  poisonLabel.setToolTipText(""String_Node_Str"");
  Image imagePoison=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedPoison=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imagePoison,BufferedImage.TYPE_INT_ARGB),r);
  poison=new ImagePanel(resizedPoison,ImagePanel.ACTUAL);
  poison.setToolTipText(""String_Node_Str"");
  poison.setOpaque(false);
  r=new Rectangle(19,19);
  libraryLabel.setToolTipText(""String_Node_Str"");
  Image imageLibrary=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedLibrary=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageLibrary,BufferedImage.TYPE_INT_ARGB),r);
  library=new ImagePanel(resizedLibrary,ImagePanel.ACTUAL);
  library.setToolTipText(""String_Node_Str"");
  library.setOpaque(false);
  graveLabel=new JLabel();
  r=new Rectangle(21,21);
  graveLabel.setToolTipText(""String_Node_Str"");
  Image imageGrave=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedGrave=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageGrave,BufferedImage.TYPE_INT_ARGB),r);
  grave=new HoverButton(null,resizedGrave,resizedGrave,resizedGrave,r);
  grave.setToolTipText(""String_Node_Str"");
  grave.setOpaque(false);
  grave.setObserver(new Command(){
    @Override public void execute(){
      btnGraveActionPerformed(null);
    }
  }
);
  r=new Rectangle(25,21);
  image=ImageHelper.getImageFromResources(""String_Node_Str"");
  resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  cheat=new JButton();
  cheat.setIcon(new ImageIcon(resized));
  cheat.setToolTipText(""String_Node_Str"");
  cheat.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      btnCheatActionPerformed(e);
    }
  }
);
  zonesPanel=new JPanel();
  zonesPanel.setPreferredSize(new Dimension(100,25));
  zonesPanel.setSize(100,25);
  zonesPanel.setLayout(null);
  image=ImageHelper.getImageFromResources(""String_Node_Str"");
  r=new Rectangle(21,21);
  resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  commandZone=new HoverButton(null,resized,resized,resized,r);
  commandZone.setToolTipText(""String_Node_Str"");
  commandZone.setOpaque(false);
  commandZone.setObserver(new Command(){
    @Override public void execute(){
      btnExileZoneActionPerformed(null);
    }
  }
);
  commandZone.setBounds(0,0,21,21);
  zonesPanel.add(commandZone);
  btnPlayer=new JButton();
  btnPlayer.setText(""String_Node_Str"");
  btnPlayer.setVisible(false);
  btnPlayer.setToolTipText(""String_Node_Str"");
  btnPlayer.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      session.sendPlayerUUID(gameId,playerId);
    }
  }
);
  BufferedImage imageManaW=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaW=new ImagePanel(imageManaW,ImagePanel.ACTUAL);
  manaW.setOpaque(false);
  JLabel manaCountLabelW=new JLabel();
  manaCountLabelW.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelW);
  BufferedImage imageManaU=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaU=new ImagePanel(imageManaU,ImagePanel.ACTUAL);
  manaU.setOpaque(false);
  JLabel manaCountLabelU=new JLabel();
  manaCountLabelU.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelU);
  BufferedImage imageManaB=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaB=new ImagePanel(imageManaB,ImagePanel.ACTUAL);
  manaB.setOpaque(false);
  JLabel manaCountLabelB=new JLabel();
  manaCountLabelB.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelB);
  BufferedImage imageManaR=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaR=new ImagePanel(imageManaR,ImagePanel.ACTUAL);
  manaR.setOpaque(false);
  JLabel manaCountLabelR=new JLabel();
  manaCountLabelR.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelR);
  BufferedImage imageManaG=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaG=new ImagePanel(imageManaG,ImagePanel.ACTUAL);
  manaG.setOpaque(false);
  JLabel manaCountLabelG=new JLabel();
  manaCountLabelG.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelG);
  BufferedImage imageManaX=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaX=new ImagePanel(imageManaX,ImagePanel.ACTUAL);
  manaX.setOpaque(false);
  JLabel manaCountLabelX=new JLabel();
  manaCountLabelX.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelX);
  GroupLayout gl_panelBackground=new GroupLayout(panelBackground);
  gl_panelBackground.setHorizontalGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(9).addComponent(life,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE).addGap(3).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(hand,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addComponent(lifeLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(4).addComponent(handLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(9).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(3).addComponent(poison,GroupLayout.PREFERRED_SIZE,14,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(manaW,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(manaU,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(manaB,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addComponent(grave,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(library,GroupLayout.PREFERRED_SIZE,19,GroupLayout.PREFERRED_SIZE)).addComponent(poisonLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(20).addComponent(manaR,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(manaCountLabelW,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGap(3).addComponent(manaCountLabelR,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(manaCountLabelB,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(19).addComponent(manaX,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE))).addGap(5).addComponent(manaCountLabelX,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(20).addComponent(manaG,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(40).addComponent(manaCountLabelG,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(40).addComponent(libraryLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(cheat,GroupLayout.PREFERRED_SIZE,25,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(5).addComponent(graveLabel,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(manaCountLabelU,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)))).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(btnPlayer,Alignment.TRAILING,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(avatar,Alignment.TRAILING,GroupLayout.DEFAULT_SIZE,80,Short.MAX_VALUE)).addGap(14)).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addComponent(zonesPanel,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE).addGap(14)));
  gl_panelBackground.setVerticalGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addComponent(avatar,GroupLayout.PREFERRED_SIZE,80,GroupLayout.PREFERRED_SIZE).addPreferredGap(ComponentPlacement.RELATED).addComponent(btnPlayer).addPreferredGap(ComponentPlacement.RELATED).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(life,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(hand,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addComponent(lifeLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addComponent(handLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(1).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(4).addComponent(poison,GroupLayout.PREFERRED_SIZE,14,GroupLayout.PREFERRED_SIZE).addGap(4).addComponent(manaW,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(2).addComponent(manaU,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(2).addComponent(manaB,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(5).addComponent(grave,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(library,GroupLayout.PREFERRED_SIZE,19,GroupLayout.PREFERRED_SIZE)).addComponent(poisonLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(2).addComponent(manaR,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(14).addComponent(manaCountLabelW,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(14).addComponent(manaCountLabelR,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGap(4).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(manaCountLabelB,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(8).addComponent(manaX,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addComponent(manaCountLabelX,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGroup(gl_panelBackground.createSequentialGroup().addGap(39).addComponent(manaG,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(31).addComponent(manaCountLabelG,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addComponent(libraryLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(76).addComponent(cheat,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(76).addComponent(graveLabel,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(31).addComponent(manaCountLabelU,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addPreferredGap(ComponentPlacement.RELATED).addComponent(zonesPanel,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  panelBackground.setLayout(gl_panelBackground);
  GroupLayout groupLayout=new GroupLayout(this);
  groupLayout.setHorizontalGroup(groupLayout.createParallelGroup(Alignment.LEADING).addGroup(groupLayout.createSequentialGroup().addComponent(panelBackground,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  groupLayout.setVerticalGroup(groupLayout.createParallelGroup(Alignment.LEADING).addGroup(groupLayout.createSequentialGroup().addComponent(panelBackground,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  setLayout(groupLayout);
}","/** 
 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
 */
@SuppressWarnings(""String_Node_Str"") private void initComponents(){
  panelBackground=new MageRoundPane();
  panelBackground.setPreferredSize(new Dimension(PANEL_WIDTH - 2,PANEL_HEIGHT));
  Rectangle r=new Rectangle(80,80);
  lifeLabel=new JLabel();
  handLabel=new JLabel();
  poisonLabel=new JLabel();
  libraryLabel=new JLabel();
  setOpaque(false);
  panelBackground.setXOffset(3);
  panelBackground.setYOffset(3);
  panelBackground.setVisible(true);
  Image image=ImageHelper.getImageFromResources(""String_Node_Str"");
  topCardPanel=Plugins.getInstance().getMageCard(new CardView(CardRepository.instance.findCard(""String_Node_Str"").getCard()),bigCard,topCardDimension,gameId,true);
  topCardPanel.setVisible(false);
  panelBackground.add(topCardPanel);
  BufferedImage resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  avatar=new HoverButton(""String_Node_Str"",resized,resized,resized,r);
  avatar.setObserver(new Command(){
    @Override public void execute(){
      session.sendPlayerUUID(gameId,playerId);
    }
  }
);
  r=new Rectangle(18,18);
  lifeLabel.setToolTipText(""String_Node_Str"");
  Image imageLife=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedLife=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageLife,BufferedImage.TYPE_INT_ARGB),r);
  life=new ImagePanel(resizedLife,ImagePanel.ACTUAL);
  life.setToolTipText(""String_Node_Str"");
  life.setOpaque(false);
  r=new Rectangle(18,18);
  handLabel.setToolTipText(""String_Node_Str"");
  Image imageHand=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedHand=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageHand,BufferedImage.TYPE_INT_ARGB),r);
  hand=new ImagePanel(resizedHand,ImagePanel.ACTUAL);
  hand.setToolTipText(""String_Node_Str"");
  hand.setOpaque(false);
  poisonLabel.setText(""String_Node_Str"");
  r=new Rectangle(14,14);
  poisonLabel.setToolTipText(""String_Node_Str"");
  Image imagePoison=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedPoison=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imagePoison,BufferedImage.TYPE_INT_ARGB),r);
  poison=new ImagePanel(resizedPoison,ImagePanel.ACTUAL);
  poison.setToolTipText(""String_Node_Str"");
  poison.setOpaque(false);
  r=new Rectangle(19,19);
  libraryLabel.setToolTipText(""String_Node_Str"");
  Image imageLibrary=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedLibrary=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageLibrary,BufferedImage.TYPE_INT_ARGB),r);
  library=new ImagePanel(resizedLibrary,ImagePanel.ACTUAL);
  library.setToolTipText(""String_Node_Str"");
  library.setOpaque(false);
  graveLabel=new JLabel();
  r=new Rectangle(21,21);
  graveLabel.setToolTipText(""String_Node_Str"");
  Image imageGrave=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedGrave=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageGrave,BufferedImage.TYPE_INT_ARGB),r);
  grave=new HoverButton(null,resizedGrave,resizedGrave,resizedGrave,r);
  grave.setToolTipText(""String_Node_Str"");
  grave.setOpaque(false);
  grave.setObserver(new Command(){
    @Override public void execute(){
      btnGraveActionPerformed(null);
    }
  }
);
  r=new Rectangle(25,21);
  image=ImageHelper.getImageFromResources(""String_Node_Str"");
  resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  cheat=new JButton();
  cheat.setIcon(new ImageIcon(resized));
  cheat.setToolTipText(""String_Node_Str"");
  cheat.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      btnCheatActionPerformed(e);
    }
  }
);
  zonesPanel=new JPanel();
  zonesPanel.setPreferredSize(new Dimension(100,20));
  zonesPanel.setSize(100,20);
  zonesPanel.setLayout(null);
  image=ImageHelper.getImageFromResources(""String_Node_Str"");
  r=new Rectangle(21,21);
  resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  commandZone=new HoverButton(null,resized,resized,resized,r);
  commandZone.setToolTipText(""String_Node_Str"");
  commandZone.setOpaque(false);
  commandZone.setObserver(new Command(){
    @Override public void execute(){
      btnExileZoneActionPerformed(null);
    }
  }
);
  commandZone.setBounds(0,0,21,21);
  zonesPanel.add(commandZone);
  btnPlayer=new JButton();
  btnPlayer.setText(""String_Node_Str"");
  btnPlayer.setVisible(false);
  btnPlayer.setToolTipText(""String_Node_Str"");
  btnPlayer.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      session.sendPlayerUUID(gameId,playerId);
    }
  }
);
  BufferedImage imageManaW=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaW=new ImagePanel(imageManaW,ImagePanel.ACTUAL);
  manaW.setOpaque(false);
  JLabel manaCountLabelW=new JLabel();
  manaCountLabelW.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelW);
  BufferedImage imageManaU=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaU=new ImagePanel(imageManaU,ImagePanel.ACTUAL);
  manaU.setOpaque(false);
  JLabel manaCountLabelU=new JLabel();
  manaCountLabelU.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelU);
  BufferedImage imageManaB=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaB=new ImagePanel(imageManaB,ImagePanel.ACTUAL);
  manaB.setOpaque(false);
  JLabel manaCountLabelB=new JLabel();
  manaCountLabelB.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelB);
  BufferedImage imageManaR=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaR=new ImagePanel(imageManaR,ImagePanel.ACTUAL);
  manaR.setOpaque(false);
  JLabel manaCountLabelR=new JLabel();
  manaCountLabelR.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelR);
  BufferedImage imageManaG=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaG=new ImagePanel(imageManaG,ImagePanel.ACTUAL);
  manaG.setOpaque(false);
  JLabel manaCountLabelG=new JLabel();
  manaCountLabelG.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelG);
  BufferedImage imageManaX=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaX=new ImagePanel(imageManaX,ImagePanel.ACTUAL);
  manaX.setOpaque(false);
  JLabel manaCountLabelX=new JLabel();
  manaCountLabelX.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelX);
  GroupLayout gl_panelBackground=new GroupLayout(panelBackground);
  gl_panelBackground.setHorizontalGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(9).addComponent(life,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE).addGap(3).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(hand,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addComponent(lifeLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(4).addComponent(handLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(9).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(3).addComponent(poison,GroupLayout.PREFERRED_SIZE,14,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(manaW,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(manaU,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(manaB,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addComponent(grave,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(library,GroupLayout.PREFERRED_SIZE,19,GroupLayout.PREFERRED_SIZE)).addComponent(poisonLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(20).addComponent(manaR,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(manaCountLabelW,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGap(3).addComponent(manaCountLabelR,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(manaCountLabelB,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(19).addComponent(manaX,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE))).addGap(5).addComponent(manaCountLabelX,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(20).addComponent(manaG,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(40).addComponent(manaCountLabelG,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(40).addComponent(libraryLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(cheat,GroupLayout.PREFERRED_SIZE,25,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(5).addComponent(graveLabel,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(manaCountLabelU,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)))).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(btnPlayer,Alignment.TRAILING,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(avatar,Alignment.TRAILING,GroupLayout.DEFAULT_SIZE,80,Short.MAX_VALUE)).addGap(14)).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addComponent(zonesPanel,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE).addGap(14)));
  gl_panelBackground.setVerticalGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addComponent(avatar,GroupLayout.PREFERRED_SIZE,80,GroupLayout.PREFERRED_SIZE).addPreferredGap(ComponentPlacement.RELATED).addComponent(btnPlayer).addPreferredGap(ComponentPlacement.RELATED).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(life,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(hand,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addComponent(lifeLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addComponent(handLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(1).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(4).addComponent(poison,GroupLayout.PREFERRED_SIZE,14,GroupLayout.PREFERRED_SIZE).addGap(4).addComponent(manaW,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(2).addComponent(manaU,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(2).addComponent(manaB,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(5).addComponent(grave,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(library,GroupLayout.PREFERRED_SIZE,19,GroupLayout.PREFERRED_SIZE)).addComponent(poisonLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(2).addComponent(manaR,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(14).addComponent(manaCountLabelW,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(14).addComponent(manaCountLabelR,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGap(4).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(manaCountLabelB,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(8).addComponent(manaX,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addComponent(manaCountLabelX,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGroup(gl_panelBackground.createSequentialGroup().addGap(39).addComponent(manaG,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(31).addComponent(manaCountLabelG,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addComponent(libraryLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(76).addComponent(cheat,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(76).addComponent(graveLabel,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(31).addComponent(manaCountLabelU,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addPreferredGap(ComponentPlacement.RELATED).addComponent(zonesPanel,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  panelBackground.setLayout(gl_panelBackground);
  GroupLayout groupLayout=new GroupLayout(this);
  groupLayout.setHorizontalGroup(groupLayout.createParallelGroup(Alignment.LEADING).addGroup(groupLayout.createSequentialGroup().addComponent(panelBackground,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  groupLayout.setVerticalGroup(groupLayout.createParallelGroup(Alignment.LEADING).addGroup(groupLayout.createSequentialGroup().addComponent(panelBackground,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  setLayout(groupLayout);
}",0.9998685507722642
159855,"@Override public String getText(){
  if (this.size() == 0)   return ""String_Node_Str"";
  StringBuilder sbText=new StringBuilder();
  for (  ManaCost cost : this) {
    sbText.append(cost.getText());
  }
  return sbText.toString();
}","@Override public String getText(){
  if (this.size() == 0)   return ""String_Node_Str"";
  StringBuilder sbText=new StringBuilder();
  for (  ManaCost cost : this) {
    if (cost instanceof GenericManaCost) {
      sbText.append(cost.getText());
    }
  }
  for (  ManaCost cost : this) {
    if (!(cost instanceof GenericManaCost)) {
      sbText.append(cost.getText());
    }
  }
  return sbText.toString();
}",0.7238689547581904
159856,"public void sizePlayer(boolean smallMode){
  this.playerPanel.sizePlayerPanel(smallMode);
  if (smallMode) {
    this.playerPanel.setPreferredSize(new Dimension(92,PANEL_HEIGHT_SMALL));
    this.battlefieldPanel.setPreferredSize(new Dimension(160,PANEL_HEIGHT_SMALL));
  }
 else {
    this.playerPanel.setPreferredSize(new Dimension(92,PANEL_HEIGHT));
    this.battlefieldPanel.setPreferredSize(new Dimension(160,PANEL_HEIGHT));
  }
}","public void sizePlayer(boolean smallMode){
  this.playerPanel.sizePlayerPanel(smallMode);
  this.smallMode=smallMode;
  if (smallMode) {
    this.playerPanel.setPreferredSize(new Dimension(92,PANEL_HEIGHT_SMALL));
    this.battlefieldPanel.setPreferredSize(new Dimension(160,PANEL_HEIGHT_SMALL));
  }
 else {
    this.playerPanel.setPreferredSize(new Dimension(92,PANEL_HEIGHT));
    this.battlefieldPanel.setPreferredSize(new Dimension(160,PANEL_HEIGHT));
  }
}",0.96875
159857,"public void sizePlayerPanel(boolean smallMode){
  if (smallMode) {
    avatar.setVisible(false);
    btnPlayer.setVisible(true);
    panelBackground.setPreferredSize(new Dimension(PANEL_WIDTH - 2,PANEL_HEIGHT_SMALL));
    panelBackground.setBounds(0,0,PANEL_WIDTH - 2,PANEL_HEIGHT_SMALL);
  }
 else {
    avatar.setVisible(true);
    btnPlayer.setVisible(false);
    panelBackground.setPreferredSize(new Dimension(PANEL_WIDTH - 2,PANEL_HEIGHT));
    panelBackground.setBounds(0,0,PANEL_WIDTH - 2,PANEL_HEIGHT);
  }
}","protected void sizePlayerPanel(boolean smallMode){
  if (smallMode) {
    avatar.setVisible(false);
    btnPlayer.setVisible(true);
    panelBackground.setPreferredSize(new Dimension(PANEL_WIDTH - 2,PANEL_HEIGHT_SMALL));
    panelBackground.setBounds(0,0,PANEL_WIDTH - 2,PANEL_HEIGHT_SMALL);
  }
 else {
    avatar.setVisible(true);
    btnPlayer.setVisible(false);
    panelBackground.setPreferredSize(new Dimension(PANEL_WIDTH - 2,PANEL_HEIGHT));
    panelBackground.setBounds(0,0,PANEL_WIDTH - 2,PANEL_HEIGHT);
  }
}",0.9893719806763284
159858,"private void drawArrowsForTargets(TransferData data,Point parentPoint){
  List<UUID> targets=data.card.getTargets();
  if (targets != null) {
    Point me=new Point(data.locationOnScreen);
    me.translate(-parentPoint.x,-parentPoint.y);
    for (    UUID uuid : targets) {
      PlayAreaPanel p=MageFrame.getGame(data.gameId).getPlayers().get(uuid);
      if (p != null) {
        Point target=p.getLocationOnScreen();
        target.translate(-parentPoint.x,-parentPoint.y);
        ArrowBuilder.getBuilder().addArrow(data.gameId,(int)me.getX() + 35,(int)me.getY(),(int)target.getX() + 40,(int)target.getY() - 40,Color.red,ArrowBuilder.Type.TARGET);
      }
 else {
        for (        PlayAreaPanel pa : MageFrame.getGame(data.gameId).getPlayers().values()) {
          MagePermanent permanent=pa.getBattlefieldPanel().getPermanents().get(uuid);
          if (permanent != null) {
            Point target=permanent.getLocationOnScreen();
            target.translate(-parentPoint.x,-parentPoint.y);
            ArrowBuilder.getBuilder().addArrow(data.gameId,(int)me.getX() + 35,(int)me.getY(),(int)target.getX() + 40,(int)target.getY() + 10,Color.red,ArrowBuilder.Type.TARGET);
          }
        }
      }
    }
  }
}","private void drawArrowsForTargets(TransferData data,Point parentPoint){
  List<UUID> targets=data.card.getTargets();
  if (targets != null) {
    Point me=new Point(data.locationOnScreen);
    me.translate(-parentPoint.x,-parentPoint.y);
    for (    UUID uuid : targets) {
      boolean found=false;
      PlayAreaPanel p=MageFrame.getGame(data.gameId).getPlayers().get(uuid);
      if (p != null) {
        found=true;
        Point target=p.getLocationOnScreen();
        target.translate(-parentPoint.x,-parentPoint.y);
        ArrowBuilder.getBuilder().addArrow(data.gameId,(int)me.getX() + 35,(int)me.getY(),(int)target.getX() + 40,(int)target.getY() - 40,Color.red,ArrowBuilder.Type.TARGET);
      }
 else {
        for (        PlayAreaPanel pa : MageFrame.getGame(data.gameId).getPlayers().values()) {
          MagePermanent permanent=pa.getBattlefieldPanel().getPermanents().get(uuid);
          if (permanent != null) {
            found=true;
            Point target=permanent.getLocationOnScreen();
            target.translate(-parentPoint.x,-parentPoint.y);
            ArrowBuilder.getBuilder().addArrow(data.gameId,(int)me.getX() + 35,(int)me.getY(),(int)target.getX() + 40,(int)target.getY() + 10,Color.red,ArrowBuilder.Type.TARGET);
          }
        }
      }
      if (!found) {
        for (        PlayAreaPanel panel : MageFrame.getGame(data.gameId).getPlayers().values()) {
          PlayerView view=panel.getPlayerPanel().getPlayer();
          if (view != null) {
            SimpleCardsView graveyard=view.getGraveyard();
            if (graveyard.containsKey(uuid)) {
              found=true;
              p=MageFrame.getGame(data.gameId).getPlayers().get(view.getPlayerId());
              if (p != null) {
                Point target=p.getLocationOnScreen();
                target.translate(-parentPoint.x,-parentPoint.y);
                int y_offset=p.isSmallMode() ? (PlayAreaPanel.PANEL_HEIGHT - PlayAreaPanel.PANEL_HEIGHT_SMALL) : 0;
                ArrowBuilder.getBuilder().addArrow(data.gameId,(int)me.getX() + 35,(int)me.getY(),(int)target.getX() + 15,(int)target.getY() + 145 - y_offset,Color.red,ArrowBuilder.Type.TARGET);
              }
              continue;
            }
          }
        }
      }
    }
  }
}",0.7010309278350515
159859,"public GameView(GameState state,Game game){
  for (  Player player : state.getPlayers().values()) {
    players.add(new PlayerView(player,state,game));
  }
  for (  StackObject stackObject : state.getStack()) {
    if (stackObject instanceof StackAbility) {
      MageObject object=game.getObject(stackObject.getSourceId());
      Card card=game.getCard(stackObject.getSourceId());
      if (card != null) {
        if (object != null) {
          stack.put(stackObject.getId(),new StackAbilityView((StackAbility)stackObject,card.getName(),new CardView(card)));
        }
 else {
          stack.put(stackObject.getId(),new StackAbilityView((StackAbility)stackObject,""String_Node_Str"",new CardView(card)));
        }
        if (card.canTransform()) {
          updateLatestCardView(game,card,stackObject.getId());
        }
        checkPaid(stackObject.getId(),(StackAbility)stackObject);
      }
 else       if (object != null) {
        if (object instanceof PermanentToken) {
          PermanentToken token=(PermanentToken)object;
          stack.put(stackObject.getId(),new CardView(token));
          checkPaid(stackObject.getId(),(StackAbility)stackObject);
        }
 else {
          StackAbility stackAbility=((StackAbility)object);
          stackAbility.newId();
          MageObject emblem=game.getEmblem(stackAbility.getSourceId());
          if (emblem != null) {
            Card sourceCard=game.getCard(((CommandObject)emblem).getSourceId());
            if (sourceCard != null) {
              stackAbility.setName(""String_Node_Str"" + sourceCard.getName());
              stackAbility.setExpansionSetCode(sourceCard.getExpansionSetCode());
            }
          }
          stack.put(stackObject.getId(),new CardView(stackAbility));
          checkPaid(stackObject.getId(),stackAbility);
        }
      }
    }
 else {
      stack.put(stackObject.getId(),new CardView((Spell)stackObject));
      checkPaid(stackObject.getId(),(Spell)stackObject);
    }
  }
  for (  ExileZone exileZone : state.getExile().getExileZones()) {
    exiles.add(new ExileView(exileZone,game));
  }
  for (  String name : state.getRevealed().keySet()) {
    revealed.add(new RevealedView(name,state.getRevealed().get(name),game));
  }
  this.phase=state.getTurn().getPhaseType();
  this.step=state.getTurn().getStepType();
  this.turn=state.getTurnNum();
  if (state.getActivePlayerId() != null)   this.activePlayerName=state.getPlayer(state.getActivePlayerId()).getName();
 else   this.activePlayerName=""String_Node_Str"";
  if (state.getPriorityPlayerId() != null)   this.priorityPlayerName=state.getPlayer(state.getPriorityPlayerId()).getName();
 else   this.priorityPlayerName=""String_Node_Str"";
  for (  CombatGroup combatGroup : state.getCombat().getGroups()) {
    combat.add(new CombatGroupView(combatGroup,game));
  }
  this.special=state.getSpecialActions().getControlledBy(state.getPriorityPlayerId()).size() > 0;
}","public GameView(GameState state,Game game){
  for (  Player player : state.getPlayers().values()) {
    players.add(new PlayerView(player,state,game));
  }
  for (  StackObject stackObject : state.getStack()) {
    if (stackObject instanceof StackAbility) {
      MageObject object=game.getObject(stackObject.getSourceId());
      Card card=game.getCard(stackObject.getSourceId());
      if (card != null) {
        if (object != null) {
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,card.getName(),new CardView(card)));
        }
 else {
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,""String_Node_Str"",new CardView(card)));
        }
        if (card.canTransform()) {
          updateLatestCardView(game,card,stackObject.getId());
        }
        checkPaid(stackObject.getId(),(StackAbility)stackObject);
      }
 else       if (object != null) {
        if (object instanceof PermanentToken) {
          PermanentToken token=(PermanentToken)object;
          stack.put(stackObject.getId(),new CardView(token));
          checkPaid(stackObject.getId(),(StackAbility)stackObject);
        }
 else {
          StackAbility stackAbility=((StackAbility)object);
          stackAbility.newId();
          MageObject emblem=game.getEmblem(stackAbility.getSourceId());
          if (emblem != null) {
            Card sourceCard=game.getCard(((CommandObject)emblem).getSourceId());
            if (sourceCard != null) {
              stackAbility.setName(""String_Node_Str"" + sourceCard.getName());
              stackAbility.setExpansionSetCode(sourceCard.getExpansionSetCode());
            }
          }
          stack.put(stackObject.getId(),new CardView(stackAbility));
          checkPaid(stackObject.getId(),stackAbility);
        }
      }
    }
 else {
      stack.put(stackObject.getId(),new CardView((Spell)stackObject));
      checkPaid(stackObject.getId(),(Spell)stackObject);
    }
  }
  for (  ExileZone exileZone : state.getExile().getExileZones()) {
    exiles.add(new ExileView(exileZone,game));
  }
  for (  String name : state.getRevealed().keySet()) {
    revealed.add(new RevealedView(name,state.getRevealed().get(name),game));
  }
  this.phase=state.getTurn().getPhaseType();
  this.step=state.getTurn().getStepType();
  this.turn=state.getTurnNum();
  if (state.getActivePlayerId() != null)   this.activePlayerName=state.getPlayer(state.getActivePlayerId()).getName();
 else   this.activePlayerName=""String_Node_Str"";
  if (state.getPriorityPlayerId() != null)   this.priorityPlayerName=state.getPlayer(state.getPriorityPlayerId()).getName();
 else   this.priorityPlayerName=""String_Node_Str"";
  for (  CombatGroup combatGroup : state.getCombat().getGroups()) {
    combat.add(new CombatGroupView(combatGroup,game));
  }
  this.special=state.getSpecialActions().getControlledBy(state.getPriorityPlayerId()).size() > 0;
}",0.998292349726776
159860,"public StackAbilityView(StackAbility ability,String sourceName,CardView sourceCard){
  this.id=ability.getId();
  this.name=""String_Node_Str"";
  this.sourceName=sourceName;
  this.sourceCard=sourceCard;
  this.rules=new ArrayList<String>();
  rules.add(ability.getRule(sourceName));
  this.power=ability.getPower().toString();
  this.toughness=ability.getToughness().toString();
  this.loyalty=""String_Node_Str"";
  this.cardTypes=ability.getCardType();
  this.subTypes=ability.getSubtype();
  this.superTypes=ability.getSupertype();
  this.color=ability.getColor();
  this.manaCost=ability.getManaCost().getSymbols();
  updateTargets(ability);
}","public StackAbilityView(Game game,StackAbility ability,String sourceName,CardView sourceCard){
  this.id=ability.getId();
  this.name=""String_Node_Str"";
  this.sourceName=sourceName;
  this.sourceCard=sourceCard;
  this.rules=new ArrayList<String>();
  rules.add(ability.getRule(sourceName));
  this.power=ability.getPower().toString();
  this.toughness=ability.getToughness().toString();
  this.loyalty=""String_Node_Str"";
  this.cardTypes=ability.getCardType();
  this.subTypes=ability.getSubtype();
  this.superTypes=ability.getSupertype();
  this.color=ability.getColor();
  this.manaCost=ability.getManaCost().getSymbols();
  updateTargets(game,ability);
}",0.9885057471264368
159861,"private void updateTargets(StackAbility ability){
  if (ability.getTargets().size() > 0) {
    setTargets(ability.getTargets());
  }
 else {
    List<UUID> targetList=new ArrayList<UUID>();
    for (    Effect effect : ability.getEffects()) {
      TargetPointer targetPointer=effect.getTargetPointer();
      if (targetPointer instanceof FixedTarget) {
        targetList.add(((FixedTarget)targetPointer).getTarget());
      }
    }
    if (targetList.size() > 0) {
      overrideTargets(targetList);
    }
  }
}","private void updateTargets(Game game,StackAbility ability){
  if (ability.getTargets().size() > 0) {
    setTargets(ability.getTargets());
  }
 else {
    List<UUID> targetList=new ArrayList<UUID>();
    for (    Effect effect : ability.getEffects()) {
      TargetPointer targetPointer=effect.getTargetPointer();
      if (targetPointer instanceof FixedTarget) {
        targetList.add(((FixedTarget)targetPointer).getTarget());
      }
    }
    if (targetList.size() > 0) {
      overrideTargets(targetList);
      List<String> names=new ArrayList<String>();
      for (      UUID uuid : targetList) {
        MageObject mageObject=game.getObject(uuid);
        if (mageObject != null) {
          names.add(mageObject.getName());
        }
      }
      if (!names.isEmpty()) {
        getRules().add(""String_Node_Str"" + names.toString() + ""String_Node_Str"");
      }
    }
  }
}",0.7349570200573066
159862,"@Override public boolean applies(UUID sourceId,Ability source,Game game){
  Card card=game.getCard(sourceId);
  if (card != null) {
    if (!card.getCardType().contains(CardType.LAND) && card.getOwnerId().equals(source.getControllerId())) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(UUID sourceId,Ability source,Game game){
  Card card=game.getCard(sourceId);
  if (card != null) {
    if (!card.getCardType().contains(CardType.LAND) && card.getOwnerId().equals(source.getControllerId())) {
      return card.getSpellAbility().isInUseableZone(game,card,false);
    }
  }
  return false;
}",0.9056
159863,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  for (  UUID playerId : controller.getInRange()) {
    Cards playerLibrary=new CardsImpl();
    Player player=game.getPlayer(playerId);
    playerLibrary.addAll(player.getLibrary().getCardList());
    String playerName=new StringBuilder(player.getName()).append(""String_Node_Str"").toString();
    if (source.getControllerId().equals(player.getId())) {
      playerName=""String_Node_Str"";
    }
    TargetCardInLibrary target=new TargetCardInLibrary(new FilterNonlandCard(new StringBuilder(""String_Node_Str"").append(playerName).append(""String_Node_Str"").toString()));
    if (controller.choose(Constants.Outcome.Benefit,playerLibrary,target,game)) {
      UUID targetId=target.getFirstTarget();
      Card card=player.getLibrary().remove(targetId,game);
      if (card != null) {
        card.moveToExile(source.getSourceId(),""String_Node_Str"",source.getSourceId(),game);
      }
    }
    player.shuffleLibrary(game);
  }
  ExileZone JaceExileZone=game.getExile().getExileZone(source.getSourceId());
  FilterCard filter=new FilterCard(""String_Node_Str"");
  TargetCardInExile target=new TargetCardInExile(filter,source.getSourceId());
  while (JaceExileZone.count(filter,game) > 0 && controller.choose(Outcome.PlayForFree,JaceExileZone,target,game)) {
    Card card=game.getCard(target.getFirstTarget());
    if (card != null) {
      if (controller.cast(card.getSpellAbility(),game,true)) {
        game.getExile().removeCard(card,game);
      }
    }
    target.clearChosen();
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  for (  UUID playerId : controller.getInRange()) {
    Cards playerLibrary=new CardsImpl();
    Player player=game.getPlayer(playerId);
    playerLibrary.addAll(player.getLibrary().getCardList());
    String playerName=new StringBuilder(player.getName()).append(""String_Node_Str"").toString();
    if (source.getControllerId().equals(player.getId())) {
      playerName=""String_Node_Str"";
    }
    TargetCardInLibrary target=new TargetCardInLibrary(new FilterNonlandCard(new StringBuilder(""String_Node_Str"").append(playerName).append(""String_Node_Str"").toString()));
    if (controller.choose(Outcome.Benefit,playerLibrary,target,game)) {
      UUID targetId=target.getFirstTarget();
      Card card=player.getLibrary().remove(targetId,game);
      if (card != null) {
        card.moveToExile(source.getSourceId(),""String_Node_Str"",source.getSourceId(),game);
      }
    }
    player.shuffleLibrary(game);
  }
  ExileZone JaceExileZone=game.getExile().getExileZone(source.getSourceId());
  FilterCard filter=new FilterCard(""String_Node_Str"");
  TargetCardInExile target=new TargetCardInExile(filter,source.getSourceId());
  while (JaceExileZone.count(filter,game) > 0 && controller.choose(Outcome.PlayForFree,JaceExileZone,target,game)) {
    Card card=game.getCard(target.getFirstTarget());
    if (card != null) {
      if (controller.cast(card.getSpellAbility(),game,true)) {
        game.getExile().removeCard(card,game);
      }
    }
    target.clearChosen();
  }
  return true;
}",0.9969951923076924
159864,"@Override public boolean isInactive(Ability source,Game game){
  if (game.getPhase().getStep().getType() == Constants.PhaseStep.UNTAP && game.getStep().getStepPart() == Step.StepPart.PRE) {
    if (game.getActivePlayerId().equals(source.getControllerId())) {
      return true;
    }
  }
  return false;
}","@Override public boolean isInactive(Ability source,Game game){
  if (game.getPhase().getStep().getType() == PhaseStep.UNTAP && game.getStep().getStepPart() == Step.StepPart.PRE) {
    if (game.getActivePlayerId().equals(source.getControllerId())) {
      return true;
    }
  }
  return false;
}",0.9833333333333332
159865,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ATTACKER_DECLARED) {
    Permanent attacker=game.getPermanent(event.getSourceId());
    Player defender=game.getPlayer(event.getTargetId());
    Player you=game.getPlayer(controllerId);
    if (attacker.getControllerId() != you.getId() && defender == you) {
      for (      Effect effect : getEffects()) {
        effect.setTargetPointer(new FixedTarget(attacker.getId()));
      }
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ATTACKER_DECLARED) {
    if (game.getOpponents(getControllerId()).contains(event.getPlayerId())) {
      for (      Effect effect : getEffects()) {
        effect.setTargetPointer(new FixedTarget(event.getSourceId()));
      }
      return true;
    }
  }
  return false;
}",0.3852813852813853
159866,"public AureliasFuryDamagedByWatcher(final AureliasFuryDamagedByWatcher watcher){
  super(watcher);
  this.damagedCreatures=watcher.damagedCreatures;
  this.damagedPlayers=watcher.damagedPlayers;
}","public AureliasFuryDamagedByWatcher(final AureliasFuryDamagedByWatcher watcher){
  super(watcher);
  this.damagedCreatures.addAll(watcher.damagedCreatures);
  this.damagedPlayers.addAll(watcher.damagedPlayers);
}",0.9509803921568628
159867,"public BlockedByWatcher(final BlockedByWatcher watcher){
  super(watcher);
  this.blockedByWatcher=watcher.blockedByWatcher;
}","public BlockedByWatcher(final BlockedByWatcher watcher){
  super(watcher);
  this.blockedByWatcher.addAll(watcher.blockedByWatcher);
}",0.9615384615384616
159868,"public FaithsRewardWatcher(final FaithsRewardWatcher watcher){
  super(watcher);
  this.cards=(ArrayList<UUID>)watcher.cards.clone();
}","public FaithsRewardWatcher(final FaithsRewardWatcher watcher){
  super(watcher);
  this.cards.addAll(watcher.cards);
}",0.8774703557312253
159869,"public CathedralMembraneWatcher(final CathedralMembraneWatcher watcher){
  super(watcher);
  this.blockedCreatures=watcher.blockedCreatures;
}","public CathedralMembraneWatcher(final CathedralMembraneWatcher watcher){
  super(watcher);
  this.blockedCreatures.addAll(watcher.blockedCreatures);
}",0.9657534246575342
159870,"public SteelHellkiteWatcher(final SteelHellkiteWatcher watcher){
  super(watcher);
  for (  UUID playerId : watcher.damagedPlayers) {
    damagedPlayers.add(playerId);
  }
}","public SteelHellkiteWatcher(final SteelHellkiteWatcher watcher){
  super(watcher);
  damagedPlayers.addAll(watcher.damagedPlayers);
}",0.7647058823529411
159871,"public CardsDrawnControllerWatcher(final CardsDrawnControllerWatcher watcher){
  super(watcher);
}","public CardsDrawnControllerWatcher(final CardsDrawnControllerWatcher watcher){
  super(watcher);
  this.cardsDrawn=watcher.cardsDrawn;
}",0.8376068376068376
159872,"public BlockedByWatcher(final BlockedByWatcher watcher){
  super(watcher);
  this.blockedByWatcher=watcher.blockedByWatcher;
}","public BlockedByWatcher(final BlockedByWatcher watcher){
  super(watcher);
  this.blockedByWatcher.addAll(watcher.blockedByWatcher);
}",0.9615384615384616
159873,"public CardsDrawnOpponentWatcher(final CardsDrawnOpponentWatcher watcher){
  super(watcher);
}","public CardsDrawnOpponentWatcher(final CardsDrawnOpponentWatcher watcher){
  super(watcher);
  this.cardsDrawn=watcher.cardsDrawn;
}",0.831858407079646
159874,"public AttackedThisTurnWatcher(final AttackedThisTurnWatcher watcher){
  super(watcher);
  this.attackedThisTurnCreatures=watcher.attackedThisTurnCreatures;
}","public AttackedThisTurnWatcher(final AttackedThisTurnWatcher watcher){
  super(watcher);
  this.attackedThisTurnCreatures.addAll(watcher.attackedThisTurnCreatures);
}",0.9691358024691358
159875,"public DamagedByWatcher(final DamagedByWatcher watcher){
  super(watcher);
  this.damagedCreatures=watcher.damagedCreatures;
}","public DamagedByWatcher(final DamagedByWatcher watcher){
  super(watcher);
  this.damagedCreatures.addAll(watcher.damagedCreatures);
}",0.9615384615384616
159876,"public PlayerDamagedBySourceWatcher(final PlayerDamagedBySourceWatcher watcher){
  super(watcher);
  this.damageSources=watcher.damageSources;
}","public PlayerDamagedBySourceWatcher(final PlayerDamagedBySourceWatcher watcher){
  super(watcher);
  this.damageSources.addAll(watcher.damageSources);
}",0.9662162162162162
159877,"public SourceDidDamageWatcher(final SourceDidDamageWatcher watcher){
  super(watcher);
  this.damageSources=watcher.damageSources;
}","public SourceDidDamageWatcher(final SourceDidDamageWatcher watcher){
  super(watcher);
  this.damageSources.addAll(watcher.damageSources);
}",0.9632352941176472
159878,"@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  Permanent target=game.getPermanent(event.getTargetId());
  if (target != null) {
    target.setTapped(true);
  }
  return true;
}","@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  Permanent target=game.getPermanent(event.getTargetId());
  if (target != null) {
    target.setTapped(true);
  }
  return false;
}",0.983529411764706
159879,"private void addTargets(Ability ability,String[] groups,Game game){
  for (int i=1; i < groups.length; i++) {
    String group=groups[i];
    String target;
    if (group.startsWith(""String_Node_Str"")) {
      target=group.substring(group.indexOf(""String_Node_Str"") + 13);
      for (      Player player : game.getPlayers().values()) {
        if (player.getName().equals(target)) {
          ability.getTargets().get(0).addTarget(player.getId(),ability,game);
          break;
        }
      }
    }
 else     if (group.startsWith(""String_Node_Str"")) {
      target=group.substring(group.indexOf(""String_Node_Str"") + 7);
      String[] targets=target.split(""String_Node_Str"");
      int index=0;
      for (      String t : targets) {
        if (t.startsWith(""String_Node_Str"")) {
          target=t.substring(t.indexOf(""String_Node_Str"") + 13);
          for (          Player player : game.getPlayers().values()) {
            if (player.getName().equals(target)) {
              ability.getTargets().get(index).addTarget(player.getId(),ability,game);
              index++;
              break;
            }
          }
        }
 else {
          if (ability.getTargets().size() == 0) {
            throw new AssertionError(""String_Node_Str"");
          }
          for (          UUID id : ability.getTargets().get(0).possibleTargets(ability.getSourceId(),ability.getControllerId(),game)) {
            MageObject object=game.getObject(id);
            if (object != null && object.getName().equals(t)) {
              if (index >= ability.getTargets().size()) {
                index--;
              }
              if (ability.getTargets().get(index).getNumberOfTargets() == 1) {
                ability.getTargets().get(index).clearChosen();
              }
              ability.getTargets().get(index).addTarget(id,ability,game);
              index++;
              break;
            }
          }
        }
      }
    }
  }
}","private void addTargets(Ability ability,String[] groups,Game game){
  for (int i=1; i < groups.length; i++) {
    String group=groups[i];
    String target;
    if (group.startsWith(""String_Node_Str"")) {
      target=group.substring(group.indexOf(""String_Node_Str"") + 13);
      for (      Player player : game.getPlayers().values()) {
        if (player.getName().equals(target)) {
          ability.getTargets().get(0).addTarget(player.getId(),ability,game);
          break;
        }
      }
    }
 else     if (group.startsWith(""String_Node_Str"")) {
      target=group.substring(group.indexOf(""String_Node_Str"") + 7);
      String[] targets=target.split(""String_Node_Str"");
      int index=0;
      for (      String t : targets) {
        if (t.startsWith(""String_Node_Str"")) {
          target=t.substring(t.indexOf(""String_Node_Str"") + 13);
          for (          Player player : game.getPlayers().values()) {
            if (player.getName().equals(target)) {
              ability.getTargets().get(index).addTarget(player.getId(),ability,game);
              index++;
              break;
            }
          }
        }
 else {
          if (ability.getTargets().size() == 0) {
            throw new AssertionError(""String_Node_Str"");
          }
          for (          UUID id : ability.getTargets().get(0).possibleTargets(ability.getSourceId(),ability.getControllerId(),game)) {
            MageObject object=game.getObject(id);
            if (object != null && object.getName().equals(t)) {
              if (index >= ability.getTargets().size()) {
                index--;
              }
              if (ability.getTargets().get(index).getNumberOfTargets() == 1) {
                ability.getTargets().get(index).clearChosen();
              }
              if (ability.getTargets().get(index) instanceof TargetCreaturePermanentAmount) {
                TargetCreaturePermanentAmount targetAmount=(TargetCreaturePermanentAmount)ability.getTargets().get(index);
                targetAmount.setAmount(ability,game);
                int amount=targetAmount.getAmountRemaining();
                targetAmount.addTarget(id,amount,ability,game);
              }
 else {
                ability.getTargets().get(index).addTarget(id,ability,game);
              }
              index++;
              break;
            }
          }
        }
      }
    }
  }
}",0.8892997457822972
159880,"@Override public void addCounters(Counter counter,Game game,ArrayList<UUID> appliedEffects){
  GameEvent event=GameEvent.getEvent(GameEvent.EventType.ADD_COUNTER,objectId,ownerId,counter.getName(),counter.getCount());
  event.setAppliedEffects(appliedEffects);
  if (!game.replaceEvent(event)) {
    counters.addCounter(counter);
    game.fireEvent(GameEvent.getEvent(GameEvent.EventType.COUNTER_ADDED,objectId,ownerId,counter.getName(),counter.getCount()));
  }
}","@Override public void addCounters(Counter counter,Game game,ArrayList<UUID> appliedEffects){
  int amount=counter.getCount();
  for (int i=0; i < amount; i++) {
    Counter eventCounter=counter.copy();
    eventCounter.remove(amount - 1);
    GameEvent event=GameEvent.getEvent(GameEvent.EventType.ADD_COUNTER,objectId,ownerId,counter.getName(),counter.getCount());
    event.setAppliedEffects(appliedEffects);
    if (!game.replaceEvent(event)) {
      counters.addCounter(eventCounter);
      game.fireEvent(GameEvent.getEvent(GameEvent.EventType.COUNTER_ADDED,objectId,ownerId,counter.getName(),counter.getCount()));
    }
  }
}",0.8292237442922374
159881,"@Override public void addCounters(Counter counter,Game game,ArrayList<UUID> appliedEffects){
  GameEvent event=GameEvent.getEvent(GameEvent.EventType.ADD_COUNTER,objectId,controllerId,counter.getName(),counter.getCount());
  event.setAppliedEffects(appliedEffects);
  if (!game.replaceEvent(event)) {
    counters.addCounter(counter);
    game.fireEvent(GameEvent.getEvent(GameEvent.EventType.COUNTER_ADDED,objectId,controllerId,counter.getName(),counter.getCount()));
  }
}","@Override public void addCounters(Counter counter,Game game,ArrayList<UUID> appliedEffects){
  int amount=counter.getCount();
  for (int i=0; i < amount; i++) {
    Counter eventCounter=counter.copy();
    eventCounter.remove(amount - 1);
    GameEvent event=GameEvent.getEvent(GameEvent.EventType.ADD_COUNTER,objectId,controllerId,counter.getName(),1);
    event.setAppliedEffects(appliedEffects);
    if (!game.replaceEvent(event)) {
      counters.addCounter(eventCounter);
      game.fireEvent(GameEvent.getEvent(GameEvent.EventType.COUNTER_ADDED,objectId,controllerId,counter.getName(),1));
    }
  }
}",0.7789084181313598
159882,"@Override public void addCounters(Counter counter,Game game){
  if (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.ADD_COUNTER,playerId,playerId,counter.getName(),counter.getCount()))) {
    counters.addCounter(counter);
    game.fireEvent(GameEvent.getEvent(EventType.COUNTER_ADDED,playerId,playerId,counter.getName(),counter.getCount()));
  }
}","@Override public void addCounters(Counter counter,Game game){
  int amount=counter.getCount();
  for (int i=0; i < amount; i++) {
    Counter eventCounter=counter.copy();
    eventCounter.remove(amount - 1);
    if (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.ADD_COUNTER,playerId,playerId,counter.getName(),counter.getCount()))) {
      counters.addCounter(eventCounter);
      game.fireEvent(GameEvent.getEvent(EventType.COUNTER_ADDED,playerId,playerId,counter.getName(),counter.getCount()));
    }
  }
}",0.7913340935005702
159883,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(this.sourceId);
  if (permanent == null) {
    return false;
  }
  permanent.setName(target.getName());
  permanent.getColor().setColor(target.getColor());
  permanent.getManaCost().clear();
  permanent.getManaCost().add(target.getManaCost());
  permanent.getCardType().clear();
  for (  CardType type : target.getCardType()) {
    permanent.getCardType().add(type);
  }
  permanent.getSubtype().clear();
  for (  String type : target.getSubtype()) {
    permanent.getSubtype().add(type);
  }
  permanent.getSupertype().clear();
  for (  String type : target.getSupertype()) {
    permanent.getSupertype().add(type);
  }
  permanent.getAbilities().clear();
  for (  Ability ability : target.getAbilities()) {
    permanent.addAbility(ability,game);
  }
  permanent.getPower().setValue(target.getPower().getValue());
  permanent.getToughness().setValue(target.getToughness().getValue());
  if (target instanceof Permanent) {
    permanent.setTransformed(((Permanent)target).isTransformed());
    permanent.setSecondCardFace(((Permanent)target).getSecondCardFace());
  }
  permanent.setCopy(true);
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(this.sourceId);
  if (permanent == null) {
    return false;
  }
  permanent.setName(target.getName());
  permanent.getColor().setColor(target.getColor());
  permanent.getManaCost().clear();
  permanent.getManaCost().add(target.getManaCost());
  permanent.getCardType().clear();
  for (  CardType type : target.getCardType()) {
    permanent.getCardType().add(type);
  }
  permanent.getSubtype().clear();
  for (  String type : target.getSubtype()) {
    permanent.getSubtype().add(type);
  }
  permanent.getSupertype().clear();
  for (  String type : target.getSupertype()) {
    permanent.getSupertype().add(type);
  }
  permanent.removeAllAbilities(source.getSourceId(),game);
  for (  Ability ability : target.getAbilities()) {
    permanent.addAbility(ability,game);
  }
  permanent.getPower().setValue(target.getPower().getValue());
  permanent.getToughness().setValue(target.getToughness().getValue());
  if (target instanceof Permanent) {
    permanent.setTransformed(((Permanent)target).isTransformed());
    permanent.setSecondCardFace(((Permanent)target).getSecondCardFace());
  }
  permanent.setCopy(true);
  return true;
}",0.9815800245599672
159884,"@Override public DynamicValue copy(){
  return new CardsInAllGraveyardsCount(this);
}","@Override public DynamicValue copy(){
  return new CardsInOpponentGraveyardsCount(this);
}",0.9371428571428572
159885,"@Override public int calculate(Game game,Ability sourceAbility){
  int amount=0;
  PlayerList playerList=game.getPlayerList();
  for (  UUID playerUUID : playerList) {
    Player player=game.getPlayer(playerUUID);
    if (player != null) {
      amount+=player.getGraveyard().count(filter,game);
    }
  }
  return amount;
}","@Override public int calculate(Game game,Ability sourceAbility){
  int amount=0;
  for (  UUID playerUUID : game.getOpponents(sourceAbility.getControllerId())) {
    Player player=game.getPlayer(playerUUID);
    if (player != null) {
      amount+=player.getGraveyard().count(filter,sourceAbility.getSourceId(),sourceAbility.getControllerId(),game);
    }
  }
  return amount;
}",0.7635327635327636
159886,"@Override public int calculate(Game game,Ability sourceAbility){
  int amount=0;
  PlayerList playerList=game.getPlayerList();
  for (  UUID playerUUID : playerList) {
    Player player=game.getPlayer(playerUUID);
    if (player != null) {
      amount+=player.getGraveyard().count(filter,game);
    }
  }
  return amount;
}","@Override public int calculate(Game game,Ability sourceAbility){
  int amount=0;
  PlayerList playerList=game.getPlayerList();
  for (  UUID playerUUID : playerList) {
    Player player=game.getPlayer(playerUUID);
    if (player != null) {
      amount+=player.getGraveyard().count(filter,sourceAbility.getSourceId(),sourceAbility.getControllerId(),game);
    }
  }
  return amount;
}",0.9152542372881356
159887,"/** 
 * Tests third level that gives both Lifelink and Indestructible as well as 9/9
 */
@Test public void testThirdLevel(){
  addCard(Constants.Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Constants.Zone.BATTLEFIELD,playerA,""String_Node_Str"",15);
  for (int i=0; i < 12; i++) {
    activateAbility(1,Constants.PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  }
  setStopAt(2,Constants.PhaseStep.END_TURN);
  execute();
  Permanent master=getPermanent(""String_Node_Str"",playerA.getId());
  Assert.assertEquals(12,master.getCounters().getCount(CounterType.LEVEL));
  Assert.assertEquals(""String_Node_Str"",9,master.getPower().getValue());
  Assert.assertEquals(""String_Node_Str"",9,master.getToughness().getValue());
  Assert.assertTrue(master.getAbilities().contains(LifelinkAbility.getInstance()));
  Assert.assertTrue(master.getAbilities().contains(new IndestructibleAbility()));
}","/** 
 * Tests third level that gives both Lifelink and Indestructible as well as 9/9
 */
@Test public void testThirdLevel(){
  addCard(Constants.Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Constants.Zone.BATTLEFIELD,playerA,""String_Node_Str"",15);
  for (int i=0; i < 12; i++) {
    activateAbility(1,Constants.PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  }
  setStopAt(2,Constants.PhaseStep.END_TURN);
  execute();
  Permanent master=getPermanent(""String_Node_Str"",playerA.getId());
  Assert.assertEquals(12,master.getCounters().getCount(CounterType.LEVEL));
  Assert.assertEquals(""String_Node_Str"",9,master.getPower().getValue());
  Assert.assertEquals(""String_Node_Str"",9,master.getToughness().getValue());
  Assert.assertTrue(master.getAbilities().contains(LifelinkAbility.getInstance()));
  Assert.assertTrue(master.getAbilities().containsRule(new IndestructibleAbility()));
}",0.9977753058954394
159888,"/** 
 * Tests that extra counters won't make any effect over third level
 */
@Test public void testExtraCounters(){
  addCard(Constants.Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Constants.Zone.BATTLEFIELD,playerA,""String_Node_Str"",15);
  for (int i=0; i < 15; i++) {
    activateAbility(1,Constants.PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  }
  setStopAt(2,Constants.PhaseStep.END_TURN);
  execute();
  Permanent master=getPermanent(""String_Node_Str"",playerA.getId());
  Assert.assertEquals(15,master.getCounters().getCount(CounterType.LEVEL));
  Assert.assertEquals(""String_Node_Str"",9,master.getPower().getValue());
  Assert.assertEquals(""String_Node_Str"",9,master.getToughness().getValue());
  Assert.assertTrue(master.getAbilities().contains(LifelinkAbility.getInstance()));
  Assert.assertTrue(master.getAbilities().contains(new IndestructibleAbility()));
}","/** 
 * Tests that extra counters won't make any effect over third level
 */
@Test public void testExtraCounters(){
  addCard(Constants.Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Constants.Zone.BATTLEFIELD,playerA,""String_Node_Str"",15);
  for (int i=0; i < 15; i++) {
    activateAbility(1,Constants.PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  }
  setStopAt(2,Constants.PhaseStep.END_TURN);
  execute();
  Permanent master=getPermanent(""String_Node_Str"",playerA.getId());
  Assert.assertEquals(15,master.getCounters().getCount(CounterType.LEVEL));
  Assert.assertEquals(""String_Node_Str"",9,master.getPower().getValue());
  Assert.assertEquals(""String_Node_Str"",9,master.getToughness().getValue());
  Assert.assertTrue(master.getAbilities().contains(LifelinkAbility.getInstance()));
  Assert.assertTrue(master.getAbilities().containsRule(new IndestructibleAbility()));
}",0.997752808988764
159889,"/** 
 * Tests that copy won't have level up counters and will have zero level.
 */
@Test public void testCopyCreatureWithLevelUpAbility(){
  addCard(Constants.Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Constants.Zone.BATTLEFIELD,playerA,""String_Node_Str"",12);
  addCard(Constants.Zone.BATTLEFIELD,playerB,""String_Node_Str"",2);
  addCard(Constants.Zone.HAND,playerB,""String_Node_Str"");
  for (int i=0; i < 12; i++) {
    activateAbility(1,Constants.PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  }
  castSpell(2,Constants.PhaseStep.PRECOMBAT_MAIN,playerB,""String_Node_Str"");
  setStopAt(2,Constants.PhaseStep.END_TURN);
  execute();
  assertPermanentCount(playerA,""String_Node_Str"",1);
  assertPermanentCount(playerB,""String_Node_Str"",1);
  Permanent master=getPermanent(""String_Node_Str"",playerA.getId());
  Permanent masterCopied=getPermanent(""String_Node_Str"",playerB.getId());
  Assert.assertEquals(""String_Node_Str"",9,master.getPower().getValue());
  Assert.assertEquals(""String_Node_Str"",9,master.getToughness().getValue());
  Assert.assertTrue(master.getAbilities().contains(LifelinkAbility.getInstance()));
  Assert.assertTrue(master.getAbilities().contains(new IndestructibleAbility()));
  Assert.assertEquals(""String_Node_Str"",3,masterCopied.getPower().getValue());
  Assert.assertEquals(""String_Node_Str"",3,masterCopied.getToughness().getValue());
  Assert.assertFalse(masterCopied.getAbilities().contains(LifelinkAbility.getInstance()));
  Assert.assertFalse(masterCopied.getAbilities().contains(new IndestructibleAbility()));
}","/** 
 * Tests that copy won't have level up counters and will have zero level.
 */
@Test public void testCopyCreatureWithLevelUpAbility(){
  addCard(Constants.Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Constants.Zone.BATTLEFIELD,playerA,""String_Node_Str"",12);
  addCard(Constants.Zone.BATTLEFIELD,playerB,""String_Node_Str"",2);
  addCard(Constants.Zone.HAND,playerB,""String_Node_Str"");
  for (int i=0; i < 12; i++) {
    activateAbility(1,Constants.PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  }
  castSpell(2,Constants.PhaseStep.PRECOMBAT_MAIN,playerB,""String_Node_Str"");
  setStopAt(2,Constants.PhaseStep.END_TURN);
  execute();
  assertPermanentCount(playerA,""String_Node_Str"",1);
  assertPermanentCount(playerB,""String_Node_Str"",1);
  Permanent master=getPermanent(""String_Node_Str"",playerA.getId());
  Permanent masterCopied=getPermanent(""String_Node_Str"",playerB.getId());
  Assert.assertEquals(""String_Node_Str"",9,master.getPower().getValue());
  Assert.assertEquals(""String_Node_Str"",9,master.getToughness().getValue());
  Assert.assertTrue(master.getAbilities().contains(LifelinkAbility.getInstance()));
  Assert.assertTrue(master.getAbilities().containsRule(new IndestructibleAbility()));
  Assert.assertEquals(""String_Node_Str"",3,masterCopied.getPower().getValue());
  Assert.assertEquals(""String_Node_Str"",3,masterCopied.getToughness().getValue());
  Assert.assertFalse(masterCopied.getAbilities().contains(LifelinkAbility.getInstance()));
  Assert.assertFalse(masterCopied.getAbilities().containsRule(new IndestructibleAbility()));
}",0.99744081893794
159890,"/** 
 * @param player
 * @param cardName
 * @param ability
 * @param flag true if creature should contain ability, false if it should NOT contain it instead
 * @throws AssertionError
 */
public void assertAbility(Player player,String cardName,Ability ability,boolean flag) throws AssertionError {
  int count=0;
  Permanent found=null;
  for (  Permanent permanent : currentGame.getBattlefield().getAllActivePermanents(player.getId())) {
    if (permanent.getName().equals(cardName)) {
      found=permanent;
      count++;
    }
  }
  Assert.assertNotNull(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ cardName,found);
  Assert.assertTrue(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ cardName,count == 1);
  if (flag) {
    Assert.assertTrue(""String_Node_Str"" + ability.toString() + ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ cardName,found.getAbilities().contains(ability));
  }
 else {
    Assert.assertFalse(""String_Node_Str"" + ability.toString() + ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ cardName,found.getAbilities().contains(ability));
  }
}","/** 
 * @param player
 * @param cardName
 * @param ability
 * @param flag true if creature should contain ability, false if it should NOT contain it instead
 * @throws AssertionError
 */
public void assertAbility(Player player,String cardName,Ability ability,boolean flag) throws AssertionError {
  int count=0;
  Permanent found=null;
  for (  Permanent permanent : currentGame.getBattlefield().getAllActivePermanents(player.getId())) {
    if (permanent.getName().equals(cardName)) {
      found=permanent;
      count++;
    }
  }
  Assert.assertNotNull(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ cardName,found);
  Assert.assertTrue(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ cardName,count == 1);
  if (flag) {
    Assert.assertTrue(""String_Node_Str"" + ability.toString() + ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ cardName,found.getAbilities().containsRule(ability));
  }
 else {
    Assert.assertFalse(""String_Node_Str"" + ability.toString() + ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ cardName,found.getAbilities().containsRule(ability));
  }
}",0.9963833634719712
159891,"public void actionPerformed(java.awt.event.ActionEvent evt){
  if (linkSpecial != null) {
{
      setState(""String_Node_Str"",false,""String_Node_Str"",false);
      setSpecial(""String_Node_Str"",false);
      linkSpecial.doClick();
    }
  }
}","@Override public void actionPerformed(java.awt.event.ActionEvent evt){
  if (linkSpecial != null) {
{
      setState(""String_Node_Str"",false,""String_Node_Str"",false);
      setSpecial(""String_Node_Str"",false);
      linkSpecial.doClick();
    }
  }
}",0.979591836734694
159892,"public void requestFocus(){
  this.btnRight.requestFocus();
}","@Override public void requestFocus(){
  this.btnRight.requestFocus();
}",0.9242424242424242
159893,"public void setMessage(String message){
  if (message.startsWith(""String_Node_Str"")) {
    textArea.setText(""String_Node_Str"");
  }
 else   if (message.contains(""String_Node_Str"")) {
    textArea.setText(""String_Node_Str"");
  }
 else {
    textArea.setText(message);
  }
}","public void setMessage(String message){
  if (message.startsWith(""String_Node_Str"")) {
    textArea.setText(""String_Node_Str"");
  }
 else   if (message.length() > 30 && message.contains(""String_Node_Str"")) {
    textArea.setText(""String_Node_Str"");
  }
 else {
    textArea.setText(message);
  }
}",0.9560632688927944
159894,"private void initComponents(){
  setBackground(new Color(0,0,0,100));
  setLayout(new BoxLayout(this,BoxLayout.PAGE_AXIS));
  setOpaque(false);
  JPanel container=new JPanel();
  container.setPreferredSize(new Dimension(100,30));
  container.setLayout(new GridBagLayout());
  container.setOpaque(false);
  JPanel jPanel=new JPanel();
  textArea=new MageTextArea();
  textArea.setText(""String_Node_Str"");
  jPanel.setOpaque(false);
  jPanel.setBackground(new Color(0,0,0,80));
  jPanel.add(textArea);
  add(jPanel);
  add(container);
  btnSpecial=new JButton(""String_Node_Str"");
  btnSpecial.setVisible(false);
  container.add(btnSpecial);
  btnLeft=new JButton(""String_Node_Str"");
  btnLeft.setVisible(false);
  container.add(btnLeft);
  btnRight=new JButton(""String_Node_Str"");
  btnRight.setVisible(false);
  container.add(btnRight);
  btnLeft.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      if (linkLeft != null) {
{
          setState(""String_Node_Str"",false,""String_Node_Str"",false);
          setSpecial(""String_Node_Str"",false);
          linkLeft.doClick();
        }
      }
    }
  }
);
  btnRight.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      if (linkRight != null) {
{
          setState(""String_Node_Str"",false,""String_Node_Str"",false);
          setSpecial(""String_Node_Str"",false);
          linkRight.doClick();
        }
      }
    }
  }
);
  btnSpecial.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      if (linkSpecial != null) {
{
          setState(""String_Node_Str"",false,""String_Node_Str"",false);
          setSpecial(""String_Node_Str"",false);
          linkSpecial.doClick();
        }
      }
    }
  }
);
}","private void initComponents(){
  setBackground(new Color(0,0,0,100));
  setLayout(new BoxLayout(this,BoxLayout.PAGE_AXIS));
  setOpaque(false);
  JPanel container=new JPanel();
  container.setPreferredSize(new Dimension(100,30));
  container.setLayout(new GridBagLayout());
  container.setOpaque(false);
  JPanel jPanel=new JPanel();
  textArea=new MageTextArea();
  textArea.setText(""String_Node_Str"");
  jPanel.setOpaque(false);
  jPanel.setBackground(new Color(0,0,0,80));
  jPanel.add(textArea);
  add(jPanel);
  add(container);
  btnSpecial=new JButton(""String_Node_Str"");
  btnSpecial.setVisible(false);
  container.add(btnSpecial);
  btnLeft=new JButton(""String_Node_Str"");
  btnLeft.setVisible(false);
  container.add(btnLeft);
  btnRight=new JButton(""String_Node_Str"");
  btnRight.setVisible(false);
  container.add(btnRight);
  btnLeft.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      if (linkLeft != null) {
{
          setState(""String_Node_Str"",false,""String_Node_Str"",false);
          setSpecial(""String_Node_Str"",false);
          linkLeft.doClick();
        }
      }
    }
  }
);
  btnRight.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      if (linkRight != null) {
{
          setState(""String_Node_Str"",false,""String_Node_Str"",false);
          setSpecial(""String_Node_Str"",false);
          linkRight.doClick();
        }
      }
    }
  }
);
  btnSpecial.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      if (linkSpecial != null) {
{
          setState(""String_Node_Str"",false,""String_Node_Str"",false);
          setSpecial(""String_Node_Str"",false);
          linkSpecial.doClick();
        }
      }
    }
  }
);
}",0.9920760697305864
159895,"private void checkMiracleAbility(GameEvent event,Game game){
  Card card=game.getCard(event.getTargetId());
  if (card != null) {
    for (    Ability ability : card.getAbilities()) {
      if (ability instanceof MiracleAbility) {
        Player controller=game.getPlayer(ability.getControllerId());
        game.getContinuousEffects().costModification(ability,game);
        ManaCosts<ManaCost> manaCostsToPay=ability.getManaCostsToPay();
        if (controller != null) {
          game.getStack().add(new StackAbility(ability,controller.getId()));
          Cards cards=new CardsImpl(Constants.Zone.PICK);
          cards.add(card);
          controller.lookAtCards(""String_Node_Str"",cards,game);
          if (controller.chooseUse(Constants.Outcome.Benefit,""String_Node_Str"" + manaCostsToPay.getText() + ""String_Node_Str"",game)) {
            game.getStack().poll();
            controller.revealCards(""String_Node_Str"",cards,game);
            ManaCosts costRef=card.getSpellAbility().getManaCostsToPay();
            costRef.clear();
            for (            ManaCost manaCost : manaCostsToPay) {
              costRef.add(manaCost);
            }
            controller.cast(card.getSpellAbility(),game,false);
            break;
          }
 else {
            game.getStack().poll();
          }
        }
      }
    }
  }
}","private void checkMiracleAbility(GameEvent event,Game game){
  Card card=game.getCard(event.getTargetId());
  if (card != null) {
    for (    Ability ability : card.getAbilities()) {
      if (ability instanceof MiracleAbility) {
        Player controller=game.getPlayer(ability.getControllerId());
        if (controller != null) {
          game.getContinuousEffects().costModification(ability,game);
          ManaCosts<ManaCost> manaCostsToPay=ability.getManaCostsToPay();
          Cards cards=new CardsImpl(Zone.PICK);
          cards.add(card);
          controller.lookAtCards(""String_Node_Str"",cards,game);
          if (controller.chooseUse(Outcome.Benefit,""String_Node_Str"" + manaCostsToPay.getText() + ""String_Node_Str"",game)) {
            controller.revealCards(""String_Node_Str"",cards,game);
            ManaCosts costRef=card.getSpellAbility().getManaCostsToPay();
            costRef.clear();
            for (            ManaCost manaCost : manaCostsToPay) {
              costRef.add(manaCost);
            }
            controller.cast(card.getSpellAbility(),game,false);
            break;
          }
        }
      }
    }
  }
}",0.8149337615415496
159896,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  Permanent permanent=game.getPermanent(source.getSourceId());
  if (player != null && permanent != null) {
    for (    Card card : player.getHand().getCards(CastThroughTime.filter,game)) {
      boolean found=false;
      for (      Ability ability : card.getAbilities()) {
        if (ability instanceof ReboundAbility) {
          found=true;
          break;
        }
      }
      if (!found) {
        card.addAbility(new AttachedReboundAbility());
        Ability ability=new AttachedReboundAbility();
        ability.setControllerId(source.getControllerId());
        ability.setSourceId(card.getId());
        game.getState().addAbility(ability,source.getSourceId(),card);
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  Permanent permanent=game.getPermanent(source.getSourceId());
  if (player != null && permanent != null) {
    for (    Card card : player.getHand().getCards(CastThroughTime.filter,game)) {
      boolean found=false;
      for (      Ability ability : card.getAbilities()) {
        if (ability instanceof ReboundAbility) {
          found=true;
          break;
        }
      }
      if (!found) {
        Ability ability=new AttachedReboundAbility();
        card.addAbility(ability);
        ability.setControllerId(source.getControllerId());
        ability.setSourceId(card.getId());
        game.getState().addAbility(ability,source.getSourceId(),card);
      }
    }
    return true;
  }
  return false;
}",0.7510398098633393
159897,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == EventType.ZONE_CHANGE) {
    UUID targetId=event.getTargetId();
    Permanent permanent=game.getPermanent(targetId);
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    if (zEvent.getToZone() == Zone.BATTLEFIELD && permanent.getControllerId().equals(this.controllerId) && (targetId.equals(this.getSourceId()) || (permanent.hasSubtype(""String_Node_Str"") && !targetId.equals(this.getSourceId())))) {
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == EventType.ENTERS_THE_BATTLEFIELD) {
    UUID targetId=event.getTargetId();
    Permanent permanent=game.getPermanent(targetId);
    if (permanent.getControllerId().equals(this.controllerId) && (targetId.equals(this.getSourceId()) || (permanent.hasSubtype(""String_Node_Str"") && !targetId.equals(this.getSourceId())))) {
      return true;
    }
  }
  return false;
}",0.635814889336016
159898,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ZONE_CHANGE) {
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    if (zEvent.getToZone() == Constants.Zone.BATTLEFIELD && zEvent.getTarget().getCardType().contains(Constants.CardType.CREATURE) && zEvent.getTargetId() != this.getSourceId()) {
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD && event.getTargetId() != this.getSourceId()) {
    Permanent permanent=game.getPermanent(event.getTargetId());
    if (permanent.getCardType().contains(Constants.CardType.CREATURE)) {
      return true;
    }
  }
  return false;
}",0.6015625
159899,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == EventType.ZONE_CHANGE) {
    Permanent permanent=game.getPermanent(event.getTargetId());
    if (((ZoneChangeEvent)event).getToZone() == Zone.BATTLEFIELD && filter.match(permanent,sourceId,controllerId,game) && (permanent.getControllerId().equals(this.controllerId) ^ opponentController)) {
      if (!this.getTargets().isEmpty()) {
        Target target=this.getTargets().get(0);
        if (target instanceof TargetPlayer) {
          target.add(permanent.getControllerId(),game);
        }
        if (target instanceof TargetCreaturePermanent) {
          target.add(event.getTargetId(),game);
        }
      }
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == EventType.ENTERS_THE_BATTLEFIELD) {
    Permanent permanent=game.getPermanent(event.getTargetId());
    if (filter.match(permanent,sourceId,controllerId,game) && (permanent.getControllerId().equals(this.controllerId) ^ opponentController)) {
      if (!this.getTargets().isEmpty()) {
        Target target=this.getTargets().get(0);
        if (target instanceof TargetPlayer) {
          target.add(permanent.getControllerId(),game);
        }
        if (target instanceof TargetCreaturePermanent) {
          target.add(event.getTargetId(),game);
        }
      }
      return true;
    }
  }
  return false;
}",0.7824296499656829
159900,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ZONE_CHANGE && !event.getTargetId().equals(this.getSourceId())) {
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    if (zEvent.getToZone() == Constants.Zone.BATTLEFIELD) {
      Permanent permanent=game.getPermanent(event.getTargetId());
      if (permanent != null && permanent.getCardType().contains(Constants.CardType.CREATURE) && permanent.getControllerId().equals(this.getControllerId())) {
        return true;
      }
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD && !event.getTargetId().equals(this.getSourceId())) {
    Permanent permanent=game.getPermanent(event.getTargetId());
    if (permanent != null && permanent.getCardType().contains(Constants.CardType.CREATURE) && permanent.getControllerId().equals(this.getControllerId())) {
      return true;
    }
  }
  return false;
}",0.7455968688845401
159901,"public EntersBattlefieldAllTriggeredAbility(EntersBattlefieldAllTriggeredAbility ability){
  super(ability);
}","public EntersBattlefieldAllTriggeredAbility(EntersBattlefieldAllTriggeredAbility ability){
  super(ability);
  this.filter=ability.filter;
  this.rule=ability.rule;
  this.controlled=ability.controlled;
}",0.7006369426751592
159902,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == EventType.ZONE_CHANGE && ((ZoneChangeEvent)event).getToZone() == Zone.BATTLEFIELD) {
    Permanent permanent=game.getPermanent(event.getTargetId());
    if (permanent != null && permanent.getCardType().contains(CardType.LAND) && permanent.getControllerId().equals(this.controllerId)) {
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == EventType.ENTERS_THE_BATTLEFIELD) {
    Permanent permanent=game.getPermanent(event.getTargetId());
    if (permanent != null && permanent.getCardType().contains(CardType.LAND) && permanent.getControllerId().equals(this.controllerId)) {
      return true;
    }
  }
  return false;
}",0.918444165621079
159903,"@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  Zone fromZone=((ZoneChangeEvent)event).getFromZone();
  Card card=game.getCard(event.getTargetId());
  UUID sourceId=event.getSourceId();
  UUID controllerId=event.getPlayerId();
  Object object=game.getState().getValue(""String_Node_Str"" + card.getId());
  if (object != null && object instanceof PermanentCard) {
    return false;
  }
  UUID targetId=null;
  MageObject sourceObject=game.getObject(sourceId);
  if (sourceObject instanceof StackAbility) {
    StackAbility stackAbility=(StackAbility)sourceObject;
    if (!stackAbility.getEffects().isEmpty()) {
      targetId=stackAbility.getEffects().get(0).getTargetPointer().getFirst(game,stackAbility);
    }
  }
  if (targetId == null) {
    Target target=card.getSpellAbility().getTargets().get(0);
    Player player=game.getPlayer(card.getOwnerId());
    if (player != null && player.choose(Outcome.BoostCreature,target,card.getId(),game)) {
      targetId=target.getFirstTarget();
    }
  }
  Permanent targetPermanent=game.getPermanent(targetId);
  Player targetPlayer=game.getPlayer(targetId);
  if (targetPermanent != null || targetPlayer != null) {
switch (fromZone) {
case GRAVEYARD:
      game.getPlayer(card.getOwnerId()).removeFromGraveyard(card,game);
    break;
case HAND:
  game.getPlayer(card.getOwnerId()).removeFromHand(card,game);
break;
case LIBRARY:
game.getPlayer(card.getOwnerId()).removeFromLibrary(card,game);
break;
default :
}
game.rememberLKI(card.getId(),fromZone,card);
PermanentCard permanent=new PermanentCard(card,card.getOwnerId());
game.getBattlefield().addPermanent(permanent);
game.setZone(card.getId(),Zone.BATTLEFIELD);
game.applyEffects();
permanent.entersBattlefield(event.getSourceId(),game);
game.applyEffects();
game.fireEvent(new ZoneChangeEvent(permanent,controllerId,fromZone,Zone.BATTLEFIELD));
if (targetPermanent != null) {
targetPermanent.addAttachment(permanent.getId(),game);
}
if (targetPlayer != null) {
targetPlayer.addAttachment(permanent.getId(),game);
}
}
return true;
}","@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  Zone fromZone=((ZoneChangeEvent)event).getFromZone();
  Card card=game.getCard(event.getTargetId());
  UUID sourceId=event.getSourceId();
  UUID controllerId=event.getPlayerId();
  Object object=game.getState().getValue(""String_Node_Str"" + card.getId());
  if (object != null && object instanceof PermanentCard) {
    return false;
  }
  UUID targetId=null;
  MageObject sourceObject=game.getObject(sourceId);
  if (sourceObject instanceof StackAbility) {
    StackAbility stackAbility=(StackAbility)sourceObject;
    if (!stackAbility.getEffects().isEmpty()) {
      targetId=stackAbility.getEffects().get(0).getTargetPointer().getFirst(game,stackAbility);
    }
  }
  if (targetId == null) {
    Target target=card.getSpellAbility().getTargets().get(0);
    Player player=game.getPlayer(card.getOwnerId());
    if (player != null && player.choose(Outcome.BoostCreature,target,card.getId(),game)) {
      targetId=target.getFirstTarget();
    }
  }
  Permanent targetPermanent=game.getPermanent(targetId);
  Player targetPlayer=game.getPlayer(targetId);
  if (targetPermanent != null || targetPlayer != null) {
switch (fromZone) {
case GRAVEYARD:
      game.getPlayer(card.getOwnerId()).removeFromGraveyard(card,game);
    break;
case HAND:
  game.getPlayer(card.getOwnerId()).removeFromHand(card,game);
break;
case LIBRARY:
game.getPlayer(card.getOwnerId()).removeFromLibrary(card,game);
break;
default :
}
game.rememberLKI(card.getId(),fromZone,card);
PermanentCard permanent=new PermanentCard(card,card.getOwnerId());
game.getBattlefield().addPermanent(permanent);
game.setZone(card.getId(),Zone.BATTLEFIELD);
game.applyEffects();
permanent.entersBattlefield(event.getSourceId(),game,fromZone,true);
game.applyEffects();
game.fireEvent(new ZoneChangeEvent(permanent,controllerId,fromZone,Zone.BATTLEFIELD));
if (targetPermanent != null) {
targetPermanent.addAttachment(permanent.getId(),game);
}
if (targetPlayer != null) {
targetPlayer.addAttachment(permanent.getId(),game);
}
}
return true;
}",0.9966248794599808
159904,"@Override public boolean apply(Game game,Ability source){
  boolean result=false;
  for (  UUID id : targetPointer.getTargets(game,source)) {
switch (game.getState().getZone(id)) {
case BATTLEFIELD:
      Permanent permanent=game.getPermanent(id);
    if (permanent != null) {
      result|=permanent.moveToZone(Zone.HAND,source.getId(),game,false);
    }
  break;
case GRAVEYARD:
Card card=game.getCard(id);
if (card != null) {
result|=card.moveToZone(Zone.HAND,source.getId(),game,true);
}
break;
case EXILED:
card=game.getCard(id);
if (card != null) {
result|=card.moveToZone(Zone.HAND,source.getId(),game,true);
}
break;
}
}
return result;
}","@Override public boolean apply(Game game,Ability source){
  boolean result=false;
  for (  UUID targetId : targetPointer.getTargets(game,source)) {
switch (game.getState().getZone(targetId)) {
case BATTLEFIELD:
      Permanent permanent=game.getPermanent(targetId);
    if (permanent != null) {
      result|=permanent.moveToZone(Zone.HAND,source.getId(),game,false);
    }
  break;
case GRAVEYARD:
Card card=game.getCard(targetId);
if (card != null) {
result|=card.moveToZone(Zone.HAND,source.getId(),game,true);
}
break;
case EXILED:
card=game.getCard(targetId);
if (card != null) {
result|=card.moveToZone(Zone.HAND,source.getId(),game,true);
}
break;
}
}
return result;
}",0.9696969696969696
159905,"@Override public ArmyOfTheDamned copy(){
  return new ArmyOfTheDamned(this);
}","@Override public ArmyOfTheDamnedEffect copy(){
  return new ArmyOfTheDamnedEffect(this);
}",0.9285714285714286
159906,"@Override public void removeAllAbilities(UUID sourceId,Game game){
  getAbilities().clear();
  game.resetForSourceId(this.getId());
}","@Override public void removeAllAbilities(UUID sourceId,Game game){
  getAbilities().clear();
  game.getContinuousEffects().removeGainedEffectsForSource(this.getId());
  game.getState().resetForSourceId(this.getId());
}",0.717948717948718
159907,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  for (  UUID playerId : controller.getInRange()) {
    Cards playerLibrary=new CardsImpl();
    Player player=game.getPlayer(playerId);
    playerLibrary.addAll(player.getLibrary().getCardList());
    TargetCardInLibrary target=new TargetCardInLibrary(new FilterNonlandCard());
    if (controller.choose(Constants.Outcome.Benefit,playerLibrary,target,game)) {
      UUID targetId=target.getFirstTarget();
      Card card=player.getLibrary().remove(targetId,game);
      if (card != null) {
        card.moveToExile(source.getSourceId(),""String_Node_Str"",source.getSourceId(),game);
      }
    }
    player.shuffleLibrary(game);
  }
  ExileZone JaceExileZone=game.getExile().getExileZone(source.getSourceId());
  FilterCard filter=new FilterCard(""String_Node_Str"");
  TargetCardInExile target=new TargetCardInExile(filter,source.getSourceId());
  while (JaceExileZone.count(filter,game) > 0 && controller.choose(Outcome.PlayForFree,JaceExileZone,target,game)) {
    Card card=game.getCard(target.getFirstTarget());
    if (card != null) {
      if (controller.cast(card.getSpellAbility(),game,true)) {
        game.getExile().removeCard(card,game);
      }
    }
    target.clearChosen();
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  for (  UUID playerId : controller.getInRange()) {
    Cards playerLibrary=new CardsImpl();
    Player player=game.getPlayer(playerId);
    playerLibrary.addAll(player.getLibrary().getCardList());
    String playerName=new StringBuilder(player.getName()).append(""String_Node_Str"").toString();
    if (source.getControllerId().equals(player.getId())) {
      playerName=""String_Node_Str"";
    }
    TargetCardInLibrary target=new TargetCardInLibrary(new FilterNonlandCard(new StringBuilder(""String_Node_Str"").append(playerName).append(""String_Node_Str"").toString()));
    if (controller.choose(Constants.Outcome.Benefit,playerLibrary,target,game)) {
      UUID targetId=target.getFirstTarget();
      Card card=player.getLibrary().remove(targetId,game);
      if (card != null) {
        card.moveToExile(source.getSourceId(),""String_Node_Str"",source.getSourceId(),game);
      }
    }
    player.shuffleLibrary(game);
  }
  ExileZone JaceExileZone=game.getExile().getExileZone(source.getSourceId());
  FilterCard filter=new FilterCard(""String_Node_Str"");
  TargetCardInExile target=new TargetCardInExile(filter,source.getSourceId());
  while (JaceExileZone.count(filter,game) > 0 && controller.choose(Outcome.PlayForFree,JaceExileZone,target,game)) {
    Card card=game.getCard(target.getFirstTarget());
    if (card != null) {
      if (controller.cast(card.getSpellAbility(),game,true)) {
        game.getExile().removeCard(card,game);
      }
    }
    target.clearChosen();
  }
  return true;
}",0.9052148245326336
159908,"@Override public void entersBattlefield(UUID sourceId,Game game){
  controlledFromStartOfControllerTurn=false;
  game.replaceEvent(GameEvent.getEvent(EventType.ENTERS_THE_BATTLEFIELD,objectId,sourceId,ownerId));
}","@Override public void entersBattlefield(UUID sourceId,Game game){
  controlledFromStartOfControllerTurn=false;
  game.replaceEvent(GameEvent.getEvent(EventType.ENTERS_THE_BATTLEFIELD,objectId,sourceId,controllerId));
}",0.974477958236659
159909,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType() == EventType.ENTERS_THE_BATTLEFIELD) {
    Permanent creature=game.getPermanent(event.getTargetId());
    if (creature != null && creature.getControllerId().equals(source.getControllerId()) && !event.getTargetId().equals(source.getSourceId())) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType() == EventType.ENTERS_THE_BATTLEFIELD) {
    Permanent creature=game.getPermanent(event.getTargetId());
    if (creature != null && creature.getControllerId().equals(source.getControllerId()) && creature.getCardType().contains(CardType.CREATURE) && !event.getTargetId().equals(source.getSourceId())) {
      return true;
    }
  }
  return false;
}",0.935251798561151
159910,"@Override public boolean apply(Game game,Ability source){
  boolean result=false;
  for (  Target target : source.getTargets()) {
    if (target instanceof TargetCreaturePermanent) {
      Permanent targetCreature=game.getPermanent(target.getFirstTarget());
      if (targetCreature != null) {
        ContinuousEffect effect1=new GainControlTargetEffect(Duration.EndOfTurn);
        effect1.setTargetPointer(new FixedTarget(targetCreature.getId()));
        game.addEffect(effect1,source);
        ContinuousEffect effect2=new GainAbilityTargetEffect(HasteAbility.getInstance(),Constants.Duration.EndOfTurn);
        effect2.setTargetPointer(new FixedTarget(targetCreature.getId()));
        game.addEffect(effect2,source);
        targetCreature.untap(game);
      }
    }
  }
  return result;
}","@Override public boolean apply(Game game,Ability source){
  boolean result=false;
  for (  Target target : source.getTargets()) {
    if (target instanceof TargetCreaturePermanent) {
      Permanent targetCreature=game.getPermanent(target.getFirstTarget());
      if (targetCreature != null) {
        ContinuousEffect effect1=new GainControlTargetEffect(Duration.EndOfTurn);
        effect1.setTargetPointer(new FixedTarget(targetCreature.getId()));
        game.addEffect(effect1,source);
        ContinuousEffect effect2=new GainAbilityTargetEffect(HasteAbility.getInstance(),Constants.Duration.EndOfTurn);
        effect2.setTargetPointer(new FixedTarget(targetCreature.getId()));
        game.addEffect(effect2,source);
        targetCreature.untap(game);
        result=true;
      }
    }
  }
  return result;
}",0.9869969040247678
159911,"@Override public boolean apply(Game game,Ability source){
  List<Permanent> permanents=game.getBattlefield().getAllActivePermanents(source.getControllerId());
  for (  Permanent p : permanents) {
    if (!p.getColor().isColorless()) {
      p.sacrifice(source.getSourceId(),game);
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  List<Permanent> permanents=game.getBattlefield().getActivePermanents(source.getControllerId(),game);
  for (  Permanent p : permanents) {
    if (!p.getColor().isColorless()) {
      p.sacrifice(source.getSourceId(),game);
    }
  }
  return true;
}",0.987012987012987
159912,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    List<Permanent> creatures=game.getBattlefield().getAllActivePermanents(new FilterCreaturePermanent(),player.getId(),game);
    int amount=0;
    for (    Permanent creature : creatures) {
      int power=creature.getPower().getValue();
      if (amount < power) {
        amount=power;
      }
    }
    OozeToken oozeToken=new OozeToken();
    oozeToken.getPower().setValue(amount);
    oozeToken.getToughness().setValue(amount);
    oozeToken.putOntoBattlefield(1,game,source.getSourceId(),source.getControllerId());
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    List<Permanent> creatures=game.getBattlefield().getAllActivePermanents(new FilterCreaturePermanent(),player.getId(),game);
    int amount=0;
    for (    Permanent creature : creatures) {
      int power=creature.getPower().getValue();
      if (amount < power) {
        amount=power;
      }
    }
    OozeToken oozeToken=new OozeToken();
    oozeToken.getPower().initValue(amount);
    oozeToken.getToughness().initValue(amount);
    oozeToken.putOntoBattlefield(1,game,source.getSourceId(),source.getControllerId());
    return true;
  }
  return false;
}",0.9928774928774928
159913,"public OozeToken(){
  super(""String_Node_Str"",""String_Node_Str"");
  cardType.add(CardType.CREATURE);
  subtype.add(""String_Node_Str"");
  power=new MageInt(0);
  toughness=new MageInt(0);
}","public OozeToken(){
  super(""String_Node_Str"",""String_Node_Str"");
  cardType.add(CardType.CREATURE);
  subtype.add(""String_Node_Str"");
  color.setGreen(true);
  power=new MageInt(0);
  toughness=new MageInt(0);
}",0.94
159914,"@Override public boolean apply(Game game,Ability source){
  StackObject stackObject=game.getStack().getStackObject(targetPointer.getFirst(game,source));
  if (stackObject != null && game.getStack().counter(source.getFirstTarget(),source.getSourceId(),game)) {
    if (stackObject != null) {
      int cmc=stackObject.getManaCost().convertedManaCost();
      if (cmc > 0) {
        MysticGenesisOozeToken oozeToken=new MysticGenesisOozeToken();
        oozeToken.getPower().setValue(cmc);
        oozeToken.getToughness().setValue(cmc);
        oozeToken.putOntoBattlefield(1,game,source.getSourceId(),source.getControllerId());
      }
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  StackObject stackObject=game.getStack().getStackObject(targetPointer.getFirst(game,source));
  if (stackObject != null && game.getStack().counter(source.getFirstTarget(),source.getSourceId(),game)) {
    if (stackObject != null) {
      int cmc=stackObject.getManaCost().convertedManaCost();
      if (cmc > 0) {
        MysticGenesisOozeToken oozeToken=new MysticGenesisOozeToken();
        oozeToken.getPower().initValue(cmc);
        oozeToken.getToughness().initValue(cmc);
        oozeToken.putOntoBattlefield(1,game,source.getSourceId(),source.getControllerId());
      }
      return true;
    }
  }
  return false;
}",0.9926793557833088
159915,"@Override public boolean apply(Game game,Ability source){
  int xValue=0;
  for (  Cost cost : source.getCosts()) {
    if (cost instanceof RemoveVariableCountersTargetCost) {
      xValue=((RemoveVariableCountersTargetCost)cost).getAmount();
      break;
    }
  }
  Token tokenCopy=token.copy();
  tokenCopy.getAbilities().newId();
  tokenCopy.getPower().setValue(xValue);
  tokenCopy.getToughness().setValue(xValue);
  tokenCopy.putOntoBattlefield(1,game,source.getSourceId(),source.getControllerId());
  return true;
}","@Override public boolean apply(Game game,Ability source){
  int xValue=0;
  for (  Cost cost : source.getCosts()) {
    if (cost instanceof RemoveVariableCountersTargetCost) {
      xValue=((RemoveVariableCountersTargetCost)cost).getAmount();
      break;
    }
  }
  Token tokenCopy=token.copy();
  tokenCopy.getAbilities().newId();
  tokenCopy.getPower().initValue(xValue);
  tokenCopy.getToughness().initValue(xValue);
  tokenCopy.putOntoBattlefield(1,game,source.getSourceId(),source.getControllerId());
  return true;
}",0.9904397705544932
159916,"@Override public boolean apply(Game game,Ability source){
  Permanent aura=game.getPermanent(source.getFirstTarget());
  Permanent creature=game.getPermanent(source.getTargets().get(1).getFirstTarget());
  if (aura != null && creature != null) {
    aura.attachTo(creature.getId(),game);
    creature.addAttachment(aura.getId(),game);
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent aura=game.getPermanent(source.getFirstTarget());
  Permanent creature=game.getPermanent(source.getTargets().get(1).getFirstTarget());
  if (aura != null && creature != null) {
    Permanent oldCreature=game.getPermanent(aura.getAttachedTo());
    if (oldCreature == null || oldCreature.equals(creature)) {
      return false;
    }
    if (oldCreature.removeAttachment(aura.getId(),game)) {
      return creature.addAttachment(aura.getId(),game);
    }
  }
  return false;
}",0.6128680479825518
159917,"@Override public boolean apply(Game game,Ability source,UUID originalId){
  return apply(game,source,null);
}","@Override public boolean apply(Game game,Ability source,UUID originalId){
  return apply(game,source);
}",0.976525821596244
159918,"@Override public boolean apply(Game game,Ability source){
  for (  Permanent permanent : game.getBattlefield().getAllActivePermanents(filter,source.getControllerId(),game)) {
    permanent.moveToZone(Constants.Zone.HAND,source.getSourceId(),game,true);
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(filter,source.getControllerId(),source.getSourceId(),game)) {
    permanent.moveToZone(Constants.Zone.HAND,source.getSourceId(),game,true);
  }
  return true;
}",0.9574468085106383
159919,"public boolean hasFirstOrDoubleStrike(Game game){
  for (  CombatGroup group : groups) {
    if (group.hasFirstOrDoubleStrike(game))     return true;
  }
  return false;
}","public boolean hasFirstOrDoubleStrike(Game game){
  for (  CombatGroup group : groups) {
    if (group.hasFirstOrDoubleStrike(game)) {
      return true;
    }
  }
  return false;
}",0.9715909090909092
159920,"public CombatGroup findGroup(UUID attackerId){
  for (  CombatGroup group : groups) {
    if (group.getAttackers().contains(attackerId))     return group;
  }
  return null;
}","public CombatGroup findGroup(UUID attackerId){
  for (  CombatGroup group : groups) {
    if (group.getAttackers().contains(attackerId)) {
      return group;
    }
  }
  return null;
}",0.9722222222222222
159921,"public Set<UUID> getPlayerDefenders(Game game){
  Set<UUID> playerDefenders=new HashSet<UUID>();
  for (  CombatGroup group : groups) {
    if (group.defenderIsPlaneswalker) {
      Permanent permanent=game.getPermanent(group.getDefenderId());
      if (permanent != null)       playerDefenders.add(permanent.getControllerId());
    }
 else {
      playerDefenders.add(group.getDefenderId());
    }
  }
  return playerDefenders;
}","public Set<UUID> getPlayerDefenders(Game game){
  Set<UUID> playerDefenders=new HashSet<UUID>();
  for (  CombatGroup group : groups) {
    if (group.defenderIsPlaneswalker) {
      Permanent permanent=game.getPermanent(group.getDefenderId());
      if (permanent != null) {
        playerDefenders.add(permanent.getControllerId());
      }
    }
 else {
      playerDefenders.add(group.getDefenderId());
    }
  }
  return playerDefenders;
}",0.9862385321100916
159922,"public void selectAttackers(Game game){
  if (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.DECLARING_ATTACKERS,attackerId,attackerId))) {
    Player player=game.getPlayer(attackerId);
    checkAttackRequirements(player,game);
    player.selectAttackers(game,attackerId);
    if (game.isPaused() || game.isGameOver())     return;
    checkAttackRestrictions(player,game);
    resumeSelectAttackers(game);
  }
}","public void selectAttackers(Game game){
  if (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.DECLARING_ATTACKERS,attackerId,attackerId))) {
    Player player=game.getPlayer(attackerId);
    checkAttackRequirements(player,game);
    player.selectAttackers(game,attackerId);
    if (game.isPaused() || game.isGameOver()) {
      return;
    }
    checkAttackRestrictions(player,game);
    resumeSelectAttackers(game);
  }
}",0.9882903981264636
159923,"public void declareAttacker(UUID attackerId,UUID defenderId,Game game){
  if (!defenders.contains(defenderId))   return;
  Permanent defender=game.getPermanent(defenderId);
  CombatGroup newGroup=new CombatGroup(defenderId,defender != null);
  newGroup.attackers.add(attackerId);
  Permanent attacker=game.getPermanent(attackerId);
  if (!attacker.getAbilities().containsKey(VigilanceAbility.getInstance().getId())) {
    attacker.tap(game);
  }
  attacker.setAttacking(true);
  groups.add(newGroup);
}","public void declareAttacker(UUID attackerId,UUID defenderId,Game game){
  if (!defenders.contains(defenderId)) {
    return;
  }
  Permanent defender=game.getPermanent(defenderId);
  CombatGroup newGroup=new CombatGroup(defenderId,defender != null);
  newGroup.attackers.add(attackerId);
  Permanent attacker=game.getPermanent(attackerId);
  if (!attacker.getAbilities().containsKey(VigilanceAbility.getInstance().getId())) {
    attacker.tap(game);
  }
  attacker.setAttacking(true);
  groups.add(newGroup);
}",0.974308300395257
159924,"public boolean noAttackers(){
  if (groups.isEmpty() || getAttackers().isEmpty())   return true;
  return false;
}","public boolean noAttackers(){
  if (groups.isEmpty() || getAttackers().isEmpty()) {
    return true;
  }
  return false;
}",0.9661016949152542
159925,"public boolean isAttacked(UUID defenderId,Game game){
  for (  CombatGroup group : groups) {
    if (group.getDefenderId().equals(defenderId))     return true;
    if (group.defenderIsPlaneswalker) {
      Permanent permanent=game.getPermanent(group.getDefenderId());
      if (permanent.getControllerId().equals(defenderId))       return true;
    }
  }
  return false;
}","public boolean isAttacked(UUID defenderId,Game game){
  for (  CombatGroup group : groups) {
    if (group.getDefenderId().equals(defenderId)) {
      return true;
    }
    if (group.defenderIsPlaneswalker) {
      Permanent permanent=game.getPermanent(group.getDefenderId());
      if (permanent.getControllerId().equals(defenderId)) {
        return true;
      }
    }
  }
  return false;
}",0.9712793733681462
159926,"public void removeBlocker(UUID blockerId,Game game){
  for (  CombatGroup group : groups) {
    if (group.blockers.contains(blockerId)) {
      group.blockers.remove(blockerId);
      group.blockerOrder.remove(blockerId);
      if (group.blockers.isEmpty())       group.blocked=false;
    }
  }
  Permanent creature=game.getPermanent(blockerId);
  if (creature != null)   creature.setBlocking(0);
}","public void removeBlocker(UUID blockerId,Game game){
  for (  CombatGroup group : groups) {
    if (group.blockers.contains(blockerId)) {
      group.blockers.remove(blockerId);
      group.blockerOrder.remove(blockerId);
      if (group.blockers.isEmpty()) {
        group.blocked=false;
      }
    }
  }
  Permanent creature=game.getPermanent(blockerId);
  if (creature != null) {
    creature.setBlocking(0);
  }
}",0.9754901960784312
159927,"protected void checkAttackRestrictions(Player player,Game game){
  int count=0;
  for (  CombatGroup group : groups) {
    count+=group.getAttackers().size();
  }
  if (count == 1) {
    for (    CombatGroup group : groups) {
      List<UUID> tobeRemoved=new ArrayList<UUID>();
      for (      UUID attackerId : group.getAttackers()) {
        Permanent attacker=game.getPermanent(attackerId);
        if (attacker != null && attacker.getAbilities().containsKey(CantAttackAloneAbility.getInstance().getId())) {
          game.informPlayers(attacker.getName() + ""String_Node_Str"");
          tobeRemoved.add(attackerId);
        }
      }
      for (      UUID attackerId : tobeRemoved) {
        group.remove(attackerId);
      }
    }
  }
}","protected void checkAttackRestrictions(Player player,Game game){
  int count=0;
  for (  CombatGroup group : groups) {
    count+=group.getAttackers().size();
  }
  if (count == 1) {
    for (    CombatGroup group : groups) {
      List<UUID> tobeRemoved=new ArrayList<UUID>();
      for (      UUID attackingCreatureId : group.getAttackers()) {
        Permanent attacker=game.getPermanent(attackingCreatureId);
        if (attacker != null && attacker.getAbilities().containsKey(CantAttackAloneAbility.getInstance().getId())) {
          game.informPlayers(attacker.getName() + ""String_Node_Str"");
          tobeRemoved.add(attackingCreatureId);
        }
      }
      for (      UUID attackingCreatureId : tobeRemoved) {
        group.remove(attackingCreatureId);
      }
    }
  }
}",0.9574885546108568
159928,"public void customInitComponents(){
  btnRight=new javax.swing.JButton();
  btnLeft=new javax.swing.JButton();
  jScrollPane1=new javax.swing.JScrollPane();
  lblMessage=new MageTextArea();
  btnSpecial=new javax.swing.JButton();
  setBackground(new java.awt.Color(0,0,0,80));
  btnRight.setText(""String_Node_Str"");
  btnRight.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnRightActionPerformed(evt);
    }
  }
);
  btnLeft.setText(""String_Node_Str"");
  btnLeft.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnLeftActionPerformed(evt);
    }
  }
);
  jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
  jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  lblMessage.setBorder(null);
  jScrollPane1.setViewportView(lblMessage);
  jScrollPane1.setBorder(null);
  btnSpecial.setText(""String_Node_Str"");
  btnSpecial.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnSpecialActionPerformed(evt);
    }
  }
);
  JLabel jlabel=new JLabel();
  jlabel.setLayout(new BorderLayout());
  jlabel.add(jScrollPane1,BorderLayout.CENTER);
  setLayout(new BorderLayout());
  JLabel jlabel2=new JLabel();
  jlabel2.setLayout(new FlowLayout());
  jlabel2.add(btnSpecial);
  jlabel2.add(btnLeft);
  jlabel2.add(btnRight);
  jlabel2.setPreferredSize(new Dimension(0,35));
  add(jlabel,BorderLayout.CENTER);
  add(jlabel2,BorderLayout.PAGE_END);
}","public void customInitComponents(){
  btnRight=new javax.swing.JButton();
  btnLeft=new javax.swing.JButton();
  jScrollPane1=new javax.swing.JScrollPane();
  lblMessage=new MageTextArea();
  btnSpecial=new javax.swing.JButton();
  setBackground(new java.awt.Color(0,0,0,80));
  btnRight.setText(""String_Node_Str"");
  btnRight.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnRightActionPerformed(evt);
    }
  }
);
  btnLeft.setText(""String_Node_Str"");
  btnLeft.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnLeftActionPerformed(evt);
    }
  }
);
  jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
  jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  lblMessage.setBorder(null);
  jScrollPane1.setViewportView(lblMessage);
  jScrollPane1.setBorder(null);
  btnSpecial.setText(""String_Node_Str"");
  btnSpecial.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnSpecialActionPerformed(evt);
    }
  }
);
  JLabel jlabel=new JLabel();
  jlabel.setLayout(new BorderLayout());
  jlabel.add(jScrollPane1,BorderLayout.CENTER);
  setLayout(new BorderLayout());
  JLabel jlabel2=new JLabel();
  jlabel2.setLayout(new FlowLayout());
  jlabel2.add(btnSpecial);
  jlabel2.add(btnLeft);
  jlabel2.add(btnRight);
  jlabel2.setPreferredSize(new Dimension(0,35));
  add(jlabel,BorderLayout.CENTER);
  add(jlabel2,BorderLayout.PAGE_END);
}",0.9910125823846616
159929,"public void run(){
  logger.info(""String_Node_Str"");
  FeedbackPanel.this.btnRight.doClick();
}","@Override public void run(){
  logger.info(""String_Node_Str"");
  Component c=MageFrame.getGame(gameId);
  while (c != null && !(c instanceof GamePane)) {
    c=c.getParent();
  }
  if (c != null && ((GamePane)c).isVisible()) {
    FeedbackPanel.this.btnRight.doClick();
  }
}",0.5135135135135135
159930,"/** 
 * Close game window by pressing OK button after 5 seconds
 */
private void endWithTimeout(){
  Runnable task=new Runnable(){
    public void run(){
      logger.info(""String_Node_Str"");
      FeedbackPanel.this.btnRight.doClick();
    }
  }
;
  worker.schedule(task,8,TimeUnit.SECONDS);
}","/** 
 * Close game window by pressing OK button after 8 seconds
 */
private void endWithTimeout(){
  Runnable task=new Runnable(){
    @Override public void run(){
      logger.info(""String_Node_Str"");
      Component c=MageFrame.getGame(gameId);
      while (c != null && !(c instanceof GamePane)) {
        c=c.getParent();
      }
      if (c != null && ((GamePane)c).isVisible()) {
        FeedbackPanel.this.btnRight.doClick();
      }
    }
  }
;
  worker.schedule(task,8,TimeUnit.SECONDS);
}",0.73989898989899
159931,"public void actionPerformed(java.awt.event.ActionEvent evt){
  btnSpecialActionPerformed(evt);
}","@Override public void actionPerformed(java.awt.event.ActionEvent evt){
  btnSpecialActionPerformed(evt);
}",0.9504950495049505
159932,"@Override public ArmoredTransport copy(){
  return new ArmoredTransport(this);
}","@Override public ArmoredTransportPreventCombatDamageSourceEffect copy(){
  return new ArmoredTransportPreventCombatDamageSourceEffect(this);
}",0.7207207207207207
159933,"@Override public int calculate(Game game,Ability sourceAbility){
  Player player=game.getPlayer(sourceAbility.getControllerId());
  if (player != null) {
    return player.getGraveyard().count(filter,game);
  }
  return 0;
}","@Override public int calculate(Game game,Ability sourceAbility){
  Permanent attachment=game.getPermanent(sourceAbility.getSourceId());
  if (attachment != null) {
    Permanent creature=game.getPermanent(attachment.getAttachedTo());
    if (creature != null) {
      Player player=game.getPlayer(creature.getControllerId());
      if (player != null) {
        return player.getGraveyard().count(filter,game);
      }
    }
  }
  return 0;
}",0.5615615615615616
159934,"public void checkBlockRestrictions(Game game,int blockersCount){
  if (attackers.isEmpty()) {
    return;
  }
  if (blockersCount == 1) {
    List<UUID> toBeRemoved=new ArrayList<UUID>();
    for (    UUID blockerId : getBlockers()) {
      Permanent blocker=game.getPermanent(blockerId);
      if (blocker != null && blocker.getAbilities().containsKey(CantBlockAloneAbility.getInstance().getId())) {
        game.informPlayers(blocker.getName() + ""String_Node_Str"");
        toBeRemoved.add(blockerId);
      }
    }
    for (    UUID blockerId : toBeRemoved) {
      remove(blockerId);
    }
    if (blockers.size() == 0) {
      this.blocked=false;
    }
  }
  for (  UUID uuid : attackers) {
    Permanent attacker=game.getPermanent(uuid);
    if (attacker != null && this.blocked && attacker.getMinBlockedBy() > 1 && blockers.size() > 0 && blockers.size() < attacker.getMinBlockedBy()) {
      for (      UUID blockerId : blockers) {
        Permanent blocker=game.getPermanent(blockerId);
        if (blocker != null) {
          blocker.setBlocking(blocker.getBlocking() - 1);
        }
      }
      blockers.clear();
      blockerOrder.clear();
      this.blocked=false;
      game.informPlayers(attacker.getName() + ""String_Node_Str"" + attacker.getMinBlockedBy()+ ""String_Node_Str"");
      return;
    }
  }
}","public void checkBlockRestrictions(Game game,int blockersCount){
  if (attackers.isEmpty()) {
    return;
  }
  if (blockersCount == 1) {
    List<UUID> toBeRemoved=new ArrayList<UUID>();
    for (    UUID blockerId : getBlockers()) {
      Permanent blocker=game.getPermanent(blockerId);
      if (blocker != null && blocker.getAbilities().containsKey(CantBlockAloneAbility.getInstance().getId())) {
        game.informPlayers(blocker.getName() + ""String_Node_Str"");
        toBeRemoved.add(blockerId);
      }
    }
    for (    UUID blockerId : toBeRemoved) {
      remove(blockerId);
      Permanent creature=game.getPermanent(blockerId);
      if (creature != null) {
        creature.setBlocking(creature.getBlocking() - 1);
      }
    }
    if (blockers.isEmpty()) {
      this.blocked=false;
    }
  }
  for (  UUID uuid : attackers) {
    Permanent attacker=game.getPermanent(uuid);
    if (attacker != null && this.blocked && attacker.getMinBlockedBy() > 1 && blockers.size() > 0 && blockers.size() < attacker.getMinBlockedBy()) {
      for (      UUID blockerId : blockers) {
        Permanent blocker=game.getPermanent(blockerId);
        if (blocker != null) {
          blocker.setBlocking(blocker.getBlocking() - 1);
        }
      }
      blockers.clear();
      blockerOrder.clear();
      this.blocked=false;
      game.informPlayers(attacker.getName() + ""String_Node_Str"" + attacker.getMinBlockedBy()+ ""String_Node_Str"");
      return;
    }
  }
}",0.9386437029063508
159935,"public boolean canBlock(Permanent blocker,Game game){
  for (  UUID attackerId : attackers) {
    if (!blocker.canBlock(attackerId,game))     return false;
  }
  return true;
}","public boolean canBlock(Permanent blocker,Game game){
  for (  UUID attackerId : attackers) {
    if (!blocker.canBlock(attackerId,game)) {
      return false;
    }
  }
  return true;
}",0.9723756906077348
159936,"public void pickBlockerOrder(UUID playerId,Game game){
  if (blockers.isEmpty())   return;
  Player player=game.getPlayer(playerId);
  List<UUID> blockerList=new ArrayList<UUID>(blockers);
  blockerOrder.clear();
  while (true) {
    if (blockerList.size() == 1) {
      blockerOrder.add(blockerList.get(0));
      break;
    }
 else {
      List<Permanent> blockerPerms=new ArrayList<Permanent>();
      for (      UUID blockerId : blockerList) {
        blockerPerms.add(game.getPermanent(blockerId));
      }
      UUID blockerId=player.chooseBlockerOrder(blockerPerms,game);
      blockerOrder.add(blockerId);
      blockerList.remove(blockerId);
    }
  }
}","public void pickBlockerOrder(UUID playerId,Game game){
  if (blockers.isEmpty()) {
    return;
  }
  Player player=game.getPlayer(playerId);
  List<UUID> blockerList=new ArrayList<UUID>(blockers);
  blockerOrder.clear();
  while (true) {
    if (blockerList.size() == 1) {
      blockerOrder.add(blockerList.get(0));
      break;
    }
 else {
      List<Permanent> blockerPerms=new ArrayList<Permanent>();
      for (      UUID blockerId : blockerList) {
        blockerPerms.add(game.getPermanent(blockerId));
      }
      UUID blockerId=player.chooseBlockerOrder(blockerPerms,game);
      blockerOrder.add(blockerId);
      blockerList.remove(blockerId);
    }
  }
}",0.993993993993994
159937,"public void remove(UUID creatureId){
  if (attackers.contains(creatureId)) {
    attackers.remove(creatureId);
  }
  if (blockers.contains(creatureId)) {
    blockers.remove(creatureId);
    if (blockerOrder.contains(creatureId))     blockerOrder.remove(creatureId);
  }
}","public void remove(UUID creatureId){
  if (attackers.contains(creatureId)) {
    attackers.remove(creatureId);
  }
  if (blockers.contains(creatureId)) {
    blockers.remove(creatureId);
    if (blockerOrder.contains(creatureId)) {
      blockerOrder.remove(creatureId);
    }
  }
}",0.9711191335740073
159938,"private void multiBlockerDamage(boolean first,Game game){
  Permanent attacker=game.getPermanent(attackers.get(0));
  if (attacker == null) {
    return;
  }
  Player player=game.getPlayer(attacker.getControllerId());
  int damage=attacker.getPower().getValue();
  if (canDamage(attacker,first)) {
    Map<UUID,Integer> assigned=new HashMap<UUID,Integer>();
    if (blocked) {
      for (      UUID blockerId : blockerOrder) {
        Permanent blocker=game.getPermanent(blockerId);
        int lethalDamage;
        if (attacker.getAbilities().containsKey(DeathtouchAbility.getInstance().getId()))         lethalDamage=1;
 else         lethalDamage=blocker.getToughness().getValue() - blocker.getDamage();
        if (lethalDamage >= damage) {
          assigned.put(blockerId,damage);
          damage=0;
          break;
        }
        int damageAssigned=player.getAmount(lethalDamage,damage,""String_Node_Str"" + blocker.getName(),game);
        assigned.put(blockerId,damageAssigned);
        damage-=damageAssigned;
      }
      if (damage > 0 && hasTrample(attacker)) {
        defenderDamage(attacker,damage,game);
      }
    }
    for (    UUID blockerId : blockerOrder) {
      Permanent blocker=game.getPermanent(blockerId);
      if (canDamage(blocker,first)) {
        if (blocker.getBlocking() == 1) {
          attacker.markDamage(blocker.getPower().getValue(),blocker.getId(),game,true,true);
        }
      }
    }
    for (    Map.Entry<UUID,Integer> entry : assigned.entrySet()) {
      Permanent blocker=game.getPermanent(entry.getKey());
      blocker.markDamage(entry.getValue(),attacker.getId(),game,true,true);
    }
  }
 else {
    for (    UUID blockerId : blockerOrder) {
      Permanent blocker=game.getPermanent(blockerId);
      if (canDamage(blocker,first)) {
        attacker.markDamage(blocker.getPower().getValue(),blocker.getId(),game,true,true);
      }
    }
  }
}","private void multiBlockerDamage(boolean first,Game game){
  Permanent attacker=game.getPermanent(attackers.get(0));
  if (attacker == null) {
    return;
  }
  Player player=game.getPlayer(attacker.getControllerId());
  int damage=attacker.getPower().getValue();
  if (canDamage(attacker,first)) {
    Map<UUID,Integer> assigned=new HashMap<UUID,Integer>();
    if (blocked) {
      for (      UUID blockerId : blockerOrder) {
        Permanent blocker=game.getPermanent(blockerId);
        int lethalDamage;
        if (attacker.getAbilities().containsKey(DeathtouchAbility.getInstance().getId())) {
          lethalDamage=1;
        }
 else {
          lethalDamage=blocker.getToughness().getValue() - blocker.getDamage();
        }
        if (lethalDamage >= damage) {
          assigned.put(blockerId,damage);
          damage=0;
          break;
        }
        int damageAssigned=player.getAmount(lethalDamage,damage,""String_Node_Str"" + blocker.getName(),game);
        assigned.put(blockerId,damageAssigned);
        damage-=damageAssigned;
      }
      if (damage > 0 && hasTrample(attacker)) {
        defenderDamage(attacker,damage,game);
      }
    }
    for (    UUID blockerId : blockerOrder) {
      Permanent blocker=game.getPermanent(blockerId);
      if (canDamage(blocker,first)) {
        if (blocker.getBlocking() == 1) {
          attacker.markDamage(blocker.getPower().getValue(),blocker.getId(),game,true,true);
        }
      }
    }
    for (    Map.Entry<UUID,Integer> entry : assigned.entrySet()) {
      Permanent blocker=game.getPermanent(entry.getKey());
      blocker.markDamage(entry.getValue(),attacker.getId(),game,true,true);
    }
  }
 else {
    for (    UUID blockerId : blockerOrder) {
      Permanent blocker=game.getPermanent(blockerId);
      if (canDamage(blocker,first)) {
        attacker.markDamage(blocker.getPower().getValue(),blocker.getId(),game,true,true);
      }
    }
  }
}",0.9906201146430432
159939,"private void singleBlockerDamage(boolean first,Game game){
  Permanent blocker=game.getPermanent(blockers.get(0));
  Permanent attacker=game.getPermanent(attackers.get(0));
  if (blocker != null && attacker != null) {
    if (blocked && canDamage(attacker,first)) {
      int damage=attacker.getPower().getValue();
      if (hasTrample(attacker)) {
        int lethalDamage=blocker.getToughness().getValue() - blocker.getDamage();
        if (lethalDamage >= damage) {
          blocker.markDamage(damage,attacker.getId(),game,true,true);
        }
 else {
          Player player=game.getPlayer(attacker.getControllerId());
          int damageAssigned=player.getAmount(lethalDamage,damage,""String_Node_Str"" + blocker.getName(),game);
          blocker.markDamage(damageAssigned,attacker.getId(),game,true,true);
          damage-=damageAssigned;
          if (damage > 0)           defenderDamage(attacker,damage,game);
        }
      }
 else {
        blocker.markDamage(damage,attacker.getId(),game,true,true);
      }
    }
    if (canDamage(blocker,first)) {
      if (blocker.getBlocking() == 1) {
        int blockerDamage=blocker.getPower().getValue();
        attacker.markDamage(blockerDamage,blocker.getId(),game,true,true);
      }
    }
  }
}","private void singleBlockerDamage(boolean first,Game game){
  Permanent blocker=game.getPermanent(blockers.get(0));
  Permanent attacker=game.getPermanent(attackers.get(0));
  if (blocker != null && attacker != null) {
    if (blocked && canDamage(attacker,first)) {
      int damage=attacker.getPower().getValue();
      if (hasTrample(attacker)) {
        int lethalDamage=blocker.getToughness().getValue() - blocker.getDamage();
        if (lethalDamage >= damage) {
          blocker.markDamage(damage,attacker.getId(),game,true,true);
        }
 else {
          Player player=game.getPlayer(attacker.getControllerId());
          int damageAssigned=player.getAmount(lethalDamage,damage,""String_Node_Str"" + blocker.getName(),game);
          blocker.markDamage(damageAssigned,attacker.getId(),game,true,true);
          damage-=damageAssigned;
          if (damage > 0) {
            defenderDamage(attacker,damage,game);
          }
        }
      }
 else {
        blocker.markDamage(damage,attacker.getId(),game,true,true);
      }
    }
    if (canDamage(blocker,first)) {
      if (blocker.getBlocking() == 1) {
        int blockerDamage=blocker.getPower().getValue();
        attacker.markDamage(blockerDamage,blocker.getId(),game,true,true);
      }
    }
  }
}",0.9936758893280632
159940,"public void pickAttackerOrder(UUID playerId,Game game){
  if (attackers.isEmpty())   return;
  Player player=game.getPlayer(playerId);
  List<UUID> attackerList=new ArrayList<UUID>(attackers);
  attackerOrder.clear();
  while (true) {
    if (attackerList.size() == 1) {
      attackerOrder.add(attackerList.get(0));
      break;
    }
 else {
      List<Permanent> attackerPerms=new ArrayList<Permanent>();
      for (      UUID attackerId : attackerList) {
        attackerPerms.add(game.getPermanent(attackerId));
      }
      UUID attackerId=player.chooseAttackerOrder(attackerPerms,game);
      attackerOrder.add(attackerId);
      attackerList.remove(attackerId);
    }
  }
}","public void pickAttackerOrder(UUID playerId,Game game){
  if (attackers.isEmpty()) {
    return;
  }
  Player player=game.getPlayer(playerId);
  List<UUID> attackerList=new ArrayList<UUID>(attackers);
  attackerOrder.clear();
  while (true) {
    if (attackerList.size() == 1) {
      attackerOrder.add(attackerList.get(0));
      break;
    }
 else {
      List<Permanent> attackerPerms=new ArrayList<Permanent>();
      for (      UUID attackerId : attackerList) {
        attackerPerms.add(game.getPermanent(attackerId));
      }
      UUID attackerId=player.chooseAttackerOrder(attackerPerms,game);
      attackerOrder.add(attackerId);
      attackerList.remove(attackerId);
    }
  }
}",0.9941690962099126
159941,"/** 
 * Damages attacking creatures by a creature that blocked several ones Damages only attackers as blocker was damage in either   {@link #singleBlockerDamage} or {@link #multiBlockerDamage}. Handles abilities like ""{this} an block any number of creatures."".
 * @param first
 * @param game
 */
private void multiAttackerDamage(boolean first,Game game){
  Permanent blocker=game.getPermanent(blockers.get(0));
  if (blocker == null) {
    return;
  }
  Player player=game.getPlayer(blocker.getControllerId());
  int damage=blocker.getPower().getValue();
  if (canDamage(blocker,first)) {
    Map<UUID,Integer> assigned=new HashMap<UUID,Integer>();
    for (    UUID attackerId : attackerOrder) {
      Permanent attacker=game.getPermanent(attackerId);
      int lethalDamage;
      if (blocker.getAbilities().containsKey(DeathtouchAbility.getInstance().getId()))       lethalDamage=1;
 else       lethalDamage=attacker.getToughness().getValue() - attacker.getDamage();
      if (lethalDamage >= damage) {
        assigned.put(attackerId,damage);
        break;
      }
      int damageAssigned=player.getAmount(lethalDamage,damage,""String_Node_Str"" + attacker.getName(),game);
      assigned.put(attackerId,damageAssigned);
      damage-=damageAssigned;
    }
    for (    Map.Entry<UUID,Integer> entry : assigned.entrySet()) {
      Permanent attacker=game.getPermanent(entry.getKey());
      attacker.markDamage(entry.getValue(),blocker.getId(),game,true,true);
    }
  }
}","/** 
 * Damages attacking creatures by a creature that blocked several ones Damages only attackers as blocker was damage in either   {@link #singleBlockerDamage} or {@link #multiBlockerDamage}. Handles abilities like ""{this} an block any number of creatures."".
 * @param first
 * @param game
 */
private void multiAttackerDamage(boolean first,Game game){
  Permanent blocker=game.getPermanent(blockers.get(0));
  if (blocker == null) {
    return;
  }
  Player player=game.getPlayer(blocker.getControllerId());
  int damage=blocker.getPower().getValue();
  if (canDamage(blocker,first)) {
    Map<UUID,Integer> assigned=new HashMap<UUID,Integer>();
    for (    UUID attackerId : attackerOrder) {
      Permanent attacker=game.getPermanent(attackerId);
      int lethalDamage;
      if (blocker.getAbilities().containsKey(DeathtouchAbility.getInstance().getId())) {
        lethalDamage=1;
      }
 else {
        lethalDamage=attacker.getToughness().getValue() - attacker.getDamage();
      }
      if (lethalDamage >= damage) {
        assigned.put(attackerId,damage);
        break;
      }
      int damageAssigned=player.getAmount(lethalDamage,damage,""String_Node_Str"" + attacker.getName(),game);
      assigned.put(attackerId,damageAssigned);
      damage-=damageAssigned;
    }
    for (    Map.Entry<UUID,Integer> entry : assigned.entrySet()) {
      Permanent attacker=game.getPermanent(entry.getKey());
      attacker.markDamage(entry.getValue(),blocker.getId(),game,true,true);
    }
  }
}",0.989247311827957
159942,"private void unblockedDamage(boolean first,Game game){
  for (  UUID attackerId : attackers) {
    Permanent attacker=game.getPermanent(attackerId);
    if (canDamage(attacker,first)) {
      if (!blocked || hasTrample(attacker))       defenderDamage(attacker,attacker.getPower().getValue(),game);
    }
  }
}","private void unblockedDamage(boolean first,Game game){
  for (  UUID attackerId : attackers) {
    Permanent attacker=game.getPermanent(attackerId);
    if (canDamage(attacker,first)) {
      if (!blocked || hasTrample(attacker)) {
        defenderDamage(attacker,attacker.getPower().getValue(),game);
      }
    }
  }
}",0.9809523809523808
159943,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (super.applies(event,source,game)) {
    DamageEvent damageEvent=(DamageEvent)event;
    if (event.getTargetId().equals(source.getSourceId()) && damageEvent.isCombatDamage()) {
      if (game.getState().getCombat().getAttackers().contains(source.getSourceId())) {
        return true;
      }
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (super.applies(event,source,game)) {
    DamageEvent damageEvent=(DamageEvent)event;
    if (event.getTargetId().equals(source.getSourceId()) && damageEvent.isCombatDamage()) {
      Permanent sourcePermanent=game.getPermanent(source.getSourceId());
      if (sourcePermanent != null && sourcePermanent.isAttacking()) {
        return true;
      }
    }
  }
  return false;
}",0.7808857808857809
159944,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    player.drawCards(1,game);
    Target target=new TargetCardInHand(new FilterCard(""String_Node_Str""));
    target.setRequired(true);
    if (player.chooseTarget(outcome,target,source,game)) {
      Card card=game.getCard(target.getFirstTarget());
      Card sourceCard=game.getCard(source.getSourceId());
      if (card != null && sourceCard != null) {
        card.setFaceDown(true);
        UUID exileId=UUID.fromString(new StringBuilder(sourceCard.getId().toString()).append(sourceCard.getZoneChangeCounter()).toString());
        return card.moveToExile(exileId,new StringBuilder(sourceCard.getName()).append(""String_Node_Str"").append(sourceCard.getZoneChangeCounter()).append(""String_Node_Str"").toString(),source.getSourceId(),game);
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    player.drawCards(1,game);
    Target target=new TargetCardInHand(new FilterCard(""String_Node_Str""));
    target.setRequired(true);
    if (player.chooseTarget(outcome,target,source,game)) {
      Card card=game.getCard(target.getFirstTarget());
      Card sourceCard=game.getCard(source.getSourceId());
      if (card != null && sourceCard != null) {
        card.setFaceDown(true);
        UUID exileId=(UUID)game.getState().getValue(new StringBuilder(""String_Node_Str"").append(source.getSourceId()).append(sourceCard.getZoneChangeCounter()).toString());
        if (exileId == null) {
          exileId=UUID.randomUUID();
          game.getState().setValue(new StringBuilder(""String_Node_Str"").append(source.getSourceId()).append(sourceCard.getZoneChangeCounter()).toString(),exileId);
        }
        return card.moveToExile(exileId,new StringBuilder(sourceCard.getName()).append(""String_Node_Str"").append(sourceCard.getZoneChangeCounter()).append(""String_Node_Str"").toString(),source.getSourceId(),game);
      }
    }
  }
  return false;
}",0.8347578347578347
159945,"@Override public boolean canTarget(UUID id,Ability source,Game game){
  Card card=game.getCard(id);
  if (card != null && game.getState().getZone(card.getId()) == Zone.EXILED) {
    ExileZone exile=null;
    Card sourceCard=game.getCard(source.getSourceId());
    if (sourceCard != null) {
      UUID exileId=UUID.fromString(new StringBuilder(sourceCard.getId().toString()).append(sourceCard.getZoneChangeCounter()).toString());
      exile=game.getExile().getExileZone(exileId);
    }
    if (exile != null && exile.contains(id)) {
      return filter.match(card,source.getControllerId(),game);
    }
  }
  return false;
}","@Override public boolean canTarget(UUID id,Ability source,Game game){
  Card card=game.getCard(id);
  if (card != null && game.getState().getZone(card.getId()) == Zone.EXILED) {
    ExileZone exile=null;
    Card sourceCard=game.getCard(source.getSourceId());
    if (sourceCard != null) {
      UUID exileId=(UUID)game.getState().getValue(new StringBuilder(""String_Node_Str"").append(source.getSourceId()).append(sourceCard.getZoneChangeCounter()).toString());
      exile=game.getExile().getExileZone(exileId);
    }
    if (exile != null && exile.contains(id)) {
      return filter.match(card,source.getControllerId(),game);
    }
  }
  return false;
}",0.9123630672926448
159946,"@Override public Set<UUID> possibleTargets(UUID sourceId,UUID sourceControllerId,Game game){
  Set<UUID> possibleTargets=new HashSet<UUID>();
  Card sourceCard=game.getCard(sourceId);
  if (sourceCard != null) {
    UUID exileId=UUID.fromString(new StringBuilder(sourceCard.getId().toString()).append(sourceCard.getZoneChangeCounter()).toString());
    ExileZone exile=game.getExile().getExileZone(exileId);
    if (exile != null && exile.size() > 0) {
      possibleTargets.addAll(exile);
    }
  }
  return possibleTargets;
}","@Override public Set<UUID> possibleTargets(UUID sourceId,UUID sourceControllerId,Game game){
  Set<UUID> possibleTargets=new HashSet<UUID>();
  Card sourceCard=game.getCard(sourceId);
  if (sourceCard != null) {
    UUID exileId=(UUID)game.getState().getValue(new StringBuilder(""String_Node_Str"").append(sourceId).append(sourceCard.getZoneChangeCounter()).toString());
    ExileZone exile=game.getExile().getExileZone(exileId);
    if (exile != null && exile.size() > 0) {
      possibleTargets.addAll(exile);
    }
  }
  return possibleTargets;
}",0.9013035381750466
159947,"@Override public boolean canChoose(UUID sourceId,UUID sourceControllerId,Game game){
  Card sourceCard=game.getCard(sourceId);
  if (sourceCard != null) {
    UUID exileId=UUID.fromString(new StringBuilder(sourceCard.getId().toString()).append(sourceCard.getZoneChangeCounter()).toString());
    ExileZone exile=game.getExile().getExileZone(exileId);
    if (exile != null && exile.size() > 0) {
      return true;
    }
  }
  return false;
}","@Override public boolean canChoose(UUID sourceId,UUID sourceControllerId,Game game){
  Card sourceCard=game.getCard(sourceId);
  if (sourceCard != null) {
    UUID exileId=(UUID)game.getState().getValue(new StringBuilder(""String_Node_Str"").append(sourceId).append(sourceCard.getZoneChangeCounter()).toString());
    ExileZone exile=game.getExile().getExileZone(exileId);
    if (exile != null && exile.size() > 0) {
      return true;
    }
  }
  return false;
}",0.90929203539823
159948,"@Override public boolean applies(UUID sourceId,Ability source,Game game){
  Card card=game.getCard(sourceId);
  if (card != null && game.getState().getZone(card.getId()) == Zone.EXILED) {
    Card sourceCard=game.getCard(source.getSourceId());
    UUID exileId=UUID.fromString(new StringBuilder(sourceCard.getId().toString()).append(sourceCard.getZoneChangeCounter()).toString());
    ExileZone zone=game.getExile().getExileZone(exileId);
    if (zone != null && zone.contains(card.getId())) {
      if (card.getCardType().contains(CardType.INSTANT) || game.canPlaySorcery(source.getControllerId())) {
        card.setControllerId(source.getControllerId());
        return true;
      }
    }
  }
  return false;
}","@Override public boolean applies(UUID sourceId,Ability source,Game game){
  Card card=game.getCard(sourceId);
  if (card != null && game.getState().getZone(card.getId()) == Zone.EXILED) {
    Card sourceCard=game.getCard(source.getSourceId());
    UUID exileId=(UUID)game.getState().getValue(new StringBuilder(""String_Node_Str"").append(source.getSourceId()).append(sourceCard.getZoneChangeCounter()).toString());
    ExileZone zone=game.getExile().getExileZone(exileId);
    if (zone != null && zone.contains(card.getId())) {
      if (card.getCardType().contains(CardType.INSTANT) || game.canPlaySorcery(source.getControllerId())) {
        card.setControllerId(source.getControllerId());
        return true;
      }
    }
  }
  return false;
}",0.9273972602739726
159949,"@Override public boolean activate(Game game,boolean noMana){
  if (!modes.choose(game,this)) {
    return false;
  }
  Card card=game.getCard(sourceId);
  if (card != null) {
    card.adjustChoices(this,game);
  }
  if (getChoices().size() > 0 && getChoices().choose(game,this) == false) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  if (card != null) {
    for (    Ability ability : card.getAbilities()) {
      if (ability instanceof OptionalAdditionalSourceCosts) {
        ((OptionalAdditionalSourceCosts)ability).addOptionalAdditionalCosts(this,game);
      }
    }
  }
  if (game.getPlayer(this.controllerId).isHuman()) {
    VariableManaCost variableManaCost=null;
    for (    ManaCost cost : manaCostsToPay) {
      if (cost instanceof VariableManaCost && !cost.isPaid()) {
        variableManaCost=(VariableManaCost)cost;
        break;
      }
    }
    if (variableManaCost != null) {
      int amount=game.getPlayer(this.controllerId).getAmount(variableManaCost.getMinX(),Integer.MAX_VALUE,""String_Node_Str"" + variableManaCost.getText(),game);
      game.informPlayers(new StringBuilder(game.getPlayer(this.controllerId).getName()).append(""String_Node_Str"").append(amount).append(""String_Node_Str"").append(variableManaCost.getText()).toString());
      amount*=variableManaCost.getMultiplier();
      manaCostsToPay.add(new ManaCostsImpl(new StringBuilder(""String_Node_Str"").append(amount).append(""String_Node_Str"").toString()));
      manaCostsToPay.setX(amount);
      variableManaCost.setPaid();
    }
  }
  if (card != null) {
    card.adjustTargets(this,game);
  }
  if (getTargets().size() > 0 && getTargets().chooseTargets(getEffects().get(0).getOutcome(),this.controllerId,this,game) == false) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  for (  Cost cost : optionalCosts) {
    if (cost instanceof ManaCost) {
      cost.clearPaid();
      if (game.getPlayer(this.controllerId).chooseUse(Outcome.Benefit,""String_Node_Str"" + cost.getText() + ""String_Node_Str"",game)) {
        manaCostsToPay.add((ManaCost)cost);
      }
    }
  }
  if (card != null) {
    card.adjustCosts(this,game);
    for (    Ability ability : card.getAbilities()) {
      if (ability instanceof AdjustingSourceCosts) {
        ((AdjustingSourceCosts)ability).adjustCosts(this,game);
      }
    }
  }
  if (this instanceof ManaAbility && !costs.pay(this,game,sourceId,controllerId,noMana)) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  if (!useAlternativeCost(game)) {
    game.getContinuousEffects().costModification(this,game);
    if (!manaCostsToPay.pay(this,game,sourceId,controllerId,noMana)) {
      logger.debug(""String_Node_Str"");
      return false;
    }
  }
  UUID activatorId=controllerId;
  if (this instanceof ActivatedAbilityImpl) {
    activatorId=((ActivatedAbilityImpl)this).getActivatorId();
  }
  if (!costs.pay(this,game,sourceId,activatorId,noMana)) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  return true;
}","@Override public boolean activate(Game game,boolean noMana){
  if (!modes.choose(game,this)) {
    return false;
  }
  Card card=game.getCard(sourceId);
  if (card != null) {
    card.adjustChoices(this,game);
  }
  if (getChoices().size() > 0 && getChoices().choose(game,this) == false) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  if (card != null) {
    for (    Ability ability : card.getAbilities()) {
      if (ability instanceof OptionalAdditionalSourceCosts) {
        ((OptionalAdditionalSourceCosts)ability).addOptionalAdditionalCosts(this,game);
      }
    }
  }
  if (game.getPlayer(this.controllerId).isHuman()) {
    VariableManaCost variableManaCost=null;
    for (    ManaCost cost : manaCostsToPay) {
      if (cost instanceof VariableManaCost && !cost.isPaid()) {
        variableManaCost=(VariableManaCost)cost;
        break;
      }
    }
    if (variableManaCost != null) {
      int amount=game.getPlayer(this.controllerId).getAmount(variableManaCost.getMinX(),Integer.MAX_VALUE,""String_Node_Str"" + variableManaCost.getText(),game);
      game.informPlayers(new StringBuilder(game.getPlayer(this.controllerId).getName()).append(""String_Node_Str"").append(amount).append(""String_Node_Str"").append(variableManaCost.getText()).toString());
      amount*=variableManaCost.getMultiplier();
      manaCostsToPay.add(new ManaCostsImpl(new StringBuilder(""String_Node_Str"").append(amount).append(""String_Node_Str"").toString()));
      manaCostsToPay.setX(amount);
      variableManaCost.setPaid();
    }
  }
  if (card != null) {
    card.adjustTargets(this,game);
  }
  if (getTargets().size() > 0 && getTargets().chooseTargets(getEffects().get(0).getOutcome(),this.controllerId,this,game) == false) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  for (  Cost cost : optionalCosts) {
    if (cost instanceof ManaCost) {
      cost.clearPaid();
      if (game.getPlayer(this.controllerId).chooseUse(Outcome.Benefit,""String_Node_Str"" + cost.getText() + ""String_Node_Str"",game)) {
        manaCostsToPay.add((ManaCost)cost);
      }
    }
  }
  if (card != null) {
    card.adjustCosts(this,game);
    for (    Ability ability : card.getAbilities()) {
      if (ability instanceof AdjustingSourceCosts) {
        ((AdjustingSourceCosts)ability).adjustCosts(this,game);
      }
    }
  }
  if (this instanceof ManaAbility && !costs.pay(this,game,sourceId,controllerId,noMana)) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  if (!useAlternativeCost(game)) {
    game.getContinuousEffects().costModification(this,game);
    if (!manaCostsToPay.pay(this,game,sourceId,controllerId,noMana)) {
      logger.debug(""String_Node_Str"");
      return false;
    }
  }
  UUID activatorId=controllerId;
  if ((this instanceof ActivatedAbilityImpl) && ((ActivatedAbilityImpl)this).getActivatorId() != null) {
    activatorId=((ActivatedAbilityImpl)this).getActivatorId();
  }
  if (!costs.pay(this,game,sourceId,activatorId,noMana)) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  return true;
}",0.9843104872006606
159950,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == EventType.DRAW_STEP_PRE) {
    Permanent enchantment=game.getPermanent(this.sourceId);
    if (enchantment != null && enchantment.getAttachedTo() != null) {
      Player player=game.getPlayer(enchantment.getAttachedTo());
      if (player != null && game.getActivePlayerId().equals(player.getId())) {
        this.getEffects().get(0).setTargetPointer(new FixedTarget(player.getId()));
        return true;
      }
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == EventType.UPKEEP_STEP_PRE) {
    Permanent enchantment=game.getPermanent(this.sourceId);
    if (enchantment != null && enchantment.getAttachedTo() != null) {
      Player player=game.getPlayer(enchantment.getAttachedTo());
      if (player != null && game.getActivePlayerId().equals(player.getId())) {
        this.getEffects().get(0).setTargetPointer(new FixedTarget(player.getId()));
        return true;
      }
    }
  }
  return false;
}",0.9906191369606004
159951,"private void handleError(Exception ex){
  logger.fatal(""String_Node_Str"",ex);
  JOptionPane.showMessageDialog(MageFrame.getDesktop(),""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}","private void handleError(Exception ex){
  logger.fatal(""String_Node_Str"",ex);
  MageFrame.getInstance().showErrorDialog(""String_Node_Str"",ex.getMessage());
}",0.6816901408450704
159952,"@Override public boolean joinTable(UUID roomId,UUID tableId,String playerName,String playerType,int skill,DeckCardLists deckList){
  try {
    if (isConnected())     return server.joinTable(sessionId,roomId,tableId,playerName,playerType,skill,deckList);
  }
 catch (  GameException ex) {
    handleGameException(ex);
  }
catch (  MageException ex) {
    handleMageException(ex);
  }
catch (  Throwable t) {
    handleThrowable(t);
  }
  return false;
}","@Override public boolean joinTable(UUID roomId,UUID tableId,String playerName,String playerType,int skill,DeckCardLists deckList){
  try {
    if (isConnected())     return server.joinTable(sessionId,roomId,tableId,playerName,playerType,skill,deckList);
  }
 catch (  InvalidDeckException iex) {
    handleInvalidDeckException(iex);
  }
catch (  GameException ex) {
    handleGameException(ex);
  }
catch (  MageException ex) {
    handleMageException(ex);
  }
catch (  Throwable t) {
    handleThrowable(t);
  }
  return false;
}",0.920570264765784
159953,"private void handleMageException(MageException ex){
  logger.fatal(""String_Node_Str"",ex);
}","private void handleMageException(MageException ex){
  logger.fatal(""String_Node_Str"",ex);
  client.showError(ex.getMessage());
}",0.8310502283105022
159954,"private JPanel getArrowsPanel(UUID gameId){
  if (!arrowPanels.containsKey(gameId)) {
    JPanel arrowPanel=new JPanel();
    arrowPanel.setVisible(true);
    arrowPanel.setOpaque(false);
    arrowPanel.setLayout(null);
    arrowPanel.setBorder(BorderFactory.createLineBorder(Color.blue));
    arrowPanel.setSize(currentWidth,currentHeight);
    arrowPanels.put(gameId,arrowPanel);
    getArrowsManagerPanel().add(arrowPanel);
    return arrowPanel;
  }
  return arrowPanels.get(gameId);
}","private JPanel getArrowsPanel(UUID gameId){
  if (!arrowPanels.containsKey(gameId)) {
    JPanel arrowPanel=new JPanel();
    arrowPanel.setVisible(true);
    arrowPanel.setOpaque(false);
    arrowPanel.setLayout(null);
    arrowPanel.setSize(currentWidth,currentHeight);
    arrowPanels.put(gameId,arrowPanel);
    getArrowsManagerPanel().add(arrowPanel);
    return arrowPanel;
  }
  return arrowPanels.get(gameId);
}",0.922907488986784
159955,"@Override public SerraAvengerCost copy(){
  return new SerraAvengerCost(this);
}","@Override public CantCastSerraAvengerEffect copy(){
  return new CantCastSerraAvengerEffect(this);
}",0.8222222222222222
159956,"private void drawArrowsForEnchantPlayers(TransferData data,Point parentPoint){
  for (  PlayAreaPanel pa : MageFrame.getGame(data.gameId).getPlayers().values()) {
    PlayerPanelExt playAreaPanel=pa.getPlayerPanel();
    if (playAreaPanel != null && playAreaPanel.getPlayer() != null && playAreaPanel.getPlayer().hasAttachments()) {
      Point me=new Point(data.locationOnScreen);
      me.translate(-parentPoint.x,-parentPoint.y);
      for (      UUID attachmentId : playAreaPanel.getPlayer().getAttachments()) {
        if (attachmentId.equals(data.card.getId())) {
          Point player=pa.getLocationOnScreen();
          player.translate(-parentPoint.x,-parentPoint.y);
          ArrowBuilder.getBuilder().addArrow(data.gameId,(int)me.getX() + 35,(int)me.getY(),(int)player.getX() + 40,(int)player.getY() - 40,Color.magenta,ArrowBuilder.Type.ENCHANT_PLAYERS);
        }
      }
    }
  }
}","private void drawArrowsForEnchantPlayers(TransferData data,Point parentPoint){
  if (data.gameId != null) {
    for (    PlayAreaPanel pa : MageFrame.getGame(data.gameId).getPlayers().values()) {
      PlayerPanelExt playAreaPanel=pa.getPlayerPanel();
      if (playAreaPanel != null && playAreaPanel.getPlayer() != null && playAreaPanel.getPlayer().hasAttachments()) {
        Point me=new Point(data.locationOnScreen);
        me.translate(-parentPoint.x,-parentPoint.y);
        for (        UUID attachmentId : playAreaPanel.getPlayer().getAttachments()) {
          if (attachmentId.equals(data.card.getId())) {
            Point player=pa.getLocationOnScreen();
            player.translate(-parentPoint.x,-parentPoint.y);
            ArrowBuilder.getBuilder().addArrow(data.gameId,(int)me.getX() + 35,(int)me.getY(),(int)player.getX() + 40,(int)player.getY() - 40,Color.magenta,ArrowBuilder.Type.ENCHANT_PLAYERS);
          }
        }
      }
    }
  }
}",0.9607315761161916
159957,"@Override public boolean apply(Game game,Ability source){
  int damage=source.getManaCostsToPay().getX();
  if (damage > 0) {
    Permanent permanent=game.getPermanent(getTargetPointer().getFirst(game,source));
    if (permanent != null) {
      permanent.damage(damage,source.getSourceId(),game,true,false);
    }
 else {
      Player player=game.getPlayer(getTargetPointer().getFirst(game,source));
      if (player != null) {
        player.damage(damage,source.getSourceId(),game,false,true);
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  int amount=source.getManaCostsToPay().getX();
  if (amount > 0) {
    Permanent permanent=game.getPermanent(getTargetPointer().getFirst(game,source));
    if (permanent != null) {
      permanent.damage(amount,source.getSourceId(),game,true,false);
    }
 else {
      Player player=game.getPlayer(getTargetPointer().getFirst(game,source));
      if (player != null) {
        player.damage(amount,source.getSourceId(),game,false,true);
      }
 else {
        return false;
      }
    }
    Player controller=game.getPlayer(source.getSourceId());
    if (controller != null) {
      controller.gainLife(amount,game);
    }
 else {
      return false;
    }
  }
  return true;
}",0.7701863354037267
159958,"/** 
 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
 */
@SuppressWarnings(""String_Node_Str"") private void initComponents(){
  panelBackground=new MageRoundPane();
  panelBackground.setPreferredSize(new Dimension(PANEL_WIDTH - 2,PANEL_HEIGHT));
  Rectangle r=new Rectangle(80,80);
  lifeLabel=new JLabel();
  handLabel=new JLabel();
  poisonLabel=new JLabel();
  libraryLabel=new JLabel();
  setOpaque(false);
  panelBackground.setXOffset(3);
  panelBackground.setYOffset(3);
  panelBackground.setVisible(true);
  Image image=ImageHelper.getImageFromResources(""String_Node_Str"");
  topCardPanel=Plugins.getInstance().getMageCard(new CardView(CardRepository.instance.findCard(""String_Node_Str"").getCard()),bigCard,topCardDimension,gameId,true);
  topCardPanel.setVisible(false);
  panelBackground.add(topCardPanel);
  BufferedImage resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  avatar=new HoverButton(""String_Node_Str"",resized,resized,resized,r);
  avatar.setObserver(new Command(){
    @Override public void execute(){
      session.sendPlayerUUID(gameId,playerId);
    }
  }
);
  avatar.setOnHover(new Command(){
    @Override public void execute(){
    }
  }
);
  r=new Rectangle(18,18);
  lifeLabel.setToolTipText(""String_Node_Str"");
  Image imageLife=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedLife=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageLife,BufferedImage.TYPE_INT_ARGB),r);
  life=new ImagePanel(resizedLife,ImagePanel.ACTUAL);
  life.setToolTipText(""String_Node_Str"");
  life.setOpaque(false);
  r=new Rectangle(18,18);
  handLabel.setToolTipText(""String_Node_Str"");
  Image imageHand=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedHand=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageHand,BufferedImage.TYPE_INT_ARGB),r);
  hand=new ImagePanel(resizedHand,ImagePanel.ACTUAL);
  hand.setToolTipText(""String_Node_Str"");
  hand.setOpaque(false);
  poisonLabel.setText(""String_Node_Str"");
  r=new Rectangle(14,14);
  poisonLabel.setToolTipText(""String_Node_Str"");
  Image imagePoison=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedPoison=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imagePoison,BufferedImage.TYPE_INT_ARGB),r);
  poison=new ImagePanel(resizedPoison,ImagePanel.ACTUAL);
  poison.setToolTipText(""String_Node_Str"");
  poison.setOpaque(false);
  r=new Rectangle(19,19);
  libraryLabel.setToolTipText(""String_Node_Str"");
  Image imageLibrary=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedLibrary=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageLibrary,BufferedImage.TYPE_INT_ARGB),r);
  library=new ImagePanel(resizedLibrary,ImagePanel.ACTUAL);
  library.setToolTipText(""String_Node_Str"");
  library.setOpaque(false);
  graveLabel=new JLabel();
  r=new Rectangle(21,21);
  graveLabel.setToolTipText(""String_Node_Str"");
  Image imageGrave=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedGrave=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageGrave,BufferedImage.TYPE_INT_ARGB),r);
  grave=new HoverButton(null,resizedGrave,resizedGrave,resizedGrave,r);
  grave.setToolTipText(""String_Node_Str"");
  grave.setOpaque(false);
  grave.setObserver(new Command(){
    @Override public void execute(){
      btnGraveActionPerformed(null);
    }
  }
);
  r=new Rectangle(25,21);
  image=ImageHelper.getImageFromResources(""String_Node_Str"");
  resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  cheat=new JButton();
  cheat.setIcon(new ImageIcon(resized));
  cheat.setToolTipText(""String_Node_Str"");
  cheat.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      btnCheatActionPerformed(e);
    }
  }
);
  zonesPanel=new JPanel();
  zonesPanel.setPreferredSize(new Dimension(100,25));
  zonesPanel.setSize(100,25);
  zonesPanel.setLayout(null);
  image=ImageHelper.getImageFromResources(""String_Node_Str"");
  r=new Rectangle(21,21);
  resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  commandZone=new HoverButton(null,resized,resized,resized,r);
  commandZone.setToolTipText(""String_Node_Str"");
  commandZone.setOpaque(false);
  commandZone.setObserver(new Command(){
    @Override public void execute(){
      btnExileZoneActionPerformed(null);
    }
  }
);
  commandZone.setBounds(0,0,21,21);
  zonesPanel.add(commandZone);
  btnPlayer=new JButton();
  btnPlayer.setText(""String_Node_Str"");
  btnPlayer.setVisible(false);
  btnPlayer.setToolTipText(""String_Node_Str"");
  btnPlayer.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      session.sendPlayerUUID(gameId,playerId);
    }
  }
);
  BufferedImage imageManaW=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaW=new ImagePanel(imageManaW,ImagePanel.ACTUAL);
  manaW.setOpaque(false);
  JLabel manaCountLabelW=new JLabel();
  manaCountLabelW.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelW);
  BufferedImage imageManaU=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaU=new ImagePanel(imageManaU,ImagePanel.ACTUAL);
  manaU.setOpaque(false);
  JLabel manaCountLabelU=new JLabel();
  manaCountLabelU.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelU);
  BufferedImage imageManaB=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaB=new ImagePanel(imageManaB,ImagePanel.ACTUAL);
  manaB.setOpaque(false);
  JLabel manaCountLabelB=new JLabel();
  manaCountLabelB.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelB);
  BufferedImage imageManaR=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaR=new ImagePanel(imageManaR,ImagePanel.ACTUAL);
  manaR.setOpaque(false);
  JLabel manaCountLabelR=new JLabel();
  manaCountLabelR.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelR);
  BufferedImage imageManaG=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaG=new ImagePanel(imageManaG,ImagePanel.ACTUAL);
  manaG.setOpaque(false);
  JLabel manaCountLabelG=new JLabel();
  manaCountLabelG.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelG);
  BufferedImage imageManaX=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaX=new ImagePanel(imageManaX,ImagePanel.ACTUAL);
  manaX.setOpaque(false);
  JLabel manaCountLabelX=new JLabel();
  manaCountLabelX.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelX);
  GroupLayout gl_panelBackground=new GroupLayout(panelBackground);
  gl_panelBackground.setHorizontalGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(9).addComponent(life,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE).addGap(3).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(hand,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addComponent(lifeLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(4).addComponent(handLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(9).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(3).addComponent(poison,GroupLayout.PREFERRED_SIZE,14,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(manaW,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(manaU,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(manaB,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addComponent(grave,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(library,GroupLayout.PREFERRED_SIZE,19,GroupLayout.PREFERRED_SIZE)).addComponent(poisonLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(20).addComponent(manaR,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(manaCountLabelW,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGap(3).addComponent(manaCountLabelR,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(manaCountLabelB,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(19).addComponent(manaX,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE))).addGap(5).addComponent(manaCountLabelX,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(20).addComponent(manaG,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(40).addComponent(manaCountLabelG,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(40).addComponent(libraryLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(cheat,GroupLayout.PREFERRED_SIZE,25,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(5).addComponent(graveLabel,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(manaCountLabelU,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)))).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(btnPlayer,Alignment.TRAILING,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(avatar,Alignment.TRAILING,GroupLayout.DEFAULT_SIZE,80,Short.MAX_VALUE)).addGap(14)).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addComponent(zonesPanel,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE).addGap(14)));
  gl_panelBackground.setVerticalGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addComponent(avatar,GroupLayout.PREFERRED_SIZE,80,GroupLayout.PREFERRED_SIZE).addPreferredGap(ComponentPlacement.RELATED).addComponent(btnPlayer).addPreferredGap(ComponentPlacement.RELATED).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(life,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(hand,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addComponent(lifeLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addComponent(handLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(1).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(4).addComponent(poison,GroupLayout.PREFERRED_SIZE,14,GroupLayout.PREFERRED_SIZE).addGap(4).addComponent(manaW,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(2).addComponent(manaU,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(2).addComponent(manaB,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(5).addComponent(grave,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(library,GroupLayout.PREFERRED_SIZE,19,GroupLayout.PREFERRED_SIZE)).addComponent(poisonLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(2).addComponent(manaR,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(14).addComponent(manaCountLabelW,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(14).addComponent(manaCountLabelR,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGap(4).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(manaCountLabelB,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(8).addComponent(manaX,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addComponent(manaCountLabelX,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGroup(gl_panelBackground.createSequentialGroup().addGap(39).addComponent(manaG,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(31).addComponent(manaCountLabelG,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addComponent(libraryLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(76).addComponent(cheat,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(76).addComponent(graveLabel,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(31).addComponent(manaCountLabelU,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addPreferredGap(ComponentPlacement.RELATED).addComponent(zonesPanel,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  panelBackground.setLayout(gl_panelBackground);
  GroupLayout groupLayout=new GroupLayout(this);
  groupLayout.setHorizontalGroup(groupLayout.createParallelGroup(Alignment.LEADING).addGroup(groupLayout.createSequentialGroup().addComponent(panelBackground,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  groupLayout.setVerticalGroup(groupLayout.createParallelGroup(Alignment.LEADING).addGroup(groupLayout.createSequentialGroup().addComponent(panelBackground,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  setLayout(groupLayout);
}","/** 
 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
 */
@SuppressWarnings(""String_Node_Str"") private void initComponents(){
  panelBackground=new MageRoundPane();
  panelBackground.setPreferredSize(new Dimension(PANEL_WIDTH - 2,PANEL_HEIGHT));
  Rectangle r=new Rectangle(80,80);
  lifeLabel=new JLabel();
  handLabel=new JLabel();
  poisonLabel=new JLabel();
  libraryLabel=new JLabel();
  setOpaque(false);
  panelBackground.setXOffset(3);
  panelBackground.setYOffset(3);
  panelBackground.setVisible(true);
  Image image=ImageHelper.getImageFromResources(""String_Node_Str"");
  topCardPanel=Plugins.getInstance().getMageCard(new CardView(CardRepository.instance.findCard(""String_Node_Str"").getCard()),bigCard,topCardDimension,gameId,true);
  topCardPanel.setVisible(false);
  panelBackground.add(topCardPanel);
  BufferedImage resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  avatar=new HoverButton(""String_Node_Str"",resized,resized,resized,r);
  avatar.setObserver(new Command(){
    @Override public void execute(){
      session.sendPlayerUUID(gameId,playerId);
    }
  }
);
  r=new Rectangle(18,18);
  lifeLabel.setToolTipText(""String_Node_Str"");
  Image imageLife=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedLife=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageLife,BufferedImage.TYPE_INT_ARGB),r);
  life=new ImagePanel(resizedLife,ImagePanel.ACTUAL);
  life.setToolTipText(""String_Node_Str"");
  life.setOpaque(false);
  r=new Rectangle(18,18);
  handLabel.setToolTipText(""String_Node_Str"");
  Image imageHand=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedHand=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageHand,BufferedImage.TYPE_INT_ARGB),r);
  hand=new ImagePanel(resizedHand,ImagePanel.ACTUAL);
  hand.setToolTipText(""String_Node_Str"");
  hand.setOpaque(false);
  poisonLabel.setText(""String_Node_Str"");
  r=new Rectangle(14,14);
  poisonLabel.setToolTipText(""String_Node_Str"");
  Image imagePoison=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedPoison=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imagePoison,BufferedImage.TYPE_INT_ARGB),r);
  poison=new ImagePanel(resizedPoison,ImagePanel.ACTUAL);
  poison.setToolTipText(""String_Node_Str"");
  poison.setOpaque(false);
  r=new Rectangle(19,19);
  libraryLabel.setToolTipText(""String_Node_Str"");
  Image imageLibrary=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedLibrary=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageLibrary,BufferedImage.TYPE_INT_ARGB),r);
  library=new ImagePanel(resizedLibrary,ImagePanel.ACTUAL);
  library.setToolTipText(""String_Node_Str"");
  library.setOpaque(false);
  graveLabel=new JLabel();
  r=new Rectangle(21,21);
  graveLabel.setToolTipText(""String_Node_Str"");
  Image imageGrave=ImageHelper.getImageFromResources(""String_Node_Str"");
  BufferedImage resizedGrave=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(imageGrave,BufferedImage.TYPE_INT_ARGB),r);
  grave=new HoverButton(null,resizedGrave,resizedGrave,resizedGrave,r);
  grave.setToolTipText(""String_Node_Str"");
  grave.setOpaque(false);
  grave.setObserver(new Command(){
    @Override public void execute(){
      btnGraveActionPerformed(null);
    }
  }
);
  r=new Rectangle(25,21);
  image=ImageHelper.getImageFromResources(""String_Node_Str"");
  resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  cheat=new JButton();
  cheat.setIcon(new ImageIcon(resized));
  cheat.setToolTipText(""String_Node_Str"");
  cheat.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      btnCheatActionPerformed(e);
    }
  }
);
  zonesPanel=new JPanel();
  zonesPanel.setPreferredSize(new Dimension(100,25));
  zonesPanel.setSize(100,25);
  zonesPanel.setLayout(null);
  image=ImageHelper.getImageFromResources(""String_Node_Str"");
  r=new Rectangle(21,21);
  resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
  commandZone=new HoverButton(null,resized,resized,resized,r);
  commandZone.setToolTipText(""String_Node_Str"");
  commandZone.setOpaque(false);
  commandZone.setObserver(new Command(){
    @Override public void execute(){
      btnExileZoneActionPerformed(null);
    }
  }
);
  commandZone.setBounds(0,0,21,21);
  zonesPanel.add(commandZone);
  btnPlayer=new JButton();
  btnPlayer.setText(""String_Node_Str"");
  btnPlayer.setVisible(false);
  btnPlayer.setToolTipText(""String_Node_Str"");
  btnPlayer.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      session.sendPlayerUUID(gameId,playerId);
    }
  }
);
  BufferedImage imageManaW=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaW=new ImagePanel(imageManaW,ImagePanel.ACTUAL);
  manaW.setOpaque(false);
  JLabel manaCountLabelW=new JLabel();
  manaCountLabelW.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelW);
  BufferedImage imageManaU=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaU=new ImagePanel(imageManaU,ImagePanel.ACTUAL);
  manaU.setOpaque(false);
  JLabel manaCountLabelU=new JLabel();
  manaCountLabelU.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelU);
  BufferedImage imageManaB=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaB=new ImagePanel(imageManaB,ImagePanel.ACTUAL);
  manaB.setOpaque(false);
  JLabel manaCountLabelB=new JLabel();
  manaCountLabelB.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelB);
  BufferedImage imageManaR=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaR=new ImagePanel(imageManaR,ImagePanel.ACTUAL);
  manaR.setOpaque(false);
  JLabel manaCountLabelR=new JLabel();
  manaCountLabelR.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelR);
  BufferedImage imageManaG=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaG=new ImagePanel(imageManaG,ImagePanel.ACTUAL);
  manaG.setOpaque(false);
  JLabel manaCountLabelG=new JLabel();
  manaCountLabelG.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelG);
  BufferedImage imageManaX=ManaSymbols.getManaSymbolImageSmall(""String_Node_Str"");
  ImagePanel manaX=new ImagePanel(imageManaX,ImagePanel.ACTUAL);
  manaX.setOpaque(false);
  JLabel manaCountLabelX=new JLabel();
  manaCountLabelX.setText(""String_Node_Str"");
  manaLabels.put(""String_Node_Str"",manaCountLabelX);
  GroupLayout gl_panelBackground=new GroupLayout(panelBackground);
  gl_panelBackground.setHorizontalGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(9).addComponent(life,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE).addGap(3).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(hand,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addComponent(lifeLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(4).addComponent(handLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(9).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(3).addComponent(poison,GroupLayout.PREFERRED_SIZE,14,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(manaW,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(manaU,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(2).addComponent(manaB,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addComponent(grave,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(library,GroupLayout.PREFERRED_SIZE,19,GroupLayout.PREFERRED_SIZE)).addComponent(poisonLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(20).addComponent(manaR,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(manaCountLabelW,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGap(3).addComponent(manaCountLabelR,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(manaCountLabelB,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(19).addComponent(manaX,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE))).addGap(5).addComponent(manaCountLabelX,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(20).addComponent(manaG,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(40).addComponent(manaCountLabelG,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(40).addComponent(libraryLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(18).addComponent(cheat,GroupLayout.PREFERRED_SIZE,25,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(5).addComponent(graveLabel,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(manaCountLabelU,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)))).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(btnPlayer,Alignment.TRAILING,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(avatar,Alignment.TRAILING,GroupLayout.DEFAULT_SIZE,80,Short.MAX_VALUE)).addGap(14)).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addComponent(zonesPanel,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE).addGap(14)));
  gl_panelBackground.setVerticalGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(6).addComponent(avatar,GroupLayout.PREFERRED_SIZE,80,GroupLayout.PREFERRED_SIZE).addPreferredGap(ComponentPlacement.RELATED).addComponent(btnPlayer).addPreferredGap(ComponentPlacement.RELATED).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(life,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(hand,GroupLayout.PREFERRED_SIZE,18,GroupLayout.PREFERRED_SIZE)).addComponent(lifeLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addComponent(handLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(1).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(4).addComponent(poison,GroupLayout.PREFERRED_SIZE,14,GroupLayout.PREFERRED_SIZE).addGap(4).addComponent(manaW,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(2).addComponent(manaU,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(2).addComponent(manaB,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE).addGap(5).addComponent(grave,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addGroup(gl_panelBackground.createSequentialGroup().addGap(1).addComponent(library,GroupLayout.PREFERRED_SIZE,19,GroupLayout.PREFERRED_SIZE)).addComponent(poisonLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE)).addGap(2).addComponent(manaR,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(14).addComponent(manaCountLabelW,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(14).addComponent(manaCountLabelR,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGap(4).addGroup(gl_panelBackground.createParallelGroup(Alignment.LEADING).addComponent(manaCountLabelB,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(8).addComponent(manaX,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addComponent(manaCountLabelX,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addGroup(gl_panelBackground.createSequentialGroup().addGap(39).addComponent(manaG,GroupLayout.PREFERRED_SIZE,15,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(31).addComponent(manaCountLabelG,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE)).addComponent(libraryLabel,GroupLayout.PREFERRED_SIZE,20,GroupLayout.PREFERRED_SIZE).addGroup(gl_panelBackground.createSequentialGroup().addGap(76).addComponent(cheat,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(76).addComponent(graveLabel,GroupLayout.PREFERRED_SIZE,21,GroupLayout.PREFERRED_SIZE)).addGroup(gl_panelBackground.createSequentialGroup().addGap(31).addComponent(manaCountLabelU,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE))).addPreferredGap(ComponentPlacement.RELATED).addComponent(zonesPanel,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  panelBackground.setLayout(gl_panelBackground);
  GroupLayout groupLayout=new GroupLayout(this);
  groupLayout.setHorizontalGroup(groupLayout.createParallelGroup(Alignment.LEADING).addGroup(groupLayout.createSequentialGroup().addComponent(panelBackground,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  groupLayout.setVerticalGroup(groupLayout.createParallelGroup(Alignment.LEADING).addGroup(groupLayout.createSequentialGroup().addComponent(panelBackground,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE,GroupLayout.PREFERRED_SIZE)));
  setLayout(groupLayout);
}",0.9972144846796658
159959,"@Override public void paint(Graphics g){
  if (!displayEnabled) {
    return;
  }
  if (!isValid()) {
    super.validate();
  }
  Graphics2D g2d=(Graphics2D)g;
  if (transformAngle < 1) {
    float edgeOffset=(cardWidth + cardXOffset) / 2f;
    g2d.translate(edgeOffset * (1 - transformAngle),0);
    g2d.scale(transformAngle,1);
  }
  if (tappedAngle + flippedAngle > 0) {
    g2d=(Graphics2D)g2d.create();
    float edgeOffset=cardWidth / 2f;
    g2d.rotate(tappedAngle + flippedAngle,cardXOffset + edgeOffset,cardYOffset + cardHeight - edgeOffset);
  }
  super.paint(g2d);
}","@Override public void paint(Graphics g){
  if (!displayEnabled) {
    return;
  }
  if (!isValid()) {
    super.validate();
  }
  Graphics2D g2d=(Graphics2D)g;
  if (transformAngle < 1) {
    float edgeOffset=(cardWidth + cardXOffset) / 2f;
    g2d.translate(edgeOffset * (1 - transformAngle),0);
    g2d.scale(transformAngle,1);
  }
  if (tappedAngle + flippedAngle > 0) {
    g2d=(Graphics2D)g2d.create();
    float edgeOffset=cardWidth / 2f;
    double angle=tappedAngle + (Math.abs(flippedAngle - FLIPPED_ANGLE) < 0.001 ? 0 : flippedAngle);
    g2d.rotate(angle,cardXOffset + edgeOffset,cardYOffset + cardHeight - edgeOffset);
  }
  super.paint(g2d);
}",0.9051094890510948
159960,"@Override public Token apply(Card source){
  if (target == null)   throw new IllegalArgumentException(""String_Node_Str"");
  target.setName(source.getName());
  target.getColor().setColor(source.getColor());
  target.getManaCost().clear();
  target.getManaCost().add(source.getManaCost());
  target.getCardType().clear();
  for (  Constants.CardType type : source.getCardType()) {
    target.getCardType().add(type);
  }
  target.getSubtype().clear();
  for (  String type : source.getSubtype()) {
    target.getSubtype().add(type);
  }
  target.getSupertype().clear();
  for (  String type : source.getSupertype()) {
    target.getSupertype().add(type);
  }
  target.getAbilities().clear();
  for (  Ability ability0 : source.getAbilities()) {
    Ability ability=ability0.copy();
    ability.newId();
    ability.setSourceId(target.getId());
    target.addAbility(ability);
  }
  target.getPower().setValue(Integer.parseInt(source.getPower().toString()));
  target.getToughness().setValue(Integer.parseInt(source.getToughness().toString()));
  return target;
}","@Override public Token apply(Card source){
  if (target == null)   throw new IllegalArgumentException(""String_Node_Str"");
  target.setName(source.getName());
  target.getColor().setColor(source.getColor());
  target.getManaCost().clear();
  target.getManaCost().add(source.getManaCost());
  target.getCardType().clear();
  for (  Constants.CardType type : source.getCardType()) {
    target.getCardType().add(type);
  }
  target.getSubtype().clear();
  for (  String type : source.getSubtype()) {
    target.getSubtype().add(type);
  }
  target.getSupertype().clear();
  for (  String type : source.getSupertype()) {
    target.getSupertype().add(type);
  }
  target.getAbilities().clear();
  for (  Ability ability0 : source.getAbilities()) {
    Ability ability=ability0.copy();
    ability.newId();
    ability.setSourceId(target.getId());
    target.addAbility(ability);
  }
  target.getPower().initValue(Integer.parseInt(source.getPower().toString()));
  target.getToughness().initValue(Integer.parseInt(source.getToughness().toString()));
  return target;
}",0.995291902071563
159961,"@Override public boolean apply(Game game,Ability source){
  int value=amount.calculate(game,source);
  token.putOntoBattlefield(value,game,source.getSourceId(),source.getControllerId());
  return true;
}","@Override public boolean apply(Game game,Ability source){
  int value=amount.calculate(game,source);
  Token tokenCopy=token.copy();
  tokenCopy.getAbilities().newId();
  tokenCopy.putOntoBattlefield(value,game,source.getSourceId(),source.getControllerId());
  return true;
}",0.8284518828451883
159962,"public synchronized void updateGame(GameView game){
  if (playerId == null || game.getHand() == null) {
    this.handContainer.setVisible(false);
  }
 else {
    handCards.clear();
    handCards.put(YOUR_HAND,game.getHand());
    if (game.getOpponentHands() != null) {
      for (      Map.Entry<String,SimpleCardsView> hand : game.getOpponentHands().entrySet()) {
        handCards.put(hand.getKey(),hand.getValue());
      }
    }
    if (!handCards.containsKey(chosenHandKey)) {
      chosenHandKey=YOUR_HAND;
    }
    handContainer.loadCards(handCards.get(chosenHandKey),bigCard,gameId);
    hideAll();
    boolean previous=btnSwitchHands.isVisible();
    boolean visible=handCards.size() > 1;
    if (previous != visible) {
      btnSwitchHands.setVisible(visible);
      if (visible) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
  if (game.getPhase() != null) {
    this.txtPhase.setText(game.getPhase().toString());
  }
 else {
    this.txtPhase.setText(""String_Node_Str"");
  }
  updatePhases(game.getStep());
  if (game.getPhase() != null && game.getPhase().toString().equals(""String_Node_Str"") && game.getStep().toString().equals(""String_Node_Str"")) {
  }
  if (game.getStep() != null) {
    this.txtStep.setText(game.getStep().toString());
  }
 else {
    this.txtStep.setText(""String_Node_Str"");
  }
  this.txtActivePlayer.setText(game.getActivePlayerName());
  this.txtPriority.setText(game.getPriorityPlayerName());
  this.txtTurn.setText(Integer.toString(game.getTurn()));
  for (  PlayerView player : game.getPlayers()) {
    if (players.containsKey(player.getPlayerId())) {
      players.get(player.getPlayerId()).update(player);
    }
 else {
      logger.warn(""String_Node_Str"");
      logger.warn(""String_Node_Str"" + player.getPlayerId());
      logger.warn(""String_Node_Str"");
      for (      PlayAreaPanel p : players.values()) {
        logger.warn(""String_Node_Str"" + p);
      }
    }
  }
  GameManager.getInstance().setStackSize(game.getStack().size());
  displayStack(game,bigCard,feedbackPanel,gameId);
  for (  ExileView exile : game.getExile()) {
    if (!exiles.containsKey(exile.getId())) {
      ExileZoneDialog newExile=new ExileZoneDialog();
      exiles.put(exile.getId(),newExile);
      MageFrame.getDesktop().add(newExile,JLayeredPane.POPUP_LAYER);
      newExile.show();
    }
    exiles.get(exile.getId()).loadCards(exile,bigCard,gameId);
  }
  showRevealed(game);
  showLookedAt(game);
  if (game.getCombat().size() > 0) {
    CombatManager.getInstance().showCombat(game.getCombat(),gameId);
  }
 else {
    CombatManager.getInstance().hideCombat(gameId);
  }
  this.revalidate();
  this.repaint();
}","public synchronized void updateGame(GameView game){
  if (playerId == null || game.getHand() == null) {
    this.handContainer.setVisible(false);
  }
 else {
    handCards.clear();
    handCards.put(YOUR_HAND,game.getHand());
    if (game.getOpponentHands() != null) {
      for (      Map.Entry<String,SimpleCardsView> hand : game.getOpponentHands().entrySet()) {
        handCards.put(hand.getKey(),hand.getValue());
      }
    }
    if (!handCards.containsKey(chosenHandKey)) {
      chosenHandKey=YOUR_HAND;
    }
    handContainer.loadCards(handCards.get(chosenHandKey),bigCard,gameId);
    hideAll();
    boolean previous=btnSwitchHands.isVisible();
    boolean visible=handCards.size() > 1;
    if (previous != visible) {
      btnSwitchHands.setVisible(visible);
      if (visible) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
  if (game.getPhase() != null) {
    this.txtPhase.setText(game.getPhase().toString());
  }
 else {
    this.txtPhase.setText(""String_Node_Str"");
  }
  updatePhases(game.getStep());
  if (game.getPhase() != null && game.getPhase().toString().equals(""String_Node_Str"") && game.getStep().toString().equals(""String_Node_Str"")) {
  }
  if (game.getStep() != null) {
    this.txtStep.setText(game.getStep().toString());
  }
 else {
    this.txtStep.setText(""String_Node_Str"");
  }
  this.txtActivePlayer.setText(game.getActivePlayerName());
  this.txtPriority.setText(game.getPriorityPlayerName());
  this.txtTurn.setText(Integer.toString(game.getTurn()));
  for (  PlayerView player : game.getPlayers()) {
    if (players.containsKey(player.getPlayerId())) {
      players.get(player.getPlayerId()).update(player);
    }
 else {
      logger.warn(""String_Node_Str"");
      logger.warn(""String_Node_Str"" + player.getPlayerId());
      logger.warn(""String_Node_Str"");
      for (      PlayAreaPanel p : players.values()) {
        logger.warn(""String_Node_Str"" + p);
      }
    }
  }
  GameManager.getInstance().setStackSize(game.getStack().size());
  displayStack(game,bigCard,feedbackPanel,gameId);
  for (  ExileView exile : game.getExile()) {
    if (!exiles.containsKey(exile.getId())) {
      ExileZoneDialog newExile=new ExileZoneDialog();
      exiles.put(exile.getId(),newExile);
      MageFrame.getDesktop().add(newExile,JLayeredPane.MODAL_LAYER);
      newExile.show();
    }
    exiles.get(exile.getId()).loadCards(exile,bigCard,gameId);
  }
  showRevealed(game);
  showLookedAt(game);
  if (game.getCombat().size() > 0) {
    CombatManager.getInstance().showCombat(game.getCombat(),gameId);
  }
 else {
    CombatManager.getInstance().hideCombat(gameId);
  }
  this.revalidate();
  this.repaint();
}",0.9985507246376812
159963,"public synchronized void updateGame(GameView game){
  if (playerId == null || game.getHand() == null) {
    this.handContainer.setVisible(false);
  }
 else {
    handCards.clear();
    handCards.put(YOUR_HAND,game.getHand());
    if (game.getOpponentHands() != null) {
      for (      Map.Entry<String,SimpleCardsView> hand : game.getOpponentHands().entrySet()) {
        handCards.put(hand.getKey(),hand.getValue());
      }
    }
    if (!handCards.containsKey(chosenHandKey)) {
      chosenHandKey=YOUR_HAND;
    }
    handContainer.loadCards(handCards.get(chosenHandKey),bigCard,gameId);
    ActionCallback callback=Plugins.getInstance().getActionCallback();
    ((MageActionCallback)callback).hideAll(gameId);
    boolean previous=btnSwitchHands.isVisible();
    boolean visible=handCards.size() > 1;
    if (previous != visible) {
      btnSwitchHands.setVisible(visible);
      if (visible) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
  if (game.getPhase() != null) {
    this.txtPhase.setText(game.getPhase().toString());
  }
 else {
    this.txtPhase.setText(""String_Node_Str"");
  }
  updatePhases(game.getStep());
  if (game.getPhase() != null && game.getPhase().toString().equals(""String_Node_Str"") && game.getStep().toString().equals(""String_Node_Str"")) {
  }
  if (game.getStep() != null) {
    this.txtStep.setText(game.getStep().toString());
  }
 else {
    this.txtStep.setText(""String_Node_Str"");
  }
  this.txtActivePlayer.setText(game.getActivePlayerName());
  this.txtPriority.setText(game.getPriorityPlayerName());
  this.txtTurn.setText(Integer.toString(game.getTurn()));
  for (  PlayerView player : game.getPlayers()) {
    if (players.containsKey(player.getPlayerId())) {
      players.get(player.getPlayerId()).update(player);
    }
 else {
      logger.warn(""String_Node_Str"");
      logger.warn(""String_Node_Str"" + player.getPlayerId());
      logger.warn(""String_Node_Str"");
      for (      PlayAreaPanel p : players.values()) {
        logger.warn(""String_Node_Str"" + p);
      }
    }
  }
  GameManager.getInstance().setStackSize(game.getStack().size());
  displayStack(game,bigCard,feedbackPanel,gameId);
  for (  ExileView exile : game.getExile()) {
    if (!exiles.containsKey(exile.getId())) {
      ExileZoneDialog newExile=new ExileZoneDialog();
      exiles.put(exile.getId(),newExile);
      MageFrame.getDesktop().add(newExile,JLayeredPane.POPUP_LAYER);
      newExile.show();
    }
    exiles.get(exile.getId()).loadCards(exile,bigCard,gameId);
  }
  showRevealed(game);
  showLookedAt(game);
  if (game.getCombat().size() > 0) {
    CombatManager.getInstance().showCombat(game.getCombat(),gameId);
  }
 else {
    CombatManager.getInstance().hideCombat(gameId);
  }
  this.revalidate();
  this.repaint();
}","public synchronized void updateGame(GameView game){
  if (playerId == null || game.getHand() == null) {
    this.handContainer.setVisible(false);
  }
 else {
    handCards.clear();
    handCards.put(YOUR_HAND,game.getHand());
    if (game.getOpponentHands() != null) {
      for (      Map.Entry<String,SimpleCardsView> hand : game.getOpponentHands().entrySet()) {
        handCards.put(hand.getKey(),hand.getValue());
      }
    }
    if (!handCards.containsKey(chosenHandKey)) {
      chosenHandKey=YOUR_HAND;
    }
    handContainer.loadCards(handCards.get(chosenHandKey),bigCard,gameId);
    hideAll();
    boolean previous=btnSwitchHands.isVisible();
    boolean visible=handCards.size() > 1;
    if (previous != visible) {
      btnSwitchHands.setVisible(visible);
      if (visible) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
  if (game.getPhase() != null) {
    this.txtPhase.setText(game.getPhase().toString());
  }
 else {
    this.txtPhase.setText(""String_Node_Str"");
  }
  updatePhases(game.getStep());
  if (game.getPhase() != null && game.getPhase().toString().equals(""String_Node_Str"") && game.getStep().toString().equals(""String_Node_Str"")) {
  }
  if (game.getStep() != null) {
    this.txtStep.setText(game.getStep().toString());
  }
 else {
    this.txtStep.setText(""String_Node_Str"");
  }
  this.txtActivePlayer.setText(game.getActivePlayerName());
  this.txtPriority.setText(game.getPriorityPlayerName());
  this.txtTurn.setText(Integer.toString(game.getTurn()));
  for (  PlayerView player : game.getPlayers()) {
    if (players.containsKey(player.getPlayerId())) {
      players.get(player.getPlayerId()).update(player);
    }
 else {
      logger.warn(""String_Node_Str"");
      logger.warn(""String_Node_Str"" + player.getPlayerId());
      logger.warn(""String_Node_Str"");
      for (      PlayAreaPanel p : players.values()) {
        logger.warn(""String_Node_Str"" + p);
      }
    }
  }
  GameManager.getInstance().setStackSize(game.getStack().size());
  displayStack(game,bigCard,feedbackPanel,gameId);
  for (  ExileView exile : game.getExile()) {
    if (!exiles.containsKey(exile.getId())) {
      ExileZoneDialog newExile=new ExileZoneDialog();
      exiles.put(exile.getId(),newExile);
      MageFrame.getDesktop().add(newExile,JLayeredPane.POPUP_LAYER);
      newExile.show();
    }
    exiles.get(exile.getId()).loadCards(exile,bigCard,gameId);
  }
  showRevealed(game);
  showLookedAt(game);
  if (game.getCombat().size() > 0) {
    CombatManager.getInstance().showCombat(game.getCombat(),gameId);
  }
 else {
    CombatManager.getInstance().hideCombat(gameId);
  }
  this.revalidate();
  this.repaint();
}",0.9783226723525232
159964,"public void pickPile(String message,CardsView pile1,CardsView pile2){
  PickPileDialog pickPileDialog=new PickPileDialog();
  pickPileDialog.loadCards(message,pile1,pile2,bigCard,Config.dimensions,gameId);
  session.sendPlayerBoolean(gameId,pickPileDialog.isPickedPile1());
}","public void pickPile(String message,CardsView pile1,CardsView pile2){
  hideAll();
  PickPileDialog pickPileDialog=new PickPileDialog();
  pickPileDialog.loadCards(message,pile1,pile2,bigCard,Config.dimensions,gameId);
  session.sendPlayerBoolean(gameId,pickPileDialog.isPickedPile1());
}",0.9769094138543516
159965,"private ShowCardsDialog showCards(String title,CardsView cards,boolean required,Map<String,Serializable> options){
  ShowCardsDialog showCards=new ShowCardsDialog();
  showCards.loadCards(title,cards,bigCard,Config.dimensionsEnlarged,gameId,required,options);
  return showCards;
}","private ShowCardsDialog showCards(String title,CardsView cards,boolean required,Map<String,Serializable> options){
  hideAll();
  ShowCardsDialog showCards=new ShowCardsDialog();
  showCards.loadCards(title,cards,bigCard,Config.dimensionsEnlarged,gameId,required,options);
  return showCards;
}",0.977391304347826
159966,"public void pickAbility(AbilityPickerView choices){
  DialogManager.getManager(gameId).fadeOut();
  this.abilityPicker.show(choices,MageFrame.getDesktop().getMousePosition());
}","public void pickAbility(AbilityPickerView choices){
  hideAll();
  DialogManager.getManager(gameId).fadeOut();
  this.abilityPicker.show(choices,MageFrame.getDesktop().getMousePosition());
}",0.9645776566757494
159967,"public void getChoice(String message,String[] choices){
  PickChoiceDialog pickChoice=new PickChoiceDialog();
  pickChoice.showDialog(message,choices);
  session.sendPlayerString(gameId,pickChoice.getChoice());
}","public void getChoice(String message,String[] choices){
  hideAll();
  PickChoiceDialog pickChoice=new PickChoiceDialog();
  pickChoice.showDialog(message,choices);
  session.sendPlayerString(gameId,pickChoice.getChoice());
}",0.9702517162471396
159968,"public void showDialog(String message,String[] choices){
  this.lblMessage.setText(message);
  this.lstChoices.setListData(choices);
  MageFrame.getDesktop().add(this,JLayeredPane.PALETTE_LAYER);
  this.setVisible(true);
}","public void showDialog(String message,String[] choices){
  this.lblMessage.setText(message);
  this.lstChoices.setListData(choices);
  MageFrame.getDesktop().add(this,JLayeredPane.PALETTE_LAYER);
  Point centered=SettingsManager.getInstance().getComponentPosition(getWidth(),getHeight());
  this.setLocation(centered.x,centered.y);
  GuiDisplayUtil.keepComponentInsideScreen(centered.x,centered.y,this);
  this.setVisible(true);
}",0.6809815950920245
159969,"public void loadCards(String name,CardsView pile1,CardsView pile2,BigCard bigCard,CardDimensions dimension,UUID gameId){
  this.title=name;
  this.pile1.loadCardsNarrow(pile1,bigCard,dimension,gameId,null);
  this.pile2.loadCardsNarrow(pile2,bigCard,dimension,gameId,null);
  if (getParent() != MageFrame.getDesktop()) {
    MageFrame.getDesktop().add(this,JLayeredPane.POPUP_LAYER);
  }
  pack();
  this.revalidate();
  this.repaint();
  this.setModal(true);
  this.setVisible(true);
}","public void loadCards(String name,CardsView pile1,CardsView pile2,BigCard bigCard,CardDimensions dimension,UUID gameId){
  this.title=name;
  this.pile1.loadCardsNarrow(pile1,bigCard,dimension,gameId,null);
  this.pile2.loadCardsNarrow(pile2,bigCard,dimension,gameId,null);
  if (getParent() != MageFrame.getDesktop()) {
    MageFrame.getDesktop().add(this,JLayeredPane.POPUP_LAYER);
  }
  pack();
  Point centered=SettingsManager.getInstance().getComponentPosition(getWidth(),getHeight());
  this.setLocation(centered.x,centered.y);
  GuiDisplayUtil.keepComponentInsideScreen(centered.x,centered.y,this);
  this.revalidate();
  this.repaint();
  this.setModal(true);
  this.setVisible(true);
}",0.823728813559322
159970,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.DAMAGED_CREATURE) {
    Permanent creature=game.getPermanent(event.getSourceId());
    Permanent damagedCreature=game.getPermanent(event.getTargetId());
    if (creature != null && damagedCreature != null && creature.getCardType().contains(CardType.CREATURE) && creature.getSubtype().contains(""String_Node_Str"") && creature.getControllerId().equals(controllerId)) {
      this.getEffects().get(0).setValue(""String_Node_Str"",event.getAmount());
      this.getEffects().get(0).setValue(""String_Node_Str"",damagedCreature.getControllerId());
      this.getEffects().get(0).setValue(""String_Node_Str"",event.getSourceId());
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.DAMAGED_CREATURE) {
    Permanent creature=game.getPermanent(event.getSourceId());
    Permanent damagedCreature=game.getPermanent(event.getTargetId());
    if (creature != null && damagedCreature != null && creature.getCardType().contains(CardType.CREATURE) && creature.hasSubtype(""String_Node_Str"") && creature.getControllerId().equals(controllerId)) {
      this.getEffects().get(0).setValue(""String_Node_Str"",event.getAmount());
      this.getEffects().get(0).setValue(""String_Node_Str"",damagedCreature.getControllerId());
      this.getEffects().get(0).setValue(""String_Node_Str"",event.getSourceId());
      return true;
    }
  }
  return false;
}",0.9889538661468484
159971,"@Override public boolean apply(Game game,Ability source){
  Integer damageAmount=(Integer)this.getValue(""String_Node_Str"");
  UUID controllerId=(UUID)this.getValue(""String_Node_Str"");
  UUID sourceOfDamage=(UUID)this.getValue(""String_Node_Str"");
  if (damageAmount != null && controllerId != null) {
    Permanent permanent=game.getPermanent(sourceOfDamage);
    if (permanent == null) {
      permanent=(Permanent)game.getLastKnownInformation(sourceOfDamage,Constants.Zone.BATTLEFIELD);
    }
    if (permanent != null) {
      Player player=game.getPlayer(controllerId);
      if (player != null) {
        player.damage(damageAmount,sourceOfDamage,game,false,true);
        return true;
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Integer damageAmount=(Integer)this.getValue(""String_Node_Str"");
  UUID controllerId=(UUID)this.getValue(""String_Node_Str"");
  UUID sourceOfDamage=(UUID)this.getValue(""String_Node_Str"");
  if (damageAmount != null && controllerId != null) {
    Permanent permanent=game.getPermanent(sourceOfDamage);
    if (permanent == null) {
      permanent=(Permanent)game.getLastKnownInformation(sourceOfDamage,Constants.Zone.BATTLEFIELD);
    }
    if (permanent != null) {
      Player player=game.getPlayer(controllerId);
      if (player != null) {
        player.damage(damageAmount,sourceOfDamage,game,false,true);
        game.informPlayers(new StringBuilder(permanent.getName()).append(""String_Node_Str"").append(damageAmount).append(""String_Node_Str"").append(player.getName()).toString());
        return true;
      }
    }
  }
  return false;
}",0.8776889981561156
159972,"private void resizeTooltipIfNeeded(StringBuilder buffer,Component container){
  if (container == null) {
    return;
  }
  int i=buffer.indexOf(""String_Node_Str"");
  int count=0;
  while (i != -1) {
    count++;
    i=buffer.indexOf(""String_Node_Str"",i + 1);
  }
  if (count > 5 && this.type == 0) {
    type=1;
    container.setSize(org.mage.plugins.card.constants.Constants.TOOLTIP_WIDTH_MIN + org.mage.plugins.card.constants.Constants.TOOLTIP_BORDER_WIDTH,org.mage.plugins.card.constants.Constants.TOOLTIP_HEIGHT_MAX + org.mage.plugins.card.constants.Constants.TOOLTIP_BORDER_WIDTH);
    this.setSize(org.mage.plugins.card.constants.Constants.TOOLTIP_WIDTH_MIN,org.mage.plugins.card.constants.Constants.TOOLTIP_HEIGHT_MAX);
  }
 else   if (type == 1) {
    type=0;
    container.setSize(org.mage.plugins.card.constants.Constants.TOOLTIP_WIDTH_MIN + org.mage.plugins.card.constants.Constants.TOOLTIP_BORDER_WIDTH,org.mage.plugins.card.constants.Constants.TOOLTIP_HEIGHT_MIN + org.mage.plugins.card.constants.Constants.TOOLTIP_BORDER_WIDTH);
    this.setSize(org.mage.plugins.card.constants.Constants.TOOLTIP_WIDTH_MIN,org.mage.plugins.card.constants.Constants.TOOLTIP_HEIGHT_MIN);
  }
}","private void resizeTooltipIfNeeded(StringBuilder buffer,Component container){
  if (container == null) {
    return;
  }
  int i=buffer.indexOf(""String_Node_Str"");
  int count=0;
  while (i != -1) {
    count++;
    i=buffer.indexOf(""String_Node_Str"",i + 1);
  }
  if (count > 5 && this.type == 0) {
    type=1;
    container.setSize(org.mage.plugins.card.constants.Constants.TOOLTIP_WIDTH_MIN + org.mage.plugins.card.constants.Constants.TOOLTIP_BORDER_WIDTH,org.mage.plugins.card.constants.Constants.TOOLTIP_HEIGHT_MAX + org.mage.plugins.card.constants.Constants.TOOLTIP_BORDER_WIDTH);
    this.setSize(org.mage.plugins.card.constants.Constants.TOOLTIP_WIDTH_MIN,org.mage.plugins.card.constants.Constants.TOOLTIP_HEIGHT_MAX);
  }
 else   if (count < 6 && type == 1) {
    type=0;
    container.setSize(org.mage.plugins.card.constants.Constants.TOOLTIP_WIDTH_MIN + org.mage.plugins.card.constants.Constants.TOOLTIP_BORDER_WIDTH,org.mage.plugins.card.constants.Constants.TOOLTIP_HEIGHT_MIN + org.mage.plugins.card.constants.Constants.TOOLTIP_BORDER_WIDTH);
    this.setSize(org.mage.plugins.card.constants.Constants.TOOLTIP_WIDTH_MIN,org.mage.plugins.card.constants.Constants.TOOLTIP_HEIGHT_MIN);
  }
}",0.9945583926329008
159973,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType() == EventType.ZONE_CHANGE) {
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    if (zEvent.getFromZone() == Zone.BATTLEFIELD && zEvent.getToZone() == Zone.GRAVEYARD) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getType() == EventType.ZONE_CHANGE && event.getTargetId().equals(source.getSourceId())) {
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    if (zEvent.getFromZone() == Zone.BATTLEFIELD && zEvent.getToZone() == Zone.GRAVEYARD) {
      return true;
    }
  }
  return false;
}",0.9237536656891496
159974,"@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  Card card=game.getCard(event.getTargetId());
  if (card != null && event.getTargetId().equals(source.getSourceId())) {
    return card.moveToZone(Zone.LIBRARY,source.getId(),game,false);
  }
  return false;
}","@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  Card card=game.getCard(event.getTargetId());
  if (card != null) {
    return card.moveToZone(Zone.LIBRARY,source.getId(),game,false);
  }
  return false;
}",0.9018867924528302
159975,"private void addTooltipContainer(){
  final JEditorPane cardInfoPane=(JEditorPane)Plugins.getInstance().getCardInfoPane();
  if (cardInfoPane == null) {
    return;
  }
  cardInfoPane.setSize(320,201);
  cardInfoPane.setLocation(40,40);
  cardInfoPane.setBackground(new Color(0,0,0,0));
  MageRoundPane popupContainer=new MageRoundPane();
  popupContainer.setLayout(null);
  popupContainer.add(cardInfoPane);
  popupContainer.setVisible(false);
  popupContainer.setBounds(0,0,320 + 80,201 + 80);
  desktopPane.add(popupContainer,JLayeredPane.POPUP_LAYER);
  ui.addComponent(MageComponents.CARD_INFO_PANE,cardInfoPane);
  ui.addComponent(MageComponents.POPUP_CONTAINER,popupContainer);
  JPanel cardPreviewContainer=new JPanel();
  cardPreviewContainer.setOpaque(false);
  cardPreviewContainer.setLayout(null);
  BigCard bigCard=new BigCard();
  bigCard.setSize(320,500);
  bigCard.setLocation(40,40);
  bigCard.setBackground(new Color(0,0,0,0));
  cardPreviewContainer.add(bigCard);
  cardPreviewContainer.setVisible(false);
  cardPreviewContainer.setBounds(0,0,320 + 80,500 + 30);
  ui.addComponent(MageComponents.CARD_PREVIEW_PANE,bigCard);
  ui.addComponent(MageComponents.CARD_PREVIEW_CONTAINER,cardPreviewContainer);
  desktopPane.add(cardPreviewContainer,JLayeredPane.POPUP_LAYER);
}","private void addTooltipContainer(){
  final JEditorPane cardInfoPane=(JEditorPane)Plugins.getInstance().getCardInfoPane();
  if (cardInfoPane == null) {
    return;
  }
  cardInfoPane.setSize(Constants.TOOLTIP_WIDTH_MIN,Constants.TOOLTIP_HEIGHT_MIN);
  cardInfoPane.setLocation(40,40);
  cardInfoPane.setBackground(new Color(0,0,0,0));
  MageRoundPane popupContainer=new MageRoundPane();
  popupContainer.setLayout(null);
  popupContainer.add(cardInfoPane);
  popupContainer.setVisible(false);
  popupContainer.setBounds(0,0,Constants.TOOLTIP_WIDTH_MIN + Constants.TOOLTIP_BORDER_WIDTH,Constants.TOOLTIP_HEIGHT_MIN + Constants.TOOLTIP_BORDER_WIDTH);
  desktopPane.add(popupContainer,JLayeredPane.POPUP_LAYER);
  ui.addComponent(MageComponents.CARD_INFO_PANE,cardInfoPane);
  ui.addComponent(MageComponents.POPUP_CONTAINER,popupContainer);
  JPanel cardPreviewContainer=new JPanel();
  cardPreviewContainer.setOpaque(false);
  cardPreviewContainer.setLayout(null);
  BigCard bigCard=new BigCard();
  bigCard.setSize(320,500);
  bigCard.setLocation(40,40);
  bigCard.setBackground(new Color(0,0,0,0));
  cardPreviewContainer.add(bigCard);
  cardPreviewContainer.setVisible(false);
  cardPreviewContainer.setBounds(0,0,320 + 80,500 + 30);
  ui.addComponent(MageComponents.CARD_PREVIEW_PANE,bigCard);
  ui.addComponent(MageComponents.CARD_PREVIEW_CONTAINER,cardPreviewContainer);
  desktopPane.add(cardPreviewContainer,JLayeredPane.POPUP_LAYER);
}",0.9304538799414348
159976,"private void init(){
  this.cardSelector.setVisible(true);
  this.jPanel1.setVisible(true);
  for (  ICardGrid component : this.cardSelector.getCardGridComponents()) {
    component.clearCardEventListeners();
    component.addCardEventListener(new Listener<Event>(){
      @Override public void event(      Event event){
        if (event.getEventName().equals(""String_Node_Str"")) {
          SimpleCardView cardView=(SimpleCardView)event.getSource();
          CardInfo cardInfo=CardRepository.instance.findCard(cardView.getExpansionSetCode(),cardView.getCardNumber());
          Card card=null;
          if (mode == DeckEditorMode.Sideboard || mode == DeckEditorMode.Limited) {
            Iterator sideboard=deck.getSideboard().iterator();
            while (sideboard.hasNext()) {
              card=(Card)sideboard.next();
              if (card.getId().equals(cardView.getId())) {
                break;
              }
            }
          }
 else {
            card=cardInfo != null ? cardInfo.getCard() : null;
          }
          if (card != null) {
            deck.getCards().add(card);
            if (mode == DeckEditorMode.Sideboard || mode == DeckEditorMode.Limited) {
              deck.getSideboard().remove(card);
              cardSelector.removeCard(card.getId());
              cardSelector.setCardCount(deck.getSideboard().size());
              cardSelector.refresh();
            }
            if (cardInfoPane instanceof CardInfoPane) {
              ((CardInfoPane)cardInfoPane).setCard(new CardView(card));
            }
            hidePopup();
          }
        }
 else         if (event.getEventName().equals(""String_Node_Str"") && mode == DeckEditorMode.Constructed) {
          SimpleCardView cardView=(SimpleCardView)event.getSource();
          CardInfo cardInfo=CardRepository.instance.findCard(cardView.getExpansionSetCode(),cardView.getCardNumber());
          Card card=cardInfo != null ? cardInfo.getCard() : null;
          if (card != null) {
            deck.getSideboard().add(CardImpl.createCard(card.getClass()));
          }
          if (cardInfoPane instanceof CardInfoPane) {
            ((CardInfoPane)cardInfoPane).setCard(new CardView(card));
          }
          hidePopup();
        }
 else         if (event.getEventName().equals(""String_Node_Str"")) {
          DeckEditorPanel.this.deckArea.getDeckList().handleDoubleClick();
        }
 else         if (event.getEventName().equals(""String_Node_Str"")) {
          DeckEditorPanel.this.deckArea.getSideboardList().handleDoubleClick();
        }
        refreshDeck();
      }
    }
);
  }
  this.deckArea.clearDeckEventListeners();
  this.deckArea.addDeckEventListener(new Listener<Event>(){
    @Override public void event(    Event event){
      if (event.getEventName().equals(""String_Node_Str"")) {
        SimpleCardView cardView=(SimpleCardView)event.getSource();
        for (        Card card : deck.getCards()) {
          if (card.getId().equals(cardView.getId())) {
            deck.getCards().remove(card);
            if (mode == DeckEditorMode.Limited || mode == DeckEditorMode.Sideboard) {
              deck.getSideboard().add(card);
              cardSelector.loadSideboard(new ArrayList<Card>(deck.getSideboard()),getBigCard());
            }
            break;
          }
        }
        hidePopup();
        refreshDeck();
      }
 else       if (event.getEventName().equals(""String_Node_Str"") && mode == DeckEditorMode.Constructed) {
        SimpleCardView cardView=(SimpleCardView)event.getSource();
        for (        Card card : deck.getCards()) {
          if (card.getId().equals(cardView.getId())) {
            deck.getCards().remove(card);
            deck.getSideboard().add(card);
            break;
          }
        }
        hidePopup();
        refreshDeck();
      }
    }
  }
);
  this.deckArea.addSideboardEventListener(new Listener<Event>(){
    @Override public void event(    Event event){
      if (event.getEventName().equals(""String_Node_Str"")) {
        SimpleCardView cardView=(SimpleCardView)event.getSource();
        for (        Card card : deck.getSideboard()) {
          if (card.getId().equals(cardView.getId())) {
            deck.getSideboard().remove(card);
            deck.getCards().add(card);
            break;
          }
        }
        hidePopup();
        refreshDeck();
      }
    }
  }
);
  refreshDeck();
  this.setVisible(true);
  this.repaint();
}","private void init(){
  this.cardSelector.setVisible(true);
  this.jPanel1.setVisible(true);
  for (  ICardGrid component : this.cardSelector.getCardGridComponents()) {
    component.clearCardEventListeners();
    component.addCardEventListener(new Listener<Event>(){
      @Override public void event(      Event event){
        if (event.getEventName().equals(""String_Node_Str"")) {
          SimpleCardView cardView=(SimpleCardView)event.getSource();
          CardInfo cardInfo=CardRepository.instance.findCard(cardView.getExpansionSetCode(),cardView.getCardNumber());
          Card card=null;
          if (mode == DeckEditorMode.Sideboard || mode == DeckEditorMode.Limited) {
            Iterator sideboard=deck.getSideboard().iterator();
            while (sideboard.hasNext()) {
              card=(Card)sideboard.next();
              if (card.getId().equals(cardView.getId())) {
                break;
              }
            }
          }
 else {
            card=cardInfo != null ? cardInfo.getCard() : null;
          }
          if (card != null) {
            deck.getCards().add(card);
            if (mode == DeckEditorMode.Sideboard || mode == DeckEditorMode.Limited) {
              deck.getSideboard().remove(card);
              cardSelector.removeCard(card.getId());
              cardSelector.setCardCount(deck.getSideboard().size());
              cardSelector.refresh();
            }
            if (cardInfoPane instanceof CardInfoPane) {
              ((CardInfoPane)cardInfoPane).setCard(new CardView(card),null);
            }
            hidePopup();
          }
        }
 else         if (event.getEventName().equals(""String_Node_Str"") && mode == DeckEditorMode.Constructed) {
          SimpleCardView cardView=(SimpleCardView)event.getSource();
          CardInfo cardInfo=CardRepository.instance.findCard(cardView.getExpansionSetCode(),cardView.getCardNumber());
          Card card=cardInfo != null ? cardInfo.getCard() : null;
          if (card != null) {
            deck.getSideboard().add(CardImpl.createCard(card.getClass()));
          }
          if (cardInfoPane instanceof CardInfoPane) {
            ((CardInfoPane)cardInfoPane).setCard(new CardView(card),null);
          }
          hidePopup();
        }
 else         if (event.getEventName().equals(""String_Node_Str"")) {
          DeckEditorPanel.this.deckArea.getDeckList().handleDoubleClick();
        }
 else         if (event.getEventName().equals(""String_Node_Str"")) {
          DeckEditorPanel.this.deckArea.getSideboardList().handleDoubleClick();
        }
        refreshDeck();
      }
    }
);
  }
  this.deckArea.clearDeckEventListeners();
  this.deckArea.addDeckEventListener(new Listener<Event>(){
    @Override public void event(    Event event){
      if (event.getEventName().equals(""String_Node_Str"")) {
        SimpleCardView cardView=(SimpleCardView)event.getSource();
        for (        Card card : deck.getCards()) {
          if (card.getId().equals(cardView.getId())) {
            deck.getCards().remove(card);
            if (mode == DeckEditorMode.Limited || mode == DeckEditorMode.Sideboard) {
              deck.getSideboard().add(card);
              cardSelector.loadSideboard(new ArrayList<Card>(deck.getSideboard()),getBigCard());
            }
            break;
          }
        }
        hidePopup();
        refreshDeck();
      }
 else       if (event.getEventName().equals(""String_Node_Str"") && mode == DeckEditorMode.Constructed) {
        SimpleCardView cardView=(SimpleCardView)event.getSource();
        for (        Card card : deck.getCards()) {
          if (card.getId().equals(cardView.getId())) {
            deck.getCards().remove(card);
            deck.getSideboard().add(card);
            break;
          }
        }
        hidePopup();
        refreshDeck();
      }
    }
  }
);
  this.deckArea.addSideboardEventListener(new Listener<Event>(){
    @Override public void event(    Event event){
      if (event.getEventName().equals(""String_Node_Str"")) {
        SimpleCardView cardView=(SimpleCardView)event.getSource();
        for (        Card card : deck.getSideboard()) {
          if (card.getId().equals(cardView.getId())) {
            deck.getSideboard().remove(card);
            deck.getCards().add(card);
            break;
          }
        }
        hidePopup();
        refreshDeck();
      }
    }
  }
);
  refreshDeck();
  this.setVisible(true);
  this.repaint();
}",0.9988753936122358
159977,"private void sumbitShowPopupTask(final TransferData data,final Component parentComponent,final Point parentPoint){
  ThreadUtils.threadPool2.submit(new Runnable(){
    @Override public void run(){
      ThreadUtils.sleep(300);
      if (popupCard == null || !popupCard.equals(data.card)) {
        return;
      }
      try {
        if (session == null || !state || enlarged) {
          return;
        }
        final Component popupContainer=MageFrame.getUI().getComponent(MageComponents.POPUP_CONTAINER);
        Component popup2=MageFrame.getUI().getComponent(MageComponents.CARD_INFO_PANE);
        ((CardInfoPane)popup2).setCard(data.card);
        Point location=new Point((int)data.locationOnScreen.getX() + data.popupOffsetX - 40,(int)data.locationOnScreen.getY() + data.popupOffsetY - 40);
        location=GuiDisplayUtil.keepComponentInsideParent(location,parentPoint,popup2,parentComponent);
        location.translate(-parentPoint.x,-parentPoint.y);
        popupContainer.setLocation(location);
        ThreadUtils.sleep(200);
        final Component c=MageFrame.getUI().getComponent(MageComponents.DESKTOP_PANE);
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            if (!state || enlarged) {
              return;
            }
            popupContainer.setVisible(true);
            c.repaint();
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
}","private void sumbitShowPopupTask(final TransferData data,final Component parentComponent,final Point parentPoint){
  ThreadUtils.threadPool2.submit(new Runnable(){
    @Override public void run(){
      ThreadUtils.sleep(300);
      if (popupCard == null || !popupCard.equals(data.card)) {
        return;
      }
      try {
        if (session == null || !state || enlarged) {
          return;
        }
        final Component popupContainer=MageFrame.getUI().getComponent(MageComponents.POPUP_CONTAINER);
        Component popup2=MageFrame.getUI().getComponent(MageComponents.CARD_INFO_PANE);
        ((CardInfoPane)popup2).setCard(data.card,popupContainer);
        Point location=new Point((int)data.locationOnScreen.getX() + data.popupOffsetX - 40,(int)data.locationOnScreen.getY() + data.popupOffsetY - 40);
        location=GuiDisplayUtil.keepComponentInsideParent(location,parentPoint,popup2,parentComponent);
        location.translate(-parentPoint.x,-parentPoint.y);
        popupContainer.setLocation(location);
        ThreadUtils.sleep(200);
        final Component c=MageFrame.getUI().getComponent(MageComponents.DESKTOP_PANE);
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            if (!state || enlarged) {
              return;
            }
            popupContainer.setVisible(true);
            c.repaint();
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
}",0.99494779386999
159978,"public void setCard(final CardView card){
  if (card == null)   return;
  if (isCurrentCard(card))   return;
  currentCard=card;
  ThreadUtils.threadPool.submit(new Runnable(){
    public void run(){
      try {
        if (!card.equals(currentCard))         return;
        String manaCost=""String_Node_Str"";
        for (        String m : card.getManaCost()) {
          manaCost+=m;
        }
        String castingCost=UI.getDisplayManaCost(manaCost);
        castingCost=ManaSymbols.replaceSymbolsWithHTML(castingCost,ManaSymbols.Type.CARD);
        int symbolCount=0;
        int offset=0;
        while ((offset=castingCost.indexOf(""String_Node_Str"",offset) + 1) != 0)         symbolCount++;
        List<String> rules=card.getRules();
        List<String> rulings=new ArrayList<String>(rules);
        if (card instanceof PermanentView) {
          if (card.getPairedCard() != null) {
            rulings.add(""String_Node_Str"");
          }
          List<CounterView> counters=((PermanentView)card).getCounters();
          int count=counters != null ? counters.size() : 0;
          if (count > 0) {
            StringBuilder sb=new StringBuilder();
            int index=0;
            for (            CounterView counter : ((PermanentView)card).getCounters()) {
              if (counter.getCount() > 0) {
                if (index == 0) {
                  sb.append(""String_Node_Str"");
                }
 else {
                  sb.append(""String_Node_Str"");
                }
                sb.append(counter.getCount() + ""String_Node_Str"" + counter.getName()+ ""String_Node_Str"");
                index++;
              }
            }
            rulings.add(sb.toString());
          }
          int damage=((PermanentView)card).getDamage();
          if (damage > 0) {
            rulings.add(""String_Node_Str"" + damage + ""String_Node_Str"");
          }
        }
        int fontSize=11;
        String fontFamily=""String_Node_Str"";
        final StringBuilder buffer=new StringBuilder(512);
        buffer.append(""String_Node_Str"");
        buffer.append(fontFamily);
        buffer.append(""String_Node_Str"");
        buffer.append(fontSize);
        buffer.append(""String_Node_Str"");
        buffer.append(""String_Node_Str"");
        buffer.append(""String_Node_Str"");
        buffer.append(card.getName());
        buffer.append(""String_Node_Str"");
        buffer.append(symbolCount * 11 + 1);
        buffer.append(""String_Node_Str"");
        buffer.append(castingCost);
        buffer.append(""String_Node_Str"");
        buffer.append(""String_Node_Str"");
        buffer.append(getTypes(card));
        buffer.append(""String_Node_Str"");
switch (card.getRarity()) {
case RARE:
          buffer.append(""String_Node_Str"");
        break;
case UNCOMMON:
      buffer.append(""String_Node_Str"");
    break;
case COMMON:
  buffer.append(""String_Node_Str"");
break;
case MYTHIC:
buffer.append(""String_Node_Str"");
break;
}
String rarity=card.getRarity().getCode();
if (card.getExpansionSetCode() != null) {
buffer.append(ManaSymbols.replaceSetCodeWithHTML(card.getExpansionSetCode().toUpperCase(),rarity));
}
buffer.append(""String_Node_Str"");
String pt=""String_Node_Str"";
if (CardUtil.isCreature(card)) {
pt=card.getPower() + ""String_Node_Str"" + card.getToughness();
}
 else if (CardUtil.isPlaneswalker(card)) {
pt=card.getLoyalty().toString();
}
if (pt.length() > 0) {
buffer.append(""String_Node_Str"");
buffer.append(""String_Node_Str"");
buffer.append(pt);
buffer.append(""String_Node_Str"");
buffer.append(""String_Node_Str"");
}
String legal=""String_Node_Str"";
if (rulings.size() > 0) {
legal=legal.replaceAll(""String_Node_Str"",""String_Node_Str"");
legal=legal.replaceAll(""String_Node_Str"",""String_Node_Str"");
legal=legal.replace(""String_Node_Str"",""String_Node_Str"");
legal+=""String_Node_Str"";
for (String ruling : rulings) {
if (ruling != null && !ruling.replace(""String_Node_Str"",""String_Node_Str"").trim().isEmpty()) {
legal+=""String_Node_Str"";
legal+=ruling;
legal+=""String_Node_Str"";
}
}
}
if (legal.length() > 0) {
legal=legal.replaceAll(""String_Node_Str"",card.getName());
legal=legal.replaceAll(""String_Node_Str"",card.getName());
buffer.append(ManaSymbols.replaceSymbolsWithHTML(legal,ManaSymbols.Type.CARD));
}
buffer.append(""String_Node_Str"");
SwingUtilities.invokeLater(new Runnable(){
public void run(){
if (!card.equals(currentCard)) return;
setText(buffer.toString());
setCaretPosition(0);
}
}
);
}
 catch (Exception e) {
e.printStackTrace();
}
}
}
);
}","public void setCard(final CardView card,final Component container){
  if (card == null)   return;
  if (isCurrentCard(card))   return;
  currentCard=card;
  ThreadUtils.threadPool.submit(new Runnable(){
    public void run(){
      try {
        if (!card.equals(currentCard))         return;
        String manaCost=""String_Node_Str"";
        for (        String m : card.getManaCost()) {
          manaCost+=m;
        }
        String castingCost=UI.getDisplayManaCost(manaCost);
        castingCost=ManaSymbols.replaceSymbolsWithHTML(castingCost,ManaSymbols.Type.CARD);
        int symbolCount=0;
        int offset=0;
        while ((offset=castingCost.indexOf(""String_Node_Str"",offset) + 1) != 0)         symbolCount++;
        List<String> rules=card.getRules();
        List<String> rulings=new ArrayList<String>(rules);
        if (card instanceof PermanentView) {
          if (card.getPairedCard() != null) {
            rulings.add(""String_Node_Str"");
          }
          List<CounterView> counters=((PermanentView)card).getCounters();
          int count=counters != null ? counters.size() : 0;
          if (count > 0) {
            StringBuilder sb=new StringBuilder();
            int index=0;
            for (            CounterView counter : ((PermanentView)card).getCounters()) {
              if (counter.getCount() > 0) {
                if (index == 0) {
                  sb.append(""String_Node_Str"");
                }
 else {
                  sb.append(""String_Node_Str"");
                }
                sb.append(counter.getCount() + ""String_Node_Str"" + counter.getName()+ ""String_Node_Str"");
                index++;
              }
            }
            rulings.add(sb.toString());
          }
          int damage=((PermanentView)card).getDamage();
          if (damage > 0) {
            rulings.add(""String_Node_Str"" + damage + ""String_Node_Str"");
          }
        }
        int fontSize=11;
        String fontFamily=""String_Node_Str"";
        final StringBuilder buffer=new StringBuilder(512);
        buffer.append(""String_Node_Str"");
        buffer.append(fontFamily);
        buffer.append(""String_Node_Str"");
        buffer.append(fontSize);
        buffer.append(""String_Node_Str"");
        buffer.append(""String_Node_Str"");
        buffer.append(""String_Node_Str"");
        buffer.append(card.getName());
        buffer.append(""String_Node_Str"");
        buffer.append(symbolCount * 11 + 1);
        buffer.append(""String_Node_Str"");
        buffer.append(castingCost);
        buffer.append(""String_Node_Str"");
        buffer.append(""String_Node_Str"");
        buffer.append(getTypes(card));
        buffer.append(""String_Node_Str"");
switch (card.getRarity()) {
case RARE:
          buffer.append(""String_Node_Str"");
        break;
case UNCOMMON:
      buffer.append(""String_Node_Str"");
    break;
case COMMON:
  buffer.append(""String_Node_Str"");
break;
case MYTHIC:
buffer.append(""String_Node_Str"");
break;
}
String rarity=card.getRarity().getCode();
if (card.getExpansionSetCode() != null) {
buffer.append(ManaSymbols.replaceSetCodeWithHTML(card.getExpansionSetCode().toUpperCase(),rarity));
}
buffer.append(""String_Node_Str"");
String pt=""String_Node_Str"";
if (CardUtil.isCreature(card)) {
pt=card.getPower() + ""String_Node_Str"" + card.getToughness();
}
 else if (CardUtil.isPlaneswalker(card)) {
pt=card.getLoyalty().toString();
}
if (pt.length() > 0) {
buffer.append(""String_Node_Str"");
buffer.append(""String_Node_Str"");
buffer.append(pt);
buffer.append(""String_Node_Str"");
buffer.append(""String_Node_Str"");
}
String legal=""String_Node_Str"";
if (rulings.size() > 0) {
legal=legal.replaceAll(""String_Node_Str"",""String_Node_Str"");
legal=legal.replaceAll(""String_Node_Str"",""String_Node_Str"");
legal=legal.replace(""String_Node_Str"",""String_Node_Str"");
legal+=""String_Node_Str"";
for (String ruling : rulings) {
if (ruling != null && !ruling.replace(""String_Node_Str"",""String_Node_Str"").trim().isEmpty()) {
legal+=""String_Node_Str"";
legal+=ruling;
legal+=""String_Node_Str"";
}
}
}
if (legal.length() > 0) {
legal=legal.replaceAll(""String_Node_Str"",card.getName());
legal=legal.replaceAll(""String_Node_Str"",card.getName());
buffer.append(ManaSymbols.replaceSymbolsWithHTML(legal,ManaSymbols.Type.CARD));
}
buffer.append(""String_Node_Str"");
SwingUtilities.invokeLater(new Runnable(){
public void run(){
if (!card.equals(currentCard)) {
return;
}
resizeTooltipIfNeeded(buffer,container);
setText(buffer.toString());
setCaretPosition(0);
}
}
);
}
 catch (Exception e) {
e.printStackTrace();
}
}
}
);
}",0.9908033240997228
159979,"public void run(){
  if (!card.equals(currentCard))   return;
  setText(buffer.toString());
  setCaretPosition(0);
}","public void run(){
  if (!card.equals(currentCard)) {
    return;
  }
  resizeTooltipIfNeeded(buffer,container);
  setText(buffer.toString());
  setCaretPosition(0);
}",0.8197879858657244
159980,void setCard(final CardView card);,"void setCard(CardView card,Component container);",0.6829268292682927
159981,"/** 
 * Creates new form MageFrame
 */
public MageFrame(){
  setTitle(""String_Node_Str"" + version);
  clientId=UUID.randomUUID();
  EDTExceptionHandler.registerExceptionHandler();
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      exitApp();
    }
  }
);
  TConfig config=TConfig.get();
  config.setArchiveDetector(new TArchiveDetector(""String_Node_Str""));
  config.getOutputPreferences().set(FsOutputOption.STORE);
  try {
    UIManager.put(""String_Node_Str"",new Color(0,0,0,0));
    UIManager.setLookAndFeel(""String_Node_Str"");
  }
 catch (  Exception ex) {
    logger.fatal(null,ex);
  }
  ManaSymbols.loadImages();
  Plugins.getInstance().loadPlugins();
  initComponents();
  setSize(1024,768);
  SettingsManager.getInstance().setScreenWidthAndHeight(1024,768);
  DialogManager.updateParams(768,1024,false);
  this.setExtendedState(JFrame.MAXIMIZED_BOTH);
  session=new SessionImpl(this);
  session.setEmbeddedMageServerAction(new Action(){
    @Override public void execute(){
      Main.main(new String[]{});
    }
  }
);
  callbackClient=new CallbackClientImpl(this);
  connectDialog=new ConnectDialog();
  desktopPane.add(connectDialog,JLayeredPane.POPUP_LAYER);
  errorDialog=new ErrorDialog();
  errorDialog.setLocation(100,100);
  desktopPane.add(errorDialog,JLayeredPane.POPUP_LAYER);
  ui.addComponent(MageComponents.DESKTOP_PANE,desktopPane);
  pingTaskExecutor.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      session.ping();
    }
  }
,60,60,TimeUnit.SECONDS);
  try {
    tablesPane=new TablesPane();
    desktopPane.add(tablesPane,javax.swing.JLayeredPane.DEFAULT_LAYER);
    tablesPane.setMaximum(true);
    collectionViewerPane=new CollectionViewerPane();
    desktopPane.add(collectionViewerPane,javax.swing.JLayeredPane.DEFAULT_LAYER);
    collectionViewerPane.setMaximum(true);
  }
 catch (  PropertyVetoException ex) {
    logger.fatal(null,ex);
  }
  addTooltipContainer();
  setBackground();
  addMageLabel();
  setAppIcon();
  MageTray.getInstance().install();
  desktopPane.add(ArrowBuilder.getArrowsPanel(),JLayeredPane.DRAG_LAYER);
  desktopPane.addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      int width=((JComponent)e.getSource()).getWidth();
      int height=((JComponent)e.getSource()).getHeight();
      SettingsManager.getInstance().setScreenWidthAndHeight(width,height);
      if (!liteMode && !grayMode) {
        backgroundPane.setSize(width,height);
      }
      JPanel arrowsPanel=ArrowBuilder.getArrowsPanelRef();
      if (arrowsPanel != null) {
        arrowsPanel.setSize(width,height);
      }
      if (title != null) {
        title.setBounds((int)(width - titleRectangle.getWidth()) / 2,(int)(height - titleRectangle.getHeight()) / 2,titleRectangle.width,titleRectangle.height);
      }
    }
  }
);
  mageToolbar.add(new javax.swing.JToolBar.Separator());
  mageToolbar.add(createWindowsButton());
  if (Plugins.getInstance().isCardPluginLoaded()) {
    Separator separator=new javax.swing.JToolBar.Separator();
    mageToolbar.add(separator);
    JButton btnDownloadSymbols=new JButton(""String_Node_Str"");
    btnDownloadSymbols.setBorder(javax.swing.BorderFactory.createEmptyBorder(1,1,1,1));
    btnDownloadSymbols.setFocusable(false);
    btnDownloadSymbols.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnDownloadSymbols.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnDownloadSymbols.addActionListener(new java.awt.event.ActionListener(){
      @Override public void actionPerformed(      java.awt.event.ActionEvent evt){
        btnSymbolsActionPerformed(evt);
      }
    }
);
    mageToolbar.add(btnDownloadSymbols);
    separator=new javax.swing.JToolBar.Separator();
    mageToolbar.add(separator);
    JButton btnDownload=new JButton(""String_Node_Str"");
    btnDownload.setBorder(javax.swing.BorderFactory.createEmptyBorder(1,1,1,1));
    btnDownload.setFocusable(false);
    btnDownload.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnDownload.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnDownload.addActionListener(new java.awt.event.ActionListener(){
      @Override public void actionPerformed(      java.awt.event.ActionEvent evt){
        btnImagesActionPerformed(evt);
      }
    }
);
    mageToolbar.add(btnDownload);
  }
  if (Plugins.getInstance().isCounterPluginLoaded()) {
    int i=Plugins.getInstance().getGamesPlayed();
    JLabel label=new JLabel(""String_Node_Str"" + String.valueOf(i));
    desktopPane.add(label,JLayeredPane.DEFAULT_LAYER + 1);
    label.setVisible(true);
    label.setForeground(Color.white);
    label.setBounds(0,0,180,30);
  }
  ui.addButton(MageComponents.TABLES_MENU_BUTTON,btnGames);
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      disableButtons();
      if (PreferencesDialog.getCachedValue(PreferencesDialog.KEY_CARD_IMAGES_CHECK,""String_Node_Str"").equals(""String_Node_Str"")) {
        checkForNewImages();
      }
      logger.info(""String_Node_Str"" + ((System.currentTimeMillis() - startTime) / 1000 + ""String_Node_Str""));
      if (autoConnect()) {
        enableButtons();
      }
 else {
        connectDialog.showDialog();
      }
    }
  }
);
}","/** 
 * Creates new form MageFrame
 */
public MageFrame(){
  setTitle(""String_Node_Str"" + version);
  clientId=UUID.randomUUID();
  EDTExceptionHandler.registerExceptionHandler();
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      exitApp();
    }
  }
);
  TConfig config=TConfig.get();
  config.setArchiveDetector(new TArchiveDetector(""String_Node_Str""));
  config.getOutputPreferences().set(FsOutputOption.STORE);
  try {
    UIManager.put(""String_Node_Str"",new Color(0,0,0,0));
    UIManager.setLookAndFeel(""String_Node_Str"");
  }
 catch (  Exception ex) {
    logger.fatal(null,ex);
  }
  ManaSymbols.loadImages();
  Plugins.getInstance().loadPlugins();
  initComponents();
  setSize(1024,768);
  SettingsManager.getInstance().setScreenWidthAndHeight(1024,768);
  DialogManager.updateParams(768,1024,false);
  this.setExtendedState(JFrame.MAXIMIZED_BOTH);
  session=new SessionImpl(this);
  session.setEmbeddedMageServerAction(new Action(){
    @Override public void execute(){
      Main.main(new String[]{});
    }
  }
);
  callbackClient=new CallbackClientImpl(this);
  connectDialog=new ConnectDialog();
  desktopPane.add(connectDialog,JLayeredPane.POPUP_LAYER);
  errorDialog=new ErrorDialog();
  errorDialog.setLocation(100,100);
  desktopPane.add(errorDialog,JLayeredPane.POPUP_LAYER);
  ui.addComponent(MageComponents.DESKTOP_PANE,desktopPane);
  pingTaskExecutor.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      session.ping();
    }
  }
,60,60,TimeUnit.SECONDS);
  try {
    tablesPane=new TablesPane();
    desktopPane.add(tablesPane,javax.swing.JLayeredPane.DEFAULT_LAYER);
    tablesPane.setMaximum(true);
    collectionViewerPane=new CollectionViewerPane();
    desktopPane.add(collectionViewerPane,javax.swing.JLayeredPane.DEFAULT_LAYER);
    collectionViewerPane.setMaximum(true);
  }
 catch (  PropertyVetoException ex) {
    logger.fatal(null,ex);
  }
  addTooltipContainer();
  setBackground();
  addMageLabel();
  setAppIcon();
  MageTray.getInstance().install();
  desktopPane.add(ArrowBuilder.getBuilder().getArrowsManagerPanel(),JLayeredPane.DRAG_LAYER);
  desktopPane.addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      int width=((JComponent)e.getSource()).getWidth();
      int height=((JComponent)e.getSource()).getHeight();
      SettingsManager.getInstance().setScreenWidthAndHeight(width,height);
      if (!liteMode && !grayMode) {
        backgroundPane.setSize(width,height);
      }
      ArrowBuilder.getBuilder().setSize(width,height);
      if (title != null) {
        title.setBounds((int)(width - titleRectangle.getWidth()) / 2,(int)(height - titleRectangle.getHeight()) / 2,titleRectangle.width,titleRectangle.height);
      }
    }
  }
);
  mageToolbar.add(new javax.swing.JToolBar.Separator());
  mageToolbar.add(createWindowsButton());
  if (Plugins.getInstance().isCardPluginLoaded()) {
    Separator separator=new javax.swing.JToolBar.Separator();
    mageToolbar.add(separator);
    JButton btnDownloadSymbols=new JButton(""String_Node_Str"");
    btnDownloadSymbols.setBorder(javax.swing.BorderFactory.createEmptyBorder(1,1,1,1));
    btnDownloadSymbols.setFocusable(false);
    btnDownloadSymbols.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnDownloadSymbols.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnDownloadSymbols.addActionListener(new java.awt.event.ActionListener(){
      @Override public void actionPerformed(      java.awt.event.ActionEvent evt){
        btnSymbolsActionPerformed(evt);
      }
    }
);
    mageToolbar.add(btnDownloadSymbols);
    separator=new javax.swing.JToolBar.Separator();
    mageToolbar.add(separator);
    JButton btnDownload=new JButton(""String_Node_Str"");
    btnDownload.setBorder(javax.swing.BorderFactory.createEmptyBorder(1,1,1,1));
    btnDownload.setFocusable(false);
    btnDownload.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnDownload.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnDownload.addActionListener(new java.awt.event.ActionListener(){
      @Override public void actionPerformed(      java.awt.event.ActionEvent evt){
        btnImagesActionPerformed(evt);
      }
    }
);
    mageToolbar.add(btnDownload);
  }
  if (Plugins.getInstance().isCounterPluginLoaded()) {
    int i=Plugins.getInstance().getGamesPlayed();
    JLabel label=new JLabel(""String_Node_Str"" + String.valueOf(i));
    desktopPane.add(label,JLayeredPane.DEFAULT_LAYER + 1);
    label.setVisible(true);
    label.setForeground(Color.white);
    label.setBounds(0,0,180,30);
  }
  ui.addButton(MageComponents.TABLES_MENU_BUTTON,btnGames);
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      disableButtons();
      if (PreferencesDialog.getCachedValue(PreferencesDialog.KEY_CARD_IMAGES_CHECK,""String_Node_Str"").equals(""String_Node_Str"")) {
        checkForNewImages();
      }
      logger.info(""String_Node_Str"" + ((System.currentTimeMillis() - startTime) / 1000 + ""String_Node_Str""));
      if (autoConnect()) {
        enableButtons();
      }
 else {
        connectDialog.showDialog();
      }
    }
  }
);
}",0.9880997355496788
159982,"@Override public void componentResized(ComponentEvent e){
  int width=((JComponent)e.getSource()).getWidth();
  int height=((JComponent)e.getSource()).getHeight();
  SettingsManager.getInstance().setScreenWidthAndHeight(width,height);
  if (!liteMode && !grayMode) {
    backgroundPane.setSize(width,height);
  }
  JPanel arrowsPanel=ArrowBuilder.getArrowsPanelRef();
  if (arrowsPanel != null) {
    arrowsPanel.setSize(width,height);
  }
  if (title != null) {
    title.setBounds((int)(width - titleRectangle.getWidth()) / 2,(int)(height - titleRectangle.getHeight()) / 2,titleRectangle.width,titleRectangle.height);
  }
}","@Override public void componentResized(ComponentEvent e){
  int width=((JComponent)e.getSource()).getWidth();
  int height=((JComponent)e.getSource()).getHeight();
  SettingsManager.getInstance().setScreenWidthAndHeight(width,height);
  if (!liteMode && !grayMode) {
    backgroundPane.setSize(width,height);
  }
  ArrowBuilder.getBuilder().setSize(width,height);
  if (title != null) {
    title.setBounds((int)(width - titleRectangle.getWidth()) / 2,(int)(height - titleRectangle.getHeight()) / 2,titleRectangle.width,titleRectangle.height);
  }
}",0.8620102214650767
159983,"public static void setActive(MagePane frame){
  if (frame == null) {
    return;
  }
  logger.debug(""String_Node_Str"" + frame.getTitle() + ""String_Node_Str"");
  if (activeFrame != null) {
    activeFrame.deactivated();
  }
  activeFrame=frame;
  activeFrame.setVisible(true);
  activeFrame.toFront();
  try {
    activeFrame.setSelected(true);
  }
 catch (  PropertyVetoException ex) {
    logger.error(""String_Node_Str"" + frame.getTitle() + ""String_Node_Str"");
  }
  activeFrame.activated();
}","public static void setActive(MagePane frame){
  if (frame == null) {
    return;
  }
  logger.debug(""String_Node_Str"" + frame.getTitle() + ""String_Node_Str"");
  if (activeFrame != null) {
    activeFrame.deactivated();
  }
  activeFrame=frame;
  activeFrame.setVisible(true);
  activeFrame.toFront();
  try {
    activeFrame.setSelected(true);
  }
 catch (  PropertyVetoException ex) {
    logger.error(""String_Node_Str"" + frame.getTitle() + ""String_Node_Str"");
  }
  activeFrame.activated();
  ArrowBuilder.getBuilder().hideAllPanels();
  if (frame instanceof GamePane) {
    ArrowBuilder.getBuilder().showPanel(((GamePane)frame).getGameId());
  }
}",0.8636363636363636
159984,"@Override public void mouseExited(MouseEvent arg0){
  if (getMousePosition(true) != null)   return;
  if (popup != null) {
    popup.hide();
    popupShowing=false;
    ArrowBuilder.removeArrowsByType(ArrowBuilder.Type.TARGET);
    ArrowBuilder.removeArrowsByType(ArrowBuilder.Type.PAIRED);
    ArrowBuilder.removeArrowsByType(ArrowBuilder.Type.SOURCE);
  }
}","@Override public void mouseExited(MouseEvent arg0){
  if (getMousePosition(true) != null)   return;
  if (popup != null) {
    popup.hide();
    popupShowing=false;
    ArrowBuilder.getBuilder().removeArrowsByType(gameId,ArrowBuilder.Type.TARGET);
    ArrowBuilder.getBuilder().removeArrowsByType(gameId,ArrowBuilder.Type.PAIRED);
    ArrowBuilder.getBuilder().removeArrowsByType(gameId,ArrowBuilder.Type.SOURCE);
  }
}",0.7763496143958869
159985,"@Override public void mouseEntered(MouseEvent arg0){
  if (!popupShowing) {
    if (popup != null)     popup.hide();
    PopupFactory factory=PopupFactory.getSharedInstance();
    popup=factory.getPopup(this,popupText,(int)this.getLocationOnScreen().getX() + Config.dimensions.frameWidth,(int)this.getLocationOnScreen().getY() + 40);
    popup.show();
    popup.hide();
    popup=factory.getPopup(this,popupText,(int)this.getLocationOnScreen().getX() + Config.dimensions.frameWidth,(int)this.getLocationOnScreen().getY() + 40);
    popup.show();
    popupShowing=true;
    List<UUID> targets=card.getTargets();
    if (targets != null) {
      for (      UUID uuid : targets) {
        PlayAreaPanel p=MageFrame.getGame(gameId).getPlayers().get(uuid);
        if (p != null) {
          Point target=p.getLocationOnScreen();
          Point me=this.getLocationOnScreen();
          ArrowBuilder.addArrow((int)me.getX() + 35,(int)me.getY(),(int)target.getX() + 40,(int)target.getY() - 40,Color.red,ArrowBuilder.Type.TARGET);
        }
 else {
          for (          PlayAreaPanel pa : MageFrame.getGame(gameId).getPlayers().values()) {
            MagePermanent permanent=pa.getBattlefieldPanel().getPermanents().get(uuid);
            if (permanent != null) {
              Point target=permanent.getLocationOnScreen();
              Point me=this.getLocationOnScreen();
              ArrowBuilder.addArrow((int)me.getX() + 35,(int)me.getY(),(int)target.getX() + 40,(int)target.getY() + 10,Color.red,ArrowBuilder.Type.TARGET);
            }
          }
        }
      }
    }
  }
}","@Override public void mouseEntered(MouseEvent arg0){
  if (!popupShowing) {
    if (popup != null)     popup.hide();
    PopupFactory factory=PopupFactory.getSharedInstance();
    popup=factory.getPopup(this,popupText,(int)this.getLocationOnScreen().getX() + Config.dimensions.frameWidth,(int)this.getLocationOnScreen().getY() + 40);
    popup.show();
    popup.hide();
    popup=factory.getPopup(this,popupText,(int)this.getLocationOnScreen().getX() + Config.dimensions.frameWidth,(int)this.getLocationOnScreen().getY() + 40);
    popup.show();
    popupShowing=true;
    List<UUID> targets=card.getTargets();
    if (targets != null) {
      for (      UUID uuid : targets) {
        PlayAreaPanel p=MageFrame.getGame(gameId).getPlayers().get(uuid);
        if (p != null) {
          Point target=p.getLocationOnScreen();
          Point me=this.getLocationOnScreen();
          ArrowBuilder.getBuilder().addArrow(gameId,(int)me.getX() + 35,(int)me.getY(),(int)target.getX() + 40,(int)target.getY() - 40,Color.red,ArrowBuilder.Type.TARGET);
        }
 else {
          for (          PlayAreaPanel pa : MageFrame.getGame(gameId).getPlayers().values()) {
            MagePermanent permanent=pa.getBattlefieldPanel().getPermanents().get(uuid);
            if (permanent != null) {
              Point target=permanent.getLocationOnScreen();
              Point me=this.getLocationOnScreen();
              ArrowBuilder.getBuilder().addArrow(gameId,(int)me.getX() + 35,(int)me.getY(),(int)target.getX() + 40,(int)target.getY() + 10,Color.red,ArrowBuilder.Type.TARGET);
            }
          }
        }
      }
    }
  }
}",0.9875311720698254
159986,"public void hideCombat(UUID gameId){
  ArrowBuilder.removeArrowsByType(ArrowBuilder.Type.COMBAT);
  combatAttackers.remove(gameId);
  combatBlockers.remove(gameId);
}","public void hideCombat(UUID gameId){
  ArrowBuilder.getBuilder().removeArrowsByType(gameId,ArrowBuilder.Type.COMBAT);
  combatAttackers.remove(gameId);
  combatBlockers.remove(gameId);
}",0.9431818181818182
159987,"private void drawBlockers(CombatGroupView group,MagePermanent attackerCard,UUID gameId){
  for (  CardView blocker : group.getBlockers().values()) {
    for (    PlayAreaPanel pa : MageFrame.getGame(gameId).getPlayers().values()) {
      MagePermanent blockerCard=pa.getBattlefieldPanel().getPermanents().get(blocker.getId());
      if (blockerCard != null) {
        parentPoint=getParentPoint(blockerCard);
        Point blockerPoint=blockerCard.getLocationOnScreen();
        blockerPoint.translate(-parentPoint.x,-parentPoint.y);
        Point attackerPoint=attackerCard.getLocationOnScreen();
        attackerPoint.translate(-parentPoint.x,-parentPoint.y);
        double yRateA=(attackerCard.getSize().height / SettingsManager.getInstance().getCardSize().height);
        double xRateA=(attackerCard.getSize().width / SettingsManager.getInstance().getCardSize().width);
        double yRateB=(blockerCard.getSize().height / SettingsManager.getInstance().getCardSize().height);
        double xRateB=(blockerCard.getSize().width / SettingsManager.getInstance().getCardSize().width);
        ArrowBuilder.addArrow((int)blockerPoint.getX() + (int)(55 * xRateB),(int)blockerPoint.getY() + (int)(25 * xRateB),(int)attackerPoint.getX() + (int)(70 * xRateA),(int)attackerPoint.getY() + (int)(25 * yRateA),Color.blue,ArrowBuilder.Type.COMBAT);
        globalBlockersCount++;
      }
    }
  }
}","private void drawBlockers(CombatGroupView group,MagePermanent attackerCard,UUID gameId){
  for (  CardView blocker : group.getBlockers().values()) {
    for (    PlayAreaPanel pa : MageFrame.getGame(gameId).getPlayers().values()) {
      MagePermanent blockerCard=pa.getBattlefieldPanel().getPermanents().get(blocker.getId());
      if (blockerCard != null) {
        parentPoint=getParentPoint(blockerCard);
        Point blockerPoint=blockerCard.getLocationOnScreen();
        blockerPoint.translate(-parentPoint.x,-parentPoint.y);
        Point attackerPoint=attackerCard.getLocationOnScreen();
        attackerPoint.translate(-parentPoint.x,-parentPoint.y);
        double yRateA=(attackerCard.getSize().height / SettingsManager.getInstance().getCardSize().height);
        double xRateA=(attackerCard.getSize().width / SettingsManager.getInstance().getCardSize().width);
        double yRateB=(blockerCard.getSize().height / SettingsManager.getInstance().getCardSize().height);
        double xRateB=(blockerCard.getSize().width / SettingsManager.getInstance().getCardSize().width);
        ArrowBuilder.getBuilder().addArrow(gameId,(int)blockerPoint.getX() + (int)(55 * xRateB),(int)blockerPoint.getY() + (int)(25 * xRateB),(int)attackerPoint.getX() + (int)(70 * xRateA),(int)attackerPoint.getY() + (int)(25 * yRateA),Color.blue,ArrowBuilder.Type.COMBAT);
        globalBlockersCount++;
      }
    }
  }
}",0.992867332382311
159988,"private void drawDefender(CombatGroupView group,MagePermanent attackerCard,UUID gameId){
  UUID defenderId=group.getDefenderId();
  if (defenderId != null) {
    parentPoint=getParentPoint(attackerCard);
    PlayAreaPanel p=MageFrame.getGame(gameId).getPlayers().get(defenderId);
    if (p != null) {
      Point target=p.getLocationOnScreen();
      target.translate(-parentPoint.x,-parentPoint.y);
      Point attackerPoint=attackerCard.getLocationOnScreen();
      attackerPoint.translate(-parentPoint.x,-parentPoint.y);
      ArrowBuilder.addArrow((int)attackerPoint.getX() + 45,(int)attackerPoint.getY() + 25,(int)target.getX() + 40,(int)target.getY() - 20,Color.red,ArrowBuilder.Type.COMBAT);
    }
 else {
      for (      PlayAreaPanel pa : MageFrame.getGame(gameId).getPlayers().values()) {
        MagePermanent permanent=pa.getBattlefieldPanel().getPermanents().get(defenderId);
        if (permanent != null) {
          Point target=permanent.getLocationOnScreen();
          target.translate(-parentPoint.x,-parentPoint.y);
          Point attackerPoint=attackerCard.getLocationOnScreen();
          attackerPoint.translate(-parentPoint.x,-parentPoint.y);
          ArrowBuilder.addArrow((int)attackerPoint.getX() + 45,(int)attackerPoint.getY() + 25,(int)target.getX() + 40,(int)target.getY() + 10,Color.red,ArrowBuilder.Type.COMBAT);
        }
      }
    }
  }
}","private void drawDefender(CombatGroupView group,MagePermanent attackerCard,UUID gameId){
  UUID defenderId=group.getDefenderId();
  if (defenderId != null) {
    parentPoint=getParentPoint(attackerCard);
    PlayAreaPanel p=MageFrame.getGame(gameId).getPlayers().get(defenderId);
    if (p != null) {
      Point target=p.getLocationOnScreen();
      target.translate(-parentPoint.x,-parentPoint.y);
      Point attackerPoint=attackerCard.getLocationOnScreen();
      attackerPoint.translate(-parentPoint.x,-parentPoint.y);
      ArrowBuilder.getBuilder().addArrow(gameId,(int)attackerPoint.getX() + 45,(int)attackerPoint.getY() + 25,(int)target.getX() + 40,(int)target.getY() - 20,Color.red,ArrowBuilder.Type.COMBAT);
    }
 else {
      for (      PlayAreaPanel pa : MageFrame.getGame(gameId).getPlayers().values()) {
        MagePermanent permanent=pa.getBattlefieldPanel().getPermanents().get(defenderId);
        if (permanent != null) {
          Point target=permanent.getLocationOnScreen();
          target.translate(-parentPoint.x,-parentPoint.y);
          Point attackerPoint=attackerCard.getLocationOnScreen();
          attackerPoint.translate(-parentPoint.x,-parentPoint.y);
          ArrowBuilder.getBuilder().addArrow(gameId,(int)attackerPoint.getX() + 45,(int)attackerPoint.getY() + 25,(int)target.getX() + 40,(int)target.getY() + 10,Color.red,ArrowBuilder.Type.COMBAT);
        }
      }
    }
  }
}",0.9856938483547926
159989,"public void showCombat(List<CombatGroupView> combatView,UUID gameId){
  ArrowBuilder.removeArrowsByType(ArrowBuilder.Type.COMBAT);
  displayArrows(combatView,gameId);
}","public void showCombat(List<CombatGroupView> combatView,UUID gameId){
  ArrowBuilder.getBuilder().removeArrowsByType(gameId,ArrowBuilder.Type.COMBAT);
  displayArrows(combatView,gameId);
}",0.9438202247191012
159990,"public void getFeedback(FeedbackMode mode,String message,boolean special,Map<String,Serializable> options){
  logger.info(""String_Node_Str"" + message);
  this.lblMessage.setText(message);
  this.helper.setMessage(message);
  this.selected=false;
  this.mode=mode;
switch (this.mode) {
case INFORM:
    this.btnLeft.setVisible(false);
  this.btnRight.setVisible(false);
this.helper.setState(""String_Node_Str"",false,""String_Node_Str"",false);
break;
case QUESTION:
this.btnLeft.setVisible(true);
this.btnLeft.setText(""String_Node_Str"");
this.btnRight.setVisible(true);
this.btnRight.setText(""String_Node_Str"");
this.helper.setState(""String_Node_Str"",true,""String_Node_Str"",true);
break;
case CONFIRM:
this.btnLeft.setVisible(true);
this.btnLeft.setText(""String_Node_Str"");
this.btnRight.setVisible(true);
this.btnRight.setText(""String_Node_Str"");
this.helper.setState(""String_Node_Str"",true,""String_Node_Str"",true);
break;
case CANCEL:
this.btnLeft.setVisible(false);
this.btnRight.setVisible(true);
this.btnRight.setText(""String_Node_Str"");
this.helper.setState(""String_Node_Str"",false,""String_Node_Str"",true);
break;
case SELECT:
this.btnLeft.setVisible(false);
this.btnRight.setVisible(true);
this.btnRight.setText(""String_Node_Str"");
this.helper.setState(""String_Node_Str"",false,""String_Node_Str"",true);
break;
case END:
this.btnLeft.setVisible(false);
this.btnRight.setVisible(true);
this.btnRight.setText(""String_Node_Str"");
this.helper.setState(""String_Node_Str"",false,""String_Node_Str"",true);
ArrowBuilder.removeAllArrows();
endWithTimeout();
break;
}
this.btnSpecial.setVisible(special);
this.btnSpecial.setText(""String_Node_Str"");
this.helper.setSpecial(""String_Node_Str"",special);
if (message.contains(""String_Node_Str"")) {
this.btnSpecial.setVisible(true);
this.btnSpecial.setText(""String_Node_Str"");
this.helper.setSpecial(""String_Node_Str"",true);
}
requestFocusIfPossible();
handleOptions(options);
this.revalidate();
this.repaint();
this.helper.setLinks(btnLeft,btnRight,btnSpecial);
this.helper.setVisible(true);
}","public void getFeedback(FeedbackMode mode,String message,boolean special,Map<String,Serializable> options){
  logger.info(""String_Node_Str"" + message);
  this.lblMessage.setText(message);
  this.helper.setMessage(message);
  this.selected=false;
  this.mode=mode;
switch (this.mode) {
case INFORM:
    this.btnLeft.setVisible(false);
  this.btnRight.setVisible(false);
this.helper.setState(""String_Node_Str"",false,""String_Node_Str"",false);
break;
case QUESTION:
this.btnLeft.setVisible(true);
this.btnLeft.setText(""String_Node_Str"");
this.btnRight.setVisible(true);
this.btnRight.setText(""String_Node_Str"");
this.helper.setState(""String_Node_Str"",true,""String_Node_Str"",true);
break;
case CONFIRM:
this.btnLeft.setVisible(true);
this.btnLeft.setText(""String_Node_Str"");
this.btnRight.setVisible(true);
this.btnRight.setText(""String_Node_Str"");
this.helper.setState(""String_Node_Str"",true,""String_Node_Str"",true);
break;
case CANCEL:
this.btnLeft.setVisible(false);
this.btnRight.setVisible(true);
this.btnRight.setText(""String_Node_Str"");
this.helper.setState(""String_Node_Str"",false,""String_Node_Str"",true);
break;
case SELECT:
this.btnLeft.setVisible(false);
this.btnRight.setVisible(true);
this.btnRight.setText(""String_Node_Str"");
this.helper.setState(""String_Node_Str"",false,""String_Node_Str"",true);
break;
case END:
this.btnLeft.setVisible(false);
this.btnRight.setVisible(true);
this.btnRight.setText(""String_Node_Str"");
this.helper.setState(""String_Node_Str"",false,""String_Node_Str"",true);
ArrowBuilder.getBuilder().removeAllArrows(gameId);
endWithTimeout();
break;
}
this.btnSpecial.setVisible(special);
this.btnSpecial.setText(""String_Node_Str"");
this.helper.setSpecial(""String_Node_Str"",special);
if (message.contains(""String_Node_Str"")) {
this.btnSpecial.setVisible(true);
this.btnSpecial.setText(""String_Node_Str"");
this.helper.setSpecial(""String_Node_Str"",true);
}
requestFocusIfPossible();
handleOptions(options);
this.revalidate();
this.repaint();
this.helper.setLinks(btnLeft,btnRight,btnSpecial);
this.helper.setVisible(true);
}",0.995335133808004
159991,"public void replayGame(UUID gameId){
  this.setTitle(""String_Node_Str"" + gameId);
  gamePanel.replayGame(gameId);
}","public void replayGame(UUID gameId){
  this.setTitle(""String_Node_Str"" + gameId);
  this.gameId=gameId;
  gamePanel.replayGame(gameId);
}",0.9126984126984128
159992,"public void showGame(UUID gameId,UUID playerId){
  this.setTitle(""String_Node_Str"" + gameId);
  gamePanel.showGame(gameId,playerId);
}","public void showGame(UUID gameId,UUID playerId){
  this.setTitle(""String_Node_Str"" + gameId);
  this.gameId=gameId;
  gamePanel.showGame(gameId,playerId);
}",0.9241379310344828
159993,"public void watchGame(UUID gameId){
  this.setTitle(""String_Node_Str"" + gameId);
  gamePanel.watchGame(gameId);
}","public void watchGame(UUID gameId){
  this.setTitle(""String_Node_Str"" + gameId);
  this.gameId=gameId;
  gamePanel.watchGame(gameId);
}",0.9112903225806452
159994,"public synchronized void updateGame(GameView game){
  if (playerId == null || game.getHand() == null) {
    this.handContainer.setVisible(false);
  }
 else {
    handCards.clear();
    handCards.put(YOUR_HAND,game.getHand());
    if (game.getOpponentHands() != null) {
      for (      Map.Entry<String,SimpleCardsView> hand : game.getOpponentHands().entrySet()) {
        handCards.put(hand.getKey(),hand.getValue());
      }
    }
    if (!handCards.containsKey(chosenHandKey)) {
      chosenHandKey=YOUR_HAND;
    }
    handContainer.loadCards(handCards.get(chosenHandKey),bigCard,gameId);
    ActionCallback callback=Plugins.getInstance().getActionCallback();
    ((MageActionCallback)callback).hideAll();
    boolean previous=btnSwitchHands.isVisible();
    boolean visible=handCards.size() > 1;
    if (previous != visible) {
      btnSwitchHands.setVisible(visible);
      if (visible) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
  if (game.getPhase() != null) {
    this.txtPhase.setText(game.getPhase().toString());
  }
 else {
    this.txtPhase.setText(""String_Node_Str"");
  }
  updatePhases(game.getStep());
  if (game.getPhase() != null && game.getPhase().toString().equals(""String_Node_Str"") && game.getStep().toString().equals(""String_Node_Str"")) {
  }
  if (game.getStep() != null) {
    this.txtStep.setText(game.getStep().toString());
  }
 else {
    this.txtStep.setText(""String_Node_Str"");
  }
  this.txtActivePlayer.setText(game.getActivePlayerName());
  this.txtPriority.setText(game.getPriorityPlayerName());
  this.txtTurn.setText(Integer.toString(game.getTurn()));
  for (  PlayerView player : game.getPlayers()) {
    if (players.containsKey(player.getPlayerId())) {
      players.get(player.getPlayerId()).update(player);
    }
 else {
      logger.warn(""String_Node_Str"");
      logger.warn(""String_Node_Str"" + player.getPlayerId());
      logger.warn(""String_Node_Str"");
      for (      PlayAreaPanel p : players.values()) {
        logger.warn(""String_Node_Str"" + p);
      }
    }
  }
  GameManager.getInstance().setStackSize(game.getStack().size());
  displayStack(game,bigCard,feedbackPanel,gameId);
  for (  ExileView exile : game.getExile()) {
    if (!exiles.containsKey(exile.getId())) {
      ExileZoneDialog newExile=new ExileZoneDialog();
      exiles.put(exile.getId(),newExile);
      MageFrame.getDesktop().add(newExile,JLayeredPane.POPUP_LAYER);
      newExile.show();
    }
    exiles.get(exile.getId()).loadCards(exile,bigCard,gameId);
  }
  showRevealed(game);
  showLookedAt(game);
  if (game.getCombat().size() > 0) {
    CombatManager.getInstance().showCombat(game.getCombat(),gameId);
  }
 else {
    CombatManager.getInstance().hideCombat(gameId);
  }
  this.revalidate();
  this.repaint();
}","public synchronized void updateGame(GameView game){
  if (playerId == null || game.getHand() == null) {
    this.handContainer.setVisible(false);
  }
 else {
    handCards.clear();
    handCards.put(YOUR_HAND,game.getHand());
    if (game.getOpponentHands() != null) {
      for (      Map.Entry<String,SimpleCardsView> hand : game.getOpponentHands().entrySet()) {
        handCards.put(hand.getKey(),hand.getValue());
      }
    }
    if (!handCards.containsKey(chosenHandKey)) {
      chosenHandKey=YOUR_HAND;
    }
    handContainer.loadCards(handCards.get(chosenHandKey),bigCard,gameId);
    ActionCallback callback=Plugins.getInstance().getActionCallback();
    ((MageActionCallback)callback).hideAll(gameId);
    boolean previous=btnSwitchHands.isVisible();
    boolean visible=handCards.size() > 1;
    if (previous != visible) {
      btnSwitchHands.setVisible(visible);
      if (visible) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
  if (game.getPhase() != null) {
    this.txtPhase.setText(game.getPhase().toString());
  }
 else {
    this.txtPhase.setText(""String_Node_Str"");
  }
  updatePhases(game.getStep());
  if (game.getPhase() != null && game.getPhase().toString().equals(""String_Node_Str"") && game.getStep().toString().equals(""String_Node_Str"")) {
  }
  if (game.getStep() != null) {
    this.txtStep.setText(game.getStep().toString());
  }
 else {
    this.txtStep.setText(""String_Node_Str"");
  }
  this.txtActivePlayer.setText(game.getActivePlayerName());
  this.txtPriority.setText(game.getPriorityPlayerName());
  this.txtTurn.setText(Integer.toString(game.getTurn()));
  for (  PlayerView player : game.getPlayers()) {
    if (players.containsKey(player.getPlayerId())) {
      players.get(player.getPlayerId()).update(player);
    }
 else {
      logger.warn(""String_Node_Str"");
      logger.warn(""String_Node_Str"" + player.getPlayerId());
      logger.warn(""String_Node_Str"");
      for (      PlayAreaPanel p : players.values()) {
        logger.warn(""String_Node_Str"" + p);
      }
    }
  }
  GameManager.getInstance().setStackSize(game.getStack().size());
  displayStack(game,bigCard,feedbackPanel,gameId);
  for (  ExileView exile : game.getExile()) {
    if (!exiles.containsKey(exile.getId())) {
      ExileZoneDialog newExile=new ExileZoneDialog();
      exiles.put(exile.getId(),newExile);
      MageFrame.getDesktop().add(newExile,JLayeredPane.POPUP_LAYER);
      newExile.show();
    }
    exiles.get(exile.getId()).loadCards(exile,bigCard,gameId);
  }
  showRevealed(game);
  showLookedAt(game);
  if (game.getCombat().size() > 0) {
    CombatManager.getInstance().showCombat(game.getCombat(),gameId);
  }
 else {
    CombatManager.getInstance().hideCombat(gameId);
  }
  this.revalidate();
  this.repaint();
}",0.998952879581152
159995,"public void endMessage(String message){
  this.feedbackPanel.getFeedback(FeedbackMode.END,message,false,null);
}","public void endMessage(String message){
  this.feedbackPanel.getFeedback(FeedbackMode.END,message,false,null);
  ArrowBuilder.getBuilder().removeAllArrows(gameId);
}",0.8086642599277978
159996,"private void sizeToScreen(){
  Rectangle rect=this.getBounds();
  if (rect.height < 720) {
    if (!smallMode) {
      smallMode=true;
      Dimension bbDimension=new Dimension(128,184);
      bigCard.setMaximumSize(bbDimension);
      bigCard.setMinimumSize(bbDimension);
      bigCard.setPreferredSize(bbDimension);
      pnlGameInfo.revalidate();
      pnlGameInfo.repaint();
      this.handContainer.sizeHand(0.8,smallMode);
      for (      PlayAreaPanel p : players.values()) {
        p.sizePlayer(smallMode);
      }
    }
  }
 else {
    if (smallMode) {
      smallMode=false;
      Dimension bbDimension=new Dimension(256,367);
      bigCard.setMaximumSize(bbDimension);
      bigCard.setMinimumSize(bbDimension);
      bigCard.setPreferredSize(bbDimension);
      pnlGameInfo.revalidate();
      pnlGameInfo.repaint();
      this.handContainer.sizeHand(1,smallMode);
      for (      PlayAreaPanel p : players.values()) {
        p.sizePlayer(smallMode);
      }
    }
  }
  DialogManager.getManager(gameId).setScreenWidth(rect.width);
  DialogManager.getManager(gameId).setScreenHeight(rect.height);
  DialogManager.getManager(gameId).setBounds(0,0,rect.width,rect.height);
}","private void sizeToScreen(){
  Rectangle rect=this.getBounds();
  if (rect.height < 720) {
    if (!smallMode) {
      smallMode=true;
      Dimension bbDimension=new Dimension(128,184);
      bigCard.setMaximumSize(bbDimension);
      bigCard.setMinimumSize(bbDimension);
      bigCard.setPreferredSize(bbDimension);
      pnlGameInfo.revalidate();
      pnlGameInfo.repaint();
      this.handContainer.sizeHand(0.8,smallMode);
      for (      PlayAreaPanel p : players.values()) {
        p.sizePlayer(smallMode);
      }
    }
  }
 else {
    if (smallMode) {
      smallMode=false;
      Dimension bbDimension=new Dimension(256,367);
      bigCard.setMaximumSize(bbDimension);
      bigCard.setMinimumSize(bbDimension);
      bigCard.setPreferredSize(bbDimension);
      pnlGameInfo.revalidate();
      pnlGameInfo.repaint();
      this.handContainer.sizeHand(1,smallMode);
      for (      PlayAreaPanel p : players.values()) {
        p.sizePlayer(smallMode);
      }
    }
  }
  ArrowBuilder.getBuilder().setSize(rect.width,rect.height);
  DialogManager.getManager(gameId).setScreenWidth(rect.width);
  DialogManager.getManager(gameId).setScreenHeight(rect.height);
  DialogManager.getManager(gameId).setBounds(0,0,rect.width,rect.height);
}",0.9749692244562989
159997,"private void drawArrowsForTargets(TransferData data,Point parentPoint){
  List<UUID> targets=data.card.getTargets();
  if (targets != null) {
    Point me=new Point(data.locationOnScreen);
    me.translate(-parentPoint.x,-parentPoint.y);
    for (    UUID uuid : targets) {
      PlayAreaPanel p=MageFrame.getGame(data.gameId).getPlayers().get(uuid);
      if (p != null) {
        Point target=p.getLocationOnScreen();
        target.translate(-parentPoint.x,-parentPoint.y);
        ArrowBuilder.addArrow((int)me.getX() + 35,(int)me.getY(),(int)target.getX() + 40,(int)target.getY() - 40,Color.red,ArrowBuilder.Type.TARGET);
      }
 else {
        for (        PlayAreaPanel pa : MageFrame.getGame(data.gameId).getPlayers().values()) {
          MagePermanent permanent=pa.getBattlefieldPanel().getPermanents().get(uuid);
          if (permanent != null) {
            Point target=permanent.getLocationOnScreen();
            target.translate(-parentPoint.x,-parentPoint.y);
            ArrowBuilder.addArrow((int)me.getX() + 35,(int)me.getY(),(int)target.getX() + 40,(int)target.getY() + 10,Color.red,ArrowBuilder.Type.TARGET);
          }
        }
      }
    }
  }
}","private void drawArrowsForTargets(TransferData data,Point parentPoint){
  List<UUID> targets=data.card.getTargets();
  if (targets != null) {
    Point me=new Point(data.locationOnScreen);
    me.translate(-parentPoint.x,-parentPoint.y);
    for (    UUID uuid : targets) {
      PlayAreaPanel p=MageFrame.getGame(data.gameId).getPlayers().get(uuid);
      if (p != null) {
        Point target=p.getLocationOnScreen();
        target.translate(-parentPoint.x,-parentPoint.y);
        ArrowBuilder.getBuilder().addArrow(data.gameId,(int)me.getX() + 35,(int)me.getY(),(int)target.getX() + 40,(int)target.getY() - 40,Color.red,ArrowBuilder.Type.TARGET);
      }
 else {
        for (        PlayAreaPanel pa : MageFrame.getGame(data.gameId).getPlayers().values()) {
          MagePermanent permanent=pa.getBattlefieldPanel().getPermanents().get(uuid);
          if (permanent != null) {
            Point target=permanent.getLocationOnScreen();
            target.translate(-parentPoint.x,-parentPoint.y);
            ArrowBuilder.getBuilder().addArrow(data.gameId,(int)me.getX() + 35,(int)me.getY(),(int)target.getX() + 40,(int)target.getY() + 10,Color.red,ArrowBuilder.Type.TARGET);
          }
        }
      }
    }
  }
}",0.9791492910758964
159998,"@Override public void mouseExited(MouseEvent e,final TransferData data){
  hideAll();
}","@Override public void mouseExited(MouseEvent e,final TransferData data){
  hideAll(data.gameId);
}",0.9405405405405406
159999,"private void drawArrowsForPairedCards(TransferData data,Point parentPoint){
  if (data.card.getPairedCard() != null) {
    Point me=new Point(data.locationOnScreen);
    me.translate(-parentPoint.x,-parentPoint.y);
    UUID uuid=data.card.getPairedCard();
    for (    PlayAreaPanel pa : MageFrame.getGame(data.gameId).getPlayers().values()) {
      MagePermanent permanent=pa.getBattlefieldPanel().getPermanents().get(uuid);
      if (permanent != null) {
        Point target=permanent.getLocationOnScreen();
        target.translate(-parentPoint.x,-parentPoint.y);
        ArrowBuilder.addArrow((int)me.getX() + 35,(int)me.getY(),(int)target.getX() + 40,(int)target.getY() + 10,Color.green,ArrowBuilder.Type.PAIRED);
      }
    }
  }
}","private void drawArrowsForPairedCards(TransferData data,Point parentPoint){
  if (data.card.getPairedCard() != null) {
    Point me=new Point(data.locationOnScreen);
    me.translate(-parentPoint.x,-parentPoint.y);
    UUID uuid=data.card.getPairedCard();
    for (    PlayAreaPanel pa : MageFrame.getGame(data.gameId).getPlayers().values()) {
      MagePermanent permanent=pa.getBattlefieldPanel().getPermanents().get(uuid);
      if (permanent != null) {
        Point target=permanent.getLocationOnScreen();
        target.translate(-parentPoint.x,-parentPoint.y);
        ArrowBuilder.getBuilder().addArrow(data.gameId,(int)me.getX() + 35,(int)me.getY(),(int)target.getX() + 40,(int)target.getY() + 10,Color.green,ArrowBuilder.Type.PAIRED);
      }
    }
  }
}",0.9833666001330672
160000,"public void hideAll(){
  hidePopup();
  startHideTimeout();
  this.state=false;
  ArrowBuilder.removeArrowsByType(ArrowBuilder.Type.TARGET);
  ArrowBuilder.removeArrowsByType(ArrowBuilder.Type.PAIRED);
  ArrowBuilder.removeArrowsByType(ArrowBuilder.Type.SOURCE);
}","public void hideAll(UUID gameId){
  hidePopup();
  startHideTimeout();
  this.state=false;
  ArrowBuilder.getBuilder().removeArrowsByType(gameId,ArrowBuilder.Type.TARGET);
  ArrowBuilder.getBuilder().removeArrowsByType(gameId,ArrowBuilder.Type.PAIRED);
  ArrowBuilder.getBuilder().removeArrowsByType(gameId,ArrowBuilder.Type.SOURCE);
}",0.8814691151919867
